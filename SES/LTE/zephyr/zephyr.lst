
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	2002ea58 	.word	0x2002ea58
    c004:	000100e1 	.word	0x000100e1
    c008:	00022f09 	.word	0x00022f09
    c00c:	00010111 	.word	0x00010111
    c010:	00010111 	.word	0x00010111
    c014:	00010111 	.word	0x00010111
    c018:	00010111 	.word	0x00010111
    c01c:	00010111 	.word	0x00010111
	...
    c02c:	00010051 	.word	0x00010051
    c030:	00010111 	.word	0x00010111
    c034:	00000000 	.word	0x00000000
    c038:	0000ffa1 	.word	0x0000ffa1
    c03c:	00022ee7 	.word	0x00022ee7

0000c040 <_irq_vector_table>:
    c040:	000100a1 000100a1 000100a1 000100a1     ................
    c050:	000100a1 000100a1 000100a1 000100a1     ................
    c060:	000100a1 000100a1 000100a1 000100a1     ................
    c070:	000100a1 000100a1 000100a1 000100a1     ................
    c080:	000100a1 000100a1 000100a1 000100a1     ................
    c090:	000100a1 000100a1 000100a1 000100a1     ................
    c0a0:	000100a1 000100a1 000100a1 000100a1     ................
    c0b0:	00013add 000263c9 000100a1 000100a1     .:...c..........
    c0c0:	000100a1 000100a1 000100a1 000100a1     ................
    c0d0:	000100a1 000100a1 000100a1 000100a1     ................
    c0e0:	000100a1 000100a1 000263e7 000100a1     .........c......
    c0f0:	000100a1 000100a1 000100a1 000100a1     ................
    c100:	000100a1 000100a1 000100a1 000100a1     ................
    c110:	000100a1 000100a1 000100a1 000100a1     ................
    c120:	000100a1 000100a1 000100a1 000100a1     ................
    c130:	000100a1 000100a1 000100a1 000100a1     ................
    c140:	000100a1                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	0001e484 00000001 0000c000 0000c000     ................
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_drsub>:
    c240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c244:	e002      	b.n	c24c <__adddf3>
    c246:	bf00      	nop

0000c248 <__aeabi_dsub>:
    c248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c24c <__adddf3>:
    c24c:	b530      	push	{r4, r5, lr}
    c24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c256:	ea94 0f05 	teq	r4, r5
    c25a:	bf08      	it	eq
    c25c:	ea90 0f02 	teqeq	r0, r2
    c260:	bf1f      	itttt	ne
    c262:	ea54 0c00 	orrsne.w	ip, r4, r0
    c266:	ea55 0c02 	orrsne.w	ip, r5, r2
    c26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c272:	f000 80e2 	beq.w	c43a <__adddf3+0x1ee>
    c276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27e:	bfb8      	it	lt
    c280:	426d      	neglt	r5, r5
    c282:	dd0c      	ble.n	c29e <__adddf3+0x52>
    c284:	442c      	add	r4, r5
    c286:	ea80 0202 	eor.w	r2, r0, r2
    c28a:	ea81 0303 	eor.w	r3, r1, r3
    c28e:	ea82 0000 	eor.w	r0, r2, r0
    c292:	ea83 0101 	eor.w	r1, r3, r1
    c296:	ea80 0202 	eor.w	r2, r0, r2
    c29a:	ea81 0303 	eor.w	r3, r1, r3
    c29e:	2d36      	cmp	r5, #54	; 0x36
    c2a0:	bf88      	it	hi
    c2a2:	bd30      	pophi	{r4, r5, pc}
    c2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b4:	d002      	beq.n	c2bc <__adddf3+0x70>
    c2b6:	4240      	negs	r0, r0
    c2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c8:	d002      	beq.n	c2d0 <__adddf3+0x84>
    c2ca:	4252      	negs	r2, r2
    c2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2d0:	ea94 0f05 	teq	r4, r5
    c2d4:	f000 80a7 	beq.w	c426 <__adddf3+0x1da>
    c2d8:	f1a4 0401 	sub.w	r4, r4, #1
    c2dc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2e0:	db0d      	blt.n	c2fe <__adddf3+0xb2>
    c2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ea:	1880      	adds	r0, r0, r2
    c2ec:	f141 0100 	adc.w	r1, r1, #0
    c2f0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f4:	1880      	adds	r0, r0, r2
    c2f6:	fa43 f305 	asr.w	r3, r3, r5
    c2fa:	4159      	adcs	r1, r3
    c2fc:	e00e      	b.n	c31c <__adddf3+0xd0>
    c2fe:	f1a5 0520 	sub.w	r5, r5, #32
    c302:	f10e 0e20 	add.w	lr, lr, #32
    c306:	2a01      	cmp	r2, #1
    c308:	fa03 fc0e 	lsl.w	ip, r3, lr
    c30c:	bf28      	it	cs
    c30e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c312:	fa43 f305 	asr.w	r3, r3, r5
    c316:	18c0      	adds	r0, r0, r3
    c318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c320:	d507      	bpl.n	c332 <__adddf3+0xe6>
    c322:	f04f 0e00 	mov.w	lr, #0
    c326:	f1dc 0c00 	rsbs	ip, ip, #0
    c32a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32e:	eb6e 0101 	sbc.w	r1, lr, r1
    c332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c336:	d31b      	bcc.n	c370 <__adddf3+0x124>
    c338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c33c:	d30c      	bcc.n	c358 <__adddf3+0x10c>
    c33e:	0849      	lsrs	r1, r1, #1
    c340:	ea5f 0030 	movs.w	r0, r0, rrx
    c344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c348:	f104 0401 	add.w	r4, r4, #1
    c34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c354:	f080 809a 	bcs.w	c48c <__adddf3+0x240>
    c358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c35c:	bf08      	it	eq
    c35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c362:	f150 0000 	adcs.w	r0, r0, #0
    c366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c36a:	ea41 0105 	orr.w	r1, r1, r5
    c36e:	bd30      	pop	{r4, r5, pc}
    c370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c374:	4140      	adcs	r0, r0
    c376:	eb41 0101 	adc.w	r1, r1, r1
    c37a:	3c01      	subs	r4, #1
    c37c:	bf28      	it	cs
    c37e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c382:	d2e9      	bcs.n	c358 <__adddf3+0x10c>
    c384:	f091 0f00 	teq	r1, #0
    c388:	bf04      	itt	eq
    c38a:	4601      	moveq	r1, r0
    c38c:	2000      	moveq	r0, #0
    c38e:	fab1 f381 	clz	r3, r1
    c392:	bf08      	it	eq
    c394:	3320      	addeq	r3, #32
    c396:	f1a3 030b 	sub.w	r3, r3, #11
    c39a:	f1b3 0220 	subs.w	r2, r3, #32
    c39e:	da0c      	bge.n	c3ba <__adddf3+0x16e>
    c3a0:	320c      	adds	r2, #12
    c3a2:	dd08      	ble.n	c3b6 <__adddf3+0x16a>
    c3a4:	f102 0c14 	add.w	ip, r2, #20
    c3a8:	f1c2 020c 	rsb	r2, r2, #12
    c3ac:	fa01 f00c 	lsl.w	r0, r1, ip
    c3b0:	fa21 f102 	lsr.w	r1, r1, r2
    c3b4:	e00c      	b.n	c3d0 <__adddf3+0x184>
    c3b6:	f102 0214 	add.w	r2, r2, #20
    c3ba:	bfd8      	it	le
    c3bc:	f1c2 0c20 	rsble	ip, r2, #32
    c3c0:	fa01 f102 	lsl.w	r1, r1, r2
    c3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c8:	bfdc      	itt	le
    c3ca:	ea41 010c 	orrle.w	r1, r1, ip
    c3ce:	4090      	lslle	r0, r2
    c3d0:	1ae4      	subs	r4, r4, r3
    c3d2:	bfa2      	ittt	ge
    c3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d8:	4329      	orrge	r1, r5
    c3da:	bd30      	popge	{r4, r5, pc}
    c3dc:	ea6f 0404 	mvn.w	r4, r4
    c3e0:	3c1f      	subs	r4, #31
    c3e2:	da1c      	bge.n	c41e <__adddf3+0x1d2>
    c3e4:	340c      	adds	r4, #12
    c3e6:	dc0e      	bgt.n	c406 <__adddf3+0x1ba>
    c3e8:	f104 0414 	add.w	r4, r4, #20
    c3ec:	f1c4 0220 	rsb	r2, r4, #32
    c3f0:	fa20 f004 	lsr.w	r0, r0, r4
    c3f4:	fa01 f302 	lsl.w	r3, r1, r2
    c3f8:	ea40 0003 	orr.w	r0, r0, r3
    c3fc:	fa21 f304 	lsr.w	r3, r1, r4
    c400:	ea45 0103 	orr.w	r1, r5, r3
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f1c4 040c 	rsb	r4, r4, #12
    c40a:	f1c4 0220 	rsb	r2, r4, #32
    c40e:	fa20 f002 	lsr.w	r0, r0, r2
    c412:	fa01 f304 	lsl.w	r3, r1, r4
    c416:	ea40 0003 	orr.w	r0, r0, r3
    c41a:	4629      	mov	r1, r5
    c41c:	bd30      	pop	{r4, r5, pc}
    c41e:	fa21 f004 	lsr.w	r0, r1, r4
    c422:	4629      	mov	r1, r5
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	f094 0f00 	teq	r4, #0
    c42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42e:	bf06      	itte	eq
    c430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c434:	3401      	addeq	r4, #1
    c436:	3d01      	subne	r5, #1
    c438:	e74e      	b.n	c2d8 <__adddf3+0x8c>
    c43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43e:	bf18      	it	ne
    c440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c444:	d029      	beq.n	c49a <__adddf3+0x24e>
    c446:	ea94 0f05 	teq	r4, r5
    c44a:	bf08      	it	eq
    c44c:	ea90 0f02 	teqeq	r0, r2
    c450:	d005      	beq.n	c45e <__adddf3+0x212>
    c452:	ea54 0c00 	orrs.w	ip, r4, r0
    c456:	bf04      	itt	eq
    c458:	4619      	moveq	r1, r3
    c45a:	4610      	moveq	r0, r2
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	ea91 0f03 	teq	r1, r3
    c462:	bf1e      	ittt	ne
    c464:	2100      	movne	r1, #0
    c466:	2000      	movne	r0, #0
    c468:	bd30      	popne	{r4, r5, pc}
    c46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46e:	d105      	bne.n	c47c <__adddf3+0x230>
    c470:	0040      	lsls	r0, r0, #1
    c472:	4149      	adcs	r1, r1
    c474:	bf28      	it	cs
    c476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c47a:	bd30      	pop	{r4, r5, pc}
    c47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c480:	bf3c      	itt	cc
    c482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c486:	bd30      	popcc	{r4, r5, pc}
    c488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c494:	f04f 0000 	mov.w	r0, #0
    c498:	bd30      	pop	{r4, r5, pc}
    c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49e:	bf1a      	itte	ne
    c4a0:	4619      	movne	r1, r3
    c4a2:	4610      	movne	r0, r2
    c4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a8:	bf1c      	itt	ne
    c4aa:	460b      	movne	r3, r1
    c4ac:	4602      	movne	r2, r0
    c4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4b2:	bf06      	itte	eq
    c4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b8:	ea91 0f03 	teqeq	r1, r3
    c4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_ui2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f04f 0500 	mov.w	r5, #0
    c4dc:	f04f 0100 	mov.w	r1, #0
    c4e0:	e750      	b.n	c384 <__adddf3+0x138>
    c4e2:	bf00      	nop

0000c4e4 <__aeabi_i2d>:
    c4e4:	f090 0f00 	teq	r0, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2100      	moveq	r1, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	b530      	push	{r4, r5, lr}
    c4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4fc:	bf48      	it	mi
    c4fe:	4240      	negmi	r0, r0
    c500:	f04f 0100 	mov.w	r1, #0
    c504:	e73e      	b.n	c384 <__adddf3+0x138>
    c506:	bf00      	nop

0000c508 <__aeabi_f2d>:
    c508:	0042      	lsls	r2, r0, #1
    c50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50e:	ea4f 0131 	mov.w	r1, r1, rrx
    c512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c516:	bf1f      	itttt	ne
    c518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c524:	4770      	bxne	lr
    c526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c52a:	bf08      	it	eq
    c52c:	4770      	bxeq	lr
    c52e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c532:	bf04      	itt	eq
    c534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c538:	4770      	bxeq	lr
    c53a:	b530      	push	{r4, r5, lr}
    c53c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c548:	e71c      	b.n	c384 <__adddf3+0x138>
    c54a:	bf00      	nop

0000c54c <__aeabi_ul2d>:
    c54c:	ea50 0201 	orrs.w	r2, r0, r1
    c550:	bf08      	it	eq
    c552:	4770      	bxeq	lr
    c554:	b530      	push	{r4, r5, lr}
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	e00a      	b.n	c572 <__aeabi_l2d+0x16>

0000c55c <__aeabi_l2d>:
    c55c:	ea50 0201 	orrs.w	r2, r0, r1
    c560:	bf08      	it	eq
    c562:	4770      	bxeq	lr
    c564:	b530      	push	{r4, r5, lr}
    c566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c56a:	d502      	bpl.n	c572 <__aeabi_l2d+0x16>
    c56c:	4240      	negs	r0, r0
    c56e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57e:	f43f aed8 	beq.w	c332 <__adddf3+0xe6>
    c582:	f04f 0203 	mov.w	r2, #3
    c586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58a:	bf18      	it	ne
    c58c:	3203      	addne	r2, #3
    c58e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c592:	bf18      	it	ne
    c594:	3203      	addne	r2, #3
    c596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c59a:	f1c2 0320 	rsb	r3, r2, #32
    c59e:	fa00 fc03 	lsl.w	ip, r0, r3
    c5a2:	fa20 f002 	lsr.w	r0, r0, r2
    c5a6:	fa01 fe03 	lsl.w	lr, r1, r3
    c5aa:	ea40 000e 	orr.w	r0, r0, lr
    c5ae:	fa21 f102 	lsr.w	r1, r1, r2
    c5b2:	4414      	add	r4, r2
    c5b4:	e6bd      	b.n	c332 <__adddf3+0xe6>
    c5b6:	bf00      	nop

0000c5b8 <__gedf2>:
    c5b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    c5bc:	e006      	b.n	c5cc <__cmpdf2+0x4>
    c5be:	bf00      	nop

0000c5c0 <__ledf2>:
    c5c0:	f04f 0c01 	mov.w	ip, #1
    c5c4:	e002      	b.n	c5cc <__cmpdf2+0x4>
    c5c6:	bf00      	nop

0000c5c8 <__cmpdf2>:
    c5c8:	f04f 0c01 	mov.w	ip, #1
    c5cc:	f84d cd04 	str.w	ip, [sp, #-4]!
    c5d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c5d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c5d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c5dc:	bf18      	it	ne
    c5de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    c5e2:	d01b      	beq.n	c61c <__cmpdf2+0x54>
    c5e4:	b001      	add	sp, #4
    c5e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    c5ea:	bf0c      	ite	eq
    c5ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    c5f0:	ea91 0f03 	teqne	r1, r3
    c5f4:	bf02      	ittt	eq
    c5f6:	ea90 0f02 	teqeq	r0, r2
    c5fa:	2000      	moveq	r0, #0
    c5fc:	4770      	bxeq	lr
    c5fe:	f110 0f00 	cmn.w	r0, #0
    c602:	ea91 0f03 	teq	r1, r3
    c606:	bf58      	it	pl
    c608:	4299      	cmppl	r1, r3
    c60a:	bf08      	it	eq
    c60c:	4290      	cmpeq	r0, r2
    c60e:	bf2c      	ite	cs
    c610:	17d8      	asrcs	r0, r3, #31
    c612:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    c616:	f040 0001 	orr.w	r0, r0, #1
    c61a:	4770      	bx	lr
    c61c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c624:	d102      	bne.n	c62c <__cmpdf2+0x64>
    c626:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c62a:	d107      	bne.n	c63c <__cmpdf2+0x74>
    c62c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c630:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c634:	d1d6      	bne.n	c5e4 <__cmpdf2+0x1c>
    c636:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c63a:	d0d3      	beq.n	c5e4 <__cmpdf2+0x1c>
    c63c:	f85d 0b04 	ldr.w	r0, [sp], #4
    c640:	4770      	bx	lr
    c642:	bf00      	nop

0000c644 <__aeabi_cdrcmple>:
    c644:	4684      	mov	ip, r0
    c646:	4610      	mov	r0, r2
    c648:	4662      	mov	r2, ip
    c64a:	468c      	mov	ip, r1
    c64c:	4619      	mov	r1, r3
    c64e:	4663      	mov	r3, ip
    c650:	e000      	b.n	c654 <__aeabi_cdcmpeq>
    c652:	bf00      	nop

0000c654 <__aeabi_cdcmpeq>:
    c654:	b501      	push	{r0, lr}
    c656:	f7ff ffb7 	bl	c5c8 <__cmpdf2>
    c65a:	2800      	cmp	r0, #0
    c65c:	bf48      	it	mi
    c65e:	f110 0f00 	cmnmi.w	r0, #0
    c662:	bd01      	pop	{r0, pc}

0000c664 <__aeabi_dcmpeq>:
    c664:	f84d ed08 	str.w	lr, [sp, #-8]!
    c668:	f7ff fff4 	bl	c654 <__aeabi_cdcmpeq>
    c66c:	bf0c      	ite	eq
    c66e:	2001      	moveq	r0, #1
    c670:	2000      	movne	r0, #0
    c672:	f85d fb08 	ldr.w	pc, [sp], #8
    c676:	bf00      	nop

0000c678 <__aeabi_dcmplt>:
    c678:	f84d ed08 	str.w	lr, [sp, #-8]!
    c67c:	f7ff ffea 	bl	c654 <__aeabi_cdcmpeq>
    c680:	bf34      	ite	cc
    c682:	2001      	movcc	r0, #1
    c684:	2000      	movcs	r0, #0
    c686:	f85d fb08 	ldr.w	pc, [sp], #8
    c68a:	bf00      	nop

0000c68c <__aeabi_dcmple>:
    c68c:	f84d ed08 	str.w	lr, [sp, #-8]!
    c690:	f7ff ffe0 	bl	c654 <__aeabi_cdcmpeq>
    c694:	bf94      	ite	ls
    c696:	2001      	movls	r0, #1
    c698:	2000      	movhi	r0, #0
    c69a:	f85d fb08 	ldr.w	pc, [sp], #8
    c69e:	bf00      	nop

0000c6a0 <__aeabi_dcmpge>:
    c6a0:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6a4:	f7ff ffce 	bl	c644 <__aeabi_cdrcmple>
    c6a8:	bf94      	ite	ls
    c6aa:	2001      	movls	r0, #1
    c6ac:	2000      	movhi	r0, #0
    c6ae:	f85d fb08 	ldr.w	pc, [sp], #8
    c6b2:	bf00      	nop

0000c6b4 <__aeabi_dcmpgt>:
    c6b4:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6b8:	f7ff ffc4 	bl	c644 <__aeabi_cdrcmple>
    c6bc:	bf34      	ite	cc
    c6be:	2001      	movcc	r0, #1
    c6c0:	2000      	movcs	r0, #0
    c6c2:	f85d fb08 	ldr.w	pc, [sp], #8
    c6c6:	bf00      	nop

0000c6c8 <__aeabi_d2iz>:
    c6c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c6cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c6d0:	d215      	bcs.n	c6fe <__aeabi_d2iz+0x36>
    c6d2:	d511      	bpl.n	c6f8 <__aeabi_d2iz+0x30>
    c6d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c6d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c6dc:	d912      	bls.n	c704 <__aeabi_d2iz+0x3c>
    c6de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c6e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c6e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c6ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c6ee:	fa23 f002 	lsr.w	r0, r3, r2
    c6f2:	bf18      	it	ne
    c6f4:	4240      	negne	r0, r0
    c6f6:	4770      	bx	lr
    c6f8:	f04f 0000 	mov.w	r0, #0
    c6fc:	4770      	bx	lr
    c6fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c702:	d105      	bne.n	c710 <__aeabi_d2iz+0x48>
    c704:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    c708:	bf08      	it	eq
    c70a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    c70e:	4770      	bx	lr
    c710:	f04f 0000 	mov.w	r0, #0
    c714:	4770      	bx	lr
    c716:	bf00      	nop

0000c718 <__aeabi_d2f>:
    c718:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c71c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c720:	bf24      	itt	cs
    c722:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c726:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c72a:	d90d      	bls.n	c748 <__aeabi_d2f+0x30>
    c72c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c730:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c734:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c738:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c73c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c740:	bf08      	it	eq
    c742:	f020 0001 	biceq.w	r0, r0, #1
    c746:	4770      	bx	lr
    c748:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c74c:	d121      	bne.n	c792 <__aeabi_d2f+0x7a>
    c74e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c752:	bfbc      	itt	lt
    c754:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c758:	4770      	bxlt	lr
    c75a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c75e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c762:	f1c2 0218 	rsb	r2, r2, #24
    c766:	f1c2 0c20 	rsb	ip, r2, #32
    c76a:	fa10 f30c 	lsls.w	r3, r0, ip
    c76e:	fa20 f002 	lsr.w	r0, r0, r2
    c772:	bf18      	it	ne
    c774:	f040 0001 	orrne.w	r0, r0, #1
    c778:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c77c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c780:	fa03 fc0c 	lsl.w	ip, r3, ip
    c784:	ea40 000c 	orr.w	r0, r0, ip
    c788:	fa23 f302 	lsr.w	r3, r3, r2
    c78c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c790:	e7cc      	b.n	c72c <__aeabi_d2f+0x14>
    c792:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c796:	d107      	bne.n	c7a8 <__aeabi_d2f+0x90>
    c798:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c79c:	bf1e      	ittt	ne
    c79e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c7a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c7a6:	4770      	bxne	lr
    c7a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c7ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c7b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c7b4:	4770      	bx	lr
    c7b6:	bf00      	nop

0000c7b8 <__aeabi_uldivmod>:
    c7b8:	b953      	cbnz	r3, c7d0 <__aeabi_uldivmod+0x18>
    c7ba:	b94a      	cbnz	r2, c7d0 <__aeabi_uldivmod+0x18>
    c7bc:	2900      	cmp	r1, #0
    c7be:	bf08      	it	eq
    c7c0:	2800      	cmpeq	r0, #0
    c7c2:	bf1c      	itt	ne
    c7c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c7c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c7cc:	f000 b980 	b.w	cad0 <__aeabi_idiv0>
    c7d0:	f1ad 0c08 	sub.w	ip, sp, #8
    c7d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c7d8:	f000 f806 	bl	c7e8 <__udivmoddi4>
    c7dc:	f8dd e004 	ldr.w	lr, [sp, #4]
    c7e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c7e4:	b004      	add	sp, #16
    c7e6:	4770      	bx	lr

0000c7e8 <__udivmoddi4>:
    c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c7ee:	4604      	mov	r4, r0
    c7f0:	4688      	mov	r8, r1
    c7f2:	2b00      	cmp	r3, #0
    c7f4:	f040 8084 	bne.w	c900 <__udivmoddi4+0x118>
    c7f8:	428a      	cmp	r2, r1
    c7fa:	4617      	mov	r7, r2
    c7fc:	d943      	bls.n	c886 <__udivmoddi4+0x9e>
    c7fe:	fab2 f282 	clz	r2, r2
    c802:	b142      	cbz	r2, c816 <__udivmoddi4+0x2e>
    c804:	f1c2 0020 	rsb	r0, r2, #32
    c808:	4091      	lsls	r1, r2
    c80a:	4097      	lsls	r7, r2
    c80c:	fa24 f000 	lsr.w	r0, r4, r0
    c810:	4094      	lsls	r4, r2
    c812:	ea40 0801 	orr.w	r8, r0, r1
    c816:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c81a:	0c23      	lsrs	r3, r4, #16
    c81c:	fa1f fe87 	uxth.w	lr, r7
    c820:	fbb8 f6fc 	udiv	r6, r8, ip
    c824:	fb0c 8116 	mls	r1, ip, r6, r8
    c828:	fb06 f00e 	mul.w	r0, r6, lr
    c82c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c830:	4298      	cmp	r0, r3
    c832:	d907      	bls.n	c844 <__udivmoddi4+0x5c>
    c834:	18fb      	adds	r3, r7, r3
    c836:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
    c83a:	d202      	bcs.n	c842 <__udivmoddi4+0x5a>
    c83c:	4298      	cmp	r0, r3
    c83e:	f200 8131 	bhi.w	caa4 <__udivmoddi4+0x2bc>
    c842:	460e      	mov	r6, r1
    c844:	1a19      	subs	r1, r3, r0
    c846:	b2a3      	uxth	r3, r4
    c848:	fbb1 f0fc 	udiv	r0, r1, ip
    c84c:	fb0c 1110 	mls	r1, ip, r0, r1
    c850:	fb00 fe0e 	mul.w	lr, r0, lr
    c854:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c858:	45a6      	cmp	lr, r4
    c85a:	d907      	bls.n	c86c <__udivmoddi4+0x84>
    c85c:	193c      	adds	r4, r7, r4
    c85e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c862:	d202      	bcs.n	c86a <__udivmoddi4+0x82>
    c864:	45a6      	cmp	lr, r4
    c866:	f200 811a 	bhi.w	ca9e <__udivmoddi4+0x2b6>
    c86a:	4618      	mov	r0, r3
    c86c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    c870:	eba4 040e 	sub.w	r4, r4, lr
    c874:	2600      	movs	r6, #0
    c876:	b11d      	cbz	r5, c880 <__udivmoddi4+0x98>
    c878:	40d4      	lsrs	r4, r2
    c87a:	2300      	movs	r3, #0
    c87c:	e9c5 4300 	strd	r4, r3, [r5]
    c880:	4631      	mov	r1, r6
    c882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c886:	b902      	cbnz	r2, c88a <__udivmoddi4+0xa2>
    c888:	deff      	udf	#255	; 0xff
    c88a:	fab2 f282 	clz	r2, r2
    c88e:	2a00      	cmp	r2, #0
    c890:	d152      	bne.n	c938 <__udivmoddi4+0x150>
    c892:	1bcb      	subs	r3, r1, r7
    c894:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c898:	fa1f f887 	uxth.w	r8, r7
    c89c:	2601      	movs	r6, #1
    c89e:	0c21      	lsrs	r1, r4, #16
    c8a0:	fbb3 fcfe 	udiv	ip, r3, lr
    c8a4:	fb0e 301c 	mls	r0, lr, ip, r3
    c8a8:	fb08 f90c 	mul.w	r9, r8, ip
    c8ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c8b0:	4589      	cmp	r9, r1
    c8b2:	d90b      	bls.n	c8cc <__udivmoddi4+0xe4>
    c8b4:	1879      	adds	r1, r7, r1
    c8b6:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    c8ba:	bf2c      	ite	cs
    c8bc:	2001      	movcs	r0, #1
    c8be:	2000      	movcc	r0, #0
    c8c0:	4589      	cmp	r9, r1
    c8c2:	d902      	bls.n	c8ca <__udivmoddi4+0xe2>
    c8c4:	2800      	cmp	r0, #0
    c8c6:	f000 80f0 	beq.w	caaa <__udivmoddi4+0x2c2>
    c8ca:	469c      	mov	ip, r3
    c8cc:	eba1 0109 	sub.w	r1, r1, r9
    c8d0:	b2a3      	uxth	r3, r4
    c8d2:	fbb1 f0fe 	udiv	r0, r1, lr
    c8d6:	fb0e 1110 	mls	r1, lr, r0, r1
    c8da:	fb08 f800 	mul.w	r8, r8, r0
    c8de:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c8e2:	45a0      	cmp	r8, r4
    c8e4:	d907      	bls.n	c8f6 <__udivmoddi4+0x10e>
    c8e6:	193c      	adds	r4, r7, r4
    c8e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c8ec:	d202      	bcs.n	c8f4 <__udivmoddi4+0x10c>
    c8ee:	45a0      	cmp	r8, r4
    c8f0:	f200 80d2 	bhi.w	ca98 <__udivmoddi4+0x2b0>
    c8f4:	4618      	mov	r0, r3
    c8f6:	eba4 0408 	sub.w	r4, r4, r8
    c8fa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c8fe:	e7ba      	b.n	c876 <__udivmoddi4+0x8e>
    c900:	428b      	cmp	r3, r1
    c902:	d909      	bls.n	c918 <__udivmoddi4+0x130>
    c904:	2d00      	cmp	r5, #0
    c906:	f000 80be 	beq.w	ca86 <__udivmoddi4+0x29e>
    c90a:	2600      	movs	r6, #0
    c90c:	e9c5 0100 	strd	r0, r1, [r5]
    c910:	4630      	mov	r0, r6
    c912:	4631      	mov	r1, r6
    c914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c918:	fab3 f683 	clz	r6, r3
    c91c:	2e00      	cmp	r6, #0
    c91e:	d14d      	bne.n	c9bc <__udivmoddi4+0x1d4>
    c920:	428b      	cmp	r3, r1
    c922:	f0c0 80b3 	bcc.w	ca8c <__udivmoddi4+0x2a4>
    c926:	4282      	cmp	r2, r0
    c928:	f240 80b0 	bls.w	ca8c <__udivmoddi4+0x2a4>
    c92c:	4630      	mov	r0, r6
    c92e:	2d00      	cmp	r5, #0
    c930:	d0a6      	beq.n	c880 <__udivmoddi4+0x98>
    c932:	e9c5 4800 	strd	r4, r8, [r5]
    c936:	e7a3      	b.n	c880 <__udivmoddi4+0x98>
    c938:	4097      	lsls	r7, r2
    c93a:	f1c2 0320 	rsb	r3, r2, #32
    c93e:	fa01 f002 	lsl.w	r0, r1, r2
    c942:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c946:	40d9      	lsrs	r1, r3
    c948:	fa24 f303 	lsr.w	r3, r4, r3
    c94c:	fa1f f887 	uxth.w	r8, r7
    c950:	4094      	lsls	r4, r2
    c952:	4303      	orrs	r3, r0
    c954:	fbb1 f0fe 	udiv	r0, r1, lr
    c958:	0c1e      	lsrs	r6, r3, #16
    c95a:	fb0e 1110 	mls	r1, lr, r0, r1
    c95e:	fb00 fc08 	mul.w	ip, r0, r8
    c962:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    c966:	458c      	cmp	ip, r1
    c968:	d90e      	bls.n	c988 <__udivmoddi4+0x1a0>
    c96a:	1879      	adds	r1, r7, r1
    c96c:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
    c970:	bf2c      	ite	cs
    c972:	f04f 0901 	movcs.w	r9, #1
    c976:	f04f 0900 	movcc.w	r9, #0
    c97a:	458c      	cmp	ip, r1
    c97c:	d903      	bls.n	c986 <__udivmoddi4+0x19e>
    c97e:	f1b9 0f00 	cmp.w	r9, #0
    c982:	f000 8096 	beq.w	cab2 <__udivmoddi4+0x2ca>
    c986:	4630      	mov	r0, r6
    c988:	eba1 010c 	sub.w	r1, r1, ip
    c98c:	b29b      	uxth	r3, r3
    c98e:	fbb1 f6fe 	udiv	r6, r1, lr
    c992:	fb0e 1116 	mls	r1, lr, r6, r1
    c996:	fb06 fc08 	mul.w	ip, r6, r8
    c99a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    c99e:	458c      	cmp	ip, r1
    c9a0:	d907      	bls.n	c9b2 <__udivmoddi4+0x1ca>
    c9a2:	1879      	adds	r1, r7, r1
    c9a4:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
    c9a8:	d202      	bcs.n	c9b0 <__udivmoddi4+0x1c8>
    c9aa:	458c      	cmp	ip, r1
    c9ac:	f200 8088 	bhi.w	cac0 <__udivmoddi4+0x2d8>
    c9b0:	461e      	mov	r6, r3
    c9b2:	eba1 030c 	sub.w	r3, r1, ip
    c9b6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    c9ba:	e770      	b.n	c89e <__udivmoddi4+0xb6>
    c9bc:	f1c6 0720 	rsb	r7, r6, #32
    c9c0:	fa03 f406 	lsl.w	r4, r3, r6
    c9c4:	fa02 fc06 	lsl.w	ip, r2, r6
    c9c8:	fa01 fe06 	lsl.w	lr, r1, r6
    c9cc:	40fa      	lsrs	r2, r7
    c9ce:	fa20 f807 	lsr.w	r8, r0, r7
    c9d2:	40f9      	lsrs	r1, r7
    c9d4:	fa00 f306 	lsl.w	r3, r0, r6
    c9d8:	4322      	orrs	r2, r4
    c9da:	ea48 040e 	orr.w	r4, r8, lr
    c9de:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c9e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    c9e6:	fa1f f982 	uxth.w	r9, r2
    c9ea:	fbb1 faf8 	udiv	sl, r1, r8
    c9ee:	fb08 111a 	mls	r1, r8, sl, r1
    c9f2:	fb0a f009 	mul.w	r0, sl, r9
    c9f6:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    c9fa:	4570      	cmp	r0, lr
    c9fc:	d90e      	bls.n	ca1c <__udivmoddi4+0x234>
    c9fe:	eb12 0e0e 	adds.w	lr, r2, lr
    ca02:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
    ca06:	bf2c      	ite	cs
    ca08:	f04f 0b01 	movcs.w	fp, #1
    ca0c:	f04f 0b00 	movcc.w	fp, #0
    ca10:	4570      	cmp	r0, lr
    ca12:	d902      	bls.n	ca1a <__udivmoddi4+0x232>
    ca14:	f1bb 0f00 	cmp.w	fp, #0
    ca18:	d04e      	beq.n	cab8 <__udivmoddi4+0x2d0>
    ca1a:	468a      	mov	sl, r1
    ca1c:	ebae 0e00 	sub.w	lr, lr, r0
    ca20:	b2a4      	uxth	r4, r4
    ca22:	fbbe f0f8 	udiv	r0, lr, r8
    ca26:	fb08 ee10 	mls	lr, r8, r0, lr
    ca2a:	fb00 f909 	mul.w	r9, r0, r9
    ca2e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
    ca32:	45f1      	cmp	r9, lr
    ca34:	d907      	bls.n	ca46 <__udivmoddi4+0x25e>
    ca36:	eb12 0e0e 	adds.w	lr, r2, lr
    ca3a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
    ca3e:	d201      	bcs.n	ca44 <__udivmoddi4+0x25c>
    ca40:	45f1      	cmp	r9, lr
    ca42:	d840      	bhi.n	cac6 <__udivmoddi4+0x2de>
    ca44:	4608      	mov	r0, r1
    ca46:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    ca4a:	ebae 0e09 	sub.w	lr, lr, r9
    ca4e:	fba0 890c 	umull	r8, r9, r0, ip
    ca52:	45ce      	cmp	lr, r9
    ca54:	4641      	mov	r1, r8
    ca56:	464c      	mov	r4, r9
    ca58:	d302      	bcc.n	ca60 <__udivmoddi4+0x278>
    ca5a:	d106      	bne.n	ca6a <__udivmoddi4+0x282>
    ca5c:	4543      	cmp	r3, r8
    ca5e:	d204      	bcs.n	ca6a <__udivmoddi4+0x282>
    ca60:	3801      	subs	r0, #1
    ca62:	ebb8 010c 	subs.w	r1, r8, ip
    ca66:	eb69 0402 	sbc.w	r4, r9, r2
    ca6a:	b37d      	cbz	r5, cacc <__udivmoddi4+0x2e4>
    ca6c:	1a5a      	subs	r2, r3, r1
    ca6e:	eb6e 0e04 	sbc.w	lr, lr, r4
    ca72:	40f2      	lsrs	r2, r6
    ca74:	fa0e f707 	lsl.w	r7, lr, r7
    ca78:	fa2e f306 	lsr.w	r3, lr, r6
    ca7c:	2600      	movs	r6, #0
    ca7e:	4317      	orrs	r7, r2
    ca80:	e9c5 7300 	strd	r7, r3, [r5]
    ca84:	e6fc      	b.n	c880 <__udivmoddi4+0x98>
    ca86:	462e      	mov	r6, r5
    ca88:	4628      	mov	r0, r5
    ca8a:	e6f9      	b.n	c880 <__udivmoddi4+0x98>
    ca8c:	1a84      	subs	r4, r0, r2
    ca8e:	eb61 0103 	sbc.w	r1, r1, r3
    ca92:	2001      	movs	r0, #1
    ca94:	4688      	mov	r8, r1
    ca96:	e74a      	b.n	c92e <__udivmoddi4+0x146>
    ca98:	3802      	subs	r0, #2
    ca9a:	443c      	add	r4, r7
    ca9c:	e72b      	b.n	c8f6 <__udivmoddi4+0x10e>
    ca9e:	3802      	subs	r0, #2
    caa0:	443c      	add	r4, r7
    caa2:	e6e3      	b.n	c86c <__udivmoddi4+0x84>
    caa4:	3e02      	subs	r6, #2
    caa6:	443b      	add	r3, r7
    caa8:	e6cc      	b.n	c844 <__udivmoddi4+0x5c>
    caaa:	f1ac 0c02 	sub.w	ip, ip, #2
    caae:	4439      	add	r1, r7
    cab0:	e70c      	b.n	c8cc <__udivmoddi4+0xe4>
    cab2:	3802      	subs	r0, #2
    cab4:	4439      	add	r1, r7
    cab6:	e767      	b.n	c988 <__udivmoddi4+0x1a0>
    cab8:	f1aa 0a02 	sub.w	sl, sl, #2
    cabc:	4496      	add	lr, r2
    cabe:	e7ad      	b.n	ca1c <__udivmoddi4+0x234>
    cac0:	3e02      	subs	r6, #2
    cac2:	4439      	add	r1, r7
    cac4:	e775      	b.n	c9b2 <__udivmoddi4+0x1ca>
    cac6:	3802      	subs	r0, #2
    cac8:	4496      	add	lr, r2
    caca:	e7bc      	b.n	ca46 <__udivmoddi4+0x25e>
    cacc:	462e      	mov	r6, r5
    cace:	e6d7      	b.n	c880 <__udivmoddi4+0x98>

0000cad0 <__aeabi_idiv0>:
    cad0:	4770      	bx	lr
    cad2:	bf00      	nop

0000cad4 <__aeabi_dmul>:
    cad4:	b570      	push	{r4, r5, r6, lr}
    cad6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cada:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cade:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    cae2:	bf1d      	ittte	ne
    cae4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    cae8:	ea94 0f0c 	teqne	r4, ip
    caec:	ea95 0f0c 	teqne	r5, ip
    caf0:	f000 f8de 	bleq	ccb0 <__aeabi_dmul+0x1dc>
    caf4:	442c      	add	r4, r5
    caf6:	ea81 0603 	eor.w	r6, r1, r3
    cafa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    cafe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    cb02:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    cb06:	bf18      	it	ne
    cb08:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    cb0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cb10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    cb14:	d038      	beq.n	cb88 <__aeabi_dmul+0xb4>
    cb16:	fba0 ce02 	umull	ip, lr, r0, r2
    cb1a:	f04f 0500 	mov.w	r5, #0
    cb1e:	fbe1 e502 	umlal	lr, r5, r1, r2
    cb22:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    cb26:	fbe0 e503 	umlal	lr, r5, r0, r3
    cb2a:	f04f 0600 	mov.w	r6, #0
    cb2e:	fbe1 5603 	umlal	r5, r6, r1, r3
    cb32:	f09c 0f00 	teq	ip, #0
    cb36:	bf18      	it	ne
    cb38:	f04e 0e01 	orrne.w	lr, lr, #1
    cb3c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    cb40:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    cb44:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    cb48:	d204      	bcs.n	cb54 <__aeabi_dmul+0x80>
    cb4a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    cb4e:	416d      	adcs	r5, r5
    cb50:	eb46 0606 	adc.w	r6, r6, r6
    cb54:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    cb58:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    cb5c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    cb60:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    cb64:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    cb68:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    cb6c:	bf88      	it	hi
    cb6e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    cb72:	d81e      	bhi.n	cbb2 <__aeabi_dmul+0xde>
    cb74:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    cb78:	bf08      	it	eq
    cb7a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    cb7e:	f150 0000 	adcs.w	r0, r0, #0
    cb82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cb86:	bd70      	pop	{r4, r5, r6, pc}
    cb88:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    cb8c:	ea46 0101 	orr.w	r1, r6, r1
    cb90:	ea40 0002 	orr.w	r0, r0, r2
    cb94:	ea81 0103 	eor.w	r1, r1, r3
    cb98:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    cb9c:	bfc2      	ittt	gt
    cb9e:	ebd4 050c 	rsbsgt	r5, r4, ip
    cba2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cba6:	bd70      	popgt	{r4, r5, r6, pc}
    cba8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cbac:	f04f 0e00 	mov.w	lr, #0
    cbb0:	3c01      	subs	r4, #1
    cbb2:	f300 80ab 	bgt.w	cd0c <__aeabi_dmul+0x238>
    cbb6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    cbba:	bfde      	ittt	le
    cbbc:	2000      	movle	r0, #0
    cbbe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    cbc2:	bd70      	pople	{r4, r5, r6, pc}
    cbc4:	f1c4 0400 	rsb	r4, r4, #0
    cbc8:	3c20      	subs	r4, #32
    cbca:	da35      	bge.n	cc38 <__aeabi_dmul+0x164>
    cbcc:	340c      	adds	r4, #12
    cbce:	dc1b      	bgt.n	cc08 <__aeabi_dmul+0x134>
    cbd0:	f104 0414 	add.w	r4, r4, #20
    cbd4:	f1c4 0520 	rsb	r5, r4, #32
    cbd8:	fa00 f305 	lsl.w	r3, r0, r5
    cbdc:	fa20 f004 	lsr.w	r0, r0, r4
    cbe0:	fa01 f205 	lsl.w	r2, r1, r5
    cbe4:	ea40 0002 	orr.w	r0, r0, r2
    cbe8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    cbec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cbf0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cbf4:	fa21 f604 	lsr.w	r6, r1, r4
    cbf8:	eb42 0106 	adc.w	r1, r2, r6
    cbfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cc00:	bf08      	it	eq
    cc02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cc06:	bd70      	pop	{r4, r5, r6, pc}
    cc08:	f1c4 040c 	rsb	r4, r4, #12
    cc0c:	f1c4 0520 	rsb	r5, r4, #32
    cc10:	fa00 f304 	lsl.w	r3, r0, r4
    cc14:	fa20 f005 	lsr.w	r0, r0, r5
    cc18:	fa01 f204 	lsl.w	r2, r1, r4
    cc1c:	ea40 0002 	orr.w	r0, r0, r2
    cc20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cc24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cc28:	f141 0100 	adc.w	r1, r1, #0
    cc2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cc30:	bf08      	it	eq
    cc32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cc36:	bd70      	pop	{r4, r5, r6, pc}
    cc38:	f1c4 0520 	rsb	r5, r4, #32
    cc3c:	fa00 f205 	lsl.w	r2, r0, r5
    cc40:	ea4e 0e02 	orr.w	lr, lr, r2
    cc44:	fa20 f304 	lsr.w	r3, r0, r4
    cc48:	fa01 f205 	lsl.w	r2, r1, r5
    cc4c:	ea43 0302 	orr.w	r3, r3, r2
    cc50:	fa21 f004 	lsr.w	r0, r1, r4
    cc54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cc58:	fa21 f204 	lsr.w	r2, r1, r4
    cc5c:	ea20 0002 	bic.w	r0, r0, r2
    cc60:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    cc64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cc68:	bf08      	it	eq
    cc6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cc6e:	bd70      	pop	{r4, r5, r6, pc}
    cc70:	f094 0f00 	teq	r4, #0
    cc74:	d10f      	bne.n	cc96 <__aeabi_dmul+0x1c2>
    cc76:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    cc7a:	0040      	lsls	r0, r0, #1
    cc7c:	eb41 0101 	adc.w	r1, r1, r1
    cc80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cc84:	bf08      	it	eq
    cc86:	3c01      	subeq	r4, #1
    cc88:	d0f7      	beq.n	cc7a <__aeabi_dmul+0x1a6>
    cc8a:	ea41 0106 	orr.w	r1, r1, r6
    cc8e:	f095 0f00 	teq	r5, #0
    cc92:	bf18      	it	ne
    cc94:	4770      	bxne	lr
    cc96:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    cc9a:	0052      	lsls	r2, r2, #1
    cc9c:	eb43 0303 	adc.w	r3, r3, r3
    cca0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    cca4:	bf08      	it	eq
    cca6:	3d01      	subeq	r5, #1
    cca8:	d0f7      	beq.n	cc9a <__aeabi_dmul+0x1c6>
    ccaa:	ea43 0306 	orr.w	r3, r3, r6
    ccae:	4770      	bx	lr
    ccb0:	ea94 0f0c 	teq	r4, ip
    ccb4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ccb8:	bf18      	it	ne
    ccba:	ea95 0f0c 	teqne	r5, ip
    ccbe:	d00c      	beq.n	ccda <__aeabi_dmul+0x206>
    ccc0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ccc4:	bf18      	it	ne
    ccc6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ccca:	d1d1      	bne.n	cc70 <__aeabi_dmul+0x19c>
    cccc:	ea81 0103 	eor.w	r1, r1, r3
    ccd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ccd4:	f04f 0000 	mov.w	r0, #0
    ccd8:	bd70      	pop	{r4, r5, r6, pc}
    ccda:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ccde:	bf06      	itte	eq
    cce0:	4610      	moveq	r0, r2
    cce2:	4619      	moveq	r1, r3
    cce4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cce8:	d019      	beq.n	cd1e <__aeabi_dmul+0x24a>
    ccea:	ea94 0f0c 	teq	r4, ip
    ccee:	d102      	bne.n	ccf6 <__aeabi_dmul+0x222>
    ccf0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    ccf4:	d113      	bne.n	cd1e <__aeabi_dmul+0x24a>
    ccf6:	ea95 0f0c 	teq	r5, ip
    ccfa:	d105      	bne.n	cd08 <__aeabi_dmul+0x234>
    ccfc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    cd00:	bf1c      	itt	ne
    cd02:	4610      	movne	r0, r2
    cd04:	4619      	movne	r1, r3
    cd06:	d10a      	bne.n	cd1e <__aeabi_dmul+0x24a>
    cd08:	ea81 0103 	eor.w	r1, r1, r3
    cd0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cd10:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    cd14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cd18:	f04f 0000 	mov.w	r0, #0
    cd1c:	bd70      	pop	{r4, r5, r6, pc}
    cd1e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    cd22:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    cd26:	bd70      	pop	{r4, r5, r6, pc}

0000cd28 <__aeabi_ddiv>:
    cd28:	b570      	push	{r4, r5, r6, lr}
    cd2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cd2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cd32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    cd36:	bf1d      	ittte	ne
    cd38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    cd3c:	ea94 0f0c 	teqne	r4, ip
    cd40:	ea95 0f0c 	teqne	r5, ip
    cd44:	f000 f8a7 	bleq	ce96 <__aeabi_ddiv+0x16e>
    cd48:	eba4 0405 	sub.w	r4, r4, r5
    cd4c:	ea81 0e03 	eor.w	lr, r1, r3
    cd50:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cd54:	ea4f 3101 	mov.w	r1, r1, lsl #12
    cd58:	f000 8088 	beq.w	ce6c <__aeabi_ddiv+0x144>
    cd5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    cd60:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cd64:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    cd68:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    cd6c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    cd70:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    cd74:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    cd78:	ea4f 2600 	mov.w	r6, r0, lsl #8
    cd7c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    cd80:	429d      	cmp	r5, r3
    cd82:	bf08      	it	eq
    cd84:	4296      	cmpeq	r6, r2
    cd86:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    cd8a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    cd8e:	d202      	bcs.n	cd96 <__aeabi_ddiv+0x6e>
    cd90:	085b      	lsrs	r3, r3, #1
    cd92:	ea4f 0232 	mov.w	r2, r2, rrx
    cd96:	1ab6      	subs	r6, r6, r2
    cd98:	eb65 0503 	sbc.w	r5, r5, r3
    cd9c:	085b      	lsrs	r3, r3, #1
    cd9e:	ea4f 0232 	mov.w	r2, r2, rrx
    cda2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    cda6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    cdaa:	ebb6 0e02 	subs.w	lr, r6, r2
    cdae:	eb75 0e03 	sbcs.w	lr, r5, r3
    cdb2:	bf22      	ittt	cs
    cdb4:	1ab6      	subcs	r6, r6, r2
    cdb6:	4675      	movcs	r5, lr
    cdb8:	ea40 000c 	orrcs.w	r0, r0, ip
    cdbc:	085b      	lsrs	r3, r3, #1
    cdbe:	ea4f 0232 	mov.w	r2, r2, rrx
    cdc2:	ebb6 0e02 	subs.w	lr, r6, r2
    cdc6:	eb75 0e03 	sbcs.w	lr, r5, r3
    cdca:	bf22      	ittt	cs
    cdcc:	1ab6      	subcs	r6, r6, r2
    cdce:	4675      	movcs	r5, lr
    cdd0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    cdd4:	085b      	lsrs	r3, r3, #1
    cdd6:	ea4f 0232 	mov.w	r2, r2, rrx
    cdda:	ebb6 0e02 	subs.w	lr, r6, r2
    cdde:	eb75 0e03 	sbcs.w	lr, r5, r3
    cde2:	bf22      	ittt	cs
    cde4:	1ab6      	subcs	r6, r6, r2
    cde6:	4675      	movcs	r5, lr
    cde8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    cdec:	085b      	lsrs	r3, r3, #1
    cdee:	ea4f 0232 	mov.w	r2, r2, rrx
    cdf2:	ebb6 0e02 	subs.w	lr, r6, r2
    cdf6:	eb75 0e03 	sbcs.w	lr, r5, r3
    cdfa:	bf22      	ittt	cs
    cdfc:	1ab6      	subcs	r6, r6, r2
    cdfe:	4675      	movcs	r5, lr
    ce00:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    ce04:	ea55 0e06 	orrs.w	lr, r5, r6
    ce08:	d018      	beq.n	ce3c <__aeabi_ddiv+0x114>
    ce0a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    ce0e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    ce12:	ea4f 1606 	mov.w	r6, r6, lsl #4
    ce16:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    ce1a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    ce1e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    ce22:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    ce26:	d1c0      	bne.n	cdaa <__aeabi_ddiv+0x82>
    ce28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ce2c:	d10b      	bne.n	ce46 <__aeabi_ddiv+0x11e>
    ce2e:	ea41 0100 	orr.w	r1, r1, r0
    ce32:	f04f 0000 	mov.w	r0, #0
    ce36:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    ce3a:	e7b6      	b.n	cdaa <__aeabi_ddiv+0x82>
    ce3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ce40:	bf04      	itt	eq
    ce42:	4301      	orreq	r1, r0
    ce44:	2000      	moveq	r0, #0
    ce46:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ce4a:	bf88      	it	hi
    ce4c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ce50:	f63f aeaf 	bhi.w	cbb2 <__aeabi_dmul+0xde>
    ce54:	ebb5 0c03 	subs.w	ip, r5, r3
    ce58:	bf04      	itt	eq
    ce5a:	ebb6 0c02 	subseq.w	ip, r6, r2
    ce5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ce62:	f150 0000 	adcs.w	r0, r0, #0
    ce66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ce6a:	bd70      	pop	{r4, r5, r6, pc}
    ce6c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    ce70:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    ce74:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    ce78:	bfc2      	ittt	gt
    ce7a:	ebd4 050c 	rsbsgt	r5, r4, ip
    ce7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    ce82:	bd70      	popgt	{r4, r5, r6, pc}
    ce84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ce88:	f04f 0e00 	mov.w	lr, #0
    ce8c:	3c01      	subs	r4, #1
    ce8e:	e690      	b.n	cbb2 <__aeabi_dmul+0xde>
    ce90:	ea45 0e06 	orr.w	lr, r5, r6
    ce94:	e68d      	b.n	cbb2 <__aeabi_dmul+0xde>
    ce96:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ce9a:	ea94 0f0c 	teq	r4, ip
    ce9e:	bf08      	it	eq
    cea0:	ea95 0f0c 	teqeq	r5, ip
    cea4:	f43f af3b 	beq.w	cd1e <__aeabi_dmul+0x24a>
    cea8:	ea94 0f0c 	teq	r4, ip
    ceac:	d10a      	bne.n	cec4 <__aeabi_ddiv+0x19c>
    ceae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ceb2:	f47f af34 	bne.w	cd1e <__aeabi_dmul+0x24a>
    ceb6:	ea95 0f0c 	teq	r5, ip
    ceba:	f47f af25 	bne.w	cd08 <__aeabi_dmul+0x234>
    cebe:	4610      	mov	r0, r2
    cec0:	4619      	mov	r1, r3
    cec2:	e72c      	b.n	cd1e <__aeabi_dmul+0x24a>
    cec4:	ea95 0f0c 	teq	r5, ip
    cec8:	d106      	bne.n	ced8 <__aeabi_ddiv+0x1b0>
    ceca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cece:	f43f aefd 	beq.w	cccc <__aeabi_dmul+0x1f8>
    ced2:	4610      	mov	r0, r2
    ced4:	4619      	mov	r1, r3
    ced6:	e722      	b.n	cd1e <__aeabi_dmul+0x24a>
    ced8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cedc:	bf18      	it	ne
    cede:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cee2:	f47f aec5 	bne.w	cc70 <__aeabi_dmul+0x19c>
    cee6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ceea:	f47f af0d 	bne.w	cd08 <__aeabi_dmul+0x234>
    ceee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    cef2:	f47f aeeb 	bne.w	cccc <__aeabi_dmul+0x1f8>
    cef6:	e712      	b.n	cd1e <__aeabi_dmul+0x24a>

0000cef8 <__aeabi_dcmpun>:
    cef8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cefc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cf00:	d102      	bne.n	cf08 <__aeabi_dcmpun+0x10>
    cf02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cf06:	d10a      	bne.n	cf1e <__aeabi_dcmpun+0x26>
    cf08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cf0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cf10:	d102      	bne.n	cf18 <__aeabi_dcmpun+0x20>
    cf12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cf16:	d102      	bne.n	cf1e <__aeabi_dcmpun+0x26>
    cf18:	f04f 0000 	mov.w	r0, #0
    cf1c:	4770      	bx	lr
    cf1e:	f04f 0001 	mov.w	r0, #1
    cf22:	4770      	bx	lr

0000cf24 <strcmp>:
    cf24:	f810 2b01 	ldrb.w	r2, [r0], #1
    cf28:	f811 3b01 	ldrb.w	r3, [r1], #1
    cf2c:	2a01      	cmp	r2, #1
    cf2e:	bf28      	it	cs
    cf30:	429a      	cmpcs	r2, r3
    cf32:	d0f7      	beq.n	cf24 <strcmp>
    cf34:	1ad0      	subs	r0, r2, r3
    cf36:	4770      	bx	lr

0000cf38 <strlen>:
    cf38:	4603      	mov	r3, r0
    cf3a:	f813 2b01 	ldrb.w	r2, [r3], #1
    cf3e:	2a00      	cmp	r2, #0
    cf40:	d1fb      	bne.n	cf3a <strlen+0x2>
    cf42:	1a18      	subs	r0, r3, r0
    cf44:	3801      	subs	r0, #1
    cf46:	4770      	bx	lr

0000cf48 <net_if_ipv6_addr_update_lifetime>:
{
	NET_DBG("Updating expire time of %s by %u secs",
		log_strdup(net_sprint_ipv6_addr(&ifaddr->address.in6_addr)),
		vlifetime);

	ifaddr->addr_state = NET_ADDR_PREFERRED;
    cf48:	2301      	movs	r3, #1
{
    cf4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ifaddr->addr_state = NET_ADDR_PREFERRED;
    cf4e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	u64_t expire_timeout = (u64_t)MSEC_PER_SEC * (u64_t)vlifetime;
    cf52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
    cf56:	4604      	mov	r4, r0
	u64_t expire_timeout = (u64_t)MSEC_PER_SEC * (u64_t)vlifetime;
    cf58:	fba1 6703 	umull	r6, r7, r1, r3
	sys_slist_append(&active_address_lifetime_timers,
    cf5c:	f100 0114 	add.w	r1, r0, #20
    cf60:	4821      	ldr	r0, [pc, #132]	; (cfe8 <net_if_ipv6_addr_update_lifetime+0xa0>)
    cf62:	f016 f921 	bl	231a8 <sys_slist_append>
	ifaddr->lifetime.timer_start = k_uptime_get_32();
    cf66:	f016 f98f 	bl	23288 <k_uptime_get_32>
	ifaddr->lifetime.wrap_counter = expire_timeout /
    cf6a:	2300      	movs	r3, #0
    cf6c:	4a1f      	ldr	r2, [pc, #124]	; (cfec <net_if_ipv6_addr_update_lifetime+0xa4>)
	ifaddr->lifetime.timer_start = k_uptime_get_32();
    cf6e:	61a0      	str	r0, [r4, #24]
	ifaddr->lifetime.wrap_counter = expire_timeout /
    cf70:	4639      	mov	r1, r7
    cf72:	4630      	mov	r0, r6
    cf74:	f7ff fc20 	bl	c7b8 <__aeabi_uldivmod>
	ifaddr->lifetime.timer_timeout = expire_timeout -
    cf78:	491c      	ldr	r1, [pc, #112]	; (cfec <net_if_ipv6_addr_update_lifetime+0xa4>)
	ifaddr->lifetime.wrap_counter = expire_timeout /
    cf7a:	6220      	str	r0, [r4, #32]
	ifaddr->lifetime.timer_timeout = expire_timeout -
    cf7c:	fb01 6010 	mls	r0, r1, r0, r6
    cf80:	61e0      	str	r0, [r4, #28]
	remaining = k_delayed_work_remaining_get(&address_lifetime_timer);
    cf82:	481b      	ldr	r0, [pc, #108]	; (cff0 <net_if_ipv6_addr_update_lifetime+0xa8>)
    cf84:	f016 f990 	bl	232a8 <k_delayed_work_remaining_get>
	if (!remaining || (ifaddr->lifetime.wrap_counter == 0 &&
    cf88:	4605      	mov	r5, r0
    cf8a:	b120      	cbz	r0, cf96 <net_if_ipv6_addr_update_lifetime+0x4e>
    cf8c:	6a23      	ldr	r3, [r4, #32]
    cf8e:	bb2b      	cbnz	r3, cfdc <net_if_ipv6_addr_update_lifetime+0x94>
    cf90:	69e3      	ldr	r3, [r4, #28]
    cf92:	4298      	cmp	r0, r3
    cf94:	dd22      	ble.n	cfdc <net_if_ipv6_addr_update_lifetime+0x94>
		k_delayed_work_cancel(&address_lifetime_timer);
    cf96:	4816      	ldr	r0, [pc, #88]	; (cff0 <net_if_ipv6_addr_update_lifetime+0xa8>)
    cf98:	f01a fb16 	bl	275c8 <k_delayed_work_cancel>
		if (ifaddr->lifetime.wrap_counter > 0 && remaining == 0) {
    cf9c:	6a23      	ldr	r3, [r4, #32]
    cf9e:	2b00      	cmp	r3, #0
    cfa0:	dd08      	ble.n	cfb4 <net_if_ipv6_addr_update_lifetime+0x6c>
    cfa2:	b93d      	cbnz	r5, cfb4 <net_if_ipv6_addr_update_lifetime+0x6c>
			k_delayed_work_submit(&address_lifetime_timer,
    cfa4:	a30e      	add	r3, pc, #56	; (adr r3, cfe0 <net_if_ipv6_addr_update_lifetime+0x98>)
    cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]

	address_start_timer(ifaddr, vlifetime);
}
    cfaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_delayed_work_submit(&address_lifetime_timer,
    cfae:	4810      	ldr	r0, [pc, #64]	; (cff0 <net_if_ipv6_addr_update_lifetime+0xa8>)
    cfb0:	f003 bc9e 	b.w	108f0 <k_delayed_work_submit>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    cfb4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
				       K_MSEC(ifaddr->lifetime.timer_timeout));
    cfb8:	69e1      	ldr	r1, [r4, #28]
    cfba:	2500      	movs	r5, #0
    cfbc:	f240 34e7 	movw	r4, #999	; 0x3e7
    cfc0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    cfc4:	fbc0 4501 	smlal	r4, r5, r0, r1
    cfc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cfcc:	2300      	movs	r3, #0
    cfce:	4620      	mov	r0, r4
    cfd0:	4629      	mov	r1, r5
    cfd2:	f7ff fbf1 	bl	c7b8 <__aeabi_uldivmod>
			k_delayed_work_submit(&address_lifetime_timer,
    cfd6:	2300      	movs	r3, #0
    cfd8:	4602      	mov	r2, r0
    cfda:	e7e6      	b.n	cfaa <net_if_ipv6_addr_update_lifetime+0x62>
}
    cfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cfe0:	624dc605 	.word	0x624dc605
    cfe4:	00000000 	.word	0x00000000
    cfe8:	200225ac 	.word	0x200225ac
    cfec:	7fffff9b 	.word	0x7fffff9b
    cff0:	200225d4 	.word	0x200225d4
    cff4:	00000000 	.word	0x00000000

0000cff8 <net_if_ipv6_prefix_set_timer>:

void net_if_ipv6_prefix_set_timer(struct net_if_ipv6_prefix *prefix,
				  u32_t lifetime)
{
	/* No need to set a timer for infinite timeout */
	if (lifetime == 0xffffffff) {
    cff8:	1c4b      	adds	r3, r1, #1
{
    cffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cffe:	4604      	mov	r4, r0
	if (lifetime == 0xffffffff) {
    d000:	d042      	beq.n	d088 <net_if_ipv6_prefix_set_timer+0x90>
	u64_t expire_timeout = (u64_t)MSEC_PER_SEC * (u64_t)lifetime;
    d002:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    d006:	fba1 6706 	umull	r6, r7, r1, r6
	sys_slist_append(&active_prefix_lifetime_timers,
    d00a:	4601      	mov	r1, r0
    d00c:	4822      	ldr	r0, [pc, #136]	; (d098 <net_if_ipv6_prefix_set_timer+0xa0>)
    d00e:	f016 f8cb 	bl	231a8 <sys_slist_append>
	ifprefix->lifetime.timer_start = k_uptime_get_32();
    d012:	f016 f939 	bl	23288 <k_uptime_get_32>
	ifprefix->lifetime.wrap_counter = expire_timeout /
    d016:	2300      	movs	r3, #0
    d018:	4a20      	ldr	r2, [pc, #128]	; (d09c <net_if_ipv6_prefix_set_timer+0xa4>)
	ifprefix->lifetime.timer_start = k_uptime_get_32();
    d01a:	6060      	str	r0, [r4, #4]
	ifprefix->lifetime.wrap_counter = expire_timeout /
    d01c:	4639      	mov	r1, r7
    d01e:	4630      	mov	r0, r6
    d020:	f7ff fbca 	bl	c7b8 <__aeabi_uldivmod>
	ifprefix->lifetime.timer_timeout = expire_timeout -
    d024:	491d      	ldr	r1, [pc, #116]	; (d09c <net_if_ipv6_prefix_set_timer+0xa4>)
	ifprefix->lifetime.wrap_counter = expire_timeout /
    d026:	60e0      	str	r0, [r4, #12]
	ifprefix->lifetime.timer_timeout = expire_timeout -
    d028:	fb01 6010 	mls	r0, r1, r0, r6
    d02c:	60a0      	str	r0, [r4, #8]
	remaining = k_delayed_work_remaining_get(&prefix_lifetime_timer);
    d02e:	481c      	ldr	r0, [pc, #112]	; (d0a0 <net_if_ipv6_prefix_set_timer+0xa8>)
    d030:	f016 f93a 	bl	232a8 <k_delayed_work_remaining_get>
	if (!remaining || (ifprefix->lifetime.wrap_counter == 0 &&
    d034:	4605      	mov	r5, r0
    d036:	b120      	cbz	r0, d042 <net_if_ipv6_prefix_set_timer+0x4a>
    d038:	68e3      	ldr	r3, [r4, #12]
    d03a:	bb2b      	cbnz	r3, d088 <net_if_ipv6_prefix_set_timer+0x90>
    d03c:	68a3      	ldr	r3, [r4, #8]
    d03e:	4298      	cmp	r0, r3
    d040:	dd22      	ble.n	d088 <net_if_ipv6_prefix_set_timer+0x90>
		k_delayed_work_cancel(&prefix_lifetime_timer);
    d042:	4817      	ldr	r0, [pc, #92]	; (d0a0 <net_if_ipv6_prefix_set_timer+0xa8>)
    d044:	f01a fac0 	bl	275c8 <k_delayed_work_cancel>
		if (ifprefix->lifetime.wrap_counter > 0 && remaining == 0) {
    d048:	68e3      	ldr	r3, [r4, #12]
    d04a:	2b00      	cmp	r3, #0
    d04c:	dd08      	ble.n	d060 <net_if_ipv6_prefix_set_timer+0x68>
    d04e:	b93d      	cbnz	r5, d060 <net_if_ipv6_prefix_set_timer+0x68>
			k_delayed_work_submit(&prefix_lifetime_timer,
    d050:	a30f      	add	r3, pc, #60	; (adr r3, d090 <net_if_ipv6_prefix_set_timer+0x98>)
    d052:	e9d3 2300 	ldrd	r2, r3, [r3]
	}

	NET_DBG("Prefix lifetime %u sec", lifetime);

	prefix_start_timer(prefix, lifetime);
}
    d056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_delayed_work_submit(&prefix_lifetime_timer,
    d05a:	4811      	ldr	r0, [pc, #68]	; (d0a0 <net_if_ipv6_prefix_set_timer+0xa8>)
    d05c:	f003 bc48 	b.w	108f0 <k_delayed_work_submit>
    d060:	f44f 4000 	mov.w	r0, #32768	; 0x8000
				     K_MSEC(ifprefix->lifetime.timer_timeout));
    d064:	68a1      	ldr	r1, [r4, #8]
    d066:	2500      	movs	r5, #0
    d068:	f240 34e7 	movw	r4, #999	; 0x3e7
    d06c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    d070:	fbc0 4501 	smlal	r4, r5, r0, r1
    d074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d078:	2300      	movs	r3, #0
    d07a:	4620      	mov	r0, r4
    d07c:	4629      	mov	r1, r5
    d07e:	f7ff fb9b 	bl	c7b8 <__aeabi_uldivmod>
			k_delayed_work_submit(&prefix_lifetime_timer,
    d082:	2300      	movs	r3, #0
    d084:	4602      	mov	r2, r0
    d086:	e7e6      	b.n	d056 <net_if_ipv6_prefix_set_timer+0x5e>
}
    d088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d08c:	f3af 8000 	nop.w
    d090:	624dc605 	.word	0x624dc605
    d094:	00000000 	.word	0x00000000
    d098:	200225bc 	.word	0x200225bc
    d09c:	7fffff9b 	.word	0x7fffff9b
    d0a0:	20022738 	.word	0x20022738
    d0a4:	00000000 	.word	0x00000000

0000d0a8 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
    d0a8:	4b17      	ldr	r3, [pc, #92]	; (d108 <cJSON_CreateNumber+0x60>)
{
    d0aa:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
    d0ac:	6818      	ldr	r0, [r3, #0]
{
    d0ae:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
    d0b2:	f019 f8f1 	bl	26298 <cJSON_New_Item.isra.0>
    if(item)
    d0b6:	4604      	mov	r4, r0
    d0b8:	b170      	cbz	r0, d0d8 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
    d0ba:	2308      	movs	r3, #8
        item->valuedouble = num;
    d0bc:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
    d0c0:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
    d0c2:	4639      	mov	r1, r7
    d0c4:	a30e      	add	r3, pc, #56	; (adr r3, d100 <cJSON_CreateNumber+0x58>)
    d0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0ca:	4630      	mov	r0, r6
    d0cc:	f7ff fae8 	bl	c6a0 <__aeabi_dcmpge>
    d0d0:	b120      	cbz	r0, d0dc <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
    d0d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
    d0d6:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
    d0d8:	4620      	mov	r0, r4
    d0da:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
    d0dc:	2200      	movs	r2, #0
    d0de:	4630      	mov	r0, r6
    d0e0:	4639      	mov	r1, r7
    d0e2:	4b0a      	ldr	r3, [pc, #40]	; (d10c <cJSON_CreateNumber+0x64>)
    d0e4:	f7ff fad2 	bl	c68c <__aeabi_dcmple>
    d0e8:	b110      	cbz	r0, d0f0 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
    d0ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    d0ee:	e7f2      	b.n	d0d6 <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
    d0f0:	4630      	mov	r0, r6
    d0f2:	4639      	mov	r1, r7
    d0f4:	f7ff fae8 	bl	c6c8 <__aeabi_d2iz>
    d0f8:	6160      	str	r0, [r4, #20]
    return item;
    d0fa:	e7ed      	b.n	d0d8 <cJSON_CreateNumber+0x30>
    d0fc:	f3af 8000 	nop.w
    d100:	ffc00000 	.word	0xffc00000
    d104:	41dfffff 	.word	0x41dfffff
    d108:	200205a4 	.word	0x200205a4
    d10c:	c1e00000 	.word	0xc1e00000

0000d110 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
    d110:	b5f0      	push	{r4, r5, r6, r7, lr}
    d112:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
    d116:	460c      	mov	r4, r1
{
    d118:	b08d      	sub	sp, #52	; 0x34
	if (response == NULL) {
    d11a:	2900      	cmp	r1, #0
    d11c:	f000 80b0 	beq.w	d280 <at_handler+0x170>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d120:	2500      	movs	r5, #0
    d122:	4e9e      	ldr	r6, [pc, #632]	; (d39c <at_handler+0x28c>)
		if (strncmp(at_notifs[i], notif,
    d124:	f856 7b04 	ldr.w	r7, [r6], #4
    d128:	4638      	mov	r0, r7
    d12a:	f7ff ff05 	bl	cf38 <strlen>
    d12e:	4621      	mov	r1, r4
    d130:	4602      	mov	r2, r0
    d132:	4638      	mov	r0, r7
    d134:	f01a fde2 	bl	27cfc <strncmp>
    d138:	2800      	cmp	r0, #0
    d13a:	f040 809d 	bne.w	d278 <at_handler+0x168>
	/* Only proceed with parsing if notification is relevant */
	if (!is_relevant_notif(response, &notif_type)) {
		return;
	}

	switch (notif_type) {
    d13e:	2d01      	cmp	r5, #1
			*type = i;
    d140:	b2eb      	uxtb	r3, r5
	switch (notif_type) {
    d142:	f000 80a1 	beq.w	d288 <at_handler+0x178>
    d146:	2b02      	cmp	r3, #2
    d148:	f000 80c9 	beq.w	d2de <at_handler+0x1ce>
	size_t len = sizeof(str_buf) - 1;
    d14c:	2609      	movs	r6, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d14e:	210a      	movs	r1, #10
    d150:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
    d152:	9602      	str	r6, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d154:	f019 fccc 	bl	26af0 <at_params_list_init>
	if (err) {
    d158:	4605      	mov	r5, r0
    d15a:	2800      	cmp	r0, #0
    d15c:	f040 8090 	bne.w	d280 <at_handler+0x170>
	err = at_parser_params_from_str(notification,
    d160:	4601      	mov	r1, r0
    d162:	aa07      	add	r2, sp, #28
    d164:	4620      	mov	r0, r4
    d166:	f019 fc9b 	bl	26aa0 <at_parser_params_from_str>
	if (err) {
    d16a:	4604      	mov	r4, r0
    d16c:	2800      	cmp	r0, #0
    d16e:	d135      	bne.n	d1dc <at_handler+0xcc>
	err = at_params_int_get(&resp_list,
    d170:	2101      	movs	r1, #1
    d172:	aa01      	add	r2, sp, #4
    d174:	a807      	add	r0, sp, #28
    d176:	f019 fd8a 	bl	26c8e <at_params_int_get>
	if (err) {
    d17a:	4604      	mov	r4, r0
    d17c:	bb70      	cbnz	r0, d1dc <at_handler+0xcc>
	err = at_params_string_get(&resp_list,
    d17e:	2102      	movs	r1, #2
    d180:	ab02      	add	r3, sp, #8
    d182:	aa09      	add	r2, sp, #36	; 0x24
    d184:	a807      	add	r0, sp, #28
	*reg_status = status;
    d186:	f89d 5004 	ldrb.w	r5, [sp, #4]
	err = at_params_string_get(&resp_list,
    d18a:	f019 fd93 	bl	26cb4 <at_params_string_get>
	if (err) {
    d18e:	4604      	mov	r4, r0
    d190:	bb20      	cbnz	r0, d1dc <at_handler+0xcc>
	str_buf[len] = '\0';
    d192:	9b02      	ldr	r3, [sp, #8]
    d194:	aa0c      	add	r2, sp, #48	; 0x30
    d196:	4413      	add	r3, r2
	cell->tac = strtoul(str_buf, NULL, 16);
    d198:	4601      	mov	r1, r0
	str_buf[len] = '\0';
    d19a:	f803 0c0c 	strb.w	r0, [r3, #-12]
	cell->tac = strtoul(str_buf, NULL, 16);
    d19e:	2210      	movs	r2, #16
    d1a0:	a809      	add	r0, sp, #36	; 0x24
    d1a2:	f012 ffc5 	bl	20130 <strtoul>
	err = at_params_string_get(&resp_list,
    d1a6:	2103      	movs	r1, #3
	cell->tac = strtoul(str_buf, NULL, 16);
    d1a8:	9004      	str	r0, [sp, #16]
	err = at_params_string_get(&resp_list,
    d1aa:	ab02      	add	r3, sp, #8
    d1ac:	aa09      	add	r2, sp, #36	; 0x24
    d1ae:	a807      	add	r0, sp, #28
	len = sizeof(str_buf) - 1;
    d1b0:	9602      	str	r6, [sp, #8]
	err = at_params_string_get(&resp_list,
    d1b2:	f019 fd7f 	bl	26cb4 <at_params_string_get>
	if (err) {
    d1b6:	4604      	mov	r4, r0
    d1b8:	b980      	cbnz	r0, d1dc <at_handler+0xcc>
	str_buf[len] = '\0';
    d1ba:	9b02      	ldr	r3, [sp, #8]
    d1bc:	aa0c      	add	r2, sp, #48	; 0x30
    d1be:	4413      	add	r3, r2
	cell->id = strtoul(str_buf, NULL, 16);
    d1c0:	4601      	mov	r1, r0
	str_buf[len] = '\0';
    d1c2:	f803 0c0c 	strb.w	r0, [r3, #-12]
	cell->id = strtoul(str_buf, NULL, 16);
    d1c6:	2210      	movs	r2, #16
    d1c8:	a809      	add	r0, sp, #36	; 0x24
    d1ca:	f012 ffb1 	bl	20130 <strtoul>
	err = parse_psm_cfg(&resp_list, true, psm_cfg);
    d1ce:	2101      	movs	r1, #1
	cell->id = strtoul(str_buf, NULL, 16);
    d1d0:	9003      	str	r0, [sp, #12]
	err = parse_psm_cfg(&resp_list, true, psm_cfg);
    d1d2:	aa05      	add	r2, sp, #20
    d1d4:	a807      	add	r0, sp, #28
    d1d6:	f007 fe8b 	bl	14ef0 <parse_psm_cfg>
    d1da:	4604      	mov	r4, r0
	at_params_list_free(&resp_list);
    d1dc:	a807      	add	r0, sp, #28
    d1de:	f019 fcb8 	bl	26b52 <at_params_list_free>
		struct lte_lc_psm_cfg psm_cfg;

		LOG_DBG("+CEREG notification: %s", log_strdup(response));

		err = parse_cereg(response, &reg_status, &cell, &psm_cfg);
		if (err) {
    d1e2:	2c00      	cmp	r4, #0
    d1e4:	d14c      	bne.n	d280 <at_handler+0x170>
			LOG_ERR("Failed to parse notification (error %d): %s",
				err, log_strdup(response));
			return;
		}

		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d1e6:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    d1ea:	2b01      	cmp	r3, #1
    d1ec:	d102      	bne.n	d1f4 <at_handler+0xe4>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d1ee:	486c      	ldr	r0, [pc, #432]	; (d3a0 <at_handler+0x290>)
    d1f0:	f011 fc22 	bl	1ea38 <z_impl_k_sem_give>
		    (reg_status == LTE_LC_NW_REG_REGISTERED_ROAMING)) {
			k_sem_give(&link);
		}

		if (!evt_handler) {
    d1f4:	4c6b      	ldr	r4, [pc, #428]	; (d3a4 <at_handler+0x294>)
    d1f6:	6823      	ldr	r3, [r4, #0]
    d1f8:	2b00      	cmp	r3, #0
    d1fa:	d041      	beq.n	d280 <at_handler+0x170>
			return;
		}

		/* Network registration status event */
		if (reg_status != prev_reg_status) {
    d1fc:	4a6a      	ldr	r2, [pc, #424]	; (d3a8 <at_handler+0x298>)
    d1fe:	7811      	ldrb	r1, [r2, #0]
    d200:	42a9      	cmp	r1, r5
    d202:	d007      	beq.n	d214 <at_handler+0x104>
			prev_reg_status = reg_status;
    d204:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d206:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
    d208:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d20c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24

			evt_handler(&evt);
    d210:	a809      	add	r0, sp, #36	; 0x24
    d212:	4798      	blx	r3
		}

		/* Cell update event */
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
    d214:	4e65      	ldr	r6, [pc, #404]	; (d3ac <at_handler+0x29c>)
    d216:	ad03      	add	r5, sp, #12
    d218:	2208      	movs	r2, #8
    d21a:	4631      	mov	r1, r6
    d21c:	4628      	mov	r0, r5
    d21e:	f01a fb84 	bl	2792a <memcmp>
    d222:	b160      	cbz	r0, d23e <at_handler+0x12e>
			evt.type = LTE_LC_EVT_CELL_UPDATE;
    d224:	e895 0003 	ldmia.w	r5, {r0, r1}
    d228:	2304      	movs	r3, #4
    d22a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    d22e:	ab0c      	add	r3, sp, #48	; 0x30
    d230:	e903 0003 	stmdb	r3, {r0, r1}
    d234:	e886 0003 	stmia.w	r6, {r0, r1}
			memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
			evt_handler(&evt);
    d238:	6823      	ldr	r3, [r4, #0]
    d23a:	a809      	add	r0, sp, #36	; 0x24
    d23c:	4798      	blx	r3
		}

		/* PSM configuration update event */
		if (memcmp(&psm_cfg, &prev_psm_cfg,
    d23e:	4e5c      	ldr	r6, [pc, #368]	; (d3b0 <at_handler+0x2a0>)
    d240:	ad05      	add	r5, sp, #20
    d242:	2208      	movs	r2, #8
    d244:	4631      	mov	r1, r6
    d246:	4628      	mov	r0, r5
    d248:	f01a fb6f 	bl	2792a <memcmp>
    d24c:	b160      	cbz	r0, d268 <at_handler+0x158>
			   sizeof(struct lte_lc_psm_cfg))) {
			evt.type = LTE_LC_EVT_PSM_UPDATE;
    d24e:	e895 0003 	ldmia.w	r5, {r0, r1}
    d252:	2301      	movs	r3, #1
    d254:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

			memcpy(&prev_psm_cfg, &psm_cfg,
    d258:	ab0c      	add	r3, sp, #48	; 0x30
    d25a:	e903 0003 	stmdb	r3, {r0, r1}
    d25e:	e886 0003 	stmia.w	r6, {r0, r1}
			       sizeof(struct lte_lc_psm_cfg));
			memcpy(&evt.psm_cfg, &psm_cfg,
			       sizeof(struct lte_lc_psm_cfg));
			evt_handler(&evt);
    d262:	6823      	ldr	r3, [r4, #0]
    d264:	a809      	add	r0, sp, #36	; 0x24
    d266:	4798      	blx	r3
	bool notify = false;
    d268:	2300      	movs	r3, #0
	default:
		LOG_ERR("Unrecognized notification type: %d", notif_type);
		break;
	}

	if (evt_handler && notify) {
    d26a:	4a4e      	ldr	r2, [pc, #312]	; (d3a4 <at_handler+0x294>)
    d26c:	6812      	ldr	r2, [r2, #0]
    d26e:	b13a      	cbz	r2, d280 <at_handler+0x170>
    d270:	b133      	cbz	r3, d280 <at_handler+0x170>
		evt_handler(&evt);
    d272:	a809      	add	r0, sp, #36	; 0x24
    d274:	4790      	blx	r2
    d276:	e003      	b.n	d280 <at_handler+0x170>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d278:	3501      	adds	r5, #1
    d27a:	2d03      	cmp	r5, #3
    d27c:	f47f af52 	bne.w	d124 <at_handler+0x14>
	}
}
    d280:	b00d      	add	sp, #52	; 0x34
    d282:	ecbd 8b02 	vpop	{d8}
    d286:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
    d288:	2104      	movs	r1, #4
	struct at_param_list resp_list = {0};
    d28a:	e9cd 0007 	strd	r0, r0, [sp, #28]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
    d28e:	a807      	add	r0, sp, #28
    d290:	f019 fc2e 	bl	26af0 <at_params_list_init>
	if (err) {
    d294:	4601      	mov	r1, r0
    d296:	2800      	cmp	r0, #0
    d298:	d1f2      	bne.n	d280 <at_handler+0x170>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d29a:	4620      	mov	r0, r4
    d29c:	aa07      	add	r2, sp, #28
    d29e:	f019 fbff 	bl	26aa0 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d2a2:	4604      	mov	r4, r0
    d2a4:	b950      	cbnz	r0, d2bc <at_handler+0x1ac>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
		goto clean_exit;
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
    d2a6:	4629      	mov	r1, r5
    d2a8:	aa05      	add	r2, sp, #20
    d2aa:	a807      	add	r0, sp, #28
    d2ac:	f019 fcef 	bl	26c8e <at_params_int_get>
	if (err) {
    d2b0:	4604      	mov	r4, r0
    d2b2:	b918      	cbnz	r0, d2bc <at_handler+0x1ac>
		LOG_ERR("Could not get signalling mode, error: %d", err);
		goto clean_exit;
	}

	/* Check if the parsed value maps to a valid registration status */
	if (temp_mode == 0) {
    d2b4:	9b05      	ldr	r3, [sp, #20]
    d2b6:	b95b      	cbnz	r3, d2d0 <at_handler+0x1c0>
		*mode = LTE_LC_RRC_MODE_IDLE;
    d2b8:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
    d2bc:	a807      	add	r0, sp, #28
    d2be:	f019 fc48 	bl	26b52 <at_params_list_free>
		if (err) {
    d2c2:	2c00      	cmp	r4, #0
    d2c4:	d1dc      	bne.n	d280 <at_handler+0x170>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
    d2c6:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d2c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
    d2cc:	2301      	movs	r3, #1
		break;
    d2ce:	e7cc      	b.n	d26a <at_handler+0x15a>
	} else if (temp_mode == 1) {
    d2d0:	2b01      	cmp	r3, #1
		err = -EINVAL;
    d2d2:	bf14      	ite	ne
    d2d4:	f06f 0415 	mvnne.w	r4, #21
		*mode = LTE_LC_RRC_MODE_CONNECTED;
    d2d8:	f88d 5028 	strbeq.w	r5, [sp, #40]	; 0x28
    d2dc:	e7ee      	b.n	d2bc <at_handler+0x1ac>
{
	int err;
	u8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    d2de:	2304      	movs	r3, #4
	struct at_param_list resp_list = {0};
    d2e0:	e9cd 0007 	strd	r0, r0, [sp, #28]
	err = lte_lc_system_mode_get(&sys_mode);
    d2e4:	a809      	add	r0, sp, #36	; 0x24
	size_t len = sizeof(tmp_buf) - 1;
    d2e6:	9303      	str	r3, [sp, #12]
	err = lte_lc_system_mode_get(&sys_mode);
    d2e8:	f007 ff48 	bl	1517c <lte_lc_system_mode_get>
	if (err) {
    d2ec:	2800      	cmp	r0, #0
    d2ee:	d1c7      	bne.n	d280 <at_handler+0x170>
	switch (sys_mode) {
    d2f0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d2f4:	3b01      	subs	r3, #1
    d2f6:	2b04      	cmp	r3, #4
    d2f8:	d8c2      	bhi.n	d280 <at_handler+0x170>
    d2fa:	a201      	add	r2, pc, #4	; (adr r2, d300 <at_handler+0x1f0>)
    d2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d300:	0000d363 	.word	0x0000d363
    d304:	0000d315 	.word	0x0000d315
    d308:	0000d281 	.word	0x0000d281
    d30c:	0000d363 	.word	0x0000d363
    d310:	0000d315 	.word	0x0000d315
		*ptw_multiplier = 2.56;
    d314:	ed9f 8a27 	vldr	s16, [pc, #156]	; d3b4 <at_handler+0x2a4>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    d318:	2105      	movs	r1, #5
    d31a:	a807      	add	r0, sp, #28
    d31c:	f019 fbe8 	bl	26af0 <at_params_list_init>
	if (err) {
    d320:	4601      	mov	r1, r0
    d322:	2800      	cmp	r0, #0
    d324:	d1ac      	bne.n	d280 <at_handler+0x170>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d326:	4620      	mov	r0, r4
    d328:	aa07      	add	r2, sp, #28
    d32a:	f019 fbb9 	bl	26aa0 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d32e:	4604      	mov	r4, r0
    d330:	bb58      	cbnz	r0, d38a <at_handler+0x27a>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
		goto clean_exit;
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    d332:	2103      	movs	r1, #3
    d334:	ab03      	add	r3, sp, #12
    d336:	aa05      	add	r2, sp, #20
    d338:	a807      	add	r0, sp, #28
    d33a:	f019 fcbb 	bl	26cb4 <at_params_string_get>
				   tmp_buf, &len);
	if (err) {
    d33e:	4604      	mov	r4, r0
    d340:	bb18      	cbnz	r0, d38a <at_handler+0x27a>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
		goto clean_exit;
	}

	tmp_buf[len] = '\0';
    d342:	9b03      	ldr	r3, [sp, #12]
    d344:	aa0c      	add	r2, sp, #48	; 0x30
    d346:	4413      	add	r3, r2
	 * special case of idx == 0 for LTE-M, where the value is 5.12 seconds.
	 * The variable idx is used to map to the entry of index idx in
	 * Figure 10.5.5.32/3GPP TS 24.008, table for eDRX in S1 mode, and
	 * note 4 and 5 are taken into account.
	 */
	idx = strtoul(tmp_buf, NULL, 2);
    d348:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d34a:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d34e:	2202      	movs	r2, #2
    d350:	a805      	add	r0, sp, #20
    d352:	f012 feed 	bl	20130 <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    d356:	b2c5      	uxtb	r5, r0
    d358:	2d0f      	cmp	r5, #15
    d35a:	d905      	bls.n	d368 <at_handler+0x258>
	 * for paging time window (both for LTE-M and NB1).
	 */
	idx = strtoul(tmp_buf, NULL, 2);
	if (idx > 15) {
		LOG_ERR("Invalid PTW lookup index: %d", idx);
		err = -EINVAL;
    d35c:	f06f 0415 	mvn.w	r4, #21
    d360:	e013      	b.n	d38a <at_handler+0x27a>
		*ptw_multiplier = 1.28;
    d362:	ed9f 8a15 	vldr	s16, [pc, #84]	; d3b8 <at_handler+0x2a8>
    d366:	e7d7      	b.n	d318 <at_handler+0x208>
	err = lte_lc_system_mode_get(&sys_mode);
    d368:	a802      	add	r0, sp, #8
    d36a:	f007 ff07 	bl	1517c <lte_lc_system_mode_get>
	if (err) {
    d36e:	4604      	mov	r4, r0
    d370:	b958      	cbnz	r0, d38a <at_handler+0x27a>
	switch (sys_mode) {
    d372:	f89d 3008 	ldrb.w	r3, [sp, #8]
    d376:	3b01      	subs	r3, #1
    d378:	2b04      	cmp	r3, #4
    d37a:	d804      	bhi.n	d386 <at_handler+0x276>
    d37c:	e8df f003 	tbb	[pc, r3]
    d380:	1e034e1e 	.word	0x1e034e1e
    d384:	4e          	.byte	0x4e
    d385:	00          	.byte	0x00
		return -ENOTCONN;
    d386:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
    d38a:	a807      	add	r0, sp, #28
    d38c:	f019 fbe1 	bl	26b52 <at_params_list_free>
		if (err) {
    d390:	2c00      	cmp	r4, #0
    d392:	f47f af75 	bne.w	d280 <at_handler+0x170>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d396:	2302      	movs	r3, #2
    d398:	e796      	b.n	d2c8 <at_handler+0x1b8>
    d39a:	bf00      	nop
    d39c:	00028aa8 	.word	0x00028aa8
    d3a0:	2002308c 	.word	0x2002308c
    d3a4:	20023088 	.word	0x20023088
    d3a8:	2002af29 	.word	0x2002af29
    d3ac:	200230a4 	.word	0x200230a4
    d3b0:	200230ac 	.word	0x200230ac
    d3b4:	4023d70a 	.word	0x4023d70a
    d3b8:	3fa3d70a 	.word	0x3fa3d70a
		multiplier = edrx_lookup_ltem[idx];
    d3bc:	4b1c      	ldr	r3, [pc, #112]	; (d430 <at_handler+0x320>)
		multiplier = edrx_lookup_nbiot[idx];
    d3be:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d3c2:	b368      	cbz	r0, d420 <at_handler+0x310>
    d3c4:	f7ff f88e 	bl	c4e4 <__aeabi_i2d>
    d3c8:	a317      	add	r3, pc, #92	; (adr r3, d428 <at_handler+0x318>)
    d3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    d3ce:	f7ff fb81 	bl	cad4 <__aeabi_dmul>
    d3d2:	f7ff f9a1 	bl	c718 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    d3d6:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d3d8:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d3da:	ab03      	add	r3, sp, #12
    d3dc:	aa05      	add	r2, sp, #20
    d3de:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
    d3e0:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d3e2:	f019 fc67 	bl	26cb4 <at_params_string_get>
	if (err) {
    d3e6:	4604      	mov	r4, r0
    d3e8:	2800      	cmp	r0, #0
    d3ea:	d1ce      	bne.n	d38a <at_handler+0x27a>
	tmp_buf[len] = '\0';
    d3ec:	9b03      	ldr	r3, [sp, #12]
    d3ee:	aa0c      	add	r2, sp, #48	; 0x30
    d3f0:	4413      	add	r3, r2
    d3f2:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d3f6:	4601      	mov	r1, r0
    d3f8:	2202      	movs	r2, #2
    d3fa:	a805      	add	r0, sp, #20
    d3fc:	f012 fe98 	bl	20130 <strtoul>
	if (idx > 15) {
    d400:	b2c3      	uxtb	r3, r0
    d402:	2b0f      	cmp	r3, #15
    d404:	d8aa      	bhi.n	d35c <at_handler+0x24c>
	idx += 1;
    d406:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    d408:	b2c0      	uxtb	r0, r0
    d40a:	ee07 0a90 	vmov	s15, r0
    d40e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d412:	ee67 7a88 	vmul.f32	s15, s15, s16
    d416:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
clean_exit:
    d41a:	e7b6      	b.n	d38a <at_handler+0x27a>
		multiplier = edrx_lookup_nbiot[idx];
    d41c:	4b05      	ldr	r3, [pc, #20]	; (d434 <at_handler+0x324>)
    d41e:	e7ce      	b.n	d3be <at_handler+0x2ae>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d420:	4805      	ldr	r0, [pc, #20]	; (d438 <at_handler+0x328>)
    d422:	e7d8      	b.n	d3d6 <at_handler+0x2c6>
    d424:	f3af 8000 	nop.w
    d428:	47ae147b 	.word	0x47ae147b
    d42c:	40247ae1 	.word	0x40247ae1
    d430:	000290dc 	.word	0x000290dc
    d434:	000290fc 	.word	0x000290fc
    d438:	40a3d70a 	.word	0x40a3d70a
    d43c:	00000000 	.word	0x00000000

0000d440 <_dtoa_r>:
    d440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d444:	6a45      	ldr	r5, [r0, #36]	; 0x24
    d446:	4604      	mov	r4, r0
    d448:	ed2d 8b02 	vpush	{d8}
    d44c:	b095      	sub	sp, #84	; 0x54
    d44e:	ec57 6b10 	vmov	r6, r7, d0
    d452:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
    d456:	9105      	str	r1, [sp, #20]
    d458:	9209      	str	r2, [sp, #36]	; 0x24
    d45a:	930f      	str	r3, [sp, #60]	; 0x3c
    d45c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    d460:	b975      	cbnz	r5, d480 <_dtoa_r+0x40>
    d462:	2010      	movs	r0, #16
    d464:	f011 fe14 	bl	1f090 <malloc>
    d468:	4602      	mov	r2, r0
    d46a:	6260      	str	r0, [r4, #36]	; 0x24
    d46c:	b920      	cbnz	r0, d478 <_dtoa_r+0x38>
    d46e:	4bb2      	ldr	r3, [pc, #712]	; (d738 <_dtoa_r+0x2f8>)
    d470:	21ea      	movs	r1, #234	; 0xea
    d472:	48b2      	ldr	r0, [pc, #712]	; (d73c <_dtoa_r+0x2fc>)
    d474:	f013 f8e0 	bl	20638 <__assert_func>
    d478:	e9c0 5501 	strd	r5, r5, [r0, #4]
    d47c:	6005      	str	r5, [r0, #0]
    d47e:	60c5      	str	r5, [r0, #12]
    d480:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d482:	6819      	ldr	r1, [r3, #0]
    d484:	b151      	cbz	r1, d49c <_dtoa_r+0x5c>
    d486:	685a      	ldr	r2, [r3, #4]
    d488:	2301      	movs	r3, #1
    d48a:	4620      	mov	r0, r4
    d48c:	4093      	lsls	r3, r2
    d48e:	604a      	str	r2, [r1, #4]
    d490:	608b      	str	r3, [r1, #8]
    d492:	f013 f9d5 	bl	20840 <_Bfree>
    d496:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d498:	2200      	movs	r2, #0
    d49a:	601a      	str	r2, [r3, #0]
    d49c:	1e3b      	subs	r3, r7, #0
    d49e:	bfb7      	itett	lt
    d4a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    d4a4:	2300      	movge	r3, #0
    d4a6:	2201      	movlt	r2, #1
    d4a8:	9303      	strlt	r3, [sp, #12]
    d4aa:	bfa8      	it	ge
    d4ac:	f8c8 3000 	strge.w	r3, [r8]
    d4b0:	f8dd 900c 	ldr.w	r9, [sp, #12]
    d4b4:	4ba2      	ldr	r3, [pc, #648]	; (d740 <_dtoa_r+0x300>)
    d4b6:	bfb8      	it	lt
    d4b8:	f8c8 2000 	strlt.w	r2, [r8]
    d4bc:	ea33 0309 	bics.w	r3, r3, r9
    d4c0:	d11b      	bne.n	d4fa <_dtoa_r+0xba>
    d4c2:	f242 730f 	movw	r3, #9999	; 0x270f
    d4c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d4c8:	6013      	str	r3, [r2, #0]
    d4ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
    d4ce:	4333      	orrs	r3, r6
    d4d0:	f000 8577 	beq.w	dfc2 <_dtoa_r+0xb82>
    d4d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d4d6:	b963      	cbnz	r3, d4f2 <_dtoa_r+0xb2>
    d4d8:	4b9a      	ldr	r3, [pc, #616]	; (d744 <_dtoa_r+0x304>)
    d4da:	e024      	b.n	d526 <_dtoa_r+0xe6>
    d4dc:	4b9a      	ldr	r3, [pc, #616]	; (d748 <_dtoa_r+0x308>)
    d4de:	9300      	str	r3, [sp, #0]
    d4e0:	3308      	adds	r3, #8
    d4e2:	9a21      	ldr	r2, [sp, #132]	; 0x84
    d4e4:	6013      	str	r3, [r2, #0]
    d4e6:	9800      	ldr	r0, [sp, #0]
    d4e8:	b015      	add	sp, #84	; 0x54
    d4ea:	ecbd 8b02 	vpop	{d8}
    d4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4f2:	4b94      	ldr	r3, [pc, #592]	; (d744 <_dtoa_r+0x304>)
    d4f4:	9300      	str	r3, [sp, #0]
    d4f6:	3303      	adds	r3, #3
    d4f8:	e7f3      	b.n	d4e2 <_dtoa_r+0xa2>
    d4fa:	ed9d 7b02 	vldr	d7, [sp, #8]
    d4fe:	2200      	movs	r2, #0
    d500:	2300      	movs	r3, #0
    d502:	ec51 0b17 	vmov	r0, r1, d7
    d506:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    d50a:	f7ff f8ab 	bl	c664 <__aeabi_dcmpeq>
    d50e:	4680      	mov	r8, r0
    d510:	b158      	cbz	r0, d52a <_dtoa_r+0xea>
    d512:	2301      	movs	r3, #1
    d514:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d516:	6013      	str	r3, [r2, #0]
    d518:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d51a:	2b00      	cmp	r3, #0
    d51c:	f000 854e 	beq.w	dfbc <_dtoa_r+0xb7c>
    d520:	488a      	ldr	r0, [pc, #552]	; (d74c <_dtoa_r+0x30c>)
    d522:	6018      	str	r0, [r3, #0]
    d524:	1e43      	subs	r3, r0, #1
    d526:	9300      	str	r3, [sp, #0]
    d528:	e7dd      	b.n	d4e6 <_dtoa_r+0xa6>
    d52a:	f3c9 550a 	ubfx	r5, r9, #20, #11
    d52e:	aa12      	add	r2, sp, #72	; 0x48
    d530:	a913      	add	r1, sp, #76	; 0x4c
    d532:	4620      	mov	r0, r4
    d534:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
    d538:	f013 fc00 	bl	20d3c <__d2b>
    d53c:	4683      	mov	fp, r0
    d53e:	2d00      	cmp	r5, #0
    d540:	d07a      	beq.n	d638 <_dtoa_r+0x1f8>
    d542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d544:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
    d548:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    d54c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    d550:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    d554:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
    d558:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
    d55c:	2200      	movs	r2, #0
    d55e:	4b7c      	ldr	r3, [pc, #496]	; (d750 <_dtoa_r+0x310>)
    d560:	4630      	mov	r0, r6
    d562:	4639      	mov	r1, r7
    d564:	f7fe fe70 	bl	c248 <__aeabi_dsub>
    d568:	a36d      	add	r3, pc, #436	; (adr r3, d720 <_dtoa_r+0x2e0>)
    d56a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d56e:	f7ff fab1 	bl	cad4 <__aeabi_dmul>
    d572:	a36d      	add	r3, pc, #436	; (adr r3, d728 <_dtoa_r+0x2e8>)
    d574:	e9d3 2300 	ldrd	r2, r3, [r3]
    d578:	f7fe fe68 	bl	c24c <__adddf3>
    d57c:	4606      	mov	r6, r0
    d57e:	460f      	mov	r7, r1
    d580:	4628      	mov	r0, r5
    d582:	f7fe ffaf 	bl	c4e4 <__aeabi_i2d>
    d586:	a36a      	add	r3, pc, #424	; (adr r3, d730 <_dtoa_r+0x2f0>)
    d588:	e9d3 2300 	ldrd	r2, r3, [r3]
    d58c:	f7ff faa2 	bl	cad4 <__aeabi_dmul>
    d590:	4602      	mov	r2, r0
    d592:	460b      	mov	r3, r1
    d594:	4630      	mov	r0, r6
    d596:	4639      	mov	r1, r7
    d598:	f7fe fe58 	bl	c24c <__adddf3>
    d59c:	4606      	mov	r6, r0
    d59e:	460f      	mov	r7, r1
    d5a0:	f7ff f892 	bl	c6c8 <__aeabi_d2iz>
    d5a4:	2200      	movs	r2, #0
    d5a6:	4682      	mov	sl, r0
    d5a8:	2300      	movs	r3, #0
    d5aa:	4630      	mov	r0, r6
    d5ac:	4639      	mov	r1, r7
    d5ae:	f7ff f863 	bl	c678 <__aeabi_dcmplt>
    d5b2:	b148      	cbz	r0, d5c8 <_dtoa_r+0x188>
    d5b4:	4650      	mov	r0, sl
    d5b6:	f7fe ff95 	bl	c4e4 <__aeabi_i2d>
    d5ba:	4632      	mov	r2, r6
    d5bc:	463b      	mov	r3, r7
    d5be:	f7ff f851 	bl	c664 <__aeabi_dcmpeq>
    d5c2:	b908      	cbnz	r0, d5c8 <_dtoa_r+0x188>
    d5c4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    d5c8:	f1ba 0f16 	cmp.w	sl, #22
    d5cc:	d853      	bhi.n	d676 <_dtoa_r+0x236>
    d5ce:	4b61      	ldr	r3, [pc, #388]	; (d754 <_dtoa_r+0x314>)
    d5d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    d5d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    d5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    d5dc:	f7ff f84c 	bl	c678 <__aeabi_dcmplt>
    d5e0:	2800      	cmp	r0, #0
    d5e2:	d04a      	beq.n	d67a <_dtoa_r+0x23a>
    d5e4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    d5e8:	2300      	movs	r3, #0
    d5ea:	930e      	str	r3, [sp, #56]	; 0x38
    d5ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d5ee:	1b5d      	subs	r5, r3, r5
    d5f0:	1e6b      	subs	r3, r5, #1
    d5f2:	9304      	str	r3, [sp, #16]
    d5f4:	bf45      	ittet	mi
    d5f6:	2300      	movmi	r3, #0
    d5f8:	f1c5 0801 	rsbmi	r8, r5, #1
    d5fc:	f04f 0800 	movpl.w	r8, #0
    d600:	9304      	strmi	r3, [sp, #16]
    d602:	f1ba 0f00 	cmp.w	sl, #0
    d606:	db3a      	blt.n	d67e <_dtoa_r+0x23e>
    d608:	9b04      	ldr	r3, [sp, #16]
    d60a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
    d60e:	4453      	add	r3, sl
    d610:	9304      	str	r3, [sp, #16]
    d612:	2300      	movs	r3, #0
    d614:	9306      	str	r3, [sp, #24]
    d616:	9b05      	ldr	r3, [sp, #20]
    d618:	2b09      	cmp	r3, #9
    d61a:	d868      	bhi.n	d6ee <_dtoa_r+0x2ae>
    d61c:	2b05      	cmp	r3, #5
    d61e:	bfc5      	ittet	gt
    d620:	3b04      	subgt	r3, #4
    d622:	2500      	movgt	r5, #0
    d624:	2501      	movle	r5, #1
    d626:	9305      	strgt	r3, [sp, #20]
    d628:	9b05      	ldr	r3, [sp, #20]
    d62a:	3b02      	subs	r3, #2
    d62c:	2b03      	cmp	r3, #3
    d62e:	d86a      	bhi.n	d706 <_dtoa_r+0x2c6>
    d630:	e8df f003 	tbb	[pc, r3]
    d634:	5b4d4f2d 	.word	0x5b4d4f2d
    d638:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
    d63c:	441d      	add	r5, r3
    d63e:	f205 4332 	addw	r3, r5, #1074	; 0x432
    d642:	2b20      	cmp	r3, #32
    d644:	bfc6      	itte	gt
    d646:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    d64a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
    d64e:	f1c3 0320 	rsble	r3, r3, #32
    d652:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    d656:	bfc5      	ittet	gt
    d658:	fa09 f303 	lslgt.w	r3, r9, r3
    d65c:	fa26 f000 	lsrgt.w	r0, r6, r0
    d660:	fa06 f003 	lslle.w	r0, r6, r3
    d664:	4318      	orrgt	r0, r3
    d666:	f7fe ff2d 	bl	c4c4 <__aeabi_ui2d>
    d66a:	2301      	movs	r3, #1
    d66c:	4606      	mov	r6, r0
    d66e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
    d672:	9310      	str	r3, [sp, #64]	; 0x40
    d674:	e772      	b.n	d55c <_dtoa_r+0x11c>
    d676:	2301      	movs	r3, #1
    d678:	e7b7      	b.n	d5ea <_dtoa_r+0x1aa>
    d67a:	900e      	str	r0, [sp, #56]	; 0x38
    d67c:	e7b6      	b.n	d5ec <_dtoa_r+0x1ac>
    d67e:	f1ca 0300 	rsb	r3, sl, #0
    d682:	eba8 080a 	sub.w	r8, r8, sl
    d686:	9306      	str	r3, [sp, #24]
    d688:	2300      	movs	r3, #0
    d68a:	930d      	str	r3, [sp, #52]	; 0x34
    d68c:	e7c3      	b.n	d616 <_dtoa_r+0x1d6>
    d68e:	2300      	movs	r3, #0
    d690:	9308      	str	r3, [sp, #32]
    d692:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d694:	2b00      	cmp	r3, #0
    d696:	dc39      	bgt.n	d70c <_dtoa_r+0x2cc>
    d698:	f04f 0901 	mov.w	r9, #1
    d69c:	464b      	mov	r3, r9
    d69e:	f8cd 9004 	str.w	r9, [sp, #4]
    d6a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    d6a6:	2200      	movs	r2, #0
    d6a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d6aa:	6042      	str	r2, [r0, #4]
    d6ac:	2204      	movs	r2, #4
    d6ae:	f102 0614 	add.w	r6, r2, #20
    d6b2:	6841      	ldr	r1, [r0, #4]
    d6b4:	429e      	cmp	r6, r3
    d6b6:	d92f      	bls.n	d718 <_dtoa_r+0x2d8>
    d6b8:	4620      	mov	r0, r4
    d6ba:	f013 f881 	bl	207c0 <_Balloc>
    d6be:	9000      	str	r0, [sp, #0]
    d6c0:	2800      	cmp	r0, #0
    d6c2:	d14b      	bne.n	d75c <_dtoa_r+0x31c>
    d6c4:	4b24      	ldr	r3, [pc, #144]	; (d758 <_dtoa_r+0x318>)
    d6c6:	4602      	mov	r2, r0
    d6c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    d6cc:	e6d1      	b.n	d472 <_dtoa_r+0x32>
    d6ce:	2301      	movs	r3, #1
    d6d0:	e7de      	b.n	d690 <_dtoa_r+0x250>
    d6d2:	2300      	movs	r3, #0
    d6d4:	9308      	str	r3, [sp, #32]
    d6d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d6d8:	eb0a 0903 	add.w	r9, sl, r3
    d6dc:	f109 0301 	add.w	r3, r9, #1
    d6e0:	2b01      	cmp	r3, #1
    d6e2:	9301      	str	r3, [sp, #4]
    d6e4:	bfb8      	it	lt
    d6e6:	2301      	movlt	r3, #1
    d6e8:	e7dd      	b.n	d6a6 <_dtoa_r+0x266>
    d6ea:	2301      	movs	r3, #1
    d6ec:	e7f2      	b.n	d6d4 <_dtoa_r+0x294>
    d6ee:	2501      	movs	r5, #1
    d6f0:	2300      	movs	r3, #0
    d6f2:	9508      	str	r5, [sp, #32]
    d6f4:	9305      	str	r3, [sp, #20]
    d6f6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    d6fa:	2200      	movs	r2, #0
    d6fc:	2312      	movs	r3, #18
    d6fe:	f8cd 9004 	str.w	r9, [sp, #4]
    d702:	9209      	str	r2, [sp, #36]	; 0x24
    d704:	e7cf      	b.n	d6a6 <_dtoa_r+0x266>
    d706:	2301      	movs	r3, #1
    d708:	9308      	str	r3, [sp, #32]
    d70a:	e7f4      	b.n	d6f6 <_dtoa_r+0x2b6>
    d70c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    d710:	464b      	mov	r3, r9
    d712:	f8cd 9004 	str.w	r9, [sp, #4]
    d716:	e7c6      	b.n	d6a6 <_dtoa_r+0x266>
    d718:	3101      	adds	r1, #1
    d71a:	0052      	lsls	r2, r2, #1
    d71c:	6041      	str	r1, [r0, #4]
    d71e:	e7c6      	b.n	d6ae <_dtoa_r+0x26e>
    d720:	636f4361 	.word	0x636f4361
    d724:	3fd287a7 	.word	0x3fd287a7
    d728:	8b60c8b3 	.word	0x8b60c8b3
    d72c:	3fc68a28 	.word	0x3fc68a28
    d730:	509f79fb 	.word	0x509f79fb
    d734:	3fd34413 	.word	0x3fd34413
    d738:	000297fb 	.word	0x000297fb
    d73c:	00029943 	.word	0x00029943
    d740:	7ff00000 	.word	0x7ff00000
    d744:	0002993f 	.word	0x0002993f
    d748:	00029936 	.word	0x00029936
    d74c:	00029402 	.word	0x00029402
    d750:	3ff80000 	.word	0x3ff80000
    d754:	00028830 	.word	0x00028830
    d758:	000299bf 	.word	0x000299bf
    d75c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d75e:	9a00      	ldr	r2, [sp, #0]
    d760:	601a      	str	r2, [r3, #0]
    d762:	9b01      	ldr	r3, [sp, #4]
    d764:	2b0e      	cmp	r3, #14
    d766:	f200 80ad 	bhi.w	d8c4 <_dtoa_r+0x484>
    d76a:	2d00      	cmp	r5, #0
    d76c:	f000 80aa 	beq.w	d8c4 <_dtoa_r+0x484>
    d770:	f1ba 0f00 	cmp.w	sl, #0
    d774:	dd36      	ble.n	d7e4 <_dtoa_r+0x3a4>
    d776:	f00a 030f 	and.w	r3, sl, #15
    d77a:	4ac1      	ldr	r2, [pc, #772]	; (da80 <_dtoa_r+0x640>)
    d77c:	f41a 7f80 	tst.w	sl, #256	; 0x100
    d780:	ea4f 172a 	mov.w	r7, sl, asr #4
    d784:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d788:	ed93 7b00 	vldr	d7, [r3]
    d78c:	eeb0 8a47 	vmov.f32	s16, s14
    d790:	eef0 8a67 	vmov.f32	s17, s15
    d794:	d016      	beq.n	d7c4 <_dtoa_r+0x384>
    d796:	4bbb      	ldr	r3, [pc, #748]	; (da84 <_dtoa_r+0x644>)
    d798:	f007 070f 	and.w	r7, r7, #15
    d79c:	2503      	movs	r5, #3
    d79e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    d7a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    d7a6:	f7ff fabf 	bl	cd28 <__aeabi_ddiv>
    d7aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d7ae:	4eb5      	ldr	r6, [pc, #724]	; (da84 <_dtoa_r+0x644>)
    d7b0:	b957      	cbnz	r7, d7c8 <_dtoa_r+0x388>
    d7b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    d7b6:	ec53 2b18 	vmov	r2, r3, d8
    d7ba:	f7ff fab5 	bl	cd28 <__aeabi_ddiv>
    d7be:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d7c2:	e029      	b.n	d818 <_dtoa_r+0x3d8>
    d7c4:	2502      	movs	r5, #2
    d7c6:	e7f2      	b.n	d7ae <_dtoa_r+0x36e>
    d7c8:	07f9      	lsls	r1, r7, #31
    d7ca:	d508      	bpl.n	d7de <_dtoa_r+0x39e>
    d7cc:	3501      	adds	r5, #1
    d7ce:	ec51 0b18 	vmov	r0, r1, d8
    d7d2:	e9d6 2300 	ldrd	r2, r3, [r6]
    d7d6:	f7ff f97d 	bl	cad4 <__aeabi_dmul>
    d7da:	ec41 0b18 	vmov	d8, r0, r1
    d7de:	107f      	asrs	r7, r7, #1
    d7e0:	3608      	adds	r6, #8
    d7e2:	e7e5      	b.n	d7b0 <_dtoa_r+0x370>
    d7e4:	f000 80a6 	beq.w	d934 <_dtoa_r+0x4f4>
    d7e8:	f1ca 0600 	rsb	r6, sl, #0
    d7ec:	4ba4      	ldr	r3, [pc, #656]	; (da80 <_dtoa_r+0x640>)
    d7ee:	4fa5      	ldr	r7, [pc, #660]	; (da84 <_dtoa_r+0x644>)
    d7f0:	2502      	movs	r5, #2
    d7f2:	f006 020f 	and.w	r2, r6, #15
    d7f6:	1136      	asrs	r6, r6, #4
    d7f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    d7fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    d800:	e9d3 2300 	ldrd	r2, r3, [r3]
    d804:	f7ff f966 	bl	cad4 <__aeabi_dmul>
    d808:	2300      	movs	r3, #0
    d80a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d80e:	2e00      	cmp	r6, #0
    d810:	f040 8085 	bne.w	d91e <_dtoa_r+0x4de>
    d814:	2b00      	cmp	r3, #0
    d816:	d1d2      	bne.n	d7be <_dtoa_r+0x37e>
    d818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d81a:	2b00      	cmp	r3, #0
    d81c:	f000 808c 	beq.w	d938 <_dtoa_r+0x4f8>
    d820:	2200      	movs	r2, #0
    d822:	4b99      	ldr	r3, [pc, #612]	; (da88 <_dtoa_r+0x648>)
    d824:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    d828:	4630      	mov	r0, r6
    d82a:	4639      	mov	r1, r7
    d82c:	f7fe ff24 	bl	c678 <__aeabi_dcmplt>
    d830:	2800      	cmp	r0, #0
    d832:	f000 8081 	beq.w	d938 <_dtoa_r+0x4f8>
    d836:	9b01      	ldr	r3, [sp, #4]
    d838:	2b00      	cmp	r3, #0
    d83a:	d07d      	beq.n	d938 <_dtoa_r+0x4f8>
    d83c:	f1b9 0f00 	cmp.w	r9, #0
    d840:	dd3c      	ble.n	d8bc <_dtoa_r+0x47c>
    d842:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    d846:	3501      	adds	r5, #1
    d848:	2200      	movs	r2, #0
    d84a:	4630      	mov	r0, r6
    d84c:	9307      	str	r3, [sp, #28]
    d84e:	4639      	mov	r1, r7
    d850:	4b8e      	ldr	r3, [pc, #568]	; (da8c <_dtoa_r+0x64c>)
    d852:	f7ff f93f 	bl	cad4 <__aeabi_dmul>
    d856:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
    d85a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d85e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    d862:	4628      	mov	r0, r5
    d864:	f7fe fe3e 	bl	c4e4 <__aeabi_i2d>
    d868:	4632      	mov	r2, r6
    d86a:	463b      	mov	r3, r7
    d86c:	f7ff f932 	bl	cad4 <__aeabi_dmul>
    d870:	4b87      	ldr	r3, [pc, #540]	; (da90 <_dtoa_r+0x650>)
    d872:	2200      	movs	r2, #0
    d874:	f7fe fcea 	bl	c24c <__adddf3>
    d878:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    d87c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d880:	9303      	str	r3, [sp, #12]
    d882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d884:	2b00      	cmp	r3, #0
    d886:	d15c      	bne.n	d942 <_dtoa_r+0x502>
    d888:	2200      	movs	r2, #0
    d88a:	4b82      	ldr	r3, [pc, #520]	; (da94 <_dtoa_r+0x654>)
    d88c:	4630      	mov	r0, r6
    d88e:	4639      	mov	r1, r7
    d890:	f7fe fcda 	bl	c248 <__aeabi_dsub>
    d894:	4606      	mov	r6, r0
    d896:	460f      	mov	r7, r1
    d898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d89c:	f7fe ff0a 	bl	c6b4 <__aeabi_dcmpgt>
    d8a0:	2800      	cmp	r0, #0
    d8a2:	f040 8294 	bne.w	ddce <_dtoa_r+0x98e>
    d8a6:	4630      	mov	r0, r6
    d8a8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    d8ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    d8b0:	4639      	mov	r1, r7
    d8b2:	f7fe fee1 	bl	c678 <__aeabi_dcmplt>
    d8b6:	2800      	cmp	r0, #0
    d8b8:	f040 8286 	bne.w	ddc8 <_dtoa_r+0x988>
    d8bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    d8c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    d8c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d8c6:	2b00      	cmp	r3, #0
    d8c8:	f2c0 8156 	blt.w	db78 <_dtoa_r+0x738>
    d8cc:	f1ba 0f0e 	cmp.w	sl, #14
    d8d0:	f300 8152 	bgt.w	db78 <_dtoa_r+0x738>
    d8d4:	4b6a      	ldr	r3, [pc, #424]	; (da80 <_dtoa_r+0x640>)
    d8d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    d8da:	e9d3 8900 	ldrd	r8, r9, [r3]
    d8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d8e0:	2b00      	cmp	r3, #0
    d8e2:	f280 80e1 	bge.w	daa8 <_dtoa_r+0x668>
    d8e6:	9b01      	ldr	r3, [sp, #4]
    d8e8:	2b00      	cmp	r3, #0
    d8ea:	f300 80dd 	bgt.w	daa8 <_dtoa_r+0x668>
    d8ee:	f040 826b 	bne.w	ddc8 <_dtoa_r+0x988>
    d8f2:	2200      	movs	r2, #0
    d8f4:	4b67      	ldr	r3, [pc, #412]	; (da94 <_dtoa_r+0x654>)
    d8f6:	4640      	mov	r0, r8
    d8f8:	4649      	mov	r1, r9
    d8fa:	f7ff f8eb 	bl	cad4 <__aeabi_dmul>
    d8fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d902:	f7fe fecd 	bl	c6a0 <__aeabi_dcmpge>
    d906:	9e01      	ldr	r6, [sp, #4]
    d908:	4637      	mov	r7, r6
    d90a:	2800      	cmp	r0, #0
    d90c:	f040 8241 	bne.w	dd92 <_dtoa_r+0x952>
    d910:	9d00      	ldr	r5, [sp, #0]
    d912:	2331      	movs	r3, #49	; 0x31
    d914:	f10a 0a01 	add.w	sl, sl, #1
    d918:	f805 3b01 	strb.w	r3, [r5], #1
    d91c:	e23d      	b.n	dd9a <_dtoa_r+0x95a>
    d91e:	07f2      	lsls	r2, r6, #31
    d920:	d505      	bpl.n	d92e <_dtoa_r+0x4ee>
    d922:	3501      	adds	r5, #1
    d924:	e9d7 2300 	ldrd	r2, r3, [r7]
    d928:	f7ff f8d4 	bl	cad4 <__aeabi_dmul>
    d92c:	2301      	movs	r3, #1
    d92e:	1076      	asrs	r6, r6, #1
    d930:	3708      	adds	r7, #8
    d932:	e76c      	b.n	d80e <_dtoa_r+0x3ce>
    d934:	2502      	movs	r5, #2
    d936:	e76f      	b.n	d818 <_dtoa_r+0x3d8>
    d938:	9b01      	ldr	r3, [sp, #4]
    d93a:	f8cd a01c 	str.w	sl, [sp, #28]
    d93e:	930c      	str	r3, [sp, #48]	; 0x30
    d940:	e78d      	b.n	d85e <_dtoa_r+0x41e>
    d942:	9900      	ldr	r1, [sp, #0]
    d944:	980c      	ldr	r0, [sp, #48]	; 0x30
    d946:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d948:	4401      	add	r1, r0
    d94a:	4b4d      	ldr	r3, [pc, #308]	; (da80 <_dtoa_r+0x640>)
    d94c:	ed9d 7b02 	vldr	d7, [sp, #8]
    d950:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    d954:	9102      	str	r1, [sp, #8]
    d956:	9908      	ldr	r1, [sp, #32]
    d958:	eeb0 8a47 	vmov.f32	s16, s14
    d95c:	eef0 8a67 	vmov.f32	s17, s15
    d960:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    d964:	2900      	cmp	r1, #0
    d966:	d045      	beq.n	d9f4 <_dtoa_r+0x5b4>
    d968:	2000      	movs	r0, #0
    d96a:	494b      	ldr	r1, [pc, #300]	; (da98 <_dtoa_r+0x658>)
    d96c:	f7ff f9dc 	bl	cd28 <__aeabi_ddiv>
    d970:	ec53 2b18 	vmov	r2, r3, d8
    d974:	f7fe fc68 	bl	c248 <__aeabi_dsub>
    d978:	9d00      	ldr	r5, [sp, #0]
    d97a:	ec41 0b18 	vmov	d8, r0, r1
    d97e:	4639      	mov	r1, r7
    d980:	4630      	mov	r0, r6
    d982:	f7fe fea1 	bl	c6c8 <__aeabi_d2iz>
    d986:	900c      	str	r0, [sp, #48]	; 0x30
    d988:	f7fe fdac 	bl	c4e4 <__aeabi_i2d>
    d98c:	4602      	mov	r2, r0
    d98e:	460b      	mov	r3, r1
    d990:	4630      	mov	r0, r6
    d992:	4639      	mov	r1, r7
    d994:	f7fe fc58 	bl	c248 <__aeabi_dsub>
    d998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d99a:	4606      	mov	r6, r0
    d99c:	460f      	mov	r7, r1
    d99e:	3330      	adds	r3, #48	; 0x30
    d9a0:	f805 3b01 	strb.w	r3, [r5], #1
    d9a4:	ec53 2b18 	vmov	r2, r3, d8
    d9a8:	f7fe fe66 	bl	c678 <__aeabi_dcmplt>
    d9ac:	2800      	cmp	r0, #0
    d9ae:	d164      	bne.n	da7a <_dtoa_r+0x63a>
    d9b0:	4632      	mov	r2, r6
    d9b2:	463b      	mov	r3, r7
    d9b4:	2000      	movs	r0, #0
    d9b6:	4934      	ldr	r1, [pc, #208]	; (da88 <_dtoa_r+0x648>)
    d9b8:	f7fe fc46 	bl	c248 <__aeabi_dsub>
    d9bc:	ec53 2b18 	vmov	r2, r3, d8
    d9c0:	f7fe fe5a 	bl	c678 <__aeabi_dcmplt>
    d9c4:	2800      	cmp	r0, #0
    d9c6:	f040 80b7 	bne.w	db38 <_dtoa_r+0x6f8>
    d9ca:	9b02      	ldr	r3, [sp, #8]
    d9cc:	429d      	cmp	r5, r3
    d9ce:	f43f af75 	beq.w	d8bc <_dtoa_r+0x47c>
    d9d2:	2200      	movs	r2, #0
    d9d4:	4b2d      	ldr	r3, [pc, #180]	; (da8c <_dtoa_r+0x64c>)
    d9d6:	ec51 0b18 	vmov	r0, r1, d8
    d9da:	f7ff f87b 	bl	cad4 <__aeabi_dmul>
    d9de:	2200      	movs	r2, #0
    d9e0:	4b2a      	ldr	r3, [pc, #168]	; (da8c <_dtoa_r+0x64c>)
    d9e2:	ec41 0b18 	vmov	d8, r0, r1
    d9e6:	4630      	mov	r0, r6
    d9e8:	4639      	mov	r1, r7
    d9ea:	f7ff f873 	bl	cad4 <__aeabi_dmul>
    d9ee:	4606      	mov	r6, r0
    d9f0:	460f      	mov	r7, r1
    d9f2:	e7c4      	b.n	d97e <_dtoa_r+0x53e>
    d9f4:	ec51 0b17 	vmov	r0, r1, d7
    d9f8:	f7ff f86c 	bl	cad4 <__aeabi_dmul>
    d9fc:	9b02      	ldr	r3, [sp, #8]
    d9fe:	9d00      	ldr	r5, [sp, #0]
    da00:	930c      	str	r3, [sp, #48]	; 0x30
    da02:	ec41 0b18 	vmov	d8, r0, r1
    da06:	4639      	mov	r1, r7
    da08:	4630      	mov	r0, r6
    da0a:	f7fe fe5d 	bl	c6c8 <__aeabi_d2iz>
    da0e:	9011      	str	r0, [sp, #68]	; 0x44
    da10:	f7fe fd68 	bl	c4e4 <__aeabi_i2d>
    da14:	4602      	mov	r2, r0
    da16:	460b      	mov	r3, r1
    da18:	4630      	mov	r0, r6
    da1a:	4639      	mov	r1, r7
    da1c:	f7fe fc14 	bl	c248 <__aeabi_dsub>
    da20:	9b11      	ldr	r3, [sp, #68]	; 0x44
    da22:	4606      	mov	r6, r0
    da24:	460f      	mov	r7, r1
    da26:	3330      	adds	r3, #48	; 0x30
    da28:	2200      	movs	r2, #0
    da2a:	f805 3b01 	strb.w	r3, [r5], #1
    da2e:	9b02      	ldr	r3, [sp, #8]
    da30:	429d      	cmp	r5, r3
    da32:	d133      	bne.n	da9c <_dtoa_r+0x65c>
    da34:	4b18      	ldr	r3, [pc, #96]	; (da98 <_dtoa_r+0x658>)
    da36:	ec51 0b18 	vmov	r0, r1, d8
    da3a:	f7fe fc07 	bl	c24c <__adddf3>
    da3e:	4602      	mov	r2, r0
    da40:	460b      	mov	r3, r1
    da42:	4630      	mov	r0, r6
    da44:	4639      	mov	r1, r7
    da46:	f7fe fe35 	bl	c6b4 <__aeabi_dcmpgt>
    da4a:	2800      	cmp	r0, #0
    da4c:	d174      	bne.n	db38 <_dtoa_r+0x6f8>
    da4e:	2000      	movs	r0, #0
    da50:	4911      	ldr	r1, [pc, #68]	; (da98 <_dtoa_r+0x658>)
    da52:	ec53 2b18 	vmov	r2, r3, d8
    da56:	f7fe fbf7 	bl	c248 <__aeabi_dsub>
    da5a:	4602      	mov	r2, r0
    da5c:	460b      	mov	r3, r1
    da5e:	4630      	mov	r0, r6
    da60:	4639      	mov	r1, r7
    da62:	f7fe fe09 	bl	c678 <__aeabi_dcmplt>
    da66:	2800      	cmp	r0, #0
    da68:	f43f af28 	beq.w	d8bc <_dtoa_r+0x47c>
    da6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    da6e:	1e6b      	subs	r3, r5, #1
    da70:	930c      	str	r3, [sp, #48]	; 0x30
    da72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    da76:	2b30      	cmp	r3, #48	; 0x30
    da78:	d0f8      	beq.n	da6c <_dtoa_r+0x62c>
    da7a:	f8dd a01c 	ldr.w	sl, [sp, #28]
    da7e:	e049      	b.n	db14 <_dtoa_r+0x6d4>
    da80:	00028830 	.word	0x00028830
    da84:	00028808 	.word	0x00028808
    da88:	3ff00000 	.word	0x3ff00000
    da8c:	40240000 	.word	0x40240000
    da90:	401c0000 	.word	0x401c0000
    da94:	40140000 	.word	0x40140000
    da98:	3fe00000 	.word	0x3fe00000
    da9c:	4baf      	ldr	r3, [pc, #700]	; (dd5c <_dtoa_r+0x91c>)
    da9e:	f7ff f819 	bl	cad4 <__aeabi_dmul>
    daa2:	4606      	mov	r6, r0
    daa4:	460f      	mov	r7, r1
    daa6:	e7ae      	b.n	da06 <_dtoa_r+0x5c6>
    daa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    daac:	9d00      	ldr	r5, [sp, #0]
    daae:	4642      	mov	r2, r8
    dab0:	464b      	mov	r3, r9
    dab2:	4630      	mov	r0, r6
    dab4:	4639      	mov	r1, r7
    dab6:	f7ff f937 	bl	cd28 <__aeabi_ddiv>
    daba:	f7fe fe05 	bl	c6c8 <__aeabi_d2iz>
    dabe:	9002      	str	r0, [sp, #8]
    dac0:	f7fe fd10 	bl	c4e4 <__aeabi_i2d>
    dac4:	4642      	mov	r2, r8
    dac6:	464b      	mov	r3, r9
    dac8:	f7ff f804 	bl	cad4 <__aeabi_dmul>
    dacc:	4602      	mov	r2, r0
    dace:	460b      	mov	r3, r1
    dad0:	4630      	mov	r0, r6
    dad2:	4639      	mov	r1, r7
    dad4:	f7fe fbb8 	bl	c248 <__aeabi_dsub>
    dad8:	9e02      	ldr	r6, [sp, #8]
    dada:	9f01      	ldr	r7, [sp, #4]
    dadc:	4602      	mov	r2, r0
    dade:	3630      	adds	r6, #48	; 0x30
    dae0:	460b      	mov	r3, r1
    dae2:	f805 6b01 	strb.w	r6, [r5], #1
    dae6:	9e00      	ldr	r6, [sp, #0]
    dae8:	1bae      	subs	r6, r5, r6
    daea:	42b7      	cmp	r7, r6
    daec:	d137      	bne.n	db5e <_dtoa_r+0x71e>
    daee:	f7fe fbad 	bl	c24c <__adddf3>
    daf2:	4642      	mov	r2, r8
    daf4:	464b      	mov	r3, r9
    daf6:	4606      	mov	r6, r0
    daf8:	460f      	mov	r7, r1
    dafa:	f7fe fddb 	bl	c6b4 <__aeabi_dcmpgt>
    dafe:	b9c8      	cbnz	r0, db34 <_dtoa_r+0x6f4>
    db00:	4642      	mov	r2, r8
    db02:	464b      	mov	r3, r9
    db04:	4630      	mov	r0, r6
    db06:	4639      	mov	r1, r7
    db08:	f7fe fdac 	bl	c664 <__aeabi_dcmpeq>
    db0c:	b110      	cbz	r0, db14 <_dtoa_r+0x6d4>
    db0e:	9b02      	ldr	r3, [sp, #8]
    db10:	07d9      	lsls	r1, r3, #31
    db12:	d40f      	bmi.n	db34 <_dtoa_r+0x6f4>
    db14:	4620      	mov	r0, r4
    db16:	4659      	mov	r1, fp
    db18:	f012 fe92 	bl	20840 <_Bfree>
    db1c:	2300      	movs	r3, #0
    db1e:	f10a 0001 	add.w	r0, sl, #1
    db22:	702b      	strb	r3, [r5, #0]
    db24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    db26:	6018      	str	r0, [r3, #0]
    db28:	9b21      	ldr	r3, [sp, #132]	; 0x84
    db2a:	2b00      	cmp	r3, #0
    db2c:	f43f acdb 	beq.w	d4e6 <_dtoa_r+0xa6>
    db30:	601d      	str	r5, [r3, #0]
    db32:	e4d8      	b.n	d4e6 <_dtoa_r+0xa6>
    db34:	f8cd a01c 	str.w	sl, [sp, #28]
    db38:	462b      	mov	r3, r5
    db3a:	461d      	mov	r5, r3
    db3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    db40:	2a39      	cmp	r2, #57	; 0x39
    db42:	d108      	bne.n	db56 <_dtoa_r+0x716>
    db44:	9a00      	ldr	r2, [sp, #0]
    db46:	429a      	cmp	r2, r3
    db48:	d1f7      	bne.n	db3a <_dtoa_r+0x6fa>
    db4a:	9a07      	ldr	r2, [sp, #28]
    db4c:	9900      	ldr	r1, [sp, #0]
    db4e:	3201      	adds	r2, #1
    db50:	9207      	str	r2, [sp, #28]
    db52:	2230      	movs	r2, #48	; 0x30
    db54:	700a      	strb	r2, [r1, #0]
    db56:	781a      	ldrb	r2, [r3, #0]
    db58:	3201      	adds	r2, #1
    db5a:	701a      	strb	r2, [r3, #0]
    db5c:	e78d      	b.n	da7a <_dtoa_r+0x63a>
    db5e:	2200      	movs	r2, #0
    db60:	4b7e      	ldr	r3, [pc, #504]	; (dd5c <_dtoa_r+0x91c>)
    db62:	f7fe ffb7 	bl	cad4 <__aeabi_dmul>
    db66:	2200      	movs	r2, #0
    db68:	2300      	movs	r3, #0
    db6a:	4606      	mov	r6, r0
    db6c:	460f      	mov	r7, r1
    db6e:	f7fe fd79 	bl	c664 <__aeabi_dcmpeq>
    db72:	2800      	cmp	r0, #0
    db74:	d09b      	beq.n	daae <_dtoa_r+0x66e>
    db76:	e7cd      	b.n	db14 <_dtoa_r+0x6d4>
    db78:	9a08      	ldr	r2, [sp, #32]
    db7a:	2a00      	cmp	r2, #0
    db7c:	f000 80c3 	beq.w	dd06 <_dtoa_r+0x8c6>
    db80:	9a05      	ldr	r2, [sp, #20]
    db82:	2a01      	cmp	r2, #1
    db84:	f300 80a8 	bgt.w	dcd8 <_dtoa_r+0x898>
    db88:	9a10      	ldr	r2, [sp, #64]	; 0x40
    db8a:	2a00      	cmp	r2, #0
    db8c:	f000 80a0 	beq.w	dcd0 <_dtoa_r+0x890>
    db90:	f203 4333 	addw	r3, r3, #1075	; 0x433
    db94:	9e06      	ldr	r6, [sp, #24]
    db96:	4645      	mov	r5, r8
    db98:	9a04      	ldr	r2, [sp, #16]
    db9a:	2101      	movs	r1, #1
    db9c:	4620      	mov	r0, r4
    db9e:	4498      	add	r8, r3
    dba0:	441a      	add	r2, r3
    dba2:	9204      	str	r2, [sp, #16]
    dba4:	f012 feb8 	bl	20918 <__i2b>
    dba8:	4607      	mov	r7, r0
    dbaa:	2d00      	cmp	r5, #0
    dbac:	dd0b      	ble.n	dbc6 <_dtoa_r+0x786>
    dbae:	9b04      	ldr	r3, [sp, #16]
    dbb0:	2b00      	cmp	r3, #0
    dbb2:	dd08      	ble.n	dbc6 <_dtoa_r+0x786>
    dbb4:	42ab      	cmp	r3, r5
    dbb6:	9a04      	ldr	r2, [sp, #16]
    dbb8:	bfa8      	it	ge
    dbba:	462b      	movge	r3, r5
    dbbc:	eba8 0803 	sub.w	r8, r8, r3
    dbc0:	1aed      	subs	r5, r5, r3
    dbc2:	1ad3      	subs	r3, r2, r3
    dbc4:	9304      	str	r3, [sp, #16]
    dbc6:	9b06      	ldr	r3, [sp, #24]
    dbc8:	b1fb      	cbz	r3, dc0a <_dtoa_r+0x7ca>
    dbca:	9b08      	ldr	r3, [sp, #32]
    dbcc:	2b00      	cmp	r3, #0
    dbce:	f000 809e 	beq.w	dd0e <_dtoa_r+0x8ce>
    dbd2:	2e00      	cmp	r6, #0
    dbd4:	dd11      	ble.n	dbfa <_dtoa_r+0x7ba>
    dbd6:	4639      	mov	r1, r7
    dbd8:	4632      	mov	r2, r6
    dbda:	4620      	mov	r0, r4
    dbdc:	f012 ff58 	bl	20a90 <__pow5mult>
    dbe0:	465a      	mov	r2, fp
    dbe2:	4601      	mov	r1, r0
    dbe4:	4607      	mov	r7, r0
    dbe6:	4620      	mov	r0, r4
    dbe8:	f012 feac 	bl	20944 <__multiply>
    dbec:	4659      	mov	r1, fp
    dbee:	9007      	str	r0, [sp, #28]
    dbf0:	4620      	mov	r0, r4
    dbf2:	f012 fe25 	bl	20840 <_Bfree>
    dbf6:	9b07      	ldr	r3, [sp, #28]
    dbf8:	469b      	mov	fp, r3
    dbfa:	9b06      	ldr	r3, [sp, #24]
    dbfc:	1b9a      	subs	r2, r3, r6
    dbfe:	d004      	beq.n	dc0a <_dtoa_r+0x7ca>
    dc00:	4659      	mov	r1, fp
    dc02:	4620      	mov	r0, r4
    dc04:	f012 ff44 	bl	20a90 <__pow5mult>
    dc08:	4683      	mov	fp, r0
    dc0a:	2101      	movs	r1, #1
    dc0c:	4620      	mov	r0, r4
    dc0e:	f012 fe83 	bl	20918 <__i2b>
    dc12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dc14:	4606      	mov	r6, r0
    dc16:	2b00      	cmp	r3, #0
    dc18:	dd7b      	ble.n	dd12 <_dtoa_r+0x8d2>
    dc1a:	461a      	mov	r2, r3
    dc1c:	4601      	mov	r1, r0
    dc1e:	4620      	mov	r0, r4
    dc20:	f012 ff36 	bl	20a90 <__pow5mult>
    dc24:	9b05      	ldr	r3, [sp, #20]
    dc26:	4606      	mov	r6, r0
    dc28:	2b01      	cmp	r3, #1
    dc2a:	dd75      	ble.n	dd18 <_dtoa_r+0x8d8>
    dc2c:	2300      	movs	r3, #0
    dc2e:	9306      	str	r3, [sp, #24]
    dc30:	6933      	ldr	r3, [r6, #16]
    dc32:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    dc36:	6918      	ldr	r0, [r3, #16]
    dc38:	f01a f9b5 	bl	27fa6 <__hi0bits>
    dc3c:	f1c0 0020 	rsb	r0, r0, #32
    dc40:	9b04      	ldr	r3, [sp, #16]
    dc42:	4418      	add	r0, r3
    dc44:	f010 001f 	ands.w	r0, r0, #31
    dc48:	f000 8085 	beq.w	dd56 <_dtoa_r+0x916>
    dc4c:	f1c0 0320 	rsb	r3, r0, #32
    dc50:	2b04      	cmp	r3, #4
    dc52:	dd7e      	ble.n	dd52 <_dtoa_r+0x912>
    dc54:	f1c0 001c 	rsb	r0, r0, #28
    dc58:	9b04      	ldr	r3, [sp, #16]
    dc5a:	4480      	add	r8, r0
    dc5c:	4405      	add	r5, r0
    dc5e:	4403      	add	r3, r0
    dc60:	9304      	str	r3, [sp, #16]
    dc62:	f1b8 0f00 	cmp.w	r8, #0
    dc66:	dd05      	ble.n	dc74 <_dtoa_r+0x834>
    dc68:	4659      	mov	r1, fp
    dc6a:	4642      	mov	r2, r8
    dc6c:	4620      	mov	r0, r4
    dc6e:	f012 ff69 	bl	20b44 <__lshift>
    dc72:	4683      	mov	fp, r0
    dc74:	9b04      	ldr	r3, [sp, #16]
    dc76:	2b00      	cmp	r3, #0
    dc78:	dd05      	ble.n	dc86 <_dtoa_r+0x846>
    dc7a:	4631      	mov	r1, r6
    dc7c:	461a      	mov	r2, r3
    dc7e:	4620      	mov	r0, r4
    dc80:	f012 ff60 	bl	20b44 <__lshift>
    dc84:	4606      	mov	r6, r0
    dc86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dc88:	2b00      	cmp	r3, #0
    dc8a:	d069      	beq.n	dd60 <_dtoa_r+0x920>
    dc8c:	4631      	mov	r1, r6
    dc8e:	4658      	mov	r0, fp
    dc90:	f01a f9d9 	bl	28046 <__mcmp>
    dc94:	2800      	cmp	r0, #0
    dc96:	da63      	bge.n	dd60 <_dtoa_r+0x920>
    dc98:	2300      	movs	r3, #0
    dc9a:	4659      	mov	r1, fp
    dc9c:	220a      	movs	r2, #10
    dc9e:	4620      	mov	r0, r4
    dca0:	f012 fdf0 	bl	20884 <__multadd>
    dca4:	9b08      	ldr	r3, [sp, #32]
    dca6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    dcaa:	4683      	mov	fp, r0
    dcac:	2b00      	cmp	r3, #0
    dcae:	f000 818f 	beq.w	dfd0 <_dtoa_r+0xb90>
    dcb2:	4639      	mov	r1, r7
    dcb4:	2300      	movs	r3, #0
    dcb6:	220a      	movs	r2, #10
    dcb8:	4620      	mov	r0, r4
    dcba:	f012 fde3 	bl	20884 <__multadd>
    dcbe:	f1b9 0f00 	cmp.w	r9, #0
    dcc2:	4607      	mov	r7, r0
    dcc4:	f300 808e 	bgt.w	dde4 <_dtoa_r+0x9a4>
    dcc8:	9b05      	ldr	r3, [sp, #20]
    dcca:	2b02      	cmp	r3, #2
    dccc:	dc50      	bgt.n	dd70 <_dtoa_r+0x930>
    dcce:	e089      	b.n	dde4 <_dtoa_r+0x9a4>
    dcd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dcd2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    dcd6:	e75d      	b.n	db94 <_dtoa_r+0x754>
    dcd8:	9b01      	ldr	r3, [sp, #4]
    dcda:	1e5e      	subs	r6, r3, #1
    dcdc:	9b06      	ldr	r3, [sp, #24]
    dcde:	42b3      	cmp	r3, r6
    dce0:	bfb7      	itett	lt
    dce2:	9b06      	ldrlt	r3, [sp, #24]
    dce4:	1b9e      	subge	r6, r3, r6
    dce6:	9606      	strlt	r6, [sp, #24]
    dce8:	1af2      	sublt	r2, r6, r3
    dcea:	bfbf      	itttt	lt
    dcec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
    dcee:	2600      	movlt	r6, #0
    dcf0:	189b      	addlt	r3, r3, r2
    dcf2:	930d      	strlt	r3, [sp, #52]	; 0x34
    dcf4:	9b01      	ldr	r3, [sp, #4]
    dcf6:	2b00      	cmp	r3, #0
    dcf8:	bfb5      	itete	lt
    dcfa:	eba8 0503 	sublt.w	r5, r8, r3
    dcfe:	4645      	movge	r5, r8
    dd00:	2300      	movlt	r3, #0
    dd02:	9b01      	ldrge	r3, [sp, #4]
    dd04:	e748      	b.n	db98 <_dtoa_r+0x758>
    dd06:	9e06      	ldr	r6, [sp, #24]
    dd08:	4645      	mov	r5, r8
    dd0a:	9f08      	ldr	r7, [sp, #32]
    dd0c:	e74d      	b.n	dbaa <_dtoa_r+0x76a>
    dd0e:	9a06      	ldr	r2, [sp, #24]
    dd10:	e776      	b.n	dc00 <_dtoa_r+0x7c0>
    dd12:	9b05      	ldr	r3, [sp, #20]
    dd14:	2b01      	cmp	r3, #1
    dd16:	dc18      	bgt.n	dd4a <_dtoa_r+0x90a>
    dd18:	9b02      	ldr	r3, [sp, #8]
    dd1a:	b9b3      	cbnz	r3, dd4a <_dtoa_r+0x90a>
    dd1c:	9b03      	ldr	r3, [sp, #12]
    dd1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    dd22:	b9a3      	cbnz	r3, dd4e <_dtoa_r+0x90e>
    dd24:	9b03      	ldr	r3, [sp, #12]
    dd26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    dd2a:	0d1b      	lsrs	r3, r3, #20
    dd2c:	051b      	lsls	r3, r3, #20
    dd2e:	b12b      	cbz	r3, dd3c <_dtoa_r+0x8fc>
    dd30:	9b04      	ldr	r3, [sp, #16]
    dd32:	f108 0801 	add.w	r8, r8, #1
    dd36:	3301      	adds	r3, #1
    dd38:	9304      	str	r3, [sp, #16]
    dd3a:	2301      	movs	r3, #1
    dd3c:	9306      	str	r3, [sp, #24]
    dd3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dd40:	2b00      	cmp	r3, #0
    dd42:	f47f af75 	bne.w	dc30 <_dtoa_r+0x7f0>
    dd46:	2001      	movs	r0, #1
    dd48:	e77a      	b.n	dc40 <_dtoa_r+0x800>
    dd4a:	2300      	movs	r3, #0
    dd4c:	e7f6      	b.n	dd3c <_dtoa_r+0x8fc>
    dd4e:	9b02      	ldr	r3, [sp, #8]
    dd50:	e7f4      	b.n	dd3c <_dtoa_r+0x8fc>
    dd52:	d086      	beq.n	dc62 <_dtoa_r+0x822>
    dd54:	4618      	mov	r0, r3
    dd56:	301c      	adds	r0, #28
    dd58:	e77e      	b.n	dc58 <_dtoa_r+0x818>
    dd5a:	bf00      	nop
    dd5c:	40240000 	.word	0x40240000
    dd60:	9b01      	ldr	r3, [sp, #4]
    dd62:	2b00      	cmp	r3, #0
    dd64:	dc38      	bgt.n	ddd8 <_dtoa_r+0x998>
    dd66:	9b05      	ldr	r3, [sp, #20]
    dd68:	2b02      	cmp	r3, #2
    dd6a:	dd35      	ble.n	ddd8 <_dtoa_r+0x998>
    dd6c:	f8dd 9004 	ldr.w	r9, [sp, #4]
    dd70:	f1b9 0f00 	cmp.w	r9, #0
    dd74:	d10d      	bne.n	dd92 <_dtoa_r+0x952>
    dd76:	4631      	mov	r1, r6
    dd78:	464b      	mov	r3, r9
    dd7a:	2205      	movs	r2, #5
    dd7c:	4620      	mov	r0, r4
    dd7e:	f012 fd81 	bl	20884 <__multadd>
    dd82:	4601      	mov	r1, r0
    dd84:	4606      	mov	r6, r0
    dd86:	4658      	mov	r0, fp
    dd88:	f01a f95d 	bl	28046 <__mcmp>
    dd8c:	2800      	cmp	r0, #0
    dd8e:	f73f adbf 	bgt.w	d910 <_dtoa_r+0x4d0>
    dd92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dd94:	9d00      	ldr	r5, [sp, #0]
    dd96:	ea6f 0a03 	mvn.w	sl, r3
    dd9a:	f04f 0800 	mov.w	r8, #0
    dd9e:	4631      	mov	r1, r6
    dda0:	4620      	mov	r0, r4
    dda2:	f012 fd4d 	bl	20840 <_Bfree>
    dda6:	2f00      	cmp	r7, #0
    dda8:	f43f aeb4 	beq.w	db14 <_dtoa_r+0x6d4>
    ddac:	f1b8 0f00 	cmp.w	r8, #0
    ddb0:	d005      	beq.n	ddbe <_dtoa_r+0x97e>
    ddb2:	45b8      	cmp	r8, r7
    ddb4:	d003      	beq.n	ddbe <_dtoa_r+0x97e>
    ddb6:	4641      	mov	r1, r8
    ddb8:	4620      	mov	r0, r4
    ddba:	f012 fd41 	bl	20840 <_Bfree>
    ddbe:	4639      	mov	r1, r7
    ddc0:	4620      	mov	r0, r4
    ddc2:	f012 fd3d 	bl	20840 <_Bfree>
    ddc6:	e6a5      	b.n	db14 <_dtoa_r+0x6d4>
    ddc8:	2600      	movs	r6, #0
    ddca:	4637      	mov	r7, r6
    ddcc:	e7e1      	b.n	dd92 <_dtoa_r+0x952>
    ddce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    ddd0:	f8dd a01c 	ldr.w	sl, [sp, #28]
    ddd4:	4637      	mov	r7, r6
    ddd6:	e59b      	b.n	d910 <_dtoa_r+0x4d0>
    ddd8:	9b08      	ldr	r3, [sp, #32]
    ddda:	f8dd 9004 	ldr.w	r9, [sp, #4]
    ddde:	2b00      	cmp	r3, #0
    dde0:	f000 80fd 	beq.w	dfde <_dtoa_r+0xb9e>
    dde4:	2d00      	cmp	r5, #0
    dde6:	dd05      	ble.n	ddf4 <_dtoa_r+0x9b4>
    dde8:	4639      	mov	r1, r7
    ddea:	462a      	mov	r2, r5
    ddec:	4620      	mov	r0, r4
    ddee:	f012 fea9 	bl	20b44 <__lshift>
    ddf2:	4607      	mov	r7, r0
    ddf4:	9b06      	ldr	r3, [sp, #24]
    ddf6:	2b00      	cmp	r3, #0
    ddf8:	d05c      	beq.n	deb4 <_dtoa_r+0xa74>
    ddfa:	6879      	ldr	r1, [r7, #4]
    ddfc:	4620      	mov	r0, r4
    ddfe:	f012 fcdf 	bl	207c0 <_Balloc>
    de02:	4605      	mov	r5, r0
    de04:	b928      	cbnz	r0, de12 <_dtoa_r+0x9d2>
    de06:	4b80      	ldr	r3, [pc, #512]	; (e008 <_dtoa_r+0xbc8>)
    de08:	4602      	mov	r2, r0
    de0a:	f240 21ea 	movw	r1, #746	; 0x2ea
    de0e:	f7ff bb30 	b.w	d472 <_dtoa_r+0x32>
    de12:	693a      	ldr	r2, [r7, #16]
    de14:	f107 010c 	add.w	r1, r7, #12
    de18:	300c      	adds	r0, #12
    de1a:	3202      	adds	r2, #2
    de1c:	0092      	lsls	r2, r2, #2
    de1e:	f019 fd92 	bl	27946 <memcpy>
    de22:	2201      	movs	r2, #1
    de24:	4629      	mov	r1, r5
    de26:	4620      	mov	r0, r4
    de28:	f012 fe8c 	bl	20b44 <__lshift>
    de2c:	9b00      	ldr	r3, [sp, #0]
    de2e:	46b8      	mov	r8, r7
    de30:	4607      	mov	r7, r0
    de32:	3301      	adds	r3, #1
    de34:	9301      	str	r3, [sp, #4]
    de36:	9b00      	ldr	r3, [sp, #0]
    de38:	444b      	add	r3, r9
    de3a:	9307      	str	r3, [sp, #28]
    de3c:	9b02      	ldr	r3, [sp, #8]
    de3e:	f003 0301 	and.w	r3, r3, #1
    de42:	9306      	str	r3, [sp, #24]
    de44:	9b01      	ldr	r3, [sp, #4]
    de46:	4631      	mov	r1, r6
    de48:	4658      	mov	r0, fp
    de4a:	3b01      	subs	r3, #1
    de4c:	9302      	str	r3, [sp, #8]
    de4e:	f019 fffd 	bl	27e4c <quorem>
    de52:	4603      	mov	r3, r0
    de54:	4641      	mov	r1, r8
    de56:	9004      	str	r0, [sp, #16]
    de58:	4658      	mov	r0, fp
    de5a:	3330      	adds	r3, #48	; 0x30
    de5c:	9308      	str	r3, [sp, #32]
    de5e:	f01a f8f2 	bl	28046 <__mcmp>
    de62:	463a      	mov	r2, r7
    de64:	4681      	mov	r9, r0
    de66:	4631      	mov	r1, r6
    de68:	4620      	mov	r0, r4
    de6a:	f012 fed7 	bl	20c1c <__mdiff>
    de6e:	68c2      	ldr	r2, [r0, #12]
    de70:	4605      	mov	r5, r0
    de72:	9b08      	ldr	r3, [sp, #32]
    de74:	bb02      	cbnz	r2, deb8 <_dtoa_r+0xa78>
    de76:	4601      	mov	r1, r0
    de78:	4658      	mov	r0, fp
    de7a:	f01a f8e4 	bl	28046 <__mcmp>
    de7e:	9b08      	ldr	r3, [sp, #32]
    de80:	4602      	mov	r2, r0
    de82:	4629      	mov	r1, r5
    de84:	4620      	mov	r0, r4
    de86:	e9cd 3208 	strd	r3, r2, [sp, #32]
    de8a:	f012 fcd9 	bl	20840 <_Bfree>
    de8e:	9b05      	ldr	r3, [sp, #20]
    de90:	9a09      	ldr	r2, [sp, #36]	; 0x24
    de92:	9d01      	ldr	r5, [sp, #4]
    de94:	ea43 0102 	orr.w	r1, r3, r2
    de98:	9b06      	ldr	r3, [sp, #24]
    de9a:	430b      	orrs	r3, r1
    de9c:	9b08      	ldr	r3, [sp, #32]
    de9e:	d10d      	bne.n	debc <_dtoa_r+0xa7c>
    dea0:	2b39      	cmp	r3, #57	; 0x39
    dea2:	d029      	beq.n	def8 <_dtoa_r+0xab8>
    dea4:	f1b9 0f00 	cmp.w	r9, #0
    dea8:	dd01      	ble.n	deae <_dtoa_r+0xa6e>
    deaa:	9b04      	ldr	r3, [sp, #16]
    deac:	3331      	adds	r3, #49	; 0x31
    deae:	9a02      	ldr	r2, [sp, #8]
    deb0:	7013      	strb	r3, [r2, #0]
    deb2:	e774      	b.n	dd9e <_dtoa_r+0x95e>
    deb4:	4638      	mov	r0, r7
    deb6:	e7b9      	b.n	de2c <_dtoa_r+0x9ec>
    deb8:	2201      	movs	r2, #1
    deba:	e7e2      	b.n	de82 <_dtoa_r+0xa42>
    debc:	f1b9 0f00 	cmp.w	r9, #0
    dec0:	db06      	blt.n	ded0 <_dtoa_r+0xa90>
    dec2:	9905      	ldr	r1, [sp, #20]
    dec4:	ea41 0909 	orr.w	r9, r1, r9
    dec8:	9906      	ldr	r1, [sp, #24]
    deca:	ea59 0101 	orrs.w	r1, r9, r1
    dece:	d120      	bne.n	df12 <_dtoa_r+0xad2>
    ded0:	2a00      	cmp	r2, #0
    ded2:	ddec      	ble.n	deae <_dtoa_r+0xa6e>
    ded4:	4659      	mov	r1, fp
    ded6:	2201      	movs	r2, #1
    ded8:	4620      	mov	r0, r4
    deda:	9301      	str	r3, [sp, #4]
    dedc:	f012 fe32 	bl	20b44 <__lshift>
    dee0:	4631      	mov	r1, r6
    dee2:	4683      	mov	fp, r0
    dee4:	f01a f8af 	bl	28046 <__mcmp>
    dee8:	2800      	cmp	r0, #0
    deea:	9b01      	ldr	r3, [sp, #4]
    deec:	dc02      	bgt.n	def4 <_dtoa_r+0xab4>
    deee:	d1de      	bne.n	deae <_dtoa_r+0xa6e>
    def0:	07da      	lsls	r2, r3, #31
    def2:	d5dc      	bpl.n	deae <_dtoa_r+0xa6e>
    def4:	2b39      	cmp	r3, #57	; 0x39
    def6:	d1d8      	bne.n	deaa <_dtoa_r+0xa6a>
    def8:	2339      	movs	r3, #57	; 0x39
    defa:	9a02      	ldr	r2, [sp, #8]
    defc:	7013      	strb	r3, [r2, #0]
    defe:	462b      	mov	r3, r5
    df00:	461d      	mov	r5, r3
    df02:	3b01      	subs	r3, #1
    df04:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    df08:	2a39      	cmp	r2, #57	; 0x39
    df0a:	d050      	beq.n	dfae <_dtoa_r+0xb6e>
    df0c:	3201      	adds	r2, #1
    df0e:	701a      	strb	r2, [r3, #0]
    df10:	e745      	b.n	dd9e <_dtoa_r+0x95e>
    df12:	2a00      	cmp	r2, #0
    df14:	dd03      	ble.n	df1e <_dtoa_r+0xade>
    df16:	2b39      	cmp	r3, #57	; 0x39
    df18:	d0ee      	beq.n	def8 <_dtoa_r+0xab8>
    df1a:	3301      	adds	r3, #1
    df1c:	e7c7      	b.n	deae <_dtoa_r+0xa6e>
    df1e:	9a01      	ldr	r2, [sp, #4]
    df20:	9907      	ldr	r1, [sp, #28]
    df22:	f802 3c01 	strb.w	r3, [r2, #-1]
    df26:	428a      	cmp	r2, r1
    df28:	d02a      	beq.n	df80 <_dtoa_r+0xb40>
    df2a:	4659      	mov	r1, fp
    df2c:	2300      	movs	r3, #0
    df2e:	220a      	movs	r2, #10
    df30:	4620      	mov	r0, r4
    df32:	f012 fca7 	bl	20884 <__multadd>
    df36:	45b8      	cmp	r8, r7
    df38:	4683      	mov	fp, r0
    df3a:	f04f 0300 	mov.w	r3, #0
    df3e:	f04f 020a 	mov.w	r2, #10
    df42:	4641      	mov	r1, r8
    df44:	4620      	mov	r0, r4
    df46:	d107      	bne.n	df58 <_dtoa_r+0xb18>
    df48:	f012 fc9c 	bl	20884 <__multadd>
    df4c:	4680      	mov	r8, r0
    df4e:	4607      	mov	r7, r0
    df50:	9b01      	ldr	r3, [sp, #4]
    df52:	3301      	adds	r3, #1
    df54:	9301      	str	r3, [sp, #4]
    df56:	e775      	b.n	de44 <_dtoa_r+0xa04>
    df58:	f012 fc94 	bl	20884 <__multadd>
    df5c:	4639      	mov	r1, r7
    df5e:	4680      	mov	r8, r0
    df60:	2300      	movs	r3, #0
    df62:	220a      	movs	r2, #10
    df64:	4620      	mov	r0, r4
    df66:	f012 fc8d 	bl	20884 <__multadd>
    df6a:	4607      	mov	r7, r0
    df6c:	e7f0      	b.n	df50 <_dtoa_r+0xb10>
    df6e:	f1b9 0f00 	cmp.w	r9, #0
    df72:	9a00      	ldr	r2, [sp, #0]
    df74:	f04f 0800 	mov.w	r8, #0
    df78:	bfcc      	ite	gt
    df7a:	464d      	movgt	r5, r9
    df7c:	2501      	movle	r5, #1
    df7e:	4415      	add	r5, r2
    df80:	4659      	mov	r1, fp
    df82:	2201      	movs	r2, #1
    df84:	4620      	mov	r0, r4
    df86:	9301      	str	r3, [sp, #4]
    df88:	f012 fddc 	bl	20b44 <__lshift>
    df8c:	4631      	mov	r1, r6
    df8e:	4683      	mov	fp, r0
    df90:	f01a f859 	bl	28046 <__mcmp>
    df94:	2800      	cmp	r0, #0
    df96:	dcb2      	bgt.n	defe <_dtoa_r+0xabe>
    df98:	d102      	bne.n	dfa0 <_dtoa_r+0xb60>
    df9a:	9b01      	ldr	r3, [sp, #4]
    df9c:	07db      	lsls	r3, r3, #31
    df9e:	d4ae      	bmi.n	defe <_dtoa_r+0xabe>
    dfa0:	462b      	mov	r3, r5
    dfa2:	461d      	mov	r5, r3
    dfa4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    dfa8:	2a30      	cmp	r2, #48	; 0x30
    dfaa:	d0fa      	beq.n	dfa2 <_dtoa_r+0xb62>
    dfac:	e6f7      	b.n	dd9e <_dtoa_r+0x95e>
    dfae:	9a00      	ldr	r2, [sp, #0]
    dfb0:	429a      	cmp	r2, r3
    dfb2:	d1a5      	bne.n	df00 <_dtoa_r+0xac0>
    dfb4:	f10a 0a01 	add.w	sl, sl, #1
    dfb8:	2331      	movs	r3, #49	; 0x31
    dfba:	e779      	b.n	deb0 <_dtoa_r+0xa70>
    dfbc:	4b13      	ldr	r3, [pc, #76]	; (e00c <_dtoa_r+0xbcc>)
    dfbe:	f7ff bab2 	b.w	d526 <_dtoa_r+0xe6>
    dfc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    dfc4:	2b00      	cmp	r3, #0
    dfc6:	f47f aa89 	bne.w	d4dc <_dtoa_r+0x9c>
    dfca:	4b11      	ldr	r3, [pc, #68]	; (e010 <_dtoa_r+0xbd0>)
    dfcc:	f7ff baab 	b.w	d526 <_dtoa_r+0xe6>
    dfd0:	f1b9 0f00 	cmp.w	r9, #0
    dfd4:	dc03      	bgt.n	dfde <_dtoa_r+0xb9e>
    dfd6:	9b05      	ldr	r3, [sp, #20]
    dfd8:	2b02      	cmp	r3, #2
    dfda:	f73f aec9 	bgt.w	dd70 <_dtoa_r+0x930>
    dfde:	9d00      	ldr	r5, [sp, #0]
    dfe0:	4631      	mov	r1, r6
    dfe2:	4658      	mov	r0, fp
    dfe4:	f019 ff32 	bl	27e4c <quorem>
    dfe8:	9a00      	ldr	r2, [sp, #0]
    dfea:	f100 0330 	add.w	r3, r0, #48	; 0x30
    dfee:	f805 3b01 	strb.w	r3, [r5], #1
    dff2:	1aaa      	subs	r2, r5, r2
    dff4:	4591      	cmp	r9, r2
    dff6:	ddba      	ble.n	df6e <_dtoa_r+0xb2e>
    dff8:	4659      	mov	r1, fp
    dffa:	2300      	movs	r3, #0
    dffc:	220a      	movs	r2, #10
    dffe:	4620      	mov	r0, r4
    e000:	f012 fc40 	bl	20884 <__multadd>
    e004:	4683      	mov	fp, r0
    e006:	e7eb      	b.n	dfe0 <_dtoa_r+0xba0>
    e008:	000299bf 	.word	0x000299bf
    e00c:	00029401 	.word	0x00029401
    e010:	00029936 	.word	0x00029936

0000e014 <gps_handler>:
		}
	}
}

static void gps_handler(struct device *dev, struct gps_event *evt)
{
    e014:	b510      	push	{r4, lr}
    e016:	460c      	mov	r4, r1
	return z_impl_k_uptime_ticks();
    e018:	f019 fb40 	bl	2769c <z_impl_k_uptime_ticks>
	gps_last_active_time = k_uptime_get();
	switch (evt->type) {
    e01c:	7823      	ldrb	r3, [r4, #0]
    e01e:	2b02      	cmp	r3, #2
    e020:	d802      	bhi.n	e028 <gps_handler+0x14>
    e022:	b123      	cbz	r3, e02e <gps_handler+0x1a>
		LOG_INF("GPS_EVT_SEARCH_STARTED");
		gps_control_set_active(true);
		break;
	case GPS_EVT_SEARCH_STOPPED:
		LOG_INF("GPS_EVT_SEARCH_STOPPED");
		gps_control_set_active(false);
    e024:	2000      	movs	r0, #0
    e026:	e003      	b.n	e030 <gps_handler+0x1c>
	switch (evt->type) {
    e028:	2b04      	cmp	r3, #4
    e02a:	d005      	beq.n	e038 <gps_handler+0x24>
		LOG_INF("GPS_EVT_ERROR\n");
		break;
	default:
		break;
	}
}
    e02c:	bd10      	pop	{r4, pc}
		gps_control_set_active(true);
    e02e:	2001      	movs	r0, #1
}
    e030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		gps_control_set_active(false);
    e034:	f000 bc3e 	b.w	e8b4 <gps_control_set_active>
		gps_last_update_time = get_ts();
    e038:	f000 fe8a 	bl	ed50 <get_ts>
    e03c:	4b08      	ldr	r3, [pc, #32]	; (e060 <gps_handler+0x4c>)
		update_position_data(evt->pvt.latitude, evt->pvt.longitude);
    e03e:	ed94 1b04 	vldr	d1, [r4, #16]
    e042:	ed94 0b02 	vldr	d0, [r4, #8]
		gps_last_update_time = get_ts();
    e046:	e9c3 0100 	strd	r0, r1, [r3]
		update_position_data(evt->pvt.latitude, evt->pvt.longitude);
    e04a:	f000 f963 	bl	e314 <update_position_data>
		gps_control_set_active(false);
    e04e:	2000      	movs	r0, #0
    e050:	f000 fc30 	bl	e8b4 <gps_control_set_active>
}
    e054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		gps_control_stop(0);
    e058:	2000      	movs	r0, #0
    e05a:	f000 bca5 	b.w	e9a8 <gps_control_stop>
    e05e:	bf00      	nop
    e060:	20020a00 	.word	0x20020a00

0000e064 <modem_rsrp_handler>:
{
	/* RSRP raw values that represent actual signal strength are
	 * 0 through 97 (per "nRF91 AT Commands" v1.1). If the received value
	 * falls outside this range, we should not send the value.
	 */
	if (rsrp_value > 97) {
    e064:	2861      	cmp	r0, #97	; 0x61
{
    e066:	b510      	push	{r4, lr}
	if (rsrp_value > 97) {
    e068:	d814      	bhi.n	e094 <modem_rsrp_handler+0x30>
		return;
	}

	rsrp.value = rsrp_value;
    e06a:	4b0b      	ldr	r3, [pc, #44]	; (e098 <modem_rsrp_handler+0x34>)
    e06c:	8018      	strh	r0, [r3, #0]
 *
 * @return Remaining time (in milliseconds).
 */
static inline s32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
    e06e:	480b      	ldr	r0, [pc, #44]	; (e09c <modem_rsrp_handler+0x38>)
    e070:	f019 fad5 	bl	2761e <z_timeout_remaining>
    e074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    e078:	fba0 0103 	umull	r0, r1, r0, r3
    e07c:	0bc3      	lsrs	r3, r0, #15

	/* Only send the RSRP if transmission is not already scheduled.
	 * Checking CONFIG_HOLD_TIME_RSRP gives the compiler a shortcut.
	 */
	if (CONFIG_HOLD_TIME_RSRP == 0 ||
    e07e:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
    e082:	d107      	bne.n	e094 <modem_rsrp_handler+0x30>
	    k_delayed_work_remaining_get(&rsrp_work) == 0) {
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
					       K_NO_WAIT);
	}
}
    e084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
    e088:	2200      	movs	r2, #0
    e08a:	2300      	movs	r3, #0
    e08c:	4904      	ldr	r1, [pc, #16]	; (e0a0 <modem_rsrp_handler+0x3c>)
    e08e:	4805      	ldr	r0, [pc, #20]	; (e0a4 <modem_rsrp_handler+0x40>)
    e090:	f010 be16 	b.w	1ecc0 <k_delayed_work_submit_to_queue>
}
    e094:	bd10      	pop	{r4, pc}
    e096:	bf00      	nop
    e098:	200207a4 	.word	0x200207a4
    e09c:	2002244c 	.word	0x2002244c
    e0a0:	20022440 	.word	0x20022440
    e0a4:	20022368 	.word	0x20022368

0000e0a8 <modem_rsrp_data_print>:

/**@brief Publish RSRP data to the cloud. */
static void modem_rsrp_data_print(struct k_work *work)
{
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
    e0a8:	2100      	movs	r1, #0
{
    e0aa:	b530      	push	{r4, r5, lr}
    e0ac:	b0a1      	sub	sp, #132	; 0x84
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
    e0ae:	227c      	movs	r2, #124	; 0x7c
    e0b0:	a801      	add	r0, sp, #4
    e0b2:	9100      	str	r1, [sp, #0]
    e0b4:	f019 fc81 	bl	279ba <memset>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e0b8:	4b0d      	ldr	r3, [pc, #52]	; (e0f0 <modem_rsrp_data_print+0x48>)
    e0ba:	e8d3 3faf 	lda	r3, [r3]
	static s32_t rsrp_prev; /* RSRP value last sent to cloud */
	s32_t rsrp_current;
	size_t len;

	if (atomic_get(&http_post_active) == 0){
    e0be:	b9ab      	cbnz	r3, e0ec <modem_rsrp_data_print+0x44>
		/* The RSRP value is copied locally to avoid any race */
		rsrp_current = rsrp.value - rsrp.offset;
    e0c0:	4b0c      	ldr	r3, [pc, #48]	; (e0f4 <modem_rsrp_data_print+0x4c>)

		if (rsrp_current == rsrp_prev) {
    e0c2:	4d0d      	ldr	r5, [pc, #52]	; (e0f8 <modem_rsrp_data_print+0x50>)
		rsrp_current = rsrp.value - rsrp.offset;
    e0c4:	881c      	ldrh	r4, [r3, #0]
    e0c6:	885b      	ldrh	r3, [r3, #2]
    e0c8:	1ae4      	subs	r4, r4, r3
		if (rsrp_current == rsrp_prev) {
    e0ca:	682b      	ldr	r3, [r5, #0]
    e0cc:	42a3      	cmp	r3, r4
    e0ce:	d00d      	beq.n	e0ec <modem_rsrp_data_print+0x44>
			return;
		}

		len = snprintf(buf, CONFIG_MODEM_INFO_BUFFER_SIZE,
    e0d0:	4623      	mov	r3, r4
    e0d2:	2180      	movs	r1, #128	; 0x80
    e0d4:	4a09      	ldr	r2, [pc, #36]	; (e0fc <modem_rsrp_data_print+0x54>)
    e0d6:	4668      	mov	r0, sp
    e0d8:	f011 fe88 	bl	1fdec <sniprintf>
		LOG_INF("RSRP: %d", rsrp_current);

		rsrp_prev = rsrp_current;

		if (CONFIG_HOLD_TIME_RSRP > 0) {
			k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
    e0dc:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    e0e0:	2300      	movs	r3, #0
    e0e2:	4907      	ldr	r1, [pc, #28]	; (e100 <modem_rsrp_data_print+0x58>)
    e0e4:	4807      	ldr	r0, [pc, #28]	; (e104 <modem_rsrp_data_print+0x5c>)
		rsrp_prev = rsrp_current;
    e0e6:	602c      	str	r4, [r5, #0]
			k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
    e0e8:	f010 fdea 	bl	1ecc0 <k_delayed_work_submit_to_queue>
							K_SECONDS(CONFIG_HOLD_TIME_RSRP));
		}
	}

	
}
    e0ec:	b021      	add	sp, #132	; 0x84
    e0ee:	bd30      	pop	{r4, r5, pc}
    e0f0:	20022438 	.word	0x20022438
    e0f4:	200207a4 	.word	0x200207a4
    e0f8:	2002243c 	.word	0x2002243c
    e0fc:	00029130 	.word	0x00029130
    e100:	20022440 	.word	0x20022440
    e104:	20022368 	.word	0x20022368

0000e108 <error_handler>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e108:	2200      	movs	r2, #0
{
    e10a:	b508      	push	{r3, lr}
    e10c:	4b08      	ldr	r3, [pc, #32]	; (e130 <error_handler+0x28>)
    e10e:	e8d3 1fef 	ldaex	r1, [r3]
    e112:	e8c3 2fec 	stlex	ip, r2, [r3]
    e116:	f1bc 0f00 	cmp.w	ip, #0
    e11a:	d1f8      	bne.n	e10e <error_handler+0x6>
	if (err_type == ERROR_CLOUD) {
    e11c:	b918      	cbnz	r0, e126 <error_handler+0x1e>
	int err = lte_lc_power_off();
    e11e:	f006 ff5b 	bl	14fd8 <lte_lc_power_off>
	bsdlib_shutdown();
    e122:	f018 f94c 	bl	263be <bsdlib_shutdown>
}
    e126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_reboot(0);
    e12a:	2000      	movs	r0, #0
    e12c:	f001 bc04 	b.w	f938 <sys_reboot>
    e130:	20022438 	.word	0x20022438

0000e134 <mac_address_to_str>:
    memcpy(p_mac->mac, mac, sizeof(p_mac->mac));
}

mac_address_str_t
mac_address_to_str(const mac_address_bin_t *p_mac)
{
    e134:	b5f0      	push	{r4, r5, r6, r7, lr}
    e136:	b08d      	sub	sp, #52	; 0x34
    mac_address_str_t mac_str = { 0 };
    e138:	ad07      	add	r5, sp, #28
{
    e13a:	4606      	mov	r6, r0
    e13c:	460b      	mov	r3, r1
    e13e:	462c      	mov	r4, r5
    mac_address_str_t mac_str = { 0 };
    e140:	4a16      	ldr	r2, [pc, #88]	; (e19c <mac_address_to_str+0x68>)
    e142:	f102 0c10 	add.w	ip, r2, #16
    e146:	462f      	mov	r7, r5
    e148:	6810      	ldr	r0, [r2, #0]
    e14a:	6851      	ldr	r1, [r2, #4]
    e14c:	3208      	adds	r2, #8
    e14e:	c703      	stmia	r7!, {r0, r1}
    e150:	4562      	cmp	r2, ip
    e152:	463d      	mov	r5, r7
    e154:	d1f7      	bne.n	e146 <mac_address_to_str+0x12>
    e156:	8812      	ldrh	r2, [r2, #0]
    const uint8_t *   mac     = p_mac->mac;
    snprintf(
    e158:	2112      	movs	r1, #18
    mac_address_str_t mac_str = { 0 };
    e15a:	803a      	strh	r2, [r7, #0]
    snprintf(
    e15c:	795a      	ldrb	r2, [r3, #5]
    e15e:	4620      	mov	r0, r4
    e160:	9204      	str	r2, [sp, #16]
    e162:	791a      	ldrb	r2, [r3, #4]
        mac[1],
        mac[2],
        mac[3],
        mac[4],
        mac[5]);
    return mac_str;
    e164:	ad0b      	add	r5, sp, #44	; 0x2c
    snprintf(
    e166:	9203      	str	r2, [sp, #12]
    e168:	78da      	ldrb	r2, [r3, #3]
    e16a:	9202      	str	r2, [sp, #8]
    e16c:	789a      	ldrb	r2, [r3, #2]
    e16e:	9201      	str	r2, [sp, #4]
    e170:	785a      	ldrb	r2, [r3, #1]
    e172:	9200      	str	r2, [sp, #0]
    e174:	781b      	ldrb	r3, [r3, #0]
    e176:	4a0a      	ldr	r2, [pc, #40]	; (e1a0 <mac_address_to_str+0x6c>)
    e178:	f011 fe38 	bl	1fdec <sniprintf>
    return mac_str;
    e17c:	4623      	mov	r3, r4
    e17e:	4632      	mov	r2, r6
    e180:	461c      	mov	r4, r3
    e182:	cc03      	ldmia	r4!, {r0, r1}
    e184:	42ac      	cmp	r4, r5
    e186:	6010      	str	r0, [r2, #0]
    e188:	6051      	str	r1, [r2, #4]
    e18a:	4623      	mov	r3, r4
    e18c:	f102 0208 	add.w	r2, r2, #8
    e190:	d1f6      	bne.n	e180 <mac_address_to_str+0x4c>
}
    e192:	4630      	mov	r0, r6
    return mac_str;
    e194:	8823      	ldrh	r3, [r4, #0]
    e196:	8013      	strh	r3, [r2, #0]
}
    e198:	b00d      	add	sp, #52	; 0x34
    e19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e19c:	000287ec 	.word	0x000287ec
    e1a0:	00029133 	.word	0x00029133

0000e1a4 <main>:
{
    api_send_get_device_id(RE_CA_UART_GET_DEVICE_ID);
}

void main(void)
{
    e1a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		LOG_INF("Version: %s", log_strdup(CONFIG_RUUVI_NODE_APP_VERSION));
	}


	//Used for GPS Work Handler
	k_work_q_start(&application_work_q, application_stack_area,
    e1a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e1ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e1b0:	4941      	ldr	r1, [pc, #260]	; (e2b8 <main+0x114>)
    e1b2:	4842      	ldr	r0, [pc, #264]	; (e2bc <main+0x118>)
    e1b4:	f010 fd5c 	bl	1ec70 <k_work_q_start>
		       K_THREAD_STACK_SIZEOF(application_stack_area),
		       CONFIG_APPLICATION_WORKQUEUE_PRIORITY);
	if (IS_ENABLED(CONFIG_WATCHDOG)) {
		watchdog_init_and_start(&application_work_q);
    e1b8:	4840      	ldr	r0, [pc, #256]	; (e2bc <main+0x118>)
    e1ba:	f000 fe85 	bl	eec8 <watchdog_init_and_start>
	k_delayed_work_init(&rsrp_work, modem_rsrp_data_print);
    e1be:	4940      	ldr	r1, [pc, #256]	; (e2c0 <main+0x11c>)
    e1c0:	4840      	ldr	r0, [pc, #256]	; (e2c4 <main+0x120>)
    e1c2:	f019 f9f9 	bl	275b8 <k_delayed_work_init>
	led_init();
    e1c6:	f000 f981 	bl	e4cc <led_init>
	led_0_on();
    e1ca:	f000 f9c1 	bl	e550 <led_0_on>
	led_1_on();
    e1ce:	f000 f9db 	bl	e588 <led_1_on>
	led_2_on();
    e1d2:	f000 f9f5 	bl	e5c0 <led_2_on>
	led_2_off();
    e1d6:	f000 fa01 	bl	e5dc <led_2_off>
	err = modem_info_init();
    e1da:	f007 f9eb 	bl	155b4 <modem_info_init>
	if (err) {
    e1de:	b928      	cbnz	r0, e1ec <main+0x48>
	modem_info_params_init(&modem_param);
    e1e0:	4839      	ldr	r0, [pc, #228]	; (e2c8 <main+0x124>)
    e1e2:	f007 f9ed 	bl	155c0 <modem_info_params_init>
	modem_info_rsrp_register(modem_rsrp_handler);
    e1e6:	4839      	ldr	r0, [pc, #228]	; (e2cc <main+0x128>)
    e1e8:	f007 f9ca 	bl	15580 <modem_info_rsrp_register>
	update_imei_data();
    e1ec:	f000 f89e 	bl	e32c <update_imei_data>
	int err = modem_info_string_get(MODEM_INFO_FW_VERSION, modem_fw_buf, sizeof(modem_fw_buf));
    e1f0:	2212      	movs	r2, #18
    e1f2:	4937      	ldr	r1, [pc, #220]	; (e2d0 <main+0x12c>)
    e1f4:	200d      	movs	r0, #13
    e1f6:	f007 f8d3 	bl	153a0 <modem_info_string_get>
	k_sleep(K_SECONDS(2));
    e1fa:	2100      	movs	r1, #0
    e1fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    e200:	f013 fdc8 	bl	21d94 <k_sleep>
	update_ts_modem();
    e204:	f000 fdc2 	bl	ed8c <update_ts_modem>
	k_sleep(K_SECONDS(10));
    e208:	2100      	movs	r1, #0
    e20a:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
    e20e:	f013 fdc1 	bl	21d94 <k_sleep>
	err = gps_control_init(&application_work_q, gps_handler);
    e212:	4930      	ldr	r1, [pc, #192]	; (e2d4 <main+0x130>)
    e214:	4829      	ldr	r0, [pc, #164]	; (e2bc <main+0x118>)
    e216:	f000 fbe5 	bl	e9e4 <gps_control_init>
	if (err) {
    e21a:	4c2f      	ldr	r4, [pc, #188]	; (e2d8 <main+0x134>)
    e21c:	b978      	cbnz	r0, e23e <main+0x9a>
	bool changing = (enable != gps_control_is_enabled());
    e21e:	f000 fb35 	bl	e88c <gps_control_is_enabled>
		led_0_off();
    e222:	f000 f9a3 	bl	e56c <led_0_off>
	err = uart_init();
    e226:	f000 fb11 	bl	e84c <uart_init>
	if(err){
    e22a:	b908      	cbnz	r0, e230 <main+0x8c>
		led_1_off();
    e22c:	f000 f9ba 	bl	e5a4 <led_1_off>
    e230:	2300      	movs	r3, #0
    e232:	e8d4 2fef 	ldaex	r2, [r4]
    e236:	e8c4 3fe1 	stlex	r1, r3, [r4]
    e23a:	2900      	cmp	r1, #0
    e23c:	d1f9      	bne.n	e232 <main+0x8e>
	// Initilise the peripherals
	sensors_init();

	//ruuvi_send_nrf_get_id();

	online_post();
    e23e:	f000 f8f9 	bl	e434 <online_post>

	gps_control_start(0);
    e242:	2000      	movs	r0, #0
    e244:	f000 fb92 	bl	e96c <gps_control_start>
		flash_led(3, 50);
		if (gps_control_is_active()) {
			k_sleep(K_SECONDS(1));
		}
		else{
			if(((get_ts() - gps_last_update_time) /60) >= CONFIG_RUUVI_GPS_UPDATE_INT){
    e248:	f240 7807 	movw	r8, #1799	; 0x707
    e24c:	f04f 0900 	mov.w	r9, #0
				gps_control_start(0);
    e250:	f04f 0b00 	mov.w	fp, #0
			if(((get_ts() - gps_last_update_time) /60) >= CONFIG_RUUVI_GPS_UPDATE_INT){
    e254:	f8df a084 	ldr.w	sl, [pc, #132]	; e2dc <main+0x138>
		flash_led(3, 50);
    e258:	2132      	movs	r1, #50	; 0x32
    e25a:	2003      	movs	r0, #3
    e25c:	f000 fa0e 	bl	e67c <flash_led>
		if (gps_control_is_active()) {
    e260:	f000 fb1e 	bl	e8a0 <gps_control_is_active>
    e264:	4605      	mov	r5, r0
    e266:	b158      	cbz	r0, e280 <main+0xdc>
				// Slight delay to allow gps control to become active
				k_sleep(K_SECONDS(1));
    e268:	f44f 4000 	mov.w	r0, #32768	; 0x8000
			}
			else{
				atomic_set(&http_post_active, 1);
				adv_post();
				k_sleep(K_SECONDS(30));
    e26c:	2100      	movs	r1, #0
    e26e:	f013 fd91 	bl	21d94 <k_sleep>
    e272:	e8d4 3fef 	ldaex	r3, [r4]
    e276:	e8c4 bfe2 	stlex	r2, fp, [r4]
    e27a:	2a00      	cmp	r2, #0
    e27c:	d0ec      	beq.n	e258 <main+0xb4>
    e27e:	e7f8      	b.n	e272 <main+0xce>
			if(((get_ts() - gps_last_update_time) /60) >= CONFIG_RUUVI_GPS_UPDATE_INT){
    e280:	f000 fd66 	bl	ed50 <get_ts>
    e284:	e9da 3200 	ldrd	r3, r2, [sl]
    e288:	1ac6      	subs	r6, r0, r3
    e28a:	eb61 0702 	sbc.w	r7, r1, r2
    e28e:	45b0      	cmp	r8, r6
    e290:	eb79 0307 	sbcs.w	r3, r9, r7
    e294:	da03      	bge.n	e29e <main+0xfa>
				gps_control_start(0);
    e296:	4628      	mov	r0, r5
    e298:	f000 fb68 	bl	e96c <gps_control_start>
    e29c:	e7e4      	b.n	e268 <main+0xc4>
    e29e:	2301      	movs	r3, #1
    e2a0:	e8d4 2fef 	ldaex	r2, [r4]
    e2a4:	e8c4 3fe1 	stlex	r1, r3, [r4]
    e2a8:	2900      	cmp	r1, #0
    e2aa:	d1f9      	bne.n	e2a0 <main+0xfc>
				adv_post();
    e2ac:	f000 f8ca 	bl	e444 <adv_post>
				k_sleep(K_SECONDS(30));
    e2b0:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    e2b4:	e7da      	b.n	e26c <main+0xc8>
    e2b6:	bf00      	nop
    e2b8:	2002b0c8 	.word	0x2002b0c8
    e2bc:	20022368 	.word	0x20022368
    e2c0:	0000e0a9 	.word	0x0000e0a9
    e2c4:	20022440 	.word	0x20022440
    e2c8:	20020a08 	.word	0x20020a08
    e2cc:	0000e065 	.word	0x0000e065
    e2d0:	200281b2 	.word	0x200281b2
    e2d4:	0000e015 	.word	0x0000e015
    e2d8:	20022438 	.word	0x20022438
    e2dc:	20020a00 	.word	0x20020a00

0000e2e0 <update_nrf_mac>:
K_MUTEX_DEFINE(adv_table_mux);

struct adv_report_table adv_reports;
struct adv_report_table adv_reports_buf;

void update_nrf_mac(mac_address_bin_t m){
    e2e0:	b500      	push	{lr}
    e2e2:	b089      	sub	sp, #36	; 0x24
    e2e4:	ab06      	add	r3, sp, #24
    e2e6:	e883 0003 	stmia.w	r3, {r0, r1}
    nrf_mac = mac_address_to_str(&m);
    e2ea:	4619      	mov	r1, r3
    e2ec:	4668      	mov	r0, sp
    e2ee:	f7ff ff21 	bl	e134 <mac_address_to_str>
    e2f2:	466b      	mov	r3, sp
    e2f4:	4a06      	ldr	r2, [pc, #24]	; (e310 <update_nrf_mac+0x30>)
    e2f6:	a904      	add	r1, sp, #16
    e2f8:	f853 0b04 	ldr.w	r0, [r3], #4
    e2fc:	428b      	cmp	r3, r1
    e2fe:	f842 0b04 	str.w	r0, [r2], #4
    e302:	d1f9      	bne.n	e2f8 <update_nrf_mac+0x18>
    e304:	881b      	ldrh	r3, [r3, #0]
    e306:	8013      	strh	r3, [r2, #0]
    LOG_INF("NRF MAC: %s\n", nrf_mac.str_buf);
    return;
}
    e308:	b009      	add	sp, #36	; 0x24
    e30a:	f85d fb04 	ldr.w	pc, [sp], #4
    e30e:	bf00      	nop
    e310:	200281d4 	.word	0x200281d4

0000e314 <update_position_data>:

void update_position_data(double latitude, double longitude){
    latT = latitude;
    e314:	4b03      	ldr	r3, [pc, #12]	; (e324 <update_position_data+0x10>)
    e316:	ed83 0b00 	vstr	d0, [r3]
    longT = longitude;
    e31a:	4b03      	ldr	r3, [pc, #12]	; (e328 <update_position_data+0x14>)
    e31c:	ed83 1b00 	vstr	d1, [r3]
    return;
}
    e320:	4770      	bx	lr
    e322:	bf00      	nop
    e324:	200219e8 	.word	0x200219e8
    e328:	200219f0 	.word	0x200219f0

0000e32c <update_imei_data>:

void update_imei_data(void){
    int err = modem_info_string_get(MODEM_INFO_IMEI, gw_imei_buf, sizeof(gw_imei_buf));
    e32c:	2210      	movs	r2, #16
    e32e:	2013      	movs	r0, #19
    e330:	4901      	ldr	r1, [pc, #4]	; (e338 <update_imei_data+0xc>)
    e332:	f007 b835 	b.w	153a0 <modem_info_string_get>
    e336:	bf00      	nop
    e338:	200281c4 	.word	0x200281c4

0000e33c <adv_post_send_report>:
    // Do something
}*/

void
adv_post_send_report(void *arg)
{
    e33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (NULL == msg)
    e340:	4604      	mov	r4, r0
{
    e342:	b096      	sub	sp, #88	; 0x58
    if (NULL == msg)
    e344:	2800      	cmp	r0, #0
    e346:	d068      	beq.n	e41a <adv_post_send_report+0xde>
    else if (msg->cmd != RE_CA_UART_ADV_RPRT)
    e348:	7803      	ldrb	r3, [r0, #0]
    e34a:	2b10      	cmp	r3, #16
    e34c:	d165      	bne.n	e41a <adv_post_send_report+0xde>
        time_t now    = get_ts();
    e34e:	f000 fcff 	bl	ed50 <get_ts>
	int bytes_written = 0;
    e352:	2600      	movs	r6, #0
        adv->rssi      = report->rssi_db;
    e354:	f994 3027 	ldrsb.w	r3, [r4, #39]	; 0x27
        adv->timestamp = now;
    e358:	e9cd 0102 	strd	r0, r1, [sp, #8]
		status = snprintf(out + bytes_written,
    e35c:	4f30      	ldr	r7, [pc, #192]	; (e420 <adv_post_send_report+0xe4>)
        mac_address_bin_init(&adv->tag_mac, report->mac);
    e35e:	1c61      	adds	r1, r4, #1
    e360:	4668      	mov	r0, sp
        adv->rssi      = report->rssi_db;
    e362:	9304      	str	r3, [sp, #16]
        mac_address_bin_init(&adv->tag_mac, report->mac);
    e364:	3406      	adds	r4, #6
    e366:	f013 fd20 	bl	21daa <mac_address_bin_init>
        to_hex_str(adv->data, sizeof(adv->data), report->adv, report->adv_len);
    e36a:	f894 5020 	ldrb.w	r5, [r4, #32]
	for (; in_size > 0; in_size--) {
    e36e:	b155      	cbz	r5, e386 <adv_post_send_report+0x4a>
		status = snprintf(out + bytes_written,
    e370:	a805      	add	r0, sp, #20
    e372:	463a      	mov	r2, r7
    e374:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    e378:	f1c6 0141 	rsb	r1, r6, #65	; 0x41
    e37c:	4430      	add	r0, r6
    e37e:	f011 fd35 	bl	1fdec <sniprintf>
		if (status < 0) {
    e382:	2800      	cmp	r0, #0
    e384:	da1b      	bge.n	e3be <adv_post_send_report+0x82>
	int bytes_written = 0;
    e386:	2400      	movs	r4, #0
        if (isxdigit(str[i]) == 0)
    e388:	4e26      	ldr	r6, [pc, #152]	; (e424 <adv_post_send_report+0xe8>)
    e38a:	ad05      	add	r5, sp, #20
    for (int i = 0; i < strlen(str); i++)
    e38c:	a805      	add	r0, sp, #20
    e38e:	f7fe fdd3 	bl	cf38 <strlen>
    e392:	42a0      	cmp	r0, r4
    e394:	d817      	bhi.n	e3c6 <adv_post_send_report+0x8a>
    for (int i = 0; i < adv_reports.num_of_advs; i++)
    e396:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
    e398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e39c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e3a0:	4821      	ldr	r0, [pc, #132]	; (e428 <adv_post_send_report+0xec>)
    e3a2:	f00f ff15 	bl	1e1d0 <z_impl_k_mutex_lock>
    gw_metrics.received_advertisements++;
    e3a6:	4a21      	ldr	r2, [pc, #132]	; (e42c <adv_post_send_report+0xf0>)
    e3a8:	4c21      	ldr	r4, [pc, #132]	; (e430 <adv_post_send_report+0xf4>)
    e3aa:	e9d2 3100 	ldrd	r3, r1, [r2]
    e3ae:	3301      	adds	r3, #1
    e3b0:	f141 0100 	adc.w	r1, r1, #0
    bool      found = false;
    e3b4:	462f      	mov	r7, r5
    e3b6:	4626      	mov	r6, r4
    gw_metrics.received_advertisements++;
    e3b8:	e9c2 3100 	strd	r3, r1, [r2]
    for (int i = 0; i < adv_reports.num_of_advs; i++)
    e3bc:	e01b      	b.n	e3f6 <adv_post_send_report+0xba>
	for (; in_size > 0; in_size--) {
    e3be:	3d01      	subs	r5, #1
		bytes_written += status;
    e3c0:	4406      	add	r6, r0
	for (; in_size > 0; in_size--) {
    e3c2:	b2ed      	uxtb	r5, r5
    e3c4:	e7d3      	b.n	e36e <adv_post_send_report+0x32>
        if (isxdigit(str[i]) == 0)
    e3c6:	f815 3b01 	ldrb.w	r3, [r5], #1
    e3ca:	5d9b      	ldrb	r3, [r3, r6]
    e3cc:	f013 0f44 	tst.w	r3, #68	; 0x44
    e3d0:	d023      	beq.n	e41a <adv_post_send_report+0xde>
    for (int i = 0; i < strlen(str); i++)
    e3d2:	3401      	adds	r4, #1
    e3d4:	e7da      	b.n	e38c <adv_post_send_report+0x50>
        if (memcmp(&p_adv->tag_mac, p_mac, sizeof(*p_mac)) == 0)
    e3d6:	f104 0808 	add.w	r8, r4, #8
    e3da:	2206      	movs	r2, #6
    e3dc:	4641      	mov	r1, r8
    e3de:	4668      	mov	r0, sp
    e3e0:	f019 faa3 	bl	2792a <memcmp>
    e3e4:	b928      	cbnz	r0, e3f2 <adv_post_send_report+0xb6>
            adv_reports.table[i] = *p_adv;
    e3e6:	2258      	movs	r2, #88	; 0x58
    e3e8:	4669      	mov	r1, sp
    e3ea:	4640      	mov	r0, r8
    e3ec:	f019 faab 	bl	27946 <memcpy>
            found                = true;
    e3f0:	2701      	movs	r7, #1
    for (int i = 0; i < adv_reports.num_of_advs; i++)
    e3f2:	3501      	adds	r5, #1
    e3f4:	3458      	adds	r4, #88	; 0x58
    e3f6:	6830      	ldr	r0, [r6, #0]
    e3f8:	4285      	cmp	r5, r0
    e3fa:	dbec      	blt.n	e3d6 <adv_post_send_report+0x9a>
    if (!found)
    e3fc:	b957      	cbnz	r7, e414 <adv_post_send_report+0xd8>
        if (adv_reports.num_of_advs < MAX_ADVS_TABLE)
    e3fe:	2809      	cmp	r0, #9
    e400:	dc08      	bgt.n	e414 <adv_post_send_report+0xd8>
            adv_reports.table[adv_reports.num_of_advs++] = *p_adv;
    e402:	2258      	movs	r2, #88	; 0x58
    e404:	1c43      	adds	r3, r0, #1
    e406:	fb02 6000 	mla	r0, r2, r0, r6
    e40a:	4669      	mov	r1, sp
    e40c:	3008      	adds	r0, #8
    e40e:	6033      	str	r3, [r6, #0]
    e410:	f019 fa99 	bl	27946 <memcpy>
	return z_impl_k_mutex_unlock(mutex);
    e414:	4804      	ldr	r0, [pc, #16]	; (e428 <adv_post_send_report+0xec>)
    e416:	f00f ff53 	bl	1e2c0 <z_impl_k_mutex_unlock>
        if (ret == 101)
        {
            //LOG_WRN("Adv report table full, adv dropped");
        }
    }
}
    e41a:	b016      	add	sp, #88	; 0x58
    e41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e420:	0002914c 	.word	0x0002914c
    e424:	000296c9 	.word	0x000296c9
    e428:	200208f4 	.word	0x200208f4
    e42c:	200219e0 	.word	0x200219e0
    e430:	200212f0 	.word	0x200212f0

0000e434 <online_post>:

void
online_post(void){
    http_send_online(gw_imei_buf, nrf_mac.str_buf);
    e434:	4901      	ldr	r1, [pc, #4]	; (e43c <online_post+0x8>)
    e436:	4802      	ldr	r0, [pc, #8]	; (e440 <online_post+0xc>)
    e438:	f000 bba0 	b.w	eb7c <http_send_online>
    e43c:	200281d4 	.word	0x200281d4
    e440:	200281c4 	.word	0x200281c4

0000e444 <adv_post>:
adv_post(void)
{
    adv_report_t *adv = 0;
    LOG_INF("advertisements in table:");

    for (int i = 0; i < adv_reports.num_of_advs; i++)
    e444:	491a      	ldr	r1, [pc, #104]	; (e4b0 <adv_post+0x6c>)
{
    e446:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < adv_reports.num_of_advs; i++)
    e448:	2400      	movs	r4, #0
    e44a:	460d      	mov	r5, r1
{
    e44c:	b086      	sub	sp, #24
    for (int i = 0; i < adv_reports.num_of_advs; i++)
    e44e:	682b      	ldr	r3, [r5, #0]
    e450:	f101 0658 	add.w	r6, r1, #88	; 0x58
    e454:	429c      	cmp	r4, r3
    e456:	db22      	blt.n	e49e <adv_post+0x5a>
    }

    // for thread safety copy the advertisements to a separate buffer for
    // posting
    k_mutex_lock(&adv_table_mux, K_FOREVER);
    adv_reports_buf         = adv_reports;
    e458:	4c16      	ldr	r4, [pc, #88]	; (e4b4 <adv_post+0x70>)
	return z_impl_k_mutex_lock(mutex, timeout);
    e45a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e45e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e462:	4815      	ldr	r0, [pc, #84]	; (e4b8 <adv_post+0x74>)
    e464:	f00f feb4 	bl	1e1d0 <z_impl_k_mutex_lock>
    e468:	f44f 725e 	mov.w	r2, #888	; 0x378
    e46c:	4620      	mov	r0, r4
    e46e:	4910      	ldr	r1, [pc, #64]	; (e4b0 <adv_post+0x6c>)
    e470:	f019 fa69 	bl	27946 <memcpy>
    adv_reports.num_of_advs = 0; // clear the table
    e474:	2300      	movs	r3, #0
    e476:	602b      	str	r3, [r5, #0]
	return z_impl_k_mutex_unlock(mutex);
    e478:	480f      	ldr	r0, [pc, #60]	; (e4b8 <adv_post+0x74>)
    e47a:	f00f ff21 	bl	1e2c0 <z_impl_k_mutex_unlock>
    k_mutex_unlock(&adv_table_mux);


    if (adv_reports_buf.num_of_advs){
    e47e:	6823      	ldr	r3, [r4, #0]
    e480:	b1a3      	cbz	r3, e4ac <adv_post+0x68>
        http_send_advs(&adv_reports_buf, latT, longT, gw_imei_buf, nrf_mac.str_buf);
    e482:	4b0e      	ldr	r3, [pc, #56]	; (e4bc <adv_post+0x78>)
    e484:	4620      	mov	r0, r4
    e486:	ed93 1b00 	vldr	d1, [r3]
    e48a:	4b0d      	ldr	r3, [pc, #52]	; (e4c0 <adv_post+0x7c>)
    e48c:	4a0d      	ldr	r2, [pc, #52]	; (e4c4 <adv_post+0x80>)
    e48e:	ed93 0b00 	vldr	d0, [r3]
    e492:	490d      	ldr	r1, [pc, #52]	; (e4c8 <adv_post+0x84>)
    }
}
    e494:	b006      	add	sp, #24
    e496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        http_send_advs(&adv_reports_buf, latT, longT, gw_imei_buf, nrf_mac.str_buf);
    e49a:	f000 bba5 	b.w	ebe8 <http_send_advs>
        const mac_address_str_t mac_str =  mac_address_to_str(&adv->tag_mac);
    e49e:	3108      	adds	r1, #8
    e4a0:	a801      	add	r0, sp, #4
    e4a2:	f7ff fe47 	bl	e134 <mac_address_to_str>
    for (int i = 0; i < adv_reports.num_of_advs; i++)
    e4a6:	3401      	adds	r4, #1
    e4a8:	4631      	mov	r1, r6
    e4aa:	e7d0      	b.n	e44e <adv_post+0xa>
}
    e4ac:	b006      	add	sp, #24
    e4ae:	bd70      	pop	{r4, r5, r6, pc}
    e4b0:	200212f0 	.word	0x200212f0
    e4b4:	20021668 	.word	0x20021668
    e4b8:	200208f4 	.word	0x200208f4
    e4bc:	200219f0 	.word	0x200219f0
    e4c0:	200219e8 	.word	0x200219e8
    e4c4:	200281d4 	.word	0x200281d4
    e4c8:	200281c4 	.word	0x200281c4

0000e4cc <led_init>:
/*
 * Initializes all LEDs that are present on the board
 */

void led_init(void)
{
    e4cc:	b538      	push	{r3, r4, r5, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    e4ce:	4c1b      	ldr	r4, [pc, #108]	; (e53c <led_init+0x70>)
#if DT_NODE_HAS_STATUS(LED_0, okay)
	dev_led_0 = device_get_binding(LED0);
    e4d0:	4d1b      	ldr	r5, [pc, #108]	; (e540 <led_init+0x74>)
    e4d2:	4620      	mov	r0, r4
    e4d4:	f00f fc0a 	bl	1dcec <z_impl_device_get_binding>
	gpio_pin_configure(dev_led_0, PIN0, GPIO_OUTPUT_ACTIVE | FLAGS0);
    e4d8:	2102      	movs	r1, #2
	dev_led_0 = device_get_binding(LED0);
    e4da:	6028      	str	r0, [r5, #0]
	gpio_pin_configure(dev_led_0, PIN0, GPIO_OUTPUT_ACTIVE | FLAGS0);
    e4dc:	f013 fc9e 	bl	21e1c <gpio_pin_configure.constprop.0>
	gpio_pin_set(dev_led_0, PIN0, 0);
    e4e0:	2200      	movs	r2, #0
    e4e2:	2102      	movs	r1, #2
    e4e4:	6828      	ldr	r0, [r5, #0]
    e4e6:	f013 fc88 	bl	21dfa <gpio_pin_set>
    e4ea:	4620      	mov	r0, r4
    e4ec:	f00f fbfe 	bl	1dcec <z_impl_device_get_binding>
#endif

#if DT_NODE_HAS_STATUS(LED_1, okay)
    dev_led_1 = device_get_binding(LED1);
    e4f0:	4d14      	ldr	r5, [pc, #80]	; (e544 <led_init+0x78>)
    gpio_pin_configure(dev_led_1, PIN1, GPIO_OUTPUT_ACTIVE | FLAGS1);
    e4f2:	2103      	movs	r1, #3
    dev_led_1 = device_get_binding(LED1);
    e4f4:	6028      	str	r0, [r5, #0]
    gpio_pin_configure(dev_led_1, PIN1, GPIO_OUTPUT_ACTIVE | FLAGS1);
    e4f6:	f013 fc91 	bl	21e1c <gpio_pin_configure.constprop.0>
	gpio_pin_set(dev_led_1, PIN1, 0);
    e4fa:	2200      	movs	r2, #0
    e4fc:	2103      	movs	r1, #3
    e4fe:	6828      	ldr	r0, [r5, #0]
    e500:	f013 fc7b 	bl	21dfa <gpio_pin_set>
    e504:	4620      	mov	r0, r4
    e506:	f00f fbf1 	bl	1dcec <z_impl_device_get_binding>
#endif

#if DT_NODE_HAS_STATUS(LED_2, okay)
    dev_led_2 = device_get_binding(LED2);
    e50a:	4d0f      	ldr	r5, [pc, #60]	; (e548 <led_init+0x7c>)
    gpio_pin_configure(dev_led_2, PIN2, GPIO_OUTPUT_ACTIVE | FLAGS2);    
    e50c:	2104      	movs	r1, #4
    dev_led_2 = device_get_binding(LED2);
    e50e:	6028      	str	r0, [r5, #0]
    gpio_pin_configure(dev_led_2, PIN2, GPIO_OUTPUT_ACTIVE | FLAGS2);    
    e510:	f013 fc84 	bl	21e1c <gpio_pin_configure.constprop.0>
    gpio_pin_set(dev_led_2, PIN2, 0);
    e514:	2200      	movs	r2, #0
    e516:	2104      	movs	r1, #4
    e518:	6828      	ldr	r0, [r5, #0]
    e51a:	f013 fc6e 	bl	21dfa <gpio_pin_set>
    e51e:	4620      	mov	r0, r4
    e520:	f00f fbe4 	bl	1dcec <z_impl_device_get_binding>
#endif

#if DT_NODE_HAS_STATUS(LED_3, okay)
    dev_led_3 = device_get_binding(LED3);
    e524:	4c09      	ldr	r4, [pc, #36]	; (e54c <led_init+0x80>)
    gpio_pin_configure(dev_led_3, PIN3, GPIO_OUTPUT_ACTIVE | FLAGS3);    
    e526:	2105      	movs	r1, #5
    dev_led_3 = device_get_binding(LED3);
    e528:	6020      	str	r0, [r4, #0]
    gpio_pin_configure(dev_led_3, PIN3, GPIO_OUTPUT_ACTIVE | FLAGS3);    
    e52a:	f013 fc77 	bl	21e1c <gpio_pin_configure.constprop.0>
    gpio_pin_set(dev_led_3, PIN3, 0);
    e52e:	6820      	ldr	r0, [r4, #0]
    e530:	2200      	movs	r2, #0
#endif
}
    e532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    gpio_pin_set(dev_led_3, PIN3, 0);
    e536:	2105      	movs	r1, #5
    e538:	f013 bc5f 	b.w	21dfa <gpio_pin_set>
    e53c:	00029151 	.word	0x00029151
    e540:	20022460 	.word	0x20022460
    e544:	20022464 	.word	0x20022464
    e548:	20022468 	.word	0x20022468
    e54c:	2002246c 	.word	0x2002246c

0000e550 <led_0_on>:
    gpio_pin_set(dev_led_0, PIN0, led0_state);
}

void led_0_on(void)
{
    led0_state = 1;
    e550:	2201      	movs	r2, #1
    e552:	4b04      	ldr	r3, [pc, #16]	; (e564 <led_0_on+0x14>)
    gpio_pin_set(dev_led_0, PIN0, led0_state);
    e554:	2102      	movs	r1, #2
    led0_state = 1;
    e556:	601a      	str	r2, [r3, #0]
    gpio_pin_set(dev_led_0, PIN0, led0_state);
    e558:	681a      	ldr	r2, [r3, #0]
    e55a:	4b03      	ldr	r3, [pc, #12]	; (e568 <led_0_on+0x18>)
    e55c:	6818      	ldr	r0, [r3, #0]
    e55e:	f013 bc4c 	b.w	21dfa <gpio_pin_set>
    e562:	bf00      	nop
    e564:	20022470 	.word	0x20022470
    e568:	20022460 	.word	0x20022460

0000e56c <led_0_off>:
}

void led_0_off(void)
{
    led0_state = 0;
    e56c:	2200      	movs	r2, #0
    e56e:	4b04      	ldr	r3, [pc, #16]	; (e580 <led_0_off+0x14>)
    gpio_pin_set(dev_led_0, PIN0, led0_state);
    e570:	2102      	movs	r1, #2
    led0_state = 0;
    e572:	601a      	str	r2, [r3, #0]
    gpio_pin_set(dev_led_0, PIN0, led0_state);
    e574:	681a      	ldr	r2, [r3, #0]
    e576:	4b03      	ldr	r3, [pc, #12]	; (e584 <led_0_off+0x18>)
    e578:	6818      	ldr	r0, [r3, #0]
    e57a:	f013 bc3e 	b.w	21dfa <gpio_pin_set>
    e57e:	bf00      	nop
    e580:	20022470 	.word	0x20022470
    e584:	20022460 	.word	0x20022460

0000e588 <led_1_on>:
    gpio_pin_set(dev_led_1, PIN1, led1_state);
}

void led_1_on(void)
{
    led1_state = 1;
    e588:	2201      	movs	r2, #1
    e58a:	4b04      	ldr	r3, [pc, #16]	; (e59c <led_1_on+0x14>)
    gpio_pin_set(dev_led_1, PIN1, led1_state);
    e58c:	2103      	movs	r1, #3
    led1_state = 1;
    e58e:	601a      	str	r2, [r3, #0]
    gpio_pin_set(dev_led_1, PIN1, led1_state);
    e590:	681a      	ldr	r2, [r3, #0]
    e592:	4b03      	ldr	r3, [pc, #12]	; (e5a0 <led_1_on+0x18>)
    e594:	6818      	ldr	r0, [r3, #0]
    e596:	f013 bc30 	b.w	21dfa <gpio_pin_set>
    e59a:	bf00      	nop
    e59c:	20022474 	.word	0x20022474
    e5a0:	20022464 	.word	0x20022464

0000e5a4 <led_1_off>:
}

void led_1_off(void)
{
    led1_state = 0;
    e5a4:	2200      	movs	r2, #0
    e5a6:	4b04      	ldr	r3, [pc, #16]	; (e5b8 <led_1_off+0x14>)
    gpio_pin_set(dev_led_1, PIN1, led1_state);
    e5a8:	2103      	movs	r1, #3
    led1_state = 0;
    e5aa:	601a      	str	r2, [r3, #0]
    gpio_pin_set(dev_led_1, PIN1, led1_state);
    e5ac:	681a      	ldr	r2, [r3, #0]
    e5ae:	4b03      	ldr	r3, [pc, #12]	; (e5bc <led_1_off+0x18>)
    e5b0:	6818      	ldr	r0, [r3, #0]
    e5b2:	f013 bc22 	b.w	21dfa <gpio_pin_set>
    e5b6:	bf00      	nop
    e5b8:	20022474 	.word	0x20022474
    e5bc:	20022464 	.word	0x20022464

0000e5c0 <led_2_on>:
    gpio_pin_set(dev_led_2, PIN2, led2_state);
}

void led_2_on(void)
{
    led2_state = 1;
    e5c0:	2201      	movs	r2, #1
    e5c2:	4b04      	ldr	r3, [pc, #16]	; (e5d4 <led_2_on+0x14>)
    gpio_pin_set(dev_led_2, PIN2, led2_state);
    e5c4:	2104      	movs	r1, #4
    led2_state = 1;
    e5c6:	601a      	str	r2, [r3, #0]
    gpio_pin_set(dev_led_2, PIN2, led2_state);
    e5c8:	681a      	ldr	r2, [r3, #0]
    e5ca:	4b03      	ldr	r3, [pc, #12]	; (e5d8 <led_2_on+0x18>)
    e5cc:	6818      	ldr	r0, [r3, #0]
    e5ce:	f013 bc14 	b.w	21dfa <gpio_pin_set>
    e5d2:	bf00      	nop
    e5d4:	20022478 	.word	0x20022478
    e5d8:	20022468 	.word	0x20022468

0000e5dc <led_2_off>:
}

void led_2_off(void)
{
    led2_state = 0;
    e5dc:	2200      	movs	r2, #0
    e5de:	4b04      	ldr	r3, [pc, #16]	; (e5f0 <led_2_off+0x14>)
    gpio_pin_set(dev_led_2, PIN2, led2_state);
    e5e0:	2104      	movs	r1, #4
    led2_state = 0;
    e5e2:	601a      	str	r2, [r3, #0]
    gpio_pin_set(dev_led_2, PIN2, led2_state);
    e5e4:	681a      	ldr	r2, [r3, #0]
    e5e6:	4b03      	ldr	r3, [pc, #12]	; (e5f4 <led_2_off+0x18>)
    e5e8:	6818      	ldr	r0, [r3, #0]
    e5ea:	f013 bc06 	b.w	21dfa <gpio_pin_set>
    e5ee:	bf00      	nop
    e5f0:	20022478 	.word	0x20022478
    e5f4:	20022468 	.word	0x20022468

0000e5f8 <toggle_led>:
/*
 * Generic call that passes an integer to allow the toggle of each LED.
 * If integer doesn't correlate to an LED nothing happens.
 */
void toggle_led(int led){
    switch(led){
    e5f8:	2803      	cmp	r0, #3
    e5fa:	d82d      	bhi.n	e658 <toggle_led+0x60>
    e5fc:	e8df f000 	tbb	[pc, r0]
    e600:	22180e02 	.word	0x22180e02
    led0_state = !led0_state;
    e604:	4a15      	ldr	r2, [pc, #84]	; (e65c <toggle_led+0x64>)
    gpio_pin_set(dev_led_0, PIN0, led0_state);
    e606:	2102      	movs	r1, #2
    led0_state = !led0_state;
    e608:	6813      	ldr	r3, [r2, #0]
    e60a:	fab3 f383 	clz	r3, r3
    e60e:	095b      	lsrs	r3, r3, #5
    e610:	6013      	str	r3, [r2, #0]
    gpio_pin_set(dev_led_0, PIN0, led0_state);
    e612:	6812      	ldr	r2, [r2, #0]
    e614:	4b12      	ldr	r3, [pc, #72]	; (e660 <toggle_led+0x68>)
    gpio_pin_set(dev_led_3, PIN3, led3_state);
    e616:	6818      	ldr	r0, [r3, #0]
    e618:	f013 bbef 	b.w	21dfa <gpio_pin_set>
    led1_state = !led1_state;
    e61c:	4a11      	ldr	r2, [pc, #68]	; (e664 <toggle_led+0x6c>)
    gpio_pin_set(dev_led_1, PIN1, led1_state);
    e61e:	2103      	movs	r1, #3
    led1_state = !led1_state;
    e620:	6813      	ldr	r3, [r2, #0]
    e622:	fab3 f383 	clz	r3, r3
    e626:	095b      	lsrs	r3, r3, #5
    e628:	6013      	str	r3, [r2, #0]
    gpio_pin_set(dev_led_1, PIN1, led1_state);
    e62a:	6812      	ldr	r2, [r2, #0]
    e62c:	4b0e      	ldr	r3, [pc, #56]	; (e668 <toggle_led+0x70>)
    e62e:	e7f2      	b.n	e616 <toggle_led+0x1e>
    led2_state = !led2_state;
    e630:	4a0e      	ldr	r2, [pc, #56]	; (e66c <toggle_led+0x74>)
    gpio_pin_set(dev_led_2, PIN2, led2_state);
    e632:	2104      	movs	r1, #4
    led2_state = !led2_state;
    e634:	6813      	ldr	r3, [r2, #0]
    e636:	fab3 f383 	clz	r3, r3
    e63a:	095b      	lsrs	r3, r3, #5
    e63c:	6013      	str	r3, [r2, #0]
    gpio_pin_set(dev_led_2, PIN2, led2_state);
    e63e:	6812      	ldr	r2, [r2, #0]
    e640:	4b0b      	ldr	r3, [pc, #44]	; (e670 <toggle_led+0x78>)
    e642:	e7e8      	b.n	e616 <toggle_led+0x1e>
    led3_state = !led3_state;
    e644:	4a0b      	ldr	r2, [pc, #44]	; (e674 <toggle_led+0x7c>)
    gpio_pin_set(dev_led_3, PIN3, led3_state);
    e646:	2105      	movs	r1, #5
    led3_state = !led3_state;
    e648:	6813      	ldr	r3, [r2, #0]
    e64a:	fab3 f383 	clz	r3, r3
    e64e:	095b      	lsrs	r3, r3, #5
    e650:	6013      	str	r3, [r2, #0]
    gpio_pin_set(dev_led_3, PIN3, led3_state);
    e652:	6812      	ldr	r2, [r2, #0]
    e654:	4b08      	ldr	r3, [pc, #32]	; (e678 <toggle_led+0x80>)
    e656:	e7de      	b.n	e616 <toggle_led+0x1e>
            break;
#endif
        default:
            break;
    }
}
    e658:	4770      	bx	lr
    e65a:	bf00      	nop
    e65c:	20022470 	.word	0x20022470
    e660:	20022460 	.word	0x20022460
    e664:	20022474 	.word	0x20022474
    e668:	20022464 	.word	0x20022464
    e66c:	20022478 	.word	0x20022478
    e670:	20022468 	.word	0x20022468
    e674:	2002247c 	.word	0x2002247c
    e678:	2002246c 	.word	0x2002246c

0000e67c <flash_led>:
 * Generic call to flash an LED.
 * If LED is on the state will change to off.
 * Then a toggle will be called to turn the led on. If on it will remain on.
 * After a delay another toggle will be called, turning the led off.
 */
void flash_led(int led, int delay){
    e67c:	b570      	push	{r4, r5, r6, lr}
    e67e:	4604      	mov	r4, r0
    e680:	460d      	mov	r5, r1
    e682:	2803      	cmp	r0, #3
    e684:	d806      	bhi.n	e694 <flash_led+0x18>
    e686:	e8df f000 	tbb	[pc, r0]
    e68a:	2022      	.short	0x2022
    e68c:	021e      	.short	0x021e
    switch(led){
        case 3:
            led3_state = 0;
    e68e:	4b11      	ldr	r3, [pc, #68]	; (e6d4 <flash_led+0x58>)
            break;
        case 1:
            led1_state = 0;
            break;
        case 0:
            led0_state = 0;
    e690:	2200      	movs	r2, #0
    e692:	601a      	str	r2, [r3, #0]
            break;
    }
    toggle_led(led);
    e694:	4620      	mov	r0, r4
    e696:	f7ff ffaf 	bl	e5f8 <toggle_led>
    e69a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    e69e:	f240 30e7 	movw	r0, #999	; 0x3e7
    e6a2:	2100      	movs	r1, #0
    k_sleep(K_MSEC(delay));
    e6a4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    e6a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e6ac:	2300      	movs	r3, #0
    e6ae:	fbc6 0105 	smlal	r0, r1, r6, r5
    e6b2:	f7fe f881 	bl	c7b8 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    e6b6:	2100      	movs	r1, #0
    e6b8:	f010 f998 	bl	1e9ec <z_impl_k_sleep>
    toggle_led(led);
    e6bc:	4620      	mov	r0, r4
}
    e6be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    toggle_led(led);
    e6c2:	f7ff bf99 	b.w	e5f8 <toggle_led>
            led2_state = 0;
    e6c6:	4b04      	ldr	r3, [pc, #16]	; (e6d8 <flash_led+0x5c>)
    e6c8:	e7e2      	b.n	e690 <flash_led+0x14>
            led1_state = 0;
    e6ca:	4b04      	ldr	r3, [pc, #16]	; (e6dc <flash_led+0x60>)
    e6cc:	e7e0      	b.n	e690 <flash_led+0x14>
            led0_state = 0;
    e6ce:	4b04      	ldr	r3, [pc, #16]	; (e6e0 <flash_led+0x64>)
    e6d0:	e7de      	b.n	e690 <flash_led+0x14>
    e6d2:	bf00      	nop
    e6d4:	2002247c 	.word	0x2002247c
    e6d8:	20022478 	.word	0x20022478
    e6dc:	20022474 	.word	0x20022474
    e6e0:	20022470 	.word	0x20022470

0000e6e4 <rx_parse_task>:
/**USER_VARIABLES***/
/*start*/
static terminal_struct_t terminal;
/*end*/

void rx_parse_task(void){
    e6e4:	b510      	push	{r4, lr}
    //LOG_INF("RPT started");
    //do{
    if (terminal.size != 0){
    e6e6:	4c33      	ldr	r4, [pc, #204]	; (e7b4 <rx_parse_task+0xd0>)
void rx_parse_task(void){
    e6e8:	b08c      	sub	sp, #48	; 0x30
    if (terminal.size != 0){
    e6ea:	6823      	ldr	r3, [r4, #0]
    e6ec:	b1d3      	cbz	r3, e724 <rx_parse_task+0x40>
        //LOG_INF("Start of RPT: %d", terminal.size);
        if(terminal.rx_buffer[RE_CA_UART_STX_INDEX] == RE_CA_UART_STX){
    e6ee:	7923      	ldrb	r3, [r4, #4]
    e6f0:	2bca      	cmp	r3, #202	; 0xca
    e6f2:	d10c      	bne.n	e70e <rx_parse_task+0x2a>
            re_ca_uart_payload_t uart_payload = { 0 };
    e6f4:	2228      	movs	r2, #40	; 0x28
    e6f6:	2100      	movs	r1, #0
    e6f8:	a802      	add	r0, sp, #8
    e6fa:	f019 f95e 	bl	279ba <memset>
            switch (terminal.rx_buffer[RE_CA_UART_CMD_INDEX]){
    e6fe:	79a3      	ldrb	r3, [r4, #6]
    e700:	2b18      	cmp	r3, #24
    e702:	d82b      	bhi.n	e75c <rx_parse_task+0x78>
    e704:	2b0e      	cmp	r3, #14
    e706:	d80f      	bhi.n	e728 <rx_parse_task+0x44>
    e708:	3b05      	subs	r3, #5
    e70a:	2b07      	cmp	r3, #7
    e70c:	d928      	bls.n	e760 <rx_parse_task+0x7c>
                case RE_CA_UART_GET_DEVICE_ID:
                    re_ca_uart_decode (terminal.rx_buffer, &uart_payload);
                    break;
            }
        }
        memset(terminal.rx_buffer, 0, RX_BUFFER_MAX_SIZE);
    e70e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e712:	2100      	movs	r1, #0
    e714:	4828      	ldr	r0, [pc, #160]	; (e7b8 <rx_parse_task+0xd4>)
    e716:	f019 f950 	bl	279ba <memset>
        terminal.size = 0;
    e71a:	2300      	movs	r3, #0
    e71c:	7023      	strb	r3, [r4, #0]
    e71e:	7063      	strb	r3, [r4, #1]
    e720:	70a3      	strb	r3, [r4, #2]
    e722:	70e3      	strb	r3, [r4, #3]
        //LOG_INF("END of RPT");
    }
//}while(1);
    
}
    e724:	b00c      	add	sp, #48	; 0x30
    e726:	bd10      	pop	{r4, pc}
    e728:	3b0f      	subs	r3, #15
    e72a:	2b09      	cmp	r3, #9
    e72c:	d8ef      	bhi.n	e70e <rx_parse_task+0x2a>
    e72e:	a201      	add	r2, pc, #4	; (adr r2, e734 <rx_parse_task+0x50>)
    e730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e734:	0000e761 	.word	0x0000e761
    e738:	0000e76b 	.word	0x0000e76b
    e73c:	0000e77b 	.word	0x0000e77b
    e740:	0000e70f 	.word	0x0000e70f
    e744:	0000e70f 	.word	0x0000e70f
    e748:	0000e70f 	.word	0x0000e70f
    e74c:	0000e70f 	.word	0x0000e70f
    e750:	0000e70f 	.word	0x0000e70f
    e754:	0000e70f 	.word	0x0000e70f
    e758:	0000e761 	.word	0x0000e761
            switch (terminal.rx_buffer[RE_CA_UART_CMD_INDEX]){
    e75c:	2b20      	cmp	r3, #32
    e75e:	d1d6      	bne.n	e70e <rx_parse_task+0x2a>
                    re_ca_uart_decode (terminal.rx_buffer, &uart_payload);
    e760:	a902      	add	r1, sp, #8
    e762:	4815      	ldr	r0, [pc, #84]	; (e7b8 <rx_parse_task+0xd4>)
    e764:	f013 fb90 	bl	21e88 <re_ca_uart_decode>
                    break;
    e768:	e7d1      	b.n	e70e <rx_parse_task+0x2a>
                    re_ca_uart_decode (terminal.rx_buffer, &uart_payload);
    e76a:	a902      	add	r1, sp, #8
    e76c:	4812      	ldr	r0, [pc, #72]	; (e7b8 <rx_parse_task+0xd4>)
    e76e:	f013 fb8b 	bl	21e88 <re_ca_uart_decode>
                    adv_post_send_report((void *)&uart_payload);
    e772:	a802      	add	r0, sp, #8
    e774:	f7ff fde2 	bl	e33c <adv_post_send_report>
                    break;
    e778:	e7c9      	b.n	e70e <rx_parse_task+0x2a>
                    re_ca_uart_decode (terminal.rx_buffer, &uart_payload);
    e77a:	a902      	add	r1, sp, #8
    e77c:	480e      	ldr	r0, [pc, #56]	; (e7b8 <rx_parse_task+0xd4>)
    e77e:	f013 fb83 	bl	21e88 <re_ca_uart_decode>
                    mac.mac[0U] = (uart_payload.params.device_id.addr >> 40U) & 0xFFU;
    e782:	f8dd 3011 	ldr.w	r3, [sp, #17]
    e786:	f8dd 2015 	ldr.w	r2, [sp, #21]
                    mac.mac[5U] = (uart_payload.params.device_id.addr >> 0U) & 0xFFU;
    e78a:	f88d 3005 	strb.w	r3, [sp, #5]
                    mac.mac[0U] = (uart_payload.params.device_id.addr >> 40U) & 0xFFU;
    e78e:	0a11      	lsrs	r1, r2, #8
                    mac.mac[1U] = (uart_payload.params.device_id.addr >> 32U) & 0xFFU;
    e790:	f88d 2001 	strb.w	r2, [sp, #1]
                    mac.mac[2U] = (uart_payload.params.device_id.addr >> 24U) & 0xFFU;
    e794:	0e1a      	lsrs	r2, r3, #24
    e796:	f88d 2002 	strb.w	r2, [sp, #2]
                    mac.mac[3U] = (uart_payload.params.device_id.addr >> 16U) & 0xFFU;
    e79a:	0c1a      	lsrs	r2, r3, #16
    e79c:	f88d 2003 	strb.w	r2, [sp, #3]
                    mac.mac[4U] = (uart_payload.params.device_id.addr >> 8U) & 0xFFU;
    e7a0:	0a1a      	lsrs	r2, r3, #8
                    mac.mac[0U] = (uart_payload.params.device_id.addr >> 40U) & 0xFFU;
    e7a2:	f88d 1000 	strb.w	r1, [sp]
                    mac.mac[4U] = (uart_payload.params.device_id.addr >> 8U) & 0xFFU;
    e7a6:	f88d 2004 	strb.w	r2, [sp, #4]
                    update_nrf_mac(mac);
    e7aa:	e9dd 0100 	ldrd	r0, r1, [sp]
    e7ae:	f7ff fd97 	bl	e2e0 <update_nrf_mac>
                    break;
    e7b2:	e7ac      	b.n	e70e <rx_parse_task+0x2a>
    e7b4:	200281e6 	.word	0x200281e6
    e7b8:	200281ea 	.word	0x200281ea

0000e7bc <uart_fifo_callback>:

static void uart_fifo_callback(struct device *dev)
{
    e7bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (terminal.size == 0){
    e7be:	4c18      	ldr	r4, [pc, #96]	; (e820 <uart_fifo_callback+0x64>)
{
    e7c0:	4605      	mov	r5, r0
    if (terminal.size == 0){
    e7c2:	6823      	ldr	r3, [r4, #0]
    e7c4:	bb0b      	cbnz	r3, e80a <uart_fifo_callback+0x4e>
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    e7c6:	6883      	ldr	r3, [r0, #8]
    e7c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    e7ca:	b103      	cbz	r3, e7ce <uart_fifo_callback+0x12>
		return api->irq_update(dev);
    e7cc:	4798      	blx	r3
	if (api->irq_rx_ready) {
    e7ce:	68ab      	ldr	r3, [r5, #8]
    e7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e7d2:	b1d3      	cbz	r3, e80a <uart_fifo_callback+0x4e>
		return api->irq_rx_ready(dev);
    e7d4:	4628      	mov	r0, r5
    e7d6:	4798      	blx	r3
        uint8_t data;
        if (!uart_irq_update(dev)) {
            LOG_ERR("Error: uart_irq_update");
        }
        if (uart_irq_rx_ready(dev)) {
    e7d8:	b1b8      	cbz	r0, e80a <uart_fifo_callback+0x4e>
	if (api->fifo_read) {
    e7da:	68ab      	ldr	r3, [r5, #8]
    e7dc:	699b      	ldr	r3, [r3, #24]
    e7de:	b1a3      	cbz	r3, e80a <uart_fifo_callback+0x4e>
		return api->fifo_read(dev, rx_data, size);
    e7e0:	2201      	movs	r2, #1
    e7e2:	4628      	mov	r0, r5
    e7e4:	f10d 0107 	add.w	r1, sp, #7
    e7e8:	4798      	blx	r3
            int rx_size_it = uart_fifo_read(dev, &data, 1);
            if(rx_size_it > 0){
    e7ea:	2800      	cmp	r0, #0
    e7ec:	dd0d      	ble.n	e80a <uart_fifo_callback+0x4e>
                rx_size += rx_size_it;
    e7ee:	4a0d      	ldr	r2, [pc, #52]	; (e824 <uart_fifo_callback+0x68>)
                if (data != 0x0A){
    e7f0:	f89d 5007 	ldrb.w	r5, [sp, #7]
                rx_size += rx_size_it;
    e7f4:	6813      	ldr	r3, [r2, #0]
    e7f6:	490c      	ldr	r1, [pc, #48]	; (e828 <uart_fifo_callback+0x6c>)
    e7f8:	4418      	add	r0, r3
                if (data != 0x0A){
    e7fa:	2d0a      	cmp	r5, #10
    e7fc:	680b      	ldr	r3, [r1, #0]
                rx_size += rx_size_it;
    e7fe:	6010      	str	r0, [r2, #0]
                if (data != 0x0A){
    e800:	d005      	beq.n	e80e <uart_fifo_callback+0x52>
                    terminal.rx_buffer[rx_i] = data;
    e802:	441c      	add	r4, r3
                    ++rx_i;
    e804:	3301      	adds	r3, #1
                    terminal.rx_buffer[rx_i] = data;
    e806:	7125      	strb	r5, [r4, #4]
                    ++rx_i;
    e808:	600b      	str	r3, [r1, #0]
                    rx_parse_task();
                }
            }
        }
    }
}
    e80a:	b003      	add	sp, #12
    e80c:	bd30      	pop	{r4, r5, pc}
                    terminal.size = rx_size;
    e80e:	6020      	str	r0, [r4, #0]
                    terminal.rx_buffer[rx_i] = data;
    e810:	441c      	add	r4, r3
                    rx_i=0;
    e812:	2300      	movs	r3, #0
                    terminal.rx_buffer[rx_i] = data;
    e814:	7125      	strb	r5, [r4, #4]
                    rx_i=0;
    e816:	600b      	str	r3, [r1, #0]
                    rx_size = 0;
    e818:	6013      	str	r3, [r2, #0]
                    rx_parse_task();
    e81a:	f7ff ff63 	bl	e6e4 <rx_parse_task>
}
    e81e:	e7f4      	b.n	e80a <uart_fifo_callback+0x4e>
    e820:	200281e6 	.word	0x200281e6
    e824:	20022484 	.word	0x20022484
    e828:	20022480 	.word	0x20022480

0000e82c <uart_driver_write>:


void uart_driver_write(uint8_t *data, uint8_t data_length)      
{
    e82c:	b570      	push	{r4, r5, r6, lr}
    e82e:	4604      	mov	r4, r0
    uint8_t i;
    for (i = 0; i < data_length; i++) {
        //printk("%02X", data[i]);
        uart_poll_out(uart_dev, data[i]);
    e830:	4e05      	ldr	r6, [pc, #20]	; (e848 <uart_driver_write+0x1c>)
    e832:	1845      	adds	r5, r0, r1
    for (i = 0; i < data_length; i++) {
    e834:	42ac      	cmp	r4, r5
    e836:	d100      	bne.n	e83a <uart_driver_write+0xe>
    }
}
    e838:	bd70      	pop	{r4, r5, r6, pc}
        uart_poll_out(uart_dev, data[i]);
    e83a:	6830      	ldr	r0, [r6, #0]
    e83c:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    e840:	6883      	ldr	r3, [r0, #8]
    e842:	685b      	ldr	r3, [r3, #4]
    e844:	4798      	blx	r3
    for (i = 0; i < data_length; i++) {
    e846:	e7f5      	b.n	e834 <uart_driver_write+0x8>
    e848:	20022488 	.word	0x20022488

0000e84c <uart_init>:

uint8_t uart_init()
{
    e84c:	b510      	push	{r4, lr}
    e84e:	480c      	ldr	r0, [pc, #48]	; (e880 <uart_init+0x34>)
    e850:	f00f fa4c 	bl	1dcec <z_impl_device_get_binding>
	uart_dev = device_get_binding(BLE_UART);
    e854:	4c0b      	ldr	r4, [pc, #44]	; (e884 <uart_init+0x38>)
    e856:	4602      	mov	r2, r0
    e858:	6020      	str	r0, [r4, #0]
    if (!uart_dev) {
    e85a:	b170      	cbz	r0, e87a <uart_init+0x2e>
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    e85c:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    e85e:	b11b      	cbz	r3, e868 <uart_init+0x1c>
    e860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e862:	b10b      	cbz	r3, e868 <uart_init+0x1c>
		api->irq_callback_set(dev, cb, user_data);
    e864:	4908      	ldr	r1, [pc, #32]	; (e888 <uart_init+0x3c>)
    e866:	4798      	blx	r3
        return 1;
    }
    else{
        uart_irq_callback_set(uart_dev, uart_fifo_callback);
        uart_irq_rx_enable(uart_dev);
    e868:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable) {
    e86a:	6883      	ldr	r3, [r0, #8]
    e86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e86e:	b103      	cbz	r3, e872 <uart_init+0x26>
		api->irq_rx_enable(dev);
    e870:	4798      	blx	r3
       /* k_thread_create(&rpt_thread, rpt_stack, STACKSIZE,
                                    rx_parse_task, NULL, NULL, NULL,
                                    RPT_PRIORITY, 0, K_NO_WAIT); */
        ruuvi_send_nrf_get_id();
    e872:	f013 fa9f 	bl	21db4 <ruuvi_send_nrf_get_id>
        return 0;
    e876:	2000      	movs	r0, #0
    } 
}
    e878:	bd10      	pop	{r4, pc}
        return 1;
    e87a:	2001      	movs	r0, #1
    e87c:	e7fc      	b.n	e878 <uart_init+0x2c>
    e87e:	bf00      	nop
    e880:	00029158 	.word	0x00029158
    e884:	20022488 	.word	0x20022488
    e888:	0000e7bd 	.word	0x0000e7bd

0000e88c <gps_control_is_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e88c:	4b03      	ldr	r3, [pc, #12]	; (e89c <gps_control_is_enabled+0x10>)
    e88e:	e8d3 0faf 	lda	r0, [r3]
}

bool gps_control_is_enabled(void)
{
	return atomic_get(&gps_is_enabled);
}
    e892:	3800      	subs	r0, #0
    e894:	bf18      	it	ne
    e896:	2001      	movne	r0, #1
    e898:	4770      	bx	lr
    e89a:	bf00      	nop
    e89c:	20022498 	.word	0x20022498

0000e8a0 <gps_control_is_active>:
    e8a0:	4b03      	ldr	r3, [pc, #12]	; (e8b0 <gps_control_is_active+0x10>)
    e8a2:	e8d3 0faf 	lda	r0, [r3]

bool gps_control_is_active(void)
{
	return atomic_get(&gps_is_active);
}
    e8a6:	3800      	subs	r0, #0
    e8a8:	bf18      	it	ne
    e8aa:	2001      	movne	r0, #1
    e8ac:	4770      	bx	lr
    e8ae:	bf00      	nop
    e8b0:	20022494 	.word	0x20022494

0000e8b4 <gps_control_set_active>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e8b4:	4b05      	ldr	r3, [pc, #20]	; (e8cc <gps_control_set_active+0x18>)
    e8b6:	e8d3 2fef 	ldaex	r2, [r3]
    e8ba:	e8c3 0fe1 	stlex	r1, r0, [r3]
    e8be:	2900      	cmp	r1, #0
    e8c0:	d1f9      	bne.n	e8b6 <gps_control_set_active+0x2>

bool gps_control_set_active(bool active)
{
	return atomic_set(&gps_is_active, active ? 1 : 0);
}
    e8c2:	1e10      	subs	r0, r2, #0
    e8c4:	bf18      	it	ne
    e8c6:	2001      	movne	r0, #1
    e8c8:	4770      	bx	lr
    e8ca:	bf00      	nop
    e8cc:	20022494 	.word	0x20022494

0000e8d0 <stop>:
{
    e8d0:	b508      	push	{r3, lr}
	if (gps_dev == NULL) {
    e8d2:	4b0b      	ldr	r3, [pc, #44]	; (e900 <stop+0x30>)
    e8d4:	6818      	ldr	r0, [r3, #0]
    e8d6:	b188      	cbz	r0, e8fc <stop+0x2c>
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->driver_api;

	if (api->stop == NULL) {
    e8d8:	6883      	ldr	r3, [r0, #8]
    e8da:	685b      	ldr	r3, [r3, #4]
    e8dc:	b173      	cbz	r3, e8fc <stop+0x2c>
		return -ENOTSUP;
	}

	return api->stop(dev);
    e8de:	4798      	blx	r3
	if (err) {
    e8e0:	4603      	mov	r3, r0
    e8e2:	b958      	cbnz	r0, e8fc <stop+0x2c>
    e8e4:	4a07      	ldr	r2, [pc, #28]	; (e904 <stop+0x34>)
    e8e6:	e8d2 1fef 	ldaex	r1, [r2]
    e8ea:	e8c2 3fec 	stlex	ip, r3, [r2]
    e8ee:	f1bc 0f00 	cmp.w	ip, #0
    e8f2:	d1f8      	bne.n	e8e6 <stop+0x16>
}
    e8f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gps_control_set_active(false);
    e8f8:	f7ff bfdc 	b.w	e8b4 <gps_control_set_active>
}
    e8fc:	bd08      	pop	{r3, pc}
    e8fe:	bf00      	nop
    e900:	20022490 	.word	0x20022490
    e904:	20022498 	.word	0x20022498

0000e908 <start>:
{
    e908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct gps_config gps_cfg = {
    e90a:	2210      	movs	r2, #16
    e90c:	2100      	movs	r1, #0
    e90e:	4668      	mov	r0, sp
    e910:	f019 f853 	bl	279ba <memset>
    e914:	2302      	movs	r3, #2
    e916:	f88d 3000 	strb.w	r3, [sp]
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
    e91a:	4b11      	ldr	r3, [pc, #68]	; (e960 <start+0x58>)
	if (gps_dev == NULL) {
    e91c:	4c11      	ldr	r4, [pc, #68]	; (e964 <start+0x5c>)
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
    e91e:	681b      	ldr	r3, [r3, #0]
    e920:	f503 73b4 	add.w	r3, r3, #360	; 0x168
	struct gps_config gps_cfg = {
    e924:	9301      	str	r3, [sp, #4]
    e926:	f44f 73b4 	mov.w	r3, #360	; 0x168
    e92a:	9302      	str	r3, [sp, #8]
	if (gps_dev == NULL) {
    e92c:	6823      	ldr	r3, [r4, #0]
    e92e:	b1a3      	cbz	r3, e95a <start+0x52>
	err = lte_lc_psm_req(true);
    e930:	2001      	movs	r0, #1
    e932:	f006 fb6d 	bl	15010 <lte_lc_psm_req>
	err = gps_start(gps_dev, &gps_cfg);
    e936:	6820      	ldr	r0, [r4, #0]
	if ((dev == NULL) || (cfg == NULL)) {
    e938:	b178      	cbz	r0, e95a <start+0x52>
	if (api->start == NULL) {
    e93a:	6883      	ldr	r3, [r0, #8]
    e93c:	681b      	ldr	r3, [r3, #0]
    e93e:	b163      	cbz	r3, e95a <start+0x52>
	return api->start(dev, cfg);
    e940:	4669      	mov	r1, sp
    e942:	4798      	blx	r3
	if (err) {
    e944:	b948      	cbnz	r0, e95a <start+0x52>
    e946:	2001      	movs	r0, #1
    e948:	4b07      	ldr	r3, [pc, #28]	; (e968 <start+0x60>)
    e94a:	e8d3 2fef 	ldaex	r2, [r3]
    e94e:	e8c3 0fe1 	stlex	r1, r0, [r3]
    e952:	2900      	cmp	r1, #0
    e954:	d1f9      	bne.n	e94a <start+0x42>
	gps_control_set_active(true);
    e956:	f7ff ffad 	bl	e8b4 <gps_control_set_active>
}
    e95a:	b004      	add	sp, #16
    e95c:	bd10      	pop	{r4, pc}
    e95e:	bf00      	nop
    e960:	2002249c 	.word	0x2002249c
    e964:	20022490 	.word	0x20022490
    e968:	20022498 	.word	0x20022498

0000e96c <gps_control_start>:

void gps_control_start(u32_t delay_ms)
{
    e96c:	b5d0      	push	{r4, r6, r7, lr}
    e96e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e972:	f240 36e7 	movw	r6, #999	; 0x3e7
    e976:	2700      	movs	r7, #0
    e978:	fbe1 6700 	umlal	r6, r7, r1, r0
	k_delayed_work_submit_to_queue(app_work_q, &start_work,
    e97c:	4b08      	ldr	r3, [pc, #32]	; (e9a0 <gps_control_start+0x34>)
    e97e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e982:	681c      	ldr	r4, [r3, #0]
    e984:	4630      	mov	r0, r6
    e986:	2300      	movs	r3, #0
    e988:	4639      	mov	r1, r7
    e98a:	f7fd ff15 	bl	c7b8 <__aeabi_uldivmod>
    e98e:	2300      	movs	r3, #0
    e990:	4602      	mov	r2, r0
    e992:	4904      	ldr	r1, [pc, #16]	; (e9a4 <gps_control_start+0x38>)
    e994:	4620      	mov	r0, r4
				       K_MSEC(delay_ms));
}
    e996:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	k_delayed_work_submit_to_queue(app_work_q, &start_work,
    e99a:	f010 b991 	b.w	1ecc0 <k_delayed_work_submit_to_queue>
    e99e:	bf00      	nop
    e9a0:	2002248c 	.word	0x2002248c
    e9a4:	200224a0 	.word	0x200224a0

0000e9a8 <gps_control_stop>:

void gps_control_stop(u32_t delay_ms)
{
    e9a8:	b5d0      	push	{r4, r6, r7, lr}
    e9aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e9ae:	f240 36e7 	movw	r6, #999	; 0x3e7
    e9b2:	2700      	movs	r7, #0
    e9b4:	fbe1 6700 	umlal	r6, r7, r1, r0
	k_delayed_work_submit_to_queue(app_work_q, &stop_work,
    e9b8:	4b08      	ldr	r3, [pc, #32]	; (e9dc <gps_control_stop+0x34>)
    e9ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e9be:	681c      	ldr	r4, [r3, #0]
    e9c0:	4630      	mov	r0, r6
    e9c2:	2300      	movs	r3, #0
    e9c4:	4639      	mov	r1, r7
    e9c6:	f7fd fef7 	bl	c7b8 <__aeabi_uldivmod>
    e9ca:	2300      	movs	r3, #0
    e9cc:	4602      	mov	r2, r0
    e9ce:	4904      	ldr	r1, [pc, #16]	; (e9e0 <gps_control_stop+0x38>)
    e9d0:	4620      	mov	r0, r4
				       K_MSEC(delay_ms));
}
    e9d2:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	k_delayed_work_submit_to_queue(app_work_q, &stop_work,
    e9d6:	f010 b973 	b.w	1ecc0 <k_delayed_work_submit_to_queue>
    e9da:	bf00      	nop
    e9dc:	2002248c 	.word	0x2002248c
    e9e0:	200224c0 	.word	0x200224c0

0000e9e4 <gps_control_init>:
	return gps_reporting_interval_seconds;
}

/** @brief Configures and starts the GPS device. */
int gps_control_init(struct k_work_q *work_q, gps_event_handler_t handler)
{
    e9e4:	b538      	push	{r3, r4, r5, lr}
	int err;
	static bool is_init;

	if (is_init) {
    e9e6:	4d18      	ldr	r5, [pc, #96]	; (ea48 <gps_control_init+0x64>)
{
    e9e8:	460c      	mov	r4, r1
	if (is_init) {
    e9ea:	782b      	ldrb	r3, [r5, #0]
    e9ec:	b9fb      	cbnz	r3, ea2e <gps_control_init+0x4a>
		return -EALREADY;
	}

	if ((work_q == NULL) || (handler == NULL)) {
    e9ee:	b308      	cbz	r0, ea34 <gps_control_init+0x50>
    e9f0:	b301      	cbz	r1, ea34 <gps_control_init+0x50>
		return -EINVAL;
	}

	app_work_q = work_q;
    e9f2:	4b16      	ldr	r3, [pc, #88]	; (ea4c <gps_control_init+0x68>)
    e9f4:	6018      	str	r0, [r3, #0]
    e9f6:	4816      	ldr	r0, [pc, #88]	; (ea50 <gps_control_init+0x6c>)
    e9f8:	f00f f978 	bl	1dcec <z_impl_device_get_binding>

	gps_dev = device_get_binding(CONFIG_GPS_DEV_NAME);
    e9fc:	4a15      	ldr	r2, [pc, #84]	; (ea54 <gps_control_init+0x70>)
    e9fe:	6010      	str	r0, [r2, #0]
	if (gps_dev == NULL) {
    ea00:	b1d8      	cbz	r0, ea3a <gps_control_init+0x56>
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->driver_api;

	if (api->init == NULL) {
    ea02:	6883      	ldr	r3, [r0, #8]
    ea04:	68db      	ldr	r3, [r3, #12]
    ea06:	b1db      	cbz	r3, ea40 <gps_control_init+0x5c>
		return -ENOTSUP;
	}

	return api->init(dev, handler);
    ea08:	4621      	mov	r1, r4
    ea0a:	4798      	blx	r3
			log_strdup(CONFIG_GPS_DEV_NAME));
		return -ENODEV;
	}

	err = gps_init(gps_dev, handler);
	if (err) {
    ea0c:	4604      	mov	r4, r0
    ea0e:	b960      	cbnz	r0, ea2a <gps_control_init+0x46>
		LOG_ERR("Could not initialize GPS, error: %d", err);
		return err;
	}

	k_delayed_work_init(&start_work, start);
    ea10:	4911      	ldr	r1, [pc, #68]	; (ea58 <gps_control_init+0x74>)
    ea12:	4812      	ldr	r0, [pc, #72]	; (ea5c <gps_control_init+0x78>)
    ea14:	f018 fdd0 	bl	275b8 <k_delayed_work_init>
	k_delayed_work_init(&stop_work, stop);
    ea18:	4911      	ldr	r1, [pc, #68]	; (ea60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1>)
    ea1a:	4812      	ldr	r0, [pc, #72]	; (ea64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4>)
    ea1c:	f018 fdcc 	bl	275b8 <k_delayed_work_init>

#if !defined(CONFIG_GPS_SIM)
	gps_reporting_interval_seconds =
    ea20:	221e      	movs	r2, #30
    ea22:	4b11      	ldr	r3, [pc, #68]	; (ea68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>)
    ea24:	601a      	str	r2, [r3, #0]
	gps_reporting_interval_seconds = CONFIG_GPS_CONTROL_FIX_CHECK_INTERVAL;
#endif

	LOG_INF("GPS initialized");

	is_init = true;
    ea26:	2301      	movs	r3, #1
    ea28:	702b      	strb	r3, [r5, #0]

	return err;
}
    ea2a:	4620      	mov	r0, r4
    ea2c:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
    ea2e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    ea32:	e7fa      	b.n	ea2a <gps_control_init+0x46>
		return -EINVAL;
    ea34:	f06f 0415 	mvn.w	r4, #21
    ea38:	e7f7      	b.n	ea2a <gps_control_init+0x46>
		return -ENODEV;
    ea3a:	f06f 0412 	mvn.w	r4, #18
    ea3e:	e7f4      	b.n	ea2a <gps_control_init+0x46>
		return -ENOTSUP;
    ea40:	f06f 0485 	mvn.w	r4, #133	; 0x85
    ea44:	e7f1      	b.n	ea2a <gps_control_init+0x46>
    ea46:	bf00      	nop
    ea48:	20028deb 	.word	0x20028deb
    ea4c:	2002248c 	.word	0x2002248c
    ea50:	0002915f 	.word	0x0002915f
    ea54:	20022490 	.word	0x20022490
    ea58:	0000e909 	.word	0x0000e909
    ea5c:	200224a0 	.word	0x200224a0
    ea60:	0000e8d1 	.word	0x0000e8d1
    ea64:	200224c0 	.word	0x200224c0
    ea68:	2002249c 	.word	0x2002249c

0000ea6c <close_https_socket>:
    //Remove later
    LOG_INF("Message %d Sent\n", msgcnt);
    return 0;
}

static void close_https_socket(void){
    ea6c:	b508      	push	{r3, lr}
    LOG_INF("Finished. Closing HTTPS socket");
    freeaddrinfo(res);
    ea6e:	4b05      	ldr	r3, [pc, #20]	; (ea84 <close_https_socket+0x18>)
	return zsock_getaddrinfo(host, service, hints, res);
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
    ea70:	6818      	ldr	r0, [r3, #0]
    ea72:	f013 fed6 	bl	22822 <zsock_freeaddrinfo>
	(void)close(fd);
    ea76:	4b04      	ldr	r3, [pc, #16]	; (ea88 <close_https_socket+0x1c>)
    ea78:	6818      	ldr	r0, [r3, #0]
	return;
}
    ea7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&sock, K_SYSCALL_ZSOCK_CLOSE);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_close(sock);
    ea7e:	f013 bf56 	b.w	2292e <z_impl_zsock_close>
    ea82:	bf00      	nop
    ea84:	200224e8 	.word	0x200224e8
    ea88:	200224e0 	.word	0x200224e0

0000ea8c <open_https_socket>:

static int open_https_socket(void){
    ea8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return zsock_getaddrinfo(host, service, hints, res);
    ea8e:	4d1a      	ldr	r5, [pc, #104]	; (eaf8 <open_https_socket+0x6c>)
    ea90:	2100      	movs	r1, #0
    ea92:	462b      	mov	r3, r5
    ea94:	4a19      	ldr	r2, [pc, #100]	; (eafc <open_https_socket+0x70>)
    ea96:	481a      	ldr	r0, [pc, #104]	; (eb00 <open_https_socket+0x74>)
    ea98:	f013 fec1 	bl	2281e <zsock_getaddrinfo>
    LOG_INF("Opening HTTP Socket");
    int err;
	err = getaddrinfo(CONFIG_RUUVI_ENDPOINT_HOST, NULL, &hints, &res);
	if (err) {
    ea9c:	4604      	mov	r4, r0
    ea9e:	bb40      	cbnz	r0, eaf2 <open_https_socket+0x66>
		LOG_ERR("getaddrinfo errno %d\n", errno);
		/* No clean up needed, just return */
		return err;
	}
	((struct sockaddr_in *)res->ai_addr)->sin_port = htons(443);
    eaa0:	f64b 3201 	movw	r2, #47873	; 0xbb01
    eaa4:	682b      	ldr	r3, [r5, #0]
    eaa6:	699b      	ldr	r3, [r3, #24]
    eaa8:	805a      	strh	r2, [r3, #2]
	return z_impl_zsock_socket(family, type, proto);
    eaaa:	2101      	movs	r1, #1
    eaac:	f44f 7281 	mov.w	r2, #258	; 0x102
    eab0:	4608      	mov	r0, r1
    eab2:	f000 fd59 	bl	f568 <z_impl_zsock_socket>
	fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TLS_1_2);
    eab6:	4e13      	ldr	r6, [pc, #76]	; (eb04 <open_https_socket+0x78>)
	if (fd == -1) {
    eab8:	1c43      	adds	r3, r0, #1
    eaba:	4604      	mov	r4, r0
	fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TLS_1_2);
    eabc:	6030      	str	r0, [r6, #0]
	if (fd == -1) {
    eabe:	d102      	bne.n	eac6 <open_https_socket+0x3a>
	}

	err = connect(fd, res->ai_addr, sizeof(struct sockaddr_in));
	if (err) {
		LOG_ERR("connect() failed, err: %d\n", errno);
		close_https_socket();
    eac0:	f7ff ffd4 	bl	ea6c <close_https_socket>
		return err;
    eac4:	e015      	b.n	eaf2 <open_https_socket+0x66>
	int verify = OPTIONAL;
    eac6:	2301      	movs	r3, #1
    eac8:	9303      	str	r3, [sp, #12]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke5(*(uintptr_t *)&sock, *(uintptr_t *)&level, *(uintptr_t *)&optname, *(uintptr_t *)&optval, *(uintptr_t *)&optlen, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
    eaca:	2304      	movs	r3, #4
    eacc:	2205      	movs	r2, #5
    eace:	9300      	str	r3, [sp, #0]
    ead0:	f44f 718d 	mov.w	r1, #282	; 0x11a
    ead4:	ab03      	add	r3, sp, #12
    ead6:	f014 f95b 	bl	22d90 <z_impl_zsock_setsockopt>
	if (err) {
    eada:	4604      	mov	r4, r0
    eadc:	2800      	cmp	r0, #0
    eade:	d1ef      	bne.n	eac0 <open_https_socket+0x34>
	err = connect(fd, res->ai_addr, sizeof(struct sockaddr_in));
    eae0:	682b      	ldr	r3, [r5, #0]
    eae2:	6830      	ldr	r0, [r6, #0]
    eae4:	6999      	ldr	r1, [r3, #24]
	return z_impl_zsock_connect(sock, addr, addrlen);
    eae6:	2208      	movs	r2, #8
    eae8:	f013 ff3a 	bl	22960 <z_impl_zsock_connect>
	if (err) {
    eaec:	4604      	mov	r4, r0
    eaee:	2800      	cmp	r0, #0
    eaf0:	d1e6      	bne.n	eac0 <open_https_socket+0x34>
	}
	return 0;
}
    eaf2:	4620      	mov	r0, r4
    eaf4:	b004      	add	sp, #16
    eaf6:	bd70      	pop	{r4, r5, r6, pc}
    eaf8:	200224e8 	.word	0x200224e8
    eafc:	20020058 	.word	0x20020058
    eb00:	0002916b 	.word	0x0002916b
    eb04:	200224e0 	.word	0x200224e0

0000eb08 <https_post>:

int https_post(char *m, size_t t){
    eb08:	b5f0      	push	{r4, r5, r6, r7, lr}
    int bytes;

	int send_data_len = snprintf(send_buf,
    eb0a:	4b16      	ldr	r3, [pc, #88]	; (eb64 <https_post+0x5c>)
int https_post(char *m, size_t t){
    eb0c:	b085      	sub	sp, #20
	int send_data_len = snprintf(send_buf,
    eb0e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    eb12:	9300      	str	r3, [sp, #0]
    eb14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    eb18:	4b13      	ldr	r3, [pc, #76]	; (eb68 <https_post+0x60>)
    eb1a:	4a14      	ldr	r2, [pc, #80]	; (eb6c <https_post+0x64>)
    eb1c:	4814      	ldr	r0, [pc, #80]	; (eb70 <https_post+0x68>)
    eb1e:	f011 f965 	bl	1fdec <sniprintf>
                            mtu_size,
                            POST_TEMPLATE, CONFIG_RUUVI_ENDPOINT_HOST_PATH,
                            CONFIG_RUUVI_ENDPOINT_HOST, t,
                            m);

	size_t off = 0;
    eb22:	2400      	movs	r4, #0
	int send_data_len = snprintf(send_buf,
    eb24:	4605      	mov	r5, r0
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    eb26:	4626      	mov	r6, r4
	do {
		bytes = send(fd, send_buf, send_data_len - off, 0);
    eb28:	4f12      	ldr	r7, [pc, #72]	; (eb74 <https_post+0x6c>)
    eb2a:	6838      	ldr	r0, [r7, #0]
    eb2c:	2300      	movs	r3, #0
    eb2e:	e9cd 6600 	strd	r6, r6, [sp]
    eb32:	490f      	ldr	r1, [pc, #60]	; (eb70 <https_post+0x68>)
    eb34:	1b2a      	subs	r2, r5, r4
    eb36:	f013 ff34 	bl	229a2 <z_impl_zsock_sendto>
		if (bytes < 0) {
    eb3a:	2800      	cmp	r0, #0
    eb3c:	db0f      	blt.n	eb5e <https_post+0x56>
			LOG_ERR("send() failed, err %d\n", errno);
			return 1;
		}
		off += bytes;
    eb3e:	4404      	add	r4, r0
	}while (off < send_data_len);
    eb40:	42a5      	cmp	r5, r4
    eb42:	d8f2      	bhi.n	eb2a <https_post+0x22>

    msgcnt++;
    eb44:	4a0c      	ldr	r2, [pc, #48]	; (eb78 <https_post+0x70>)
    //Remove later
    LOG_INF("Message %d Sent\n", msgcnt);
	memset(send_buf, 0, sizeof(send_buf));
    eb46:	2100      	movs	r1, #0
    msgcnt++;
    eb48:	6813      	ldr	r3, [r2, #0]
	memset(send_buf, 0, sizeof(send_buf));
    eb4a:	4809      	ldr	r0, [pc, #36]	; (eb70 <https_post+0x68>)
    msgcnt++;
    eb4c:	3301      	adds	r3, #1
    eb4e:	6013      	str	r3, [r2, #0]
	memset(send_buf, 0, sizeof(send_buf));
    eb50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    eb54:	f018 ff31 	bl	279ba <memset>
    eb58:	2000      	movs	r0, #0
	return 0;
}
    eb5a:	b005      	add	sp, #20
    eb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return 1;
    eb5e:	2001      	movs	r0, #1
    eb60:	e7fb      	b.n	eb5a <https_post+0x52>
    eb62:	bf00      	nop
    eb64:	0002916b 	.word	0x0002916b
    eb68:	00029178 	.word	0x00029178
    eb6c:	0002919e 	.word	0x0002919e
    eb70:	20028dec 	.word	0x20028dec
    eb74:	200224e0 	.word	0x200224e0
    eb78:	200224e4 	.word	0x200224e4

0000eb7c <http_send_online>:
        close_http_socket();
    }
}

void http_send_online(char *imei, char *mac)
{
    eb7c:	b570      	push	{r4, r5, r6, lr}
    eb7e:	4606      	mov	r6, r0
    eb80:	460d      	mov	r5, r1
    cJSON *       root = cJSON_CreateObject();
    eb82:	f004 ff67 	bl	13a54 <cJSON_CreateObject>

    if (root){
    eb86:	4604      	mov	r4, r0
    eb88:	b168      	cbz	r0, eba6 <http_send_online+0x2a>
        cJSON_AddStringToObject(root, "status", "online");
    eb8a:	4a13      	ldr	r2, [pc, #76]	; (ebd8 <http_send_online+0x5c>)
    eb8c:	4913      	ldr	r1, [pc, #76]	; (ebdc <http_send_online+0x60>)
    eb8e:	f017 fbeb 	bl	26368 <cJSON_AddStringToObject>
        cJSON_AddStringToObject(root, "gw_imei", imei);
    eb92:	4632      	mov	r2, r6
    eb94:	4912      	ldr	r1, [pc, #72]	; (ebe0 <http_send_online+0x64>)
    eb96:	4620      	mov	r0, r4
    eb98:	f017 fbe6 	bl	26368 <cJSON_AddStringToObject>
        cJSON_AddStringToObject(root, "gw_mac", mac);
    eb9c:	462a      	mov	r2, r5
    eb9e:	4620      	mov	r0, r4
    eba0:	4910      	ldr	r1, [pc, #64]	; (ebe4 <http_send_online+0x68>)
    eba2:	f017 fbe1 	bl	26368 <cJSON_AddStringToObject>
    }
    else{
        LOG_ERR("%s: can't create root json", __func__);
    }

    char *json_str = cJSON_Print(root);
    eba6:	4620      	mov	r0, r4
    eba8:	f017 fbc3 	bl	26332 <cJSON_Print>
    ebac:	4605      	mov	r5, r0

    cJSON_Delete(root);
    ebae:	4620      	mov	r0, r4
    ebb0:	f004 ff14 	bl	139dc <cJSON_Delete>
        err = open_https_socket();
    ebb4:	f7ff ff6a 	bl	ea8c <open_https_socket>
    int err = open_socket();
    if(!err){
    ebb8:	b940      	cbnz	r0, ebcc <http_send_online+0x50>
         if(CONFIG_RUUVI_ENDPOINT_HTTPS){
        https_post(json_str, strlen(json_str));
    ebba:	4628      	mov	r0, r5
    ebbc:	f7fe f9bc 	bl	cf38 <strlen>
    ebc0:	4601      	mov	r1, r0
    ebc2:	4628      	mov	r0, r5
    ebc4:	f7ff ffa0 	bl	eb08 <https_post>
        close_https_socket();
    ebc8:	f7ff ff50 	bl	ea6c <close_https_socket>
        else{
            http_post(json_str, strlen(json_str));
        }
        close_socket();
    }
    free(json_str);
    ebcc:	4628      	mov	r0, r5
}
    ebce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    free(json_str);
    ebd2:	f010 ba65 	b.w	1f0a0 <free>
    ebd6:	bf00      	nop
    ebd8:	0002920c 	.word	0x0002920c
    ebdc:	00029213 	.word	0x00029213
    ebe0:	0002921a 	.word	0x0002921a
    ebe4:	00029222 	.word	0x00029222

0000ebe8 <http_send_advs>:

void http_send_advs(struct adv_report_table *reports,  double latitude, double longitude,  char *imei, char *mac)
{
    ebe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebec:	ed2d 8b04 	vpush	{d8-d9}
    ebf0:	b089      	sub	sp, #36	; 0x24
    ebf2:	eeb0 9a40 	vmov.f32	s18, s0
    ebf6:	eef0 9a60 	vmov.f32	s19, s1
    ebfa:	eeb0 8a41 	vmov.f32	s16, s2
    ebfe:	eef0 8a61 	vmov.f32	s17, s3
    ec02:	4690      	mov	r8, r2
    ec04:	4689      	mov	r9, r1
    ec06:	4607      	mov	r7, r0
    cJSON *tags = 0;
    cJSON *location = cJSON_CreateObject();
    ec08:	f004 ff24 	bl	13a54 <cJSON_CreateObject>
    time_t now = get_ts();
    ec0c:	f000 f8a0 	bl	ed50 <get_ts>
    ec10:	4683      	mov	fp, r0
    ec12:	468a      	mov	sl, r1
    adv_report_t *adv;
    cJSON *       root = cJSON_CreateObject();
    ec14:	f004 ff1e 	bl	13a54 <cJSON_CreateObject>

    if (root){
    ec18:	4606      	mov	r6, r0
    ec1a:	b9d0      	cbnz	r0, ec52 <http_send_advs+0x6a>
    else
    {
        LOG_ERR("%s: can't create tags json", __func__);
    }

    char *json_str = cJSON_Print(root);
    ec1c:	4630      	mov	r0, r6
    ec1e:	f017 fb88 	bl	26332 <cJSON_Print>
    ec22:	4604      	mov	r4, r0
    //printk("HTTP POST: %s", json_str);
    cJSON_Delete(root);
    ec24:	4630      	mov	r0, r6
    ec26:	f004 fed9 	bl	139dc <cJSON_Delete>
        err = open_https_socket();
    ec2a:	f7ff ff2f 	bl	ea8c <open_https_socket>
    int err = open_socket();
    if(!err){
    ec2e:	b940      	cbnz	r0, ec42 <http_send_advs+0x5a>
       if(CONFIG_RUUVI_ENDPOINT_HTTPS){
        https_post(json_str, strlen(json_str));
    ec30:	4620      	mov	r0, r4
    ec32:	f7fe f981 	bl	cf38 <strlen>
    ec36:	4601      	mov	r1, r0
    ec38:	4620      	mov	r0, r4
    ec3a:	f7ff ff65 	bl	eb08 <https_post>
        close_https_socket();
    ec3e:	f7ff ff15 	bl	ea6c <close_https_socket>
        else{
            http_post(json_str, strlen(json_str));
        }
        close_socket(); 
    }
    free(json_str);
    ec42:	4620      	mov	r0, r4
    ec44:	f010 fa2c 	bl	1f0a0 <free>
}
    ec48:	b009      	add	sp, #36	; 0x24
    ec4a:	ecbd 8b04 	vpop	{d8-d9}
    ec4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cJSON *gw = cJSON_AddObjectToObject(root, "data");
    ec52:	4936      	ldr	r1, [pc, #216]	; (ed2c <http_send_advs+0x144>)
    ec54:	f017 fb9e 	bl	26394 <cJSON_AddObjectToObject>
        if (gw)
    ec58:	4604      	mov	r4, r0
    ec5a:	2800      	cmp	r0, #0
    ec5c:	d0de      	beq.n	ec1c <http_send_advs+0x34>
            location = cJSON_AddObjectToObject(gw, "coordinates");
    ec5e:	4934      	ldr	r1, [pc, #208]	; (ed30 <http_send_advs+0x148>)
    ec60:	f017 fb98 	bl	26394 <cJSON_AddObjectToObject>
            if(location){
    ec64:	4605      	mov	r5, r0
    ec66:	b170      	cbz	r0, ec86 <http_send_advs+0x9e>
                cJSON_AddNumberToObject(location, "latitude", latitude);
    ec68:	eeb0 0a49 	vmov.f32	s0, s18
    ec6c:	eef0 0a69 	vmov.f32	s1, s19
    ec70:	4930      	ldr	r1, [pc, #192]	; (ed34 <http_send_advs+0x14c>)
    ec72:	f017 fb64 	bl	2633e <cJSON_AddNumberToObject>
                cJSON_AddNumberToObject(location, "longitude", longitude);
    ec76:	eeb0 0a48 	vmov.f32	s0, s16
    ec7a:	eef0 0a68 	vmov.f32	s1, s17
    ec7e:	4628      	mov	r0, r5
    ec80:	492d      	ldr	r1, [pc, #180]	; (ed38 <http_send_advs+0x150>)
    ec82:	f017 fb5c 	bl	2633e <cJSON_AddNumberToObject>
            cJSON_AddNumberToObject(gw, "timestamp", now);
    ec86:	4658      	mov	r0, fp
    ec88:	4651      	mov	r1, sl
    ec8a:	f7fd fc67 	bl	c55c <__aeabi_l2d>
    ec8e:	ec41 0b10 	vmov	d0, r0, r1
    ec92:	492a      	ldr	r1, [pc, #168]	; (ed3c <http_send_advs+0x154>)
    ec94:	4620      	mov	r0, r4
    ec96:	f017 fb52 	bl	2633e <cJSON_AddNumberToObject>
            cJSON_AddStringToObject(gw, "gw_imei", imei);
    ec9a:	464a      	mov	r2, r9
    ec9c:	4928      	ldr	r1, [pc, #160]	; (ed40 <http_send_advs+0x158>)
    ec9e:	4620      	mov	r0, r4
    eca0:	f017 fb62 	bl	26368 <cJSON_AddStringToObject>
            cJSON_AddStringToObject(gw, "gw_mac", mac);
    eca4:	4642      	mov	r2, r8
    eca6:	4927      	ldr	r1, [pc, #156]	; (ed44 <http_send_advs+0x15c>)
    eca8:	4620      	mov	r0, r4
    ecaa:	f017 fb5d 	bl	26368 <cJSON_AddStringToObject>
            tags = cJSON_AddObjectToObject(gw, "tags");
    ecae:	4620      	mov	r0, r4
    ecb0:	4925      	ldr	r1, [pc, #148]	; (ed48 <http_send_advs+0x160>)
    ecb2:	f017 fb6f 	bl	26394 <cJSON_AddObjectToObject>
    if (tags)
    ecb6:	4680      	mov	r8, r0
    ecb8:	2800      	cmp	r0, #0
    ecba:	d0af      	beq.n	ec1c <http_send_advs+0x34>
        for (int i = 0; i < reports->num_of_advs; i++)
    ecbc:	2300      	movs	r3, #0
            cJSON_AddNumberToObject(tag, "rssi", adv->rssi);
    ecbe:	f8df 908c 	ldr.w	r9, [pc, #140]	; ed4c <http_send_advs+0x164>
            cJSON_AddNumberToObject(tag, "timestamp", adv->timestamp);
    ecc2:	f8df a078 	ldr.w	sl, [pc, #120]	; ed3c <http_send_advs+0x154>
            cJSON_AddStringToObject(tag, "data", adv->data);
    ecc6:	f8df b064 	ldr.w	fp, [pc, #100]	; ed2c <http_send_advs+0x144>
    ecca:	f107 041c 	add.w	r4, r7, #28
        for (int i = 0; i < reports->num_of_advs; i++)
    ecce:	683a      	ldr	r2, [r7, #0]
    ecd0:	429a      	cmp	r2, r3
    ecd2:	dda3      	ble.n	ec1c <http_send_advs+0x34>
    ecd4:	9301      	str	r3, [sp, #4]
            cJSON *tag = cJSON_CreateObject();
    ecd6:	f004 febd 	bl	13a54 <cJSON_CreateObject>
    ecda:	4605      	mov	r5, r0
            cJSON_AddNumberToObject(tag, "rssi", adv->rssi);
    ecdc:	f854 0c04 	ldr.w	r0, [r4, #-4]
    ece0:	f7fd fc00 	bl	c4e4 <__aeabi_i2d>
    ece4:	ec41 0b10 	vmov	d0, r0, r1
    ece8:	4649      	mov	r1, r9
    ecea:	4628      	mov	r0, r5
    ecec:	f017 fb27 	bl	2633e <cJSON_AddNumberToObject>
            cJSON_AddNumberToObject(tag, "timestamp", adv->timestamp);
    ecf0:	e954 0103 	ldrd	r0, r1, [r4, #-12]
    ecf4:	f7fd fc32 	bl	c55c <__aeabi_l2d>
    ecf8:	ec41 0b10 	vmov	d0, r0, r1
    ecfc:	4651      	mov	r1, sl
    ecfe:	4628      	mov	r0, r5
    ed00:	f017 fb1d 	bl	2633e <cJSON_AddNumberToObject>
            cJSON_AddStringToObject(tag, "data", adv->data);
    ed04:	4622      	mov	r2, r4
    ed06:	4659      	mov	r1, fp
    ed08:	4628      	mov	r0, r5
    ed0a:	f017 fb2d 	bl	26368 <cJSON_AddStringToObject>
            const mac_address_str_t mac_str = mac_address_to_str(&adv->tag_mac);
    ed0e:	f1a4 0114 	sub.w	r1, r4, #20
    ed12:	a803      	add	r0, sp, #12
    ed14:	f7ff fa0e 	bl	e134 <mac_address_to_str>
            cJSON_AddItemToObject(tags, mac_str.str_buf, tag);
    ed18:	462a      	mov	r2, r5
    ed1a:	4640      	mov	r0, r8
    ed1c:	a903      	add	r1, sp, #12
    ed1e:	f017 fb0b 	bl	26338 <cJSON_AddItemToObject>
        for (int i = 0; i < reports->num_of_advs; i++)
    ed22:	9b01      	ldr	r3, [sp, #4]
    ed24:	3458      	adds	r4, #88	; 0x58
    ed26:	3301      	adds	r3, #1
    ed28:	e7d1      	b.n	ecce <http_send_advs+0xe6>
    ed2a:	bf00      	nop
    ed2c:	00029229 	.word	0x00029229
    ed30:	0002922e 	.word	0x0002922e
    ed34:	0002923a 	.word	0x0002923a
    ed38:	00029243 	.word	0x00029243
    ed3c:	0002924d 	.word	0x0002924d
    ed40:	0002921a 	.word	0x0002921a
    ed44:	00029222 	.word	0x00029222
    ed48:	00029257 	.word	0x00029257
    ed4c:	0002925c 	.word	0x0002925c

0000ed50 <get_ts>:
LOG_MODULE_REGISTER(time_handler, CONFIG_RUUVI_NODE_LOG_LEVEL);

time_t epoch = 0;
u32_t epoch_tk = 0;

time_t get_ts(void){
    ed50:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    ed52:	f018 fca3 	bl	2769c <z_impl_k_uptime_ticks>
		} else {
			return (t * to_hz + off) / from_hz;
    ed56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ed5a:	460b      	mov	r3, r1
    ed5c:	fba0 0102 	umull	r0, r1, r0, r2
    ed60:	fb02 1103 	mla	r1, r2, r3, r1
    ed64:	0bc3      	lsrs	r3, r0, #15
    ed66:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    time_t ts;
    u32_t now;
    now = k_uptime_get_32();
    now = now - epoch_tk;
    ed6a:	4906      	ldr	r1, [pc, #24]	; (ed84 <get_ts+0x34>)
    ed6c:	6808      	ldr	r0, [r1, #0]
    ed6e:	1a1b      	subs	r3, r3, r0
    now = now / 1000;
    ed70:	fbb3 f3f2 	udiv	r3, r3, r2
    ts = epoch + now;
    ed74:	4a04      	ldr	r2, [pc, #16]	; (ed88 <get_ts+0x38>)
    ed76:	e9d2 0100 	ldrd	r0, r1, [r2]
    return ts;
}
    ed7a:	18c0      	adds	r0, r0, r3
    ed7c:	f141 0100 	adc.w	r1, r1, #0
    ed80:	bd08      	pop	{r3, pc}
    ed82:	bf00      	nop
    ed84:	200224ec 	.word	0x200224ec
    ed88:	200219f8 	.word	0x200219f8

0000ed8c <update_ts_modem>:

int update_ts_modem(void){
    ed8c:	b530      	push	{r4, r5, lr}
	int err;
	static char ts_buf[MODEM_TIME_LEN + 1];
	struct tm t;
	int tz;
	char *pch;
	err = modem_info_string_get(MODEM_INFO_DATE_TIME, ts_buf, sizeof(ts_buf));
    ed8e:	2215      	movs	r2, #21
    ed90:	2014      	movs	r0, #20
    ed92:	4932      	ldr	r1, [pc, #200]	; (ee5c <update_ts_modem+0xd0>)
int update_ts_modem(void){
    ed94:	b08b      	sub	sp, #44	; 0x2c
	err = modem_info_string_get(MODEM_INFO_DATE_TIME, ts_buf, sizeof(ts_buf));
    ed96:	f006 fb03 	bl	153a0 <modem_info_string_get>
	if (err != MODEM_TIME_LEN) {
    ed9a:	2814      	cmp	r0, #20
    ed9c:	d15a      	bne.n	ee54 <update_ts_modem+0xc8>
    ed9e:	f018 fc7d 	bl	2769c <z_impl_k_uptime_ticks>
    eda2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    eda6:	460a      	mov	r2, r1
    eda8:	fba0 0103 	umull	r0, r1, r0, r3
    edac:	fb03 1102 	mla	r1, r3, r2, r1
	return (u32_t)k_uptime_get();
    edb0:	4a2b      	ldr	r2, [pc, #172]	; (ee60 <update_ts_modem+0xd4>)
    edb2:	0bc3      	lsrs	r3, r0, #15
    edb4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		LOG_ERR("modem_info_string_get(MODEM time), error: %d", err);
		return -1;
	}
    epoch_tk = k_uptime_get_32();
	
    char *msg = strdup(ts_buf);
    edb8:	4828      	ldr	r0, [pc, #160]	; (ee5c <update_ts_modem+0xd0>)
    edba:	6013      	str	r3, [r2, #0]
    edbc:	f011 f876 	bl	1feac <strdup>
	
	pch = strtok(msg, "/,:+");
    edc0:	4928      	ldr	r1, [pc, #160]	; (ee64 <update_ts_modem+0xd8>)
    char *msg = strdup(ts_buf);
    edc2:	4605      	mov	r5, r0
	pch = strtok(msg, "/,:+");
    edc4:	f011 f87a 	bl	1febc <strtok>
	t.tm_year = atoi(pch);
    edc8:	f018 fd9d 	bl	27906 <atoi>
	t.tm_year = t.tm_year + 2000 -1900;
    edcc:	3064      	adds	r0, #100	; 0x64
	pch = strtok(NULL, "/,:+");
    edce:	4925      	ldr	r1, [pc, #148]	; (ee64 <update_ts_modem+0xd8>)
	t.tm_year = t.tm_year + 2000 -1900;
    edd0:	9006      	str	r0, [sp, #24]
	pch = strtok(NULL, "/,:+");
    edd2:	2000      	movs	r0, #0
    edd4:	f011 f872 	bl	1febc <strtok>
	t.tm_mon = atoi(pch);
    edd8:	f018 fd95 	bl	27906 <atoi>
	t.tm_mon = t.tm_mon -1;
    eddc:	3801      	subs	r0, #1
	pch = strtok(NULL, "/,:+");
    edde:	4921      	ldr	r1, [pc, #132]	; (ee64 <update_ts_modem+0xd8>)
	t.tm_mon = t.tm_mon -1;
    ede0:	9005      	str	r0, [sp, #20]
	pch = strtok(NULL, "/,:+");
    ede2:	2000      	movs	r0, #0
    ede4:	f011 f86a 	bl	1febc <strtok>
	t.tm_mday = atoi(pch);
    ede8:	f018 fd8d 	bl	27906 <atoi>
	pch = strtok(NULL, "/,:+");
    edec:	491d      	ldr	r1, [pc, #116]	; (ee64 <update_ts_modem+0xd8>)
	t.tm_mday = atoi(pch);
    edee:	9004      	str	r0, [sp, #16]
	pch = strtok(NULL, "/,:+");
    edf0:	2000      	movs	r0, #0
    edf2:	f011 f863 	bl	1febc <strtok>
	t.tm_hour = atoi(pch);
    edf6:	f018 fd86 	bl	27906 <atoi>
	pch = strtok(NULL, "/,:+");
    edfa:	491a      	ldr	r1, [pc, #104]	; (ee64 <update_ts_modem+0xd8>)
	t.tm_hour = atoi(pch);
    edfc:	9003      	str	r0, [sp, #12]
	pch = strtok(NULL, "/,:+");
    edfe:	2000      	movs	r0, #0
    ee00:	f011 f85c 	bl	1febc <strtok>
	t.tm_min = atoi(pch);
    ee04:	f018 fd7f 	bl	27906 <atoi>
	pch = strtok(NULL, "/,:+");
    ee08:	4916      	ldr	r1, [pc, #88]	; (ee64 <update_ts_modem+0xd8>)
	t.tm_min = atoi(pch);
    ee0a:	9002      	str	r0, [sp, #8]
	pch = strtok(NULL, "/,:+");
    ee0c:	2000      	movs	r0, #0
    ee0e:	f011 f855 	bl	1febc <strtok>
    t.tm_sec = atoi(pch);
    ee12:	f018 fd78 	bl	27906 <atoi>
	pch = strtok(NULL, "/,:+");
    ee16:	4913      	ldr	r1, [pc, #76]	; (ee64 <update_ts_modem+0xd8>)
    t.tm_sec = atoi(pch);
    ee18:	9001      	str	r0, [sp, #4]
	pch = strtok(NULL, "/,:+");
    ee1a:	2000      	movs	r0, #0
    ee1c:	f011 f84e 	bl	1febc <strtok>
    ee20:	4604      	mov	r4, r0
	tz = atoi(pch);
    ee22:	f018 fd70 	bl	27906 <atoi>
	t.tm_isdst = -1;
    ee26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	epoch = mktime(&t);
    ee2a:	a801      	add	r0, sp, #4
	t.tm_isdst = -1;
    ee2c:	9309      	str	r3, [sp, #36]	; 0x24
	epoch = mktime(&t);
    ee2e:	f010 fa17 	bl	1f260 <mktime>
    ee32:	4b0d      	ldr	r3, [pc, #52]	; (ee68 <update_ts_modem+0xdc>)
	memset(ts_buf, 0, MODEM_TIME_LEN + 1);
    ee34:	2215      	movs	r2, #21
	epoch = mktime(&t);
    ee36:	e9c3 0100 	strd	r0, r1, [r3]
	memset(ts_buf, 0, MODEM_TIME_LEN + 1);
    ee3a:	2100      	movs	r1, #0
    ee3c:	4807      	ldr	r0, [pc, #28]	; (ee5c <update_ts_modem+0xd0>)
    ee3e:	f018 fdbc 	bl	279ba <memset>
	free(msg);
    ee42:	4628      	mov	r0, r5
    ee44:	f010 f92c 	bl	1f0a0 <free>
	free(pch);
    ee48:	4620      	mov	r0, r4
    ee4a:	f010 f929 	bl	1f0a0 <free>
    LOG_INF("TS updated by Modem");
	return 0;
    ee4e:	2000      	movs	r0, #0
}
    ee50:	b00b      	add	sp, #44	; 0x2c
    ee52:	bd30      	pop	{r4, r5, pc}
		return -1;
    ee54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ee58:	e7fa      	b.n	ee50 <update_ts_modem+0xc4>
    ee5a:	bf00      	nop
    ee5c:	20029dec 	.word	0x20029dec
    ee60:	200224ec 	.word	0x200224ec
    ee64:	00029261 	.word	0x00029261
    ee68:	200219f8 	.word	0x200219f8

0000ee6c <primary_feed_worker>:
static struct wdt_data_storage wdt_data;
static struct k_work_q *second_work_q;

static void primary_feed_worker(struct k_work *work_desc)
{
	k_work_submit_to_queue(second_work_q, &wdt_data.second_workqueue_work);
    ee6c:	4b08      	ldr	r3, [pc, #32]	; (ee90 <primary_feed_worker+0x24>)
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ee6e:	4909      	ldr	r1, [pc, #36]	; (ee94 <primary_feed_worker+0x28>)
    ee70:	6818      	ldr	r0, [r3, #0]
    ee72:	e8d1 3fef 	ldaex	r3, [r1]
    ee76:	f043 0201 	orr.w	r2, r3, #1
    ee7a:	e8c1 2fec 	stlex	ip, r2, [r1]
    ee7e:	f1bc 0f00 	cmp.w	ip, #0
    ee82:	d1f6      	bne.n	ee72 <primary_feed_worker+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ee84:	07db      	lsls	r3, r3, #31
    ee86:	d402      	bmi.n	ee8e <primary_feed_worker+0x22>
		k_queue_append(&work_q->queue, work);
    ee88:	3908      	subs	r1, #8
    ee8a:	f018 ba17 	b.w	272bc <k_queue_append>
}
    ee8e:	4770      	bx	lr
    ee90:	200224f0 	.word	0x200224f0
    ee94:	20022524 	.word	0x20022524

0000ee98 <secondary_feed_worker>:
static void secondary_feed_worker(struct k_work *work_desc)
{
    ee98:	b510      	push	{r4, lr}
	int err = wdt_feed(wdt_data.wdt_drv, wdt_data.wdt_channel_id);
    ee9a:	4c09      	ldr	r4, [pc, #36]	; (eec0 <secondary_feed_worker+0x28>)
    ee9c:	e9d4 0100 	ldrd	r0, r1, [r4]
static inline int z_impl_wdt_feed(struct device *dev, int channel_id)
{
	const struct wdt_driver_api *api =
		(const struct wdt_driver_api *)dev->driver_api;

	return api->feed(dev, channel_id);
    eea0:	6883      	ldr	r3, [r0, #8]
    eea2:	68db      	ldr	r3, [r3, #12]
    eea4:	4798      	blx	r3

	LOG_DBG("Feeding watchdog");

	if (err) {
    eea6:	b948      	cbnz	r0, eebc <secondary_feed_worker+0x24>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    eea8:	f104 0108 	add.w	r1, r4, #8
    eeac:	f44f 3220 	mov.w	r2, #163840	; 0x28000
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
	} else {
		k_delayed_work_submit(&wdt_data.system_workqueue_work,
				      K_MSEC(WDT_FEED_WORKER_DELAY_MS));
	}
}
    eeb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eeb4:	2300      	movs	r3, #0
    eeb6:	4803      	ldr	r0, [pc, #12]	; (eec4 <secondary_feed_worker+0x2c>)
    eeb8:	f00f bf02 	b.w	1ecc0 <k_delayed_work_submit_to_queue>
    eebc:	bd10      	pop	{r4, pc}
    eebe:	bf00      	nop
    eec0:	200224f4 	.word	0x200224f4
    eec4:	200280bc 	.word	0x200280bc

0000eec8 <watchdog_init_and_start>:

	return 0;
}

int watchdog_init_and_start(struct k_work_q *work_q)
{
    eec8:	b570      	push	{r4, r5, r6, lr}
	if (work_q == NULL) {
    eeca:	2800      	cmp	r0, #0
    eecc:	d02f      	beq.n	ef2e <watchdog_init_and_start+0x66>
		return -EINVAL;
	}
	second_work_q = work_q;
    eece:	4b1d      	ldr	r3, [pc, #116]	; (ef44 <watchdog_init_and_start+0x7c>)
    eed0:	6018      	str	r0, [r3, #0]
    eed2:	481d      	ldr	r0, [pc, #116]	; (ef48 <watchdog_init_and_start+0x80>)
    eed4:	f00e ff0a 	bl	1dcec <z_impl_device_get_binding>
	data->wdt_drv = device_get_binding(DT_LABEL(DT_NODELABEL(wdt)));
    eed8:	4d1c      	ldr	r5, [pc, #112]	; (ef4c <watchdog_init_and_start+0x84>)
    eeda:	6028      	str	r0, [r5, #0]
	if (data->wdt_drv == NULL) {
    eedc:	b358      	cbz	r0, ef36 <watchdog_init_and_start+0x6e>
	return api->install_timeout(dev, cfg);
    eede:	6883      	ldr	r3, [r0, #8]
    eee0:	491b      	ldr	r1, [pc, #108]	; (ef50 <watchdog_init_and_start+0x88>)
    eee2:	689b      	ldr	r3, [r3, #8]
    eee4:	4798      	blx	r3
	if (data->wdt_channel_id < 0) {
    eee6:	2800      	cmp	r0, #0
	data->wdt_channel_id = wdt_install_timeout(
    eee8:	6068      	str	r0, [r5, #4]
	if (data->wdt_channel_id < 0) {
    eeea:	db27      	blt.n	ef3c <watchdog_init_and_start+0x74>
	err = watchdog_start(data);
    eeec:	6828      	ldr	r0, [r5, #0]
	return api->setup(dev, options);
    eeee:	6883      	ldr	r3, [r0, #8]
    eef0:	2102      	movs	r1, #2
    eef2:	681b      	ldr	r3, [r3, #0]
    eef4:	4798      	blx	r3
	if (err) {
    eef6:	4604      	mov	r4, r0
    eef8:	b9d8      	cbnz	r0, ef32 <watchdog_init_and_start+0x6a>
	k_delayed_work_init(&data->system_workqueue_work, primary_feed_worker);
    eefa:	f105 0008 	add.w	r0, r5, #8
    eefe:	4915      	ldr	r1, [pc, #84]	; (ef54 <watchdog_init_and_start+0x8c>)
    ef00:	f018 fb5a 	bl	275b8 <k_delayed_work_init>
	int err = wdt_feed(data->wdt_drv, data->wdt_channel_id);
    ef04:	e9d5 0100 	ldrd	r0, r1, [r5]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ef08:	4b13      	ldr	r3, [pc, #76]	; (ef58 <watchdog_init_and_start+0x90>)
    ef0a:	62ac      	str	r4, [r5, #40]	; 0x28
    ef0c:	e9c5 340b 	strd	r3, r4, [r5, #44]	; 0x2c
	return api->feed(dev, channel_id);
    ef10:	6883      	ldr	r3, [r0, #8]
    ef12:	68db      	ldr	r3, [r3, #12]
    ef14:	4798      	blx	r3
	if (err) {
    ef16:	4604      	mov	r4, r0
    ef18:	b958      	cbnz	r0, ef32 <watchdog_init_and_start+0x6a>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    ef1a:	f105 0108 	add.w	r1, r5, #8
    ef1e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
	return watchdog_enable(&wdt_data);
}
    ef22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef26:	2300      	movs	r3, #0
    ef28:	480c      	ldr	r0, [pc, #48]	; (ef5c <watchdog_init_and_start+0x94>)
    ef2a:	f00f bec9 	b.w	1ecc0 <k_delayed_work_submit_to_queue>
		return -EINVAL;
    ef2e:	f06f 0415 	mvn.w	r4, #21
}
    ef32:	4620      	mov	r0, r4
    ef34:	bd70      	pop	{r4, r5, r6, pc}
		return err;
    ef36:	f06f 0405 	mvn.w	r4, #5
    ef3a:	e7fa      	b.n	ef32 <watchdog_init_and_start+0x6a>
		return -EFAULT;
    ef3c:	f06f 040d 	mvn.w	r4, #13
    ef40:	e7f7      	b.n	ef32 <watchdog_init_and_start+0x6a>
    ef42:	bf00      	nop
    ef44:	200224f0 	.word	0x200224f0
    ef48:	00029266 	.word	0x00029266
    ef4c:	200224f4 	.word	0x200224f4
    ef50:	000288f8 	.word	0x000288f8
    ef54:	0000ee6d 	.word	0x0000ee6d
    ef58:	0000ee99 	.word	0x0000ee99
    ef5c:	200280bc 	.word	0x200280bc

0000ef60 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    ef60:	2803      	cmp	r0, #3
{
    ef62:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    ef64:	d906      	bls.n	ef74 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (fdtable[fd].obj == NULL) {
		errno = EBADF;
    ef66:	f014 f81d 	bl	22fa4 <__errno>
    ef6a:	2309      	movs	r3, #9
    ef6c:	6003      	str	r3, [r0, #0]
    ef6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
    ef72:	bd08      	pop	{r3, pc}
	if (fdtable[fd].obj == NULL) {
    ef74:	4b03      	ldr	r3, [pc, #12]	; (ef84 <_check_fd+0x24>)
    ef76:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    ef7a:	2b00      	cmp	r3, #0
    ef7c:	d0f3      	beq.n	ef66 <_check_fd+0x6>
	return 0;
    ef7e:	2000      	movs	r0, #0
    ef80:	e7f7      	b.n	ef72 <_check_fd+0x12>
    ef82:	bf00      	nop
    ef84:	20022528 	.word	0x20022528

0000ef88 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
    ef88:	b570      	push	{r4, r5, r6, lr}
    ef8a:	4604      	mov	r4, r0
    ef8c:	460d      	mov	r5, r1
    ef8e:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    ef90:	f7ff ffe6 	bl	ef60 <_check_fd>
    ef94:	2800      	cmp	r0, #0
    ef96:	db09      	blt.n	efac <z_get_fd_obj+0x24>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
    ef98:	4b07      	ldr	r3, [pc, #28]	; (efb8 <z_get_fd_obj+0x30>)
    ef9a:	b14d      	cbz	r5, efb0 <z_get_fd_obj+0x28>
    ef9c:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    efa0:	6852      	ldr	r2, [r2, #4]
    efa2:	42aa      	cmp	r2, r5
    efa4:	d004      	beq.n	efb0 <z_get_fd_obj+0x28>
		errno = err;
    efa6:	f013 fffd 	bl	22fa4 <__errno>
    efaa:	6006      	str	r6, [r0, #0]
		return NULL;
    efac:	2000      	movs	r0, #0
    efae:	e001      	b.n	efb4 <z_get_fd_obj+0x2c>
		return NULL;
	}

	return fd_entry->obj;
    efb0:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
}
    efb4:	bd70      	pop	{r4, r5, r6, pc}
    efb6:	bf00      	nop
    efb8:	20022528 	.word	0x20022528

0000efbc <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
    efbc:	b538      	push	{r3, r4, r5, lr}
    efbe:	4604      	mov	r4, r0
    efc0:	460d      	mov	r5, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    efc2:	f7ff ffcd 	bl	ef60 <_check_fd>
    efc6:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
    efc8:	bfa9      	itett	ge
    efca:	4b05      	ldrge	r3, [pc, #20]	; (efe0 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
    efcc:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
    efce:	eb03 02c4 	addge.w	r2, r3, r4, lsl #3
    efd2:	6852      	ldrge	r2, [r2, #4]

	return fd_entry->obj;
    efd4:	bfa4      	itt	ge
    efd6:	f853 0034 	ldrge.w	r0, [r3, r4, lsl #3]
	*vtable = fd_entry->vtable;
    efda:	602a      	strge	r2, [r5, #0]
}
    efdc:	bd38      	pop	{r3, r4, r5, pc}
    efde:	bf00      	nop
    efe0:	20022528 	.word	0x20022528

0000efe4 <z_reserve_fd>:

int z_reserve_fd(void)
{
    efe4:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    efe6:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
    efe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    efec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    eff0:	480c      	ldr	r0, [pc, #48]	; (f024 <z_reserve_fd+0x40>)
    eff2:	f00f f8ed 	bl	1e1d0 <z_impl_k_mutex_lock>
		if (fdtable[fd].obj == NULL) {
    eff6:	4b0c      	ldr	r3, [pc, #48]	; (f028 <z_reserve_fd+0x44>)
    eff8:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    effc:	b16a      	cbz	r2, f01a <z_reserve_fd+0x36>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    effe:	3401      	adds	r4, #1
    f000:	2c04      	cmp	r4, #4
    f002:	d1f9      	bne.n	eff8 <z_reserve_fd+0x14>
	errno = ENFILE;
    f004:	f013 ffce 	bl	22fa4 <__errno>
    f008:	2317      	movs	r3, #23
	return -1;
    f00a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = ENFILE;
    f00e:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    f010:	4804      	ldr	r0, [pc, #16]	; (f024 <z_reserve_fd+0x40>)
    f012:	f00f f955 	bl	1e2c0 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    f016:	4620      	mov	r0, r4
    f018:	bd10      	pop	{r4, pc}
		fdtable[fd].obj = FD_OBJ_RESERVED;
    f01a:	2201      	movs	r2, #1
    f01c:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
    f020:	e7f6      	b.n	f010 <z_reserve_fd+0x2c>
    f022:	bf00      	nop
    f024:	20020908 	.word	0x20020908
    f028:	20022528 	.word	0x20022528

0000f02c <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = obj;
    f02c:	4b03      	ldr	r3, [pc, #12]	; (f03c <z_finalize_fd+0x10>)
    f02e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	fdtable[fd].vtable = vtable;
    f032:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    f036:	6042      	str	r2, [r0, #4]
}
    f038:	4770      	bx	lr
    f03a:	bf00      	nop
    f03c:	20022528 	.word	0x20022528

0000f040 <z_free_fd>:

void z_free_fd(int fd)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = NULL;
    f040:	2200      	movs	r2, #0
    f042:	4b02      	ldr	r3, [pc, #8]	; (f04c <z_free_fd+0xc>)
    f044:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
}
    f048:	4770      	bx	lr
    f04a:	bf00      	nop
    f04c:	20022528 	.word	0x20022528

0000f050 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    f050:	680b      	ldr	r3, [r1, #0]
    f052:	3301      	adds	r3, #1
    f054:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    f056:	4b01      	ldr	r3, [pc, #4]	; (f05c <char_out+0xc>)
    f058:	681b      	ldr	r3, [r3, #0]
    f05a:	4718      	bx	r3
    f05c:	200200a8 	.word	0x200200a8

0000f060 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    f060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f064:	ed2d 8b02 	vpush	{d8}
    f068:	b083      	sub	sp, #12
    f06a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    f06c:	469a      	mov	sl, r3
    f06e:	2c01      	cmp	r4, #1
    f070:	bfb8      	it	lt
    f072:	2401      	movlt	r4, #1
    f074:	2b01      	cmp	r3, #1
    f076:	bf0c      	ite	eq
    f078:	2330      	moveq	r3, #48	; 0x30
    f07a:	2320      	movne	r3, #32
    f07c:	4615      	mov	r5, r2
    f07e:	4606      	mov	r6, r0
    f080:	ee08 3a10 	vmov	s16, r3
    f084:	2701      	movs	r7, #1
    f086:	f04f 080a 	mov.w	r8, #10
    f08a:	2200      	movs	r2, #0
    f08c:	f8df b074 	ldr.w	fp, [pc, #116]	; f104 <_printk_dec_ulong+0xa4>
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    f090:	fbb5 f9fb 	udiv	r9, r5, fp
    f094:	b90a      	cbnz	r2, f09a <_printk_dec_ulong+0x3a>
    f096:	45ab      	cmp	fp, r5
    f098:	d820      	bhi.n	f0dc <_printk_dec_ulong+0x7c>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    f09a:	f109 0030 	add.w	r0, r9, #48	; 0x30
    f09e:	9100      	str	r1, [sp, #0]
    f0a0:	47b0      	blx	r6
			found_largest_digit = 1;
    f0a2:	2201      	movs	r2, #1
			digits++;
    f0a4:	3701      	adds	r7, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
    f0a6:	9900      	ldr	r1, [sp, #0]
		}
		remaining--;
		remainder %= pos;
		pos /= 10;
    f0a8:	230a      	movs	r3, #10
		remaining--;
    f0aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
    f0ae:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
    f0b2:	fb0b 5519 	mls	r5, fp, r9, r5
		pos /= 10;
    f0b6:	fbbb fbf3 	udiv	fp, fp, r3
	while (pos >= 10) {
    f0ba:	d1e9      	bne.n	f090 <_printk_dec_ulong+0x30>
	}
	out((int)(remainder + 48), ctx);
    f0bc:	f105 0030 	add.w	r0, r5, #48	; 0x30
    f0c0:	9100      	str	r1, [sp, #0]
    f0c2:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
    f0c4:	f1ba 0f03 	cmp.w	sl, #3
    f0c8:	9900      	ldr	r1, [sp, #0]
    f0ca:	d102      	bne.n	f0d2 <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
    f0cc:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
    f0ce:	2c00      	cmp	r4, #0
    f0d0:	dc11      	bgt.n	f0f6 <_printk_dec_ulong+0x96>
			out(' ', ctx);
		}
	}
}
    f0d2:	b003      	add	sp, #12
    f0d4:	ecbd 8b02 	vpop	{d8}
    f0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    f0dc:	4544      	cmp	r4, r8
    f0de:	dbe3      	blt.n	f0a8 <_printk_dec_ulong+0x48>
				&& padding < PAD_SPACE_AFTER) {
    f0e0:	f1ba 0f02 	cmp.w	sl, #2
    f0e4:	d8e0      	bhi.n	f0a8 <_printk_dec_ulong+0x48>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    f0e6:	ee18 0a10 	vmov	r0, s16
    f0ea:	e9cd 1200 	strd	r1, r2, [sp]
			digits++;
    f0ee:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    f0f0:	47b0      	blx	r6
			digits++;
    f0f2:	9a01      	ldr	r2, [sp, #4]
    f0f4:	e7d7      	b.n	f0a6 <_printk_dec_ulong+0x46>
			out(' ', ctx);
    f0f6:	2020      	movs	r0, #32
    f0f8:	9100      	str	r1, [sp, #0]
    f0fa:	3c01      	subs	r4, #1
    f0fc:	47b0      	blx	r6
    f0fe:	9900      	ldr	r1, [sp, #0]
    f100:	e7e5      	b.n	f0ce <_printk_dec_ulong+0x6e>
    f102:	bf00      	nop
    f104:	3b9aca00 	.word	0x3b9aca00

0000f108 <__printk_hook_install>:
	_char_out = fn;
    f108:	4b01      	ldr	r3, [pc, #4]	; (f110 <__printk_hook_install+0x8>)
    f10a:	6018      	str	r0, [r3, #0]
}
    f10c:	4770      	bx	lr
    f10e:	bf00      	nop
    f110:	200200a8 	.word	0x200200a8

0000f114 <z_vprintk>:
{
    f114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    f118:	2700      	movs	r7, #0
{
    f11a:	4605      	mov	r5, r0
    f11c:	468b      	mov	fp, r1
	int min_width = -1;
    f11e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    f122:	46b8      	mov	r8, r7
{
    f124:	461c      	mov	r4, r3
    f126:	b08d      	sub	sp, #52	; 0x34
    f128:	1e53      	subs	r3, r2, #1
    f12a:	9303      	str	r3, [sp, #12]
			might_format = 0;
    f12c:	2600      	movs	r6, #0
					break;
    f12e:	e005      	b.n	f13c <z_vprintk+0x28>
		if (!might_format) {
    f130:	b96e      	cbnz	r6, f14e <z_vprintk+0x3a>
			if (*fmt != '%') {
    f132:	2825      	cmp	r0, #37	; 0x25
    f134:	f000 8171 	beq.w	f41a <z_vprintk+0x306>
				out((int)*fmt, ctx);
    f138:	4659      	mov	r1, fp
    f13a:	47a8      	blx	r5
	while (*fmt) {
    f13c:	9b03      	ldr	r3, [sp, #12]
    f13e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    f142:	9303      	str	r3, [sp, #12]
    f144:	2800      	cmp	r0, #0
    f146:	d1f3      	bne.n	f130 <z_vprintk+0x1c>
}
    f148:	b00d      	add	sp, #52	; 0x34
    f14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    f14e:	287a      	cmp	r0, #122	; 0x7a
    f150:	d80a      	bhi.n	f168 <z_vprintk+0x54>
    f152:	2862      	cmp	r0, #98	; 0x62
    f154:	d810      	bhi.n	f178 <z_vprintk+0x64>
    f156:	2830      	cmp	r0, #48	; 0x30
    f158:	d054      	beq.n	f204 <z_vprintk+0xf0>
    f15a:	d845      	bhi.n	f1e8 <z_vprintk+0xd4>
    f15c:	2825      	cmp	r0, #37	; 0x25
    f15e:	f000 815a 	beq.w	f416 <z_vprintk+0x302>
    f162:	282d      	cmp	r0, #45	; 0x2d
    f164:	f000 815f 	beq.w	f426 <z_vprintk+0x312>
					out((int)'%', ctx);
    f168:	4659      	mov	r1, fp
    f16a:	2025      	movs	r0, #37	; 0x25
    f16c:	47a8      	blx	r5
					out((int)*fmt, ctx);
    f16e:	4659      	mov	r1, fp
    f170:	9b03      	ldr	r3, [sp, #12]
    f172:	7818      	ldrb	r0, [r3, #0]
    f174:	47a8      	blx	r5
    f176:	e7d9      	b.n	f12c <z_vprintk+0x18>
    f178:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    f17c:	2b17      	cmp	r3, #23
    f17e:	d8f3      	bhi.n	f168 <z_vprintk+0x54>
    f180:	a201      	add	r2, pc, #4	; (adr r2, f188 <z_vprintk+0x74>)
    f182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f186:	bf00      	nop
    f188:	0000f40f 	.word	0x0000f40f
    f18c:	0000f253 	.word	0x0000f253
    f190:	0000f169 	.word	0x0000f169
    f194:	0000f169 	.word	0x0000f169
    f198:	0000f169 	.word	0x0000f169
    f19c:	0000f235 	.word	0x0000f235
    f1a0:	0000f253 	.word	0x0000f253
    f1a4:	0000f169 	.word	0x0000f169
    f1a8:	0000f169 	.word	0x0000f169
    f1ac:	0000f235 	.word	0x0000f235
    f1b0:	0000f169 	.word	0x0000f169
    f1b4:	0000f169 	.word	0x0000f169
    f1b8:	0000f169 	.word	0x0000f169
    f1bc:	0000f2f5 	.word	0x0000f2f5
    f1c0:	0000f169 	.word	0x0000f169
    f1c4:	0000f169 	.word	0x0000f169
    f1c8:	0000f3df 	.word	0x0000f3df
    f1cc:	0000f169 	.word	0x0000f169
    f1d0:	0000f2c3 	.word	0x0000f2c3
    f1d4:	0000f169 	.word	0x0000f169
    f1d8:	0000f169 	.word	0x0000f169
    f1dc:	0000f1f1 	.word	0x0000f1f1
    f1e0:	0000f169 	.word	0x0000f169
    f1e4:	0000f235 	.word	0x0000f235
			switch (*fmt) {
    f1e8:	2839      	cmp	r0, #57	; 0x39
    f1ea:	d91a      	bls.n	f222 <z_vprintk+0x10e>
    f1ec:	2858      	cmp	r0, #88	; 0x58
    f1ee:	d1bb      	bne.n	f168 <z_vprintk+0x54>
				if (*fmt == 'p') {
    f1f0:	9b03      	ldr	r3, [sp, #12]
    f1f2:	781b      	ldrb	r3, [r3, #0]
    f1f4:	2b70      	cmp	r3, #112	; 0x70
    f1f6:	f040 8088 	bne.w	f30a <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
    f1fa:	f854 3b04 	ldr.w	r3, [r4], #4
    f1fe:	2200      	movs	r2, #0
    f200:	9306      	str	r3, [sp, #24]
    f202:	e090      	b.n	f326 <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
    f204:	f1b9 0f00 	cmp.w	r9, #0
    f208:	da0e      	bge.n	f228 <z_vprintk+0x114>
    f20a:	f1b8 0f00 	cmp.w	r8, #0
    f20e:	f000 810d 	beq.w	f42c <z_vprintk+0x318>
					min_width = *fmt - '0';
    f212:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    f216:	f1b8 0f00 	cmp.w	r8, #0
    f21a:	bf08      	it	eq
    f21c:	f04f 0802 	moveq.w	r8, #2
    f220:	e78c      	b.n	f13c <z_vprintk+0x28>
				if (min_width < 0) {
    f222:	f1b9 0f00 	cmp.w	r9, #0
    f226:	dbf4      	blt.n	f212 <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
    f228:	230a      	movs	r3, #10
    f22a:	fb03 0909 	mla	r9, r3, r9, r0
    f22e:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    f232:	e7f0      	b.n	f216 <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
    f234:	2868      	cmp	r0, #104	; 0x68
    f236:	d103      	bne.n	f240 <z_vprintk+0x12c>
    f238:	2f68      	cmp	r7, #104	; 0x68
    f23a:	d106      	bne.n	f24a <z_vprintk+0x136>
					length_mod = 'H';
    f23c:	2748      	movs	r7, #72	; 0x48
    f23e:	e77d      	b.n	f13c <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
    f240:	286c      	cmp	r0, #108	; 0x6c
    f242:	d102      	bne.n	f24a <z_vprintk+0x136>
    f244:	2f6c      	cmp	r7, #108	; 0x6c
    f246:	f000 80f4 	beq.w	f432 <z_vprintk+0x31e>
				} else if (length_mod == 0) {
    f24a:	2f00      	cmp	r7, #0
    f24c:	d18c      	bne.n	f168 <z_vprintk+0x54>
    f24e:	4607      	mov	r7, r0
    f250:	e774      	b.n	f13c <z_vprintk+0x28>
				if (length_mod == 'z') {
    f252:	2f7a      	cmp	r7, #122	; 0x7a
    f254:	d102      	bne.n	f25c <z_vprintk+0x148>
					d = va_arg(ap, int);
    f256:	f854 6b04 	ldr.w	r6, [r4], #4
    f25a:	e021      	b.n	f2a0 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
    f25c:	2f6c      	cmp	r7, #108	; 0x6c
    f25e:	d0fa      	beq.n	f256 <z_vprintk+0x142>
				} else if (length_mod == 'L') {
    f260:	2f4c      	cmp	r7, #76	; 0x4c
    f262:	d1f8      	bne.n	f256 <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
    f264:	3407      	adds	r4, #7
    f266:	f024 0407 	bic.w	r4, r4, #7
    f26a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    f26e:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
    f272:	9b04      	ldr	r3, [sp, #16]
    f274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f278:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
    f27c:	9b05      	ldr	r3, [sp, #20]
    f27e:	9108      	str	r1, [sp, #32]
    f280:	f143 0100 	adc.w	r1, r3, #0
    f284:	9109      	str	r1, [sp, #36]	; 0x24
    f286:	2100      	movs	r1, #0
    f288:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    f28c:	4299      	cmp	r1, r3
    f28e:	bf08      	it	eq
    f290:	4290      	cmpeq	r0, r2
    f292:	d204      	bcs.n	f29e <z_vprintk+0x18a>
						print_err(out, ctx);
    f294:	4659      	mov	r1, fp
    f296:	4628      	mov	r0, r5
    f298:	f012 ffed 	bl	22276 <print_err>
						break;
    f29c:	e746      	b.n	f12c <z_vprintk+0x18>
					d = lld;
    f29e:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
    f2a0:	2e00      	cmp	r6, #0
    f2a2:	da05      	bge.n	f2b0 <z_vprintk+0x19c>
					out((int)'-', ctx);
    f2a4:	4659      	mov	r1, fp
    f2a6:	202d      	movs	r0, #45	; 0x2d
    f2a8:	47a8      	blx	r5
					d = -d;
    f2aa:	4276      	negs	r6, r6
					min_width--;
    f2ac:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    f2b0:	4643      	mov	r3, r8
    f2b2:	4632      	mov	r2, r6
    f2b4:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    f2b8:	4659      	mov	r1, fp
    f2ba:	4628      	mov	r0, r5
    f2bc:	f7ff fed0 	bl	f060 <_printk_dec_ulong>
				break;
    f2c0:	e734      	b.n	f12c <z_vprintk+0x18>
				if (length_mod == 'z') {
    f2c2:	2f7a      	cmp	r7, #122	; 0x7a
    f2c4:	d102      	bne.n	f2cc <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
    f2c6:	f854 2b04 	ldr.w	r2, [r4], #4
    f2ca:	e00f      	b.n	f2ec <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
    f2cc:	2f6c      	cmp	r7, #108	; 0x6c
    f2ce:	d0fa      	beq.n	f2c6 <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
    f2d0:	2f4c      	cmp	r7, #76	; 0x4c
    f2d2:	d1f8      	bne.n	f2c6 <z_vprintk+0x1b2>
					if (llu > ~0UL) {
    f2d4:	2100      	movs	r1, #0
    f2d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
    f2da:	3407      	adds	r4, #7
    f2dc:	f024 0407 	bic.w	r4, r4, #7
    f2e0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    f2e4:	4299      	cmp	r1, r3
    f2e6:	bf08      	it	eq
    f2e8:	4290      	cmpeq	r0, r2
    f2ea:	d3d3      	bcc.n	f294 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
    f2ec:	4643      	mov	r3, r8
    f2ee:	f8cd 9000 	str.w	r9, [sp]
    f2f2:	e7e1      	b.n	f2b8 <z_vprintk+0x1a4>
				out('0', ctx);
    f2f4:	4659      	mov	r1, fp
    f2f6:	2030      	movs	r0, #48	; 0x30
    f2f8:	47a8      	blx	r5
				out('x', ctx);
    f2fa:	4659      	mov	r1, fp
    f2fc:	2078      	movs	r0, #120	; 0x78
    f2fe:	47a8      	blx	r5
					min_width = 8;
    f300:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    f304:	f04f 0801 	mov.w	r8, #1
    f308:	e772      	b.n	f1f0 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    f30a:	2f6c      	cmp	r7, #108	; 0x6c
    f30c:	f43f af75 	beq.w	f1fa <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
    f310:	2f4c      	cmp	r7, #76	; 0x4c
    f312:	f47f af72 	bne.w	f1fa <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
    f316:	1de3      	adds	r3, r4, #7
    f318:	f023 0307 	bic.w	r3, r3, #7
    f31c:	461c      	mov	r4, r3
    f31e:	f854 2b08 	ldr.w	r2, [r4], #8
    f322:	9206      	str	r2, [sp, #24]
    f324:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
    f326:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    f328:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
    f32a:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
    f32e:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
    f330:	9107      	str	r1, [sp, #28]
		shift -= 4;
    f332:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
    f336:	9906      	ldr	r1, [sp, #24]
    f338:	f1ca 0e20 	rsb	lr, sl, #32
    f33c:	f1aa 0c20 	sub.w	ip, sl, #32
    f340:	fa21 f00a 	lsr.w	r0, r1, sl
    f344:	fa02 fe0e 	lsl.w	lr, r2, lr
    f348:	ea40 000e 	orr.w	r0, r0, lr
    f34c:	fa22 fc0c 	lsr.w	ip, r2, ip
    f350:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    f354:	f010 000f 	ands.w	r0, r0, #15
    f358:	d107      	bne.n	f36a <z_vprintk+0x256>
    f35a:	9907      	ldr	r1, [sp, #28]
    f35c:	b911      	cbnz	r1, f364 <z_vprintk+0x250>
    f35e:	f1ba 0f00 	cmp.w	sl, #0
    f362:	d125      	bne.n	f3b0 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
    f364:	f04f 0c30 	mov.w	ip, #48	; 0x30
    f368:	e005      	b.n	f376 <z_vprintk+0x262>
    f36a:	2809      	cmp	r0, #9
    f36c:	bf8c      	ite	hi
    f36e:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    f372:	f04f 0c30 	movls.w	ip, #48	; 0x30
    f376:	4460      	add	r0, ip
			out((int)nibble, ctx);
    f378:	4659      	mov	r1, fp
    f37a:	b240      	sxtb	r0, r0
    f37c:	920a      	str	r2, [sp, #40]	; 0x28
    f37e:	9307      	str	r3, [sp, #28]
    f380:	47a8      	blx	r5
			digits++;
    f382:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
    f384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
    f386:	3301      	adds	r3, #1
    f388:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
    f38a:	9b07      	ldr	r3, [sp, #28]
    f38c:	f1ba 0f00 	cmp.w	sl, #0
    f390:	d123      	bne.n	f3da <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
    f392:	f1b8 0f03 	cmp.w	r8, #3
    f396:	f47f aec9 	bne.w	f12c <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
    f39a:	9b04      	ldr	r3, [sp, #16]
    f39c:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
    f3a0:	2e00      	cmp	r6, #0
    f3a2:	f77f aec3 	ble.w	f12c <z_vprintk+0x18>
			out(' ', ctx);
    f3a6:	4659      	mov	r1, fp
    f3a8:	2020      	movs	r0, #32
    f3aa:	47a8      	blx	r5
    f3ac:	3e01      	subs	r6, #1
    f3ae:	e7f7      	b.n	f3a0 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
    f3b0:	1e59      	subs	r1, r3, #1
    f3b2:	4599      	cmp	r9, r3
    f3b4:	910a      	str	r1, [sp, #40]	; 0x28
    f3b6:	db07      	blt.n	f3c8 <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
    f3b8:	f1b8 0f01 	cmp.w	r8, #1
    f3bc:	d106      	bne.n	f3cc <z_vprintk+0x2b8>
				out('0', ctx);
    f3be:	4659      	mov	r1, fp
    f3c0:	2030      	movs	r0, #48	; 0x30
    f3c2:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
    f3c4:	47a8      	blx	r5
    f3c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
    f3c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3ca:	e7b2      	b.n	f332 <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
    f3cc:	f1b8 0f02 	cmp.w	r8, #2
    f3d0:	d1fa      	bne.n	f3c8 <z_vprintk+0x2b4>
				out(' ', ctx);
    f3d2:	4659      	mov	r1, fp
    f3d4:	2020      	movs	r0, #32
    f3d6:	920b      	str	r2, [sp, #44]	; 0x2c
    f3d8:	e7f4      	b.n	f3c4 <z_vprintk+0x2b0>
			found_largest_digit = 1;
    f3da:	9607      	str	r6, [sp, #28]
    f3dc:	e7a9      	b.n	f332 <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
    f3de:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
    f3e2:	46b2      	mov	sl, r6
    f3e4:	4653      	mov	r3, sl
    f3e6:	f81a 0b01 	ldrb.w	r0, [sl], #1
    f3ea:	b968      	cbnz	r0, f408 <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
    f3ec:	f1b8 0f03 	cmp.w	r8, #3
    f3f0:	d121      	bne.n	f436 <z_vprintk+0x322>
					int remaining = min_width - (s - start);
    f3f2:	1b9e      	subs	r6, r3, r6
    f3f4:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
    f3f8:	2e00      	cmp	r6, #0
    f3fa:	f77f ae97 	ble.w	f12c <z_vprintk+0x18>
						out(' ', ctx);
    f3fe:	4659      	mov	r1, fp
    f400:	2020      	movs	r0, #32
    f402:	47a8      	blx	r5
    f404:	3e01      	subs	r6, #1
    f406:	e7f7      	b.n	f3f8 <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
    f408:	4659      	mov	r1, fp
    f40a:	47a8      	blx	r5
    f40c:	e7ea      	b.n	f3e4 <z_vprintk+0x2d0>
				out(c, ctx);
    f40e:	4659      	mov	r1, fp
    f410:	f854 0b04 	ldr.w	r0, [r4], #4
    f414:	e6ae      	b.n	f174 <z_vprintk+0x60>
				out((int)'%', ctx);
    f416:	4659      	mov	r1, fp
    f418:	e6ac      	b.n	f174 <z_vprintk+0x60>
				length_mod = 0;
    f41a:	4637      	mov	r7, r6
				padding = PAD_NONE;
    f41c:	46b0      	mov	r8, r6
				min_width = -1;
    f41e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    f422:	2601      	movs	r6, #1
    f424:	e68a      	b.n	f13c <z_vprintk+0x28>
			switch (*fmt) {
    f426:	f04f 0803 	mov.w	r8, #3
    f42a:	e687      	b.n	f13c <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
    f42c:	f04f 0801 	mov.w	r8, #1
    f430:	e684      	b.n	f13c <z_vprintk+0x28>
					length_mod = 'L';
    f432:	274c      	movs	r7, #76	; 0x4c
    f434:	e682      	b.n	f13c <z_vprintk+0x28>
			might_format = 0;
    f436:	4606      	mov	r6, r0
		++fmt;
    f438:	e680      	b.n	f13c <z_vprintk+0x28>
    f43a:	bf00      	nop

0000f43c <vprintk>:
{
    f43c:	b507      	push	{r0, r1, r2, lr}
    f43e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    f440:	2100      	movs	r1, #0
{
    f442:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    f444:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    f446:	4803      	ldr	r0, [pc, #12]	; (f454 <vprintk+0x18>)
    f448:	a901      	add	r1, sp, #4
    f44a:	f7ff fe63 	bl	f114 <z_vprintk>
}
    f44e:	b003      	add	sp, #12
    f450:	f85d fb04 	ldr.w	pc, [sp], #4
    f454:	0000f051 	.word	0x0000f051

0000f458 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    f458:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    f45a:	2500      	movs	r5, #0
{
    f45c:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    f45e:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    f462:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    f464:	a901      	add	r1, sp, #4
    f466:	4805      	ldr	r0, [pc, #20]	; (f47c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    f468:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    f46a:	f7ff fe53 	bl	f114 <z_vprintk>

	if (ctx.count < ctx.max) {
    f46e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    f472:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    f474:	bfb8      	it	lt
    f476:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    f478:	b005      	add	sp, #20
    f47a:	bd30      	pop	{r4, r5, pc}
    f47c:	00022293 	.word	0x00022293

0000f480 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    f480:	f04f 0220 	mov.w	r2, #32
    f484:	f3ef 8311 	mrs	r3, BASEPRI
    f488:	f382 8811 	msr	BASEPRI, r2
    f48c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    f490:	2101      	movs	r1, #1
    f492:	4a04      	ldr	r2, [pc, #16]	; (f4a4 <nordicsemi_nrf91_init+0x24>)
    f494:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    f498:	f383 8811 	msr	BASEPRI, r3
    f49c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    f4a0:	2000      	movs	r0, #0
    f4a2:	4770      	bx	lr
    f4a4:	40039000 	.word	0x40039000

0000f4a8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    f4a8:	b120      	cbz	r0, f4b4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    f4aa:	4b03      	ldr	r3, [pc, #12]	; (f4b8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    f4ac:	0180      	lsls	r0, r0, #6
    f4ae:	f043 0301 	orr.w	r3, r3, #1
    f4b2:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    f4b4:	4770      	bx	lr
    f4b6:	bf00      	nop
    f4b8:	00028800 	.word	0x00028800

0000f4bc <zsock_accepted_cb>:
#include <syscalls/zsock_shutdown_mrsh.c>
#endif /* CONFIG_USERSPACE */

static void zsock_accepted_cb(struct net_context *new_ctx,
			      struct sockaddr *addr, socklen_t addrlen,
			      int status, void *user_data) {
    f4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f4be:	9d06      	ldr	r5, [sp, #24]
    f4c0:	4604      	mov	r4, r0
	struct net_context *parent = user_data;

	NET_DBG("parent=%p, ctx=%p, st=%d", parent, new_ctx, status);

	if (status == 0) {
    f4c2:	b98b      	cbnz	r3, f4e8 <zsock_accepted_cb+0x2c>
		/* This just installs a callback, so cannot fail. */
		(void)net_context_recv(new_ctx, zsock_received_cb, K_NO_WAIT,
    f4c4:	9300      	str	r3, [sp, #0]
    f4c6:	2200      	movs	r2, #0
    f4c8:	2300      	movs	r3, #0
    f4ca:	4908      	ldr	r1, [pc, #32]	; (f4ec <zsock_accepted_cb+0x30>)
    f4cc:	f002 f9f2 	bl	118b4 <net_context_recv>
	z_impl_k_queue_init(queue);
    f4d0:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    f4d4:	f017 fec6 	bl	27264 <z_impl_k_queue_init>
				       NULL);
		k_fifo_init(&new_ctx->recv_q);

		k_fifo_put(&parent->accept_q, new_ctx);
    f4d8:	4621      	mov	r1, r4
    f4da:	f105 006c 	add.w	r0, r5, #108	; 0x6c
	}
}
    f4de:	b003      	add	sp, #12
    f4e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		k_fifo_put(&parent->accept_q, new_ctx);
    f4e4:	f017 beea 	b.w	272bc <k_queue_append>
}
    f4e8:	b003      	add	sp, #12
    f4ea:	bd30      	pop	{r4, r5, pc}
    f4ec:	00022855 	.word	0x00022855

0000f4f0 <zsock_socket_internal>:
{
    f4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f4f2:	4607      	mov	r7, r0
    f4f4:	460e      	mov	r6, r1
    f4f6:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
    f4f8:	f7ff fd74 	bl	efe4 <z_reserve_fd>
	if (fd < 0) {
    f4fc:	1e04      	subs	r4, r0, #0
    f4fe:	db17      	blt.n	f530 <zsock_socket_internal+0x40>
	if (proto == 0) {
    f500:	b93d      	cbnz	r5, f512 <zsock_socket_internal+0x22>
		if (family == AF_INET || family == AF_INET6) {
    f502:	1e7b      	subs	r3, r7, #1
    f504:	2b01      	cmp	r3, #1
    f506:	d804      	bhi.n	f512 <zsock_socket_internal+0x22>
			if (type == SOCK_DGRAM) {
    f508:	2e02      	cmp	r6, #2
    f50a:	d014      	beq.n	f536 <zsock_socket_internal+0x46>
			} else if (type == SOCK_STREAM) {
    f50c:	2e01      	cmp	r6, #1
				proto = IPPROTO_TCP;
    f50e:	bf08      	it	eq
    f510:	2506      	moveq	r5, #6
	res = net_context_get(family, type, proto, &ctx);
    f512:	b2f1      	uxtb	r1, r6
    f514:	ab01      	add	r3, sp, #4
    f516:	b2aa      	uxth	r2, r5
    f518:	b2b8      	uxth	r0, r7
    f51a:	f002 f8eb 	bl	116f4 <net_context_get>
	if (res < 0) {
    f51e:	1e06      	subs	r6, r0, #0
    f520:	da0b      	bge.n	f53a <zsock_socket_internal+0x4a>
		z_free_fd(fd);
    f522:	4620      	mov	r0, r4
    f524:	f7ff fd8c 	bl	f040 <z_free_fd>
		errno = -res;
    f528:	f013 fd3c 	bl	22fa4 <__errno>
    f52c:	4276      	negs	r6, r6
    f52e:	6006      	str	r6, [r0, #0]
		return -1;
    f530:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    f534:	e012      	b.n	f55c <zsock_socket_internal+0x6c>
				proto = IPPROTO_UDP;
    f536:	2511      	movs	r5, #17
    f538:	e7eb      	b.n	f512 <zsock_socket_internal+0x22>
	ctx->user_data = NULL;
    f53a:	2300      	movs	r3, #0
    f53c:	9801      	ldr	r0, [sp, #4]
    f53e:	6003      	str	r3, [r0, #0]
	ctx->socket_data = NULL;
    f540:	6683      	str	r3, [r0, #104]	; 0x68
    f542:	306c      	adds	r0, #108	; 0x6c
    f544:	f017 fe8e 	bl	27264 <z_impl_k_queue_init>
	if (proto == IPPROTO_TCP) {
    f548:	2d06      	cmp	r5, #6
    f54a:	d102      	bne.n	f552 <zsock_socket_internal+0x62>
		net_context_ref(ctx);
    f54c:	9801      	ldr	r0, [sp, #4]
    f54e:	f014 fb58 	bl	23c02 <net_context_ref>
	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
    f552:	4620      	mov	r0, r4
    f554:	4a03      	ldr	r2, [pc, #12]	; (f564 <zsock_socket_internal+0x74>)
    f556:	9901      	ldr	r1, [sp, #4]
    f558:	f7ff fd68 	bl	f02c <z_finalize_fd>
}
    f55c:	4620      	mov	r0, r4
    f55e:	b003      	add	sp, #12
    f560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f562:	bf00      	nop
    f564:	00028908 	.word	0x00028908

0000f568 <z_impl_zsock_socket>:
{
    f568:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f56a:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    f56c:	4d0e      	ldr	r5, [pc, #56]	; (f5a8 <z_impl_zsock_socket+0x40>)
    f56e:	4e0f      	ldr	r6, [pc, #60]	; (f5ac <z_impl_zsock_socket+0x44>)
    f570:	42b5      	cmp	r5, r6
    f572:	d305      	bcc.n	f580 <z_impl_zsock_socket+0x18>
		return zsock_socket_internal(family, type, proto);
    f574:	4620      	mov	r0, r4
}
    f576:	b002      	add	sp, #8
    f578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return zsock_socket_internal(family, type, proto);
    f57c:	f7ff bfb8 	b.w	f4f0 <zsock_socket_internal>
		if (sock_family->family != family &&
    f580:	682b      	ldr	r3, [r5, #0]
    f582:	42a3      	cmp	r3, r4
    f584:	d000      	beq.n	f588 <z_impl_zsock_socket+0x20>
    f586:	b96b      	cbnz	r3, f5a4 <z_impl_zsock_socket+0x3c>
		if (!sock_family->is_supported(family, type, proto)) {
    f588:	4620      	mov	r0, r4
    f58a:	686b      	ldr	r3, [r5, #4]
    f58c:	e9cd 1200 	strd	r1, r2, [sp]
    f590:	4798      	blx	r3
    f592:	e9dd 1200 	ldrd	r1, r2, [sp]
    f596:	b128      	cbz	r0, f5a4 <z_impl_zsock_socket+0x3c>
		return sock_family->handler(family, type, proto);
    f598:	4620      	mov	r0, r4
    f59a:	68ab      	ldr	r3, [r5, #8]
}
    f59c:	b002      	add	sp, #8
    f59e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return sock_family->handler(family, type, proto);
    f5a2:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    f5a4:	350c      	adds	r5, #12
    f5a6:	e7e3      	b.n	f570 <z_impl_zsock_socket+0x8>
    f5a8:	00028784 	.word	0x00028784
    f5ac:	00028790 	.word	0x00028790

0000f5b0 <zsock_bind_ctx>:
	k_fifo_put(&ctx->recv_q, pkt);
}

int zsock_bind_ctx(struct net_context *ctx, const struct sockaddr *addr,
		   socklen_t addrlen)
{
    f5b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f5b2:	4605      	mov	r5, r0
	SET_ERRNO(net_context_bind(ctx, addr, addrlen));
    f5b4:	f014 fb57 	bl	23c66 <net_context_bind>
    f5b8:	1e04      	subs	r4, r0, #0
    f5ba:	da07      	bge.n	f5cc <zsock_bind_ctx+0x1c>
	/* For DGRAM socket, we expect to receive packets after call to
	 * bind(), but for STREAM socket, next expected operation is
	 * listen(), which doesn't work if recv callback is set.
	 */
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    f5bc:	f013 fcf2 	bl	22fa4 <__errno>
    f5c0:	4264      	negs	r4, r4
    f5c2:	6004      	str	r4, [r0, #0]
    f5c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					   ctx->user_data));
	}

	return 0;
}
    f5c8:	b003      	add	sp, #12
    f5ca:	bd30      	pop	{r4, r5, pc}
static inline
enum net_sock_type net_context_get_type(struct net_context *context)
{
	NET_ASSERT(context);

	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
    f5cc:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
    f5d0:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
    f5d4:	2b02      	cmp	r3, #2
    f5d6:	d109      	bne.n	f5ec <zsock_bind_ctx+0x3c>
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    f5d8:	682b      	ldr	r3, [r5, #0]
    f5da:	2200      	movs	r2, #0
    f5dc:	9300      	str	r3, [sp, #0]
    f5de:	4628      	mov	r0, r5
    f5e0:	2300      	movs	r3, #0
    f5e2:	4903      	ldr	r1, [pc, #12]	; (f5f0 <zsock_bind_ctx+0x40>)
    f5e4:	f002 f966 	bl	118b4 <net_context_recv>
    f5e8:	1e04      	subs	r4, r0, #0
    f5ea:	dbe7      	blt.n	f5bc <zsock_bind_ctx+0xc>
	return 0;
    f5ec:	2000      	movs	r0, #0
    f5ee:	e7eb      	b.n	f5c8 <zsock_bind_ctx+0x18>
    f5f0:	00022855 	.word	0x00022855

0000f5f4 <zsock_connect_ctx>:
#include <syscalls/zsock_bind_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_connect_ctx(struct net_context *ctx, const struct sockaddr *addr,
		      socklen_t addrlen)
{
    f5f4:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb,
					   K_NO_WAIT, ctx->user_data));
		return 0;
	}
#endif
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
    f5f8:	2400      	movs	r4, #0
    f5fa:	f44f 38c0 	mov.w	r8, #98304	; 0x18000
    f5fe:	f04f 0900 	mov.w	r9, #0
    f602:	4623      	mov	r3, r4
    f604:	e9cd 8900 	strd	r8, r9, [sp]
    f608:	9402      	str	r4, [sp, #8]
{
    f60a:	4606      	mov	r6, r0
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
    f60c:	f014 fcb3 	bl	23f76 <net_context_connect>
    f610:	1e05      	subs	r5, r0, #0
    f612:	da08      	bge.n	f626 <zsock_connect_ctx+0x32>
			      K_MSEC(CONFIG_NET_SOCKETS_CONNECT_TIMEOUT),
			      NULL));
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    f614:	f013 fcc6 	bl	22fa4 <__errno>
    f618:	426d      	negs	r5, r5
    f61a:	6005      	str	r5, [r0, #0]
    f61c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
				   ctx->user_data));

	return 0;
}
    f620:	b004      	add	sp, #16
    f622:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
    f626:	6833      	ldr	r3, [r6, #0]
    f628:	2200      	movs	r2, #0
    f62a:	9300      	str	r3, [sp, #0]
    f62c:	4630      	mov	r0, r6
    f62e:	2300      	movs	r3, #0
    f630:	4903      	ldr	r1, [pc, #12]	; (f640 <zsock_connect_ctx+0x4c>)
    f632:	f002 f93f 	bl	118b4 <net_context_recv>
    f636:	1e05      	subs	r5, r0, #0
    f638:	dbec      	blt.n	f614 <zsock_connect_ctx+0x20>
	return 0;
    f63a:	4620      	mov	r0, r4
    f63c:	e7f0      	b.n	f620 <zsock_connect_ctx+0x2c>
    f63e:	bf00      	nop
    f640:	00022855 	.word	0x00022855

0000f644 <zsock_listen_ctx>:
}
#include <syscalls/zsock_connect_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_listen_ctx(struct net_context *ctx, int backlog)
{
    f644:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f646:	4605      	mov	r5, r0
	SET_ERRNO(net_context_listen(ctx, backlog));
    f648:	f014 fb87 	bl	23d5a <net_context_listen>
    f64c:	1e04      	subs	r4, r0, #0
    f64e:	da07      	bge.n	f660 <zsock_listen_ctx+0x1c>
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
    f650:	f013 fca8 	bl	22fa4 <__errno>
    f654:	4264      	negs	r4, r4
    f656:	6004      	str	r4, [r0, #0]
    f658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

	return 0;
}
    f65c:	b003      	add	sp, #12
    f65e:	bd30      	pop	{r4, r5, pc}
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
    f660:	2200      	movs	r2, #0
    f662:	2300      	movs	r3, #0
    f664:	4628      	mov	r0, r5
    f666:	4904      	ldr	r1, [pc, #16]	; (f678 <zsock_listen_ctx+0x34>)
    f668:	9500      	str	r5, [sp, #0]
    f66a:	f014 fcf5 	bl	24058 <net_context_accept>
    f66e:	1e04      	subs	r4, r0, #0
    f670:	dbee      	blt.n	f650 <zsock_listen_ctx+0xc>
	return 0;
    f672:	2000      	movs	r0, #0
    f674:	e7f2      	b.n	f65c <zsock_listen_ctx+0x18>
    f676:	bf00      	nop
    f678:	0000f4bd 	.word	0x0000f4bd

0000f67c <zsock_accept_ctx>:
#include <syscalls/zsock_listen_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_accept_ctx(struct net_context *parent, struct sockaddr *addr,
		     socklen_t *addrlen)
{
    f67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f680:	4605      	mov	r5, r0
    f682:	460f      	mov	r7, r1
    f684:	4616      	mov	r6, r2
	k_timeout_t timeout = K_FOREVER;
	struct net_context *ctx;
	struct net_pkt *last_pkt;
	int fd;

	fd = z_reserve_fd();
    f686:	f7ff fcad 	bl	efe4 <z_reserve_fd>
	if (fd < 0) {
    f68a:	1e04      	subs	r4, r0, #0
    f68c:	db36      	blt.n	f6fc <zsock_accept_ctx+0x80>
		return -1;
	}

	if (sock_is_nonblock(parent)) {
    f68e:	f04f 0800 	mov.w	r8, #0
    f692:	6eab      	ldr	r3, [r5, #104]	; 0x68
    f694:	f083 0102 	eor.w	r1, r3, #2
    f698:	f3c1 0240 	ubfx	r2, r1, #1, #1
    f69c:	4252      	negs	r2, r2
    f69e:	eb68 0348 	sbc.w	r3, r8, r8, lsl #1
	return z_impl_k_queue_get(queue, timeout);
    f6a2:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    f6a6:	f00e fe51 	bl	1e34c <z_impl_k_queue_get>
		timeout = K_NO_WAIT;
	}

	ctx = k_fifo_get(&parent->accept_q, timeout);
	if (ctx == NULL) {
    f6aa:	4605      	mov	r5, r0
    f6ac:	b938      	cbnz	r0, f6be <zsock_accept_ctx+0x42>
		z_free_fd(fd);
    f6ae:	4620      	mov	r0, r4
    f6b0:	f7ff fcc6 	bl	f040 <z_free_fd>
		errno = EAGAIN;
    f6b4:	f013 fc76 	bl	22fa4 <__errno>
    f6b8:	230b      	movs	r3, #11
			*addrlen = sizeof(struct sockaddr_in);
		} else if (ctx->remote.sa_family == AF_INET6) {
			*addrlen = sizeof(struct sockaddr_in6);
		} else {
			z_free_fd(fd);
			errno = ENOTSUP;
    f6ba:	6003      	str	r3, [r0, #0]
			return -1;
    f6bc:	e01e      	b.n	f6fc <zsock_accept_ctx+0x80>
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
    f6be:	4641      	mov	r1, r8
    f6c0:	6f00      	ldr	r0, [r0, #112]	; 0x70
    f6c2:	f017 fdc3 	bl	2724c <z_queue_node_peek>
	if (last_pkt) {
    f6c6:	b170      	cbz	r0, f6e6 <zsock_accept_ctx+0x6a>
}

#if defined(CONFIG_NET_SOCKETS)
static inline u8_t net_pkt_eof(struct net_pkt *pkt)
{
	return pkt->sent_or_eof;
    f6c8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
		if (net_pkt_eof(last_pkt)) {
    f6cc:	0799      	lsls	r1, r3, #30
    f6ce:	d50a      	bpl.n	f6e6 <zsock_accept_ctx+0x6a>
static inline void sock_set_flag(struct net_context *ctx, uintptr_t mask,
				 uintptr_t flag)
{
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);

	val = (val & ~mask) | flag;
    f6d0:	6eab      	ldr	r3, [r5, #104]	; 0x68
			z_free_fd(fd);
    f6d2:	4620      	mov	r0, r4
    f6d4:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
    f6d8:	66ab      	str	r3, [r5, #104]	; 0x68
    f6da:	f7ff fcb1 	bl	f040 <z_free_fd>
			errno = ECONNABORTED;
    f6de:	f013 fc61 	bl	22fa4 <__errno>
    f6e2:	2371      	movs	r3, #113	; 0x71
    f6e4:	e7e9      	b.n	f6ba <zsock_accept_ctx+0x3e>
	if (net_context_is_closing(ctx)) {
    f6e6:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
    f6ea:	055a      	lsls	r2, r3, #21
    f6ec:	d509      	bpl.n	f702 <zsock_accept_ctx+0x86>
		errno = ECONNABORTED;
    f6ee:	f013 fc59 	bl	22fa4 <__errno>
    f6f2:	2371      	movs	r3, #113	; 0x71
    f6f4:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
    f6f6:	4620      	mov	r0, r4
    f6f8:	f7ff fca2 	bl	f040 <z_free_fd>
		return -1;
    f6fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    f700:	e01b      	b.n	f73a <zsock_accept_ctx+0xbe>
		context->flags &= ~NET_CONTEXT_ACCEPTING_SOCK;
    f702:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    f706:	f8a5 3086 	strh.w	r3, [r5, #134]	; 0x86
	if (addr != NULL && addrlen != NULL) {
    f70a:	b177      	cbz	r7, f72a <zsock_accept_ctx+0xae>
    f70c:	b16e      	cbz	r6, f72a <zsock_accept_ctx+0xae>
		int len = MIN(*addrlen, sizeof(ctx->remote));
    f70e:	6832      	ldr	r2, [r6, #0]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    f710:	4638      	mov	r0, r7
    f712:	2a18      	cmp	r2, #24
    f714:	bf28      	it	cs
    f716:	2218      	movcs	r2, #24
    f718:	f105 0128 	add.w	r1, r5, #40	; 0x28
    f71c:	f018 f913 	bl	27946 <memcpy>
		if (ctx->remote.sa_family == AF_INET) {
    f720:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    f722:	2b01      	cmp	r3, #1
    f724:	d10c      	bne.n	f740 <zsock_accept_ctx+0xc4>
			*addrlen = sizeof(struct sockaddr_in);
    f726:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
    f728:	6033      	str	r3, [r6, #0]
	 * connection, but it must not dispose of the context behind
	 * the application back. Likewise, when application "closes"
	 * context, it's not disposed of immediately - there's yet
	 * closing handshake for stack to perform.
	 */
	net_context_ref(ctx);
    f72a:	4628      	mov	r0, r5
    f72c:	f014 fa69 	bl	23c02 <net_context_ref>

	NET_DBG("accept: ctx=%p, fd=%d", ctx, fd);

	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
    f730:	4629      	mov	r1, r5
    f732:	4620      	mov	r0, r4
    f734:	4a08      	ldr	r2, [pc, #32]	; (f758 <zsock_accept_ctx+0xdc>)
    f736:	f7ff fc79 	bl	f02c <z_finalize_fd>

	return fd;
}
    f73a:	4620      	mov	r0, r4
    f73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ctx->remote.sa_family == AF_INET6) {
    f740:	2b02      	cmp	r3, #2
    f742:	d101      	bne.n	f748 <zsock_accept_ctx+0xcc>
			*addrlen = sizeof(struct sockaddr_in6);
    f744:	2318      	movs	r3, #24
    f746:	e7ef      	b.n	f728 <zsock_accept_ctx+0xac>
			z_free_fd(fd);
    f748:	4620      	mov	r0, r4
    f74a:	f7ff fc79 	bl	f040 <z_free_fd>
			errno = ENOTSUP;
    f74e:	f013 fc29 	bl	22fa4 <__errno>
    f752:	2386      	movs	r3, #134	; 0x86
    f754:	e7b1      	b.n	f6ba <zsock_accept_ctx+0x3e>
    f756:	bf00      	nop
    f758:	00028908 	.word	0x00028908

0000f75c <zsock_sendto_ctx>:
#endif /* CONFIG_USERSPACE */

ssize_t zsock_sendto_ctx(struct net_context *ctx, const void *buf, size_t len,
			 int flags,
			 const struct sockaddr *dest_addr, socklen_t addrlen)
{
    f75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f760:	4691      	mov	r9, r2
    f762:	b086      	sub	sp, #24
	k_timeout_t timeout = K_FOREVER;
	int status;

	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
    f764:	065a      	lsls	r2, r3, #25
{
    f766:	4604      	mov	r4, r0
    f768:	4688      	mov	r8, r1
	k_timeout_t timeout = K_FOREVER;
    f76a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    f76e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
{
    f772:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
    f776:	d402      	bmi.n	f77e <zsock_sendto_ctx+0x22>
}

static inline uintptr_t sock_get_flag(struct net_context *ctx, uintptr_t mask)
{
	return POINTER_TO_UINT(ctx->socket_data) & mask;
    f778:	6e83      	ldr	r3, [r0, #104]	; 0x68
    f77a:	079b      	lsls	r3, r3, #30
    f77c:	d501      	bpl.n	f782 <zsock_sendto_ctx+0x26>
		timeout = K_NO_WAIT;
    f77e:	2600      	movs	r6, #0
    f780:	2700      	movs	r7, #0
	}

	/* Register the callback before sending in order to receive the response
	 * from the peer.
	 */
	status = net_context_recv(ctx, zsock_received_cb,
    f782:	6823      	ldr	r3, [r4, #0]
    f784:	2200      	movs	r2, #0
    f786:	9300      	str	r3, [sp, #0]
    f788:	4620      	mov	r0, r4
    f78a:	2300      	movs	r3, #0
    f78c:	4918      	ldr	r1, [pc, #96]	; (f7f0 <zsock_sendto_ctx+0x94>)
    f78e:	f002 f891 	bl	118b4 <net_context_recv>
				  K_NO_WAIT, ctx->user_data);
	if (status < 0) {
    f792:	1e05      	subs	r5, r0, #0
    f794:	da09      	bge.n	f7aa <zsock_sendto_ctx+0x4e>
		errno = -status;
    f796:	f013 fc05 	bl	22fa4 <__errno>
    f79a:	426d      	negs	r5, r5
    f79c:	6005      	str	r5, [r0, #0]
					  ctx->user_data);
	}

	if (status < 0) {
		errno = -status;
		return -1;
    f79e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	}

	return status;
}
    f7a2:	4620      	mov	r0, r4
    f7a4:	b006      	add	sp, #24
    f7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (dest_addr) {
    f7aa:	6823      	ldr	r3, [r4, #0]
    f7ac:	f1ba 0f00 	cmp.w	sl, #0
    f7b0:	d014      	beq.n	f7dc <zsock_sendto_ctx+0x80>
		status = net_context_sendto(ctx, buf, len, dest_addr,
    f7b2:	9304      	str	r3, [sp, #16]
    f7b4:	2300      	movs	r3, #0
    f7b6:	9301      	str	r3, [sp, #4]
    f7b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f7ba:	464a      	mov	r2, r9
    f7bc:	9300      	str	r3, [sp, #0]
    f7be:	4641      	mov	r1, r8
    f7c0:	4653      	mov	r3, sl
    f7c2:	4620      	mov	r0, r4
    f7c4:	e9cd 6702 	strd	r6, r7, [sp, #8]
    f7c8:	f014 fcc4 	bl	24154 <net_context_sendto>
	if (status < 0) {
    f7cc:	2800      	cmp	r0, #0
		status = net_context_send(ctx, buf, len, NULL, timeout,
    f7ce:	4604      	mov	r4, r0
	if (status < 0) {
    f7d0:	dae7      	bge.n	f7a2 <zsock_sendto_ctx+0x46>
		errno = -status;
    f7d2:	f013 fbe7 	bl	22fa4 <__errno>
    f7d6:	4264      	negs	r4, r4
    f7d8:	6004      	str	r4, [r0, #0]
    f7da:	e7e0      	b.n	f79e <zsock_sendto_ctx+0x42>
		status = net_context_send(ctx, buf, len, NULL, timeout,
    f7dc:	9302      	str	r3, [sp, #8]
    f7de:	464a      	mov	r2, r9
    f7e0:	4653      	mov	r3, sl
    f7e2:	4641      	mov	r1, r8
    f7e4:	4620      	mov	r0, r4
    f7e6:	e9cd 6700 	strd	r6, r7, [sp]
    f7ea:	f014 fc60 	bl	240ae <net_context_send>
    f7ee:	e7ed      	b.n	f7cc <zsock_sendto_ctx+0x70>
    f7f0:	00022855 	.word	0x00022855

0000f7f4 <sock_ioctl_vmeth>:
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
}

static int sock_ioctl_vmeth(void *obj, unsigned int request, va_list args)
{
	switch (request) {
    f7f4:	f5b1 7f83 	cmp.w	r1, #262	; 0x106
{
    f7f8:	b538      	push	{r3, r4, r5, lr}
    f7fa:	4613      	mov	r3, r2
	switch (request) {
    f7fc:	d805      	bhi.n	f80a <sock_ioctl_vmeth+0x16>
    f7fe:	29ff      	cmp	r1, #255	; 0xff
    f800:	d80a      	bhi.n	f818 <sock_ioctl_vmeth+0x24>
    f802:	2903      	cmp	r1, #3
    f804:	d01e      	beq.n	f844 <sock_ioctl_vmeth+0x50>
    f806:	2904      	cmp	r1, #4
    f808:	d022      	beq.n	f850 <sock_ioctl_vmeth+0x5c>

		return zsock_getsockname_ctx(obj, addr, addrlen);
	}

	default:
		errno = EOPNOTSUPP;
    f80a:	f013 fbcb 	bl	22fa4 <__errno>
    f80e:	235f      	movs	r3, #95	; 0x5f
    f810:	6003      	str	r3, [r0, #0]
		return -1;
    f812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f816:	e019      	b.n	f84c <sock_ioctl_vmeth+0x58>
    f818:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
    f81c:	2906      	cmp	r1, #6
    f81e:	d8f4      	bhi.n	f80a <sock_ioctl_vmeth+0x16>
    f820:	a201      	add	r2, pc, #4	; (adr r2, f828 <sock_ioctl_vmeth+0x34>)
    f822:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
    f826:	bf00      	nop
    f828:	0000f86b 	.word	0x0000f86b
    f82c:	0000f80b 	.word	0x0000f80b
    f830:	0000f80b 	.word	0x0000f80b
    f834:	0000f873 	.word	0x0000f873
    f838:	0000f8c1 	.word	0x0000f8c1
    f83c:	0000f80b 	.word	0x0000f80b
    f840:	0000f8f5 	.word	0x0000f8f5
    f844:	6e83      	ldr	r3, [r0, #104]	; 0x68
		if (sock_is_nonblock(obj)) {
    f846:	079d      	lsls	r5, r3, #30
    f848:	d45a      	bmi.n	f900 <sock_ioctl_vmeth+0x10c>
		return 0;
    f84a:	2300      	movs	r3, #0
	}
}
    f84c:	4618      	mov	r0, r3
    f84e:	bd38      	pop	{r3, r4, r5, pc}
		if (flags & O_NONBLOCK) {
    f850:	6813      	ldr	r3, [r2, #0]
    f852:	6e82      	ldr	r2, [r0, #104]	; 0x68
    f854:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    f858:	f022 0202 	bic.w	r2, r2, #2
    f85c:	d003      	beq.n	f866 <sock_ioctl_vmeth+0x72>
	val = (val & ~mask) | flag;
    f85e:	f042 0202 	orr.w	r2, r2, #2
	(ctx)->socket_data = UINT_TO_POINTER(val);
    f862:	6682      	str	r2, [r0, #104]	; 0x68
    f864:	e7f1      	b.n	f84a <sock_ioctl_vmeth+0x56>
    f866:	6682      	str	r2, [r0, #104]	; 0x68
}
    f868:	e7f0      	b.n	f84c <sock_ioctl_vmeth+0x58>
}
    f86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return zsock_close_ctx(obj);
    f86e:	f013 b824 	b.w	228ba <zsock_close_ctx>
		return zsock_poll_prepare_ctx(obj, pfd, pev, pev_end);
    f872:	681a      	ldr	r2, [r3, #0]
	if (pfd->events & ZSOCK_POLLIN) {
    f874:	8891      	ldrh	r1, [r2, #4]
    f876:	07cc      	lsls	r4, r1, #31
    f878:	d51a      	bpl.n	f8b0 <sock_ioctl_vmeth+0xbc>
		pev = va_arg(args, struct k_poll_event **);
    f87a:	685a      	ldr	r2, [r3, #4]
		if (*pev == pev_end) {
    f87c:	689b      	ldr	r3, [r3, #8]
    f87e:	6814      	ldr	r4, [r2, #0]
    f880:	42a3      	cmp	r3, r4
    f882:	d040      	beq.n	f906 <sock_ioctl_vmeth+0x112>
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
    f884:	2504      	movs	r5, #4
		(*pev)->obj = &ctx->recv_q;
    f886:	f100 036c 	add.w	r3, r0, #108	; 0x6c
    f88a:	6123      	str	r3, [r4, #16]
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
    f88c:	6813      	ldr	r3, [r2, #0]
    f88e:	7b5c      	ldrb	r4, [r3, #13]
    f890:	f365 0403 	bfi	r4, r5, #0, #4
    f894:	735c      	strb	r4, [r3, #13]
		(*pev)->mode = K_POLL_MODE_NOTIFY_ONLY;
    f896:	6813      	ldr	r3, [r2, #0]
    f898:	7b9c      	ldrb	r4, [r3, #14]
    f89a:	f36f 0441 	bfc	r4, #1, #1
    f89e:	739c      	strb	r4, [r3, #14]
		(*pev)->state = K_POLL_STATE_NOT_READY;
    f8a0:	6813      	ldr	r3, [r2, #0]
    f8a2:	68dc      	ldr	r4, [r3, #12]
    f8a4:	f36f 3410 	bfc	r4, #12, #5
    f8a8:	60dc      	str	r4, [r3, #12]
		(*pev)++;
    f8aa:	6813      	ldr	r3, [r2, #0]
    f8ac:	3314      	adds	r3, #20
    f8ae:	6013      	str	r3, [r2, #0]
	if (pfd->events & ZSOCK_POLLOUT) {
    f8b0:	0749      	lsls	r1, r1, #29
    f8b2:	d402      	bmi.n	f8ba <sock_ioctl_vmeth+0xc6>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
    f8b4:	6e83      	ldr	r3, [r0, #104]	; 0x68
	if (sock_is_eof(ctx)) {
    f8b6:	07da      	lsls	r2, r3, #31
    f8b8:	d5c7      	bpl.n	f84a <sock_ioctl_vmeth+0x56>
		return -EALREADY;
    f8ba:	f06f 0377 	mvn.w	r3, #119	; 0x77
    f8be:	e7c5      	b.n	f84c <sock_ioctl_vmeth+0x58>
		pev = va_arg(args, struct k_poll_event **);
    f8c0:	e9d3 2400 	ldrd	r2, r4, [r3]
	if (pfd->events & ZSOCK_POLLOUT) {
    f8c4:	8891      	ldrh	r1, [r2, #4]
    f8c6:	074b      	lsls	r3, r1, #29
		pfd->revents |= ZSOCK_POLLOUT;
    f8c8:	bf42      	ittt	mi
    f8ca:	88d3      	ldrhmi	r3, [r2, #6]
    f8cc:	f043 0304 	orrmi.w	r3, r3, #4
    f8d0:	80d3      	strhmi	r3, [r2, #6]
	if (pfd->events & ZSOCK_POLLIN) {
    f8d2:	07cd      	lsls	r5, r1, #31
    f8d4:	d5b9      	bpl.n	f84a <sock_ioctl_vmeth+0x56>
		if ((*pev)->state != K_POLL_STATE_NOT_READY || sock_is_eof(ctx)) {
    f8d6:	6823      	ldr	r3, [r4, #0]
    f8d8:	68d9      	ldr	r1, [r3, #12]
    f8da:	f411 3ff8 	tst.w	r1, #126976	; 0x1f000
    f8de:	d102      	bne.n	f8e6 <sock_ioctl_vmeth+0xf2>
    f8e0:	6e81      	ldr	r1, [r0, #104]	; 0x68
    f8e2:	07c9      	lsls	r1, r1, #31
    f8e4:	d503      	bpl.n	f8ee <sock_ioctl_vmeth+0xfa>
			pfd->revents |= ZSOCK_POLLIN;
    f8e6:	88d1      	ldrh	r1, [r2, #6]
    f8e8:	f041 0101 	orr.w	r1, r1, #1
    f8ec:	80d1      	strh	r1, [r2, #6]
		(*pev)++;
    f8ee:	3314      	adds	r3, #20
    f8f0:	6023      	str	r3, [r4, #0]
    f8f2:	e7aa      	b.n	f84a <sock_ioctl_vmeth+0x56>
		return zsock_getsockname_ctx(obj, addr, addrlen);
    f8f4:	e9d3 1200 	ldrd	r1, r2, [r3]
}
    f8f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return zsock_getsockname_ctx(obj, addr, addrlen);
    f8fc:	f013 ba5f 	b.w	22dbe <zsock_getsockname_ctx>
		    return O_NONBLOCK;
    f900:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    f904:	e7a2      	b.n	f84c <sock_ioctl_vmeth+0x58>
			return -ENOMEM;
    f906:	f06f 030b 	mvn.w	r3, #11
    f90a:	e79f      	b.n	f84c <sock_ioctl_vmeth+0x58>

0000f90c <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
    f90c:	4b01      	ldr	r3, [pc, #4]	; (f914 <socket_offload_dns_register+0x8>)
    f90e:	6018      	str	r0, [r3, #0]
}
    f910:	4770      	bx	lr
    f912:	bf00      	nop
    f914:	20022548 	.word	0x20022548

0000f918 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
    f918:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
    f91a:	4c03      	ldr	r4, [pc, #12]	; (f928 <socket_offload_getaddrinfo+0x10>)
    f91c:	6824      	ldr	r4, [r4, #0]
    f91e:	6824      	ldr	r4, [r4, #0]
    f920:	46a4      	mov	ip, r4
}
    f922:	f85d 4b04 	ldr.w	r4, [sp], #4
	return dns_offload->getaddrinfo(node, service, hints, res);
    f926:	4760      	bx	ip
    f928:	20022548 	.word	0x20022548

0000f92c <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
    f92c:	4b01      	ldr	r3, [pc, #4]	; (f934 <socket_offload_freeaddrinfo+0x8>)
    f92e:	681b      	ldr	r3, [r3, #0]
    f930:	685b      	ldr	r3, [r3, #4]
    f932:	4718      	bx	r3
    f934:	20022548 	.word	0x20022548

0000f938 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    f938:	b507      	push	{r0, r1, r2, lr}
    f93a:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
    f93c:	f04f 0220 	mov.w	r2, #32
    f940:	f3ef 8311 	mrs	r3, BASEPRI
    f944:	f382 8811 	msr	BASEPRI, r2
    f948:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    f94c:	f013 facd 	bl	22eea <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    f950:	9801      	ldr	r0, [sp, #4]
    f952:	f000 fccd 	bl	102f0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    f956:	4803      	ldr	r0, [pc, #12]	; (f964 <sys_reboot+0x2c>)
    f958:	f012 fcae 	bl	222b8 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    f95c:	f000 fb8e 	bl	1007c <arch_cpu_idle>
    f960:	e7fc      	b.n	f95c <sys_reboot+0x24>
    f962:	bf00      	nop
    f964:	0002926a 	.word	0x0002926a

0000f968 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    f968:	b508      	push	{r3, lr}
    f96a:	4806      	ldr	r0, [pc, #24]	; (f984 <uart_console_init+0x1c>)
    f96c:	f00e f9be 	bl	1dcec <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    f970:	4b05      	ldr	r3, [pc, #20]	; (f988 <uart_console_init+0x20>)
    f972:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    f974:	4805      	ldr	r0, [pc, #20]	; (f98c <uart_console_init+0x24>)
    f976:	f000 fe77 	bl	10668 <__stdout_hook_install>
	__printk_hook_install(console_out);
    f97a:	4804      	ldr	r0, [pc, #16]	; (f98c <uart_console_init+0x24>)
    f97c:	f7ff fbc4 	bl	f108 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
    f980:	2000      	movs	r0, #0
    f982:	bd08      	pop	{r3, pc}
    f984:	00029293 	.word	0x00029293
    f988:	2002254c 	.word	0x2002254c
    f98c:	0000f991 	.word	0x0000f991

0000f990 <console_out>:
	if ('\n' == c) {
    f990:	280a      	cmp	r0, #10
{
    f992:	b538      	push	{r3, r4, r5, lr}
    f994:	4604      	mov	r4, r0
    f996:	4d07      	ldr	r5, [pc, #28]	; (f9b4 <console_out+0x24>)
	if ('\n' == c) {
    f998:	d104      	bne.n	f9a4 <console_out+0x14>
    f99a:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    f99c:	6883      	ldr	r3, [r0, #8]
    f99e:	210d      	movs	r1, #13
    f9a0:	685b      	ldr	r3, [r3, #4]
    f9a2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    f9a4:	6828      	ldr	r0, [r5, #0]
    f9a6:	6883      	ldr	r3, [r0, #8]
    f9a8:	b2e1      	uxtb	r1, r4
    f9aa:	685b      	ldr	r3, [r3, #4]
    f9ac:	4798      	blx	r3
}
    f9ae:	4620      	mov	r0, r4
    f9b0:	bd38      	pop	{r3, r4, r5, pc}
    f9b2:	bf00      	nop
    f9b4:	2002254c 	.word	0x2002254c

0000f9b8 <clock_async_start>:
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
    f9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct nrf_clock_control_sub_data *clk_data;
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
	config = get_sub_config(dev, type);
    f9bc:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
    f9be:	f8d0 e00c 	ldr.w	lr, [r0, #12]
    f9c2:	b2cf      	uxtb	r7, r1
			((data != NULL) && (data->cb != NULL)));

	/* if node is in the list it means that it is scheduled for
	 * the second time.
	 */
	if ((data != NULL)
    f9c4:	b14a      	cbz	r2, f9da <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
    f9c6:	230c      	movs	r3, #12
    f9c8:	437b      	muls	r3, r7
    f9ca:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
    f9ce:	429a      	cmp	r2, r3
    f9d0:	d053      	beq.n	fa7a <clock_async_start+0xc2>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    f9d2:	b113      	cbz	r3, f9da <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f9d4:	681b      	ldr	r3, [r3, #0]
	} while (item);
    f9d6:	2b00      	cmp	r3, #0
    f9d8:	d1f9      	bne.n	f9ce <clock_async_start+0x16>
    f9da:	f04f 0320 	mov.w	r3, #32
    f9de:	f3ef 8c11 	mrs	ip, BASEPRI
    f9e2:	f383 8811 	msr	BASEPRI, r3
    f9e6:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
    f9ea:	250c      	movs	r5, #12
    f9ec:	437d      	muls	r5, r7
    f9ee:	eb0e 0305 	add.w	r3, lr, r5
    f9f2:	7a1c      	ldrb	r4, [r3, #8]
    f9f4:	3401      	adds	r4, #1
    f9f6:	b2e4      	uxtb	r4, r4
    f9f8:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    f9fa:	f38c 8811 	msr	BASEPRI, ip
    f9fe:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(clk_data->ref > 0);
	irq_unlock(key);

	if (data) {
    fa02:	b352      	cbz	r2, fa5a <clock_async_start+0xa2>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    fa04:	f04f 0803 	mov.w	r8, #3
    fa08:	f8df c078 	ldr.w	ip, [pc, #120]	; fa84 <clock_async_start+0xcc>
    fa0c:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
    fa10:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
    fa14:	f1bc 0f00 	cmp.w	ip, #0
    fa18:	d115      	bne.n	fa46 <clock_async_start+0x8e>
	__asm__ volatile(
    fa1a:	f04f 0820 	mov.w	r8, #32
    fa1e:	f3ef 8911 	mrs	r9, BASEPRI
    fa22:	f388 8811 	msr	BASEPRI, r8
    fa26:	f3bf 8f6f 	isb	sy
	parent->next = child;
    fa2a:	f8c2 c000 	str.w	ip, [r2]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    fa2e:	f8d3 8004 	ldr.w	r8, [r3, #4]
    fa32:	f1b8 0f00 	cmp.w	r8, #0
    fa36:	d11c      	bne.n	fa72 <clock_async_start+0xba>
	list->tail = node;
    fa38:	605a      	str	r2, [r3, #4]
	list->head = node;
    fa3a:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
    fa3e:	f389 8811 	msr	BASEPRI, r9
    fa42:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    fa46:	2503      	movs	r5, #3
    fa48:	4b0e      	ldr	r3, [pc, #56]	; (fa84 <clock_async_start+0xcc>)
    fa4a:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
    fa4e:	f1bc 0f00 	cmp.w	ip, #0
    fa52:	d002      	beq.n	fa5a <clock_async_start+0xa2>
			data->cb(dev, subsys, data->user_data);
    fa54:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
    fa58:	4798      	blx	r3
		}
	}

	if (ref == 1) {
    fa5a:	2c01      	cmp	r4, #1
    fa5c:	d107      	bne.n	fa6e <clock_async_start+0xb6>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			(subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
			anomaly_132_workaround();
		}

		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    fa5e:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fa62:	78b3      	ldrb	r3, [r6, #2]
    fa64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    fa68:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    fa6c:	601c      	str	r4, [r3, #0]
	}

	return 0;
    fa6e:	2000      	movs	r0, #0
    fa70:	e005      	b.n	fa7e <clock_async_start+0xc6>
	parent->next = child;
    fa72:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
    fa76:	605a      	str	r2, [r3, #4]
}
    fa78:	e7e1      	b.n	fa3e <clock_async_start+0x86>
		return -EBUSY;
    fa7a:	f06f 000f 	mvn.w	r0, #15
}
    fa7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fa82:	bf00      	nop
    fa84:	40005000 	.word	0x40005000

0000fa88 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
    fa88:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    fa8a:	2200      	movs	r2, #0
{
    fa8c:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    fa8e:	2101      	movs	r1, #1
    fa90:	2005      	movs	r0, #5
    fa92:	f000 f9ef 	bl	fe74 <z_arm_irq_priority_set>
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_IRQN(0));
    fa96:	2005      	movs	r0, #5
    fa98:	f000 f9dc 	bl	fe54 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    fa9c:	2202      	movs	r2, #2
    fa9e:	4b07      	ldr	r3, [pc, #28]	; (fabc <clk_init+0x34>)
	list->head = NULL;
    faa0:	2000      	movs	r0, #0
    faa2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    faa6:	2203      	movs	r2, #3
    faa8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
    faac:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
    faae:	e9c3 0000 	strd	r0, r0, [r3]
    fab2:	68e3      	ldr	r3, [r4, #12]
    fab4:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
    fab8:	bd10      	pop	{r4, pc}
    faba:	bf00      	nop
    fabc:	40005000 	.word	0x40005000

0000fac0 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    fac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    fac2:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    fac4:	4f11      	ldr	r7, [pc, #68]	; (fb0c <clkstarted_handle.constprop.0+0x4c>)
static void clkstarted_handle(struct device *dev,
    fac6:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    fac8:	68fb      	ldr	r3, [r7, #12]
	sub_data->started = true;
    faca:	fb04 3400 	mla	r4, r4, r0, r3
    face:	2301      	movs	r3, #1
    fad0:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    fad2:	f04f 0320 	mov.w	r3, #32
    fad6:	f3ef 8111 	mrs	r1, BASEPRI
    fada:	f383 8811 	msr	BASEPRI, r3
    fade:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    fae2:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    fae4:	b12b      	cbz	r3, faf2 <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fae6:	6866      	ldr	r6, [r4, #4]
    fae8:	681a      	ldr	r2, [r3, #0]
    faea:	42b3      	cmp	r3, r6
	list->head = node;
    faec:	6022      	str	r2, [r4, #0]
	list->tail = node;
    faee:	bf08      	it	eq
    faf0:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    faf2:	f381 8811 	msr	BASEPRI, r1
    faf6:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    fafa:	b903      	cbnz	r3, fafe <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    fafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    fafe:	4629      	mov	r1, r5
    fb00:	e9d3 6201 	ldrd	r6, r2, [r3, #4]
    fb04:	4638      	mov	r0, r7
    fb06:	47b0      	blx	r6
    fb08:	e7e3      	b.n	fad2 <clkstarted_handle.constprop.0+0x12>
    fb0a:	bf00      	nop
    fb0c:	200207bc 	.word	0x200207bc

0000fb10 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    fb10:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    fb12:	4b10      	ldr	r3, [pc, #64]	; (fb54 <nrf_power_clock_isr+0x44>)
    fb14:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    fb16:	b162      	cbz	r2, fb32 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    fb18:	4a0f      	ldr	r2, [pc, #60]	; (fb58 <nrf_power_clock_isr+0x48>)
    fb1a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    fb1e:	07d1      	lsls	r1, r2, #31
    fb20:	d507      	bpl.n	fb32 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fb22:	2200      	movs	r2, #0
    fb24:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    fb26:	4b0d      	ldr	r3, [pc, #52]	; (fb5c <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    fb28:	68db      	ldr	r3, [r3, #12]
    fb2a:	7a58      	ldrb	r0, [r3, #9]
    fb2c:	b908      	cbnz	r0, fb32 <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    fb2e:	f7ff ffc7 	bl	fac0 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    fb32:	4b0b      	ldr	r3, [pc, #44]	; (fb60 <nrf_power_clock_isr+0x50>)
    fb34:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    fb36:	b15a      	cbz	r2, fb50 <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
    fb38:	4a07      	ldr	r2, [pc, #28]	; (fb58 <nrf_power_clock_isr+0x48>)
    fb3a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    fb3e:	0792      	lsls	r2, r2, #30
    fb40:	d506      	bpl.n	fb50 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fb42:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    fb44:	2001      	movs	r0, #1
    fb46:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    fb48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    fb4c:	f7ff bfb8 	b.w	fac0 <clkstarted_handle.constprop.0>
}
    fb50:	bd08      	pop	{r3, pc}
    fb52:	bf00      	nop
    fb54:	40005100 	.word	0x40005100
    fb58:	40005000 	.word	0x40005000
    fb5c:	200207bc 	.word	0x200207bc
    fb60:	40005104 	.word	0x40005104

0000fb64 <wdt_nrf_install_timeout>:
	return -EPERM;
}

static int wdt_nrf_install_timeout(struct device *dev,
				   const struct wdt_timeout_cfg *cfg)
{
    fb64:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrfx_err_t err_code;
	nrfx_wdt_channel_id channel_id;

	if (cfg->flags != WDT_FLAG_RESET_SOC) {
    fb66:	7b0b      	ldrb	r3, [r1, #12]
{
    fb68:	4604      	mov	r4, r0
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
    fb6a:	2b02      	cmp	r3, #2
{
    fb6c:	460d      	mov	r5, r1
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
    fb6e:	d128      	bne.n	fbc2 <wdt_nrf_install_timeout+0x5e>
		return -ENOTSUP;
	}

	if (cfg->window.min != 0U) {
    fb70:	680b      	ldr	r3, [r1, #0]
    fb72:	bb1b      	cbnz	r3, fbbc <wdt_nrf_install_timeout+0x58>
		return -EINVAL;
	}

	if (get_dev_data(dev)->m_allocated_channels == 0U) {
    fb74:	68c2      	ldr	r2, [r0, #12]
	return dev->driver_data;
    fb76:	684b      	ldr	r3, [r1, #4]
	if (get_dev_data(dev)->m_allocated_channels == 0U) {
    fb78:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
    fb7c:	b9d9      	cbnz	r1, fbb6 <wdt_nrf_install_timeout+0x52>
		 * in all nRF chips can use reload values (determining
		 * the timeout) from range 0xF-0xFFFFFFFF given in 32768 Hz
		 * clock ticks. This makes the allowed range of 0x1-0x07CFFFFF
		 * in milliseconds. Check if the provided value is within
		 * this range. */
		if ((cfg->window.max == 0U) || (cfg->window.max > 0x07CFFFFF)) {
    fb7e:	4914      	ldr	r1, [pc, #80]	; (fbd0 <wdt_nrf_install_timeout+0x6c>)
    fb80:	1e58      	subs	r0, r3, #1
    fb82:	4288      	cmp	r0, r1
    fb84:	d81a      	bhi.n	fbbc <wdt_nrf_install_timeout+0x58>
			return -EINVAL;
		}

		/* Save timeout value from first registered watchdog channel. */
		get_dev_data(dev)->m_timeout = cfg->window.max;
    fb86:	6213      	str	r3, [r2, #32]
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
		return -EINVAL;
	}

	err_code = nrfx_wdt_channel_alloc(&get_dev_config(dev)->wdt,
    fb88:	6860      	ldr	r0, [r4, #4]
    fb8a:	f10d 0107 	add.w	r1, sp, #7
    fb8e:	f00e f855 	bl	1dc3c <nrfx_wdt_channel_alloc>
					  &channel_id);

	if (err_code == NRFX_ERROR_NO_MEM) {
    fb92:	4b10      	ldr	r3, [pc, #64]	; (fbd4 <wdt_nrf_install_timeout+0x70>)
    fb94:	4298      	cmp	r0, r3
    fb96:	d017      	beq.n	fbc8 <wdt_nrf_install_timeout+0x64>
		return -ENOMEM;
	}

	if (cfg->callback != NULL) {
    fb98:	68ab      	ldr	r3, [r5, #8]
    fb9a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    fb9e:	b113      	cbz	r3, fba6 <wdt_nrf_install_timeout+0x42>
    fba0:	68e2      	ldr	r2, [r4, #12]
		get_dev_data(dev)->m_callbacks[channel_id] = cfg->callback;
    fba2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}

	get_dev_data(dev)->m_allocated_channels++;
    fba6:	68e2      	ldr	r2, [r4, #12]
    fba8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    fbac:	3301      	adds	r3, #1
    fbae:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return channel_id;
}
    fbb2:	b003      	add	sp, #12
    fbb4:	bd30      	pop	{r4, r5, pc}
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
    fbb6:	6a12      	ldr	r2, [r2, #32]
    fbb8:	429a      	cmp	r2, r3
    fbba:	d0e5      	beq.n	fb88 <wdt_nrf_install_timeout+0x24>
		return -EINVAL;
    fbbc:	f06f 0015 	mvn.w	r0, #21
    fbc0:	e7f7      	b.n	fbb2 <wdt_nrf_install_timeout+0x4e>
		return -ENOTSUP;
    fbc2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    fbc6:	e7f4      	b.n	fbb2 <wdt_nrf_install_timeout+0x4e>
		return -ENOMEM;
    fbc8:	f06f 000b 	mvn.w	r0, #11
    fbcc:	e7f1      	b.n	fbb2 <wdt_nrf_install_timeout+0x4e>
    fbce:	bf00      	nop
    fbd0:	07cffffe 	.word	0x07cffffe
    fbd4:	0bad0002 	.word	0x0bad0002

0000fbd8 <wdt_0_init>:
			    &wdt_##idx##z_config,			       \
			    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,  \
			    &wdt_nrfx_driver_api)

#ifdef CONFIG_NRFX_WDT0
WDT_NRFX_WDT_DEVICE(0);
    fbd8:	b510      	push	{r4, lr}
    fbda:	4604      	mov	r4, r0
    fbdc:	2200      	movs	r2, #0
    fbde:	2101      	movs	r1, #1
    fbe0:	2018      	movs	r0, #24
    fbe2:	f000 f947 	bl	fe74 <z_arm_irq_priority_set>
    fbe6:	6860      	ldr	r0, [r4, #4]
    fbe8:	4a05      	ldr	r2, [pc, #20]	; (fc00 <wdt_0_init+0x28>)
    fbea:	f100 0108 	add.w	r1, r0, #8
    fbee:	f00d ffed 	bl	1dbcc <nrfx_wdt_init>
    fbf2:	4b04      	ldr	r3, [pc, #16]	; (fc04 <wdt_0_init+0x2c>)
    fbf4:	4298      	cmp	r0, r3
    fbf6:	bf14      	ite	ne
    fbf8:	f06f 000f 	mvnne.w	r0, #15
    fbfc:	2000      	moveq	r0, #0
    fbfe:	bd10      	pop	{r4, pc}
    fc00:	0000fc09 	.word	0x0000fc09
    fc04:	0bad0000 	.word	0x0bad0000

0000fc08 <wdt_0_event_handler>:
    fc08:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
    fc0a:	2400      	movs	r4, #0
    fc0c:	4d0a      	ldr	r5, [pc, #40]	; (fc38 <wdt_0_event_handler+0x30>)
    fc0e:	68ea      	ldr	r2, [r5, #12]
    fc10:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    fc14:	429c      	cmp	r4, r3
    fc16:	db00      	blt.n	fc1a <wdt_0_event_handler+0x12>
WDT_NRFX_WDT_DEVICE(0);
    fc18:	bd38      	pop	{r3, r4, r5, pc}
		if (nrf_wdt_request_status(get_dev_config(dev)->wdt.p_reg,
    fc1a:	686b      	ldr	r3, [r5, #4]
    fc1c:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE bool nrf_wdt_request_status(NRF_WDT_Type const *  p_reg,
                                              nrf_wdt_rr_register_t rr_register)
{
    return (bool)(((p_reg->REQSTATUS) >> rr_register) & 0x1UL);
    fc1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
    fc22:	40e3      	lsrs	r3, r4
    fc24:	07db      	lsls	r3, r3, #31
    fc26:	d505      	bpl.n	fc34 <wdt_0_event_handler+0x2c>
			if (get_dev_data(dev)->m_callbacks[i]) {
    fc28:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    fc2c:	b113      	cbz	r3, fc34 <wdt_0_event_handler+0x2c>
				get_dev_data(dev)->m_callbacks[i](dev, i);
    fc2e:	4621      	mov	r1, r4
    fc30:	4628      	mov	r0, r5
    fc32:	4798      	blx	r3
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
    fc34:	3401      	adds	r4, #1
    fc36:	e7ea      	b.n	fc0e <wdt_0_event_handler+0x6>
    fc38:	200207cc 	.word	0x200207cc

0000fc3c <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
    fc3c:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    fc3e:	4b08      	ldr	r3, [pc, #32]	; (fc60 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    fc40:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    fc44:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    fc48:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    fc4c:	4290      	cmp	r0, r2
    fc4e:	d100      	bne.n	fc52 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    fc50:	4770      	bx	lr
    fc52:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    fc56:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    fc58:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    fc5c:	e7f2      	b.n	fc44 <handle_next_tick_case+0x8>
    fc5e:	bf00      	nop
    fc60:	40015000 	.word	0x40015000

0000fc64 <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    fc64:	2200      	movs	r2, #0
    fc66:	4b06      	ldr	r3, [pc, #24]	; (fc80 <rtc1_nrf_isr+0x1c>)
    fc68:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    fc6a:	4a06      	ldr	r2, [pc, #24]	; (fc84 <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
    fc6c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
    fc70:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    fc72:	1ac0      	subs	r0, r0, r3
    fc74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    fc78:	4403      	add	r3, r0
    fc7a:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    fc7c:	f00f b93a 	b.w	1eef4 <z_clock_announce>
    fc80:	40015140 	.word	0x40015140
    fc84:	20022590 	.word	0x20022590

0000fc88 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    fc88:	b538      	push	{r3, r4, r5, lr}
    fc8a:	4814      	ldr	r0, [pc, #80]	; (fcdc <z_clock_driver_init+0x54>)
    fc8c:	f00e f82e 	bl	1dcec <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
    fc90:	b300      	cbz	r0, fcd4 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    fc92:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    fc94:	2400      	movs	r4, #0
    fc96:	2101      	movs	r1, #1
    fc98:	681b      	ldr	r3, [r3, #0]
    fc9a:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fc9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    fca0:	4d0f      	ldr	r5, [pc, #60]	; (fce0 <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    fca2:	4b10      	ldr	r3, [pc, #64]	; (fce4 <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
    fca4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    fca8:	601c      	str	r4, [r3, #0]
    fcaa:	4b0f      	ldr	r3, [pc, #60]	; (fce8 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    fcac:	2101      	movs	r1, #1
    fcae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    fcb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    fcb6:	4622      	mov	r2, r4
    fcb8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    fcbc:	2015      	movs	r0, #21
    fcbe:	f000 f8d9 	bl	fe74 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    fcc2:	2015      	movs	r0, #21
    fcc4:	f000 f8c6 	bl	fe54 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    fcc8:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    fcca:	4620      	mov	r0, r4
    fccc:	4a07      	ldr	r2, [pc, #28]	; (fcec <z_clock_driver_init+0x64>)
    fcce:	6013      	str	r3, [r2, #0]
    fcd0:	602b      	str	r3, [r5, #0]
}
    fcd2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    fcd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fcd8:	e7fb      	b.n	fcd2 <z_clock_driver_init+0x4a>
    fcda:	bf00      	nop
    fcdc:	0002929a 	.word	0x0002929a
    fce0:	40015000 	.word	0x40015000
    fce4:	40015140 	.word	0x40015140
    fce8:	e000e100 	.word	0xe000e100
    fcec:	40015008 	.word	0x40015008

0000fcf0 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    fcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
    fcf2:	4b2c      	ldr	r3, [pc, #176]	; (fda4 <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    fcf4:	4c2c      	ldr	r4, [pc, #176]	; (fda8 <z_clock_set_timeout+0xb8>)
    fcf6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
    fcfa:	4b2c      	ldr	r3, [pc, #176]	; (fdac <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    fcfc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fd00:	bf08      	it	eq
    fd02:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
    fd04:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    fd06:	1a52      	subs	r2, r2, r1
    fd08:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    fd0c:	0212      	lsls	r2, r2, #8
    fd0e:	d436      	bmi.n	fd7e <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    fd10:	3801      	subs	r0, #1
    fd12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    fd16:	42a0      	cmp	r0, r4
    fd18:	bfa8      	it	ge
    fd1a:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    fd1c:	3301      	adds	r3, #1
    fd1e:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    fd20:	42a0      	cmp	r0, r4
    fd22:	bf94      	ite	ls
    fd24:	180c      	addls	r4, r1, r0
    fd26:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
    fd28:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    fd2c:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
    fd2e:	4b1d      	ldr	r3, [pc, #116]	; (fda4 <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    fd30:	4e1f      	ldr	r6, [pc, #124]	; (fdb0 <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
    fd32:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
    fd36:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
    fd3a:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    fd3e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
    fd42:	1a52      	subs	r2, r2, r1
    fd44:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    fd48:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    fd4a:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
    fd4c:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    fd50:	461d      	mov	r5, r3
    fd52:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    fd56:	d103      	bne.n	fd60 <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
    fd58:	200f      	movs	r0, #15
    fd5a:	f017 fbcc 	bl	274f6 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    fd5e:	6037      	str	r7, [r6, #0]
    fd60:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    fd64:	4b13      	ldr	r3, [pc, #76]	; (fdb4 <z_clock_set_timeout+0xc4>)
    fd66:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    fd6a:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    fd6e:	1a23      	subs	r3, r4, r0
    fd70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    fd74:	2b01      	cmp	r3, #1
    fd76:	d104      	bne.n	fd82 <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
    fd78:	f7ff ff60 	bl	fc3c <handle_next_tick_case>
    fd7c:	e00b      	b.n	fd96 <z_clock_set_timeout+0xa6>
		ticks = 0;
    fd7e:	2000      	movs	r0, #0
    fd80:	e7cc      	b.n	fd1c <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    fd82:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    fd86:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
    fd8a:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    fd8e:	1a24      	subs	r4, r4, r0
    fd90:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
    fd92:	0223      	lsls	r3, r4, #8
    fd94:	d4f0      	bmi.n	fd78 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
    fd96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    fd9a:	4b02      	ldr	r3, [pc, #8]	; (fda4 <z_clock_set_timeout+0xb4>)
    fd9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
    fda0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fda2:	bf00      	nop
    fda4:	40015000 	.word	0x40015000
    fda8:	007fffff 	.word	0x007fffff
    fdac:	20022590 	.word	0x20022590
    fdb0:	40015140 	.word	0x40015140
    fdb4:	e000e100 	.word	0xe000e100

0000fdb8 <z_clock_elapsed>:
	__asm__ volatile(
    fdb8:	f04f 0220 	mov.w	r2, #32
    fdbc:	f3ef 8311 	mrs	r3, BASEPRI
    fdc0:	f382 8811 	msr	BASEPRI, r2
    fdc4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    fdc8:	4a06      	ldr	r2, [pc, #24]	; (fde4 <z_clock_elapsed+0x2c>)
    fdca:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    fdce:	4a06      	ldr	r2, [pc, #24]	; (fde8 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    fdd0:	6812      	ldr	r2, [r2, #0]
    fdd2:	1a80      	subs	r0, r0, r2
    fdd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    fdd8:	f383 8811 	msr	BASEPRI, r3
    fddc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    fde0:	4770      	bx	lr
    fde2:	bf00      	nop
    fde4:	40015000 	.word	0x40015000
    fde8:	20022590 	.word	0x20022590

0000fdec <z_timer_cycle_get_32>:
	__asm__ volatile(
    fdec:	f04f 0320 	mov.w	r3, #32
    fdf0:	f3ef 8211 	mrs	r2, BASEPRI
    fdf4:	f383 8811 	msr	BASEPRI, r3
    fdf8:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    fdfc:	4906      	ldr	r1, [pc, #24]	; (fe18 <z_timer_cycle_get_32+0x2c>)
    fdfe:	4b07      	ldr	r3, [pc, #28]	; (fe1c <z_timer_cycle_get_32+0x30>)
    fe00:	6808      	ldr	r0, [r1, #0]
    fe02:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    fe06:	f382 8811 	msr	BASEPRI, r2
    fe0a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    fe0e:	1a1b      	subs	r3, r3, r0
    fe10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    fe14:	4418      	add	r0, r3
    fe16:	4770      	bx	lr
    fe18:	20022590 	.word	0x20022590
    fe1c:	40015000 	.word	0x40015000

0000fe20 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    fe20:	4a09      	ldr	r2, [pc, #36]	; (fe48 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    fe22:	490a      	ldr	r1, [pc, #40]	; (fe4c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    fe24:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    fe26:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    fe28:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
    fe2a:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    fe2c:	4908      	ldr	r1, [pc, #32]	; (fe50 <arch_swap+0x30>)
    fe2e:	684b      	ldr	r3, [r1, #4]
    fe30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    fe34:	604b      	str	r3, [r1, #4]
    fe36:	2300      	movs	r3, #0
    fe38:	f383 8811 	msr	BASEPRI, r3
    fe3c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    fe40:	6893      	ldr	r3, [r2, #8]
}
    fe42:	6f18      	ldr	r0, [r3, #112]	; 0x70
    fe44:	4770      	bx	lr
    fe46:	bf00      	nop
    fe48:	2002807c 	.word	0x2002807c
    fe4c:	00028fa0 	.word	0x00028fa0
    fe50:	e000ed00 	.word	0xe000ed00

0000fe54 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    fe54:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    fe56:	2b00      	cmp	r3, #0
    fe58:	db08      	blt.n	fe6c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fe5a:	2201      	movs	r2, #1
    fe5c:	f000 001f 	and.w	r0, r0, #31
    fe60:	fa02 f000 	lsl.w	r0, r2, r0
    fe64:	4a02      	ldr	r2, [pc, #8]	; (fe70 <arch_irq_enable+0x1c>)
    fe66:	095b      	lsrs	r3, r3, #5
    fe68:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    fe6c:	4770      	bx	lr
    fe6e:	bf00      	nop
    fe70:	e000e100 	.word	0xe000e100

0000fe74 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    fe74:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    fe76:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    fe78:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fe7c:	bfac      	ite	ge
    fe7e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fe82:	4b06      	ldrlt	r3, [pc, #24]	; (fe9c <z_arm_irq_priority_set+0x28>)
    fe84:	ea4f 1141 	mov.w	r1, r1, lsl #5
    fe88:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fe8a:	bfab      	itete	ge
    fe8c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fe90:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fe94:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fe98:	5419      	strblt	r1, [r3, r0]
}
    fe9a:	4770      	bx	lr
    fe9c:	e000ed14 	.word	0xe000ed14

0000fea0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    fea0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    fea2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    fea4:	4b04      	ldr	r3, [pc, #16]	; (feb8 <_arch_isr_direct_pm+0x18>)
    fea6:	6a18      	ldr	r0, [r3, #32]
    fea8:	b118      	cbz	r0, feb2 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    feaa:	2200      	movs	r2, #0
    feac:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    feae:	f017 f8ab 	bl	27008 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    feb2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    feb4:	bd08      	pop	{r3, pc}
    feb6:	bf00      	nop
    feb8:	2002807c 	.word	0x2002807c

0000febc <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    febc:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    fec0:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    fec2:	3a20      	subs	r2, #32
    fec4:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
    fec8:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    feca:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
    fecc:	4908      	ldr	r1, [pc, #32]	; (fef0 <arch_new_thread+0x34>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
    fece:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    fed0:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
    fed2:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
    fed6:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    fed8:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
    feda:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    fedc:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    fede:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    fee2:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    fee4:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
    fee6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    fee8:	66c3      	str	r3, [r0, #108]	; 0x6c

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
    feea:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    feee:	4770      	bx	lr
    fef0:	00022315 	.word	0x00022315

0000fef4 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    fef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fef6:	461e      	mov	r6, r3
    fef8:	4607      	mov	r7, r0
    fefa:	460d      	mov	r5, r1
    fefc:	4614      	mov	r4, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    fefe:	2300      	movs	r3, #0
    ff00:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    ff04:	f3ef 8314 	mrs	r3, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    ff08:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    ff0c:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    ff10:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    ff14:	f000 fa30 	bl	10378 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    ff18:	4b09      	ldr	r3, [pc, #36]	; (ff40 <arch_switch_to_main_thread+0x4c>)
	start_of_main_stack =
    ff1a:	442c      	add	r4, r5
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    ff1c:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    ff20:	609f      	str	r7, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    ff22:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    ff26:	4630      	mov	r0, r6
    ff28:	f384 8809 	msr	PSP, r4
    ff2c:	2100      	movs	r1, #0
    ff2e:	b663      	cpsie	if
    ff30:	f381 8811 	msr	BASEPRI, r1
    ff34:	f3bf 8f6f 	isb	sy
    ff38:	2200      	movs	r2, #0
    ff3a:	2300      	movs	r3, #0
    ff3c:	f012 f9ea 	bl	22314 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    ff40:	2002807c 	.word	0x2002807c

0000ff44 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    ff44:	4a14      	ldr	r2, [pc, #80]	; (ff98 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    ff46:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    ff48:	4b14      	ldr	r3, [pc, #80]	; (ff9c <z_arm_prep_c+0x58>)
    ff4a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    ff4e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    ff50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ff54:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    ff58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    ff5c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    ff60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    ff64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    ff68:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    ff6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    ff70:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    ff74:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    ff78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ff7c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    ff80:	2300      	movs	r3, #0
    ff82:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    ff86:	f00d fef5 	bl	1dd74 <z_bss_zero>
	z_data_copy();
    ff8a:	f00d fefd 	bl	1dd88 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    ff8e:	f000 f9c1 	bl	10314 <z_arm_interrupt_init>
	z_cstart();
    ff92:	f00d ff37 	bl	1de04 <z_cstart>
    ff96:	bf00      	nop
    ff98:	0000c000 	.word	0x0000c000
    ff9c:	e000ed00 	.word	0xe000ed00

0000ffa0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    ffa0:	4929      	ldr	r1, [pc, #164]	; (10048 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    ffa2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    ffa4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    ffa8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    ffaa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    ffae:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    ffb2:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    ffb6:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    ffba:	d004      	beq.n	ffc6 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    ffbc:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    ffc0:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    ffc4:	e007      	b.n	ffd6 <out_fp_endif>

0000ffc6 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    ffc6:	f102 0074 	add.w	r0, r2, #116	; 0x74
    vstmia r0, {s16-s31}
    ffca:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    ffce:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    ffd2:	f050 0004 	orrs.w	r0, r0, #4

0000ffd6 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    ffd6:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ffda:	2020      	movs	r0, #32
    msr BASEPRI, r0
    ffdc:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    ffe0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    ffe4:	4f19      	ldr	r7, [pc, #100]	; (1004c <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    ffe6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    ffea:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    ffec:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    ffee:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    fff0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
    fff2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    fff4:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    fff6:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    fffa:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    fffe:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   10002:	d105      	bne.n	10010 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   10004:	2300      	movs	r3, #0
    vmsr fpscr, r3
   10006:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   1000a:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   1000e:	e005      	b.n	1001c <in_fp_endif>

00010010 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   10010:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   10014:	f102 0074 	add.w	r0, r2, #116	; 0x74
    vldmia r0, {s16-s31}
   10018:	ec90 8a10 	vldmia	r0, {s16-s31}

0001001c <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   1001c:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   10020:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   10024:	f383 8814 	msr	CONTROL, r3
    isb
   10028:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1002c:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   10030:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   10034:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   10038:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1003c:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1003e:	f012 ff59 	bl	22ef4 <configure_builtin_stack_guard>
    pop {r2, lr}
   10042:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   10046:	4770      	bx	lr
    ldr r1, =_kernel
   10048:	2002807c 	.word	0x2002807c
    ldr v4, =_SCS_ICSR
   1004c:	e000ed04 	.word	0xe000ed04

00010050 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   10050:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   10054:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   10056:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1005a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1005e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   10060:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   10064:	2902      	cmp	r1, #2
    beq _oops
   10066:	d0ff      	beq.n	10068 <_oops>

00010068 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   10068:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1006a:	f012 ff49 	bl	22f00 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1006e:	bd01      	pop	{r0, pc}

00010070 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   10070:	4901      	ldr	r1, [pc, #4]	; (10078 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   10072:	2210      	movs	r2, #16
	str	r2, [r1]
   10074:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   10076:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   10078:	e000ed10 	.word	0xe000ed10

0001007c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1007c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1007e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   10080:	f380 8811 	msr	BASEPRI, r0
	isb
   10084:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   10088:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1008c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1008e:	b662      	cpsie	i
	isb
   10090:	f3bf 8f6f 	isb	sy

	bx	lr
   10094:	4770      	bx	lr
   10096:	bf00      	nop

00010098 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   10098:	bf30      	wfi
    b z_SysNmiOnReset
   1009a:	f7ff bffd 	b.w	10098 <z_SysNmiOnReset>
   1009e:	bf00      	nop

000100a0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   100a0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   100a2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   100a4:	4a0b      	ldr	r2, [pc, #44]	; (100d4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   100a6:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   100a8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   100aa:	bf1e      	ittt	ne
	movne	r1, #0
   100ac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   100ae:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   100b0:	f016 ffaa 	blne	27008 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   100b4:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   100b6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   100ba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   100be:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   100c2:	4905      	ldr	r1, [pc, #20]	; (100d8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   100c4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   100c6:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   100c8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   100ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   100ce:	4903      	ldr	r1, [pc, #12]	; (100dc <_isr_wrapper+0x3c>)
	bx r1
   100d0:	4708      	bx	r1
   100d2:	0000      	.short	0x0000
	ldr r2, =_kernel
   100d4:	2002807c 	.word	0x2002807c
	ldr r1, =_sw_isr_table
   100d8:	0002857c 	.word	0x0002857c
	ldr r1, =z_arm_int_exit
   100dc:	00010125 	.word	0x00010125

000100e0 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   100e0:	f012 fb9b 	bl	2281a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   100e4:	2020      	movs	r0, #32
    msr BASEPRI, r0
   100e6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   100ea:	4808      	ldr	r0, [pc, #32]	; (1010c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   100ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   100f0:	1840      	adds	r0, r0, r1
    msr PSP, r0
   100f2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   100f6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   100fa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   100fc:	4308      	orrs	r0, r1
    msr CONTROL, r0
   100fe:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   10102:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   10106:	f7ff ff1d 	bl	ff44 <z_arm_prep_c>
   1010a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   1010c:	2002eb98 	.word	0x2002eb98

00010110 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   10110:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   10114:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   10118:	4672      	mov	r2, lr

	push {r0, lr}
   1011a:	b501      	push	{r0, lr}

	bl z_arm_fault
   1011c:	f000 f860 	bl	101e0 <z_arm_fault>

	pop {r0, pc}
   10120:	bd01      	pop	{r0, pc}
   10122:	bf00      	nop

00010124 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   10124:	4b04      	ldr	r3, [pc, #16]	; (10138 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   10126:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   10128:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   1012a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1012c:	d003      	beq.n	10136 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1012e:	4903      	ldr	r1, [pc, #12]	; (1013c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   10130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   10134:	600a      	str	r2, [r1, #0]

00010136 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   10136:	4770      	bx	lr
	ldr r3, =_kernel
   10138:	2002807c 	.word	0x2002807c
	ldr r1, =_SCS_ICSR
   1013c:	e000ed04 	.word	0xe000ed04

00010140 <mem_manage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   10140:	4b0c      	ldr	r3, [pc, #48]	; (10174 <mem_manage_fault.isra.0+0x34>)
   10142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   10144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   10146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10148:	0792      	lsls	r2, r2, #30
   1014a:	d508      	bpl.n	1015e <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   1014c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1014e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10150:	0612      	lsls	r2, r2, #24
   10152:	d504      	bpl.n	1015e <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
   10154:	b118      	cbz	r0, 1015e <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   10156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1015c:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   1015e:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   10160:	4b04      	ldr	r3, [pc, #16]	; (10174 <mem_manage_fault.isra.0+0x34>)
   10162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   10166:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   10168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1016a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1016e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   10170:	7008      	strb	r0, [r1, #0]

	return reason;
}
   10172:	4770      	bx	lr
   10174:	e000ed00 	.word	0xe000ed00

00010178 <bus_fault.isra.0>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10178:	4b0d      	ldr	r3, [pc, #52]	; (101b0 <bus_fault.isra.0+0x38>)
   1017a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1017c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1017e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10180:	0592      	lsls	r2, r2, #22
   10182:	d508      	bpl.n	10196 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   10184:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   10186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10188:	0412      	lsls	r2, r2, #16
   1018a:	d504      	bpl.n	10196 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
   1018c:	b118      	cbz	r0, 10196 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1018e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10190:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   10194:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   10196:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   10198:	4b05      	ldr	r3, [pc, #20]	; (101b0 <bus_fault.isra.0+0x38>)
   1019a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1019c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1019e:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   101a0:	bf58      	it	pl
   101a2:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   101a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   101a6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   101aa:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   101ac:	7008      	strb	r0, [r1, #0]

	return reason;
}
   101ae:	4770      	bx	lr
   101b0:	e000ed00 	.word	0xe000ed00

000101b4 <usage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   101b4:	4b09      	ldr	r3, [pc, #36]	; (101dc <usage_fault.isra.0+0x28>)
   101b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   101b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   101ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   101bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   101be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   101c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   101c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   101c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   101c6:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   101ca:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   101ce:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
   101d2:	bf18      	it	ne
   101d4:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   101d6:	629a      	str	r2, [r3, #40]	; 0x28
}
   101d8:	4770      	bx	lr
   101da:	bf00      	nop
   101dc:	e000ed00 	.word	0xe000ed00

000101e0 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   101e0:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   101e2:	4b3a      	ldr	r3, [pc, #232]	; (102cc <z_arm_fault+0xec>)
   101e4:	2500      	movs	r5, #0
   101e6:	685b      	ldr	r3, [r3, #4]
{
   101e8:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   101ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
   101ee:	f385 8811 	msr	BASEPRI, r5
   101f2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   101f6:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   101fa:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   101fe:	d119      	bne.n	10234 <z_arm_fault+0x54>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   10200:	07d6      	lsls	r6, r2, #31
   10202:	d417      	bmi.n	10234 <z_arm_fault+0x54>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   10204:	0655      	lsls	r5, r2, #25
   10206:	d404      	bmi.n	10212 <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   10208:	0714      	lsls	r4, r2, #28
   1020a:	d405      	bmi.n	10218 <z_arm_fault+0x38>
			ptr_esf = (z_arch_esf_t *)msp;
   1020c:	4606      	mov	r6, r0
			*nested_exc = true;
   1020e:	2501      	movs	r5, #1
   10210:	e004      	b.n	1021c <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   10212:	f012 0504 	ands.w	r5, r2, #4
   10216:	d00b      	beq.n	10230 <z_arm_fault+0x50>
			ptr_esf = (z_arch_esf_t *)psp;
   10218:	460e      	mov	r6, r1
	*nested_exc = false;
   1021a:	2500      	movs	r5, #0
	*recoverable = false;
   1021c:	2200      	movs	r2, #0
   1021e:	3b03      	subs	r3, #3
   10220:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   10224:	2b03      	cmp	r3, #3
   10226:	d849      	bhi.n	102bc <z_arm_fault+0xdc>
   10228:	e8df f003 	tbb	[pc, r3]
   1022c:	3d444006 	.word	0x3d444006
			ptr_esf = (z_arch_esf_t *)msp;
   10230:	4606      	mov	r6, r0
	if (!alternative_state_exc) {
   10232:	e7f3      	b.n	1021c <z_arm_fault+0x3c>
		return NULL;
   10234:	462e      	mov	r6, r5
   10236:	e7f1      	b.n	1021c <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10238:	4b24      	ldr	r3, [pc, #144]	; (102cc <z_arm_fault+0xec>)
   1023a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1023c:	0792      	lsls	r2, r2, #30
   1023e:	d43d      	bmi.n	102bc <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   10240:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   10242:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   10246:	d008      	beq.n	1025a <z_arm_fault+0x7a>
		if (SCB_MMFSR != 0) {
   10248:	3328      	adds	r3, #40	; 0x28
   1024a:	781b      	ldrb	r3, [r3, #0]
   1024c:	b1eb      	cbz	r3, 1028a <z_arm_fault+0xaa>
			reason = mem_manage_fault(esf, 1, recoverable);
   1024e:	2001      	movs	r0, #1
   10250:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   10254:	f7ff ff74 	bl	10140 <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
   10258:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1025a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1025e:	b993      	cbnz	r3, 10286 <z_arm_fault+0xa6>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   10260:	2268      	movs	r2, #104	; 0x68
   10262:	4631      	mov	r1, r6
   10264:	a802      	add	r0, sp, #8
   10266:	f017 fb6e 	bl	27946 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1026a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1026c:	b345      	cbz	r5, 102c0 <z_arm_fault+0xe0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1026e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   10272:	b922      	cbnz	r2, 1027e <z_arm_fault+0x9e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   10274:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   10278:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1027c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1027e:	4620      	mov	r0, r4
   10280:	a902      	add	r1, sp, #8
   10282:	f012 fe3b 	bl	22efc <z_arm_fatal_error>
}
   10286:	b01c      	add	sp, #112	; 0x70
   10288:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   1028a:	4b11      	ldr	r3, [pc, #68]	; (102d0 <z_arm_fault+0xf0>)
   1028c:	781b      	ldrb	r3, [r3, #0]
   1028e:	b12b      	cbz	r3, 1029c <z_arm_fault+0xbc>
			reason = bus_fault(esf, 1, recoverable);
   10290:	2001      	movs	r0, #1
   10292:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   10296:	f7ff ff6f 	bl	10178 <bus_fault.isra.0>
   1029a:	e7dd      	b.n	10258 <z_arm_fault+0x78>
		} else if (SCB_UFSR != 0) {
   1029c:	4b0d      	ldr	r3, [pc, #52]	; (102d4 <z_arm_fault+0xf4>)
   1029e:	8818      	ldrh	r0, [r3, #0]
   102a0:	b284      	uxth	r4, r0
   102a2:	2c00      	cmp	r4, #0
   102a4:	d0d9      	beq.n	1025a <z_arm_fault+0x7a>
		reason = usage_fault(esf);
   102a6:	f7ff ff85 	bl	101b4 <usage_fault.isra.0>
   102aa:	e7d5      	b.n	10258 <z_arm_fault+0x78>
		reason = mem_manage_fault(esf, 0, recoverable);
   102ac:	2000      	movs	r0, #0
   102ae:	f10d 0107 	add.w	r1, sp, #7
   102b2:	e7cf      	b.n	10254 <z_arm_fault+0x74>
		reason = bus_fault(esf, 0, recoverable);
   102b4:	2000      	movs	r0, #0
   102b6:	f10d 0107 	add.w	r1, sp, #7
   102ba:	e7ec      	b.n	10296 <z_arm_fault+0xb6>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   102bc:	2400      	movs	r4, #0
   102be:	e7cc      	b.n	1025a <z_arm_fault+0x7a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   102c0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   102c4:	f023 0301 	bic.w	r3, r3, #1
   102c8:	e7d8      	b.n	1027c <z_arm_fault+0x9c>
   102ca:	bf00      	nop
   102cc:	e000ed00 	.word	0xe000ed00
   102d0:	e000ed29 	.word	0xe000ed29
   102d4:	e000ed2a 	.word	0xe000ed2a

000102d8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   102d8:	4b04      	ldr	r3, [pc, #16]	; (102ec <z_arm_fault_init+0x14>)
   102da:	695a      	ldr	r2, [r3, #20]
   102dc:	f042 0210 	orr.w	r2, r2, #16
   102e0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   102e2:	695a      	ldr	r2, [r3, #20]
   102e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   102e8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   102ea:	4770      	bx	lr
   102ec:	e000ed00 	.word	0xe000ed00

000102f0 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   102f0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   102f4:	4905      	ldr	r1, [pc, #20]	; (1030c <sys_arch_reboot+0x1c>)
   102f6:	4b06      	ldr	r3, [pc, #24]	; (10310 <sys_arch_reboot+0x20>)
   102f8:	68ca      	ldr	r2, [r1, #12]
   102fa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   102fe:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   10300:	60cb      	str	r3, [r1, #12]
   10302:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   10306:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   10308:	e7fd      	b.n	10306 <sys_arch_reboot+0x16>
   1030a:	bf00      	nop
   1030c:	e000ed00 	.word	0xe000ed00
   10310:	05fa0004 	.word	0x05fa0004

00010314 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   10314:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10316:	2120      	movs	r1, #32
   10318:	4803      	ldr	r0, [pc, #12]	; (10328 <z_arm_interrupt_init+0x14>)
   1031a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1031c:	3301      	adds	r3, #1
   1031e:	2b41      	cmp	r3, #65	; 0x41
   10320:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   10324:	d1f9      	bne.n	1031a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   10326:	4770      	bx	lr
   10328:	e000e100 	.word	0xe000e100

0001032c <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   1032c:	b538      	push	{r3, r4, r5, lr}
   1032e:	4604      	mov	r4, r0
	__asm__ volatile(
   10330:	f04f 0320 	mov.w	r3, #32
   10334:	f3ef 8511 	mrs	r5, BASEPRI
   10338:	f383 8811 	msr	BASEPRI, r3
   1033c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   10340:	f00e f9de 	bl	1e700 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   10344:	4b0a      	ldr	r3, [pc, #40]	; (10370 <z_impl_k_thread_abort+0x44>)
   10346:	689b      	ldr	r3, [r3, #8]
   10348:	42a3      	cmp	r3, r4
   1034a:	d10b      	bne.n	10364 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   1034c:	4b09      	ldr	r3, [pc, #36]	; (10374 <z_impl_k_thread_abort+0x48>)
   1034e:	685a      	ldr	r2, [r3, #4]
   10350:	f3c2 0208 	ubfx	r2, r2, #0, #9
   10354:	b912      	cbnz	r2, 1035c <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   10356:	4628      	mov	r0, r5
   10358:	f7ff fd62 	bl	fe20 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1035c:	685a      	ldr	r2, [r3, #4]
   1035e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   10362:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   10364:	4628      	mov	r0, r5
}
   10366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   1036a:	f016 bfc5 	b.w	272f8 <z_reschedule_irqlock>
   1036e:	bf00      	nop
   10370:	2002807c 	.word	0x2002807c
   10374:	e000ed00 	.word	0xe000ed00

00010378 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   10378:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   1037a:	4b0e      	ldr	r3, [pc, #56]	; (103b4 <z_arm_configure_static_mpu_regions+0x3c>)
{
   1037c:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   1037e:	9302      	str	r3, [sp, #8]
   10380:	4b0d      	ldr	r3, [pc, #52]	; (103b8 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10382:	4c0e      	ldr	r4, [pc, #56]	; (103bc <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   10384:	9303      	str	r3, [sp, #12]
   10386:	4b0e      	ldr	r3, [pc, #56]	; (103c0 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10388:	4a0e      	ldr	r2, [pc, #56]	; (103c4 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   1038a:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   1038c:	ab02      	add	r3, sp, #8
   1038e:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10390:	a801      	add	r0, sp, #4
   10392:	4623      	mov	r3, r4
   10394:	2101      	movs	r1, #1
   10396:	f000 f907 	bl	105a8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   1039a:	2300      	movs	r3, #0
   1039c:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1039e:	4b0a      	ldr	r3, [pc, #40]	; (103c8 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   103a0:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   103a2:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   103a4:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   103a6:	9305      	str	r3, [sp, #20]
   103a8:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   103aa:	f000 f907 	bl	105bc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   103ae:	b008      	add	sp, #32
   103b0:	bd10      	pop	{r4, pc}
   103b2:	bf00      	nop
   103b4:	20020000 	.word	0x20020000
   103b8:	00000000 	.word	0x00000000
   103bc:	20040000 	.word	0x20040000
   103c0:	00010006 	.word	0x00010006
   103c4:	20020000 	.word	0x20020000
   103c8:	20020a00 	.word	0x20020a00

000103cc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   103cc:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   103ce:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   103d0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   103d2:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   103d6:	f004 031f 	and.w	r3, r4, #31
   103da:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   103dc:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   103de:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   103e0:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   103e4:	4904      	ldr	r1, [pc, #16]	; (103f8 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   103e6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   103ea:	f043 0301 	orr.w	r3, r3, #1
   103ee:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   103f0:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   103f2:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   103f4:	bd10      	pop	{r4, pc}
   103f6:	bf00      	nop
   103f8:	e000ed90 	.word	0xe000ed90

000103fc <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   103fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10400:	4607      	mov	r7, r0
   10402:	4688      	mov	r8, r1
   10404:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   10406:	2600      	movs	r6, #0
	MPU->RNR = index;
   10408:	4d4a      	ldr	r5, [pc, #296]	; (10534 <mpu_configure_regions_and_partition.constprop.0+0x138>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1040a:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   1040c:	4546      	cmp	r6, r8
   1040e:	da0b      	bge.n	10428 <mpu_configure_regions_and_partition.constprop.0+0x2c>
		if (regions[i]->size == 0U) {
   10410:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   10414:	f8d3 9004 	ldr.w	r9, [r3, #4]
   10418:	f1b9 0f00 	cmp.w	r9, #0
   1041c:	d03a      	beq.n	10494 <mpu_configure_regions_and_partition.constprop.0+0x98>
		&&
   1041e:	f1b9 0f1f 	cmp.w	r9, #31
   10422:	d805      	bhi.n	10430 <mpu_configure_regions_and_partition.constprop.0+0x34>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   10424:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   10428:	4620      	mov	r0, r4
   1042a:	b005      	add	sp, #20
   1042c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
   10430:	f019 0f1f 	tst.w	r9, #31
   10434:	d1f6      	bne.n	10424 <mpu_configure_regions_and_partition.constprop.0+0x28>
		((part->start &
   10436:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   1043a:	f01a 0f1f 	tst.w	sl, #31
   1043e:	d1f1      	bne.n	10424 <mpu_configure_regions_and_partition.constprop.0+0x28>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10440:	4650      	mov	r0, sl
   10442:	f012 fd88 	bl	22f56 <arm_cmse_mpu_region_get>
   10446:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10448:	eb09 000a 	add.w	r0, r9, sl
   1044c:	3801      	subs	r0, #1
   1044e:	f012 fd82 	bl	22f56 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   10452:	4583      	cmp	fp, r0
   10454:	d1e6      	bne.n	10424 <mpu_configure_regions_and_partition.constprop.0+0x28>
		if ((u_reg_index == -EINVAL) ||
   10456:	f11b 0f16 	cmn.w	fp, #22
   1045a:	d0e3      	beq.n	10424 <mpu_configure_regions_and_partition.constprop.0+0x28>
			(u_reg_index > (reg_index - 1))) {
   1045c:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   1045e:	455b      	cmp	r3, fp
   10460:	dbe0      	blt.n	10424 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
   10462:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10466:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   10468:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1046c:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1046e:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10472:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10476:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1047a:	e9d1 3200 	ldrd	r3, r2, [r1]
   1047e:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   10480:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10482:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   10486:	d118      	bne.n	104ba <mpu_configure_regions_and_partition.constprop.0+0xbe>
   10488:	45ca      	cmp	sl, r9
   1048a:	d105      	bne.n	10498 <mpu_configure_regions_and_partition.constprop.0+0x9c>
			mpu_configure_region(u_reg_index, regions[i]);
   1048c:	fa5f f08b 	uxtb.w	r0, fp
   10490:	f012 fd41 	bl	22f16 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   10494:	3601      	adds	r6, #1
   10496:	e7b9      	b.n	1040c <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   10498:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1049c:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   1049e:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   104a2:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   104a6:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   104a8:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   104aa:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   104ac:	f012 fd33 	bl	22f16 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   104b0:	f110 0f16 	cmn.w	r0, #22
   104b4:	d0b6      	beq.n	10424 <mpu_configure_regions_and_partition.constprop.0+0x28>
			reg_index++;
   104b6:	1c44      	adds	r4, r0, #1
   104b8:	e7ec      	b.n	10494 <mpu_configure_regions_and_partition.constprop.0+0x98>
	MPU->RNR = index;
   104ba:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   104be:	692a      	ldr	r2, [r5, #16]
   104c0:	3b01      	subs	r3, #1
   104c2:	f023 031f 	bic.w	r3, r3, #31
   104c6:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   104ca:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   104cc:	45ca      	cmp	sl, r9
   104ce:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   104d0:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   104d2:	d0eb      	beq.n	104ac <mpu_configure_regions_and_partition.constprop.0+0xb0>
				mpu_configure_region(reg_index, regions[i]);
   104d4:	f012 fd1f 	bl	22f16 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   104d8:	f110 0f16 	cmn.w	r0, #22
   104dc:	d0a2      	beq.n	10424 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
   104de:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   104e2:	68ea      	ldr	r2, [r5, #12]
   104e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   104e8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   104ec:	f362 0304 	bfi	r3, r2, #0, #5
   104f0:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   104f4:	692b      	ldr	r3, [r5, #16]
   104f6:	f89d 2008 	ldrb.w	r2, [sp, #8]
   104fa:	085b      	lsrs	r3, r3, #1
   104fc:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   10500:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10504:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   10508:	e9d3 1300 	ldrd	r1, r3, [r3]
   1050c:	440b      	add	r3, r1
   1050e:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   10510:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   10514:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   10516:	4453      	add	r3, sl
   10518:	eba3 0309 	sub.w	r3, r3, r9
   1051c:	b2c0      	uxtb	r0, r0
   1051e:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   10522:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   10524:	9303      	str	r3, [sp, #12]
   10526:	f63f af7d 	bhi.w	10424 <mpu_configure_regions_and_partition.constprop.0+0x28>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   1052a:	4669      	mov	r1, sp
   1052c:	f7ff ff4e 	bl	103cc <region_init>
   10530:	e7c1      	b.n	104b6 <mpu_configure_regions_and_partition.constprop.0+0xba>
   10532:	bf00      	nop
   10534:	e000ed90 	.word	0xe000ed90

00010538 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   10538:	2205      	movs	r2, #5
   1053a:	4b03      	ldr	r3, [pc, #12]	; (10548 <arm_core_mpu_enable+0x10>)
   1053c:	605a      	str	r2, [r3, #4]
   1053e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10542:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   10546:	4770      	bx	lr
   10548:	e000ed90 	.word	0xe000ed90

0001054c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   1054c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   10550:	2200      	movs	r2, #0
   10552:	4b01      	ldr	r3, [pc, #4]	; (10558 <arm_core_mpu_disable+0xc>)
   10554:	605a      	str	r2, [r3, #4]
}
   10556:	4770      	bx	lr
   10558:	e000ed90 	.word	0xe000ed90

0001055c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   1055c:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1055e:	4c0e      	ldr	r4, [pc, #56]	; (10598 <arm_mpu_init+0x3c>)
   10560:	6825      	ldr	r5, [r4, #0]
   10562:	2d10      	cmp	r5, #16
   10564:	d814      	bhi.n	10590 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   10566:	f7ff fff1 	bl	1054c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1056a:	2000      	movs	r0, #0
	MPU->MAIR0 =
   1056c:	4b0b      	ldr	r3, [pc, #44]	; (1059c <arm_mpu_init+0x40>)
   1056e:	4a0c      	ldr	r2, [pc, #48]	; (105a0 <arm_mpu_init+0x44>)
   10570:	631a      	str	r2, [r3, #48]	; 0x30
   10572:	4285      	cmp	r5, r0
   10574:	d105      	bne.n	10582 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   10576:	4b0b      	ldr	r3, [pc, #44]	; (105a4 <arm_mpu_init+0x48>)
   10578:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   1057a:	f7ff ffdd 	bl	10538 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   1057e:	2000      	movs	r0, #0
}
   10580:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   10582:	6861      	ldr	r1, [r4, #4]
   10584:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   10588:	f7ff ff20 	bl	103cc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1058c:	3001      	adds	r0, #1
   1058e:	e7f0      	b.n	10572 <arm_mpu_init+0x16>
		return -1;
   10590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10594:	e7f4      	b.n	10580 <arm_mpu_init+0x24>
   10596:	bf00      	nop
   10598:	00028970 	.word	0x00028970
   1059c:	e000ed90 	.word	0xe000ed90
   105a0:	0044ffaa 	.word	0x0044ffaa
   105a4:	20029e01 	.word	0x20029e01

000105a8 <arm_core_mpu_configure_static_mpu_regions>:
{
   105a8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   105aa:	4c03      	ldr	r4, [pc, #12]	; (105b8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   105ac:	7822      	ldrb	r2, [r4, #0]
   105ae:	f7ff ff25 	bl	103fc <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   105b2:	7020      	strb	r0, [r4, #0]
}
   105b4:	bd10      	pop	{r4, pc}
   105b6:	bf00      	nop
   105b8:	20029e01 	.word	0x20029e01

000105bc <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   105bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105c0:	4d26      	ldr	r5, [pc, #152]	; (1065c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   105c2:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   105c4:	4606      	mov	r6, r0
   105c6:	f04f 0800 	mov.w	r8, #0
   105ca:	46ab      	mov	fp, r5
	MPU->RNR = index;
   105cc:	4f24      	ldr	r7, [pc, #144]	; (10660 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   105ce:	45d0      	cmp	r8, sl
   105d0:	da1b      	bge.n	1060a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   105d2:	f8d6 9004 	ldr.w	r9, [r6, #4]
   105d6:	f1b9 0f00 	cmp.w	r9, #0
   105da:	d039      	beq.n	10650 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   105dc:	6831      	ldr	r1, [r6, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   105de:	4608      	mov	r0, r1
   105e0:	9101      	str	r1, [sp, #4]
   105e2:	f012 fcb8 	bl	22f56 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   105e6:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   105e8:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   105ea:	eb09 0001 	add.w	r0, r9, r1
   105ee:	3801      	subs	r0, #1
   105f0:	f012 fcb1 	bl	22f56 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   105f4:	4284      	cmp	r4, r0
   105f6:	f04f 0214 	mov.w	r2, #20
   105fa:	4b1a      	ldr	r3, [pc, #104]	; (10664 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   105fc:	d008      	beq.n	10610 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   105fe:	f06f 0315 	mvn.w	r3, #21
   10602:	fb02 f808 	mul.w	r8, r2, r8
   10606:	f84b 3008 	str.w	r3, [fp, r8]
}
   1060a:	b003      	add	sp, #12
   1060c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   10610:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   10614:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   10616:	d0f8      	beq.n	1060a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   10618:	7819      	ldrb	r1, [r3, #0]
   1061a:	42a1      	cmp	r1, r4
   1061c:	ddf5      	ble.n	1060a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   1061e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   10622:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   10624:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   10626:	68fc      	ldr	r4, [r7, #12]
   10628:	f100 0108 	add.w	r1, r0, #8
   1062c:	7b00      	ldrb	r0, [r0, #12]
   1062e:	f364 0004 	bfi	r0, r4, #0, #5
   10632:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10634:	6938      	ldr	r0, [r7, #16]
   10636:	790c      	ldrb	r4, [r1, #4]
   10638:	0840      	lsrs	r0, r0, #1
   1063a:	f360 1447 	bfi	r4, r0, #5, #3
   1063e:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   10640:	68f9      	ldr	r1, [r7, #12]
   10642:	f021 011f 	bic.w	r1, r1, #31
   10646:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   10648:	6939      	ldr	r1, [r7, #16]
   1064a:	f021 011f 	bic.w	r1, r1, #31
   1064e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10650:	f108 0801 	add.w	r8, r8, #1
   10654:	3514      	adds	r5, #20
   10656:	360c      	adds	r6, #12
   10658:	e7b9      	b.n	105ce <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1065a:	bf00      	nop
   1065c:	20022594 	.word	0x20022594
   10660:	e000ed90 	.word	0xe000ed90
   10664:	20029e01 	.word	0x20029e01

00010668 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   10668:	4b01      	ldr	r3, [pc, #4]	; (10670 <__stdout_hook_install+0x8>)
   1066a:	6018      	str	r0, [r3, #0]
}
   1066c:	4770      	bx	lr
   1066e:	bf00      	nop
   10670:	200200b0 	.word	0x200200b0

00010674 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   10674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10676:	4606      	mov	r6, r0
   10678:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   1067a:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   1067c:	4f06      	ldr	r7, [pc, #24]	; (10698 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   1067e:	42ac      	cmp	r4, r5
   10680:	da08      	bge.n	10694 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   10682:	683b      	ldr	r3, [r7, #0]
   10684:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   10686:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   10688:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1068a:	f104 0401 	add.w	r4, r4, #1
   1068e:	d001      	beq.n	10694 <z_impl_zephyr_read_stdin+0x20>
   10690:	280d      	cmp	r0, #13
   10692:	d1f4      	bne.n	1067e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   10694:	4620      	mov	r0, r4
   10696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10698:	200200ac 	.word	0x200200ac

0001069c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   1069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1069e:	460d      	mov	r5, r1
   106a0:	4f09      	ldr	r7, [pc, #36]	; (106c8 <z_impl_zephyr_write_stdout+0x2c>)
   106a2:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   106a4:	f1c0 0401 	rsb	r4, r0, #1
   106a8:	19a3      	adds	r3, r4, r6
   106aa:	429d      	cmp	r5, r3
   106ac:	dc01      	bgt.n	106b2 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   106ae:	4628      	mov	r0, r5
   106b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   106b2:	7873      	ldrb	r3, [r6, #1]
   106b4:	2b0a      	cmp	r3, #10
   106b6:	d102      	bne.n	106be <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   106b8:	200d      	movs	r0, #13
   106ba:	683b      	ldr	r3, [r7, #0]
   106bc:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   106be:	683b      	ldr	r3, [r7, #0]
   106c0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   106c4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   106c6:	e7ef      	b.n	106a8 <z_impl_zephyr_write_stdout+0xc>
   106c8:	200200b0 	.word	0x200200b0

000106cc <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   106cc:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   106ce:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   106d0:	4801      	ldr	r0, [pc, #4]	; (106d8 <_exit+0xc>)
   106d2:	f7ff ffe3 	bl	1069c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   106d6:	e7fe      	b.n	106d6 <_exit+0xa>
   106d8:	000292aa 	.word	0x000292aa

000106dc <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   106dc:	b510      	push	{r4, lr}
   106de:	4604      	mov	r4, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   106e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   106e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   106e8:	480a      	ldr	r0, [pc, #40]	; (10714 <_sbrk+0x38>)
   106ea:	f011 fe04 	bl	222f6 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   106ee:	490a      	ldr	r1, [pc, #40]	; (10718 <_sbrk+0x3c>)
   106f0:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   106f2:	18e0      	adds	r0, r4, r3
   106f4:	4c09      	ldr	r4, [pc, #36]	; (1071c <_sbrk+0x40>)
   106f6:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   106fa:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   106fe:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   10700:	bf2e      	itee	cs
   10702:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   10706:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   10708:	6008      	strcc	r0, [r1, #0]
	}

	sys_sem_give(&heap_sem);
   1070a:	4802      	ldr	r0, [pc, #8]	; (10714 <_sbrk+0x38>)
   1070c:	f011 fdee 	bl	222ec <sys_sem_give>

	return ret;
}
   10710:	4620      	mov	r0, r4
   10712:	bd10      	pop	{r4, pc}
   10714:	200208dc 	.word	0x200208dc
   10718:	200225a8 	.word	0x200225a8
   1071c:	200325f8 	.word	0x200325f8

00010720 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   10720:	2128      	movs	r1, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   10722:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
   10724:	4a04      	ldr	r2, [pc, #16]	; (10738 <net_buf_id+0x18>)
   10726:	fb01 2303 	mla	r3, r1, r3, r2
   1072a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1072c:	1ac0      	subs	r0, r0, r3
}
   1072e:	4b03      	ldr	r3, [pc, #12]	; (1073c <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   10730:	10c0      	asrs	r0, r0, #3
}
   10732:	4358      	muls	r0, r3
   10734:	4770      	bx	lr
   10736:	bf00      	nop
   10738:	2002096c 	.word	0x2002096c
   1073c:	aaaaaaab 	.word	0xaaaaaaab

00010740 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   10740:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   10742:	2428      	movs	r4, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   10744:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   10746:	4a09      	ldr	r2, [pc, #36]	; (1076c <fixed_data_alloc+0x2c>)
   10748:	fb04 2303 	mla	r3, r4, r3, r2
   1074c:	6a1b      	ldr	r3, [r3, #32]

	*size = MIN(fixed->data_size, *size);
   1074e:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   10750:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   10752:	6823      	ldr	r3, [r4, #0]
   10754:	429a      	cmp	r2, r3
   10756:	bf94      	ite	ls
   10758:	600a      	strls	r2, [r1, #0]
   1075a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1075c:	f7ff ffe0 	bl	10720 <net_buf_id>
   10760:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   10764:	fb02 3000 	mla	r0, r2, r0, r3
   10768:	bd10      	pop	{r4, pc}
   1076a:	bf00      	nop
   1076c:	2002096c 	.word	0x2002096c

00010770 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   10770:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   10774:	4605      	mov	r5, r0
   10776:	9101      	str	r1, [sp, #4]
	u64_t end = z_timeout_end_calc(timeout);
   10778:	4610      	mov	r0, r2
   1077a:	4619      	mov	r1, r3
{
   1077c:	4616      	mov	r6, r2
   1077e:	461f      	mov	r7, r3
	u64_t end = z_timeout_end_calc(timeout);
   10780:	f016 ff8e 	bl	276a0 <z_timeout_end_calc>
   10784:	4680      	mov	r8, r0
   10786:	4689      	mov	r9, r1
   10788:	f04f 0320 	mov.w	r3, #32
   1078c:	f3ef 8a11 	mrs	sl, BASEPRI
   10790:	f383 8811 	msr	BASEPRI, r3
   10794:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   10798:	8b6b      	ldrh	r3, [r5, #26]
   1079a:	2b00      	cmp	r3, #0
   1079c:	d054      	beq.n	10848 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1079e:	8b2a      	ldrh	r2, [r5, #24]
   107a0:	429a      	cmp	r2, r3
   107a2:	d93d      	bls.n	10820 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   107a4:	2200      	movs	r2, #0
   107a6:	2300      	movs	r3, #0
   107a8:	4628      	mov	r0, r5
   107aa:	f00d fdcf 	bl	1e34c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   107ae:	4604      	mov	r4, r0
   107b0:	2800      	cmp	r0, #0
   107b2:	d035      	beq.n	10820 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   107b4:	f38a 8811 	msr	BASEPRI, sl
   107b8:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   107bc:	9b01      	ldr	r3, [sp, #4]
   107be:	2b00      	cmp	r3, #0
   107c0:	d052      	beq.n	10868 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   107c2:	ea56 0307 	orrs.w	r3, r6, r7
   107c6:	d010      	beq.n	107ea <net_buf_alloc_len+0x7a>
   107c8:	1c7b      	adds	r3, r7, #1
   107ca:	bf08      	it	eq
   107cc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   107d0:	d00b      	beq.n	107ea <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			s64_t remaining = end - z_tick_get();
   107d2:	f00e fbe3 	bl	1ef9c <z_tick_get>
   107d6:	ebb8 0600 	subs.w	r6, r8, r0
   107da:	eb69 0701 	sbc.w	r7, r9, r1
   107de:	2e00      	cmp	r6, #0
   107e0:	f177 0300 	sbcs.w	r3, r7, #0
   107e4:	bfbc      	itt	lt
   107e6:	2600      	movlt	r6, #0
   107e8:	2700      	movlt	r7, #0
	return pool->alloc->cb->alloc(buf, size, timeout);
   107ea:	2228      	movs	r2, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   107ec:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   107ee:	f8df 8090 	ldr.w	r8, [pc, #144]	; 10880 <net_buf_alloc_len+0x110>
   107f2:	4620      	mov	r0, r4
   107f4:	fb02 8303 	mla	r3, r2, r3, r8
   107f8:	6a1b      	ldr	r3, [r3, #32]
   107fa:	4632      	mov	r2, r6
   107fc:	681b      	ldr	r3, [r3, #0]
   107fe:	a901      	add	r1, sp, #4
   10800:	681d      	ldr	r5, [r3, #0]
   10802:	463b      	mov	r3, r7
   10804:	47a8      	blx	r5
   10806:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   10808:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1080a:	bb70      	cbnz	r0, 1086a <net_buf_alloc_len+0xfa>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   1080c:	79a0      	ldrb	r0, [r4, #6]
   1080e:	4621      	mov	r1, r4
   10810:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   10814:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   10818:	f016 fd55 	bl	272c6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1081c:	462c      	mov	r4, r5
}
   1081e:	e01f      	b.n	10860 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   10820:	8b68      	ldrh	r0, [r5, #26]
   10822:	1e43      	subs	r3, r0, #1
   10824:	836b      	strh	r3, [r5, #26]
   10826:	f38a 8811 	msr	BASEPRI, sl
   1082a:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1082e:	2318      	movs	r3, #24
   10830:	8b2c      	ldrh	r4, [r5, #24]
   10832:	1a24      	subs	r4, r4, r0
   10834:	6a68      	ldr	r0, [r5, #36]	; 0x24
   10836:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1083a:	4811      	ldr	r0, [pc, #68]	; (10880 <net_buf_alloc_len+0x110>)
   1083c:	4b11      	ldr	r3, [pc, #68]	; (10884 <net_buf_alloc_len+0x114>)
   1083e:	1a2d      	subs	r5, r5, r0
   10840:	10ed      	asrs	r5, r5, #3
   10842:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   10844:	71a5      	strb	r5, [r4, #6]
		goto success;
   10846:	e7b9      	b.n	107bc <net_buf_alloc_len+0x4c>
   10848:	f38a 8811 	msr	BASEPRI, sl
   1084c:	f3bf 8f6f 	isb	sy
   10850:	4632      	mov	r2, r6
   10852:	463b      	mov	r3, r7
   10854:	4628      	mov	r0, r5
   10856:	f00d fd79 	bl	1e34c <z_impl_k_queue_get>
	if (!buf) {
   1085a:	4604      	mov	r4, r0
   1085c:	2800      	cmp	r0, #0
   1085e:	d1ad      	bne.n	107bc <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   10860:	4620      	mov	r0, r4
   10862:	b002      	add	sp, #8
   10864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   10868:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1086a:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1086c:	2201      	movs	r2, #1
	buf->frags = NULL;
   1086e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   10870:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   10872:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   10874:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   10876:	6923      	ldr	r3, [r4, #16]
   10878:	81e2      	strh	r2, [r4, #14]
   1087a:	60a3      	str	r3, [r4, #8]
	return buf;
   1087c:	e7f0      	b.n	10860 <net_buf_alloc_len+0xf0>
   1087e:	bf00      	nop
   10880:	2002096c 	.word	0x2002096c
   10884:	cccccccd 	.word	0xcccccccd

00010888 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   10888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1088c:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1088e:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   10890:	2728      	movs	r7, #40	; 0x28
   10892:	4d16      	ldr	r5, [pc, #88]	; (108ec <net_buf_unref+0x64>)
	while (buf) {
   10894:	b90c      	cbnz	r4, 1089a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   10896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1089a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1089c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   108a0:	3b01      	subs	r3, #1
   108a2:	b2db      	uxtb	r3, r3
   108a4:	7123      	strb	r3, [r4, #4]
   108a6:	2b00      	cmp	r3, #0
   108a8:	d1f5      	bne.n	10896 <net_buf_unref+0xe>
		if (buf->__buf) {
   108aa:	6921      	ldr	r1, [r4, #16]
   108ac:	b159      	cbz	r1, 108c6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   108ae:	7963      	ldrb	r3, [r4, #5]
   108b0:	079b      	lsls	r3, r3, #30
   108b2:	d407      	bmi.n	108c4 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   108b4:	79a3      	ldrb	r3, [r4, #6]
   108b6:	4620      	mov	r0, r4
   108b8:	fb07 5303 	mla	r3, r7, r3, r5
   108bc:	6a1b      	ldr	r3, [r3, #32]
   108be:	681b      	ldr	r3, [r3, #0]
   108c0:	689b      	ldr	r3, [r3, #8]
   108c2:	4798      	blx	r3
			buf->__buf = NULL;
   108c4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   108c6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   108c8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   108ca:	fb07 5300 	mla	r3, r7, r0, r5
   108ce:	69db      	ldr	r3, [r3, #28]
		buf->frags = NULL;
   108d0:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   108d2:	b11b      	cbz	r3, 108dc <net_buf_unref+0x54>
			pool->destroy(buf);
   108d4:	4620      	mov	r0, r4
   108d6:	4798      	blx	r3
{
   108d8:	4644      	mov	r4, r8
   108da:	e7db      	b.n	10894 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   108dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   108e0:	4621      	mov	r1, r4
   108e2:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   108e6:	f016 fcee 	bl	272c6 <k_queue_prepend>
}
   108ea:	e7f5      	b.n	108d8 <net_buf_unref+0x50>
   108ec:	2002096c 	.word	0x2002096c

000108f0 <k_delayed_work_submit>:
{
   108f0:	4601      	mov	r1, r0
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   108f2:	4801      	ldr	r0, [pc, #4]	; (108f8 <k_delayed_work_submit+0x8>)
   108f4:	f00e b9e4 	b.w	1ecc0 <k_delayed_work_submit_to_queue>
   108f8:	200280bc 	.word	0x200280bc

000108fc <address_lifetime_timeout>:
{
   108fc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t current_time = k_uptime_get_32();
   10900:	f012 fcc2 	bl	23288 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   10904:	4b3e      	ldr	r3, [pc, #248]	; (10a00 <address_lifetime_timeout+0x104>)
	u32_t current_time = k_uptime_get_32();
   10906:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   10908:	681c      	ldr	r4, [r3, #0]
   1090a:	b3b4      	cbz	r4, 1097a <address_lifetime_timeout+0x7e>
   1090c:	f1b4 0514 	subs.w	r5, r4, #20
   10910:	d035      	beq.n	1097e <address_lifetime_timeout+0x82>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10912:	6824      	ldr	r4, [r4, #0]
   10914:	b104      	cbz	r4, 10918 <address_lifetime_timeout+0x1c>
   10916:	3c14      	subs	r4, #20
   10918:	f04f 0900 	mov.w	r9, #0
   1091c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   10920:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
		*next_wakeup = NET_TIMEOUT_MAX_VALUE;
   10924:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 10a04 <address_lifetime_timeout+0x108>
	sys_slist_find_and_remove(&active_address_lifetime_timers,
   10928:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 10a00 <address_lifetime_timeout+0x104>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   1092c:	bb4d      	cbnz	r5, 10982 <address_lifetime_timeout+0x86>
	if (found) {
   1092e:	f1b9 0f00 	cmp.w	r9, #0
   10932:	d061      	beq.n	109f8 <address_lifetime_timeout+0xfc>
			return (u32_t)((t * to_hz + off) / from_hz);
   10934:	2300      	movs	r3, #0
   10936:	4a33      	ldr	r2, [pc, #204]	; (10a04 <address_lifetime_timeout+0x108>)
   10938:	42bb      	cmp	r3, r7
   1093a:	bf08      	it	eq
   1093c:	42b2      	cmpeq	r2, r6
   1093e:	bf38      	it	cc
   10940:	4616      	movcc	r6, r2
   10942:	f240 34e7 	movw	r4, #999	; 0x3e7
   10946:	bf38      	it	cc
   10948:	461f      	movcc	r7, r3
   1094a:	03f0      	lsls	r0, r6, #15
   1094c:	1900      	adds	r0, r0, r4
   1094e:	f04f 0400 	mov.w	r4, #0
   10952:	ea4f 31c7 	mov.w	r1, r7, lsl #15
   10956:	ea41 4156 	orr.w	r1, r1, r6, lsr #17
   1095a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1095e:	f04f 0300 	mov.w	r3, #0
   10962:	eb44 0101 	adc.w	r1, r4, r1
   10966:	f7fb ff27 	bl	c7b8 <__aeabi_uldivmod>
		k_delayed_work_submit(&address_lifetime_timer,
   1096a:	4623      	mov	r3, r4
   1096c:	4602      	mov	r2, r0
   1096e:	4826      	ldr	r0, [pc, #152]	; (10a08 <address_lifetime_timeout+0x10c>)
}
   10970:	b001      	add	sp, #4
   10972:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		k_delayed_work_submit(&address_lifetime_timer,
   10976:	f7ff bfbb 	b.w	108f0 <k_delayed_work_submit>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   1097a:	4625      	mov	r5, r4
   1097c:	e7cc      	b.n	10918 <address_lifetime_timeout+0x1c>
   1097e:	462c      	mov	r4, r5
   10980:	e7ca      	b.n	10918 <address_lifetime_timeout+0x1c>
	if (counter > 0) {
   10982:	6a29      	ldr	r1, [r5, #32]
   10984:	b9d9      	cbnz	r1, 109be <address_lifetime_timeout+0xc2>
	if ((s32_t)((start + (u32_t)timeout) - current_time) > 0) {
   10986:	69ab      	ldr	r3, [r5, #24]
   10988:	69ea      	ldr	r2, [r5, #28]
   1098a:	eba3 0308 	sub.w	r3, r3, r8
   1098e:	4413      	add	r3, r2
   10990:	2b00      	cmp	r3, #0
   10992:	dc2e      	bgt.n	109f2 <address_lifetime_timeout+0xf6>
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   10994:	2302      	movs	r3, #2
	ifaddr->lifetime.timer_timeout = 0;
   10996:	61e9      	str	r1, [r5, #28]
	sys_slist_find_and_remove(&active_address_lifetime_timers,
   10998:	4650      	mov	r0, sl
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1099a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	sys_slist_find_and_remove(&active_address_lifetime_timers,
   1099e:	f105 0114 	add.w	r1, r5, #20
   109a2:	f012 fc0b 	bl	231bc <sys_slist_find_and_remove>
		if (current == next) {
   109a6:	42a5      	cmp	r5, r4
   109a8:	d0c1      	beq.n	1092e <address_lifetime_timeout+0x32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   109aa:	b304      	cbz	r4, 109ee <address_lifetime_timeout+0xf2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   109ac:	f114 0314 	adds.w	r3, r4, #20
   109b0:	d002      	beq.n	109b8 <address_lifetime_timeout+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   109b2:	6963      	ldr	r3, [r4, #20]
   109b4:	b103      	cbz	r3, 109b8 <address_lifetime_timeout+0xbc>
   109b6:	3b14      	subs	r3, #20
   109b8:	4625      	mov	r5, r4
   109ba:	461c      	mov	r4, r3
   109bc:	e7b6      	b.n	1092c <address_lifetime_timeout+0x30>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   109be:	45d8      	cmp	r8, fp
   109c0:	d105      	bne.n	109ce <address_lifetime_timeout+0xd2>
		ifaddr->lifetime.timer_start = k_uptime_get_32();
   109c2:	f012 fc61 	bl	23288 <k_uptime_get_32>
		ifaddr->lifetime.wrap_counter--;
   109c6:	6a2b      	ldr	r3, [r5, #32]
		ifaddr->lifetime.timer_start = k_uptime_get_32();
   109c8:	61a8      	str	r0, [r5, #24]
		ifaddr->lifetime.wrap_counter--;
   109ca:	3b01      	subs	r3, #1
   109cc:	622b      	str	r3, [r5, #32]
	if (ifaddr->lifetime.wrap_counter > 0) {
   109ce:	6a2b      	ldr	r3, [r5, #32]
   109d0:	2b00      	cmp	r3, #0
   109d2:	dc0a      	bgt.n	109ea <address_lifetime_timeout+0xee>
		*next_wakeup = ifaddr->lifetime.timer_timeout;
   109d4:	69ea      	ldr	r2, [r5, #28]
			if (next_timeout < timeout_update) {
   109d6:	2300      	movs	r3, #0
   109d8:	42bb      	cmp	r3, r7
   109da:	bf08      	it	eq
   109dc:	42b2      	cmpeq	r2, r6
   109de:	bf3e      	ittt	cc
   109e0:	4616      	movcc	r6, r2
   109e2:	461f      	movcc	r7, r3
				found = true;
   109e4:	f04f 0901 	movcc.w	r9, #1
   109e8:	e7dd      	b.n	109a6 <address_lifetime_timeout+0xaa>
		*next_wakeup = NET_TIMEOUT_MAX_VALUE;
   109ea:	465a      	mov	r2, fp
   109ec:	e7f3      	b.n	109d6 <address_lifetime_timeout+0xda>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   109ee:	4623      	mov	r3, r4
   109f0:	e7e2      	b.n	109b8 <address_lifetime_timeout+0xbc>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   109f2:	45d8      	cmp	r8, fp
   109f4:	d1ee      	bne.n	109d4 <address_lifetime_timeout+0xd8>
   109f6:	e7e4      	b.n	109c2 <address_lifetime_timeout+0xc6>
}
   109f8:	b001      	add	sp, #4
   109fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109fe:	bf00      	nop
   10a00:	200225ac 	.word	0x200225ac
   10a04:	7fffff9b 	.word	0x7fffff9b
   10a08:	200225d4 	.word	0x200225d4

00010a0c <iface_router_run_timer>:
{
   10a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a10:	4605      	mov	r5, r0
	if (k_delayed_work_remaining_get(&router_timer)) {
   10a12:	481c      	ldr	r0, [pc, #112]	; (10a84 <iface_router_run_timer+0x78>)
   10a14:	f012 fc48 	bl	232a8 <k_delayed_work_remaining_get>
   10a18:	b110      	cbz	r0, 10a20 <iface_router_run_timer+0x14>
		k_delayed_work_cancel(&router_timer);
   10a1a:	481a      	ldr	r0, [pc, #104]	; (10a84 <iface_router_run_timer+0x78>)
   10a1c:	f016 fdd4 	bl	275c8 <k_delayed_work_cancel>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   10a20:	4b19      	ldr	r3, [pc, #100]	; (10a88 <iface_router_run_timer+0x7c>)
   10a22:	681c      	ldr	r4, [r3, #0]
   10a24:	b35c      	cbz	r4, 10a7e <iface_router_run_timer+0x72>
   10a26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			(MSEC_PER_SEC * router->lifetime) - current_time;
   10a2a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   10a2e:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   10a30:	b9b4      	cbnz	r4, 10a60 <iface_router_run_timer+0x54>
	if (new_timer != UINT_MAX) {
   10a32:	1c4b      	adds	r3, r1, #1
   10a34:	d023      	beq.n	10a7e <iface_router_run_timer+0x72>
   10a36:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10a3a:	f240 36e7 	movw	r6, #999	; 0x3e7
   10a3e:	2700      	movs	r7, #0
   10a40:	fbe0 6701 	umlal	r6, r7, r0, r1
   10a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10a48:	2300      	movs	r3, #0
   10a4a:	4630      	mov	r0, r6
   10a4c:	4639      	mov	r1, r7
   10a4e:	f7fb feb3 	bl	c7b8 <__aeabi_uldivmod>
		k_delayed_work_submit(&router_timer, K_MSEC(new_timer));
   10a52:	4623      	mov	r3, r4
}
   10a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10a58:	4602      	mov	r2, r0
		k_delayed_work_submit(&router_timer, K_MSEC(new_timer));
   10a5a:	480a      	ldr	r0, [pc, #40]	; (10a84 <iface_router_run_timer+0x78>)
   10a5c:	f7ff bf48 	b.w	108f0 <k_delayed_work_submit>
		u32_t current_timer = router->life_start +
   10a60:	69e0      	ldr	r0, [r4, #28]
			(MSEC_PER_SEC * router->lifetime) - current_time;
   10a62:	8c22      	ldrh	r2, [r4, #32]
		u32_t current_timer = router->life_start +
   10a64:	1b40      	subs	r0, r0, r5
   10a66:	fb06 0202 	mla	r2, r6, r2, r0
		new_timer = MIN(current_timer, new_timer);
   10a6a:	4291      	cmp	r1, r2
   10a6c:	bf28      	it	cs
   10a6e:	4611      	movcs	r1, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   10a70:	b11b      	cbz	r3, 10a7a <iface_router_run_timer+0x6e>
   10a72:	681a      	ldr	r2, [r3, #0]
   10a74:	461c      	mov	r4, r3
   10a76:	4613      	mov	r3, r2
   10a78:	e7da      	b.n	10a30 <iface_router_run_timer+0x24>
   10a7a:	461a      	mov	r2, r3
   10a7c:	e7fa      	b.n	10a74 <iface_router_run_timer+0x68>
}
   10a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10a82:	bf00      	nop
   10a84:	20022758 	.word	0x20022758
   10a88:	200225c4 	.word	0x200225c4

00010a8c <net_if_ipv6_get_best_match.isra.0>:
	}

	return false;
}

static struct in6_addr *net_if_ipv6_get_best_match(struct net_if *iface,
   10a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a90:	4689      	mov	r9, r1
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
	struct in6_addr *src = NULL;
	u8_t len;
	int i;

	if (!ipv6) {
   10a92:	2800      	cmp	r0, #0
   10a94:	d048      	beq.n	10b28 <net_if_ipv6_get_best_match.isra.0+0x9c>
	struct in6_addr *src = NULL;
   10a96:	2500      	movs	r5, #0
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   10a98:	f04f 0c30 	mov.w	ip, #48	; 0x30
		return NULL;
	}

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   10a9c:	462e      	mov	r6, r5
	    addr->address.family == AF_INET6 &&
   10a9e:	f248 0afe 	movw	sl, #33022	; 0x80fe
   10aa2:	1d04      	adds	r4, r0, #4
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   10aa4:	fb0c 0106 	mla	r1, ip, r6, r0
   10aa8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   10aaa:	4f20      	ldr	r7, [pc, #128]	; (10b2c <net_if_ipv6_get_best_match.isra.0+0xa0>)
   10aac:	f023 437d 	bic.w	r3, r3, #4244635648	; 0xfd000000
   10ab0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
   10ab4:	42bb      	cmp	r3, r7
   10ab6:	d123      	bne.n	10b00 <net_if_ipv6_get_best_match.isra.0+0x74>
   10ab8:	f834 3c04 	ldrh.w	r3, [r4, #-4]
   10abc:	2b02      	cmp	r3, #2
   10abe:	d11f      	bne.n	10b00 <net_if_ipv6_get_best_match.isra.0+0x74>
	    addr->address.family == AF_INET6 &&
   10ac0:	888b      	ldrh	r3, [r1, #4]
   10ac2:	4553      	cmp	r3, sl
   10ac4:	d01c      	beq.n	10b00 <net_if_ipv6_get_best_match.isra.0+0x74>
	u8_t len = 0U;
   10ac6:	2300      	movs	r3, #0
   10ac8:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   10acc:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
		if (src[j] == dst[j]) {
   10ad0:	f818 ef01 	ldrb.w	lr, [r8, #1]!
   10ad4:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   10ad8:	f103 0708 	add.w	r7, r3, #8
   10adc:	458e      	cmp	lr, r1
   10ade:	d116      	bne.n	10b0e <net_if_ipv6_get_best_match.isra.0+0x82>
			len += 8U;
   10ae0:	b2fb      	uxtb	r3, r7
	for (j = 0U; j < addr_len; j++) {
   10ae2:	2b80      	cmp	r3, #128	; 0x80
   10ae4:	d1f4      	bne.n	10ad0 <net_if_ipv6_get_best_match.isra.0+0x44>
		if (!is_proper_ipv6_address(&ipv6->unicast[i])) {
			continue;
		}

		len = get_diff_ipv6(dst, &ipv6->unicast[i].address.in6_addr);
		if (len >= *best_so_far) {
   10ae6:	7811      	ldrb	r1, [r2, #0]
   10ae8:	4299      	cmp	r1, r3
   10aea:	d809      	bhi.n	10b00 <net_if_ipv6_get_best_match.isra.0+0x74>
			/* Mesh local address can only be selected for the same
			 * subnet.
			 */
			if (ipv6->unicast[i].is_mesh_local && len < 64) {
   10aec:	fb0c 0106 	mla	r1, ip, r6, r0
   10af0:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
   10af4:	0749      	lsls	r1, r1, #29
   10af6:	d501      	bpl.n	10afc <net_if_ipv6_get_best_match.isra.0+0x70>
   10af8:	2b3f      	cmp	r3, #63	; 0x3f
   10afa:	d901      	bls.n	10b00 <net_if_ipv6_get_best_match.isra.0+0x74>
				continue;
			}

			*best_so_far = len;
   10afc:	4625      	mov	r5, r4
   10afe:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   10b00:	3430      	adds	r4, #48	; 0x30
   10b02:	b116      	cbz	r6, 10b0a <net_if_ipv6_get_best_match.isra.0+0x7e>
			src = &ipv6->unicast[i].address.in6_addr;
		}
	}

	return src;
}
   10b04:	4628      	mov	r0, r5
   10b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b0a:	2601      	movs	r6, #1
   10b0c:	e7ca      	b.n	10aa4 <net_if_ipv6_get_best_match.isra.0+0x18>
			xor = src[j] ^ dst[j];
   10b0e:	ea8e 0101 	eor.w	r1, lr, r1
			for (k = 0U; k < 8; k++) {
   10b12:	b2ff      	uxtb	r7, r7
				if (!(xor & 0x80)) {
   10b14:	f011 0f80 	tst.w	r1, #128	; 0x80
   10b18:	d1e5      	bne.n	10ae6 <net_if_ipv6_get_best_match.isra.0+0x5a>
					len++;
   10b1a:	3301      	adds	r3, #1
   10b1c:	b2db      	uxtb	r3, r3
					xor <<= 1;
   10b1e:	0049      	lsls	r1, r1, #1
			for (k = 0U; k < 8; k++) {
   10b20:	42bb      	cmp	r3, r7
					xor <<= 1;
   10b22:	b2c9      	uxtb	r1, r1
			for (k = 0U; k < 8; k++) {
   10b24:	d1f6      	bne.n	10b14 <net_if_ipv6_get_best_match.isra.0+0x88>
   10b26:	e7de      	b.n	10ae6 <net_if_ipv6_get_best_match.isra.0+0x5a>
		return NULL;
   10b28:	4605      	mov	r5, r0
   10b2a:	e7eb      	b.n	10b04 <net_if_ipv6_get_best_match.isra.0+0x78>
   10b2c:	02000100 	.word	0x02000100

00010b30 <net_if_ipv6_start_dad>:
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   10b30:	2300      	movs	r3, #0
{
   10b32:	b510      	push	{r4, lr}
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   10b34:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
{
   10b38:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10b3a:	6803      	ldr	r3, [r0, #0]
   10b3c:	330c      	adds	r3, #12
   10b3e:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_is_up(iface)) {
   10b42:	07db      	lsls	r3, r3, #31
   10b44:	d519      	bpl.n	10b7a <net_if_ipv6_start_dad+0x4a>
		ifaddr->dad_count = 1U;
   10b46:	2301      	movs	r3, #1
   10b48:	f881 302e 	strb.w	r3, [r1, #46]	; 0x2e
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   10b4c:	f014 fe1d 	bl	2578a <net_ipv6_start_dad>
   10b50:	b998      	cbnz	r0, 10b7a <net_if_ipv6_start_dad+0x4a>
			ifaddr->dad_start = k_uptime_get_32();
   10b52:	f012 fb99 	bl	23288 <k_uptime_get_32>
			sys_slist_append(&active_dad_timers, &ifaddr->dad_node);
   10b56:	f104 0124 	add.w	r1, r4, #36	; 0x24
			ifaddr->dad_start = k_uptime_get_32();
   10b5a:	62a0      	str	r0, [r4, #40]	; 0x28
			sys_slist_append(&active_dad_timers, &ifaddr->dad_node);
   10b5c:	4807      	ldr	r0, [pc, #28]	; (10b7c <net_if_ipv6_start_dad+0x4c>)
   10b5e:	f012 fb23 	bl	231a8 <sys_slist_append>
			if (!k_delayed_work_remaining_get(&dad_timer)) {
   10b62:	4807      	ldr	r0, [pc, #28]	; (10b80 <net_if_ipv6_start_dad+0x50>)
   10b64:	f012 fba0 	bl	232a8 <k_delayed_work_remaining_get>
   10b68:	b938      	cbnz	r0, 10b7a <net_if_ipv6_start_dad+0x4a>
}
   10b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				k_delayed_work_submit(&dad_timer,
   10b6e:	f640 42cd 	movw	r2, #3277	; 0xccd
   10b72:	2300      	movs	r3, #0
   10b74:	4802      	ldr	r0, [pc, #8]	; (10b80 <net_if_ipv6_start_dad+0x50>)
   10b76:	f7ff bebb 	b.w	108f0 <k_delayed_work_submit>
}
   10b7a:	bd10      	pop	{r4, pc}
   10b7c:	200225b4 	.word	0x200225b4
   10b80:	200225f4 	.word	0x200225f4

00010b84 <iface_router_expired>:
{
   10b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t current_time = k_uptime_get_32();
   10b86:	f012 fb7f 	bl	23288 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   10b8a:	4a18      	ldr	r2, [pc, #96]	; (10bec <iface_router_expired+0x68>)
   10b8c:	6813      	ldr	r3, [r2, #0]
   10b8e:	b91b      	cbnz	r3, 10b98 <iface_router_expired+0x14>
}
   10b90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	iface_router_run_timer(current_time);
   10b94:	f7ff bf3a 	b.w	10a0c <iface_router_run_timer>
   10b98:	2100      	movs	r1, #0
			    (MSEC_PER_SEC * router->lifetime) -
   10b9a:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	parent->next = child;
   10b9e:	468c      	mov	ip, r1
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10ba0:	681c      	ldr	r4, [r3, #0]
   10ba2:	69de      	ldr	r6, [r3, #28]
   10ba4:	8c1d      	ldrh	r5, [r3, #32]
   10ba6:	1a36      	subs	r6, r6, r0
   10ba8:	fb0e 6505 	mla	r5, lr, r5, r6
		if ((s32_t)(router->life_start +
   10bac:	2d00      	cmp	r5, #0
   10bae:	461f      	mov	r7, r3
   10bb0:	dc0f      	bgt.n	10bd2 <iface_router_expired+0x4e>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   10bb2:	681d      	ldr	r5, [r3, #0]
   10bb4:	b999      	cbnz	r1, 10bde <iface_router_expired+0x5a>
   10bb6:	6856      	ldr	r6, [r2, #4]
	list->head = node;
   10bb8:	6015      	str	r5, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   10bba:	429e      	cmp	r6, r3
   10bbc:	d100      	bne.n	10bc0 <iface_router_expired+0x3c>
	list->tail = node;
   10bbe:	6055      	str	r5, [r2, #4]
		router->is_used = false;
   10bc0:	460f      	mov	r7, r1
   10bc2:	f893 5022 	ldrb.w	r5, [r3, #34]	; 0x22
	parent->next = child;
   10bc6:	f8c3 c000 	str.w	ip, [r3]
   10bca:	f36c 0500 	bfi	r5, ip, #0, #1
   10bce:	f883 5022 	strb.w	r5, [r3, #34]	; 0x22
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   10bd2:	2c00      	cmp	r4, #0
   10bd4:	d0dc      	beq.n	10b90 <iface_router_expired+0xc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10bd6:	4623      	mov	r3, r4
   10bd8:	4639      	mov	r1, r7
   10bda:	6824      	ldr	r4, [r4, #0]
   10bdc:	e7e1      	b.n	10ba2 <iface_router_expired+0x1e>
	parent->next = child;
   10bde:	600d      	str	r5, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   10be0:	6855      	ldr	r5, [r2, #4]
   10be2:	429d      	cmp	r5, r3
	list->tail = node;
   10be4:	bf08      	it	eq
   10be6:	6051      	streq	r1, [r2, #4]
}
   10be8:	e7ea      	b.n	10bc0 <iface_router_expired+0x3c>
   10bea:	bf00      	nop
   10bec:	200225c4 	.word	0x200225c4

00010bf0 <net_if_queue_tx>:
{
   10bf0:	b510      	push	{r4, lr}
	u8_t tc = net_tx_priority2tc(prio);
   10bf2:	2000      	movs	r0, #0
{
   10bf4:	460c      	mov	r4, r1
	u8_t tc = net_tx_priority2tc(prio);
   10bf6:	f000 ffe5 	bl	11bc4 <net_tx_priority2tc>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   10bfa:	2300      	movs	r3, #0
   10bfc:	4a04      	ldr	r2, [pc, #16]	; (10c10 <net_if_queue_tx+0x20>)
	if (!net_tc_submit_to_tx_queue(tc, pkt)) {
   10bfe:	4621      	mov	r1, r4
   10c00:	e9c4 2301 	strd	r2, r3, [r4, #4]
   10c04:	6023      	str	r3, [r4, #0]
   10c06:	b2c0      	uxtb	r0, r0
}
   10c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!net_tc_submit_to_tx_queue(tc, pkt)) {
   10c0c:	f000 bfc6 	b.w	11b9c <net_tc_submit_to_tx_queue>
   10c10:	000113bd 	.word	0x000113bd

00010c14 <net_if_get_default>:
}
   10c14:	4b02      	ldr	r3, [pc, #8]	; (10c20 <net_if_get_default+0xc>)
	if (__net_if_start == __net_if_end) {
   10c16:	4803      	ldr	r0, [pc, #12]	; (10c24 <net_if_get_default+0x10>)
}
   10c18:	4298      	cmp	r0, r3
   10c1a:	bf08      	it	eq
   10c1c:	2000      	moveq	r0, #0
   10c1e:	4770      	bx	lr
   10c20:	200209e0 	.word	0x200209e0
   10c24:	200209c0 	.word	0x200209c0

00010c28 <net_if_config_ipv6_get>:
	if (iface->config.ip.ipv6) {
   10c28:	6843      	ldr	r3, [r0, #4]
   10c2a:	b15b      	cbz	r3, 10c44 <net_if_config_ipv6_get+0x1c>
		if (ipv6) {
   10c2c:	b909      	cbnz	r1, 10c32 <net_if_config_ipv6_get+0xa>
		return 0;
   10c2e:	2000      	movs	r0, #0
   10c30:	4770      	bx	lr
			*ipv6 = iface->config.ip.ipv6;
   10c32:	600b      	str	r3, [r1, #0]
   10c34:	e7fb      	b.n	10c2e <net_if_config_ipv6_get+0x6>
		iface->config.ip.ipv6 = &ipv6_addresses[i].ipv6;
   10c36:	6042      	str	r2, [r0, #4]
		ipv6_addresses[i].iface = iface;
   10c38:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
		if (ipv6) {
   10c3c:	2900      	cmp	r1, #0
   10c3e:	d0f6      	beq.n	10c2e <net_if_config_ipv6_get+0x6>
			*ipv6 = &ipv6_addresses[i].ipv6;
   10c40:	600a      	str	r2, [r1, #0]
   10c42:	e7f4      	b.n	10c2e <net_if_config_ipv6_get+0x6>
		if (ipv6_addresses[i].iface) {
   10c44:	4a03      	ldr	r2, [pc, #12]	; (10c54 <net_if_config_ipv6_get+0x2c>)
   10c46:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   10c4a:	2b00      	cmp	r3, #0
   10c4c:	d0f3      	beq.n	10c36 <net_if_config_ipv6_get+0xe>
	return -ESRCH;
   10c4e:	f06f 0002 	mvn.w	r0, #2
}
   10c52:	4770      	bx	lr
   10c54:	20022614 	.word	0x20022614

00010c58 <net_if_start_rs>:
{
   10c58:	b510      	push	{r4, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   10c5a:	6844      	ldr	r4, [r0, #4]
	if (!ipv6) {
   10c5c:	b1bc      	cbz	r4, 10c8e <net_if_start_rs+0x36>
	if (!net_ipv6_start_rs(iface)) {
   10c5e:	f014 fe8b 	bl	25978 <net_ipv6_start_rs>
   10c62:	b9a0      	cbnz	r0, 10c8e <net_if_start_rs+0x36>
		ipv6->rs_start = k_uptime_get_32();
   10c64:	f012 fb10 	bl	23288 <k_uptime_get_32>
		sys_slist_append(&active_rs_timers, &ipv6->rs_node);
   10c68:	f504 7182 	add.w	r1, r4, #260	; 0x104
		ipv6->rs_start = k_uptime_get_32();
   10c6c:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		sys_slist_append(&active_rs_timers, &ipv6->rs_node);
   10c70:	4807      	ldr	r0, [pc, #28]	; (10c90 <net_if_start_rs+0x38>)
   10c72:	f012 fa99 	bl	231a8 <sys_slist_append>
		if (!k_delayed_work_remaining_get(&rs_timer)) {
   10c76:	4807      	ldr	r0, [pc, #28]	; (10c94 <net_if_start_rs+0x3c>)
   10c78:	f012 fb16 	bl	232a8 <k_delayed_work_remaining_get>
   10c7c:	b938      	cbnz	r0, 10c8e <net_if_start_rs+0x36>
}
   10c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_delayed_work_submit(&rs_timer, K_MSEC(RS_TIMEOUT));
   10c82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   10c86:	2300      	movs	r3, #0
   10c88:	4802      	ldr	r0, [pc, #8]	; (10c94 <net_if_start_rs+0x3c>)
   10c8a:	f7ff be31 	b.w	108f0 <k_delayed_work_submit>
}
   10c8e:	bd10      	pop	{r4, pc}
   10c90:	200225cc 	.word	0x200225cc
   10c94:	2002279c 	.word	0x2002279c

00010c98 <rs_timeout>:
{
   10c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t current_time = k_uptime_get_32();
   10c9c:	f012 faf4 	bl	23288 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
   10ca0:	4d2d      	ldr	r5, [pc, #180]	; (10d58 <rs_timeout+0xc0>)
	u32_t current_time = k_uptime_get_32();
   10ca2:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
   10ca4:	682a      	ldr	r2, [r5, #0]
   10ca6:	2a00      	cmp	r2, #0
   10ca8:	d054      	beq.n	10d54 <rs_timeout+0xbc>
   10caa:	f5b2 7382 	subs.w	r3, r2, #260	; 0x104
   10cae:	d051      	beq.n	10d54 <rs_timeout+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10cb0:	6814      	ldr	r4, [r2, #0]
   10cb2:	b10c      	cbz	r4, 10cb8 <rs_timeout+0x20>
   10cb4:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
	parent->next = child;
   10cb8:	2700      	movs	r7, #0
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10cba:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 10d64 <rs_timeout+0xcc>
		if ((s32_t)(ipv6->rs_start + RS_TIMEOUT - current_time) > 0) {
   10cbe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   10cc2:	1b92      	subs	r2, r2, r6
   10cc4:	f502 717a 	add.w	r1, r2, #1000	; 0x3e8
   10cc8:	2900      	cmp	r1, #0
   10cca:	dc25      	bgt.n	10d18 <rs_timeout+0x80>
Z_GENLIST_REMOVE(slist, snode)
   10ccc:	6869      	ldr	r1, [r5, #4]
		sys_slist_remove(&active_rs_timers, NULL, &ipv6->rs_node);
   10cce:	f503 7282 	add.w	r2, r3, #260	; 0x104
   10cd2:	4291      	cmp	r1, r2
		ipv6->rs_count++;
   10cd4:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
   10cd8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   10cdc:	f102 0201 	add.w	r2, r2, #1
	list->head = node;
   10ce0:	6028      	str	r0, [r5, #0]
	list->tail = node;
   10ce2:	bf08      	it	eq
   10ce4:	6068      	streq	r0, [r5, #4]
   10ce6:	b2d2      	uxtb	r2, r2
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10ce8:	481c      	ldr	r0, [pc, #112]	; (10d5c <rs_timeout+0xc4>)
	parent->next = child;
   10cea:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
		ipv6->rs_count++;
   10cee:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10cf2:	4540      	cmp	r0, r8
   10cf4:	d10b      	bne.n	10d0e <rs_timeout+0x76>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
   10cf6:	b36c      	cbz	r4, 10d54 <rs_timeout+0xbc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   10cf8:	f514 7282 	adds.w	r2, r4, #260	; 0x104
   10cfc:	d004      	beq.n	10d08 <rs_timeout+0x70>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10cfe:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   10d02:	b10a      	cbz	r2, 10d08 <rs_timeout+0x70>
   10d04:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
{
   10d08:	4623      	mov	r3, r4
   10d0a:	4614      	mov	r4, r2
   10d0c:	e7d7      	b.n	10cbe <rs_timeout+0x26>
			if (iface->config.ip.ipv6 == ipv6) {
   10d0e:	6841      	ldr	r1, [r0, #4]
   10d10:	4299      	cmp	r1, r3
   10d12:	d01a      	beq.n	10d4a <rs_timeout+0xb2>
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10d14:	3020      	adds	r0, #32
   10d16:	e7ec      	b.n	10cf2 <rs_timeout+0x5a>
				      K_MSEC(ipv6->rs_start +
   10d18:	f512 7f7a 	cmn.w	r2, #1000	; 0x3e8
   10d1c:	bf08      	it	eq
   10d1e:	2100      	moveq	r1, #0
   10d20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10d24:	f240 34e7 	movw	r4, #999	; 0x3e7
   10d28:	2500      	movs	r5, #0
   10d2a:	fbe0 4501 	umlal	r4, r5, r0, r1
   10d2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10d32:	2300      	movs	r3, #0
   10d34:	4620      	mov	r0, r4
   10d36:	4629      	mov	r1, r5
   10d38:	f7fb fd3e 	bl	c7b8 <__aeabi_uldivmod>
}
   10d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10d40:	4602      	mov	r2, r0
		k_delayed_work_submit(&rs_timer,
   10d42:	2300      	movs	r3, #0
   10d44:	4806      	ldr	r0, [pc, #24]	; (10d60 <rs_timeout+0xc8>)
   10d46:	f7ff bdd3 	b.w	108f0 <k_delayed_work_submit>
			if (ipv6->rs_count < RS_COUNT) {
   10d4a:	2a02      	cmp	r2, #2
   10d4c:	d8d3      	bhi.n	10cf6 <rs_timeout+0x5e>
				net_if_start_rs(iface);
   10d4e:	f7ff ff83 	bl	10c58 <net_if_start_rs>
   10d52:	e7d0      	b.n	10cf6 <rs_timeout+0x5e>
}
   10d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d58:	200225cc 	.word	0x200225cc
   10d5c:	200209c0 	.word	0x200209c0
   10d60:	2002279c 	.word	0x2002279c
   10d64:	200209e0 	.word	0x200209e0

00010d68 <net_if_stop_rs>:
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   10d68:	6841      	ldr	r1, [r0, #4]
	if (!ipv6) {
   10d6a:	b121      	cbz	r1, 10d76 <net_if_stop_rs+0xe>
	sys_slist_find_and_remove(&active_rs_timers, &ipv6->rs_node);
   10d6c:	4802      	ldr	r0, [pc, #8]	; (10d78 <net_if_stop_rs+0x10>)
   10d6e:	f501 7182 	add.w	r1, r1, #260	; 0x104
   10d72:	f012 ba23 	b.w	231bc <sys_slist_find_and_remove>
}
   10d76:	4770      	bx	lr
   10d78:	200225cc 	.word	0x200225cc

00010d7c <net_if_ipv6_addr_lookup>:
{
   10d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d80:	4606      	mov	r6, r0
   10d82:	460f      	mov	r7, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10d84:	4d17      	ldr	r5, [pc, #92]	; (10de4 <net_if_ipv6_addr_lookup+0x68>)
   10d86:	f8df 8060 	ldr.w	r8, [pc, #96]	; 10de8 <net_if_ipv6_addr_lookup+0x6c>
   10d8a:	4545      	cmp	r5, r8
   10d8c:	d101      	bne.n	10d92 <net_if_ipv6_addr_lookup+0x16>
	return NULL;
   10d8e:	2000      	movs	r0, #0
   10d90:	e023      	b.n	10dda <net_if_ipv6_addr_lookup+0x5e>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   10d92:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
   10d94:	b90c      	cbnz	r4, 10d9a <net_if_ipv6_addr_lookup+0x1e>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10d96:	3520      	adds	r5, #32
   10d98:	e7f7      	b.n	10d8a <net_if_ipv6_addr_lookup+0xe>
			if (!ipv6->unicast[i].is_used ||
   10d9a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   10d9e:	079a      	lsls	r2, r3, #30
   10da0:	d508      	bpl.n	10db4 <net_if_ipv6_addr_lookup+0x38>
   10da2:	8823      	ldrh	r3, [r4, #0]
   10da4:	2b02      	cmp	r3, #2
   10da6:	d105      	bne.n	10db4 <net_if_ipv6_addr_lookup+0x38>
			if (net_ipv6_is_prefix(
   10da8:	2280      	movs	r2, #128	; 0x80
   10daa:	4630      	mov	r0, r6
   10dac:	1d21      	adds	r1, r4, #4
   10dae:	f012 fa3e 	bl	2322e <net_ipv6_is_prefix>
   10db2:	b9a0      	cbnz	r0, 10dde <net_if_ipv6_addr_lookup+0x62>
			if (!ipv6->unicast[i].is_used ||
   10db4:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
   10db8:	079b      	lsls	r3, r3, #30
   10dba:	d5ec      	bpl.n	10d96 <net_if_ipv6_addr_lookup+0x1a>
   10dbc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   10dbe:	2b02      	cmp	r3, #2
   10dc0:	d1e9      	bne.n	10d96 <net_if_ipv6_addr_lookup+0x1a>
			if (net_ipv6_is_prefix(
   10dc2:	2280      	movs	r2, #128	; 0x80
   10dc4:	4630      	mov	r0, r6
   10dc6:	f104 0134 	add.w	r1, r4, #52	; 0x34
   10dca:	f012 fa30 	bl	2322e <net_ipv6_is_prefix>
   10dce:	2800      	cmp	r0, #0
   10dd0:	d0e1      	beq.n	10d96 <net_if_ipv6_addr_lookup+0x1a>
   10dd2:	2030      	movs	r0, #48	; 0x30
				if (ret) {
   10dd4:	b107      	cbz	r7, 10dd8 <net_if_ipv6_addr_lookup+0x5c>
					*ret = iface;
   10dd6:	603d      	str	r5, [r7, #0]
				return &ipv6->unicast[i];
   10dd8:	4420      	add	r0, r4
}
   10dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (net_ipv6_is_prefix(
   10dde:	2000      	movs	r0, #0
   10de0:	e7f8      	b.n	10dd4 <net_if_ipv6_addr_lookup+0x58>
   10de2:	bf00      	nop
   10de4:	200209c0 	.word	0x200209c0
   10de8:	200209e0 	.word	0x200209e0

00010dec <dad_timeout>:
{
   10dec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t current_time = k_uptime_get_32();
   10df0:	f012 fa4a 	bl	23288 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
   10df4:	4e28      	ldr	r6, [pc, #160]	; (10e98 <dad_timeout+0xac>)
	u32_t current_time = k_uptime_get_32();
   10df6:	4607      	mov	r7, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
   10df8:	6833      	ldr	r3, [r6, #0]
   10dfa:	b353      	cbz	r3, 10e52 <dad_timeout+0x66>
   10dfc:	f1b3 0524 	subs.w	r5, r3, #36	; 0x24
   10e00:	d027      	beq.n	10e52 <dad_timeout+0x66>
   10e02:	681c      	ldr	r4, [r3, #0]
   10e04:	b104      	cbz	r4, 10e08 <dad_timeout+0x1c>
   10e06:	3c24      	subs	r4, #36	; 0x24
	parent->next = child;
   10e08:	f04f 0800 	mov.w	r8, #0
		ifaddr->addr_state = NET_ADDR_PREFERRED;
   10e0c:	f04f 0901 	mov.w	r9, #1
			    DAD_TIMEOUT - current_time) > 0) {
   10e10:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10e12:	1bdb      	subs	r3, r3, r7
   10e14:	f103 0164 	add.w	r1, r3, #100	; 0x64
		if ((s32_t)(ifaddr->dad_start +
   10e18:	2900      	cmp	r1, #0
   10e1a:	dc1d      	bgt.n	10e58 <dad_timeout+0x6c>
Z_GENLIST_REMOVE(slist, snode)
   10e1c:	462b      	mov	r3, r5
   10e1e:	6872      	ldr	r2, [r6, #4]
   10e20:	f853 1f24 	ldr.w	r1, [r3, #36]!
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
   10e24:	f105 0a04 	add.w	sl, r5, #4
   10e28:	429a      	cmp	r2, r3
	list->tail = node;
   10e2a:	bf08      	it	eq
   10e2c:	6071      	streq	r1, [r6, #4]
	list->head = node;
   10e2e:	6031      	str	r1, [r6, #0]
   10e30:	4650      	mov	r0, sl
	parent->next = child;
   10e32:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
		ifaddr->addr_state = NET_ADDR_PREFERRED;
   10e36:	f885 902d 	strb.w	r9, [r5, #45]	; 0x2d
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
   10e3a:	a901      	add	r1, sp, #4
		iface = NULL;
   10e3c:	f8cd 8004 	str.w	r8, [sp, #4]
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
   10e40:	f7ff ff9c 	bl	10d7c <net_if_ipv6_addr_lookup>
		if (tmp == ifaddr) {
   10e44:	4285      	cmp	r5, r0
   10e46:	d103      	bne.n	10e50 <dad_timeout+0x64>
			net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   10e48:	4651      	mov	r1, sl
   10e4a:	9801      	ldr	r0, [sp, #4]
   10e4c:	f014 f97c 	bl	25148 <net_ipv6_nbr_rm>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
   10e50:	b9cc      	cbnz	r4, 10e86 <dad_timeout+0x9a>
}
   10e52:	b002      	add	sp, #8
   10e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				      K_MSEC(ifaddr->dad_start +
   10e58:	3364      	adds	r3, #100	; 0x64
   10e5a:	bf08      	it	eq
   10e5c:	2100      	moveq	r1, #0
   10e5e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10e62:	f240 34e7 	movw	r4, #999	; 0x3e7
   10e66:	2500      	movs	r5, #0
   10e68:	fbe0 4501 	umlal	r4, r5, r0, r1
   10e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10e70:	2300      	movs	r3, #0
   10e72:	4620      	mov	r0, r4
   10e74:	4629      	mov	r1, r5
   10e76:	f7fb fc9f 	bl	c7b8 <__aeabi_uldivmod>
		k_delayed_work_submit(&dad_timer,
   10e7a:	2300      	movs	r3, #0
   10e7c:	4602      	mov	r2, r0
   10e7e:	4807      	ldr	r0, [pc, #28]	; (10e9c <dad_timeout+0xb0>)
   10e80:	f7ff fd36 	bl	108f0 <k_delayed_work_submit>
}
   10e84:	e7e5      	b.n	10e52 <dad_timeout+0x66>
Z_GENLIST_PEEK_NEXT(slist, snode)
   10e86:	f114 0324 	adds.w	r3, r4, #36	; 0x24
   10e8a:	d002      	beq.n	10e92 <dad_timeout+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
   10e8e:	b103      	cbz	r3, 10e92 <dad_timeout+0xa6>
   10e90:	3b24      	subs	r3, #36	; 0x24
{
   10e92:	4625      	mov	r5, r4
   10e94:	461c      	mov	r4, r3
   10e96:	e7bb      	b.n	10e10 <dad_timeout+0x24>
   10e98:	200225b4 	.word	0x200225b4
   10e9c:	200225f4 	.word	0x200225f4

00010ea0 <net_if_ipv6_addr_rm>:
{
   10ea0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   10ea4:	6844      	ldr	r4, [r0, #4]
{
   10ea6:	4607      	mov	r7, r0
   10ea8:	460d      	mov	r5, r1
	if (!ipv6) {
   10eaa:	2c00      	cmp	r4, #0
   10eac:	d057      	beq.n	10f5e <net_if_ipv6_addr_rm+0xbe>
		if (!ipv6->unicast[i].is_used) {
   10eae:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   10eb2:	0798      	lsls	r0, r3, #30
   10eb4:	d407      	bmi.n	10ec6 <net_if_ipv6_addr_rm+0x26>
   10eb6:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
   10eba:	079a      	lsls	r2, r3, #30
   10ebc:	d40a      	bmi.n	10ed4 <net_if_ipv6_addr_rm+0x34>
	return false;
   10ebe:	2000      	movs	r0, #0
}
   10ec0:	b004      	add	sp, #16
   10ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
   10ec6:	1d20      	adds	r0, r4, #4
   10ec8:	f012 f9d6 	bl	23278 <net_ipv6_addr_cmp>
   10ecc:	2800      	cmp	r0, #0
   10ece:	d0f2      	beq.n	10eb6 <net_if_ipv6_addr_rm+0x16>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   10ed0:	2600      	movs	r6, #0
   10ed2:	e007      	b.n	10ee4 <net_if_ipv6_addr_rm+0x44>
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
   10ed4:	4629      	mov	r1, r5
   10ed6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10eda:	f012 f9cd 	bl	23278 <net_ipv6_addr_cmp>
   10ede:	2800      	cmp	r0, #0
   10ee0:	d0ed      	beq.n	10ebe <net_if_ipv6_addr_rm+0x1e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   10ee2:	2601      	movs	r6, #1
		if (!ipv6->unicast[i].is_infinite) {
   10ee4:	2130      	movs	r1, #48	; 0x30
   10ee6:	4371      	muls	r1, r6
   10ee8:	1863      	adds	r3, r4, r1
   10eea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   10eee:	07db      	lsls	r3, r3, #31
   10ef0:	d40c      	bmi.n	10f0c <net_if_ipv6_addr_rm+0x6c>
			sys_slist_find_and_remove(
   10ef2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 10f68 <net_if_ipv6_addr_rm+0xc8>
   10ef6:	3114      	adds	r1, #20
   10ef8:	4640      	mov	r0, r8
   10efa:	4421      	add	r1, r4
   10efc:	f012 f95e 	bl	231bc <sys_slist_find_and_remove>
			if (sys_slist_is_empty(
   10f00:	f8d8 3000 	ldr.w	r3, [r8]
   10f04:	b913      	cbnz	r3, 10f0c <net_if_ipv6_addr_rm+0x6c>
				k_delayed_work_cancel(&address_lifetime_timer);
   10f06:	4817      	ldr	r0, [pc, #92]	; (10f64 <net_if_ipv6_addr_rm+0xc4>)
   10f08:	f016 fb5e 	bl	275c8 <k_delayed_work_cancel>
		ipv6->unicast[i].is_used = false;
   10f0c:	2030      	movs	r0, #48	; 0x30
   10f0e:	fb00 4406 	mla	r4, r0, r6, r4
   10f12:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   10f16:	f36f 0341 	bfc	r3, #1, #1
   10f1a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 */
static inline
void net_ipv6_addr_create_solicited_node(const struct in6_addr *src,
					 struct in6_addr *dst)
{
	dst->s6_addr[0]   = 0xFF;
   10f1e:	f240 23ff 	movw	r3, #767	; 0x2ff
   10f22:	9300      	str	r3, [sp, #0]
	dst->s6_addr[1]   = 0x02;
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   10f24:	2300      	movs	r3, #0
   10f26:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   10f2a:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   10f2e:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0U;
   10f32:	f44f 7380 	mov.w	r3, #256	; 0x100
   10f36:	f8ad 300a 	strh.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
	dst->s6_addr[12]  = 0xFF;
   10f3a:	23ff      	movs	r3, #255	; 0xff
   10f3c:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   10f40:	7b6b      	ldrb	r3, [r5, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   10f42:	7bea      	ldrb	r2, [r5, #15]
	dst->s6_addr[13]  = src->s6_addr[13];
   10f44:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   10f48:	7bab      	ldrb	r3, [r5, #14]
   10f4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10f4e:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
   10f52:	4669      	mov	r1, sp
   10f54:	4638      	mov	r0, r7
   10f56:	f012 fb64 	bl	23622 <net_if_ipv6_maddr_rm>
		return true;
   10f5a:	2001      	movs	r0, #1
   10f5c:	e7b0      	b.n	10ec0 <net_if_ipv6_addr_rm+0x20>
		return false;
   10f5e:	4620      	mov	r0, r4
   10f60:	e7ae      	b.n	10ec0 <net_if_ipv6_addr_rm+0x20>
   10f62:	bf00      	nop
   10f64:	200225d4 	.word	0x200225d4
   10f68:	200225ac 	.word	0x200225ac

00010f6c <net_if_ipv6_dad_failed>:
{
   10f6c:	b513      	push	{r0, r1, r4, lr}
   10f6e:	460c      	mov	r4, r1
   10f70:	9001      	str	r0, [sp, #4]
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   10f72:	a901      	add	r1, sp, #4
   10f74:	4620      	mov	r0, r4
   10f76:	f7ff ff01 	bl	10d7c <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   10f7a:	b140      	cbz	r0, 10f8e <net_if_ipv6_dad_failed+0x22>
	sys_slist_find_and_remove(&active_dad_timers, &ifaddr->dad_node);
   10f7c:	f100 0124 	add.w	r1, r0, #36	; 0x24
   10f80:	4804      	ldr	r0, [pc, #16]	; (10f94 <net_if_ipv6_dad_failed+0x28>)
   10f82:	f012 f91b 	bl	231bc <sys_slist_find_and_remove>
	net_if_ipv6_addr_rm(iface, addr);
   10f86:	4621      	mov	r1, r4
   10f88:	9801      	ldr	r0, [sp, #4]
   10f8a:	f7ff ff89 	bl	10ea0 <net_if_ipv6_addr_rm>
}
   10f8e:	b002      	add	sp, #8
   10f90:	bd10      	pop	{r4, pc}
   10f92:	bf00      	nop
   10f94:	200225b4 	.word	0x200225b4

00010f98 <prefix_lifetime_timeout>:
{
   10f98:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t current_time = k_uptime_get_32();
   10f9c:	f012 f974 	bl	23288 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
   10fa0:	4b38      	ldr	r3, [pc, #224]	; (11084 <prefix_lifetime_timeout+0xec>)
	u32_t current_time = k_uptime_get_32();
   10fa2:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
   10fa4:	681c      	ldr	r4, [r3, #0]
   10fa6:	2c00      	cmp	r4, #0
   10fa8:	d050      	beq.n	1104c <prefix_lifetime_timeout+0xb4>
   10faa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   10fae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   10fb2:	f04f 0a00 	mov.w	sl, #0
   10fb6:	6825      	ldr	r5, [r4, #0]
   10fb8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 11088 <prefix_lifetime_timeout+0xf0>
			  ifprefix->lifetime.wrap_counter,
   10fbc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
	if (counter > 0) {
   10fc0:	2b00      	cmp	r3, #0
   10fc2:	d148      	bne.n	11056 <prefix_lifetime_timeout+0xbe>
	if ((s32_t)((start + (u32_t)timeout) - current_time) > 0) {
   10fc4:	6861      	ldr	r1, [r4, #4]
   10fc6:	eba1 0108 	sub.w	r1, r1, r8
   10fca:	4411      	add	r1, r2
   10fcc:	2900      	cmp	r1, #0
   10fce:	dc56      	bgt.n	1107e <prefix_lifetime_timeout+0xe6>
	ifprefix->is_used = false;
   10fd0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
   10fd4:	6a20      	ldr	r0, [r4, #32]
	ifprefix->is_used = false;
   10fd6:	f363 0241 	bfi	r2, r3, #1, #1
   10fda:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
   10fde:	a901      	add	r1, sp, #4
   10fe0:	f7ff fe22 	bl	10c28 <net_if_config_ipv6_get>
   10fe4:	2800      	cmp	r0, #0
   10fe6:	db07      	blt.n	10ff8 <prefix_lifetime_timeout+0x60>
	remove_prefix_addresses(ifprefix->iface, ipv6, &ifprefix->prefix,
   10fe8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   10fec:	9901      	ldr	r1, [sp, #4]
   10fee:	6a20      	ldr	r0, [r4, #32]
   10ff0:	f104 0210 	add.w	r2, r4, #16
   10ff4:	f012 fb37 	bl	23666 <remove_prefix_addresses>
		if (current == next) {
   10ff8:	42a5      	cmp	r5, r4
   10ffa:	d004      	beq.n	11006 <prefix_lifetime_timeout+0x6e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
   10ffc:	2d00      	cmp	r5, #0
   10ffe:	d03c      	beq.n	1107a <prefix_lifetime_timeout+0xe2>
   11000:	682b      	ldr	r3, [r5, #0]
   11002:	462c      	mov	r4, r5
   11004:	bb2d      	cbnz	r5, 11052 <prefix_lifetime_timeout+0xba>
	if (found) {
   11006:	f1ba 0f00 	cmp.w	sl, #0
   1100a:	d01f      	beq.n	1104c <prefix_lifetime_timeout+0xb4>
   1100c:	2300      	movs	r3, #0
   1100e:	4a1e      	ldr	r2, [pc, #120]	; (11088 <prefix_lifetime_timeout+0xf0>)
   11010:	42bb      	cmp	r3, r7
   11012:	bf08      	it	eq
   11014:	42b2      	cmpeq	r2, r6
   11016:	bf38      	it	cc
   11018:	4616      	movcc	r6, r2
   1101a:	f240 34e7 	movw	r4, #999	; 0x3e7
   1101e:	bf38      	it	cc
   11020:	461f      	movcc	r7, r3
   11022:	03f0      	lsls	r0, r6, #15
   11024:	1900      	adds	r0, r0, r4
   11026:	f04f 0400 	mov.w	r4, #0
   1102a:	ea4f 31c7 	mov.w	r1, r7, lsl #15
   1102e:	ea41 4156 	orr.w	r1, r1, r6, lsr #17
   11032:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11036:	f04f 0300 	mov.w	r3, #0
   1103a:	eb44 0101 	adc.w	r1, r4, r1
   1103e:	f7fb fbbb 	bl	c7b8 <__aeabi_uldivmod>
		k_delayed_work_submit(&prefix_lifetime_timer,
   11042:	4623      	mov	r3, r4
   11044:	4602      	mov	r2, r0
   11046:	4811      	ldr	r0, [pc, #68]	; (1108c <prefix_lifetime_timeout+0xf4>)
   11048:	f7ff fc52 	bl	108f0 <k_delayed_work_submit>
}
   1104c:	b002      	add	sp, #8
   1104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11052:	461d      	mov	r5, r3
   11054:	e7b2      	b.n	10fbc <prefix_lifetime_timeout+0x24>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   11056:	45c8      	cmp	r8, r9
   11058:	d101      	bne.n	1105e <prefix_lifetime_timeout+0xc6>
		ifprefix->lifetime.wrap_counter--;
   1105a:	3b01      	subs	r3, #1
   1105c:	60e3      	str	r3, [r4, #12]
	if (ifprefix->lifetime.wrap_counter > 0) {
   1105e:	68e3      	ldr	r3, [r4, #12]
   11060:	2b00      	cmp	r3, #0
   11062:	bfc8      	it	gt
   11064:	464a      	movgt	r2, r9
			if (next_timeout < timeout_update) {
   11066:	2300      	movs	r3, #0
   11068:	42bb      	cmp	r3, r7
   1106a:	bf08      	it	eq
   1106c:	42b2      	cmpeq	r2, r6
   1106e:	bf3e      	ittt	cc
   11070:	4616      	movcc	r6, r2
   11072:	461f      	movcc	r7, r3
				found = true;
   11074:	f04f 0a01 	movcc.w	sl, #1
   11078:	e7be      	b.n	10ff8 <prefix_lifetime_timeout+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
   1107a:	462b      	mov	r3, r5
   1107c:	e7c1      	b.n	11002 <prefix_lifetime_timeout+0x6a>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   1107e:	45c8      	cmp	r8, r9
   11080:	d1f1      	bne.n	11066 <prefix_lifetime_timeout+0xce>
   11082:	e7ea      	b.n	1105a <prefix_lifetime_timeout+0xc2>
   11084:	200225bc 	.word	0x200225bc
   11088:	7fffff9b 	.word	0x7fffff9b
   1108c:	20022738 	.word	0x20022738

00011090 <net_if_ipv6_maddr_lookup>:
{
   11090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11094:	4682      	mov	sl, r0
   11096:	460e      	mov	r6, r1
			if (!ipv6->mcast[i].is_used ||
   11098:	f04f 0b18 	mov.w	fp, #24
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1109c:	4d19      	ldr	r5, [pc, #100]	; (11104 <net_if_ipv6_maddr_lookup+0x74>)
   1109e:	4b1a      	ldr	r3, [pc, #104]	; (11108 <net_if_ipv6_maddr_lookup+0x78>)
   110a0:	429d      	cmp	r5, r3
   110a2:	d101      	bne.n	110a8 <net_if_ipv6_maddr_lookup+0x18>
	return NULL;
   110a4:	2000      	movs	r0, #0
   110a6:	e024      	b.n	110f2 <net_if_ipv6_maddr_lookup+0x62>
		if (ret && *ret && iface != *ret) {
   110a8:	b12e      	cbz	r6, 110b6 <net_if_ipv6_maddr_lookup+0x26>
   110aa:	6832      	ldr	r2, [r6, #0]
   110ac:	b11a      	cbz	r2, 110b6 <net_if_ipv6_maddr_lookup+0x26>
   110ae:	42aa      	cmp	r2, r5
   110b0:	d001      	beq.n	110b6 <net_if_ipv6_maddr_lookup+0x26>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   110b2:	3520      	adds	r5, #32
   110b4:	e7f4      	b.n	110a0 <net_if_ipv6_maddr_lookup+0x10>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   110b6:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
   110b8:	2c00      	cmp	r4, #0
   110ba:	d0fa      	beq.n	110b2 <net_if_ipv6_maddr_lookup+0x22>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   110bc:	2700      	movs	r7, #0
   110be:	f104 0864 	add.w	r8, r4, #100	; 0x64
			if (!ipv6->mcast[i].is_used ||
   110c2:	fb0b f907 	mul.w	r9, fp, r7
   110c6:	eb04 0209 	add.w	r2, r4, r9
   110ca:	f892 2074 	ldrb.w	r2, [r2, #116]	; 0x74
   110ce:	07d2      	lsls	r2, r2, #31
   110d0:	d511      	bpl.n	110f6 <net_if_ipv6_maddr_lookup+0x66>
   110d2:	f838 2c04 	ldrh.w	r2, [r8, #-4]
   110d6:	2a02      	cmp	r2, #2
   110d8:	d10d      	bne.n	110f6 <net_if_ipv6_maddr_lookup+0x66>
			if (net_ipv6_is_prefix(
   110da:	2280      	movs	r2, #128	; 0x80
   110dc:	4641      	mov	r1, r8
   110de:	4650      	mov	r0, sl
   110e0:	f012 f8a5 	bl	2322e <net_ipv6_is_prefix>
   110e4:	4b08      	ldr	r3, [pc, #32]	; (11108 <net_if_ipv6_maddr_lookup+0x78>)
   110e6:	b130      	cbz	r0, 110f6 <net_if_ipv6_maddr_lookup+0x66>
				if (ret) {
   110e8:	b106      	cbz	r6, 110ec <net_if_ipv6_maddr_lookup+0x5c>
					*ret = iface;
   110ea:	6035      	str	r5, [r6, #0]
				return &ipv6->mcast[i];
   110ec:	f109 0060 	add.w	r0, r9, #96	; 0x60
   110f0:	4420      	add	r0, r4
}
   110f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   110f6:	3701      	adds	r7, #1
   110f8:	2f03      	cmp	r7, #3
   110fa:	f108 0818 	add.w	r8, r8, #24
   110fe:	d1e0      	bne.n	110c2 <net_if_ipv6_maddr_lookup+0x32>
   11100:	e7d7      	b.n	110b2 <net_if_ipv6_maddr_lookup+0x22>
   11102:	bf00      	nop
   11104:	200209c0 	.word	0x200209c0
   11108:	200209e0 	.word	0x200209e0

0001110c <net_if_mcast_monitor>:
{
   1110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1110e:	4b0a      	ldr	r3, [pc, #40]	; (11138 <net_if_mcast_monitor+0x2c>)
{
   11110:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   11112:	681b      	ldr	r3, [r3, #0]
{
   11114:	460e      	mov	r6, r1
   11116:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   11118:	b163      	cbz	r3, 11134 <net_if_mcast_monitor+0x28>
   1111a:	681c      	ldr	r4, [r3, #0]
		if (iface == mon->iface) {
   1111c:	6858      	ldr	r0, [r3, #4]
   1111e:	42a8      	cmp	r0, r5
   11120:	d104      	bne.n	1112c <net_if_mcast_monitor+0x20>
			mon->cb(iface, addr, is_joined);
   11122:	463a      	mov	r2, r7
   11124:	4631      	mov	r1, r6
   11126:	4628      	mov	r0, r5
   11128:	689b      	ldr	r3, [r3, #8]
   1112a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1112c:	b114      	cbz	r4, 11134 <net_if_mcast_monitor+0x28>
   1112e:	4623      	mov	r3, r4
   11130:	6824      	ldr	r4, [r4, #0]
   11132:	e7f3      	b.n	1111c <net_if_mcast_monitor+0x10>
}
   11134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11136:	bf00      	nop
   11138:	20022730 	.word	0x20022730

0001113c <net_if_ipv6_addr_onlink>:
{
   1113c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11140:	4606      	mov	r6, r0
   11142:	460f      	mov	r7, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   11144:	4d17      	ldr	r5, [pc, #92]	; (111a4 <net_if_ipv6_addr_onlink+0x68>)
   11146:	f8df 8060 	ldr.w	r8, [pc, #96]	; 111a8 <net_if_ipv6_addr_onlink+0x6c>
   1114a:	4545      	cmp	r5, r8
   1114c:	d101      	bne.n	11152 <net_if_ipv6_addr_onlink+0x16>
	return false;
   1114e:	2000      	movs	r0, #0
   11150:	e023      	b.n	1119a <net_if_ipv6_addr_onlink+0x5e>
		if (iface && *iface && *iface != tmp) {
   11152:	b11e      	cbz	r6, 1115c <net_if_ipv6_addr_onlink+0x20>
   11154:	6833      	ldr	r3, [r6, #0]
   11156:	b10b      	cbz	r3, 1115c <net_if_ipv6_addr_onlink+0x20>
   11158:	42ab      	cmp	r3, r5
   1115a:	d111      	bne.n	11180 <net_if_ipv6_addr_onlink+0x44>
		struct net_if_ipv6 *ipv6 = tmp->config.ip.ipv6;
   1115c:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
   1115e:	b17c      	cbz	r4, 11180 <net_if_ipv6_addr_onlink+0x44>
			if (ipv6->prefix[i].is_used &&
   11160:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   11164:	079a      	lsls	r2, r3, #30
   11166:	d40d      	bmi.n	11184 <net_if_ipv6_addr_onlink+0x48>
   11168:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   1116c:	079b      	lsls	r3, r3, #30
   1116e:	d507      	bpl.n	11180 <net_if_ipv6_addr_onlink+0x44>
			    net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
   11170:	4639      	mov	r1, r7
   11172:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   11176:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   1117a:	f012 f858 	bl	2322e <net_ipv6_is_prefix>
			if (ipv6->prefix[i].is_used &&
   1117e:	b950      	cbnz	r0, 11196 <net_if_ipv6_addr_onlink+0x5a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   11180:	3520      	adds	r5, #32
   11182:	e7e2      	b.n	1114a <net_if_ipv6_addr_onlink+0xe>
			    net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
   11184:	4639      	mov	r1, r7
   11186:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
   1118a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1118e:	f012 f84e 	bl	2322e <net_ipv6_is_prefix>
			if (ipv6->prefix[i].is_used &&
   11192:	2800      	cmp	r0, #0
   11194:	d0e8      	beq.n	11168 <net_if_ipv6_addr_onlink+0x2c>
				if (iface) {
   11196:	b916      	cbnz	r6, 1119e <net_if_ipv6_addr_onlink+0x62>
				return true;
   11198:	2001      	movs	r0, #1
}
   1119a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					*iface = tmp;
   1119e:	6035      	str	r5, [r6, #0]
   111a0:	e7fa      	b.n	11198 <net_if_ipv6_addr_onlink+0x5c>
   111a2:	bf00      	nop
   111a4:	200209c0 	.word	0x200209c0
   111a8:	200209e0 	.word	0x200209e0

000111ac <net_if_ipv6_prefix_unset_timer>:
	if (!prefix->is_used) {
   111ac:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
{
   111b0:	4601      	mov	r1, r0
	if (!prefix->is_used) {
   111b2:	079b      	lsls	r3, r3, #30
   111b4:	d505      	bpl.n	111c2 <net_if_ipv6_prefix_unset_timer+0x16>
	ifprefix->lifetime.timer_timeout = 0;
   111b6:	2300      	movs	r3, #0
	ifprefix->lifetime.wrap_counter = 0;
   111b8:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_slist_find_and_remove(&active_prefix_lifetime_timers,
   111bc:	4801      	ldr	r0, [pc, #4]	; (111c4 <net_if_ipv6_prefix_unset_timer+0x18>)
   111be:	f011 bffd 	b.w	231bc <sys_slist_find_and_remove>
}
   111c2:	4770      	bx	lr
   111c4:	200225bc 	.word	0x200225bc

000111c8 <net_if_ipv6_router_lookup>:
{
   111c8:	b510      	push	{r4, lr}
		if (!routers[i].is_used ||
   111ca:	4c0a      	ldr	r4, [pc, #40]	; (111f4 <net_if_ipv6_router_lookup+0x2c>)
   111cc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   111d0:	07db      	lsls	r3, r3, #31
   111d2:	d50a      	bpl.n	111ea <net_if_ipv6_router_lookup+0x22>
   111d4:	88a3      	ldrh	r3, [r4, #4]
   111d6:	2b02      	cmp	r3, #2
   111d8:	d107      	bne.n	111ea <net_if_ipv6_router_lookup+0x22>
		    routers[i].address.family != family ||
   111da:	69a3      	ldr	r3, [r4, #24]
   111dc:	4298      	cmp	r0, r3
   111de:	d104      	bne.n	111ea <net_if_ipv6_router_lookup+0x22>
		     net_ipv6_addr_cmp(net_if_router_ipv6(&routers[i]),
   111e0:	f104 0008 	add.w	r0, r4, #8
   111e4:	f012 f848 	bl	23278 <net_ipv6_addr_cmp>
		if ((IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6 &&
   111e8:	b908      	cbnz	r0, 111ee <net_if_ipv6_router_lookup+0x26>
	return NULL;
   111ea:	2000      	movs	r0, #0
}
   111ec:	bd10      	pop	{r4, pc}
			return &routers[i];
   111ee:	4620      	mov	r0, r4
	return iface_router_lookup(iface, AF_INET6, addr);
   111f0:	e7fc      	b.n	111ec <net_if_ipv6_router_lookup+0x24>
   111f2:	bf00      	nop
   111f4:	20022778 	.word	0x20022778

000111f8 <net_if_ipv6_router_find_default>:
		    !routers[i].is_default ||
   111f8:	4b0b      	ldr	r3, [pc, #44]	; (11228 <net_if_ipv6_router_find_default+0x30>)
{
   111fa:	b530      	push	{r4, r5, lr}
		    !routers[i].is_default ||
   111fc:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		    routers[i].address.family != family) {
   11200:	889d      	ldrh	r5, [r3, #4]
		    !routers[i].is_default ||
   11202:	f3c2 0140 	ubfx	r1, r2, #1, #1
		if (!routers[i].is_used ||
   11206:	f012 0201 	ands.w	r2, r2, #1
		if (iface && iface != routers[i].iface) {
   1120a:	699c      	ldr	r4, [r3, #24]
		if (!routers[i].is_used ||
   1120c:	d008      	beq.n	11220 <net_if_ipv6_router_find_default+0x28>
   1120e:	b139      	cbz	r1, 11220 <net_if_ipv6_router_find_default+0x28>
		    !routers[i].is_default ||
   11210:	2d02      	cmp	r5, #2
   11212:	d105      	bne.n	11220 <net_if_ipv6_router_find_default+0x28>
		if (iface && iface != routers[i].iface) {
   11214:	b130      	cbz	r0, 11224 <net_if_ipv6_router_find_default+0x2c>
		return &routers[i];
   11216:	42a0      	cmp	r0, r4
   11218:	bf0c      	ite	eq
   1121a:	4618      	moveq	r0, r3
   1121c:	2000      	movne	r0, #0
}
   1121e:	bd30      	pop	{r4, r5, pc}
	return NULL;
   11220:	2000      	movs	r0, #0
   11222:	e7fc      	b.n	1121e <net_if_ipv6_router_find_default+0x26>
		return &routers[i];
   11224:	4618      	mov	r0, r3
   11226:	e7fa      	b.n	1121e <net_if_ipv6_router_find_default+0x26>
   11228:	20022778 	.word	0x20022778

0001122c <net_if_ipv6_router_add>:
{
   1122c:	b538      	push	{r3, r4, r5, lr}
		if (routers[i].is_used) {
   1122e:	4c19      	ldr	r4, [pc, #100]	; (11294 <net_if_ipv6_router_add+0x68>)
{
   11230:	460d      	mov	r5, r1
		if (routers[i].is_used) {
   11232:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   11236:	07d9      	lsls	r1, r3, #31
   11238:	d42a      	bmi.n	11290 <net_if_ipv6_router_add+0x64>
		routers[i].address.family = family;
   1123a:	2102      	movs	r1, #2
		routers[i].iface = iface;
   1123c:	61a0      	str	r0, [r4, #24]
		routers[i].address.family = family;
   1123e:	80a1      	strh	r1, [r4, #4]
		if (lifetime) {
   11240:	f043 0301 	orr.w	r3, r3, #1
   11244:	b1e2      	cbz	r2, 11280 <net_if_ipv6_router_add+0x54>
			routers[i].is_default = true;
   11246:	f023 0306 	bic.w	r3, r3, #6
   1124a:	430b      	orrs	r3, r1
   1124c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			routers[i].lifetime = lifetime;
   11250:	8422      	strh	r2, [r4, #32]
			routers[i].life_start = k_uptime_get_32();
   11252:	f012 f819 	bl	23288 <k_uptime_get_32>
			sys_slist_append(&active_router_timers,
   11256:	4621      	mov	r1, r4
			routers[i].life_start = k_uptime_get_32();
   11258:	61e0      	str	r0, [r4, #28]
			sys_slist_append(&active_router_timers,
   1125a:	480f      	ldr	r0, [pc, #60]	; (11298 <net_if_ipv6_router_add+0x6c>)
   1125c:	f011 ffa4 	bl	231a8 <sys_slist_append>
			iface_router_run_timer(routers[i].life_start);
   11260:	69e0      	ldr	r0, [r4, #28]
   11262:	f7ff fbd3 	bl	10a0c <iface_router_run_timer>
   11266:	4c0d      	ldr	r4, [pc, #52]	; (1129c <net_if_ipv6_router_add+0x70>)
   11268:	462b      	mov	r3, r5
   1126a:	3510      	adds	r5, #16
   1126c:	4622      	mov	r2, r4
   1126e:	6818      	ldr	r0, [r3, #0]
   11270:	6859      	ldr	r1, [r3, #4]
   11272:	3308      	adds	r3, #8
   11274:	c203      	stmia	r2!, {r0, r1}
   11276:	42ab      	cmp	r3, r5
   11278:	4614      	mov	r4, r2
   1127a:	d1f7      	bne.n	1126c <net_if_ipv6_router_add+0x40>
		return &routers[i];
   1127c:	4805      	ldr	r0, [pc, #20]	; (11294 <net_if_ipv6_router_add+0x68>)
}
   1127e:	bd38      	pop	{r3, r4, r5, pc}
			routers[i].is_default = false;
   11280:	f023 0306 	bic.w	r3, r3, #6
   11284:	f043 0304 	orr.w	r3, r3, #4
			routers[i].lifetime = 0;
   11288:	8422      	strh	r2, [r4, #32]
			routers[i].is_default = false;
   1128a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1128e:	e7ea      	b.n	11266 <net_if_ipv6_router_add+0x3a>
	return NULL;
   11290:	2000      	movs	r0, #0
	return iface_router_add(iface, AF_INET6, addr, false, lifetime);
   11292:	e7f4      	b.n	1127e <net_if_ipv6_router_add+0x52>
   11294:	20022778 	.word	0x20022778
   11298:	200225c4 	.word	0x200225c4
   1129c:	20022780 	.word	0x20022780

000112a0 <net_if_ipv6_router_rm>:
	if (!router->is_used) {
   112a0:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
{
   112a4:	b510      	push	{r4, lr}
	if (!router->is_used) {
   112a6:	f013 0301 	ands.w	r3, r3, #1
{
   112aa:	4604      	mov	r4, r0
	if (!router->is_used) {
   112ac:	d010      	beq.n	112d0 <net_if_ipv6_router_rm+0x30>
	if (sys_slist_find_and_remove(&active_router_timers, &router->node)) {
   112ae:	4601      	mov	r1, r0
   112b0:	4808      	ldr	r0, [pc, #32]	; (112d4 <net_if_ipv6_router_rm+0x34>)
   112b2:	f011 ff83 	bl	231bc <sys_slist_find_and_remove>
   112b6:	b118      	cbz	r0, 112c0 <net_if_ipv6_router_rm+0x20>
		iface_router_run_timer(k_uptime_get_32());
   112b8:	f011 ffe6 	bl	23288 <k_uptime_get_32>
   112bc:	f7ff fba6 	bl	10a0c <iface_router_run_timer>
	return true;
   112c0:	2001      	movs	r0, #1
	router->is_used = false;
   112c2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   112c6:	f36f 0300 	bfc	r3, #0, #1
   112ca:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
   112ce:	bd10      	pop	{r4, pc}
		return false;
   112d0:	4618      	mov	r0, r3
   112d2:	e7fc      	b.n	112ce <net_if_ipv6_router_rm+0x2e>
   112d4:	200225c4 	.word	0x200225c4

000112d8 <net_if_ipv6_select_src_addr>:
{
	struct in6_addr *src = NULL;
	u8_t best_match = 0U;
	struct net_if *iface;

	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
   112d8:	f248 03fe 	movw	r3, #33022	; 0x80fe
{
   112dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8_t best_match = 0U;
   112de:	2400      	movs	r4, #0
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
   112e0:	880a      	ldrh	r2, [r1, #0]
{
   112e2:	460d      	mov	r5, r1
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
   112e4:	429a      	cmp	r2, r3
	u8_t best_match = 0U;
   112e6:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
   112ea:	d002      	beq.n	112f2 <net_if_ipv6_select_src_addr+0x1a>
   112ec:	780b      	ldrb	r3, [r1, #0]
   112ee:	2bff      	cmp	r3, #255	; 0xff
   112f0:	d114      	bne.n	1131c <net_if_ipv6_select_src_addr+0x44>
   112f2:	4d17      	ldr	r5, [pc, #92]	; (11350 <net_if_ipv6_select_src_addr+0x78>)
							 &best_match);
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
   112f4:	4e17      	ldr	r6, [pc, #92]	; (11354 <net_if_ipv6_select_src_addr+0x7c>)
		for (iface = __net_if_start;
   112f6:	b318      	cbz	r0, 11340 <net_if_ipv6_select_src_addr+0x68>
				break;
			}
		}

		if (dst_iface) {
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   112f8:	2101      	movs	r1, #1
   112fa:	f012 fadd 	bl	238b8 <net_if_ipv6_get_ll>
   112fe:	e016      	b.n	1132e <net_if_ipv6_select_src_addr+0x56>
			addr = net_if_ipv6_get_best_match(iface, dst,
   11300:	6870      	ldr	r0, [r6, #4]
   11302:	4629      	mov	r1, r5
   11304:	f10d 0207 	add.w	r2, sp, #7
   11308:	f7ff fbc0 	bl	10a8c <net_if_ipv6_get_best_match.isra.0>
			if (addr) {
   1130c:	2800      	cmp	r0, #0
   1130e:	bf18      	it	ne
   11310:	4604      	movne	r4, r0
		     iface++) {
   11312:	3620      	adds	r6, #32
		     !dst_iface && iface != __net_if_end;
   11314:	42be      	cmp	r6, r7
   11316:	d1f3      	bne.n	11300 <net_if_ipv6_select_src_addr+0x28>
		}
	}

	if (!src) {
   11318:	b9bc      	cbnz	r4, 1134a <net_if_ipv6_select_src_addr+0x72>
   1131a:	e013      	b.n	11344 <net_if_ipv6_select_src_addr+0x6c>
		for (iface = __net_if_start;
   1131c:	4e0c      	ldr	r6, [pc, #48]	; (11350 <net_if_ipv6_select_src_addr+0x78>)
		     !dst_iface && iface != __net_if_end;
   1131e:	4f0d      	ldr	r7, [pc, #52]	; (11354 <net_if_ipv6_select_src_addr+0x7c>)
		for (iface = __net_if_start;
   11320:	2800      	cmp	r0, #0
   11322:	d0f7      	beq.n	11314 <net_if_ipv6_select_src_addr+0x3c>
			src = net_if_ipv6_get_best_match(dst_iface, dst,
   11324:	6840      	ldr	r0, [r0, #4]
   11326:	f10d 0207 	add.w	r2, sp, #7
   1132a:	f7ff fbaf 	bl	10a8c <net_if_ipv6_get_best_match.isra.0>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1132e:	4604      	mov	r4, r0
   11330:	e7f2      	b.n	11318 <net_if_ipv6_select_src_addr+0x40>
			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   11332:	2101      	movs	r1, #1
   11334:	4628      	mov	r0, r5
   11336:	f012 fabf 	bl	238b8 <net_if_ipv6_get_ll>
			if (addr) {
   1133a:	4604      	mov	r4, r0
   1133c:	b928      	cbnz	r0, 1134a <net_if_ipv6_select_src_addr+0x72>
		     iface++) {
   1133e:	3520      	adds	r5, #32
		     !dst_iface && iface != __net_if_end;
   11340:	42b5      	cmp	r5, r6
   11342:	d1f6      	bne.n	11332 <net_if_ipv6_select_src_addr+0x5a>
		return net_ipv6_unspecified_address();
   11344:	f000 f944 	bl	115d0 <net_ipv6_unspecified_address>
   11348:	4604      	mov	r4, r0
	}

	return src;
}
   1134a:	4620      	mov	r0, r4
   1134c:	b003      	add	sp, #12
   1134e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11350:	200209c0 	.word	0x200209c0
   11354:	200209e0 	.word	0x200209e0

00011358 <net_if_ipv6_select_src_iface>:

struct net_if *net_if_ipv6_select_src_iface(const struct in6_addr *dst)
{
   11358:	b513      	push	{r0, r1, r4, lr}
   1135a:	4601      	mov	r1, r0
	const struct in6_addr *src;
	struct net_if *iface;

	src = net_if_ipv6_select_src_addr(NULL, dst);
   1135c:	2000      	movs	r0, #0
   1135e:	f7ff ffbb 	bl	112d8 <net_if_ipv6_select_src_addr>
   11362:	4604      	mov	r4, r0
	if (src == net_ipv6_unspecified_address()) {
   11364:	f000 f934 	bl	115d0 <net_ipv6_unspecified_address>
   11368:	4284      	cmp	r4, r0
   1136a:	d106      	bne.n	1137a <net_if_ipv6_select_src_iface+0x22>
	if (__net_if_start == __net_if_end) {
   1136c:	4807      	ldr	r0, [pc, #28]	; (1138c <net_if_ipv6_select_src_iface+0x34>)
		return NULL;
   1136e:	4b08      	ldr	r3, [pc, #32]	; (11390 <net_if_ipv6_select_src_iface+0x38>)
   11370:	4298      	cmp	r0, r3
   11372:	bf08      	it	eq
   11374:	2000      	moveq	r0, #0
	if (!net_if_ipv6_addr_lookup(src, &iface)) {
		return net_if_get_default();
	}

	return iface;
}
   11376:	b002      	add	sp, #8
   11378:	bd10      	pop	{r4, pc}
	if (!net_if_ipv6_addr_lookup(src, &iface)) {
   1137a:	4620      	mov	r0, r4
   1137c:	a901      	add	r1, sp, #4
   1137e:	f7ff fcfd 	bl	10d7c <net_if_ipv6_addr_lookup>
   11382:	2800      	cmp	r0, #0
   11384:	d0f2      	beq.n	1136c <net_if_ipv6_select_src_iface+0x14>
	return iface;
   11386:	9801      	ldr	r0, [sp, #4]
   11388:	e7f5      	b.n	11376 <net_if_ipv6_select_src_iface+0x1e>
   1138a:	bf00      	nop
   1138c:	200209c0 	.word	0x200209c0
   11390:	200209e0 	.word	0x200209e0

00011394 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   11394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   11396:	4b08      	ldr	r3, [pc, #32]	; (113b8 <net_if_call_link_cb+0x24>)
{
   11398:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1139a:	681b      	ldr	r3, [r3, #0]
{
   1139c:	460e      	mov	r6, r1
   1139e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   113a0:	b14b      	cbz	r3, 113b6 <net_if_call_link_cb+0x22>
   113a2:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
   113a4:	463a      	mov	r2, r7
   113a6:	4631      	mov	r1, r6
   113a8:	4628      	mov	r0, r5
   113aa:	685b      	ldr	r3, [r3, #4]
   113ac:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   113ae:	b114      	cbz	r4, 113b6 <net_if_call_link_cb+0x22>
   113b0:	4623      	mov	r3, r4
   113b2:	6824      	ldr	r4, [r4, #0]
   113b4:	e7f6      	b.n	113a4 <net_if_call_link_cb+0x10>
	}
}
   113b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   113b8:	20022728 	.word	0x20022728

000113bc <process_tx_packet>:
	struct net_linkaddr ll_dst = {
   113bc:	2300      	movs	r3, #0
{
   113be:	b5f0      	push	{r4, r5, r6, r7, lr}
   113c0:	b085      	sub	sp, #20
	struct net_linkaddr ll_dst = {
   113c2:	e9cd 3300 	strd	r3, r3, [sp]
Z_GENLIST_IS_EMPTY(slist)
   113c6:	4b1f      	ldr	r3, [pc, #124]	; (11444 <process_tx_packet+0x88>)
{
   113c8:	4604      	mov	r4, r0
	if (!sys_slist_is_empty(&link_callbacks)) {
   113ca:	681b      	ldr	r3, [r3, #0]
	iface = net_pkt_iface(pkt);
   113cc:	6a06      	ldr	r6, [r0, #32]
	if (!sys_slist_is_empty(&link_callbacks)) {
   113ce:	b1ab      	cbz	r3, 113fc <process_tx_packet+0x40>
		if (net_linkaddr_set(&ll_dst_storage,
   113d0:	6b01      	ldr	r1, [r0, #48]	; 0x30
   113d2:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   113d6:	b189      	cbz	r1, 113fc <process_tx_packet+0x40>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   113d8:	2d06      	cmp	r5, #6
   113da:	d80f      	bhi.n	113fc <process_tx_packet+0x40>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
   113dc:	f10d 070a 	add.w	r7, sp, #10
   113e0:	2306      	movs	r3, #6
   113e2:	462a      	mov	r2, r5
   113e4:	4638      	mov	r0, r7
	lladdr_store->len = new_len;
   113e6:	f88d 5009 	strb.w	r5, [sp, #9]
	memcpy(lladdr_store->addr, new_addr, new_len);
   113ea:	f016 fab9 	bl	27960 <__memcpy_chk>
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
   113ee:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
			ll_dst.addr = ll_dst_storage.addr;
   113f2:	9700      	str	r7, [sp, #0]
			ll_dst.len = ll_dst_storage.len;
   113f4:	f88d 5004 	strb.w	r5, [sp, #4]
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
   113f8:	f88d 3005 	strb.w	r3, [sp, #5]
	context = net_pkt_context(pkt);
   113fc:	69e7      	ldr	r7, [r4, #28]
   113fe:	6833      	ldr	r3, [r6, #0]
   11400:	330c      	adds	r3, #12
   11402:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   11406:	07db      	lsls	r3, r3, #31
   11408:	d519      	bpl.n	1143e <process_tx_packet+0x82>
		status = net_if_l2(iface)->send(iface, pkt);
   1140a:	4630      	mov	r0, r6
   1140c:	f011 fef1 	bl	231f2 <net_if_l2>
   11410:	4621      	mov	r1, r4
   11412:	6843      	ldr	r3, [r0, #4]
   11414:	4630      	mov	r0, r6
   11416:	4798      	blx	r3
	if (status < 0) {
   11418:	1e05      	subs	r5, r0, #0
   1141a:	da02      	bge.n	11422 <process_tx_packet+0x66>
		net_pkt_unref(pkt);
   1141c:	4620      	mov	r0, r4
   1141e:	f012 ff8e 	bl	2433e <net_pkt_unref>
	if (context) {
   11422:	b11f      	cbz	r7, 1142c <process_tx_packet+0x70>
		net_context_send_cb(context, status);
   11424:	4629      	mov	r1, r5
   11426:	4638      	mov	r0, r7
   11428:	f011 fee8 	bl	231fc <net_context_send_cb>
	if (ll_dst.addr) {
   1142c:	9b00      	ldr	r3, [sp, #0]
   1142e:	b123      	cbz	r3, 1143a <process_tx_packet+0x7e>
		net_if_call_link_cb(iface, &ll_dst, status);
   11430:	462a      	mov	r2, r5
   11432:	4669      	mov	r1, sp
   11434:	4630      	mov	r0, r6
   11436:	f7ff ffad 	bl	11394 <net_if_call_link_cb>
}
   1143a:	b005      	add	sp, #20
   1143c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = -ENETDOWN;
   1143e:	f06f 0572 	mvn.w	r5, #114	; 0x72
   11442:	e7eb      	b.n	1141c <process_tx_packet+0x60>
   11444:	20022728 	.word	0x20022728

00011448 <net_if_get_by_index>:
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
}

struct net_if *net_if_get_by_index(int index)
{
	if (index <= 0) {
   11448:	2800      	cmp	r0, #0
   1144a:	dd08      	ble.n	1145e <net_if_get_by_index+0x16>
		return NULL;
	}

	if (&__net_if_start[index - 1] >= __net_if_end) {
   1144c:	1e43      	subs	r3, r0, #1
   1144e:	4805      	ldr	r0, [pc, #20]	; (11464 <net_if_get_by_index+0x1c>)
   11450:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		return NULL;
   11454:	4b04      	ldr	r3, [pc, #16]	; (11468 <net_if_get_by_index+0x20>)
   11456:	4298      	cmp	r0, r3
   11458:	bf28      	it	cs
   1145a:	2000      	movcs	r0, #0
   1145c:	4770      	bx	lr
   1145e:	2000      	movs	r0, #0
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index - 1];
}
   11460:	4770      	bx	lr
   11462:	bf00      	nop
   11464:	200209c0 	.word	0x200209c0
   11468:	200209e0 	.word	0x200209e0

0001146c <net_if_get_by_iface>:

int net_if_get_by_iface(struct net_if *iface)
{
	if (!(iface >= __net_if_start && iface < __net_if_end)) {
   1146c:	4b06      	ldr	r3, [pc, #24]	; (11488 <net_if_get_by_iface+0x1c>)
   1146e:	4298      	cmp	r0, r3
   11470:	d306      	bcc.n	11480 <net_if_get_by_iface+0x14>
   11472:	4a06      	ldr	r2, [pc, #24]	; (1148c <net_if_get_by_iface+0x20>)
   11474:	4290      	cmp	r0, r2
   11476:	d203      	bcs.n	11480 <net_if_get_by_iface+0x14>
		return -1;
	}

	return (iface - __net_if_start) + 1;
   11478:	1ac0      	subs	r0, r0, r3
   1147a:	1140      	asrs	r0, r0, #5
   1147c:	3001      	adds	r0, #1
   1147e:	4770      	bx	lr
		return -1;
   11480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   11484:	4770      	bx	lr
   11486:	bf00      	nop
   11488:	200209c0 	.word	0x200209c0
   1148c:	200209e0 	.word	0x200209e0

00011490 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   11490:	b570      	push	{r4, r5, r6, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   11492:	4c1f      	ldr	r4, [pc, #124]	; (11510 <net_if_init+0x80>)
	net_tc_tx_init();
   11494:	f000 fb9e 	bl	11bd4 <net_tc_tx_init>
	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   11498:	4625      	mov	r5, r4
   1149a:	4e1e      	ldr	r6, [pc, #120]	; (11514 <net_if_init+0x84>)
   1149c:	42b4      	cmp	r4, r6
   1149e:	d12d      	bne.n	114fc <net_if_init+0x6c>
	     iface++, if_count++) {
		init_iface(iface);
	}

	if (iface == __net_if_start) {
   114a0:	42ac      	cmp	r4, r5
   114a2:	d02a      	beq.n	114fa <net_if_init+0x6a>
	list->head = NULL;
   114a4:	2400      	movs	r4, #0
	k_delayed_work_init(&dad_timer, dad_timeout);
   114a6:	491c      	ldr	r1, [pc, #112]	; (11518 <net_if_init+0x88>)
   114a8:	481c      	ldr	r0, [pc, #112]	; (1151c <net_if_init+0x8c>)
   114aa:	f016 f885 	bl	275b8 <k_delayed_work_init>
   114ae:	4b1c      	ldr	r3, [pc, #112]	; (11520 <net_if_init+0x90>)
	k_delayed_work_init(&rs_timer, rs_timeout);
   114b0:	491c      	ldr	r1, [pc, #112]	; (11524 <net_if_init+0x94>)
   114b2:	481d      	ldr	r0, [pc, #116]	; (11528 <net_if_init+0x98>)
	list->tail = NULL;
   114b4:	e9c3 4400 	strd	r4, r4, [r3]
   114b8:	f016 f87e 	bl	275b8 <k_delayed_work_init>
	list->head = NULL;
   114bc:	4b1b      	ldr	r3, [pc, #108]	; (1152c <net_if_init+0x9c>)
	k_delayed_work_init(&address_lifetime_timer, address_lifetime_timeout);
   114be:	491c      	ldr	r1, [pc, #112]	; (11530 <net_if_init+0xa0>)
   114c0:	481c      	ldr	r0, [pc, #112]	; (11534 <net_if_init+0xa4>)
	list->tail = NULL;
   114c2:	e9c3 4400 	strd	r4, r4, [r3]
   114c6:	f016 f877 	bl	275b8 <k_delayed_work_init>
	k_delayed_work_init(&prefix_lifetime_timer, prefix_lifetime_timeout);
   114ca:	491b      	ldr	r1, [pc, #108]	; (11538 <net_if_init+0xa8>)
   114cc:	481b      	ldr	r0, [pc, #108]	; (1153c <net_if_init+0xac>)
   114ce:	f016 f873 	bl	275b8 <k_delayed_work_init>
		ipv6_addresses[i].ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   114d2:	2340      	movs	r3, #64	; 0x40
   114d4:	4d1a      	ldr	r5, [pc, #104]	; (11540 <net_if_init+0xb0>)
   114d6:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
		ipv6_addresses[i].ipv6.base_reachable_time = REACHABLE_TIME;
   114da:	f247 5330 	movw	r3, #30000	; 0x7530
 * @param ipv6 IPv6 address configuration
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if_ipv6 *ipv6)
{
#if defined(CONFIG_NET_NATIVE_IPV6)
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
   114de:	4628      	mov	r0, r5
   114e0:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
   114e4:	f012 fa16 	bl	23914 <net_if_ipv6_calc_reachable_time>
	k_delayed_work_init(&router_timer, iface_router_expired);
   114e8:	4916      	ldr	r1, [pc, #88]	; (11544 <net_if_init+0xb4>)
   114ea:	f8c5 00fc 	str.w	r0, [r5, #252]	; 0xfc
   114ee:	4816      	ldr	r0, [pc, #88]	; (11548 <net_if_init+0xb8>)
   114f0:	f016 f862 	bl	275b8 <k_delayed_work_init>
	list->head = NULL;
   114f4:	4b15      	ldr	r3, [pc, #84]	; (1154c <net_if_init+0xbc>)
	list->tail = NULL;
   114f6:	e9c3 4400 	strd	r4, r4, [r3]
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   114fa:	bd70      	pop	{r4, r5, r6, pc}
	return iface->if_dev->dev;
   114fc:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   114fe:	681b      	ldr	r3, [r3, #0]
   11500:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   11502:	b11b      	cbz	r3, 1150c <net_if_init+0x7c>
   11504:	681b      	ldr	r3, [r3, #0]
   11506:	b10b      	cbz	r3, 1150c <net_if_init+0x7c>
	api->init(iface);
   11508:	4620      	mov	r0, r4
   1150a:	4798      	blx	r3
	     iface++, if_count++) {
   1150c:	3420      	adds	r4, #32
   1150e:	e7c5      	b.n	1149c <net_if_init+0xc>
   11510:	200209c0 	.word	0x200209c0
   11514:	200209e0 	.word	0x200209e0
   11518:	00010ded 	.word	0x00010ded
   1151c:	200225f4 	.word	0x200225f4
   11520:	200225b4 	.word	0x200225b4
   11524:	00010c99 	.word	0x00010c99
   11528:	2002279c 	.word	0x2002279c
   1152c:	200225cc 	.word	0x200225cc
   11530:	000108fd 	.word	0x000108fd
   11534:	200225d4 	.word	0x200225d4
   11538:	00010f99 	.word	0x00010f99
   1153c:	20022738 	.word	0x20022738
   11540:	20022614 	.word	0x20022614
   11544:	00010b85 	.word	0x00010b85
   11548:	20022758 	.word	0x20022758
   1154c:	200225c4 	.word	0x200225c4

00011550 <net_if_post_init>:

void net_if_post_init(void)
{
   11550:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   11552:	4c08      	ldr	r4, [pc, #32]	; (11574 <net_if_post_init+0x24>)
   11554:	4d08      	ldr	r5, [pc, #32]	; (11578 <net_if_post_init+0x28>)
   11556:	42ac      	cmp	r4, r5
   11558:	d100      	bne.n	1155c <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1155a:	bd38      	pop	{r3, r4, r5, pc}
   1155c:	6823      	ldr	r3, [r4, #0]
   1155e:	330c      	adds	r3, #12
   11560:	e8d3 3faf 	lda	r3, [r3]
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   11564:	071b      	lsls	r3, r3, #28
   11566:	d402      	bmi.n	1156e <net_if_post_init+0x1e>
			net_if_up(iface);
   11568:	4620      	mov	r0, r4
   1156a:	f012 fa39 	bl	239e0 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1156e:	3420      	adds	r4, #32
   11570:	e7f1      	b.n	11556 <net_if_post_init+0x6>
   11572:	bf00      	nop
   11574:	200209c0 	.word	0x200209c0
   11578:	200209e0 	.word	0x200209e0

0001157c <net_sprint_ll_addr_buf>:

char *net_sprint_ll_addr_buf(const u8_t *ll, u8_t ll_len,
			     char *buf, int buflen)
{
	u8_t i, len, blen;
	char *ptr = buf;
   1157c:	3902      	subs	r1, #2
   1157e:	b2c9      	uxtb	r1, r1
   11580:	2906      	cmp	r1, #6
{
   11582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11586:	4616      	mov	r6, r2
   11588:	bf8c      	ite	hi
   1158a:	2206      	movhi	r2, #6
   1158c:	4a0f      	ldrls	r2, [pc, #60]	; (115cc <net_sprint_ll_addr_buf+0x50>)
   1158e:	4605      	mov	r5, r0
   11590:	bf98      	it	ls
   11592:	5c52      	ldrbls	r2, [r2, r1]
		break;
	}

	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
		*ptr++ = ':';
   11594:	f04f 083a 	mov.w	r8, #58	; 0x3a
   11598:	1887      	adds	r7, r0, r2
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
   1159a:	4630      	mov	r0, r6
   1159c:	b2dc      	uxtb	r4, r3
   1159e:	b15c      	cbz	r4, 115b8 <net_sprint_ll_addr_buf+0x3c>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   115a0:	f815 1b01 	ldrb.w	r1, [r5], #1
   115a4:	2301      	movs	r3, #1
   115a6:	2241      	movs	r2, #65	; 0x41
   115a8:	f012 fa80 	bl	23aac <net_byte_to_hex>
		blen -= 3U;
   115ac:	3c03      	subs	r4, #3
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
   115ae:	42bd      	cmp	r5, r7
		*ptr++ = ':';
   115b0:	f800 8b01 	strb.w	r8, [r0], #1
		blen -= 3U;
   115b4:	b2e4      	uxtb	r4, r4
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
   115b6:	d1f2      	bne.n	1159e <net_sprint_ll_addr_buf+0x22>
	}

	if (!(ptr - buf)) {
   115b8:	2200      	movs	r2, #0
   115ba:	42b0      	cmp	r0, r6
		return NULL;
	}

	*(ptr - 1) = '\0';
   115bc:	bf16      	itet	ne
   115be:	f800 2c01 	strbne.w	r2, [r0, #-1]
		return NULL;
   115c2:	4610      	moveq	r0, r2
	return buf;
   115c4:	4630      	movne	r0, r6
}
   115c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115ca:	bf00      	nop
   115cc:	000292bf 	.word	0x000292bf

000115d0 <net_ipv6_unspecified_address>:
const struct in6_addr in6addr_loopback = IN6ADDR_LOOPBACK_INIT;

const struct in6_addr *net_ipv6_unspecified_address(void)
{
	return &in6addr_any;
}
   115d0:	4800      	ldr	r0, [pc, #0]	; (115d4 <net_ipv6_unspecified_address+0x4>)
   115d2:	4770      	bx	lr
   115d4:	000289a4 	.word	0x000289a4

000115d8 <check_used_port>:
#if defined(CONFIG_NET_UDP) || defined(CONFIG_NET_TCP)
static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   115d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   115dc:	460e      	mov	r6, r1
   115de:	4615      	mov	r5, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   115e0:	4607      	mov	r7, r0
   115e2:	4c11      	ldr	r4, [pc, #68]	; (11628 <check_used_port+0x50>)
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
		    local_addr->sa_family == AF_INET6) {
			if (net_ipv6_addr_cmp(
				    net_sin6_ptr(&contexts[i].local)->
							     sin6_addr,
				    &((struct sockaddr_in6 *)
   115e4:	f102 0804 	add.w	r8, r2, #4
   115e8:	f504 7952 	add.w	r9, r4, #840	; 0x348
	return context->flags & NET_CONTEXT_IN_USE;
   115ec:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
		if (!net_context_is_used(&contexts[i])) {
   115f0:	07db      	lsls	r3, r3, #31
   115f2:	d405      	bmi.n	11600 <check_used_port+0x28>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   115f4:	348c      	adds	r4, #140	; 0x8c
   115f6:	45a1      	cmp	r9, r4
   115f8:	d1f8      	bne.n	115ec <check_used_port+0x14>
				return -EEXIST;
			}
		}
	}

	return 0;
   115fa:	2000      	movs	r0, #0
}
   115fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   11600:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
   11604:	42bb      	cmp	r3, r7
   11606:	d1f5      	bne.n	115f4 <check_used_port+0x1c>
   11608:	8be3      	ldrh	r3, [r4, #30]
   1160a:	42b3      	cmp	r3, r6
   1160c:	d1f2      	bne.n	115f4 <check_used_port+0x1c>
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
   1160e:	882b      	ldrh	r3, [r5, #0]
   11610:	2b02      	cmp	r3, #2
   11612:	d1ef      	bne.n	115f4 <check_used_port+0x1c>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   11614:	2210      	movs	r2, #16
   11616:	4641      	mov	r1, r8
   11618:	6a20      	ldr	r0, [r4, #32]
   1161a:	f016 f986 	bl	2792a <memcmp>
			if (net_ipv6_addr_cmp(
   1161e:	2800      	cmp	r0, #0
   11620:	d1e8      	bne.n	115f4 <check_used_port+0x1c>
				return -EEXIST;
   11622:	f06f 0010 	mvn.w	r0, #16
   11626:	e7e9      	b.n	115fc <check_used_port+0x24>
   11628:	200227bc 	.word	0x200227bc

0001162c <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1162c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1162e:	4605      	mov	r5, r0
   11630:	460e      	mov	r6, r1
	u16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
   11632:	4f08      	ldr	r7, [pc, #32]	; (11654 <find_available_port+0x28>)
   11634:	f001 fb98 	bl	12d68 <sys_rand32_get>
   11638:	ea40 0407 	orr.w	r4, r0, r7
   1163c:	ba64      	rev16	r4, r4
   1163e:	b2a4      	uxth	r4, r4
		if (local_port <= 1023U) {
			/* 0 - 1023 ports are reserved */
			continue;
		}
	} while (check_used_port(net_context_get_ip_proto(context),
   11640:	4632      	mov	r2, r6
   11642:	4621      	mov	r1, r4
   11644:	f895 0084 	ldrb.w	r0, [r5, #132]	; 0x84
   11648:	f7ff ffc6 	bl	115d8 <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   1164c:	3011      	adds	r0, #17
   1164e:	d0f1      	beq.n	11634 <find_available_port+0x8>

	return htons(local_port);
}
   11650:	4620      	mov	r0, r4
   11652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11654:	ffff8000 	.word	0xffff8000

00011658 <net_context_packet_received>:
enum net_verdict net_context_packet_received(struct net_conn *conn,
					     struct net_pkt *pkt,
					     union net_ip_header *ip_hdr,
					     union net_proto_header *proto_hdr,
					     void *user_data)
{
   11658:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1165c:	4698      	mov	r8, r3
   1165e:	460d      	mov	r5, r1
   11660:	4617      	mov	r7, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   11662:	2300      	movs	r3, #0
   11664:	4c22      	ldr	r4, [pc, #136]	; (116f0 <net_context_packet_received+0x98>)
   11666:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
		if (!net_context_is_used(&contexts[i])) {
   1166a:	07d2      	lsls	r2, r2, #31
   1166c:	d502      	bpl.n	11674 <net_context_packet_received+0x1c>
		if (contexts[i].conn_handler == conn_handler) {
   1166e:	6c22      	ldr	r2, [r4, #64]	; 0x40
   11670:	4290      	cmp	r0, r2
   11672:	d012      	beq.n	1169a <net_context_packet_received+0x42>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   11674:	3301      	adds	r3, #1
   11676:	2b06      	cmp	r3, #6
   11678:	f104 048c 	add.w	r4, r4, #140	; 0x8c
   1167c:	d1f3      	bne.n	11666 <net_context_packet_received+0xe>
	enum net_verdict verdict = NET_DROP;

	NET_ASSERT(context);
	NET_ASSERT(net_pkt_iface(pkt));

	k_mutex_lock(&context->lock, K_FOREVER);
   1167e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11686:	2008      	movs	r0, #8
   11688:	f012 fab9 	bl	23bfe <k_mutex_lock.constprop.0>
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   1168c:	6a28      	ldr	r0, [r5, #32]
   1168e:	f7ff feed 	bl	1146c <net_if_get_by_iface>
   11692:	2300      	movs	r3, #0
   11694:	f883 3088 	strb.w	r3, [r3, #136]	; 0x88
   11698:	deff      	udf	#255	; 0xff
   1169a:	f104 0908 	add.w	r9, r4, #8
   1169e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   116a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   116a6:	4648      	mov	r0, r9
   116a8:	f012 faa9 	bl	23bfe <k_mutex_lock.constprop.0>
   116ac:	6a28      	ldr	r0, [r5, #32]
   116ae:	f7ff fedd 	bl	1146c <net_if_get_by_iface>
	net_pkt_set_context(pkt, context);

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */
	if (!context->recv_cb) {
   116b2:	f8d4 a044 	ldr.w	sl, [r4, #68]	; 0x44
   116b6:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
	pkt->context = ctx;
   116ba:	61ec      	str	r4, [r5, #28]
   116bc:	f1ba 0f00 	cmp.w	sl, #0
   116c0:	d013      	beq.n	116ea <net_context_packet_received+0x92>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
		net_stats_update_tcp_recv(net_pkt_iface(pkt),
					  net_pkt_remaining_data(pkt));
	}

	context->recv_cb(context, pkt, ip_hdr, proto_hdr, 0, user_data);
   116c2:	2600      	movs	r6, #0
   116c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   116c6:	463a      	mov	r2, r7
   116c8:	9301      	str	r3, [sp, #4]
   116ca:	4629      	mov	r1, r5
   116cc:	4643      	mov	r3, r8
   116ce:	4620      	mov	r0, r4
   116d0:	9600      	str	r6, [sp, #0]
   116d2:	47d0      	blx	sl
	z_impl_k_sem_give(sem);
   116d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
   116d8:	f00d f9ae 	bl	1ea38 <z_impl_k_sem_give>
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	verdict = NET_OK;

unlock:
	k_mutex_unlock(&context->lock);
   116dc:	4648      	mov	r0, r9
   116de:	f012 fa8c 	bl	23bfa <k_mutex_unlock>

	return verdict;
}
   116e2:	4630      	mov	r0, r6
   116e4:	b002      	add	sp, #8
   116e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	enum net_verdict verdict = NET_DROP;
   116ea:	2602      	movs	r6, #2
   116ec:	e7f6      	b.n	116dc <net_context_packet_received+0x84>
   116ee:	bf00      	nop
   116f0:	200227bc 	.word	0x200227bc

000116f4 <net_context_get>:
{
   116f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (!IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   116f8:	2801      	cmp	r0, #1
{
   116fa:	4606      	mov	r6, r0
   116fc:	4689      	mov	r9, r1
   116fe:	4692      	mov	sl, r2
   11700:	9301      	str	r3, [sp, #4]
		if (!IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   11702:	f000 809f 	beq.w	11844 <net_context_get+0x150>
		if (!IS_ENABLED(CONFIG_NET_SOCKETS_CAN) && family == AF_CAN) {
   11706:	2804      	cmp	r0, #4
   11708:	f000 809c 	beq.w	11844 <net_context_get+0x150>
		if (type == SOCK_RAW) {
   1170c:	2903      	cmp	r1, #3
   1170e:	d006      	beq.n	1171e <net_context_get+0x2a>
			if (family == AF_PACKET || family == AF_CAN) {
   11710:	1ec3      	subs	r3, r0, #3
   11712:	2b01      	cmp	r3, #1
   11714:	f240 809c 	bls.w	11850 <net_context_get+0x15c>
			if (type == SOCK_STREAM) {
   11718:	2901      	cmp	r1, #1
   1171a:	f000 8099 	beq.w	11850 <net_context_get+0x15c>
			if (ip_proto == IPPROTO_TCP) {
   1171e:	f1ba 0f06 	cmp.w	sl, #6
   11722:	f000 8098 	beq.w	11856 <net_context_get+0x162>
		if (family != AF_INET && family != AF_INET6 &&
   11726:	1e73      	subs	r3, r6, #1
   11728:	2b03      	cmp	r3, #3
   1172a:	f200 808e 	bhi.w	1184a <net_context_get+0x156>
		if (type != SOCK_DGRAM && type != SOCK_STREAM &&
   1172e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   11732:	2b02      	cmp	r3, #2
   11734:	f200 808c 	bhi.w	11850 <net_context_get+0x15c>
		if (type != SOCK_RAW && ip_proto != IPPROTO_UDP &&
   11738:	f1b9 0f03 	cmp.w	r9, #3
   1173c:	d003      	beq.n	11746 <net_context_get+0x52>
   1173e:	f1ba 0f11 	cmp.w	sl, #17
   11742:	f040 8088 	bne.w	11856 <net_context_get+0x162>
		if (!context) {
   11746:	9b01      	ldr	r3, [sp, #4]
   11748:	2b00      	cmp	r3, #0
   1174a:	f000 8087 	beq.w	1185c <net_context_get+0x168>
	return z_impl_k_sem_take(sem, timeout);
   1174e:	4c45      	ldr	r4, [pc, #276]	; (11864 <net_context_get+0x170>)
   11750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11758:	4843      	ldr	r0, [pc, #268]	; (11868 <net_context_get+0x174>)
   1175a:	f00d f993 	bl	1ea84 <z_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1175e:	f04f 0b00 	mov.w	fp, #0
   11762:	46a0      	mov	r8, r4
   11764:	228c      	movs	r2, #140	; 0x8c
	return context->flags & NET_CONTEXT_IN_USE;
   11766:	f894 5086 	ldrb.w	r5, [r4, #134]	; 0x86
   1176a:	fb02 f70b 	mul.w	r7, r2, fp
		if (net_context_is_used(&contexts[i])) {
   1176e:	f015 0501 	ands.w	r5, r5, #1
   11772:	d00f      	beq.n	11794 <net_context_get+0xa0>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   11774:	f10b 0b01 	add.w	fp, fp, #1
   11778:	f1bb 0f06 	cmp.w	fp, #6
   1177c:	f104 048c 	add.w	r4, r4, #140	; 0x8c
   11780:	d1f1      	bne.n	11766 <net_context_get+0x72>
	int i, ret = -ENOENT;
   11782:	f06f 0401 	mvn.w	r4, #1
	z_impl_k_sem_give(sem);
   11786:	4838      	ldr	r0, [pc, #224]	; (11868 <net_context_get+0x174>)
   11788:	f00d f956 	bl	1ea38 <z_impl_k_sem_give>
}
   1178c:	4620      	mov	r0, r4
   1178e:	b003      	add	sp, #12
   11790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   11794:	228c      	movs	r2, #140	; 0x8c
   11796:	4629      	mov	r1, r5
   11798:	4620      	mov	r0, r4
   1179a:	f016 f90e 	bl	279ba <memset>
		if (!net_if_is_ip_offloaded(net_if_get_default())
   1179e:	f7ff fa39 	bl	10c14 <net_if_get_default>
		contexts[i].iface = -1;
   117a2:	21ff      	movs	r1, #255	; 0xff
   117a4:	eb08 0207 	add.w	r2, r8, r7
   117a8:	f882 1088 	strb.w	r1, [r2, #136]	; 0x88
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   117ac:	2101      	movs	r1, #1
		contexts[i].flags = 0U;
   117ae:	f8a2 5086 	strh.w	r5, [r2, #134]	; 0x86
   117b2:	3204      	adds	r2, #4
   117b4:	e8d2 0fef 	ldaex	r0, [r2]
   117b8:	e8c2 1fe3 	stlex	r3, r1, [r2]
   117bc:	2b00      	cmp	r3, #0
   117be:	d1f9      	bne.n	117b4 <net_context_get+0xc0>
		flag = family << 3;
   117c0:	00f1      	lsls	r1, r6, #3
	context->flags |= flag;
   117c2:	b2c9      	uxtb	r1, r1
	context->flags |= flag;
   117c4:	ea41 1989 	orr.w	r9, r1, r9, lsl #6
   117c8:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
			(void)memset(&contexts[i].remote, 0,
   117cc:	f107 0028 	add.w	r0, r7, #40	; 0x28
   117d0:	ea49 0901 	orr.w	r9, r9, r1
   117d4:	2218      	movs	r2, #24
   117d6:	f8a4 9086 	strh.w	r9, [r4, #134]	; 0x86
   117da:	4629      	mov	r1, r5
	context->proto = proto;
   117dc:	f8a4 a084 	strh.w	sl, [r4, #132]	; 0x84
   117e0:	4440      	add	r0, r8
   117e2:	f016 f8ea 	bl	279ba <memset>
			(void)memset(&contexts[i].local, 0,
   117e6:	f107 021c 	add.w	r2, r7, #28
   117ea:	eb08 0902 	add.w	r9, r8, r2
		if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   117ee:	2e02      	cmp	r6, #2
   117f0:	f848 5002 	str.w	r5, [r8, r2]
   117f4:	e9c9 5501 	strd	r5, r5, [r9, #4]
   117f8:	d019      	beq.n	1182e <net_context_get+0x13a>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   117fa:	f107 0050 	add.w	r0, r7, #80	; 0x50
	return z_impl_k_sem_init(sem, initial_count, limit);
   117fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11802:	2101      	movs	r1, #1
   11804:	4440      	add	r0, r8
   11806:	f015 fe60 	bl	274ca <z_impl_k_sem_init>
		k_mutex_init(&contexts[i].lock);
   1180a:	f107 0008 	add.w	r0, r7, #8
	return z_impl_k_mutex_init(mutex);
   1180e:	4440      	add	r0, r8
   11810:	f015 fcb5 	bl	2717e <z_impl_k_mutex_init>
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   11814:	228c      	movs	r2, #140	; 0x8c
   11816:	fb02 880b 	mla	r8, r2, fp, r8
   1181a:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   1181e:	f043 0301 	orr.w	r3, r3, #1
   11822:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
		*context = &contexts[i];
   11826:	9b01      	ldr	r3, [sp, #4]
   11828:	601c      	str	r4, [r3, #0]
		ret = 0;
   1182a:	2400      	movs	r4, #0
		break;
   1182c:	e7ab      	b.n	11786 <net_context_get+0x92>
			addr6->sin6_port = find_available_port(&contexts[i],
   1182e:	4649      	mov	r1, r9
   11830:	4620      	mov	r0, r4
   11832:	f7ff fefb 	bl	1162c <find_available_port>
   11836:	f8a9 0002 	strh.w	r0, [r9, #2]
			if (!addr6->sin6_port) {
   1183a:	2800      	cmp	r0, #0
   1183c:	d1dd      	bne.n	117fa <net_context_get+0x106>
				ret = -EADDRINUSE;
   1183e:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   11842:	e7a0      	b.n	11786 <net_context_get+0x92>
			return -EPFNOSUPPORT;
   11844:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   11848:	e7a0      	b.n	1178c <net_context_get+0x98>
			return -EAFNOSUPPORT;
   1184a:	f06f 0469 	mvn.w	r4, #105	; 0x69
   1184e:	e79d      	b.n	1178c <net_context_get+0x98>
				return -EPROTOTYPE;
   11850:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   11854:	e79a      	b.n	1178c <net_context_get+0x98>
				return -EPROTONOSUPPORT;
   11856:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   1185a:	e797      	b.n	1178c <net_context_get+0x98>
			return -EINVAL;
   1185c:	f06f 0415 	mvn.w	r4, #21
   11860:	e794      	b.n	1178c <net_context_get+0x98>
   11862:	bf00      	nop
   11864:	200227bc 	.word	0x200227bc
   11868:	20022b04 	.word	0x20022b04

0001186c <net_context_put>:
{
   1186c:	b570      	push	{r4, r5, r6, lr}
	if (!PART_OF_ARRAY(contexts, context)) {
   1186e:	4604      	mov	r4, r0
   11870:	b1d8      	cbz	r0, 118aa <net_context_put+0x3e>
   11872:	4b0f      	ldr	r3, [pc, #60]	; (118b0 <net_context_put+0x44>)
   11874:	4298      	cmp	r0, r3
   11876:	d318      	bcc.n	118aa <net_context_put+0x3e>
   11878:	f503 7352 	add.w	r3, r3, #840	; 0x348
   1187c:	4298      	cmp	r0, r3
   1187e:	d214      	bcs.n	118aa <net_context_put+0x3e>
	context->connect_cb = NULL;
   11880:	2500      	movs	r5, #0
	k_mutex_lock(&context->lock, K_FOREVER);
   11882:	f100 0608 	add.w	r6, r0, #8
   11886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1188a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1188e:	4630      	mov	r0, r6
   11890:	f012 f9b5 	bl	23bfe <k_mutex_lock.constprop.0>
	net_context_unref(context);
   11894:	4620      	mov	r0, r4
	context->send_cb = NULL;
   11896:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
	context->connect_cb = NULL;
   1189a:	64e5      	str	r5, [r4, #76]	; 0x4c
	net_context_unref(context);
   1189c:	f012 f9bb 	bl	23c16 <net_context_unref>
	k_mutex_unlock(&context->lock);
   118a0:	4630      	mov	r0, r6
   118a2:	f012 f9aa 	bl	23bfa <k_mutex_unlock>
	return ret;
   118a6:	4628      	mov	r0, r5
}
   118a8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   118aa:	f06f 0015 	mvn.w	r0, #21
   118ae:	e7fb      	b.n	118a8 <net_context_put+0x3c>
   118b0:	200227bc 	.word	0x200227bc

000118b4 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     k_timeout_t timeout,
		     void *user_data)
{
   118b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   118b8:	461f      	mov	r7, r3
	return context->flags & NET_CONTEXT_IN_USE;
   118ba:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
   118be:	4604      	mov	r4, r0
	int ret;
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   118c0:	07db      	lsls	r3, r3, #31
{
   118c2:	4689      	mov	r9, r1
   118c4:	4616      	mov	r6, r2
   118c6:	b091      	sub	sp, #68	; 0x44
	if (!net_context_is_used(context)) {
   118c8:	f140 808a 	bpl.w	119e0 <net_context_recv+0x12c>
		return -EBADF;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
   118cc:	f100 0808 	add.w	r8, r0, #8
   118d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   118d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   118d8:	4640      	mov	r0, r8
   118da:	f012 f990 	bl	23bfe <k_mutex_lock.constprop.0>
			net_context_get_iface(context),
			context, cb, timeout, user_data);
		goto unlock;
	}

	if (IS_ENABLED(CONFIG_NET_UDP) &&
   118de:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
   118e2:	2b11      	cmp	r3, #17
   118e4:	d179      	bne.n	119da <net_context_recv+0x126>
	struct sockaddr local_addr = {
   118e6:	2218      	movs	r2, #24
   118e8:	2100      	movs	r1, #0
   118ea:	a80a      	add	r0, sp, #40	; 0x28
   118ec:	f016 f865 	bl	279ba <memset>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   118f0:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	if (context->conn_handler) {
   118f4:	6c20      	ldr	r0, [r4, #64]	; 0x40
   118f6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	struct sockaddr local_addr = {
   118fa:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	if (context->conn_handler) {
   118fe:	b118      	cbz	r0, 11908 <net_context_recv+0x54>
		net_conn_unregister(context->conn_handler);
   11900:	f001 f8ea 	bl	12ad8 <net_conn_unregister>
		context->conn_handler = NULL;
   11904:	2300      	movs	r3, #0
   11906:	6423      	str	r3, [r4, #64]	; 0x40
	ret = bind_default(context);
   11908:	4620      	mov	r0, r4
   1190a:	f012 f9f9 	bl	23d00 <bind_default>
	if (ret) {
   1190e:	4605      	mov	r5, r0
   11910:	2800      	cmp	r0, #0
   11912:	d142      	bne.n	1199a <net_context_recv+0xe6>
   11914:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   11918:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1191c:	2b02      	cmp	r3, #2
   1191e:	d15a      	bne.n	119d6 <net_context_recv+0x122>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   11920:	6a23      	ldr	r3, [r4, #32]
   11922:	b18b      	cbz	r3, 11948 <net_context_recv+0x94>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   11924:	ad06      	add	r5, sp, #24
   11926:	462a      	mov	r2, r5
   11928:	f103 0e10 	add.w	lr, r3, #16
   1192c:	46ac      	mov	ip, r5
   1192e:	6818      	ldr	r0, [r3, #0]
   11930:	6859      	ldr	r1, [r3, #4]
   11932:	3308      	adds	r3, #8
   11934:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   11938:	4573      	cmp	r3, lr
   1193a:	4665      	mov	r5, ip
   1193c:	d1f6      	bne.n	1192c <net_context_recv+0x78>
   1193e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   11940:	ad0b      	add	r5, sp, #44	; 0x2c
   11942:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   11946:	ab0a      	add	r3, sp, #40	; 0x28
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   11948:	8be5      	ldrh	r5, [r4, #30]
		net_sin6(&local_addr)->sin6_port =
   1194a:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
				ntohs(net_sin(&context->remote)->sin_port),
   1194e:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
	ret = net_conn_register(net_context_get_ip_proto(context),
   11952:	ba6d      	rev16	r5, r5
   11954:	b2ad      	uxth	r5, r5
				net_context_get_family(context),
   11956:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
	ret = net_conn_register(net_context_get_ip_proto(context),
   1195a:	f104 0e40 	add.w	lr, r4, #64	; 0x40
   1195e:	9501      	str	r5, [sp, #4]
				ntohs(net_sin(&context->remote)->sin_port),
   11960:	ea4f 250c 	mov.w	r5, ip, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   11964:	9918      	ldr	r1, [sp, #96]	; 0x60
   11966:	f8cd e010 	str.w	lr, [sp, #16]
				ntohs(net_sin(&context->remote)->sin_port),
   1196a:	ea45 251c 	orr.w	r5, r5, ip, lsr #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1196e:	f8df e078 	ldr.w	lr, [pc, #120]	; 119e8 <net_context_recv+0x134>
	context->recv_cb = cb;
   11972:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ret = net_conn_register(net_context_get_ip_proto(context),
   11976:	b2ad      	uxth	r5, r5
   11978:	f3c2 09c2 	ubfx	r9, r2, #3, #3
   1197c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
   11980:	9103      	str	r1, [sp, #12]
   11982:	9500      	str	r5, [sp, #0]
   11984:	4649      	mov	r1, r9
   11986:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
   1198a:	bf18      	it	ne
   1198c:	f104 0228 	addne.w	r2, r4, #40	; 0x28
   11990:	f8cd e008 	str.w	lr, [sp, #8]
   11994:	f000 ffbe 	bl	12914 <net_conn_register>
   11998:	4605      	mov	r5, r0
		} else {
			ret = -EPROTOTYPE;
		}
	}

	if (ret < 0) {
   1199a:	2d00      	cmp	r5, #0
   1199c:	db14      	blt.n	119c8 <net_context_recv+0x114>
		goto unlock;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1199e:	ea56 0307 	orrs.w	r3, r6, r7
   119a2:	d011      	beq.n	119c8 <net_context_recv+0x114>
	sem->count = 0U;
   119a4:	2300      	movs	r3, #0
		 * net_context_packet_received() callback will release the
		 * semaphore when data has been received.
		 */
		k_sem_reset(&context->recv_data_wait);

		k_mutex_unlock(&context->lock);
   119a6:	4640      	mov	r0, r8
   119a8:	65a3      	str	r3, [r4, #88]	; 0x58
   119aa:	f012 f926 	bl	23bfa <k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   119ae:	4632      	mov	r2, r6
   119b0:	463b      	mov	r3, r7
   119b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
   119b6:	f00d f865 	bl	1ea84 <z_impl_k_sem_take>

		ret = k_sem_take(&context->recv_data_wait, timeout);

		k_mutex_lock(&context->lock, K_FOREVER);
   119ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   119be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   119c2:	4640      	mov	r0, r8
   119c4:	f012 f91b 	bl	23bfe <k_mutex_lock.constprop.0>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

unlock:
	k_mutex_unlock(&context->lock);
   119c8:	4640      	mov	r0, r8
   119ca:	f012 f916 	bl	23bfa <k_mutex_unlock>

	return ret;
}
   119ce:	4628      	mov	r0, r5
   119d0:	b011      	add	sp, #68	; 0x44
   119d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct sockaddr *laddr = NULL;
   119d6:	4603      	mov	r3, r0
   119d8:	e7b9      	b.n	1194e <net_context_recv+0x9a>
			ret = -EPROTOTYPE;
   119da:	f06f 056a 	mvn.w	r5, #106	; 0x6a
   119de:	e7f3      	b.n	119c8 <net_context_recv+0x114>
		return -EBADF;
   119e0:	f06f 0508 	mvn.w	r5, #8
   119e4:	e7f3      	b.n	119ce <net_context_recv+0x11a>
   119e6:	bf00      	nop
   119e8:	00011659 	.word	0x00011659

000119ec <net_context_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   119ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   119f0:	2101      	movs	r1, #1
   119f2:	4801      	ldr	r0, [pc, #4]	; (119f8 <net_context_init+0xc>)
   119f4:	f015 bd69 	b.w	274ca <z_impl_k_sem_init>
   119f8:	20022b04 	.word	0x20022b04

000119fc <net_pkt_alloc_buffer>:
int net_pkt_alloc_buffer(struct net_pkt *pkt,
			 size_t size,
			 enum net_ip_protocol proto,
			 k_timeout_t timeout)
#endif
{
   119fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a00:	4680      	mov	r8, r0
   11a02:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
   11a06:	468a      	mov	sl, r1
	u64_t end = z_timeout_end_calc(timeout);
   11a08:	4620      	mov	r0, r4
   11a0a:	4629      	mov	r1, r5
{
   11a0c:	4616      	mov	r6, r2
	u64_t end = z_timeout_end_calc(timeout);
   11a0e:	f015 fe47 	bl	276a0 <z_timeout_end_calc>
   11a12:	4681      	mov	r9, r0
   11a14:	468b      	mov	fp, r1
	struct net_buf_pool *pool = NULL;
	size_t alloc_len = 0;
	size_t hdr_len = 0;
	struct net_buf *buf;

	if (!size && proto == 0 && net_pkt_family(pkt) == AF_UNSPEC) {
   11a16:	f1ba 0f00 	cmp.w	sl, #0
   11a1a:	d107      	bne.n	11a2c <net_pkt_alloc_buffer+0x30>
   11a1c:	b936      	cbnz	r6, 11a2c <net_pkt_alloc_buffer+0x30>
	return pkt->family;
   11a1e:	f898 303b 	ldrb.w	r3, [r8, #59]	; 0x3b
   11a22:	f013 0f0e 	tst.w	r3, #14
   11a26:	f3c3 0042 	ubfx	r0, r3, #1, #3
   11a2a:	d05c      	beq.n	11ae6 <net_pkt_alloc_buffer+0xea>
		return 0;
	}

	if (k_is_in_isr()) {
   11a2c:	f015 fd5d 	bl	274ea <k_is_in_isr>
   11a30:	b108      	cbz	r0, 11a36 <net_pkt_alloc_buffer+0x3a>
		timeout = K_NO_WAIT;
   11a32:	2400      	movs	r4, #0
   11a34:	2500      	movs	r5, #0
	}

	/* Verifying existing buffer and take into account free space there */
	alloc_len = pkt_get_size(pkt) - net_pkt_get_len(pkt);
   11a36:	f8d8 0010 	ldr.w	r0, [r8, #16]
	size_t size = 0;
   11a3a:	2100      	movs	r1, #0
	struct net_buf *buf = pkt->buffer;
   11a3c:	4607      	mov	r7, r0
	while (buf) {
   11a3e:	2f00      	cmp	r7, #0
   11a40:	d154      	bne.n	11aec <net_pkt_alloc_buffer+0xf0>
}
#endif /* CONFIG_NET_PKT_TXTIME */

static inline size_t net_pkt_get_len(struct net_pkt *pkt)
{
	return net_buf_frags_len(pkt->frags);
   11a42:	f012 fbbb 	bl	241bc <net_buf_frags_len>
	if (!alloc_len) {
   11a46:	f898 c03b 	ldrb.w	ip, [r8, #59]	; 0x3b
   11a4a:	4288      	cmp	r0, r1
   11a4c:	f3cc 0c42 	ubfx	ip, ip, #1, #3
   11a50:	d156      	bne.n	11b00 <net_pkt_alloc_buffer+0x104>
		/* In case of no free space, it will account for header
		 * space estimation
		 */
		hdr_len = pkt_estimate_headers_length(pkt,
   11a52:	fa1f f38c 	uxth.w	r3, ip
	if (family == AF_UNSPEC) {
   11a56:	f1bc 0f00 	cmp.w	ip, #0
   11a5a:	d051      	beq.n	11b00 <net_pkt_alloc_buffer+0x104>
	size_t hdr_len = 0;
   11a5c:	2b02      	cmp	r3, #2
   11a5e:	bf0c      	ite	eq
   11a60:	2228      	moveq	r2, #40	; 0x28
   11a62:	2200      	movne	r2, #0
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   11a64:	2e11      	cmp	r6, #17
   11a66:	d145      	bne.n	11af4 <net_pkt_alloc_buffer+0xf8>
		hdr_len += NET_UDPH_LEN;
   11a68:	3208      	adds	r2, #8
	if (net_pkt_iface(pkt)) {
   11a6a:	f8d8 3020 	ldr.w	r3, [r8, #32]
						      net_pkt_family(pkt),
						      proto);
	}

	/* Calculate the maximum that can be allocated depending on size */
	alloc_len = pkt_buffer_length(pkt, size + hdr_len, proto, alloc_len);
   11a6e:	4492      	add	sl, r2
	if (net_pkt_iface(pkt)) {
   11a70:	b10b      	cbz	r3, 11a76 <net_pkt_alloc_buffer+0x7a>
	return iface->if_dev->mtu;
   11a72:	681b      	ldr	r3, [r3, #0]
		max_len = net_if_get_mtu(net_pkt_iface(pkt));
   11a74:	8b1b      	ldrh	r3, [r3, #24]
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   11a76:	f1bc 0f02 	cmp.w	ip, #2
   11a7a:	d143      	bne.n	11b04 <net_pkt_alloc_buffer+0x108>
		max_len = MAX(max_len, NET_IPV6_MTU);
   11a7c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   11a80:	bf38      	it	cc
   11a82:	f44f 63a0 	movcc.w	r3, #1280	; 0x500
	max_len -= existing;
   11a86:	1a46      	subs	r6, r0, r1
   11a88:	441e      	add	r6, r3
	if (pkt->context) {
		pool = get_data_pool(pkt->context);
	}

	if (!pool) {
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
   11a8a:	f8d8 000c 	ldr.w	r0, [r8, #12]
   11a8e:	4b37      	ldr	r3, [pc, #220]	; (11b6c <net_pkt_alloc_buffer+0x170>)
   11a90:	4937      	ldr	r1, [pc, #220]	; (11b70 <net_pkt_alloc_buffer+0x174>)
   11a92:	4a38      	ldr	r2, [pc, #224]	; (11b74 <net_pkt_alloc_buffer+0x178>)
	return MIN(size, max_len);
   11a94:	4556      	cmp	r6, sl
   11a96:	bf28      	it	cs
   11a98:	4656      	movcs	r6, sl
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
   11a9a:	4288      	cmp	r0, r1
   11a9c:	bf0c      	ite	eq
   11a9e:	4692      	moveq	sl, r2
   11aa0:	469a      	movne	sl, r3
	}

	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   11aa2:	ea54 0305 	orrs.w	r3, r4, r5
   11aa6:	d010      	beq.n	11aca <net_pkt_alloc_buffer+0xce>
   11aa8:	1c69      	adds	r1, r5, #1
   11aaa:	bf08      	it	eq
   11aac:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   11ab0:	d00b      	beq.n	11aca <net_pkt_alloc_buffer+0xce>
	    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
		s64_t remaining = end - z_tick_get();
   11ab2:	f00d fa73 	bl	1ef9c <z_tick_get>
   11ab6:	ebb9 0400 	subs.w	r4, r9, r0
   11aba:	eb6b 0501 	sbc.w	r5, fp, r1
   11abe:	2c00      	cmp	r4, #0
   11ac0:	f175 0300 	sbcs.w	r3, r5, #0
   11ac4:	bfbc      	itt	lt
   11ac6:	2400      	movlt	r4, #0
   11ac8:	2500      	movlt	r5, #0
	u64_t end = z_timeout_end_calc(timeout);
   11aca:	4620      	mov	r0, r4
   11acc:	4629      	mov	r1, r5
   11ace:	f015 fde7 	bl	276a0 <z_timeout_end_calc>
   11ad2:	468b      	mov	fp, r1
   11ad4:	4681      	mov	r9, r0
	struct net_buf *current = NULL;
   11ad6:	2100      	movs	r1, #0
	while (size) {
   11ad8:	b9b6      	cbnz	r6, 11b08 <net_pkt_alloc_buffer+0x10c>
	buf = pkt_alloc_buffer(pool, alloc_len, timeout, caller, line);
#else
	buf = pkt_alloc_buffer(pool, alloc_len, timeout);
#endif

	if (!buf) {
   11ada:	b1ff      	cbz	r7, 11b1c <net_pkt_alloc_buffer+0x120>
		NET_ERR("Data buffer (%zd) allocation failed.", alloc_len);
#endif
		return -ENOMEM;
	}

	net_pkt_append_buffer(pkt, buf);
   11adc:	4640      	mov	r0, r8
   11ade:	4639      	mov	r1, r7
   11ae0:	f012 fcd6 	bl	24490 <net_pkt_append_buffer>

	return 0;
   11ae4:	2000      	movs	r0, #0
}
   11ae6:	b003      	add	sp, #12
   11ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		size += buf->size;
   11aec:	89fb      	ldrh	r3, [r7, #14]
		buf = buf->frags;
   11aee:	683f      	ldr	r7, [r7, #0]
		size += buf->size;
   11af0:	4419      	add	r1, r3
		buf = buf->frags;
   11af2:	e7a4      	b.n	11a3e <net_pkt_alloc_buffer+0x42>
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
   11af4:	2e01      	cmp	r6, #1
   11af6:	d001      	beq.n	11afc <net_pkt_alloc_buffer+0x100>
   11af8:	2e3a      	cmp	r6, #58	; 0x3a
   11afa:	d1b6      	bne.n	11a6a <net_pkt_alloc_buffer+0x6e>
		hdr_len += NET_ICMPH_LEN;
   11afc:	3204      	adds	r2, #4
   11afe:	e7b4      	b.n	11a6a <net_pkt_alloc_buffer+0x6e>
	size_t hdr_len = 0;
   11b00:	463a      	mov	r2, r7
   11b02:	e7b2      	b.n	11a6a <net_pkt_alloc_buffer+0x6e>
			max_len = size;
   11b04:	4653      	mov	r3, sl
   11b06:	e7be      	b.n	11a86 <net_pkt_alloc_buffer+0x8a>
		new = net_buf_alloc_fixed(pool, timeout);
   11b08:	462b      	mov	r3, r5
   11b0a:	4622      	mov	r2, r4
   11b0c:	4650      	mov	r0, sl
   11b0e:	9101      	str	r1, [sp, #4]
   11b10:	f011 fa4b 	bl	22faa <net_buf_alloc_fixed>
		if (!new) {
   11b14:	9901      	ldr	r1, [sp, #4]
   11b16:	4603      	mov	r3, r0
   11b18:	b918      	cbnz	r0, 11b22 <net_pkt_alloc_buffer+0x126>
	if (first) {
   11b1a:	bb1f      	cbnz	r7, 11b64 <net_pkt_alloc_buffer+0x168>
		return -ENOMEM;
   11b1c:	f06f 000b 	mvn.w	r0, #11
   11b20:	e7e1      	b.n	11ae6 <net_pkt_alloc_buffer+0xea>
		if (!first && !current) {
   11b22:	b907      	cbnz	r7, 11b26 <net_pkt_alloc_buffer+0x12a>
   11b24:	b1e1      	cbz	r1, 11b60 <net_pkt_alloc_buffer+0x164>
			current->frags = new;
   11b26:	600b      	str	r3, [r1, #0]
		if (current->size > size) {
   11b28:	89da      	ldrh	r2, [r3, #14]
   11b2a:	42b2      	cmp	r2, r6
			current->size = size;
   11b2c:	bf88      	it	hi
   11b2e:	81de      	strhhi	r6, [r3, #14]
		size -= current->size;
   11b30:	89da      	ldrh	r2, [r3, #14]
   11b32:	1ab6      	subs	r6, r6, r2
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   11b34:	ea54 0205 	orrs.w	r2, r4, r5
   11b38:	d010      	beq.n	11b5c <net_pkt_alloc_buffer+0x160>
   11b3a:	1c6a      	adds	r2, r5, #1
   11b3c:	bf08      	it	eq
   11b3e:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   11b42:	d00b      	beq.n	11b5c <net_pkt_alloc_buffer+0x160>
   11b44:	9301      	str	r3, [sp, #4]
			s64_t remaining = end - z_tick_get();
   11b46:	f00d fa29 	bl	1ef9c <z_tick_get>
   11b4a:	ebb9 0400 	subs.w	r4, r9, r0
   11b4e:	eb6b 0501 	sbc.w	r5, fp, r1
			if (remaining <= 0) {
   11b52:	2c01      	cmp	r4, #1
   11b54:	f175 0300 	sbcs.w	r3, r5, #0
   11b58:	9b01      	ldr	r3, [sp, #4]
   11b5a:	dbbe      	blt.n	11ada <net_pkt_alloc_buffer+0xde>
   11b5c:	4619      	mov	r1, r3
   11b5e:	e7bb      	b.n	11ad8 <net_pkt_alloc_buffer+0xdc>
   11b60:	4607      	mov	r7, r0
   11b62:	e7e1      	b.n	11b28 <net_pkt_alloc_buffer+0x12c>
		net_buf_unref(first);
   11b64:	4638      	mov	r0, r7
   11b66:	f7fe fe8f 	bl	10888 <net_buf_unref>
	if (!buf) {
   11b6a:	e7d7      	b.n	11b1c <net_pkt_alloc_buffer+0x120>
   11b6c:	2002096c 	.word	0x2002096c
   11b70:	20020878 	.word	0x20020878
   11b74:	20020994 	.word	0x20020994

00011b78 <net_pkt_alloc_with_buffer>:
					  size_t size,
					  sa_family_t family,
					  enum net_ip_protocol proto,
					  k_timeout_t timeout)
#endif
{
   11b78:	b530      	push	{r4, r5, lr}
   11b7a:	b085      	sub	sp, #20
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
				     proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
   11b7c:	9300      	str	r3, [sp, #0]
   11b7e:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   11b82:	4613      	mov	r3, r2
   11b84:	e9cd 4502 	strd	r4, r5, [sp, #8]
   11b88:	460a      	mov	r2, r1
   11b8a:	4601      	mov	r1, r0
   11b8c:	4802      	ldr	r0, [pc, #8]	; (11b98 <net_pkt_alloc_with_buffer+0x20>)
   11b8e:	f012 fc90 	bl	244b2 <pkt_alloc_with_buffer>
				     proto, timeout);
#endif
}
   11b92:	b005      	add	sp, #20
   11b94:	bd30      	pop	{r4, r5, pc}
   11b96:	bf00      	nop
   11b98:	20020878 	.word	0x20020878

00011b9c <net_tc_submit_to_tx_queue>:

static struct net_traffic_class tx_classes[NET_TC_TX_COUNT];
static struct net_traffic_class rx_classes[NET_TC_RX_COUNT];

bool net_tc_submit_to_tx_queue(u8_t tc, struct net_pkt *pkt)
{
   11b9c:	b508      	push	{r3, lr}
   11b9e:	460b      	mov	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11ba0:	3308      	adds	r3, #8
   11ba2:	e8d3 3faf 	lda	r3, [r3]
	if (k_work_pending(net_pkt_work(pkt))) {
   11ba6:	07db      	lsls	r3, r3, #31
   11ba8:	d407      	bmi.n	11bba <net_tc_submit_to_tx_queue+0x1e>
		return false;
	}

	k_work_submit_to_queue(&tx_classes[tc].work_q, net_pkt_work(pkt));
   11baa:	22d8      	movs	r2, #216	; 0xd8
   11bac:	4b04      	ldr	r3, [pc, #16]	; (11bc0 <net_tc_submit_to_tx_queue+0x24>)
   11bae:	fb00 3002 	mla	r0, r0, r2, r3
   11bb2:	f012 fe40 	bl	24836 <k_work_submit_to_queue>

	return true;
   11bb6:	2001      	movs	r0, #1
}
   11bb8:	bd08      	pop	{r3, pc}
		return false;
   11bba:	2000      	movs	r0, #0
   11bbc:	e7fc      	b.n	11bb8 <net_tc_submit_to_tx_queue+0x1c>
   11bbe:	bf00      	nop
   11bc0:	20022bf4 	.word	0x20022bf4

00011bc4 <net_tx_priority2tc>:

int net_tx_priority2tc(enum net_priority prio)
{
	if (prio > NET_PRIORITY_NC) {
		/* Use default value suggested in 802.1Q */
		prio = NET_PRIORITY_BE;
   11bc4:	2807      	cmp	r0, #7
   11bc6:	bf88      	it	hi
   11bc8:	2000      	movhi	r0, #0
	}

	return tx_prio2tc_map[prio];
}
   11bca:	4b01      	ldr	r3, [pc, #4]	; (11bd0 <net_tx_priority2tc+0xc>)
   11bcc:	5c18      	ldrb	r0, [r3, r0]
   11bce:	4770      	bx	lr
   11bd0:	000292d8 	.word	0x000292d8

00011bd4 <net_tc_tx_init>:

	for (i = 0; i < NET_TC_TX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = tx_tc2thread(i);
		tx_classes[i].tc = thread_priority;
   11bd4:	2307      	movs	r3, #7
{
   11bd6:	b510      	push	{r4, lr}
		tx_classes[i].tc = thread_priority;
   11bd8:	4c08      	ldr	r4, [pc, #32]	; (11bfc <net_tc_tx_init+0x28>)
			"prio %d (%d)", i,
			&tx_classes[i].work_q.queue,
			K_THREAD_STACK_SIZEOF(tx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&tx_classes[i].work_q,
   11bda:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
		tx_classes[i].tc = thread_priority;
   11bde:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		k_work_q_start(&tx_classes[i].work_q,
   11be2:	4620      	mov	r0, r4
   11be4:	f06f 0308 	mvn.w	r3, #8
   11be8:	4905      	ldr	r1, [pc, #20]	; (11c00 <net_tc_tx_init+0x2c>)
   11bea:	f00d f841 	bl	1ec70 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   11bee:	4905      	ldr	r1, [pc, #20]	; (11c04 <net_tc_tx_init+0x30>)
   11bf0:	f104 0018 	add.w	r0, r4, #24
			       tx_stack[i],
			       K_THREAD_STACK_SIZEOF(tx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&tx_classes[i].work_q.thread, "tx_workq");
	}
}
   11bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11bf8:	f015 bc7f 	b.w	274fa <z_impl_k_thread_name_set>
   11bfc:	20022bf4 	.word	0x20022bf4
   11c00:	2002b8c8 	.word	0x2002b8c8
   11c04:	000292c6 	.word	0x000292c6

00011c08 <net_tc_rx_init>:

	for (i = 0; i < NET_TC_RX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = rx_tc2thread(i);
		rx_classes[i].tc = thread_priority;
   11c08:	2307      	movs	r3, #7
{
   11c0a:	b510      	push	{r4, lr}
		rx_classes[i].tc = thread_priority;
   11c0c:	4c08      	ldr	r4, [pc, #32]	; (11c30 <net_tc_rx_init+0x28>)
			"prio %d (%d)", i,
			&rx_classes[i].work_q.queue,
			K_THREAD_STACK_SIZEOF(rx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&rx_classes[i].work_q,
   11c0e:	f240 52dc 	movw	r2, #1500	; 0x5dc
		rx_classes[i].tc = thread_priority;
   11c12:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		k_work_q_start(&rx_classes[i].work_q,
   11c16:	4620      	mov	r0, r4
   11c18:	f06f 0308 	mvn.w	r3, #8
   11c1c:	4905      	ldr	r1, [pc, #20]	; (11c34 <net_tc_rx_init+0x2c>)
   11c1e:	f00d f827 	bl	1ec70 <k_work_q_start>
   11c22:	4905      	ldr	r1, [pc, #20]	; (11c38 <net_tc_rx_init+0x30>)
   11c24:	f104 0018 	add.w	r0, r4, #24
			       rx_stack[i],
			       K_THREAD_STACK_SIZEOF(rx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&rx_classes[i].work_q.thread, "rx_workq");
	}
}
   11c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11c2c:	f015 bc65 	b.w	274fa <z_impl_k_thread_name_set>
   11c30:	20022b1c 	.word	0x20022b1c
   11c34:	2002bd78 	.word	0x2002bd78
   11c38:	000292cf 	.word	0x000292cf

00011c3c <net_icmpv6_register_handler>:
Z_GENLIST_PREPEND(slist, snode)
   11c3c:	4b03      	ldr	r3, [pc, #12]	; (11c4c <net_icmpv6_register_handler+0x10>)
   11c3e:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   11c40:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
   11c42:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   11c44:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   11c46:	b902      	cbnz	r2, 11c4a <net_icmpv6_register_handler+0xe>
	list->tail = node;
   11c48:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   11c4a:	4770      	bx	lr
   11c4c:	20022ccc 	.word	0x20022ccc

00011c50 <net_icmpv6_input>:
}

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  struct net_ipv6_hdr *ip_hdr)
{
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   11c50:	2200      	movs	r2, #0
   11c52:	2304      	movs	r3, #4
{
   11c54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11c56:	460e      	mov	r6, r1
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv6_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   11c58:	4669      	mov	r1, sp
{
   11c5a:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   11c5c:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   11c60:	f012 fdc3 	bl	247ea <net_pkt_get_data>
	if (!icmp_hdr) {
   11c64:	4604      	mov	r4, r0
   11c66:	b910      	cbnz	r0, 11c6e <net_icmpv6_input+0x1e>
		NET_DBG("DROP: NULL ICMPv6 header");
		return NET_DROP;
   11c68:	2002      	movs	r0, #2
	}
drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
   11c6a:	b002      	add	sp, #8
   11c6c:	bd70      	pop	{r4, r5, r6, pc}
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   11c6e:	213a      	movs	r1, #58	; 0x3a
   11c70:	4628      	mov	r0, r5
   11c72:	f011 ff3a 	bl	23aea <net_calc_chksum>
	if (net_calc_chksum_icmpv6(pkt) != 0U) {
   11c76:	2800      	cmp	r0, #0
   11c78:	d1f6      	bne.n	11c68 <net_icmpv6_input+0x18>
 * Packet needs to be set to overwrite mode.
 */
static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
					   struct net_pkt_data_access *access)
{
	return net_pkt_skip(pkt, access->size);
   11c7a:	4628      	mov	r0, r5
   11c7c:	9901      	ldr	r1, [sp, #4]
   11c7e:	f012 fc58 	bl	24532 <net_pkt_skip>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   11c82:	4b0b      	ldr	r3, [pc, #44]	; (11cb0 <net_icmpv6_input+0x60>)
   11c84:	681b      	ldr	r3, [r3, #0]
   11c86:	2b00      	cmp	r3, #0
   11c88:	d0ee      	beq.n	11c68 <net_icmpv6_input+0x18>
		if (cb->type == icmp_hdr->type &&
   11c8a:	7821      	ldrb	r1, [r4, #0]
   11c8c:	7a1a      	ldrb	r2, [r3, #8]
   11c8e:	428a      	cmp	r2, r1
   11c90:	d10a      	bne.n	11ca8 <net_icmpv6_input+0x58>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
   11c92:	7a5a      	ldrb	r2, [r3, #9]
		if (cb->type == icmp_hdr->type &&
   11c94:	7860      	ldrb	r0, [r4, #1]
   11c96:	4290      	cmp	r0, r2
   11c98:	d000      	beq.n	11c9c <net_icmpv6_input+0x4c>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
   11c9a:	b92a      	cbnz	r2, 11ca8 <net_icmpv6_input+0x58>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
   11c9c:	4622      	mov	r2, r4
   11c9e:	4631      	mov	r1, r6
   11ca0:	4628      	mov	r0, r5
   11ca2:	685b      	ldr	r3, [r3, #4]
   11ca4:	4798      	blx	r3
   11ca6:	e7e0      	b.n	11c6a <net_icmpv6_input+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11ca8:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   11caa:	2b00      	cmp	r3, #0
   11cac:	d1ee      	bne.n	11c8c <net_icmpv6_input+0x3c>
   11cae:	e7db      	b.n	11c68 <net_icmpv6_input+0x18>
   11cb0:	20022ccc 	.word	0x20022ccc

00011cb4 <net_icmpv6_init>:
	.handler = icmpv6_handle_echo_request,
};

void net_icmpv6_init(void)
{
	net_icmpv6_register_handler(&echo_request_handler);
   11cb4:	4801      	ldr	r0, [pc, #4]	; (11cbc <net_icmpv6_init+0x8>)
   11cb6:	f7ff bfc1 	b.w	11c3c <net_icmpv6_register_handler>
   11cba:	bf00      	nop
   11cbc:	200200b4 	.word	0x200200b4

00011cc0 <net_nbr_link>:
	return NULL;
}

int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 const struct net_linkaddr *lladdr)
{
   11cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   11cc4:	7843      	ldrb	r3, [r0, #1]
{
   11cc6:	4606      	mov	r6, r0
	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   11cc8:	2bff      	cmp	r3, #255	; 0xff
{
   11cca:	4689      	mov	r9, r1
   11ccc:	4614      	mov	r4, r2
	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   11cce:	d149      	bne.n	11d64 <net_nbr_link+0xa4>
   11cd0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 11d70 <net_nbr_link+0xb0>
	int i, avail = -1;
   11cd4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   11cd8:	2700      	movs	r7, #0
   11cda:	46d0      	mov	r8, sl
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   11cdc:	1c6a      	adds	r2, r5, #1
   11cde:	f89a 3008 	ldrb.w	r3, [sl, #8]
   11ce2:	d115      	bne.n	11d10 <net_nbr_link+0x50>
   11ce4:	2b00      	cmp	r3, #0
   11ce6:	d03b      	beq.n	11d60 <net_nbr_link+0xa0>
			avail = i;
		}

		if (net_neighbor_lladdr[i].ref &&
		    !memcmp(lladdr->addr,
   11ce8:	7922      	ldrb	r2, [r4, #4]
   11cea:	6820      	ldr	r0, [r4, #0]
   11cec:	f10a 0102 	add.w	r1, sl, #2
   11cf0:	f015 fe1b 	bl	2792a <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   11cf4:	b970      	cbnz	r0, 11d14 <net_nbr_link+0x54>
			    net_neighbor_lladdr[i].lladdr.addr,
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   11cf6:	eb07 03c7 	add.w	r3, r7, r7, lsl #3
   11cfa:	4498      	add	r8, r3
   11cfc:	f898 3008 	ldrb.w	r3, [r8, #8]
   11d00:	3301      	adds	r3, #1
   11d02:	f888 3008 	strb.w	r3, [r8, #8]

			nbr->idx = i;
   11d06:	7077      	strb	r7, [r6, #1]
			nbr->iface = iface;
   11d08:	f8c6 9008 	str.w	r9, [r6, #8]
	net_neighbor_lladdr[avail].lladdr.type = lladdr->type;

	nbr->iface = iface;

	return 0;
}
   11d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (net_neighbor_lladdr[i].ref &&
   11d10:	2b00      	cmp	r3, #0
   11d12:	d1e9      	bne.n	11ce8 <net_nbr_link+0x28>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   11d14:	3701      	adds	r7, #1
   11d16:	2f08      	cmp	r7, #8
   11d18:	f10a 0a09 	add.w	sl, sl, #9
   11d1c:	d1de      	bne.n	11cdc <net_nbr_link+0x1c>
	if (avail < 0) {
   11d1e:	1c6b      	adds	r3, r5, #1
   11d20:	d023      	beq.n	11d6a <net_nbr_link+0xaa>
	net_neighbor_lladdr[avail].ref++;
   11d22:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   11d26:	eb08 0300 	add.w	r3, r8, r0
   11d2a:	7a1a      	ldrb	r2, [r3, #8]
   11d2c:	00ef      	lsls	r7, r5, #3
   11d2e:	3201      	adds	r2, #1
   11d30:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   11d32:	7075      	strb	r5, [r6, #1]
	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   11d34:	6821      	ldr	r1, [r4, #0]
   11d36:	7922      	ldrb	r2, [r4, #4]
	if (!lladdr_store || !new_addr) {
   11d38:	b131      	cbz	r1, 11d48 <net_nbr_link+0x88>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   11d3a:	2a06      	cmp	r2, #6
   11d3c:	d804      	bhi.n	11d48 <net_nbr_link+0x88>
	memcpy(lladdr_store->addr, new_addr, new_len);
   11d3e:	3002      	adds	r0, #2
	lladdr_store->len = new_len;
   11d40:	705a      	strb	r2, [r3, #1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11d42:	4440      	add	r0, r8
   11d44:	f015 fdff 	bl	27946 <memcpy>
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   11d48:	7922      	ldrb	r2, [r4, #4]
   11d4a:	443d      	add	r5, r7
   11d4c:	eb08 0305 	add.w	r3, r8, r5
   11d50:	705a      	strb	r2, [r3, #1]
	net_neighbor_lladdr[avail].lladdr.type = lladdr->type;
   11d52:	7963      	ldrb	r3, [r4, #5]
	return 0;
   11d54:	2000      	movs	r0, #0
	net_neighbor_lladdr[avail].lladdr.type = lladdr->type;
   11d56:	f808 3005 	strb.w	r3, [r8, r5]
	nbr->iface = iface;
   11d5a:	f8c6 9008 	str.w	r9, [r6, #8]
	return 0;
   11d5e:	e7d5      	b.n	11d0c <net_nbr_link+0x4c>
   11d60:	463d      	mov	r5, r7
   11d62:	e7d7      	b.n	11d14 <net_nbr_link+0x54>
		return -EALREADY;
   11d64:	f06f 0077 	mvn.w	r0, #119	; 0x77
   11d68:	e7d0      	b.n	11d0c <net_nbr_link+0x4c>
		return -ENOENT;
   11d6a:	f06f 0001 	mvn.w	r0, #1
   11d6e:	e7cd      	b.n	11d0c <net_nbr_link+0x4c>
   11d70:	20029e02 	.word	0x20029e02

00011d74 <net_nbr_unlink>:

int net_nbr_unlink(struct net_nbr *nbr, struct net_linkaddr *lladdr)
{
   11d74:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(lladdr);

	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   11d76:	7841      	ldrb	r1, [r0, #1]
   11d78:	29ff      	cmp	r1, #255	; 0xff
   11d7a:	d015      	beq.n	11da8 <net_nbr_unlink+0x34>
	}

	NET_ASSERT(nbr->idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
	NET_ASSERT(net_neighbor_lladdr[nbr->idx].ref > 0);

	net_neighbor_lladdr[nbr->idx].ref--;
   11d7c:	4c0c      	ldr	r4, [pc, #48]	; (11db0 <net_nbr_unlink+0x3c>)
   11d7e:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
   11d82:	4422      	add	r2, r4
   11d84:	7a13      	ldrb	r3, [r2, #8]
   11d86:	3b01      	subs	r3, #1
   11d88:	b2db      	uxtb	r3, r3
   11d8a:	7213      	strb	r3, [r2, #8]

	if (!net_neighbor_lladdr[nbr->idx].ref) {
   11d8c:	b933      	cbnz	r3, 11d9c <net_nbr_unlink+0x28>
		(void)memset(net_neighbor_lladdr[nbr->idx].lladdr.addr, 0,
   11d8e:	2209      	movs	r2, #9
   11d90:	2502      	movs	r5, #2
   11d92:	fb12 5201 	smlabb	r2, r2, r1, r5
   11d96:	18a1      	adds	r1, r4, r2
__ssp_bos_icheck3(memset, void *, int)
   11d98:	50a3      	str	r3, [r4, r2]
   11d9a:	808b      	strh	r3, [r1, #4]
			     sizeof(net_neighbor_lladdr[nbr->idx].lladdr.addr));
	}

	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   11d9c:	23ff      	movs	r3, #255	; 0xff
   11d9e:	7043      	strb	r3, [r0, #1]
	nbr->iface = NULL;
   11da0:	2300      	movs	r3, #0
   11da2:	6083      	str	r3, [r0, #8]

	return 0;
   11da4:	4618      	mov	r0, r3
}
   11da6:	bd30      	pop	{r4, r5, pc}
		return -EALREADY;
   11da8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   11dac:	e7fb      	b.n	11da6 <net_nbr_unlink+0x32>
   11dae:	bf00      	nop
   11db0:	20029e02 	.word	0x20029e02

00011db4 <net_nbr_get_lladdr>:
	NET_ASSERT(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
		   "idx %d >= max %d", idx,
		   CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
}
   11db4:	4b02      	ldr	r3, [pc, #8]	; (11dc0 <net_nbr_get_lladdr+0xc>)
	return &net_neighbor_lladdr[idx].lladdr;
   11db6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   11dba:	4418      	add	r0, r3
   11dbc:	4770      	bx	lr
   11dbe:	bf00      	nop
   11dc0:	20029e02 	.word	0x20029e02

00011dc4 <nbr_lookup.isra.0>:
}
#else
#define nbr_print(...)
#endif

static struct net_nbr *nbr_lookup(struct net_nbr_table *table,
   11dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11dc8:	4605      	mov	r5, r0
   11dca:	4688      	mov	r8, r1
				  struct net_if *iface,
				  const struct in6_addr *addr)
{
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   11dcc:	2600      	movs	r6, #0
   11dce:	4c0d      	ldr	r4, [pc, #52]	; (11e04 <nbr_lookup.isra.0+0x40>)
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   11dd0:	7823      	ldrb	r3, [r4, #0]
   11dd2:	4627      	mov	r7, r4
   11dd4:	b943      	cbnz	r3, 11de8 <nbr_lookup.isra.0+0x24>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   11dd6:	3601      	adds	r6, #1
   11dd8:	2e08      	cmp	r6, #8
   11dda:	f104 0454 	add.w	r4, r4, #84	; 0x54
   11dde:	d1f7      	bne.n	11dd0 <nbr_lookup.isra.0+0xc>
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
			return nbr;
		}
	}

	return NULL;
   11de0:	2700      	movs	r7, #0
}
   11de2:	4638      	mov	r0, r7
   11de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (iface && nbr->iface != iface) {
   11de8:	b115      	cbz	r5, 11df0 <nbr_lookup.isra.0+0x2c>
   11dea:	68a3      	ldr	r3, [r4, #8]
   11dec:	429d      	cmp	r5, r3
   11dee:	d1f2      	bne.n	11dd6 <nbr_lookup.isra.0+0x12>
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
   11df0:	68e0      	ldr	r0, [r4, #12]
   11df2:	2210      	movs	r2, #16
   11df4:	4641      	mov	r1, r8
   11df6:	3004      	adds	r0, #4
   11df8:	f015 fd97 	bl	2792a <memcmp>
   11dfc:	2800      	cmp	r0, #0
   11dfe:	d1ea      	bne.n	11dd6 <nbr_lookup.isra.0+0x12>
   11e00:	e7ef      	b.n	11de2 <nbr_lookup.isra.0+0x1e>
   11e02:	bf00      	nop
   11e04:	200200d8 	.word	0x200200d8

00011e08 <dbg_update_neighbor_lladdr.isra.0>:
		log_strdup(net_sprint_ipv6_addr(addr)));

	return nbr;
}

static void dbg_update_neighbor_lladdr(const struct net_linkaddr *new_lladdr,
   11e08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   11e0a:	2318      	movs	r3, #24
   11e0c:	7841      	ldrb	r1, [r0, #1]
   11e0e:	4a06      	ldr	r2, [pc, #24]	; (11e28 <dbg_update_neighbor_lladdr.isra.0+0x20>)
   11e10:	3002      	adds	r0, #2
   11e12:	f7ff fbb3 	bl	1157c <net_sprint_ll_addr_buf>
				       const struct net_linkaddr_storage *old_lladdr,
				       const struct in6_addr *addr)
{
	char out[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	snprintk(out, sizeof(out), "%s",
   11e16:	2118      	movs	r1, #24
   11e18:	4603      	mov	r3, r0
   11e1a:	4a04      	ldr	r2, [pc, #16]	; (11e2c <dbg_update_neighbor_lladdr.isra.0+0x24>)
   11e1c:	4668      	mov	r0, sp
   11e1e:	f010 fa58 	bl	222d2 <snprintk>
	NET_DBG("Updating neighbor %s lladdr %s (was %s)",
		log_strdup(net_sprint_ipv6_addr(addr)),
		log_strdup(net_sprint_ll_addr(new_lladdr->addr,
					      new_lladdr->len)),
		log_strdup(out));
}
   11e22:	b007      	add	sp, #28
   11e24:	f85d fb04 	ldr.w	pc, [sp], #4
   11e28:	20029e4a 	.word	0x20029e4a
   11e2c:	00029209 	.word	0x00029209

00011e30 <ipv6_nd_restart_reachable_timer>:
}
#endif /* CONFIG_NET_IPV6_NBR_CACHE */

#if defined(CONFIG_NET_IPV6_ND)
static void ipv6_nd_restart_reachable_timer(struct net_nbr *nbr, s64_t time)
{
   11e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e34:	4614      	mov	r4, r2
   11e36:	461d      	mov	r5, r3
	s64_t remaining;

	if (nbr) {
   11e38:	4606      	mov	r6, r0
   11e3a:	b130      	cbz	r0, 11e4a <ipv6_nd_restart_reachable_timer+0x1a>
		net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
   11e3c:	68c7      	ldr	r7, [r0, #12]
   11e3e:	f013 f8c9 	bl	24fd4 <k_uptime_get>
		net_ipv6_nbr_data(nbr)->reachable_timeout = time;
   11e42:	68f3      	ldr	r3, [r6, #12]
		net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
   11e44:	e9c7 0106 	strd	r0, r1, [r7, #24]
		net_ipv6_nbr_data(nbr)->reachable_timeout = time;
   11e48:	621c      	str	r4, [r3, #32]
	}

	remaining = k_delayed_work_remaining_get(&ipv6_nd_reachable_timer);
   11e4a:	4814      	ldr	r0, [pc, #80]	; (11e9c <ipv6_nd_restart_reachable_timer+0x6c>)
   11e4c:	f013 f8d0 	bl	24ff0 <k_delayed_work_remaining_get>
   11e50:	17c3      	asrs	r3, r0, #31
	if (!remaining || remaining > time) {
   11e52:	b118      	cbz	r0, 11e5c <ipv6_nd_restart_reachable_timer+0x2c>
   11e54:	4284      	cmp	r4, r0
   11e56:	eb75 0303 	sbcs.w	r3, r5, r3
   11e5a:	da1c      	bge.n	11e96 <ipv6_nd_restart_reachable_timer+0x66>
		k_delayed_work_submit(&ipv6_nd_reachable_timer, K_MSEC(time));
   11e5c:	2c00      	cmp	r4, #0
   11e5e:	f175 0300 	sbcs.w	r3, r5, #0
   11e62:	4626      	mov	r6, r4
   11e64:	bfb8      	it	lt
   11e66:	2600      	movlt	r6, #0
   11e68:	f240 34e7 	movw	r4, #999	; 0x3e7
 * @return The converted time value
 */
static TIME_CONSTEXPR inline u32_t k_ms_to_ticks_ceil32(u32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
   11e6c:	2500      	movs	r5, #0
			return (u32_t)((t * to_hz + off) / from_hz);
   11e6e:	03f0      	lsls	r0, r6, #15
   11e70:	1900      	adds	r0, r0, r4
   11e72:	ea4f 4156 	mov.w	r1, r6, lsr #17
   11e76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11e7a:	f04f 0300 	mov.w	r3, #0
   11e7e:	eb45 0101 	adc.w	r1, r5, r1
   11e82:	f7fa fc99 	bl	c7b8 <__aeabi_uldivmod>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11e86:	462b      	mov	r3, r5
	}
}
   11e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11e8c:	4602      	mov	r2, r0
   11e8e:	4903      	ldr	r1, [pc, #12]	; (11e9c <ipv6_nd_restart_reachable_timer+0x6c>)
   11e90:	4803      	ldr	r0, [pc, #12]	; (11ea0 <ipv6_nd_restart_reachable_timer+0x70>)
   11e92:	f00c bf15 	b.w	1ecc0 <k_delayed_work_submit_to_queue>
   11e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e9a:	bf00      	nop
   11e9c:	20022cd4 	.word	0x20022cd4
   11ea0:	200280bc 	.word	0x200280bc

00011ea4 <ipv6_nbr_set_state>:
{
   11ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   11ea6:	68c3      	ldr	r3, [r0, #12]
{
   11ea8:	4604      	mov	r4, r0
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   11eaa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   11eae:	428a      	cmp	r2, r1
   11eb0:	d00d      	beq.n	11ece <ipv6_nbr_set_state+0x2a>
   11eb2:	2a05      	cmp	r2, #5
   11eb4:	d00b      	beq.n	11ece <ipv6_nbr_set_state+0x2a>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   11eb6:	2902      	cmp	r1, #2
	net_ipv6_nbr_data(nbr)->state = new_state;
   11eb8:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   11ebc:	d107      	bne.n	11ece <ipv6_nbr_set_state+0x2a>
		if (stale_counter + 1 != UINT32_MAX) {
   11ebe:	4917      	ldr	r1, [pc, #92]	; (11f1c <ipv6_nbr_set_state+0x78>)
   11ec0:	680a      	ldr	r2, [r1, #0]
   11ec2:	460d      	mov	r5, r1
   11ec4:	1c90      	adds	r0, r2, #2
   11ec6:	d003      	beq.n	11ed0 <ipv6_nbr_set_state+0x2c>
			net_ipv6_nbr_data(nbr)->stale_counter = stale_counter++;
   11ec8:	1c50      	adds	r0, r2, #1
   11eca:	6008      	str	r0, [r1, #0]
   11ecc:	639a      	str	r2, [r3, #56]	; 0x38
}
   11ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   11ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11ed8:	4811      	ldr	r0, [pc, #68]	; (11f20 <ipv6_nbr_set_state+0x7c>)
   11eda:	f00c fdd3 	bl	1ea84 <z_impl_k_sem_take>
			stale_counter = 0U;
   11ede:	2300      	movs	r3, #0
				if (!n || !n->ref) {
   11ee0:	2754      	movs	r7, #84	; 0x54
			stale_counter = 0U;
   11ee2:	461a      	mov	r2, r3
			for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   11ee4:	4619      	mov	r1, r3
				if (!n || !n->ref) {
   11ee6:	4e0f      	ldr	r6, [pc, #60]	; (11f24 <ipv6_nbr_set_state+0x80>)
			stale_counter = 0U;
   11ee8:	602b      	str	r3, [r5, #0]
				if (!n || !n->ref) {
   11eea:	fb07 f001 	mul.w	r0, r7, r1
   11eee:	5d80      	ldrb	r0, [r0, r6]
   11ef0:	b148      	cbz	r0, 11f06 <ipv6_nbr_set_state+0x62>
				data = net_ipv6_nbr_data(nbr);
   11ef2:	68e0      	ldr	r0, [r4, #12]
				if (!data) {
   11ef4:	b138      	cbz	r0, 11f06 <ipv6_nbr_set_state+0x62>
				if (data->state != NET_IPV6_NBR_STATE_STALE) {
   11ef6:	f890 c030 	ldrb.w	ip, [r0, #48]	; 0x30
   11efa:	f1bc 0f02 	cmp.w	ip, #2
				data->stale_counter = stale_counter++;
   11efe:	bf02      	ittt	eq
   11f00:	2301      	moveq	r3, #1
   11f02:	6382      	streq	r2, [r0, #56]	; 0x38
   11f04:	3201      	addeq	r2, #1
			for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   11f06:	3101      	adds	r1, #1
   11f08:	2908      	cmp	r1, #8
   11f0a:	d1ee      	bne.n	11eea <ipv6_nbr_set_state+0x46>
   11f0c:	b103      	cbz	r3, 11f10 <ipv6_nbr_set_state+0x6c>
   11f0e:	602a      	str	r2, [r5, #0]
	z_impl_k_sem_give(sem);
   11f10:	4803      	ldr	r0, [pc, #12]	; (11f20 <ipv6_nbr_set_state+0x7c>)
}
   11f12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11f16:	f00c bd8f 	b.w	1ea38 <z_impl_k_sem_give>
   11f1a:	bf00      	nop
   11f1c:	20022d2c 	.word	0x20022d2c
   11f20:	20022d14 	.word	0x20022d14
   11f24:	200200d8 	.word	0x200200d8

00011f28 <ipv6_ns_reply_timeout>:
{
   11f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	s64_t current = k_uptime_get();
   11f2c:	f013 f852 	bl	24fd4 <k_uptime_get>
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
   11f30:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   11f34:	2700      	movs	r7, #0
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
   11f36:	1a24      	subs	r4, r4, r0
   11f38:	4d25      	ldr	r5, [pc, #148]	; (11fd0 <ipv6_ns_reply_timeout+0xa8>)
   11f3a:	eb67 0a01 	sbc.w	sl, r7, r1
		if (!nbr || !nbr->ref) {
   11f3e:	782b      	ldrb	r3, [r5, #0]
   11f40:	b363      	cbz	r3, 11f9c <ipv6_ns_reply_timeout+0x74>
		data = net_ipv6_nbr_data(nbr);
   11f42:	68ee      	ldr	r6, [r5, #12]
		if (!data) {
   11f44:	b356      	cbz	r6, 11f9c <ipv6_ns_reply_timeout+0x74>
		if (!data->send_ns) {
   11f46:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	; 0x28
   11f4a:	ea52 0103 	orrs.w	r1, r2, r3
   11f4e:	d025      	beq.n	11f9c <ipv6_ns_reply_timeout+0x74>
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
   11f50:	eb14 0802 	adds.w	r8, r4, r2
   11f54:	eb4a 0903 	adc.w	r9, sl, r3
		if (remaining > 0) {
   11f58:	f1b8 0f01 	cmp.w	r8, #1
   11f5c:	f179 0300 	sbcs.w	r3, r9, #0
   11f60:	db23      	blt.n	11faa <ipv6_ns_reply_timeout+0x82>
			if (!k_delayed_work_remaining_get(
   11f62:	481c      	ldr	r0, [pc, #112]	; (11fd4 <ipv6_ns_reply_timeout+0xac>)
   11f64:	f013 f844 	bl	24ff0 <k_delayed_work_remaining_get>
   11f68:	4606      	mov	r6, r0
   11f6a:	b9b8      	cbnz	r0, 11f9c <ipv6_ns_reply_timeout+0x74>
   11f6c:	f240 3ce7 	movw	ip, #999	; 0x3e7
   11f70:	ea4f 30c8 	mov.w	r0, r8, lsl #15
   11f74:	eb10 000c 	adds.w	r0, r0, ip
   11f78:	f04f 0c00 	mov.w	ip, #0
   11f7c:	ea4f 4158 	mov.w	r1, r8, lsr #17
   11f80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11f84:	f04f 0300 	mov.w	r3, #0
   11f88:	eb41 010c 	adc.w	r1, r1, ip
   11f8c:	f7fa fc14 	bl	c7b8 <__aeabi_uldivmod>
   11f90:	4633      	mov	r3, r6
   11f92:	4602      	mov	r2, r0
   11f94:	490f      	ldr	r1, [pc, #60]	; (11fd4 <ipv6_ns_reply_timeout+0xac>)
   11f96:	4810      	ldr	r0, [pc, #64]	; (11fd8 <ipv6_ns_reply_timeout+0xb0>)
   11f98:	f00c fe92 	bl	1ecc0 <k_delayed_work_submit_to_queue>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   11f9c:	3701      	adds	r7, #1
   11f9e:	2f08      	cmp	r7, #8
   11fa0:	f105 0554 	add.w	r5, r5, #84	; 0x54
   11fa4:	d1cb      	bne.n	11f3e <ipv6_ns_reply_timeout+0x16>
}
   11fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		data->send_ns = 0;
   11faa:	2200      	movs	r2, #0
   11fac:	2300      	movs	r3, #0
		if (!data->pending) {
   11fae:	6830      	ldr	r0, [r6, #0]
		data->send_ns = 0;
   11fb0:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
		if (!data->pending) {
   11fb4:	2800      	cmp	r0, #0
   11fb6:	d0f1      	beq.n	11f9c <ipv6_ns_reply_timeout+0x74>
		net_pkt_unref(data->pending);
   11fb8:	f012 f9c1 	bl	2433e <net_pkt_unref>
		net_pkt_unref(data->pending);
   11fbc:	6830      	ldr	r0, [r6, #0]
   11fbe:	f012 f9be 	bl	2433e <net_pkt_unref>
		data->pending = NULL;
   11fc2:	2300      	movs	r3, #0
		net_nbr_unref(nbr);
   11fc4:	4628      	mov	r0, r5
		data->pending = NULL;
   11fc6:	6033      	str	r3, [r6, #0]
		net_nbr_unref(nbr);
   11fc8:	f012 fd76 	bl	24ab8 <net_nbr_unref>
   11fcc:	e7e6      	b.n	11f9c <ipv6_ns_reply_timeout+0x74>
   11fce:	bf00      	nop
   11fd0:	200200d8 	.word	0x200200d8
   11fd4:	20022cf4 	.word	0x20022cf4
   11fd8:	200280bc 	.word	0x200280bc

00011fdc <add_nbr>:
{
   11fdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11fe0:	4605      	mov	r5, r0
   11fe2:	460e      	mov	r6, r1
   11fe4:	4617      	mov	r7, r2
   11fe6:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   11fe8:	f7ff feec 	bl	11dc4 <nbr_lookup.isra.0>
	if (nbr) {
   11fec:	4604      	mov	r4, r0
   11fee:	2800      	cmp	r0, #0
   11ff0:	d143      	bne.n	1207a <add_nbr+0x9e>
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   11ff2:	4825      	ldr	r0, [pc, #148]	; (12088 <add_nbr+0xac>)
   11ff4:	f012 fd69 	bl	24aca <net_nbr_get>
	if (!nbr) {
   11ff8:	4604      	mov	r4, r0
   11ffa:	2800      	cmp	r0, #0
   11ffc:	d136      	bne.n	1206c <add_nbr+0x90>
	return z_impl_k_sem_take(sem, timeout);
   11ffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12006:	4821      	ldr	r0, [pc, #132]	; (1208c <add_nbr+0xb0>)
   12008:	f00c fd3c 	bl	1ea84 <z_impl_k_sem_take>
	u32_t oldest = UINT32_MAX;
   1200c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12010:	4a1f      	ldr	r2, [pc, #124]	; (12090 <add_nbr+0xb4>)
	int nbr_idx = -1;
   12012:	460b      	mov	r3, r1
   12014:	4694      	mov	ip, r2
		if (!nbr || !nbr->ref) {
   12016:	7810      	ldrb	r0, [r2, #0]
   12018:	b188      	cbz	r0, 1203e <add_nbr+0x62>
		data = net_ipv6_nbr_data(nbr);
   1201a:	68d0      	ldr	r0, [r2, #12]
		if (!data || data->is_router ||
   1201c:	b178      	cbz	r0, 1203e <add_nbr+0x62>
   1201e:	f890 e035 	ldrb.w	lr, [r0, #53]	; 0x35
   12022:	f1be 0f00 	cmp.w	lr, #0
   12026:	d10a      	bne.n	1203e <add_nbr+0x62>
   12028:	f890 e030 	ldrb.w	lr, [r0, #48]	; 0x30
   1202c:	f1be 0f02 	cmp.w	lr, #2
   12030:	d105      	bne.n	1203e <add_nbr+0x62>
		if (nbr_idx == -1) {
   12032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   12036:	6b80      	ldr	r0, [r0, #56]	; 0x38
   12038:	d023      	beq.n	12082 <add_nbr+0xa6>
		if (oldest == MIN(oldest, data->stale_counter)) {
   1203a:	4288      	cmp	r0, r1
   1203c:	d321      	bcc.n	12082 <add_nbr+0xa6>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1203e:	3401      	adds	r4, #1
   12040:	2c08      	cmp	r4, #8
   12042:	f102 0254 	add.w	r2, r2, #84	; 0x54
   12046:	d1e6      	bne.n	12016 <add_nbr+0x3a>
	if (nbr_idx != -1) {
   12048:	1c5a      	adds	r2, r3, #1
   1204a:	d007      	beq.n	1205c <add_nbr+0x80>
				&net_ipv6_nbr_data(nbr)->addr);
   1204c:	2254      	movs	r2, #84	; 0x54
   1204e:	fb02 c303 	mla	r3, r2, r3, ip
		net_ipv6_nbr_rm(nbr->iface,
   12052:	68d9      	ldr	r1, [r3, #12]
   12054:	6898      	ldr	r0, [r3, #8]
   12056:	3104      	adds	r1, #4
   12058:	f013 f876 	bl	25148 <net_ipv6_nbr_rm>
	z_impl_k_sem_give(sem);
   1205c:	480b      	ldr	r0, [pc, #44]	; (1208c <add_nbr+0xb0>)
   1205e:	f00c fceb 	bl	1ea38 <z_impl_k_sem_give>
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   12062:	4809      	ldr	r0, [pc, #36]	; (12088 <add_nbr+0xac>)
   12064:	f012 fd31 	bl	24aca <net_nbr_get>
	if (!nbr) {
   12068:	4604      	mov	r4, r0
   1206a:	b130      	cbz	r0, 1207a <add_nbr+0x9e>
	nbr_init(nbr, iface, addr, is_router, state);
   1206c:	463b      	mov	r3, r7
   1206e:	4632      	mov	r2, r6
   12070:	4629      	mov	r1, r5
   12072:	f8cd 8000 	str.w	r8, [sp]
   12076:	f013 f834 	bl	250e2 <nbr_init>
}
   1207a:	4620      	mov	r0, r4
   1207c:	b002      	add	sp, #8
   1207e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12082:	4601      	mov	r1, r0
   12084:	4623      	mov	r3, r4
   12086:	e7da      	b.n	1203e <add_nbr+0x62>
   12088:	200200cc 	.word	0x200200cc
   1208c:	20022d14 	.word	0x20022d14
   12090:	200200d8 	.word	0x200200d8

00012094 <net_ipv6_send_ns>:
		     struct net_pkt *pending,
		     const struct in6_addr *src,
		     const struct in6_addr *dst,
		     const struct in6_addr *tgt,
		     bool is_my_address)
{
   12094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12098:	460d      	mov	r5, r1
   1209a:	4692      	mov	sl, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
   1209c:	2100      	movs	r1, #0
   1209e:	2214      	movs	r2, #20
{
   120a0:	b08d      	sub	sp, #52	; 0x34
   120a2:	4607      	mov	r7, r0
	struct net_icmpv6_ns_hdr *ns_hdr;
	struct in6_addr node_dst;
	struct net_nbr *nbr;
	u8_t llao_len;

	if (!dst) {
   120a4:	469b      	mov	fp, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
   120a6:	e9cd 1202 	strd	r1, r2, [sp, #8]
{
   120aa:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   120ae:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
	if (!dst) {
   120b2:	b9eb      	cbnz	r3, 120f0 <net_ipv6_send_ns+0x5c>
	dst->s6_addr[0]   = 0xFF;
   120b4:	f240 23ff 	movw	r3, #767	; 0x2ff
   120b8:	9304      	str	r3, [sp, #16]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   120ba:	f8ad b014 	strh.w	fp, [sp, #20]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   120be:	f8ad b016 	strh.w	fp, [sp, #22]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   120c2:	f8ad b018 	strh.w	fp, [sp, #24]
	dst->s6_addr[10]  = 0U;
   120c6:	f44f 7380 	mov.w	r3, #256	; 0x100
   120ca:	f8ad 301a 	strh.w	r3, [sp, #26]
	dst->s6_addr[12]  = 0xFF;
   120ce:	23ff      	movs	r3, #255	; 0xff
   120d0:	f88d 301c 	strb.w	r3, [sp, #28]
	dst->s6_addr[13]  = src->s6_addr[13];
   120d4:	f899 300d 	ldrb.w	r3, [r9, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   120d8:	f899 200f 	ldrb.w	r2, [r9, #15]
	dst->s6_addr[13]  = src->s6_addr[13];
   120dc:	f88d 301d 	strb.w	r3, [sp, #29]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   120e0:	f899 300e 	ldrb.w	r3, [r9, #14]
   120e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   120e8:	f8ad 301e 	strh.w	r3, [sp, #30]
		net_ipv6_addr_create_solicited_node(tgt, &node_dst);
		dst = &node_dst;
   120ec:	f10d 0b10 	add.w	fp, sp, #16
	}

	llao_len = get_llao_len(iface);

	if (is_my_address) {
   120f0:	f1b8 0f00 	cmp.w	r8, #0
   120f4:	d075      	beq.n	121e2 <net_ipv6_send_ns+0x14e>
		src = net_ipv6_unspecified_address();
   120f6:	f7ff fa6b 	bl	115d0 <net_ipv6_unspecified_address>
		llao_len = 0U;
   120fa:	2600      	movs	r6, #0
		src = net_ipv6_unspecified_address();
   120fc:	4682      	mov	sl, r0

			goto drop;
		}
	}

	pkt = net_pkt_alloc_with_buffer(iface,
   120fe:	f640 42cd 	movw	r2, #3277	; 0xccd
   12102:	2300      	movs	r3, #0
   12104:	4638      	mov	r0, r7
   12106:	e9cd 2300 	strd	r2, r3, [sp]
   1210a:	f106 0114 	add.w	r1, r6, #20
   1210e:	233a      	movs	r3, #58	; 0x3a
   12110:	2202      	movs	r2, #2
   12112:	f7ff fd31 	bl	11b78 <net_pkt_alloc_with_buffer>
					sizeof(struct net_icmpv6_ns_hdr) +
					llao_len,
					AF_INET6, IPPROTO_ICMPV6,
					ND_NET_BUF_TIMEOUT);
	if (!pkt) {
   12116:	4604      	mov	r4, r0
   12118:	2800      	cmp	r0, #0
   1211a:	f000 80a9 	beq.w	12270 <net_ipv6_send_ns+0x1dc>
	pkt->ipv6_hop_limit = hop_limit;
   1211e:	23ff      	movs	r3, #255	; 0xff
		goto drop;
	}

	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_ND_HOP_LIMIT);

	if (net_ipv6_create(pkt, src, dst) ||
   12120:	465a      	mov	r2, fp
   12122:	4651      	mov	r1, sl
   12124:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   12128:	f012 fcf6 	bl	24b18 <net_ipv6_create>
   1212c:	4602      	mov	r2, r0
   1212e:	2800      	cmp	r0, #0
   12130:	d148      	bne.n	121c4 <net_ipv6_send_ns+0x130>
	    net_icmpv6_create(pkt, NET_ICMPV6_NS, 0)) {
   12132:	2187      	movs	r1, #135	; 0x87
   12134:	4620      	mov	r0, r4
   12136:	f012 fbab 	bl	24890 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
   1213a:	4682      	mov	sl, r0
   1213c:	2800      	cmp	r0, #0
   1213e:	d141      	bne.n	121c4 <net_ipv6_send_ns+0x130>
		goto drop;
	}

	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
   12140:	4620      	mov	r0, r4
   12142:	a902      	add	r1, sp, #8
   12144:	f012 fb51 	bl	247ea <net_pkt_get_data>
	if (!ns_hdr) {
   12148:	4603      	mov	r3, r0
   1214a:	b3d8      	cbz	r0, 121c4 <net_ipv6_send_ns+0x130>
		goto drop;
	}

	ns_hdr->reserved = 0U;
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   1214c:	f10d 0e20 	add.w	lr, sp, #32
   12150:	464a      	mov	r2, r9
   12152:	46f4      	mov	ip, lr
	ns_hdr->reserved = 0U;
   12154:	f880 a000 	strb.w	sl, [r0]
   12158:	f880 a001 	strb.w	sl, [r0, #1]
   1215c:	f880 a002 	strb.w	sl, [r0, #2]
   12160:	f880 a003 	strb.w	sl, [r0, #3]
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   12164:	f109 0a10 	add.w	sl, r9, #16
   12168:	46f1      	mov	r9, lr
   1216a:	6810      	ldr	r0, [r2, #0]
   1216c:	6851      	ldr	r1, [r2, #4]
   1216e:	3208      	adds	r2, #8
   12170:	e8a9 0003 	stmia.w	r9!, {r0, r1}
   12174:	4552      	cmp	r2, sl
   12176:	46ce      	mov	lr, r9
   12178:	d1f6      	bne.n	12168 <net_ipv6_send_ns+0xd4>
   1217a:	3304      	adds	r3, #4
   1217c:	469a      	mov	sl, r3
   1217e:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   12182:	4662      	mov	r2, ip
   12184:	ca03      	ldmia	r2!, {r0, r1}
   12186:	4572      	cmp	r2, lr
   12188:	6018      	str	r0, [r3, #0]
   1218a:	6059      	str	r1, [r3, #4]
   1218c:	4694      	mov	ip, r2
   1218e:	f103 0308 	add.w	r3, r3, #8
   12192:	d1f6      	bne.n	12182 <net_ipv6_send_ns+0xee>

	if (net_pkt_set_data(pkt, &ns_access)) {
   12194:	4620      	mov	r0, r4
   12196:	a902      	add	r1, sp, #8
   12198:	f012 fb48 	bl	2482c <net_pkt_set_data>
   1219c:	4681      	mov	r9, r0
   1219e:	b988      	cbnz	r0, 121c4 <net_ipv6_send_ns+0x130>
		goto drop;
	}

	if (!is_my_address) {
   121a0:	f1b8 0f00 	cmp.w	r8, #0
   121a4:	d02f      	beq.n	12206 <net_ipv6_send_ns+0x172>
			      llao_len, NET_ICMPV6_ND_OPT_SLLAO)) {
			goto drop;
		}
	}

	net_pkt_cursor_init(pkt);
   121a6:	4620      	mov	r0, r4
   121a8:	f012 f939 	bl	2441e <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   121ac:	213a      	movs	r1, #58	; 0x3a
   121ae:	4620      	mov	r0, r4
   121b0:	f012 fd15 	bl	24bde <net_ipv6_finalize>

	nbr = add_nbr(iface, &ns_hdr->tgt, false,
   121b4:	2300      	movs	r3, #0
   121b6:	4651      	mov	r1, sl
   121b8:	461a      	mov	r2, r3
   121ba:	4638      	mov	r0, r7
   121bc:	f7ff ff0e 	bl	11fdc <add_nbr>
		      NET_IPV6_NBR_STATE_INCOMPLETE);
	if (!nbr) {
   121c0:	4606      	mov	r6, r0
   121c2:	bb50      	cbnz	r0, 1221a <net_ipv6_send_ns+0x186>
	net_stats_update_ipv6_nd_sent(iface);

	return 0;

drop:
	if (pending) {
   121c4:	2d00      	cmp	r5, #0
   121c6:	d04a      	beq.n	1225e <net_ipv6_send_ns+0x1ca>
   121c8:	f06f 0968 	mvn.w	r9, #104	; 0x68
		net_pkt_unref(pending);
   121cc:	4628      	mov	r0, r5
   121ce:	f012 f8b6 	bl	2433e <net_pkt_unref>
	}

	if (pkt) {
   121d2:	b114      	cbz	r4, 121da <net_ipv6_send_ns+0x146>
		net_pkt_unref(pkt);
   121d4:	4620      	mov	r0, r4
   121d6:	f012 f8b2 	bl	2433e <net_pkt_unref>
	}

	net_stats_update_ipv6_nd_drop(iface);

	return ret;
}
   121da:	4648      	mov	r0, r9
   121dc:	b00d      	add	sp, #52	; 0x34
   121de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t total_len = net_if_get_link_addr(iface)->len +
   121e2:	683b      	ldr	r3, [r7, #0]
   121e4:	7d1e      	ldrb	r6, [r3, #20]
		if (!src) {
   121e6:	f1ba 0f00 	cmp.w	sl, #0
   121ea:	d104      	bne.n	121f6 <net_ipv6_send_ns+0x162>
			src = net_if_ipv6_select_src_addr(iface, tgt);
   121ec:	4649      	mov	r1, r9
   121ee:	4638      	mov	r0, r7
   121f0:	f7ff f872 	bl	112d8 <net_if_ipv6_select_src_addr>
   121f4:	4682      	mov	sl, r0
		if (net_ipv6_is_addr_unspecified(src)) {
   121f6:	4650      	mov	r0, sl
   121f8:	f012 febc 	bl	24f74 <net_ipv6_is_addr_unspecified>
   121fc:	bb90      	cbnz	r0, 12264 <net_ipv6_send_ns+0x1d0>
	return ROUND_UP(total_len, 8U);
   121fe:	3609      	adds	r6, #9
   12200:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
   12204:	e77b      	b.n	120fe <net_ipv6_send_ns+0x6a>
	return &iface->if_dev->link_addr;
   12206:	6839      	ldr	r1, [r7, #0]
		if (!set_llao(pkt, net_if_get_link_addr(iface),
   12208:	2301      	movs	r3, #1
   1220a:	4632      	mov	r2, r6
   1220c:	4620      	mov	r0, r4
   1220e:	3110      	adds	r1, #16
   12210:	f012 fefa 	bl	25008 <set_llao>
   12214:	2800      	cmp	r0, #0
   12216:	d1c6      	bne.n	121a6 <net_ipv6_send_ns+0x112>
   12218:	e7d4      	b.n	121c4 <net_ipv6_send_ns+0x130>
	if (pending) {
   1221a:	b1bd      	cbz	r5, 1224c <net_ipv6_send_ns+0x1b8>
		if (!net_ipv6_nbr_data(nbr)->pending) {
   1221c:	68c7      	ldr	r7, [r0, #12]
   1221e:	683b      	ldr	r3, [r7, #0]
   12220:	2b00      	cmp	r3, #0
   12222:	d1d1      	bne.n	121c8 <net_ipv6_send_ns+0x134>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   12224:	4628      	mov	r0, r5
   12226:	f012 f871 	bl	2430c <net_pkt_ref>
   1222a:	6038      	str	r0, [r7, #0]
		net_ipv6_nbr_data(nbr)->send_ns = k_uptime_get();
   1222c:	68f7      	ldr	r7, [r6, #12]
   1222e:	f012 fed1 	bl	24fd4 <k_uptime_get>
   12232:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		if (!k_delayed_work_remaining_get(&ipv6_ns_reply_timer)) {
   12236:	4810      	ldr	r0, [pc, #64]	; (12278 <net_ipv6_send_ns+0x1e4>)
   12238:	f012 feda 	bl	24ff0 <k_delayed_work_remaining_get>
   1223c:	b930      	cbnz	r0, 1224c <net_ipv6_send_ns+0x1b8>
   1223e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   12242:	2300      	movs	r3, #0
   12244:	490c      	ldr	r1, [pc, #48]	; (12278 <net_ipv6_send_ns+0x1e4>)
   12246:	480d      	ldr	r0, [pc, #52]	; (1227c <net_ipv6_send_ns+0x1e8>)
   12248:	f00c fd3a 	bl	1ecc0 <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   1224c:	4620      	mov	r0, r4
   1224e:	f010 ff0e 	bl	2306e <net_send_data>
   12252:	2800      	cmp	r0, #0
   12254:	dac1      	bge.n	121da <net_ipv6_send_ns+0x146>
		if (pending) {
   12256:	b115      	cbz	r5, 1225e <net_ipv6_send_ns+0x1ca>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   12258:	68f0      	ldr	r0, [r6, #12]
   1225a:	f012 fe99 	bl	24f90 <nbr_clear_ns_pending>
	if (pending) {
   1225e:	f06f 0968 	mvn.w	r9, #104	; 0x68
   12262:	e7b7      	b.n	121d4 <net_ipv6_send_ns+0x140>
			ret = -EINVAL;
   12264:	f06f 0915 	mvn.w	r9, #21
	if (pending) {
   12268:	2d00      	cmp	r5, #0
   1226a:	d0b6      	beq.n	121da <net_ipv6_send_ns+0x146>
   1226c:	2400      	movs	r4, #0
   1226e:	e7ad      	b.n	121cc <net_ipv6_send_ns+0x138>
		ret = -ENOMEM;
   12270:	f06f 090b 	mvn.w	r9, #11
   12274:	e7f8      	b.n	12268 <net_ipv6_send_ns+0x1d4>
   12276:	bf00      	nop
   12278:	20022cf4 	.word	0x20022cf4
   1227c:	200280bc 	.word	0x200280bc

00012280 <handle_ra_input>:
#endif

static enum net_verdict handle_ra_input(struct net_pkt *pkt,
					struct net_ipv6_hdr *ip_hdr,
					struct net_icmp_hdr *icmp_hdr)
{
   12280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
   12284:	2300      	movs	r3, #0
{
   12286:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
   12288:	220c      	movs	r2, #12
{
   1228a:	b099      	sub	sp, #100	; 0x64
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
   1228c:	e9cd 3206 	strd	r3, r2, [sp, #24]
					      struct net_icmpv6_ra_hdr);
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   12290:	aa04      	add	r2, sp, #16
   12292:	9208      	str	r2, [sp, #32]
   12294:	2202      	movs	r2, #2
{
   12296:	4604      	mov	r4, r0
   12298:	468a      	mov	sl, r1
	u16_t length = net_pkt_get_len(pkt);
   1229a:	6906      	ldr	r6, [r0, #16]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   1229c:	9209      	str	r2, [sp, #36]	; 0x24
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;

	while (buf) {
   1229e:	b956      	cbnz	r6, 122b6 <handle_ra_input+0x36>
	struct net_icmpv6_ra_hdr *ra_hdr;
	struct net_if_router *router;
	u32_t mtu, reachable_time, retrans_timer;
	u16_t router_lifetime;

	ra_hdr = (struct net_icmpv6_ra_hdr *)net_pkt_get_data(pkt, &ra_access);
   122a0:	4620      	mov	r0, r4
   122a2:	a906      	add	r1, sp, #24
	u16_t length = net_pkt_get_len(pkt);
   122a4:	b29f      	uxth	r7, r3
	ra_hdr = (struct net_icmpv6_ra_hdr *)net_pkt_get_data(pkt, &ra_access);
   122a6:	f012 faa0 	bl	247ea <net_pkt_get_data>
	if (!ra_hdr) {
   122aa:	4605      	mov	r5, r0
   122ac:	b938      	cbnz	r0, 122be <handle_ra_input+0x3e>
	return NET_OK;

drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));

	return NET_DROP;
   122ae:	2002      	movs	r0, #2
}
   122b0:	b019      	add	sp, #100	; 0x64
   122b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bytes += buf->len;
   122b6:	89b2      	ldrh	r2, [r6, #12]
		buf = buf->frags;
   122b8:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
   122ba:	4413      	add	r3, r2
		buf = buf->frags;
   122bc:	e7ef      	b.n	1229e <handle_ra_input+0x1e>
	if (((length < (sizeof(struct net_ipv6_hdr) +
   122be:	2f39      	cmp	r7, #57	; 0x39
   122c0:	d909      	bls.n	122d6 <handle_ra_input+0x56>
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   122c2:	f89a 3007 	ldrb.w	r3, [sl, #7]
   122c6:	2bff      	cmp	r3, #255	; 0xff
   122c8:	d105      	bne.n	122d6 <handle_ra_input+0x56>
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   122ca:	f248 03fe 	movw	r3, #33022	; 0x80fe
   122ce:	f8ba 2008 	ldrh.w	r2, [sl, #8]
   122d2:	429a      	cmp	r2, r3
   122d4:	d003      	beq.n	122de <handle_ra_input+0x5e>
	     !net_ipv6_is_ll_addr(&ip_hdr->src)) &&
   122d6:	f898 3001 	ldrb.w	r3, [r8, #1]
   122da:	2b00      	cmp	r3, #0
   122dc:	d1e7      	bne.n	122ae <handle_ra_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   122de:	9907      	ldr	r1, [sp, #28]
   122e0:	4620      	mov	r0, r4
   122e2:	f012 f926 	bl	24532 <net_pkt_skip>
	router_lifetime = ntohs(ra_hdr->router_lifetime);
   122e6:	886b      	ldrh	r3, [r5, #2]
   122e8:	f8d5 8008 	ldr.w	r8, [r5, #8]
   122ec:	9302      	str	r3, [sp, #8]
	if (ra_hdr->cur_hop_limit) {
   122ee:	7829      	ldrb	r1, [r5, #0]
   122f0:	686b      	ldr	r3, [r5, #4]
   122f2:	fa98 f888 	rev.w	r8, r8
   122f6:	ba1b      	rev	r3, r3
   122f8:	b121      	cbz	r1, 12304 <handle_ra_input+0x84>
		net_ipv6_set_hop_limit(net_pkt_iface(pkt),
   122fa:	6a22      	ldr	r2, [r4, #32]
   122fc:	6852      	ldr	r2, [r2, #4]
	if (!iface->config.ip.ipv6) {
   122fe:	b10a      	cbz	r2, 12304 <handle_ra_input+0x84>
	iface->config.ip.ipv6->hop_limit = hop_limit;
   12300:	f882 110d 	strb.w	r1, [r2, #269]	; 0x10d
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   12304:	4aaf      	ldr	r2, [pc, #700]	; (125c4 <handle_ra_input+0x344>)
   12306:	1e59      	subs	r1, r3, #1
   12308:	4291      	cmp	r1, r2
   1230a:	d20d      	bcs.n	12328 <handle_ra_input+0xa8>
	    (net_if_ipv6_get_reachable_time(net_pkt_iface(pkt)) !=
   1230c:	6a22      	ldr	r2, [r4, #32]
   1230e:	6857      	ldr	r7, [r2, #4]
	if (!iface->config.ip.ipv6) {
   12310:	b12f      	cbz	r7, 1231e <handle_ra_input+0x9e>
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   12312:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
   12316:	429a      	cmp	r2, r3
   12318:	d006      	beq.n	12328 <handle_ra_input+0xa8>
	iface->config.ip.ipv6->base_reachable_time = reachable_time;
   1231a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
   1231e:	4638      	mov	r0, r7
   12320:	f011 faf8 	bl	23914 <net_if_ipv6_calc_reachable_time>
   12324:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	if (retrans_timer) {
   12328:	f1b8 0f00 	cmp.w	r8, #0
   1232c:	d005      	beq.n	1233a <handle_ra_input+0xba>
		net_if_ipv6_set_retrans_timer(net_pkt_iface(pkt),
   1232e:	6a23      	ldr	r3, [r4, #32]
   12330:	685b      	ldr	r3, [r3, #4]
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
#if defined(CONFIG_NET_NATIVE_IPV6)
	if (!iface->config.ip.ipv6) {
   12332:	b113      	cbz	r3, 1233a <handle_ra_input+0xba>
   12334:	68aa      	ldr	r2, [r5, #8]
		return;
	}

	iface->config.ip.ipv6->retrans_timer = retrans_timer;
   12336:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	pkt->ipv6_ext_opt_len = len;
   1233a:	230c      	movs	r3, #12
   1233c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
					net_pkt_get_data(pkt, &nd_access);
   12340:	4620      	mov	r0, r4
   12342:	a908      	add	r1, sp, #32
   12344:	f012 fa51 	bl	247ea <net_pkt_get_data>
   12348:	4605      	mov	r5, r0
	while (nd_opt_hdr) {
   1234a:	bb68      	cbnz	r0, 123a8 <handle_ra_input+0x128>
	router_lifetime = ntohs(ra_hdr->router_lifetime);
   1234c:	9b02      	ldr	r3, [sp, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt), &ip_hdr->src);
   1234e:	f10a 0108 	add.w	r1, sl, #8
	router_lifetime = ntohs(ra_hdr->router_lifetime);
   12352:	021a      	lsls	r2, r3, #8
   12354:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
   12358:	b292      	uxth	r2, r2
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt), &ip_hdr->src);
   1235a:	6a20      	ldr	r0, [r4, #32]
	router_lifetime = ntohs(ra_hdr->router_lifetime);
   1235c:	9203      	str	r2, [sp, #12]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt), &ip_hdr->src);
   1235e:	9102      	str	r1, [sp, #8]
   12360:	f7fe ff32 	bl	111c8 <net_if_ipv6_router_lookup>
	if (router) {
   12364:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   12368:	4603      	mov	r3, r0
   1236a:	2800      	cmp	r0, #0
   1236c:	f000 816a 	beq.w	12644 <handle_ra_input+0x3c4>
		if (!router_lifetime) {
   12370:	2a00      	cmp	r2, #0
   12372:	f040 815d 	bne.w	12630 <handle_ra_input+0x3b0>
			net_if_ipv6_router_rm(router);
   12376:	f7fe ff93 	bl	112a0 <net_if_ipv6_router_rm>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   1237a:	b16e      	cbz	r6, 12398 <handle_ra_input+0x118>
   1237c:	68f3      	ldr	r3, [r6, #12]
   1237e:	6818      	ldr	r0, [r3, #0]
   12380:	b150      	cbz	r0, 12398 <handle_ra_input+0x118>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   12382:	f010 fe74 	bl	2306e <net_send_data>
   12386:	2800      	cmp	r0, #0
   12388:	da03      	bge.n	12392 <handle_ra_input+0x112>
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   1238a:	68f3      	ldr	r3, [r6, #12]
   1238c:	6818      	ldr	r0, [r3, #0]
   1238e:	f011 ffd6 	bl	2433e <net_pkt_unref>
		nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   12392:	68f0      	ldr	r0, [r6, #12]
   12394:	f012 fdfc 	bl	24f90 <nbr_clear_ns_pending>
	net_if_stop_rs(net_pkt_iface(pkt));
   12398:	6a20      	ldr	r0, [r4, #32]
   1239a:	f7fe fce5 	bl	10d68 <net_if_stop_rs>
	net_pkt_unref(pkt);
   1239e:	4620      	mov	r0, r4
   123a0:	f011 ffcd 	bl	2433e <net_pkt_unref>
	return NET_OK;
   123a4:	2000      	movs	r0, #0
   123a6:	e783      	b.n	122b0 <handle_ra_input+0x30>
	return net_pkt_skip(pkt, access->size);
   123a8:	4620      	mov	r0, r4
   123aa:	9909      	ldr	r1, [sp, #36]	; 0x24
   123ac:	f012 f8c1 	bl	24532 <net_pkt_skip>
		switch (nd_opt_hdr->type) {
   123b0:	782f      	ldrb	r7, [r5, #0]
   123b2:	2f03      	cmp	r7, #3
   123b4:	d03a      	beq.n	1242c <handle_ra_input+0x1ac>
   123b6:	2f05      	cmp	r7, #5
   123b8:	d01f      	beq.n	123fa <handle_ra_input+0x17a>
   123ba:	2f01      	cmp	r7, #1
   123bc:	7869      	ldrb	r1, [r5, #1]
   123be:	f040 812c 	bne.w	1261a <handle_ra_input+0x39a>
	if (!read_llao(pkt, len, &llstorage)) {
   123c2:	4620      	mov	r0, r4
   123c4:	aa10      	add	r2, sp, #64	; 0x40
   123c6:	f012 fe53 	bl	25070 <read_llao>
   123ca:	2800      	cmp	r0, #0
   123cc:	f43f af6f 	beq.w	122ae <handle_ra_input+0x2e>
	lladdr.len = llstorage.len;
   123d0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
   123d4:	6a20      	ldr	r0, [r4, #32]
	lladdr.len = llstorage.len;
   123d6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	lladdr.addr = llstorage.addr;
   123da:	f10d 0342 	add.w	r3, sp, #66	; 0x42
   123de:	930c      	str	r3, [sp, #48]	; 0x30
	return pkt->frags->data;
   123e0:	6923      	ldr	r3, [r4, #16]
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
   123e2:	aa0c      	add	r2, sp, #48	; 0x30
				&NET_IPV6_HDR(pkt)->src,
   123e4:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
   123e6:	2302      	movs	r3, #2
   123e8:	3108      	adds	r1, #8
   123ea:	9300      	str	r3, [sp, #0]
   123ec:	463b      	mov	r3, r7
   123ee:	f013 f884 	bl	254fa <net_ipv6_nbr_add>
			if (!nbr) {
   123f2:	4606      	mov	r6, r0
   123f4:	2800      	cmp	r0, #0
   123f6:	d1a3      	bne.n	12340 <handle_ra_input+0xc0>
   123f8:	e759      	b.n	122ae <handle_ra_input+0x2e>
			if (net_pkt_skip(pkt, 2) ||
   123fa:	2102      	movs	r1, #2
   123fc:	4620      	mov	r0, r4
   123fe:	f012 f898 	bl	24532 <net_pkt_skip>
   12402:	2800      	cmp	r0, #0
   12404:	f47f af53 	bne.w	122ae <handle_ra_input+0x2e>
			    net_pkt_read_be32(pkt, &mtu)) {
   12408:	4620      	mov	r0, r4
   1240a:	a905      	add	r1, sp, #20
   1240c:	f012 f8b0 	bl	24570 <net_pkt_read_be32>
			if (net_pkt_skip(pkt, 2) ||
   12410:	2800      	cmp	r0, #0
   12412:	f47f af4c 	bne.w	122ae <handle_ra_input+0x2e>
			if (mtu < MIN_IPV6_MTU || mtu > MAX_IPV6_MTU) {
   12416:	9b05      	ldr	r3, [sp, #20]
   12418:	f5a3 62a0 	sub.w	r2, r3, #1280	; 0x500
   1241c:	f5b2 4f7b 	cmp.w	r2, #64256	; 0xfb00
   12420:	f4bf af45 	bcs.w	122ae <handle_ra_input+0x2e>
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   12424:	6a22      	ldr	r2, [r4, #32]
	iface->if_dev->mtu = mtu;
   12426:	6812      	ldr	r2, [r2, #0]
   12428:	8313      	strh	r3, [r2, #24]
}
   1242a:	e789      	b.n	12340 <handle_ra_input+0xc0>
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
   1242c:	ab10      	add	r3, sp, #64	; 0x40
   1242e:	930a      	str	r3, [sp, #40]	; 0x28
   12430:	231e      	movs	r3, #30
				net_pkt_get_data(pkt, &rapfx_access);
   12432:	4620      	mov	r0, r4
   12434:	a90a      	add	r1, sp, #40	; 0x28
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
   12436:	930b      	str	r3, [sp, #44]	; 0x2c
				net_pkt_get_data(pkt, &rapfx_access);
   12438:	f012 f9d7 	bl	247ea <net_pkt_get_data>
	if (!pfx_info) {
   1243c:	4605      	mov	r5, r0
   1243e:	2800      	cmp	r0, #0
   12440:	f43f af35 	beq.w	122ae <handle_ra_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   12444:	4620      	mov	r0, r4
   12446:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12448:	f012 f873 	bl	24532 <net_pkt_skip>
	valid_lifetime = ntohl(pfx_info->valid_lifetime);
   1244c:	f8d5 7002 	ldr.w	r7, [r5, #2]
   12450:	f8d5 3006 	ldr.w	r3, [r5, #6]
   12454:	ba3f      	rev	r7, r7
	preferred_lifetime = ntohl(pfx_info->preferred_lifetime);
   12456:	ba1b      	rev	r3, r3
	if (valid_lifetime >= preferred_lifetime &&
   12458:	429f      	cmp	r7, r3
   1245a:	f4ff af71 	bcc.w	12340 <handle_ra_input+0xc0>
   1245e:	f248 03fe 	movw	r3, #33022	; 0x80fe
   12462:	89ea      	ldrh	r2, [r5, #14]
   12464:	429a      	cmp	r2, r3
   12466:	f43f af6b 	beq.w	12340 <handle_ra_input+0xc0>
		if (pfx_info->flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   1246a:	f995 3001 	ldrsb.w	r3, [r5, #1]
   1246e:	2b00      	cmp	r3, #0
   12470:	da25      	bge.n	124be <handle_ra_input+0x23e>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   12472:	46a8      	mov	r8, r5
   12474:	f818 2b0e 	ldrb.w	r2, [r8], #14
   12478:	6a20      	ldr	r0, [r4, #32]
   1247a:	4641      	mov	r1, r8
   1247c:	f011 f9ac 	bl	237d8 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   12480:	b940      	cbnz	r0, 12494 <handle_ra_input+0x214>
		if (!prefix_info->valid_lifetime) {
   12482:	f8d5 3002 	ldr.w	r3, [r5, #2]
   12486:	b1d3      	cbz	r3, 124be <handle_ra_input+0x23e>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   12488:	4641      	mov	r1, r8
   1248a:	782a      	ldrb	r2, [r5, #0]
   1248c:	6a20      	ldr	r0, [r4, #32]
   1248e:	f011 f923 	bl	236d8 <net_if_ipv6_prefix_add>
		if (prefix) {
   12492:	b1a0      	cbz	r0, 124be <handle_ra_input+0x23e>
	switch (prefix_info->valid_lifetime) {
   12494:	f8d5 1002 	ldr.w	r1, [r5, #2]
   12498:	b151      	cbz	r1, 124b0 <handle_ra_input+0x230>
   1249a:	1c4a      	adds	r2, r1, #1
   1249c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   124a0:	d05a      	beq.n	12558 <handle_ra_input+0x2d8>
	prefix->is_infinite = is_infinite;
   124a2:	f36f 0300 	bfc	r3, #0, #1
   124a6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
		net_if_ipv6_prefix_set_timer(prefix,
   124aa:	f7fa fda5 	bl	cff8 <net_if_ipv6_prefix_set_timer>
		break;
   124ae:	e006      	b.n	124be <handle_ra_input+0x23e>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   124b0:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   124b4:	f100 0110 	add.w	r1, r0, #16
   124b8:	6a20      	ldr	r0, [r4, #32]
   124ba:	f011 f9b2 	bl	23822 <net_if_ipv6_prefix_rm>
		if ((pfx_info->flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   124be:	786b      	ldrb	r3, [r5, #1]
   124c0:	065b      	lsls	r3, r3, #25
   124c2:	f57f af3d 	bpl.w	12340 <handle_ra_input+0xc0>
   124c6:	2f00      	cmp	r7, #0
   124c8:	f43f af3a 	beq.w	12340 <handle_ra_input+0xc0>
		    valid_lifetime &&
   124cc:	782b      	ldrb	r3, [r5, #0]
   124ce:	2b40      	cmp	r3, #64	; 0x40
   124d0:	f47f af36 	bne.w	12340 <handle_ra_input+0xc0>
	struct in6_addr addr = { };
   124d4:	2300      	movs	r3, #0
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   124d6:	f248 01fe 	movw	r1, #33022	; 0x80fe
	net_ipv6_addr_create_iid(&addr,
   124da:	6a22      	ldr	r2, [r4, #32]
	struct in6_addr addr = { };
   124dc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
	net_ipv6_addr_create_iid(&addr,
   124e0:	6812      	ldr	r2, [r2, #0]
	struct in6_addr addr = { };
   124e2:	930f      	str	r3, [sp, #60]	; 0x3c
   124e4:	910c      	str	r1, [sp, #48]	; 0x30
	addr->s6_addr[1] = 0x80;
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   124e6:	930d      	str	r3, [sp, #52]	; 0x34

	switch (lladdr->len) {
   124e8:	7d13      	ldrb	r3, [r2, #20]
   124ea:	2b06      	cmp	r3, #6
   124ec:	d039      	beq.n	12562 <handle_ra_input+0x2e2>
   124ee:	2b08      	cmp	r3, #8
   124f0:	d055      	beq.n	1259e <handle_ra_input+0x31e>
   124f2:	2b02      	cmp	r3, #2
   124f4:	d113      	bne.n	1251e <handle_ra_input+0x29e>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154 ||
   124f6:	7d53      	ldrb	r3, [r2, #21]
   124f8:	2b01      	cmp	r3, #1
   124fa:	d001      	beq.n	12500 <handle_ra_input+0x280>
   124fc:	2b06      	cmp	r3, #6
   124fe:	d10e      	bne.n	1251e <handle_ra_input+0x29e>
		    lladdr->type == NET_LINK_CANBUS) {
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   12500:	2300      	movs	r3, #0
   12502:	930e      	str	r3, [sp, #56]	; 0x38
			addr->s6_addr[11] = 0xff;
   12504:	23ff      	movs	r3, #255	; 0xff
   12506:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
			addr->s6_addr[12] = 0xfe;
   1250a:	23fe      	movs	r3, #254	; 0xfe
   1250c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
			addr->s6_addr[13] = 0U;
			addr->s6_addr[14] = lladdr->addr[0];
   12510:	6913      	ldr	r3, [r2, #16]
   12512:	781a      	ldrb	r2, [r3, #0]
   12514:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
			addr->s6_addr[15] = lladdr->addr[1];
   12518:	785b      	ldrb	r3, [r3, #1]
   1251a:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   1251e:	462a      	mov	r2, r5
   12520:	f852 0f0e 	ldr.w	r0, [r2, #14]!
   12524:	ab0c      	add	r3, sp, #48	; 0x30
   12526:	6851      	ldr	r1, [r2, #4]
   12528:	c303      	stmia	r3!, {r0, r1}
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   1252a:	2100      	movs	r1, #0
   1252c:	a80c      	add	r0, sp, #48	; 0x30
   1252e:	f7fe fc25 	bl	10d7c <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   12532:	f8d5 b002 	ldr.w	fp, [r5, #2]
   12536:	4607      	mov	r7, r0
   12538:	2800      	cmp	r0, #0
   1253a:	d063      	beq.n	12604 <handle_ra_input+0x384>
   1253c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   12540:	2b01      	cmp	r3, #1
   12542:	d15f      	bne.n	12604 <handle_ra_input+0x384>
		if (prefix_info->valid_lifetime ==
   12544:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   12548:	d12f      	bne.n	125aa <handle_ra_input+0x32a>
	ifaddr->is_infinite = is_infinite;
   1254a:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   1254e:	f043 0301 	orr.w	r3, r3, #1
   12552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
   12556:	e6f3      	b.n	12340 <handle_ra_input+0xc0>
	prefix->is_infinite = is_infinite;
   12558:	f043 0301 	orr.w	r3, r3, #1
   1255c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
}
   12560:	e7ad      	b.n	124be <handle_ra_input+0x23e>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   12562:	6913      	ldr	r3, [r2, #16]
   12564:	7899      	ldrb	r1, [r3, #2]
   12566:	8818      	ldrh	r0, [r3, #0]
   12568:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
		addr->s6_addr[11] = 0xff;
   1256c:	21ff      	movs	r1, #255	; 0xff
   1256e:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
		addr->s6_addr[12] = 0xfe;
   12572:	21fe      	movs	r1, #254	; 0xfe
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   12574:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
		addr->s6_addr[12] = 0xfe;
   12578:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1257c:	f833 1f03 	ldrh.w	r1, [r3, #3]!
   12580:	f8ad 103d 	strh.w	r1, [sp, #61]	; 0x3d
   12584:	789b      	ldrb	r3, [r3, #2]
   12586:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
		if (lladdr->type == NET_LINK_BLUETOOTH) {
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   1258a:	7d53      	ldrb	r3, [r2, #21]
   1258c:	2b03      	cmp	r3, #3
   1258e:	d1c6      	bne.n	1251e <handle_ra_input+0x29e>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
		addr->s6_addr[8] ^= 0x02;
   12590:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12594:	f083 0302 	eor.w	r3, r3, #2
   12598:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		break;
   1259c:	e7bf      	b.n	1251e <handle_ra_input+0x29e>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1259e:	6912      	ldr	r2, [r2, #16]
   125a0:	ab0e      	add	r3, sp, #56	; 0x38
   125a2:	6810      	ldr	r0, [r2, #0]
   125a4:	6851      	ldr	r1, [r2, #4]
   125a6:	c303      	stmia	r3!, {r0, r1}
   125a8:	e7f2      	b.n	12590 <handle_ra_input+0x310>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   125aa:	f5bb 5fe1 	cmp.w	fp, #7200	; 0x1c20
   125ae:	d90b      	bls.n	125c8 <handle_ra_input+0x348>
			net_if_ipv6_addr_update_lifetime(
   125b0:	f8d5 1002 	ldr.w	r1, [r5, #2]
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   125b4:	4638      	mov	r0, r7
   125b6:	f7fa fcc7 	bl	cf48 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   125ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   125be:	f36f 0300 	bfc	r3, #0, #1
   125c2:	e7c6      	b.n	12552 <handle_ra_input+0x2d2>
   125c4:	0036ee80 	.word	0x0036ee80
	if (ifaddr->lifetime.timer_timeout == 0) {
   125c8:	69c0      	ldr	r0, [r0, #28]
   125ca:	b1b0      	cbz	r0, 125fa <handle_ra_input+0x37a>
	remaining = (u64_t)ifaddr->lifetime.timer_timeout +
   125cc:	4680      	mov	r8, r0
   125ce:	4a1f      	ldr	r2, [pc, #124]	; (1264c <handle_ra_input+0x3cc>)
   125d0:	6a3b      	ldr	r3, [r7, #32]
   125d2:	ea4f 79e0 	mov.w	r9, r0, asr #31
   125d6:	fbc2 8903 	smlal	r8, r9, r2, r3
	return (u32_t)k_uptime_get();
   125da:	f012 fcfb 	bl	24fd4 <k_uptime_get>
	return (u32_t)abs((s32_t)time1 - (s32_t)time2);
   125de:	69bb      	ldr	r3, [r7, #24]
   125e0:	1ac0      	subs	r0, r0, r3
   125e2:	f015 f98c 	bl	278fe <abs>
	return (u32_t)(remaining / MSEC_PER_SEC);
   125e6:	ebb8 0000 	subs.w	r0, r8, r0
   125ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   125ee:	f04f 0300 	mov.w	r3, #0
   125f2:	f169 0100 	sbc.w	r1, r9, #0
   125f6:	f7fa f8df 	bl	c7b8 <__aeabi_uldivmod>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   125fa:	4558      	cmp	r0, fp
   125fc:	d3d8      	bcc.n	125b0 <handle_ra_input+0x330>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   125fe:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   12602:	e7d7      	b.n	125b4 <handle_ra_input+0x334>
		if (prefix_info->valid_lifetime ==
   12604:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   12608:	bf0c      	ite	eq
   1260a:	2300      	moveq	r3, #0
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   1260c:	465b      	movne	r3, fp
   1260e:	2201      	movs	r2, #1
   12610:	6a20      	ldr	r0, [r4, #32]
   12612:	a90c      	add	r1, sp, #48	; 0x30
   12614:	f010 fe7b 	bl	2330e <net_if_ipv6_addr_add>
   12618:	e692      	b.n	12340 <handle_ra_input+0xc0>
			if (net_pkt_skip(pkt, nd_opt_hdr->len * 8U - 2)) {
   1261a:	f06f 0301 	mvn.w	r3, #1
   1261e:	4620      	mov	r0, r4
   12620:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   12624:	f011 ff85 	bl	24532 <net_pkt_skip>
   12628:	2800      	cmp	r0, #0
   1262a:	f43f ae89 	beq.w	12340 <handle_ra_input+0xc0>
   1262e:	e63e      	b.n	122ae <handle_ra_input+0x2e>
			if (nbr) {
   12630:	b11e      	cbz	r6, 1263a <handle_ra_input+0x3ba>
				net_ipv6_nbr_data(nbr)->is_router = true;
   12632:	2001      	movs	r0, #1
   12634:	68f1      	ldr	r1, [r6, #12]
   12636:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
			net_if_ipv6_router_update_lifetime(
   1263a:	4611      	mov	r1, r2
   1263c:	4618      	mov	r0, r3
   1263e:	f011 f930 	bl	238a2 <net_if_ipv6_router_update_lifetime>
   12642:	e69a      	b.n	1237a <handle_ra_input+0xfa>
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   12644:	6a20      	ldr	r0, [r4, #32]
   12646:	f7fe fdf1 	bl	1122c <net_if_ipv6_router_add>
   1264a:	e696      	b.n	1237a <handle_ra_input+0xfa>
   1264c:	7fffff9b 	.word	0x7fffff9b

00012650 <ipv6_nd_reachable_timeout>:
{
   12650:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	s64_t current = k_uptime_get();
   12654:	f012 fcbe 	bl	24fd4 <k_uptime_get>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   12658:	2500      	movs	r5, #0
	s64_t current = k_uptime_get();
   1265a:	4606      	mov	r6, r0
   1265c:	468a      	mov	sl, r1
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
   1265e:	462f      	mov	r7, r5
   12660:	4c35      	ldr	r4, [pc, #212]	; (12738 <ipv6_nd_reachable_timeout+0xe8>)
		if (!nbr || !nbr->ref) {
   12662:	7823      	ldrb	r3, [r4, #0]
   12664:	2b00      	cmp	r3, #0
   12666:	d03c      	beq.n	126e2 <ipv6_nd_reachable_timeout+0x92>
		data = net_ipv6_nbr_data(nbr);
   12668:	f8d4 c00c 	ldr.w	ip, [r4, #12]
		if (!data) {
   1266c:	f1bc 0f00 	cmp.w	ip, #0
   12670:	d037      	beq.n	126e2 <ipv6_nd_reachable_timeout+0x92>
		if (!data->reachable) {
   12672:	e9dc 2306 	ldrd	r2, r3, [ip, #24]
   12676:	ea52 0103 	orrs.w	r1, r2, r3
   1267a:	d032      	beq.n	126e2 <ipv6_nd_reachable_timeout+0x92>
		remaining = data->reachable + data->reachable_timeout - current;
   1267c:	f8dc 0020 	ldr.w	r0, [ip, #32]
   12680:	ebb2 0806 	subs.w	r8, r2, r6
   12684:	eb63 090a 	sbc.w	r9, r3, sl
   12688:	eb18 0200 	adds.w	r2, r8, r0
   1268c:	eb49 73e0 	adc.w	r3, r9, r0, asr #31
		if (remaining > 0) {
   12690:	2a01      	cmp	r2, #1
   12692:	f173 0100 	sbcs.w	r1, r3, #0
   12696:	db03      	blt.n	126a0 <ipv6_nd_reachable_timeout+0x50>
			ipv6_nd_restart_reachable_timer(NULL, remaining);
   12698:	2000      	movs	r0, #0
				ipv6_nd_restart_reachable_timer(nbr,
   1269a:	f7ff fbc9 	bl	11e30 <ipv6_nd_restart_reachable_timer>
   1269e:	e020      	b.n	126e2 <ipv6_nd_reachable_timeout+0x92>
		data->reachable = 0;
   126a0:	2300      	movs	r3, #0
   126a2:	2200      	movs	r2, #0
   126a4:	e9cc 2306 	strd	r2, r3, [ip, #24]
		switch (data->state) {
   126a8:	f89c 3030 	ldrb.w	r3, [ip, #48]	; 0x30
   126ac:	2b04      	cmp	r3, #4
   126ae:	d818      	bhi.n	126e2 <ipv6_nd_reachable_timeout+0x92>
   126b0:	e8df f003 	tbb	[pc, r3]
   126b4:	27231f03 	.word	0x27231f03
   126b8:	2c          	.byte	0x2c
   126b9:	00          	.byte	0x00
			if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   126ba:	f89c 3034 	ldrb.w	r3, [ip, #52]	; 0x34
   126be:	68a0      	ldr	r0, [r4, #8]
   126c0:	2b02      	cmp	r3, #2
   126c2:	f10c 0104 	add.w	r1, ip, #4
   126c6:	d902      	bls.n	126ce <ipv6_nd_reachable_timeout+0x7e>
				net_ipv6_nbr_rm(nbr->iface, &data->addr);
   126c8:	f012 fd3e 	bl	25148 <net_ipv6_nbr_rm>
   126cc:	e009      	b.n	126e2 <ipv6_nd_reachable_timeout+0x92>
				data->ns_count++;
   126ce:	3301      	adds	r3, #1
   126d0:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
   126d4:	2300      	movs	r3, #0
   126d6:	e9cd 1700 	strd	r1, r7, [sp]
   126da:	461a      	mov	r2, r3
   126dc:	4619      	mov	r1, r3
   126de:	f7ff fcd9 	bl	12094 <net_ipv6_send_ns>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   126e2:	3501      	adds	r5, #1
   126e4:	2d08      	cmp	r5, #8
   126e6:	f104 0454 	add.w	r4, r4, #84	; 0x54
   126ea:	d1ba      	bne.n	12662 <ipv6_nd_reachable_timeout+0x12>
}
   126ec:	b002      	add	sp, #8
   126ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			data->state = NET_IPV6_NBR_STATE_STALE;
   126f2:	2302      	movs	r3, #2
   126f4:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
			NET_DBG("nbr %p moving %s state to STALE (%d)",
   126f8:	e7f3      	b.n	126e2 <ipv6_nd_reachable_timeout+0x92>
			net_ipv6_nbr_rm(nbr->iface, &data->addr);
   126fa:	68a0      	ldr	r0, [r4, #8]
   126fc:	f10c 0104 	add.w	r1, ip, #4
   12700:	e7e2      	b.n	126c8 <ipv6_nd_reachable_timeout+0x78>
			data->state = NET_IPV6_NBR_STATE_PROBE;
   12702:	2304      	movs	r3, #4
			data->ns_count = 0U;
   12704:	f88c 7034 	strb.w	r7, [ip, #52]	; 0x34
			data->state = NET_IPV6_NBR_STATE_PROBE;
   12708:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
			if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   1270c:	f89c 3034 	ldrb.w	r3, [ip, #52]	; 0x34
   12710:	68a0      	ldr	r0, [r4, #8]
   12712:	2b02      	cmp	r3, #2
   12714:	f10c 0104 	add.w	r1, ip, #4
   12718:	d8d6      	bhi.n	126c8 <ipv6_nd_reachable_timeout+0x78>
				data->ns_count++;
   1271a:	3301      	adds	r3, #1
   1271c:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
   12720:	2300      	movs	r3, #0
   12722:	e9cd 1700 	strd	r1, r7, [sp]
   12726:	461a      	mov	r2, r3
   12728:	4619      	mov	r1, r3
   1272a:	f7ff fcb3 	bl	12094 <net_ipv6_send_ns>
				ipv6_nd_restart_reachable_timer(nbr,
   1272e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12732:	2300      	movs	r3, #0
   12734:	4620      	mov	r0, r4
   12736:	e7b0      	b.n	1269a <ipv6_nd_reachable_timeout+0x4a>
   12738:	200200d8 	.word	0x200200d8

0001273c <net_ipv6_nbr_init>:
	.handler = handle_ra_input,
};
#endif /* CONFIG_NET_IPV6_ND */

void net_ipv6_nbr_init(void)
{
   1273c:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   1273e:	480c      	ldr	r0, [pc, #48]	; (12770 <net_ipv6_nbr_init+0x34>)
   12740:	f7ff fa7c 	bl	11c3c <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   12744:	480b      	ldr	r0, [pc, #44]	; (12774 <net_ipv6_nbr_init+0x38>)
   12746:	f7ff fa79 	bl	11c3c <net_icmpv6_register_handler>
	k_delayed_work_init(&ipv6_ns_reply_timer, ipv6_ns_reply_timeout);
   1274a:	490b      	ldr	r1, [pc, #44]	; (12778 <net_ipv6_nbr_init+0x3c>)
   1274c:	480b      	ldr	r0, [pc, #44]	; (1277c <net_ipv6_nbr_init+0x40>)
   1274e:	f014 ff33 	bl	275b8 <k_delayed_work_init>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   12752:	480b      	ldr	r0, [pc, #44]	; (12780 <net_ipv6_nbr_init+0x44>)
   12754:	f7ff fa72 	bl	11c3c <net_icmpv6_register_handler>
	k_delayed_work_init(&ipv6_nd_reachable_timer,
   12758:	490a      	ldr	r1, [pc, #40]	; (12784 <net_ipv6_nbr_init+0x48>)
   1275a:	480b      	ldr	r0, [pc, #44]	; (12788 <net_ipv6_nbr_init+0x4c>)
   1275c:	f014 ff2c 	bl	275b8 <k_delayed_work_init>
			    ipv6_nd_reachable_timeout);
	k_sem_init(&nbr_lock, 1, UINT_MAX);
#endif
}
   12760:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   12764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12768:	2101      	movs	r1, #1
   1276a:	4808      	ldr	r0, [pc, #32]	; (1278c <net_ipv6_nbr_init+0x50>)
   1276c:	f014 bead 	b.w	274ca <z_impl_k_sem_init>
   12770:	20020378 	.word	0x20020378
   12774:	200200c0 	.word	0x200200c0
   12778:	00011f29 	.word	0x00011f29
   1277c:	20022cf4 	.word	0x20022cf4
   12780:	20020384 	.word	0x20020384
   12784:	00012651 	.word	0x00012651
   12788:	20022cd4 	.word	0x20022cd4
   1278c:	20022d14 	.word	0x20022d14

00012790 <net_ipv6_mld_init>:
	.handler = handle_mld_query,
};

void net_ipv6_mld_init(void)
{
	net_icmpv6_register_handler(&mld_query_input_handler);
   12790:	4801      	ldr	r0, [pc, #4]	; (12798 <net_ipv6_mld_init+0x8>)
   12792:	f7ff ba53 	b.w	11c3c <net_icmpv6_register_handler>
   12796:	bf00      	nop
   12798:	20020390 	.word	0x20020390

0001279c <sys_slist_find_and_remove.constprop.0>:
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1279c:	2100      	movs	r1, #0
   1279e:	4a0d      	ldr	r2, [pc, #52]	; (127d4 <sys_slist_find_and_remove.constprop.0+0x38>)
   127a0:	6813      	ldr	r3, [r2, #0]
   127a2:	b90b      	cbnz	r3, 127a8 <sys_slist_find_and_remove.constprop.0+0xc>
   127a4:	4618      	mov	r0, r3
   127a6:	4770      	bx	lr
   127a8:	4283      	cmp	r3, r0
   127aa:	d110      	bne.n	127ce <sys_slist_find_and_remove.constprop.0+0x32>
Z_GENLIST_REMOVE(slist, snode)
   127ac:	6803      	ldr	r3, [r0, #0]
   127ae:	b941      	cbnz	r1, 127c2 <sys_slist_find_and_remove.constprop.0+0x26>
   127b0:	6851      	ldr	r1, [r2, #4]
	list->head = node;
   127b2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   127b4:	4288      	cmp	r0, r1
   127b6:	d100      	bne.n	127ba <sys_slist_find_and_remove.constprop.0+0x1e>
	list->tail = node;
   127b8:	6053      	str	r3, [r2, #4]
	parent->next = child;
   127ba:	2300      	movs	r3, #0
   127bc:	6003      	str	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   127be:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   127c0:	4770      	bx	lr
	parent->next = child;
   127c2:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   127c4:	6853      	ldr	r3, [r2, #4]
   127c6:	4298      	cmp	r0, r3
	list->tail = node;
   127c8:	bf08      	it	eq
   127ca:	6051      	streq	r1, [r2, #4]
}
   127cc:	e7f5      	b.n	127ba <sys_slist_find_and_remove.constprop.0+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   127ce:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   127d0:	681b      	ldr	r3, [r3, #0]
   127d2:	e7e6      	b.n	127a2 <sys_slist_find_and_remove.constprop.0+0x6>
   127d4:	20022d30 	.word	0x20022d30

000127d8 <net_route_get_nbr>:
{
	int i;

	NET_ASSERT(route);

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   127d8:	4a09      	ldr	r2, [pc, #36]	; (12800 <net_route_get_nbr+0x28>)
   127da:	2300      	movs	r3, #0
   127dc:	4611      	mov	r1, r2
{
   127de:	b510      	push	{r4, lr}
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   127e0:	7814      	ldrb	r4, [r2, #0]
   127e2:	b114      	cbz	r4, 127ea <net_route_get_nbr+0x12>
			continue;
		}

		if (nbr->data == (u8_t *)route) {
   127e4:	68d4      	ldr	r4, [r2, #12]
   127e6:	4284      	cmp	r4, r0
   127e8:	d006      	beq.n	127f8 <net_route_get_nbr+0x20>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   127ea:	3301      	adds	r3, #1
   127ec:	2b08      	cmp	r3, #8
   127ee:	f102 0238 	add.w	r2, r2, #56	; 0x38
   127f2:	d1f5      	bne.n	127e0 <net_route_get_nbr+0x8>

			return nbr;
		}
	}

	return NULL;
   127f4:	2000      	movs	r0, #0
}
   127f6:	bd10      	pop	{r4, pc}
	return &net_route_entries_pool[idx].nbr;
   127f8:	2038      	movs	r0, #56	; 0x38
   127fa:	fb00 1003 	mla	r0, r0, r3, r1
   127fe:	e7fa      	b.n	127f6 <net_route_get_nbr+0x1e>
   12800:	2002039c 	.word	0x2002039c

00012804 <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   12804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0U;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   12808:	2700      	movs	r7, #0
{
   1280a:	4680      	mov	r8, r0
   1280c:	4689      	mov	r9, r1
	u8_t longest_match = 0U;
   1280e:	46bb      	mov	fp, r7
	struct net_route_entry *route, *found = NULL;
   12810:	463d      	mov	r5, r7
   12812:	4e24      	ldr	r6, [pc, #144]	; (128a4 <net_route_lookup+0xa0>)
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   12814:	7832      	ldrb	r2, [r6, #0]
   12816:	b372      	cbz	r2, 12876 <net_route_lookup+0x72>
			continue;
		}

		if (iface && nbr->iface != iface) {
   12818:	f1b8 0f00 	cmp.w	r8, #0
   1281c:	d002      	beq.n	12824 <net_route_lookup+0x20>
   1281e:	68b2      	ldr	r2, [r6, #8]
   12820:	4542      	cmp	r2, r8
   12822:	d128      	bne.n	12876 <net_route_lookup+0x72>
			continue;
		}

		route = net_route_data(nbr);
   12824:	f8d6 a00c 	ldr.w	sl, [r6, #12]

		if (route->prefix_len >= longest_match &&
   12828:	f89a 4020 	ldrb.w	r4, [sl, #32]
   1282c:	455c      	cmp	r4, fp
   1282e:	d322      	bcc.n	12876 <net_route_lookup+0x72>
	if (length > 128) {
   12830:	2c80      	cmp	r4, #128	; 0x80
   12832:	d820      	bhi.n	12876 <net_route_lookup+0x72>
		    net_ipv6_is_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   12834:	f10a 0110 	add.w	r1, sl, #16
	if (memcmp(addr1, addr2, bytes)) {
   12838:	08e2      	lsrs	r2, r4, #3
   1283a:	4648      	mov	r0, r9
   1283c:	e9cd 1200 	strd	r1, r2, [sp]
   12840:	f015 f873 	bl	2792a <memcmp>
   12844:	23ff      	movs	r3, #255	; 0xff
   12846:	b9b0      	cbnz	r0, 12876 <net_route_lookup+0x72>
	u8_t bits = 128 - length;
   12848:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   1284c:	f014 0407 	ands.w	r4, r4, #7
   12850:	d00e      	beq.n	12870 <net_route_lookup+0x6c>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   12852:	9a01      	ldr	r2, [sp, #4]
   12854:	9900      	ldr	r1, [sp, #0]
   12856:	f819 0002 	ldrb.w	r0, [r9, r2]
   1285a:	5c8a      	ldrb	r2, [r1, r2]
   1285c:	4050      	eors	r0, r2
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1285e:	f1c4 0208 	rsb	r2, r4, #8
   12862:	fa03 f202 	lsl.w	r2, r3, r2
   12866:	405a      	eors	r2, r3
   12868:	fa02 f404 	lsl.w	r4, r2, r4
		if (route->prefix_len >= longest_match &&
   1286c:	4220      	tst	r0, r4
   1286e:	d102      	bne.n	12876 <net_route_lookup+0x72>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   12870:	4655      	mov	r5, sl
   12872:	f89a b020 	ldrb.w	fp, [sl, #32]
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   12876:	3701      	adds	r7, #1
   12878:	2f08      	cmp	r7, #8
   1287a:	d004      	beq.n	12886 <net_route_lookup+0x82>
   1287c:	f01b 0f80 	tst.w	fp, #128	; 0x80
   12880:	f106 0638 	add.w	r6, r6, #56	; 0x38
   12884:	d0c6      	beq.n	12814 <net_route_lookup+0x10>
		}
	}

	if (found) {
   12886:	b14d      	cbz	r5, 1289c <net_route_lookup+0x98>
	sys_slist_find_and_remove(&routes, &route->node);
   12888:	4628      	mov	r0, r5
   1288a:	f7ff ff87 	bl	1279c <sys_slist_find_and_remove.constprop.0>
Z_GENLIST_PREPEND(slist, snode)
   1288e:	4b06      	ldr	r3, [pc, #24]	; (128a8 <net_route_lookup+0xa4>)
   12890:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   12892:	602a      	str	r2, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   12894:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12896:	601d      	str	r5, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   12898:	b902      	cbnz	r2, 1289c <net_route_lookup+0x98>
	list->tail = node;
   1289a:	605d      	str	r5, [r3, #4]

		update_route_access(found);
	}

	return found;
}
   1289c:	4628      	mov	r0, r5
   1289e:	b003      	add	sp, #12
   128a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128a4:	2002039c 	.word	0x2002039c
   128a8:	20022d30 	.word	0x20022d30

000128ac <net_route_del_by_nexthop>:

	return 0;
}

int net_route_del_by_nexthop(struct net_if *iface, struct in6_addr *nexthop)
{
   128ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, ret;

	NET_ASSERT(iface);
	NET_ASSERT(nexthop);

	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
   128b0:	f012 fc5a 	bl	25168 <net_ipv6_nbr_lookup>
	int count = 0, status = 0;
   128b4:	2600      	movs	r6, #0
	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
   128b6:	4607      	mov	r7, r0
	int count = 0, status = 0;
   128b8:	4634      	mov	r4, r6
   128ba:	4d0d      	ldr	r5, [pc, #52]	; (128f0 <net_route_del_by_nexthop+0x44>)
   128bc:	f505 78e0 	add.w	r8, r5, #448	; 0x1c0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);
		struct net_route_entry *route = net_route_data(nbr);
   128c0:	68e8      	ldr	r0, [r5, #12]

		if (!route) {
   128c2:	b140      	cbz	r0, 128d6 <net_route_del_by_nexthop+0x2a>
			continue;
		}

		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
   128c4:	6843      	ldr	r3, [r0, #4]
   128c6:	b133      	cbz	r3, 128d6 <net_route_del_by_nexthop+0x2a>
					     node) {
			if (nexthop_route->nbr == nbr_nexthop) {
   128c8:	685a      	ldr	r2, [r3, #4]
   128ca:	42ba      	cmp	r2, r7
   128cc:	d10c      	bne.n	128e8 <net_route_del_by_nexthop+0x3c>
				/* This route contains this nexthop */
				ret = net_route_del(route);
   128ce:	f013 fa0c 	bl	25cea <net_route_del>
				if (!ret) {
   128d2:	b958      	cbnz	r0, 128ec <net_route_del_by_nexthop+0x40>
					count++;
   128d4:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   128d6:	3538      	adds	r5, #56	; 0x38
   128d8:	45a8      	cmp	r8, r5
   128da:	d1f1      	bne.n	128c0 <net_route_del_by_nexthop+0x14>
				break;
			}
		}
	}

	if (count) {
   128dc:	b90c      	cbnz	r4, 128e2 <net_route_del_by_nexthop+0x36>
		return count;
	} else if (status < 0) {
   128de:	ea06 74e6 	and.w	r4, r6, r6, asr #31
		return status;
	}

	return 0;
}
   128e2:	4620      	mov	r0, r4
   128e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   128e8:	681b      	ldr	r3, [r3, #0]
	return node->next;
   128ea:	e7ec      	b.n	128c6 <net_route_del_by_nexthop+0x1a>
   128ec:	4606      	mov	r6, r0
   128ee:	e7f2      	b.n	128d6 <net_route_del_by_nexthop+0x2a>
   128f0:	2002039c 	.word	0x2002039c

000128f4 <conn_set_unused>:

	sys_slist_prepend(&conn_used, &conn->node);
}

static void conn_set_unused(struct net_conn *conn)
{
   128f4:	b510      	push	{r4, lr}
   128f6:	4604      	mov	r4, r0
   128f8:	2240      	movs	r2, #64	; 0x40
   128fa:	2100      	movs	r1, #0
   128fc:	f015 f85d 	bl	279ba <memset>
Z_GENLIST_PREPEND(slist, snode)
   12900:	4b03      	ldr	r3, [pc, #12]	; (12910 <conn_set_unused+0x1c>)
   12902:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   12904:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   12906:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12908:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1290a:	b902      	cbnz	r2, 1290e <conn_set_unused+0x1a>
	list->tail = node;
   1290c:	605c      	str	r4, [r3, #4]
	(void)memset(conn, 0, sizeof(*conn));

	sys_slist_prepend(&conn_unused, &conn->node);
}
   1290e:	bd10      	pop	{r4, pc}
   12910:	20022d38 	.word	0x20022d38

00012914 <net_conn_register>:
		      u16_t remote_port,
		      u16_t local_port,
		      net_conn_cb_t cb,
		      void *user_data,
		      struct net_conn_handle **handle)
{
   12914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12918:	ed2d 8b02 	vpush	{d8}
   1291c:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1291e:	4a6c      	ldr	r2, [pc, #432]	; (12ad0 <net_conn_register+0x1bc>)
{
   12920:	b083      	sub	sp, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   12922:	6814      	ldr	r4, [r2, #0]
{
   12924:	4680      	mov	r8, r0
   12926:	4689      	mov	r9, r1
   12928:	469a      	mov	sl, r3
   1292a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
   1292e:	f8bd 703c 	ldrh.w	r7, [sp, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   12932:	b18c      	cbz	r4, 12958 <net_conn_register+0x44>
   12934:	ba72      	rev16	r2, r6
   12936:	b293      	uxth	r3, r2
   12938:	ba7a      	rev16	r2, r7
   1293a:	9300      	str	r3, [sp, #0]
   1293c:	b293      	uxth	r3, r2
   1293e:	9301      	str	r3, [sp, #4]
					    &net_sin6(local_addr)->sin6_addr,
   12940:	f10a 0304 	add.w	r3, sl, #4
   12944:	ee08 3a10 	vmov	s16, r3
					    &net_sin6(remote_addr)->sin6_addr,
   12948:	f105 0b04 	add.w	fp, r5, #4
		if (conn->proto != proto) {
   1294c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   1294e:	4542      	cmp	r2, r8
   12950:	d009      	beq.n	12966 <net_conn_register+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12952:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   12954:	2c00      	cmp	r4, #0
   12956:	d1f9      	bne.n	1294c <net_conn_register+0x38>
	node = sys_slist_peek_head(&conn_unused);
   12958:	4a5e      	ldr	r2, [pc, #376]	; (12ad4 <net_conn_register+0x1c0>)
   1295a:	6811      	ldr	r1, [r2, #0]
	if (!node) {
   1295c:	2900      	cmp	r1, #0
   1295e:	d148      	bne.n	129f2 <net_conn_register+0xde>
		return -EALREADY;
	}

	conn = conn_get_unused();
	if (!conn) {
		return -ENOENT;
   12960:	f06f 0001 	mvn.w	r0, #1
   12964:	e040      	b.n	129e8 <net_conn_register+0xd4>
		if (conn->family != family) {
   12966:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
   1296a:	454a      	cmp	r2, r9
   1296c:	d1f1      	bne.n	12952 <net_conn_register+0x3e>
		if (remote_addr) {
   1296e:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
   12972:	f002 0202 	and.w	r2, r2, #2
   12976:	b1c5      	cbz	r5, 129aa <net_conn_register+0x96>
			if (!(conn->flags & NET_CONN_REMOTE_ADDR_SET)) {
   12978:	2a00      	cmp	r2, #0
   1297a:	d0ea      	beq.n	12952 <net_conn_register+0x3e>
			if (IS_ENABLED(CONFIG_NET_IPV6) &&
   1297c:	882a      	ldrh	r2, [r5, #0]
   1297e:	2a02      	cmp	r2, #2
   12980:	d1e7      	bne.n	12952 <net_conn_register+0x3e>
			    remote_addr->sa_family == AF_INET6 &&
   12982:	88a2      	ldrh	r2, [r4, #4]
   12984:	2a02      	cmp	r2, #2
   12986:	d1e4      	bne.n	12952 <net_conn_register+0x3e>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   12988:	2210      	movs	r2, #16
   1298a:	4658      	mov	r0, fp
   1298c:	f104 0108 	add.w	r1, r4, #8
   12990:	f014 ffcb 	bl	2792a <memcmp>
				if (!net_ipv6_addr_cmp(
   12994:	2800      	cmp	r0, #0
   12996:	d1dc      	bne.n	12952 <net_conn_register+0x3e>
		if (local_addr) {
   12998:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
   1299c:	f002 0204 	and.w	r2, r2, #4
   129a0:	f1ba 0f00 	cmp.w	sl, #0
   129a4:	d104      	bne.n	129b0 <net_conn_register+0x9c>
		} else if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
   129a6:	b1aa      	cbz	r2, 129d4 <net_conn_register+0xc0>
   129a8:	e7d3      	b.n	12952 <net_conn_register+0x3e>
		} else if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
   129aa:	2a00      	cmp	r2, #0
   129ac:	d0f4      	beq.n	12998 <net_conn_register+0x84>
   129ae:	e7d0      	b.n	12952 <net_conn_register+0x3e>
			if (!(conn->flags & NET_CONN_LOCAL_ADDR_SET)) {
   129b0:	2a00      	cmp	r2, #0
   129b2:	d0ce      	beq.n	12952 <net_conn_register+0x3e>
			if (IS_ENABLED(CONFIG_NET_IPV6) &&
   129b4:	f8ba 2000 	ldrh.w	r2, [sl]
   129b8:	2a02      	cmp	r2, #2
   129ba:	d1ca      	bne.n	12952 <net_conn_register+0x3e>
			    local_addr->sa_family == AF_INET6 &&
   129bc:	8ba2      	ldrh	r2, [r4, #28]
   129be:	2a02      	cmp	r2, #2
   129c0:	d1c7      	bne.n	12952 <net_conn_register+0x3e>
   129c2:	2210      	movs	r2, #16
   129c4:	ee18 0a10 	vmov	r0, s16
   129c8:	f104 0120 	add.w	r1, r4, #32
   129cc:	f014 ffad 	bl	2792a <memcmp>
				if (!net_ipv6_addr_cmp(
   129d0:	2800      	cmp	r0, #0
   129d2:	d1be      	bne.n	12952 <net_conn_register+0x3e>
		if (net_sin(&conn->remote_addr)->sin_port !=
   129d4:	88e2      	ldrh	r2, [r4, #6]
   129d6:	9b00      	ldr	r3, [sp, #0]
   129d8:	429a      	cmp	r2, r3
   129da:	d1ba      	bne.n	12952 <net_conn_register+0x3e>
		if (net_sin(&conn->local_addr)->sin_port !=
   129dc:	8be2      	ldrh	r2, [r4, #30]
   129de:	9b01      	ldr	r3, [sp, #4]
   129e0:	429a      	cmp	r2, r3
   129e2:	d1b6      	bne.n	12952 <net_conn_register+0x3e>
		return -EALREADY;
   129e4:	f06f 0077 	mvn.w	r0, #119	; 0x77

	return 0;
error:
	conn_set_unused(conn);
	return -EINVAL;
}
   129e8:	b003      	add	sp, #12
   129ea:	ecbd 8b02 	vpop	{d8}
   129ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_REMOVE(slist, snode)
   129f2:	6850      	ldr	r0, [r2, #4]
   129f4:	680c      	ldr	r4, [r1, #0]
   129f6:	4281      	cmp	r1, r0
	list->head = node;
   129f8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   129fa:	bf08      	it	eq
   129fc:	6054      	streq	r4, [r2, #4]
	parent->next = child;
   129fe:	2200      	movs	r2, #0
   12a00:	600a      	str	r2, [r1, #0]
	if (remote_addr) {
   12a02:	2d00      	cmp	r5, #0
   12a04:	d059      	beq.n	12aba <net_conn_register+0x1a6>
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
   12a06:	882a      	ldrh	r2, [r5, #0]
   12a08:	2a02      	cmp	r2, #2
   12a0a:	d158      	bne.n	12abe <net_conn_register+0x1aa>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12a0c:	462a      	mov	r2, r5
   12a0e:	1d08      	adds	r0, r1, #4
   12a10:	f105 0418 	add.w	r4, r5, #24
   12a14:	f852 cb04 	ldr.w	ip, [r2], #4
   12a18:	42a2      	cmp	r2, r4
   12a1a:	f840 cb04 	str.w	ip, [r0], #4
   12a1e:	d1f9      	bne.n	12a14 <net_conn_register+0x100>
			if (!net_ipv6_is_addr_unspecified(
   12a20:	1d28      	adds	r0, r5, #4
   12a22:	f013 fa12 	bl	25e4a <net_ipv6_is_addr_unspecified>
				flags |= NET_CONN_REMOTE_ADDR_SPEC;
   12a26:	2800      	cmp	r0, #0
		flags |= NET_CONN_REMOTE_ADDR_SET;
   12a28:	bf14      	ite	ne
   12a2a:	2402      	movne	r4, #2
   12a2c:	2422      	moveq	r4, #34	; 0x22
	if (local_addr) {
   12a2e:	f1ba 0f00 	cmp.w	sl, #0
   12a32:	d01d      	beq.n	12a70 <net_conn_register+0x15c>
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
   12a34:	f8ba 2000 	ldrh.w	r2, [sl]
   12a38:	2a02      	cmp	r2, #2
   12a3a:	d140      	bne.n	12abe <net_conn_register+0x1aa>
   12a3c:	4652      	mov	r2, sl
   12a3e:	f101 001c 	add.w	r0, r1, #28
   12a42:	f10a 0c18 	add.w	ip, sl, #24
   12a46:	f852 eb04 	ldr.w	lr, [r2], #4
   12a4a:	4562      	cmp	r2, ip
   12a4c:	f840 eb04 	str.w	lr, [r0], #4
   12a50:	d1f9      	bne.n	12a46 <net_conn_register+0x132>
			if (!net_ipv6_is_addr_unspecified(
   12a52:	f10a 0004 	add.w	r0, sl, #4
   12a56:	f013 f9f8 	bl	25e4a <net_ipv6_is_addr_unspecified>
   12a5a:	b908      	cbnz	r0, 12a60 <net_conn_register+0x14c>
				flags |= NET_CONN_LOCAL_ADDR_SPEC;
   12a5c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
		flags |= NET_CONN_LOCAL_ADDR_SET;
   12a60:	f044 0404 	orr.w	r4, r4, #4
	if (remote_addr && local_addr) {
   12a64:	b125      	cbz	r5, 12a70 <net_conn_register+0x15c>
		if (remote_addr->sa_family != local_addr->sa_family) {
   12a66:	882a      	ldrh	r2, [r5, #0]
   12a68:	f8ba 3000 	ldrh.w	r3, [sl]
   12a6c:	429a      	cmp	r2, r3
   12a6e:	d126      	bne.n	12abe <net_conn_register+0x1aa>
	if (remote_port) {
   12a70:	b11e      	cbz	r6, 12a7a <net_conn_register+0x166>
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
   12a72:	ba76      	rev16	r6, r6
		flags |= NET_CONN_REMOTE_PORT_SPEC;
   12a74:	f044 0408 	orr.w	r4, r4, #8
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
   12a78:	80ce      	strh	r6, [r1, #6]
	if (local_port) {
   12a7a:	b11f      	cbz	r7, 12a84 <net_conn_register+0x170>
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
   12a7c:	ba7f      	rev16	r7, r7
		flags |= NET_CONN_LOCAL_PORT_SPEC;
   12a7e:	f044 0410 	orr.w	r4, r4, #16
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
   12a82:	83cf      	strh	r7, [r1, #30]
	conn->cb = cb;
   12a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
	conn->flags = flags;
   12a86:	f881 403f 	strb.w	r4, [r1, #63]	; 0x3f
	conn->cb = cb;
   12a8a:	634b      	str	r3, [r1, #52]	; 0x34
	conn->user_data = user_data;
   12a8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
	conn->proto = proto;
   12a8e:	f8a1 803c 	strh.w	r8, [r1, #60]	; 0x3c
	conn->user_data = user_data;
   12a92:	638b      	str	r3, [r1, #56]	; 0x38
	if (handle) {
   12a94:	9b12      	ldr	r3, [sp, #72]	; 0x48
	conn->family = family;
   12a96:	f881 903e 	strb.w	r9, [r1, #62]	; 0x3e
	if (handle) {
   12a9a:	b103      	cbz	r3, 12a9e <net_conn_register+0x18a>
		*handle = (struct net_conn_handle *)conn;
   12a9c:	6019      	str	r1, [r3, #0]
	conn->flags |= NET_CONN_IN_USE;
   12a9e:	f891 303f 	ldrb.w	r3, [r1, #63]	; 0x3f
   12aa2:	f043 0301 	orr.w	r3, r3, #1
   12aa6:	f881 303f 	strb.w	r3, [r1, #63]	; 0x3f
Z_GENLIST_PREPEND(slist, snode)
   12aaa:	4b09      	ldr	r3, [pc, #36]	; (12ad0 <net_conn_register+0x1bc>)
   12aac:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   12aae:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   12ab0:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   12ab2:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   12ab4:	b948      	cbnz	r0, 12aca <net_conn_register+0x1b6>
	list->tail = node;
   12ab6:	6059      	str	r1, [r3, #4]
}
   12ab8:	e796      	b.n	129e8 <net_conn_register+0xd4>
	u8_t flags = 0U;
   12aba:	462c      	mov	r4, r5
   12abc:	e7b7      	b.n	12a2e <net_conn_register+0x11a>
	conn_set_unused(conn);
   12abe:	4608      	mov	r0, r1
   12ac0:	f7ff ff18 	bl	128f4 <conn_set_unused>
	return -EINVAL;
   12ac4:	f06f 0015 	mvn.w	r0, #21
   12ac8:	e78e      	b.n	129e8 <net_conn_register+0xd4>
	return 0;
   12aca:	2000      	movs	r0, #0
   12acc:	e78c      	b.n	129e8 <net_conn_register+0xd4>
   12ace:	bf00      	nop
   12ad0:	20022d40 	.word	0x20022d40
   12ad4:	20022d38 	.word	0x20022d38

00012ad8 <net_conn_unregister>:

int net_conn_unregister(struct net_conn_handle *handle)
{
   12ad8:	b508      	push	{r3, lr}
	struct net_conn *conn = (struct net_conn *)handle;

	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   12ada:	4b16      	ldr	r3, [pc, #88]	; (12b34 <net_conn_unregister+0x5c>)
   12adc:	4298      	cmp	r0, r3
   12ade:	d323      	bcc.n	12b28 <net_conn_unregister+0x50>
   12ae0:	f503 7380 	add.w	r3, r3, #256	; 0x100
   12ae4:	4298      	cmp	r0, r3
   12ae6:	d81f      	bhi.n	12b28 <net_conn_unregister+0x50>
		return -EINVAL;
	}

	if (!(conn->flags & NET_CONN_IN_USE)) {
   12ae8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   12aec:	07db      	lsls	r3, r3, #31
   12aee:	d51e      	bpl.n	12b2e <net_conn_unregister+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12af0:	2100      	movs	r1, #0
   12af2:	4b11      	ldr	r3, [pc, #68]	; (12b38 <net_conn_unregister+0x60>)
   12af4:	681a      	ldr	r2, [r3, #0]
   12af6:	b152      	cbz	r2, 12b0e <net_conn_unregister+0x36>
   12af8:	4290      	cmp	r0, r2
   12afa:	d112      	bne.n	12b22 <net_conn_unregister+0x4a>
Z_GENLIST_REMOVE(slist, snode)
   12afc:	6802      	ldr	r2, [r0, #0]
   12afe:	b951      	cbnz	r1, 12b16 <net_conn_unregister+0x3e>
   12b00:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   12b02:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   12b04:	4288      	cmp	r0, r1
   12b06:	d100      	bne.n	12b0a <net_conn_unregister+0x32>
	list->tail = node;
   12b08:	605a      	str	r2, [r3, #4]
	parent->next = child;
   12b0a:	2300      	movs	r3, #0
   12b0c:	6003      	str	r3, [r0, #0]

	NET_DBG("Connection handler %p removed", conn);

	sys_slist_find_and_remove(&conn_used, &conn->node);

	conn_set_unused(conn);
   12b0e:	f7ff fef1 	bl	128f4 <conn_set_unused>

	return 0;
   12b12:	2000      	movs	r0, #0
}
   12b14:	bd08      	pop	{r3, pc}
   12b16:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   12b18:	685a      	ldr	r2, [r3, #4]
   12b1a:	4290      	cmp	r0, r2
	list->tail = node;
   12b1c:	bf08      	it	eq
   12b1e:	6059      	streq	r1, [r3, #4]
}
   12b20:	e7f3      	b.n	12b0a <net_conn_unregister+0x32>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12b22:	4611      	mov	r1, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12b24:	6812      	ldr	r2, [r2, #0]
   12b26:	e7e6      	b.n	12af6 <net_conn_unregister+0x1e>
		return -EINVAL;
   12b28:	f06f 0015 	mvn.w	r0, #21
   12b2c:	e7f2      	b.n	12b14 <net_conn_unregister+0x3c>
		return -ENOENT;
   12b2e:	f06f 0001 	mvn.w	r0, #1
   12b32:	e7ef      	b.n	12b14 <net_conn_unregister+0x3c>
   12b34:	20022d48 	.word	0x20022d48
   12b38:	20022d40 	.word	0x20022d40

00012b3c <net_conn_input>:

enum net_verdict net_conn_input(struct net_pkt *pkt,
				union net_ip_header *ip_hdr,
				u8_t proto,
				union net_proto_header *proto_hdr)
{
   12b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b40:	ed2d 8b02 	vpush	{d8}
	s16_t best_rank = -1;
	struct net_conn *conn;
	u16_t src_port;
	u16_t dst_port;

	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   12b44:	2a11      	cmp	r2, #17
{
   12b46:	4605      	mov	r5, r0
   12b48:	460e      	mov	r6, r1
   12b4a:	469a      	mov	sl, r3
   12b4c:	b087      	sub	sp, #28
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   12b4e:	f040 80b8 	bne.w	12cc2 <net_conn_input+0x186>
		src_port = proto_hdr->udp->src_port;
   12b52:	681b      	ldr	r3, [r3, #0]
   12b54:	881a      	ldrh	r2, [r3, #0]
   12b56:	9204      	str	r2, [sp, #16]
		dst_port = proto_hdr->udp->dst_port;
   12b58:	f8b3 b002 	ldrh.w	fp, [r3, #2]
	return pkt->family;
   12b5c:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   12b60:	f3c3 0342 	ubfx	r3, r3, #1, #3
   12b64:	2b02      	cmp	r3, #2
   12b66:	d054      	beq.n	12c12 <net_conn_input+0xd6>
	bool is_mcast_pkt = false, mcast_pkt_delivered = false;
   12b68:	f04f 0800 	mov.w	r8, #0
		if (net_ipv6_is_addr_mcast(&ip_hdr->ipv6->dst)) {
			is_mcast_pkt = true;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   12b6c:	4b70      	ldr	r3, [pc, #448]	; (12d30 <net_conn_input+0x1f4>)
   12b6e:	681c      	ldr	r4, [r3, #0]
   12b70:	2c00      	cmp	r4, #0
   12b72:	f000 80cc 	beq.w	12d0e <net_conn_input+0x1d2>
   12b76:	f04f 0900 	mov.w	r9, #0
   12b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b7e:	464f      	mov	r7, r9
   12b80:	9303      	str	r3, [sp, #12]
		if (conn->proto != proto) {
   12b82:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   12b84:	2b11      	cmp	r3, #17
   12b86:	f040 8081 	bne.w	12c8c <net_conn_input+0x150>
			continue;
		}

		if (conn->family != AF_UNSPEC &&
   12b8a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
   12b8e:	b12a      	cbz	r2, 12b9c <net_conn_input+0x60>
   12b90:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   12b94:	f3c3 0342 	ubfx	r3, r3, #1, #3
   12b98:	4293      	cmp	r3, r2
   12b9a:	d177      	bne.n	12c8c <net_conn_input+0x150>
			continue;
		}

		if (IS_ENABLED(CONFIG_NET_UDP) ||
		    IS_ENABLED(CONFIG_NET_TCP)) {
			if (net_sin(&conn->remote_addr)->sin_port) {
   12b9c:	88e3      	ldrh	r3, [r4, #6]
   12b9e:	b113      	cbz	r3, 12ba6 <net_conn_input+0x6a>
				if (net_sin(&conn->remote_addr)->sin_port !=
   12ba0:	9a04      	ldr	r2, [sp, #16]
   12ba2:	4293      	cmp	r3, r2
   12ba4:	d172      	bne.n	12c8c <net_conn_input+0x150>
				    src_port) {
					continue;
				}
			}

			if (net_sin(&conn->local_addr)->sin_port) {
   12ba6:	8be3      	ldrh	r3, [r4, #30]
   12ba8:	b10b      	cbz	r3, 12bae <net_conn_input+0x72>
				if (net_sin(&conn->local_addr)->sin_port !=
   12baa:	455b      	cmp	r3, fp
   12bac:	d16e      	bne.n	12c8c <net_conn_input+0x150>
				    dst_port) {
					continue;
				}
			}

			if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
   12bae:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   12bb2:	0799      	lsls	r1, r3, #30
   12bb4:	d450      	bmi.n	12c58 <net_conn_input+0x11c>
						   true)) {
					continue;
				}
			}

			if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
   12bb6:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   12bba:	075a      	lsls	r2, r3, #29
   12bbc:	d518      	bpl.n	12bf0 <net_conn_input+0xb4>
   12bbe:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	if (addr->sa_family != net_pkt_family(pkt)) {
   12bc2:	8ba1      	ldrh	r1, [r4, #28]
   12bc4:	f3c3 0242 	ubfx	r2, r3, #1, #3
   12bc8:	4291      	cmp	r1, r2
   12bca:	d15f      	bne.n	12c8c <net_conn_input+0x150>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   12bcc:	2a02      	cmp	r2, #2
   12bce:	d10f      	bne.n	12bf0 <net_conn_input+0xb4>
			    &net_sin6(addr)->sin6_addr)) {
   12bd0:	f104 0320 	add.w	r3, r4, #32
		if (!net_ipv6_is_addr_unspecified(
   12bd4:	4618      	mov	r0, r3
   12bd6:	9305      	str	r3, [sp, #20]
   12bd8:	f013 f937 	bl	25e4a <net_ipv6_is_addr_unspecified>
   12bdc:	b940      	cbnz	r0, 12bf0 <net_conn_input+0xb4>
			addr6 = &ip_hdr->ipv6->dst;
   12bde:	6831      	ldr	r1, [r6, #0]
   12be0:	9b05      	ldr	r3, [sp, #20]
   12be2:	2210      	movs	r2, #16
   12be4:	4618      	mov	r0, r3
   12be6:	3118      	adds	r1, #24
   12be8:	f014 fe9f 	bl	2792a <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   12bec:	2800      	cmp	r0, #0
   12bee:	d14d      	bne.n	12c8c <net_conn_input+0x150>

			/* If we have an existing best_match, and that one
			 * specifies a remote port, then we've matched to a
			 * LISTENING connection that should not override.
			 */
			if (best_match != NULL &&
   12bf0:	f1b9 0f00 	cmp.w	r9, #0
   12bf4:	d157      	bne.n	12ca6 <net_conn_input+0x16a>
			    best_match->flags & NET_CONN_REMOTE_PORT_SPEC) {
				continue;
			}

			if (best_rank < NET_CONN_RANK(conn->flags)) {
   12bf6:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   12bfa:	9a03      	ldr	r2, [sp, #12]
   12bfc:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12c00:	429a      	cmp	r2, r3
   12c02:	da43      	bge.n	12c8c <net_conn_input+0x150>
				struct net_pkt *mcast_pkt;

				if (!is_mcast_pkt) {
   12c04:	f1b8 0f00 	cmp.w	r8, #0
   12c08:	d152      	bne.n	12cb0 <net_conn_input+0x174>
					best_rank = NET_CONN_RANK(conn->flags);
   12c0a:	b21b      	sxth	r3, r3
					best_match = conn;

					continue;
   12c0c:	46a1      	mov	r9, r4
					best_rank = NET_CONN_RANK(conn->flags);
   12c0e:	9303      	str	r3, [sp, #12]
					continue;
   12c10:	e03c      	b.n	12c8c <net_conn_input+0x150>
		if (net_ipv6_addr_cmp(&ip_hdr->ipv6->src,
   12c12:	6808      	ldr	r0, [r1, #0]
   12c14:	2210      	movs	r2, #16
   12c16:	f100 0118 	add.w	r1, r0, #24
   12c1a:	3008      	adds	r0, #8
   12c1c:	f014 fe85 	bl	2792a <memcmp>
   12c20:	b990      	cbnz	r0, 12c48 <net_conn_input+0x10c>
	if (!conn_are_end_points_valid(pkt, ip_hdr, src_port, dst_port)) {
   12c22:	9b04      	ldr	r3, [sp, #16]
   12c24:	455b      	cmp	r3, fp
   12c26:	d04c      	beq.n	12cc2 <net_conn_input+0x186>
   12c28:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   12c2c:	f3c3 0342 	ubfx	r3, r3, #1, #3
   12c30:	2b02      	cmp	r3, #2
   12c32:	d199      	bne.n	12b68 <net_conn_input+0x2c>
		if (net_ipv6_is_addr_mcast(&ip_hdr->ipv6->dst)) {
   12c34:	6833      	ldr	r3, [r6, #0]
   12c36:	f893 8018 	ldrb.w	r8, [r3, #24]
   12c3a:	f1a8 00ff 	sub.w	r0, r8, #255	; 0xff
   12c3e:	f1d0 0800 	rsbs	r8, r0, #0
   12c42:	eb48 0800 	adc.w	r8, r8, r0
   12c46:	e791      	b.n	12b6c <net_conn_input+0x30>
		    net_ipv6_is_my_addr(&ip_hdr->ipv6->src)) {
   12c48:	6830      	ldr	r0, [r6, #0]
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   12c4a:	2100      	movs	r1, #0
   12c4c:	3008      	adds	r0, #8
   12c4e:	f7fe f895 	bl	10d7c <net_if_ipv6_addr_lookup>
				      &ip_hdr->ipv6->dst) ||
   12c52:	2800      	cmp	r0, #0
   12c54:	d1e5      	bne.n	12c22 <net_conn_input+0xe6>
   12c56:	e7e7      	b.n	12c28 <net_conn_input+0xec>
   12c58:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	if (addr->sa_family != net_pkt_family(pkt)) {
   12c5c:	88a1      	ldrh	r1, [r4, #4]
   12c5e:	f3c3 0242 	ubfx	r2, r3, #1, #3
   12c62:	4291      	cmp	r1, r2
   12c64:	d112      	bne.n	12c8c <net_conn_input+0x150>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   12c66:	2a02      	cmp	r2, #2
   12c68:	d1a5      	bne.n	12bb6 <net_conn_input+0x7a>
			    &net_sin6(addr)->sin6_addr)) {
   12c6a:	f104 0308 	add.w	r3, r4, #8
		if (!net_ipv6_is_addr_unspecified(
   12c6e:	4618      	mov	r0, r3
   12c70:	9305      	str	r3, [sp, #20]
   12c72:	f013 f8ea 	bl	25e4a <net_ipv6_is_addr_unspecified>
   12c76:	2800      	cmp	r0, #0
   12c78:	d19d      	bne.n	12bb6 <net_conn_input+0x7a>
			addr6 = &ip_hdr->ipv6->src;
   12c7a:	6831      	ldr	r1, [r6, #0]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   12c7c:	9b05      	ldr	r3, [sp, #20]
   12c7e:	2210      	movs	r2, #16
   12c80:	4618      	mov	r0, r3
   12c82:	3108      	adds	r1, #8
   12c84:	f014 fe51 	bl	2792a <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   12c88:	2800      	cmp	r0, #0
   12c8a:	d094      	beq.n	12bb6 <net_conn_input+0x7a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12c8c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   12c8e:	2c00      	cmp	r4, #0
   12c90:	f47f af77 	bne.w	12b82 <net_conn_input+0x46>
			best_rank = 0;
			best_match = conn;
		}
	}

	if (is_mcast_pkt && mcast_pkt_delivered) {
   12c94:	f1b8 0f00 	cmp.w	r8, #0
   12c98:	d029      	beq.n	12cee <net_conn_input+0x1b2>
   12c9a:	b347      	cbz	r7, 12cee <net_conn_input+0x1b2>
		/* As one or more multicast packets have already been delivered
		 * in the loop above, we shall not call the callback again here
		 */

		net_pkt_unref(pkt);
   12c9c:	4628      	mov	r0, r5
   12c9e:	f011 fb4e 	bl	2433e <net_pkt_unref>
			goto drop;
		}

		net_stats_update_per_proto_recv(pkt_iface, proto);

		return NET_OK;
   12ca2:	2000      	movs	r0, #0
   12ca4:	e00e      	b.n	12cc4 <net_conn_input+0x188>
			if (best_match != NULL &&
   12ca6:	f899 303f 	ldrb.w	r3, [r9, #63]	; 0x3f
   12caa:	071b      	lsls	r3, r3, #28
   12cac:	d4ee      	bmi.n	12c8c <net_conn_input+0x150>
   12cae:	e7a2      	b.n	12bf6 <net_conn_input+0xba>
				mcast_pkt = net_pkt_clone(pkt, CLONE_TIMEOUT);
   12cb0:	f640 42cd 	movw	r2, #3277	; 0xccd
   12cb4:	2300      	movs	r3, #0
   12cb6:	4628      	mov	r0, r5
   12cb8:	f011 fcea 	bl	24690 <net_pkt_clone>
				if (!mcast_pkt) {
   12cbc:	ee08 0a10 	vmov	s16, r0
   12cc0:	b928      	cbnz	r0, 12cce <net_conn_input+0x192>
	}

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
   12cc2:	2002      	movs	r0, #2
}
   12cc4:	b007      	add	sp, #28
   12cc6:	ecbd 8b02 	vpop	{d8}
   12cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (conn->cb(conn, mcast_pkt, ip_hdr,
   12cce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12cd0:	4601      	mov	r1, r0
   12cd2:	9300      	str	r3, [sp, #0]
   12cd4:	4632      	mov	r2, r6
   12cd6:	4653      	mov	r3, sl
   12cd8:	4620      	mov	r0, r4
   12cda:	6b67      	ldr	r7, [r4, #52]	; 0x34
   12cdc:	47b8      	blx	r7
   12cde:	2802      	cmp	r0, #2
   12ce0:	d103      	bne.n	12cea <net_conn_input+0x1ae>
					net_pkt_unref(mcast_pkt);
   12ce2:	ee18 0a10 	vmov	r0, s16
   12ce6:	f011 fb2a 	bl	2433e <net_pkt_unref>
				mcast_pkt_delivered = true;
   12cea:	4647      	mov	r7, r8
   12cec:	e7ce      	b.n	12c8c <net_conn_input+0x150>
	if (conn) {
   12cee:	f1b9 0f00 	cmp.w	r9, #0
   12cf2:	d00c      	beq.n	12d0e <net_conn_input+0x1d2>
		if (conn->cb(conn, pkt, ip_hdr, proto_hdr,
   12cf4:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   12cf8:	4632      	mov	r2, r6
   12cfa:	9300      	str	r3, [sp, #0]
   12cfc:	4629      	mov	r1, r5
   12cfe:	4653      	mov	r3, sl
   12d00:	4648      	mov	r0, r9
   12d02:	f8d9 4034 	ldr.w	r4, [r9, #52]	; 0x34
   12d06:	47a0      	blx	r4
   12d08:	2802      	cmp	r0, #2
   12d0a:	d1ca      	bne.n	12ca2 <net_conn_input+0x166>
   12d0c:	e7d9      	b.n	12cc2 <net_conn_input+0x186>
   12d0e:	f895 003b 	ldrb.w	r0, [r5, #59]	; 0x3b
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   12d12:	f3c0 0442 	ubfx	r4, r0, #1, #3
   12d16:	2c02      	cmp	r4, #2
   12d18:	d1d3      	bne.n	12cc2 <net_conn_input+0x186>
	    net_pkt_family(pkt) == AF_INET6 && is_mcast_pkt) {
   12d1a:	f1b8 0f00 	cmp.w	r8, #0
   12d1e:	d1d0      	bne.n	12cc2 <net_conn_input+0x186>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   12d20:	4643      	mov	r3, r8
   12d22:	2204      	movs	r2, #4
   12d24:	2101      	movs	r1, #1
   12d26:	4628      	mov	r0, r5
   12d28:	f011 fe1d 	bl	24966 <net_icmpv6_send_error>
   12d2c:	e7c9      	b.n	12cc2 <net_conn_input+0x186>
   12d2e:	bf00      	nop
   12d30:	20022d40 	.word	0x20022d40

00012d34 <net_conn_init>:
	list->head = NULL;
   12d34:	2200      	movs	r2, #0
   12d36:	4b09      	ldr	r3, [pc, #36]	; (12d5c <net_conn_init+0x28>)
	list->tail = NULL;
   12d38:	e9c3 2200 	strd	r2, r2, [r3]
	parent->next = child;
   12d3c:	4b08      	ldr	r3, [pc, #32]	; (12d60 <net_conn_init+0x2c>)
   12d3e:	4619      	mov	r1, r3
   12d40:	601a      	str	r2, [r3, #0]
   12d42:	f103 0240 	add.w	r2, r3, #64	; 0x40
   12d46:	f841 2f80 	str.w	r2, [r1, #128]!
   12d4a:	461a      	mov	r2, r3
   12d4c:	f842 1fc0 	str.w	r1, [r2, #192]!
   12d50:	4904      	ldr	r1, [pc, #16]	; (12d64 <net_conn_init+0x30>)
   12d52:	641b      	str	r3, [r3, #64]	; 0x40
	int i;

	sys_slist_init(&conn_unused);
	sys_slist_init(&conn_used);

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   12d54:	e9c1 2300 	strd	r2, r3, [r1]
		sys_slist_prepend(&conn_unused, &conns[i].node);
	}
}
   12d58:	4770      	bx	lr
   12d5a:	bf00      	nop
   12d5c:	20022d40 	.word	0x20022d40
   12d60:	20022d48 	.word	0x20022d48
   12d64:	20022d38 	.word	0x20022d38

00012d68 <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
   12d68:	b513      	push	{r0, r1, r4, lr}
	struct device *dev = entropy_driver;
   12d6a:	4c0a      	ldr	r4, [pc, #40]	; (12d94 <sys_rand32_get+0x2c>)
   12d6c:	6820      	ldr	r0, [r4, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   12d6e:	b918      	cbnz	r0, 12d78 <sys_rand32_get+0x10>
   12d70:	4809      	ldr	r0, [pc, #36]	; (12d98 <sys_rand32_get+0x30>)
   12d72:	f00a ffbb 	bl	1dcec <z_impl_device_get_binding>
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		__ASSERT((dev != NULL),
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
   12d76:	6020      	str	r0, [r4, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   12d78:	2204      	movs	r2, #4
   12d7a:	6883      	ldr	r3, [r0, #8]
   12d7c:	eb0d 0102 	add.w	r1, sp, r2
   12d80:	681b      	ldr	r3, [r3, #0]
   12d82:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   12d84:	2800      	cmp	r0, #0
   12d86:	da02      	bge.n	12d8e <sys_rand32_get+0x26>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   12d88:	f7fd f830 	bl	fdec <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   12d8c:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   12d8e:	9801      	ldr	r0, [sp, #4]
   12d90:	b002      	add	sp, #8
   12d92:	bd10      	pop	{r4, pc}
   12d94:	20022e48 	.word	0x20022e48
   12d98:	000292e0 	.word	0x000292e0

00012d9c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
   12d9c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   12d9e:	4b09      	ldr	r3, [pc, #36]	; (12dc4 <gpio_nrfx_init+0x28>)
   12da0:	781a      	ldrb	r2, [r3, #0]
   12da2:	b96a      	cbnz	r2, 12dc0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   12da4:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   12da6:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   12da8:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   12daa:	2105      	movs	r1, #5
   12dac:	f7fd f862 	bl	fe74 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   12db0:	2031      	movs	r0, #49	; 0x31
   12db2:	f7fd f84f 	bl	fe54 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   12db6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   12dba:	4b03      	ldr	r3, [pc, #12]	; (12dc8 <gpio_nrfx_init+0x2c>)
   12dbc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   12dc0:	2000      	movs	r0, #0
   12dc2:	bd08      	pop	{r3, pc}
   12dc4:	20029e62 	.word	0x20029e62
   12dc8:	40031000 	.word	0x40031000

00012dcc <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   12dcc:	4b29      	ldr	r3, [pc, #164]	; (12e74 <gpio_nrfx_config+0xa8>)
{
   12dce:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12dd0:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   12dd2:	4829      	ldr	r0, [pc, #164]	; (12e78 <gpio_nrfx_config+0xac>)
   12dd4:	4013      	ands	r3, r2
   12dd6:	4283      	cmp	r3, r0
   12dd8:	d03d      	beq.n	12e56 <gpio_nrfx_config+0x8a>
   12dda:	d80d      	bhi.n	12df8 <gpio_nrfx_config+0x2c>
   12ddc:	2b06      	cmp	r3, #6
   12dde:	d015      	beq.n	12e0c <gpio_nrfx_config+0x40>
   12de0:	d805      	bhi.n	12dee <gpio_nrfx_config+0x22>
   12de2:	b19b      	cbz	r3, 12e0c <gpio_nrfx_config+0x40>
   12de4:	2b02      	cmp	r3, #2
   12de6:	d038      	beq.n	12e5a <gpio_nrfx_config+0x8e>
   12de8:	f06f 0015 	mvn.w	r0, #21
   12dec:	e032      	b.n	12e54 <gpio_nrfx_config+0x88>
   12dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   12df2:	d1f9      	bne.n	12de8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   12df4:	2301      	movs	r3, #1
   12df6:	e009      	b.n	12e0c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   12df8:	4820      	ldr	r0, [pc, #128]	; (12e7c <gpio_nrfx_config+0xb0>)
   12dfa:	4283      	cmp	r3, r0
   12dfc:	d02f      	beq.n	12e5e <gpio_nrfx_config+0x92>
   12dfe:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   12e02:	d02e      	beq.n	12e62 <gpio_nrfx_config+0x96>
   12e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   12e08:	d1ee      	bne.n	12de8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   12e0a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   12e0c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   12e0e:	bf4c      	ite	mi
   12e10:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   12e12:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   12e16:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   12e1a:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   12e1c:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   12e20:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   12e24:	d506      	bpl.n	12e34 <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   12e26:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12e2a:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   12e2c:	d01b      	beq.n	12e66 <gpio_nrfx_config+0x9a>
			nrf_gpio_port_out_set(reg, BIT(pin));
   12e2e:	2201      	movs	r2, #1
   12e30:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   12e32:	60ba      	str	r2, [r7, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   12e34:	7a32      	ldrb	r2, [r6, #8]
   12e36:	f001 011f 	and.w	r1, r1, #31
   12e3a:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   12e3e:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   12e42:	2000      	movs	r0, #0
   12e44:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12e48:	4a0d      	ldr	r2, [pc, #52]	; (12e80 <gpio_nrfx_config+0xb4>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   12e4a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12e4e:	3180      	adds	r1, #128	; 0x80
   12e50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   12e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   12e56:	2307      	movs	r3, #7
   12e58:	e7d8      	b.n	12e0c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   12e5a:	2304      	movs	r3, #4
   12e5c:	e7d6      	b.n	12e0c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   12e5e:	2305      	movs	r3, #5
   12e60:	e7d4      	b.n	12e0c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   12e62:	2303      	movs	r3, #3
   12e64:	e7d2      	b.n	12e0c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   12e66:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   12e68:	bf42      	ittt	mi
   12e6a:	2201      	movmi	r2, #1
   12e6c:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   12e6e:	60fa      	strmi	r2, [r7, #12]
}
   12e70:	e7e0      	b.n	12e34 <gpio_nrfx_config+0x68>
   12e72:	bf00      	nop
   12e74:	00f00006 	.word	0x00f00006
   12e78:	00100006 	.word	0x00100006
   12e7c:	00400002 	.word	0x00400002
   12e80:	40842500 	.word	0x40842500

00012e84 <gpiote_pin_int_cfg>:
{
   12e84:	b570      	push	{r4, r5, r6, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12e86:	6843      	ldr	r3, [r0, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   12e88:	4c4c      	ldr	r4, [pc, #304]	; (12fbc <gpiote_pin_int_cfg+0x138>)
   12e8a:	7a1a      	ldrb	r2, [r3, #8]
   12e8c:	f001 031f 	and.w	r3, r1, #31
   12e90:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   12e94:	2200      	movs	r2, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   12e96:	68c6      	ldr	r6, [r0, #12]
   12e98:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   12e9c:	b2c0      	uxtb	r0, r0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   12e9e:	f502 75a2 	add.w	r5, r2, #324	; 0x144
   12ea2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   12ea6:	f3c5 2504 	ubfx	r5, r5, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   12eaa:	42ab      	cmp	r3, r5
   12eac:	d16c      	bne.n	12f88 <gpiote_pin_int_cfg+0x104>
		    && (intenset & BIT(i))) {
   12eae:	fa20 f502 	lsr.w	r5, r0, r2
   12eb2:	07ed      	lsls	r5, r5, #31
   12eb4:	d568      	bpl.n	12f88 <gpiote_pin_int_cfg+0x104>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   12eb6:	0090      	lsls	r0, r2, #2
   12eb8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   12ebc:	f500 3044 	add.w	r0, r0, #200704	; 0x31000
   12ec0:	f8d0 5510 	ldr.w	r5, [r0, #1296]	; 0x510
   12ec4:	f025 0501 	bic.w	r5, r5, #1
   12ec8:	f8c0 5510 	str.w	r5, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   12ecc:	2001      	movs	r0, #1
   12ece:	fa00 f202 	lsl.w	r2, r0, r2
    p_reg->INTENCLR = mask;
   12ed2:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   12ed6:	4d3a      	ldr	r5, [pc, #232]	; (12fc0 <gpiote_pin_int_cfg+0x13c>)
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   12ed8:	68f0      	ldr	r0, [r6, #12]
   12eda:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   12ede:	f8d5 2200 	ldr.w	r2, [r5, #512]	; 0x200
   12ee2:	40c8      	lsrs	r0, r1
   12ee4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
   12ee8:	f010 0001 	ands.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   12eec:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
   12ef0:	d049      	beq.n	12f86 <gpiote_pin_int_cfg+0x102>
   12ef2:	6930      	ldr	r0, [r6, #16]
   12ef4:	40c8      	lsrs	r0, r1
   12ef6:	f010 0001 	ands.w	r0, r0, #1
   12efa:	d044      	beq.n	12f86 <gpiote_pin_int_cfg+0x102>
		if (data->trig_edge & BIT(pin)) {
   12efc:	69b0      	ldr	r0, [r6, #24]
   12efe:	40c8      	lsrs	r0, r1
   12f00:	f010 0001 	ands.w	r0, r0, #1
   12f04:	d04a      	beq.n	12f9c <gpiote_pin_int_cfg+0x118>
			if (data->double_edge & BIT(pin)) {
   12f06:	69f2      	ldr	r2, [r6, #28]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   12f08:	2500      	movs	r5, #0
			if (data->double_edge & BIT(pin)) {
   12f0a:	40ca      	lsrs	r2, r1
   12f0c:	07d2      	lsls	r2, r2, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   12f0e:	bf4f      	iteee	mi
   12f10:	2203      	movmi	r2, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   12f12:	6972      	ldrpl	r2, [r6, #20]
   12f14:	40ca      	lsrpl	r2, r1
   12f16:	f002 0201 	andpl.w	r2, r2, #1
   12f1a:	bf5c      	itt	pl
   12f1c:	f1c2 0202 	rsbpl	r2, r2, #2
   12f20:	b2d2      	uxtbpl	r2, r2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   12f22:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   12f26:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   12f2a:	f010 0003 	ands.w	r0, r0, #3
   12f2e:	d12f      	bne.n	12f90 <gpiote_pin_int_cfg+0x10c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   12f30:	00a9      	lsls	r1, r5, #2
   12f32:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   12f36:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   12f3a:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12f3e:	021b      	lsls	r3, r3, #8
   12f40:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   12f44:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   12f48:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12f4c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
			nrf_gpiote_event_t evt =
   12f50:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   12f54:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
   12f58:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12f5a:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   12f5e:	b29b      	uxth	r3, r3
   12f60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12f64:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12f68:	4332      	orrs	r2, r6
   12f6a:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   12f6e:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   12f70:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
   12f74:	f043 0301 	orr.w	r3, r3, #1
   12f78:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   12f7c:	2301      	movs	r3, #1
   12f7e:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   12f82:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   12f86:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   12f88:	3201      	adds	r2, #1
   12f8a:	2a08      	cmp	r2, #8
   12f8c:	d187      	bne.n	12e9e <gpiote_pin_int_cfg+0x1a>
   12f8e:	e7a2      	b.n	12ed6 <gpiote_pin_int_cfg+0x52>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   12f90:	3501      	adds	r5, #1
   12f92:	2d08      	cmp	r5, #8
   12f94:	d1c5      	bne.n	12f22 <gpiote_pin_int_cfg+0x9e>
	return -ENODEV;
   12f96:	f06f 0012 	mvn.w	r0, #18
   12f9a:	e7f4      	b.n	12f86 <gpiote_pin_int_cfg+0x102>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   12f9c:	6972      	ldr	r2, [r6, #20]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   12f9e:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   12fa2:	40ca      	lsrs	r2, r1
   12fa4:	f002 0201 	and.w	r2, r2, #1
   12fa8:	f1c2 0203 	rsb	r2, r2, #3
   12fac:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   12fb0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   12fb4:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
}
   12fb8:	e7e5      	b.n	12f86 <gpiote_pin_int_cfg+0x102>
   12fba:	bf00      	nop
   12fbc:	40031000 	.word	0x40031000
   12fc0:	40842500 	.word	0x40842500

00012fc4 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   12fc4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   12fc8:	b470      	push	{r4, r5, r6}
	struct gpio_nrfx_data *data = get_port_data(port);
   12fca:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   12fcc:	d10f      	bne.n	12fee <gpio_nrfx_pin_interrupt_configure+0x2a>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   12fce:	6845      	ldr	r5, [r0, #4]
   12fd0:	7a2e      	ldrb	r6, [r5, #8]
   12fd2:	f001 051f 	and.w	r5, r1, #31
   12fd6:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   12fda:	4e1d      	ldr	r6, [pc, #116]	; (13050 <gpio_nrfx_pin_interrupt_configure+0x8c>)
   12fdc:	3580      	adds	r5, #128	; 0x80
   12fde:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   12fe2:	07ed      	lsls	r5, r5, #31
   12fe4:	d507      	bpl.n	12ff6 <gpio_nrfx_pin_interrupt_configure+0x32>
}
   12fe6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12fea:	bc70      	pop	{r4, r5, r6}
   12fec:	4770      	bx	lr
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   12fee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   12ff2:	68e5      	ldr	r5, [r4, #12]
   12ff4:	d026      	beq.n	13044 <gpio_nrfx_pin_interrupt_configure+0x80>
   12ff6:	2501      	movs	r5, #1
   12ff8:	68e6      	ldr	r6, [r4, #12]
   12ffa:	408d      	lsls	r5, r1
   12ffc:	4335      	orrs	r5, r6
   12ffe:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   13000:	2501      	movs	r5, #1
   13002:	6926      	ldr	r6, [r4, #16]
   13004:	408d      	lsls	r5, r1
   13006:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1300a:	bf14      	ite	ne
   1300c:	432e      	orrne	r6, r5
   1300e:	43ae      	biceq	r6, r5
   13010:	6126      	str	r6, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   13012:	69a6      	ldr	r6, [r4, #24]
   13014:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   13018:	69e2      	ldr	r2, [r4, #28]
   1301a:	bf0c      	ite	eq
   1301c:	432e      	orreq	r6, r5
   1301e:	43ae      	bicne	r6, r5
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   13020:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   13024:	bf0c      	ite	eq
   13026:	432a      	orreq	r2, r5
   13028:	43aa      	bicne	r2, r5
   1302a:	61e2      	str	r2, [r4, #28]
   1302c:	6962      	ldr	r2, [r4, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1302e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   13032:	bf0c      	ite	eq
   13034:	4315      	orreq	r5, r2
   13036:	ea22 0505 	bicne.w	r5, r2, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1303a:	61a6      	str	r6, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1303c:	6165      	str	r5, [r4, #20]
}
   1303e:	bc70      	pop	{r4, r5, r6}
	return gpiote_pin_int_cfg(port, pin);
   13040:	f7ff bf20 	b.w	12e84 <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   13044:	2601      	movs	r6, #1
   13046:	408e      	lsls	r6, r1
   13048:	ea25 0506 	bic.w	r5, r5, r6
   1304c:	e7d7      	b.n	12ffe <gpio_nrfx_pin_interrupt_configure+0x3a>
   1304e:	bf00      	nop
   13050:	40842500 	.word	0x40842500

00013054 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13054:	494a      	ldr	r1, [pc, #296]	; (13180 <gpiote_event_handler+0x12c>)
{
   13056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1305a:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   1305c:	2d00      	cmp	r5, #0
   1305e:	d05d      	beq.n	1311c <gpiote_event_handler+0xc8>
	struct gpio_nrfx_data *data = get_port_data(port);
   13060:	4b48      	ldr	r3, [pc, #288]	; (13184 <gpiote_event_handler+0x130>)
	u32_t pin = 0U;
   13062:	2600      	movs	r6, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   13064:	68da      	ldr	r2, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   13066:	f8d3 c004 	ldr.w	ip, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1306a:	e9d2 0303 	ldrd	r0, r3, [r2, #12]
   1306e:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   13070:	e9d2 0406 	ldrd	r0, r4, [r2, #24]
   13074:	4320      	orrs	r0, r4
   13076:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1307a:	f8dc 0004 	ldr.w	r0, [ip, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   1307e:	6952      	ldr	r2, [r2, #20]
    return p_reg->IN;
   13080:	6904      	ldr	r4, [r0, #16]
	u32_t bit = 1U << pin;
   13082:	2001      	movs	r0, #1
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   13084:	4054      	eors	r4, r2
   13086:	f8df e108 	ldr.w	lr, [pc, #264]	; 13190 <gpiote_event_handler+0x13c>
	u32_t out = pin_states & level_pins;
   1308a:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   1308e:	bb83      	cbnz	r3, 130f2 <gpiote_event_handler+0x9e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13090:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   13092:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   13094:	2001      	movs	r0, #1
   13096:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   13098:	493b      	ldr	r1, [pc, #236]	; (13188 <gpiote_event_handler+0x134>)
   1309a:	4e3c      	ldr	r6, [pc, #240]	; (1318c <gpiote_event_handler+0x138>)
   1309c:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   130a0:	fa00 fc03 	lsl.w	ip, r0, r3
   130a4:	ea1c 0f02 	tst.w	ip, r2
   130a8:	d00d      	beq.n	130c6 <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   130aa:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   130ae:	b152      	cbz	r2, 130c6 <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   130b0:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   130b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   130b8:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   130bc:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   130c0:	fa00 f202 	lsl.w	r2, r0, r2
   130c4:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   130c6:	3301      	adds	r3, #1
   130c8:	2b08      	cmp	r3, #8
   130ca:	d1e7      	bne.n	1309c <gpiote_event_handler+0x48>
	if (fired_triggers[0]) {
   130cc:	bb44      	cbnz	r4, 13120 <gpiote_event_handler+0xcc>
	if (port_event) {
   130ce:	b175      	cbz	r5, 130ee <gpiote_event_handler+0x9a>
	u32_t bit = 1U << pin;
   130d0:	2401      	movs	r4, #1
	u32_t pin = 0U;
   130d2:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   130d4:	4b2b      	ldr	r3, [pc, #172]	; (13184 <gpiote_event_handler+0x130>)
   130d6:	4f2e      	ldr	r7, [pc, #184]	; (13190 <gpiote_event_handler+0x13c>)
   130d8:	68d8      	ldr	r0, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   130da:	685e      	ldr	r6, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   130dc:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   130e0:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
   130e2:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
   130e6:	430a      	orrs	r2, r1
   130e8:	ea23 0302 	bic.w	r3, r3, r2
	while (level_pins) {
   130ec:	bb63      	cbnz	r3, 13148 <gpiote_event_handler+0xf4>
}
   130ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   130f2:	4203      	tst	r3, r0
   130f4:	d00f      	beq.n	13116 <gpiote_event_handler+0xc2>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   130f6:	f89c 7008 	ldrb.w	r7, [ip, #8]
   130fa:	f006 021f 	and.w	r2, r6, #31
   130fe:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
   13102:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   13106:	f8d2 7200 	ldr.w	r7, [r2, #512]	; 0x200
			level_pins &= ~bit;
   1310a:	ea23 0300 	bic.w	r3, r3, r0
   1310e:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   13112:	f8c2 7200 	str.w	r7, [r2, #512]	; 0x200
		++pin;
   13116:	3601      	adds	r6, #1
		bit <<= 1;
   13118:	0040      	lsls	r0, r0, #1
   1311a:	e7b8      	b.n	1308e <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1311c:	462c      	mov	r4, r5
   1311e:	e7b8      	b.n	13092 <gpiote_event_handler+0x3e>
	struct gpio_nrfx_data *data = get_port_data(port);
   13120:	4818      	ldr	r0, [pc, #96]	; (13184 <gpiote_event_handler+0x130>)
   13122:	68c7      	ldr	r7, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   13124:	6879      	ldr	r1, [r7, #4]
   13126:	2900      	cmp	r1, #0
   13128:	d0d1      	beq.n	130ce <gpiote_event_handler+0x7a>
			cb->handler(port, cb, cb->pin_mask & pins);
   1312a:	4680      	mov	r8, r0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1312c:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   1312e:	688a      	ldr	r2, [r1, #8]
   13130:	693b      	ldr	r3, [r7, #16]
   13132:	4022      	ands	r2, r4
   13134:	421a      	tst	r2, r3
   13136:	d002      	beq.n	1313e <gpiote_event_handler+0xea>
			cb->handler(port, cb, cb->pin_mask & pins);
   13138:	4640      	mov	r0, r8
   1313a:	684b      	ldr	r3, [r1, #4]
   1313c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1313e:	2e00      	cmp	r6, #0
   13140:	d0c5      	beq.n	130ce <gpiote_event_handler+0x7a>
   13142:	4631      	mov	r1, r6
   13144:	6836      	ldr	r6, [r6, #0]
   13146:	e7f2      	b.n	1312e <gpiote_event_handler+0xda>
		if (level_pins & bit) {
   13148:	421c      	tst	r4, r3
   1314a:	d016      	beq.n	1317a <gpiote_event_handler+0x126>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1314c:	7a32      	ldrb	r2, [r6, #8]
   1314e:	f005 011f 	and.w	r1, r5, #31
   13152:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   13156:	6942      	ldr	r2, [r0, #20]
   13158:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1315c:	f8d1 c200 	ldr.w	ip, [r1, #512]	; 0x200
   13160:	40ea      	lsrs	r2, r5
   13162:	f002 0201 	and.w	r2, r2, #1
   13166:	f1c2 0203 	rsb	r2, r2, #3
   1316a:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1316e:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   13172:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
			level_pins &= ~bit;
   13176:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
   1317a:	3501      	adds	r5, #1
		bit <<= 1;
   1317c:	0064      	lsls	r4, r4, #1
   1317e:	e7b5      	b.n	130ec <gpiote_event_handler+0x98>
   13180:	4003117c 	.word	0x4003117c
   13184:	2002081c 	.word	0x2002081c
   13188:	40031000 	.word	0x40031000
   1318c:	40031100 	.word	0x40031100
   13190:	40842500 	.word	0x40842500

00013194 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   13194:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   13196:	794b      	ldrb	r3, [r1, #5]
   13198:	2b01      	cmp	r3, #1
   1319a:	d029      	beq.n	131f0 <uarte_nrfx_configure+0x5c>
   1319c:	2b03      	cmp	r3, #3
   1319e:	d124      	bne.n	131ea <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   131a0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   131a2:	798b      	ldrb	r3, [r1, #6]
   131a4:	2b03      	cmp	r3, #3
   131a6:	d120      	bne.n	131ea <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   131a8:	79cc      	ldrb	r4, [r1, #7]
   131aa:	b124      	cbz	r4, 131b6 <uarte_nrfx_configure+0x22>
   131ac:	2c01      	cmp	r4, #1
   131ae:	d11c      	bne.n	131ea <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   131b0:	6843      	ldr	r3, [r0, #4]
   131b2:	791b      	ldrb	r3, [r3, #4]
   131b4:	b1cb      	cbz	r3, 131ea <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   131b6:	790a      	ldrb	r2, [r1, #4]
   131b8:	b112      	cbz	r2, 131c0 <uarte_nrfx_configure+0x2c>
   131ba:	2a02      	cmp	r2, #2
   131bc:	d115      	bne.n	131ea <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   131be:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   131c0:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   131c2:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   131c4:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   131c8:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   131ca:	d064      	beq.n	13296 <uarte_nrfx_configure+0x102>
   131cc:	d82d      	bhi.n	1322a <uarte_nrfx_configure+0x96>
   131ce:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   131d2:	d063      	beq.n	1329c <uarte_nrfx_configure+0x108>
   131d4:	d816      	bhi.n	13204 <uarte_nrfx_configure+0x70>
   131d6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   131da:	d061      	beq.n	132a0 <uarte_nrfx_configure+0x10c>
   131dc:	d80a      	bhi.n	131f4 <uarte_nrfx_configure+0x60>
   131de:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   131e2:	d060      	beq.n	132a6 <uarte_nrfx_configure+0x112>
   131e4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   131e8:	d060      	beq.n	132ac <uarte_nrfx_configure+0x118>
   131ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
   131ee:	e051      	b.n	13294 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   131f0:	2600      	movs	r6, #0
   131f2:	e7d6      	b.n	131a2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   131f4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   131f8:	d05b      	beq.n	132b2 <uarte_nrfx_configure+0x11e>
   131fa:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   131fe:	d1f4      	bne.n	131ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   13200:	4b36      	ldr	r3, [pc, #216]	; (132dc <uarte_nrfx_configure+0x148>)
   13202:	e03c      	b.n	1327e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   13204:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   13208:	d056      	beq.n	132b8 <uarte_nrfx_configure+0x124>
   1320a:	d807      	bhi.n	1321c <uarte_nrfx_configure+0x88>
   1320c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   13210:	d054      	beq.n	132bc <uarte_nrfx_configure+0x128>
   13212:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   13216:	d1e8      	bne.n	131ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   13218:	4b31      	ldr	r3, [pc, #196]	; (132e0 <uarte_nrfx_configure+0x14c>)
   1321a:	e030      	b.n	1327e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1321c:	f647 2712 	movw	r7, #31250	; 0x7a12
   13220:	42bb      	cmp	r3, r7
   13222:	d1e2      	bne.n	131ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   13224:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   13228:	e029      	b.n	1327e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1322a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1322e:	d047      	beq.n	132c0 <uarte_nrfx_configure+0x12c>
   13230:	d813      	bhi.n	1325a <uarte_nrfx_configure+0xc6>
   13232:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   13236:	d046      	beq.n	132c6 <uarte_nrfx_configure+0x132>
   13238:	d809      	bhi.n	1324e <uarte_nrfx_configure+0xba>
   1323a:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1323e:	42bb      	cmp	r3, r7
   13240:	d043      	beq.n	132ca <uarte_nrfx_configure+0x136>
   13242:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   13246:	d1d0      	bne.n	131ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   13248:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1324c:	e017      	b.n	1327e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1324e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   13252:	d1ca      	bne.n	131ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   13254:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   13258:	e011      	b.n	1327e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1325a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1325e:	d037      	beq.n	132d0 <uarte_nrfx_configure+0x13c>
   13260:	d808      	bhi.n	13274 <uarte_nrfx_configure+0xe0>
   13262:	4f20      	ldr	r7, [pc, #128]	; (132e4 <uarte_nrfx_configure+0x150>)
   13264:	42bb      	cmp	r3, r7
   13266:	d036      	beq.n	132d6 <uarte_nrfx_configure+0x142>
   13268:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1326c:	d1bd      	bne.n	131ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1326e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   13272:	e004      	b.n	1327e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   13274:	4f1c      	ldr	r7, [pc, #112]	; (132e8 <uarte_nrfx_configure+0x154>)
   13276:	42bb      	cmp	r3, r7
   13278:	d1b7      	bne.n	131ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1327a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1327e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   13282:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   13284:	68c3      	ldr	r3, [r0, #12]
   13286:	4322      	orrs	r2, r4
   13288:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1328a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1328e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   13292:	2000      	movs	r0, #0
}
   13294:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   13296:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1329a:	e7f0      	b.n	1327e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1329c:	4b13      	ldr	r3, [pc, #76]	; (132ec <uarte_nrfx_configure+0x158>)
   1329e:	e7ee      	b.n	1327e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   132a0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   132a4:	e7eb      	b.n	1327e <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   132a6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   132aa:	e7e8      	b.n	1327e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   132ac:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   132b0:	e7e5      	b.n	1327e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   132b2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   132b6:	e7e2      	b.n	1327e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   132b8:	4b0d      	ldr	r3, [pc, #52]	; (132f0 <uarte_nrfx_configure+0x15c>)
   132ba:	e7e0      	b.n	1327e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   132bc:	4b0d      	ldr	r3, [pc, #52]	; (132f4 <uarte_nrfx_configure+0x160>)
   132be:	e7de      	b.n	1327e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   132c0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   132c4:	e7db      	b.n	1327e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   132c6:	4b0c      	ldr	r3, [pc, #48]	; (132f8 <uarte_nrfx_configure+0x164>)
   132c8:	e7d9      	b.n	1327e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   132ca:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   132ce:	e7d6      	b.n	1327e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   132d0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   132d4:	e7d3      	b.n	1327e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   132d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   132da:	e7d0      	b.n	1327e <uarte_nrfx_configure+0xea>
   132dc:	0013b000 	.word	0x0013b000
   132e0:	004ea000 	.word	0x004ea000
   132e4:	0003d090 	.word	0x0003d090
   132e8:	000f4240 	.word	0x000f4240
   132ec:	00275000 	.word	0x00275000
   132f0:	0075c000 	.word	0x0075c000
   132f4:	003af000 	.word	0x003af000
   132f8:	013a9000 	.word	0x013a9000

000132fc <uarte_instance_init.constprop.0>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   132fc:	2201      	movs	r2, #1
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   132fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   13300:	2703      	movs	r7, #3
   13302:	460d      	mov	r5, r1
	return config->uarte_regs;
   13304:	6843      	ldr	r3, [r0, #4]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   13306:	6809      	ldr	r1, [r1, #0]
	return config->uarte_regs;
   13308:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   1330a:	4b26      	ldr	r3, [pc, #152]	; (133a4 <uarte_instance_init.constprop.0+0xa8>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1330c:	408a      	lsls	r2, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1330e:	68c6      	ldr	r6, [r0, #12]
    p_reg->OUTSET = set_mask;
   13310:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   13312:	f101 0280 	add.w	r2, r1, #128	; 0x80
   13316:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1331a:	686a      	ldr	r2, [r5, #4]
   1331c:	1c57      	adds	r7, r2, #1
   1331e:	bf1e      	ittt	ne
   13320:	f04f 0c00 	movne.w	ip, #0
   13324:	f102 0780 	addne.w	r7, r2, #128	; 0x80
   13328:	f843 c027 	strne.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   1332c:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   13330:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
   13332:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   13336:	1c4a      	adds	r2, r1, #1
   13338:	d015      	beq.n	13366 <uarte_instance_init.constprop.0+0x6a>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1333a:	68ea      	ldr	r2, [r5, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   1333c:	1c57      	adds	r7, r2, #1
   1333e:	d012      	beq.n	13366 <uarte_instance_init.constprop.0+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   13340:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   13342:	f04f 0c03 	mov.w	ip, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   13346:	4097      	lsls	r7, r2
    p_reg->OUTSET = set_mask;
   13348:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1334a:	f102 0780 	add.w	r7, r2, #128	; 0x80
   1334e:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
   13352:	f04f 0c00 	mov.w	ip, #0
   13356:	f101 0780 	add.w	r7, r1, #128	; 0x80
   1335a:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1335e:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   13362:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   13366:	4631      	mov	r1, r6
   13368:	f7ff ff14 	bl	13194 <uarte_nrfx_configure>
	if (err) {
   1336c:	b9c8      	cbnz	r0, 133a2 <uarte_instance_init.constprop.0+0xa6>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1336e:	2308      	movs	r3, #8
   13370:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   13374:	686b      	ldr	r3, [r5, #4]
   13376:	3301      	adds	r3, #1
   13378:	d009      	beq.n	1338e <uarte_instance_init.constprop.0+0x92>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1337a:	f106 0310 	add.w	r3, r6, #16
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1337e:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   13382:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   13386:	2301      	movs	r3, #1
   13388:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1338c:	6023      	str	r3, [r4, #0]
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   1338e:	68b3      	ldr	r3, [r6, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   13390:	689b      	ldr	r3, [r3, #8]
   13392:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   13396:	2300      	movs	r3, #0
   13398:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1339c:	2301      	movs	r3, #1
   1339e:	60a3      	str	r3, [r4, #8]
   133a0:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   133a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   133a4:	40842500 	.word	0x40842500

000133a8 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   133a8:	b530      	push	{r4, r5, lr}
   133aa:	b085      	sub	sp, #20
   133ac:	466c      	mov	r4, sp
   133ae:	4605      	mov	r5, r0
   133b0:	4b08      	ldr	r3, [pc, #32]	; (133d4 <uarte_1_init+0x2c>)
   133b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   133b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   133b8:	2200      	movs	r2, #0
   133ba:	2101      	movs	r1, #1
   133bc:	2009      	movs	r0, #9
   133be:	f7fc fd59 	bl	fe74 <z_arm_irq_priority_set>
   133c2:	2009      	movs	r0, #9
   133c4:	f7fc fd46 	bl	fe54 <arch_irq_enable>
   133c8:	4621      	mov	r1, r4
   133ca:	4628      	mov	r0, r5
   133cc:	f7ff ff96 	bl	132fc <uarte_instance_init.constprop.0>
   133d0:	b005      	add	sp, #20
   133d2:	bd30      	pop	{r4, r5, pc}
   133d4:	00028790 	.word	0x00028790

000133d8 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   133d8:	b530      	push	{r4, r5, lr}
   133da:	b085      	sub	sp, #20
   133dc:	466c      	mov	r4, sp
   133de:	4605      	mov	r5, r0
   133e0:	4b08      	ldr	r3, [pc, #32]	; (13404 <uarte_0_init+0x2c>)
   133e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   133e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   133e8:	2200      	movs	r2, #0
   133ea:	2101      	movs	r1, #1
   133ec:	2008      	movs	r0, #8
   133ee:	f7fc fd41 	bl	fe74 <z_arm_irq_priority_set>
   133f2:	2008      	movs	r0, #8
   133f4:	f7fc fd2e 	bl	fe54 <arch_irq_enable>
   133f8:	4621      	mov	r1, r4
   133fa:	4628      	mov	r0, r5
   133fc:	f7ff ff7e 	bl	132fc <uarte_instance_init.constprop.0>
   13400:	b005      	add	sp, #20
   13402:	bd30      	pop	{r4, r5, pc}
   13404:	000287a0 	.word	0x000287a0

00013408 <print_string_ptr>:
{
   13408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1340c:	4605      	mov	r5, r0
    if (output_buffer == NULL)
   1340e:	460f      	mov	r7, r1
{
   13410:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   13412:	b919      	cbnz	r1, 1341c <print_string_ptr+0x14>
        return false;
   13414:	2000      	movs	r0, #0
}
   13416:	b005      	add	sp, #20
   13418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   1341c:	4b4e      	ldr	r3, [pc, #312]	; (13558 <print_string_ptr+0x150>)
   1341e:	881a      	ldrh	r2, [r3, #0]
   13420:	789b      	ldrb	r3, [r3, #2]
   13422:	f8ad 200c 	strh.w	r2, [sp, #12]
   13426:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   1342a:	b340      	cbz	r0, 1347e <print_string_ptr+0x76>
   1342c:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   1342e:	f04f 0b00 	mov.w	fp, #0
   13432:	2001      	movs	r0, #1
   13434:	4c49      	ldr	r4, [pc, #292]	; (1355c <print_string_ptr+0x154>)
   13436:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   13438:	f811 3b01 	ldrb.w	r3, [r1], #1
   1343c:	bb6b      	cbnz	r3, 1349a <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   1343e:	ebaa 0a05 	sub.w	sl, sl, r5
   13442:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   13444:	4638      	mov	r0, r7
   13446:	f10a 0103 	add.w	r1, sl, #3
   1344a:	f012 ff31 	bl	262b0 <ensure>
    if (output == NULL)
   1344e:	4606      	mov	r6, r0
   13450:	2800      	cmp	r0, #0
   13452:	d0df      	beq.n	13414 <print_string_ptr+0xc>
    if (escape_characters == 0)
   13454:	2322      	movs	r3, #34	; 0x22
   13456:	1c44      	adds	r4, r0, #1
   13458:	f10a 0901 	add.w	r9, sl, #1
   1345c:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   13460:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   13462:	f1bb 0f00 	cmp.w	fp, #0
   13466:	d12e      	bne.n	134c6 <print_string_ptr+0xbe>
   13468:	4652      	mov	r2, sl
   1346a:	4629      	mov	r1, r5
   1346c:	4620      	mov	r0, r4
   1346e:	f014 fa6a 	bl	27946 <memcpy>
        output[output_length + 1] = '\"';
   13472:	2322      	movs	r3, #34	; 0x22
   13474:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   13478:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   1347c:	e00b      	b.n	13496 <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   1347e:	2103      	movs	r1, #3
   13480:	4638      	mov	r0, r7
   13482:	f012 ff15 	bl	262b0 <ensure>
        if (output == NULL)
   13486:	2800      	cmp	r0, #0
   13488:	d0c4      	beq.n	13414 <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   1348a:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1348e:	a903      	add	r1, sp, #12
   13490:	1ad2      	subs	r2, r2, r3
   13492:	f014 fc45 	bl	27d20 <strncpy>
    return true;
   13496:	2001      	movs	r0, #1
   13498:	e7bd      	b.n	13416 <print_string_ptr+0xe>
        switch (*input_pointer)
   1349a:	2b22      	cmp	r3, #34	; 0x22
   1349c:	d80b      	bhi.n	134b6 <print_string_ptr+0xae>
   1349e:	2b07      	cmp	r3, #7
   134a0:	d90c      	bls.n	134bc <print_string_ptr+0xb4>
   134a2:	f1a3 0208 	sub.w	r2, r3, #8
   134a6:	b2d2      	uxtb	r2, r2
   134a8:	fa00 f202 	lsl.w	r2, r0, r2
   134ac:	4222      	tst	r2, r4
   134ae:	d005      	beq.n	134bc <print_string_ptr+0xb4>
                escape_characters++;
   134b0:	f10b 0b01 	add.w	fp, fp, #1
                break;
   134b4:	e7bf      	b.n	13436 <print_string_ptr+0x2e>
        switch (*input_pointer)
   134b6:	2b5c      	cmp	r3, #92	; 0x5c
   134b8:	d1bd      	bne.n	13436 <print_string_ptr+0x2e>
   134ba:	e7f9      	b.n	134b0 <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   134bc:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   134be:	bf98      	it	ls
   134c0:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   134c4:	e7b7      	b.n	13436 <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   134c6:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   134ca:	f04f 0b74 	mov.w	fp, #116	; 0x74
   134ce:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   134d0:	4a23      	ldr	r2, [pc, #140]	; (13560 <print_string_ptr+0x158>)
   134d2:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   134d4:	9901      	ldr	r1, [sp, #4]
   134d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   134da:	9101      	str	r1, [sp, #4]
   134dc:	b92b      	cbnz	r3, 134ea <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   134de:	2222      	movs	r2, #34	; 0x22
   134e0:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   134e4:	f806 3008 	strb.w	r3, [r6, r8]
   134e8:	e7d5      	b.n	13496 <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   134ea:	2b1f      	cmp	r3, #31
   134ec:	d907      	bls.n	134fe <print_string_ptr+0xf6>
   134ee:	2b22      	cmp	r3, #34	; 0x22
   134f0:	d005      	beq.n	134fe <print_string_ptr+0xf6>
   134f2:	2b5c      	cmp	r3, #92	; 0x5c
   134f4:	d003      	beq.n	134fe <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   134f6:	4620      	mov	r0, r4
   134f8:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   134fa:	1c44      	adds	r4, r0, #1
   134fc:	e7ea      	b.n	134d4 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   134fe:	4620      	mov	r0, r4
            switch (*input_pointer)
   13500:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   13502:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   13506:	781b      	ldrb	r3, [r3, #0]
   13508:	2b0d      	cmp	r3, #13
   1350a:	d80a      	bhi.n	13522 <print_string_ptr+0x11a>
   1350c:	2b07      	cmp	r3, #7
   1350e:	d919      	bls.n	13544 <print_string_ptr+0x13c>
   13510:	f1a3 0108 	sub.w	r1, r3, #8
   13514:	2905      	cmp	r1, #5
   13516:	d815      	bhi.n	13544 <print_string_ptr+0x13c>
   13518:	e8df f001 	tbb	[pc, r1]
   1351c:	140d1109 	.word	0x140d1109
   13520:	0f0b      	.short	0x0f0b
   13522:	2b22      	cmp	r3, #34	; 0x22
   13524:	d001      	beq.n	1352a <print_string_ptr+0x122>
   13526:	2b5c      	cmp	r3, #92	; 0x5c
   13528:	d10c      	bne.n	13544 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   1352a:	7063      	strb	r3, [r4, #1]
                    break;
   1352c:	e7e5      	b.n	134fa <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   1352e:	2362      	movs	r3, #98	; 0x62
   13530:	e7fb      	b.n	1352a <print_string_ptr+0x122>
                    *output_pointer = 'f';
   13532:	2366      	movs	r3, #102	; 0x66
   13534:	e7f9      	b.n	1352a <print_string_ptr+0x122>
                    *output_pointer = 'n';
   13536:	236e      	movs	r3, #110	; 0x6e
   13538:	e7f7      	b.n	1352a <print_string_ptr+0x122>
                    *output_pointer = 'r';
   1353a:	2372      	movs	r3, #114	; 0x72
   1353c:	e7f5      	b.n	1352a <print_string_ptr+0x122>
                    *output_pointer = 't';
   1353e:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   13542:	e7da      	b.n	134fa <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   13544:	6839      	ldr	r1, [r7, #0]
   13546:	687d      	ldr	r5, [r7, #4]
   13548:	1a41      	subs	r1, r0, r1
   1354a:	1a69      	subs	r1, r5, r1
   1354c:	f00c fc4e 	bl	1fdec <sniprintf>
                    output_pointer += 4;
   13550:	4a03      	ldr	r2, [pc, #12]	; (13560 <print_string_ptr+0x158>)
   13552:	1d60      	adds	r0, r4, #5
                    break;
   13554:	e7d1      	b.n	134fa <print_string_ptr+0xf2>
   13556:	bf00      	nop
   13558:	000292f4 	.word	0x000292f4
   1355c:	04000037 	.word	0x04000037
   13560:	000292ee 	.word	0x000292ee

00013564 <print_value>:
{
   13564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13568:	460c      	mov	r4, r1
    if ((item == NULL) || (output_buffer == NULL))
   1356a:	4606      	mov	r6, r0
{
   1356c:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   1356e:	b908      	cbnz	r0, 13574 <print_value+0x10>
    switch ((item->type) & 0xFF)
   13570:	2500      	movs	r5, #0
   13572:	e06f      	b.n	13654 <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   13574:	2900      	cmp	r1, #0
   13576:	d0fb      	beq.n	13570 <print_value+0xc>
    switch ((item->type) & 0xFF)
   13578:	7b05      	ldrb	r5, [r0, #12]
   1357a:	2d10      	cmp	r5, #16
   1357c:	f000 80cc 	beq.w	13718 <print_value+0x1b4>
   13580:	dc18      	bgt.n	135b4 <print_value+0x50>
   13582:	1e6b      	subs	r3, r5, #1
   13584:	2b07      	cmp	r3, #7
   13586:	d8f3      	bhi.n	13570 <print_value+0xc>
   13588:	2b07      	cmp	r3, #7
   1358a:	d8f1      	bhi.n	13570 <print_value+0xc>
   1358c:	a201      	add	r2, pc, #4	; (adr r2, 13594 <print_value+0x30>)
   1358e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13592:	bf00      	nop
   13594:	00013631 	.word	0x00013631
   13598:	0001365d 	.word	0x0001365d
   1359c:	00013571 	.word	0x00013571
   135a0:	00013609 	.word	0x00013609
   135a4:	00013571 	.word	0x00013571
   135a8:	00013571 	.word	0x00013571
   135ac:	00013571 	.word	0x00013571
   135b0:	00013661 	.word	0x00013661
   135b4:	2d40      	cmp	r5, #64	; 0x40
   135b6:	f000 80dd 	beq.w	13774 <print_value+0x210>
   135ba:	2d80      	cmp	r5, #128	; 0x80
   135bc:	f000 8098 	beq.w	136f0 <print_value+0x18c>
   135c0:	2d20      	cmp	r5, #32
   135c2:	d1d5      	bne.n	13570 <print_value+0xc>
            return print_array(item, output_buffer);
   135c4:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   135c6:	2101      	movs	r1, #1
   135c8:	4620      	mov	r0, r4
   135ca:	f012 fe71 	bl	262b0 <ensure>
    if (output_pointer == NULL)
   135ce:	2800      	cmp	r0, #0
   135d0:	d0ce      	beq.n	13570 <print_value+0xc>
    *output_pointer = '[';
   135d2:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   135d4:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   135d6:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   135da:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   135dc:	68a3      	ldr	r3, [r4, #8]
   135de:	3301      	adds	r3, #1
   135e0:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   135e2:	68e3      	ldr	r3, [r4, #12]
   135e4:	3301      	adds	r3, #1
   135e6:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   135e8:	2e00      	cmp	r6, #0
   135ea:	f040 809a 	bne.w	13722 <print_value+0x1be>
    output_pointer = ensure(output_buffer, 2);
   135ee:	2102      	movs	r1, #2
   135f0:	4620      	mov	r0, r4
   135f2:	f012 fe5d 	bl	262b0 <ensure>
    if (output_pointer == NULL)
   135f6:	2800      	cmp	r0, #0
   135f8:	d0ba      	beq.n	13570 <print_value+0xc>
    *output_pointer++ = ']';
   135fa:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   135fc:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   135fe:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   13600:	68e3      	ldr	r3, [r4, #12]
   13602:	3b01      	subs	r3, #1
   13604:	60e3      	str	r3, [r4, #12]
   13606:	e011      	b.n	1362c <print_value+0xc8>
            const char buff[] = "null";
   13608:	4ba8      	ldr	r3, [pc, #672]	; (138ac <print_value+0x348>)
            const char buff[] = "true";
   1360a:	6818      	ldr	r0, [r3, #0]
   1360c:	791b      	ldrb	r3, [r3, #4]
   1360e:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   13610:	2105      	movs	r1, #5
   13612:	4620      	mov	r0, r4
            const char buff[] = "true";
   13614:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   13618:	f012 fe4a 	bl	262b0 <ensure>
            if (output == NULL)
   1361c:	4605      	mov	r5, r0
   1361e:	b1c8      	cbz	r0, 13654 <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   13620:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   13624:	a907      	add	r1, sp, #28
   13626:	1ad2      	subs	r2, r2, r3
   13628:	f014 fb7a 	bl	27d20 <strncpy>
    return true;
   1362c:	2501      	movs	r5, #1
   1362e:	e011      	b.n	13654 <print_value+0xf0>
            const char buff[] = "false";
   13630:	4b9f      	ldr	r3, [pc, #636]	; (138b0 <print_value+0x34c>)
            output = ensure(output_buffer, sizeof(buff));
   13632:	2106      	movs	r1, #6
            const char buff[] = "false";
   13634:	6818      	ldr	r0, [r3, #0]
   13636:	889b      	ldrh	r3, [r3, #4]
   13638:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   1363a:	4620      	mov	r0, r4
            const char buff[] = "false";
   1363c:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   13640:	f012 fe36 	bl	262b0 <ensure>
            if (output == NULL)
   13644:	2800      	cmp	r0, #0
   13646:	d093      	beq.n	13570 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   13648:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1364c:	a907      	add	r1, sp, #28
   1364e:	1ad2      	subs	r2, r2, r3
   13650:	f014 fb66 	bl	27d20 <strncpy>
}
   13654:	4628      	mov	r0, r5
   13656:	b00f      	add	sp, #60	; 0x3c
   13658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   1365c:	4b95      	ldr	r3, [pc, #596]	; (138b4 <print_value+0x350>)
   1365e:	e7d4      	b.n	1360a <print_value+0xa6>
    if ((d * 0) != 0)
   13660:	2200      	movs	r2, #0
    double d = item->valuedouble;
   13662:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   13666:	2300      	movs	r3, #0
   13668:	4640      	mov	r0, r8
   1366a:	4649      	mov	r1, r9
   1366c:	f7f9 fa32 	bl	cad4 <__aeabi_dmul>
   13670:	2200      	movs	r2, #0
   13672:	2300      	movs	r3, #0
   13674:	f7f8 fff6 	bl	c664 <__aeabi_dcmpeq>
   13678:	ae07      	add	r6, sp, #28
   1367a:	b9b8      	cbnz	r0, 136ac <print_value+0x148>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   1367c:	4630      	mov	r0, r6
   1367e:	498b      	ldr	r1, [pc, #556]	; (138ac <print_value+0x348>)
   13680:	f014 fb1f 	bl	27cc2 <strcpy>
   13684:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   13686:	4620      	mov	r0, r4
   13688:	1c69      	adds	r1, r5, #1
   1368a:	f012 fe11 	bl	262b0 <ensure>
    if (output_pointer == NULL)
   1368e:	2800      	cmp	r0, #0
   13690:	f43f af6e 	beq.w	13570 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   13694:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   13696:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   13698:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   1369a:	3301      	adds	r3, #1
   1369c:	429d      	cmp	r5, r3
   1369e:	d1fa      	bne.n	13696 <print_value+0x132>
    output_pointer[i] = '\0';
   136a0:	2300      	movs	r3, #0
   136a2:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   136a4:	68a0      	ldr	r0, [r4, #8]
   136a6:	4428      	add	r0, r5
   136a8:	60a0      	str	r0, [r4, #8]
    return true;
   136aa:	e7bf      	b.n	1362c <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   136ac:	211a      	movs	r1, #26
   136ae:	4a82      	ldr	r2, [pc, #520]	; (138b8 <print_value+0x354>)
   136b0:	4630      	mov	r0, r6
   136b2:	e9cd 8900 	strd	r8, r9, [sp]
   136b6:	f00c fb99 	bl	1fdec <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   136ba:	4980      	ldr	r1, [pc, #512]	; (138bc <print_value+0x358>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   136bc:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   136be:	aa04      	add	r2, sp, #16
   136c0:	4630      	mov	r0, r6
   136c2:	f00c fbc7 	bl	1fe54 <siscanf>
   136c6:	2801      	cmp	r0, #1
   136c8:	d106      	bne.n	136d8 <print_value+0x174>
   136ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   136ce:	4640      	mov	r0, r8
   136d0:	4649      	mov	r1, r9
   136d2:	f7f8 ffc7 	bl	c664 <__aeabi_dcmpeq>
   136d6:	b938      	cbnz	r0, 136e8 <print_value+0x184>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   136d8:	211a      	movs	r1, #26
   136da:	4630      	mov	r0, r6
   136dc:	e9cd 8900 	strd	r8, r9, [sp]
   136e0:	4a77      	ldr	r2, [pc, #476]	; (138c0 <print_value+0x35c>)
   136e2:	f00c fb83 	bl	1fdec <sniprintf>
   136e6:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   136e8:	2d19      	cmp	r5, #25
   136ea:	f73f af41 	bgt.w	13570 <print_value+0xc>
   136ee:	e7ca      	b.n	13686 <print_value+0x122>
            if (item->valuestring == NULL)
   136f0:	6900      	ldr	r0, [r0, #16]
   136f2:	2800      	cmp	r0, #0
   136f4:	f43f af3c 	beq.w	13570 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   136f8:	f7f9 fc1e 	bl	cf38 <strlen>
   136fc:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   136fe:	4611      	mov	r1, r2
   13700:	4620      	mov	r0, r4
   13702:	9203      	str	r2, [sp, #12]
   13704:	f012 fdd4 	bl	262b0 <ensure>
            if (output == NULL)
   13708:	2800      	cmp	r0, #0
   1370a:	f43f af31 	beq.w	13570 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1370e:	9a03      	ldr	r2, [sp, #12]
   13710:	6931      	ldr	r1, [r6, #16]
   13712:	f014 f918 	bl	27946 <memcpy>
   13716:	e789      	b.n	1362c <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   13718:	6900      	ldr	r0, [r0, #16]
   1371a:	f7ff fe75 	bl	13408 <print_string_ptr>
   1371e:	4605      	mov	r5, r0
            return print_string(item, output_buffer);
   13720:	e798      	b.n	13654 <print_value+0xf0>
        if (!print_value(current_element, output_buffer))
   13722:	4621      	mov	r1, r4
   13724:	4630      	mov	r0, r6
   13726:	f7ff ff1d 	bl	13564 <print_value>
   1372a:	2800      	cmp	r0, #0
   1372c:	f43f af20 	beq.w	13570 <print_value+0xc>
        update_offset(output_buffer);
   13730:	4620      	mov	r0, r4
   13732:	f012 fd94 	bl	2625e <update_offset>
        if (current_element->next)
   13736:	6833      	ldr	r3, [r6, #0]
   13738:	b1bb      	cbz	r3, 1376a <print_value+0x206>
            length = (size_t) (output_buffer->format ? 2 : 1);
   1373a:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   1373c:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   1373e:	2b00      	cmp	r3, #0
   13740:	bf14      	ite	ne
   13742:	f04f 0902 	movne.w	r9, #2
   13746:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   1374a:	f109 0101 	add.w	r1, r9, #1
   1374e:	f012 fdaf 	bl	262b0 <ensure>
            if (output_pointer == NULL)
   13752:	2800      	cmp	r0, #0
   13754:	f43f af0c 	beq.w	13570 <print_value+0xc>
            *output_pointer++ = ',';
   13758:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   1375a:	6963      	ldr	r3, [r4, #20]
   1375c:	b93b      	cbnz	r3, 1376e <print_value+0x20a>
            *output_pointer++ = ',';
   1375e:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   13760:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   13764:	68a3      	ldr	r3, [r4, #8]
   13766:	444b      	add	r3, r9
   13768:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   1376a:	6836      	ldr	r6, [r6, #0]
   1376c:	e73c      	b.n	135e8 <print_value+0x84>
                *output_pointer++ = ' ';
   1376e:	1c83      	adds	r3, r0, #2
   13770:	7045      	strb	r5, [r0, #1]
   13772:	e7f5      	b.n	13760 <print_value+0x1fc>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   13774:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   13776:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   13778:	2b00      	cmp	r3, #0
   1377a:	bf14      	ite	ne
   1377c:	2702      	movne	r7, #2
   1377e:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   13780:	4620      	mov	r0, r4
   13782:	1c79      	adds	r1, r7, #1
   13784:	f012 fd94 	bl	262b0 <ensure>
    if (output_pointer == NULL)
   13788:	2800      	cmp	r0, #0
   1378a:	f43f aef1 	beq.w	13570 <print_value+0xc>
    *output_pointer++ = '{';
   1378e:	237b      	movs	r3, #123	; 0x7b
   13790:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   13792:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   13794:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   13796:	3201      	adds	r2, #1
   13798:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   1379a:	b10b      	cbz	r3, 137a0 <print_value+0x23c>
        *output_pointer++ = '\n';
   1379c:	230a      	movs	r3, #10
   1379e:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   137a0:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   137a2:	2609      	movs	r6, #9
    output_buffer->offset += length;
   137a4:	443b      	add	r3, r7
        *output_pointer++ = ':';
   137a6:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   137a8:	60a3      	str	r3, [r4, #8]
    while (current_item)
   137aa:	6963      	ldr	r3, [r4, #20]
   137ac:	b995      	cbnz	r5, 137d4 <print_value+0x270>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   137ae:	2b00      	cmp	r3, #0
   137b0:	d06f      	beq.n	13892 <print_value+0x32e>
   137b2:	68e1      	ldr	r1, [r4, #12]
   137b4:	3101      	adds	r1, #1
   137b6:	4620      	mov	r0, r4
   137b8:	f012 fd7a 	bl	262b0 <ensure>
    if (output_pointer == NULL)
   137bc:	2800      	cmp	r0, #0
   137be:	f43f aed7 	beq.w	13570 <print_value+0xc>
    if (output_buffer->format)
   137c2:	6963      	ldr	r3, [r4, #20]
   137c4:	2b00      	cmp	r3, #0
   137c6:	d16e      	bne.n	138a6 <print_value+0x342>
   137c8:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   137ca:	227d      	movs	r2, #125	; 0x7d
   137cc:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   137ce:	2200      	movs	r2, #0
   137d0:	705a      	strb	r2, [r3, #1]
   137d2:	e715      	b.n	13600 <print_value+0x9c>
        if (output_buffer->format)
   137d4:	b173      	cbz	r3, 137f4 <print_value+0x290>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   137d6:	4620      	mov	r0, r4
   137d8:	68e1      	ldr	r1, [r4, #12]
   137da:	f012 fd69 	bl	262b0 <ensure>
            if (output_pointer == NULL)
   137de:	2800      	cmp	r0, #0
   137e0:	f43f aec6 	beq.w	13570 <print_value+0xc>
   137e4:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   137e6:	68e1      	ldr	r1, [r4, #12]
   137e8:	1a13      	subs	r3, r2, r0
   137ea:	428b      	cmp	r3, r1
   137ec:	d34e      	bcc.n	1388c <print_value+0x328>
            output_buffer->offset += output_buffer->depth;
   137ee:	68a3      	ldr	r3, [r4, #8]
   137f0:	440b      	add	r3, r1
   137f2:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   137f4:	4621      	mov	r1, r4
   137f6:	6a28      	ldr	r0, [r5, #32]
   137f8:	f7ff fe06 	bl	13408 <print_string_ptr>
   137fc:	2800      	cmp	r0, #0
   137fe:	f43f aeb7 	beq.w	13570 <print_value+0xc>
        update_offset(output_buffer);
   13802:	4620      	mov	r0, r4
   13804:	f012 fd2b 	bl	2625e <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   13808:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   1380a:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   1380c:	2b00      	cmp	r3, #0
   1380e:	bf14      	ite	ne
   13810:	f04f 0802 	movne.w	r8, #2
   13814:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   13818:	4641      	mov	r1, r8
   1381a:	f012 fd49 	bl	262b0 <ensure>
        if (output_pointer == NULL)
   1381e:	2800      	cmp	r0, #0
   13820:	f43f aea6 	beq.w	13570 <print_value+0xc>
        *output_pointer++ = ':';
   13824:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   13826:	6963      	ldr	r3, [r4, #20]
   13828:	b103      	cbz	r3, 1382c <print_value+0x2c8>
            *output_pointer++ = '\t';
   1382a:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   1382c:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   1382e:	4621      	mov	r1, r4
        output_buffer->offset += length;
   13830:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   13832:	4628      	mov	r0, r5
        output_buffer->offset += length;
   13834:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   13836:	f7ff fe95 	bl	13564 <print_value>
   1383a:	2800      	cmp	r0, #0
   1383c:	f43f ae98 	beq.w	13570 <print_value+0xc>
        update_offset(output_buffer);
   13840:	4620      	mov	r0, r4
   13842:	f012 fd0c 	bl	2625e <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   13846:	682b      	ldr	r3, [r5, #0]
   13848:	6962      	ldr	r2, [r4, #20]
   1384a:	3b00      	subs	r3, #0
   1384c:	bf18      	it	ne
   1384e:	2301      	movne	r3, #1
   13850:	2a00      	cmp	r2, #0
   13852:	bf0c      	ite	eq
   13854:	4698      	moveq	r8, r3
   13856:	f103 0801 	addne.w	r8, r3, #1
        output_pointer = ensure(output_buffer, length + 1);
   1385a:	4620      	mov	r0, r4
   1385c:	f108 0101 	add.w	r1, r8, #1
   13860:	f012 fd26 	bl	262b0 <ensure>
        if (output_pointer == NULL)
   13864:	2800      	cmp	r0, #0
   13866:	f43f ae83 	beq.w	13570 <print_value+0xc>
        if (current_item->next)
   1386a:	682b      	ldr	r3, [r5, #0]
   1386c:	b113      	cbz	r3, 13874 <print_value+0x310>
            *output_pointer++ = ',';
   1386e:	232c      	movs	r3, #44	; 0x2c
   13870:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   13874:	6963      	ldr	r3, [r4, #20]
   13876:	b113      	cbz	r3, 1387e <print_value+0x31a>
            *output_pointer++ = '\n';
   13878:	230a      	movs	r3, #10
   1387a:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   1387e:	2300      	movs	r3, #0
   13880:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   13882:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   13884:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   13886:	4443      	add	r3, r8
   13888:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   1388a:	e78e      	b.n	137aa <print_value+0x246>
                *output_pointer++ = '\t';
   1388c:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   13890:	e7a9      	b.n	137e6 <print_value+0x282>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   13892:	2102      	movs	r1, #2
   13894:	e78f      	b.n	137b6 <print_value+0x252>
            *output_pointer++ = '\t';
   13896:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   1389a:	68e2      	ldr	r2, [r4, #12]
   1389c:	1a19      	subs	r1, r3, r0
   1389e:	3a01      	subs	r2, #1
   138a0:	4291      	cmp	r1, r2
   138a2:	d3f8      	bcc.n	13896 <print_value+0x332>
   138a4:	e791      	b.n	137ca <print_value+0x266>
   138a6:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   138a8:	2509      	movs	r5, #9
   138aa:	e7f6      	b.n	1389a <print_value+0x336>
   138ac:	000292f7 	.word	0x000292f7
   138b0:	0002930e 	.word	0x0002930e
   138b4:	00029314 	.word	0x00029314
   138b8:	000292fc 	.word	0x000292fc
   138bc:	00029303 	.word	0x00029303
   138c0:	00029307 	.word	0x00029307

000138c4 <cJSON_strdup.isra.0.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   138c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   138c6:	4605      	mov	r5, r0
   138c8:	b180      	cbz	r0, 138ec <cJSON_strdup.isra.0.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   138ca:	f7f9 fb35 	bl	cf38 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   138ce:	4b08      	ldr	r3, [pc, #32]	; (138f0 <cJSON_strdup.isra.0.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   138d0:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   138d2:	4610      	mov	r0, r2
   138d4:	681b      	ldr	r3, [r3, #0]
   138d6:	9201      	str	r2, [sp, #4]
   138d8:	4798      	blx	r3
    if (copy == NULL)
   138da:	4604      	mov	r4, r0
   138dc:	b118      	cbz	r0, 138e6 <cJSON_strdup.isra.0.constprop.0+0x22>
   138de:	4629      	mov	r1, r5
   138e0:	9a01      	ldr	r2, [sp, #4]
   138e2:	f014 f830 	bl	27946 <memcpy>
}
   138e6:	4620      	mov	r0, r4
   138e8:	b003      	add	sp, #12
   138ea:	bd30      	pop	{r4, r5, pc}
        return NULL;
   138ec:	4604      	mov	r4, r0
   138ee:	e7fa      	b.n	138e6 <cJSON_strdup.isra.0.constprop.0+0x22>
   138f0:	200205a4 	.word	0x200205a4

000138f4 <add_item_to_object.constprop.0>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   138f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   138f6:	460d      	mov	r5, r1
   138f8:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL))
   138fa:	4607      	mov	r7, r0
   138fc:	b1f0      	cbz	r0, 1393c <add_item_to_object.constprop.0+0x48>
   138fe:	b1e9      	cbz	r1, 1393c <add_item_to_object.constprop.0+0x48>
   13900:	b1e2      	cbz	r2, 1393c <add_item_to_object.constprop.0+0x48>
    if (constant_key)
   13902:	b193      	cbz	r3, 1392a <add_item_to_object.constprop.0+0x36>
        new_type = item->type | cJSON_StringIsConst;
   13904:	68d6      	ldr	r6, [r2, #12]
   13906:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   1390a:	68e3      	ldr	r3, [r4, #12]
   1390c:	059b      	lsls	r3, r3, #22
   1390e:	d404      	bmi.n	1391a <add_item_to_object.constprop.0+0x26>
   13910:	6a20      	ldr	r0, [r4, #32]
   13912:	b110      	cbz	r0, 1391a <add_item_to_object.constprop.0+0x26>
        hooks->deallocate(item->string);
   13914:	4b0a      	ldr	r3, [pc, #40]	; (13940 <add_item_to_object.constprop.0+0x4c>)
   13916:	685b      	ldr	r3, [r3, #4]
   13918:	4798      	blx	r3
    return add_item_to_array(object, item);
   1391a:	4621      	mov	r1, r4
   1391c:	4638      	mov	r0, r7
    item->string = new_key;
   1391e:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   13920:	60e6      	str	r6, [r4, #12]
}
   13922:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   13926:	f012 bca7 	b.w	26278 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   1392a:	4608      	mov	r0, r1
   1392c:	f7ff ffca 	bl	138c4 <cJSON_strdup.isra.0.constprop.0>
        if (new_key == NULL)
   13930:	4605      	mov	r5, r0
   13932:	b118      	cbz	r0, 1393c <add_item_to_object.constprop.0+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   13934:	68e6      	ldr	r6, [r4, #12]
   13936:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   1393a:	e7e6      	b.n	1390a <add_item_to_object.constprop.0+0x16>
}
   1393c:	2000      	movs	r0, #0
   1393e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13940:	200205a4 	.word	0x200205a4

00013944 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   13944:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   13946:	4d24      	ldr	r5, [pc, #144]	; (139d8 <print.constprop.0+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   13948:	b08b      	sub	sp, #44	; 0x2c
   1394a:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   1394c:	2224      	movs	r2, #36	; 0x24
   1394e:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   13950:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   13952:	a801      	add	r0, sp, #4
   13954:	f014 f831 	bl	279ba <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   13958:	682b      	ldr	r3, [r5, #0]
   1395a:	f44f 7080 	mov.w	r0, #256	; 0x100
   1395e:	4798      	blx	r3
    buffer->length = default_buffer_size;
   13960:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   13964:	4603      	mov	r3, r0
    buffer->format = format;
   13966:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   13968:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   1396a:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   1396c:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   1396e:	462f      	mov	r7, r5
   13970:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   13974:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   13978:	b17b      	cbz	r3, 1399a <print.constprop.0+0x56>
    if (!print_value(item, buffer))
   1397a:	4620      	mov	r0, r4
   1397c:	a901      	add	r1, sp, #4
   1397e:	f7ff fdf1 	bl	13564 <print_value>
   13982:	b150      	cbz	r0, 1399a <print.constprop.0+0x56>
    update_offset(buffer);
   13984:	a801      	add	r0, sp, #4
   13986:	f012 fc6a 	bl	2625e <update_offset>
    if (hooks->reallocate != NULL)
   1398a:	68ae      	ldr	r6, [r5, #8]
   1398c:	9903      	ldr	r1, [sp, #12]
   1398e:	b15e      	cbz	r6, 139a8 <print.constprop.0+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   13990:	9801      	ldr	r0, [sp, #4]
   13992:	3101      	adds	r1, #1
   13994:	47b0      	blx	r6
        if (printed == NULL) {
   13996:	4604      	mov	r4, r0
   13998:	b9d0      	cbnz	r0, 139d0 <print.constprop.0+0x8c>
    if (buffer->buffer != NULL)
   1399a:	9c01      	ldr	r4, [sp, #4]
   1399c:	b1c4      	cbz	r4, 139d0 <print.constprop.0+0x8c>
        hooks->deallocate(buffer->buffer);
   1399e:	4620      	mov	r0, r4
   139a0:	687b      	ldr	r3, [r7, #4]
   139a2:	4798      	blx	r3
    return NULL;
   139a4:	2400      	movs	r4, #0
   139a6:	e013      	b.n	139d0 <print.constprop.0+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   139a8:	682b      	ldr	r3, [r5, #0]
   139aa:	1c48      	adds	r0, r1, #1
   139ac:	4798      	blx	r3
        if (printed == NULL)
   139ae:	4604      	mov	r4, r0
   139b0:	2800      	cmp	r0, #0
   139b2:	d0f2      	beq.n	1399a <print.constprop.0+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   139b4:	9a03      	ldr	r2, [sp, #12]
   139b6:	9b02      	ldr	r3, [sp, #8]
   139b8:	3201      	adds	r2, #1
   139ba:	429a      	cmp	r2, r3
   139bc:	bf28      	it	cs
   139be:	461a      	movcs	r2, r3
   139c0:	9901      	ldr	r1, [sp, #4]
   139c2:	f013 ffc0 	bl	27946 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   139c6:	9b03      	ldr	r3, [sp, #12]
   139c8:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   139ca:	686b      	ldr	r3, [r5, #4]
   139cc:	9801      	ldr	r0, [sp, #4]
   139ce:	4798      	blx	r3
}
   139d0:	4620      	mov	r0, r4
   139d2:	b00b      	add	sp, #44	; 0x2c
   139d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   139d6:	bf00      	nop
   139d8:	200205a4 	.word	0x200205a4

000139dc <cJSON_Delete>:
{
   139dc:	b570      	push	{r4, r5, r6, lr}
   139de:	4604      	mov	r4, r0
   139e0:	4d0f      	ldr	r5, [pc, #60]	; (13a20 <cJSON_Delete+0x44>)
    while (item != NULL)
   139e2:	b904      	cbnz	r4, 139e6 <cJSON_Delete+0xa>
}
   139e4:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   139e6:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   139e8:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   139ea:	05d9      	lsls	r1, r3, #23
   139ec:	d403      	bmi.n	139f6 <cJSON_Delete+0x1a>
   139ee:	68a0      	ldr	r0, [r4, #8]
   139f0:	b968      	cbnz	r0, 13a0e <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   139f2:	6920      	ldr	r0, [r4, #16]
   139f4:	b988      	cbnz	r0, 13a1a <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   139f6:	68e3      	ldr	r3, [r4, #12]
   139f8:	059b      	lsls	r3, r3, #22
   139fa:	d403      	bmi.n	13a04 <cJSON_Delete+0x28>
   139fc:	6a20      	ldr	r0, [r4, #32]
   139fe:	b108      	cbz	r0, 13a04 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   13a00:	686b      	ldr	r3, [r5, #4]
   13a02:	4798      	blx	r3
        global_hooks.deallocate(item);
   13a04:	4620      	mov	r0, r4
   13a06:	686b      	ldr	r3, [r5, #4]
   13a08:	4798      	blx	r3
        item = next;
   13a0a:	4634      	mov	r4, r6
   13a0c:	e7e9      	b.n	139e2 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   13a0e:	f7ff ffe5 	bl	139dc <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   13a12:	68e3      	ldr	r3, [r4, #12]
   13a14:	05da      	lsls	r2, r3, #23
   13a16:	d5ec      	bpl.n	139f2 <cJSON_Delete+0x16>
   13a18:	e7ed      	b.n	139f6 <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   13a1a:	686b      	ldr	r3, [r5, #4]
   13a1c:	4798      	blx	r3
   13a1e:	e7ea      	b.n	139f6 <cJSON_Delete+0x1a>
   13a20:	200205a4 	.word	0x200205a4

00013a24 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   13a24:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   13a26:	4b0a      	ldr	r3, [pc, #40]	; (13a50 <cJSON_CreateString+0x2c>)
{
   13a28:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   13a2a:	6818      	ldr	r0, [r3, #0]
   13a2c:	f012 fc34 	bl	26298 <cJSON_New_Item.isra.0>
    if(item)
   13a30:	4604      	mov	r4, r0
   13a32:	b158      	cbz	r0, 13a4c <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   13a34:	2310      	movs	r3, #16
   13a36:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   13a38:	4628      	mov	r0, r5
   13a3a:	f7ff ff43 	bl	138c4 <cJSON_strdup.isra.0.constprop.0>
   13a3e:	4605      	mov	r5, r0
   13a40:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   13a42:	b918      	cbnz	r0, 13a4c <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   13a44:	4620      	mov	r0, r4
   13a46:	f7ff ffc9 	bl	139dc <cJSON_Delete>
            return NULL;
   13a4a:	462c      	mov	r4, r5
        }
    }

    return item;
}
   13a4c:	4620      	mov	r0, r4
   13a4e:	bd38      	pop	{r3, r4, r5, pc}
   13a50:	200205a4 	.word	0x200205a4

00013a54 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   13a54:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   13a56:	4b04      	ldr	r3, [pc, #16]	; (13a68 <cJSON_CreateObject+0x14>)
   13a58:	6818      	ldr	r0, [r3, #0]
   13a5a:	f012 fc1d 	bl	26298 <cJSON_New_Item.isra.0>
    if (item)
   13a5e:	b108      	cbz	r0, 13a64 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   13a60:	2340      	movs	r3, #64	; 0x40
   13a62:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   13a64:	bd08      	pop	{r3, pc}
   13a66:	bf00      	nop
   13a68:	200205a4 	.word	0x200205a4

00013a6c <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(struct device *unused)
{
   13a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   13a6e:	2200      	movs	r2, #0
   13a70:	202a      	movs	r0, #42	; 0x2a
   13a72:	4611      	mov	r1, r2
   13a74:	f7fc f9fe 	bl	fe74 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   13a78:	4a06      	ldr	r2, [pc, #24]	; (13a94 <_bsdlib_init+0x28>)
   13a7a:	ab01      	add	r3, sp, #4
   13a7c:	ca07      	ldmia	r2, {r0, r1, r2}
   13a7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   13a82:	4618      	mov	r0, r3
   13a84:	f008 f836 	bl	1baf4 <bsd_init>
   13a88:	4b03      	ldr	r3, [pc, #12]	; (13a98 <_bsdlib_init+0x2c>)
   13a8a:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   13a8c:	2000      	movs	r0, #0
   13a8e:	b005      	add	sp, #20
   13a90:	f85d fb04 	ldr.w	pc, [sp], #4
   13a94:	000287b0 	.word	0x000287b0
   13a98:	20022e6c 	.word	0x20022e6c

00013a9c <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   13a9c:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   13a9e:	4c0d      	ldr	r4, [pc, #52]	; (13ad4 <thread_monitor_entry_get+0x38>)
{
   13aa0:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   13aa2:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   13aa4:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   13aa6:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   13aa8:	4b0b      	ldr	r3, [pc, #44]	; (13ad8 <thread_monitor_entry_get+0x3c>)
   13aaa:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   13aac:	6801      	ldr	r1, [r0, #0]
   13aae:	4291      	cmp	r1, r2
   13ab0:	d00e      	beq.n	13ad0 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   13ab2:	b151      	cbz	r1, 13aca <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   13ab4:	6841      	ldr	r1, [r0, #4]
   13ab6:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   13ab8:	42b1      	cmp	r1, r6
   13aba:	bfc4      	itt	gt
   13abc:	4604      	movgt	r4, r0
   13abe:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   13ac0:	3d01      	subs	r5, #1
   13ac2:	f100 0008 	add.w	r0, r0, #8
   13ac6:	d1f1      	bne.n	13aac <thread_monitor_entry_get+0x10>
   13ac8:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   13aca:	3b01      	subs	r3, #1
	new_entry->id = id;
   13acc:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   13ace:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   13ad0:	bd70      	pop	{r4, r5, r6, pc}
   13ad2:	bf00      	nop
   13ad4:	20022e7c 	.word	0x20022e7c
   13ad8:	20022e70 	.word	0x20022e70

00013adc <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   13adc:	4668      	mov	r0, sp
   13ade:	f020 0107 	bic.w	r1, r0, #7
   13ae2:	468d      	mov	sp, r1
   13ae4:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13ae6:	4b0d      	ldr	r3, [pc, #52]	; (13b1c <rpc_proxy_irq_handler+0x40>)
   13ae8:	e8d3 2fef 	ldaex	r2, [r3]
   13aec:	3201      	adds	r2, #1
   13aee:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13af2:	2900      	cmp	r1, #0
   13af4:	d1f8      	bne.n	13ae8 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   13af6:	f002 fe77 	bl	167e8 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   13afa:	4b09      	ldr	r3, [pc, #36]	; (13b20 <rpc_proxy_irq_handler+0x44>)
   13afc:	681c      	ldr	r4, [r3, #0]
   13afe:	b93c      	cbnz	r4, 13b10 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   13b00:	f7fc f9ce 	bl	fea0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   13b04:	f7fc fb0e 	bl	10124 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   13b08:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   13b0c:	4685      	mov	sp, r0
   13b0e:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   13b10:	1d20      	adds	r0, r4, #4
   13b12:	f00a ff91 	bl	1ea38 <z_impl_k_sem_give>
   13b16:	6824      	ldr	r4, [r4, #0]
	return node->next;
   13b18:	e7f1      	b.n	13afe <rpc_proxy_irq_handler+0x22>
   13b1a:	bf00      	nop
   13b1c:	20022e70 	.word	0x20022e70
   13b20:	20022e74 	.word	0x20022e74

00013b24 <bsd_os_timedwait>:
{
   13b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b28:	460c      	mov	r4, r1
   13b2a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   13b2c:	f013 fdb6 	bl	2769c <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   13b30:	6823      	ldr	r3, [r4, #0]
   13b32:	4680      	mov	r8, r0
   13b34:	2b00      	cmp	r3, #0
   13b36:	468a      	mov	sl, r1
   13b38:	d103      	bne.n	13b42 <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   13b3a:	f00a ff0b 	bl	1e954 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   13b3e:	203c      	movs	r0, #60	; 0x3c
   13b40:	e091      	b.n	13c66 <bsd_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   13b42:	bfbc      	itt	lt
   13b44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   13b48:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   13b4a:	2201      	movs	r2, #1
   13b4c:	2100      	movs	r1, #0
   13b4e:	a802      	add	r0, sp, #8
   13b50:	f013 fcbb 	bl	274ca <z_impl_k_sem_init>
   13b54:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   13b56:	f04f 0320 	mov.w	r3, #32
   13b5a:	f3ef 8b11 	mrs	fp, BASEPRI
   13b5e:	f383 8811 	msr	BASEPRI, r3
   13b62:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   13b66:	f00a ff61 	bl	1ea2c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   13b6a:	f7ff ff97 	bl	13a9c <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   13b6e:	4946      	ldr	r1, [pc, #280]	; (13c88 <bsd_os_timedwait+0x164>)
   13b70:	6843      	ldr	r3, [r0, #4]
   13b72:	680a      	ldr	r2, [r1, #0]
   13b74:	4689      	mov	r9, r1
   13b76:	4293      	cmp	r3, r2
   13b78:	f04f 0300 	mov.w	r3, #0
   13b7c:	d108      	bne.n	13b90 <bsd_os_timedwait+0x6c>
	parent->next = child;
   13b7e:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   13b80:	4b42      	ldr	r3, [pc, #264]	; (13c8c <bsd_os_timedwait+0x168>)
   13b82:	685a      	ldr	r2, [r3, #4]
   13b84:	2a00      	cmp	r2, #0
   13b86:	d171      	bne.n	13c6c <bsd_os_timedwait+0x148>
	list->head = node;
   13b88:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   13b8c:	2301      	movs	r3, #1
}
   13b8e:	e000      	b.n	13b92 <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   13b90:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   13b92:	f38b 8811 	msr	BASEPRI, fp
   13b96:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   13b9a:	2b00      	cmp	r3, #0
   13b9c:	d062      	beq.n	13c64 <bsd_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   13b9e:	6820      	ldr	r0, [r4, #0]
   13ba0:	1c42      	adds	r2, r0, #1
   13ba2:	d066      	beq.n	13c72 <bsd_os_timedwait+0x14e>
   13ba4:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   13ba8:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   13bac:	f240 30e7 	movw	r0, #999	; 0x3e7
   13bb0:	2100      	movs	r1, #0
   13bb2:	2300      	movs	r3, #0
   13bb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13bb8:	fbce 010c 	smlal	r0, r1, lr, ip
   13bbc:	f7f8 fdfc 	bl	c7b8 <__aeabi_uldivmod>
   13bc0:	2300      	movs	r3, #0
	return z_impl_k_sem_take(sem, timeout);
   13bc2:	4602      	mov	r2, r0
   13bc4:	a802      	add	r0, sp, #8
   13bc6:	f00a ff5d 	bl	1ea84 <z_impl_k_sem_take>
	__asm__ volatile(
   13bca:	f04f 0320 	mov.w	r3, #32
   13bce:	f3ef 8b11 	mrs	fp, BASEPRI
   13bd2:	f383 8811 	msr	BASEPRI, r3
   13bd6:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13bda:	2000      	movs	r0, #0
   13bdc:	4b2b      	ldr	r3, [pc, #172]	; (13c8c <bsd_os_timedwait+0x168>)
   13bde:	681a      	ldr	r2, [r3, #0]
   13be0:	b15a      	cbz	r2, 13bfa <bsd_os_timedwait+0xd6>
   13be2:	42aa      	cmp	r2, r5
   13be4:	d14d      	bne.n	13c82 <bsd_os_timedwait+0x15e>
Z_GENLIST_REMOVE(slist, snode)
   13be6:	9d01      	ldr	r5, [sp, #4]
   13be8:	2800      	cmp	r0, #0
   13bea:	d144      	bne.n	13c76 <bsd_os_timedwait+0x152>
   13bec:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   13bee:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   13bf0:	4291      	cmp	r1, r2
   13bf2:	d100      	bne.n	13bf6 <bsd_os_timedwait+0xd2>
	list->tail = node;
   13bf4:	605d      	str	r5, [r3, #4]
	parent->next = child;
   13bf6:	2300      	movs	r3, #0
   13bf8:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   13bfa:	f00a ff17 	bl	1ea2c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   13bfe:	f7ff ff4d 	bl	13a9c <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   13c02:	f8d9 3000 	ldr.w	r3, [r9]
   13c06:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   13c08:	f38b 8811 	msr	BASEPRI, fp
   13c0c:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   13c10:	6825      	ldr	r5, [r4, #0]
   13c12:	1c6b      	adds	r3, r5, #1
   13c14:	d026      	beq.n	13c64 <bsd_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   13c16:	f013 fd41 	bl	2769c <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   13c1a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   13c1e:	468e      	mov	lr, r1
   13c20:	fba8 890c 	umull	r8, r9, r8, ip
   13c24:	fba0 010c 	umull	r0, r1, r0, ip
   13c28:	fb0c 990a 	mla	r9, ip, sl, r9
   13c2c:	fb0c 110e 	mla	r1, ip, lr, r1
   13c30:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   13c34:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   13c38:	1952      	adds	r2, r2, r5
   13c3a:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   13c3e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   13c42:	0bc5      	lsrs	r5, r0, #15
   13c44:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   13c48:	1b56      	subs	r6, r2, r5
   13c4a:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   13c4e:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   13c52:	2e00      	cmp	r6, #0
   13c54:	f177 0300 	sbcs.w	r3, r7, #0
   13c58:	bfb8      	it	lt
   13c5a:	2600      	movlt	r6, #0
   13c5c:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   13c5e:	2e00      	cmp	r6, #0
   13c60:	f43f af6d 	beq.w	13b3e <bsd_os_timedwait+0x1a>
	return 0;
   13c64:	2000      	movs	r0, #0
}
   13c66:	b009      	add	sp, #36	; 0x24
   13c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c6c:	6015      	str	r5, [r2, #0]
	list->tail = node;
   13c6e:	605d      	str	r5, [r3, #4]
   13c70:	e78c      	b.n	13b8c <bsd_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   13c72:	4603      	mov	r3, r0
   13c74:	e7a5      	b.n	13bc2 <bsd_os_timedwait+0x9e>
	parent->next = child;
   13c76:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   13c78:	6859      	ldr	r1, [r3, #4]
   13c7a:	4291      	cmp	r1, r2
	list->tail = node;
   13c7c:	bf08      	it	eq
   13c7e:	6058      	streq	r0, [r3, #4]
}
   13c80:	e7b9      	b.n	13bf6 <bsd_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13c82:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13c84:	6812      	ldr	r2, [r2, #0]
   13c86:	e7ab      	b.n	13be0 <bsd_os_timedwait+0xbc>
   13c88:	20022e70 	.word	0x20022e70
   13c8c:	20022e74 	.word	0x20022e74

00013c90 <bsd_os_errno_set>:
	switch (err_code) {
   13c90:	283c      	cmp	r0, #60	; 0x3c
{
   13c92:	b508      	push	{r3, lr}
	switch (err_code) {
   13c94:	f300 8084 	bgt.w	13da0 <bsd_os_errno_set+0x110>
   13c98:	2800      	cmp	r0, #0
   13c9a:	dc03      	bgt.n	13ca4 <bsd_os_errno_set+0x14>
		errno = 0xBAADBAAD;
   13c9c:	f00f f982 	bl	22fa4 <__errno>
   13ca0:	4ba8      	ldr	r3, [pc, #672]	; (13f44 <bsd_os_errno_set+0x2b4>)
   13ca2:	e0bc      	b.n	13e1e <bsd_os_errno_set+0x18e>
   13ca4:	3801      	subs	r0, #1
   13ca6:	283b      	cmp	r0, #59	; 0x3b
   13ca8:	d8f8      	bhi.n	13c9c <bsd_os_errno_set+0xc>
   13caa:	a301      	add	r3, pc, #4	; (adr r3, 13cb0 <bsd_os_errno_set+0x20>)
   13cac:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   13cb0:	00013e19 	.word	0x00013e19
   13cb4:	00013e23 	.word	0x00013e23
   13cb8:	00013c9d 	.word	0x00013c9d
   13cbc:	00013c9d 	.word	0x00013c9d
   13cc0:	00013e2b 	.word	0x00013e2b
   13cc4:	00013c9d 	.word	0x00013c9d
   13cc8:	00013c9d 	.word	0x00013c9d
   13ccc:	00013e33 	.word	0x00013e33
   13cd0:	00013e3b 	.word	0x00013e3b
   13cd4:	00013c9d 	.word	0x00013c9d
   13cd8:	00013c9d 	.word	0x00013c9d
   13cdc:	00013e43 	.word	0x00013e43
   13ce0:	00013e4b 	.word	0x00013e4b
   13ce4:	00013e53 	.word	0x00013e53
   13ce8:	00013c9d 	.word	0x00013c9d
   13cec:	00013c9d 	.word	0x00013c9d
   13cf0:	00013c9d 	.word	0x00013c9d
   13cf4:	00013c9d 	.word	0x00013c9d
   13cf8:	00013c9d 	.word	0x00013c9d
   13cfc:	00013c9d 	.word	0x00013c9d
   13d00:	00013c9d 	.word	0x00013c9d
   13d04:	00013e5b 	.word	0x00013e5b
   13d08:	00013c9d 	.word	0x00013c9d
   13d0c:	00013e63 	.word	0x00013e63
   13d10:	00013c9d 	.word	0x00013c9d
   13d14:	00013c9d 	.word	0x00013c9d
   13d18:	00013c9d 	.word	0x00013c9d
   13d1c:	00013c9d 	.word	0x00013c9d
   13d20:	00013c9d 	.word	0x00013c9d
   13d24:	00013c9d 	.word	0x00013c9d
   13d28:	00013c9d 	.word	0x00013c9d
   13d2c:	00013c9d 	.word	0x00013c9d
   13d30:	00013c9d 	.word	0x00013c9d
   13d34:	00013c9d 	.word	0x00013c9d
   13d38:	00013e6b 	.word	0x00013e6b
   13d3c:	00013c9d 	.word	0x00013c9d
   13d40:	00013e73 	.word	0x00013e73
   13d44:	00013c9d 	.word	0x00013c9d
   13d48:	00013c9d 	.word	0x00013c9d
   13d4c:	00013f3b 	.word	0x00013f3b
   13d50:	00013e7b 	.word	0x00013e7b
   13d54:	00013e83 	.word	0x00013e83
   13d58:	00013e8b 	.word	0x00013e8b
   13d5c:	00013e93 	.word	0x00013e93
   13d60:	00013e9b 	.word	0x00013e9b
   13d64:	00013c9d 	.word	0x00013c9d
   13d68:	00013ea3 	.word	0x00013ea3
   13d6c:	00013eab 	.word	0x00013eab
   13d70:	00013c9d 	.word	0x00013c9d
   13d74:	00013eb3 	.word	0x00013eb3
   13d78:	00013ebb 	.word	0x00013ebb
   13d7c:	00013ec3 	.word	0x00013ec3
   13d80:	00013c9d 	.word	0x00013c9d
   13d84:	00013ecb 	.word	0x00013ecb
   13d88:	00013c9d 	.word	0x00013c9d
   13d8c:	00013ed3 	.word	0x00013ed3
   13d90:	00013edb 	.word	0x00013edb
   13d94:	00013c9d 	.word	0x00013c9d
   13d98:	00013c9d 	.word	0x00013c9d
   13d9c:	00013ee3 	.word	0x00013ee3
	switch (err_code) {
   13da0:	3869      	subs	r0, #105	; 0x69
   13da2:	2818      	cmp	r0, #24
   13da4:	f63f af7a 	bhi.w	13c9c <bsd_os_errno_set+0xc>
   13da8:	2818      	cmp	r0, #24
   13daa:	f63f af77 	bhi.w	13c9c <bsd_os_errno_set+0xc>
   13dae:	a301      	add	r3, pc, #4	; (adr r3, 13db4 <bsd_os_errno_set+0x124>)
   13db0:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   13db4:	00013eeb 	.word	0x00013eeb
   13db8:	00013c9d 	.word	0x00013c9d
   13dbc:	00013c9d 	.word	0x00013c9d
   13dc0:	00013c9d 	.word	0x00013c9d
   13dc4:	00013c9d 	.word	0x00013c9d
   13dc8:	00013c9d 	.word	0x00013c9d
   13dcc:	00013c9d 	.word	0x00013c9d
   13dd0:	00013ef3 	.word	0x00013ef3
   13dd4:	00013c9d 	.word	0x00013c9d
   13dd8:	00013f03 	.word	0x00013f03
   13ddc:	00013efb 	.word	0x00013efb
   13de0:	00013c9d 	.word	0x00013c9d
   13de4:	00013c9d 	.word	0x00013c9d
   13de8:	00013c9d 	.word	0x00013c9d
   13dec:	00013c9d 	.word	0x00013c9d
   13df0:	00013c9d 	.word	0x00013c9d
   13df4:	00013c9d 	.word	0x00013c9d
   13df8:	00013c9d 	.word	0x00013c9d
   13dfc:	00013c9d 	.word	0x00013c9d
   13e00:	00013c9d 	.word	0x00013c9d
   13e04:	00013f0b 	.word	0x00013f0b
   13e08:	00013f13 	.word	0x00013f13
   13e0c:	00013f1d 	.word	0x00013f1d
   13e10:	00013f27 	.word	0x00013f27
   13e14:	00013f31 	.word	0x00013f31
		errno = EPERM;
   13e18:	f00f f8c4 	bl	22fa4 <__errno>
   13e1c:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   13e1e:	6003      	str	r3, [r0, #0]
}
   13e20:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   13e22:	f00f f8bf 	bl	22fa4 <__errno>
   13e26:	2302      	movs	r3, #2
   13e28:	e7f9      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EIO;
   13e2a:	f00f f8bb 	bl	22fa4 <__errno>
   13e2e:	2305      	movs	r3, #5
   13e30:	e7f5      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = ENOEXEC;
   13e32:	f00f f8b7 	bl	22fa4 <__errno>
   13e36:	2308      	movs	r3, #8
   13e38:	e7f1      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EBADF;
   13e3a:	f00f f8b3 	bl	22fa4 <__errno>
   13e3e:	2309      	movs	r3, #9
   13e40:	e7ed      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = ENOMEM;
   13e42:	f00f f8af 	bl	22fa4 <__errno>
   13e46:	230c      	movs	r3, #12
   13e48:	e7e9      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EACCES;
   13e4a:	f00f f8ab 	bl	22fa4 <__errno>
   13e4e:	230d      	movs	r3, #13
   13e50:	e7e5      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EFAULT;
   13e52:	f00f f8a7 	bl	22fa4 <__errno>
   13e56:	230e      	movs	r3, #14
   13e58:	e7e1      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EINVAL;
   13e5a:	f00f f8a3 	bl	22fa4 <__errno>
   13e5e:	2316      	movs	r3, #22
   13e60:	e7dd      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EMFILE;
   13e62:	f00f f89f 	bl	22fa4 <__errno>
   13e66:	2318      	movs	r3, #24
   13e68:	e7d9      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EAGAIN;
   13e6a:	f00f f89b 	bl	22fa4 <__errno>
   13e6e:	230b      	movs	r3, #11
   13e70:	e7d5      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EDOM;
   13e72:	f00f f897 	bl	22fa4 <__errno>
   13e76:	2321      	movs	r3, #33	; 0x21
   13e78:	e7d1      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EPROTOTYPE;
   13e7a:	f00f f893 	bl	22fa4 <__errno>
   13e7e:	236b      	movs	r3, #107	; 0x6b
   13e80:	e7cd      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = ENOPROTOOPT;
   13e82:	f00f f88f 	bl	22fa4 <__errno>
   13e86:	236d      	movs	r3, #109	; 0x6d
   13e88:	e7c9      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EPROTONOSUPPORT;
   13e8a:	f00f f88b 	bl	22fa4 <__errno>
   13e8e:	237b      	movs	r3, #123	; 0x7b
   13e90:	e7c5      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = ESOCKTNOSUPPORT;
   13e92:	f00f f887 	bl	22fa4 <__errno>
   13e96:	237c      	movs	r3, #124	; 0x7c
   13e98:	e7c1      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EOPNOTSUPP;
   13e9a:	f00f f883 	bl	22fa4 <__errno>
   13e9e:	235f      	movs	r3, #95	; 0x5f
   13ea0:	e7bd      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EAFNOSUPPORT;
   13ea2:	f00f f87f 	bl	22fa4 <__errno>
   13ea6:	236a      	movs	r3, #106	; 0x6a
   13ea8:	e7b9      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EADDRINUSE;
   13eaa:	f00f f87b 	bl	22fa4 <__errno>
   13eae:	2370      	movs	r3, #112	; 0x70
   13eb0:	e7b5      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = ENETDOWN;
   13eb2:	f00f f877 	bl	22fa4 <__errno>
   13eb6:	2373      	movs	r3, #115	; 0x73
   13eb8:	e7b1      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = ENETUNREACH;
   13eba:	f00f f873 	bl	22fa4 <__errno>
   13ebe:	2372      	movs	r3, #114	; 0x72
   13ec0:	e7ad      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = ENETRESET;
   13ec2:	f00f f86f 	bl	22fa4 <__errno>
   13ec6:	237e      	movs	r3, #126	; 0x7e
   13ec8:	e7a9      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = ECONNRESET;
   13eca:	f00f f86b 	bl	22fa4 <__errno>
   13ece:	2368      	movs	r3, #104	; 0x68
   13ed0:	e7a5      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EISCONN;
   13ed2:	f00f f867 	bl	22fa4 <__errno>
   13ed6:	237f      	movs	r3, #127	; 0x7f
   13ed8:	e7a1      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = ENOTCONN;
   13eda:	f00f f863 	bl	22fa4 <__errno>
   13ede:	2380      	movs	r3, #128	; 0x80
   13ee0:	e79d      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = ETIMEDOUT;
   13ee2:	f00f f85f 	bl	22fa4 <__errno>
   13ee6:	2374      	movs	r3, #116	; 0x74
   13ee8:	e799      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = ENOBUFS;
   13eea:	f00f f85b 	bl	22fa4 <__errno>
   13eee:	2369      	movs	r3, #105	; 0x69
   13ef0:	e795      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EHOSTDOWN;
   13ef2:	f00f f857 	bl	22fa4 <__errno>
   13ef6:	2375      	movs	r3, #117	; 0x75
   13ef8:	e791      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EINPROGRESS;
   13efa:	f00f f853 	bl	22fa4 <__errno>
   13efe:	2377      	movs	r3, #119	; 0x77
   13f00:	e78d      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EALREADY;
   13f02:	f00f f84f 	bl	22fa4 <__errno>
   13f06:	2378      	movs	r3, #120	; 0x78
   13f08:	e789      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = ECANCELED;
   13f0a:	f00f f84b 	bl	22fa4 <__errno>
   13f0e:	238c      	movs	r3, #140	; 0x8c
   13f10:	e785      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = ENOKEY;
   13f12:	f00f f847 	bl	22fa4 <__errno>
   13f16:	f240 73d1 	movw	r3, #2001	; 0x7d1
   13f1a:	e780      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EKEYEXPIRED;
   13f1c:	f00f f842 	bl	22fa4 <__errno>
   13f20:	f240 73d2 	movw	r3, #2002	; 0x7d2
   13f24:	e77b      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EKEYREVOKED;
   13f26:	f00f f83d 	bl	22fa4 <__errno>
   13f2a:	f240 73d3 	movw	r3, #2003	; 0x7d3
   13f2e:	e776      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EKEYREJECTED;
   13f30:	f00f f838 	bl	22fa4 <__errno>
   13f34:	f240 73d4 	movw	r3, #2004	; 0x7d4
   13f38:	e771      	b.n	13e1e <bsd_os_errno_set+0x18e>
		errno = EMSGSIZE;
   13f3a:	f00f f833 	bl	22fa4 <__errno>
   13f3e:	237a      	movs	r3, #122	; 0x7a
   13f40:	e76d      	b.n	13e1e <bsd_os_errno_set+0x18e>
   13f42:	bf00      	nop
   13f44:	baadbaad 	.word	0xbaadbaad

00013f48 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13f4c:	4b01      	ldr	r3, [pc, #4]	; (13f54 <bsd_os_application_irq_set+0xc>)
   13f4e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   13f52:	4770      	bx	lr
   13f54:	e000e100 	.word	0xe000e100

00013f58 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13f5c:	4b01      	ldr	r3, [pc, #4]	; (13f64 <bsd_os_application_irq_clear+0xc>)
   13f5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   13f62:	4770      	bx	lr
   13f64:	e000e100 	.word	0xe000e100

00013f68 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13f68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   13f6c:	4b01      	ldr	r3, [pc, #4]	; (13f74 <bsd_os_trace_irq_set+0xc>)
   13f6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   13f72:	4770      	bx	lr
   13f74:	e000e100 	.word	0xe000e100

00013f78 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13f78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   13f7c:	4b01      	ldr	r3, [pc, #4]	; (13f84 <bsd_os_trace_irq_clear+0xc>)
   13f7e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   13f82:	4770      	bx	lr
   13f84:	e000e100 	.word	0xe000e100

00013f88 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   13f88:	b508      	push	{r3, lr}
	list->head = NULL;
   13f8a:	2300      	movs	r3, #0
   13f8c:	4a07      	ldr	r2, [pc, #28]	; (13fac <bsd_os_init+0x24>)
	list->tail = NULL;
   13f8e:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13f92:	4a07      	ldr	r2, [pc, #28]	; (13fb0 <bsd_os_init+0x28>)
   13f94:	e8d2 1fef 	ldaex	r1, [r2]
   13f98:	e8c2 3fe0 	stlex	r0, r3, [r2]
   13f9c:	2800      	cmp	r0, #0
   13f9e:	d1f9      	bne.n	13f94 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   13fa0:	f012 fa3b 	bl	2641a <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   13fa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   13fa8:	f012 ba2c 	b.w	26404 <trace_task_create>
   13fac:	20022e74 	.word	0x20022e74
   13fb0:	20022e70 	.word	0x20022e70

00013fb4 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   13fb4:	f240 2302 	movw	r3, #514	; 0x202
   13fb8:	4298      	cmp	r0, r3
   13fba:	d05c      	beq.n	14076 <z_to_nrf_optname+0xc2>
   13fbc:	dc07      	bgt.n	13fce <z_to_nrf_optname+0x1a>
   13fbe:	2801      	cmp	r0, #1
   13fc0:	d043      	beq.n	1404a <z_to_nrf_optname+0x96>
   13fc2:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   13fc6:	d035      	beq.n	14034 <z_to_nrf_optname+0x80>
   13fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		retval = -1;
		break;
	}

	return retval;
}
   13fcc:	4770      	bx	lr
	switch (z_in_level) {
   13fce:	f240 2303 	movw	r3, #515	; 0x203
   13fd2:	4298      	cmp	r0, r3
   13fd4:	d1f8      	bne.n	13fc8 <z_to_nrf_optname+0x14>
		switch (z_in_optname) {
   13fd6:	3901      	subs	r1, #1
   13fd8:	2913      	cmp	r1, #19
   13fda:	d8f5      	bhi.n	13fc8 <z_to_nrf_optname+0x14>
   13fdc:	a301      	add	r3, pc, #4	; (adr r3, 13fe4 <z_to_nrf_optname+0x30>)
   13fde:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   13fe2:	bf00      	nop
   13fe4:	00014083 	.word	0x00014083
   13fe8:	00014067 	.word	0x00014067
   13fec:	00014047 	.word	0x00014047
   13ff0:	00014057 	.word	0x00014057
   13ff4:	0001406b 	.word	0x0001406b
   13ff8:	0001406f 	.word	0x0001406f
   13ffc:	00014073 	.word	0x00014073
   14000:	00013fc9 	.word	0x00013fc9
   14004:	00013fc9 	.word	0x00013fc9
   14008:	00013fc9 	.word	0x00013fc9
   1400c:	00013fc9 	.word	0x00013fc9
   14010:	00013fc9 	.word	0x00013fc9
   14014:	00013fc9 	.word	0x00013fc9
   14018:	00013fc9 	.word	0x00013fc9
   1401c:	00013fc9 	.word	0x00013fc9
   14020:	00013fc9 	.word	0x00013fc9
   14024:	00013fc9 	.word	0x00013fc9
   14028:	00013fc9 	.word	0x00013fc9
   1402c:	00013fc9 	.word	0x00013fc9
   14030:	0001405d 	.word	0x0001405d
		switch (z_in_optname) {
   14034:	3901      	subs	r1, #1
   14036:	2906      	cmp	r1, #6
   14038:	d8c6      	bhi.n	13fc8 <z_to_nrf_optname+0x14>
   1403a:	e8df f001 	tbb	[pc, r1]
   1403e:	1614      	.short	0x1614
   14040:	220c1a18 	.word	0x220c1a18
   14044:	04          	.byte	0x04
   14045:	00          	.byte	0x00
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   14046:	2303      	movs	r3, #3
   14048:	e006      	b.n	14058 <z_to_nrf_optname+0xa4>
		switch (z_in_optname) {
   1404a:	2914      	cmp	r1, #20
   1404c:	d006      	beq.n	1405c <z_to_nrf_optname+0xa8>
   1404e:	2919      	cmp	r1, #25
   14050:	d006      	beq.n	14060 <z_to_nrf_optname+0xac>
   14052:	2904      	cmp	r1, #4
   14054:	d1b8      	bne.n	13fc8 <z_to_nrf_optname+0x14>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   14056:	2304      	movs	r3, #4
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   14058:	6013      	str	r3, [r2, #0]
   1405a:	e002      	b.n	14062 <z_to_nrf_optname+0xae>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   1405c:	2314      	movs	r3, #20
   1405e:	e7fb      	b.n	14058 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   14060:	6011      	str	r1, [r2, #0]
	int retval = 0;
   14062:	2000      	movs	r0, #0
			break;
   14064:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   14066:	2302      	movs	r3, #2
   14068:	e7f6      	b.n	14058 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   1406a:	2305      	movs	r3, #5
   1406c:	e7f4      	b.n	14058 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   1406e:	2306      	movs	r3, #6
   14070:	e7f2      	b.n	14058 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   14072:	2307      	movs	r3, #7
   14074:	e7f0      	b.n	14058 <z_to_nrf_optname+0xa4>
		switch (z_in_optname) {
   14076:	2902      	cmp	r1, #2
   14078:	d0f5      	beq.n	14066 <z_to_nrf_optname+0xb2>
   1407a:	2903      	cmp	r1, #3
   1407c:	d0e3      	beq.n	14046 <z_to_nrf_optname+0x92>
   1407e:	2901      	cmp	r1, #1
   14080:	d1a2      	bne.n	13fc8 <z_to_nrf_optname+0x14>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   14082:	2301      	movs	r3, #1
   14084:	e7e8      	b.n	14058 <z_to_nrf_optname+0xa4>
   14086:	bf00      	nop

00014088 <nrf91_socket_offload_ioctl>:
	return retval;
}

static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
   14088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1408c:	f5a1 7380 	sub.w	r3, r1, #256	; 0x100
   14090:	b091      	sub	sp, #68	; 0x44
	int sd = OBJ_TO_SD(obj);
   14092:	3801      	subs	r0, #1

	switch (request) {
   14094:	2b05      	cmp	r3, #5
   14096:	d879      	bhi.n	1418c <nrf91_socket_offload_ioctl+0x104>
   14098:	e8df f003 	tbb	[pc, r3]
   1409c:	94787809 	.word	0x94787809
   140a0:	0d03      	.short	0x0d03
	int sd = OBJ_TO_SD(obj);
   140a2:	f06f 045e 	mvn.w	r4, #94	; 0x5e
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   140a6:	4620      	mov	r0, r4
   140a8:	b011      	add	sp, #68	; 0x44
   140aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return nrf_close(sd);
   140ae:	f007 ff63 	bl	1bf78 <nrf_close>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   140b2:	4604      	mov	r4, r0
		break;
   140b4:	e7f7      	b.n	140a6 <nrf91_socket_offload_ioctl+0x1e>
	for (int i = 0; i < nfds; i++) {
   140b6:	f04f 0800 	mov.w	r8, #0
		nfds = va_arg(args, int);
   140ba:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   140be:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   140c0:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   140c4:	4668      	mov	r0, sp
   140c6:	2240      	movs	r2, #64	; 0x40
   140c8:	f013 fc77 	bl	279ba <memset>
	for (int i = 0; i < nfds; i++) {
   140cc:	466e      	mov	r6, sp
   140ce:	4655      	mov	r5, sl
   140d0:	4657      	mov	r7, sl
	int retval = 0;
   140d2:	4644      	mov	r4, r8
		tmp[i].events = 0;
   140d4:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   140d6:	493d      	ldr	r1, [pc, #244]	; (141cc <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   140d8:	45c1      	cmp	r9, r8
   140da:	dc32      	bgt.n	14142 <nrf91_socket_offload_ioctl+0xba>
	if (retval > 0) {
   140dc:	2c00      	cmp	r4, #0
   140de:	dce2      	bgt.n	140a6 <nrf91_socket_offload_ioctl+0x1e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   140e0:	465a      	mov	r2, fp
   140e2:	4649      	mov	r1, r9
   140e4:	4668      	mov	r0, sp
   140e6:	f008 f82d 	bl	1c144 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   140ea:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   140ec:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   140ee:	4599      	cmp	r9, r3
   140f0:	ddd9      	ble.n	140a6 <nrf91_socket_offload_ioctl+0x1e>
		if (fds[i].fd < 0) {
   140f2:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   140f6:	2a00      	cmp	r2, #0
   140f8:	db20      	blt.n	1413c <nrf91_socket_offload_ioctl+0xb4>
		if (tmp[i].revents & NRF_POLLIN) {
   140fa:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   140fe:	88d2      	ldrh	r2, [r2, #6]
   14100:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   14102:	bf42      	ittt	mi
   14104:	88e9      	ldrhmi	r1, [r5, #6]
   14106:	f041 0101 	orrmi.w	r1, r1, #1
   1410a:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   1410c:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   1410e:	bf42      	ittt	mi
   14110:	88e9      	ldrhmi	r1, [r5, #6]
   14112:	f041 0104 	orrmi.w	r1, r1, #4
   14116:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   14118:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   1411a:	bf42      	ittt	mi
   1411c:	88e9      	ldrhmi	r1, [r5, #6]
   1411e:	f041 0108 	orrmi.w	r1, r1, #8
   14122:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   14124:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   14126:	bf42      	ittt	mi
   14128:	88e9      	ldrhmi	r1, [r5, #6]
   1412a:	f041 0120 	orrmi.w	r1, r1, #32
   1412e:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   14130:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   14132:	bf42      	ittt	mi
   14134:	88ea      	ldrhmi	r2, [r5, #6]
   14136:	f042 0210 	orrmi.w	r2, r2, #16
   1413a:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   1413c:	3301      	adds	r3, #1
   1413e:	3508      	adds	r5, #8
   14140:	e7d5      	b.n	140ee <nrf91_socket_offload_ioctl+0x66>
		if (fds[i].fd < 0) {
   14142:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   14144:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   14146:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   14148:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   1414a:	da05      	bge.n	14158 <nrf91_socket_offload_ioctl+0xd0>
			tmp[i].fd = fds[i].fd;
   1414c:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   1414e:	f108 0801 	add.w	r8, r8, #1
   14152:	3608      	adds	r6, #8
   14154:	3708      	adds	r7, #8
   14156:	e7bf      	b.n	140d8 <nrf91_socket_offload_ioctl+0x50>
			obj = z_get_fd_obj(fds[i].fd,
   14158:	2286      	movs	r2, #134	; 0x86
   1415a:	f7fa ff15 	bl	ef88 <z_get_fd_obj>
			if (obj != NULL) {
   1415e:	2300      	movs	r3, #0
   14160:	491a      	ldr	r1, [pc, #104]	; (141cc <nrf91_socket_offload_ioctl+0x144>)
   14162:	b178      	cbz	r0, 14184 <nrf91_socket_offload_ioctl+0xfc>
				tmp[i].fd = OBJ_TO_SD(obj);
   14164:	3801      	subs	r0, #1
   14166:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   14168:	88b8      	ldrh	r0, [r7, #4]
   1416a:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   1416c:	bf42      	ittt	mi
   1416e:	88b2      	ldrhmi	r2, [r6, #4]
   14170:	f042 0201 	orrmi.w	r2, r2, #1
   14174:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   14176:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   14178:	bf42      	ittt	mi
   1417a:	88b2      	ldrhmi	r2, [r6, #4]
   1417c:	f042 0202 	orrmi.w	r2, r2, #2
   14180:	80b2      	strhmi	r2, [r6, #4]
   14182:	e7e4      	b.n	1414e <nrf91_socket_offload_ioctl+0xc6>
				fds[i].revents = POLLNVAL;
   14184:	2220      	movs	r2, #32
				retval++;
   14186:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   14188:	80fa      	strh	r2, [r7, #6]
				retval++;
   1418a:	e7ed      	b.n	14168 <nrf91_socket_offload_ioctl+0xe0>
	switch (cmd) {
   1418c:	2903      	cmp	r1, #3
   1418e:	d00a      	beq.n	141a6 <nrf91_socket_offload_ioctl+0x11e>
   14190:	2904      	cmp	r1, #4
   14192:	d110      	bne.n	141b6 <nrf91_socket_offload_ioctl+0x12e>
		flags = va_arg(args, int);
   14194:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   14196:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1419a:	d10c      	bne.n	141b6 <nrf91_socket_offload_ioctl+0x12e>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1419c:	2101      	movs	r1, #1
   1419e:	1392      	asrs	r2, r2, #14
   141a0:	f007 ffd2 	bl	1c148 <nrf_fcntl>
   141a4:	e785      	b.n	140b2 <nrf91_socket_offload_ioctl+0x2a>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   141a6:	2200      	movs	r2, #0
   141a8:	2102      	movs	r1, #2
   141aa:	f007 ffcd 	bl	1c148 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   141ae:	0380      	lsls	r0, r0, #14
   141b0:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   141b4:	e777      	b.n	140a6 <nrf91_socket_offload_ioctl+0x1e>
	errno = EINVAL;
   141b6:	f00e fef5 	bl	22fa4 <__errno>
   141ba:	2316      	movs	r3, #22
	return retval;
   141bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = EINVAL;
   141c0:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   141c2:	e770      	b.n	140a6 <nrf91_socket_offload_ioctl+0x1e>
		return -EXDEV;
   141c4:	f06f 0411 	mvn.w	r4, #17
   141c8:	e76d      	b.n	140a6 <nrf91_socket_offload_ioctl+0x1e>
   141ca:	bf00      	nop
   141cc:	00028a78 	.word	0x00028a78

000141d0 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   141d0:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   141d2:	4b03      	ldr	r3, [pc, #12]	; (141e0 <nrf91_socket_iface_init+0x10>)
   141d4:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   141d6:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   141d8:	4802      	ldr	r0, [pc, #8]	; (141e4 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   141da:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   141dc:	f7fb bb96 	b.w	f90c <socket_offload_dns_register>
   141e0:	20022ecc 	.word	0x20022ecc
   141e4:	00028a70 	.word	0x00028a70

000141e8 <nrf91_socket_offload_accept>:
{
   141e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   141ec:	b08a      	sub	sp, #40	; 0x28
   141ee:	4607      	mov	r7, r0
   141f0:	460c      	mov	r4, r1
   141f2:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   141f4:	f7fa fef6 	bl	efe4 <z_reserve_fd>
   141f8:	4606      	mov	r6, r0
	if (fd < 0) {
   141fa:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   141fc:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
	if (fd < 0) {
   14200:	da05      	bge.n	1420e <nrf91_socket_offload_accept+0x26>
	return -1;
   14202:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
   14206:	4630      	mov	r0, r6
   14208:	b00a      	add	sp, #40	; 0x28
   1420a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   1420e:	b31c      	cbz	r4, 14258 <nrf91_socket_offload_accept+0x70>
   14210:	b32d      	cbz	r5, 1425e <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   14212:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   14214:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   14216:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   14218:	bf0c      	ite	eq
   1421a:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1421c:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1421e:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   14220:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   14222:	4639      	mov	r1, r7
   14224:	f007 ff2a 	bl	1c07c <nrf_accept>
	if (new_sd < 0) {
   14228:	f1b0 0800 	subs.w	r8, r0, #0
   1422c:	dbe9      	blt.n	14202 <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   1422e:	b164      	cbz	r4, 1424a <nrf91_socket_offload_accept+0x62>
   14230:	b15d      	cbz	r5, 1424a <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   14232:	687b      	ldr	r3, [r7, #4]
   14234:	2b02      	cmp	r3, #2
   14236:	d115      	bne.n	14264 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   14238:	2308      	movs	r3, #8
   1423a:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   1423c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   14240:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   14242:	2301      	movs	r3, #1
   14244:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   14246:	9b04      	ldr	r3, [sp, #16]
   14248:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   1424a:	4630      	mov	r0, r6
   1424c:	4a0c      	ldr	r2, [pc, #48]	; (14280 <nrf91_socket_offload_accept+0x98>)
   1424e:	f108 0101 	add.w	r1, r8, #1
   14252:	f7fa feeb 	bl	f02c <z_finalize_fd>
	return fd;
   14256:	e7d6      	b.n	14206 <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   14258:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1425a:	4627      	mov	r7, r4
   1425c:	e7e1      	b.n	14222 <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1425e:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   14260:	462f      	mov	r7, r5
   14262:	e7de      	b.n	14222 <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   14264:	2b0a      	cmp	r3, #10
   14266:	d106      	bne.n	14276 <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   14268:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   1426a:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   1426c:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1426e:	a901      	add	r1, sp, #4
   14270:	f012 f9c7 	bl	26602 <nrf_to_z_ipv6>
   14274:	e7e9      	b.n	1424a <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   14276:	4630      	mov	r0, r6
   14278:	f7fa fee2 	bl	f040 <z_free_fd>
   1427c:	e7c1      	b.n	14202 <nrf91_socket_offload_accept+0x1a>
   1427e:	bf00      	nop
   14280:	00028a78 	.word	0x00028a78

00014284 <nrf91_socket_offload_sendmsg>:
{
   14284:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   14288:	4607      	mov	r7, r0
   1428a:	4690      	mov	r8, r2
	if (msg == NULL) {
   1428c:	460c      	mov	r4, r1
   1428e:	b319      	cbz	r1, 142d8 <nrf91_socket_offload_sendmsg+0x54>
	for (i = 0; i < msg->msg_iovlen; i++) {
   14290:	2300      	movs	r3, #0
	ssize_t len = 0;
   14292:	461a      	mov	r2, r3
   14294:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   14296:	4283      	cmp	r3, r0
   14298:	d128      	bne.n	142ec <nrf91_socket_offload_sendmsg+0x68>
	if (len <= sizeof(buf)) {
   1429a:	2a80      	cmp	r2, #128	; 0x80
   1429c:	d857      	bhi.n	1434e <nrf91_socket_offload_sendmsg+0xca>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1429e:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   142a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   142a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   142a8:	482a      	ldr	r0, [pc, #168]	; (14354 <nrf91_socket_offload_sendmsg+0xd0>)
   142aa:	f009 ff91 	bl	1e1d0 <z_impl_k_mutex_lock>
		len = 0;
   142ae:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   142b0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 14358 <nrf91_socket_offload_sendmsg+0xd4>
		for (i = 0; i < msg->msg_iovlen; i++) {
   142b4:	68e3      	ldr	r3, [r4, #12]
   142b6:	42ab      	cmp	r3, r5
   142b8:	d81f      	bhi.n	142fa <nrf91_socket_offload_sendmsg+0x76>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   142ba:	6863      	ldr	r3, [r4, #4]
   142bc:	4632      	mov	r2, r6
   142be:	9301      	str	r3, [sp, #4]
   142c0:	6823      	ldr	r3, [r4, #0]
   142c2:	4638      	mov	r0, r7
   142c4:	9300      	str	r3, [sp, #0]
   142c6:	4924      	ldr	r1, [pc, #144]	; (14358 <nrf91_socket_offload_sendmsg+0xd4>)
   142c8:	4643      	mov	r3, r8
   142ca:	f012 faeb 	bl	268a4 <nrf91_socket_offload_sendto>
   142ce:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   142d0:	4820      	ldr	r0, [pc, #128]	; (14354 <nrf91_socket_offload_sendmsg+0xd0>)
   142d2:	f009 fff5 	bl	1e2c0 <z_impl_k_mutex_unlock>
		return ret;
   142d6:	e005      	b.n	142e4 <nrf91_socket_offload_sendmsg+0x60>
		errno = EINVAL;
   142d8:	f00e fe64 	bl	22fa4 <__errno>
   142dc:	2316      	movs	r3, #22
		return -1;
   142de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		errno = EINVAL;
   142e2:	6003      	str	r3, [r0, #0]
}
   142e4:	4628      	mov	r0, r5
   142e6:	b002      	add	sp, #8
   142e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   142ec:	68a1      	ldr	r1, [r4, #8]
   142ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   142f2:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   142f4:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   142f6:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   142f8:	e7cd      	b.n	14296 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   142fa:	68a1      	ldr	r1, [r4, #8]
   142fc:	eb09 0006 	add.w	r0, r9, r6
   14300:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   14304:	685a      	ldr	r2, [r3, #4]
   14306:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   1430a:	f013 fb1c 	bl	27946 <memcpy>
			len += msg->msg_iov[i].iov_len;
   1430e:	68a3      	ldr	r3, [r4, #8]
   14310:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   14314:	4453      	add	r3, sl
   14316:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   14318:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   1431a:	441e      	add	r6, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   1431c:	e7ca      	b.n	142b4 <nrf91_socket_offload_sendmsg+0x30>
		if (msg->msg_iov[i].iov_len == 0) {
   1431e:	68a1      	ldr	r1, [r4, #8]
   14320:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
   14324:	685a      	ldr	r2, [r3, #4]
   14326:	b162      	cbz	r2, 14342 <nrf91_socket_offload_sendmsg+0xbe>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   14328:	6863      	ldr	r3, [r4, #4]
   1432a:	4638      	mov	r0, r7
   1432c:	9301      	str	r3, [sp, #4]
   1432e:	6823      	ldr	r3, [r4, #0]
   14330:	9300      	str	r3, [sp, #0]
   14332:	f851 1036 	ldr.w	r1, [r1, r6, lsl #3]
   14336:	4643      	mov	r3, r8
   14338:	f012 fab4 	bl	268a4 <nrf91_socket_offload_sendto>
		if (ret < 0) {
   1433c:	1e05      	subs	r5, r0, #0
   1433e:	dbd1      	blt.n	142e4 <nrf91_socket_offload_sendmsg+0x60>
		len += ret;
   14340:	44a9      	add	r9, r5
	for (i = 0; i < msg->msg_iovlen; i++) {
   14342:	3601      	adds	r6, #1
   14344:	68e3      	ldr	r3, [r4, #12]
   14346:	42b3      	cmp	r3, r6
   14348:	d8e9      	bhi.n	1431e <nrf91_socket_offload_sendmsg+0x9a>
   1434a:	464d      	mov	r5, r9
   1434c:	e7ca      	b.n	142e4 <nrf91_socket_offload_sendmsg+0x60>
   1434e:	2600      	movs	r6, #0
	len = 0;
   14350:	46b1      	mov	r9, r6
   14352:	e7f7      	b.n	14344 <nrf91_socket_offload_sendmsg+0xc0>
   14354:	2002091c 	.word	0x2002091c
   14358:	20029ea3 	.word	0x20029ea3

0001435c <nrf91_socket_create>:
{
   1435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1435e:	4606      	mov	r6, r0
   14360:	460d      	mov	r5, r1
   14362:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   14364:	f7fa fe3e 	bl	efe4 <z_reserve_fd>
	if (fd < 0) {
   14368:	1e04      	subs	r4, r0, #0
   1436a:	db0d      	blt.n	14388 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   1436c:	b2b0      	uxth	r0, r6
   1436e:	f012 f86b 	bl	26448 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   14372:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   14376:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   14378:	d109      	bne.n	1438e <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   1437a:	f00e fe13 	bl	22fa4 <__errno>
   1437e:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   14380:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   14382:	4620      	mov	r0, r4
   14384:	f7fa fe5c 	bl	f040 <z_free_fd>
		return -1;
   14388:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1438c:	e01b      	b.n	143c6 <nrf91_socket_create+0x6a>
	switch (socktype) {
   1438e:	2d03      	cmp	r5, #3
   14390:	d003      	beq.n	1439a <nrf91_socket_create+0x3e>
   14392:	2d04      	cmp	r5, #4
   14394:	bf08      	it	eq
   14396:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   1439a:	4638      	mov	r0, r7
   1439c:	f012 f870 	bl	26480 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   143a0:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   143a4:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   143a6:	d103      	bne.n	143b0 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   143a8:	f00e fdfc 	bl	22fa4 <__errno>
   143ac:	237b      	movs	r3, #123	; 0x7b
   143ae:	e7e7      	b.n	14380 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   143b0:	4629      	mov	r1, r5
   143b2:	4630      	mov	r0, r6
   143b4:	f007 fdce 	bl	1bf54 <nrf_socket>
	if (sd < 0) {
   143b8:	1e01      	subs	r1, r0, #0
   143ba:	dbe2      	blt.n	14382 <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   143bc:	4620      	mov	r0, r4
   143be:	4a03      	ldr	r2, [pc, #12]	; (143cc <nrf91_socket_create+0x70>)
   143c0:	3101      	adds	r1, #1
   143c2:	f7fa fe33 	bl	f02c <z_finalize_fd>
}
   143c6:	4620      	mov	r0, r4
   143c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143ca:	bf00      	nop
   143cc:	00028a78 	.word	0x00028a78

000143d0 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   143d0:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   143d2:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   143d4:	b118      	cbz	r0, 143de <callback_worker+0xe>
		data->callback(data->data);
   143d6:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   143da:	300c      	adds	r0, #12
   143dc:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   143de:	4803      	ldr	r0, [pc, #12]	; (143ec <callback_worker+0x1c>)
   143e0:	a901      	add	r1, sp, #4
   143e2:	f009 fdf9 	bl	1dfd8 <k_mem_slab_free>
}
   143e6:	b003      	add	sp, #12
   143e8:	f85d fb04 	ldr.w	pc, [sp], #4
   143ec:	20020894 	.word	0x20020894

000143f0 <open_socket>:
{
   143f0:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   143f2:	f240 2201 	movw	r2, #513	; 0x201
   143f6:	2102      	movs	r1, #2
   143f8:	2066      	movs	r0, #102	; 0x66
   143fa:	f7fb f8b5 	bl	f568 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   143fe:	4b05      	ldr	r3, [pc, #20]	; (14414 <open_socket+0x24>)
   14400:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   14402:	3001      	adds	r0, #1
   14404:	d104      	bne.n	14410 <open_socket+0x20>
		return -errno;
   14406:	f00e fdcd 	bl	22fa4 <__errno>
   1440a:	6800      	ldr	r0, [r0, #0]
   1440c:	4240      	negs	r0, r0
}
   1440e:	bd08      	pop	{r3, pc}
	return 0;
   14410:	2000      	movs	r0, #0
   14412:	e7fc      	b.n	1440e <open_socket+0x1e>
   14414:	20022ed0 	.word	0x20022ed0

00014418 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   14418:	b530      	push	{r4, r5, lr}
   1441a:	b085      	sub	sp, #20
   1441c:	4605      	mov	r5, r0
   1441e:	460c      	mov	r4, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   14420:	f7f8 fd8a 	bl	cf38 <strlen>
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   14424:	4b11      	ldr	r3, [pc, #68]	; (1446c <at_write+0x54>)
	int bytes_to_send = strlen(cmd);
   14426:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   14428:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1442a:	2300      	movs	r3, #0
   1442c:	4629      	mov	r1, r5
   1442e:	e9cd 3300 	strd	r3, r3, [sp]
   14432:	f00e fab6 	bl	229a2 <z_impl_zsock_sendto>

	if (bytes_sent == -1) {
   14436:	3001      	adds	r0, #1
   14438:	d10e      	bne.n	14458 <at_write+0x40>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
		ret.code  = -errno;
   1443a:	f00e fdb3 	bl	22fa4 <__errno>
   1443e:	6803      	ldr	r3, [r0, #0]
   14440:	425b      	negs	r3, r3
   14442:	9302      	str	r3, [sp, #8]
		ret.state = AT_CMD_ERROR;
   14444:	2301      	movs	r3, #1
   14446:	f88d 300c 	strb.w	r3, [sp, #12]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   1444a:	b114      	cbz	r4, 14452 <at_write+0x3a>
		*state = ret.state;
   1444c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14450:	7023      	strb	r3, [r4, #0]
	}

	return ret.code;
}
   14452:	9802      	ldr	r0, [sp, #8]
   14454:	b005      	add	sp, #20
   14456:	bd30      	pop	{r4, r5, pc}
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   14458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1445c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14460:	a902      	add	r1, sp, #8
   14462:	4803      	ldr	r0, [pc, #12]	; (14470 <at_write+0x58>)
   14464:	f009 fe56 	bl	1e114 <z_impl_k_msgq_get>
			LOG_ERR("Bytes sent (%d) was not the "
   14468:	e7ef      	b.n	1444a <at_write+0x32>
   1446a:	bf00      	nop
   1446c:	20022ed0 	.word	0x20022ed0
   14470:	20020944 	.word	0x20020944

00014474 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   14474:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   14476:	4d10      	ldr	r5, [pc, #64]	; (144b8 <at_cmd_driver_init+0x44>)
{
   14478:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   1447a:	782b      	ldrb	r3, [r5, #0]
   1447c:	b9cb      	cbnz	r3, 144b2 <at_cmd_driver_init+0x3e>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   1447e:	f7ff ffb7 	bl	143f0 <open_socket>
	if (err) {
   14482:	4604      	mov	r4, r0
   14484:	b990      	cbnz	r0, 144ac <at_cmd_driver_init+0x38>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14486:	2200      	movs	r2, #0
   14488:	2300      	movs	r3, #0
   1448a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1448e:	230a      	movs	r3, #10
   14490:	e9cd 0000 	strd	r0, r0, [sp]
   14494:	e9cd 0302 	strd	r0, r3, [sp, #8]
   14498:	9004      	str	r0, [sp, #16]
   1449a:	4b08      	ldr	r3, [pc, #32]	; (144bc <at_cmd_driver_init+0x48>)
   1449c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   144a0:	4907      	ldr	r1, [pc, #28]	; (144c0 <at_cmd_driver_init+0x4c>)
   144a2:	4808      	ldr	r0, [pc, #32]	; (144c4 <at_cmd_driver_init+0x50>)
   144a4:	f00a fb56 	bl	1eb54 <z_impl_k_thread_create>
			K_THREAD_STACK_SIZEOF(socket_thread_stack),
			socket_thread_fn,
			NULL, NULL, NULL,
			THREAD_PRIORITY, 0, K_NO_WAIT);

	initialized = true;
   144a8:	2301      	movs	r3, #1
   144aa:	702b      	strb	r3, [r5, #0]
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   144ac:	4620      	mov	r0, r4
   144ae:	b009      	add	sp, #36	; 0x24
   144b0:	bd30      	pop	{r4, r5, pc}
		return 0;
   144b2:	2400      	movs	r4, #0
   144b4:	e7fa      	b.n	144ac <at_cmd_driver_init+0x38>
   144b6:	bf00      	nop
   144b8:	20029f23 	.word	0x20029f23
   144bc:	000144c9 	.word	0x000144c9
   144c0:	2002c358 	.word	0x2002c358
   144c4:	20022ee4 	.word	0x20022ee4

000144c8 <socket_thread_fn>:
{
   144c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bytes_read = recv(common_socket_fd, item->data,
   144cc:	4e69      	ldr	r6, [pc, #420]	; (14674 <socket_thread_fn+0x1ac>)
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   144ce:	4f6a      	ldr	r7, [pc, #424]	; (14678 <socket_thread_fn+0x1b0>)
   144d0:	46b0      	mov	r8, r6
{
   144d2:	b086      	sub	sp, #24
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   144d4:	a903      	add	r1, sp, #12
   144d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   144da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   144de:	4638      	mov	r0, r7
   144e0:	f009 fd48 	bl	1df74 <k_mem_slab_alloc>
		ret.code  = 0;
   144e4:	2300      	movs	r3, #0
		item->callback = NULL;
   144e6:	9903      	ldr	r1, [sp, #12]
		bytes_read = recv(common_socket_fd, item->data,
   144e8:	6830      	ldr	r0, [r6, #0]
		ret.code  = 0;
   144ea:	9304      	str	r3, [sp, #16]
		ret.state = AT_CMD_OK;
   144ec:	f88d 3014 	strb.w	r3, [sp, #20]
		item->callback = NULL;
   144f0:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   144f4:	f640 228c 	movw	r2, #2700	; 0xa8c
   144f8:	e9cd 3300 	strd	r3, r3, [sp]
   144fc:	310c      	adds	r1, #12
   144fe:	f00e fc16 	bl	22d2e <z_impl_zsock_recvfrom>
		if (bytes_read < 0) {
   14502:	2800      	cmp	r0, #0
   14504:	da31      	bge.n	1456a <socket_thread_fn+0xa2>
			if ((close(common_socket_fd) == 0) &&
   14506:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_close(sock);
   14508:	f00e fa11 	bl	2292e <z_impl_zsock_close>
   1450c:	bb30      	cbnz	r0, 1455c <socket_thread_fn+0x94>
			    (open_socket() == 0)) {
   1450e:	f7ff ff6f 	bl	143f0 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   14512:	bb18      	cbnz	r0, 1455c <socket_thread_fn+0x94>
				ret.state = AT_CMD_ERROR;
   14514:	2301      	movs	r3, #1
   14516:	f88d 3014 	strb.w	r3, [sp, #20]
				ret.code  = -errno;
   1451a:	f00e fd43 	bl	22fa4 <__errno>
   1451e:	6803      	ldr	r3, [r0, #0]
   14520:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   14522:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   14524:	9903      	ldr	r1, [sp, #12]
   14526:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   1452a:	2b00      	cmp	r3, #0
   1452c:	d179      	bne.n	14622 <socket_thread_fn+0x15a>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   1452e:	4638      	mov	r0, r7
   14530:	a903      	add	r1, sp, #12
   14532:	f009 fd51 	bl	1dfd8 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   14536:	4b51      	ldr	r3, [pc, #324]	; (1467c <socket_thread_fn+0x1b4>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   14538:	689b      	ldr	r3, [r3, #8]
   1453a:	2b00      	cmp	r3, #0
   1453c:	d1ca      	bne.n	144d4 <socket_thread_fn+0xc>
   1453e:	f89d 2014 	ldrb.w	r2, [sp, #20]
   14542:	2a04      	cmp	r2, #4
   14544:	d0c6      	beq.n	144d4 <socket_thread_fn+0xc>
			current_cmd_handler = NULL;
   14546:	4a4e      	ldr	r2, [pc, #312]	; (14680 <socket_thread_fn+0x1b8>)
   14548:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
   1454a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1454e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14552:	a904      	add	r1, sp, #16
   14554:	484b      	ldr	r0, [pc, #300]	; (14684 <socket_thread_fn+0x1bc>)
   14556:	f009 fd89 	bl	1e06c <z_impl_k_msgq_put>
	for (;;) {
   1455a:	e7bb      	b.n	144d4 <socket_thread_fn+0xc>
			close(common_socket_fd);
   1455c:	f8d8 0000 	ldr.w	r0, [r8]
   14560:	f00e f9e5 	bl	2292e <z_impl_zsock_close>
}
   14564:	b006      	add	sp, #24
   14566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (item->data[bytes_read - 1] != '\0') {
   1456a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1456e:	4448      	add	r0, r9
   14570:	f890 a00b 	ldrb.w	sl, [r0, #11]
   14574:	f1ba 0f00 	cmp.w	sl, #0
   14578:	d002      	beq.n	14580 <socket_thread_fn+0xb8>
			ret.code  = -ENOBUFS;
   1457a:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1457e:	e7d0      	b.n	14522 <socket_thread_fn+0x5a>
	ret->state = AT_CMD_NOTIFICATION;
   14580:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   14582:	f109 050c 	add.w	r5, r9, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   14586:	4628      	mov	r0, r5
   14588:	493f      	ldr	r1, [pc, #252]	; (14688 <socket_thread_fn+0x1c0>)
	ret->state = AT_CMD_NOTIFICATION;
   1458a:	f88d 3014 	strb.w	r3, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   1458e:	f013 fbda 	bl	27d46 <strstr>
		if (tmpstr) {
   14592:	4604      	mov	r4, r0
   14594:	b1e8      	cbz	r0, 145d2 <socket_thread_fn+0x10a>
			ret->state = AT_CMD_OK;
   14596:	f88d a014 	strb.w	sl, [sp, #20]
			ret->code  = 0;
   1459a:	f8cd a010 	str.w	sl, [sp, #16]
		buf[new_len++] = '\0';
   1459e:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   145a0:	1b62      	subs	r2, r4, r5
		buf[new_len++] = '\0';
   145a2:	3201      	adds	r2, #1
   145a4:	7023      	strb	r3, [r4, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   145a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   145aa:	9903      	ldr	r1, [sp, #12]
   145ac:	2b04      	cmp	r3, #4
   145ae:	d04e      	beq.n	1464e <socket_thread_fn+0x186>
			if ((response_buf_len > 0) &&
   145b0:	4d36      	ldr	r5, [pc, #216]	; (1468c <socket_thread_fn+0x1c4>)
   145b2:	682b      	ldr	r3, [r5, #0]
   145b4:	2b00      	cmp	r3, #0
   145b6:	d052      	beq.n	1465e <socket_thread_fn+0x196>
			    (response_buf != NULL)) {
   145b8:	4c35      	ldr	r4, [pc, #212]	; (14690 <socket_thread_fn+0x1c8>)
   145ba:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   145bc:	2800      	cmp	r0, #0
   145be:	d04e      	beq.n	1465e <socket_thread_fn+0x196>
				if (response_buf_len >= payload_len) {
   145c0:	4293      	cmp	r3, r2
   145c2:	d32a      	bcc.n	1461a <socket_thread_fn+0x152>
   145c4:	310c      	adds	r1, #12
   145c6:	f013 f9be 	bl	27946 <memcpy>
				response_buf_len = 0;
   145ca:	2300      	movs	r3, #0
   145cc:	602b      	str	r3, [r5, #0]
				response_buf     = NULL;
   145ce:	6023      	str	r3, [r4, #0]
				goto next;
   145d0:	e7a8      	b.n	14524 <socket_thread_fn+0x5c>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   145d2:	4628      	mov	r0, r5
   145d4:	492f      	ldr	r1, [pc, #188]	; (14694 <socket_thread_fn+0x1cc>)
   145d6:	f013 fbb6 	bl	27d46 <strstr>
		if (tmpstr) {
   145da:	4604      	mov	r4, r0
   145dc:	b140      	cbz	r0, 145f0 <socket_thread_fn+0x128>
			ret->state = AT_CMD_ERROR_CMS;
   145de:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   145e0:	f109 0017 	add.w	r0, r9, #23
			ret->state = AT_CMD_ERROR_CME;
   145e4:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   145e8:	f013 f98d 	bl	27906 <atoi>
   145ec:	9004      	str	r0, [sp, #16]
			break;
   145ee:	e7d6      	b.n	1459e <socket_thread_fn+0xd6>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   145f0:	4628      	mov	r0, r5
   145f2:	4929      	ldr	r1, [pc, #164]	; (14698 <socket_thread_fn+0x1d0>)
   145f4:	f013 fba7 	bl	27d46 <strstr>
		if (tmpstr) {
   145f8:	4604      	mov	r4, r0
   145fa:	b108      	cbz	r0, 14600 <socket_thread_fn+0x138>
			ret->state = AT_CMD_ERROR_CME;
   145fc:	2303      	movs	r3, #3
   145fe:	e7ef      	b.n	145e0 <socket_thread_fn+0x118>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   14600:	4628      	mov	r0, r5
   14602:	4926      	ldr	r1, [pc, #152]	; (1469c <socket_thread_fn+0x1d4>)
   14604:	f013 fb9f 	bl	27d46 <strstr>
		if (tmpstr) {
   14608:	4604      	mov	r4, r0
   1460a:	b368      	cbz	r0, 14668 <socket_thread_fn+0x1a0>
			ret->state = AT_CMD_ERROR;
   1460c:	2301      	movs	r3, #1
   1460e:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   14612:	f06f 0307 	mvn.w	r3, #7
   14616:	9304      	str	r3, [sp, #16]
			break;
   14618:	e7c1      	b.n	1459e <socket_thread_fn+0xd6>
					ret.code  = -EMSGSIZE;
   1461a:	f06f 0379 	mvn.w	r3, #121	; 0x79
   1461e:	9304      	str	r3, [sp, #16]
   14620:	e7d3      	b.n	145ca <socket_thread_fn+0x102>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   14622:	4b1f      	ldr	r3, [pc, #124]	; (146a0 <socket_thread_fn+0x1d8>)
   14624:	2200      	movs	r2, #0
   14626:	604b      	str	r3, [r1, #4]
   14628:	460b      	mov	r3, r1
   1462a:	600a      	str	r2, [r1, #0]
   1462c:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14630:	e8d3 2fef 	ldaex	r2, [r3]
   14634:	f042 0001 	orr.w	r0, r2, #1
   14638:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1463c:	2c00      	cmp	r4, #0
   1463e:	d1f7      	bne.n	14630 <socket_thread_fn+0x168>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   14640:	07d3      	lsls	r3, r2, #31
   14642:	f53f af78 	bmi.w	14536 <socket_thread_fn+0x6e>
		k_queue_append(&work_q->queue, work);
   14646:	4817      	ldr	r0, [pc, #92]	; (146a4 <socket_thread_fn+0x1dc>)
   14648:	f012 fe38 	bl	272bc <k_queue_append>
   1464c:	e773      	b.n	14536 <socket_thread_fn+0x6e>
		if (payload_len == 0) {
   1464e:	2a00      	cmp	r2, #0
   14650:	f43f af68 	beq.w	14524 <socket_thread_fn+0x5c>
			item->callback = notification_handler;
   14654:	4b14      	ldr	r3, [pc, #80]	; (146a8 <socket_thread_fn+0x1e0>)
			item->callback = current_cmd_handler;
   14656:	681b      	ldr	r3, [r3, #0]
   14658:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
   1465c:	e762      	b.n	14524 <socket_thread_fn+0x5c>
		if (payload_len == 0) {
   1465e:	2a00      	cmp	r2, #0
   14660:	f43f af60 	beq.w	14524 <socket_thread_fn+0x5c>
			item->callback = current_cmd_handler;
   14664:	4b06      	ldr	r3, [pc, #24]	; (14680 <socket_thread_fn+0x1b8>)
   14666:	e7f6      	b.n	14656 <socket_thread_fn+0x18e>
		new_len = strlen(buf) + 1;
   14668:	4628      	mov	r0, r5
   1466a:	f7f8 fc65 	bl	cf38 <strlen>
   1466e:	1c42      	adds	r2, r0, #1
   14670:	e799      	b.n	145a6 <socket_thread_fn+0xde>
   14672:	bf00      	nop
   14674:	20022ed0 	.word	0x20022ed0
   14678:	20020894 	.word	0x20020894
   1467c:	200208c4 	.word	0x200208c4
   14680:	20022ed4 	.word	0x20022ed4
   14684:	20020944 	.word	0x20020944
   14688:	00029326 	.word	0x00029326
   1468c:	20022ee0 	.word	0x20022ee0
   14690:	20022edc 	.word	0x20022edc
   14694:	00029329 	.word	0x00029329
   14698:	00029335 	.word	0x00029335
   1469c:	00029341 	.word	0x00029341
   146a0:	000143d1 	.word	0x000143d1
   146a4:	200280bc 	.word	0x200280bc
   146a8:	20022ed8 	.word	0x20022ed8

000146ac <at_cmd_write>:
{
   146ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   146ae:	4604      	mov	r4, r0
   146b0:	460e      	mov	r6, r1
   146b2:	4615      	mov	r5, r2
   146b4:	9301      	str	r3, [sp, #4]
	return z_impl_k_sem_take(sem, timeout);
   146b6:	4f0b      	ldr	r7, [pc, #44]	; (146e4 <at_cmd_write+0x38>)
   146b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   146bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   146c0:	4638      	mov	r0, r7
   146c2:	f00a f9df 	bl	1ea84 <z_impl_k_sem_take>
	response_buf     = buf;
   146c6:	4b08      	ldr	r3, [pc, #32]	; (146e8 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   146c8:	4620      	mov	r0, r4
	response_buf     = buf;
   146ca:	601e      	str	r6, [r3, #0]
	response_buf_len = buf_len;
   146cc:	4b07      	ldr	r3, [pc, #28]	; (146ec <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   146ce:	9901      	ldr	r1, [sp, #4]
	response_buf_len = buf_len;
   146d0:	601d      	str	r5, [r3, #0]
	int return_code = at_write(cmd, state);
   146d2:	f7ff fea1 	bl	14418 <at_write>
   146d6:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   146d8:	4638      	mov	r0, r7
   146da:	f00a f9ad 	bl	1ea38 <z_impl_k_sem_give>
}
   146de:	4620      	mov	r0, r4
   146e0:	b003      	add	sp, #12
   146e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   146e4:	200208c4 	.word	0x200208c4
   146e8:	20022edc 	.word	0x20022edc
   146ec:	20022ee0 	.word	0x20022ee0

000146f0 <at_cmd_set_notification_handler>:
{
   146f0:	b538      	push	{r3, r4, r5, lr}
   146f2:	4604      	mov	r4, r0
	return z_impl_k_sem_take(sem, timeout);
   146f4:	4d07      	ldr	r5, [pc, #28]	; (14714 <at_cmd_set_notification_handler+0x24>)
   146f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   146fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   146fe:	4628      	mov	r0, r5
   14700:	f00a f9c0 	bl	1ea84 <z_impl_k_sem_take>
	notification_handler = handler;
   14704:	4b04      	ldr	r3, [pc, #16]	; (14718 <at_cmd_set_notification_handler+0x28>)
   14706:	601c      	str	r4, [r3, #0]
	z_impl_k_sem_give(sem);
   14708:	4628      	mov	r0, r5
}
   1470a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1470e:	f00a b993 	b.w	1ea38 <z_impl_k_sem_give>
   14712:	bf00      	nop
   14714:	200208c4 	.word	0x200208c4
   14718:	20022ed8 	.word	0x20022ed8

0001471c <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1471c:	4b0b      	ldr	r3, [pc, #44]	; (1474c <find_node+0x30>)
{
   1471e:	b570      	push	{r4, r5, r6, lr}
   14720:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   14722:	6818      	ldr	r0, [r3, #0]
   14724:	b150      	cbz	r0, 1473c <find_node+0x20>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14726:	2500      	movs	r5, #0
   14728:	4603      	mov	r3, r0
   1472a:	6800      	ldr	r0, [r0, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   1472c:	685e      	ldr	r6, [r3, #4]
   1472e:	428e      	cmp	r6, r1
   14730:	d105      	bne.n	1473e <find_node+0x22>
   14732:	689e      	ldr	r6, [r3, #8]
   14734:	4296      	cmp	r6, r2
   14736:	d102      	bne.n	1473e <find_node+0x22>
			*prev_out = prev;
			return curr;
   14738:	4618      	mov	r0, r3
			*prev_out = prev;
   1473a:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   1473c:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1473e:	2800      	cmp	r0, #0
   14740:	d0fc      	beq.n	1473c <find_node+0x20>
   14742:	461d      	mov	r5, r3
   14744:	4603      	mov	r3, r0
   14746:	6800      	ldr	r0, [r0, #0]
   14748:	e7f0      	b.n	1472c <find_node+0x10>
   1474a:	bf00      	nop
   1474c:	20022f9c 	.word	0x20022f9c

00014750 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   14750:	4a06      	ldr	r2, [pc, #24]	; (1476c <module_init+0x1c>)
{
   14752:	b508      	push	{r3, lr}
	if (initialized) {
   14754:	7813      	ldrb	r3, [r2, #0]
   14756:	b93b      	cbnz	r3, 14768 <module_init+0x18>
		LOG_WRN("Already initialized. Nothing to do");
		return 0;
	}

	initialized = true;
   14758:	2101      	movs	r1, #1
   1475a:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   1475c:	4a04      	ldr	r2, [pc, #16]	; (14770 <module_init+0x20>)

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   1475e:	4805      	ldr	r0, [pc, #20]	; (14774 <module_init+0x24>)
	list->tail = NULL;
   14760:	e9c2 3300 	strd	r3, r3, [r2]
   14764:	f7ff ffc4 	bl	146f0 <at_cmd_set_notification_handler>
	return 0;
}
   14768:	2000      	movs	r0, #0
   1476a:	bd08      	pop	{r3, pc}
   1476c:	20029f24 	.word	0x20029f24
   14770:	20022f9c 	.word	0x20022f9c
   14774:	00014785 	.word	0x00014785

00014778 <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
   14778:	4801      	ldr	r0, [pc, #4]	; (14780 <k_mutex_unlock.constprop.0+0x8>)
   1477a:	f009 bda1 	b.w	1e2c0 <z_impl_k_mutex_unlock>
   1477e:	bf00      	nop
   14780:	20020930 	.word	0x20020930

00014784 <notif_dispatch>:
{
   14784:	b538      	push	{r3, r4, r5, lr}
   14786:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   14788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1478c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14790:	4809      	ldr	r0, [pc, #36]	; (147b8 <notif_dispatch+0x34>)
   14792:	f009 fd1d 	bl	1e1d0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   14796:	4b09      	ldr	r3, [pc, #36]	; (147bc <notif_dispatch+0x38>)
   14798:	681b      	ldr	r3, [r3, #0]
   1479a:	b91b      	cbnz	r3, 147a4 <notif_dispatch+0x20>
}
   1479c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   147a0:	f7ff bfea 	b.w	14778 <k_mutex_unlock.constprop.0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   147a4:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   147a6:	4629      	mov	r1, r5
   147a8:	689a      	ldr	r2, [r3, #8]
   147aa:	6858      	ldr	r0, [r3, #4]
   147ac:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   147ae:	2c00      	cmp	r4, #0
   147b0:	d0f4      	beq.n	1479c <notif_dispatch+0x18>
   147b2:	4623      	mov	r3, r4
   147b4:	6824      	ldr	r4, [r4, #0]
   147b6:	e7f6      	b.n	147a6 <notif_dispatch+0x22>
   147b8:	20020930 	.word	0x20020930
   147bc:	20022f9c 	.word	0x20022f9c

000147c0 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   147c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   147c2:	4606      	mov	r6, r0
	if (handler == NULL) {
   147c4:	460d      	mov	r5, r1
   147c6:	b361      	cbz	r1, 14822 <at_notif_register_handler+0x62>
   147c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   147cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   147d0:	4815      	ldr	r0, [pc, #84]	; (14828 <at_notif_register_handler+0x68>)
   147d2:	f009 fcfd 	bl	1e1d0 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   147d6:	462a      	mov	r2, r5
   147d8:	4631      	mov	r1, r6
   147da:	a801      	add	r0, sp, #4
   147dc:	f7ff ff9e 	bl	1471c <find_node>
   147e0:	4604      	mov	r4, r0
   147e2:	b120      	cbz	r0, 147ee <at_notif_register_handler+0x2e>
		k_mutex_unlock(&list_mtx);
   147e4:	f7ff ffc8 	bl	14778 <k_mutex_unlock.constprop.0>
		return 0;
   147e8:	2000      	movs	r0, #0
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
	}
	return append_notif_handler(context, handler);
}
   147ea:	b002      	add	sp, #8
   147ec:	bd70      	pop	{r4, r5, r6, pc}
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   147ee:	200c      	movs	r0, #12
   147f0:	f009 fc1c 	bl	1e02c <k_malloc>
   147f4:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   147f6:	b920      	cbnz	r0, 14802 <at_notif_register_handler+0x42>
		k_mutex_unlock(&list_mtx);
   147f8:	f7ff ffbe 	bl	14778 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   147fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14800:	e7f3      	b.n	147ea <at_notif_register_handler+0x2a>
__ssp_bos_icheck3(memset, void *, int)
   14802:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   14804:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   14806:	4a09      	ldr	r2, [pc, #36]	; (1482c <at_notif_register_handler+0x6c>)
   14808:	6044      	str	r4, [r0, #4]
   1480a:	6084      	str	r4, [r0, #8]
	parent->next = child;
   1480c:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   1480e:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   14810:	e9c3 6501 	strd	r6, r5, [r3, #4]
   14814:	b911      	cbnz	r1, 1481c <at_notif_register_handler+0x5c>
	list->head = node;
   14816:	e9c2 3300 	strd	r3, r3, [r2]
}
   1481a:	e7e3      	b.n	147e4 <at_notif_register_handler+0x24>
	parent->next = child;
   1481c:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1481e:	6053      	str	r3, [r2, #4]
}
   14820:	e7e0      	b.n	147e4 <at_notif_register_handler+0x24>
		return -EINVAL;
   14822:	f06f 0015 	mvn.w	r0, #21
   14826:	e7e0      	b.n	147ea <at_notif_register_handler+0x2a>
   14828:	20020930 	.word	0x20020930
   1482c:	20022f9c 	.word	0x20022f9c

00014830 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   14830:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   14832:	4d05      	ldr	r5, [pc, #20]	; (14848 <write_uart_string+0x18>)
   14834:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   14836:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   1483a:	b901      	cbnz	r1, 1483e <write_uart_string+0xe>
	}
}
   1483c:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   1483e:	6828      	ldr	r0, [r5, #0]
   14840:	6883      	ldr	r3, [r0, #8]
   14842:	685b      	ldr	r3, [r3, #4]
   14844:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   14846:	e7f6      	b.n	14836 <write_uart_string+0x6>
   14848:	20023084 	.word	0x20023084

0001484c <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   1484c:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   1484e:	491c      	ldr	r1, [pc, #112]	; (148c0 <cmd_send+0x74>)
{
   14850:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   14852:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   14856:	4608      	mov	r0, r1
   14858:	f10d 030b 	add.w	r3, sp, #11
   1485c:	f7ff ff26 	bl	146ac <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   14860:	2800      	cmp	r0, #0
   14862:	da04      	bge.n	1486e <cmd_send+0x22>
		LOG_ERR("Error while processing AT command: %d", err);
		state = AT_CMD_ERROR;
   14864:	2301      	movs	r3, #1
   14866:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   1486a:	4816      	ldr	r0, [pc, #88]	; (148c4 <cmd_send+0x78>)
   1486c:	e012      	b.n	14894 <cmd_send+0x48>
	switch (state) {
   1486e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14872:	2b03      	cmp	r3, #3
   14874:	d810      	bhi.n	14898 <cmd_send+0x4c>
   14876:	a201      	add	r2, pc, #4	; (adr r2, 1487c <cmd_send+0x30>)
   14878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1487c:	0001488d 	.word	0x0001488d
   14880:	0001486b 	.word	0x0001486b
   14884:	000148a7 	.word	0x000148a7
   14888:	000148b9 	.word	0x000148b9
		write_uart_string(at_buf);
   1488c:	480c      	ldr	r0, [pc, #48]	; (148c0 <cmd_send+0x74>)
   1488e:	f7ff ffcf 	bl	14830 <write_uart_string>
		write_uart_string(OK_STR);
   14892:	480d      	ldr	r0, [pc, #52]	; (148c8 <cmd_send+0x7c>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   14894:	f7ff ffcc 	bl	14830 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   14898:	4b0c      	ldr	r3, [pc, #48]	; (148cc <cmd_send+0x80>)
   1489a:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   1489c:	f012 f8e1 	bl	26a62 <z_impl_uart_irq_rx_enable>
}
   148a0:	b00b      	add	sp, #44	; 0x2c
   148a2:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   148a6:	4b0a      	ldr	r3, [pc, #40]	; (148d0 <cmd_send+0x84>)
   148a8:	9000      	str	r0, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   148aa:	2219      	movs	r2, #25
   148ac:	2100      	movs	r1, #0
   148ae:	a803      	add	r0, sp, #12
   148b0:	f013 f99b 	bl	27bea <__sprintf_chk>
		write_uart_string(str);
   148b4:	a803      	add	r0, sp, #12
   148b6:	e7ed      	b.n	14894 <cmd_send+0x48>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   148b8:	4b06      	ldr	r3, [pc, #24]	; (148d4 <cmd_send+0x88>)
   148ba:	9000      	str	r0, [sp, #0]
   148bc:	e7f5      	b.n	148aa <cmd_send+0x5e>
   148be:	bf00      	nop
   148c0:	20029f25 	.word	0x20029f25
   148c4:	0002934c 	.word	0x0002934c
   148c8:	00029347 	.word	0x00029347
   148cc:	20023084 	.word	0x20023084
   148d0:	00029354 	.word	0x00029354
   148d4:	00029365 	.word	0x00029365

000148d8 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(struct device *dev)
{
   148d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   148da:	4604      	mov	r4, r0
	if (api->irq_update) {
   148dc:	6883      	ldr	r3, [r0, #8]
   148de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   148e0:	b103      	cbz	r3, 148e4 <isr+0xc>
		return api->irq_update(dev);
   148e2:	4798      	blx	r3
	if (api->irq_rx_ready) {
   148e4:	68a3      	ldr	r3, [r4, #8]
   148e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   148e8:	b193      	cbz	r3, 14910 <isr+0x38>
		return api->irq_rx_ready(dev);
   148ea:	4620      	mov	r0, r4
   148ec:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   148ee:	b178      	cbz	r0, 14910 <isr+0x38>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   148f0:	4f37      	ldr	r7, [pc, #220]	; (149d0 <isr+0xf8>)
		if (at_cmd_len > 0) {
   148f2:	4d38      	ldr	r5, [pc, #224]	; (149d4 <isr+0xfc>)
   148f4:	463e      	mov	r6, r7
   148f6:	e8d7 3faf 	lda	r3, [r7]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   148fa:	07db      	lsls	r3, r3, #31
   148fc:	d408      	bmi.n	14910 <isr+0x38>
	if (api->fifo_read) {
   148fe:	68a3      	ldr	r3, [r4, #8]
   14900:	699b      	ldr	r3, [r3, #24]
   14902:	b12b      	cbz	r3, 14910 <isr+0x38>
		return api->fifo_read(dev, rx_data, size);
   14904:	2201      	movs	r2, #1
   14906:	4620      	mov	r0, r4
   14908:	f10d 0107 	add.w	r1, sp, #7
   1490c:	4798      	blx	r3
   1490e:	b908      	cbnz	r0, 14914 <isr+0x3c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   14910:	b003      	add	sp, #12
   14912:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uart_rx_handler(character);
   14914:	f89d 3007 	ldrb.w	r3, [sp, #7]
	switch (character) {
   14918:	2b08      	cmp	r3, #8
   1491a:	d001      	beq.n	14920 <isr+0x48>
   1491c:	2b7f      	cmp	r3, #127	; 0x7f
   1491e:	d105      	bne.n	1492c <isr+0x54>
		if (at_cmd_len > 0) {
   14920:	682b      	ldr	r3, [r5, #0]
   14922:	2b00      	cmp	r3, #0
   14924:	d0e7      	beq.n	148f6 <isr+0x1e>
			at_cmd_len--;
   14926:	3b01      	subs	r3, #1
   14928:	602b      	str	r3, [r5, #0]
   1492a:	e7e4      	b.n	148f6 <isr+0x1e>
	if (!inside_quotes) {
   1492c:	492a      	ldr	r1, [pc, #168]	; (149d8 <isr+0x100>)
   1492e:	780a      	ldrb	r2, [r1, #0]
   14930:	bb52      	cbnz	r2, 14988 <isr+0xb0>
		switch (character) {
   14932:	2b0a      	cmp	r3, #10
   14934:	d03a      	beq.n	149ac <isr+0xd4>
   14936:	2b0d      	cmp	r3, #13
   14938:	d022      	beq.n	14980 <isr+0xa8>
   1493a:	bb2b      	cbnz	r3, 14988 <isr+0xb0>
			if (term_mode == MODE_NULL_TERM) {
   1493c:	4b27      	ldr	r3, [pc, #156]	; (149dc <isr+0x104>)
   1493e:	781b      	ldrb	r3, [r3, #0]
   14940:	2b00      	cmp	r3, #0
   14942:	d1d8      	bne.n	148f6 <isr+0x1e>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   14944:	2300      	movs	r3, #0
   14946:	4a26      	ldr	r2, [pc, #152]	; (149e0 <isr+0x108>)
   14948:	6828      	ldr	r0, [r5, #0]
	inside_quotes = false;
   1494a:	700b      	strb	r3, [r1, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   1494c:	5413      	strb	r3, [r2, r0]
	at_cmd_len = 0;
   1494e:	602b      	str	r3, [r5, #0]
	if (at_buf[0]) {
   14950:	7813      	ldrb	r3, [r2, #0]
   14952:	2b00      	cmp	r3, #0
   14954:	d0cf      	beq.n	148f6 <isr+0x1e>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   14956:	4b23      	ldr	r3, [pc, #140]	; (149e4 <isr+0x10c>)
   14958:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   1495a:	6883      	ldr	r3, [r0, #8]
   1495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1495e:	b103      	cbz	r3, 14962 <isr+0x8a>
		api->irq_rx_disable(dev);
   14960:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14962:	e8d6 3fef 	ldaex	r3, [r6]
   14966:	f043 0201 	orr.w	r2, r3, #1
   1496a:	e8c6 2fe1 	stlex	r1, r2, [r6]
   1496e:	2900      	cmp	r1, #0
   14970:	d1f7      	bne.n	14962 <isr+0x8a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   14972:	07da      	lsls	r2, r3, #31
   14974:	d4bf      	bmi.n	148f6 <isr+0x1e>
		k_queue_append(&work_q->queue, work);
   14976:	491c      	ldr	r1, [pc, #112]	; (149e8 <isr+0x110>)
   14978:	481c      	ldr	r0, [pc, #112]	; (149ec <isr+0x114>)
   1497a:	f012 fc9f 	bl	272bc <k_queue_append>
   1497e:	e7ba      	b.n	148f6 <isr+0x1e>
			if (term_mode == MODE_CR) {
   14980:	4816      	ldr	r0, [pc, #88]	; (149dc <isr+0x104>)
   14982:	7800      	ldrb	r0, [r0, #0]
   14984:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   14986:	d0dd      	beq.n	14944 <isr+0x6c>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   14988:	f8d5 c000 	ldr.w	ip, [r5]
   1498c:	f10c 0001 	add.w	r0, ip, #1
   14990:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   14994:	d2af      	bcs.n	148f6 <isr+0x1e>
	at_buf[at_cmd_len] = character;
   14996:	f8df e048 	ldr.w	lr, [pc, #72]	; 149e0 <isr+0x108>
	if (character == '"') {
   1499a:	2b22      	cmp	r3, #34	; 0x22
	at_buf[at_cmd_len] = character;
   1499c:	f80e 300c 	strb.w	r3, [lr, ip]
	at_cmd_len++;
   149a0:	6028      	str	r0, [r5, #0]
	if (character == '"') {
   149a2:	d1a8      	bne.n	148f6 <isr+0x1e>
	if (!inside_quotes) {
   149a4:	f082 0201 	eor.w	r2, r2, #1
		inside_quotes = !inside_quotes;
   149a8:	700a      	strb	r2, [r1, #0]
   149aa:	e7a4      	b.n	148f6 <isr+0x1e>
			if (term_mode == MODE_LF) {
   149ac:	480b      	ldr	r0, [pc, #44]	; (149dc <isr+0x104>)
   149ae:	7800      	ldrb	r0, [r0, #0]
   149b0:	2802      	cmp	r0, #2
   149b2:	d0c7      	beq.n	14944 <isr+0x6c>
			if (term_mode == MODE_CR_LF &&
   149b4:	2803      	cmp	r0, #3
   149b6:	d1e7      	bne.n	14988 <isr+0xb0>
   149b8:	f8d5 c000 	ldr.w	ip, [r5]
   149bc:	f1bc 0f00 	cmp.w	ip, #0
   149c0:	d0e2      	beq.n	14988 <isr+0xb0>
			    at_buf[at_cmd_len - 1] == '\r') {
   149c2:	4807      	ldr	r0, [pc, #28]	; (149e0 <isr+0x108>)
   149c4:	4460      	add	r0, ip
			    at_cmd_len > 0 &&
   149c6:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   149ca:	280d      	cmp	r0, #13
   149cc:	e7db      	b.n	14986 <isr+0xae>
   149ce:	bf00      	nop
   149d0:	20023080 	.word	0x20023080
   149d4:	20022fa4 	.word	0x20022fa4
   149d8:	2002af25 	.word	0x2002af25
   149dc:	2002af26 	.word	0x2002af26
   149e0:	20029f25 	.word	0x20029f25
   149e4:	20023084 	.word	0x20023084
   149e8:	20023078 	.word	0x20023078
   149ec:	20022fa8 	.word	0x20022fa8

000149f0 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   149f0:	2201      	movs	r2, #1
   149f2:	4b2f      	ldr	r3, [pc, #188]	; (14ab0 <at_host_init+0xc0>)
{
   149f4:	e92d 48f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, fp, lr}
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   149f8:	2000      	movs	r0, #0
   149fa:	492e      	ldr	r1, [pc, #184]	; (14ab4 <at_host_init+0xc4>)
		term_mode = mode;
   149fc:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   149fe:	f7ff fedf 	bl	147c0 <at_notif_register_handler>
	if (err != 0) {
   14a02:	4606      	mov	r6, r0
   14a04:	bb30      	cbnz	r0, 14a54 <at_host_init+0x64>
   14a06:	482c      	ldr	r0, [pc, #176]	; (14ab8 <at_host_init+0xc8>)
   14a08:	f009 f970 	bl	1dcec <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   14a0c:	4c2b      	ldr	r4, [pc, #172]	; (14abc <at_host_init+0xcc>)
   14a0e:	6020      	str	r0, [r4, #0]
	if (uart_dev == NULL) {
   14a10:	b1f0      	cbz	r0, 14a50 <at_host_init+0x60>
	return z_impl_k_uptime_ticks();
   14a12:	f012 fe43 	bl	2769c <z_impl_k_uptime_ticks>
   14a16:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   14a1a:	fba0 2305 	umull	r2, r3, r0, r5
   14a1e:	fb05 3301 	mla	r3, r5, r1, r3
   14a22:	0bd7      	lsrs	r7, r2, #15
   14a24:	ea47 4743 	orr.w	r7, r7, r3, lsl #17
		err = uart_err_check(uart_dev);
   14a28:	6820      	ldr	r0, [r4, #0]
	if (api->err_check != NULL) {
   14a2a:	6883      	ldr	r3, [r0, #8]
   14a2c:	689b      	ldr	r3, [r3, #8]
   14a2e:	b32b      	cbz	r3, 14a7c <at_host_init+0x8c>
		return api->err_check(dev);
   14a30:	4798      	blx	r3
		if (err) {
   14a32:	b318      	cbz	r0, 14a7c <at_host_init+0x8c>
   14a34:	f012 fe32 	bl	2769c <z_impl_k_uptime_ticks>
   14a38:	fba0 bc05 	umull	fp, ip, r0, r5
   14a3c:	fb05 cc01 	mla	ip, r5, r1, ip
   14a40:	ea4f 32db 	mov.w	r2, fp, lsr #15
   14a44:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
			if (k_uptime_get_32() - start_time >
   14a48:	1bd2      	subs	r2, r2, r7
   14a4a:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   14a4e:	d905      	bls.n	14a5c <at_host_init+0x6c>

	/* Initialize the UART module */
	err = at_uart_init(uart_dev_name);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
		return -EFAULT;
   14a50:	f06f 060d 	mvn.w	r6, #13
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   14a54:	4630      	mov	r0, r6
   14a56:	b002      	add	sp, #8
   14a58:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   14a5c:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read) {
   14a5e:	6883      	ldr	r3, [r0, #8]
   14a60:	699b      	ldr	r3, [r3, #24]
   14a62:	b12b      	cbz	r3, 14a70 <at_host_init+0x80>
		return api->fifo_read(dev, rx_data, size);
   14a64:	2201      	movs	r2, #1
   14a66:	f10d 0107 	add.w	r1, sp, #7
   14a6a:	4798      	blx	r3
   14a6c:	2800      	cmp	r0, #0
   14a6e:	d1f5      	bne.n	14a5c <at_host_init+0x6c>
	return z_impl_k_sleep(timeout);
   14a70:	2100      	movs	r1, #0
   14a72:	f44f 70a4 	mov.w	r0, #328	; 0x148
   14a76:	f009 ffb9 	bl	1e9ec <z_impl_k_sleep>
	} while (err);
   14a7a:	e7d5      	b.n	14a28 <at_host_init+0x38>
	uart_irq_callback_set(uart_dev, isr);
   14a7c:	6822      	ldr	r2, [r4, #0]
	const struct uart_driver_api *api =
   14a7e:	6893      	ldr	r3, [r2, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   14a80:	b123      	cbz	r3, 14a8c <at_host_init+0x9c>
   14a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   14a84:	b113      	cbz	r3, 14a8c <at_host_init+0x9c>
		api->irq_callback_set(dev, cb, user_data);
   14a86:	4610      	mov	r0, r2
   14a88:	490d      	ldr	r1, [pc, #52]	; (14ac0 <at_host_init+0xd0>)
   14a8a:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   14a8c:	2200      	movs	r2, #0
   14a8e:	4b0d      	ldr	r3, [pc, #52]	; (14ac4 <at_host_init+0xd4>)
   14a90:	490d      	ldr	r1, [pc, #52]	; (14ac8 <at_host_init+0xd8>)
   14a92:	601a      	str	r2, [r3, #0]
   14a94:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   14a98:	480c      	ldr	r0, [pc, #48]	; (14acc <at_host_init+0xdc>)
   14a9a:	230a      	movs	r3, #10
   14a9c:	f44f 7240 	mov.w	r2, #768	; 0x300
   14aa0:	490b      	ldr	r1, [pc, #44]	; (14ad0 <at_host_init+0xe0>)
   14aa2:	f00a f8e5 	bl	1ec70 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   14aa6:	6820      	ldr	r0, [r4, #0]
   14aa8:	f011 ffdb 	bl	26a62 <z_impl_uart_irq_rx_enable>
	return err;
   14aac:	e7d2      	b.n	14a54 <at_host_init+0x64>
   14aae:	bf00      	nop
   14ab0:	2002af26 	.word	0x2002af26
   14ab4:	00026a6d 	.word	0x00026a6d
   14ab8:	00029293 	.word	0x00029293
   14abc:	20023084 	.word	0x20023084
   14ac0:	000148d9 	.word	0x000148d9
   14ac4:	20023078 	.word	0x20023078
   14ac8:	0001484d 	.word	0x0001484d
   14acc:	20022fa8 	.word	0x20022fa8
   14ad0:	2002c758 	.word	0x2002c758

00014ad4 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   14ad4:	4b06      	ldr	r3, [pc, #24]	; (14af0 <is_valid_notification_char+0x1c>)
   14ad6:	5cc3      	ldrb	r3, [r0, r3]
   14ad8:	f003 0303 	and.w	r3, r3, #3
   14adc:	2b02      	cmp	r3, #2
   14ade:	bf08      	it	eq
   14ae0:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   14ae2:	3841      	subs	r0, #65	; 0x41
   14ae4:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   14ae6:	2819      	cmp	r0, #25
   14ae8:	bf8c      	ite	hi
   14aea:	2000      	movhi	r0, #0
   14aec:	2001      	movls	r0, #1
   14aee:	4770      	bx	lr
   14af0:	000296c9 	.word	0x000296c9

00014af4 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   14af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   14af8:	6805      	ldr	r5, [r0, #0]
{
   14afa:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   14afc:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   14afe:	782b      	ldrb	r3, [r5, #0]
{
   14b00:	4680      	mov	r8, r0
   14b02:	460f      	mov	r7, r1
   14b04:	4616      	mov	r6, r2
   14b06:	2b00      	cmp	r3, #0
   14b08:	f000 80c8 	beq.w	14c9c <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   14b0c:	4b65      	ldr	r3, [pc, #404]	; (14ca4 <at_parse_process_element+0x1b0>)
   14b0e:	781c      	ldrb	r4, [r3, #0]
   14b10:	2c06      	cmp	r4, #6
   14b12:	d110      	bne.n	14b36 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   14b14:	1c6b      	adds	r3, r5, #1
   14b16:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   14b18:	9a00      	ldr	r2, [sp, #0]
   14b1a:	7810      	ldrb	r0, [r2, #0]
   14b1c:	f7ff ffda 	bl	14ad4 <is_valid_notification_char>
   14b20:	b930      	cbnz	r0, 14b30 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   14b22:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   14b24:	462a      	mov	r2, r5
   14b26:	4639      	mov	r1, r7
   14b28:	4630      	mov	r0, r6
   14b2a:	f012 f858 	bl	26bde <at_params_string_put>
   14b2e:	e01b      	b.n	14b68 <at_parse_process_element+0x74>
			tmpstr++;
   14b30:	3201      	adds	r2, #1
   14b32:	9200      	str	r2, [sp, #0]
   14b34:	e7f0      	b.n	14b18 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   14b36:	2c07      	cmp	r4, #7
   14b38:	d124      	bne.n	14b84 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   14b3a:	4668      	mov	r0, sp
   14b3c:	f011 ffa2 	bl	26a84 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   14b40:	9a00      	ldr	r2, [sp, #0]
   14b42:	7810      	ldrb	r0, [r2, #0]
   14b44:	f7ff ffc6 	bl	14ad4 <is_valid_notification_char>
   14b48:	b9a8      	cbnz	r0, 14b76 <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   14b4a:	1b53      	subs	r3, r2, r5
   14b4c:	4639      	mov	r1, r7
   14b4e:	462a      	mov	r2, r5
   14b50:	4630      	mov	r0, r6
   14b52:	f012 f844 	bl	26bde <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   14b56:	9b00      	ldr	r3, [sp, #0]
   14b58:	781a      	ldrb	r2, [r3, #0]
   14b5a:	2a3d      	cmp	r2, #61	; 0x3d
   14b5c:	d10e      	bne.n	14b7c <at_parse_process_element+0x88>
   14b5e:	785a      	ldrb	r2, [r3, #1]
   14b60:	2a3f      	cmp	r2, #63	; 0x3f
   14b62:	d101      	bne.n	14b68 <at_parse_process_element+0x74>
			tmpstr += 2;
   14b64:	3302      	adds	r3, #2
			tmpstr++;
   14b66:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   14b68:	2000      	movs	r0, #0
	*str = tmpstr;
   14b6a:	9b00      	ldr	r3, [sp, #0]
   14b6c:	f8c8 3000 	str.w	r3, [r8]
}
   14b70:	b023      	add	sp, #140	; 0x8c
   14b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   14b76:	3201      	adds	r2, #1
   14b78:	9200      	str	r2, [sp, #0]
   14b7a:	e7e1      	b.n	14b40 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   14b7c:	2a3f      	cmp	r2, #63	; 0x3f
   14b7e:	d1f3      	bne.n	14b68 <at_parse_process_element+0x74>
			tmpstr++;
   14b80:	3301      	adds	r3, #1
   14b82:	e7f0      	b.n	14b66 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   14b84:	2c08      	cmp	r4, #8
   14b86:	d103      	bne.n	14b90 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   14b88:	4610      	mov	r0, r2
   14b8a:	f012 f803 	bl	26b94 <at_params_empty_put>
   14b8e:	e7eb      	b.n	14b68 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   14b90:	2c02      	cmp	r4, #2
   14b92:	d111      	bne.n	14bb8 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   14b94:	9a00      	ldr	r2, [sp, #0]
   14b96:	7811      	ldrb	r1, [r2, #0]
   14b98:	4608      	mov	r0, r1
   14b9a:	f011 ff6a 	bl	26a72 <is_lfcr>
   14b9e:	b918      	cbnz	r0, 14ba8 <at_parse_process_element+0xb4>
   14ba0:	b111      	cbz	r1, 14ba8 <at_parse_process_element+0xb4>
			tmpstr++;
   14ba2:	3201      	adds	r2, #1
   14ba4:	9200      	str	r2, [sp, #0]
   14ba6:	e7f5      	b.n	14b94 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   14ba8:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   14baa:	462a      	mov	r2, r5
   14bac:	4639      	mov	r1, r7
   14bae:	4630      	mov	r0, r6
   14bb0:	f012 f815 	bl	26bde <at_params_string_put>
		tmpstr++;
   14bb4:	9b00      	ldr	r3, [sp, #0]
   14bb6:	e7e3      	b.n	14b80 <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   14bb8:	2c03      	cmp	r4, #3
   14bba:	d109      	bne.n	14bd0 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   14bbc:	9b00      	ldr	r3, [sp, #0]
   14bbe:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   14bc0:	2a22      	cmp	r2, #34	; 0x22
   14bc2:	d003      	beq.n	14bcc <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   14bc4:	b112      	cbz	r2, 14bcc <at_parse_process_element+0xd8>
			tmpstr++;
   14bc6:	3301      	adds	r3, #1
   14bc8:	9300      	str	r3, [sp, #0]
   14bca:	e7f7      	b.n	14bbc <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   14bcc:	1b5b      	subs	r3, r3, r5
   14bce:	e7ec      	b.n	14baa <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   14bd0:	2c01      	cmp	r4, #1
   14bd2:	d13c      	bne.n	14c4e <at_parse_process_element+0x15a>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   14bd4:	4628      	mov	r0, r5
   14bd6:	220a      	movs	r2, #10
   14bd8:	a901      	add	r1, sp, #4
   14bda:	f00b faa9 	bl	20130 <strtoul>
		tmpstr = next;
   14bde:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   14be0:	4d31      	ldr	r5, [pc, #196]	; (14ca8 <at_parse_process_element+0x1b4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   14be2:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   14be4:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   14be6:	9800      	ldr	r0, [sp, #0]
   14be8:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   14bea:	2b29      	cmp	r3, #41	; 0x29
   14bec:	d028      	beq.n	14c40 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   14bee:	b33b      	cbz	r3, 14c40 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   14bf0:	3b2c      	subs	r3, #44	; 0x2c
   14bf2:	b2db      	uxtb	r3, r3
   14bf4:	3001      	adds	r0, #1
   14bf6:	2b11      	cmp	r3, #17
				tmparray[i++] =
   14bf8:	9000      	str	r0, [sp, #0]
   14bfa:	d803      	bhi.n	14c04 <at_parse_process_element+0x110>
   14bfc:	fa25 f303 	lsr.w	r3, r5, r3
   14c00:	07db      	lsls	r3, r3, #31
   14c02:	d408      	bmi.n	14c16 <at_parse_process_element+0x122>
				tmpstr++;
   14c04:	46a1      	mov	r9, r4
   14c06:	e004      	b.n	14c12 <at_parse_process_element+0x11e>
					tmpstr = next;
   14c08:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   14c0a:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   14c0e:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   14c10:	d015      	beq.n	14c3e <at_parse_process_element+0x14a>
				tmpstr++;
   14c12:	464c      	mov	r4, r9
   14c14:	e7e7      	b.n	14be6 <at_parse_process_element+0xf2>
					(u32_t)strtoul(++tmpstr, &next, 10);
   14c16:	220a      	movs	r2, #10
   14c18:	a901      	add	r1, sp, #4
   14c1a:	f00b fa89 	bl	20130 <strtoul>
				tmparray[i++] =
   14c1e:	ab22      	add	r3, sp, #136	; 0x88
   14c20:	f104 0901 	add.w	r9, r4, #1
   14c24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   14c28:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   14c2c:	9800      	ldr	r0, [sp, #0]
   14c2e:	f7f8 f983 	bl	cf38 <strlen>
   14c32:	4604      	mov	r4, r0
   14c34:	9801      	ldr	r0, [sp, #4]
   14c36:	f7f8 f97f 	bl	cf38 <strlen>
   14c3a:	4284      	cmp	r4, r0
   14c3c:	d1e4      	bne.n	14c08 <at_parse_process_element+0x114>
   14c3e:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   14c40:	4639      	mov	r1, r7
   14c42:	4630      	mov	r0, r6
   14c44:	00a3      	lsls	r3, r4, #2
   14c46:	aa02      	add	r2, sp, #8
   14c48:	f011 ffec 	bl	26c24 <at_params_array_put>
   14c4c:	e7b2      	b.n	14bb4 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   14c4e:	2c04      	cmp	r4, #4
   14c50:	d115      	bne.n	14c7e <at_parse_process_element+0x18a>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   14c52:	220a      	movs	r2, #10
   14c54:	4628      	mov	r0, r5
   14c56:	a902      	add	r1, sp, #8
   14c58:	f00b fa6a 	bl	20130 <strtoul>
		tmpstr = next;
   14c5c:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   14c5e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   14c62:	4602      	mov	r2, r0
		tmpstr = next;
   14c64:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   14c66:	da05      	bge.n	14c74 <at_parse_process_element+0x180>
			at_params_short_put(list, index, (u16_t)value);
   14c68:	b282      	uxth	r2, r0
   14c6a:	4639      	mov	r1, r7
   14c6c:	4630      	mov	r0, r6
   14c6e:	f011 ff7e 	bl	26b6e <at_params_short_put>
   14c72:	e779      	b.n	14b68 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   14c74:	4639      	mov	r1, r7
   14c76:	4630      	mov	r0, r6
   14c78:	f011 ff9e 	bl	26bb8 <at_params_int_put>
   14c7c:	e774      	b.n	14b68 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   14c7e:	2c05      	cmp	r4, #5
   14c80:	f47f af72 	bne.w	14b68 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   14c84:	4909      	ldr	r1, [pc, #36]	; (14cac <at_parse_process_element+0x1b8>)
   14c86:	9b00      	ldr	r3, [sp, #0]
   14c88:	781a      	ldrb	r2, [r3, #0]
   14c8a:	5c52      	ldrb	r2, [r2, r1]
   14c8c:	f012 0f44 	tst.w	r2, #68	; 0x44
   14c90:	d101      	bne.n	14c96 <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   14c92:	1b5b      	subs	r3, r3, r5
   14c94:	e746      	b.n	14b24 <at_parse_process_element+0x30>
			tmpstr++;
   14c96:	3301      	adds	r3, #1
   14c98:	9300      	str	r3, [sp, #0]
   14c9a:	e7f4      	b.n	14c86 <at_parse_process_element+0x192>
		return -1;
   14c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14ca0:	e766      	b.n	14b70 <at_parse_process_element+0x7c>
   14ca2:	bf00      	nop
   14ca4:	2002af27 	.word	0x2002af27
   14ca8:	00024001 	.word	0x00024001
   14cac:	000296c9 	.word	0x000296c9

00014cb0 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   14cb0:	b510      	push	{r4, lr}
   14cb2:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   14cb4:	f7f8 f940 	bl	cf38 <strlen>
   14cb8:	2801      	cmp	r0, #1
   14cba:	d922      	bls.n	14d02 <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   14cbc:	7821      	ldrb	r1, [r4, #0]
   14cbe:	4b13      	ldr	r3, [pc, #76]	; (14d0c <is_command+0x5c>)
   14cc0:	5cca      	ldrb	r2, [r1, r3]
   14cc2:	f002 0203 	and.w	r2, r2, #3
   14cc6:	2a02      	cmp	r2, #2
   14cc8:	bf08      	it	eq
   14cca:	3920      	subeq	r1, #32
   14ccc:	2941      	cmp	r1, #65	; 0x41
   14cce:	461a      	mov	r2, r3
   14cd0:	d117      	bne.n	14d02 <is_command+0x52>
   14cd2:	7863      	ldrb	r3, [r4, #1]
   14cd4:	5cd2      	ldrb	r2, [r2, r3]
   14cd6:	f002 0203 	and.w	r2, r2, #3
   14cda:	2a02      	cmp	r2, #2
   14cdc:	bf08      	it	eq
   14cde:	3b20      	subeq	r3, #32
   14ce0:	2b54      	cmp	r3, #84	; 0x54
   14ce2:	d10e      	bne.n	14d02 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   14ce4:	78a2      	ldrb	r2, [r4, #2]
   14ce6:	2a25      	cmp	r2, #37	; 0x25
   14ce8:	d00d      	beq.n	14d06 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   14cea:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   14cee:	2b23      	cmp	r3, #35	; 0x23
   14cf0:	d009      	beq.n	14d06 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   14cf2:	4610      	mov	r0, r2
   14cf4:	f011 febd 	bl	26a72 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   14cf8:	b910      	cbnz	r0, 14d00 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   14cfa:	fab2 f082 	clz	r0, r2
   14cfe:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   14d00:	bd10      	pop	{r4, pc}
		return false;
   14d02:	2000      	movs	r0, #0
   14d04:	e7fc      	b.n	14d00 <is_command+0x50>
		return true;
   14d06:	2001      	movs	r0, #1
   14d08:	e7fa      	b.n	14d00 <is_command+0x50>
   14d0a:	bf00      	nop
   14d0c:	000296c9 	.word	0x000296c9

00014d10 <at_parse_detect_type>:
{
   14d10:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   14d12:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   14d14:	2900      	cmp	r1, #0
{
   14d16:	4605      	mov	r5, r0
   14d18:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   14d1a:	d141      	bne.n	14da0 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   14d1c:	2a2b      	cmp	r2, #43	; 0x2b
   14d1e:	4e29      	ldr	r6, [pc, #164]	; (14dc4 <at_parse_detect_type+0xb4>)
   14d20:	d001      	beq.n	14d26 <at_parse_detect_type+0x16>
   14d22:	2a25      	cmp	r2, #37	; 0x25
   14d24:	d104      	bne.n	14d30 <at_parse_detect_type+0x20>
	state = new_state;
   14d26:	2306      	movs	r3, #6
   14d28:	7033      	strb	r3, [r6, #0]
	return 0;
   14d2a:	2000      	movs	r0, #0
	*str = tmpstr;
   14d2c:	602c      	str	r4, [r5, #0]
}
   14d2e:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   14d30:	4620      	mov	r0, r4
   14d32:	f7ff ffbd 	bl	14cb0 <is_command>
   14d36:	b388      	cbz	r0, 14d9c <at_parse_detect_type+0x8c>
	state = new_state;
   14d38:	2307      	movs	r3, #7
   14d3a:	e7f5      	b.n	14d28 <at_parse_detect_type+0x18>
	if (chr == '"') {
   14d3c:	2a22      	cmp	r2, #34	; 0x22
   14d3e:	d006      	beq.n	14d4e <at_parse_detect_type+0x3e>
	if (chr == '(') {
   14d40:	2a28      	cmp	r2, #40	; 0x28
   14d42:	d109      	bne.n	14d58 <at_parse_detect_type+0x48>
   14d44:	2201      	movs	r2, #1
   14d46:	4b1f      	ldr	r3, [pc, #124]	; (14dc4 <at_parse_detect_type+0xb4>)
		tmpstr++;
   14d48:	4414      	add	r4, r2
	state = new_state;
   14d4a:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   14d4c:	e7ed      	b.n	14d2a <at_parse_detect_type+0x1a>
	state = new_state;
   14d4e:	2203      	movs	r2, #3
   14d50:	4b1c      	ldr	r3, [pc, #112]	; (14dc4 <at_parse_detect_type+0xb4>)
		tmpstr++;
   14d52:	3401      	adds	r4, #1
	state = new_state;
   14d54:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   14d56:	e7e8      	b.n	14d2a <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   14d58:	4610      	mov	r0, r2
   14d5a:	f011 fe8a 	bl	26a72 <is_lfcr>
   14d5e:	b170      	cbz	r0, 14d7e <at_parse_detect_type+0x6e>
   14d60:	4918      	ldr	r1, [pc, #96]	; (14dc4 <at_parse_detect_type+0xb4>)
   14d62:	7808      	ldrb	r0, [r1, #0]
   14d64:	2804      	cmp	r0, #4
   14d66:	d108      	bne.n	14d7a <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   14d68:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   14d6c:	f011 fe81 	bl	26a72 <is_lfcr>
   14d70:	2800      	cmp	r0, #0
   14d72:	d1f9      	bne.n	14d68 <at_parse_detect_type+0x58>
	state = new_state;
   14d74:	2305      	movs	r3, #5
   14d76:	700b      	strb	r3, [r1, #0]
}
   14d78:	e7d7      	b.n	14d2a <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   14d7a:	2808      	cmp	r0, #8
   14d7c:	d0d5      	beq.n	14d2a <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   14d7e:	3a2c      	subs	r2, #44	; 0x2c
   14d80:	b2d2      	uxtb	r2, r2
   14d82:	2a11      	cmp	r2, #17
   14d84:	d807      	bhi.n	14d96 <at_parse_detect_type+0x86>
   14d86:	4b10      	ldr	r3, [pc, #64]	; (14dc8 <at_parse_detect_type+0xb8>)
   14d88:	fa23 f202 	lsr.w	r2, r3, r2
   14d8c:	07d3      	lsls	r3, r2, #31
   14d8e:	d502      	bpl.n	14d96 <at_parse_detect_type+0x86>
	state = new_state;
   14d90:	2208      	movs	r2, #8
   14d92:	4b0c      	ldr	r3, [pc, #48]	; (14dc4 <at_parse_detect_type+0xb4>)
   14d94:	e013      	b.n	14dbe <at_parse_detect_type+0xae>
		return -1;
   14d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14d9a:	e7c8      	b.n	14d2e <at_parse_detect_type+0x1e>
	state = new_state;
   14d9c:	2302      	movs	r3, #2
   14d9e:	e7c3      	b.n	14d28 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   14da0:	dd03      	ble.n	14daa <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   14da2:	2a2b      	cmp	r2, #43	; 0x2b
   14da4:	d0f7      	beq.n	14d96 <at_parse_detect_type+0x86>
   14da6:	2a25      	cmp	r2, #37	; 0x25
   14da8:	d0f5      	beq.n	14d96 <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   14daa:	4b08      	ldr	r3, [pc, #32]	; (14dcc <at_parse_detect_type+0xbc>)
   14dac:	5cd3      	ldrb	r3, [r2, r3]
   14dae:	0759      	lsls	r1, r3, #29
   14db0:	d403      	bmi.n	14dba <at_parse_detect_type+0xaa>
   14db2:	2a2d      	cmp	r2, #45	; 0x2d
   14db4:	d001      	beq.n	14dba <at_parse_detect_type+0xaa>
   14db6:	2a2b      	cmp	r2, #43	; 0x2b
   14db8:	d1c0      	bne.n	14d3c <at_parse_detect_type+0x2c>
	state = new_state;
   14dba:	2204      	movs	r2, #4
   14dbc:	4b01      	ldr	r3, [pc, #4]	; (14dc4 <at_parse_detect_type+0xb4>)
   14dbe:	701a      	strb	r2, [r3, #0]
}
   14dc0:	e7b3      	b.n	14d2a <at_parse_detect_type+0x1a>
   14dc2:	bf00      	nop
   14dc4:	2002af27 	.word	0x2002af27
   14dc8:	00024001 	.word	0x00024001
   14dcc:	000296c9 	.word	0x000296c9

00014dd0 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   14dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dd4:	4688      	mov	r8, r1
   14dd6:	4616      	mov	r6, r2
   14dd8:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   14dda:	4604      	mov	r4, r0
   14ddc:	2800      	cmp	r0, #0
   14dde:	d07e      	beq.n	14ede <at_parser_max_params_from_str+0x10e>
   14de0:	2a00      	cmp	r2, #0
   14de2:	d07c      	beq.n	14ede <at_parser_max_params_from_str+0x10e>
   14de4:	6853      	ldr	r3, [r2, #4]
   14de6:	2b00      	cmp	r3, #0
   14de8:	d079      	beq.n	14ede <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   14dea:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   14dec:	4610      	mov	r0, r2
   14dee:	f011 fe92 	bl	26b16 <at_params_list_clear>
	const char *str = *at_params_str;
   14df2:	9401      	str	r4, [sp, #4]
	int index = 0;
   14df4:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   14df6:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   14df8:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 14ee8 <at_parser_max_params_from_str+0x118>
	max_params_count = MIN(max_params_count, list->param_count);
   14dfc:	429f      	cmp	r7, r3
   14dfe:	bf28      	it	cs
   14e00:	461f      	movcs	r7, r3
	state = IDLE;
   14e02:	4b38      	ldr	r3, [pc, #224]	; (14ee4 <at_parser_max_params_from_str+0x114>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   14e04:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 14eec <at_parser_max_params_from_str+0x11c>
   14e08:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   14e0a:	9b01      	ldr	r3, [sp, #4]
   14e0c:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   14e0e:	2a00      	cmp	r2, #0
   14e10:	d04b      	beq.n	14eaa <at_parser_max_params_from_str+0xda>
   14e12:	42a7      	cmp	r7, r4
   14e14:	d949      	bls.n	14eaa <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   14e16:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   14e1a:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   14e1c:	0711      	lsls	r1, r2, #28
			str++;
   14e1e:	bf48      	it	mi
   14e20:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   14e22:	4621      	mov	r1, r4
			str++;
   14e24:	bf48      	it	mi
   14e26:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   14e28:	f7ff ff72 	bl	14d10 <at_parse_detect_type>
   14e2c:	1c42      	adds	r2, r0, #1
   14e2e:	d03c      	beq.n	14eaa <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   14e30:	4632      	mov	r2, r6
   14e32:	4621      	mov	r1, r4
   14e34:	a801      	add	r0, sp, #4
   14e36:	f7ff fe5d 	bl	14af4 <at_parse_process_element>
   14e3a:	1c43      	adds	r3, r0, #1
   14e3c:	d035      	beq.n	14eaa <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   14e3e:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   14e40:	781a      	ldrb	r2, [r3, #0]
   14e42:	3a2c      	subs	r2, #44	; 0x2c
   14e44:	b2d2      	uxtb	r2, r2
   14e46:	2a11      	cmp	r2, #17
   14e48:	d81a      	bhi.n	14e80 <at_parser_max_params_from_str+0xb0>
   14e4a:	fa2a f202 	lsr.w	r2, sl, r2
   14e4e:	07d1      	lsls	r1, r2, #31
   14e50:	d516      	bpl.n	14e80 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   14e52:	7858      	ldrb	r0, [r3, #1]
   14e54:	f011 fe0d 	bl	26a72 <is_lfcr>
   14e58:	b178      	cbz	r0, 14e7a <at_parser_max_params_from_str+0xaa>
				index++;
   14e5a:	3401      	adds	r4, #1
				if (index == max_params) {
   14e5c:	42bc      	cmp	r4, r7
   14e5e:	d039      	beq.n	14ed4 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   14e60:	4621      	mov	r1, r4
   14e62:	a801      	add	r0, sp, #4
   14e64:	f7ff ff54 	bl	14d10 <at_parse_detect_type>
   14e68:	1c42      	adds	r2, r0, #1
   14e6a:	d01e      	beq.n	14eaa <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   14e6c:	4632      	mov	r2, r6
   14e6e:	4621      	mov	r1, r4
   14e70:	a801      	add	r0, sp, #4
   14e72:	f7ff fe3f 	bl	14af4 <at_parse_process_element>
   14e76:	1c43      	adds	r3, r0, #1
   14e78:	d017      	beq.n	14eaa <at_parser_max_params_from_str+0xda>
			str++;
   14e7a:	9b01      	ldr	r3, [sp, #4]
   14e7c:	3301      	adds	r3, #1
   14e7e:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   14e80:	9a01      	ldr	r2, [sp, #4]
   14e82:	7810      	ldrb	r0, [r2, #0]
   14e84:	f011 fdf5 	bl	26a72 <is_lfcr>
   14e88:	b1f8      	cbz	r0, 14eca <at_parser_max_params_from_str+0xfa>
   14e8a:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   14e8c:	7811      	ldrb	r1, [r2, #0]
   14e8e:	4693      	mov	fp, r2
   14e90:	4608      	mov	r0, r1
   14e92:	3201      	adds	r2, #1
   14e94:	f011 fded 	bl	26a72 <is_lfcr>
   14e98:	2800      	cmp	r0, #0
   14e9a:	d1f7      	bne.n	14e8c <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   14e9c:	b119      	cbz	r1, 14ea6 <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   14e9e:	292b      	cmp	r1, #43	; 0x2b
   14ea0:	d001      	beq.n	14ea6 <at_parser_max_params_from_str+0xd6>
   14ea2:	2925      	cmp	r1, #37	; 0x25
   14ea4:	d111      	bne.n	14eca <at_parser_max_params_from_str+0xfa>
				str += i;
   14ea6:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   14eaa:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   14eac:	b9a5      	cbnz	r5, 14ed8 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   14eae:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   14eb0:	2a00      	cmp	r2, #0
   14eb2:	bf0c      	ite	eq
   14eb4:	2000      	moveq	r0, #0
   14eb6:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   14eba:	f1b8 0f00 	cmp.w	r8, #0
   14ebe:	d001      	beq.n	14ec4 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   14ec0:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   14ec4:	b003      	add	sp, #12
   14ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   14eca:	3401      	adds	r4, #1
			oversized = true;
   14ecc:	42bc      	cmp	r4, r7
   14ece:	bf08      	it	eq
   14ed0:	2501      	moveq	r5, #1
   14ed2:	e79a      	b.n	14e0a <at_parser_max_params_from_str+0x3a>
					oversized = true;
   14ed4:	4605      	mov	r5, r0
   14ed6:	e7e8      	b.n	14eaa <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   14ed8:	f06f 0006 	mvn.w	r0, #6
   14edc:	e7ed      	b.n	14eba <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   14ede:	f06f 0015 	mvn.w	r0, #21
   14ee2:	e7ef      	b.n	14ec4 <at_parser_max_params_from_str+0xf4>
   14ee4:	2002af27 	.word	0x2002af27
   14ee8:	000296c9 	.word	0x000296c9
   14eec:	00024001 	.word	0x00024001

00014ef0 <parse_psm_cfg>:
	char timer_str[9] = {0};
   14ef0:	2300      	movs	r3, #0
{
   14ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ef4:	b089      	sub	sp, #36	; 0x24
	char timer_str[9] = {0};
   14ef6:	e9cd 3305 	strd	r3, r3, [sp, #20]
   14efa:	f88d 301c 	strb.w	r3, [sp, #28]
	char unit_str[4] = {0};
   14efe:	9303      	str	r3, [sp, #12]
	size_t timer_str_len = sizeof(timer_str) - 1;
   14f00:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   14f02:	2900      	cmp	r1, #0
	err = at_params_string_get(at_params,
   14f04:	bf14      	ite	ne
   14f06:	2108      	movne	r1, #8
   14f08:	2109      	moveq	r1, #9
	size_t timer_str_len = sizeof(timer_str) - 1;
   14f0a:	9304      	str	r3, [sp, #16]
{
   14f0c:	4615      	mov	r5, r2
	err = at_params_string_get(at_params,
   14f0e:	ab04      	add	r3, sp, #16
   14f10:	aa05      	add	r2, sp, #20
{
   14f12:	4606      	mov	r6, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   14f14:	bf14      	ite	ne
   14f16:	2707      	movne	r7, #7
   14f18:	2708      	moveq	r7, #8
	err = at_params_string_get(at_params,
   14f1a:	f011 fecb 	bl	26cb4 <at_params_string_get>
	if (err) {
   14f1e:	4601      	mov	r1, r0
   14f20:	b978      	cbnz	r0, 14f42 <parse_psm_cfg+0x52>
	memcpy(unit_str, timer_str, unit_str_len);
   14f22:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   14f24:	9001      	str	r0, [sp, #4]
	memcpy(unit_str, timer_str, unit_str_len);
   14f26:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   14f2a:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   14f2c:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   14f2e:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   14f30:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   14f34:	f00b f8fc 	bl	20130 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   14f38:	2807      	cmp	r0, #7
   14f3a:	9901      	ldr	r1, [sp, #4]
   14f3c:	d904      	bls.n	14f48 <parse_psm_cfg+0x58>
		return err;
   14f3e:	f06f 0115 	mvn.w	r1, #21
}
   14f42:	4608      	mov	r0, r1
   14f44:	b009      	add	sp, #36	; 0x24
   14f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	timer_unit = t3412_lookup[lut_idx];
   14f48:	4b1a      	ldr	r3, [pc, #104]	; (14fb4 <parse_psm_cfg+0xc4>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   14f4a:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   14f4c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   14f50:	f10d 0017 	add.w	r0, sp, #23
   14f54:	f00b f8ec 	bl	20130 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   14f58:	b32c      	cbz	r4, 14fa6 <parse_psm_cfg+0xb6>
   14f5a:	4344      	muls	r4, r0
	err = at_params_string_get(at_params,
   14f5c:	4639      	mov	r1, r7
   14f5e:	4630      	mov	r0, r6
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   14f60:	602c      	str	r4, [r5, #0]
	err = at_params_string_get(at_params,
   14f62:	ab04      	add	r3, sp, #16
   14f64:	aa05      	add	r2, sp, #20
   14f66:	f011 fea5 	bl	26cb4 <at_params_string_get>
	if (err) {
   14f6a:	4601      	mov	r1, r0
   14f6c:	2800      	cmp	r0, #0
   14f6e:	d1e8      	bne.n	14f42 <parse_psm_cfg+0x52>
	memcpy(unit_str, timer_str, unit_str_len);
   14f70:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   14f72:	9001      	str	r0, [sp, #4]
	memcpy(unit_str, timer_str, unit_str_len);
   14f74:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   14f78:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   14f7a:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   14f7c:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   14f7e:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   14f82:	f00b f8d5 	bl	20130 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   14f86:	2807      	cmp	r0, #7
   14f88:	d8d9      	bhi.n	14f3e <parse_psm_cfg+0x4e>
	timer_unit = t3324_lookup[lut_idx];
   14f8a:	4b0b      	ldr	r3, [pc, #44]	; (14fb8 <parse_psm_cfg+0xc8>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   14f8c:	9901      	ldr	r1, [sp, #4]
	timer_unit = t3324_lookup[lut_idx];
   14f8e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   14f92:	2202      	movs	r2, #2
   14f94:	f10d 0017 	add.w	r0, sp, #23
   14f98:	f00b f8ca 	bl	20130 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   14f9c:	9901      	ldr	r1, [sp, #4]
   14f9e:	b12c      	cbz	r4, 14fac <parse_psm_cfg+0xbc>
   14fa0:	4360      	muls	r0, r4
   14fa2:	6068      	str	r0, [r5, #4]
	return 0;
   14fa4:	e7cd      	b.n	14f42 <parse_psm_cfg+0x52>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   14fa6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14faa:	e7d7      	b.n	14f5c <parse_psm_cfg+0x6c>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   14fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14fb0:	e7f7      	b.n	14fa2 <parse_psm_cfg+0xb2>
   14fb2:	bf00      	nop
   14fb4:	00028aec 	.word	0x00028aec
   14fb8:	00028acc 	.word	0x00028acc

00014fbc <lte_lc_offline>:
{
   14fbc:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   14fbe:	2300      	movs	r3, #0
   14fc0:	4804      	ldr	r0, [pc, #16]	; (14fd4 <lte_lc_offline+0x18>)
   14fc2:	461a      	mov	r2, r3
   14fc4:	4619      	mov	r1, r3
   14fc6:	f7ff fb71 	bl	146ac <at_cmd_write>
   14fca:	2800      	cmp	r0, #0
}
   14fcc:	bf18      	it	ne
   14fce:	f06f 0004 	mvnne.w	r0, #4
   14fd2:	bd08      	pop	{r3, pc}
   14fd4:	00029443 	.word	0x00029443

00014fd8 <lte_lc_power_off>:
{
   14fd8:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   14fda:	2300      	movs	r3, #0
   14fdc:	4804      	ldr	r0, [pc, #16]	; (14ff0 <lte_lc_power_off+0x18>)
   14fde:	461a      	mov	r2, r3
   14fe0:	4619      	mov	r1, r3
   14fe2:	f7ff fb63 	bl	146ac <at_cmd_write>
   14fe6:	2800      	cmp	r0, #0
}
   14fe8:	bf18      	it	ne
   14fea:	f06f 0004 	mvnne.w	r0, #4
   14fee:	bd08      	pop	{r3, pc}
   14ff0:	0002944d 	.word	0x0002944d

00014ff4 <lte_lc_normal>:
{
   14ff4:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   14ff6:	2300      	movs	r3, #0
   14ff8:	4804      	ldr	r0, [pc, #16]	; (1500c <lte_lc_normal+0x18>)
   14ffa:	461a      	mov	r2, r3
   14ffc:	4619      	mov	r1, r3
   14ffe:	f7ff fb55 	bl	146ac <at_cmd_write>
   15002:	2800      	cmp	r0, #0
}
   15004:	bf18      	it	ne
   15006:	f06f 0004 	mvnne.w	r0, #4
   1500a:	bd08      	pop	{r3, pc}
   1500c:	00029439 	.word	0x00029439

00015010 <lte_lc_psm_req>:
{
   15010:	b500      	push	{lr}
	if (enable) {
   15012:	4603      	mov	r3, r0
{
   15014:	b08d      	sub	sp, #52	; 0x34
	if (enable) {
   15016:	b1a0      	cbz	r0, 15042 <lte_lc_psm_req+0x32>
		snprintf(psm_req, sizeof(psm_req),
   15018:	4b0c      	ldr	r3, [pc, #48]	; (1504c <lte_lc_psm_req+0x3c>)
   1501a:	2128      	movs	r1, #40	; 0x28
   1501c:	4a0c      	ldr	r2, [pc, #48]	; (15050 <lte_lc_psm_req+0x40>)
   1501e:	9300      	str	r3, [sp, #0]
   15020:	a802      	add	r0, sp, #8
   15022:	4b0c      	ldr	r3, [pc, #48]	; (15054 <lte_lc_psm_req+0x44>)
   15024:	f00a fee2 	bl	1fdec <sniprintf>
		err = at_cmd_write(psm_req, NULL, 0, NULL);
   15028:	2300      	movs	r3, #0
   1502a:	461a      	mov	r2, r3
   1502c:	4619      	mov	r1, r3
   1502e:	a802      	add	r0, sp, #8
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   15030:	f7ff fb3c 	bl	146ac <at_cmd_write>
		return -EIO;
   15034:	2800      	cmp	r0, #0
}
   15036:	bf18      	it	ne
   15038:	f06f 0004 	mvnne.w	r0, #4
   1503c:	b00d      	add	sp, #52	; 0x34
   1503e:	f85d fb04 	ldr.w	pc, [sp], #4
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   15042:	4602      	mov	r2, r0
   15044:	4601      	mov	r1, r0
   15046:	4804      	ldr	r0, [pc, #16]	; (15058 <lte_lc_psm_req+0x48>)
   15048:	e7f2      	b.n	15030 <lte_lc_psm_req+0x20>
   1504a:	bf00      	nop
   1504c:	200207a8 	.word	0x200207a8
   15050:	00029376 	.word	0x00029376
   15054:	200207b1 	.word	0x200207b1
   15058:	00029457 	.word	0x00029457

0001505c <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   1505c:	b500      	push	{lr}
   1505e:	b08f      	sub	sp, #60	; 0x3c
	int err, len;
	char cmd[50];

	switch (mode) {
   15060:	b190      	cbz	r0, 15088 <lte_lc_system_mode_set+0x2c>
   15062:	1e43      	subs	r3, r0, #1
   15064:	2b04      	cmp	r3, #4
   15066:	d812      	bhi.n	1508e <lte_lc_system_mode_set+0x32>
	default:
		LOG_ERR("Invalid system mode requested");
		return -EINVAL;
	}

	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   15068:	4b0c      	ldr	r3, [pc, #48]	; (1509c <lte_lc_system_mode_set+0x40>)
   1506a:	2132      	movs	r1, #50	; 0x32
   1506c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15070:	4a0b      	ldr	r2, [pc, #44]	; (150a0 <lte_lc_system_mode_set+0x44>)
   15072:	a801      	add	r0, sp, #4
   15074:	f00d f92d 	bl	222d2 <snprintk>
		       system_mode_params[mode]);
	if (len < 0) {
   15078:	2800      	cmp	r0, #0
   1507a:	db0b      	blt.n	15094 <lte_lc_system_mode_set+0x38>
		return -EFAULT;
	}

	LOG_DBG("Sending AT command to set system mode: %s", log_strdup(cmd));

	err = at_cmd_write(cmd, NULL, 0, NULL);
   1507c:	2300      	movs	r3, #0
   1507e:	a801      	add	r0, sp, #4
   15080:	461a      	mov	r2, r3
   15082:	4619      	mov	r1, r3
   15084:	f7ff fb12 	bl	146ac <at_cmd_write>
	if (err) {
		LOG_ERR("Could not send AT command, error: %d", err);
	}

	return err;
}
   15088:	b00f      	add	sp, #60	; 0x3c
   1508a:	f85d fb04 	ldr.w	pc, [sp], #4
	switch (mode) {
   1508e:	f06f 0015 	mvn.w	r0, #21
   15092:	e7f9      	b.n	15088 <lte_lc_system_mode_set+0x2c>
		return -EFAULT;
   15094:	f06f 000d 	mvn.w	r0, #13
   15098:	e7f6      	b.n	15088 <lte_lc_system_mode_set+0x2c>
   1509a:	bf00      	nop
   1509c:	00028ab4 	.word	0x00028ab4
   150a0:	00029394 	.word	0x00029394

000150a4 <w_lte_lc_init>:
{
   150a4:	b530      	push	{r4, r5, lr}
	if (is_initialized) {
   150a6:	4d17      	ldr	r5, [pc, #92]	; (15104 <w_lte_lc_init+0x60>)
{
   150a8:	b08f      	sub	sp, #60	; 0x3c
	if (is_initialized) {
   150aa:	7828      	ldrb	r0, [r5, #0]
   150ac:	bb18      	cbnz	r0, 150f6 <w_lte_lc_init+0x52>
	err = at_notif_register_handler(NULL, at_handler);
   150ae:	4916      	ldr	r1, [pc, #88]	; (15108 <w_lte_lc_init+0x64>)
   150b0:	f7ff fb86 	bl	147c0 <at_notif_register_handler>
	if (err) {
   150b4:	4604      	mov	r4, r0
   150b6:	b9d8      	cbnz	r0, 150f0 <w_lte_lc_init+0x4c>
	err = lte_lc_system_mode_set(sys_mode_preferred);
   150b8:	2004      	movs	r0, #4
   150ba:	f7ff ffcf 	bl	1505c <lte_lc_system_mode_set>
	if (err) {
   150be:	4604      	mov	r4, r0
   150c0:	b9b0      	cbnz	r0, 150f0 <w_lte_lc_init+0x4c>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   150c2:	4603      	mov	r3, r0
   150c4:	4602      	mov	r2, r0
   150c6:	4601      	mov	r1, r0
   150c8:	4810      	ldr	r0, [pc, #64]	; (1510c <w_lte_lc_init+0x68>)
   150ca:	f7ff faef 	bl	146ac <at_cmd_write>
   150ce:	4604      	mov	r4, r0
   150d0:	b9a0      	cbnz	r0, 150fc <w_lte_lc_init+0x58>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   150d2:	4603      	mov	r3, r0
   150d4:	4602      	mov	r2, r0
   150d6:	4601      	mov	r1, r0
   150d8:	480d      	ldr	r0, [pc, #52]	; (15110 <w_lte_lc_init+0x6c>)
   150da:	f7ff fae7 	bl	146ac <at_cmd_write>
	if (err) {
   150de:	b128      	cbz	r0, 150ec <w_lte_lc_init+0x48>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   150e0:	4623      	mov	r3, r4
   150e2:	2232      	movs	r2, #50	; 0x32
   150e4:	480b      	ldr	r0, [pc, #44]	; (15114 <w_lte_lc_init+0x70>)
   150e6:	a901      	add	r1, sp, #4
   150e8:	f7ff fae0 	bl	146ac <at_cmd_write>
	is_initialized = true;
   150ec:	2301      	movs	r3, #1
   150ee:	702b      	strb	r3, [r5, #0]
}
   150f0:	4620      	mov	r0, r4
   150f2:	b00f      	add	sp, #60	; 0x3c
   150f4:	bd30      	pop	{r4, r5, pc}
		return -EALREADY;
   150f6:	f06f 0477 	mvn.w	r4, #119	; 0x77
   150fa:	e7f9      	b.n	150f0 <w_lte_lc_init+0x4c>
		return -EIO;
   150fc:	f06f 0404 	mvn.w	r4, #4
   15100:	e7f6      	b.n	150f0 <w_lte_lc_init+0x4c>
   15102:	bf00      	nop
   15104:	2002af28 	.word	0x2002af28
   15108:	0000d111 	.word	0x0000d111
   1510c:	00029423 	.word	0x00029423
   15110:	0002942e 	.word	0x0002942e
   15114:	000293a7 	.word	0x000293a7

00015118 <w_lte_lc_connect>:
	if (!is_initialized) {
   15118:	4b16      	ldr	r3, [pc, #88]	; (15174 <w_lte_lc_connect+0x5c>)
{
   1511a:	b570      	push	{r4, r5, r6, lr}
	if (!is_initialized) {
   1511c:	781b      	ldrb	r3, [r3, #0]
{
   1511e:	4604      	mov	r4, r0
	if (!is_initialized) {
   15120:	b30b      	cbz	r3, 15166 <w_lte_lc_connect+0x4e>
	return z_impl_k_sem_init(sem, initial_count, limit);
   15122:	2201      	movs	r2, #1
   15124:	2100      	movs	r1, #0
   15126:	4814      	ldr	r0, [pc, #80]	; (15178 <w_lte_lc_connect+0x60>)
   15128:	f012 f9cf 	bl	274ca <z_impl_k_sem_init>
   1512c:	2502      	movs	r5, #2
	enum lte_lc_system_mode current_network_mode = sys_mode_preferred;
   1512e:	2304      	movs	r3, #4
	return z_impl_k_sem_take(sem, timeout);
   15130:	4e11      	ldr	r6, [pc, #68]	; (15178 <w_lte_lc_connect+0x60>)
		err = lte_lc_system_mode_set(current_network_mode);
   15132:	4618      	mov	r0, r3
   15134:	f7ff ff92 	bl	1505c <lte_lc_system_mode_set>
		if (err) {
   15138:	b9a0      	cbnz	r0, 15164 <w_lte_lc_connect+0x4c>
		err = lte_lc_normal();
   1513a:	f7ff ff5b 	bl	14ff4 <lte_lc_normal>
		if (err || !blocking) {
   1513e:	b988      	cbnz	r0, 15164 <w_lte_lc_connect+0x4c>
   15140:	b184      	cbz	r4, 15164 <w_lte_lc_connect+0x4c>
   15142:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   15146:	2300      	movs	r3, #0
   15148:	4630      	mov	r0, r6
   1514a:	f009 fc9b 	bl	1ea84 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   1514e:	f110 0f0b 	cmn.w	r0, #11
   15152:	d107      	bne.n	15164 <w_lte_lc_connect+0x4c>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   15154:	2d01      	cmp	r5, #1
   15156:	d009      	beq.n	1516c <w_lte_lc_connect+0x54>
				err = lte_lc_offline();
   15158:	f7ff ff30 	bl	14fbc <lte_lc_offline>
				if (err) {
   1515c:	2501      	movs	r5, #1
				current_network_mode = sys_mode_fallback;
   1515e:	2305      	movs	r3, #5
				if (err) {
   15160:	2800      	cmp	r0, #0
   15162:	d0e6      	beq.n	15132 <w_lte_lc_connect+0x1a>
}
   15164:	bd70      	pop	{r4, r5, r6, pc}
		return -EPERM;
   15166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1516a:	e7fb      	b.n	15164 <w_lte_lc_connect+0x4c>
				err = -ETIMEDOUT;
   1516c:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} while (retry);
   15170:	e7f8      	b.n	15164 <w_lte_lc_connect+0x4c>
   15172:	bf00      	nop
   15174:	2002af28 	.word	0x2002af28
   15178:	2002308c 	.word	0x2002308c

0001517c <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   1517c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   15180:	2400      	movs	r4, #0
{
   15182:	b090      	sub	sp, #64	; 0x40
   15184:	4605      	mov	r5, r0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   15186:	221a      	movs	r2, #26
   15188:	4621      	mov	r1, r4
   1518a:	a809      	add	r0, sp, #36	; 0x24
	struct at_param_list resp_list = {0};
   1518c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   15190:	9408      	str	r4, [sp, #32]
   15192:	f012 fc12 	bl	279ba <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   15196:	230d      	movs	r3, #13
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   15198:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1519c:	9406      	str	r4, [sp, #24]
   1519e:	f88d 401c 	strb.w	r4, [sp, #28]
	size_t response_prefix_len = sizeof(response_prefix);
   151a2:	9300      	str	r3, [sp, #0]

	if (mode == NULL) {
   151a4:	2d00      	cmp	r5, #0
   151a6:	d05d      	beq.n	15264 <lte_lc_system_mode_get+0xe8>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   151a8:	4623      	mov	r3, r4
   151aa:	221e      	movs	r2, #30
   151ac:	482f      	ldr	r0, [pc, #188]	; (1526c <lte_lc_system_mode_get+0xf0>)
   151ae:	a908      	add	r1, sp, #32
   151b0:	f7ff fa7c 	bl	146ac <at_cmd_write>
			   NULL);
	if (err) {
   151b4:	4604      	mov	r4, r0
   151b6:	2800      	cmp	r0, #0
   151b8:	d13f      	bne.n	1523a <lte_lc_system_mode_get+0xbe>
		LOG_ERR("Could not send AT command");
		return err;
	}

	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   151ba:	2105      	movs	r1, #5
   151bc:	a802      	add	r0, sp, #8
   151be:	f011 fc97 	bl	26af0 <at_params_list_init>
	if (err) {
   151c2:	4604      	mov	r4, r0
   151c4:	2800      	cmp	r0, #0
   151c6:	d138      	bne.n	1523a <lte_lc_system_mode_get+0xbe>
		LOG_ERR("Could init AT params list, error: %d", err);
		return err;
	}

	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   151c8:	4601      	mov	r1, r0
   151ca:	2305      	movs	r3, #5
   151cc:	aa02      	add	r2, sp, #8
   151ce:	a808      	add	r0, sp, #32
   151d0:	f7ff fdfe 	bl	14dd0 <at_parser_max_params_from_str>
					    AT_XSYSTEMMODE_PARAMS_COUNT);
	if (err) {
   151d4:	4604      	mov	r4, r0
   151d6:	bb68      	cbnz	r0, 15234 <lte_lc_system_mode_get+0xb8>
		LOG_ERR("Could not parse AT response, error: %d", err);
		goto clean_exit;
	}

	/* Check if AT command response starts with %XSYSTEMMODE */
	err = at_params_string_get(&resp_list,
   151d8:	4601      	mov	r1, r0
   151da:	466b      	mov	r3, sp
   151dc:	aa04      	add	r2, sp, #16
   151de:	a802      	add	r0, sp, #8
   151e0:	f011 fd68 	bl	26cb4 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
   151e4:	4604      	mov	r4, r0
   151e6:	bb28      	cbnz	r0, 15234 <lte_lc_system_mode_get+0xb8>
	if ((response == NULL) || (check == NULL)) {
   151e8:	4a21      	ldr	r2, [pc, #132]	; (15270 <lte_lc_system_mode_get+0xf4>)
   151ea:	9900      	ldr	r1, [sp, #0]
   151ec:	a804      	add	r0, sp, #16
   151ee:	f011 fd99 	bl	26d24 <response_is_valid.part.0>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
   151f2:	b388      	cbz	r0, 15258 <lte_lc_system_mode_get+0xdc>
	}

	/* We skip the first parameter, as that's the response prefix,
	 * "%XSYSTEMMODE:" in this case."
	 */
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   151f4:	2601      	movs	r6, #1
	int err, bitmask = 0;
   151f6:	4627      	mov	r7, r4
		if (err) {
			LOG_ERR("Could not parse mode parameter, err: %d", err);
			goto clean_exit;
		}

		bitmask = param ? bitmask | BIT(i) : bitmask;
   151f8:	46b0      	mov	r8, r6
		err = at_params_int_get(&resp_list, i, &param);
   151fa:	4631      	mov	r1, r6
   151fc:	aa01      	add	r2, sp, #4
   151fe:	a802      	add	r0, sp, #8
   15200:	f011 fd45 	bl	26c8e <at_params_int_get>
		if (err) {
   15204:	4604      	mov	r4, r0
   15206:	b9a8      	cbnz	r0, 15234 <lte_lc_system_mode_get+0xb8>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   15208:	9b01      	ldr	r3, [sp, #4]
   1520a:	b113      	cbz	r3, 15212 <lte_lc_system_mode_get+0x96>
   1520c:	fa08 f306 	lsl.w	r3, r8, r6
   15210:	431f      	orrs	r7, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   15212:	3601      	adds	r6, #1
   15214:	2e05      	cmp	r6, #5
   15216:	d1f0      	bne.n	151fa <lte_lc_system_mode_get+0x7e>
	}

	/* When checking the bitmask, we need to add 1 to the indices,
	 * as the response prefix is also counted as a parameter.
	 */
	switch (bitmask) {
   15218:	2f0c      	cmp	r7, #12
   1521a:	d820      	bhi.n	1525e <lte_lc_system_mode_get+0xe2>
   1521c:	e8df f007 	tbb	[pc, r7]
   15220:	1f111f07 	.word	0x1f111f07
   15224:	1f1f1f14 	.word	0x1f1f1f14
   15228:	1f181f16 	.word	0x1f181f16
   1522c:	1a          	.byte	0x1a
   1522d:	00          	.byte	0x00
	case 0:
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   1522e:	2300      	movs	r3, #0
		break;
   15230:	463c      	mov	r4, r7
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   15232:	702b      	strb	r3, [r5, #0]
		err = -EFAULT;
		break;
	}

clean_exit:
	at_params_list_free(&resp_list);
   15234:	a802      	add	r0, sp, #8
   15236:	f011 fc8c 	bl	26b52 <at_params_list_free>

	return err;
}
   1523a:	4620      	mov	r0, r4
   1523c:	b010      	add	sp, #64	; 0x40
   1523e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   15242:	2301      	movs	r3, #1
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   15244:	702b      	strb	r3, [r5, #0]
		break;
   15246:	e7f5      	b.n	15234 <lte_lc_system_mode_get+0xb8>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   15248:	2302      	movs	r3, #2
   1524a:	e7fb      	b.n	15244 <lte_lc_system_mode_get+0xc8>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   1524c:	2303      	movs	r3, #3
   1524e:	e7f9      	b.n	15244 <lte_lc_system_mode_get+0xc8>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   15250:	2304      	movs	r3, #4
   15252:	e7f7      	b.n	15244 <lte_lc_system_mode_get+0xc8>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   15254:	2305      	movs	r3, #5
   15256:	e7f5      	b.n	15244 <lte_lc_system_mode_get+0xc8>
		err = -EIO;
   15258:	f06f 0404 	mvn.w	r4, #4
   1525c:	e7ea      	b.n	15234 <lte_lc_system_mode_get+0xb8>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   1525e:	f06f 040d 	mvn.w	r4, #13
   15262:	e7e7      	b.n	15234 <lte_lc_system_mode_get+0xb8>
		return -EINVAL;
   15264:	f06f 0415 	mvn.w	r4, #21
   15268:	e7e7      	b.n	1523a <lte_lc_system_mode_get+0xbe>
   1526a:	bf00      	nop
   1526c:	000293af 	.word	0x000293af
   15270:	000293bf 	.word	0x000293bf

00015274 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   15274:	b530      	push	{r4, r5, lr}
	int err, resp_mode;
	struct at_param_list resp_list = {0};
   15276:	2400      	movs	r4, #0
{
   15278:	b08d      	sub	sp, #52	; 0x34
   1527a:	4605      	mov	r5, r0
	char response[AT_CFUN_RESPONSE_MAX_LEN] = {0};
   1527c:	2210      	movs	r2, #16
   1527e:	4621      	mov	r1, r4
   15280:	a808      	add	r0, sp, #32
	struct at_param_list resp_list = {0};
   15282:	e9cd 4405 	strd	r4, r4, [sp, #20]
	char response[AT_CFUN_RESPONSE_MAX_LEN] = {0};
   15286:	9407      	str	r4, [sp, #28]
   15288:	f012 fb97 	bl	279ba <memset>
	char response_prefix[sizeof(AT_CFUN_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   1528c:	2306      	movs	r3, #6
	char response_prefix[sizeof(AT_CFUN_RESPONSE_PREFIX)] = {0};
   1528e:	9403      	str	r4, [sp, #12]
   15290:	f8ad 4010 	strh.w	r4, [sp, #16]
	size_t response_prefix_len = sizeof(response_prefix);
   15294:	9302      	str	r3, [sp, #8]

	if (mode == NULL) {
   15296:	2d00      	cmp	r5, #0
   15298:	d035      	beq.n	15306 <lte_lc_func_mode_get+0x92>
		return -EINVAL;
	}

	err = at_cmd_write(AT_CFUN_READ, response, sizeof(response), NULL);
   1529a:	4623      	mov	r3, r4
   1529c:	2214      	movs	r2, #20
   1529e:	481b      	ldr	r0, [pc, #108]	; (1530c <lte_lc_func_mode_get+0x98>)
   152a0:	a907      	add	r1, sp, #28
   152a2:	f7ff fa03 	bl	146ac <at_cmd_write>
	if (err) {
   152a6:	4604      	mov	r4, r0
   152a8:	bb38      	cbnz	r0, 152fa <lte_lc_func_mode_get+0x86>
		LOG_ERR("Could not send AT command");
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CFUN_PARAMS_COUNT);
   152aa:	2102      	movs	r1, #2
   152ac:	a805      	add	r0, sp, #20
   152ae:	f011 fc1f 	bl	26af0 <at_params_list_init>
	if (err) {
   152b2:	4604      	mov	r4, r0
   152b4:	bb08      	cbnz	r0, 152fa <lte_lc_func_mode_get+0x86>
		LOG_ERR("Could init AT params list, error: %d", err);
		return err;
	}

	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   152b6:	4601      	mov	r1, r0
   152b8:	2302      	movs	r3, #2
   152ba:	aa05      	add	r2, sp, #20
   152bc:	a807      	add	r0, sp, #28
   152be:	f7ff fd87 	bl	14dd0 <at_parser_max_params_from_str>
					    AT_CFUN_PARAMS_COUNT);
	if (err) {
   152c2:	4604      	mov	r4, r0
   152c4:	b9b0      	cbnz	r0, 152f4 <lte_lc_func_mode_get+0x80>
		LOG_ERR("Could not parse AT response, error: %d", err);
		goto clean_exit;
	}

	/* Check if AT command response starts with +CFUN */
	err = at_params_string_get(&resp_list,
   152c6:	4601      	mov	r1, r0
   152c8:	ab02      	add	r3, sp, #8
   152ca:	aa03      	add	r2, sp, #12
   152cc:	a805      	add	r0, sp, #20
   152ce:	f011 fcf1 	bl	26cb4 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
   152d2:	4604      	mov	r4, r0
   152d4:	b970      	cbnz	r0, 152f4 <lte_lc_func_mode_get+0x80>
	if ((response == NULL) || (check == NULL)) {
   152d6:	4a0e      	ldr	r2, [pc, #56]	; (15310 <lte_lc_func_mode_get+0x9c>)
   152d8:	9902      	ldr	r1, [sp, #8]
   152da:	a803      	add	r0, sp, #12
   152dc:	f011 fd22 	bl	26d24 <response_is_valid.part.0>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
   152e0:	b170      	cbz	r0, 15300 <lte_lc_func_mode_get+0x8c>
		LOG_ERR("Invalid CFUN response");
		err = -EIO;
		goto clean_exit;
	}

	err = at_params_int_get(&resp_list, AT_CFUN_MODE_INDEX, &resp_mode);
   152e2:	2101      	movs	r1, #1
   152e4:	aa01      	add	r2, sp, #4
   152e6:	a805      	add	r0, sp, #20
   152e8:	f011 fcd1 	bl	26c8e <at_params_int_get>
	if (err) {
   152ec:	4604      	mov	r4, r0
   152ee:	b908      	cbnz	r0, 152f4 <lte_lc_func_mode_get+0x80>
		LOG_ERR("Could not parse mode parameter, err: %d", err);
		goto clean_exit;
	}

	*mode = resp_mode;
   152f0:	9b01      	ldr	r3, [sp, #4]
   152f2:	702b      	strb	r3, [r5, #0]

clean_exit:
	at_params_list_free(&resp_list);
   152f4:	a805      	add	r0, sp, #20
   152f6:	f011 fc2c 	bl	26b52 <at_params_list_free>

	return err;
}
   152fa:	4620      	mov	r0, r4
   152fc:	b00d      	add	sp, #52	; 0x34
   152fe:	bd30      	pop	{r4, r5, pc}
		err = -EIO;
   15300:	f06f 0404 	mvn.w	r4, #4
   15304:	e7f6      	b.n	152f4 <lte_lc_func_mode_get+0x80>
		return -EINVAL;
   15306:	f06f 0415 	mvn.w	r4, #21
   1530a:	e7f6      	b.n	152fa <lte_lc_func_mode_get+0x86>
   1530c:	000293cc 	.word	0x000293cc
   15310:	000293d5 	.word	0x000293d5

00015314 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   15314:	b510      	push	{r4, lr}
   15316:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	u32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   15318:	4a09      	ldr	r2, [pc, #36]	; (15340 <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   1531a:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   1531c:	7823      	ldrb	r3, [r4, #0]
   1531e:	2100      	movs	r1, #0
   15320:	f7ff fd56 	bl	14dd0 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   15324:	f110 0f0b 	cmn.w	r0, #11
   15328:	d000      	beq.n	1532c <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   1532a:	b940      	cbnz	r0, 1533e <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   1532c:	4804      	ldr	r0, [pc, #16]	; (15340 <modem_info_parse.isra.0+0x2c>)
   1532e:	f011 fce4 	bl	26cfa <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   15332:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   15334:	4298      	cmp	r0, r3
   15336:	bf94      	ite	ls
   15338:	2000      	movls	r0, #0
   1533a:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   1533e:	bd10      	pop	{r4, pc}
   15340:	200230b4 	.word	0x200230b4

00015344 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(void *context, const char *response)
{
   15344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   15346:	460c      	mov	r4, r1
	ARG_UNUSED(context);

	u16_t param_value;
	int err;

	if (!is_cesq_notification(response, strlen(response))) {
   15348:	4608      	mov	r0, r1
   1534a:	f7f7 fdf5 	bl	cf38 <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   1534e:	4620      	mov	r0, r4
   15350:	490f      	ldr	r1, [pc, #60]	; (15390 <modem_info_rsrp_subscribe_handler+0x4c>)
   15352:	f012 fcf8 	bl	27d46 <strstr>
	if (!is_cesq_notification(response, strlen(response))) {
   15356:	b1c0      	cbz	r0, 1538a <modem_info_rsrp_subscribe_handler+0x46>
		return;
	}

	const struct modem_info_data rsrp_notify_data = {
   15358:	4b0e      	ldr	r3, [pc, #56]	; (15394 <modem_info_rsrp_subscribe_handler+0x50>)
   1535a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1535e:	ab04      	add	r3, sp, #16
   15360:	e903 0007 	stmdb	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_SHORT,
	};

	err = modem_info_parse(&rsrp_notify_data, response);
   15364:	4621      	mov	r1, r4
   15366:	f10d 000d 	add.w	r0, sp, #13
   1536a:	f7ff ffd3 	bl	15314 <modem_info_parse.isra.0>
	if (err != 0) {
   1536e:	b960      	cbnz	r0, 1538a <modem_info_rsrp_subscribe_handler+0x46>
		LOG_ERR("modem_info_parse failed to parse "
			"CESQ notification, %d", err);
		return;
	}

	err = at_params_short_get(&m_param_list,
   15370:	f89d 100c 	ldrb.w	r1, [sp, #12]
   15374:	4808      	ldr	r0, [pc, #32]	; (15398 <modem_info_rsrp_subscribe_handler+0x54>)
   15376:	f10d 0202 	add.w	r2, sp, #2
   1537a:	f011 fc76 	bl	26c6a <at_params_short_get>
				  rsrp_notify_data.param_index,
				  &param_value);
	if (err != 0) {
   1537e:	b920      	cbnz	r0, 1538a <modem_info_rsrp_subscribe_handler+0x46>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
		return;
	}

	modem_info_rsrp_cb(param_value);
   15380:	4b06      	ldr	r3, [pc, #24]	; (1539c <modem_info_rsrp_subscribe_handler+0x58>)
   15382:	f89d 0002 	ldrb.w	r0, [sp, #2]
   15386:	681b      	ldr	r3, [r3, #0]
   15388:	4798      	blx	r3
}
   1538a:	b004      	add	sp, #16
   1538c:	bd10      	pop	{r4, pc}
   1538e:	bf00      	nop
   15390:	000295a7 	.word	0x000295a7
   15394:	000287bc 	.word	0x000287bc
   15398:	200230b4 	.word	0x200230b4
   1539c:	200230bc 	.word	0x200230bc

000153a0 <modem_info_string_get>:
{
   153a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   153a4:	2500      	movs	r5, #0
{
   153a6:	460e      	mov	r6, r1
   153a8:	b0a5      	sub	sp, #148	; 0x94
   153aa:	4680      	mov	r8, r0
   153ac:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   153ae:	4629      	mov	r1, r5
   153b0:	227c      	movs	r2, #124	; 0x7c
   153b2:	a805      	add	r0, sp, #20
   153b4:	9504      	str	r5, [sp, #16]
   153b6:	f012 fb00 	bl	279ba <memset>
	size_t len = 0;
   153ba:	9503      	str	r5, [sp, #12]
	if ((buf == NULL) || (buf_size == 0)) {
   153bc:	2e00      	cmp	r6, #0
   153be:	f000 80ca 	beq.w	15556 <modem_info_string_get+0x1b6>
   153c2:	f1b9 0f00 	cmp.w	r9, #0
   153c6:	f000 80c6 	beq.w	15556 <modem_info_string_get+0x1b6>
	err = at_cmd_write(modem_data[info]->cmd,
   153ca:	4b67      	ldr	r3, [pc, #412]	; (15568 <modem_info_string_get+0x1c8>)
   153cc:	2280      	movs	r2, #128	; 0x80
   153ce:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   153d2:	a904      	add	r1, sp, #16
   153d4:	462b      	mov	r3, r5
   153d6:	f8da 0000 	ldr.w	r0, [sl]
   153da:	f7ff f967 	bl	146ac <at_cmd_write>
	if (info == MODEM_INFO_SUP_BAND) {
   153de:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   153e2:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   153e4:	d10a      	bne.n	153fc <modem_info_string_get+0x5c>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   153e6:	4630      	mov	r0, r6
   153e8:	f10d 0119 	add.w	r1, sp, #25
   153ec:	f012 fc69 	bl	27cc2 <strcpy>
		return strlen(buf);
   153f0:	4630      	mov	r0, r6
   153f2:	f7f7 fda1 	bl	cf38 <strlen>
}
   153f6:	b025      	add	sp, #148	; 0x94
   153f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   153fc:	f1b8 0f09 	cmp.w	r8, #9
   15400:	d044      	beq.n	1548c <modem_info_string_get+0xec>
	if (err != 0) {
   15402:	2c00      	cmp	r4, #0
   15404:	f040 80aa 	bne.w	1555c <modem_info_string_get+0x1bc>
	size_t ip_str_len = 0;
   15408:	4627      	mov	r7, r4
		err = at_params_string_get(&m_param_list,
   1540a:	f8df b170 	ldr.w	fp, [pc, #368]	; 1557c <modem_info_string_get+0x1dc>
	size_t cmd_rsp_idx = 0;
   1540e:	9400      	str	r4, [sp, #0]
	if (info == MODEM_INFO_IP_ADDRESS) {
   15410:	9a00      	ldr	r2, [sp, #0]
   15412:	ab04      	add	r3, sp, #16
   15414:	f1b8 0f09 	cmp.w	r8, #9
   15418:	4413      	add	r3, r2
   1541a:	d10f      	bne.n	1543c <modem_info_string_get+0x9c>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   1541c:	4618      	mov	r0, r3
   1541e:	4953      	ldr	r1, [pc, #332]	; (1556c <modem_info_string_get+0x1cc>)
   15420:	9301      	str	r3, [sp, #4]
   15422:	f012 fc90 	bl	27d46 <strstr>
		if (ip_str_end == NULL) {
   15426:	2800      	cmp	r0, #0
   15428:	f000 809b 	beq.w	15562 <modem_info_string_get+0x1c2>
		recv_buf[++ip_str_len] = 0;
   1542c:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   1542e:	9b01      	ldr	r3, [sp, #4]
		recv_buf[++ip_str_len] = 0;
   15430:	aa24      	add	r2, sp, #144	; 0x90
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   15432:	1ac0      	subs	r0, r0, r3
		recv_buf[++ip_str_len] = 0;
   15434:	1c47      	adds	r7, r0, #1
   15436:	443a      	add	r2, r7
   15438:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   1543c:	4619      	mov	r1, r3
   1543e:	f10a 0009 	add.w	r0, sl, #9
   15442:	f7ff ff67 	bl	15314 <modem_info_parse.isra.0>
	if (err) {
   15446:	2800      	cmp	r0, #0
   15448:	d1d5      	bne.n	153f6 <modem_info_string_get+0x56>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   1544a:	f89a 300a 	ldrb.w	r3, [sl, #10]
   1544e:	2b01      	cmp	r3, #1
   15450:	d11f      	bne.n	15492 <modem_info_string_get+0xf2>
		err = at_params_short_get(&m_param_list,
   15452:	4658      	mov	r0, fp
   15454:	f89a 1008 	ldrb.w	r1, [sl, #8]
   15458:	f10d 020a 	add.w	r2, sp, #10
   1545c:	f011 fc05 	bl	26c6a <at_params_short_get>
		if (err) {
   15460:	2800      	cmp	r0, #0
   15462:	d1c8      	bne.n	153f6 <modem_info_string_get+0x56>
		err = snprintf(buf, buf_size, "%d", param_value);
   15464:	4649      	mov	r1, r9
   15466:	4630      	mov	r0, r6
   15468:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1546c:	4a40      	ldr	r2, [pc, #256]	; (15570 <modem_info_string_get+0x1d0>)
   1546e:	f00a fcbd 	bl	1fdec <sniprintf>
		if ((err <= 0) || (err > buf_size)) {
   15472:	4548      	cmp	r0, r9
   15474:	d91f      	bls.n	154b6 <modem_info_string_get+0x116>
			return -EMSGSIZE;
   15476:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1547a:	e7bc      	b.n	153f6 <modem_info_string_get+0x56>
			++ip_str_end;
   1547c:	3001      	adds	r0, #1
			++ip_cnt;
   1547e:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   15480:	4639      	mov	r1, r7
   15482:	f012 fc60 	bl	27d46 <strstr>
   15486:	2800      	cmp	r0, #0
   15488:	d1f8      	bne.n	1547c <modem_info_string_get+0xdc>
   1548a:	e7ba      	b.n	15402 <modem_info_string_get+0x62>
   1548c:	4f37      	ldr	r7, [pc, #220]	; (1556c <modem_info_string_get+0x1cc>)
	char *ip_str_end = recv_buf;
   1548e:	a804      	add	r0, sp, #16
   15490:	e7f6      	b.n	15480 <modem_info_string_get+0xe0>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   15492:	2b03      	cmp	r3, #3
   15494:	d10f      	bne.n	154b6 <modem_info_string_get+0x116>
		len = buf_size - out_buf_len;
   15496:	eba9 0304 	sub.w	r3, r9, r4
   1549a:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   1549c:	4658      	mov	r0, fp
   1549e:	f89a 1008 	ldrb.w	r1, [sl, #8]
   154a2:	ab03      	add	r3, sp, #12
   154a4:	1932      	adds	r2, r6, r4
   154a6:	f011 fc05 	bl	26cb4 <at_params_string_get>
		if (err != 0) {
   154aa:	2800      	cmp	r0, #0
   154ac:	d1a3      	bne.n	153f6 <modem_info_string_get+0x56>
		} else if (len >= buf_size) {
   154ae:	9b03      	ldr	r3, [sp, #12]
   154b0:	454b      	cmp	r3, r9
   154b2:	d2e0      	bcs.n	15476 <modem_info_string_get+0xd6>
		buf[len] = 0;
   154b4:	54f0      	strb	r0, [r6, r3]
	if (info == MODEM_INFO_ICCID) {
   154b6:	f1b8 0f0e 	cmp.w	r8, #14
   154ba:	d121      	bne.n	15500 <modem_info_string_get+0x160>
   154bc:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   154be:	4630      	mov	r0, r6
   154c0:	f7f7 fd3a 	bl	cf38 <strlen>
   154c4:	1ca3      	adds	r3, r4, #2
   154c6:	1ba4      	subs	r4, r4, r6
   154c8:	4284      	cmp	r4, r0
   154ca:	d30f      	bcc.n	154ec <modem_info_string_get+0x14c>
		if ((len == ICCID_LEN) &&
   154cc:	9b03      	ldr	r3, [sp, #12]
   154ce:	2b14      	cmp	r3, #20
   154d0:	d106      	bne.n	154e0 <modem_info_string_get+0x140>
   154d2:	7cf3      	ldrb	r3, [r6, #19]
   154d4:	2b46      	cmp	r3, #70	; 0x46
   154d6:	d103      	bne.n	154e0 <modem_info_string_get+0x140>
			buf[len - 1] = '\0';
   154d8:	2300      	movs	r3, #0
   154da:	74f3      	strb	r3, [r6, #19]
			--len;
   154dc:	2313      	movs	r3, #19
   154de:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   154e0:	9803      	ldr	r0, [sp, #12]
   154e2:	2800      	cmp	r0, #0
   154e4:	bf08      	it	eq
   154e6:	f06f 0085 	mvneq.w	r0, #133	; 0x85
   154ea:	e784      	b.n	153f6 <modem_info_string_get+0x56>
		current_char = buf[i];
   154ec:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   154f0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   154f4:	461c      	mov	r4, r3
		buf[i] = next_char;
   154f6:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   154fa:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   154fe:	e7de      	b.n	154be <modem_info_string_get+0x11e>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   15500:	f1b8 0f09 	cmp.w	r8, #9
   15504:	d1ec      	bne.n	154e0 <modem_info_string_get+0x140>
   15506:	2d00      	cmp	r5, #0
   15508:	ddea      	ble.n	154e0 <modem_info_string_get+0x140>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   1550a:	1933      	adds	r3, r6, r4
   1550c:	4618      	mov	r0, r3
   1550e:	4919      	ldr	r1, [pc, #100]	; (15574 <modem_info_string_get+0x1d4>)
   15510:	9301      	str	r3, [sp, #4]
   15512:	f012 fc18 	bl	27d46 <strstr>
		if (ip_v6_str) {
   15516:	b130      	cbz	r0, 15526 <modem_info_string_get+0x186>
			*ip_v6_str = 0;
   15518:	2200      	movs	r2, #0
			len = strlen(&buf[out_buf_len]);
   1551a:	9b01      	ldr	r3, [sp, #4]
			*ip_v6_str = 0;
   1551c:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   1551e:	4618      	mov	r0, r3
   15520:	f7f7 fd0a 	bl	cf38 <strlen>
   15524:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   15526:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   15528:	2d01      	cmp	r5, #1
		out_buf_len += len;
   1552a:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   1552c:	d00e      	beq.n	1554c <modem_info_string_get+0x1ac>
			err = snprintf(&buf[out_buf_len],
   1552e:	eba9 0104 	sub.w	r1, r9, r4
   15532:	4a11      	ldr	r2, [pc, #68]	; (15578 <modem_info_string_get+0x1d8>)
   15534:	1930      	adds	r0, r6, r4
   15536:	9100      	str	r1, [sp, #0]
   15538:	f00a fc58 	bl	1fdec <sniprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   1553c:	2800      	cmp	r0, #0
   1553e:	dd9a      	ble.n	15476 <modem_info_string_get+0xd6>
   15540:	9900      	ldr	r1, [sp, #0]
   15542:	4281      	cmp	r1, r0
   15544:	d397      	bcc.n	15476 <modem_info_string_get+0xd6>
			cmd_rsp_idx = ip_str_len + 1;
   15546:	1c7b      	adds	r3, r7, #1
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   15548:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   1554a:	9300      	str	r3, [sp, #0]
		if (--ip_cnt) {
   1554c:	3d01      	subs	r5, #1
   1554e:	f47f af5f 	bne.w	15410 <modem_info_string_get+0x70>
			len = out_buf_len;
   15552:	9403      	str	r4, [sp, #12]
   15554:	e7c4      	b.n	154e0 <modem_info_string_get+0x140>
		return -EINVAL;
   15556:	f06f 0015 	mvn.w	r0, #21
   1555a:	e74c      	b.n	153f6 <modem_info_string_get+0x56>
		return -EIO;
   1555c:	f06f 0004 	mvn.w	r0, #4
   15560:	e749      	b.n	153f6 <modem_info_string_get+0x56>
			return -EFAULT;
   15562:	f06f 000d 	mvn.w	r0, #13
   15566:	e746      	b.n	153f6 <modem_info_string_get+0x56>
   15568:	00028bd8 	.word	0x00028bd8
   1556c:	0002963f 	.word	0x0002963f
   15570:	00029130 	.word	0x00029130
   15574:	00029a5b 	.word	0x00029a5b
   15578:	000295ad 	.word	0x000295ad
   1557c:	200230b4 	.word	0x200230b4

00015580 <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
   15580:	b508      	push	{r3, lr}
	modem_info_rsrp_cb = cb;
   15582:	4b09      	ldr	r3, [pc, #36]	; (155a8 <modem_info_rsrp_register+0x28>)

	int rc = at_notif_register_handler(NULL,
   15584:	4909      	ldr	r1, [pc, #36]	; (155ac <modem_info_rsrp_register+0x2c>)
	modem_info_rsrp_cb = cb;
   15586:	6018      	str	r0, [r3, #0]
	int rc = at_notif_register_handler(NULL,
   15588:	2000      	movs	r0, #0
   1558a:	f7ff f919 	bl	147c0 <at_notif_register_handler>
		modem_info_rsrp_subscribe_handler);
	if (rc != 0) {
   1558e:	b948      	cbnz	r0, 155a4 <modem_info_rsrp_register+0x24>
		LOG_ERR("Can't register handler rc=%d", rc);
		return rc;
	}

	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   15590:	4603      	mov	r3, r0
   15592:	4602      	mov	r2, r0
   15594:	4601      	mov	r1, r0
   15596:	4806      	ldr	r0, [pc, #24]	; (155b0 <modem_info_rsrp_register+0x30>)
   15598:	f7ff f888 	bl	146ac <at_cmd_write>
   1559c:	2800      	cmp	r0, #0
		return -EIO;
   1559e:	bf18      	it	ne
   155a0:	f06f 0004 	mvnne.w	r0, #4
	}

	return 0;
}
   155a4:	bd08      	pop	{r3, pc}
   155a6:	bf00      	nop
   155a8:	200230bc 	.word	0x200230bc
   155ac:	00015345 	.word	0x00015345
   155b0:	000295b0 	.word	0x000295b0

000155b4 <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   155b4:	210a      	movs	r1, #10
   155b6:	4801      	ldr	r0, [pc, #4]	; (155bc <modem_info_init+0x8>)
   155b8:	f011 ba9a 	b.w	26af0 <at_params_list_init>
   155bc:	200230b4 	.word	0x200230b4

000155c0 <modem_info_params_init>:

LOG_MODULE_REGISTER(modem_info_params);

int modem_info_params_init(struct modem_param_info *modem)
{
	if (modem == NULL) {
   155c0:	2800      	cmp	r0, #0
   155c2:	d046      	beq.n	15652 <modem_info_params_init+0x92>
		return -EINVAL;
	}

	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   155c4:	2301      	movs	r3, #1
   155c6:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   155ca:	2302      	movs	r3, #2
   155cc:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   155d0:	2303      	movs	r3, #3
   155d2:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   155d6:	2305      	movs	r3, #5
   155d8:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   155dc:	2306      	movs	r3, #6
   155de:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   155e2:	2307      	movs	r3, #7
   155e4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   155e8:	2308      	movs	r3, #8
   155ea:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   155ee:	2309      	movs	r3, #9
   155f0:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   155f4:	2304      	movs	r3, #4
   155f6:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   155fa:	230f      	movs	r3, #15
   155fc:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   15600:	2310      	movs	r3, #16
   15602:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   15606:	2311      	movs	r3, #17
   15608:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   1560c:	2314      	movs	r3, #20
   1560e:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   15612:	2315      	movs	r3, #21
   15614:	f880 361c 	strb.w	r3, [r0, #1564]	; 0x61c

	modem->sim.uicc.type			= MODEM_INFO_UICC;
   15618:	230a      	movs	r3, #10
   1561a:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   1561e:	230e      	movs	r3, #14
   15620:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   15624:	2312      	movs	r3, #18
   15626:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784

	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   1562a:	230d      	movs	r3, #13
   1562c:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   15630:	230b      	movs	r3, #11
   15632:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.imei.type			= MODEM_INFO_IMEI;
   15636:	2313      	movs	r3, #19
   15638:	f880 38d4 	strb.w	r3, [r0, #2260]	; 0x8d4
	modem->device.board			= CONFIG_BOARD;
   1563c:	4b06      	ldr	r3, [pc, #24]	; (15658 <modem_info_params_init+0x98>)
   1563e:	f8c0 38d8 	str.w	r3, [r0, #2264]	; 0x8d8
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   15642:	4b06      	ldr	r3, [pc, #24]	; (1565c <modem_info_params_init+0x9c>)
   15644:	f8c0 38dc 	str.w	r3, [r0, #2268]	; 0x8dc
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   15648:	4b05      	ldr	r3, [pc, #20]	; (15660 <modem_info_params_init+0xa0>)
   1564a:	f8c0 38e0 	str.w	r3, [r0, #2272]	; 0x8e0

	return 0;
   1564e:	2000      	movs	r0, #0
   15650:	4770      	bx	lr
		return -EINVAL;
   15652:	f06f 0015 	mvn.w	r0, #21
}
   15656:	4770      	bx	lr
   15658:	000295ba 	.word	0x000295ba
   1565c:	000295cc 	.word	0x000295cc
   15660:	000295d3 	.word	0x000295d3

00015664 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   15664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15668:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   1566a:	4c21      	ldr	r4, [pc, #132]	; (156f0 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   1566c:	4e21      	ldr	r6, [pc, #132]	; (156f4 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1566e:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   15672:	f8df 9088 	ldr.w	r9, [pc, #136]	; 156fc <check_ext_api_requests+0x98>
{
   15676:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15678:	45a8      	cmp	r8, r5
   1567a:	d803      	bhi.n	15684 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   1567c:	2000      	movs	r0, #0
   1567e:	b005      	add	sp, #20
   15680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   15684:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15686:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1568a:	681f      	ldr	r7, [r3, #0]
   1568c:	ab01      	add	r3, sp, #4
   1568e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   15692:	220c      	movs	r2, #12
   15694:	4619      	mov	r1, r3
   15696:	4638      	mov	r0, r7
   15698:	f012 f947 	bl	2792a <memcmp>
   1569c:	b990      	cbnz	r0, 156c4 <check_ext_api_requests+0x60>
   1569e:	b18f      	cbz	r7, 156c4 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   156a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   156a2:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   156a4:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   156a6:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   156a8:	4291      	cmp	r1, r2
   156aa:	d10b      	bne.n	156c4 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   156ac:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   156ae:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   156b0:	4291      	cmp	r1, r2
   156b2:	d807      	bhi.n	156c4 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   156b4:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   156b6:	4291      	cmp	r1, r2
   156b8:	d904      	bls.n	156c4 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   156ba:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   156bc:	695b      	ldr	r3, [r3, #20]
   156be:	ea32 0303 	bics.w	r3, r2, r3
   156c2:	d00a      	beq.n	156da <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   156c4:	6a27      	ldr	r7, [r4, #32]
   156c6:	b167      	cbz	r7, 156e2 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   156c8:	480b      	ldr	r0, [pc, #44]	; (156f8 <check_ext_api_requests+0x94>)
   156ca:	f00c fdf5 	bl	222b8 <printk>
			k_panic();
   156ce:	4040      	eors	r0, r0
   156d0:	f380 8811 	msr	BASEPRI, r0
   156d4:	f04f 0004 	mov.w	r0, #4
   156d8:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   156da:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   156dc:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   156de:	441c      	add	r4, r3
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   156e0:	e7ca      	b.n	15678 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   156e2:	4648      	mov	r0, r9
   156e4:	f00c fde8 	bl	222b8 <printk>
			*ext_api_req->ext_api = NULL;
   156e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   156ea:	601f      	str	r7, [r3, #0]
   156ec:	e7f5      	b.n	156da <check_ext_api_requests+0x76>
   156ee:	bf00      	nop
   156f0:	0000c23c 	.word	0x0000c23c
   156f4:	000287c8 	.word	0x000287c8
   156f8:	000295e6 	.word	0x000295e6
   156fc:	0002960f 	.word	0x0002960f

00015700 <agps_write>:
	notify_event(dev, &evt);
}

static int agps_write(struct device *dev, enum gps_agps_type type, void *data,
		      size_t data_len)
{
   15700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   15702:	460c      	mov	r4, r1
   15704:	4611      	mov	r1, r2
   15706:	461a      	mov	r2, r3
	int err;
	struct gps_drv_data *drv_data = dev->driver_data;
	nrf_gnss_agps_data_type_t data_type = type_lookup_gps2socket[type];
   15708:	4b0c      	ldr	r3, [pc, #48]	; (1573c <agps_write+0x3c>)
	struct gps_drv_data *drv_data = dev->driver_data;
   1570a:	68c0      	ldr	r0, [r0, #12]
	nrf_gnss_agps_data_type_t data_type = type_lookup_gps2socket[type];
   1570c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   15710:	f8ad 300e 	strh.w	r3, [sp, #14]

	err = nrf_sendto(drv_data->socket, data, data_len, 0, &data_type,
   15714:	2302      	movs	r3, #2
   15716:	9301      	str	r3, [sp, #4]
   15718:	f10d 030e 	add.w	r3, sp, #14
   1571c:	9300      	str	r3, [sp, #0]
   1571e:	6a00      	ldr	r0, [r0, #32]
   15720:	2300      	movs	r3, #0
   15722:	f006 fc37 	bl	1bf94 <nrf_sendto>
			 sizeof(data_type));
	if (err < 0) {
   15726:	2800      	cmp	r0, #0
   15728:	da05      	bge.n	15736 <agps_write+0x36>
		LOG_ERR("Failed to send A-GPS data to modem, errno: %d", errno);
		return -errno;
   1572a:	f00d fc3b 	bl	22fa4 <__errno>
   1572e:	6800      	ldr	r0, [r0, #0]
   15730:	4240      	negs	r0, r0
	}

	LOG_DBG("Sent A-GPS data to modem, type: %d", type);

	return 0;
}
   15732:	b004      	add	sp, #16
   15734:	bd10      	pop	{r4, pc}
	return 0;
   15736:	2000      	movs	r0, #0
   15738:	e7fb      	b.n	15732 <agps_write+0x32>
   1573a:	bf00      	nop
   1573c:	0002911c 	.word	0x0002911c

00015740 <init>:

static int init(struct device *dev, gps_event_handler_t handler)
{
   15740:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct gps_drv_data *drv_data = dev->driver_data;
   15742:	68c4      	ldr	r4, [r0, #12]
{
   15744:	4606      	mov	r6, r0
	int err;

	if (drv_data->is_init) {
   15746:	69a5      	ldr	r5, [r4, #24]
{
   15748:	b089      	sub	sp, #36	; 0x24
	if (drv_data->is_init) {
   1574a:	2d00      	cmp	r5, #0
   1574c:	d142      	bne.n	157d4 <init+0x94>
		LOG_WRN("GPS is already initialized");

		return -EALREADY;
	}

	if (handler == NULL) {
   1574e:	2900      	cmp	r1, #0
   15750:	d043      	beq.n	157da <init+0x9a>
		return -EINVAL;
	}

	drv_data->handler = handler;

	if (drv_data->socket < 0) {
   15752:	6a23      	ldr	r3, [r4, #32]
	drv_data->handler = handler;
   15754:	6061      	str	r1, [r4, #4]
	if (drv_data->socket < 0) {
   15756:	2b00      	cmp	r3, #0
   15758:	db30      	blt.n	157bc <init+0x7c>
				drv_data->socket);
			return -EIO;
		}
	}

	k_delayed_work_init(&drv_data->start_work, start_work_fn);
   1575a:	f604 00fc 	addw	r0, r4, #2300	; 0x8fc
   1575e:	4920      	ldr	r1, [pc, #128]	; (157e0 <init+0xa0>)
   15760:	f011 ff2a 	bl	275b8 <k_delayed_work_init>
	k_delayed_work_init(&drv_data->stop_work, stop_work_fn);
   15764:	f604 101c 	addw	r0, r4, #2332	; 0x91c
   15768:	491e      	ldr	r1, [pc, #120]	; (157e4 <init+0xa4>)
   1576a:	f011 ff25 	bl	275b8 <k_delayed_work_init>
	k_delayed_work_init(&drv_data->timeout_work, timeout_work_fn);
   1576e:	491e      	ldr	r1, [pc, #120]	; (157e8 <init+0xa8>)
   15770:	f604 103c 	addw	r0, r4, #2364	; 0x93c
   15774:	f011 ff20 	bl	275b8 <k_delayed_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   15778:	2201      	movs	r2, #1
   1577a:	2100      	movs	r1, #0
   1577c:	f604 00e4 	addw	r0, r4, #2276	; 0x8e4
   15780:	f011 fea3 	bl	274ca <z_impl_k_sem_init>
	struct gps_drv_data *drv_data = dev->driver_data;
   15784:	68f7      	ldr	r7, [r6, #12]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   15786:	2200      	movs	r2, #0
   15788:	2300      	movs	r3, #0
   1578a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1578e:	2300      	movs	r3, #0
   15790:	220a      	movs	r2, #10
   15792:	e9cd 3301 	strd	r3, r3, [sp, #4]
   15796:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1579a:	9600      	str	r6, [sp, #0]
   1579c:	4b13      	ldr	r3, [pc, #76]	; (157ec <init+0xac>)
   1579e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   157a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
   157a6:	f607 0028 	addw	r0, r7, #2088	; 0x828
   157aa:	f009 f9d3 	bl	1eb54 <z_impl_k_thread_create>
		LOG_ERR("Could not initialize GPS thread, error: %d",
			err);
		return err;
	}

	drv_data->is_init = true;
   157ae:	2301      	movs	r3, #1
	drv_data->thread_id = k_thread_create(
   157b0:	f8c7 08e0 	str.w	r0, [r7, #2272]	; 0x8e0
	drv_data->is_init = true;
   157b4:	61a3      	str	r3, [r4, #24]

	return 0;
}
   157b6:	4628      	mov	r0, r5
   157b8:	b009      	add	sp, #36	; 0x24
   157ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   157bc:	f44f 7201 	mov.w	r2, #516	; 0x204
   157c0:	2102      	movs	r1, #2
   157c2:	2001      	movs	r0, #1
   157c4:	f006 fbc6 	bl	1bf54 <nrf_socket>
		if (drv_data->socket >= 0) {
   157c8:	2800      	cmp	r0, #0
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   157ca:	6220      	str	r0, [r4, #32]
		if (drv_data->socket >= 0) {
   157cc:	dac5      	bge.n	1575a <init+0x1a>
			return -EIO;
   157ce:	f06f 0504 	mvn.w	r5, #4
   157d2:	e7f0      	b.n	157b6 <init+0x76>
		return -EALREADY;
   157d4:	f06f 0577 	mvn.w	r5, #119	; 0x77
   157d8:	e7ed      	b.n	157b6 <init+0x76>
		return -EINVAL;
   157da:	f06f 0515 	mvn.w	r5, #21
   157de:	e7ea      	b.n	157b6 <init+0x76>
   157e0:	00026f9f 	.word	0x00026f9f
   157e4:	00026d6d 	.word	0x00026d6d
   157e8:	00015879 	.word	0x00015879
   157ec:	00026dcb 	.word	0x00026dcb

000157f0 <setup>:
	drv_data->socket = -1;
   157f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct gps_drv_data *drv_data = dev->driver_data;
   157f4:	68c2      	ldr	r2, [r0, #12]
{
   157f6:	b510      	push	{r4, lr}
	drv_data->socket = -1;
   157f8:	6213      	str	r3, [r2, #32]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   157fa:	2300      	movs	r3, #0
	drv_data->dev = dev;
   157fc:	f842 0b1c 	str.w	r0, [r2], #28
   15800:	e8d2 1fef 	ldaex	r1, [r2]
   15804:	e8c2 3fe0 	stlex	r0, r3, [r2]
   15808:	2800      	cmp	r0, #0
   1580a:	d1f9      	bne.n	15800 <setup+0x10>
	err = at_cmd_write(CONFIG_NRF9160_GPS_MAGPIO_STRING,
   1580c:	461a      	mov	r2, r3
   1580e:	4619      	mov	r1, r3
   15810:	4806      	ldr	r0, [pc, #24]	; (1582c <setup+0x3c>)
   15812:	f7fe ff4b 	bl	146ac <at_cmd_write>
	if (err) {
   15816:	4603      	mov	r3, r0
   15818:	b930      	cbnz	r0, 15828 <setup+0x38>
}
   1581a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = at_cmd_write(CONFIG_NRF9160_GPS_COEX0_STRING,
   1581e:	4602      	mov	r2, r0
   15820:	4601      	mov	r1, r0
   15822:	4803      	ldr	r0, [pc, #12]	; (15830 <setup+0x40>)
   15824:	f7fe bf42 	b.w	146ac <at_cmd_write>
}
   15828:	bd10      	pop	{r4, pc}
   1582a:	bf00      	nop
   1582c:	00029642 	.word	0x00029642
   15830:	00029661 	.word	0x00029661

00015834 <stop>:
{
   15834:	b538      	push	{r3, r4, r5, lr}
	struct gps_drv_data *drv_data = dev->driver_data;
   15836:	68c5      	ldr	r5, [r0, #12]
{
   15838:	4604      	mov	r4, r0
	k_delayed_work_cancel(&drv_data->timeout_work);
   1583a:	f605 103c 	addw	r0, r5, #2364	; 0x93c
   1583e:	f011 fec3 	bl	275c8 <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->start_work);
   15842:	f605 00fc 	addw	r0, r5, #2300	; 0x8fc
   15846:	f011 febf 	bl	275c8 <k_delayed_work_cancel>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1584a:	f105 031c 	add.w	r3, r5, #28
   1584e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&drv_data->is_active) == 0) {
   15852:	b943      	cbnz	r3, 15866 <stop+0x32>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15854:	2200      	movs	r2, #0
   15856:	2300      	movs	r3, #0
   15858:	4806      	ldr	r0, [pc, #24]	; (15874 <stop+0x40>)
   1585a:	f605 111c 	addw	r1, r5, #2332	; 0x91c
   1585e:	f009 fa2f 	bl	1ecc0 <k_delayed_work_submit_to_queue>
	return 0;
   15862:	2000      	movs	r0, #0
}
   15864:	bd38      	pop	{r3, r4, r5, pc}
	err = stop_gps(dev, false);
   15866:	68e0      	ldr	r0, [r4, #12]
   15868:	f011 fa93 	bl	26d92 <stop_gps.isra.0>
	if (err) {
   1586c:	2800      	cmp	r0, #0
   1586e:	d0f1      	beq.n	15854 <stop+0x20>
   15870:	e7f8      	b.n	15864 <stop+0x30>
   15872:	bf00      	nop
   15874:	200280bc 	.word	0x200280bc

00015878 <timeout_work_fn>:
{
   15878:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1587c:	b0b0      	sub	sp, #192	; 0xc0
	struct device *dev = drv_data->dev;
   1587e:	f6a0 153c 	subw	r5, r0, #2364	; 0x93c
	struct gps_event evt = {
   15882:	22c0      	movs	r2, #192	; 0xc0
   15884:	2100      	movs	r1, #0
{
   15886:	4604      	mov	r4, r0
	struct gps_event evt = {
   15888:	4668      	mov	r0, sp
	struct device *dev = drv_data->dev;
   1588a:	682e      	ldr	r6, [r5, #0]
	struct gps_event evt = {
   1588c:	f012 f895 	bl	279ba <memset>
   15890:	2302      	movs	r3, #2
	stop_gps(dev, true);
   15892:	68f0      	ldr	r0, [r6, #12]
	struct gps_event evt = {
   15894:	f88d 3000 	strb.w	r3, [sp]
	stop_gps(dev, true);
   15898:	f011 fa7b 	bl	26d92 <stop_gps.isra.0>
	if (drv_data->current_cfg.nav_mode == GPS_NAV_MODE_PERIODIC) {
   1589c:	7a2b      	ldrb	r3, [r5, #8]
   1589e:	2b02      	cmp	r3, #2
   158a0:	d11b      	bne.n	158da <timeout_work_fn+0x62>
		u32_t start_delay = drv_data->current_cfg.interval -
   158a2:	e9d5 1303 	ldrd	r1, r3, [r5, #12]
   158a6:	1acb      	subs	r3, r1, r3
				      K_SECONDS(start_delay));
   158a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
			return (u32_t)((t * to_hz + off) / from_hz);
   158ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   158b0:	f240 38e7 	movw	r8, #999	; 0x3e7
   158b4:	f04f 0900 	mov.w	r9, #0
   158b8:	4359      	muls	r1, r3
   158ba:	fbe0 8901 	umlal	r8, r9, r0, r1
   158be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   158c2:	2300      	movs	r3, #0
   158c4:	4640      	mov	r0, r8
   158c6:	4649      	mov	r1, r9
   158c8:	f7f6 ff76 	bl	c7b8 <__aeabi_uldivmod>
   158cc:	2300      	movs	r3, #0
   158ce:	4602      	mov	r2, r0
   158d0:	f1a4 0140 	sub.w	r1, r4, #64	; 0x40
   158d4:	4804      	ldr	r0, [pc, #16]	; (158e8 <timeout_work_fn+0x70>)
   158d6:	f009 f9f3 	bl	1ecc0 <k_delayed_work_submit_to_queue>
	notify_event(dev, &evt);
   158da:	4669      	mov	r1, sp
   158dc:	4630      	mov	r0, r6
   158de:	f011 fa40 	bl	26d62 <notify_event>
}
   158e2:	b030      	add	sp, #192	; 0xc0
   158e4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   158e8:	200280bc 	.word	0x200280bc

000158ec <start>:
	struct nrf9160_gps_config gps_cfg = { 0 };
   158ec:	2210      	movs	r2, #16
{
   158ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct gps_drv_data *drv_data = dev->driver_data;
   158f2:	68c6      	ldr	r6, [r0, #12]
{
   158f4:	b089      	sub	sp, #36	; 0x24
   158f6:	460c      	mov	r4, r1
	struct nrf9160_gps_config gps_cfg = { 0 };
   158f8:	eb0d 0002 	add.w	r0, sp, r2
   158fc:	2100      	movs	r1, #0
   158fe:	f012 f85c 	bl	279ba <memset>
	if (atomic_get(&drv_data->is_active)) {
   15902:	f106 071c 	add.w	r7, r6, #28
   15906:	e8d7 3faf 	lda	r3, [r7]
   1590a:	2b00      	cmp	r3, #0
   1590c:	f040 80e3 	bne.w	15ad6 <start+0x1ea>
	switch (cfg_src->nav_mode) {
   15910:	7823      	ldrb	r3, [r4, #0]
   15912:	2b01      	cmp	r3, #1
   15914:	d018      	beq.n	15948 <start+0x5c>
   15916:	2b02      	cmp	r3, #2
   15918:	d01a      	beq.n	15950 <start+0x64>
   1591a:	2b00      	cmp	r3, #0
   1591c:	f040 80de 	bne.w	15adc <start+0x1f0>
		cfg_dst->interval = 0;
   15920:	f8ad 3012 	strh.w	r3, [sp, #18]
		cfg_dst->retry = cfg_src->timeout < 0 ? 0 : cfg_src->timeout;
   15924:	68a3      	ldr	r3, [r4, #8]
   15926:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1592a:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (cfg_src->delete_agps_data) {
   1592e:	7b23      	ldrb	r3, [r4, #12]
   15930:	b10b      	cbz	r3, 15936 <start+0x4a>
		cfg_dst->delete_mask = 0xFF;
   15932:	23ff      	movs	r3, #255	; 0xff
   15934:	9306      	str	r3, [sp, #24]
	*nmea_mask |= NRF_GNSS_NMEA_GGA_MASK;
   15936:	2301      	movs	r3, #1
   15938:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (cfg_src->power_mode == GPS_POWER_MODE_PERFORMANCE) {
   1593c:	7863      	ldrb	r3, [r4, #1]
   1593e:	2b01      	cmp	r3, #1
   15940:	d113      	bne.n	1596a <start+0x7e>
		cfg_dst->power_mode = NRF_GNSS_PSM_DUTY_CYCLING_POWER;
   15942:	f88d 301c 	strb.w	r3, [sp, #28]
	if (err) {
   15946:	e012      	b.n	1596e <start+0x82>
		cfg_dst->retry = 0;
   15948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1594c:	9304      	str	r3, [sp, #16]
		break;
   1594e:	e7ee      	b.n	1592e <start+0x42>
		if (cfg_src->interval < 10) {
   15950:	6863      	ldr	r3, [r4, #4]
   15952:	2b09      	cmp	r3, #9
   15954:	f240 80c2 	bls.w	15adc <start+0x1f0>
		if (cfg_src->timeout >= cfg_src->interval) {
   15958:	68a2      	ldr	r2, [r4, #8]
   1595a:	4293      	cmp	r3, r2
   1595c:	f240 80be 	bls.w	15adc <start+0x1f0>
		cfg_dst->retry = cfg_src->timeout;
   15960:	f8ad 2010 	strh.w	r2, [sp, #16]
		cfg_dst->interval = cfg_src->interval;
   15964:	f8ad 3012 	strh.w	r3, [sp, #18]
		break;
   15968:	e7e1      	b.n	1592e <start+0x42>
	} else if (cfg_src->power_mode == GPS_POWER_MODE_SAVE) {
   1596a:	2b02      	cmp	r3, #2
   1596c:	d0e9      	beq.n	15942 <start+0x56>
	if (cfg != &drv_data->current_cfg) {
   1596e:	f106 0308 	add.w	r3, r6, #8
   15972:	42a3      	cmp	r3, r4
   15974:	d008      	beq.n	15988 <start+0x9c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15976:	4622      	mov	r2, r4
   15978:	f104 0110 	add.w	r1, r4, #16
   1597c:	f852 0b04 	ldr.w	r0, [r2], #4
   15980:	428a      	cmp	r2, r1
   15982:	f843 0b04 	str.w	r0, [r3], #4
   15986:	d1f9      	bne.n	1597c <start+0x90>
	err = lte_lc_system_mode_get(&system_mode);
   15988:	f10d 000e 	add.w	r0, sp, #14
   1598c:	f7ff fbf6 	bl	1517c <lte_lc_system_mode_get>
	if (err) {
   15990:	b948      	cbnz	r0, 159a6 <start+0xba>
	    (system_mode != LTE_LC_SYSTEM_MODE_LTEM_GPS) &&
   15992:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((system_mode != LTE_LC_SYSTEM_MODE_GPS) &&
   15996:	1eda      	subs	r2, r3, #3
   15998:	2a02      	cmp	r2, #2
   1599a:	d80a      	bhi.n	159b2 <start+0xc6>
	err = lte_lc_func_mode_get(&functional_mode);
   1599c:	f10d 000f 	add.w	r0, sp, #15
   159a0:	f7ff fc68 	bl	15274 <lte_lc_func_mode_get>
	if (err) {
   159a4:	b190      	cbz	r0, 159cc <start+0xe0>
		return -EIO;
   159a6:	f06f 0504 	mvn.w	r5, #4
}
   159aa:	4628      	mov	r0, r5
   159ac:	b009      	add	sp, #36	; 0x24
   159ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (system_mode == LTE_LC_SYSTEM_MODE_LTEM) {
   159b2:	2b01      	cmp	r3, #1
   159b4:	d008      	beq.n	159c8 <start+0xdc>
			new_mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   159b6:	2b02      	cmp	r3, #2
   159b8:	bf14      	ite	ne
   159ba:	2003      	movne	r0, #3
   159bc:	2005      	moveq	r0, #5
		err = lte_lc_system_mode_set(new_mode);
   159be:	f7ff fb4d 	bl	1505c <lte_lc_system_mode_set>
		if (err) {
   159c2:	2800      	cmp	r0, #0
   159c4:	d0ea      	beq.n	1599c <start+0xb0>
   159c6:	e7ee      	b.n	159a6 <start+0xba>
			new_mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   159c8:	2004      	movs	r0, #4
   159ca:	e7f8      	b.n	159be <start+0xd2>
	if (functional_mode != LTE_LC_FUNC_MODE_NORMAL) {
   159cc:	f89d 800f 	ldrb.w	r8, [sp, #15]
   159d0:	f1b8 0f01 	cmp.w	r8, #1
   159d4:	d1e7      	bne.n	159a6 <start+0xba>
	retval = nrf_setsockopt(drv_data->socket,
   159d6:	2502      	movs	r5, #2
   159d8:	9500      	str	r5, [sp, #0]
   159da:	462a      	mov	r2, r5
   159dc:	f44f 7101 	mov.w	r1, #516	; 0x204
   159e0:	6a30      	ldr	r0, [r6, #32]
   159e2:	ab04      	add	r3, sp, #16
   159e4:	f006 fb72 	bl	1c0cc <nrf_setsockopt>
	if (retval != 0) {
   159e8:	2800      	cmp	r0, #0
   159ea:	d1dc      	bne.n	159a6 <start+0xba>
	retval = nrf_setsockopt(drv_data->socket,
   159ec:	9500      	str	r5, [sp, #0]
   159ee:	4642      	mov	r2, r8
   159f0:	f44f 7101 	mov.w	r1, #516	; 0x204
   159f4:	6a30      	ldr	r0, [r6, #32]
   159f6:	f10d 0312 	add.w	r3, sp, #18
   159fa:	f006 fb67 	bl	1c0cc <nrf_setsockopt>
	if (retval != 0) {
   159fe:	2800      	cmp	r0, #0
   15a00:	d1d1      	bne.n	159a6 <start+0xba>
	retval = nrf_setsockopt(drv_data->socket,
   15a02:	9500      	str	r5, [sp, #0]
   15a04:	2204      	movs	r2, #4
   15a06:	f44f 7101 	mov.w	r1, #516	; 0x204
   15a0a:	6a30      	ldr	r0, [r6, #32]
   15a0c:	ab05      	add	r3, sp, #20
   15a0e:	f006 fb5d 	bl	1c0cc <nrf_setsockopt>
	if (retval != 0) {
   15a12:	2800      	cmp	r0, #0
   15a14:	d1c7      	bne.n	159a6 <start+0xba>
	if (gps_cfg.power_mode != NRF_GNSS_PSM_DISABLED) {
   15a16:	f89d 301c 	ldrb.w	r3, [sp, #28]
   15a1a:	2b00      	cmp	r3, #0
   15a1c:	d14f      	bne.n	15abe <start+0x1d2>
	retval = nrf_setsockopt(drv_data->socket,
   15a1e:	2304      	movs	r3, #4
   15a20:	9300      	str	r3, [sp, #0]
   15a22:	2207      	movs	r2, #7
   15a24:	f44f 7101 	mov.w	r1, #516	; 0x204
   15a28:	6a30      	ldr	r0, [r6, #32]
   15a2a:	ab06      	add	r3, sp, #24
   15a2c:	f006 fb4e 	bl	1c0cc <nrf_setsockopt>
	if (retval != 0) {
   15a30:	4605      	mov	r5, r0
   15a32:	2800      	cmp	r0, #0
   15a34:	d1b7      	bne.n	159a6 <start+0xba>
	if (gps_cfg.retry > 0) {
   15a36:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   15a3a:	b1bb      	cbz	r3, 15a6c <start+0x180>
				      K_SECONDS(cfg->timeout));
   15a3c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   15a40:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   15a44:	f240 30e7 	movw	r0, #999	; 0x3e7
   15a48:	2100      	movs	r1, #0
   15a4a:	68a3      	ldr	r3, [r4, #8]
   15a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15a50:	fb0c fc03 	mul.w	ip, ip, r3
   15a54:	2300      	movs	r3, #0
   15a56:	fbee 010c 	umlal	r0, r1, lr, ip
   15a5a:	f7f6 fead 	bl	c7b8 <__aeabi_uldivmod>
   15a5e:	462b      	mov	r3, r5
   15a60:	4602      	mov	r2, r0
   15a62:	f606 113c 	addw	r1, r6, #2364	; 0x93c
   15a66:	481f      	ldr	r0, [pc, #124]	; (15ae4 <start+0x1f8>)
   15a68:	f009 f92a 	bl	1ecc0 <k_delayed_work_submit_to_queue>
	if (cfg->nav_mode == GPS_NAV_MODE_PERIODIC) {
   15a6c:	7823      	ldrb	r3, [r4, #0]
   15a6e:	2b02      	cmp	r3, #2
   15a70:	d119      	bne.n	15aa6 <start+0x1ba>
				      K_SECONDS(cfg->interval));
   15a72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   15a76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   15a7a:	f240 38e7 	movw	r8, #999	; 0x3e7
   15a7e:	f04f 0900 	mov.w	r9, #0
   15a82:	6863      	ldr	r3, [r4, #4]
   15a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15a88:	4359      	muls	r1, r3
   15a8a:	fbe0 8901 	umlal	r8, r9, r0, r1
   15a8e:	2300      	movs	r3, #0
   15a90:	4640      	mov	r0, r8
   15a92:	4649      	mov	r1, r9
   15a94:	f7f6 fe90 	bl	c7b8 <__aeabi_uldivmod>
   15a98:	2300      	movs	r3, #0
   15a9a:	4602      	mov	r2, r0
   15a9c:	f606 01fc 	addw	r1, r6, #2300	; 0x8fc
   15aa0:	4810      	ldr	r0, [pc, #64]	; (15ae4 <start+0x1f8>)
   15aa2:	f009 f90d 	bl	1ecc0 <k_delayed_work_submit_to_queue>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15aa6:	2301      	movs	r3, #1
   15aa8:	e8d7 2fef 	ldaex	r2, [r7]
   15aac:	e8c7 3fe1 	stlex	r1, r3, [r7]
   15ab0:	2900      	cmp	r1, #0
   15ab2:	d1f9      	bne.n	15aa8 <start+0x1bc>
	z_impl_k_sem_give(sem);
   15ab4:	f606 00e4 	addw	r0, r6, #2276	; 0x8e4
   15ab8:	f008 ffbe 	bl	1ea38 <z_impl_k_sem_give>
}
   15abc:	e775      	b.n	159aa <start+0xbe>
		retval = nrf_setsockopt(drv_data->socket,
   15abe:	f8cd 8000 	str.w	r8, [sp]
   15ac2:	2209      	movs	r2, #9
   15ac4:	f44f 7101 	mov.w	r1, #516	; 0x204
   15ac8:	6a30      	ldr	r0, [r6, #32]
   15aca:	ab07      	add	r3, sp, #28
   15acc:	f006 fafe 	bl	1c0cc <nrf_setsockopt>
		if (retval != 0) {
   15ad0:	2800      	cmp	r0, #0
   15ad2:	d0a4      	beq.n	15a1e <start+0x132>
   15ad4:	e767      	b.n	159a6 <start+0xba>
		return -EALREADY;
   15ad6:	f06f 0577 	mvn.w	r5, #119	; 0x77
   15ada:	e766      	b.n	159aa <start+0xbe>
			return -EINVAL;
   15adc:	f06f 0515 	mvn.w	r5, #21
   15ae0:	e763      	b.n	159aa <start+0xbe>
   15ae2:	bf00      	nop
   15ae4:	200280bc 	.word	0x200280bc

00015ae8 <packet_free_cb>:
   15ae8:	b510      	push	{r4, lr}
   15aea:	4604      	mov	r4, r0
   15aec:	6800      	ldr	r0, [r0, #0]
   15aee:	f004 fcd9 	bl	1a4a4 <rpc_logobj_client_data_free>
   15af2:	68a0      	ldr	r0, [r4, #8]
   15af4:	b118      	cbz	r0, 15afe <packet_free_cb+0x16>
   15af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15afa:	f007 ba8d 	b.w	1d018 <nrf_free>
   15afe:	bd10      	pop	{r4, pc}

00015b00 <logobj_event_handler>:
   15b00:	b530      	push	{r4, r5, lr}
   15b02:	4b3b      	ldr	r3, [pc, #236]	; (15bf0 <logobj_event_handler+0xf0>)
   15b04:	b085      	sub	sp, #20
   15b06:	681d      	ldr	r5, [r3, #0]
   15b08:	2d00      	cmp	r5, #0
   15b0a:	d04c      	beq.n	15ba6 <logobj_event_handler+0xa6>
   15b0c:	f248 0302 	movw	r3, #32770	; 0x8002
   15b10:	4299      	cmp	r1, r3
   15b12:	d053      	beq.n	15bbc <logobj_event_handler+0xbc>
   15b14:	d91c      	bls.n	15b50 <logobj_event_handler+0x50>
   15b16:	f248 0303 	movw	r3, #32771	; 0x8003
   15b1a:	4299      	cmp	r1, r3
   15b1c:	d05a      	beq.n	15bd4 <logobj_event_handler+0xd4>
   15b1e:	f249 0301 	movw	r3, #36865	; 0x9001
   15b22:	4299      	cmp	r1, r3
   15b24:	d147      	bne.n	15bb6 <logobj_event_handler+0xb6>
   15b26:	2400      	movs	r4, #0
   15b28:	6843      	ldr	r3, [r0, #4]
   15b2a:	6802      	ldr	r2, [r0, #0]
   15b2c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   15b30:	e9cd 2300 	strd	r2, r3, [sp]
   15b34:	69e8      	ldr	r0, [r5, #28]
   15b36:	4669      	mov	r1, sp
   15b38:	6803      	ldr	r3, [r0, #0]
   15b3a:	685b      	ldr	r3, [r3, #4]
   15b3c:	4798      	blx	r3
   15b3e:	3001      	adds	r0, #1
   15b40:	d04e      	beq.n	15be0 <logobj_event_handler+0xe0>
   15b42:	4620      	mov	r0, r4
   15b44:	682b      	ldr	r3, [r5, #0]
   15b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   15b4a:	602b      	str	r3, [r5, #0]
   15b4c:	b005      	add	sp, #20
   15b4e:	bd30      	pop	{r4, r5, pc}
   15b50:	f248 0301 	movw	r3, #32769	; 0x8001
   15b54:	4299      	cmp	r1, r3
   15b56:	d12e      	bne.n	15bb6 <logobj_event_handler+0xb6>
   15b58:	68c3      	ldr	r3, [r0, #12]
   15b5a:	2b00      	cmp	r3, #0
   15b5c:	d135      	bne.n	15bca <logobj_event_handler+0xca>
   15b5e:	6828      	ldr	r0, [r5, #0]
   15b60:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   15b64:	d03e      	beq.n	15be4 <logobj_event_handler+0xe4>
   15b66:	682b      	ldr	r3, [r5, #0]
   15b68:	b29b      	uxth	r3, r3
   15b6a:	2b01      	cmp	r3, #1
   15b6c:	d105      	bne.n	15b7a <logobj_event_handler+0x7a>
   15b6e:	682b      	ldr	r3, [r5, #0]
   15b70:	0c1b      	lsrs	r3, r3, #16
   15b72:	041b      	lsls	r3, r3, #16
   15b74:	f043 0302 	orr.w	r3, r3, #2
   15b78:	602b      	str	r3, [r5, #0]
   15b7a:	4b1e      	ldr	r3, [pc, #120]	; (15bf4 <logobj_event_handler+0xf4>)
   15b7c:	781a      	ldrb	r2, [r3, #0]
   15b7e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   15b82:	2a00      	cmp	r2, #0
   15b84:	d031      	beq.n	15bea <logobj_event_handler+0xea>
   15b86:	4a1c      	ldr	r2, [pc, #112]	; (15bf8 <logobj_event_handler+0xf8>)
   15b88:	7811      	ldrb	r1, [r2, #0]
   15b8a:	b909      	cbnz	r1, 15b90 <logobj_event_handler+0x90>
   15b8c:	2101      	movs	r1, #1
   15b8e:	7011      	strb	r1, [r2, #0]
   15b90:	2000      	movs	r0, #0
   15b92:	7018      	strb	r0, [r3, #0]
   15b94:	682b      	ldr	r3, [r5, #0]
   15b96:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   15b9a:	602b      	str	r3, [r5, #0]
   15b9c:	682b      	ldr	r3, [r5, #0]
   15b9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   15ba2:	602b      	str	r3, [r5, #0]
   15ba4:	e7d2      	b.n	15b4c <logobj_event_handler+0x4c>
   15ba6:	6800      	ldr	r0, [r0, #0]
   15ba8:	2800      	cmp	r0, #0
   15baa:	d0cf      	beq.n	15b4c <logobj_event_handler+0x4c>
   15bac:	f004 fc7a 	bl	1a4a4 <rpc_logobj_client_data_free>
   15bb0:	4628      	mov	r0, r5
   15bb2:	b005      	add	sp, #20
   15bb4:	bd30      	pop	{r4, r5, pc}
   15bb6:	2000      	movs	r0, #0
   15bb8:	b005      	add	sp, #20
   15bba:	bd30      	pop	{r4, r5, pc}
   15bbc:	682b      	ldr	r3, [r5, #0]
   15bbe:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   15bc2:	d00b      	beq.n	15bdc <logobj_event_handler+0xdc>
   15bc4:	68c0      	ldr	r0, [r0, #12]
   15bc6:	2800      	cmp	r0, #0
   15bc8:	d0e4      	beq.n	15b94 <logobj_event_handler+0x94>
   15bca:	230e      	movs	r3, #14
   15bcc:	2000      	movs	r0, #0
   15bce:	606b      	str	r3, [r5, #4]
   15bd0:	b005      	add	sp, #20
   15bd2:	bd30      	pop	{r4, r5, pc}
   15bd4:	68c3      	ldr	r3, [r0, #12]
   15bd6:	2b01      	cmp	r3, #1
   15bd8:	d1a5      	bne.n	15b26 <logobj_event_handler+0x26>
   15bda:	e7f6      	b.n	15bca <logobj_event_handler+0xca>
   15bdc:	4618      	mov	r0, r3
   15bde:	e7b5      	b.n	15b4c <logobj_event_handler+0x4c>
   15be0:	2002      	movs	r0, #2
   15be2:	e7b3      	b.n	15b4c <logobj_event_handler+0x4c>
   15be4:	230e      	movs	r3, #14
   15be6:	606b      	str	r3, [r5, #4]
   15be8:	e7b0      	b.n	15b4c <logobj_event_handler+0x4c>
   15bea:	4a03      	ldr	r2, [pc, #12]	; (15bf8 <logobj_event_handler+0xf8>)
   15bec:	7011      	strb	r1, [r2, #0]
   15bee:	e7cf      	b.n	15b90 <logobj_event_handler+0x90>
   15bf0:	200230c4 	.word	0x200230c4
   15bf4:	2002af2a 	.word	0x2002af2a
   15bf8:	2002af2b 	.word	0x2002af2b

00015bfc <logobj_interface_init>:
   15bfc:	2300      	movs	r3, #0
   15bfe:	b510      	push	{r4, lr}
   15c00:	4808      	ldr	r0, [pc, #32]	; (15c24 <logobj_interface_init+0x28>)
   15c02:	4c09      	ldr	r4, [pc, #36]	; (15c28 <logobj_interface_init+0x2c>)
   15c04:	4909      	ldr	r1, [pc, #36]	; (15c2c <logobj_interface_init+0x30>)
   15c06:	4a0a      	ldr	r2, [pc, #40]	; (15c30 <logobj_interface_init+0x34>)
   15c08:	7023      	strb	r3, [r4, #0]
   15c0a:	6003      	str	r3, [r0, #0]
   15c0c:	700b      	strb	r3, [r1, #0]
   15c0e:	6013      	str	r3, [r2, #0]
   15c10:	f004 fc0c 	bl	1a42c <rpc_logobj_client_init>
   15c14:	b918      	cbnz	r0, 15c1e <logobj_interface_init+0x22>
   15c16:	2201      	movs	r2, #1
   15c18:	4b06      	ldr	r3, [pc, #24]	; (15c34 <logobj_interface_init+0x38>)
   15c1a:	701a      	strb	r2, [r3, #0]
   15c1c:	bd10      	pop	{r4, pc}
   15c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15c22:	bd10      	pop	{r4, pc}
   15c24:	200230c4 	.word	0x200230c4
   15c28:	2002af2b 	.word	0x2002af2b
   15c2c:	2002af2a 	.word	0x2002af2a
   15c30:	200230c0 	.word	0x200230c0
   15c34:	2002af2c 	.word	0x2002af2c

00015c38 <logobj_interface_open>:
   15c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15c3c:	2400      	movs	r4, #0
   15c3e:	4b5b      	ldr	r3, [pc, #364]	; (15dac <logobj_interface_open+0x174>)
   15c40:	b084      	sub	sp, #16
   15c42:	781b      	ldrb	r3, [r3, #0]
   15c44:	9401      	str	r4, [sp, #4]
   15c46:	2b00      	cmp	r3, #0
   15c48:	f000 809f 	beq.w	15d8a <logobj_interface_open+0x152>
   15c4c:	2866      	cmp	r0, #102	; 0x66
   15c4e:	4680      	mov	r8, r0
   15c50:	f040 808f 	bne.w	15d72 <logobj_interface_open+0x13a>
   15c54:	2902      	cmp	r1, #2
   15c56:	4689      	mov	r9, r1
   15c58:	f040 808b 	bne.w	15d72 <logobj_interface_open+0x13a>
   15c5c:	f240 2305 	movw	r3, #517	; 0x205
   15c60:	429a      	cmp	r2, r3
   15c62:	4692      	mov	sl, r2
   15c64:	f040 8085 	bne.w	15d72 <logobj_interface_open+0x13a>
   15c68:	4f51      	ldr	r7, [pc, #324]	; (15db0 <logobj_interface_open+0x178>)
   15c6a:	683d      	ldr	r5, [r7, #0]
   15c6c:	2d00      	cmp	r5, #0
   15c6e:	f040 8086 	bne.w	15d7e <logobj_interface_open+0x146>
   15c72:	4a50      	ldr	r2, [pc, #320]	; (15db4 <logobj_interface_open+0x17c>)
   15c74:	a801      	add	r0, sp, #4
   15c76:	f007 fcf7 	bl	1d668 <interface_socket_allocate>
   15c7a:	9b01      	ldr	r3, [sp, #4]
   15c7c:	4606      	mov	r6, r0
   15c7e:	2b00      	cmp	r3, #0
   15c80:	f000 808d 	beq.w	15d9e <logobj_interface_open+0x166>
   15c84:	4629      	mov	r1, r5
   15c86:	2204      	movs	r2, #4
   15c88:	484b      	ldr	r0, [pc, #300]	; (15db8 <logobj_interface_open+0x180>)
   15c8a:	603b      	str	r3, [r7, #0]
   15c8c:	f011 fe95 	bl	279ba <memset>
   15c90:	9c01      	ldr	r4, [sp, #4]
   15c92:	4629      	mov	r1, r5
   15c94:	e9c4 8903 	strd	r8, r9, [r4, #12]
   15c98:	f8c4 a014 	str.w	sl, [r4, #20]
   15c9c:	a802      	add	r0, sp, #8
   15c9e:	f004 fbcb 	bl	1a438 <rpc_logobj_client_request_alloc>
   15ca2:	2800      	cmp	r0, #0
   15ca4:	d142      	bne.n	15d2c <logobj_interface_open+0xf4>
   15ca6:	2201      	movs	r2, #1
   15ca8:	2104      	movs	r1, #4
   15caa:	9b02      	ldr	r3, [sp, #8]
   15cac:	4d43      	ldr	r5, [pc, #268]	; (15dbc <logobj_interface_open+0x184>)
   15cae:	7358      	strb	r0, [r3, #13]
   15cb0:	7398      	strb	r0, [r3, #14]
   15cb2:	73d8      	strb	r0, [r3, #15]
   15cb4:	7258      	strb	r0, [r3, #9]
   15cb6:	7298      	strb	r0, [r3, #10]
   15cb8:	72d8      	strb	r0, [r3, #11]
   15cba:	7219      	strb	r1, [r3, #8]
   15cbc:	702a      	strb	r2, [r5, #0]
   15cbe:	731a      	strb	r2, [r3, #12]
   15cc0:	6822      	ldr	r2, [r4, #0]
   15cc2:	4618      	mov	r0, r3
   15cc4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   15cc8:	6022      	str	r2, [r4, #0]
   15cca:	f247 0101 	movw	r1, #28673	; 0x7001
   15cce:	f004 fbcb 	bl	1a468 <rpc_logobj_client_request_send>
   15cd2:	bb68      	cbnz	r0, 15d30 <logobj_interface_open+0xf8>
   15cd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15cd6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   15cda:	2900      	cmp	r1, #0
   15cdc:	bf08      	it	eq
   15cde:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   15ce2:	ab04      	add	r3, sp, #16
   15ce4:	f843 1d04 	str.w	r1, [r3, #-4]!
   15ce8:	4630      	mov	r0, r6
   15cea:	4611      	mov	r1, r2
   15cec:	f007 fd6e 	bl	1d7cc <interface_socket_wait>
   15cf0:	4604      	mov	r4, r0
   15cf2:	b310      	cbz	r0, 15d3a <logobj_interface_open+0x102>
   15cf4:	9a01      	ldr	r2, [sp, #4]
   15cf6:	2e00      	cmp	r6, #0
   15cf8:	6813      	ldr	r3, [r2, #0]
   15cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15cfe:	6013      	str	r3, [r2, #0]
   15d00:	9a01      	ldr	r2, [sp, #4]
   15d02:	6813      	ldr	r3, [r2, #0]
   15d04:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   15d08:	6013      	str	r3, [r2, #0]
   15d0a:	9a01      	ldr	r2, [sp, #4]
   15d0c:	6813      	ldr	r3, [r2, #0]
   15d0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   15d12:	6013      	str	r3, [r2, #0]
   15d14:	da3f      	bge.n	15d96 <logobj_interface_open+0x15e>
   15d16:	2300      	movs	r3, #0
   15d18:	4620      	mov	r0, r4
   15d1a:	603b      	str	r3, [r7, #0]
   15d1c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   15d20:	f7fd ffb6 	bl	13c90 <bsd_os_errno_set>
   15d24:	4630      	mov	r0, r6
   15d26:	b004      	add	sp, #16
   15d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15d2c:	240c      	movs	r4, #12
   15d2e:	e7e1      	b.n	15cf4 <logobj_interface_open+0xbc>
   15d30:	9802      	ldr	r0, [sp, #8]
   15d32:	f004 fbaf 	bl	1a494 <rpc_logobj_client_message_free>
   15d36:	2405      	movs	r4, #5
   15d38:	e7dc      	b.n	15cf4 <logobj_interface_open+0xbc>
   15d3a:	4630      	mov	r0, r6
   15d3c:	f007 fdc6 	bl	1d8cc <interface_socket_from_handle_get>
   15d40:	b120      	cbz	r0, 15d4c <logobj_interface_open+0x114>
   15d42:	6844      	ldr	r4, [r0, #4]
   15d44:	b114      	cbz	r4, 15d4c <logobj_interface_open+0x114>
   15d46:	2300      	movs	r3, #0
   15d48:	6043      	str	r3, [r0, #4]
   15d4a:	e7d3      	b.n	15cf4 <logobj_interface_open+0xbc>
   15d4c:	4630      	mov	r0, r6
   15d4e:	9a01      	ldr	r2, [sp, #4]
   15d50:	6813      	ldr	r3, [r2, #0]
   15d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15d56:	6013      	str	r3, [r2, #0]
   15d58:	9a01      	ldr	r2, [sp, #4]
   15d5a:	6813      	ldr	r3, [r2, #0]
   15d5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   15d60:	6013      	str	r3, [r2, #0]
   15d62:	9a01      	ldr	r2, [sp, #4]
   15d64:	6813      	ldr	r3, [r2, #0]
   15d66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   15d6a:	6013      	str	r3, [r2, #0]
   15d6c:	b004      	add	sp, #16
   15d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15d72:	2016      	movs	r0, #22
   15d74:	f7fd ff8c 	bl	13c90 <bsd_os_errno_set>
   15d78:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   15d7c:	e7d2      	b.n	15d24 <logobj_interface_open+0xec>
   15d7e:	2001      	movs	r0, #1
   15d80:	f7fd ff86 	bl	13c90 <bsd_os_errno_set>
   15d84:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   15d88:	e7cc      	b.n	15d24 <logobj_interface_open+0xec>
   15d8a:	2005      	movs	r0, #5
   15d8c:	f7fd ff80 	bl	13c90 <bsd_os_errno_set>
   15d90:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   15d94:	e7c6      	b.n	15d24 <logobj_interface_open+0xec>
   15d96:	4630      	mov	r0, r6
   15d98:	f007 fcca 	bl	1d730 <interface_socket_free>
   15d9c:	e7bb      	b.n	15d16 <logobj_interface_open+0xde>
   15d9e:	2018      	movs	r0, #24
   15da0:	f7fd ff76 	bl	13c90 <bsd_os_errno_set>
   15da4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   15da8:	e7bc      	b.n	15d24 <logobj_interface_open+0xec>
   15daa:	bf00      	nop
   15dac:	2002af2c 	.word	0x2002af2c
   15db0:	200230c4 	.word	0x200230c4
   15db4:	00015ae9 	.word	0x00015ae9
   15db8:	200230c0 	.word	0x200230c0
   15dbc:	2002af2a 	.word	0x2002af2a

00015dc0 <logobj_interface_read>:
   15dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15dc4:	b087      	sub	sp, #28
   15dc6:	2900      	cmp	r1, #0
   15dc8:	d06b      	beq.n	15ea2 <logobj_interface_read+0xe2>
   15dca:	2a00      	cmp	r2, #0
   15dcc:	4617      	mov	r7, r2
   15dce:	dd68      	ble.n	15ea2 <logobj_interface_read+0xe2>
   15dd0:	461d      	mov	r5, r3
   15dd2:	4680      	mov	r8, r0
   15dd4:	460e      	mov	r6, r1
   15dd6:	f007 fd79 	bl	1d8cc <interface_socket_from_handle_get>
   15dda:	4604      	mov	r4, r0
   15ddc:	2800      	cmp	r0, #0
   15dde:	d066      	beq.n	15eae <logobj_interface_read+0xee>
   15de0:	bb4d      	cbnz	r5, 15e36 <logobj_interface_read+0x76>
   15de2:	69e0      	ldr	r0, [r4, #28]
   15de4:	07aa      	lsls	r2, r5, #30
   15de6:	6803      	ldr	r3, [r0, #0]
   15de8:	68db      	ldr	r3, [r3, #12]
   15dea:	d52d      	bpl.n	15e48 <logobj_interface_read+0x88>
   15dec:	4798      	blx	r3
   15dee:	3001      	adds	r0, #1
   15df0:	d047      	beq.n	15e82 <logobj_interface_read+0xc2>
   15df2:	6823      	ldr	r3, [r4, #0]
   15df4:	69e0      	ldr	r0, [r4, #28]
   15df6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   15dfa:	d044      	beq.n	15e86 <logobj_interface_read+0xc6>
   15dfc:	2100      	movs	r1, #0
   15dfe:	6823      	ldr	r3, [r4, #0]
   15e00:	462a      	mov	r2, r5
   15e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   15e06:	6023      	str	r3, [r4, #0]
   15e08:	e9cd 1104 	strd	r1, r1, [sp, #16]
   15e0c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   15e10:	6803      	ldr	r3, [r0, #0]
   15e12:	a902      	add	r1, sp, #8
   15e14:	689b      	ldr	r3, [r3, #8]
   15e16:	4798      	blx	r3
   15e18:	4605      	mov	r5, r0
   15e1a:	69e0      	ldr	r0, [r4, #28]
   15e1c:	6803      	ldr	r3, [r0, #0]
   15e1e:	68db      	ldr	r3, [r3, #12]
   15e20:	4798      	blx	r3
   15e22:	3001      	adds	r0, #1
   15e24:	d003      	beq.n	15e2e <logobj_interface_read+0x6e>
   15e26:	6823      	ldr	r3, [r4, #0]
   15e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   15e2c:	6023      	str	r3, [r4, #0]
   15e2e:	4628      	mov	r0, r5
   15e30:	b007      	add	sp, #28
   15e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15e36:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   15e3a:	d1d2      	bne.n	15de2 <logobj_interface_read+0x22>
   15e3c:	202d      	movs	r0, #45	; 0x2d
   15e3e:	f7fd ff27 	bl	13c90 <bsd_os_errno_set>
   15e42:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   15e46:	e7f2      	b.n	15e2e <logobj_interface_read+0x6e>
   15e48:	6822      	ldr	r2, [r4, #0]
   15e4a:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   15e4e:	d1cd      	bne.n	15dec <logobj_interface_read+0x2c>
   15e50:	4798      	blx	r3
   15e52:	1c43      	adds	r3, r0, #1
   15e54:	d1cd      	bne.n	15df2 <logobj_interface_read+0x32>
   15e56:	6a22      	ldr	r2, [r4, #32]
   15e58:	ab06      	add	r3, sp, #24
   15e5a:	2a00      	cmp	r2, #0
   15e5c:	bf18      	it	ne
   15e5e:	4610      	movne	r0, r2
   15e60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15e64:	f843 0d14 	str.w	r0, [r3, #-20]!
   15e68:	4611      	mov	r1, r2
   15e6a:	4640      	mov	r0, r8
   15e6c:	f007 fcae 	bl	1d7cc <interface_socket_wait>
   15e70:	b158      	cbz	r0, 15e8a <logobj_interface_read+0xca>
   15e72:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   15e76:	f7fd ff0b 	bl	13c90 <bsd_os_errno_set>
   15e7a:	4628      	mov	r0, r5
   15e7c:	b007      	add	sp, #28
   15e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15e82:	2023      	movs	r0, #35	; 0x23
   15e84:	e7f5      	b.n	15e72 <logobj_interface_read+0xb2>
   15e86:	461d      	mov	r5, r3
   15e88:	e7c8      	b.n	15e1c <logobj_interface_read+0x5c>
   15e8a:	4640      	mov	r0, r8
   15e8c:	f007 fd1e 	bl	1d8cc <interface_socket_from_handle_get>
   15e90:	4603      	mov	r3, r0
   15e92:	2800      	cmp	r0, #0
   15e94:	d0ad      	beq.n	15df2 <logobj_interface_read+0x32>
   15e96:	6840      	ldr	r0, [r0, #4]
   15e98:	2800      	cmp	r0, #0
   15e9a:	d0aa      	beq.n	15df2 <logobj_interface_read+0x32>
   15e9c:	f8c3 9004 	str.w	r9, [r3, #4]
   15ea0:	e7e7      	b.n	15e72 <logobj_interface_read+0xb2>
   15ea2:	2016      	movs	r0, #22
   15ea4:	f7fd fef4 	bl	13c90 <bsd_os_errno_set>
   15ea8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   15eac:	e7bf      	b.n	15e2e <logobj_interface_read+0x6e>
   15eae:	2009      	movs	r0, #9
   15eb0:	f7fd feee 	bl	13c90 <bsd_os_errno_set>
   15eb4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   15eb8:	e7b9      	b.n	15e2e <logobj_interface_read+0x6e>
   15eba:	bf00      	nop

00015ebc <logobj_interface_write>:
   15ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ec0:	b082      	sub	sp, #8
   15ec2:	2900      	cmp	r1, #0
   15ec4:	d06b      	beq.n	15f9e <logobj_interface_write+0xe2>
   15ec6:	2a04      	cmp	r2, #4
   15ec8:	d169      	bne.n	15f9e <logobj_interface_write+0xe2>
   15eca:	461f      	mov	r7, r3
   15ecc:	4606      	mov	r6, r0
   15ece:	460d      	mov	r5, r1
   15ed0:	f007 fcfc 	bl	1d8cc <interface_socket_from_handle_get>
   15ed4:	4604      	mov	r4, r0
   15ed6:	2800      	cmp	r0, #0
   15ed8:	d074      	beq.n	15fc4 <logobj_interface_write+0x108>
   15eda:	b1e7      	cbz	r7, 15f16 <logobj_interface_write+0x5a>
   15edc:	07b8      	lsls	r0, r7, #30
   15ede:	d56b      	bpl.n	15fb8 <logobj_interface_write+0xfc>
   15ee0:	6823      	ldr	r3, [r4, #0]
   15ee2:	039b      	lsls	r3, r3, #14
   15ee4:	d564      	bpl.n	15fb0 <logobj_interface_write+0xf4>
   15ee6:	2700      	movs	r7, #0
   15ee8:	6823      	ldr	r3, [r4, #0]
   15eea:	2100      	movs	r1, #0
   15eec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   15ef0:	6023      	str	r3, [r4, #0]
   15ef2:	4668      	mov	r0, sp
   15ef4:	f8d5 8000 	ldr.w	r8, [r5]
   15ef8:	f004 fa9e 	bl	1a438 <rpc_logobj_client_request_alloc>
   15efc:	b198      	cbz	r0, 15f26 <logobj_interface_write+0x6a>
   15efe:	200c      	movs	r0, #12
   15f00:	6823      	ldr	r3, [r4, #0]
   15f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15f06:	6023      	str	r3, [r4, #0]
   15f08:	f7fd fec2 	bl	13c90 <bsd_os_errno_set>
   15f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15f10:	b002      	add	sp, #8
   15f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15f16:	6803      	ldr	r3, [r0, #0]
   15f18:	00d9      	lsls	r1, r3, #3
   15f1a:	d4e1      	bmi.n	15ee0 <logobj_interface_write+0x24>
   15f1c:	6803      	ldr	r3, [r0, #0]
   15f1e:	039a      	lsls	r2, r3, #14
   15f20:	d548      	bpl.n	15fb4 <logobj_interface_write+0xf8>
   15f22:	2701      	movs	r7, #1
   15f24:	e7e0      	b.n	15ee8 <logobj_interface_write+0x2c>
   15f26:	2504      	movs	r5, #4
   15f28:	9b00      	ldr	r3, [sp, #0]
   15f2a:	f247 0103 	movw	r1, #28675	; 0x7003
   15f2e:	f8c3 800c 	str.w	r8, [r3, #12]
   15f32:	7258      	strb	r0, [r3, #9]
   15f34:	7298      	strb	r0, [r3, #10]
   15f36:	72d8      	strb	r0, [r3, #11]
   15f38:	721d      	strb	r5, [r3, #8]
   15f3a:	4618      	mov	r0, r3
   15f3c:	f004 fa94 	bl	1a468 <rpc_logobj_client_request_send>
   15f40:	4680      	mov	r8, r0
   15f42:	bb18      	cbnz	r0, 15f8c <logobj_interface_write+0xd0>
   15f44:	b1d7      	cbz	r7, 15f7c <logobj_interface_write+0xc0>
   15f46:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15f48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15f4c:	2900      	cmp	r1, #0
   15f4e:	bf08      	it	eq
   15f50:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   15f54:	ab02      	add	r3, sp, #8
   15f56:	f843 1d04 	str.w	r1, [r3, #-4]!
   15f5a:	4630      	mov	r0, r6
   15f5c:	4611      	mov	r1, r2
   15f5e:	f007 fc35 	bl	1d7cc <interface_socket_wait>
   15f62:	b120      	cbz	r0, 15f6e <logobj_interface_write+0xb2>
   15f64:	6823      	ldr	r3, [r4, #0]
   15f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15f6a:	6023      	str	r3, [r4, #0]
   15f6c:	e7cc      	b.n	15f08 <logobj_interface_write+0x4c>
   15f6e:	4630      	mov	r0, r6
   15f70:	f007 fcac 	bl	1d8cc <interface_socket_from_handle_get>
   15f74:	4603      	mov	r3, r0
   15f76:	b108      	cbz	r0, 15f7c <logobj_interface_write+0xc0>
   15f78:	6840      	ldr	r0, [r0, #4]
   15f7a:	b9b0      	cbnz	r0, 15faa <logobj_interface_write+0xee>
   15f7c:	4628      	mov	r0, r5
   15f7e:	6823      	ldr	r3, [r4, #0]
   15f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15f84:	6023      	str	r3, [r4, #0]
   15f86:	b002      	add	sp, #8
   15f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15f8c:	9800      	ldr	r0, [sp, #0]
   15f8e:	f004 fa81 	bl	1a494 <rpc_logobj_client_message_free>
   15f92:	6823      	ldr	r3, [r4, #0]
   15f94:	2005      	movs	r0, #5
   15f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15f9a:	6023      	str	r3, [r4, #0]
   15f9c:	e7b4      	b.n	15f08 <logobj_interface_write+0x4c>
   15f9e:	2016      	movs	r0, #22
   15fa0:	f7fd fe76 	bl	13c90 <bsd_os_errno_set>
   15fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15fa8:	e7b2      	b.n	15f10 <logobj_interface_write+0x54>
   15faa:	f8c3 8004 	str.w	r8, [r3, #4]
   15fae:	e7d9      	b.n	15f64 <logobj_interface_write+0xa8>
   15fb0:	2073      	movs	r0, #115	; 0x73
   15fb2:	e7a9      	b.n	15f08 <logobj_interface_write+0x4c>
   15fb4:	2009      	movs	r0, #9
   15fb6:	e7a7      	b.n	15f08 <logobj_interface_write+0x4c>
   15fb8:	202d      	movs	r0, #45	; 0x2d
   15fba:	f7fd fe69 	bl	13c90 <bsd_os_errno_set>
   15fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15fc2:	e7a5      	b.n	15f10 <logobj_interface_write+0x54>
   15fc4:	2009      	movs	r0, #9
   15fc6:	f7fd fe63 	bl	13c90 <bsd_os_errno_set>
   15fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15fce:	e79f      	b.n	15f10 <logobj_interface_write+0x54>

00015fd0 <logobj_interface_setopt>:
   15fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15fd2:	2901      	cmp	r1, #1
   15fd4:	b085      	sub	sp, #20
   15fd6:	d06d      	beq.n	160b4 <logobj_interface_setopt+0xe4>
   15fd8:	461e      	mov	r6, r3
   15fda:	f240 2305 	movw	r3, #517	; 0x205
   15fde:	4299      	cmp	r1, r3
   15fe0:	f040 80a0 	bne.w	16124 <logobj_interface_setopt+0x154>
   15fe4:	4607      	mov	r7, r0
   15fe6:	4615      	mov	r5, r2
   15fe8:	f007 fc70 	bl	1d8cc <interface_socket_from_handle_get>
   15fec:	4604      	mov	r4, r0
   15fee:	2800      	cmp	r0, #0
   15ff0:	f000 80c3 	beq.w	1617a <logobj_interface_setopt+0x1aa>
   15ff4:	2d01      	cmp	r5, #1
   15ff6:	d019      	beq.n	1602c <logobj_interface_setopt+0x5c>
   15ff8:	2d02      	cmp	r5, #2
   15ffa:	d010      	beq.n	1601e <logobj_interface_setopt+0x4e>
   15ffc:	252a      	movs	r5, #42	; 0x2a
   15ffe:	6803      	ldr	r3, [r0, #0]
   16000:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   16004:	6023      	str	r3, [r4, #0]
   16006:	6823      	ldr	r3, [r4, #0]
   16008:	4628      	mov	r0, r5
   1600a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1600e:	6023      	str	r3, [r4, #0]
   16010:	f7fd fe3e 	bl	13c90 <bsd_os_errno_set>
   16014:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16018:	4628      	mov	r0, r5
   1601a:	b005      	add	sp, #20
   1601c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1601e:	b116      	cbz	r6, 16026 <logobj_interface_setopt+0x56>
   16020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16022:	2b01      	cmp	r3, #1
   16024:	d04e      	beq.n	160c4 <logobj_interface_setopt+0xf4>
   16026:	6823      	ldr	r3, [r4, #0]
   16028:	2516      	movs	r5, #22
   1602a:	e7e9      	b.n	16000 <logobj_interface_setopt+0x30>
   1602c:	2e00      	cmp	r6, #0
   1602e:	d0fa      	beq.n	16026 <logobj_interface_setopt+0x56>
   16030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16032:	2b04      	cmp	r3, #4
   16034:	d1f7      	bne.n	16026 <logobj_interface_setopt+0x56>
   16036:	2100      	movs	r1, #0
   16038:	a803      	add	r0, sp, #12
   1603a:	f004 f9fd 	bl	1a438 <rpc_logobj_client_request_alloc>
   1603e:	4605      	mov	r5, r0
   16040:	2800      	cmp	r0, #0
   16042:	d175      	bne.n	16130 <logobj_interface_setopt+0x160>
   16044:	9803      	ldr	r0, [sp, #12]
   16046:	2208      	movs	r2, #8
   16048:	4629      	mov	r1, r5
   1604a:	300c      	adds	r0, #12
   1604c:	f011 fcb5 	bl	279ba <memset>
   16050:	9803      	ldr	r0, [sp, #12]
   16052:	4631      	mov	r1, r6
   16054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16056:	300c      	adds	r0, #12
   16058:	f011 fc75 	bl	27946 <memcpy>
   1605c:	2308      	movs	r3, #8
   1605e:	9803      	ldr	r0, [sp, #12]
   16060:	f247 0102 	movw	r1, #28674	; 0x7002
   16064:	7203      	strb	r3, [r0, #8]
   16066:	7245      	strb	r5, [r0, #9]
   16068:	7285      	strb	r5, [r0, #10]
   1606a:	72c5      	strb	r5, [r0, #11]
   1606c:	6823      	ldr	r3, [r4, #0]
   1606e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   16072:	6023      	str	r3, [r4, #0]
   16074:	f004 f9f8 	bl	1a468 <rpc_logobj_client_request_send>
   16078:	2800      	cmp	r0, #0
   1607a:	d178      	bne.n	1616e <logobj_interface_setopt+0x19e>
   1607c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1607e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   16082:	2900      	cmp	r1, #0
   16084:	bf08      	it	eq
   16086:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   1608a:	ab04      	add	r3, sp, #16
   1608c:	f843 1d08 	str.w	r1, [r3, #-8]!
   16090:	4638      	mov	r0, r7
   16092:	4611      	mov	r1, r2
   16094:	f007 fb9a 	bl	1d7cc <interface_socket_wait>
   16098:	4605      	mov	r5, r0
   1609a:	2800      	cmp	r0, #0
   1609c:	d140      	bne.n	16120 <logobj_interface_setopt+0x150>
   1609e:	4638      	mov	r0, r7
   160a0:	f007 fc14 	bl	1d8cc <interface_socket_from_handle_get>
   160a4:	2800      	cmp	r0, #0
   160a6:	d04e      	beq.n	16146 <logobj_interface_setopt+0x176>
   160a8:	6843      	ldr	r3, [r0, #4]
   160aa:	2b00      	cmp	r3, #0
   160ac:	d04b      	beq.n	16146 <logobj_interface_setopt+0x176>
   160ae:	6045      	str	r5, [r0, #4]
   160b0:	461d      	mov	r5, r3
   160b2:	e035      	b.n	16120 <logobj_interface_setopt+0x150>
   160b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   160b6:	9400      	str	r4, [sp, #0]
   160b8:	f007 fc30 	bl	1d91c <interface_socket_setopt>
   160bc:	4605      	mov	r5, r0
   160be:	4628      	mov	r0, r5
   160c0:	b005      	add	sp, #20
   160c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   160c4:	2100      	movs	r1, #0
   160c6:	a802      	add	r0, sp, #8
   160c8:	7835      	ldrb	r5, [r6, #0]
   160ca:	f004 f9b5 	bl	1a438 <rpc_logobj_client_request_alloc>
   160ce:	bb78      	cbnz	r0, 16130 <logobj_interface_setopt+0x160>
   160d0:	2d01      	cmp	r5, #1
   160d2:	bf08      	it	eq
   160d4:	4b2c      	ldreq	r3, [pc, #176]	; (16188 <logobj_interface_setopt+0x1b8>)
   160d6:	f04f 0204 	mov.w	r2, #4
   160da:	bf08      	it	eq
   160dc:	701d      	strbeq	r5, [r3, #0]
   160de:	2300      	movs	r3, #0
   160e0:	9802      	ldr	r0, [sp, #8]
   160e2:	f247 0101 	movw	r1, #28673	; 0x7001
   160e6:	7243      	strb	r3, [r0, #9]
   160e8:	60c5      	str	r5, [r0, #12]
   160ea:	7283      	strb	r3, [r0, #10]
   160ec:	72c3      	strb	r3, [r0, #11]
   160ee:	7202      	strb	r2, [r0, #8]
   160f0:	6823      	ldr	r3, [r4, #0]
   160f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   160f6:	6023      	str	r3, [r4, #0]
   160f8:	f004 f9b6 	bl	1a468 <rpc_logobj_client_request_send>
   160fc:	4606      	mov	r6, r0
   160fe:	bb80      	cbnz	r0, 16162 <logobj_interface_setopt+0x192>
   16100:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16102:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   16106:	2900      	cmp	r1, #0
   16108:	bf08      	it	eq
   1610a:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   1610e:	ab04      	add	r3, sp, #16
   16110:	f843 1d04 	str.w	r1, [r3, #-4]!
   16114:	4638      	mov	r0, r7
   16116:	4611      	mov	r1, r2
   16118:	f007 fb58 	bl	1d7cc <interface_socket_wait>
   1611c:	4605      	mov	r5, r0
   1611e:	b150      	cbz	r0, 16136 <logobj_interface_setopt+0x166>
   16120:	6823      	ldr	r3, [r4, #0]
   16122:	e76d      	b.n	16000 <logobj_interface_setopt+0x30>
   16124:	202a      	movs	r0, #42	; 0x2a
   16126:	f7fd fdb3 	bl	13c90 <bsd_os_errno_set>
   1612a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1612e:	e773      	b.n	16018 <logobj_interface_setopt+0x48>
   16130:	6823      	ldr	r3, [r4, #0]
   16132:	250c      	movs	r5, #12
   16134:	e764      	b.n	16000 <logobj_interface_setopt+0x30>
   16136:	4638      	mov	r0, r7
   16138:	f007 fbc8 	bl	1d8cc <interface_socket_from_handle_get>
   1613c:	b140      	cbz	r0, 16150 <logobj_interface_setopt+0x180>
   1613e:	6845      	ldr	r5, [r0, #4]
   16140:	b135      	cbz	r5, 16150 <logobj_interface_setopt+0x180>
   16142:	6046      	str	r6, [r0, #4]
   16144:	e7ec      	b.n	16120 <logobj_interface_setopt+0x150>
   16146:	4631      	mov	r1, r6
   16148:	2204      	movs	r2, #4
   1614a:	4810      	ldr	r0, [pc, #64]	; (1618c <logobj_interface_setopt+0x1bc>)
   1614c:	f011 fbfb 	bl	27946 <memcpy>
   16150:	6823      	ldr	r3, [r4, #0]
   16152:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   16156:	6023      	str	r3, [r4, #0]
   16158:	6823      	ldr	r3, [r4, #0]
   1615a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1615e:	6023      	str	r3, [r4, #0]
   16160:	e75a      	b.n	16018 <logobj_interface_setopt+0x48>
   16162:	9802      	ldr	r0, [sp, #8]
   16164:	f004 f996 	bl	1a494 <rpc_logobj_client_message_free>
   16168:	2505      	movs	r5, #5
   1616a:	6823      	ldr	r3, [r4, #0]
   1616c:	e748      	b.n	16000 <logobj_interface_setopt+0x30>
   1616e:	9803      	ldr	r0, [sp, #12]
   16170:	f004 f990 	bl	1a494 <rpc_logobj_client_message_free>
   16174:	2505      	movs	r5, #5
   16176:	6823      	ldr	r3, [r4, #0]
   16178:	e742      	b.n	16000 <logobj_interface_setopt+0x30>
   1617a:	2009      	movs	r0, #9
   1617c:	f7fd fd88 	bl	13c90 <bsd_os_errno_set>
   16180:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16184:	e748      	b.n	16018 <logobj_interface_setopt+0x48>
   16186:	bf00      	nop
   16188:	2002af2a 	.word	0x2002af2a
   1618c:	200230c0 	.word	0x200230c0

00016190 <logobj_interface_getopt>:
   16190:	b5f0      	push	{r4, r5, r6, r7, lr}
   16192:	2901      	cmp	r1, #1
   16194:	b083      	sub	sp, #12
   16196:	9e08      	ldr	r6, [sp, #32]
   16198:	d030      	beq.n	161fc <logobj_interface_getopt+0x6c>
   1619a:	461f      	mov	r7, r3
   1619c:	f240 2305 	movw	r3, #517	; 0x205
   161a0:	4299      	cmp	r1, r3
   161a2:	d134      	bne.n	1620e <logobj_interface_getopt+0x7e>
   161a4:	4615      	mov	r5, r2
   161a6:	f007 fb91 	bl	1d8cc <interface_socket_from_handle_get>
   161aa:	2800      	cmp	r0, #0
   161ac:	d037      	beq.n	1621e <logobj_interface_getopt+0x8e>
   161ae:	2d01      	cmp	r5, #1
   161b0:	d015      	beq.n	161de <logobj_interface_getopt+0x4e>
   161b2:	2d02      	cmp	r5, #2
   161b4:	d10b      	bne.n	161ce <logobj_interface_getopt+0x3e>
   161b6:	b387      	cbz	r7, 1621a <logobj_interface_getopt+0x8a>
   161b8:	6833      	ldr	r3, [r6, #0]
   161ba:	b373      	cbz	r3, 1621a <logobj_interface_getopt+0x8a>
   161bc:	2300      	movs	r3, #0
   161be:	2201      	movs	r2, #1
   161c0:	4618      	mov	r0, r3
   161c2:	491a      	ldr	r1, [pc, #104]	; (1622c <logobj_interface_getopt+0x9c>)
   161c4:	7809      	ldrb	r1, [r1, #0]
   161c6:	7039      	strb	r1, [r7, #0]
   161c8:	6032      	str	r2, [r6, #0]
   161ca:	b003      	add	sp, #12
   161cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   161ce:	2009      	movs	r0, #9
   161d0:	f7fd fd5e 	bl	13c90 <bsd_os_errno_set>
   161d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   161d8:	4618      	mov	r0, r3
   161da:	b003      	add	sp, #12
   161dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   161de:	b1e7      	cbz	r7, 1621a <logobj_interface_getopt+0x8a>
   161e0:	6833      	ldr	r3, [r6, #0]
   161e2:	2b03      	cmp	r3, #3
   161e4:	d919      	bls.n	1621a <logobj_interface_getopt+0x8a>
   161e6:	4638      	mov	r0, r7
   161e8:	2204      	movs	r2, #4
   161ea:	4911      	ldr	r1, [pc, #68]	; (16230 <logobj_interface_getopt+0xa0>)
   161ec:	f011 fbab 	bl	27946 <memcpy>
   161f0:	2300      	movs	r3, #0
   161f2:	2204      	movs	r2, #4
   161f4:	4618      	mov	r0, r3
   161f6:	6032      	str	r2, [r6, #0]
   161f8:	b003      	add	sp, #12
   161fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   161fc:	9600      	str	r6, [sp, #0]
   161fe:	f007 fbd3 	bl	1d9a8 <interface_socket_getopt>
   16202:	4603      	mov	r3, r0
   16204:	2800      	cmp	r0, #0
   16206:	d1e3      	bne.n	161d0 <logobj_interface_getopt+0x40>
   16208:	4618      	mov	r0, r3
   1620a:	b003      	add	sp, #12
   1620c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1620e:	202a      	movs	r0, #42	; 0x2a
   16210:	f7fd fd3e 	bl	13c90 <bsd_os_errno_set>
   16214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16218:	e7de      	b.n	161d8 <logobj_interface_getopt+0x48>
   1621a:	2016      	movs	r0, #22
   1621c:	e7d8      	b.n	161d0 <logobj_interface_getopt+0x40>
   1621e:	2009      	movs	r0, #9
   16220:	f7fd fd36 	bl	13c90 <bsd_os_errno_set>
   16224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16228:	e7d6      	b.n	161d8 <logobj_interface_getopt+0x48>
   1622a:	bf00      	nop
   1622c:	2002af2b 	.word	0x2002af2b
   16230:	200230c0 	.word	0x200230c0

00016234 <logobj_interface_close>:
   16234:	b510      	push	{r4, lr}
   16236:	4604      	mov	r4, r0
   16238:	f007 fb48 	bl	1d8cc <interface_socket_from_handle_get>
   1623c:	b138      	cbz	r0, 1624e <logobj_interface_close+0x1a>
   1623e:	4620      	mov	r0, r4
   16240:	f007 fa76 	bl	1d730 <interface_socket_free>
   16244:	2300      	movs	r3, #0
   16246:	4a05      	ldr	r2, [pc, #20]	; (1625c <logobj_interface_close+0x28>)
   16248:	4618      	mov	r0, r3
   1624a:	6013      	str	r3, [r2, #0]
   1624c:	bd10      	pop	{r4, pc}
   1624e:	2009      	movs	r0, #9
   16250:	f7fd fd1e 	bl	13c90 <bsd_os_errno_set>
   16254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16258:	bd10      	pop	{r4, pc}
   1625a:	bf00      	nop
   1625c:	200230c4 	.word	0x200230c4

00016260 <rpc_transport_send>:
   16260:	f000 beda 	b.w	17018 <rpc_transport_ipc_send>

00016264 <rpc_transport_rpc_alloc>:
   16264:	f000 bf5a 	b.w	1711c <rpc_transport_ipc_tx_rpc_data_alloc>

00016268 <rpc_transport_data_alloc>:
   16268:	f000 bfc0 	b.w	171ec <rpc_transport_ipc_tx_data_alloc>

0001626c <rpc_transport_rpc_free>:
   1626c:	f000 bdae 	b.w	16dcc <rpc_transport_ipc_msg_free>

00016270 <rpc_transport_data_free>:
   16270:	f000 ba64 	b.w	1673c <rpc_transport_ipc_data_free>

00016274 <ipc_trace_init>:
   16274:	4b01      	ldr	r3, [pc, #4]	; (1627c <ipc_trace_init+0x8>)
   16276:	6018      	str	r0, [r3, #0]
   16278:	4770      	bx	lr
   1627a:	bf00      	nop
   1627c:	200230d4 	.word	0x200230d4

00016280 <bsd_os_trace_irq_handler>:
   16280:	b5f0      	push	{r4, r5, r6, r7, lr}
   16282:	4b6e      	ldr	r3, [pc, #440]	; (1643c <bsd_os_trace_irq_handler+0x1bc>)
   16284:	b083      	sub	sp, #12
   16286:	781b      	ldrb	r3, [r3, #0]
   16288:	2b00      	cmp	r3, #0
   1628a:	f000 80d3 	beq.w	16434 <bsd_os_trace_irq_handler+0x1b4>
   1628e:	4b6c      	ldr	r3, [pc, #432]	; (16440 <bsd_os_trace_irq_handler+0x1c0>)
   16290:	681c      	ldr	r4, [r3, #0]
   16292:	b124      	cbz	r4, 1629e <bsd_os_trace_irq_handler+0x1e>
   16294:	68a3      	ldr	r3, [r4, #8]
   16296:	6862      	ldr	r2, [r4, #4]
   16298:	4293      	cmp	r3, r2
   1629a:	f040 808c 	bne.w	163b6 <bsd_os_trace_irq_handler+0x136>
   1629e:	4b69      	ldr	r3, [pc, #420]	; (16444 <bsd_os_trace_irq_handler+0x1c4>)
   162a0:	681c      	ldr	r4, [r3, #0]
   162a2:	b11c      	cbz	r4, 162ac <bsd_os_trace_irq_handler+0x2c>
   162a4:	68a3      	ldr	r3, [r4, #8]
   162a6:	6862      	ldr	r2, [r4, #4]
   162a8:	4293      	cmp	r3, r2
   162aa:	d146      	bne.n	1633a <bsd_os_trace_irq_handler+0xba>
   162ac:	4b66      	ldr	r3, [pc, #408]	; (16448 <bsd_os_trace_irq_handler+0x1c8>)
   162ae:	681c      	ldr	r4, [r3, #0]
   162b0:	b11c      	cbz	r4, 162ba <bsd_os_trace_irq_handler+0x3a>
   162b2:	68a3      	ldr	r3, [r4, #8]
   162b4:	6862      	ldr	r2, [r4, #4]
   162b6:	4293      	cmp	r3, r2
   162b8:	d101      	bne.n	162be <bsd_os_trace_irq_handler+0x3e>
   162ba:	b003      	add	sp, #12
   162bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   162be:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   162c2:	f8ad 2000 	strh.w	r2, [sp]
   162c6:	7822      	ldrb	r2, [r4, #0]
   162c8:	466e      	mov	r6, sp
   162ca:	f88d 2004 	strb.w	r2, [sp, #4]
   162ce:	6862      	ldr	r2, [r4, #4]
   162d0:	2105      	movs	r1, #5
   162d2:	4293      	cmp	r3, r2
   162d4:	bf2a      	itet	cs
   162d6:	6927      	ldrcs	r7, [r4, #16]
   162d8:	1ad7      	subcc	r7, r2, r3
   162da:	1aff      	subcs	r7, r7, r3
   162dc:	4293      	cmp	r3, r2
   162de:	bf94      	ite	ls
   162e0:	2500      	movls	r5, #0
   162e2:	68e5      	ldrhi	r5, [r4, #12]
   162e4:	b2bf      	uxth	r7, r7
   162e6:	bf88      	it	hi
   162e8:	1b52      	subhi	r2, r2, r5
   162ea:	4630      	mov	r0, r6
   162ec:	bf88      	it	hi
   162ee:	b295      	uxthhi	r5, r2
   162f0:	f8ad 7002 	strh.w	r7, [sp, #2]
   162f4:	f010 f89c 	bl	26430 <bsd_os_trace_put>
   162f8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   162fc:	68a0      	ldr	r0, [r4, #8]
   162fe:	f010 f897 	bl	26430 <bsd_os_trace_put>
   16302:	68a3      	ldr	r3, [r4, #8]
   16304:	6922      	ldr	r2, [r4, #16]
   16306:	441f      	add	r7, r3
   16308:	4297      	cmp	r7, r2
   1630a:	bf08      	it	eq
   1630c:	68e3      	ldreq	r3, [r4, #12]
   1630e:	60a7      	str	r7, [r4, #8]
   16310:	bf08      	it	eq
   16312:	60a3      	streq	r3, [r4, #8]
   16314:	2d00      	cmp	r5, #0
   16316:	d0d0      	beq.n	162ba <bsd_os_trace_irq_handler+0x3a>
   16318:	2105      	movs	r1, #5
   1631a:	4630      	mov	r0, r6
   1631c:	f8ad 5002 	strh.w	r5, [sp, #2]
   16320:	f010 f886 	bl	26430 <bsd_os_trace_put>
   16324:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   16328:	68e0      	ldr	r0, [r4, #12]
   1632a:	f010 f881 	bl	26430 <bsd_os_trace_put>
   1632e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   16332:	68e3      	ldr	r3, [r4, #12]
   16334:	4413      	add	r3, r2
   16336:	60a3      	str	r3, [r4, #8]
   16338:	e7bf      	b.n	162ba <bsd_os_trace_irq_handler+0x3a>
   1633a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1633e:	f8ad 2000 	strh.w	r2, [sp]
   16342:	7822      	ldrb	r2, [r4, #0]
   16344:	466e      	mov	r6, sp
   16346:	f88d 2004 	strb.w	r2, [sp, #4]
   1634a:	6862      	ldr	r2, [r4, #4]
   1634c:	2105      	movs	r1, #5
   1634e:	4293      	cmp	r3, r2
   16350:	bf2a      	itet	cs
   16352:	6927      	ldrcs	r7, [r4, #16]
   16354:	1ad7      	subcc	r7, r2, r3
   16356:	1aff      	subcs	r7, r7, r3
   16358:	4293      	cmp	r3, r2
   1635a:	bf94      	ite	ls
   1635c:	2500      	movls	r5, #0
   1635e:	68e5      	ldrhi	r5, [r4, #12]
   16360:	b2bf      	uxth	r7, r7
   16362:	bf88      	it	hi
   16364:	1b52      	subhi	r2, r2, r5
   16366:	4630      	mov	r0, r6
   16368:	bf88      	it	hi
   1636a:	b295      	uxthhi	r5, r2
   1636c:	f8ad 7002 	strh.w	r7, [sp, #2]
   16370:	f010 f85e 	bl	26430 <bsd_os_trace_put>
   16374:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   16378:	68a0      	ldr	r0, [r4, #8]
   1637a:	f010 f859 	bl	26430 <bsd_os_trace_put>
   1637e:	68a3      	ldr	r3, [r4, #8]
   16380:	6922      	ldr	r2, [r4, #16]
   16382:	441f      	add	r7, r3
   16384:	4297      	cmp	r7, r2
   16386:	bf08      	it	eq
   16388:	68e3      	ldreq	r3, [r4, #12]
   1638a:	60a7      	str	r7, [r4, #8]
   1638c:	bf08      	it	eq
   1638e:	60a3      	streq	r3, [r4, #8]
   16390:	2d00      	cmp	r5, #0
   16392:	d08b      	beq.n	162ac <bsd_os_trace_irq_handler+0x2c>
   16394:	2105      	movs	r1, #5
   16396:	4630      	mov	r0, r6
   16398:	f8ad 5002 	strh.w	r5, [sp, #2]
   1639c:	f010 f848 	bl	26430 <bsd_os_trace_put>
   163a0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   163a4:	68e0      	ldr	r0, [r4, #12]
   163a6:	f010 f843 	bl	26430 <bsd_os_trace_put>
   163aa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   163ae:	68e3      	ldr	r3, [r4, #12]
   163b0:	4413      	add	r3, r2
   163b2:	60a3      	str	r3, [r4, #8]
   163b4:	e77a      	b.n	162ac <bsd_os_trace_irq_handler+0x2c>
   163b6:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   163ba:	f8ad 2000 	strh.w	r2, [sp]
   163be:	7822      	ldrb	r2, [r4, #0]
   163c0:	466e      	mov	r6, sp
   163c2:	f88d 2004 	strb.w	r2, [sp, #4]
   163c6:	6862      	ldr	r2, [r4, #4]
   163c8:	2105      	movs	r1, #5
   163ca:	4293      	cmp	r3, r2
   163cc:	bf2a      	itet	cs
   163ce:	6927      	ldrcs	r7, [r4, #16]
   163d0:	1ad7      	subcc	r7, r2, r3
   163d2:	1aff      	subcs	r7, r7, r3
   163d4:	4293      	cmp	r3, r2
   163d6:	bf94      	ite	ls
   163d8:	2500      	movls	r5, #0
   163da:	68e5      	ldrhi	r5, [r4, #12]
   163dc:	b2bf      	uxth	r7, r7
   163de:	bf88      	it	hi
   163e0:	1b52      	subhi	r2, r2, r5
   163e2:	4630      	mov	r0, r6
   163e4:	bf88      	it	hi
   163e6:	b295      	uxthhi	r5, r2
   163e8:	f8ad 7002 	strh.w	r7, [sp, #2]
   163ec:	f010 f820 	bl	26430 <bsd_os_trace_put>
   163f0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   163f4:	68a0      	ldr	r0, [r4, #8]
   163f6:	f010 f81b 	bl	26430 <bsd_os_trace_put>
   163fa:	68a3      	ldr	r3, [r4, #8]
   163fc:	6922      	ldr	r2, [r4, #16]
   163fe:	441f      	add	r7, r3
   16400:	4297      	cmp	r7, r2
   16402:	bf08      	it	eq
   16404:	68e3      	ldreq	r3, [r4, #12]
   16406:	60a7      	str	r7, [r4, #8]
   16408:	bf08      	it	eq
   1640a:	60a3      	streq	r3, [r4, #8]
   1640c:	2d00      	cmp	r5, #0
   1640e:	f43f af46 	beq.w	1629e <bsd_os_trace_irq_handler+0x1e>
   16412:	2105      	movs	r1, #5
   16414:	4630      	mov	r0, r6
   16416:	f8ad 5002 	strh.w	r5, [sp, #2]
   1641a:	f010 f809 	bl	26430 <bsd_os_trace_put>
   1641e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   16422:	68e0      	ldr	r0, [r4, #12]
   16424:	f010 f804 	bl	26430 <bsd_os_trace_put>
   16428:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1642c:	68e3      	ldr	r3, [r4, #12]
   1642e:	4413      	add	r3, r2
   16430:	60a3      	str	r3, [r4, #8]
   16432:	e734      	b.n	1629e <bsd_os_trace_irq_handler+0x1e>
   16434:	f7fd fda0 	bl	13f78 <bsd_os_trace_irq_clear>
   16438:	e729      	b.n	1628e <bsd_os_trace_irq_handler+0xe>
   1643a:	bf00      	nop
   1643c:	2002af2d 	.word	0x2002af2d
   16440:	200230d0 	.word	0x200230d0
   16444:	200230c8 	.word	0x200230c8
   16448:	200230cc 	.word	0x200230cc

0001644c <ipc_trace_handle>:
   1644c:	2200      	movs	r2, #0
   1644e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16452:	4bb2      	ldr	r3, [pc, #712]	; (1671c <ipc_trace_handle+0x2d0>)
   16454:	b083      	sub	sp, #12
   16456:	681b      	ldr	r3, [r3, #0]
   16458:	6919      	ldr	r1, [r3, #16]
   1645a:	695c      	ldr	r4, [r3, #20]
   1645c:	7c18      	ldrb	r0, [r3, #16]
   1645e:	741a      	strb	r2, [r3, #16]
   16460:	7c58      	ldrb	r0, [r3, #17]
   16462:	745a      	strb	r2, [r3, #17]
   16464:	7c98      	ldrb	r0, [r3, #18]
   16466:	749a      	strb	r2, [r3, #18]
   16468:	7cd8      	ldrb	r0, [r3, #19]
   1646a:	74da      	strb	r2, [r3, #19]
   1646c:	7d18      	ldrb	r0, [r3, #20]
   1646e:	751a      	strb	r2, [r3, #20]
   16470:	7d58      	ldrb	r0, [r3, #21]
   16472:	755a      	strb	r2, [r3, #21]
   16474:	7d98      	ldrb	r0, [r3, #22]
   16476:	759a      	strb	r2, [r3, #22]
   16478:	7dd8      	ldrb	r0, [r3, #23]
   1647a:	75da      	strb	r2, [r3, #23]
   1647c:	b1a9      	cbz	r1, 164aa <ipc_trace_handle+0x5e>
   1647e:	3901      	subs	r1, #1
   16480:	2903      	cmp	r1, #3
   16482:	d812      	bhi.n	164aa <ipc_trace_handle+0x5e>
   16484:	e8df f001 	tbb	[pc, r1]
   16488:	1402a97c 	.word	0x1402a97c
   1648c:	2501      	movs	r5, #1
   1648e:	2003      	movs	r0, #3
   16490:	2200      	movs	r2, #0
   16492:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   16496:	4ca2      	ldr	r4, [pc, #648]	; (16720 <ipc_trace_handle+0x2d4>)
   16498:	7025      	strb	r5, [r4, #0]
   1649a:	7a1c      	ldrb	r4, [r3, #8]
   1649c:	7218      	strb	r0, [r3, #8]
   1649e:	7a58      	ldrb	r0, [r3, #9]
   164a0:	725a      	strb	r2, [r3, #9]
   164a2:	7a98      	ldrb	r0, [r3, #10]
   164a4:	729a      	strb	r2, [r3, #10]
   164a6:	7ada      	ldrb	r2, [r3, #11]
   164a8:	72d9      	strb	r1, [r3, #11]
   164aa:	b003      	add	sp, #12
   164ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164b0:	2104      	movs	r1, #4
   164b2:	2200      	movs	r2, #0
   164b4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   164b8:	7a1c      	ldrb	r4, [r3, #8]
   164ba:	7219      	strb	r1, [r3, #8]
   164bc:	7a59      	ldrb	r1, [r3, #9]
   164be:	725a      	strb	r2, [r3, #9]
   164c0:	4997      	ldr	r1, [pc, #604]	; (16720 <ipc_trace_handle+0x2d4>)
   164c2:	7a9c      	ldrb	r4, [r3, #10]
   164c4:	729a      	strb	r2, [r3, #10]
   164c6:	7adc      	ldrb	r4, [r3, #11]
   164c8:	72d8      	strb	r0, [r3, #11]
   164ca:	700a      	strb	r2, [r1, #0]
   164cc:	780b      	ldrb	r3, [r1, #0]
   164ce:	2b00      	cmp	r3, #0
   164d0:	f000 809f 	beq.w	16612 <ipc_trace_handle+0x1c6>
   164d4:	4b93      	ldr	r3, [pc, #588]	; (16724 <ipc_trace_handle+0x2d8>)
   164d6:	681c      	ldr	r4, [r3, #0]
   164d8:	b124      	cbz	r4, 164e4 <ipc_trace_handle+0x98>
   164da:	68a3      	ldr	r3, [r4, #8]
   164dc:	6862      	ldr	r2, [r4, #4]
   164de:	4293      	cmp	r3, r2
   164e0:	f040 80d9 	bne.w	16696 <ipc_trace_handle+0x24a>
   164e4:	4b90      	ldr	r3, [pc, #576]	; (16728 <ipc_trace_handle+0x2dc>)
   164e6:	681c      	ldr	r4, [r3, #0]
   164e8:	b124      	cbz	r4, 164f4 <ipc_trace_handle+0xa8>
   164ea:	68a3      	ldr	r3, [r4, #8]
   164ec:	6862      	ldr	r2, [r4, #4]
   164ee:	4293      	cmp	r3, r2
   164f0:	f040 8092 	bne.w	16618 <ipc_trace_handle+0x1cc>
   164f4:	4b8d      	ldr	r3, [pc, #564]	; (1672c <ipc_trace_handle+0x2e0>)
   164f6:	681c      	ldr	r4, [r3, #0]
   164f8:	2c00      	cmp	r4, #0
   164fa:	d0d6      	beq.n	164aa <ipc_trace_handle+0x5e>
   164fc:	68a3      	ldr	r3, [r4, #8]
   164fe:	6862      	ldr	r2, [r4, #4]
   16500:	4293      	cmp	r3, r2
   16502:	d0d2      	beq.n	164aa <ipc_trace_handle+0x5e>
   16504:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   16508:	f8ad 2000 	strh.w	r2, [sp]
   1650c:	7822      	ldrb	r2, [r4, #0]
   1650e:	466e      	mov	r6, sp
   16510:	f88d 2004 	strb.w	r2, [sp, #4]
   16514:	6862      	ldr	r2, [r4, #4]
   16516:	2105      	movs	r1, #5
   16518:	4293      	cmp	r3, r2
   1651a:	bf2a      	itet	cs
   1651c:	6927      	ldrcs	r7, [r4, #16]
   1651e:	1ad7      	subcc	r7, r2, r3
   16520:	1aff      	subcs	r7, r7, r3
   16522:	4293      	cmp	r3, r2
   16524:	bf94      	ite	ls
   16526:	2500      	movls	r5, #0
   16528:	68e5      	ldrhi	r5, [r4, #12]
   1652a:	b2bf      	uxth	r7, r7
   1652c:	bf88      	it	hi
   1652e:	1b52      	subhi	r2, r2, r5
   16530:	4630      	mov	r0, r6
   16532:	bf88      	it	hi
   16534:	b295      	uxthhi	r5, r2
   16536:	f8ad 7002 	strh.w	r7, [sp, #2]
   1653a:	f00f ff79 	bl	26430 <bsd_os_trace_put>
   1653e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   16542:	68a0      	ldr	r0, [r4, #8]
   16544:	f00f ff74 	bl	26430 <bsd_os_trace_put>
   16548:	68a3      	ldr	r3, [r4, #8]
   1654a:	6922      	ldr	r2, [r4, #16]
   1654c:	441f      	add	r7, r3
   1654e:	4297      	cmp	r7, r2
   16550:	bf08      	it	eq
   16552:	68e3      	ldreq	r3, [r4, #12]
   16554:	60a7      	str	r7, [r4, #8]
   16556:	bf08      	it	eq
   16558:	60a3      	streq	r3, [r4, #8]
   1655a:	2d00      	cmp	r5, #0
   1655c:	d0a5      	beq.n	164aa <ipc_trace_handle+0x5e>
   1655e:	2105      	movs	r1, #5
   16560:	4630      	mov	r0, r6
   16562:	f8ad 5002 	strh.w	r5, [sp, #2]
   16566:	f00f ff63 	bl	26430 <bsd_os_trace_put>
   1656a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1656e:	68e0      	ldr	r0, [r4, #12]
   16570:	f00f ff5e 	bl	26430 <bsd_os_trace_put>
   16574:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   16578:	68e3      	ldr	r3, [r4, #12]
   1657a:	4413      	add	r3, r2
   1657c:	60a3      	str	r3, [r4, #8]
   1657e:	e794      	b.n	164aa <ipc_trace_handle+0x5e>
   16580:	4a67      	ldr	r2, [pc, #412]	; (16720 <ipc_trace_handle+0x2d4>)
   16582:	7811      	ldrb	r1, [r2, #0]
   16584:	b109      	cbz	r1, 1658a <ipc_trace_handle+0x13e>
   16586:	2100      	movs	r1, #0
   16588:	7011      	strb	r1, [r2, #0]
   1658a:	68a5      	ldr	r5, [r4, #8]
   1658c:	2d00      	cmp	r5, #0
   1658e:	d03b      	beq.n	16608 <ipc_trace_handle+0x1bc>
   16590:	f04f 0c00 	mov.w	ip, #0
   16594:	f8df a190 	ldr.w	sl, [pc, #400]	; 16728 <ipc_trace_handle+0x2dc>
   16598:	f8df b188 	ldr.w	fp, [pc, #392]	; 16724 <ipc_trace_handle+0x2d8>
   1659c:	4963      	ldr	r1, [pc, #396]	; (1672c <ipc_trace_handle+0x2e0>)
   1659e:	46e1      	mov	r9, ip
   165a0:	4666      	mov	r6, ip
   165a2:	4662      	mov	r2, ip
   165a4:	f8d1 e000 	ldr.w	lr, [r1]
   165a8:	f8da 8000 	ldr.w	r8, [sl]
   165ac:	f8db 7000 	ldr.w	r7, [fp]
   165b0:	e008      	b.n	165c4 <ipc_trace_handle+0x178>
   165b2:	2963      	cmp	r1, #99	; 0x63
   165b4:	d016      	beq.n	165e4 <ipc_trace_handle+0x198>
   165b6:	2961      	cmp	r1, #97	; 0x61
   165b8:	bf04      	itt	eq
   165ba:	4607      	moveq	r7, r0
   165bc:	2601      	moveq	r6, #1
   165be:	3201      	adds	r2, #1
   165c0:	42aa      	cmp	r2, r5
   165c2:	d013      	beq.n	165ec <ipc_trace_handle+0x1a0>
   165c4:	1c91      	adds	r1, r2, #2
   165c6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   165ca:	6848      	ldr	r0, [r1, #4]
   165cc:	7801      	ldrb	r1, [r0, #0]
   165ce:	2962      	cmp	r1, #98	; 0x62
   165d0:	d1ef      	bne.n	165b2 <ipc_trace_handle+0x166>
   165d2:	4680      	mov	r8, r0
   165d4:	f04f 0901 	mov.w	r9, #1
   165d8:	e7f1      	b.n	165be <ipc_trace_handle+0x172>
   165da:	f7fd fcc5 	bl	13f68 <bsd_os_trace_irq_set>
   165de:	b003      	add	sp, #12
   165e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165e4:	4686      	mov	lr, r0
   165e6:	f04f 0c01 	mov.w	ip, #1
   165ea:	e7e8      	b.n	165be <ipc_trace_handle+0x172>
   165ec:	2e00      	cmp	r6, #0
   165ee:	f040 8091 	bne.w	16714 <ipc_trace_handle+0x2c8>
   165f2:	f1b9 0f00 	cmp.w	r9, #0
   165f6:	d001      	beq.n	165fc <ipc_trace_handle+0x1b0>
   165f8:	f8ca 8000 	str.w	r8, [sl]
   165fc:	f1bc 0f00 	cmp.w	ip, #0
   16600:	d002      	beq.n	16608 <ipc_trace_handle+0x1bc>
   16602:	4a4a      	ldr	r2, [pc, #296]	; (1672c <ipc_trace_handle+0x2e0>)
   16604:	f8c2 e000 	str.w	lr, [r2]
   16608:	2001      	movs	r0, #1
   1660a:	2200      	movs	r2, #0
   1660c:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   16610:	e743      	b.n	1649a <ipc_trace_handle+0x4e>
   16612:	f7fd fcb1 	bl	13f78 <bsd_os_trace_irq_clear>
   16616:	e75d      	b.n	164d4 <ipc_trace_handle+0x88>
   16618:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1661c:	f8ad 2000 	strh.w	r2, [sp]
   16620:	7822      	ldrb	r2, [r4, #0]
   16622:	466e      	mov	r6, sp
   16624:	f88d 2004 	strb.w	r2, [sp, #4]
   16628:	6862      	ldr	r2, [r4, #4]
   1662a:	2105      	movs	r1, #5
   1662c:	4293      	cmp	r3, r2
   1662e:	bf2a      	itet	cs
   16630:	6927      	ldrcs	r7, [r4, #16]
   16632:	1ad7      	subcc	r7, r2, r3
   16634:	1aff      	subcs	r7, r7, r3
   16636:	4293      	cmp	r3, r2
   16638:	bf94      	ite	ls
   1663a:	2500      	movls	r5, #0
   1663c:	68e5      	ldrhi	r5, [r4, #12]
   1663e:	b2bf      	uxth	r7, r7
   16640:	bf88      	it	hi
   16642:	1b52      	subhi	r2, r2, r5
   16644:	4630      	mov	r0, r6
   16646:	bf88      	it	hi
   16648:	b295      	uxthhi	r5, r2
   1664a:	f8ad 7002 	strh.w	r7, [sp, #2]
   1664e:	f00f feef 	bl	26430 <bsd_os_trace_put>
   16652:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   16656:	68a0      	ldr	r0, [r4, #8]
   16658:	f00f feea 	bl	26430 <bsd_os_trace_put>
   1665c:	68a3      	ldr	r3, [r4, #8]
   1665e:	6922      	ldr	r2, [r4, #16]
   16660:	441f      	add	r7, r3
   16662:	4297      	cmp	r7, r2
   16664:	bf08      	it	eq
   16666:	68e3      	ldreq	r3, [r4, #12]
   16668:	60a7      	str	r7, [r4, #8]
   1666a:	bf08      	it	eq
   1666c:	60a3      	streq	r3, [r4, #8]
   1666e:	2d00      	cmp	r5, #0
   16670:	f43f af40 	beq.w	164f4 <ipc_trace_handle+0xa8>
   16674:	2105      	movs	r1, #5
   16676:	4630      	mov	r0, r6
   16678:	f8ad 5002 	strh.w	r5, [sp, #2]
   1667c:	f00f fed8 	bl	26430 <bsd_os_trace_put>
   16680:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   16684:	68e0      	ldr	r0, [r4, #12]
   16686:	f00f fed3 	bl	26430 <bsd_os_trace_put>
   1668a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1668e:	68e3      	ldr	r3, [r4, #12]
   16690:	4413      	add	r3, r2
   16692:	60a3      	str	r3, [r4, #8]
   16694:	e72e      	b.n	164f4 <ipc_trace_handle+0xa8>
   16696:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1669a:	f8ad 2000 	strh.w	r2, [sp]
   1669e:	7822      	ldrb	r2, [r4, #0]
   166a0:	466e      	mov	r6, sp
   166a2:	f88d 2004 	strb.w	r2, [sp, #4]
   166a6:	6862      	ldr	r2, [r4, #4]
   166a8:	2105      	movs	r1, #5
   166aa:	4293      	cmp	r3, r2
   166ac:	bf2a      	itet	cs
   166ae:	6927      	ldrcs	r7, [r4, #16]
   166b0:	1ad7      	subcc	r7, r2, r3
   166b2:	1aff      	subcs	r7, r7, r3
   166b4:	4293      	cmp	r3, r2
   166b6:	bf94      	ite	ls
   166b8:	2500      	movls	r5, #0
   166ba:	68e5      	ldrhi	r5, [r4, #12]
   166bc:	b2bf      	uxth	r7, r7
   166be:	bf88      	it	hi
   166c0:	1b52      	subhi	r2, r2, r5
   166c2:	4630      	mov	r0, r6
   166c4:	bf88      	it	hi
   166c6:	b295      	uxthhi	r5, r2
   166c8:	f8ad 7002 	strh.w	r7, [sp, #2]
   166cc:	f00f feb0 	bl	26430 <bsd_os_trace_put>
   166d0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   166d4:	68a0      	ldr	r0, [r4, #8]
   166d6:	f00f feab 	bl	26430 <bsd_os_trace_put>
   166da:	68a3      	ldr	r3, [r4, #8]
   166dc:	6922      	ldr	r2, [r4, #16]
   166de:	441f      	add	r7, r3
   166e0:	4297      	cmp	r7, r2
   166e2:	bf08      	it	eq
   166e4:	68e3      	ldreq	r3, [r4, #12]
   166e6:	60a7      	str	r7, [r4, #8]
   166e8:	bf08      	it	eq
   166ea:	60a3      	streq	r3, [r4, #8]
   166ec:	2d00      	cmp	r5, #0
   166ee:	f43f aef9 	beq.w	164e4 <ipc_trace_handle+0x98>
   166f2:	2105      	movs	r1, #5
   166f4:	4630      	mov	r0, r6
   166f6:	f8ad 5002 	strh.w	r5, [sp, #2]
   166fa:	f00f fe99 	bl	26430 <bsd_os_trace_put>
   166fe:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   16702:	68e0      	ldr	r0, [r4, #12]
   16704:	f00f fe94 	bl	26430 <bsd_os_trace_put>
   16708:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1670c:	68e3      	ldr	r3, [r4, #12]
   1670e:	4413      	add	r3, r2
   16710:	60a3      	str	r3, [r4, #8]
   16712:	e6e7      	b.n	164e4 <ipc_trace_handle+0x98>
   16714:	f8cb 7000 	str.w	r7, [fp]
   16718:	e76b      	b.n	165f2 <ipc_trace_handle+0x1a6>
   1671a:	bf00      	nop
   1671c:	200230d4 	.word	0x200230d4
   16720:	2002af2d 	.word	0x2002af2d
   16724:	200230d0 	.word	0x200230d0
   16728:	200230c8 	.word	0x200230c8
   1672c:	200230cc 	.word	0x200230cc

00016730 <rpc_trace_coredump_in_progress>:
   16730:	4b01      	ldr	r3, [pc, #4]	; (16738 <rpc_trace_coredump_in_progress+0x8>)
   16732:	7818      	ldrb	r0, [r3, #0]
   16734:	4770      	bx	lr
   16736:	bf00      	nop
   16738:	2002af2d 	.word	0x2002af2d

0001673c <rpc_transport_ipc_data_free>:
   1673c:	b510      	push	{r4, lr}
   1673e:	4b0e      	ldr	r3, [pc, #56]	; (16778 <rpc_transport_ipc_data_free+0x3c>)
   16740:	4604      	mov	r4, r0
   16742:	e9d3 2300 	ldrd	r2, r3, [r3]
   16746:	4413      	add	r3, r2
   16748:	4298      	cmp	r0, r3
   1674a:	d20d      	bcs.n	16768 <rpc_transport_ipc_data_free+0x2c>
   1674c:	4282      	cmp	r2, r0
   1674e:	d80b      	bhi.n	16768 <rpc_transport_ipc_data_free+0x2c>
   16750:	f000 fd1c 	bl	1718c <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   16754:	b158      	cbz	r0, 1676e <rpc_transport_ipc_data_free+0x32>
   16756:	4a09      	ldr	r2, [pc, #36]	; (1677c <rpc_transport_ipc_data_free+0x40>)
   16758:	6084      	str	r4, [r0, #8]
   1675a:	6002      	str	r2, [r0, #0]
   1675c:	f7ff fd80 	bl	16260 <rpc_transport_send>
   16760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16764:	f7fd bbf0 	b.w	13f48 <bsd_os_application_irq_set>
   16768:	4620      	mov	r0, r4
   1676a:	f006 fc6b 	bl	1d044 <nrf_shared_free>
   1676e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16772:	f7fd bbe9 	b.w	13f48 <bsd_os_application_irq_set>
   16776:	bf00      	nop
   16778:	200230d8 	.word	0x200230d8
   1677c:	00020001 	.word	0x00020001

00016780 <rpc_transport_ipc_init>:
   16780:	b188      	cbz	r0, 167a6 <rpc_transport_ipc_init+0x26>
   16782:	b510      	push	{r4, lr}
   16784:	b082      	sub	sp, #8
   16786:	aa01      	add	r2, sp, #4
   16788:	4669      	mov	r1, sp
   1678a:	4604      	mov	r4, r0
   1678c:	f000 fb5a 	bl	16e44 <rpc_transport_ipc_tx_init>
   16790:	4602      	mov	r2, r0
   16792:	b148      	cbz	r0, 167a8 <rpc_transport_ipc_init+0x28>
   16794:	4b12      	ldr	r3, [pc, #72]	; (167e0 <rpc_transport_ipc_init+0x60>)
   16796:	3428      	adds	r4, #40	; 0x28
   16798:	e894 0003 	ldmia.w	r4, {r0, r1}
   1679c:	e883 0003 	stmia.w	r3, {r0, r1}
   167a0:	4610      	mov	r0, r2
   167a2:	b002      	add	sp, #8
   167a4:	bd10      	pop	{r4, pc}
   167a6:	e7fe      	b.n	167a6 <rpc_transport_ipc_init+0x26>
   167a8:	e9dd 1200 	ldrd	r1, r2, [sp]
   167ac:	4620      	mov	r0, r4
   167ae:	f000 f9fb 	bl	16ba8 <rpc_transport_ipc_rx_init>
   167b2:	4602      	mov	r2, r0
   167b4:	4b0a      	ldr	r3, [pc, #40]	; (167e0 <rpc_transport_ipc_init+0x60>)
   167b6:	f104 0128 	add.w	r1, r4, #40	; 0x28
   167ba:	c903      	ldmia	r1, {r0, r1}
   167bc:	e883 0003 	stmia.w	r3, {r0, r1}
   167c0:	2a00      	cmp	r2, #0
   167c2:	d1ed      	bne.n	167a0 <rpc_transport_ipc_init+0x20>
   167c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   167c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   167ca:	4906      	ldr	r1, [pc, #24]	; (167e4 <rpc_transport_ipc_init+0x64>)
   167cc:	015b      	lsls	r3, r3, #5
   167ce:	b2db      	uxtb	r3, r3
   167d0:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   167d4:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   167d8:	6048      	str	r0, [r1, #4]
   167da:	4610      	mov	r0, r2
   167dc:	b002      	add	sp, #8
   167de:	bd10      	pop	{r4, pc}
   167e0:	200230d8 	.word	0x200230d8
   167e4:	e000e100 	.word	0xe000e100

000167e8 <bsd_os_application_irq_handler>:
   167e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167ec:	f7fd fbb4 	bl	13f58 <bsd_os_application_irq_clear>
   167f0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 168c8 <bsd_os_application_irq_handler+0xe0>
   167f4:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 168cc <bsd_os_application_irq_handler+0xe4>
   167f8:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 168d0 <bsd_os_application_irq_handler+0xe8>
   167fc:	f108 0908 	add.w	r9, r8, #8
   16800:	f858 7b04 	ldr.w	r7, [r8], #4
   16804:	6839      	ldr	r1, [r7, #0]
   16806:	b361      	cbz	r1, 16862 <bsd_os_application_irq_handler+0x7a>
   16808:	2400      	movs	r4, #0
   1680a:	e002      	b.n	16812 <bsd_os_application_irq_handler+0x2a>
   1680c:	3401      	adds	r4, #1
   1680e:	428c      	cmp	r4, r1
   16810:	d227      	bcs.n	16862 <bsd_os_application_irq_handler+0x7a>
   16812:	00e6      	lsls	r6, r4, #3
   16814:	19bd      	adds	r5, r7, r6
   16816:	68aa      	ldr	r2, [r5, #8]
   16818:	2a00      	cmp	r2, #0
   1681a:	d0f7      	beq.n	1680c <bsd_os_application_irq_handler+0x24>
   1681c:	686a      	ldr	r2, [r5, #4]
   1681e:	b2d2      	uxtb	r2, r2
   16820:	2a01      	cmp	r2, #1
   16822:	d1f3      	bne.n	1680c <bsd_os_application_irq_handler+0x24>
   16824:	6868      	ldr	r0, [r5, #4]
   16826:	f8bb 2000 	ldrh.w	r2, [fp]
   1682a:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   1682e:	d1ed      	bne.n	1680c <bsd_os_application_irq_handler+0x24>
   16830:	68a8      	ldr	r0, [r5, #8]
   16832:	6841      	ldr	r1, [r0, #4]
   16834:	b2c9      	uxtb	r1, r1
   16836:	2902      	cmp	r1, #2
   16838:	d02c      	beq.n	16894 <bsd_os_application_irq_handler+0xac>
   1683a:	2901      	cmp	r1, #1
   1683c:	d015      	beq.n	1686a <bsd_os_application_irq_handler+0x82>
   1683e:	3604      	adds	r6, #4
   16840:	59b9      	ldr	r1, [r7, r6]
   16842:	3201      	adds	r2, #1
   16844:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   16848:	f041 0103 	orr.w	r1, r1, #3
   1684c:	51b9      	str	r1, [r7, r6]
   1684e:	f8ab 2000 	strh.w	r2, [fp]
   16852:	f7fd fb79 	bl	13f48 <bsd_os_application_irq_set>
   16856:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1685a:	3401      	adds	r4, #1
   1685c:	6839      	ldr	r1, [r7, #0]
   1685e:	428c      	cmp	r4, r1
   16860:	d3d7      	bcc.n	16812 <bsd_os_application_irq_handler+0x2a>
   16862:	45c1      	cmp	r9, r8
   16864:	d1cc      	bne.n	16800 <bsd_os_application_irq_handler+0x18>
   16866:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1686a:	6801      	ldr	r1, [r0, #0]
   1686c:	0c09      	lsrs	r1, r1, #16
   1686e:	f002 fdbb 	bl	193e8 <rpc_handle_ctrl_message>
   16872:	2801      	cmp	r0, #1
   16874:	d014      	beq.n	168a0 <bsd_os_application_irq_handler+0xb8>
   16876:	d310      	bcc.n	1689a <bsd_os_application_irq_handler+0xb2>
   16878:	2802      	cmp	r0, #2
   1687a:	d007      	beq.n	1688c <bsd_os_application_irq_handler+0xa4>
   1687c:	2203      	movs	r2, #3
   1687e:	4b11      	ldr	r3, [pc, #68]	; (168c4 <bsd_os_application_irq_handler+0xdc>)
   16880:	4610      	mov	r0, r2
   16882:	f8ca 2000 	str.w	r2, [sl]
   16886:	601a      	str	r2, [r3, #0]
   16888:	f005 f962 	bl	1bb50 <rpc_transport_ipc_fault_handler>
   1688c:	f858 7c04 	ldr.w	r7, [r8, #-4]
   16890:	6839      	ldr	r1, [r7, #0]
   16892:	e7bb      	b.n	1680c <bsd_os_application_irq_handler+0x24>
   16894:	f002 fdc0 	bl	19418 <rpc_handle_data_message>
   16898:	e7eb      	b.n	16872 <bsd_os_application_irq_handler+0x8a>
   1689a:	f8bb 2000 	ldrh.w	r2, [fp]
   1689e:	e7ce      	b.n	1683e <bsd_os_application_irq_handler+0x56>
   168a0:	686a      	ldr	r2, [r5, #4]
   168a2:	f8bb 1000 	ldrh.w	r1, [fp]
   168a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   168aa:	f042 0202 	orr.w	r2, r2, #2
   168ae:	606a      	str	r2, [r5, #4]
   168b0:	1c4a      	adds	r2, r1, #1
   168b2:	f8ab 2000 	strh.w	r2, [fp]
   168b6:	f7fd fb47 	bl	13f48 <bsd_os_application_irq_set>
   168ba:	f858 7c04 	ldr.w	r7, [r8, #-4]
   168be:	6839      	ldr	r1, [r7, #0]
   168c0:	e7a4      	b.n	1680c <bsd_os_application_irq_handler+0x24>
   168c2:	bf00      	nop
   168c4:	200230e0 	.word	0x200230e0
   168c8:	200230e8 	.word	0x200230e8
   168cc:	200281a8 	.word	0x200281a8
   168d0:	200230f0 	.word	0x200230f0

000168d4 <IPC_IRQHandler>:
   168d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   168d6:	f44f 6680 	mov.w	r6, #1024	; 0x400
   168da:	4d9f      	ldr	r5, [pc, #636]	; (16b58 <IPC_IRQHandler+0x284>)
   168dc:	4c9f      	ldr	r4, [pc, #636]	; (16b5c <IPC_IRQHandler+0x288>)
   168de:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   168e2:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   168e6:	b095      	sub	sp, #84	; 0x54
   168e8:	0618      	lsls	r0, r3, #24
   168ea:	d50b      	bpl.n	16904 <IPC_IRQHandler+0x30>
   168ec:	f7ff fdae 	bl	1644c <ipc_trace_handle>
   168f0:	f7ff ff1e 	bl	16730 <rpc_trace_coredump_in_progress>
   168f4:	2800      	cmp	r0, #0
   168f6:	d158      	bne.n	169aa <IPC_IRQHandler+0xd6>
   168f8:	4b99      	ldr	r3, [pc, #612]	; (16b60 <IPC_IRQHandler+0x28c>)
   168fa:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   168fe:	681b      	ldr	r3, [r3, #0]
   16900:	9301      	str	r3, [sp, #4]
   16902:	9b01      	ldr	r3, [sp, #4]
   16904:	4c95      	ldr	r4, [pc, #596]	; (16b5c <IPC_IRQHandler+0x288>)
   16906:	f8d4 530c 	ldr.w	r5, [r4, #780]	; 0x30c
   1690a:	f015 0501 	ands.w	r5, r5, #1
   1690e:	d11e      	bne.n	1694e <IPC_IRQHandler+0x7a>
   16910:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   16914:	f013 0340 	ands.w	r3, r3, #64	; 0x40
   16918:	d14c      	bne.n	169b4 <IPC_IRQHandler+0xe0>
   1691a:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
   1691e:	0751      	lsls	r1, r2, #29
   16920:	d50e      	bpl.n	16940 <IPC_IRQHandler+0x6c>
   16922:	4a90      	ldr	r2, [pc, #576]	; (16b64 <IPC_IRQHandler+0x290>)
   16924:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   16928:	6812      	ldr	r2, [r2, #0]
   1692a:	4b8f      	ldr	r3, [pc, #572]	; (16b68 <IPC_IRQHandler+0x294>)
   1692c:	9206      	str	r2, [sp, #24]
   1692e:	9a06      	ldr	r2, [sp, #24]
   16930:	681a      	ldr	r2, [r3, #0]
   16932:	2a02      	cmp	r2, #2
   16934:	f000 80f2 	beq.w	16b1c <IPC_IRQHandler+0x248>
   16938:	681a      	ldr	r2, [r3, #0]
   1693a:	2a01      	cmp	r2, #1
   1693c:	f000 80d3 	beq.w	16ae6 <IPC_IRQHandler+0x212>
   16940:	4b86      	ldr	r3, [pc, #536]	; (16b5c <IPC_IRQHandler+0x288>)
   16942:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   16946:	06d2      	lsls	r2, r2, #27
   16948:	d423      	bmi.n	16992 <IPC_IRQHandler+0xbe>
   1694a:	b015      	add	sp, #84	; 0x54
   1694c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1694e:	2100      	movs	r1, #0
   16950:	f248 0202 	movw	r2, #32770	; 0x8002
   16954:	4b85      	ldr	r3, [pc, #532]	; (16b6c <IPC_IRQHandler+0x298>)
   16956:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1695a:	681b      	ldr	r3, [r3, #0]
   1695c:	9302      	str	r3, [sp, #8]
   1695e:	9b02      	ldr	r3, [sp, #8]
   16960:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
   16964:	4293      	cmp	r3, r2
   16966:	f000 80e2 	beq.w	16b2e <IPC_IRQHandler+0x25a>
   1696a:	f200 80a0 	bhi.w	16aae <IPC_IRQHandler+0x1da>
   1696e:	2b00      	cmp	r3, #0
   16970:	f000 80d7 	beq.w	16b22 <IPC_IRQHandler+0x24e>
   16974:	2b02      	cmp	r3, #2
   16976:	f240 80ab 	bls.w	16ad0 <IPC_IRQHandler+0x1fc>
   1697a:	f248 0201 	movw	r2, #32769	; 0x8001
   1697e:	4293      	cmp	r3, r2
   16980:	f040 80cf 	bne.w	16b22 <IPC_IRQHandler+0x24e>
   16984:	2003      	movs	r0, #3
   16986:	2207      	movs	r2, #7
   16988:	4977      	ldr	r1, [pc, #476]	; (16b68 <IPC_IRQHandler+0x294>)
   1698a:	4b79      	ldr	r3, [pc, #484]	; (16b70 <IPC_IRQHandler+0x29c>)
   1698c:	6008      	str	r0, [r1, #0]
   1698e:	601a      	str	r2, [r3, #0]
   16990:	e7db      	b.n	1694a <IPC_IRQHandler+0x76>
   16992:	2100      	movs	r1, #0
   16994:	4a77      	ldr	r2, [pc, #476]	; (16b74 <IPC_IRQHandler+0x2a0>)
   16996:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   1699a:	6813      	ldr	r3, [r2, #0]
   1699c:	9307      	str	r3, [sp, #28]
   1699e:	9b07      	ldr	r3, [sp, #28]
   169a0:	b015      	add	sp, #84	; 0x54
   169a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   169a6:	f7fd bacf 	b.w	13f48 <bsd_os_application_irq_set>
   169aa:	23e0      	movs	r3, #224	; 0xe0
   169ac:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   169b0:	606e      	str	r6, [r5, #4]
   169b2:	e7ca      	b.n	1694a <IPC_IRQHandler+0x76>
   169b4:	4b70      	ldr	r3, [pc, #448]	; (16b78 <IPC_IRQHandler+0x2a4>)
   169b6:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
   169ba:	681b      	ldr	r3, [r3, #0]
   169bc:	9305      	str	r3, [sp, #20]
   169be:	9b05      	ldr	r3, [sp, #20]
   169c0:	f000 fc1e 	bl	17200 <rpc_transport_ipc_tx_suspend>
   169c4:	2010      	movs	r0, #16
   169c6:	2201      	movs	r2, #1
   169c8:	210a      	movs	r1, #10
   169ca:	4b6c      	ldr	r3, [pc, #432]	; (16b7c <IPC_IRQHandler+0x2a8>)
   169cc:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
   169d0:	681b      	ldr	r3, [r3, #0]
   169d2:	9303      	str	r3, [sp, #12]
   169d4:	4b6a      	ldr	r3, [pc, #424]	; (16b80 <IPC_IRQHandler+0x2ac>)
   169d6:	9e03      	ldr	r6, [sp, #12]
   169d8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   169dc:	6818      	ldr	r0, [r3, #0]
   169de:	4b69      	ldr	r3, [pc, #420]	; (16b84 <IPC_IRQHandler+0x2b0>)
   169e0:	9004      	str	r0, [sp, #16]
   169e2:	9804      	ldr	r0, [sp, #16]
   169e4:	9508      	str	r5, [sp, #32]
   169e6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
   169ea:	f8d3 0610 	ldr.w	r0, [r3, #1552]	; 0x610
   169ee:	9008      	str	r0, [sp, #32]
   169f0:	9808      	ldr	r0, [sp, #32]
   169f2:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   169f6:	9109      	str	r1, [sp, #36]	; 0x24
   169f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   169fa:	b12b      	cbz	r3, 16a08 <IPC_IRQHandler+0x134>
   169fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   169fe:	3b01      	subs	r3, #1
   16a00:	9309      	str	r3, [sp, #36]	; 0x24
   16a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16a04:	2b00      	cmp	r3, #0
   16a06:	d1f9      	bne.n	169fc <IPC_IRQHandler+0x128>
   16a08:	2200      	movs	r2, #0
   16a0a:	f04f 0c01 	mov.w	ip, #1
   16a0e:	2704      	movs	r7, #4
   16a10:	2610      	movs	r6, #16
   16a12:	495c      	ldr	r1, [pc, #368]	; (16b84 <IPC_IRQHandler+0x2b0>)
   16a14:	4b51      	ldr	r3, [pc, #324]	; (16b5c <IPC_IRQHandler+0x288>)
   16a16:	f8c1 2614 	str.w	r2, [r1, #1556]	; 0x614
   16a1a:	f501 3115 	add.w	r1, r1, #152576	; 0x25400
   16a1e:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   16a22:	2540      	movs	r5, #64	; 0x40
   16a24:	f501 71c8 	add.w	r1, r1, #400	; 0x190
   16a28:	6809      	ldr	r1, [r1, #0]
   16a2a:	2480      	movs	r4, #128	; 0x80
   16a2c:	910a      	str	r1, [sp, #40]	; 0x28
   16a2e:	4956      	ldr	r1, [pc, #344]	; (16b88 <IPC_IRQHandler+0x2b4>)
   16a30:	980a      	ldr	r0, [sp, #40]	; 0x28
   16a32:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   16a36:	6809      	ldr	r1, [r1, #0]
   16a38:	910b      	str	r1, [sp, #44]	; 0x2c
   16a3a:	4950      	ldr	r1, [pc, #320]	; (16b7c <IPC_IRQHandler+0x2a8>)
   16a3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16a3e:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   16a42:	6809      	ldr	r1, [r1, #0]
   16a44:	2005      	movs	r0, #5
   16a46:	910c      	str	r1, [sp, #48]	; 0x30
   16a48:	4950      	ldr	r1, [pc, #320]	; (16b8c <IPC_IRQHandler+0x2b8>)
   16a4a:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
   16a4e:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   16a52:	6809      	ldr	r1, [r1, #0]
   16a54:	910d      	str	r1, [sp, #52]	; 0x34
   16a56:	494e      	ldr	r1, [pc, #312]	; (16b90 <IPC_IRQHandler+0x2bc>)
   16a58:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
   16a5c:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   16a60:	6809      	ldr	r1, [r1, #0]
   16a62:	910e      	str	r1, [sp, #56]	; 0x38
   16a64:	4946      	ldr	r1, [pc, #280]	; (16b80 <IPC_IRQHandler+0x2ac>)
   16a66:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   16a6a:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   16a6e:	f8d1 c000 	ldr.w	ip, [r1]
   16a72:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   16a76:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
   16a7a:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   16a7e:	680f      	ldr	r7, [r1, #0]
   16a80:	9710      	str	r7, [sp, #64]	; 0x40
   16a82:	9f10      	ldr	r7, [sp, #64]	; 0x40
   16a84:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   16a88:	680e      	ldr	r6, [r1, #0]
   16a8a:	9611      	str	r6, [sp, #68]	; 0x44
   16a8c:	9e11      	ldr	r6, [sp, #68]	; 0x44
   16a8e:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   16a92:	680d      	ldr	r5, [r1, #0]
   16a94:	9512      	str	r5, [sp, #72]	; 0x48
   16a96:	9d12      	ldr	r5, [sp, #72]	; 0x48
   16a98:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
   16a9c:	680c      	ldr	r4, [r1, #0]
   16a9e:	4b32      	ldr	r3, [pc, #200]	; (16b68 <IPC_IRQHandler+0x294>)
   16aa0:	9413      	str	r4, [sp, #76]	; 0x4c
   16aa2:	493c      	ldr	r1, [pc, #240]	; (16b94 <IPC_IRQHandler+0x2c0>)
   16aa4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   16aa6:	800a      	strh	r2, [r1, #0]
   16aa8:	6018      	str	r0, [r3, #0]
   16aaa:	b015      	add	sp, #84	; 0x54
   16aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16aae:	4a3a      	ldr	r2, [pc, #232]	; (16b98 <IPC_IRQHandler+0x2c4>)
   16ab0:	4293      	cmp	r3, r2
   16ab2:	d82a      	bhi.n	16b0a <IPC_IRQHandler+0x236>
   16ab4:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   16ab8:	d82a      	bhi.n	16b10 <IPC_IRQHandler+0x23c>
   16aba:	f248 0203 	movw	r2, #32771	; 0x8003
   16abe:	4293      	cmp	r3, r2
   16ac0:	d12f      	bne.n	16b22 <IPC_IRQHandler+0x24e>
   16ac2:	2003      	movs	r0, #3
   16ac4:	2204      	movs	r2, #4
   16ac6:	4928      	ldr	r1, [pc, #160]	; (16b68 <IPC_IRQHandler+0x294>)
   16ac8:	4b29      	ldr	r3, [pc, #164]	; (16b70 <IPC_IRQHandler+0x29c>)
   16aca:	6008      	str	r0, [r1, #0]
   16acc:	601a      	str	r2, [r3, #0]
   16ace:	e73c      	b.n	1694a <IPC_IRQHandler+0x76>
   16ad0:	2303      	movs	r3, #3
   16ad2:	4618      	mov	r0, r3
   16ad4:	4924      	ldr	r1, [pc, #144]	; (16b68 <IPC_IRQHandler+0x294>)
   16ad6:	4a26      	ldr	r2, [pc, #152]	; (16b70 <IPC_IRQHandler+0x29c>)
   16ad8:	600b      	str	r3, [r1, #0]
   16ada:	6013      	str	r3, [r2, #0]
   16adc:	b015      	add	sp, #84	; 0x54
   16ade:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   16ae2:	f005 b835 	b.w	1bb50 <rpc_transport_ipc_fault_handler>
   16ae6:	4a2d      	ldr	r2, [pc, #180]	; (16b9c <IPC_IRQHandler+0x2c8>)
   16ae8:	482d      	ldr	r0, [pc, #180]	; (16ba0 <IPC_IRQHandler+0x2cc>)
   16aea:	6811      	ldr	r1, [r2, #0]
   16aec:	688a      	ldr	r2, [r1, #8]
   16aee:	6002      	str	r2, [r0, #0]
   16af0:	6849      	ldr	r1, [r1, #4]
   16af2:	6041      	str	r1, [r0, #4]
   16af4:	b312      	cbz	r2, 16b3c <IPC_IRQHandler+0x268>
   16af6:	b309      	cbz	r1, 16b3c <IPC_IRQHandler+0x268>
   16af8:	6812      	ldr	r2, [r2, #0]
   16afa:	2a10      	cmp	r2, #16
   16afc:	d824      	bhi.n	16b48 <IPC_IRQHandler+0x274>
   16afe:	680a      	ldr	r2, [r1, #0]
   16b00:	2a10      	cmp	r2, #16
   16b02:	d821      	bhi.n	16b48 <IPC_IRQHandler+0x274>
   16b04:	2202      	movs	r2, #2
   16b06:	601a      	str	r2, [r3, #0]
   16b08:	e71a      	b.n	16940 <IPC_IRQHandler+0x6c>
   16b0a:	4a26      	ldr	r2, [pc, #152]	; (16ba4 <IPC_IRQHandler+0x2d0>)
   16b0c:	4293      	cmp	r3, r2
   16b0e:	d108      	bne.n	16b22 <IPC_IRQHandler+0x24e>
   16b10:	2003      	movs	r0, #3
   16b12:	4915      	ldr	r1, [pc, #84]	; (16b68 <IPC_IRQHandler+0x294>)
   16b14:	4a16      	ldr	r2, [pc, #88]	; (16b70 <IPC_IRQHandler+0x29c>)
   16b16:	6008      	str	r0, [r1, #0]
   16b18:	6013      	str	r3, [r2, #0]
   16b1a:	e716      	b.n	1694a <IPC_IRQHandler+0x76>
   16b1c:	f7fd fa14 	bl	13f48 <bsd_os_application_irq_set>
   16b20:	e70e      	b.n	16940 <IPC_IRQHandler+0x6c>
   16b22:	2303      	movs	r3, #3
   16b24:	4910      	ldr	r1, [pc, #64]	; (16b68 <IPC_IRQHandler+0x294>)
   16b26:	4a12      	ldr	r2, [pc, #72]	; (16b70 <IPC_IRQHandler+0x29c>)
   16b28:	600b      	str	r3, [r1, #0]
   16b2a:	6013      	str	r3, [r2, #0]
   16b2c:	e70d      	b.n	1694a <IPC_IRQHandler+0x76>
   16b2e:	2003      	movs	r0, #3
   16b30:	2206      	movs	r2, #6
   16b32:	490d      	ldr	r1, [pc, #52]	; (16b68 <IPC_IRQHandler+0x294>)
   16b34:	4b0e      	ldr	r3, [pc, #56]	; (16b70 <IPC_IRQHandler+0x29c>)
   16b36:	6008      	str	r0, [r1, #0]
   16b38:	601a      	str	r2, [r3, #0]
   16b3a:	e706      	b.n	1694a <IPC_IRQHandler+0x76>
   16b3c:	2003      	movs	r0, #3
   16b3e:	2110      	movs	r1, #16
   16b40:	4a0b      	ldr	r2, [pc, #44]	; (16b70 <IPC_IRQHandler+0x29c>)
   16b42:	6018      	str	r0, [r3, #0]
   16b44:	6011      	str	r1, [r2, #0]
   16b46:	e6fb      	b.n	16940 <IPC_IRQHandler+0x6c>
   16b48:	2003      	movs	r0, #3
   16b4a:	f24c 0106 	movw	r1, #49158	; 0xc006
   16b4e:	4a08      	ldr	r2, [pc, #32]	; (16b70 <IPC_IRQHandler+0x29c>)
   16b50:	6018      	str	r0, [r3, #0]
   16b52:	6011      	str	r1, [r2, #0]
   16b54:	e6f4      	b.n	16940 <IPC_IRQHandler+0x6c>
   16b56:	bf00      	nop
   16b58:	e000e100 	.word	0xe000e100
   16b5c:	4002a000 	.word	0x4002a000
   16b60:	4002a11c 	.word	0x4002a11c
   16b64:	4002a108 	.word	0x4002a108
   16b68:	200230f0 	.word	0x200230f0
   16b6c:	4002a100 	.word	0x4002a100
   16b70:	200230e0 	.word	0x200230e0
   16b74:	4002a110 	.word	0x4002a110
   16b78:	4002a118 	.word	0x4002a118
   16b7c:	4002a5a0 	.word	0x4002a5a0
   16b80:	4002a308 	.word	0x4002a308
   16b84:	40005000 	.word	0x40005000
   16b88:	4002a598 	.word	0x4002a598
   16b8c:	4002a5a8 	.word	0x4002a5a8
   16b90:	4002a5ac 	.word	0x4002a5ac
   16b94:	200281a8 	.word	0x200281a8
   16b98:	04400004 	.word	0x04400004
   16b9c:	200230f4 	.word	0x200230f4
   16ba0:	200230e8 	.word	0x200230e8
   16ba4:	05500001 	.word	0x05500001

00016ba8 <rpc_transport_ipc_rx_init>:
   16ba8:	2800      	cmp	r0, #0
   16baa:	f000 80f7 	beq.w	16d9c <rpc_transport_ipc_rx_init+0x1f4>
   16bae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bb2:	6805      	ldr	r5, [r0, #0]
   16bb4:	b095      	sub	sp, #84	; 0x54
   16bb6:	2d00      	cmp	r5, #0
   16bb8:	f000 80e6 	beq.w	16d88 <rpc_transport_ipc_rx_init+0x1e0>
   16bbc:	6883      	ldr	r3, [r0, #8]
   16bbe:	2b00      	cmp	r3, #0
   16bc0:	f000 80e2 	beq.w	16d88 <rpc_transport_ipc_rx_init+0x1e0>
   16bc4:	6906      	ldr	r6, [r0, #16]
   16bc6:	2e00      	cmp	r6, #0
   16bc8:	f000 80de 	beq.w	16d88 <rpc_transport_ipc_rx_init+0x1e0>
   16bcc:	6a84      	ldr	r4, [r0, #40]	; 0x28
   16bce:	2c00      	cmp	r4, #0
   16bd0:	f000 80da 	beq.w	16d88 <rpc_transport_ipc_rx_init+0x1e0>
   16bd4:	6844      	ldr	r4, [r0, #4]
   16bd6:	2c1b      	cmp	r4, #27
   16bd8:	f240 80db 	bls.w	16d92 <rpc_transport_ipc_rx_init+0x1ea>
   16bdc:	68c4      	ldr	r4, [r0, #12]
   16bde:	2c0b      	cmp	r4, #11
   16be0:	f240 80d7 	bls.w	16d92 <rpc_transport_ipc_rx_init+0x1ea>
   16be4:	f8d0 c014 	ldr.w	ip, [r0, #20]
   16be8:	f1bc 0f17 	cmp.w	ip, #23
   16bec:	f240 80d1 	bls.w	16d92 <rpc_transport_ipc_rx_init+0x1ea>
   16bf0:	2700      	movs	r7, #0
   16bf2:	4604      	mov	r4, r0
   16bf4:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 16dbc <rpc_transport_ipc_rx_init+0x214>
   16bf8:	6b80      	ldr	r0, [r0, #56]	; 0x38
   16bfa:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 16dc0 <rpc_transport_ipc_rx_init+0x218>
   16bfe:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 16dc4 <rpc_transport_ipc_rx_init+0x21c>
   16c02:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 16dc8 <rpc_transport_ipc_rx_init+0x220>
   16c06:	e9cd 1200 	strd	r1, r2, [sp]
   16c0a:	f8ca 0000 	str.w	r0, [sl]
   16c0e:	4662      	mov	r2, ip
   16c10:	4639      	mov	r1, r7
   16c12:	4630      	mov	r0, r6
   16c14:	f8cb 3000 	str.w	r3, [fp]
   16c18:	f8c8 7000 	str.w	r7, [r8]
   16c1c:	f8c9 7000 	str.w	r7, [r9]
   16c20:	f010 fecb 	bl	279ba <memset>
   16c24:	69e3      	ldr	r3, [r4, #28]
   16c26:	4630      	mov	r0, r6
   16c28:	6033      	str	r3, [r6, #0]
   16c2a:	69a3      	ldr	r3, [r4, #24]
   16c2c:	6073      	str	r3, [r6, #4]
   16c2e:	f7ff fb21 	bl	16274 <ipc_trace_init>
   16c32:	2201      	movs	r2, #1
   16c34:	f04f 0c04 	mov.w	ip, #4
   16c38:	4b5a      	ldr	r3, [pc, #360]	; (16da4 <rpc_transport_ipc_rx_init+0x1fc>)
   16c3a:	495b      	ldr	r1, [pc, #364]	; (16da8 <rpc_transport_ipc_rx_init+0x200>)
   16c3c:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   16c40:	6809      	ldr	r1, [r1, #0]
   16c42:	2080      	movs	r0, #128	; 0x80
   16c44:	9104      	str	r1, [sp, #16]
   16c46:	4959      	ldr	r1, [pc, #356]	; (16dac <rpc_transport_ipc_rx_init+0x204>)
   16c48:	f8dd e010 	ldr.w	lr, [sp, #16]
   16c4c:	f8c3 7614 	str.w	r7, [r3, #1556]	; 0x614
   16c50:	6809      	ldr	r1, [r1, #0]
   16c52:	702f      	strb	r7, [r5, #0]
   16c54:	9103      	str	r1, [sp, #12]
   16c56:	706f      	strb	r7, [r5, #1]
   16c58:	70ef      	strb	r7, [r5, #3]
   16c5a:	70aa      	strb	r2, [r5, #2]
   16c5c:	9903      	ldr	r1, [sp, #12]
   16c5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   16c60:	f8db e000 	ldr.w	lr, [fp]
   16c64:	6069      	str	r1, [r5, #4]
   16c66:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   16c68:	9c01      	ldr	r4, [sp, #4]
   16c6a:	60a9      	str	r1, [r5, #8]
   16c6c:	60ec      	str	r4, [r5, #12]
   16c6e:	9c00      	ldr	r4, [sp, #0]
   16c70:	494f      	ldr	r1, [pc, #316]	; (16db0 <rpc_transport_ipc_rx_init+0x208>)
   16c72:	61ae      	str	r6, [r5, #24]
   16c74:	f8c5 e014 	str.w	lr, [r5, #20]
   16c78:	612c      	str	r4, [r5, #16]
   16c7a:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   16c7e:	680c      	ldr	r4, [r1, #0]
   16c80:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   16c84:	9405      	str	r4, [sp, #20]
   16c86:	9c05      	ldr	r4, [sp, #20]
   16c88:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   16c8c:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   16c90:	f44f 6680 	mov.w	r6, #1024	; 0x400
   16c94:	9406      	str	r4, [sp, #24]
   16c96:	9c06      	ldr	r4, [sp, #24]
   16c98:	2410      	movs	r4, #16
   16c9a:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   16c9e:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   16ca2:	4d44      	ldr	r5, [pc, #272]	; (16db4 <rpc_transport_ipc_rx_init+0x20c>)
   16ca4:	9407      	str	r4, [sp, #28]
   16ca6:	9c07      	ldr	r4, [sp, #28]
   16ca8:	2440      	movs	r4, #64	; 0x40
   16caa:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   16cae:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   16cb2:	9408      	str	r4, [sp, #32]
   16cb4:	9c08      	ldr	r4, [sp, #32]
   16cb6:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   16cba:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   16cbe:	9009      	str	r0, [sp, #36]	; 0x24
   16cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
   16cc2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
   16cc6:	6808      	ldr	r0, [r1, #0]
   16cc8:	900a      	str	r0, [sp, #40]	; 0x28
   16cca:	980a      	ldr	r0, [sp, #40]	; 0x28
   16ccc:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
   16cd0:	6888      	ldr	r0, [r1, #8]
   16cd2:	900b      	str	r0, [sp, #44]	; 0x2c
   16cd4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16cd6:	f8c3 7110 	str.w	r7, [r3, #272]	; 0x110
   16cda:	6908      	ldr	r0, [r1, #16]
   16cdc:	900c      	str	r0, [sp, #48]	; 0x30
   16cde:	980c      	ldr	r0, [sp, #48]	; 0x30
   16ce0:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
   16ce4:	6988      	ldr	r0, [r1, #24]
   16ce6:	900d      	str	r0, [sp, #52]	; 0x34
   16ce8:	980d      	ldr	r0, [sp, #52]	; 0x34
   16cea:	f8c3 711c 	str.w	r7, [r3, #284]	; 0x11c
   16cee:	69c8      	ldr	r0, [r1, #28]
   16cf0:	f501 7101 	add.w	r1, r1, #516	; 0x204
   16cf4:	900e      	str	r0, [sp, #56]	; 0x38
   16cf6:	980e      	ldr	r0, [sp, #56]	; 0x38
   16cf8:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   16cfc:	4310      	orrs	r0, r2
   16cfe:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   16d02:	680c      	ldr	r4, [r1, #0]
   16d04:	482c      	ldr	r0, [pc, #176]	; (16db8 <rpc_transport_ipc_rx_init+0x210>)
   16d06:	940f      	str	r4, [sp, #60]	; 0x3c
   16d08:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   16d0a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   16d0e:	ea44 040c 	orr.w	r4, r4, ip
   16d12:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   16d16:	680c      	ldr	r4, [r1, #0]
   16d18:	9410      	str	r4, [sp, #64]	; 0x40
   16d1a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   16d1c:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   16d20:	f044 0410 	orr.w	r4, r4, #16
   16d24:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   16d28:	680c      	ldr	r4, [r1, #0]
   16d2a:	9411      	str	r4, [sp, #68]	; 0x44
   16d2c:	9c11      	ldr	r4, [sp, #68]	; 0x44
   16d2e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   16d32:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   16d36:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   16d3a:	680c      	ldr	r4, [r1, #0]
   16d3c:	9412      	str	r4, [sp, #72]	; 0x48
   16d3e:	9c12      	ldr	r4, [sp, #72]	; 0x48
   16d40:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   16d44:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   16d48:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   16d4c:	f8da 3000 	ldr.w	r3, [sl]
   16d50:	6809      	ldr	r1, [r1, #0]
   16d52:	015b      	lsls	r3, r3, #5
   16d54:	9113      	str	r1, [sp, #76]	; 0x4c
   16d56:	b2db      	uxtb	r3, r3
   16d58:	9913      	ldr	r1, [sp, #76]	; 0x4c
   16d5a:	f8c8 2000 	str.w	r2, [r8]
   16d5e:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   16d62:	f8c0 6184 	str.w	r6, [r0, #388]	; 0x184
   16d66:	6046      	str	r6, [r0, #4]
   16d68:	9702      	str	r7, [sp, #8]
   16d6a:	f8c5 7610 	str.w	r7, [r5, #1552]	; 0x610
   16d6e:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   16d72:	9302      	str	r3, [sp, #8]
   16d74:	9b02      	ldr	r3, [sp, #8]
   16d76:	f8d8 3000 	ldr.w	r3, [r8]
   16d7a:	2b01      	cmp	r3, #1
   16d7c:	d0fb      	beq.n	16d76 <rpc_transport_ipc_rx_init+0x1ce>
   16d7e:	f8d9 0000 	ldr.w	r0, [r9]
   16d82:	b015      	add	sp, #84	; 0x54
   16d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d88:	f24c 000e 	movw	r0, #49166	; 0xc00e
   16d8c:	b015      	add	sp, #84	; 0x54
   16d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d92:	f24c 0009 	movw	r0, #49161	; 0xc009
   16d96:	b015      	add	sp, #84	; 0x54
   16d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d9c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   16da0:	4770      	bx	lr
   16da2:	bf00      	nop
   16da4:	4002a000 	.word	0x4002a000
   16da8:	4002a610 	.word	0x4002a610
   16dac:	4002a614 	.word	0x4002a614
   16db0:	4002a590 	.word	0x4002a590
   16db4:	40005000 	.word	0x40005000
   16db8:	e000e100 	.word	0xe000e100
   16dbc:	200230e4 	.word	0x200230e4
   16dc0:	200230f0 	.word	0x200230f0
   16dc4:	200230f4 	.word	0x200230f4
   16dc8:	200230e0 	.word	0x200230e0

00016dcc <rpc_transport_ipc_msg_free>:
   16dcc:	b470      	push	{r4, r5, r6}
   16dce:	4e17      	ldr	r6, [pc, #92]	; (16e2c <rpc_transport_ipc_msg_free+0x60>)
   16dd0:	6831      	ldr	r1, [r6, #0]
   16dd2:	680d      	ldr	r5, [r1, #0]
   16dd4:	b1ad      	cbz	r5, 16e02 <rpc_transport_ipc_msg_free+0x36>
   16dd6:	688b      	ldr	r3, [r1, #8]
   16dd8:	4283      	cmp	r3, r0
   16dda:	d024      	beq.n	16e26 <rpc_transport_ipc_msg_free+0x5a>
   16ddc:	2300      	movs	r3, #0
   16dde:	3301      	adds	r3, #1
   16de0:	00da      	lsls	r2, r3, #3
   16de2:	429d      	cmp	r5, r3
   16de4:	eb01 0402 	add.w	r4, r1, r2
   16de8:	d00b      	beq.n	16e02 <rpc_transport_ipc_msg_free+0x36>
   16dea:	68a4      	ldr	r4, [r4, #8]
   16dec:	42a0      	cmp	r0, r4
   16dee:	d1f6      	bne.n	16dde <rpc_transport_ipc_msg_free+0x12>
   16df0:	3204      	adds	r2, #4
   16df2:	588b      	ldr	r3, [r1, r2]
   16df4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   16df8:	f043 0303 	orr.w	r3, r3, #3
   16dfc:	508b      	str	r3, [r1, r2]
   16dfe:	bc70      	pop	{r4, r5, r6}
   16e00:	4770      	bx	lr
   16e02:	6871      	ldr	r1, [r6, #4]
   16e04:	680d      	ldr	r5, [r1, #0]
   16e06:	2d00      	cmp	r5, #0
   16e08:	d0f9      	beq.n	16dfe <rpc_transport_ipc_msg_free+0x32>
   16e0a:	688b      	ldr	r3, [r1, #8]
   16e0c:	4283      	cmp	r3, r0
   16e0e:	d00a      	beq.n	16e26 <rpc_transport_ipc_msg_free+0x5a>
   16e10:	2300      	movs	r3, #0
   16e12:	3301      	adds	r3, #1
   16e14:	00da      	lsls	r2, r3, #3
   16e16:	429d      	cmp	r5, r3
   16e18:	eb01 0402 	add.w	r4, r1, r2
   16e1c:	d0ef      	beq.n	16dfe <rpc_transport_ipc_msg_free+0x32>
   16e1e:	68a4      	ldr	r4, [r4, #8]
   16e20:	42a0      	cmp	r0, r4
   16e22:	d1f6      	bne.n	16e12 <rpc_transport_ipc_msg_free+0x46>
   16e24:	e7e4      	b.n	16df0 <rpc_transport_ipc_msg_free+0x24>
   16e26:	2204      	movs	r2, #4
   16e28:	e7e3      	b.n	16df2 <rpc_transport_ipc_msg_free+0x26>
   16e2a:	bf00      	nop
   16e2c:	200230e8 	.word	0x200230e8

00016e30 <rpc_transport_ipc_shutdown_done>:
   16e30:	4b03      	ldr	r3, [pc, #12]	; (16e40 <rpc_transport_ipc_shutdown_done+0x10>)
   16e32:	6818      	ldr	r0, [r3, #0]
   16e34:	f1a0 0005 	sub.w	r0, r0, #5
   16e38:	fab0 f080 	clz	r0, r0
   16e3c:	0940      	lsrs	r0, r0, #5
   16e3e:	4770      	bx	lr
   16e40:	200230f0 	.word	0x200230f0

00016e44 <rpc_transport_ipc_tx_init>:
   16e44:	2800      	cmp	r0, #0
   16e46:	f000 80b8 	beq.w	16fba <rpc_transport_ipc_tx_init+0x176>
   16e4a:	2900      	cmp	r1, #0
   16e4c:	f000 80b5 	beq.w	16fba <rpc_transport_ipc_tx_init+0x176>
   16e50:	2a00      	cmp	r2, #0
   16e52:	f000 80b2 	beq.w	16fba <rpc_transport_ipc_tx_init+0x176>
   16e56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e5a:	6a04      	ldr	r4, [r0, #32]
   16e5c:	b085      	sub	sp, #20
   16e5e:	2c00      	cmp	r4, #0
   16e60:	f000 80a6 	beq.w	16fb0 <rpc_transport_ipc_tx_init+0x16c>
   16e64:	6a40      	ldr	r0, [r0, #36]	; 0x24
   16e66:	2800      	cmp	r0, #0
   16e68:	f000 80a2 	beq.w	16fb0 <rpc_transport_ipc_tx_init+0x16c>
   16e6c:	f642 4587 	movw	r5, #11399	; 0x2c87
   16e70:	f04f 0a00 	mov.w	sl, #0
   16e74:	4e55      	ldr	r6, [pc, #340]	; (16fcc <rpc_transport_ipc_tx_init+0x188>)
   16e76:	42a8      	cmp	r0, r5
   16e78:	f886 a000 	strb.w	sl, [r6]
   16e7c:	f240 80a0 	bls.w	16fc0 <rpc_transport_ipc_tx_init+0x17c>
   16e80:	2708      	movs	r7, #8
   16e82:	f8df 9180 	ldr.w	r9, [pc, #384]	; 17004 <rpc_transport_ipc_tx_init+0x1c0>
   16e86:	4620      	mov	r0, r4
   16e88:	4616      	mov	r6, r2
   16e8a:	460d      	mov	r5, r1
   16e8c:	2244      	movs	r2, #68	; 0x44
   16e8e:	4651      	mov	r1, sl
   16e90:	f8c9 4000 	str.w	r4, [r9]
   16e94:	f010 fd91 	bl	279ba <memset>
   16e98:	f8d9 2000 	ldr.w	r2, [r9]
   16e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   16ea0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 17008 <rpc_transport_ipc_tx_init+0x1c4>
   16ea4:	f882 a001 	strb.w	sl, [r2, #1]
   16ea8:	f882 a002 	strb.w	sl, [r2, #2]
   16eac:	f882 a003 	strb.w	sl, [r2, #3]
   16eb0:	7017      	strb	r7, [r2, #0]
   16eb2:	4618      	mov	r0, r3
   16eb4:	2244      	movs	r2, #68	; 0x44
   16eb6:	4651      	mov	r1, sl
   16eb8:	f8c8 3000 	str.w	r3, [r8]
   16ebc:	f010 fd7d 	bl	279ba <memset>
   16ec0:	f8d8 2000 	ldr.w	r2, [r8]
   16ec4:	f104 0388 	add.w	r3, r4, #136	; 0x88
   16ec8:	f8df b140 	ldr.w	fp, [pc, #320]	; 1700c <rpc_transport_ipc_tx_init+0x1c8>
   16ecc:	7017      	strb	r7, [r2, #0]
   16ece:	f882 a001 	strb.w	sl, [r2, #1]
   16ed2:	f882 a002 	strb.w	sl, [r2, #2]
   16ed6:	f882 a003 	strb.w	sl, [r2, #3]
   16eda:	4618      	mov	r0, r3
   16edc:	f44f 7200 	mov.w	r2, #512	; 0x200
   16ee0:	4651      	mov	r1, sl
   16ee2:	f8cb 3000 	str.w	r3, [fp]
   16ee6:	f010 fd68 	bl	279ba <memset>
   16eea:	4b39      	ldr	r3, [pc, #228]	; (16fd0 <rpc_transport_ipc_tx_init+0x18c>)
   16eec:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   16ef0:	f8c3 c000 	str.w	ip, [r3]
   16ef4:	4651      	mov	r1, sl
   16ef6:	4660      	mov	r0, ip
   16ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
   16efc:	f010 fd5d 	bl	279ba <memset>
   16f00:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   16f04:	2106      	movs	r1, #6
   16f06:	f04f 0e01 	mov.w	lr, #1
   16f0a:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   16f0e:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   16f12:	4b30      	ldr	r3, [pc, #192]	; (16fd4 <rpc_transport_ipc_tx_init+0x190>)
   16f14:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   16f18:	605c      	str	r4, [r3, #4]
   16f1a:	4c2f      	ldr	r4, [pc, #188]	; (16fd8 <rpc_transport_ipc_tx_init+0x194>)
   16f1c:	f8c3 c008 	str.w	ip, [r3, #8]
   16f20:	8199      	strh	r1, [r3, #12]
   16f22:	f8a3 e000 	strh.w	lr, [r3]
   16f26:	4619      	mov	r1, r3
   16f28:	611c      	str	r4, [r3, #16]
   16f2a:	4b2c      	ldr	r3, [pc, #176]	; (16fdc <rpc_transport_ipc_tx_init+0x198>)
   16f2c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 17010 <rpc_transport_ipc_tx_init+0x1cc>
   16f30:	6120      	str	r0, [r4, #16]
   16f32:	482b      	ldr	r0, [pc, #172]	; (16fe0 <rpc_transport_ipc_tx_init+0x19c>)
   16f34:	6063      	str	r3, [r4, #4]
   16f36:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   16f3a:	60a0      	str	r0, [r4, #8]
   16f3c:	f8c4 c000 	str.w	ip, [r4]
   16f40:	4828      	ldr	r0, [pc, #160]	; (16fe4 <rpc_transport_ipc_tx_init+0x1a0>)
   16f42:	60e3      	str	r3, [r4, #12]
   16f44:	6162      	str	r2, [r4, #20]
   16f46:	f005 ff43 	bl	1cdd0 <nrf_mem_register>
   16f4a:	2800      	cmp	r0, #0
   16f4c:	d132      	bne.n	16fb4 <rpc_transport_ipc_tx_init+0x170>
   16f4e:	f04f 0c02 	mov.w	ip, #2
   16f52:	2420      	movs	r4, #32
   16f54:	f8d9 1000 	ldr.w	r1, [r9]
   16f58:	f8db 2000 	ldr.w	r2, [fp]
   16f5c:	6029      	str	r1, [r5, #0]
   16f5e:	4b1c      	ldr	r3, [pc, #112]	; (16fd0 <rpc_transport_ipc_tx_init+0x18c>)
   16f60:	f8d8 1000 	ldr.w	r1, [r8]
   16f64:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 17014 <rpc_transport_ipc_tx_init+0x1d0>
   16f68:	4d1f      	ldr	r5, [pc, #124]	; (16fe8 <rpc_transport_ipc_tx_init+0x1a4>)
   16f6a:	6031      	str	r1, [r6, #0]
   16f6c:	f8ce 2000 	str.w	r2, [lr]
   16f70:	681b      	ldr	r3, [r3, #0]
   16f72:	491e      	ldr	r1, [pc, #120]	; (16fec <rpc_transport_ipc_tx_init+0x1a8>)
   16f74:	f502 7200 	add.w	r2, r2, #512	; 0x200
   16f78:	602a      	str	r2, [r5, #0]
   16f7a:	4e1d      	ldr	r6, [pc, #116]	; (16ff0 <rpc_transport_ipc_tx_init+0x1ac>)
   16f7c:	4a1d      	ldr	r2, [pc, #116]	; (16ff4 <rpc_transport_ipc_tx_init+0x1b0>)
   16f7e:	4d1e      	ldr	r5, [pc, #120]	; (16ff8 <rpc_transport_ipc_tx_init+0x1b4>)
   16f80:	600b      	str	r3, [r1, #0]
   16f82:	f503 7300 	add.w	r3, r3, #512	; 0x200
   16f86:	491d      	ldr	r1, [pc, #116]	; (16ffc <rpc_transport_ipc_tx_init+0x1b8>)
   16f88:	6033      	str	r3, [r6, #0]
   16f8a:	8028      	strh	r0, [r5, #0]
   16f8c:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   16f90:	6809      	ldr	r1, [r1, #0]
   16f92:	4b1b      	ldr	r3, [pc, #108]	; (17000 <rpc_transport_ipc_tx_init+0x1bc>)
   16f94:	9103      	str	r1, [sp, #12]
   16f96:	9903      	ldr	r1, [sp, #12]
   16f98:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   16f9c:	6819      	ldr	r1, [r3, #0]
   16f9e:	443b      	add	r3, r7
   16fa0:	9102      	str	r1, [sp, #8]
   16fa2:	9902      	ldr	r1, [sp, #8]
   16fa4:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   16fa8:	681b      	ldr	r3, [r3, #0]
   16faa:	9301      	str	r3, [sp, #4]
   16fac:	9b01      	ldr	r3, [sp, #4]
   16fae:	e001      	b.n	16fb4 <rpc_transport_ipc_tx_init+0x170>
   16fb0:	f24c 0007 	movw	r0, #49159	; 0xc007
   16fb4:	b005      	add	sp, #20
   16fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fba:	f24c 000e 	movw	r0, #49166	; 0xc00e
   16fbe:	4770      	bx	lr
   16fc0:	f24c 0004 	movw	r0, #49156	; 0xc004
   16fc4:	b005      	add	sp, #20
   16fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fca:	bf00      	nop
   16fcc:	2002af2e 	.word	0x2002af2e
   16fd0:	20023120 	.word	0x20023120
   16fd4:	2002310c 	.word	0x2002310c
   16fd8:	20023130 	.word	0x20023130
   16fdc:	00040080 	.word	0x00040080
   16fe0:	00040100 	.word	0x00040100
   16fe4:	200230f8 	.word	0x200230f8
   16fe8:	20023104 	.word	0x20023104
   16fec:	20023100 	.word	0x20023100
   16ff0:	200230fc 	.word	0x200230fc
   16ff4:	4002a000 	.word	0x4002a000
   16ff8:	200281aa 	.word	0x200281aa
   16ffc:	4002a514 	.word	0x4002a514
   17000:	4002a51c 	.word	0x4002a51c
   17004:	2002312c 	.word	0x2002312c
   17008:	20023124 	.word	0x20023124
   1700c:	20023128 	.word	0x20023128
   17010:	00080040 	.word	0x00080040
   17014:	20023108 	.word	0x20023108

00017018 <rpc_transport_ipc_send>:
   17018:	2800      	cmp	r0, #0
   1701a:	d061      	beq.n	170e0 <rpc_transport_ipc_send+0xc8>
   1701c:	b4f0      	push	{r4, r5, r6, r7}
   1701e:	4b34      	ldr	r3, [pc, #208]	; (170f0 <rpc_transport_ipc_send+0xd8>)
   17020:	b082      	sub	sp, #8
   17022:	681a      	ldr	r2, [r3, #0]
   17024:	4b33      	ldr	r3, [pc, #204]	; (170f4 <rpc_transport_ipc_send+0xdc>)
   17026:	4282      	cmp	r2, r0
   17028:	d81e      	bhi.n	17068 <rpc_transport_ipc_send+0x50>
   1702a:	681b      	ldr	r3, [r3, #0]
   1702c:	4932      	ldr	r1, [pc, #200]	; (170f8 <rpc_transport_ipc_send+0xe0>)
   1702e:	4283      	cmp	r3, r0
   17030:	6809      	ldr	r1, [r1, #0]
   17032:	d803      	bhi.n	1703c <rpc_transport_ipc_send+0x24>
   17034:	4c31      	ldr	r4, [pc, #196]	; (170fc <rpc_transport_ipc_send+0xe4>)
   17036:	6824      	ldr	r4, [r4, #0]
   17038:	4284      	cmp	r4, r0
   1703a:	d849      	bhi.n	170d0 <rpc_transport_ipc_send+0xb8>
   1703c:	4281      	cmp	r1, r0
   1703e:	d90e      	bls.n	1705e <rpc_transport_ipc_send+0x46>
   17040:	4b2f      	ldr	r3, [pc, #188]	; (17100 <rpc_transport_ipc_send+0xe8>)
   17042:	781b      	ldrb	r3, [r3, #0]
   17044:	2b00      	cmp	r3, #0
   17046:	d14e      	bne.n	170e6 <rpc_transport_ipc_send+0xce>
   17048:	1a83      	subs	r3, r0, r2
   1704a:	492e      	ldr	r1, [pc, #184]	; (17104 <rpc_transport_ipc_send+0xec>)
   1704c:	099f      	lsrs	r7, r3, #6
   1704e:	069b      	lsls	r3, r3, #26
   17050:	680a      	ldr	r2, [r1, #0]
   17052:	4d2d      	ldr	r5, [pc, #180]	; (17108 <rpc_transport_ipc_send+0xf0>)
   17054:	f04f 0403 	mov.w	r4, #3
   17058:	f04f 0602 	mov.w	r6, #2
   1705c:	d014      	beq.n	17088 <rpc_transport_ipc_send+0x70>
   1705e:	f24c 0010 	movw	r0, #49168	; 0xc010
   17062:	b002      	add	sp, #8
   17064:	bcf0      	pop	{r4, r5, r6, r7}
   17066:	4770      	bx	lr
   17068:	681b      	ldr	r3, [r3, #0]
   1706a:	4298      	cmp	r0, r3
   1706c:	d3f7      	bcc.n	1705e <rpc_transport_ipc_send+0x46>
   1706e:	4a23      	ldr	r2, [pc, #140]	; (170fc <rpc_transport_ipc_send+0xe4>)
   17070:	6812      	ldr	r2, [r2, #0]
   17072:	4290      	cmp	r0, r2
   17074:	d2f3      	bcs.n	1705e <rpc_transport_ipc_send+0x46>
   17076:	2401      	movs	r4, #1
   17078:	1ac3      	subs	r3, r0, r3
   1707a:	4a24      	ldr	r2, [pc, #144]	; (1710c <rpc_transport_ipc_send+0xf4>)
   1707c:	099f      	lsrs	r7, r3, #6
   1707e:	069b      	lsls	r3, r3, #26
   17080:	4626      	mov	r6, r4
   17082:	6812      	ldr	r2, [r2, #0]
   17084:	4d22      	ldr	r5, [pc, #136]	; (17110 <rpc_transport_ipc_send+0xf8>)
   17086:	d1ea      	bne.n	1705e <rpc_transport_ipc_send+0x46>
   17088:	6841      	ldr	r1, [r0, #4]
   1708a:	b2c9      	uxtb	r1, r1
   1708c:	428e      	cmp	r6, r1
   1708e:	d122      	bne.n	170d6 <rpc_transport_ipc_send+0xbe>
   17090:	2020      	movs	r0, #32
   17092:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   17096:	491f      	ldr	r1, [pc, #124]	; (17114 <rpc_transport_ipc_send+0xfc>)
   17098:	685a      	ldr	r2, [r3, #4]
   1709a:	880e      	ldrh	r6, [r1, #0]
   1709c:	b292      	uxth	r2, r2
   1709e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   170a2:	605a      	str	r2, [r3, #4]
   170a4:	685a      	ldr	r2, [r3, #4]
   170a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   170aa:	f042 0201 	orr.w	r2, r2, #1
   170ae:	605a      	str	r2, [r3, #4]
   170b0:	bf00      	nop
   170b2:	3801      	subs	r0, #1
   170b4:	d1fc      	bne.n	170b0 <rpc_transport_ipc_send+0x98>
   170b6:	2201      	movs	r2, #1
   170b8:	4b17      	ldr	r3, [pc, #92]	; (17118 <rpc_transport_ipc_send+0x100>)
   170ba:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   170be:	682a      	ldr	r2, [r5, #0]
   170c0:	880b      	ldrh	r3, [r1, #0]
   170c2:	9201      	str	r2, [sp, #4]
   170c4:	9a01      	ldr	r2, [sp, #4]
   170c6:	3301      	adds	r3, #1
   170c8:	800b      	strh	r3, [r1, #0]
   170ca:	b002      	add	sp, #8
   170cc:	bcf0      	pop	{r4, r5, r6, r7}
   170ce:	4770      	bx	lr
   170d0:	4281      	cmp	r1, r0
   170d2:	d9d0      	bls.n	17076 <rpc_transport_ipc_send+0x5e>
   170d4:	e7b4      	b.n	17040 <rpc_transport_ipc_send+0x28>
   170d6:	f24c 0007 	movw	r0, #49159	; 0xc007
   170da:	b002      	add	sp, #8
   170dc:	bcf0      	pop	{r4, r5, r6, r7}
   170de:	4770      	bx	lr
   170e0:	f24c 000e 	movw	r0, #49166	; 0xc00e
   170e4:	4770      	bx	lr
   170e6:	f24c 000f 	movw	r0, #49167	; 0xc00f
   170ea:	b002      	add	sp, #8
   170ec:	bcf0      	pop	{r4, r5, r6, r7}
   170ee:	4770      	bx	lr
   170f0:	20023108 	.word	0x20023108
   170f4:	20023100 	.word	0x20023100
   170f8:	20023104 	.word	0x20023104
   170fc:	200230fc 	.word	0x200230fc
   17100:	2002af2e 	.word	0x2002af2e
   17104:	2002312c 	.word	0x2002312c
   17108:	4002a00c 	.word	0x4002a00c
   1710c:	20023124 	.word	0x20023124
   17110:	4002a004 	.word	0x4002a004
   17114:	200281aa 	.word	0x200281aa
   17118:	4002a000 	.word	0x4002a000

0001711c <rpc_transport_ipc_tx_rpc_data_alloc>:
   1711c:	4b18      	ldr	r3, [pc, #96]	; (17180 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   1711e:	781b      	ldrb	r3, [r3, #0]
   17120:	bb63      	cbnz	r3, 1717c <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   17122:	b4f0      	push	{r4, r5, r6, r7}
   17124:	4a17      	ldr	r2, [pc, #92]	; (17184 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   17126:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1712a:	6814      	ldr	r4, [r2, #0]
   1712c:	4b16      	ldr	r3, [pc, #88]	; (17188 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   1712e:	6825      	ldr	r5, [r4, #0]
   17130:	681e      	ldr	r6, [r3, #0]
   17132:	b1a5      	cbz	r5, 1715e <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   17134:	4607      	mov	r7, r0
   17136:	00c1      	lsls	r1, r0, #3
   17138:	1863      	adds	r3, r4, r1
   1713a:	685a      	ldr	r2, [r3, #4]
   1713c:	b2d2      	uxtb	r2, r2
   1713e:	2a03      	cmp	r2, #3
   17140:	d104      	bne.n	1714c <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   17142:	609f      	str	r7, [r3, #8]
   17144:	685a      	ldr	r2, [r3, #4]
   17146:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1714a:	605a      	str	r2, [r3, #4]
   1714c:	685a      	ldr	r2, [r3, #4]
   1714e:	f012 0fff 	tst.w	r2, #255	; 0xff
   17152:	d101      	bne.n	17158 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   17154:	689b      	ldr	r3, [r3, #8]
   17156:	b12b      	cbz	r3, 17164 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   17158:	3001      	adds	r0, #1
   1715a:	42a8      	cmp	r0, r5
   1715c:	d1eb      	bne.n	17136 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   1715e:	2000      	movs	r0, #0
   17160:	bcf0      	pop	{r4, r5, r6, r7}
   17162:	4770      	bx	lr
   17164:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   17168:	4421      	add	r1, r4
   1716a:	6088      	str	r0, [r1, #8]
   1716c:	6843      	ldr	r3, [r0, #4]
   1716e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   17172:	f043 0302 	orr.w	r3, r3, #2
   17176:	6043      	str	r3, [r0, #4]
   17178:	bcf0      	pop	{r4, r5, r6, r7}
   1717a:	4770      	bx	lr
   1717c:	2000      	movs	r0, #0
   1717e:	4770      	bx	lr
   17180:	2002af2e 	.word	0x2002af2e
   17184:	2002312c 	.word	0x2002312c
   17188:	20023128 	.word	0x20023128

0001718c <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   1718c:	b4f0      	push	{r4, r5, r6, r7}
   1718e:	4a15      	ldr	r2, [pc, #84]	; (171e4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   17190:	4b15      	ldr	r3, [pc, #84]	; (171e8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   17192:	6814      	ldr	r4, [r2, #0]
   17194:	681e      	ldr	r6, [r3, #0]
   17196:	6825      	ldr	r5, [r4, #0]
   17198:	b1ad      	cbz	r5, 171c6 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   1719a:	2000      	movs	r0, #0
   1719c:	4607      	mov	r7, r0
   1719e:	00c1      	lsls	r1, r0, #3
   171a0:	1863      	adds	r3, r4, r1
   171a2:	685a      	ldr	r2, [r3, #4]
   171a4:	b2d2      	uxtb	r2, r2
   171a6:	2a03      	cmp	r2, #3
   171a8:	d104      	bne.n	171b4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   171aa:	609f      	str	r7, [r3, #8]
   171ac:	685a      	ldr	r2, [r3, #4]
   171ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   171b2:	605a      	str	r2, [r3, #4]
   171b4:	685a      	ldr	r2, [r3, #4]
   171b6:	f012 0fff 	tst.w	r2, #255	; 0xff
   171ba:	d101      	bne.n	171c0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   171bc:	689b      	ldr	r3, [r3, #8]
   171be:	b12b      	cbz	r3, 171cc <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   171c0:	3001      	adds	r0, #1
   171c2:	4285      	cmp	r5, r0
   171c4:	d1eb      	bne.n	1719e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   171c6:	2000      	movs	r0, #0
   171c8:	bcf0      	pop	{r4, r5, r6, r7}
   171ca:	4770      	bx	lr
   171cc:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   171d0:	4421      	add	r1, r4
   171d2:	6088      	str	r0, [r1, #8]
   171d4:	6843      	ldr	r3, [r0, #4]
   171d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   171da:	f043 0301 	orr.w	r3, r3, #1
   171de:	6043      	str	r3, [r0, #4]
   171e0:	bcf0      	pop	{r4, r5, r6, r7}
   171e2:	4770      	bx	lr
   171e4:	20023124 	.word	0x20023124
   171e8:	20023120 	.word	0x20023120

000171ec <rpc_transport_ipc_tx_data_alloc>:
   171ec:	4b03      	ldr	r3, [pc, #12]	; (171fc <rpc_transport_ipc_tx_data_alloc+0x10>)
   171ee:	781b      	ldrb	r3, [r3, #0]
   171f0:	b90b      	cbnz	r3, 171f6 <rpc_transport_ipc_tx_data_alloc+0xa>
   171f2:	f005 bf1d 	b.w	1d030 <nrf_shared_malloc>
   171f6:	2000      	movs	r0, #0
   171f8:	4770      	bx	lr
   171fa:	bf00      	nop
   171fc:	2002af2e 	.word	0x2002af2e

00017200 <rpc_transport_ipc_tx_suspend>:
   17200:	2201      	movs	r2, #1
   17202:	4b01      	ldr	r3, [pc, #4]	; (17208 <rpc_transport_ipc_tx_suspend+0x8>)
   17204:	701a      	strb	r2, [r3, #0]
   17206:	4770      	bx	lr
   17208:	2002af2e 	.word	0x2002af2e

0001720c <rpc_transport_ipc_request_shutdown>:
   1720c:	b4f0      	push	{r4, r5, r6, r7}
   1720e:	4a16      	ldr	r2, [pc, #88]	; (17268 <rpc_transport_ipc_request_shutdown+0x5c>)
   17210:	4b16      	ldr	r3, [pc, #88]	; (1726c <rpc_transport_ipc_request_shutdown+0x60>)
   17212:	6814      	ldr	r4, [r2, #0]
   17214:	681e      	ldr	r6, [r3, #0]
   17216:	6825      	ldr	r5, [r4, #0]
   17218:	b1ad      	cbz	r5, 17246 <rpc_transport_ipc_request_shutdown+0x3a>
   1721a:	2200      	movs	r2, #0
   1721c:	4617      	mov	r7, r2
   1721e:	00d0      	lsls	r0, r2, #3
   17220:	1823      	adds	r3, r4, r0
   17222:	6859      	ldr	r1, [r3, #4]
   17224:	b2c9      	uxtb	r1, r1
   17226:	2903      	cmp	r1, #3
   17228:	d104      	bne.n	17234 <rpc_transport_ipc_request_shutdown+0x28>
   1722a:	609f      	str	r7, [r3, #8]
   1722c:	6859      	ldr	r1, [r3, #4]
   1722e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   17232:	6059      	str	r1, [r3, #4]
   17234:	6859      	ldr	r1, [r3, #4]
   17236:	f011 0fff 	tst.w	r1, #255	; 0xff
   1723a:	d101      	bne.n	17240 <rpc_transport_ipc_request_shutdown+0x34>
   1723c:	689b      	ldr	r3, [r3, #8]
   1723e:	b123      	cbz	r3, 1724a <rpc_transport_ipc_request_shutdown+0x3e>
   17240:	3201      	adds	r2, #1
   17242:	42aa      	cmp	r2, r5
   17244:	d1eb      	bne.n	1721e <rpc_transport_ipc_request_shutdown+0x12>
   17246:	bcf0      	pop	{r4, r5, r6, r7}
   17248:	4770      	bx	lr
   1724a:	0192      	lsls	r2, r2, #6
   1724c:	4404      	add	r4, r0
   1724e:	18b0      	adds	r0, r6, r2
   17250:	60a0      	str	r0, [r4, #8]
   17252:	6843      	ldr	r3, [r0, #4]
   17254:	4906      	ldr	r1, [pc, #24]	; (17270 <rpc_transport_ipc_request_shutdown+0x64>)
   17256:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1725a:	f043 0301 	orr.w	r3, r3, #1
   1725e:	6043      	str	r3, [r0, #4]
   17260:	50b1      	str	r1, [r6, r2]
   17262:	bcf0      	pop	{r4, r5, r6, r7}
   17264:	f7ff bed8 	b.w	17018 <rpc_transport_ipc_send>
   17268:	20023124 	.word	0x20023124
   1726c:	20023120 	.word	0x20023120
   17270:	00030001 	.word	0x00030001

00017274 <secure_client_socket>:
   17274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17278:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1727c:	460c      	mov	r4, r1
   1727e:	680b      	ldr	r3, [r1, #0]
   17280:	4f46      	ldr	r7, [pc, #280]	; (1739c <secure_client_socket+0x128>)
   17282:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   17286:	600b      	str	r3, [r1, #0]
   17288:	680b      	ldr	r3, [r1, #0]
   1728a:	00c6      	lsls	r6, r0, #3
   1728c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17290:	600b      	str	r3, [r1, #0]
   17292:	eb07 0a06 	add.w	sl, r7, r6
   17296:	b084      	sub	sp, #16
   17298:	f8da 3004 	ldr.w	r3, [sl, #4]
   1729c:	6989      	ldr	r1, [r1, #24]
   1729e:	f247 0281 	movw	r2, #28801	; 0x7081
   172a2:	4605      	mov	r5, r0
   172a4:	f8d4 8000 	ldr.w	r8, [r4]
   172a8:	e9cd cc02 	strd	ip, ip, [sp, #8]
   172ac:	f000 fcfc 	bl	17ca8 <ip_interface_request_create>
   172b0:	2800      	cmp	r0, #0
   172b2:	d06d      	beq.n	17390 <secure_client_socket+0x11c>
   172b4:	f8da 2004 	ldr.w	r2, [sl, #4]
   172b8:	4681      	mov	r9, r0
   172ba:	2a00      	cmp	r2, #0
   172bc:	d15d      	bne.n	1737a <secure_client_socket+0x106>
   172be:	4b38      	ldr	r3, [pc, #224]	; (173a0 <secure_client_socket+0x12c>)
   172c0:	1971      	adds	r1, r6, r5
   172c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   172c6:	2224      	movs	r2, #36	; 0x24
   172c8:	f109 0014 	add.w	r0, r9, #20
   172cc:	f010 fb3b 	bl	27946 <memcpy>
   172d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   172d4:	4649      	mov	r1, r9
   172d6:	3324      	adds	r3, #36	; 0x24
   172d8:	f8c9 3008 	str.w	r3, [r9, #8]
   172dc:	6822      	ldr	r2, [r4, #0]
   172de:	4643      	mov	r3, r8
   172e0:	0c12      	lsrs	r2, r2, #16
   172e2:	0412      	lsls	r2, r2, #16
   172e4:	f042 020a 	orr.w	r2, r2, #10
   172e8:	6022      	str	r2, [r4, #0]
   172ea:	4620      	mov	r0, r4
   172ec:	f247 0281 	movw	r2, #28801	; 0x7081
   172f0:	f000 fcfa 	bl	17ce8 <ip_interface_request_send>
   172f4:	4603      	mov	r3, r0
   172f6:	b968      	cbnz	r0, 17314 <secure_client_socket+0xa0>
   172f8:	6823      	ldr	r3, [r4, #0]
   172fa:	00db      	lsls	r3, r3, #3
   172fc:	d40e      	bmi.n	1731c <secure_client_socket+0xa8>
   172fe:	ab03      	add	r3, sp, #12
   17300:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17304:	210b      	movs	r1, #11
   17306:	4628      	mov	r0, r5
   17308:	f000 fd02 	bl	17d10 <ip_interface_wait>
   1730c:	4603      	mov	r3, r0
   1730e:	b150      	cbz	r0, 17326 <secure_client_socket+0xb2>
   17310:	f8c4 8000 	str.w	r8, [r4]
   17314:	4618      	mov	r0, r3
   17316:	b004      	add	sp, #16
   17318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1731c:	2373      	movs	r3, #115	; 0x73
   1731e:	4618      	mov	r0, r3
   17320:	b004      	add	sp, #16
   17322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17326:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1732a:	ab02      	add	r3, sp, #8
   1732c:	4611      	mov	r1, r2
   1732e:	4628      	mov	r0, r5
   17330:	f000 fcee 	bl	17d10 <ip_interface_wait>
   17334:	4603      	mov	r3, r0
   17336:	bb30      	cbnz	r0, 17386 <secure_client_socket+0x112>
   17338:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   1733c:	b138      	cbz	r0, 1734e <secure_client_socket+0xda>
   1733e:	9301      	str	r3, [sp, #4]
   17340:	f005 fe6a 	bl	1d018 <nrf_free>
   17344:	9b01      	ldr	r3, [sp, #4]
   17346:	443e      	add	r6, r7
   17348:	6073      	str	r3, [r6, #4]
   1734a:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   1734e:	4618      	mov	r0, r3
   17350:	6822      	ldr	r2, [r4, #0]
   17352:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   17356:	6022      	str	r2, [r4, #0]
   17358:	6822      	ldr	r2, [r4, #0]
   1735a:	0c12      	lsrs	r2, r2, #16
   1735c:	0412      	lsls	r2, r2, #16
   1735e:	f042 020c 	orr.w	r2, r2, #12
   17362:	6022      	str	r2, [r4, #0]
   17364:	6822      	ldr	r2, [r4, #0]
   17366:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1736a:	6022      	str	r2, [r4, #0]
   1736c:	6822      	ldr	r2, [r4, #0]
   1736e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   17372:	6022      	str	r2, [r4, #0]
   17374:	b004      	add	sp, #16
   17376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1737a:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   1737e:	6800      	ldr	r0, [r0, #0]
   17380:	f010 fae1 	bl	27946 <memcpy>
   17384:	e79b      	b.n	172be <secure_client_socket+0x4a>
   17386:	2b73      	cmp	r3, #115	; 0x73
   17388:	d0c4      	beq.n	17314 <secure_client_socket+0xa0>
   1738a:	f8c4 8000 	str.w	r8, [r4]
   1738e:	e7c1      	b.n	17314 <secure_client_socket+0xa0>
   17390:	230c      	movs	r3, #12
   17392:	4618      	mov	r0, r3
   17394:	b004      	add	sp, #16
   17396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1739a:	bf00      	nop
   1739c:	2002328c 	.word	0x2002328c
   173a0:	20023148 	.word	0x20023148

000173a4 <tls_interface_init>:
   173a4:	2000      	movs	r0, #0
   173a6:	4770      	bx	lr

000173a8 <tls_interface_open>:
   173a8:	b538      	push	{r3, r4, r5, lr}
   173aa:	1e4b      	subs	r3, r1, #1
   173ac:	2b01      	cmp	r3, #1
   173ae:	d808      	bhi.n	173c2 <tls_interface_open+0x1a>
   173b0:	4614      	mov	r4, r2
   173b2:	b162      	cbz	r2, 173ce <tls_interface_open+0x26>
   173b4:	2901      	cmp	r1, #1
   173b6:	d02d      	beq.n	17414 <tls_interface_open+0x6c>
   173b8:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   173bc:	bf08      	it	eq
   173be:	2202      	moveq	r2, #2
   173c0:	d00d      	beq.n	173de <tls_interface_open+0x36>
   173c2:	2029      	movs	r0, #41	; 0x29
   173c4:	f7fc fc64 	bl	13c90 <bsd_os_errno_set>
   173c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   173cc:	e020      	b.n	17410 <tls_interface_open+0x68>
   173ce:	2901      	cmp	r1, #1
   173d0:	bf0b      	itete	eq
   173d2:	2201      	moveq	r2, #1
   173d4:	2202      	movne	r2, #2
   173d6:	f44f 7482 	moveq.w	r4, #260	; 0x104
   173da:	f44f 7487 	movne.w	r4, #270	; 0x10e
   173de:	f000 fcc9 	bl	17d74 <ip_interface_open>
   173e2:	1e05      	subs	r5, r0, #0
   173e4:	db1b      	blt.n	1741e <tls_interface_open+0x76>
   173e6:	4b0f      	ldr	r3, [pc, #60]	; (17424 <tls_interface_open+0x7c>)
   173e8:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   173ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   173f0:	2224      	movs	r2, #36	; 0x24
   173f2:	490d      	ldr	r1, [pc, #52]	; (17428 <tls_interface_open+0x80>)
   173f4:	f010 faa7 	bl	27946 <memcpy>
   173f8:	4628      	mov	r0, r5
   173fa:	f006 fa67 	bl	1d8cc <interface_socket_from_handle_get>
   173fe:	6803      	ldr	r3, [r0, #0]
   17400:	6144      	str	r4, [r0, #20]
   17402:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17406:	6003      	str	r3, [r0, #0]
   17408:	6803      	ldr	r3, [r0, #0]
   1740a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1740e:	6003      	str	r3, [r0, #0]
   17410:	4628      	mov	r0, r5
   17412:	bd38      	pop	{r3, r4, r5, pc}
   17414:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   17418:	d1d3      	bne.n	173c2 <tls_interface_open+0x1a>
   1741a:	460a      	mov	r2, r1
   1741c:	e7df      	b.n	173de <tls_interface_open+0x36>
   1741e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17422:	e7f5      	b.n	17410 <tls_interface_open+0x68>
   17424:	20023148 	.word	0x20023148
   17428:	00028c80 	.word	0x00028c80

0001742c <tls_interface_close>:
   1742c:	b538      	push	{r3, r4, r5, lr}
   1742e:	4604      	mov	r4, r0
   17430:	f006 fa4c 	bl	1d8cc <interface_socket_from_handle_get>
   17434:	b180      	cbz	r0, 17458 <tls_interface_close+0x2c>
   17436:	4d0b      	ldr	r5, [pc, #44]	; (17464 <tls_interface_close+0x38>)
   17438:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   1743c:	b138      	cbz	r0, 1744e <tls_interface_close+0x22>
   1743e:	f005 fdeb 	bl	1d018 <nrf_free>
   17442:	2300      	movs	r3, #0
   17444:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   17448:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   1744c:	6053      	str	r3, [r2, #4]
   1744e:	4620      	mov	r0, r4
   17450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17454:	f000 bd54 	b.w	17f00 <ip_interface_close>
   17458:	2009      	movs	r0, #9
   1745a:	f7fc fc19 	bl	13c90 <bsd_os_errno_set>
   1745e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17462:	bd38      	pop	{r3, r4, r5, pc}
   17464:	2002328c 	.word	0x2002328c

00017468 <tls_interface_sendto>:
   17468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1746c:	460d      	mov	r5, r1
   1746e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   17472:	4616      	mov	r6, r2
   17474:	461f      	mov	r7, r3
   17476:	4604      	mov	r4, r0
   17478:	f006 fa28 	bl	1d8cc <interface_socket_from_handle_get>
   1747c:	2800      	cmp	r0, #0
   1747e:	d03b      	beq.n	174f8 <tls_interface_sendto+0x90>
   17480:	6803      	ldr	r3, [r0, #0]
   17482:	b29b      	uxth	r3, r3
   17484:	2b0c      	cmp	r3, #12
   17486:	d039      	beq.n	174fc <tls_interface_sendto+0x94>
   17488:	6803      	ldr	r3, [r0, #0]
   1748a:	b29b      	uxth	r3, r3
   1748c:	2b0b      	cmp	r3, #11
   1748e:	d111      	bne.n	174b4 <tls_interface_sendto+0x4c>
   17490:	4b20      	ldr	r3, [pc, #128]	; (17514 <tls_interface_sendto+0xac>)
   17492:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   17496:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   1749a:	2b02      	cmp	r3, #2
   1749c:	d038      	beq.n	17510 <tls_interface_sendto+0xa8>
   1749e:	6903      	ldr	r3, [r0, #16]
   174a0:	2b01      	cmp	r3, #1
   174a2:	bf14      	ite	ne
   174a4:	2039      	movne	r0, #57	; 0x39
   174a6:	202a      	moveq	r0, #42	; 0x2a
   174a8:	f7fc fbf2 	bl	13c90 <bsd_os_errno_set>
   174ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   174b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   174b4:	6903      	ldr	r3, [r0, #16]
   174b6:	2b01      	cmp	r3, #1
   174b8:	d00b      	beq.n	174d2 <tls_interface_sendto+0x6a>
   174ba:	2b02      	cmp	r3, #2
   174bc:	d001      	beq.n	174c2 <tls_interface_sendto+0x5a>
   174be:	2039      	movs	r0, #57	; 0x39
   174c0:	e7f2      	b.n	174a8 <tls_interface_sendto+0x40>
   174c2:	6803      	ldr	r3, [r0, #0]
   174c4:	b29b      	uxth	r3, r3
   174c6:	2b02      	cmp	r3, #2
   174c8:	d007      	beq.n	174da <tls_interface_sendto+0x72>
   174ca:	6803      	ldr	r3, [r0, #0]
   174cc:	b29b      	uxth	r3, r3
   174ce:	2b04      	cmp	r3, #4
   174d0:	d003      	beq.n	174da <tls_interface_sendto+0x72>
   174d2:	6803      	ldr	r3, [r0, #0]
   174d4:	b29b      	uxth	r3, r3
   174d6:	2b05      	cmp	r3, #5
   174d8:	d1f1      	bne.n	174be <tls_interface_sendto+0x56>
   174da:	4b0e      	ldr	r3, [pc, #56]	; (17514 <tls_interface_sendto+0xac>)
   174dc:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   174e0:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   174e4:	2b02      	cmp	r3, #2
   174e6:	d1ea      	bne.n	174be <tls_interface_sendto+0x56>
   174e8:	4601      	mov	r1, r0
   174ea:	4620      	mov	r0, r4
   174ec:	f7ff fec2 	bl	17274 <secure_client_socket>
   174f0:	2800      	cmp	r0, #0
   174f2:	d003      	beq.n	174fc <tls_interface_sendto+0x94>
   174f4:	dcd8      	bgt.n	174a8 <tls_interface_sendto+0x40>
   174f6:	e7d9      	b.n	174ac <tls_interface_sendto+0x44>
   174f8:	2009      	movs	r0, #9
   174fa:	e7d5      	b.n	174a8 <tls_interface_sendto+0x40>
   174fc:	e9cd 8908 	strd	r8, r9, [sp, #32]
   17500:	463b      	mov	r3, r7
   17502:	4632      	mov	r2, r6
   17504:	4629      	mov	r1, r5
   17506:	4620      	mov	r0, r4
   17508:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1750c:	f000 bd6a 	b.w	17fe4 <ip_interface_sendto>
   17510:	2023      	movs	r0, #35	; 0x23
   17512:	e7c9      	b.n	174a8 <tls_interface_sendto+0x40>
   17514:	20023148 	.word	0x20023148

00017518 <tls_interface_recvfrom>:
   17518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1751c:	460d      	mov	r5, r1
   1751e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   17522:	4616      	mov	r6, r2
   17524:	461f      	mov	r7, r3
   17526:	4604      	mov	r4, r0
   17528:	f006 f9d0 	bl	1d8cc <interface_socket_from_handle_get>
   1752c:	2800      	cmp	r0, #0
   1752e:	d038      	beq.n	175a2 <tls_interface_recvfrom+0x8a>
   17530:	6803      	ldr	r3, [r0, #0]
   17532:	b29b      	uxth	r3, r3
   17534:	2b0c      	cmp	r3, #12
   17536:	d00f      	beq.n	17558 <tls_interface_recvfrom+0x40>
   17538:	6803      	ldr	r3, [r0, #0]
   1753a:	b29b      	uxth	r3, r3
   1753c:	2b0d      	cmp	r3, #13
   1753e:	d00b      	beq.n	17558 <tls_interface_recvfrom+0x40>
   17540:	6903      	ldr	r3, [r0, #16]
   17542:	2b01      	cmp	r3, #1
   17544:	d01a      	beq.n	1757c <tls_interface_recvfrom+0x64>
   17546:	2b02      	cmp	r3, #2
   17548:	d010      	beq.n	1756c <tls_interface_recvfrom+0x54>
   1754a:	2023      	movs	r0, #35	; 0x23
   1754c:	f7fc fba0 	bl	13c90 <bsd_os_errno_set>
   17550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17558:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1755c:	463b      	mov	r3, r7
   1755e:	4632      	mov	r2, r6
   17560:	4629      	mov	r1, r5
   17562:	4620      	mov	r0, r4
   17564:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17568:	f000 bea2 	b.w	182b0 <ip_interface_recvfrom>
   1756c:	6803      	ldr	r3, [r0, #0]
   1756e:	b29b      	uxth	r3, r3
   17570:	2b02      	cmp	r3, #2
   17572:	d007      	beq.n	17584 <tls_interface_recvfrom+0x6c>
   17574:	6803      	ldr	r3, [r0, #0]
   17576:	b29b      	uxth	r3, r3
   17578:	2b04      	cmp	r3, #4
   1757a:	d003      	beq.n	17584 <tls_interface_recvfrom+0x6c>
   1757c:	6803      	ldr	r3, [r0, #0]
   1757e:	b29b      	uxth	r3, r3
   17580:	2b05      	cmp	r3, #5
   17582:	d1e2      	bne.n	1754a <tls_interface_recvfrom+0x32>
   17584:	4b08      	ldr	r3, [pc, #32]	; (175a8 <tls_interface_recvfrom+0x90>)
   17586:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1758a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1758e:	2b02      	cmp	r3, #2
   17590:	d1db      	bne.n	1754a <tls_interface_recvfrom+0x32>
   17592:	4601      	mov	r1, r0
   17594:	4620      	mov	r0, r4
   17596:	f7ff fe6d 	bl	17274 <secure_client_socket>
   1759a:	2800      	cmp	r0, #0
   1759c:	d0dc      	beq.n	17558 <tls_interface_recvfrom+0x40>
   1759e:	dcd5      	bgt.n	1754c <tls_interface_recvfrom+0x34>
   175a0:	e7d6      	b.n	17550 <tls_interface_recvfrom+0x38>
   175a2:	2009      	movs	r0, #9
   175a4:	e7d2      	b.n	1754c <tls_interface_recvfrom+0x34>
   175a6:	bf00      	nop
   175a8:	20023148 	.word	0x20023148

000175ac <tls_interface_bind>:
   175ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   175b0:	b082      	sub	sp, #8
   175b2:	460e      	mov	r6, r1
   175b4:	4617      	mov	r7, r2
   175b6:	4605      	mov	r5, r0
   175b8:	f006 f988 	bl	1d8cc <interface_socket_from_handle_get>
   175bc:	2800      	cmp	r0, #0
   175be:	d069      	beq.n	17694 <tls_interface_bind+0xe8>
   175c0:	6803      	ldr	r3, [r0, #0]
   175c2:	4604      	mov	r4, r0
   175c4:	b29b      	uxth	r3, r3
   175c6:	2b02      	cmp	r3, #2
   175c8:	d158      	bne.n	1767c <tls_interface_bind+0xd0>
   175ca:	463a      	mov	r2, r7
   175cc:	4631      	mov	r1, r6
   175ce:	4628      	mov	r0, r5
   175d0:	f001 f858 	bl	18684 <ip_interface_bind>
   175d4:	2800      	cmp	r0, #0
   175d6:	d148      	bne.n	1766a <tls_interface_bind+0xbe>
   175d8:	00ee      	lsls	r6, r5, #3
   175da:	4f2f      	ldr	r7, [pc, #188]	; (17698 <tls_interface_bind+0xec>)
   175dc:	1973      	adds	r3, r6, r5
   175de:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   175e2:	2b01      	cmp	r3, #1
   175e4:	d002      	beq.n	175ec <tls_interface_bind+0x40>
   175e6:	b002      	add	sp, #8
   175e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   175ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   175f0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1769c <tls_interface_bind+0xf0>
   175f4:	f247 0281 	movw	r2, #28801	; 0x7081
   175f8:	eb0a 0906 	add.w	r9, sl, r6
   175fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
   17600:	69a1      	ldr	r1, [r4, #24]
   17602:	4628      	mov	r0, r5
   17604:	f8cd c004 	str.w	ip, [sp, #4]
   17608:	f000 fb4e 	bl	17ca8 <ip_interface_request_create>
   1760c:	4680      	mov	r8, r0
   1760e:	2800      	cmp	r0, #0
   17610:	d03e      	beq.n	17690 <tls_interface_bind+0xe4>
   17612:	f8d9 2004 	ldr.w	r2, [r9, #4]
   17616:	bbaa      	cbnz	r2, 17684 <tls_interface_bind+0xd8>
   17618:	1971      	adds	r1, r6, r5
   1761a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1761e:	2224      	movs	r2, #36	; 0x24
   17620:	f108 0014 	add.w	r0, r8, #20
   17624:	f010 f98f 	bl	27946 <memcpy>
   17628:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1762c:	4641      	mov	r1, r8
   1762e:	3324      	adds	r3, #36	; 0x24
   17630:	f8c8 3008 	str.w	r3, [r8, #8]
   17634:	6822      	ldr	r2, [r4, #0]
   17636:	2304      	movs	r3, #4
   17638:	0c12      	lsrs	r2, r2, #16
   1763a:	0412      	lsls	r2, r2, #16
   1763c:	f042 020a 	orr.w	r2, r2, #10
   17640:	6022      	str	r2, [r4, #0]
   17642:	4620      	mov	r0, r4
   17644:	f247 0281 	movw	r2, #28801	; 0x7081
   17648:	f000 fb4e 	bl	17ce8 <ip_interface_request_send>
   1764c:	b968      	cbnz	r0, 1766a <tls_interface_bind+0xbe>
   1764e:	6823      	ldr	r3, [r4, #0]
   17650:	00db      	lsls	r3, r3, #3
   17652:	d415      	bmi.n	17680 <tls_interface_bind+0xd4>
   17654:	4628      	mov	r0, r5
   17656:	ab01      	add	r3, sp, #4
   17658:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1765c:	210b      	movs	r1, #11
   1765e:	f000 fb57 	bl	17d10 <ip_interface_wait>
   17662:	2800      	cmp	r0, #0
   17664:	d0bf      	beq.n	175e6 <tls_interface_bind+0x3a>
   17666:	2304      	movs	r3, #4
   17668:	6023      	str	r3, [r4, #0]
   1766a:	2800      	cmp	r0, #0
   1766c:	ddbb      	ble.n	175e6 <tls_interface_bind+0x3a>
   1766e:	f7fc fb0f 	bl	13c90 <bsd_os_errno_set>
   17672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17676:	b002      	add	sp, #8
   17678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1767c:	202d      	movs	r0, #45	; 0x2d
   1767e:	e7f6      	b.n	1766e <tls_interface_bind+0xc2>
   17680:	2073      	movs	r0, #115	; 0x73
   17682:	e7f4      	b.n	1766e <tls_interface_bind+0xc2>
   17684:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   17688:	6800      	ldr	r0, [r0, #0]
   1768a:	f010 f95c 	bl	27946 <memcpy>
   1768e:	e7c3      	b.n	17618 <tls_interface_bind+0x6c>
   17690:	200c      	movs	r0, #12
   17692:	e7ec      	b.n	1766e <tls_interface_bind+0xc2>
   17694:	2009      	movs	r0, #9
   17696:	e7ea      	b.n	1766e <tls_interface_bind+0xc2>
   17698:	20023148 	.word	0x20023148
   1769c:	2002328c 	.word	0x2002328c

000176a0 <tls_interface_connect>:
   176a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   176a2:	460e      	mov	r6, r1
   176a4:	4617      	mov	r7, r2
   176a6:	4604      	mov	r4, r0
   176a8:	f006 f910 	bl	1d8cc <interface_socket_from_handle_get>
   176ac:	b1e8      	cbz	r0, 176ea <tls_interface_connect+0x4a>
   176ae:	4b13      	ldr	r3, [pc, #76]	; (176fc <tls_interface_connect+0x5c>)
   176b0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   176b4:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   176b8:	2b02      	cmp	r3, #2
   176ba:	d11c      	bne.n	176f6 <tls_interface_connect+0x56>
   176bc:	6803      	ldr	r3, [r0, #0]
   176be:	4605      	mov	r5, r0
   176c0:	b29b      	uxth	r3, r3
   176c2:	2b02      	cmp	r3, #2
   176c4:	d003      	beq.n	176ce <tls_interface_connect+0x2e>
   176c6:	6803      	ldr	r3, [r0, #0]
   176c8:	b29b      	uxth	r3, r3
   176ca:	2b04      	cmp	r3, #4
   176cc:	d113      	bne.n	176f6 <tls_interface_connect+0x56>
   176ce:	463a      	mov	r2, r7
   176d0:	4631      	mov	r1, r6
   176d2:	4620      	mov	r0, r4
   176d4:	f000 ff14 	bl	18500 <ip_interface_connect>
   176d8:	b110      	cbz	r0, 176e0 <tls_interface_connect+0x40>
   176da:	2800      	cmp	r0, #0
   176dc:	dc06      	bgt.n	176ec <tls_interface_connect+0x4c>
   176de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   176e0:	4629      	mov	r1, r5
   176e2:	4620      	mov	r0, r4
   176e4:	f7ff fdc6 	bl	17274 <secure_client_socket>
   176e8:	e7f7      	b.n	176da <tls_interface_connect+0x3a>
   176ea:	2009      	movs	r0, #9
   176ec:	f7fc fad0 	bl	13c90 <bsd_os_errno_set>
   176f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   176f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   176f6:	202d      	movs	r0, #45	; 0x2d
   176f8:	e7f8      	b.n	176ec <tls_interface_connect+0x4c>
   176fa:	bf00      	nop
   176fc:	20023148 	.word	0x20023148

00017700 <tls_interface_listen>:
   17700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17704:	b085      	sub	sp, #20
   17706:	9101      	str	r1, [sp, #4]
   17708:	4605      	mov	r5, r0
   1770a:	f006 f8df 	bl	1d8cc <interface_socket_from_handle_get>
   1770e:	2800      	cmp	r0, #0
   17710:	d07c      	beq.n	1780c <tls_interface_listen+0x10c>
   17712:	6903      	ldr	r3, [r0, #16]
   17714:	4604      	mov	r4, r0
   17716:	2b01      	cmp	r3, #1
   17718:	d176      	bne.n	17808 <tls_interface_listen+0x108>
   1771a:	6803      	ldr	r3, [r0, #0]
   1771c:	b29b      	uxth	r3, r3
   1771e:	2b04      	cmp	r3, #4
   17720:	d062      	beq.n	177e8 <tls_interface_listen+0xe8>
   17722:	6823      	ldr	r3, [r4, #0]
   17724:	b29b      	uxth	r3, r3
   17726:	2b0b      	cmp	r3, #11
   17728:	d16e      	bne.n	17808 <tls_interface_listen+0x108>
   1772a:	00ee      	lsls	r6, r5, #3
   1772c:	4f38      	ldr	r7, [pc, #224]	; (17810 <tls_interface_listen+0x110>)
   1772e:	1973      	adds	r3, r6, r5
   17730:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   17734:	2b01      	cmp	r3, #1
   17736:	d167      	bne.n	17808 <tls_interface_listen+0x108>
   17738:	2201      	movs	r2, #1
   1773a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1773e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 17814 <tls_interface_listen+0x114>
   17742:	1973      	adds	r3, r6, r5
   17744:	00ee      	lsls	r6, r5, #3
   17746:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   1774a:	eb09 0806 	add.w	r8, r9, r6
   1774e:	69a1      	ldr	r1, [r4, #24]
   17750:	f8d8 3004 	ldr.w	r3, [r8, #4]
   17754:	f247 0281 	movw	r2, #28801	; 0x7081
   17758:	4628      	mov	r0, r5
   1775a:	f8d4 a000 	ldr.w	sl, [r4]
   1775e:	f8cd c00c 	str.w	ip, [sp, #12]
   17762:	f000 faa1 	bl	17ca8 <ip_interface_request_create>
   17766:	4683      	mov	fp, r0
   17768:	2800      	cmp	r0, #0
   1776a:	d04b      	beq.n	17804 <tls_interface_listen+0x104>
   1776c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   17770:	2a00      	cmp	r2, #0
   17772:	d141      	bne.n	177f8 <tls_interface_listen+0xf8>
   17774:	1971      	adds	r1, r6, r5
   17776:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1777a:	2224      	movs	r2, #36	; 0x24
   1777c:	f10b 0014 	add.w	r0, fp, #20
   17780:	f010 f8e1 	bl	27946 <memcpy>
   17784:	f8db 2008 	ldr.w	r2, [fp, #8]
   17788:	4659      	mov	r1, fp
   1778a:	3224      	adds	r2, #36	; 0x24
   1778c:	f8cb 2008 	str.w	r2, [fp, #8]
   17790:	6822      	ldr	r2, [r4, #0]
   17792:	4653      	mov	r3, sl
   17794:	0c12      	lsrs	r2, r2, #16
   17796:	0412      	lsls	r2, r2, #16
   17798:	f042 020a 	orr.w	r2, r2, #10
   1779c:	6022      	str	r2, [r4, #0]
   1779e:	4620      	mov	r0, r4
   177a0:	f247 0281 	movw	r2, #28801	; 0x7081
   177a4:	f000 faa0 	bl	17ce8 <ip_interface_request_send>
   177a8:	b960      	cbnz	r0, 177c4 <tls_interface_listen+0xc4>
   177aa:	6823      	ldr	r3, [r4, #0]
   177ac:	00db      	lsls	r3, r3, #3
   177ae:	d40e      	bmi.n	177ce <tls_interface_listen+0xce>
   177b0:	ab03      	add	r3, sp, #12
   177b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   177b6:	210b      	movs	r1, #11
   177b8:	4628      	mov	r0, r5
   177ba:	f000 faa9 	bl	17d10 <ip_interface_wait>
   177be:	b170      	cbz	r0, 177de <tls_interface_listen+0xde>
   177c0:	f8c4 a000 	str.w	sl, [r4]
   177c4:	2800      	cmp	r0, #0
   177c6:	dc03      	bgt.n	177d0 <tls_interface_listen+0xd0>
   177c8:	b005      	add	sp, #20
   177ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177ce:	2073      	movs	r0, #115	; 0x73
   177d0:	f7fc fa5e 	bl	13c90 <bsd_os_errno_set>
   177d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   177d8:	b005      	add	sp, #20
   177da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177de:	9901      	ldr	r1, [sp, #4]
   177e0:	4628      	mov	r0, r5
   177e2:	f000 fff1 	bl	187c8 <ip_interface_listen>
   177e6:	e7ed      	b.n	177c4 <tls_interface_listen+0xc4>
   177e8:	00ee      	lsls	r6, r5, #3
   177ea:	4f09      	ldr	r7, [pc, #36]	; (17810 <tls_interface_listen+0x110>)
   177ec:	1973      	adds	r3, r6, r5
   177ee:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   177f2:	2b02      	cmp	r3, #2
   177f4:	d195      	bne.n	17722 <tls_interface_listen+0x22>
   177f6:	e79f      	b.n	17738 <tls_interface_listen+0x38>
   177f8:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   177fc:	6800      	ldr	r0, [r0, #0]
   177fe:	f010 f8a2 	bl	27946 <memcpy>
   17802:	e7b7      	b.n	17774 <tls_interface_listen+0x74>
   17804:	200c      	movs	r0, #12
   17806:	e7e3      	b.n	177d0 <tls_interface_listen+0xd0>
   17808:	202d      	movs	r0, #45	; 0x2d
   1780a:	e7e1      	b.n	177d0 <tls_interface_listen+0xd0>
   1780c:	2009      	movs	r0, #9
   1780e:	e7df      	b.n	177d0 <tls_interface_listen+0xd0>
   17810:	20023148 	.word	0x20023148
   17814:	2002328c 	.word	0x2002328c

00017818 <tls_interface_accept>:
   17818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1781c:	b082      	sub	sp, #8
   1781e:	460e      	mov	r6, r1
   17820:	4617      	mov	r7, r2
   17822:	4698      	mov	r8, r3
   17824:	4605      	mov	r5, r0
   17826:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1782a:	f006 f84f 	bl	1d8cc <interface_socket_from_handle_get>
   1782e:	9401      	str	r4, [sp, #4]
   17830:	2800      	cmp	r0, #0
   17832:	d03c      	beq.n	178ae <tls_interface_accept+0x96>
   17834:	6800      	ldr	r0, [r0, #0]
   17836:	b280      	uxth	r0, r0
   17838:	2806      	cmp	r0, #6
   1783a:	d138      	bne.n	178ae <tls_interface_accept+0x96>
   1783c:	4643      	mov	r3, r8
   1783e:	463a      	mov	r2, r7
   17840:	4631      	mov	r1, r6
   17842:	4628      	mov	r0, r5
   17844:	f001 f838 	bl	188b8 <ip_interface_accept>
   17848:	4604      	mov	r4, r0
   1784a:	b128      	cbz	r0, 17858 <tls_interface_accept+0x40>
   1784c:	2c00      	cmp	r4, #0
   1784e:	dc2f      	bgt.n	178b0 <tls_interface_accept+0x98>
   17850:	4620      	mov	r0, r4
   17852:	b002      	add	sp, #8
   17854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17858:	4628      	mov	r0, r5
   1785a:	f006 f837 	bl	1d8cc <interface_socket_from_handle_get>
   1785e:	6803      	ldr	r3, [r0, #0]
   17860:	4f18      	ldr	r7, [pc, #96]	; (178c4 <tls_interface_accept+0xac>)
   17862:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   17866:	6003      	str	r3, [r0, #0]
   17868:	6803      	ldr	r3, [r0, #0]
   1786a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1786e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17872:	4606      	mov	r6, r0
   17874:	6003      	str	r3, [r0, #0]
   17876:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   1787a:	2224      	movs	r2, #36	; 0x24
   1787c:	4638      	mov	r0, r7
   1787e:	f010 f862 	bl	27946 <memcpy>
   17882:	2302      	movs	r3, #2
   17884:	703b      	strb	r3, [r7, #0]
   17886:	6833      	ldr	r3, [r6, #0]
   17888:	4620      	mov	r0, r4
   1788a:	0c1b      	lsrs	r3, r3, #16
   1788c:	041b      	lsls	r3, r3, #16
   1788e:	f043 030b 	orr.w	r3, r3, #11
   17892:	6033      	str	r3, [r6, #0]
   17894:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17898:	ab01      	add	r3, sp, #4
   1789a:	210c      	movs	r1, #12
   1789c:	f000 fa38 	bl	17d10 <ip_interface_wait>
   178a0:	4604      	mov	r4, r0
   178a2:	2800      	cmp	r0, #0
   178a4:	d0d4      	beq.n	17850 <tls_interface_accept+0x38>
   178a6:	2000      	movs	r0, #0
   178a8:	f000 fb2a 	bl	17f00 <ip_interface_close>
   178ac:	e7ce      	b.n	1784c <tls_interface_accept+0x34>
   178ae:	2409      	movs	r4, #9
   178b0:	4620      	mov	r0, r4
   178b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   178b6:	f7fc f9eb 	bl	13c90 <bsd_os_errno_set>
   178ba:	4620      	mov	r0, r4
   178bc:	b002      	add	sp, #8
   178be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178c2:	bf00      	nop
   178c4:	20023148 	.word	0x20023148

000178c8 <tls_interface_setopt>:
   178c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178cc:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   178d0:	9e06      	ldr	r6, [sp, #24]
   178d2:	d11e      	bne.n	17912 <tls_interface_setopt+0x4a>
   178d4:	461f      	mov	r7, r3
   178d6:	4605      	mov	r5, r0
   178d8:	2b00      	cmp	r3, #0
   178da:	f000 808c 	beq.w	179f6 <tls_interface_setopt+0x12e>
   178de:	4690      	mov	r8, r2
   178e0:	f005 fff4 	bl	1d8cc <interface_socket_from_handle_get>
   178e4:	2800      	cmp	r0, #0
   178e6:	d07b      	beq.n	179e0 <tls_interface_setopt+0x118>
   178e8:	6804      	ldr	r4, [r0, #0]
   178ea:	b2a4      	uxth	r4, r4
   178ec:	2c02      	cmp	r4, #2
   178ee:	d007      	beq.n	17900 <tls_interface_setopt+0x38>
   178f0:	6803      	ldr	r3, [r0, #0]
   178f2:	b29b      	uxth	r3, r3
   178f4:	2b04      	cmp	r3, #4
   178f6:	d003      	beq.n	17900 <tls_interface_setopt+0x38>
   178f8:	6803      	ldr	r3, [r0, #0]
   178fa:	b29b      	uxth	r3, r3
   178fc:	2b05      	cmp	r3, #5
   178fe:	d16f      	bne.n	179e0 <tls_interface_setopt+0x118>
   17900:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   17904:	2a04      	cmp	r2, #4
   17906:	d87c      	bhi.n	17a02 <tls_interface_setopt+0x13a>
   17908:	e8df f002 	tbb	[pc, r2]
   1790c:	41324e24 	.word	0x41324e24
   17910:	07          	.byte	0x07
   17911:	00          	.byte	0x00
   17912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17916:	f001 b911 	b.w	18b3c <ip_interface_setopt>
   1791a:	4c3b      	ldr	r4, [pc, #236]	; (17a08 <tls_interface_setopt+0x140>)
   1791c:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   17920:	b138      	cbz	r0, 17932 <tls_interface_setopt+0x6a>
   17922:	f005 fb79 	bl	1d018 <nrf_free>
   17926:	2200      	movs	r2, #0
   17928:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1792c:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   17930:	605a      	str	r2, [r3, #4]
   17932:	4630      	mov	r0, r6
   17934:	b34e      	cbz	r6, 1798a <tls_interface_setopt+0xc2>
   17936:	f005 fb65 	bl	1d004 <nrf_malloc>
   1793a:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   1793e:	2800      	cmp	r0, #0
   17940:	d057      	beq.n	179f2 <tls_interface_setopt+0x12a>
   17942:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   17946:	4632      	mov	r2, r6
   17948:	4639      	mov	r1, r7
   1794a:	6066      	str	r6, [r4, #4]
   1794c:	f00f fffb 	bl	27946 <memcpy>
   17950:	2000      	movs	r0, #0
   17952:	e01a      	b.n	1798a <tls_interface_setopt+0xc2>
   17954:	2e04      	cmp	r6, #4
   17956:	d14a      	bne.n	179ee <tls_interface_setopt+0x126>
   17958:	6838      	ldr	r0, [r7, #0]
   1795a:	2800      	cmp	r0, #0
   1795c:	d039      	beq.n	179d2 <tls_interface_setopt+0x10a>
   1795e:	2801      	cmp	r0, #1
   17960:	d145      	bne.n	179ee <tls_interface_setopt+0x126>
   17962:	4a2a      	ldr	r2, [pc, #168]	; (17a0c <tls_interface_setopt+0x144>)
   17964:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   17968:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   1796c:	2000      	movs	r0, #0
   1796e:	e00c      	b.n	1798a <tls_interface_setopt+0xc2>
   17970:	2e01      	cmp	r6, #1
   17972:	d13c      	bne.n	179ee <tls_interface_setopt+0x126>
   17974:	783a      	ldrb	r2, [r7, #0]
   17976:	2000      	movs	r0, #0
   17978:	3200      	adds	r2, #0
   1797a:	bf18      	it	ne
   1797c:	2201      	movne	r2, #1
   1797e:	4b23      	ldr	r3, [pc, #140]	; (17a0c <tls_interface_setopt+0x144>)
   17980:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   17984:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   17988:	7062      	strb	r2, [r4, #1]
   1798a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1798e:	2e04      	cmp	r6, #4
   17990:	d12d      	bne.n	179ee <tls_interface_setopt+0x126>
   17992:	683a      	ldr	r2, [r7, #0]
   17994:	2a02      	cmp	r2, #2
   17996:	d82a      	bhi.n	179ee <tls_interface_setopt+0x126>
   17998:	4b1c      	ldr	r3, [pc, #112]	; (17a0c <tls_interface_setopt+0x144>)
   1799a:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1799e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   179a2:	70a2      	strb	r2, [r4, #2]
   179a4:	2000      	movs	r0, #0
   179a6:	e7f0      	b.n	1798a <tls_interface_setopt+0xc2>
   179a8:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   179ac:	d01f      	beq.n	179ee <tls_interface_setopt+0x126>
   179ae:	f016 0403 	ands.w	r4, r6, #3
   179b2:	d11c      	bne.n	179ee <tls_interface_setopt+0x126>
   179b4:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   179b8:	00ad      	lsls	r5, r5, #2
   179ba:	4b14      	ldr	r3, [pc, #80]	; (17a0c <tls_interface_setopt+0x144>)
   179bc:	1d28      	adds	r0, r5, #4
   179be:	4418      	add	r0, r3
   179c0:	442b      	add	r3, r5
   179c2:	4632      	mov	r2, r6
   179c4:	4639      	mov	r1, r7
   179c6:	f883 c003 	strb.w	ip, [r3, #3]
   179ca:	f00f ffbc 	bl	27946 <memcpy>
   179ce:	4620      	mov	r0, r4
   179d0:	e7db      	b.n	1798a <tls_interface_setopt+0xc2>
   179d2:	2102      	movs	r1, #2
   179d4:	4a0d      	ldr	r2, [pc, #52]	; (17a0c <tls_interface_setopt+0x144>)
   179d6:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   179da:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   179de:	e7d4      	b.n	1798a <tls_interface_setopt+0xc2>
   179e0:	2009      	movs	r0, #9
   179e2:	f7fc f955 	bl	13c90 <bsd_os_errno_set>
   179e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   179ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   179ee:	2016      	movs	r0, #22
   179f0:	e7f7      	b.n	179e2 <tls_interface_setopt+0x11a>
   179f2:	200c      	movs	r0, #12
   179f4:	e7f5      	b.n	179e2 <tls_interface_setopt+0x11a>
   179f6:	200e      	movs	r0, #14
   179f8:	f7fc f94a 	bl	13c90 <bsd_os_errno_set>
   179fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17a00:	e7c3      	b.n	1798a <tls_interface_setopt+0xc2>
   17a02:	202a      	movs	r0, #42	; 0x2a
   17a04:	e7ed      	b.n	179e2 <tls_interface_setopt+0x11a>
   17a06:	bf00      	nop
   17a08:	2002328c 	.word	0x2002328c
   17a0c:	20023148 	.word	0x20023148

00017a10 <tls_interface_getopt>:
   17a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a14:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   17a18:	9f06      	ldr	r7, [sp, #24]
   17a1a:	d112      	bne.n	17a42 <tls_interface_getopt+0x32>
   17a1c:	461d      	mov	r5, r3
   17a1e:	b16b      	cbz	r3, 17a3c <tls_interface_getopt+0x2c>
   17a20:	b167      	cbz	r7, 17a3c <tls_interface_getopt+0x2c>
   17a22:	4606      	mov	r6, r0
   17a24:	4614      	mov	r4, r2
   17a26:	f005 ff51 	bl	1d8cc <interface_socket_from_handle_get>
   17a2a:	2800      	cmp	r0, #0
   17a2c:	d04f      	beq.n	17ace <tls_interface_getopt+0xbe>
   17a2e:	3c01      	subs	r4, #1
   17a30:	2c03      	cmp	r4, #3
   17a32:	d852      	bhi.n	17ada <tls_interface_getopt+0xca>
   17a34:	e8df f004 	tbb	[pc, r4]
   17a38:	09152139 	.word	0x09152139
   17a3c:	200e      	movs	r0, #14
   17a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17a46:	f001 b935 	b.w	18cb4 <ip_interface_getopt>
   17a4a:	683b      	ldr	r3, [r7, #0]
   17a4c:	2b04      	cmp	r3, #4
   17a4e:	d13c      	bne.n	17aca <tls_interface_getopt+0xba>
   17a50:	4b23      	ldr	r3, [pc, #140]	; (17ae0 <tls_interface_getopt+0xd0>)
   17a52:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   17a56:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   17a5a:	78b3      	ldrb	r3, [r6, #2]
   17a5c:	2000      	movs	r0, #0
   17a5e:	602b      	str	r3, [r5, #0]
   17a60:	e7ed      	b.n	17a3e <tls_interface_getopt+0x2e>
   17a62:	683b      	ldr	r3, [r7, #0]
   17a64:	2b01      	cmp	r3, #1
   17a66:	d130      	bne.n	17aca <tls_interface_getopt+0xba>
   17a68:	4b1d      	ldr	r3, [pc, #116]	; (17ae0 <tls_interface_getopt+0xd0>)
   17a6a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   17a6e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   17a72:	7873      	ldrb	r3, [r6, #1]
   17a74:	2000      	movs	r0, #0
   17a76:	702b      	strb	r3, [r5, #0]
   17a78:	e7e1      	b.n	17a3e <tls_interface_getopt+0x2e>
   17a7a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   17a7e:	4918      	ldr	r1, [pc, #96]	; (17ae0 <tls_interface_getopt+0xd0>)
   17a80:	683b      	ldr	r3, [r7, #0]
   17a82:	00b6      	lsls	r6, r6, #2
   17a84:	198a      	adds	r2, r1, r6
   17a86:	f013 0403 	ands.w	r4, r3, #3
   17a8a:	78d0      	ldrb	r0, [r2, #3]
   17a8c:	d121      	bne.n	17ad2 <tls_interface_getopt+0xc2>
   17a8e:	089b      	lsrs	r3, r3, #2
   17a90:	4283      	cmp	r3, r0
   17a92:	bf28      	it	cs
   17a94:	4603      	movcs	r3, r0
   17a96:	009a      	lsls	r2, r3, #2
   17a98:	b1db      	cbz	r3, 17ad2 <tls_interface_getopt+0xc2>
   17a9a:	3604      	adds	r6, #4
   17a9c:	4431      	add	r1, r6
   17a9e:	603a      	str	r2, [r7, #0]
   17aa0:	4628      	mov	r0, r5
   17aa2:	f00f ff50 	bl	27946 <memcpy>
   17aa6:	4620      	mov	r0, r4
   17aa8:	e7c9      	b.n	17a3e <tls_interface_getopt+0x2e>
   17aaa:	683b      	ldr	r3, [r7, #0]
   17aac:	2b04      	cmp	r3, #4
   17aae:	d10c      	bne.n	17aca <tls_interface_getopt+0xba>
   17ab0:	4b0b      	ldr	r3, [pc, #44]	; (17ae0 <tls_interface_getopt+0xd0>)
   17ab2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   17ab6:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   17aba:	2000      	movs	r0, #0
   17abc:	f1a3 0301 	sub.w	r3, r3, #1
   17ac0:	fab3 f383 	clz	r3, r3
   17ac4:	095b      	lsrs	r3, r3, #5
   17ac6:	602b      	str	r3, [r5, #0]
   17ac8:	e7b9      	b.n	17a3e <tls_interface_getopt+0x2e>
   17aca:	2016      	movs	r0, #22
   17acc:	e7b7      	b.n	17a3e <tls_interface_getopt+0x2e>
   17ace:	2009      	movs	r0, #9
   17ad0:	e7b5      	b.n	17a3e <tls_interface_getopt+0x2e>
   17ad2:	2800      	cmp	r0, #0
   17ad4:	d1f9      	bne.n	17aca <tls_interface_getopt+0xba>
   17ad6:	6038      	str	r0, [r7, #0]
   17ad8:	e7b1      	b.n	17a3e <tls_interface_getopt+0x2e>
   17ada:	202a      	movs	r0, #42	; 0x2a
   17adc:	e7af      	b.n	17a3e <tls_interface_getopt+0x2e>
   17ade:	bf00      	nop
   17ae0:	20023148 	.word	0x20023148

00017ae4 <tls_rpc_ip_event_handler>:
   17ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17ae6:	f248 0581 	movw	r5, #32897	; 0x8081
   17aea:	42ab      	cmp	r3, r5
   17aec:	460c      	mov	r4, r1
   17aee:	d062      	beq.n	17bb6 <tls_rpc_ip_event_handler+0xd2>
   17af0:	f249 0182 	movw	r1, #36994	; 0x9082
   17af4:	428b      	cmp	r3, r1
   17af6:	4606      	mov	r6, r0
   17af8:	d02e      	beq.n	17b58 <tls_rpc_ip_event_handler+0x74>
   17afa:	f248 0102 	movw	r1, #32770	; 0x8002
   17afe:	428b      	cmp	r3, r1
   17b00:	d001      	beq.n	17b06 <tls_rpc_ip_event_handler+0x22>
   17b02:	2001      	movs	r0, #1
   17b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17b06:	2c00      	cmp	r4, #0
   17b08:	d0fb      	beq.n	17b02 <tls_rpc_ip_event_handler+0x1e>
   17b0a:	6963      	ldr	r3, [r4, #20]
   17b0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   17b10:	d002      	beq.n	17b18 <tls_rpc_ip_event_handler+0x34>
   17b12:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   17b16:	d1f4      	bne.n	17b02 <tls_rpc_ip_event_handler+0x1e>
   17b18:	6823      	ldr	r3, [r4, #0]
   17b1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   17b1e:	6023      	str	r3, [r4, #0]
   17b20:	6955      	ldr	r5, [r2, #20]
   17b22:	2d00      	cmp	r5, #0
   17b24:	d156      	bne.n	17bd4 <tls_rpc_ip_event_handler+0xf0>
   17b26:	6823      	ldr	r3, [r4, #0]
   17b28:	0c1b      	lsrs	r3, r3, #16
   17b2a:	041b      	lsls	r3, r3, #16
   17b2c:	f043 0305 	orr.w	r3, r3, #5
   17b30:	6023      	str	r3, [r4, #0]
   17b32:	6823      	ldr	r3, [r4, #0]
   17b34:	00da      	lsls	r2, r3, #3
   17b36:	d50d      	bpl.n	17b54 <tls_rpc_ip_event_handler+0x70>
   17b38:	4b2b      	ldr	r3, [pc, #172]	; (17be8 <tls_rpc_ip_event_handler+0x104>)
   17b3a:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   17b3e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   17b42:	2b02      	cmp	r3, #2
   17b44:	d106      	bne.n	17b54 <tls_rpc_ip_event_handler+0x70>
   17b46:	4630      	mov	r0, r6
   17b48:	4621      	mov	r1, r4
   17b4a:	f7ff fb93 	bl	17274 <secure_client_socket>
   17b4e:	b108      	cbz	r0, 17b54 <tls_rpc_ip_event_handler+0x70>
   17b50:	2873      	cmp	r0, #115	; 0x73
   17b52:	d142      	bne.n	17bda <tls_rpc_ip_event_handler+0xf6>
   17b54:	2000      	movs	r0, #0
   17b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17b58:	2c00      	cmp	r4, #0
   17b5a:	d0fb      	beq.n	17b54 <tls_rpc_ip_event_handler+0x70>
   17b5c:	6823      	ldr	r3, [r4, #0]
   17b5e:	b29b      	uxth	r3, r3
   17b60:	2b0b      	cmp	r3, #11
   17b62:	d1f7      	bne.n	17b54 <tls_rpc_ip_event_handler+0x70>
   17b64:	6915      	ldr	r5, [r2, #16]
   17b66:	2d00      	cmp	r5, #0
   17b68:	d134      	bne.n	17bd4 <tls_rpc_ip_event_handler+0xf0>
   17b6a:	6823      	ldr	r3, [r4, #0]
   17b6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   17b70:	6023      	str	r3, [r4, #0]
   17b72:	6823      	ldr	r3, [r4, #0]
   17b74:	00db      	lsls	r3, r3, #3
   17b76:	d5ed      	bpl.n	17b54 <tls_rpc_ip_event_handler+0x70>
   17b78:	4f1c      	ldr	r7, [pc, #112]	; (17bec <tls_rpc_ip_event_handler+0x108>)
   17b7a:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   17b7e:	b130      	cbz	r0, 17b8e <tls_rpc_ip_event_handler+0xaa>
   17b80:	f005 fa4a 	bl	1d018 <nrf_free>
   17b84:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   17b88:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   17b8c:	605d      	str	r5, [r3, #4]
   17b8e:	6823      	ldr	r3, [r4, #0]
   17b90:	2000      	movs	r0, #0
   17b92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   17b96:	6023      	str	r3, [r4, #0]
   17b98:	6823      	ldr	r3, [r4, #0]
   17b9a:	0c1b      	lsrs	r3, r3, #16
   17b9c:	041b      	lsls	r3, r3, #16
   17b9e:	f043 030c 	orr.w	r3, r3, #12
   17ba2:	6023      	str	r3, [r4, #0]
   17ba4:	6823      	ldr	r3, [r4, #0]
   17ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17baa:	6023      	str	r3, [r4, #0]
   17bac:	6823      	ldr	r3, [r4, #0]
   17bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17bb2:	6023      	str	r3, [r4, #0]
   17bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17bb6:	2900      	cmp	r1, #0
   17bb8:	d0cc      	beq.n	17b54 <tls_rpc_ip_event_handler+0x70>
   17bba:	680b      	ldr	r3, [r1, #0]
   17bbc:	b29b      	uxth	r3, r3
   17bbe:	2b0a      	cmp	r3, #10
   17bc0:	d1c8      	bne.n	17b54 <tls_rpc_ip_event_handler+0x70>
   17bc2:	6950      	ldr	r0, [r2, #20]
   17bc4:	b938      	cbnz	r0, 17bd6 <tls_rpc_ip_event_handler+0xf2>
   17bc6:	680b      	ldr	r3, [r1, #0]
   17bc8:	0c1b      	lsrs	r3, r3, #16
   17bca:	041b      	lsls	r3, r3, #16
   17bcc:	f043 030b 	orr.w	r3, r3, #11
   17bd0:	600b      	str	r3, [r1, #0]
   17bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17bd4:	4628      	mov	r0, r5
   17bd6:	f000 f85d 	bl	17c94 <rpc_error_to_nrf_bsd_error>
   17bda:	6060      	str	r0, [r4, #4]
   17bdc:	6823      	ldr	r3, [r4, #0]
   17bde:	2000      	movs	r0, #0
   17be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   17be4:	6023      	str	r3, [r4, #0]
   17be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17be8:	20023148 	.word	0x20023148
   17bec:	2002328c 	.word	0x2002328c

00017bf0 <ip_client_event_handler>:
   17bf0:	f850 1b08 	ldr.w	r1, [r0], #8
   17bf4:	0c09      	lsrs	r1, r1, #16
   17bf6:	f001 b971 	b.w	18edc <rpc_ip_event_handler>
   17bfa:	bf00      	nop

00017bfc <rpc_ip_client_init>:
   17bfc:	4801      	ldr	r0, [pc, #4]	; (17c04 <rpc_ip_client_init+0x8>)
   17bfe:	f001 bc5f 	b.w	194c0 <rpc_client_register>
   17c02:	bf00      	nop
   17c04:	00028ca4 	.word	0x00028ca4

00017c08 <rpc_ip_client_request_alloc>:
   17c08:	2300      	movs	r3, #0
   17c0a:	b510      	push	{r4, lr}
   17c0c:	b082      	sub	sp, #8
   17c0e:	9301      	str	r3, [sp, #4]
   17c10:	b158      	cbz	r0, 17c2a <rpc_ip_client_request_alloc+0x22>
   17c12:	4604      	mov	r4, r0
   17c14:	aa01      	add	r2, sp, #4
   17c16:	2004      	movs	r0, #4
   17c18:	f001 fccc 	bl	195b4 <rpc_message_alloc>
   17c1c:	b918      	cbnz	r0, 17c26 <rpc_ip_client_request_alloc+0x1e>
   17c1e:	9b01      	ldr	r3, [sp, #4]
   17c20:	b10b      	cbz	r3, 17c26 <rpc_ip_client_request_alloc+0x1e>
   17c22:	3308      	adds	r3, #8
   17c24:	6023      	str	r3, [r4, #0]
   17c26:	b002      	add	sp, #8
   17c28:	bd10      	pop	{r4, pc}
   17c2a:	2007      	movs	r0, #7
   17c2c:	b002      	add	sp, #8
   17c2e:	bd10      	pop	{r4, pc}

00017c30 <rpc_ip_client_request_send>:
   17c30:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   17c34:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   17c38:	d10b      	bne.n	17c52 <rpc_ip_client_request_send+0x22>
   17c3a:	b160      	cbz	r0, 17c56 <rpc_ip_client_request_send+0x26>
   17c3c:	4603      	mov	r3, r0
   17c3e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   17c42:	2004      	movs	r0, #4
   17c44:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   17c48:	f843 1d08 	str.w	r1, [r3, #-8]!
   17c4c:	4619      	mov	r1, r3
   17c4e:	f001 bca1 	b.w	19594 <rpc_message_send>
   17c52:	200f      	movs	r0, #15
   17c54:	4770      	bx	lr
   17c56:	2007      	movs	r0, #7
   17c58:	4770      	bx	lr
   17c5a:	bf00      	nop

00017c5c <rpc_ip_client_message_free>:
   17c5c:	b120      	cbz	r0, 17c68 <rpc_ip_client_message_free+0xc>
   17c5e:	f1a0 0108 	sub.w	r1, r0, #8
   17c62:	2004      	movs	r0, #4
   17c64:	f001 bcd2 	b.w	1960c <rpc_message_free>
   17c68:	2007      	movs	r0, #7
   17c6a:	4770      	bx	lr

00017c6c <rpc_ip_client_data_free>:
   17c6c:	b118      	cbz	r0, 17c76 <rpc_ip_client_data_free+0xa>
   17c6e:	4601      	mov	r1, r0
   17c70:	2004      	movs	r0, #4
   17c72:	f001 bcd7 	b.w	19624 <rpc_message_data_free>
   17c76:	2007      	movs	r0, #7
   17c78:	4770      	bx	lr
   17c7a:	bf00      	nop

00017c7c <ip_recvd_packet_free_cb>:
   17c7c:	b510      	push	{r4, lr}
   17c7e:	4604      	mov	r4, r0
   17c80:	6800      	ldr	r0, [r0, #0]
   17c82:	f7ff fff3 	bl	17c6c <rpc_ip_client_data_free>
   17c86:	68a0      	ldr	r0, [r4, #8]
   17c88:	b118      	cbz	r0, 17c92 <ip_recvd_packet_free_cb+0x16>
   17c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17c8e:	f005 b9c3 	b.w	1d018 <nrf_free>
   17c92:	bd10      	pop	{r4, pc}

00017c94 <rpc_error_to_nrf_bsd_error>:
   17c94:	2810      	cmp	r0, #16
   17c96:	bf9a      	itte	ls
   17c98:	4b02      	ldrls	r3, [pc, #8]	; (17ca4 <rpc_error_to_nrf_bsd_error+0x10>)
   17c9a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   17c9e:	202d      	movhi	r0, #45	; 0x2d
   17ca0:	4770      	bx	lr
   17ca2:	bf00      	nop
   17ca4:	00028cb4 	.word	0x00028cb4

00017ca8 <ip_interface_request_create>:
   17ca8:	b570      	push	{r4, r5, r6, lr}
   17caa:	2500      	movs	r5, #0
   17cac:	b082      	sub	sp, #8
   17cae:	ac02      	add	r4, sp, #8
   17cb0:	f844 5d04 	str.w	r5, [r4, #-4]!
   17cb4:	4606      	mov	r6, r0
   17cb6:	460d      	mov	r5, r1
   17cb8:	4620      	mov	r0, r4
   17cba:	4619      	mov	r1, r3
   17cbc:	4614      	mov	r4, r2
   17cbe:	f7ff ffa3 	bl	17c08 <rpc_ip_client_request_alloc>
   17cc2:	b960      	cbnz	r0, 17cde <ip_interface_request_create+0x36>
   17cc4:	9b01      	ldr	r3, [sp, #4]
   17cc6:	2208      	movs	r2, #8
   17cc8:	7258      	strb	r0, [r3, #9]
   17cca:	7298      	strb	r0, [r3, #10]
   17ccc:	72d8      	strb	r0, [r3, #11]
   17cce:	4618      	mov	r0, r3
   17cd0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   17cd4:	60dc      	str	r4, [r3, #12]
   17cd6:	611d      	str	r5, [r3, #16]
   17cd8:	721a      	strb	r2, [r3, #8]
   17cda:	b002      	add	sp, #8
   17cdc:	bd70      	pop	{r4, r5, r6, pc}
   17cde:	9b01      	ldr	r3, [sp, #4]
   17ce0:	4618      	mov	r0, r3
   17ce2:	b002      	add	sp, #8
   17ce4:	bd70      	pop	{r4, r5, r6, pc}
   17ce6:	bf00      	nop

00017ce8 <ip_interface_request_send>:
   17ce8:	b570      	push	{r4, r5, r6, lr}
   17cea:	460c      	mov	r4, r1
   17cec:	4605      	mov	r5, r0
   17cee:	4611      	mov	r1, r2
   17cf0:	4620      	mov	r0, r4
   17cf2:	461e      	mov	r6, r3
   17cf4:	f7ff ff9c 	bl	17c30 <rpc_ip_client_request_send>
   17cf8:	b900      	cbnz	r0, 17cfc <ip_interface_request_send+0x14>
   17cfa:	bd70      	pop	{r4, r5, r6, pc}
   17cfc:	6820      	ldr	r0, [r4, #0]
   17cfe:	b108      	cbz	r0, 17d04 <ip_interface_request_send+0x1c>
   17d00:	f7ff ffb4 	bl	17c6c <rpc_ip_client_data_free>
   17d04:	4620      	mov	r0, r4
   17d06:	f7ff ffa9 	bl	17c5c <rpc_ip_client_message_free>
   17d0a:	602e      	str	r6, [r5, #0]
   17d0c:	2023      	movs	r0, #35	; 0x23
   17d0e:	bd70      	pop	{r4, r5, r6, pc}

00017d10 <ip_interface_wait>:
   17d10:	b538      	push	{r3, r4, r5, lr}
   17d12:	4605      	mov	r5, r0
   17d14:	f005 fd5a 	bl	1d7cc <interface_socket_wait>
   17d18:	4604      	mov	r4, r0
   17d1a:	b108      	cbz	r0, 17d20 <ip_interface_wait+0x10>
   17d1c:	4620      	mov	r0, r4
   17d1e:	bd38      	pop	{r3, r4, r5, pc}
   17d20:	4628      	mov	r0, r5
   17d22:	f005 fdd3 	bl	1d8cc <interface_socket_from_handle_get>
   17d26:	2800      	cmp	r0, #0
   17d28:	d0f8      	beq.n	17d1c <ip_interface_wait+0xc>
   17d2a:	6844      	ldr	r4, [r0, #4]
   17d2c:	2c00      	cmp	r4, #0
   17d2e:	d0f5      	beq.n	17d1c <ip_interface_wait+0xc>
   17d30:	2300      	movs	r3, #0
   17d32:	6043      	str	r3, [r0, #4]
   17d34:	4620      	mov	r0, r4
   17d36:	bd38      	pop	{r3, r4, r5, pc}

00017d38 <ip_interface_init>:
   17d38:	b538      	push	{r3, r4, r5, lr}
   17d3a:	2300      	movs	r3, #0
   17d3c:	4d09      	ldr	r5, [pc, #36]	; (17d64 <ip_interface_init+0x2c>)
   17d3e:	4c0a      	ldr	r4, [pc, #40]	; (17d68 <ip_interface_init+0x30>)
   17d40:	4619      	mov	r1, r3
   17d42:	2224      	movs	r2, #36	; 0x24
   17d44:	4809      	ldr	r0, [pc, #36]	; (17d6c <ip_interface_init+0x34>)
   17d46:	602b      	str	r3, [r5, #0]
   17d48:	6023      	str	r3, [r4, #0]
   17d4a:	f00f fe36 	bl	279ba <memset>
   17d4e:	f7ff ff55 	bl	17bfc <rpc_ip_client_init>
   17d52:	b918      	cbnz	r0, 17d5c <ip_interface_init+0x24>
   17d54:	2201      	movs	r2, #1
   17d56:	4b06      	ldr	r3, [pc, #24]	; (17d70 <ip_interface_init+0x38>)
   17d58:	701a      	strb	r2, [r3, #0]
   17d5a:	bd38      	pop	{r3, r4, r5, pc}
   17d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17d60:	bd38      	pop	{r3, r4, r5, pc}
   17d62:	bf00      	nop
   17d64:	200232dc 	.word	0x200232dc
   17d68:	200232d8 	.word	0x200232d8
   17d6c:	200232e0 	.word	0x200232e0
   17d70:	2002af2f 	.word	0x2002af2f

00017d74 <ip_interface_open>:
   17d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d78:	2500      	movs	r5, #0
   17d7a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   17d7e:	4c5e      	ldr	r4, [pc, #376]	; (17ef8 <ip_interface_open+0x184>)
   17d80:	4606      	mov	r6, r0
   17d82:	7820      	ldrb	r0, [r4, #0]
   17d84:	b084      	sub	sp, #16
   17d86:	e9cd 5701 	strd	r5, r7, [sp, #4]
   17d8a:	2800      	cmp	r0, #0
   17d8c:	f000 80b0 	beq.w	17ef0 <ip_interface_open+0x17c>
   17d90:	4690      	mov	r8, r2
   17d92:	f026 0208 	bic.w	r2, r6, #8
   17d96:	2a02      	cmp	r2, #2
   17d98:	460c      	mov	r4, r1
   17d9a:	d002      	beq.n	17da2 <ip_interface_open+0x2e>
   17d9c:	2e05      	cmp	r6, #5
   17d9e:	f040 808d 	bne.w	17ebc <ip_interface_open+0x148>
   17da2:	1e63      	subs	r3, r4, #1
   17da4:	2b02      	cmp	r3, #2
   17da6:	f200 809d 	bhi.w	17ee4 <ip_interface_open+0x170>
   17daa:	f1b8 0f00 	cmp.w	r8, #0
   17dae:	d159      	bne.n	17e64 <ip_interface_open+0xf0>
   17db0:	2c01      	cmp	r4, #1
   17db2:	d06f      	beq.n	17e94 <ip_interface_open+0x120>
   17db4:	2c03      	cmp	r4, #3
   17db6:	bf18      	it	ne
   17db8:	f04f 0802 	movne.w	r8, #2
   17dbc:	4a4f      	ldr	r2, [pc, #316]	; (17efc <ip_interface_open+0x188>)
   17dbe:	4621      	mov	r1, r4
   17dc0:	a801      	add	r0, sp, #4
   17dc2:	f005 fc51 	bl	1d668 <interface_socket_allocate>
   17dc6:	9b01      	ldr	r3, [sp, #4]
   17dc8:	4607      	mov	r7, r0
   17dca:	2b00      	cmp	r3, #0
   17dcc:	d060      	beq.n	17e90 <ip_interface_open+0x11c>
   17dce:	2100      	movs	r1, #0
   17dd0:	a804      	add	r0, sp, #16
   17dd2:	f840 1d04 	str.w	r1, [r0, #-4]!
   17dd6:	e9c3 6403 	strd	r6, r4, [r3, #12]
   17dda:	f8c3 8014 	str.w	r8, [r3, #20]
   17dde:	f7ff ff13 	bl	17c08 <rpc_ip_client_request_alloc>
   17de2:	2800      	cmp	r0, #0
   17de4:	d151      	bne.n	17e8a <ip_interface_open+0x116>
   17de6:	f247 0201 	movw	r2, #28673	; 0x7001
   17dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17dee:	2108      	movs	r1, #8
   17df0:	9d03      	ldr	r5, [sp, #12]
   17df2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   17df6:	60ea      	str	r2, [r5, #12]
   17df8:	7268      	strb	r0, [r5, #9]
   17dfa:	72a8      	strb	r0, [r5, #10]
   17dfc:	72e8      	strb	r0, [r5, #11]
   17dfe:	7229      	strb	r1, [r5, #8]
   17e00:	742b      	strb	r3, [r5, #16]
   17e02:	746b      	strb	r3, [r5, #17]
   17e04:	74ab      	strb	r3, [r5, #18]
   17e06:	74eb      	strb	r3, [r5, #19]
   17e08:	68ab      	ldr	r3, [r5, #8]
   17e0a:	2e05      	cmp	r6, #5
   17e0c:	f103 030c 	add.w	r3, r3, #12
   17e10:	60ab      	str	r3, [r5, #8]
   17e12:	d003      	beq.n	17e1c <ip_interface_open+0xa8>
   17e14:	2e0a      	cmp	r6, #10
   17e16:	bf14      	ite	ne
   17e18:	2601      	movne	r6, #1
   17e1a:	2602      	moveq	r6, #2
   17e1c:	616e      	str	r6, [r5, #20]
   17e1e:	f8c5 801c 	str.w	r8, [r5, #28]
   17e22:	61ac      	str	r4, [r5, #24]
   17e24:	f247 0101 	movw	r1, #28673	; 0x7001
   17e28:	4628      	mov	r0, r5
   17e2a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   17e2e:	f7ff feff 	bl	17c30 <rpc_ip_client_request_send>
   17e32:	4606      	mov	r6, r0
   17e34:	b380      	cbz	r0, 17e98 <ip_interface_open+0x124>
   17e36:	6828      	ldr	r0, [r5, #0]
   17e38:	b108      	cbz	r0, 17e3e <ip_interface_open+0xca>
   17e3a:	f7ff ff17 	bl	17c6c <rpc_ip_client_data_free>
   17e3e:	4628      	mov	r0, r5
   17e40:	f7ff ff0c 	bl	17c5c <rpc_ip_client_message_free>
   17e44:	2301      	movs	r3, #1
   17e46:	2523      	movs	r5, #35	; 0x23
   17e48:	f8c8 3000 	str.w	r3, [r8]
   17e4c:	4638      	mov	r0, r7
   17e4e:	f005 fc6f 	bl	1d730 <interface_socket_free>
   17e52:	4628      	mov	r0, r5
   17e54:	f7fb ff1c 	bl	13c90 <bsd_os_errno_set>
   17e58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   17e5c:	4638      	mov	r0, r7
   17e5e:	b004      	add	sp, #16
   17e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e64:	2c01      	cmp	r4, #1
   17e66:	d00a      	beq.n	17e7e <ip_interface_open+0x10a>
   17e68:	2c02      	cmp	r4, #2
   17e6a:	d10b      	bne.n	17e84 <ip_interface_open+0x110>
   17e6c:	f1b8 0f02 	cmp.w	r8, #2
   17e70:	d0a4      	beq.n	17dbc <ip_interface_open+0x48>
   17e72:	2029      	movs	r0, #41	; 0x29
   17e74:	f7fb ff0c 	bl	13c90 <bsd_os_errno_set>
   17e78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   17e7c:	e7ee      	b.n	17e5c <ip_interface_open+0xe8>
   17e7e:	f1b8 0f01 	cmp.w	r8, #1
   17e82:	d1f6      	bne.n	17e72 <ip_interface_open+0xfe>
   17e84:	f04f 0802 	mov.w	r8, #2
   17e88:	e798      	b.n	17dbc <ip_interface_open+0x48>
   17e8a:	9d03      	ldr	r5, [sp, #12]
   17e8c:	2d00      	cmp	r5, #0
   17e8e:	d1bb      	bne.n	17e08 <ip_interface_open+0x94>
   17e90:	2569      	movs	r5, #105	; 0x69
   17e92:	e7db      	b.n	17e4c <ip_interface_open+0xd8>
   17e94:	46a0      	mov	r8, r4
   17e96:	e791      	b.n	17dbc <ip_interface_open+0x48>
   17e98:	ab02      	add	r3, sp, #8
   17e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17e9e:	2102      	movs	r1, #2
   17ea0:	4638      	mov	r0, r7
   17ea2:	f005 fc93 	bl	1d7cc <interface_socket_wait>
   17ea6:	4605      	mov	r5, r0
   17ea8:	2800      	cmp	r0, #0
   17eaa:	d1cf      	bne.n	17e4c <ip_interface_open+0xd8>
   17eac:	4638      	mov	r0, r7
   17eae:	f005 fd0d 	bl	1d8cc <interface_socket_from_handle_get>
   17eb2:	b138      	cbz	r0, 17ec4 <ip_interface_open+0x150>
   17eb4:	6845      	ldr	r5, [r0, #4]
   17eb6:	b12d      	cbz	r5, 17ec4 <ip_interface_open+0x150>
   17eb8:	6046      	str	r6, [r0, #4]
   17eba:	e7c7      	b.n	17e4c <ip_interface_open+0xd8>
   17ebc:	202f      	movs	r0, #47	; 0x2f
   17ebe:	f7fb fee7 	bl	13c90 <bsd_os_errno_set>
   17ec2:	e7cb      	b.n	17e5c <ip_interface_open+0xe8>
   17ec4:	3c02      	subs	r4, #2
   17ec6:	2c01      	cmp	r4, #1
   17ec8:	d8c8      	bhi.n	17e5c <ip_interface_open+0xe8>
   17eca:	4638      	mov	r0, r7
   17ecc:	9b01      	ldr	r3, [sp, #4]
   17ece:	681a      	ldr	r2, [r3, #0]
   17ed0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   17ed4:	601a      	str	r2, [r3, #0]
   17ed6:	681a      	ldr	r2, [r3, #0]
   17ed8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   17edc:	601a      	str	r2, [r3, #0]
   17ede:	b004      	add	sp, #16
   17ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17ee4:	2016      	movs	r0, #22
   17ee6:	f7fb fed3 	bl	13c90 <bsd_os_errno_set>
   17eea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   17eee:	e7b5      	b.n	17e5c <ip_interface_open+0xe8>
   17ef0:	2005      	movs	r0, #5
   17ef2:	f7fb fecd 	bl	13c90 <bsd_os_errno_set>
   17ef6:	e7b1      	b.n	17e5c <ip_interface_open+0xe8>
   17ef8:	2002af2f 	.word	0x2002af2f
   17efc:	00017c7d 	.word	0x00017c7d

00017f00 <ip_interface_close>:
   17f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f08:	b082      	sub	sp, #8
   17f0a:	4606      	mov	r6, r0
   17f0c:	9300      	str	r3, [sp, #0]
   17f0e:	f005 fcdd 	bl	1d8cc <interface_socket_from_handle_get>
   17f12:	2800      	cmp	r0, #0
   17f14:	d062      	beq.n	17fdc <ip_interface_close+0xdc>
   17f16:	4604      	mov	r4, r0
   17f18:	2100      	movs	r1, #0
   17f1a:	a802      	add	r0, sp, #8
   17f1c:	6827      	ldr	r7, [r4, #0]
   17f1e:	f840 1d04 	str.w	r1, [r0, #-4]!
   17f22:	f8d4 8018 	ldr.w	r8, [r4, #24]
   17f26:	f7ff fe6f 	bl	17c08 <rpc_ip_client_request_alloc>
   17f2a:	2800      	cmp	r0, #0
   17f2c:	d139      	bne.n	17fa2 <ip_interface_close+0xa2>
   17f2e:	f247 0309 	movw	r3, #28681	; 0x7009
   17f32:	2208      	movs	r2, #8
   17f34:	9d01      	ldr	r5, [sp, #4]
   17f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   17f3a:	60eb      	str	r3, [r5, #12]
   17f3c:	f8c5 8010 	str.w	r8, [r5, #16]
   17f40:	7268      	strb	r0, [r5, #9]
   17f42:	72a8      	strb	r0, [r5, #10]
   17f44:	72e8      	strb	r0, [r5, #11]
   17f46:	722a      	strb	r2, [r5, #8]
   17f48:	6823      	ldr	r3, [r4, #0]
   17f4a:	f247 0109 	movw	r1, #28681	; 0x7009
   17f4e:	0c1b      	lsrs	r3, r3, #16
   17f50:	041b      	lsls	r3, r3, #16
   17f52:	f043 030d 	orr.w	r3, r3, #13
   17f56:	6023      	str	r3, [r4, #0]
   17f58:	6823      	ldr	r3, [r4, #0]
   17f5a:	4628      	mov	r0, r5
   17f5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   17f60:	6023      	str	r3, [r4, #0]
   17f62:	6823      	ldr	r3, [r4, #0]
   17f64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17f68:	6023      	str	r3, [r4, #0]
   17f6a:	f7ff fe61 	bl	17c30 <rpc_ip_client_request_send>
   17f6e:	bb38      	cbnz	r0, 17fc0 <ip_interface_close+0xc0>
   17f70:	466b      	mov	r3, sp
   17f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17f76:	210e      	movs	r1, #14
   17f78:	4630      	mov	r0, r6
   17f7a:	f005 fc27 	bl	1d7cc <interface_socket_wait>
   17f7e:	4604      	mov	r4, r0
   17f80:	b1a0      	cbz	r0, 17fac <ip_interface_close+0xac>
   17f82:	4c17      	ldr	r4, [pc, #92]	; (17fe0 <ip_interface_close+0xe0>)
   17f84:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   17f88:	b120      	cbz	r0, 17f94 <ip_interface_close+0x94>
   17f8a:	f7ff fe67 	bl	17c5c <rpc_ip_client_message_free>
   17f8e:	2300      	movs	r3, #0
   17f90:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   17f94:	4630      	mov	r0, r6
   17f96:	f005 fbcb 	bl	1d730 <interface_socket_free>
   17f9a:	2000      	movs	r0, #0
   17f9c:	b002      	add	sp, #8
   17f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17fa2:	9d01      	ldr	r5, [sp, #4]
   17fa4:	200c      	movs	r0, #12
   17fa6:	2d00      	cmp	r5, #0
   17fa8:	d1ce      	bne.n	17f48 <ip_interface_close+0x48>
   17faa:	e012      	b.n	17fd2 <ip_interface_close+0xd2>
   17fac:	4630      	mov	r0, r6
   17fae:	f005 fc8d 	bl	1d8cc <interface_socket_from_handle_get>
   17fb2:	2800      	cmp	r0, #0
   17fb4:	d0e5      	beq.n	17f82 <ip_interface_close+0x82>
   17fb6:	6843      	ldr	r3, [r0, #4]
   17fb8:	2b00      	cmp	r3, #0
   17fba:	d0e2      	beq.n	17f82 <ip_interface_close+0x82>
   17fbc:	6044      	str	r4, [r0, #4]
   17fbe:	e7e0      	b.n	17f82 <ip_interface_close+0x82>
   17fc0:	6828      	ldr	r0, [r5, #0]
   17fc2:	b108      	cbz	r0, 17fc8 <ip_interface_close+0xc8>
   17fc4:	f7ff fe52 	bl	17c6c <rpc_ip_client_data_free>
   17fc8:	4628      	mov	r0, r5
   17fca:	f7ff fe47 	bl	17c5c <rpc_ip_client_message_free>
   17fce:	2023      	movs	r0, #35	; 0x23
   17fd0:	6027      	str	r7, [r4, #0]
   17fd2:	f7fb fe5d 	bl	13c90 <bsd_os_errno_set>
   17fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17fda:	e7df      	b.n	17f9c <ip_interface_close+0x9c>
   17fdc:	2009      	movs	r0, #9
   17fde:	e7f8      	b.n	17fd2 <ip_interface_close+0xd2>
   17fe0:	200232e0 	.word	0x200232e0

00017fe4 <ip_interface_sendto>:
   17fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fe8:	2400      	movs	r4, #0
   17fea:	b089      	sub	sp, #36	; 0x24
   17fec:	9102      	str	r1, [sp, #8]
   17fee:	4615      	mov	r5, r2
   17ff0:	4699      	mov	r9, r3
   17ff2:	9406      	str	r4, [sp, #24]
   17ff4:	4607      	mov	r7, r0
   17ff6:	9e12      	ldr	r6, [sp, #72]	; 0x48
   17ff8:	f005 fc68 	bl	1d8cc <interface_socket_from_handle_get>
   17ffc:	2800      	cmp	r0, #0
   17ffe:	f000 814c 	beq.w	1829a <ip_interface_sendto+0x2b6>
   18002:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   18006:	f300 8139 	bgt.w	1827c <ip_interface_sendto+0x298>
   1800a:	6903      	ldr	r3, [r0, #16]
   1800c:	4604      	mov	r4, r0
   1800e:	2b01      	cmp	r3, #1
   18010:	f000 80ea 	beq.w	181e8 <ip_interface_sendto+0x204>
   18014:	6822      	ldr	r2, [r4, #0]
   18016:	0391      	lsls	r1, r2, #14
   18018:	d56a      	bpl.n	180f0 <ip_interface_sendto+0x10c>
   1801a:	f1b9 0f00 	cmp.w	r9, #0
   1801e:	f000 80f3 	beq.w	18208 <ip_interface_sendto+0x224>
   18022:	f019 0f02 	tst.w	r9, #2
   18026:	f000 8133 	beq.w	18290 <ip_interface_sendto+0x2ac>
   1802a:	2300      	movs	r3, #0
   1802c:	9303      	str	r3, [sp, #12]
   1802e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18030:	f247 0806 	movw	r8, #28678	; 0x7006
   18034:	2b00      	cmp	r3, #0
   18036:	bf08      	it	eq
   18038:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1803c:	f04f 0b0c 	mov.w	fp, #12
   18040:	4a9a      	ldr	r2, [pc, #616]	; (182ac <ip_interface_sendto+0x2c8>)
   18042:	9307      	str	r3, [sp, #28]
   18044:	043b      	lsls	r3, r7, #16
   18046:	9200      	str	r2, [sp, #0]
   18048:	9304      	str	r3, [sp, #16]
   1804a:	4629      	mov	r1, r5
   1804c:	a806      	add	r0, sp, #24
   1804e:	f7ff fddb 	bl	17c08 <rpc_ip_client_request_alloc>
   18052:	2804      	cmp	r0, #4
   18054:	f000 8098 	beq.w	18188 <ip_interface_sendto+0x1a4>
   18058:	2800      	cmp	r0, #0
   1805a:	f040 8123 	bne.w	182a4 <ip_interface_sendto+0x2c0>
   1805e:	9b06      	ldr	r3, [sp, #24]
   18060:	f883 b008 	strb.w	fp, [r3, #8]
   18064:	7258      	strb	r0, [r3, #9]
   18066:	7298      	strb	r0, [r3, #10]
   18068:	72d8      	strb	r0, [r3, #11]
   1806a:	2e00      	cmp	r6, #0
   1806c:	d053      	beq.n	18116 <ip_interface_sendto+0x132>
   1806e:	68e2      	ldr	r2, [r4, #12]
   18070:	6871      	ldr	r1, [r6, #4]
   18072:	428a      	cmp	r2, r1
   18074:	f040 809a 	bne.w	181ac <ip_interface_sendto+0x1c8>
   18078:	7831      	ldrb	r1, [r6, #0]
   1807a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1807c:	4288      	cmp	r0, r1
   1807e:	d10a      	bne.n	18096 <ip_interface_sendto+0xb2>
   18080:	2a02      	cmp	r2, #2
   18082:	f103 001c 	add.w	r0, r3, #28
   18086:	f000 80e7 	beq.w	18258 <ip_interface_sendto+0x274>
   1808a:	2a0a      	cmp	r2, #10
   1808c:	d103      	bne.n	18096 <ip_interface_sendto+0xb2>
   1808e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   18090:	2a24      	cmp	r2, #36	; 0x24
   18092:	f000 80ce 	beq.w	18232 <ip_interface_sendto+0x24e>
   18096:	f04f 0a16 	mov.w	sl, #22
   1809a:	6818      	ldr	r0, [r3, #0]
   1809c:	b110      	cbz	r0, 180a4 <ip_interface_sendto+0xc0>
   1809e:	f7ff fde5 	bl	17c6c <rpc_ip_client_data_free>
   180a2:	9b06      	ldr	r3, [sp, #24]
   180a4:	4618      	mov	r0, r3
   180a6:	f7ff fdd9 	bl	17c5c <rpc_ip_client_message_free>
   180aa:	6823      	ldr	r3, [r4, #0]
   180ac:	0318      	lsls	r0, r3, #12
   180ae:	d40b      	bmi.n	180c8 <ip_interface_sendto+0xe4>
   180b0:	6823      	ldr	r3, [r4, #0]
   180b2:	b29b      	uxth	r3, r3
   180b4:	2b0d      	cmp	r3, #13
   180b6:	d007      	beq.n	180c8 <ip_interface_sendto+0xe4>
   180b8:	6823      	ldr	r3, [r4, #0]
   180ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   180be:	6023      	str	r3, [r4, #0]
   180c0:	6823      	ldr	r3, [r4, #0]
   180c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   180c6:	6023      	str	r3, [r4, #0]
   180c8:	f1ba 0f00 	cmp.w	sl, #0
   180cc:	f040 8093 	bne.w	181f6 <ip_interface_sendto+0x212>
   180d0:	6823      	ldr	r3, [r4, #0]
   180d2:	0119      	lsls	r1, r3, #4
   180d4:	d56d      	bpl.n	181b2 <ip_interface_sendto+0x1ce>
   180d6:	6823      	ldr	r3, [r4, #0]
   180d8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   180dc:	6023      	str	r3, [r4, #0]
   180de:	9b00      	ldr	r3, [sp, #0]
   180e0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   180e4:	2800      	cmp	r0, #0
   180e6:	d168      	bne.n	181ba <ip_interface_sendto+0x1d6>
   180e8:	4628      	mov	r0, r5
   180ea:	b009      	add	sp, #36	; 0x24
   180ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180f0:	6822      	ldr	r2, [r4, #0]
   180f2:	0092      	lsls	r2, r2, #2
   180f4:	d406      	bmi.n	18104 <ip_interface_sendto+0x120>
   180f6:	2b01      	cmp	r3, #1
   180f8:	f000 8095 	beq.w	18226 <ip_interface_sendto+0x242>
   180fc:	6823      	ldr	r3, [r4, #0]
   180fe:	031b      	lsls	r3, r3, #12
   18100:	f140 80b7 	bpl.w	18272 <ip_interface_sendto+0x28e>
   18104:	6823      	ldr	r3, [r4, #0]
   18106:	031e      	lsls	r6, r3, #12
   18108:	f140 80bd 	bpl.w	18286 <ip_interface_sendto+0x2a2>
   1810c:	4b67      	ldr	r3, [pc, #412]	; (182ac <ip_interface_sendto+0x2c8>)
   1810e:	f8d4 a008 	ldr.w	sl, [r4, #8]
   18112:	9300      	str	r3, [sp, #0]
   18114:	e7d8      	b.n	180c8 <ip_interface_sendto+0xe4>
   18116:	4642      	mov	r2, r8
   18118:	f8c3 9014 	str.w	r9, [r3, #20]
   1811c:	69a1      	ldr	r1, [r4, #24]
   1811e:	9804      	ldr	r0, [sp, #16]
   18120:	6119      	str	r1, [r3, #16]
   18122:	9902      	ldr	r1, [sp, #8]
   18124:	4302      	orrs	r2, r0
   18126:	60da      	str	r2, [r3, #12]
   18128:	605d      	str	r5, [r3, #4]
   1812a:	b119      	cbz	r1, 18134 <ip_interface_sendto+0x150>
   1812c:	6818      	ldr	r0, [r3, #0]
   1812e:	462a      	mov	r2, r5
   18130:	f00f fc09 	bl	27946 <memcpy>
   18134:	6823      	ldr	r3, [r4, #0]
   18136:	4641      	mov	r1, r8
   18138:	9305      	str	r3, [sp, #20]
   1813a:	6823      	ldr	r3, [r4, #0]
   1813c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   18140:	6023      	str	r3, [r4, #0]
   18142:	6823      	ldr	r3, [r4, #0]
   18144:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   18148:	6023      	str	r3, [r4, #0]
   1814a:	9b06      	ldr	r3, [sp, #24]
   1814c:	4618      	mov	r0, r3
   1814e:	9301      	str	r3, [sp, #4]
   18150:	f7ff fd6e 	bl	17c30 <rpc_ip_client_request_send>
   18154:	9b01      	ldr	r3, [sp, #4]
   18156:	4682      	mov	sl, r0
   18158:	2800      	cmp	r0, #0
   1815a:	d138      	bne.n	181ce <ip_interface_sendto+0x1ea>
   1815c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   18160:	ab07      	add	r3, sp, #28
   18162:	4611      	mov	r1, r2
   18164:	4638      	mov	r0, r7
   18166:	f005 fb31 	bl	1d7cc <interface_socket_wait>
   1816a:	4603      	mov	r3, r0
   1816c:	b198      	cbz	r0, 18196 <ip_interface_sendto+0x1b2>
   1816e:	6822      	ldr	r2, [r4, #0]
   18170:	0312      	lsls	r2, r2, #12
   18172:	d455      	bmi.n	18220 <ip_interface_sendto+0x23c>
   18174:	2b3c      	cmp	r3, #60	; 0x3c
   18176:	d017      	beq.n	181a8 <ip_interface_sendto+0x1c4>
   18178:	2b0c      	cmp	r3, #12
   1817a:	d115      	bne.n	181a8 <ip_interface_sendto+0x1c4>
   1817c:	9b00      	ldr	r3, [sp, #0]
   1817e:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   18182:	b108      	cbz	r0, 18188 <ip_interface_sendto+0x1a4>
   18184:	f7ff fd6a 	bl	17c5c <rpc_ip_client_message_free>
   18188:	9b03      	ldr	r3, [sp, #12]
   1818a:	2b00      	cmp	r3, #0
   1818c:	f47f af5d 	bne.w	1804a <ip_interface_sendto+0x66>
   18190:	f04f 0a23 	mov.w	sl, #35	; 0x23
   18194:	e789      	b.n	180aa <ip_interface_sendto+0xc6>
   18196:	9001      	str	r0, [sp, #4]
   18198:	4638      	mov	r0, r7
   1819a:	f005 fb97 	bl	1d8cc <interface_socket_from_handle_get>
   1819e:	9b01      	ldr	r3, [sp, #4]
   181a0:	b110      	cbz	r0, 181a8 <ip_interface_sendto+0x1c4>
   181a2:	6843      	ldr	r3, [r0, #4]
   181a4:	2b00      	cmp	r3, #0
   181a6:	d136      	bne.n	18216 <ip_interface_sendto+0x232>
   181a8:	469a      	mov	sl, r3
   181aa:	e77e      	b.n	180aa <ip_interface_sendto+0xc6>
   181ac:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   181b0:	e773      	b.n	1809a <ip_interface_sendto+0xb6>
   181b2:	9b00      	ldr	r3, [sp, #0]
   181b4:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   181b8:	6985      	ldr	r5, [r0, #24]
   181ba:	f7ff fd4f 	bl	17c5c <rpc_ip_client_message_free>
   181be:	2300      	movs	r3, #0
   181c0:	4628      	mov	r0, r5
   181c2:	9a00      	ldr	r2, [sp, #0]
   181c4:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   181c8:	b009      	add	sp, #36	; 0x24
   181ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181ce:	6818      	ldr	r0, [r3, #0]
   181d0:	469a      	mov	sl, r3
   181d2:	b108      	cbz	r0, 181d8 <ip_interface_sendto+0x1f4>
   181d4:	f7ff fd4a 	bl	17c6c <rpc_ip_client_data_free>
   181d8:	4650      	mov	r0, sl
   181da:	f7ff fd3f 	bl	17c5c <rpc_ip_client_message_free>
   181de:	9b05      	ldr	r3, [sp, #20]
   181e0:	f04f 0a23 	mov.w	sl, #35	; 0x23
   181e4:	6023      	str	r3, [r4, #0]
   181e6:	e760      	b.n	180aa <ip_interface_sendto+0xc6>
   181e8:	2e00      	cmp	r6, #0
   181ea:	f43f af13 	beq.w	18014 <ip_interface_sendto+0x30>
   181ee:	f04f 0a38 	mov.w	sl, #56	; 0x38
   181f2:	4b2e      	ldr	r3, [pc, #184]	; (182ac <ip_interface_sendto+0x2c8>)
   181f4:	9300      	str	r3, [sp, #0]
   181f6:	4650      	mov	r0, sl
   181f8:	f7fb fd4a 	bl	13c90 <bsd_os_errno_set>
   181fc:	9b00      	ldr	r3, [sp, #0]
   181fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18202:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   18206:	e76d      	b.n	180e4 <ip_interface_sendto+0x100>
   18208:	6823      	ldr	r3, [r4, #0]
   1820a:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   1820e:	f3c3 7300 	ubfx	r3, r3, #28, #1
   18212:	9303      	str	r3, [sp, #12]
   18214:	e70b      	b.n	1802e <ip_interface_sendto+0x4a>
   18216:	f8c0 a004 	str.w	sl, [r0, #4]
   1821a:	6822      	ldr	r2, [r4, #0]
   1821c:	0312      	lsls	r2, r2, #12
   1821e:	d5a9      	bpl.n	18174 <ip_interface_sendto+0x190>
   18220:	f8d4 a008 	ldr.w	sl, [r4, #8]
   18224:	e741      	b.n	180aa <ip_interface_sendto+0xc6>
   18226:	6823      	ldr	r3, [r4, #0]
   18228:	b29b      	uxth	r3, r3
   1822a:	2b05      	cmp	r3, #5
   1822c:	f47f af6a 	bne.w	18104 <ip_interface_sendto+0x120>
   18230:	e764      	b.n	180fc <ip_interface_sendto+0x118>
   18232:	2210      	movs	r2, #16
   18234:	8931      	ldrh	r1, [r6, #8]
   18236:	835a      	strh	r2, [r3, #26]
   18238:	8319      	strh	r1, [r3, #24]
   1823a:	18b1      	adds	r1, r6, r2
   1823c:	f00f fb83 	bl	27946 <memcpy>
   18240:	f247 0207 	movw	r2, #28679	; 0x7007
   18244:	9b06      	ldr	r3, [sp, #24]
   18246:	4690      	mov	r8, r2
   18248:	6899      	ldr	r1, [r3, #8]
   1824a:	8b58      	ldrh	r0, [r3, #26]
   1824c:	3104      	adds	r1, #4
   1824e:	4401      	add	r1, r0
   18250:	f8c3 9014 	str.w	r9, [r3, #20]
   18254:	6099      	str	r1, [r3, #8]
   18256:	e761      	b.n	1811c <ip_interface_sendto+0x138>
   18258:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1825a:	2a10      	cmp	r2, #16
   1825c:	f47f af1b 	bne.w	18096 <ip_interface_sendto+0xb2>
   18260:	2204      	movs	r2, #4
   18262:	8931      	ldrh	r1, [r6, #8]
   18264:	835a      	strh	r2, [r3, #26]
   18266:	8319      	strh	r1, [r3, #24]
   18268:	f106 010c 	add.w	r1, r6, #12
   1826c:	f00f fb6b 	bl	27946 <memcpy>
   18270:	e7e6      	b.n	18240 <ip_interface_sendto+0x25c>
   18272:	4b0e      	ldr	r3, [pc, #56]	; (182ac <ip_interface_sendto+0x2c8>)
   18274:	f04f 0a23 	mov.w	sl, #35	; 0x23
   18278:	9300      	str	r3, [sp, #0]
   1827a:	e7bc      	b.n	181f6 <ip_interface_sendto+0x212>
   1827c:	4b0b      	ldr	r3, [pc, #44]	; (182ac <ip_interface_sendto+0x2c8>)
   1827e:	f04f 0a28 	mov.w	sl, #40	; 0x28
   18282:	9300      	str	r3, [sp, #0]
   18284:	e7b7      	b.n	181f6 <ip_interface_sendto+0x212>
   18286:	4b09      	ldr	r3, [pc, #36]	; (182ac <ip_interface_sendto+0x2c8>)
   18288:	f04f 0a39 	mov.w	sl, #57	; 0x39
   1828c:	9300      	str	r3, [sp, #0]
   1828e:	e7b2      	b.n	181f6 <ip_interface_sendto+0x212>
   18290:	4b06      	ldr	r3, [pc, #24]	; (182ac <ip_interface_sendto+0x2c8>)
   18292:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   18296:	9300      	str	r3, [sp, #0]
   18298:	e7ad      	b.n	181f6 <ip_interface_sendto+0x212>
   1829a:	4b04      	ldr	r3, [pc, #16]	; (182ac <ip_interface_sendto+0x2c8>)
   1829c:	f04f 0a09 	mov.w	sl, #9
   182a0:	9300      	str	r3, [sp, #0]
   182a2:	e7a8      	b.n	181f6 <ip_interface_sendto+0x212>
   182a4:	f04f 0a0c 	mov.w	sl, #12
   182a8:	e6ff      	b.n	180aa <ip_interface_sendto+0xc6>
   182aa:	bf00      	nop
   182ac:	200232e0 	.word	0x200232e0

000182b0 <ip_interface_recvfrom>:
   182b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182b4:	b087      	sub	sp, #28
   182b6:	2a00      	cmp	r2, #0
   182b8:	f000 8112 	beq.w	184e0 <ip_interface_recvfrom+0x230>
   182bc:	4680      	mov	r8, r0
   182be:	468b      	mov	fp, r1
   182c0:	469a      	mov	sl, r3
   182c2:	4691      	mov	r9, r2
   182c4:	b11b      	cbz	r3, 182ce <ip_interface_recvfrom+0x1e>
   182c6:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   182ca:	f000 8107 	beq.w	184dc <ip_interface_recvfrom+0x22c>
   182ce:	4640      	mov	r0, r8
   182d0:	f005 fafc 	bl	1d8cc <interface_socket_from_handle_get>
   182d4:	4604      	mov	r4, r0
   182d6:	2800      	cmp	r0, #0
   182d8:	f000 8104 	beq.w	184e4 <ip_interface_recvfrom+0x234>
   182dc:	6803      	ldr	r3, [r0, #0]
   182de:	02db      	lsls	r3, r3, #11
   182e0:	d562      	bpl.n	183a8 <ip_interface_recvfrom+0xf8>
   182e2:	f01a 0f02 	tst.w	sl, #2
   182e6:	bf18      	it	ne
   182e8:	2600      	movne	r6, #0
   182ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   182ee:	bf08      	it	eq
   182f0:	6806      	ldreq	r6, [r0, #0]
   182f2:	f00a 0310 	and.w	r3, sl, #16
   182f6:	bf04      	itt	eq
   182f8:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   182fc:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   18300:	9301      	str	r3, [sp, #4]
   18302:	6823      	ldr	r3, [r4, #0]
   18304:	03df      	lsls	r7, r3, #15
   18306:	d567      	bpl.n	183d8 <ip_interface_recvfrom+0x128>
   18308:	6823      	ldr	r3, [r4, #0]
   1830a:	69e0      	ldr	r0, [r4, #28]
   1830c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   18310:	6023      	str	r3, [r4, #0]
   18312:	6803      	ldr	r3, [r0, #0]
   18314:	68db      	ldr	r3, [r3, #12]
   18316:	4798      	blx	r3
   18318:	4605      	mov	r5, r0
   1831a:	3001      	adds	r0, #1
   1831c:	d07d      	beq.n	1841a <ip_interface_recvfrom+0x16a>
   1831e:	45a9      	cmp	r9, r5
   18320:	dd03      	ble.n	1832a <ip_interface_recvfrom+0x7a>
   18322:	6923      	ldr	r3, [r4, #16]
   18324:	2b01      	cmp	r3, #1
   18326:	f000 80a3 	beq.w	18470 <ip_interface_recvfrom+0x1c0>
   1832a:	f04f 0800 	mov.w	r8, #0
   1832e:	af02      	add	r7, sp, #8
   18330:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18332:	b103      	cbz	r3, 18336 <ip_interface_recvfrom+0x86>
   18334:	681b      	ldr	r3, [r3, #0]
   18336:	9a10      	ldr	r2, [sp, #64]	; 0x40
   18338:	e9cd b902 	strd	fp, r9, [sp, #8]
   1833c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   18340:	69e0      	ldr	r0, [r4, #28]
   18342:	4639      	mov	r1, r7
   18344:	6803      	ldr	r3, [r0, #0]
   18346:	4652      	mov	r2, sl
   18348:	689b      	ldr	r3, [r3, #8]
   1834a:	4798      	blx	r3
   1834c:	4605      	mov	r5, r0
   1834e:	69e0      	ldr	r0, [r4, #28]
   18350:	1c6b      	adds	r3, r5, #1
   18352:	6803      	ldr	r3, [r0, #0]
   18354:	bf18      	it	ne
   18356:	2701      	movne	r7, #1
   18358:	68db      	ldr	r3, [r3, #12]
   1835a:	bf0a      	itet	eq
   1835c:	2700      	moveq	r7, #0
   1835e:	2600      	movne	r6, #0
   18360:	2623      	moveq	r6, #35	; 0x23
   18362:	4798      	blx	r3
   18364:	3001      	adds	r0, #1
   18366:	d132      	bne.n	183ce <ip_interface_recvfrom+0x11e>
   18368:	f1b8 0f00 	cmp.w	r8, #0
   1836c:	f000 80b0 	beq.w	184d0 <ip_interface_recvfrom+0x220>
   18370:	2f00      	cmp	r7, #0
   18372:	f000 80a1 	beq.w	184b8 <ip_interface_recvfrom+0x208>
   18376:	6823      	ldr	r3, [r4, #0]
   18378:	0318      	lsls	r0, r3, #12
   1837a:	d506      	bpl.n	1838a <ip_interface_recvfrom+0xda>
   1837c:	6823      	ldr	r3, [r4, #0]
   1837e:	b29b      	uxth	r3, r3
   18380:	2b0d      	cmp	r3, #13
   18382:	d002      	beq.n	1838a <ip_interface_recvfrom+0xda>
   18384:	6923      	ldr	r3, [r4, #16]
   18386:	2b01      	cmp	r3, #1
   18388:	d021      	beq.n	183ce <ip_interface_recvfrom+0x11e>
   1838a:	6823      	ldr	r3, [r4, #0]
   1838c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   18390:	6823      	ldr	r3, [r4, #0]
   18392:	f040 80a9 	bne.w	184e8 <ip_interface_recvfrom+0x238>
   18396:	0319      	lsls	r1, r3, #12
   18398:	d473      	bmi.n	18482 <ip_interface_recvfrom+0x1d2>
   1839a:	2e00      	cmp	r6, #0
   1839c:	f040 8086 	bne.w	184ac <ip_interface_recvfrom+0x1fc>
   183a0:	4628      	mov	r0, r5
   183a2:	b007      	add	sp, #28
   183a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183a8:	6803      	ldr	r3, [r0, #0]
   183aa:	b29b      	uxth	r3, r3
   183ac:	2b06      	cmp	r3, #6
   183ae:	d071      	beq.n	18494 <ip_interface_recvfrom+0x1e4>
   183b0:	6803      	ldr	r3, [r0, #0]
   183b2:	b29b      	uxth	r3, r3
   183b4:	2b07      	cmp	r3, #7
   183b6:	bf0c      	ite	eq
   183b8:	2609      	moveq	r6, #9
   183ba:	2639      	movne	r6, #57	; 0x39
   183bc:	69e0      	ldr	r0, [r4, #28]
   183be:	6803      	ldr	r3, [r0, #0]
   183c0:	68db      	ldr	r3, [r3, #12]
   183c2:	4798      	blx	r3
   183c4:	1c43      	adds	r3, r0, #1
   183c6:	4605      	mov	r5, r0
   183c8:	d0df      	beq.n	1838a <ip_interface_recvfrom+0xda>
   183ca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   183ce:	6823      	ldr	r3, [r4, #0]
   183d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   183d4:	6023      	str	r3, [r4, #0]
   183d6:	e7e0      	b.n	1839a <ip_interface_recvfrom+0xea>
   183d8:	2e00      	cmp	r6, #0
   183da:	d07d      	beq.n	184d8 <ip_interface_recvfrom+0x228>
   183dc:	6a26      	ldr	r6, [r4, #32]
   183de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   183e2:	2e00      	cmp	r6, #0
   183e4:	bf08      	it	eq
   183e6:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   183ea:	af02      	add	r7, sp, #8
   183ec:	463b      	mov	r3, r7
   183ee:	4611      	mov	r1, r2
   183f0:	4640      	mov	r0, r8
   183f2:	9602      	str	r6, [sp, #8]
   183f4:	f005 f9ea 	bl	1d7cc <interface_socket_wait>
   183f8:	4606      	mov	r6, r0
   183fa:	b350      	cbz	r0, 18452 <ip_interface_recvfrom+0x1a2>
   183fc:	6823      	ldr	r3, [r4, #0]
   183fe:	031a      	lsls	r2, r3, #12
   18400:	d532      	bpl.n	18468 <ip_interface_recvfrom+0x1b8>
   18402:	6823      	ldr	r3, [r4, #0]
   18404:	b29b      	uxth	r3, r3
   18406:	2b0d      	cmp	r3, #13
   18408:	d02e      	beq.n	18468 <ip_interface_recvfrom+0x1b8>
   1840a:	6923      	ldr	r3, [r4, #16]
   1840c:	f1a3 0801 	sub.w	r8, r3, #1
   18410:	fab8 f888 	clz	r8, r8
   18414:	ea4f 1858 	mov.w	r8, r8, lsr #5
   18418:	e78a      	b.n	18330 <ip_interface_recvfrom+0x80>
   1841a:	6823      	ldr	r3, [r4, #0]
   1841c:	031a      	lsls	r2, r3, #12
   1841e:	d5db      	bpl.n	183d8 <ip_interface_recvfrom+0x128>
   18420:	6823      	ldr	r3, [r4, #0]
   18422:	b29b      	uxth	r3, r3
   18424:	2b0d      	cmp	r3, #13
   18426:	d0d7      	beq.n	183d8 <ip_interface_recvfrom+0x128>
   18428:	6923      	ldr	r3, [r4, #16]
   1842a:	69e0      	ldr	r0, [r4, #28]
   1842c:	2b01      	cmp	r3, #1
   1842e:	d033      	beq.n	18498 <ip_interface_recvfrom+0x1e8>
   18430:	2639      	movs	r6, #57	; 0x39
   18432:	6823      	ldr	r3, [r4, #0]
   18434:	0c1b      	lsrs	r3, r3, #16
   18436:	041b      	lsls	r3, r3, #16
   18438:	f043 030d 	orr.w	r3, r3, #13
   1843c:	6023      	str	r3, [r4, #0]
   1843e:	6823      	ldr	r3, [r4, #0]
   18440:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   18444:	6023      	str	r3, [r4, #0]
   18446:	6803      	ldr	r3, [r0, #0]
   18448:	68db      	ldr	r3, [r3, #12]
   1844a:	4798      	blx	r3
   1844c:	3001      	adds	r0, #1
   1844e:	d1be      	bne.n	183ce <ip_interface_recvfrom+0x11e>
   18450:	e79b      	b.n	1838a <ip_interface_recvfrom+0xda>
   18452:	4640      	mov	r0, r8
   18454:	f005 fa3a 	bl	1d8cc <interface_socket_from_handle_get>
   18458:	b140      	cbz	r0, 1846c <ip_interface_recvfrom+0x1bc>
   1845a:	6846      	ldr	r6, [r0, #4]
   1845c:	b136      	cbz	r6, 1846c <ip_interface_recvfrom+0x1bc>
   1845e:	2300      	movs	r3, #0
   18460:	6043      	str	r3, [r0, #4]
   18462:	6823      	ldr	r3, [r4, #0]
   18464:	031a      	lsls	r2, r3, #12
   18466:	d4cc      	bmi.n	18402 <ip_interface_recvfrom+0x152>
   18468:	69e0      	ldr	r0, [r4, #28]
   1846a:	e7ec      	b.n	18446 <ip_interface_recvfrom+0x196>
   1846c:	2601      	movs	r6, #1
   1846e:	e748      	b.n	18302 <ip_interface_recvfrom+0x52>
   18470:	9b01      	ldr	r3, [sp, #4]
   18472:	b11b      	cbz	r3, 1847c <ip_interface_recvfrom+0x1cc>
   18474:	6823      	ldr	r3, [r4, #0]
   18476:	00d9      	lsls	r1, r3, #3
   18478:	d5b0      	bpl.n	183dc <ip_interface_recvfrom+0x12c>
   1847a:	e756      	b.n	1832a <ip_interface_recvfrom+0x7a>
   1847c:	4698      	mov	r8, r3
   1847e:	af02      	add	r7, sp, #8
   18480:	e756      	b.n	18330 <ip_interface_recvfrom+0x80>
   18482:	6823      	ldr	r3, [r4, #0]
   18484:	b29b      	uxth	r3, r3
   18486:	2b0d      	cmp	r3, #13
   18488:	d187      	bne.n	1839a <ip_interface_recvfrom+0xea>
   1848a:	68a3      	ldr	r3, [r4, #8]
   1848c:	2b00      	cmp	r3, #0
   1848e:	d084      	beq.n	1839a <ip_interface_recvfrom+0xea>
   18490:	68a6      	ldr	r6, [r4, #8]
   18492:	e782      	b.n	1839a <ip_interface_recvfrom+0xea>
   18494:	2609      	movs	r6, #9
   18496:	e791      	b.n	183bc <ip_interface_recvfrom+0x10c>
   18498:	6803      	ldr	r3, [r0, #0]
   1849a:	68db      	ldr	r3, [r3, #12]
   1849c:	4798      	blx	r3
   1849e:	3001      	adds	r0, #1
   184a0:	d00a      	beq.n	184b8 <ip_interface_recvfrom+0x208>
   184a2:	2623      	movs	r6, #35	; 0x23
   184a4:	6823      	ldr	r3, [r4, #0]
   184a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   184aa:	6023      	str	r3, [r4, #0]
   184ac:	4630      	mov	r0, r6
   184ae:	f7fb fbef 	bl	13c90 <bsd_os_errno_set>
   184b2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   184b6:	e773      	b.n	183a0 <ip_interface_recvfrom+0xf0>
   184b8:	6823      	ldr	r3, [r4, #0]
   184ba:	2500      	movs	r5, #0
   184bc:	0c1b      	lsrs	r3, r3, #16
   184be:	041b      	lsls	r3, r3, #16
   184c0:	f043 030d 	orr.w	r3, r3, #13
   184c4:	6023      	str	r3, [r4, #0]
   184c6:	6823      	ldr	r3, [r4, #0]
   184c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   184cc:	6023      	str	r3, [r4, #0]
   184ce:	e767      	b.n	183a0 <ip_interface_recvfrom+0xf0>
   184d0:	2f00      	cmp	r7, #0
   184d2:	f47f af50 	bne.w	18376 <ip_interface_recvfrom+0xc6>
   184d6:	e758      	b.n	1838a <ip_interface_recvfrom+0xda>
   184d8:	2623      	movs	r6, #35	; 0x23
   184da:	e7c5      	b.n	18468 <ip_interface_recvfrom+0x1b8>
   184dc:	262d      	movs	r6, #45	; 0x2d
   184de:	e7e5      	b.n	184ac <ip_interface_recvfrom+0x1fc>
   184e0:	2616      	movs	r6, #22
   184e2:	e7e3      	b.n	184ac <ip_interface_recvfrom+0x1fc>
   184e4:	2609      	movs	r6, #9
   184e6:	e7e1      	b.n	184ac <ip_interface_recvfrom+0x1fc>
   184e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   184ec:	6023      	str	r3, [r4, #0]
   184ee:	6823      	ldr	r3, [r4, #0]
   184f0:	2669      	movs	r6, #105	; 0x69
   184f2:	0c1b      	lsrs	r3, r3, #16
   184f4:	041b      	lsls	r3, r3, #16
   184f6:	f043 030d 	orr.w	r3, r3, #13
   184fa:	6023      	str	r3, [r4, #0]
   184fc:	e7d6      	b.n	184ac <ip_interface_recvfrom+0x1fc>
   184fe:	bf00      	nop

00018500 <ip_interface_connect>:
   18500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18504:	b082      	sub	sp, #8
   18506:	2900      	cmp	r1, #0
   18508:	d04b      	beq.n	185a2 <ip_interface_connect+0xa2>
   1850a:	4617      	mov	r7, r2
   1850c:	2a00      	cmp	r2, #0
   1850e:	d048      	beq.n	185a2 <ip_interface_connect+0xa2>
   18510:	4680      	mov	r8, r0
   18512:	4689      	mov	r9, r1
   18514:	f005 f9da 	bl	1d8cc <interface_socket_from_handle_get>
   18518:	4605      	mov	r5, r0
   1851a:	2800      	cmp	r0, #0
   1851c:	f000 80af 	beq.w	1867e <ip_interface_connect+0x17e>
   18520:	6803      	ldr	r3, [r0, #0]
   18522:	b29b      	uxth	r3, r3
   18524:	2b02      	cmp	r3, #2
   18526:	d004      	beq.n	18532 <ip_interface_connect+0x32>
   18528:	6803      	ldr	r3, [r0, #0]
   1852a:	b29b      	uxth	r3, r3
   1852c:	2b04      	cmp	r3, #4
   1852e:	f040 809d 	bne.w	1866c <ip_interface_connect+0x16c>
   18532:	6829      	ldr	r1, [r5, #0]
   18534:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   18538:	f040 8089 	bne.w	1864e <ip_interface_connect+0x14e>
   1853c:	ae02      	add	r6, sp, #8
   1853e:	f8d5 a018 	ldr.w	sl, [r5, #24]
   18542:	f846 1d04 	str.w	r1, [r6, #-4]!
   18546:	4630      	mov	r0, r6
   18548:	f7ff fb5e 	bl	17c08 <rpc_ip_client_request_alloc>
   1854c:	bb98      	cbnz	r0, 185b6 <ip_interface_connect+0xb6>
   1854e:	2108      	movs	r1, #8
   18550:	ea4f 4208 	mov.w	r2, r8, lsl #16
   18554:	9c01      	ldr	r4, [sp, #4]
   18556:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   1855a:	f043 0302 	orr.w	r3, r3, #2
   1855e:	60e3      	str	r3, [r4, #12]
   18560:	f8c4 a010 	str.w	sl, [r4, #16]
   18564:	7260      	strb	r0, [r4, #9]
   18566:	72a0      	strb	r0, [r4, #10]
   18568:	72e0      	strb	r0, [r4, #11]
   1856a:	7221      	strb	r1, [r4, #8]
   1856c:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   18570:	f042 0202 	orr.w	r2, r2, #2
   18574:	60e2      	str	r2, [r4, #12]
   18576:	68a3      	ldr	r3, [r4, #8]
   18578:	69aa      	ldr	r2, [r5, #24]
   1857a:	3304      	adds	r3, #4
   1857c:	6122      	str	r2, [r4, #16]
   1857e:	60a3      	str	r3, [r4, #8]
   18580:	68eb      	ldr	r3, [r5, #12]
   18582:	f8d9 2004 	ldr.w	r2, [r9, #4]
   18586:	4293      	cmp	r3, r2
   18588:	d11b      	bne.n	185c2 <ip_interface_connect+0xc2>
   1858a:	f899 2000 	ldrb.w	r2, [r9]
   1858e:	4297      	cmp	r7, r2
   18590:	d107      	bne.n	185a2 <ip_interface_connect+0xa2>
   18592:	2b02      	cmp	r3, #2
   18594:	f104 0018 	add.w	r0, r4, #24
   18598:	d015      	beq.n	185c6 <ip_interface_connect+0xc6>
   1859a:	2b0a      	cmp	r3, #10
   1859c:	d101      	bne.n	185a2 <ip_interface_connect+0xa2>
   1859e:	2f24      	cmp	r7, #36	; 0x24
   185a0:	d01d      	beq.n	185de <ip_interface_connect+0xde>
   185a2:	2416      	movs	r4, #22
   185a4:	4620      	mov	r0, r4
   185a6:	f7fb fb73 	bl	13c90 <bsd_os_errno_set>
   185aa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   185ae:	4620      	mov	r0, r4
   185b0:	b002      	add	sp, #8
   185b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   185b6:	9c01      	ldr	r4, [sp, #4]
   185b8:	2c00      	cmp	r4, #0
   185ba:	d05e      	beq.n	1867a <ip_interface_connect+0x17a>
   185bc:	ea4f 4208 	mov.w	r2, r8, lsl #16
   185c0:	e7d4      	b.n	1856c <ip_interface_connect+0x6c>
   185c2:	242f      	movs	r4, #47	; 0x2f
   185c4:	e7ee      	b.n	185a4 <ip_interface_connect+0xa4>
   185c6:	2f10      	cmp	r7, #16
   185c8:	d1eb      	bne.n	185a2 <ip_interface_connect+0xa2>
   185ca:	2204      	movs	r2, #4
   185cc:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   185d0:	f109 010c 	add.w	r1, r9, #12
   185d4:	82e2      	strh	r2, [r4, #22]
   185d6:	82a3      	strh	r3, [r4, #20]
   185d8:	f00f f9b5 	bl	27946 <memcpy>
   185dc:	e008      	b.n	185f0 <ip_interface_connect+0xf0>
   185de:	2210      	movs	r2, #16
   185e0:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   185e4:	eb09 0102 	add.w	r1, r9, r2
   185e8:	82e2      	strh	r2, [r4, #22]
   185ea:	82a3      	strh	r3, [r4, #20]
   185ec:	f00f f9ab 	bl	27946 <memcpy>
   185f0:	68a3      	ldr	r3, [r4, #8]
   185f2:	8ae2      	ldrh	r2, [r4, #22]
   185f4:	f247 0102 	movw	r1, #28674	; 0x7002
   185f8:	4413      	add	r3, r2
   185fa:	60a3      	str	r3, [r4, #8]
   185fc:	682f      	ldr	r7, [r5, #0]
   185fe:	682b      	ldr	r3, [r5, #0]
   18600:	4620      	mov	r0, r4
   18602:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   18606:	602b      	str	r3, [r5, #0]
   18608:	f7ff fb12 	bl	17c30 <rpc_ip_client_request_send>
   1860c:	b9a8      	cbnz	r0, 1863a <ip_interface_connect+0x13a>
   1860e:	682b      	ldr	r3, [r5, #0]
   18610:	00db      	lsls	r3, r3, #3
   18612:	d429      	bmi.n	18668 <ip_interface_connect+0x168>
   18614:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   18616:	4633      	mov	r3, r6
   18618:	2c00      	cmp	r4, #0
   1861a:	bf08      	it	eq
   1861c:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
   18620:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18624:	2105      	movs	r1, #5
   18626:	4640      	mov	r0, r8
   18628:	9401      	str	r4, [sp, #4]
   1862a:	f005 f8cf 	bl	1d7cc <interface_socket_wait>
   1862e:	4604      	mov	r4, r0
   18630:	b178      	cbz	r0, 18652 <ip_interface_connect+0x152>
   18632:	2c73      	cmp	r4, #115	; 0x73
   18634:	d0b6      	beq.n	185a4 <ip_interface_connect+0xa4>
   18636:	602f      	str	r7, [r5, #0]
   18638:	e7b4      	b.n	185a4 <ip_interface_connect+0xa4>
   1863a:	6820      	ldr	r0, [r4, #0]
   1863c:	b108      	cbz	r0, 18642 <ip_interface_connect+0x142>
   1863e:	f7ff fb15 	bl	17c6c <rpc_ip_client_data_free>
   18642:	4620      	mov	r0, r4
   18644:	f7ff fb0a 	bl	17c5c <rpc_ip_client_message_free>
   18648:	2423      	movs	r4, #35	; 0x23
   1864a:	602f      	str	r7, [r5, #0]
   1864c:	e7aa      	b.n	185a4 <ip_interface_connect+0xa4>
   1864e:	2472      	movs	r4, #114	; 0x72
   18650:	e7a8      	b.n	185a4 <ip_interface_connect+0xa4>
   18652:	4640      	mov	r0, r8
   18654:	f005 f93a 	bl	1d8cc <interface_socket_from_handle_get>
   18658:	2800      	cmp	r0, #0
   1865a:	d0a8      	beq.n	185ae <ip_interface_connect+0xae>
   1865c:	6843      	ldr	r3, [r0, #4]
   1865e:	2b00      	cmp	r3, #0
   18660:	d0a5      	beq.n	185ae <ip_interface_connect+0xae>
   18662:	6044      	str	r4, [r0, #4]
   18664:	461c      	mov	r4, r3
   18666:	e7e4      	b.n	18632 <ip_interface_connect+0x132>
   18668:	2473      	movs	r4, #115	; 0x73
   1866a:	e79b      	b.n	185a4 <ip_interface_connect+0xa4>
   1866c:	6803      	ldr	r3, [r0, #0]
   1866e:	b29b      	uxth	r3, r3
   18670:	2b05      	cmp	r3, #5
   18672:	bf14      	ite	ne
   18674:	2409      	movne	r4, #9
   18676:	2438      	moveq	r4, #56	; 0x38
   18678:	e794      	b.n	185a4 <ip_interface_connect+0xa4>
   1867a:	240c      	movs	r4, #12
   1867c:	e792      	b.n	185a4 <ip_interface_connect+0xa4>
   1867e:	2409      	movs	r4, #9
   18680:	e790      	b.n	185a4 <ip_interface_connect+0xa4>
   18682:	bf00      	nop

00018684 <ip_interface_bind>:
   18684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1868c:	b083      	sub	sp, #12
   1868e:	9300      	str	r3, [sp, #0]
   18690:	b3b1      	cbz	r1, 18700 <ip_interface_bind+0x7c>
   18692:	4616      	mov	r6, r2
   18694:	b3a2      	cbz	r2, 18700 <ip_interface_bind+0x7c>
   18696:	4607      	mov	r7, r0
   18698:	4688      	mov	r8, r1
   1869a:	f005 f917 	bl	1d8cc <interface_socket_from_handle_get>
   1869e:	4605      	mov	r5, r0
   186a0:	2800      	cmp	r0, #0
   186a2:	d04a      	beq.n	1873a <ip_interface_bind+0xb6>
   186a4:	6803      	ldr	r3, [r0, #0]
   186a6:	b29b      	uxth	r3, r3
   186a8:	2b02      	cmp	r3, #2
   186aa:	d146      	bne.n	1873a <ip_interface_bind+0xb6>
   186ac:	2100      	movs	r1, #0
   186ae:	a802      	add	r0, sp, #8
   186b0:	f840 1d04 	str.w	r1, [r0, #-4]!
   186b4:	f8d5 9018 	ldr.w	r9, [r5, #24]
   186b8:	f7ff faa6 	bl	17c08 <rpc_ip_client_request_alloc>
   186bc:	bb50      	cbnz	r0, 18714 <ip_interface_bind+0x90>
   186be:	f247 0305 	movw	r3, #28677	; 0x7005
   186c2:	2208      	movs	r2, #8
   186c4:	9c01      	ldr	r4, [sp, #4]
   186c6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   186ca:	60e3      	str	r3, [r4, #12]
   186cc:	f8c4 9010 	str.w	r9, [r4, #16]
   186d0:	7260      	strb	r0, [r4, #9]
   186d2:	72a0      	strb	r0, [r4, #10]
   186d4:	72e0      	strb	r0, [r4, #11]
   186d6:	7222      	strb	r2, [r4, #8]
   186d8:	68a3      	ldr	r3, [r4, #8]
   186da:	3304      	adds	r3, #4
   186dc:	60a3      	str	r3, [r4, #8]
   186de:	68eb      	ldr	r3, [r5, #12]
   186e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   186e4:	4293      	cmp	r3, r2
   186e6:	d11a      	bne.n	1871e <ip_interface_bind+0x9a>
   186e8:	f898 2000 	ldrb.w	r2, [r8]
   186ec:	4296      	cmp	r6, r2
   186ee:	d107      	bne.n	18700 <ip_interface_bind+0x7c>
   186f0:	2b02      	cmp	r3, #2
   186f2:	f104 0018 	add.w	r0, r4, #24
   186f6:	d014      	beq.n	18722 <ip_interface_bind+0x9e>
   186f8:	2b0a      	cmp	r3, #10
   186fa:	d101      	bne.n	18700 <ip_interface_bind+0x7c>
   186fc:	2e24      	cmp	r6, #36	; 0x24
   186fe:	d01e      	beq.n	1873e <ip_interface_bind+0xba>
   18700:	2416      	movs	r4, #22
   18702:	4620      	mov	r0, r4
   18704:	f7fb fac4 	bl	13c90 <bsd_os_errno_set>
   18708:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1870c:	4620      	mov	r0, r4
   1870e:	b003      	add	sp, #12
   18710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18714:	9c01      	ldr	r4, [sp, #4]
   18716:	2c00      	cmp	r4, #0
   18718:	d1de      	bne.n	186d8 <ip_interface_bind+0x54>
   1871a:	240c      	movs	r4, #12
   1871c:	e7f1      	b.n	18702 <ip_interface_bind+0x7e>
   1871e:	242f      	movs	r4, #47	; 0x2f
   18720:	e7ef      	b.n	18702 <ip_interface_bind+0x7e>
   18722:	2e10      	cmp	r6, #16
   18724:	d1ec      	bne.n	18700 <ip_interface_bind+0x7c>
   18726:	2204      	movs	r2, #4
   18728:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1872c:	f108 010c 	add.w	r1, r8, #12
   18730:	82e2      	strh	r2, [r4, #22]
   18732:	82a3      	strh	r3, [r4, #20]
   18734:	f00f f907 	bl	27946 <memcpy>
   18738:	e00a      	b.n	18750 <ip_interface_bind+0xcc>
   1873a:	2409      	movs	r4, #9
   1873c:	e7e1      	b.n	18702 <ip_interface_bind+0x7e>
   1873e:	2210      	movs	r2, #16
   18740:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   18744:	eb08 0102 	add.w	r1, r8, r2
   18748:	82e2      	strh	r2, [r4, #22]
   1874a:	82a3      	strh	r3, [r4, #20]
   1874c:	f00f f8fb 	bl	27946 <memcpy>
   18750:	68a3      	ldr	r3, [r4, #8]
   18752:	8ae2      	ldrh	r2, [r4, #22]
   18754:	f247 0105 	movw	r1, #28677	; 0x7005
   18758:	4413      	add	r3, r2
   1875a:	60a3      	str	r3, [r4, #8]
   1875c:	682b      	ldr	r3, [r5, #0]
   1875e:	4620      	mov	r0, r4
   18760:	0c1b      	lsrs	r3, r3, #16
   18762:	041b      	lsls	r3, r3, #16
   18764:	f043 0303 	orr.w	r3, r3, #3
   18768:	602b      	str	r3, [r5, #0]
   1876a:	682e      	ldr	r6, [r5, #0]
   1876c:	f7ff fa60 	bl	17c30 <rpc_ip_client_request_send>
   18770:	4680      	mov	r8, r0
   18772:	b978      	cbnz	r0, 18794 <ip_interface_bind+0x110>
   18774:	466b      	mov	r3, sp
   18776:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1877a:	2104      	movs	r1, #4
   1877c:	4638      	mov	r0, r7
   1877e:	f005 f825 	bl	1d7cc <interface_socket_wait>
   18782:	4604      	mov	r4, r0
   18784:	b1a0      	cbz	r0, 187b0 <ip_interface_bind+0x12c>
   18786:	682b      	ldr	r3, [r5, #0]
   18788:	0c1b      	lsrs	r3, r3, #16
   1878a:	041b      	lsls	r3, r3, #16
   1878c:	f043 0302 	orr.w	r3, r3, #2
   18790:	602b      	str	r3, [r5, #0]
   18792:	e7b6      	b.n	18702 <ip_interface_bind+0x7e>
   18794:	6820      	ldr	r0, [r4, #0]
   18796:	b108      	cbz	r0, 1879c <ip_interface_bind+0x118>
   18798:	f7ff fa68 	bl	17c6c <rpc_ip_client_data_free>
   1879c:	0c36      	lsrs	r6, r6, #16
   1879e:	0436      	lsls	r6, r6, #16
   187a0:	4620      	mov	r0, r4
   187a2:	f046 0602 	orr.w	r6, r6, #2
   187a6:	f7ff fa59 	bl	17c5c <rpc_ip_client_message_free>
   187aa:	2423      	movs	r4, #35	; 0x23
   187ac:	602e      	str	r6, [r5, #0]
   187ae:	e7a8      	b.n	18702 <ip_interface_bind+0x7e>
   187b0:	4638      	mov	r0, r7
   187b2:	f005 f88b 	bl	1d8cc <interface_socket_from_handle_get>
   187b6:	2800      	cmp	r0, #0
   187b8:	d0a8      	beq.n	1870c <ip_interface_bind+0x88>
   187ba:	6844      	ldr	r4, [r0, #4]
   187bc:	2c00      	cmp	r4, #0
   187be:	d0a5      	beq.n	1870c <ip_interface_bind+0x88>
   187c0:	f8c0 8004 	str.w	r8, [r0, #4]
   187c4:	e7df      	b.n	18786 <ip_interface_bind+0x102>
   187c6:	bf00      	nop

000187c8 <ip_interface_listen>:
   187c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   187cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187d0:	b082      	sub	sp, #8
   187d2:	4606      	mov	r6, r0
   187d4:	9300      	str	r3, [sp, #0]
   187d6:	f005 f879 	bl	1d8cc <interface_socket_from_handle_get>
   187da:	2800      	cmp	r0, #0
   187dc:	d066      	beq.n	188ac <ip_interface_listen+0xe4>
   187de:	6803      	ldr	r3, [r0, #0]
   187e0:	4605      	mov	r5, r0
   187e2:	b29b      	uxth	r3, r3
   187e4:	2b04      	cmp	r3, #4
   187e6:	d161      	bne.n	188ac <ip_interface_listen+0xe4>
   187e8:	2100      	movs	r1, #0
   187ea:	4a32      	ldr	r2, [pc, #200]	; (188b4 <ip_interface_listen+0xec>)
   187ec:	4630      	mov	r0, r6
   187ee:	f004 ffb5 	bl	1d75c <interface_socket_packet_handler_update>
   187f2:	4601      	mov	r1, r0
   187f4:	2800      	cmp	r0, #0
   187f6:	d15b      	bne.n	188b0 <ip_interface_listen+0xe8>
   187f8:	a802      	add	r0, sp, #8
   187fa:	f840 1d04 	str.w	r1, [r0, #-4]!
   187fe:	69af      	ldr	r7, [r5, #24]
   18800:	f7ff fa02 	bl	17c08 <rpc_ip_client_request_alloc>
   18804:	bba0      	cbnz	r0, 18870 <ip_interface_listen+0xa8>
   18806:	f247 0308 	movw	r3, #28680	; 0x7008
   1880a:	2208      	movs	r2, #8
   1880c:	9c01      	ldr	r4, [sp, #4]
   1880e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   18812:	60e3      	str	r3, [r4, #12]
   18814:	6127      	str	r7, [r4, #16]
   18816:	7260      	strb	r0, [r4, #9]
   18818:	72a0      	strb	r0, [r4, #10]
   1881a:	72e0      	strb	r0, [r4, #11]
   1881c:	7222      	strb	r2, [r4, #8]
   1881e:	68a3      	ldr	r3, [r4, #8]
   18820:	f247 0108 	movw	r1, #28680	; 0x7008
   18824:	3304      	adds	r3, #4
   18826:	60a3      	str	r3, [r4, #8]
   18828:	682b      	ldr	r3, [r5, #0]
   1882a:	4620      	mov	r0, r4
   1882c:	0c1b      	lsrs	r3, r3, #16
   1882e:	041b      	lsls	r3, r3, #16
   18830:	f043 0306 	orr.w	r3, r3, #6
   18834:	602b      	str	r3, [r5, #0]
   18836:	682f      	ldr	r7, [r5, #0]
   18838:	f7ff f9fa 	bl	17c30 <rpc_ip_client_request_send>
   1883c:	4680      	mov	r8, r0
   1883e:	b9e0      	cbnz	r0, 1887a <ip_interface_listen+0xb2>
   18840:	466b      	mov	r3, sp
   18842:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18846:	2107      	movs	r1, #7
   18848:	4630      	mov	r0, r6
   1884a:	f004 ffbf 	bl	1d7cc <interface_socket_wait>
   1884e:	4604      	mov	r4, r0
   18850:	b308      	cbz	r0, 18896 <ip_interface_listen+0xce>
   18852:	682b      	ldr	r3, [r5, #0]
   18854:	0c1b      	lsrs	r3, r3, #16
   18856:	041b      	lsls	r3, r3, #16
   18858:	f043 0304 	orr.w	r3, r3, #4
   1885c:	602b      	str	r3, [r5, #0]
   1885e:	4620      	mov	r0, r4
   18860:	f7fb fa16 	bl	13c90 <bsd_os_errno_set>
   18864:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18868:	4620      	mov	r0, r4
   1886a:	b002      	add	sp, #8
   1886c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18870:	9c01      	ldr	r4, [sp, #4]
   18872:	2c00      	cmp	r4, #0
   18874:	d1d3      	bne.n	1881e <ip_interface_listen+0x56>
   18876:	240c      	movs	r4, #12
   18878:	e7f1      	b.n	1885e <ip_interface_listen+0x96>
   1887a:	6820      	ldr	r0, [r4, #0]
   1887c:	b108      	cbz	r0, 18882 <ip_interface_listen+0xba>
   1887e:	f7ff f9f5 	bl	17c6c <rpc_ip_client_data_free>
   18882:	0c3f      	lsrs	r7, r7, #16
   18884:	043f      	lsls	r7, r7, #16
   18886:	4620      	mov	r0, r4
   18888:	f047 0704 	orr.w	r7, r7, #4
   1888c:	f7ff f9e6 	bl	17c5c <rpc_ip_client_message_free>
   18890:	2423      	movs	r4, #35	; 0x23
   18892:	602f      	str	r7, [r5, #0]
   18894:	e7e3      	b.n	1885e <ip_interface_listen+0x96>
   18896:	4630      	mov	r0, r6
   18898:	f005 f818 	bl	1d8cc <interface_socket_from_handle_get>
   1889c:	2800      	cmp	r0, #0
   1889e:	d0e3      	beq.n	18868 <ip_interface_listen+0xa0>
   188a0:	6844      	ldr	r4, [r0, #4]
   188a2:	2c00      	cmp	r4, #0
   188a4:	d0e0      	beq.n	18868 <ip_interface_listen+0xa0>
   188a6:	f8c0 8004 	str.w	r8, [r0, #4]
   188aa:	e7d2      	b.n	18852 <ip_interface_listen+0x8a>
   188ac:	2409      	movs	r4, #9
   188ae:	e7d6      	b.n	1885e <ip_interface_listen+0x96>
   188b0:	2423      	movs	r4, #35	; 0x23
   188b2:	e7d4      	b.n	1885e <ip_interface_listen+0x96>
   188b4:	00017c7d 	.word	0x00017c7d

000188b8 <ip_interface_accept>:
   188b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   188c0:	2500      	movs	r5, #0
   188c2:	b087      	sub	sp, #28
   188c4:	460f      	mov	r7, r1
   188c6:	4690      	mov	r8, r2
   188c8:	e9cd 5303 	strd	r5, r3, [sp, #12]
   188cc:	4606      	mov	r6, r0
   188ce:	f004 fffd 	bl	1d8cc <interface_socket_from_handle_get>
   188d2:	4604      	mov	r4, r0
   188d4:	2800      	cmp	r0, #0
   188d6:	f000 8123 	beq.w	18b20 <ip_interface_accept+0x268>
   188da:	6803      	ldr	r3, [r0, #0]
   188dc:	b29b      	uxth	r3, r3
   188de:	2b07      	cmp	r3, #7
   188e0:	d10a      	bne.n	188f8 <ip_interface_accept+0x40>
   188e2:	6803      	ldr	r3, [r0, #0]
   188e4:	6805      	ldr	r5, [r0, #0]
   188e6:	00db      	lsls	r3, r3, #3
   188e8:	d416      	bmi.n	18918 <ip_interface_accept+0x60>
   188ea:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   188ee:	d019      	beq.n	18924 <ip_interface_accept+0x6c>
   188f0:	6805      	ldr	r5, [r0, #0]
   188f2:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   188f6:	d124      	bne.n	18942 <ip_interface_accept+0x8a>
   188f8:	f04f 0909 	mov.w	r9, #9
   188fc:	9b03      	ldr	r3, [sp, #12]
   188fe:	b113      	cbz	r3, 18906 <ip_interface_accept+0x4e>
   18900:	4628      	mov	r0, r5
   18902:	f004 ff15 	bl	1d730 <interface_socket_free>
   18906:	4648      	mov	r0, r9
   18908:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1890c:	f7fb f9c0 	bl	13c90 <bsd_os_errno_set>
   18910:	4648      	mov	r0, r9
   18912:	b007      	add	sp, #28
   18914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18918:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1891c:	d170      	bne.n	18a00 <ip_interface_accept+0x148>
   1891e:	f04f 0923 	mov.w	r9, #35	; 0x23
   18922:	e7eb      	b.n	188fc <ip_interface_accept+0x44>
   18924:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18928:	ab04      	add	r3, sp, #16
   1892a:	4611      	mov	r1, r2
   1892c:	4630      	mov	r0, r6
   1892e:	f004 ff4d 	bl	1d7cc <interface_socket_wait>
   18932:	4681      	mov	r9, r0
   18934:	2800      	cmp	r0, #0
   18936:	f000 8082 	beq.w	18a3e <ip_interface_accept+0x186>
   1893a:	6825      	ldr	r5, [r4, #0]
   1893c:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   18940:	d0dc      	beq.n	188fc <ip_interface_accept+0x44>
   18942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18946:	2300      	movs	r3, #0
   18948:	e9cd 0300 	strd	r0, r3, [sp]
   1894c:	4a78      	ldr	r2, [pc, #480]	; (18b30 <ip_interface_accept+0x278>)
   1894e:	6921      	ldr	r1, [r4, #16]
   18950:	a803      	add	r0, sp, #12
   18952:	f004 fe89 	bl	1d668 <interface_socket_allocate>
   18956:	9b03      	ldr	r3, [sp, #12]
   18958:	4605      	mov	r5, r0
   1895a:	2b00      	cmp	r3, #0
   1895c:	f000 80e4 	beq.w	18b28 <ip_interface_accept+0x270>
   18960:	2100      	movs	r1, #0
   18962:	6962      	ldr	r2, [r4, #20]
   18964:	a806      	add	r0, sp, #24
   18966:	615a      	str	r2, [r3, #20]
   18968:	68e2      	ldr	r2, [r4, #12]
   1896a:	f840 1d04 	str.w	r1, [r0, #-4]!
   1896e:	60da      	str	r2, [r3, #12]
   18970:	6922      	ldr	r2, [r4, #16]
   18972:	611a      	str	r2, [r3, #16]
   18974:	f8d4 9018 	ldr.w	r9, [r4, #24]
   18978:	f7ff f946 	bl	17c08 <rpc_ip_client_request_alloc>
   1897c:	2800      	cmp	r0, #0
   1897e:	d146      	bne.n	18a0e <ip_interface_accept+0x156>
   18980:	f247 030c 	movw	r3, #28684	; 0x700c
   18984:	2108      	movs	r1, #8
   18986:	f8dd b014 	ldr.w	fp, [sp, #20]
   1898a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1898e:	f8cb 300c 	str.w	r3, [fp, #12]
   18992:	f8cb 9010 	str.w	r9, [fp, #16]
   18996:	f88b 0009 	strb.w	r0, [fp, #9]
   1899a:	f88b 000a 	strb.w	r0, [fp, #10]
   1899e:	f88b 000b 	strb.w	r0, [fp, #11]
   189a2:	f88b 1008 	strb.w	r1, [fp, #8]
   189a6:	6823      	ldr	r3, [r4, #0]
   189a8:	f247 010c 	movw	r1, #28684	; 0x700c
   189ac:	0c1b      	lsrs	r3, r3, #16
   189ae:	041b      	lsls	r3, r3, #16
   189b0:	f043 0308 	orr.w	r3, r3, #8
   189b4:	6023      	str	r3, [r4, #0]
   189b6:	4658      	mov	r0, fp
   189b8:	f8d4 9000 	ldr.w	r9, [r4]
   189bc:	f7ff f938 	bl	17c30 <rpc_ip_client_request_send>
   189c0:	4682      	mov	sl, r0
   189c2:	bb60      	cbnz	r0, 18a1e <ip_interface_accept+0x166>
   189c4:	6822      	ldr	r2, [r4, #0]
   189c6:	9900      	ldr	r1, [sp, #0]
   189c8:	ab04      	add	r3, sp, #16
   189ca:	400a      	ands	r2, r1
   189cc:	6022      	str	r2, [r4, #0]
   189ce:	2109      	movs	r1, #9
   189d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   189d4:	4630      	mov	r0, r6
   189d6:	f004 fef9 	bl	1d7cc <interface_socket_wait>
   189da:	4681      	mov	r9, r0
   189dc:	2800      	cmp	r0, #0
   189de:	f000 808d 	beq.w	18afc <ip_interface_accept+0x244>
   189e2:	6823      	ldr	r3, [r4, #0]
   189e4:	9a01      	ldr	r2, [sp, #4]
   189e6:	431a      	orrs	r2, r3
   189e8:	6022      	str	r2, [r4, #0]
   189ea:	6823      	ldr	r3, [r4, #0]
   189ec:	0c1b      	lsrs	r3, r3, #16
   189ee:	041b      	lsls	r3, r3, #16
   189f0:	f043 0307 	orr.w	r3, r3, #7
   189f4:	6023      	str	r3, [r4, #0]
   189f6:	6823      	ldr	r3, [r4, #0]
   189f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   189fc:	6023      	str	r3, [r4, #0]
   189fe:	e77d      	b.n	188fc <ip_interface_accept+0x44>
   18a00:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   18a04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18a08:	e9cd 2300 	strd	r2, r3, [sp]
   18a0c:	e79e      	b.n	1894c <ip_interface_accept+0x94>
   18a0e:	f8dd b014 	ldr.w	fp, [sp, #20]
   18a12:	f04f 090c 	mov.w	r9, #12
   18a16:	f1bb 0f00 	cmp.w	fp, #0
   18a1a:	d1c4      	bne.n	189a6 <ip_interface_accept+0xee>
   18a1c:	e76e      	b.n	188fc <ip_interface_accept+0x44>
   18a1e:	f8db 0000 	ldr.w	r0, [fp]
   18a22:	b108      	cbz	r0, 18a28 <ip_interface_accept+0x170>
   18a24:	f7ff f922 	bl	17c6c <rpc_ip_client_data_free>
   18a28:	ea4f 4919 	mov.w	r9, r9, lsr #16
   18a2c:	4658      	mov	r0, fp
   18a2e:	ea4f 4909 	mov.w	r9, r9, lsl #16
   18a32:	f7ff f913 	bl	17c5c <rpc_ip_client_message_free>
   18a36:	f049 0307 	orr.w	r3, r9, #7
   18a3a:	6023      	str	r3, [r4, #0]
   18a3c:	e76f      	b.n	1891e <ip_interface_accept+0x66>
   18a3e:	4630      	mov	r0, r6
   18a40:	f004 ff44 	bl	1d8cc <interface_socket_from_handle_get>
   18a44:	b130      	cbz	r0, 18a54 <ip_interface_accept+0x19c>
   18a46:	f8d0 9004 	ldr.w	r9, [r0, #4]
   18a4a:	f1b9 0f00 	cmp.w	r9, #0
   18a4e:	d001      	beq.n	18a54 <ip_interface_accept+0x19c>
   18a50:	6045      	str	r5, [r0, #4]
   18a52:	e772      	b.n	1893a <ip_interface_accept+0x82>
   18a54:	6823      	ldr	r3, [r4, #0]
   18a56:	03d9      	lsls	r1, r3, #15
   18a58:	f53f af73 	bmi.w	18942 <ip_interface_accept+0x8a>
   18a5c:	4d35      	ldr	r5, [pc, #212]	; (18b34 <ip_interface_accept+0x27c>)
   18a5e:	9903      	ldr	r1, [sp, #12]
   18a60:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   18a64:	699b      	ldr	r3, [r3, #24]
   18a66:	618b      	str	r3, [r1, #24]
   18a68:	b147      	cbz	r7, 18a7c <ip_interface_accept+0x1c4>
   18a6a:	68cb      	ldr	r3, [r1, #12]
   18a6c:	2b0a      	cmp	r3, #10
   18a6e:	d028      	beq.n	18ac2 <ip_interface_accept+0x20a>
   18a70:	2b02      	cmp	r3, #2
   18a72:	d103      	bne.n	18a7c <ip_interface_accept+0x1c4>
   18a74:	f8d8 2000 	ldr.w	r2, [r8]
   18a78:	2a10      	cmp	r2, #16
   18a7a:	d036      	beq.n	18aea <ip_interface_accept+0x232>
   18a7c:	680a      	ldr	r2, [r1, #0]
   18a7e:	482e      	ldr	r0, [pc, #184]	; (18b38 <ip_interface_accept+0x280>)
   18a80:	4002      	ands	r2, r0
   18a82:	f042 0205 	orr.w	r2, r2, #5
   18a86:	600a      	str	r2, [r1, #0]
   18a88:	9a03      	ldr	r2, [sp, #12]
   18a8a:	6811      	ldr	r1, [r2, #0]
   18a8c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   18a90:	6011      	str	r1, [r2, #0]
   18a92:	6811      	ldr	r1, [r2, #0]
   18a94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18a98:	6011      	str	r1, [r2, #0]
   18a9a:	6823      	ldr	r3, [r4, #0]
   18a9c:	4003      	ands	r3, r0
   18a9e:	f043 0307 	orr.w	r3, r3, #7
   18aa2:	6023      	str	r3, [r4, #0]
   18aa4:	6823      	ldr	r3, [r4, #0]
   18aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   18aaa:	6023      	str	r3, [r4, #0]
   18aac:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   18ab0:	f7ff f8d4 	bl	17c5c <rpc_ip_client_message_free>
   18ab4:	2300      	movs	r3, #0
   18ab6:	4648      	mov	r0, r9
   18ab8:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   18abc:	b007      	add	sp, #28
   18abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ac2:	f8d8 2000 	ldr.w	r2, [r8]
   18ac6:	2a24      	cmp	r2, #36	; 0x24
   18ac8:	d1d8      	bne.n	18a7c <ip_interface_accept+0x1c4>
   18aca:	703a      	strb	r2, [r7, #0]
   18acc:	2210      	movs	r2, #16
   18ace:	607b      	str	r3, [r7, #4]
   18ad0:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   18ad4:	f107 0010 	add.w	r0, r7, #16
   18ad8:	8b9b      	ldrh	r3, [r3, #28]
   18ada:	813b      	strh	r3, [r7, #8]
   18adc:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   18ae0:	3120      	adds	r1, #32
   18ae2:	f00e ff30 	bl	27946 <memcpy>
   18ae6:	9903      	ldr	r1, [sp, #12]
   18ae8:	e7c8      	b.n	18a7c <ip_interface_accept+0x1c4>
   18aea:	703a      	strb	r2, [r7, #0]
   18aec:	607b      	str	r3, [r7, #4]
   18aee:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   18af2:	f107 000c 	add.w	r0, r7, #12
   18af6:	8b9b      	ldrh	r3, [r3, #28]
   18af8:	2204      	movs	r2, #4
   18afa:	e7ee      	b.n	18ada <ip_interface_accept+0x222>
   18afc:	4630      	mov	r0, r6
   18afe:	f004 fee5 	bl	1d8cc <interface_socket_from_handle_get>
   18b02:	b138      	cbz	r0, 18b14 <ip_interface_accept+0x25c>
   18b04:	f8d0 9004 	ldr.w	r9, [r0, #4]
   18b08:	f1b9 0f00 	cmp.w	r9, #0
   18b0c:	d002      	beq.n	18b14 <ip_interface_accept+0x25c>
   18b0e:	f8c0 a004 	str.w	sl, [r0, #4]
   18b12:	e766      	b.n	189e2 <ip_interface_accept+0x12a>
   18b14:	6823      	ldr	r3, [r4, #0]
   18b16:	9a01      	ldr	r2, [sp, #4]
   18b18:	46a9      	mov	r9, r5
   18b1a:	4313      	orrs	r3, r2
   18b1c:	6023      	str	r3, [r4, #0]
   18b1e:	e79d      	b.n	18a5c <ip_interface_accept+0x1a4>
   18b20:	4605      	mov	r5, r0
   18b22:	f04f 0909 	mov.w	r9, #9
   18b26:	e6e9      	b.n	188fc <ip_interface_accept+0x44>
   18b28:	f04f 090c 	mov.w	r9, #12
   18b2c:	e6eb      	b.n	18906 <ip_interface_accept+0x4e>
   18b2e:	bf00      	nop
   18b30:	00017c7d 	.word	0x00017c7d
   18b34:	200232e0 	.word	0x200232e0
   18b38:	ffff0000 	.word	0xffff0000

00018b3c <ip_interface_setopt>:
   18b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b40:	2901      	cmp	r1, #1
   18b42:	b086      	sub	sp, #24
   18b44:	f040 809d 	bne.w	18c82 <ip_interface_setopt+0x146>
   18b48:	460e      	mov	r6, r1
   18b4a:	4690      	mov	r8, r2
   18b4c:	461d      	mov	r5, r3
   18b4e:	4607      	mov	r7, r0
   18b50:	f004 febc 	bl	1d8cc <interface_socket_from_handle_get>
   18b54:	4604      	mov	r4, r0
   18b56:	2800      	cmp	r0, #0
   18b58:	f000 80a6 	beq.w	18ca8 <ip_interface_setopt+0x16c>
   18b5c:	f1b8 0f19 	cmp.w	r8, #25
   18b60:	d16f      	bne.n	18c42 <ip_interface_setopt+0x106>
   18b62:	2d00      	cmp	r5, #0
   18b64:	f000 8093 	beq.w	18c8e <ip_interface_setopt+0x152>
   18b68:	4628      	mov	r0, r5
   18b6a:	f7f4 f9e5 	bl	cf38 <strlen>
   18b6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18b70:	4298      	cmp	r0, r3
   18b72:	f040 808c 	bne.w	18c8e <ip_interface_setopt+0x152>
   18b76:	6823      	ldr	r3, [r4, #0]
   18b78:	b29b      	uxth	r3, r3
   18b7a:	2b02      	cmp	r3, #2
   18b7c:	d174      	bne.n	18c68 <ip_interface_setopt+0x12c>
   18b7e:	4629      	mov	r1, r5
   18b80:	68e0      	ldr	r0, [r4, #12]
   18b82:	f002 fbd9 	bl	1b338 <pdn_interface_pdn_id_get>
   18b86:	9003      	str	r0, [sp, #12]
   18b88:	3001      	adds	r0, #1
   18b8a:	bf08      	it	eq
   18b8c:	2516      	moveq	r5, #22
   18b8e:	d04f      	beq.n	18c30 <ip_interface_setopt+0xf4>
   18b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18b94:	9304      	str	r3, [sp, #16]
   18b96:	6823      	ldr	r3, [r4, #0]
   18b98:	025b      	lsls	r3, r3, #9
   18b9a:	d448      	bmi.n	18c2e <ip_interface_setopt+0xf2>
   18b9c:	6823      	ldr	r3, [r4, #0]
   18b9e:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   18ba2:	d144      	bne.n	18c2e <ip_interface_setopt+0xf2>
   18ba4:	6826      	ldr	r6, [r4, #0]
   18ba6:	6822      	ldr	r2, [r4, #0]
   18ba8:	a806      	add	r0, sp, #24
   18baa:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   18bae:	6022      	str	r2, [r4, #0]
   18bb0:	2104      	movs	r1, #4
   18bb2:	f840 3d04 	str.w	r3, [r0, #-4]!
   18bb6:	f8d4 8018 	ldr.w	r8, [r4, #24]
   18bba:	f7ff f825 	bl	17c08 <rpc_ip_client_request_alloc>
   18bbe:	2800      	cmp	r0, #0
   18bc0:	d14c      	bne.n	18c5c <ip_interface_setopt+0x120>
   18bc2:	f247 0203 	movw	r2, #28675	; 0x7003
   18bc6:	2300      	movs	r3, #0
   18bc8:	2108      	movs	r1, #8
   18bca:	9d05      	ldr	r5, [sp, #20]
   18bcc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   18bd0:	60ea      	str	r2, [r5, #12]
   18bd2:	f8c5 8010 	str.w	r8, [r5, #16]
   18bd6:	7229      	strb	r1, [r5, #8]
   18bd8:	726b      	strb	r3, [r5, #9]
   18bda:	72ab      	strb	r3, [r5, #10]
   18bdc:	72eb      	strb	r3, [r5, #11]
   18bde:	f04f 0c08 	mov.w	ip, #8
   18be2:	2300      	movs	r3, #0
   18be4:	2010      	movs	r0, #16
   18be6:	2130      	movs	r1, #48	; 0x30
   18be8:	68aa      	ldr	r2, [r5, #8]
   18bea:	756b      	strb	r3, [r5, #21]
   18bec:	4462      	add	r2, ip
   18bee:	60aa      	str	r2, [r5, #8]
   18bf0:	75ab      	strb	r3, [r5, #22]
   18bf2:	75eb      	strb	r3, [r5, #23]
   18bf4:	76ab      	strb	r3, [r5, #26]
   18bf6:	76eb      	strb	r3, [r5, #27]
   18bf8:	f885 c014 	strb.w	ip, [r5, #20]
   18bfc:	7628      	strb	r0, [r5, #24]
   18bfe:	7669      	strb	r1, [r5, #25]
   18c00:	2204      	movs	r2, #4
   18c02:	a903      	add	r1, sp, #12
   18c04:	6828      	ldr	r0, [r5, #0]
   18c06:	f00e fe9e 	bl	27946 <memcpy>
   18c0a:	f247 0103 	movw	r1, #28675	; 0x7003
   18c0e:	4628      	mov	r0, r5
   18c10:	f7ff f80e 	bl	17c30 <rpc_ip_client_request_send>
   18c14:	4680      	mov	r8, r0
   18c16:	bb48      	cbnz	r0, 18c6c <ip_interface_setopt+0x130>
   18c18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   18c1c:	ab04      	add	r3, sp, #16
   18c1e:	4611      	mov	r1, r2
   18c20:	4638      	mov	r0, r7
   18c22:	f004 fdd3 	bl	1d7cc <interface_socket_wait>
   18c26:	4605      	mov	r5, r0
   18c28:	b398      	cbz	r0, 18c92 <ip_interface_setopt+0x156>
   18c2a:	6026      	str	r6, [r4, #0]
   18c2c:	e000      	b.n	18c30 <ip_interface_setopt+0xf4>
   18c2e:	2523      	movs	r5, #35	; 0x23
   18c30:	4628      	mov	r0, r5
   18c32:	f7fb f82d 	bl	13c90 <bsd_os_errno_set>
   18c36:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18c3a:	4628      	mov	r0, r5
   18c3c:	b006      	add	sp, #24
   18c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18c44:	4642      	mov	r2, r8
   18c46:	9300      	str	r3, [sp, #0]
   18c48:	4631      	mov	r1, r6
   18c4a:	462b      	mov	r3, r5
   18c4c:	4638      	mov	r0, r7
   18c4e:	f004 fe65 	bl	1d91c <interface_socket_setopt>
   18c52:	4605      	mov	r5, r0
   18c54:	4628      	mov	r0, r5
   18c56:	b006      	add	sp, #24
   18c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18c5c:	9d05      	ldr	r5, [sp, #20]
   18c5e:	2d00      	cmp	r5, #0
   18c60:	d1bd      	bne.n	18bde <ip_interface_setopt+0xa2>
   18c62:	6026      	str	r6, [r4, #0]
   18c64:	250c      	movs	r5, #12
   18c66:	e7e3      	b.n	18c30 <ip_interface_setopt+0xf4>
   18c68:	2509      	movs	r5, #9
   18c6a:	e7e1      	b.n	18c30 <ip_interface_setopt+0xf4>
   18c6c:	6828      	ldr	r0, [r5, #0]
   18c6e:	b108      	cbz	r0, 18c74 <ip_interface_setopt+0x138>
   18c70:	f7fe fffc 	bl	17c6c <rpc_ip_client_data_free>
   18c74:	4628      	mov	r0, r5
   18c76:	f7fe fff1 	bl	17c5c <rpc_ip_client_message_free>
   18c7a:	2523      	movs	r5, #35	; 0x23
   18c7c:	6026      	str	r6, [r4, #0]
   18c7e:	6026      	str	r6, [r4, #0]
   18c80:	e7d6      	b.n	18c30 <ip_interface_setopt+0xf4>
   18c82:	202a      	movs	r0, #42	; 0x2a
   18c84:	f7fb f804 	bl	13c90 <bsd_os_errno_set>
   18c88:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18c8c:	e7d5      	b.n	18c3a <ip_interface_setopt+0xfe>
   18c8e:	250e      	movs	r5, #14
   18c90:	e7ce      	b.n	18c30 <ip_interface_setopt+0xf4>
   18c92:	4638      	mov	r0, r7
   18c94:	f004 fe1a 	bl	1d8cc <interface_socket_from_handle_get>
   18c98:	b120      	cbz	r0, 18ca4 <ip_interface_setopt+0x168>
   18c9a:	6845      	ldr	r5, [r0, #4]
   18c9c:	b115      	cbz	r5, 18ca4 <ip_interface_setopt+0x168>
   18c9e:	f8c0 8004 	str.w	r8, [r0, #4]
   18ca2:	e7c2      	b.n	18c2a <ip_interface_setopt+0xee>
   18ca4:	6026      	str	r6, [r4, #0]
   18ca6:	e7c8      	b.n	18c3a <ip_interface_setopt+0xfe>
   18ca8:	2009      	movs	r0, #9
   18caa:	f7fa fff1 	bl	13c90 <bsd_os_errno_set>
   18cae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18cb2:	e7c2      	b.n	18c3a <ip_interface_setopt+0xfe>

00018cb4 <ip_interface_getopt>:
   18cb4:	f004 be78 	b.w	1d9a8 <interface_socket_getopt>

00018cb8 <ip_interface_getaddrinfo>:
   18cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cbc:	f04f 0c00 	mov.w	ip, #0
   18cc0:	2401      	movs	r4, #1
   18cc2:	4e72      	ldr	r6, [pc, #456]	; (18e8c <ip_interface_getaddrinfo+0x1d4>)
   18cc4:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 18e98 <ip_interface_getaddrinfo+0x1e0>
   18cc8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 18e9c <ip_interface_getaddrinfo+0x1e4>
   18ccc:	b085      	sub	sp, #20
   18cce:	4607      	mov	r7, r0
   18cd0:	4615      	mov	r5, r2
   18cd2:	9301      	str	r3, [sp, #4]
   18cd4:	f8a6 c000 	strh.w	ip, [r6]
   18cd8:	f8ca 4000 	str.w	r4, [sl]
   18cdc:	f8c9 4000 	str.w	r4, [r9]
   18ce0:	b171      	cbz	r1, 18d00 <ip_interface_getaddrinfo+0x48>
   18ce2:	4608      	mov	r0, r1
   18ce4:	220a      	movs	r2, #10
   18ce6:	4661      	mov	r1, ip
   18ce8:	f007 f99e 	bl	20028 <strtol>
   18cec:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   18cf0:	1e42      	subs	r2, r0, #1
   18cf2:	429a      	cmp	r2, r3
   18cf4:	f200 8083 	bhi.w	18dfe <ip_interface_getaddrinfo+0x146>
   18cf8:	0203      	lsls	r3, r0, #8
   18cfa:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   18cfe:	8030      	strh	r0, [r6, #0]
   18d00:	f8df 819c 	ldr.w	r8, [pc, #412]	; 18ea0 <ip_interface_getaddrinfo+0x1e8>
   18d04:	f8d8 3000 	ldr.w	r3, [r8]
   18d08:	2b00      	cmp	r3, #0
   18d0a:	d174      	bne.n	18df6 <ip_interface_getaddrinfo+0x13e>
   18d0c:	4a60      	ldr	r2, [pc, #384]	; (18e90 <ip_interface_getaddrinfo+0x1d8>)
   18d0e:	6013      	str	r3, [r2, #0]
   18d10:	4a60      	ldr	r2, [pc, #384]	; (18e94 <ip_interface_getaddrinfo+0x1dc>)
   18d12:	6013      	str	r3, [r2, #0]
   18d14:	2f00      	cmp	r7, #0
   18d16:	d062      	beq.n	18dde <ip_interface_getaddrinfo+0x126>
   18d18:	4638      	mov	r0, r7
   18d1a:	f7f4 f90d 	bl	cf38 <strlen>
   18d1e:	4683      	mov	fp, r0
   18d20:	b125      	cbz	r5, 18d2c <ip_interface_getaddrinfo+0x74>
   18d22:	69ea      	ldr	r2, [r5, #28]
   18d24:	b112      	cbz	r2, 18d2c <ip_interface_getaddrinfo+0x74>
   18d26:	6851      	ldr	r1, [r2, #4]
   18d28:	2966      	cmp	r1, #102	; 0x66
   18d2a:	d06c      	beq.n	18e06 <ip_interface_getaddrinfo+0x14e>
   18d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18d30:	2100      	movs	r1, #0
   18d32:	ae04      	add	r6, sp, #16
   18d34:	f846 1d04 	str.w	r1, [r6, #-4]!
   18d38:	4630      	mov	r0, r6
   18d3a:	4659      	mov	r1, fp
   18d3c:	9200      	str	r2, [sp, #0]
   18d3e:	f7fe ff63 	bl	17c08 <rpc_ip_client_request_alloc>
   18d42:	9a00      	ldr	r2, [sp, #0]
   18d44:	2800      	cmp	r0, #0
   18d46:	d14c      	bne.n	18de2 <ip_interface_getaddrinfo+0x12a>
   18d48:	f247 010d 	movw	r1, #28685	; 0x700d
   18d4c:	f04f 0c08 	mov.w	ip, #8
   18d50:	9c03      	ldr	r4, [sp, #12]
   18d52:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   18d56:	60e1      	str	r1, [r4, #12]
   18d58:	6122      	str	r2, [r4, #16]
   18d5a:	7260      	strb	r0, [r4, #9]
   18d5c:	72a0      	strb	r0, [r4, #10]
   18d5e:	72e0      	strb	r0, [r4, #11]
   18d60:	f884 c008 	strb.w	ip, [r4, #8]
   18d64:	2d00      	cmp	r5, #0
   18d66:	d076      	beq.n	18e56 <ip_interface_getaddrinfo+0x19e>
   18d68:	686a      	ldr	r2, [r5, #4]
   18d6a:	f022 0108 	bic.w	r1, r2, #8
   18d6e:	2902      	cmp	r1, #2
   18d70:	d05c      	beq.n	18e2c <ip_interface_getaddrinfo+0x174>
   18d72:	2a05      	cmp	r2, #5
   18d74:	d178      	bne.n	18e68 <ip_interface_getaddrinfo+0x1b0>
   18d76:	68a9      	ldr	r1, [r5, #8]
   18d78:	2902      	cmp	r1, #2
   18d7a:	f8c9 1000 	str.w	r1, [r9]
   18d7e:	d061      	beq.n	18e44 <ip_interface_getaddrinfo+0x18c>
   18d80:	61a2      	str	r2, [r4, #24]
   18d82:	68ea      	ldr	r2, [r5, #12]
   18d84:	6222      	str	r2, [r4, #32]
   18d86:	68aa      	ldr	r2, [r5, #8]
   18d88:	61e2      	str	r2, [r4, #28]
   18d8a:	682a      	ldr	r2, [r5, #0]
   18d8c:	6162      	str	r2, [r4, #20]
   18d8e:	68a2      	ldr	r2, [r4, #8]
   18d90:	3210      	adds	r2, #16
   18d92:	60a2      	str	r2, [r4, #8]
   18d94:	b12f      	cbz	r7, 18da2 <ip_interface_getaddrinfo+0xea>
   18d96:	6820      	ldr	r0, [r4, #0]
   18d98:	b118      	cbz	r0, 18da2 <ip_interface_getaddrinfo+0xea>
   18d9a:	465a      	mov	r2, fp
   18d9c:	4639      	mov	r1, r7
   18d9e:	f00e fdd2 	bl	27946 <memcpy>
   18da2:	2301      	movs	r3, #1
   18da4:	f247 010d 	movw	r1, #28685	; 0x700d
   18da8:	4620      	mov	r0, r4
   18daa:	f8c8 3000 	str.w	r3, [r8]
   18dae:	f7fe ff3f 	bl	17c30 <rpc_ip_client_request_send>
   18db2:	2800      	cmp	r0, #0
   18db4:	d156      	bne.n	18e64 <ip_interface_getaddrinfo+0x1ac>
   18db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18dba:	9303      	str	r3, [sp, #12]
   18dbc:	4631      	mov	r1, r6
   18dbe:	4620      	mov	r0, r4
   18dc0:	f7fa feb0 	bl	13b24 <bsd_os_timedwait>
   18dc4:	f8d8 3000 	ldr.w	r3, [r8]
   18dc8:	2b01      	cmp	r3, #1
   18dca:	d0f7      	beq.n	18dbc <ip_interface_getaddrinfo+0x104>
   18dcc:	4b31      	ldr	r3, [pc, #196]	; (18e94 <ip_interface_getaddrinfo+0x1dc>)
   18dce:	6818      	ldr	r0, [r3, #0]
   18dd0:	2800      	cmp	r0, #0
   18dd2:	d13b      	bne.n	18e4c <ip_interface_getaddrinfo+0x194>
   18dd4:	4b2e      	ldr	r3, [pc, #184]	; (18e90 <ip_interface_getaddrinfo+0x1d8>)
   18dd6:	9a01      	ldr	r2, [sp, #4]
   18dd8:	681b      	ldr	r3, [r3, #0]
   18dda:	6013      	str	r3, [r2, #0]
   18ddc:	e00c      	b.n	18df8 <ip_interface_getaddrinfo+0x140>
   18dde:	46bb      	mov	fp, r7
   18de0:	e79e      	b.n	18d20 <ip_interface_getaddrinfo+0x68>
   18de2:	9c03      	ldr	r4, [sp, #12]
   18de4:	2c00      	cmp	r4, #0
   18de6:	d1bd      	bne.n	18d64 <ip_interface_getaddrinfo+0xac>
   18de8:	200c      	movs	r0, #12
   18dea:	2300      	movs	r3, #0
   18dec:	f8c8 3000 	str.w	r3, [r8]
   18df0:	b005      	add	sp, #20
   18df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18df6:	2073      	movs	r0, #115	; 0x73
   18df8:	b005      	add	sp, #20
   18dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dfe:	2016      	movs	r0, #22
   18e00:	b005      	add	sp, #20
   18e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e06:	6891      	ldr	r1, [r2, #8]
   18e08:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   18e0c:	d18e      	bne.n	18d2c <ip_interface_getaddrinfo+0x74>
   18e0e:	f240 2102 	movw	r1, #514	; 0x202
   18e12:	68d0      	ldr	r0, [r2, #12]
   18e14:	4288      	cmp	r0, r1
   18e16:	d189      	bne.n	18d2c <ip_interface_getaddrinfo+0x74>
   18e18:	6991      	ldr	r1, [r2, #24]
   18e1a:	2900      	cmp	r1, #0
   18e1c:	d086      	beq.n	18d2c <ip_interface_getaddrinfo+0x74>
   18e1e:	6868      	ldr	r0, [r5, #4]
   18e20:	f002 fa8a 	bl	1b338 <pdn_interface_pdn_id_get>
   18e24:	1c43      	adds	r3, r0, #1
   18e26:	d081      	beq.n	18d2c <ip_interface_getaddrinfo+0x74>
   18e28:	4602      	mov	r2, r0
   18e2a:	e781      	b.n	18d30 <ip_interface_getaddrinfo+0x78>
   18e2c:	68a9      	ldr	r1, [r5, #8]
   18e2e:	2902      	cmp	r1, #2
   18e30:	f8c9 1000 	str.w	r1, [r9]
   18e34:	d006      	beq.n	18e44 <ip_interface_getaddrinfo+0x18c>
   18e36:	2a05      	cmp	r2, #5
   18e38:	d0a2      	beq.n	18d80 <ip_interface_getaddrinfo+0xc8>
   18e3a:	2a0a      	cmp	r2, #10
   18e3c:	bf14      	ite	ne
   18e3e:	2201      	movne	r2, #1
   18e40:	2202      	moveq	r2, #2
   18e42:	e79d      	b.n	18d80 <ip_interface_getaddrinfo+0xc8>
   18e44:	2102      	movs	r1, #2
   18e46:	f8ca 1000 	str.w	r1, [sl]
   18e4a:	e7f4      	b.n	18e36 <ip_interface_getaddrinfo+0x17e>
   18e4c:	4b11      	ldr	r3, [pc, #68]	; (18e94 <ip_interface_getaddrinfo+0x1dc>)
   18e4e:	6818      	ldr	r0, [r3, #0]
   18e50:	2800      	cmp	r0, #0
   18e52:	d0d1      	beq.n	18df8 <ip_interface_getaddrinfo+0x140>
   18e54:	e7c9      	b.n	18dea <ip_interface_getaddrinfo+0x132>
   18e56:	4629      	mov	r1, r5
   18e58:	2210      	movs	r2, #16
   18e5a:	f104 0014 	add.w	r0, r4, #20
   18e5e:	f00e fdac 	bl	279ba <memset>
   18e62:	e794      	b.n	18d8e <ip_interface_getaddrinfo+0xd6>
   18e64:	2023      	movs	r0, #35	; 0x23
   18e66:	e7c0      	b.n	18dea <ip_interface_getaddrinfo+0x132>
   18e68:	202f      	movs	r0, #47	; 0x2f
   18e6a:	f7fa ff11 	bl	13c90 <bsd_os_errno_set>
   18e6e:	68a2      	ldr	r2, [r4, #8]
   18e70:	3210      	adds	r2, #16
   18e72:	60a2      	str	r2, [r4, #8]
   18e74:	b917      	cbnz	r7, 18e7c <ip_interface_getaddrinfo+0x1c4>
   18e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e7a:	e7b6      	b.n	18dea <ip_interface_getaddrinfo+0x132>
   18e7c:	6820      	ldr	r0, [r4, #0]
   18e7e:	2800      	cmp	r0, #0
   18e80:	d0f9      	beq.n	18e76 <ip_interface_getaddrinfo+0x1be>
   18e82:	465a      	mov	r2, fp
   18e84:	4639      	mov	r1, r7
   18e86:	f00e fd5e 	bl	27946 <memcpy>
   18e8a:	e7f4      	b.n	18e76 <ip_interface_getaddrinfo+0x1be>
   18e8c:	200281ac 	.word	0x200281ac
   18e90:	200232dc 	.word	0x200232dc
   18e94:	200232d4 	.word	0x200232d4
   18e98:	200232cc 	.word	0x200232cc
   18e9c:	200232d0 	.word	0x200232d0
   18ea0:	200232d8 	.word	0x200232d8

00018ea4 <ip_interface_freeaddrinfo>:
   18ea4:	b538      	push	{r3, r4, r5, lr}
   18ea6:	4d0b      	ldr	r5, [pc, #44]	; (18ed4 <ip_interface_freeaddrinfo+0x30>)
   18ea8:	682b      	ldr	r3, [r5, #0]
   18eaa:	2b02      	cmp	r3, #2
   18eac:	d000      	beq.n	18eb0 <ip_interface_freeaddrinfo+0xc>
   18eae:	bd38      	pop	{r3, r4, r5, pc}
   18eb0:	b150      	cbz	r0, 18ec8 <ip_interface_freeaddrinfo+0x24>
   18eb2:	4604      	mov	r4, r0
   18eb4:	6940      	ldr	r0, [r0, #20]
   18eb6:	f004 f8af 	bl	1d018 <nrf_free>
   18eba:	69a0      	ldr	r0, [r4, #24]
   18ebc:	b108      	cbz	r0, 18ec2 <ip_interface_freeaddrinfo+0x1e>
   18ebe:	f004 f8ab 	bl	1d018 <nrf_free>
   18ec2:	4620      	mov	r0, r4
   18ec4:	f004 f8a8 	bl	1d018 <nrf_free>
   18ec8:	2300      	movs	r3, #0
   18eca:	4a03      	ldr	r2, [pc, #12]	; (18ed8 <ip_interface_freeaddrinfo+0x34>)
   18ecc:	602b      	str	r3, [r5, #0]
   18ece:	6013      	str	r3, [r2, #0]
   18ed0:	bd38      	pop	{r3, r4, r5, pc}
   18ed2:	bf00      	nop
   18ed4:	200232d8 	.word	0x200232d8
   18ed8:	200232d4 	.word	0x200232d4

00018edc <rpc_ip_event_handler>:
   18edc:	f248 030d 	movw	r3, #32781	; 0x800d
   18ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ee4:	4299      	cmp	r1, r3
   18ee6:	b089      	sub	sp, #36	; 0x24
   18ee8:	4604      	mov	r4, r0
   18eea:	d062      	beq.n	18fb2 <rpc_ip_event_handler+0xd6>
   18eec:	f248 030f 	movw	r3, #32783	; 0x800f
   18ef0:	4299      	cmp	r1, r3
   18ef2:	460d      	mov	r5, r1
   18ef4:	d04b      	beq.n	18f8e <rpc_ip_event_handler+0xb2>
   18ef6:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   18efa:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   18efe:	68c0      	ldr	r0, [r0, #12]
   18f00:	d07b      	beq.n	18ffa <rpc_ip_event_handler+0x11e>
   18f02:	0c07      	lsrs	r7, r0, #16
   18f04:	4638      	mov	r0, r7
   18f06:	f004 fce1 	bl	1d8cc <interface_socket_from_handle_get>
   18f0a:	4606      	mov	r6, r0
   18f0c:	2800      	cmp	r0, #0
   18f0e:	d05f      	beq.n	18fd0 <rpc_ip_event_handler+0xf4>
   18f10:	4601      	mov	r1, r0
   18f12:	462b      	mov	r3, r5
   18f14:	4622      	mov	r2, r4
   18f16:	4638      	mov	r0, r7
   18f18:	f7fe fde4 	bl	17ae4 <tls_rpc_ip_event_handler>
   18f1c:	2800      	cmp	r0, #0
   18f1e:	d053      	beq.n	18fc8 <rpc_ip_event_handler+0xec>
   18f20:	f248 0307 	movw	r3, #32775	; 0x8007
   18f24:	429d      	cmp	r5, r3
   18f26:	d97d      	bls.n	19024 <rpc_ip_event_handler+0x148>
   18f28:	f248 030c 	movw	r3, #32780	; 0x800c
   18f2c:	429d      	cmp	r5, r3
   18f2e:	d068      	beq.n	19002 <rpc_ip_event_handler+0x126>
   18f30:	f240 8137 	bls.w	191a2 <rpc_ip_event_handler+0x2c6>
   18f34:	f249 0302 	movw	r3, #36866	; 0x9002
   18f38:	429d      	cmp	r5, r3
   18f3a:	f000 819f 	beq.w	1927c <rpc_ip_event_handler+0x3a0>
   18f3e:	f249 0303 	movw	r3, #36867	; 0x9003
   18f42:	429d      	cmp	r5, r3
   18f44:	f000 81b2 	beq.w	192ac <rpc_ip_event_handler+0x3d0>
   18f48:	f249 0301 	movw	r3, #36865	; 0x9001
   18f4c:	429d      	cmp	r5, r3
   18f4e:	d13f      	bne.n	18fd0 <rpc_ip_event_handler+0xf4>
   18f50:	6835      	ldr	r5, [r6, #0]
   18f52:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   18f56:	f000 81d3 	beq.w	19300 <rpc_ip_event_handler+0x424>
   18f5a:	68a3      	ldr	r3, [r4, #8]
   18f5c:	2b04      	cmp	r3, #4
   18f5e:	f200 8207 	bhi.w	19370 <rpc_ip_event_handler+0x494>
   18f62:	2500      	movs	r5, #0
   18f64:	462f      	mov	r7, r5
   18f66:	6821      	ldr	r1, [r4, #0]
   18f68:	6862      	ldr	r2, [r4, #4]
   18f6a:	e9cd 7506 	strd	r7, r5, [sp, #24]
   18f6e:	e9cd 1204 	strd	r1, r2, [sp, #16]
   18f72:	69f0      	ldr	r0, [r6, #28]
   18f74:	a904      	add	r1, sp, #16
   18f76:	6803      	ldr	r3, [r0, #0]
   18f78:	685b      	ldr	r3, [r3, #4]
   18f7a:	4798      	blx	r3
   18f7c:	3001      	adds	r0, #1
   18f7e:	f000 81de 	beq.w	1933e <rpc_ip_event_handler+0x462>
   18f82:	6833      	ldr	r3, [r6, #0]
   18f84:	2000      	movs	r0, #0
   18f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   18f8a:	6033      	str	r3, [r6, #0]
   18f8c:	e00e      	b.n	18fac <rpc_ip_event_handler+0xd0>
   18f8e:	6943      	ldr	r3, [r0, #20]
   18f90:	2001      	movs	r0, #1
   18f92:	2b10      	cmp	r3, #16
   18f94:	49bc      	ldr	r1, [pc, #752]	; (19288 <rpc_ip_event_handler+0x3ac>)
   18f96:	bf88      	it	hi
   18f98:	222d      	movhi	r2, #45	; 0x2d
   18f9a:	7008      	strb	r0, [r1, #0]
   18f9c:	f04f 0000 	mov.w	r0, #0
   18fa0:	bf9c      	itt	ls
   18fa2:	4aba      	ldrls	r2, [pc, #744]	; (1928c <rpc_ip_event_handler+0x3b0>)
   18fa4:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   18fa8:	4bb9      	ldr	r3, [pc, #740]	; (19290 <rpc_ip_event_handler+0x3b4>)
   18faa:	601a      	str	r2, [r3, #0]
   18fac:	b009      	add	sp, #36	; 0x24
   18fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fb2:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 192a4 <rpc_ip_event_handler+0x3c8>
   18fb6:	6807      	ldr	r7, [r0, #0]
   18fb8:	f8da 2000 	ldr.w	r2, [sl]
   18fbc:	2a01      	cmp	r2, #1
   18fbe:	d00b      	beq.n	18fd8 <rpc_ip_event_handler+0xfc>
   18fc0:	b117      	cbz	r7, 18fc8 <rpc_ip_event_handler+0xec>
   18fc2:	4638      	mov	r0, r7
   18fc4:	f7fe fe52 	bl	17c6c <rpc_ip_client_data_free>
   18fc8:	2000      	movs	r0, #0
   18fca:	b009      	add	sp, #36	; 0x24
   18fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fd0:	6820      	ldr	r0, [r4, #0]
   18fd2:	2800      	cmp	r0, #0
   18fd4:	d1f6      	bne.n	18fc4 <rpc_ip_event_handler+0xe8>
   18fd6:	e7f7      	b.n	18fc8 <rpc_ip_event_handler+0xec>
   18fd8:	6942      	ldr	r2, [r0, #20]
   18fda:	2a00      	cmp	r2, #0
   18fdc:	d046      	beq.n	1906c <rpc_ip_event_handler+0x190>
   18fde:	2a10      	cmp	r2, #16
   18fe0:	bf8e      	itee	hi
   18fe2:	222d      	movhi	r2, #45	; 0x2d
   18fe4:	49a9      	ldrls	r1, [pc, #676]	; (1928c <rpc_ip_event_handler+0x3b0>)
   18fe6:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   18fea:	49aa      	ldr	r1, [pc, #680]	; (19294 <rpc_ip_event_handler+0x3b8>)
   18fec:	600a      	str	r2, [r1, #0]
   18fee:	2202      	movs	r2, #2
   18ff0:	f8ca 2000 	str.w	r2, [sl]
   18ff4:	2f00      	cmp	r7, #0
   18ff6:	d1e4      	bne.n	18fc2 <rpc_ip_event_handler+0xe6>
   18ff8:	e7e6      	b.n	18fc8 <rpc_ip_event_handler+0xec>
   18ffa:	f004 fc15 	bl	1d828 <interface_from_internal_id_search>
   18ffe:	4607      	mov	r7, r0
   19000:	e780      	b.n	18f04 <rpc_ip_event_handler+0x28>
   19002:	6833      	ldr	r3, [r6, #0]
   19004:	b29b      	uxth	r3, r3
   19006:	2b08      	cmp	r3, #8
   19008:	d1de      	bne.n	18fc8 <rpc_ip_event_handler+0xec>
   1900a:	6963      	ldr	r3, [r4, #20]
   1900c:	2b00      	cmp	r3, #0
   1900e:	f000 8198 	beq.w	19342 <rpc_ip_event_handler+0x466>
   19012:	2b10      	cmp	r3, #16
   19014:	f200 8169 	bhi.w	192ea <rpc_ip_event_handler+0x40e>
   19018:	4a9c      	ldr	r2, [pc, #624]	; (1928c <rpc_ip_event_handler+0x3b0>)
   1901a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1901e:	6073      	str	r3, [r6, #4]
   19020:	2000      	movs	r0, #0
   19022:	e7c3      	b.n	18fac <rpc_ip_event_handler+0xd0>
   19024:	f248 0306 	movw	r3, #32774	; 0x8006
   19028:	429d      	cmp	r5, r3
   1902a:	f080 80fc 	bcs.w	19226 <rpc_ip_event_handler+0x34a>
   1902e:	f248 0302 	movw	r3, #32770	; 0x8002
   19032:	429d      	cmp	r5, r3
   19034:	f000 80df 	beq.w	191f6 <rpc_ip_event_handler+0x31a>
   19038:	f240 80cc 	bls.w	191d4 <rpc_ip_event_handler+0x2f8>
   1903c:	f248 0303 	movw	r3, #32771	; 0x8003
   19040:	429d      	cmp	r5, r3
   19042:	f000 810f 	beq.w	19264 <rpc_ip_event_handler+0x388>
   19046:	f248 0305 	movw	r3, #32773	; 0x8005
   1904a:	429d      	cmp	r5, r3
   1904c:	d1c0      	bne.n	18fd0 <rpc_ip_event_handler+0xf4>
   1904e:	6833      	ldr	r3, [r6, #0]
   19050:	b29b      	uxth	r3, r3
   19052:	2b03      	cmp	r3, #3
   19054:	d1b8      	bne.n	18fc8 <rpc_ip_event_handler+0xec>
   19056:	6963      	ldr	r3, [r4, #20]
   19058:	2b00      	cmp	r3, #0
   1905a:	d1da      	bne.n	19012 <rpc_ip_event_handler+0x136>
   1905c:	6833      	ldr	r3, [r6, #0]
   1905e:	2000      	movs	r0, #0
   19060:	0c1b      	lsrs	r3, r3, #16
   19062:	041b      	lsls	r3, r3, #16
   19064:	f043 0304 	orr.w	r3, r3, #4
   19068:	6033      	str	r3, [r6, #0]
   1906a:	e79f      	b.n	18fac <rpc_ip_event_handler+0xd0>
   1906c:	6985      	ldr	r5, [r0, #24]
   1906e:	016b      	lsls	r3, r5, #5
   19070:	4618      	mov	r0, r3
   19072:	9303      	str	r3, [sp, #12]
   19074:	f003 ffc6 	bl	1d004 <nrf_malloc>
   19078:	9002      	str	r0, [sp, #8]
   1907a:	2800      	cmp	r0, #0
   1907c:	f000 808a 	beq.w	19194 <rpc_ip_event_handler+0x2b8>
   19080:	00ee      	lsls	r6, r5, #3
   19082:	1970      	adds	r0, r6, r5
   19084:	0080      	lsls	r0, r0, #2
   19086:	f003 ffbd 	bl	1d004 <nrf_malloc>
   1908a:	2800      	cmp	r0, #0
   1908c:	f000 8084 	beq.w	19198 <rpc_ip_event_handler+0x2bc>
   19090:	2d00      	cmp	r5, #0
   19092:	f000 8084 	beq.w	1919e <rpc_ip_event_handler+0x2c2>
   19096:	2204      	movs	r2, #4
   19098:	3610      	adds	r6, #16
   1909a:	1983      	adds	r3, r0, r6
   1909c:	9301      	str	r3, [sp, #4]
   1909e:	9b02      	ldr	r3, [sp, #8]
   190a0:	f8df b204 	ldr.w	fp, [pc, #516]	; 192a8 <rpc_ip_event_handler+0x3cc>
   190a4:	f100 0810 	add.w	r8, r0, #16
   190a8:	f103 0520 	add.w	r5, r3, #32
   190ac:	58bb      	ldr	r3, [r7, r2]
   190ae:	18b9      	adds	r1, r7, r2
   190b0:	f845 3c20 	str.w	r3, [r5, #-32]
   190b4:	684b      	ldr	r3, [r1, #4]
   190b6:	f8db 0000 	ldr.w	r0, [fp]
   190ba:	2b02      	cmp	r3, #2
   190bc:	bf14      	ite	ne
   190be:	2602      	movne	r6, #2
   190c0:	260a      	moveq	r6, #10
   190c2:	4b75      	ldr	r3, [pc, #468]	; (19298 <rpc_ip_event_handler+0x3bc>)
   190c4:	e945 6007 	strd	r6, r0, [r5, #-28]
   190c8:	681b      	ldr	r3, [r3, #0]
   190ca:	f102 0614 	add.w	r6, r2, #20
   190ce:	f845 3c14 	str.w	r3, [r5, #-20]
   190d2:	8a08      	ldrh	r0, [r1, #16]
   190d4:	f1a8 0310 	sub.w	r3, r8, #16
   190d8:	f845 0c10 	str.w	r0, [r5, #-16]
   190dc:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   190e0:	f845 3c0c 	str.w	r3, [r5, #-12]
   190e4:	4b6d      	ldr	r3, [pc, #436]	; (1929c <rpc_ip_event_handler+0x3c0>)
   190e6:	2804      	cmp	r0, #4
   190e8:	eb07 0106 	add.w	r1, r7, r6
   190ec:	881b      	ldrh	r3, [r3, #0]
   190ee:	d042      	beq.n	19176 <rpc_ip_event_handler+0x29a>
   190f0:	220a      	movs	r2, #10
   190f2:	f848 2c0c 	str.w	r2, [r8, #-12]
   190f6:	f04f 0224 	mov.w	r2, #36	; 0x24
   190fa:	f828 3c08 	strh.w	r3, [r8, #-8]
   190fe:	f808 2c10 	strb.w	r2, [r8, #-16]
   19102:	f855 2c10 	ldr.w	r2, [r5, #-16]
   19106:	4640      	mov	r0, r8
   19108:	f00e fc1d 	bl	27946 <memcpy>
   1910c:	f855 3c10 	ldr.w	r3, [r5, #-16]
   19110:	f109 0001 	add.w	r0, r9, #1
   19114:	441e      	add	r6, r3
   19116:	f003 ff75 	bl	1d004 <nrf_malloc>
   1911a:	19b9      	adds	r1, r7, r6
   1911c:	eb09 0206 	add.w	r2, r9, r6
   19120:	f845 0c08 	str.w	r0, [r5, #-8]
   19124:	b1e8      	cbz	r0, 19162 <rpc_ip_event_handler+0x286>
   19126:	464a      	mov	r2, r9
   19128:	f00e fc0d 	bl	27946 <memcpy>
   1912c:	2100      	movs	r1, #0
   1912e:	f855 3c08 	ldr.w	r3, [r5, #-8]
   19132:	f108 0808 	add.w	r8, r8, #8
   19136:	f803 1009 	strb.w	r1, [r3, r9]
   1913a:	9b01      	ldr	r3, [sp, #4]
   1913c:	f845 5c04 	str.w	r5, [r5, #-4]
   19140:	4598      	cmp	r8, r3
   19142:	eb09 0206 	add.w	r2, r9, r6
   19146:	f105 0520 	add.w	r5, r5, #32
   1914a:	d1af      	bne.n	190ac <rpc_ip_event_handler+0x1d0>
   1914c:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   19150:	2100      	movs	r1, #0
   19152:	4403      	add	r3, r0
   19154:	f843 1c04 	str.w	r1, [r3, #-4]
   19158:	4603      	mov	r3, r0
   1915a:	4a51      	ldr	r2, [pc, #324]	; (192a0 <rpc_ip_event_handler+0x3c4>)
   1915c:	6827      	ldr	r7, [r4, #0]
   1915e:	6013      	str	r3, [r2, #0]
   19160:	e745      	b.n	18fee <rpc_ip_event_handler+0x112>
   19162:	9b01      	ldr	r3, [sp, #4]
   19164:	f108 0808 	add.w	r8, r8, #8
   19168:	4543      	cmp	r3, r8
   1916a:	f845 5c04 	str.w	r5, [r5, #-4]
   1916e:	f105 0520 	add.w	r5, r5, #32
   19172:	d19b      	bne.n	190ac <rpc_ip_event_handler+0x1d0>
   19174:	e7ea      	b.n	1914c <rpc_ip_event_handler+0x270>
   19176:	2210      	movs	r2, #16
   19178:	2002      	movs	r0, #2
   1917a:	f828 3c08 	strh.w	r3, [r8, #-8]
   1917e:	f848 0c0c 	str.w	r0, [r8, #-12]
   19182:	f808 2c10 	strb.w	r2, [r8, #-16]
   19186:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1918a:	f1a8 0004 	sub.w	r0, r8, #4
   1918e:	f00e fbda 	bl	27946 <memcpy>
   19192:	e7bb      	b.n	1910c <rpc_ip_event_handler+0x230>
   19194:	f003 ff40 	bl	1d018 <nrf_free>
   19198:	210c      	movs	r1, #12
   1919a:	4a3e      	ldr	r2, [pc, #248]	; (19294 <rpc_ip_event_handler+0x3b8>)
   1919c:	6011      	str	r1, [r2, #0]
   1919e:	9b02      	ldr	r3, [sp, #8]
   191a0:	e7db      	b.n	1915a <rpc_ip_event_handler+0x27e>
   191a2:	f248 0308 	movw	r3, #32776	; 0x8008
   191a6:	429d      	cmp	r5, r3
   191a8:	d04d      	beq.n	19246 <rpc_ip_event_handler+0x36a>
   191aa:	f248 0309 	movw	r3, #32777	; 0x8009
   191ae:	429d      	cmp	r5, r3
   191b0:	f47f af0e 	bne.w	18fd0 <rpc_ip_event_handler+0xf4>
   191b4:	6833      	ldr	r3, [r6, #0]
   191b6:	b29b      	uxth	r3, r3
   191b8:	2b0d      	cmp	r3, #13
   191ba:	f47f af05 	bne.w	18fc8 <rpc_ip_event_handler+0xec>
   191be:	6960      	ldr	r0, [r4, #20]
   191c0:	2800      	cmp	r0, #0
   191c2:	f000 80c9 	beq.w	19358 <rpc_ip_event_handler+0x47c>
   191c6:	2810      	cmp	r0, #16
   191c8:	f200 808f 	bhi.w	192ea <rpc_ip_event_handler+0x40e>
   191cc:	4b2f      	ldr	r3, [pc, #188]	; (1928c <rpc_ip_event_handler+0x3b0>)
   191ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   191d2:	e724      	b.n	1901e <rpc_ip_event_handler+0x142>
   191d4:	f248 0301 	movw	r3, #32769	; 0x8001
   191d8:	429d      	cmp	r5, r3
   191da:	f47f aef9 	bne.w	18fd0 <rpc_ip_event_handler+0xf4>
   191de:	6833      	ldr	r3, [r6, #0]
   191e0:	2b01      	cmp	r3, #1
   191e2:	f47f aef1 	bne.w	18fc8 <rpc_ip_event_handler+0xec>
   191e6:	6960      	ldr	r0, [r4, #20]
   191e8:	2800      	cmp	r0, #0
   191ea:	d1ec      	bne.n	191c6 <rpc_ip_event_handler+0x2ea>
   191ec:	2302      	movs	r3, #2
   191ee:	6033      	str	r3, [r6, #0]
   191f0:	69a3      	ldr	r3, [r4, #24]
   191f2:	61b3      	str	r3, [r6, #24]
   191f4:	e6da      	b.n	18fac <rpc_ip_event_handler+0xd0>
   191f6:	6833      	ldr	r3, [r6, #0]
   191f8:	0099      	lsls	r1, r3, #2
   191fa:	f57f aee5 	bpl.w	18fc8 <rpc_ip_event_handler+0xec>
   191fe:	6833      	ldr	r3, [r6, #0]
   19200:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   19204:	6033      	str	r3, [r6, #0]
   19206:	6960      	ldr	r0, [r4, #20]
   19208:	2800      	cmp	r0, #0
   1920a:	d07e      	beq.n	1930a <rpc_ip_event_handler+0x42e>
   1920c:	2810      	cmp	r0, #16
   1920e:	f200 8094 	bhi.w	1933a <rpc_ip_event_handler+0x45e>
   19212:	4b1e      	ldr	r3, [pc, #120]	; (1928c <rpc_ip_event_handler+0x3b0>)
   19214:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19218:	6073      	str	r3, [r6, #4]
   1921a:	6833      	ldr	r3, [r6, #0]
   1921c:	2000      	movs	r0, #0
   1921e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   19222:	6033      	str	r3, [r6, #0]
   19224:	e6c2      	b.n	18fac <rpc_ip_event_handler+0xd0>
   19226:	6833      	ldr	r3, [r6, #0]
   19228:	029a      	lsls	r2, r3, #10
   1922a:	f57f aecd 	bpl.w	18fc8 <rpc_ip_event_handler+0xec>
   1922e:	6963      	ldr	r3, [r4, #20]
   19230:	2b00      	cmp	r3, #0
   19232:	d079      	beq.n	19328 <rpc_ip_event_handler+0x44c>
   19234:	2b6b      	cmp	r3, #107	; 0x6b
   19236:	f000 8096 	beq.w	19366 <rpc_ip_event_handler+0x48a>
   1923a:	2b10      	cmp	r3, #16
   1923c:	d87d      	bhi.n	1933a <rpc_ip_event_handler+0x45e>
   1923e:	4a13      	ldr	r2, [pc, #76]	; (1928c <rpc_ip_event_handler+0x3b0>)
   19240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19244:	e7e8      	b.n	19218 <rpc_ip_event_handler+0x33c>
   19246:	6833      	ldr	r3, [r6, #0]
   19248:	b29b      	uxth	r3, r3
   1924a:	2b06      	cmp	r3, #6
   1924c:	f47f aebc 	bne.w	18fc8 <rpc_ip_event_handler+0xec>
   19250:	6960      	ldr	r0, [r4, #20]
   19252:	2800      	cmp	r0, #0
   19254:	d1b7      	bne.n	191c6 <rpc_ip_event_handler+0x2ea>
   19256:	6833      	ldr	r3, [r6, #0]
   19258:	0c1b      	lsrs	r3, r3, #16
   1925a:	041b      	lsls	r3, r3, #16
   1925c:	f043 0307 	orr.w	r3, r3, #7
   19260:	6033      	str	r3, [r6, #0]
   19262:	e6a3      	b.n	18fac <rpc_ip_event_handler+0xd0>
   19264:	6833      	ldr	r3, [r6, #0]
   19266:	025b      	lsls	r3, r3, #9
   19268:	f57f aeae 	bpl.w	18fc8 <rpc_ip_event_handler+0xec>
   1926c:	6960      	ldr	r0, [r4, #20]
   1926e:	2800      	cmp	r0, #0
   19270:	d1a9      	bne.n	191c6 <rpc_ip_event_handler+0x2ea>
   19272:	6833      	ldr	r3, [r6, #0]
   19274:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   19278:	6033      	str	r3, [r6, #0]
   1927a:	e697      	b.n	18fac <rpc_ip_event_handler+0xd0>
   1927c:	6833      	ldr	r3, [r6, #0]
   1927e:	b29b      	uxth	r3, r3
   19280:	2b07      	cmp	r3, #7
   19282:	f47f aea1 	bne.w	18fc8 <rpc_ip_event_handler+0xec>
   19286:	e67c      	b.n	18f82 <rpc_ip_event_handler+0xa6>
   19288:	2002af30 	.word	0x2002af30
   1928c:	00028cb4 	.word	0x00028cb4
   19290:	20023304 	.word	0x20023304
   19294:	200232d4 	.word	0x200232d4
   19298:	200232cc 	.word	0x200232cc
   1929c:	200281ac 	.word	0x200281ac
   192a0:	200232dc 	.word	0x200232dc
   192a4:	200232d8 	.word	0x200232d8
   192a8:	200232d0 	.word	0x200232d0
   192ac:	6833      	ldr	r3, [r6, #0]
   192ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   192b2:	6033      	str	r3, [r6, #0]
   192b4:	6833      	ldr	r3, [r6, #0]
   192b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   192ba:	6033      	str	r3, [r6, #0]
   192bc:	6833      	ldr	r3, [r6, #0]
   192be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   192c2:	6033      	str	r3, [r6, #0]
   192c4:	6833      	ldr	r3, [r6, #0]
   192c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   192ca:	6033      	str	r3, [r6, #0]
   192cc:	6923      	ldr	r3, [r4, #16]
   192ce:	2b6c      	cmp	r3, #108	; 0x6c
   192d0:	d00d      	beq.n	192ee <rpc_ip_event_handler+0x412>
   192d2:	2b10      	cmp	r3, #16
   192d4:	bf8c      	ite	hi
   192d6:	232d      	movhi	r3, #45	; 0x2d
   192d8:	4a41      	ldrls	r2, [pc, #260]	; (193e0 <rpc_ip_event_handler+0x504>)
   192da:	f04f 0000 	mov.w	r0, #0
   192de:	bf98      	it	ls
   192e0:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   192e4:	6073      	str	r3, [r6, #4]
   192e6:	60b3      	str	r3, [r6, #8]
   192e8:	e660      	b.n	18fac <rpc_ip_event_handler+0xd0>
   192ea:	232d      	movs	r3, #45	; 0x2d
   192ec:	e697      	b.n	1901e <rpc_ip_event_handler+0x142>
   192ee:	2239      	movs	r2, #57	; 0x39
   192f0:	6833      	ldr	r3, [r6, #0]
   192f2:	2000      	movs	r0, #0
   192f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   192f8:	6033      	str	r3, [r6, #0]
   192fa:	6072      	str	r2, [r6, #4]
   192fc:	60b2      	str	r2, [r6, #8]
   192fe:	e655      	b.n	18fac <rpc_ip_event_handler+0xd0>
   19300:	6820      	ldr	r0, [r4, #0]
   19302:	f7fe fcb3 	bl	17c6c <rpc_ip_client_data_free>
   19306:	4628      	mov	r0, r5
   19308:	e650      	b.n	18fac <rpc_ip_event_handler+0xd0>
   1930a:	6833      	ldr	r3, [r6, #0]
   1930c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19310:	6033      	str	r3, [r6, #0]
   19312:	6833      	ldr	r3, [r6, #0]
   19314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   19318:	6033      	str	r3, [r6, #0]
   1931a:	6833      	ldr	r3, [r6, #0]
   1931c:	0c1b      	lsrs	r3, r3, #16
   1931e:	041b      	lsls	r3, r3, #16
   19320:	f043 0305 	orr.w	r3, r3, #5
   19324:	6033      	str	r3, [r6, #0]
   19326:	e641      	b.n	18fac <rpc_ip_event_handler+0xd0>
   19328:	6833      	ldr	r3, [r6, #0]
   1932a:	4a2e      	ldr	r2, [pc, #184]	; (193e4 <rpc_ip_event_handler+0x508>)
   1932c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19330:	6033      	str	r3, [r6, #0]
   19332:	2001      	movs	r0, #1
   19334:	f842 4027 	str.w	r4, [r2, r7, lsl #2]
   19338:	e638      	b.n	18fac <rpc_ip_event_handler+0xd0>
   1933a:	232d      	movs	r3, #45	; 0x2d
   1933c:	e76c      	b.n	19218 <rpc_ip_event_handler+0x33c>
   1933e:	2002      	movs	r0, #2
   19340:	e634      	b.n	18fac <rpc_ip_event_handler+0xd0>
   19342:	4b28      	ldr	r3, [pc, #160]	; (193e4 <rpc_ip_event_handler+0x508>)
   19344:	2001      	movs	r0, #1
   19346:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1934a:	6833      	ldr	r3, [r6, #0]
   1934c:	0c1b      	lsrs	r3, r3, #16
   1934e:	041b      	lsls	r3, r3, #16
   19350:	f043 0309 	orr.w	r3, r3, #9
   19354:	6033      	str	r3, [r6, #0]
   19356:	e629      	b.n	18fac <rpc_ip_event_handler+0xd0>
   19358:	6833      	ldr	r3, [r6, #0]
   1935a:	0c1b      	lsrs	r3, r3, #16
   1935c:	041b      	lsls	r3, r3, #16
   1935e:	f043 030e 	orr.w	r3, r3, #14
   19362:	6033      	str	r3, [r6, #0]
   19364:	e622      	b.n	18fac <rpc_ip_event_handler+0xd0>
   19366:	6933      	ldr	r3, [r6, #16]
   19368:	2b01      	cmp	r3, #1
   1936a:	d005      	beq.n	19378 <rpc_ip_event_handler+0x49c>
   1936c:	230c      	movs	r3, #12
   1936e:	e753      	b.n	19218 <rpc_ip_event_handler+0x33c>
   19370:	8a65      	ldrh	r5, [r4, #18]
   19372:	b94d      	cbnz	r5, 19388 <rpc_ip_event_handler+0x4ac>
   19374:	462f      	mov	r7, r5
   19376:	e5f6      	b.n	18f66 <rpc_ip_event_handler+0x8a>
   19378:	220c      	movs	r2, #12
   1937a:	6833      	ldr	r3, [r6, #0]
   1937c:	2000      	movs	r0, #0
   1937e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   19382:	6033      	str	r3, [r6, #0]
   19384:	6072      	str	r2, [r6, #4]
   19386:	e611      	b.n	18fac <rpc_ip_event_handler+0xd0>
   19388:	2024      	movs	r0, #36	; 0x24
   1938a:	f003 fe3b 	bl	1d004 <nrf_malloc>
   1938e:	4607      	mov	r7, r0
   19390:	2800      	cmp	r0, #0
   19392:	d0d4      	beq.n	1933e <rpc_ip_event_handler+0x462>
   19394:	8a62      	ldrh	r2, [r4, #18]
   19396:	2a10      	cmp	r2, #16
   19398:	d015      	beq.n	193c6 <rpc_ip_event_handler+0x4ea>
   1939a:	2a04      	cmp	r2, #4
   1939c:	d007      	beq.n	193ae <rpc_ip_event_handler+0x4d2>
   1939e:	6820      	ldr	r0, [r4, #0]
   193a0:	f7fe fc64 	bl	17c6c <rpc_ip_client_data_free>
   193a4:	4638      	mov	r0, r7
   193a6:	f003 fe37 	bl	1d018 <nrf_free>
   193aa:	2000      	movs	r0, #0
   193ac:	e5fe      	b.n	18fac <rpc_ip_event_handler+0xd0>
   193ae:	2302      	movs	r3, #2
   193b0:	2510      	movs	r5, #16
   193b2:	6043      	str	r3, [r0, #4]
   193b4:	7005      	strb	r5, [r0, #0]
   193b6:	8a23      	ldrh	r3, [r4, #16]
   193b8:	f104 0114 	add.w	r1, r4, #20
   193bc:	8103      	strh	r3, [r0, #8]
   193be:	300c      	adds	r0, #12
   193c0:	f00e fac1 	bl	27946 <memcpy>
   193c4:	e5cf      	b.n	18f66 <rpc_ip_event_handler+0x8a>
   193c6:	230a      	movs	r3, #10
   193c8:	2524      	movs	r5, #36	; 0x24
   193ca:	6043      	str	r3, [r0, #4]
   193cc:	7005      	strb	r5, [r0, #0]
   193ce:	8a23      	ldrh	r3, [r4, #16]
   193d0:	f104 0114 	add.w	r1, r4, #20
   193d4:	8103      	strh	r3, [r0, #8]
   193d6:	3010      	adds	r0, #16
   193d8:	f00e fab5 	bl	27946 <memcpy>
   193dc:	e5c3      	b.n	18f66 <rpc_ip_event_handler+0x8a>
   193de:	bf00      	nop
   193e0:	00028cb4 	.word	0x00028cb4
   193e4:	200232e0 	.word	0x200232e0

000193e8 <rpc_handle_ctrl_message>:
   193e8:	2902      	cmp	r1, #2
   193ea:	b510      	push	{r4, lr}
   193ec:	4604      	mov	r4, r0
   193ee:	d00c      	beq.n	1940a <rpc_handle_ctrl_message+0x22>
   193f0:	2904      	cmp	r1, #4
   193f2:	d008      	beq.n	19406 <rpc_handle_ctrl_message+0x1e>
   193f4:	2901      	cmp	r1, #1
   193f6:	d006      	beq.n	19406 <rpc_handle_ctrl_message+0x1e>
   193f8:	6880      	ldr	r0, [r0, #8]
   193fa:	b108      	cbz	r0, 19400 <rpc_handle_ctrl_message+0x18>
   193fc:	f7fc ff38 	bl	16270 <rpc_transport_data_free>
   19400:	4620      	mov	r0, r4
   19402:	f7fc ff33 	bl	1626c <rpc_transport_rpc_free>
   19406:	2000      	movs	r0, #0
   19408:	bd10      	pop	{r4, pc}
   1940a:	6880      	ldr	r0, [r0, #8]
   1940c:	2800      	cmp	r0, #0
   1940e:	d0fa      	beq.n	19406 <rpc_handle_ctrl_message+0x1e>
   19410:	f7fc ff2e 	bl	16270 <rpc_transport_data_free>
   19414:	2000      	movs	r0, #0
   19416:	bd10      	pop	{r4, pc}

00019418 <rpc_handle_data_message>:
   19418:	4b23      	ldr	r3, [pc, #140]	; (194a8 <rpc_handle_data_message+0x90>)
   1941a:	6802      	ldr	r2, [r0, #0]
   1941c:	8819      	ldrh	r1, [r3, #0]
   1941e:	b292      	uxth	r2, r2
   19420:	4291      	cmp	r1, r2
   19422:	d027      	beq.n	19474 <rpc_handle_data_message+0x5c>
   19424:	8a19      	ldrh	r1, [r3, #16]
   19426:	4291      	cmp	r1, r2
   19428:	d02a      	beq.n	19480 <rpc_handle_data_message+0x68>
   1942a:	8c19      	ldrh	r1, [r3, #32]
   1942c:	4291      	cmp	r1, r2
   1942e:	d02b      	beq.n	19488 <rpc_handle_data_message+0x70>
   19430:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   19432:	4291      	cmp	r1, r2
   19434:	d02a      	beq.n	1948c <rpc_handle_data_message+0x74>
   19436:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   1943a:	4291      	cmp	r1, r2
   1943c:	d028      	beq.n	19490 <rpc_handle_data_message+0x78>
   1943e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   19442:	4291      	cmp	r1, r2
   19444:	d026      	beq.n	19494 <rpc_handle_data_message+0x7c>
   19446:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   1944a:	4291      	cmp	r1, r2
   1944c:	d026      	beq.n	1949c <rpc_handle_data_message+0x84>
   1944e:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   19452:	4291      	cmp	r1, r2
   19454:	d024      	beq.n	194a0 <rpc_handle_data_message+0x88>
   19456:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   1945a:	4291      	cmp	r1, r2
   1945c:	d01c      	beq.n	19498 <rpc_handle_data_message+0x80>
   1945e:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   19462:	4291      	cmp	r1, r2
   19464:	d01e      	beq.n	194a4 <rpc_handle_data_message+0x8c>
   19466:	6880      	ldr	r0, [r0, #8]
   19468:	b160      	cbz	r0, 19484 <rpc_handle_data_message+0x6c>
   1946a:	b510      	push	{r4, lr}
   1946c:	f7fc ff00 	bl	16270 <rpc_transport_data_free>
   19470:	2000      	movs	r0, #0
   19472:	bd10      	pop	{r4, pc}
   19474:	2200      	movs	r2, #0
   19476:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1947a:	685a      	ldr	r2, [r3, #4]
   1947c:	68d9      	ldr	r1, [r3, #12]
   1947e:	4710      	bx	r2
   19480:	2201      	movs	r2, #1
   19482:	e7f8      	b.n	19476 <rpc_handle_data_message+0x5e>
   19484:	2000      	movs	r0, #0
   19486:	4770      	bx	lr
   19488:	2202      	movs	r2, #2
   1948a:	e7f4      	b.n	19476 <rpc_handle_data_message+0x5e>
   1948c:	2203      	movs	r2, #3
   1948e:	e7f2      	b.n	19476 <rpc_handle_data_message+0x5e>
   19490:	2204      	movs	r2, #4
   19492:	e7f0      	b.n	19476 <rpc_handle_data_message+0x5e>
   19494:	2205      	movs	r2, #5
   19496:	e7ee      	b.n	19476 <rpc_handle_data_message+0x5e>
   19498:	2208      	movs	r2, #8
   1949a:	e7ec      	b.n	19476 <rpc_handle_data_message+0x5e>
   1949c:	2206      	movs	r2, #6
   1949e:	e7ea      	b.n	19476 <rpc_handle_data_message+0x5e>
   194a0:	2207      	movs	r2, #7
   194a2:	e7e8      	b.n	19476 <rpc_handle_data_message+0x5e>
   194a4:	2209      	movs	r2, #9
   194a6:	e7e6      	b.n	19476 <rpc_handle_data_message+0x5e>
   194a8:	20023308 	.word	0x20023308

000194ac <rpc_framework_init>:
   194ac:	b508      	push	{r3, lr}
   194ae:	22a0      	movs	r2, #160	; 0xa0
   194b0:	2100      	movs	r1, #0
   194b2:	4802      	ldr	r0, [pc, #8]	; (194bc <rpc_framework_init+0x10>)
   194b4:	f00e fa81 	bl	279ba <memset>
   194b8:	2000      	movs	r0, #0
   194ba:	bd08      	pop	{r3, pc}
   194bc:	20023308 	.word	0x20023308

000194c0 <rpc_client_register>:
   194c0:	8803      	ldrh	r3, [r0, #0]
   194c2:	2b00      	cmp	r3, #0
   194c4:	d045      	beq.n	19552 <rpc_client_register+0x92>
   194c6:	6842      	ldr	r2, [r0, #4]
   194c8:	4601      	mov	r1, r0
   194ca:	2a00      	cmp	r2, #0
   194cc:	d050      	beq.n	19570 <rpc_client_register+0xb0>
   194ce:	4a30      	ldr	r2, [pc, #192]	; (19590 <rpc_client_register+0xd0>)
   194d0:	8810      	ldrh	r0, [r2, #0]
   194d2:	4283      	cmp	r3, r0
   194d4:	d03d      	beq.n	19552 <rpc_client_register+0x92>
   194d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   194da:	8a14      	ldrh	r4, [r2, #16]
   194dc:	42a3      	cmp	r3, r4
   194de:	d035      	beq.n	1954c <rpc_client_register+0x8c>
   194e0:	8c15      	ldrh	r5, [r2, #32]
   194e2:	42ab      	cmp	r3, r5
   194e4:	d032      	beq.n	1954c <rpc_client_register+0x8c>
   194e6:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   194e8:	42b3      	cmp	r3, r6
   194ea:	d02f      	beq.n	1954c <rpc_client_register+0x8c>
   194ec:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   194f0:	42bb      	cmp	r3, r7
   194f2:	d02b      	beq.n	1954c <rpc_client_register+0x8c>
   194f4:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   194f8:	4563      	cmp	r3, ip
   194fa:	d027      	beq.n	1954c <rpc_client_register+0x8c>
   194fc:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   19500:	4573      	cmp	r3, lr
   19502:	d023      	beq.n	1954c <rpc_client_register+0x8c>
   19504:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   19508:	4543      	cmp	r3, r8
   1950a:	d01f      	beq.n	1954c <rpc_client_register+0x8c>
   1950c:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   19510:	454b      	cmp	r3, r9
   19512:	d01b      	beq.n	1954c <rpc_client_register+0x8c>
   19514:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   19518:	4553      	cmp	r3, sl
   1951a:	d017      	beq.n	1954c <rpc_client_register+0x8c>
   1951c:	b1e0      	cbz	r0, 19558 <rpc_client_register+0x98>
   1951e:	b35c      	cbz	r4, 19578 <rpc_client_register+0xb8>
   19520:	b365      	cbz	r5, 1957c <rpc_client_register+0xbc>
   19522:	b36e      	cbz	r6, 19580 <rpc_client_register+0xc0>
   19524:	b377      	cbz	r7, 19584 <rpc_client_register+0xc4>
   19526:	f1bc 0f00 	cmp.w	ip, #0
   1952a:	d02d      	beq.n	19588 <rpc_client_register+0xc8>
   1952c:	f1be 0f00 	cmp.w	lr, #0
   19530:	d020      	beq.n	19574 <rpc_client_register+0xb4>
   19532:	f1b8 0f00 	cmp.w	r8, #0
   19536:	d029      	beq.n	1958c <rpc_client_register+0xcc>
   19538:	f1b9 0f00 	cmp.w	r9, #0
   1953c:	d00b      	beq.n	19556 <rpc_client_register+0x96>
   1953e:	2009      	movs	r0, #9
   19540:	f1ba 0f00 	cmp.w	sl, #0
   19544:	d008      	beq.n	19558 <rpc_client_register+0x98>
   19546:	2004      	movs	r0, #4
   19548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1954c:	2007      	movs	r0, #7
   1954e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19552:	2007      	movs	r0, #7
   19554:	4770      	bx	lr
   19556:	2008      	movs	r0, #8
   19558:	0100      	lsls	r0, r0, #4
   1955a:	5213      	strh	r3, [r2, r0]
   1955c:	684b      	ldr	r3, [r1, #4]
   1955e:	4402      	add	r2, r0
   19560:	6053      	str	r3, [r2, #4]
   19562:	688b      	ldr	r3, [r1, #8]
   19564:	2000      	movs	r0, #0
   19566:	6093      	str	r3, [r2, #8]
   19568:	68cb      	ldr	r3, [r1, #12]
   1956a:	60d3      	str	r3, [r2, #12]
   1956c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19570:	200e      	movs	r0, #14
   19572:	4770      	bx	lr
   19574:	2006      	movs	r0, #6
   19576:	e7ef      	b.n	19558 <rpc_client_register+0x98>
   19578:	2001      	movs	r0, #1
   1957a:	e7ed      	b.n	19558 <rpc_client_register+0x98>
   1957c:	2002      	movs	r0, #2
   1957e:	e7eb      	b.n	19558 <rpc_client_register+0x98>
   19580:	2003      	movs	r0, #3
   19582:	e7e9      	b.n	19558 <rpc_client_register+0x98>
   19584:	2004      	movs	r0, #4
   19586:	e7e7      	b.n	19558 <rpc_client_register+0x98>
   19588:	2005      	movs	r0, #5
   1958a:	e7e5      	b.n	19558 <rpc_client_register+0x98>
   1958c:	2007      	movs	r0, #7
   1958e:	e7e3      	b.n	19558 <rpc_client_register+0x98>
   19590:	20023308 	.word	0x20023308

00019594 <rpc_message_send>:
   19594:	b150      	cbz	r0, 195ac <rpc_message_send+0x18>
   19596:	b159      	cbz	r1, 195b0 <rpc_message_send+0x1c>
   19598:	684b      	ldr	r3, [r1, #4]
   1959a:	8008      	strh	r0, [r1, #0]
   1959c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   195a0:	f043 0302 	orr.w	r3, r3, #2
   195a4:	604b      	str	r3, [r1, #4]
   195a6:	4608      	mov	r0, r1
   195a8:	f7fc be5a 	b.w	16260 <rpc_transport_send>
   195ac:	2007      	movs	r0, #7
   195ae:	4770      	bx	lr
   195b0:	200e      	movs	r0, #14
   195b2:	4770      	bx	lr

000195b4 <rpc_message_alloc>:
   195b4:	b342      	cbz	r2, 19608 <rpc_message_alloc+0x54>
   195b6:	b328      	cbz	r0, 19604 <rpc_message_alloc+0x50>
   195b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   195ba:	2300      	movs	r3, #0
   195bc:	4616      	mov	r6, r2
   195be:	460c      	mov	r4, r1
   195c0:	4605      	mov	r5, r0
   195c2:	6013      	str	r3, [r2, #0]
   195c4:	b171      	cbz	r1, 195e4 <rpc_message_alloc+0x30>
   195c6:	4608      	mov	r0, r1
   195c8:	f7fc fe4e 	bl	16268 <rpc_transport_data_alloc>
   195cc:	4607      	mov	r7, r0
   195ce:	b1b8      	cbz	r0, 19600 <rpc_message_alloc+0x4c>
   195d0:	f7fc fe48 	bl	16264 <rpc_transport_rpc_alloc>
   195d4:	4603      	mov	r3, r0
   195d6:	b180      	cbz	r0, 195fa <rpc_message_alloc+0x46>
   195d8:	2000      	movs	r0, #0
   195da:	60dc      	str	r4, [r3, #12]
   195dc:	609f      	str	r7, [r3, #8]
   195de:	801d      	strh	r5, [r3, #0]
   195e0:	6033      	str	r3, [r6, #0]
   195e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   195e4:	f7fc fe3e 	bl	16264 <rpc_transport_rpc_alloc>
   195e8:	4603      	mov	r3, r0
   195ea:	b148      	cbz	r0, 19600 <rpc_message_alloc+0x4c>
   195ec:	4627      	mov	r7, r4
   195ee:	60dc      	str	r4, [r3, #12]
   195f0:	609f      	str	r7, [r3, #8]
   195f2:	801d      	strh	r5, [r3, #0]
   195f4:	2000      	movs	r0, #0
   195f6:	6033      	str	r3, [r6, #0]
   195f8:	e7f3      	b.n	195e2 <rpc_message_alloc+0x2e>
   195fa:	4638      	mov	r0, r7
   195fc:	f7fc fe38 	bl	16270 <rpc_transport_data_free>
   19600:	2004      	movs	r0, #4
   19602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19604:	2007      	movs	r0, #7
   19606:	4770      	bx	lr
   19608:	200e      	movs	r0, #14
   1960a:	4770      	bx	lr

0001960c <rpc_message_free>:
   1960c:	b130      	cbz	r0, 1961c <rpc_message_free+0x10>
   1960e:	b139      	cbz	r1, 19620 <rpc_message_free+0x14>
   19610:	b508      	push	{r3, lr}
   19612:	4608      	mov	r0, r1
   19614:	f7fc fe2a 	bl	1626c <rpc_transport_rpc_free>
   19618:	2000      	movs	r0, #0
   1961a:	bd08      	pop	{r3, pc}
   1961c:	2007      	movs	r0, #7
   1961e:	4770      	bx	lr
   19620:	200e      	movs	r0, #14
   19622:	4770      	bx	lr

00019624 <rpc_message_data_free>:
   19624:	b130      	cbz	r0, 19634 <rpc_message_data_free+0x10>
   19626:	b139      	cbz	r1, 19638 <rpc_message_data_free+0x14>
   19628:	b508      	push	{r3, lr}
   1962a:	4608      	mov	r0, r1
   1962c:	f7fc fe20 	bl	16270 <rpc_transport_data_free>
   19630:	2000      	movs	r0, #0
   19632:	bd08      	pop	{r3, pc}
   19634:	2007      	movs	r0, #7
   19636:	4770      	bx	lr
   19638:	200e      	movs	r0, #14
   1963a:	4770      	bx	lr

0001963c <packet_free_cb>:
   1963c:	b510      	push	{r4, lr}
   1963e:	4604      	mov	r4, r0
   19640:	b118      	cbz	r0, 1964a <packet_free_cb+0xe>
   19642:	6800      	ldr	r0, [r0, #0]
   19644:	b108      	cbz	r0, 1964a <packet_free_cb+0xe>
   19646:	f002 fef9 	bl	1c43c <rpc_gnss_client_data_free>
   1964a:	68a0      	ldr	r0, [r4, #8]
   1964c:	b118      	cbz	r0, 19656 <packet_free_cb+0x1a>
   1964e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19652:	f003 bce1 	b.w	1d018 <nrf_free>
   19656:	bd10      	pop	{r4, pc}

00019658 <rpc_gnss_event_handler>:
   19658:	b5f0      	push	{r4, r5, r6, r7, lr}
   1965a:	4b64      	ldr	r3, [pc, #400]	; (197ec <rpc_gnss_event_handler+0x194>)
   1965c:	4606      	mov	r6, r0
   1965e:	6800      	ldr	r0, [r0, #0]
   19660:	881b      	ldrh	r3, [r3, #0]
   19662:	6802      	ldr	r2, [r0, #0]
   19664:	b085      	sub	sp, #20
   19666:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1966a:	460d      	mov	r5, r1
   1966c:	d037      	beq.n	196de <rpc_gnss_event_handler+0x86>
   1966e:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   19672:	33ff      	adds	r3, #255	; 0xff
   19674:	b29b      	uxth	r3, r3
   19676:	2b02      	cmp	r3, #2
   19678:	d811      	bhi.n	1969e <rpc_gnss_event_handler+0x46>
   1967a:	4c5d      	ldr	r4, [pc, #372]	; (197f0 <rpc_gnss_event_handler+0x198>)
   1967c:	6823      	ldr	r3, [r4, #0]
   1967e:	075a      	lsls	r2, r3, #29
   19680:	d410      	bmi.n	196a4 <rpc_gnss_event_handler+0x4c>
   19682:	6823      	ldr	r3, [r4, #0]
   19684:	079b      	lsls	r3, r3, #30
   19686:	d503      	bpl.n	19690 <rpc_gnss_event_handler+0x38>
   19688:	f244 0303 	movw	r3, #16387	; 0x4003
   1968c:	429d      	cmp	r5, r3
   1968e:	d009      	beq.n	196a4 <rpc_gnss_event_handler+0x4c>
   19690:	6830      	ldr	r0, [r6, #0]
   19692:	b120      	cbz	r0, 1969e <rpc_gnss_event_handler+0x46>
   19694:	f002 fed2 	bl	1c43c <rpc_gnss_client_data_free>
   19698:	2200      	movs	r2, #0
   1969a:	4b56      	ldr	r3, [pc, #344]	; (197f4 <rpc_gnss_event_handler+0x19c>)
   1969c:	601a      	str	r2, [r3, #0]
   1969e:	2000      	movs	r0, #0
   196a0:	b005      	add	sp, #20
   196a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   196a4:	2002      	movs	r0, #2
   196a6:	f003 fcad 	bl	1d004 <nrf_malloc>
   196aa:	4607      	mov	r7, r0
   196ac:	2800      	cmp	r0, #0
   196ae:	f000 8094 	beq.w	197da <rpc_gnss_event_handler+0x182>
   196b2:	2302      	movs	r3, #2
   196b4:	8005      	strh	r5, [r0, #0]
   196b6:	6831      	ldr	r1, [r6, #0]
   196b8:	6872      	ldr	r2, [r6, #4]
   196ba:	484f      	ldr	r0, [pc, #316]	; (197f8 <rpc_gnss_event_handler+0x1a0>)
   196bc:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   196c0:	6800      	ldr	r0, [r0, #0]
   196c2:	9303      	str	r3, [sp, #12]
   196c4:	6803      	ldr	r3, [r0, #0]
   196c6:	4669      	mov	r1, sp
   196c8:	685b      	ldr	r3, [r3, #4]
   196ca:	4798      	blx	r3
   196cc:	3001      	adds	r0, #1
   196ce:	d071      	beq.n	197b4 <rpc_gnss_event_handler+0x15c>
   196d0:	2000      	movs	r0, #0
   196d2:	6823      	ldr	r3, [r4, #0]
   196d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   196d8:	6023      	str	r3, [r4, #0]
   196da:	b005      	add	sp, #20
   196dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   196de:	4c44      	ldr	r4, [pc, #272]	; (197f0 <rpc_gnss_event_handler+0x198>)
   196e0:	4f44      	ldr	r7, [pc, #272]	; (197f4 <rpc_gnss_event_handler+0x19c>)
   196e2:	6823      	ldr	r3, [r4, #0]
   196e4:	6038      	str	r0, [r7, #0]
   196e6:	01d9      	lsls	r1, r3, #7
   196e8:	d523      	bpl.n	19732 <rpc_gnss_event_handler+0xda>
   196ea:	f242 1302 	movw	r3, #8450	; 0x2102
   196ee:	429d      	cmp	r5, r3
   196f0:	d11f      	bne.n	19732 <rpc_gnss_event_handler+0xda>
   196f2:	6843      	ldr	r3, [r0, #4]
   196f4:	b91b      	cbnz	r3, 196fe <rpc_gnss_event_handler+0xa6>
   196f6:	6823      	ldr	r3, [r4, #0]
   196f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   196fc:	6023      	str	r3, [r4, #0]
   196fe:	6823      	ldr	r3, [r4, #0]
   19700:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19704:	6023      	str	r3, [r4, #0]
   19706:	6823      	ldr	r3, [r4, #0]
   19708:	025a      	lsls	r2, r3, #9
   1970a:	d430      	bmi.n	1976e <rpc_gnss_event_handler+0x116>
   1970c:	f242 0305 	movw	r3, #8197	; 0x2005
   19710:	429d      	cmp	r5, r3
   19712:	d12c      	bne.n	1976e <rpc_gnss_event_handler+0x116>
   19714:	6823      	ldr	r3, [r4, #0]
   19716:	0299      	lsls	r1, r3, #10
   19718:	d529      	bpl.n	1976e <rpc_gnss_event_handler+0x116>
   1971a:	6843      	ldr	r3, [r0, #4]
   1971c:	2b00      	cmp	r3, #0
   1971e:	d157      	bne.n	197d0 <rpc_gnss_event_handler+0x178>
   19720:	6823      	ldr	r3, [r4, #0]
   19722:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19726:	6023      	str	r3, [r4, #0]
   19728:	6823      	ldr	r3, [r4, #0]
   1972a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1972e:	6023      	str	r3, [r4, #0]
   19730:	e01d      	b.n	1976e <rpc_gnss_event_handler+0x116>
   19732:	6823      	ldr	r3, [r4, #0]
   19734:	025b      	lsls	r3, r3, #9
   19736:	d50e      	bpl.n	19756 <rpc_gnss_event_handler+0xfe>
   19738:	f242 1303 	movw	r3, #8451	; 0x2103
   1973c:	429d      	cmp	r5, r3
   1973e:	d10a      	bne.n	19756 <rpc_gnss_event_handler+0xfe>
   19740:	6843      	ldr	r3, [r0, #4]
   19742:	b91b      	cbnz	r3, 1974c <rpc_gnss_event_handler+0xf4>
   19744:	6823      	ldr	r3, [r4, #0]
   19746:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1974a:	6023      	str	r3, [r4, #0]
   1974c:	6823      	ldr	r3, [r4, #0]
   1974e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19752:	6023      	str	r3, [r4, #0]
   19754:	e00b      	b.n	1976e <rpc_gnss_event_handler+0x116>
   19756:	f242 0301 	movw	r3, #8193	; 0x2001
   1975a:	429d      	cmp	r5, r3
   1975c:	d10c      	bne.n	19778 <rpc_gnss_event_handler+0x120>
   1975e:	6843      	ldr	r3, [r0, #4]
   19760:	b92b      	cbnz	r3, 1976e <rpc_gnss_event_handler+0x116>
   19762:	6823      	ldr	r3, [r4, #0]
   19764:	0c1b      	lsrs	r3, r3, #16
   19766:	041b      	lsls	r3, r3, #16
   19768:	f043 0302 	orr.w	r3, r3, #2
   1976c:	6023      	str	r3, [r4, #0]
   1976e:	f002 fe65 	bl	1c43c <rpc_gnss_client_data_free>
   19772:	2300      	movs	r3, #0
   19774:	603b      	str	r3, [r7, #0]
   19776:	e77a      	b.n	1966e <rpc_gnss_event_handler+0x16>
   19778:	f242 0304 	movw	r3, #8196	; 0x2004
   1977c:	429d      	cmp	r5, r3
   1977e:	d1c5      	bne.n	1970c <rpc_gnss_event_handler+0xb4>
   19780:	6843      	ldr	r3, [r0, #4]
   19782:	b993      	cbnz	r3, 197aa <rpc_gnss_event_handler+0x152>
   19784:	6823      	ldr	r3, [r4, #0]
   19786:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1978a:	6023      	str	r3, [r4, #0]
   1978c:	6823      	ldr	r3, [r4, #0]
   1978e:	b29b      	uxth	r3, r3
   19790:	2b03      	cmp	r3, #3
   19792:	6823      	ldr	r3, [r4, #0]
   19794:	d016      	beq.n	197c4 <rpc_gnss_event_handler+0x16c>
   19796:	b29b      	uxth	r3, r3
   19798:	2b04      	cmp	r3, #4
   1979a:	d1d7      	bne.n	1974c <rpc_gnss_event_handler+0xf4>
   1979c:	6823      	ldr	r3, [r4, #0]
   1979e:	0c1b      	lsrs	r3, r3, #16
   197a0:	041b      	lsls	r3, r3, #16
   197a2:	f043 0302 	orr.w	r3, r3, #2
   197a6:	6023      	str	r3, [r4, #0]
   197a8:	e7d0      	b.n	1974c <rpc_gnss_event_handler+0xf4>
   197aa:	6823      	ldr	r3, [r4, #0]
   197ac:	b29b      	uxth	r3, r3
   197ae:	2b03      	cmp	r3, #3
   197b0:	d1cc      	bne.n	1974c <rpc_gnss_event_handler+0xf4>
   197b2:	e7f3      	b.n	1979c <rpc_gnss_event_handler+0x144>
   197b4:	4638      	mov	r0, r7
   197b6:	f003 fc2f 	bl	1d018 <nrf_free>
   197ba:	6830      	ldr	r0, [r6, #0]
   197bc:	2800      	cmp	r0, #0
   197be:	f47f af69 	bne.w	19694 <rpc_gnss_event_handler+0x3c>
   197c2:	e76c      	b.n	1969e <rpc_gnss_event_handler+0x46>
   197c4:	0c1b      	lsrs	r3, r3, #16
   197c6:	041b      	lsls	r3, r3, #16
   197c8:	f043 0304 	orr.w	r3, r3, #4
   197cc:	6023      	str	r3, [r4, #0]
   197ce:	e7bd      	b.n	1974c <rpc_gnss_event_handler+0xf4>
   197d0:	6823      	ldr	r3, [r4, #0]
   197d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   197d6:	6023      	str	r3, [r4, #0]
   197d8:	e7c9      	b.n	1976e <rpc_gnss_event_handler+0x116>
   197da:	6830      	ldr	r0, [r6, #0]
   197dc:	2800      	cmp	r0, #0
   197de:	f43f af5e 	beq.w	1969e <rpc_gnss_event_handler+0x46>
   197e2:	f002 fe2b 	bl	1c43c <rpc_gnss_client_data_free>
   197e6:	4b03      	ldr	r3, [pc, #12]	; (197f4 <rpc_gnss_event_handler+0x19c>)
   197e8:	601f      	str	r7, [r3, #0]
   197ea:	e758      	b.n	1969e <rpc_gnss_event_handler+0x46>
   197ec:	200281ae 	.word	0x200281ae
   197f0:	200233a8 	.word	0x200233a8
   197f4:	200233ac 	.word	0x200233ac
   197f8:	200233b0 	.word	0x200233b0

000197fc <gnss_interface_write>:
   197fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19800:	4a74      	ldr	r2, [pc, #464]	; (199d4 <gnss_interface_write+0x1d8>)
   19802:	b09f      	sub	sp, #124	; 0x7c
   19804:	4290      	cmp	r0, r2
   19806:	9d26      	ldr	r5, [sp, #152]	; 0x98
   19808:	f040 80d7 	bne.w	199ba <gnss_interface_write+0x1be>
   1980c:	2900      	cmp	r1, #0
   1980e:	f000 80c6 	beq.w	1999e <gnss_interface_write+0x1a2>
   19812:	2d00      	cmp	r5, #0
   19814:	f000 80c3 	beq.w	1999e <gnss_interface_write+0x1a2>
   19818:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1981a:	2a02      	cmp	r2, #2
   1981c:	f040 80bf 	bne.w	1999e <gnss_interface_write+0x1a2>
   19820:	4c6d      	ldr	r4, [pc, #436]	; (199d8 <gnss_interface_write+0x1dc>)
   19822:	6822      	ldr	r2, [r4, #0]
   19824:	b292      	uxth	r2, r2
   19826:	2a02      	cmp	r2, #2
   19828:	d004      	beq.n	19834 <gnss_interface_write+0x38>
   1982a:	6822      	ldr	r2, [r4, #0]
   1982c:	b292      	uxth	r2, r2
   1982e:	2a04      	cmp	r2, #4
   19830:	f040 80bd 	bne.w	199ae <gnss_interface_write+0x1b2>
   19834:	2b00      	cmp	r3, #0
   19836:	f040 80c6 	bne.w	199c6 <gnss_interface_write+0x1ca>
   1983a:	6822      	ldr	r2, [r4, #0]
   1983c:	0390      	lsls	r0, r2, #14
   1983e:	d512      	bpl.n	19866 <gnss_interface_write+0x6a>
   19840:	6822      	ldr	r2, [r4, #0]
   19842:	882b      	ldrh	r3, [r5, #0]
   19844:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   19848:	6022      	str	r2, [r4, #0]
   1984a:	6822      	ldr	r2, [r4, #0]
   1984c:	3b01      	subs	r3, #1
   1984e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   19852:	6022      	str	r2, [r4, #0]
   19854:	2b07      	cmp	r3, #7
   19856:	f200 80a2 	bhi.w	1999e <gnss_interface_write+0x1a2>
   1985a:	e8df f003 	tbb	[pc, r3]
   1985e:	7d82      	.short	0x7d82
   19860:	646e7378 	.word	0x646e7378
   19864:	0869      	.short	0x0869
   19866:	2000      	movs	r0, #0
   19868:	b01f      	add	sp, #124	; 0x7c
   1986a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1986e:	4608      	mov	r0, r1
   19870:	a902      	add	r1, sp, #8
   19872:	f002 fd97 	bl	1c3a4 <rpc_gnss_serialize_integrity>
   19876:	2172      	movs	r1, #114	; 0x72
   19878:	4668      	mov	r0, sp
   1987a:	f002 fdad 	bl	1c3d8 <rpc_gnss_client_request_alloc>
   1987e:	4605      	mov	r5, r0
   19880:	9800      	ldr	r0, [sp, #0]
   19882:	2d00      	cmp	r5, #0
   19884:	d172      	bne.n	1996c <gnss_interface_write+0x170>
   19886:	2800      	cmp	r0, #0
   19888:	d077      	beq.n	1997a <gnss_interface_write+0x17e>
   1988a:	f241 0605 	movw	r6, #4101	; 0x1005
   1988e:	f04f 0c49 	mov.w	ip, #73	; 0x49
   19892:	2272      	movs	r2, #114	; 0x72
   19894:	f04f 0e76 	mov.w	lr, #118	; 0x76
   19898:	f04f 0943 	mov.w	r9, #67	; 0x43
   1989c:	f04f 0854 	mov.w	r8, #84	; 0x54
   198a0:	4f4e      	ldr	r7, [pc, #312]	; (199dc <gnss_interface_write+0x1e0>)
   198a2:	a91e      	add	r1, sp, #120	; 0x78
   198a4:	883b      	ldrh	r3, [r7, #0]
   198a6:	f880 c00f 	strb.w	ip, [r0, #15]
   198aa:	3301      	adds	r3, #1
   198ac:	b29b      	uxth	r3, r3
   198ae:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   198b2:	f841 cd74 	str.w	ip, [r1, #-116]!
   198b6:	7145      	strb	r5, [r0, #5]
   198b8:	7185      	strb	r5, [r0, #6]
   198ba:	71c5      	strb	r5, [r0, #7]
   198bc:	7205      	strb	r5, [r0, #8]
   198be:	7245      	strb	r5, [r0, #9]
   198c0:	7285      	strb	r5, [r0, #10]
   198c2:	72c5      	strb	r5, [r0, #11]
   198c4:	7102      	strb	r2, [r0, #4]
   198c6:	f880 900c 	strb.w	r9, [r0, #12]
   198ca:	f880 800d 	strb.w	r8, [r0, #13]
   198ce:	f880 e00e 	strb.w	lr, [r0, #14]
   198d2:	6800      	ldr	r0, [r0, #0]
   198d4:	803b      	strh	r3, [r7, #0]
   198d6:	f00e f836 	bl	27946 <memcpy>
   198da:	4b41      	ldr	r3, [pc, #260]	; (199e0 <gnss_interface_write+0x1e4>)
   198dc:	4631      	mov	r1, r6
   198de:	9800      	ldr	r0, [sp, #0]
   198e0:	601d      	str	r5, [r3, #0]
   198e2:	f002 fd8d 	bl	1c400 <rpc_gnss_client_request_send>
   198e6:	2800      	cmp	r0, #0
   198e8:	d14e      	bne.n	19988 <gnss_interface_write+0x18c>
   198ea:	6823      	ldr	r3, [r4, #0]
   198ec:	0299      	lsls	r1, r3, #10
   198ee:	d50b      	bpl.n	19908 <gnss_interface_write+0x10c>
   198f0:	4e3c      	ldr	r6, [pc, #240]	; (199e4 <gnss_interface_write+0x1e8>)
   198f2:	4d38      	ldr	r5, [pc, #224]	; (199d4 <gnss_interface_write+0x1d8>)
   198f4:	e000      	b.n	198f8 <gnss_interface_write+0xfc>
   198f6:	b978      	cbnz	r0, 19918 <gnss_interface_write+0x11c>
   198f8:	4631      	mov	r1, r6
   198fa:	4628      	mov	r0, r5
   198fc:	f7fa f912 	bl	13b24 <bsd_os_timedwait>
   19900:	6823      	ldr	r3, [r4, #0]
   19902:	029a      	lsls	r2, r3, #10
   19904:	d4f7      	bmi.n	198f6 <gnss_interface_write+0xfa>
   19906:	b938      	cbnz	r0, 19918 <gnss_interface_write+0x11c>
   19908:	6823      	ldr	r3, [r4, #0]
   1990a:	039b      	lsls	r3, r3, #14
   1990c:	d4ab      	bmi.n	19866 <gnss_interface_write+0x6a>
   1990e:	2005      	movs	r0, #5
   19910:	6823      	ldr	r3, [r4, #0]
   19912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19916:	6023      	str	r3, [r4, #0]
   19918:	f7fa f9ba 	bl	13c90 <bsd_os_errno_set>
   1991c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19920:	b01f      	add	sp, #124	; 0x7c
   19922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19926:	4608      	mov	r0, r1
   19928:	a902      	add	r1, sp, #8
   1992a:	f002 fcf3 	bl	1c314 <rpc_gnss_serialize_time_and_sv_tow>
   1992e:	e7a2      	b.n	19876 <gnss_interface_write+0x7a>
   19930:	4608      	mov	r0, r1
   19932:	a902      	add	r1, sp, #8
   19934:	f002 fd16 	bl	1c364 <rpc_gnss_serialize_location>
   19938:	e79d      	b.n	19876 <gnss_interface_write+0x7a>
   1993a:	4608      	mov	r0, r1
   1993c:	a902      	add	r1, sp, #8
   1993e:	f002 fccf 	bl	1c2e0 <rpc_gnss_serialize_nequick>
   19942:	e798      	b.n	19876 <gnss_interface_write+0x7a>
   19944:	4608      	mov	r0, r1
   19946:	a902      	add	r1, sp, #8
   19948:	f002 fca6 	bl	1c298 <rpc_gnss_serialize_klob>
   1994c:	e793      	b.n	19876 <gnss_interface_write+0x7a>
   1994e:	4608      	mov	r0, r1
   19950:	a902      	add	r1, sp, #8
   19952:	f002 fc6f 	bl	1c234 <rpc_gnss_serialize_alm>
   19956:	e78e      	b.n	19876 <gnss_interface_write+0x7a>
   19958:	4608      	mov	r0, r1
   1995a:	a902      	add	r1, sp, #8
   1995c:	f002 fc18 	bl	1c190 <rpc_gnss_serialize_ephe>
   19960:	e789      	b.n	19876 <gnss_interface_write+0x7a>
   19962:	4608      	mov	r0, r1
   19964:	a902      	add	r1, sp, #8
   19966:	f002 fbf1 	bl	1c14c <rpc_gnss_serialize_utc>
   1996a:	e784      	b.n	19876 <gnss_interface_write+0x7a>
   1996c:	b128      	cbz	r0, 1997a <gnss_interface_write+0x17e>
   1996e:	6803      	ldr	r3, [r0, #0]
   19970:	b11b      	cbz	r3, 1997a <gnss_interface_write+0x17e>
   19972:	4618      	mov	r0, r3
   19974:	f002 fd62 	bl	1c43c <rpc_gnss_client_data_free>
   19978:	9800      	ldr	r0, [sp, #0]
   1997a:	f002 fd57 	bl	1c42c <rpc_gnss_client_message_free>
   1997e:	2023      	movs	r0, #35	; 0x23
   19980:	f7fa f986 	bl	13c90 <bsd_os_errno_set>
   19984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19988:	6823      	ldr	r3, [r4, #0]
   1998a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1998e:	6023      	str	r3, [r4, #0]
   19990:	6823      	ldr	r3, [r4, #0]
   19992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19996:	6023      	str	r3, [r4, #0]
   19998:	b01f      	add	sp, #124	; 0x7c
   1999a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1999e:	2016      	movs	r0, #22
   199a0:	f7fa f976 	bl	13c90 <bsd_os_errno_set>
   199a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   199a8:	b01f      	add	sp, #124	; 0x7c
   199aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   199ae:	2039      	movs	r0, #57	; 0x39
   199b0:	f7fa f96e 	bl	13c90 <bsd_os_errno_set>
   199b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   199b8:	e756      	b.n	19868 <gnss_interface_write+0x6c>
   199ba:	2009      	movs	r0, #9
   199bc:	f7fa f968 	bl	13c90 <bsd_os_errno_set>
   199c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   199c4:	e750      	b.n	19868 <gnss_interface_write+0x6c>
   199c6:	202d      	movs	r0, #45	; 0x2d
   199c8:	f7fa f962 	bl	13c90 <bsd_os_errno_set>
   199cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   199d0:	e74a      	b.n	19868 <gnss_interface_write+0x6c>
   199d2:	bf00      	nop
   199d4:	49765443 	.word	0x49765443
   199d8:	200233a8 	.word	0x200233a8
   199dc:	200281ae 	.word	0x200281ae
   199e0:	200233ac 	.word	0x200233ac
   199e4:	200205b4 	.word	0x200205b4

000199e8 <gnss_interface_read>:
   199e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199ec:	4c50      	ldr	r4, [pc, #320]	; (19b30 <gnss_interface_read+0x148>)
   199ee:	b0b7      	sub	sp, #220	; 0xdc
   199f0:	42a0      	cmp	r0, r4
   199f2:	f040 81fe 	bne.w	19df2 <gnss_interface_read+0x40a>
   199f6:	4688      	mov	r8, r1
   199f8:	2900      	cmp	r1, #0
   199fa:	f000 81f4 	beq.w	19de6 <gnss_interface_read+0x3fe>
   199fe:	2ad7      	cmp	r2, #215	; 0xd7
   19a00:	f240 81f1 	bls.w	19de6 <gnss_interface_read+0x3fe>
   19a04:	4d4b      	ldr	r5, [pc, #300]	; (19b34 <gnss_interface_read+0x14c>)
   19a06:	4699      	mov	r9, r3
   19a08:	682b      	ldr	r3, [r5, #0]
   19a0a:	b29b      	uxth	r3, r3
   19a0c:	2b04      	cmp	r3, #4
   19a0e:	d004      	beq.n	19a1a <gnss_interface_read+0x32>
   19a10:	682b      	ldr	r3, [r5, #0]
   19a12:	b29b      	uxth	r3, r3
   19a14:	2b02      	cmp	r3, #2
   19a16:	f040 81e0 	bne.w	19dda <gnss_interface_read+0x3f2>
   19a1a:	f1b9 0f00 	cmp.w	r9, #0
   19a1e:	d158      	bne.n	19ad2 <gnss_interface_read+0xea>
   19a20:	2102      	movs	r1, #2
   19a22:	20b6      	movs	r0, #182	; 0xb6
   19a24:	2400      	movs	r4, #0
   19a26:	682b      	ldr	r3, [r5, #0]
   19a28:	f10d 020e 	add.w	r2, sp, #14
   19a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   19a30:	602b      	str	r3, [r5, #0]
   19a32:	f8df a108 	ldr.w	sl, [pc, #264]	; 19b3c <gnss_interface_read+0x154>
   19a36:	ab08      	add	r3, sp, #32
   19a38:	4f3f      	ldr	r7, [pc, #252]	; (19b38 <gnss_interface_read+0x150>)
   19a3a:	4e3d      	ldr	r6, [pc, #244]	; (19b30 <gnss_interface_read+0x148>)
   19a3c:	9005      	str	r0, [sp, #20]
   19a3e:	9107      	str	r1, [sp, #28]
   19a40:	9304      	str	r3, [sp, #16]
   19a42:	9206      	str	r2, [sp, #24]
   19a44:	ea09 0b01 	and.w	fp, r9, r1
   19a48:	f8da 0000 	ldr.w	r0, [sl]
   19a4c:	464a      	mov	r2, r9
   19a4e:	6803      	ldr	r3, [r0, #0]
   19a50:	a904      	add	r1, sp, #16
   19a52:	689b      	ldr	r3, [r3, #8]
   19a54:	4798      	blx	r3
   19a56:	2800      	cmp	r0, #0
   19a58:	da11      	bge.n	19a7e <gnss_interface_read+0x96>
   19a5a:	f1bb 0f00 	cmp.w	fp, #0
   19a5e:	d141      	bne.n	19ae4 <gnss_interface_read+0xfc>
   19a60:	682b      	ldr	r3, [r5, #0]
   19a62:	03d8      	lsls	r0, r3, #15
   19a64:	d4f0      	bmi.n	19a48 <gnss_interface_read+0x60>
   19a66:	b10c      	cbz	r4, 19a6c <gnss_interface_read+0x84>
   19a68:	e7ee      	b.n	19a48 <gnss_interface_read+0x60>
   19a6a:	b930      	cbnz	r0, 19a7a <gnss_interface_read+0x92>
   19a6c:	4639      	mov	r1, r7
   19a6e:	4630      	mov	r0, r6
   19a70:	f7fa f858 	bl	13b24 <bsd_os_timedwait>
   19a74:	682b      	ldr	r3, [r5, #0]
   19a76:	03d9      	lsls	r1, r3, #15
   19a78:	d5f7      	bpl.n	19a6a <gnss_interface_read+0x82>
   19a7a:	4604      	mov	r4, r0
   19a7c:	e7e4      	b.n	19a48 <gnss_interface_read+0x60>
   19a7e:	f244 0202 	movw	r2, #16386	; 0x4002
   19a82:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   19a86:	4293      	cmp	r3, r2
   19a88:	d042      	beq.n	19b10 <gnss_interface_read+0x128>
   19a8a:	f244 0201 	movw	r2, #16385	; 0x4001
   19a8e:	4293      	cmp	r3, r2
   19a90:	d056      	beq.n	19b40 <gnss_interface_read+0x158>
   19a92:	f244 0203 	movw	r2, #16387	; 0x4003
   19a96:	4293      	cmp	r3, r2
   19a98:	f040 81a5 	bne.w	19de6 <gnss_interface_read+0x3fe>
   19a9c:	2203      	movs	r2, #3
   19a9e:	2414      	movs	r4, #20
   19aa0:	9b08      	ldr	r3, [sp, #32]
   19aa2:	f888 2000 	strb.w	r2, [r8]
   19aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19aa8:	f8c8 3008 	str.w	r3, [r8, #8]
   19aac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19ab0:	e9c8 2303 	strd	r2, r3, [r8, #12]
   19ab4:	f8da 0000 	ldr.w	r0, [sl]
   19ab8:	6803      	ldr	r3, [r0, #0]
   19aba:	68db      	ldr	r3, [r3, #12]
   19abc:	4798      	blx	r3
   19abe:	2800      	cmp	r0, #0
   19ac0:	dd03      	ble.n	19aca <gnss_interface_read+0xe2>
   19ac2:	682b      	ldr	r3, [r5, #0]
   19ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19ac8:	602b      	str	r3, [r5, #0]
   19aca:	4620      	mov	r0, r4
   19acc:	b037      	add	sp, #220	; 0xdc
   19ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ad2:	f019 0f2a 	tst.w	r9, #42	; 0x2a
   19ad6:	d1a3      	bne.n	19a20 <gnss_interface_read+0x38>
   19ad8:	202d      	movs	r0, #45	; 0x2d
   19ada:	f7fa f8d9 	bl	13c90 <bsd_os_errno_set>
   19ade:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19ae2:	e7f2      	b.n	19aca <gnss_interface_read+0xe2>
   19ae4:	1c42      	adds	r2, r0, #1
   19ae6:	4603      	mov	r3, r0
   19ae8:	d1c9      	bne.n	19a7e <gnss_interface_read+0x96>
   19aea:	b93c      	cbnz	r4, 19afc <gnss_interface_read+0x114>
   19aec:	461c      	mov	r4, r3
   19aee:	2023      	movs	r0, #35	; 0x23
   19af0:	f7fa f8ce 	bl	13c90 <bsd_os_errno_set>
   19af4:	4620      	mov	r0, r4
   19af6:	b037      	add	sp, #220	; 0xdc
   19af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19afc:	9001      	str	r0, [sp, #4]
   19afe:	4620      	mov	r0, r4
   19b00:	f7fa f8c6 	bl	13c90 <bsd_os_errno_set>
   19b04:	9b01      	ldr	r3, [sp, #4]
   19b06:	461c      	mov	r4, r3
   19b08:	4620      	mov	r0, r4
   19b0a:	b037      	add	sp, #220	; 0xdc
   19b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b10:	a808      	add	r0, sp, #32
   19b12:	f7f3 fa11 	bl	cf38 <strlen>
   19b16:	2302      	movs	r3, #2
   19b18:	1c44      	adds	r4, r0, #1
   19b1a:	b2a4      	uxth	r4, r4
   19b1c:	f808 3b08 	strb.w	r3, [r8], #8
   19b20:	4622      	mov	r2, r4
   19b22:	a908      	add	r1, sp, #32
   19b24:	4640      	mov	r0, r8
   19b26:	f00d ff0e 	bl	27946 <memcpy>
   19b2a:	3408      	adds	r4, #8
   19b2c:	e7c2      	b.n	19ab4 <gnss_interface_read+0xcc>
   19b2e:	bf00      	nop
   19b30:	49765443 	.word	0x49765443
   19b34:	200233a8 	.word	0x200233a8
   19b38:	200205b4 	.word	0x200205b4
   19b3c:	200233b0 	.word	0x200233b0
   19b40:	2401      	movs	r4, #1
   19b42:	a809      	add	r0, sp, #36	; 0x24
   19b44:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   19b46:	e9c8 0102 	strd	r0, r1, [r8, #8]
   19b4a:	e9c8 2304 	strd	r2, r3, [r8, #16]
   19b4e:	990d      	ldr	r1, [sp, #52]	; 0x34
   19b50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19b52:	f888 4000 	strb.w	r4, [r8]
   19b56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19b58:	f8c8 1018 	str.w	r1, [r8, #24]
   19b5c:	9910      	ldr	r1, [sp, #64]	; 0x40
   19b5e:	f8c8 201c 	str.w	r2, [r8, #28]
   19b62:	f8c8 3020 	str.w	r3, [r8, #32]
   19b66:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   19b6a:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   19b6e:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   19b72:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   19b76:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   19b7a:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   19b7e:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   19b82:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   19b86:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   19b8a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   19b8e:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   19b92:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   19b96:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   19b9a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   19b9e:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   19ba2:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   19ba6:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   19baa:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   19bae:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   19bb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19bb4:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   19bb8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   19bbc:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   19bc0:	f3c3 210f 	ubfx	r1, r3, #8, #16
   19bc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   19bc6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   19bca:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   19bce:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   19bd2:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   19bd6:	f3c3 230f 	ubfx	r3, r3, #8, #16
   19bda:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   19bde:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   19be2:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   19be6:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   19bea:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   19bee:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   19bf2:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   19bf6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   19bfa:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   19bfe:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   19c02:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   19c06:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   19c0a:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   19c0e:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   19c12:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   19c16:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   19c1a:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   19c1e:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   19c22:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   19c26:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   19c2a:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   19c2e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   19c32:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   19c36:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   19c3a:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   19c3e:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   19c42:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   19c46:	9a22      	ldr	r2, [sp, #136]	; 0x88
   19c48:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   19c4c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   19c50:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   19c54:	f3c2 220f 	ubfx	r2, r2, #8, #16
   19c58:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   19c5c:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   19c60:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   19c64:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   19c68:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   19c6c:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   19c70:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   19c74:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   19c78:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   19c7c:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   19c80:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   19c84:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   19c88:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   19c8c:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   19c90:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   19c94:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   19c98:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   19c9c:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   19ca0:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   19ca4:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   19ca8:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   19cac:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   19cb0:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   19cb4:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   19cb8:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   19cbc:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   19cc0:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   19cc4:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   19cc8:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   19ccc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   19cce:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   19cd2:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   19cd6:	f3c3 210f 	ubfx	r1, r3, #8, #16
   19cda:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   19cdc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   19ce0:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   19ce4:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   19ce8:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   19cec:	f3c3 230f 	ubfx	r3, r3, #8, #16
   19cf0:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   19cf4:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   19cf8:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   19cfc:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   19d00:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   19d04:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   19d08:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   19d0c:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   19d10:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   19d14:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   19d18:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   19d1c:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   19d20:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   19d24:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   19d28:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   19d2c:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   19d30:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   19d34:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   19d38:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   19d3c:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   19d40:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   19d44:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   19d48:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   19d4c:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   19d50:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   19d54:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   19d58:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   19d5c:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   19d60:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   19d62:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   19d66:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   19d6a:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   19d6e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   19d72:	f3c2 220f 	ubfx	r2, r2, #8, #16
   19d76:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   19d7a:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   19d7e:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   19d82:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   19d86:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   19d8a:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   19d8e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   19d92:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   19d96:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   19d9a:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   19d9e:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   19da2:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   19da6:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   19daa:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   19dae:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   19db2:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   19db6:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   19dba:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   19dbe:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   19dc2:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   19dc6:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   19dca:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   19dce:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   19dd2:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   19dd6:	24d8      	movs	r4, #216	; 0xd8
   19dd8:	e66c      	b.n	19ab4 <gnss_interface_read+0xcc>
   19dda:	2039      	movs	r0, #57	; 0x39
   19ddc:	f7f9 ff58 	bl	13c90 <bsd_os_errno_set>
   19de0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19de4:	e671      	b.n	19aca <gnss_interface_read+0xe2>
   19de6:	2016      	movs	r0, #22
   19de8:	f7f9 ff52 	bl	13c90 <bsd_os_errno_set>
   19dec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19df0:	e66b      	b.n	19aca <gnss_interface_read+0xe2>
   19df2:	2009      	movs	r0, #9
   19df4:	f7f9 ff4c 	bl	13c90 <bsd_os_errno_set>
   19df8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19dfc:	e665      	b.n	19aca <gnss_interface_read+0xe2>
   19dfe:	bf00      	nop

00019e00 <gnss_interface_setopt>:
   19e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19e04:	4db3      	ldr	r5, [pc, #716]	; (1a0d4 <gnss_interface_setopt+0x2d4>)
   19e06:	b086      	sub	sp, #24
   19e08:	682c      	ldr	r4, [r5, #0]
   19e0a:	b2a4      	uxth	r4, r4
   19e0c:	2c02      	cmp	r4, #2
   19e0e:	d00d      	beq.n	19e2c <gnss_interface_setopt+0x2c>
   19e10:	2a08      	cmp	r2, #8
   19e12:	d00b      	beq.n	19e2c <gnss_interface_setopt+0x2c>
   19e14:	f1a2 040a 	sub.w	r4, r2, #10
   19e18:	2c01      	cmp	r4, #1
   19e1a:	d907      	bls.n	19e2c <gnss_interface_setopt+0x2c>
   19e1c:	200e      	movs	r0, #14
   19e1e:	f7f9 ff37 	bl	13c90 <bsd_os_errno_set>
   19e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19e26:	b006      	add	sp, #24
   19e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19e2c:	682c      	ldr	r4, [r5, #0]
   19e2e:	0264      	lsls	r4, r4, #9
   19e30:	f100 8149 	bmi.w	1a0c6 <gnss_interface_setopt+0x2c6>
   19e34:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   19e38:	f040 8139 	bne.w	1a0ae <gnss_interface_setopt+0x2ae>
   19e3c:	49a6      	ldr	r1, [pc, #664]	; (1a0d8 <gnss_interface_setopt+0x2d8>)
   19e3e:	4288      	cmp	r0, r1
   19e40:	f040 813b 	bne.w	1a0ba <gnss_interface_setopt+0x2ba>
   19e44:	f1a2 010a 	sub.w	r1, r2, #10
   19e48:	2901      	cmp	r1, #1
   19e4a:	d902      	bls.n	19e52 <gnss_interface_setopt+0x52>
   19e4c:	2b00      	cmp	r3, #0
   19e4e:	f000 8112 	beq.w	1a076 <gnss_interface_setopt+0x276>
   19e52:	3a01      	subs	r2, #1
   19e54:	2a0a      	cmp	r2, #10
   19e56:	f200 810e 	bhi.w	1a076 <gnss_interface_setopt+0x276>
   19e5a:	e8df f012 	tbh	[pc, r2, lsl #1]
   19e5e:	007f      	.short	0x007f
   19e60:	0098008c 	.word	0x0098008c
   19e64:	00ae00a2 	.word	0x00ae00a2
   19e68:	00c500b9 	.word	0x00c500b9
   19e6c:	00f300dd 	.word	0x00f300dd
   19e70:	000b00ff 	.word	0x000b00ff
   19e74:	682b      	ldr	r3, [r5, #0]
   19e76:	b29b      	uxth	r3, r3
   19e78:	2b04      	cmp	r3, #4
   19e7a:	d1cf      	bne.n	19e1c <gnss_interface_setopt+0x1c>
   19e7c:	2203      	movs	r2, #3
   19e7e:	f241 0604 	movw	r6, #4100	; 0x1004
   19e82:	2300      	movs	r3, #0
   19e84:	4637      	mov	r7, r6
   19e86:	f88d 2008 	strb.w	r2, [sp, #8]
   19e8a:	f88d 3009 	strb.w	r3, [sp, #9]
   19e8e:	f88d 300a 	strb.w	r3, [sp, #10]
   19e92:	f88d 300b 	strb.w	r3, [sp, #11]
   19e96:	f88d 300c 	strb.w	r3, [sp, #12]
   19e9a:	682b      	ldr	r3, [r5, #0]
   19e9c:	2112      	movs	r1, #18
   19e9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   19ea2:	4668      	mov	r0, sp
   19ea4:	602b      	str	r3, [r5, #0]
   19ea6:	f002 fa97 	bl	1c3d8 <rpc_gnss_client_request_alloc>
   19eaa:	4604      	mov	r4, r0
   19eac:	9800      	ldr	r0, [sp, #0]
   19eae:	2c00      	cmp	r4, #0
   19eb0:	f040 80e7 	bne.w	1a082 <gnss_interface_setopt+0x282>
   19eb4:	2800      	cmp	r0, #0
   19eb6:	f000 80eb 	beq.w	1a090 <gnss_interface_setopt+0x290>
   19eba:	2212      	movs	r2, #18
   19ebc:	f04f 0876 	mov.w	r8, #118	; 0x76
   19ec0:	f04f 0e49 	mov.w	lr, #73	; 0x49
   19ec4:	f04f 0a43 	mov.w	sl, #67	; 0x43
   19ec8:	f04f 0954 	mov.w	r9, #84	; 0x54
   19ecc:	f8df c210 	ldr.w	ip, [pc, #528]	; 1a0e0 <gnss_interface_setopt+0x2e0>
   19ed0:	a906      	add	r1, sp, #24
   19ed2:	f8bc 3000 	ldrh.w	r3, [ip]
   19ed6:	f880 800e 	strb.w	r8, [r0, #14]
   19eda:	3301      	adds	r3, #1
   19edc:	b29b      	uxth	r3, r3
   19ede:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   19ee2:	f841 6d14 	str.w	r6, [r1, #-20]!
   19ee6:	7144      	strb	r4, [r0, #5]
   19ee8:	7184      	strb	r4, [r0, #6]
   19eea:	71c4      	strb	r4, [r0, #7]
   19eec:	7204      	strb	r4, [r0, #8]
   19eee:	7244      	strb	r4, [r0, #9]
   19ef0:	7284      	strb	r4, [r0, #10]
   19ef2:	72c4      	strb	r4, [r0, #11]
   19ef4:	7102      	strb	r2, [r0, #4]
   19ef6:	f880 a00c 	strb.w	sl, [r0, #12]
   19efa:	f880 900d 	strb.w	r9, [r0, #13]
   19efe:	f880 e00f 	strb.w	lr, [r0, #15]
   19f02:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 1a0e4 <gnss_interface_setopt+0x2e4>
   19f06:	6800      	ldr	r0, [r0, #0]
   19f08:	f8ac 3000 	strh.w	r3, [ip]
   19f0c:	f00d fd1b 	bl	27946 <memcpy>
   19f10:	4639      	mov	r1, r7
   19f12:	9800      	ldr	r0, [sp, #0]
   19f14:	f8c8 4000 	str.w	r4, [r8]
   19f18:	f002 fa72 	bl	1c400 <rpc_gnss_client_request_send>
   19f1c:	2800      	cmp	r0, #0
   19f1e:	f040 80bc 	bne.w	1a09a <gnss_interface_setopt+0x29a>
   19f22:	4f6e      	ldr	r7, [pc, #440]	; (1a0dc <gnss_interface_setopt+0x2dc>)
   19f24:	4e6c      	ldr	r6, [pc, #432]	; (1a0d8 <gnss_interface_setopt+0x2d8>)
   19f26:	4639      	mov	r1, r7
   19f28:	4630      	mov	r0, r6
   19f2a:	f7f9 fdfb 	bl	13b24 <bsd_os_timedwait>
   19f2e:	682c      	ldr	r4, [r5, #0]
   19f30:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   19f34:	d1f7      	bne.n	19f26 <gnss_interface_setopt+0x126>
   19f36:	f8d8 0000 	ldr.w	r0, [r8]
   19f3a:	b118      	cbz	r0, 19f44 <gnss_interface_setopt+0x144>
   19f3c:	f002 fa7e 	bl	1c43c <rpc_gnss_client_data_free>
   19f40:	f8c8 4000 	str.w	r4, [r8]
   19f44:	682b      	ldr	r3, [r5, #0]
   19f46:	021b      	lsls	r3, r3, #8
   19f48:	f140 808f 	bpl.w	1a06a <gnss_interface_setopt+0x26a>
   19f4c:	2000      	movs	r0, #0
   19f4e:	682b      	ldr	r3, [r5, #0]
   19f50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19f54:	602b      	str	r3, [r5, #0]
   19f56:	b006      	add	sp, #24
   19f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19f5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19f5e:	2a02      	cmp	r2, #2
   19f60:	f040 8089 	bne.w	1a076 <gnss_interface_setopt+0x276>
   19f64:	2208      	movs	r2, #8
   19f66:	f241 1603 	movw	r6, #4355	; 0x1103
   19f6a:	881b      	ldrh	r3, [r3, #0]
   19f6c:	9202      	str	r2, [sp, #8]
   19f6e:	f8ad 300f 	strh.w	r3, [sp, #15]
   19f72:	4637      	mov	r7, r6
   19f74:	e791      	b.n	19e9a <gnss_interface_setopt+0x9a>
   19f76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19f78:	2a02      	cmp	r2, #2
   19f7a:	d17c      	bne.n	1a076 <gnss_interface_setopt+0x276>
   19f7c:	2210      	movs	r2, #16
   19f7e:	f241 1603 	movw	r6, #4355	; 0x1103
   19f82:	881b      	ldrh	r3, [r3, #0]
   19f84:	9202      	str	r2, [sp, #8]
   19f86:	f8ad 3011 	strh.w	r3, [sp, #17]
   19f8a:	4637      	mov	r7, r6
   19f8c:	e785      	b.n	19e9a <gnss_interface_setopt+0x9a>
   19f8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19f90:	2a01      	cmp	r2, #1
   19f92:	d170      	bne.n	1a076 <gnss_interface_setopt+0x276>
   19f94:	781b      	ldrb	r3, [r3, #0]
   19f96:	2b01      	cmp	r3, #1
   19f98:	d16d      	bne.n	1a076 <gnss_interface_setopt+0x276>
   19f9a:	f241 1603 	movw	r6, #4355	; 0x1103
   19f9e:	4637      	mov	r7, r6
   19fa0:	e77b      	b.n	19e9a <gnss_interface_setopt+0x9a>
   19fa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19fa4:	2a02      	cmp	r2, #2
   19fa6:	d166      	bne.n	1a076 <gnss_interface_setopt+0x276>
   19fa8:	2220      	movs	r2, #32
   19faa:	f241 1603 	movw	r6, #4355	; 0x1103
   19fae:	881b      	ldrh	r3, [r3, #0]
   19fb0:	9202      	str	r2, [sp, #8]
   19fb2:	f8ad 3013 	strh.w	r3, [sp, #19]
   19fb6:	4637      	mov	r7, r6
   19fb8:	e76f      	b.n	19e9a <gnss_interface_setopt+0x9a>
   19fba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19fbc:	2a01      	cmp	r2, #1
   19fbe:	d15a      	bne.n	1a076 <gnss_interface_setopt+0x276>
   19fc0:	f241 1603 	movw	r6, #4355	; 0x1103
   19fc4:	781b      	ldrb	r3, [r3, #0]
   19fc6:	9202      	str	r2, [sp, #8]
   19fc8:	f88d 300c 	strb.w	r3, [sp, #12]
   19fcc:	4637      	mov	r7, r6
   19fce:	e764      	b.n	19e9a <gnss_interface_setopt+0x9a>
   19fd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19fd2:	2a01      	cmp	r2, #1
   19fd4:	d14f      	bne.n	1a076 <gnss_interface_setopt+0x276>
   19fd6:	2202      	movs	r2, #2
   19fd8:	f241 1603 	movw	r6, #4355	; 0x1103
   19fdc:	781b      	ldrb	r3, [r3, #0]
   19fde:	9202      	str	r2, [sp, #8]
   19fe0:	f88d 300d 	strb.w	r3, [sp, #13]
   19fe4:	4637      	mov	r7, r6
   19fe6:	e758      	b.n	19e9a <gnss_interface_setopt+0x9a>
   19fe8:	682a      	ldr	r2, [r5, #0]
   19fea:	b292      	uxth	r2, r2
   19fec:	2a02      	cmp	r2, #2
   19fee:	f47f af15 	bne.w	19e1c <gnss_interface_setopt+0x1c>
   19ff2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19ff4:	2a04      	cmp	r2, #4
   19ff6:	d13e      	bne.n	1a076 <gnss_interface_setopt+0x276>
   19ff8:	2101      	movs	r1, #1
   19ffa:	f241 0604 	movw	r6, #4100	; 0x1004
   19ffe:	682a      	ldr	r2, [r5, #0]
   1a000:	6818      	ldr	r0, [r3, #0]
   1a002:	0c13      	lsrs	r3, r2, #16
   1a004:	041b      	lsls	r3, r3, #16
   1a006:	f043 0303 	orr.w	r3, r3, #3
   1a00a:	f8cd 0009 	str.w	r0, [sp, #9]
   1a00e:	602b      	str	r3, [r5, #0]
   1a010:	f88d 1008 	strb.w	r1, [sp, #8]
   1a014:	4637      	mov	r7, r6
   1a016:	e740      	b.n	19e9a <gnss_interface_setopt+0x9a>
   1a018:	682a      	ldr	r2, [r5, #0]
   1a01a:	b292      	uxth	r2, r2
   1a01c:	2a04      	cmp	r2, #4
   1a01e:	d004      	beq.n	1a02a <gnss_interface_setopt+0x22a>
   1a020:	682a      	ldr	r2, [r5, #0]
   1a022:	b292      	uxth	r2, r2
   1a024:	2a02      	cmp	r2, #2
   1a026:	f47f aef9 	bne.w	19e1c <gnss_interface_setopt+0x1c>
   1a02a:	2200      	movs	r2, #0
   1a02c:	f88d 2008 	strb.w	r2, [sp, #8]
   1a030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a032:	2a04      	cmp	r2, #4
   1a034:	d11f      	bne.n	1a076 <gnss_interface_setopt+0x276>
   1a036:	f241 0604 	movw	r6, #4100	; 0x1004
   1a03a:	681b      	ldr	r3, [r3, #0]
   1a03c:	4637      	mov	r7, r6
   1a03e:	f8cd 3009 	str.w	r3, [sp, #9]
   1a042:	e72a      	b.n	19e9a <gnss_interface_setopt+0x9a>
   1a044:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a046:	2a01      	cmp	r2, #1
   1a048:	d115      	bne.n	1a076 <gnss_interface_setopt+0x276>
   1a04a:	2240      	movs	r2, #64	; 0x40
   1a04c:	f241 1603 	movw	r6, #4355	; 0x1103
   1a050:	781b      	ldrb	r3, [r3, #0]
   1a052:	9202      	str	r2, [sp, #8]
   1a054:	f88d 3015 	strb.w	r3, [sp, #21]
   1a058:	4637      	mov	r7, r6
   1a05a:	e71e      	b.n	19e9a <gnss_interface_setopt+0x9a>
   1a05c:	682b      	ldr	r3, [r5, #0]
   1a05e:	b29b      	uxth	r3, r3
   1a060:	2b04      	cmp	r3, #4
   1a062:	f47f aedb 	bne.w	19e1c <gnss_interface_setopt+0x1c>
   1a066:	2202      	movs	r2, #2
   1a068:	e709      	b.n	19e7e <gnss_interface_setopt+0x7e>
   1a06a:	200e      	movs	r0, #14
   1a06c:	f7f9 fe10 	bl	13c90 <bsd_os_errno_set>
   1a070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a074:	e76b      	b.n	19f4e <gnss_interface_setopt+0x14e>
   1a076:	2016      	movs	r0, #22
   1a078:	f7f9 fe0a 	bl	13c90 <bsd_os_errno_set>
   1a07c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a080:	e6d1      	b.n	19e26 <gnss_interface_setopt+0x26>
   1a082:	b128      	cbz	r0, 1a090 <gnss_interface_setopt+0x290>
   1a084:	6803      	ldr	r3, [r0, #0]
   1a086:	b11b      	cbz	r3, 1a090 <gnss_interface_setopt+0x290>
   1a088:	4618      	mov	r0, r3
   1a08a:	f002 f9d7 	bl	1c43c <rpc_gnss_client_data_free>
   1a08e:	9800      	ldr	r0, [sp, #0]
   1a090:	f002 f9cc 	bl	1c42c <rpc_gnss_client_message_free>
   1a094:	2023      	movs	r0, #35	; 0x23
   1a096:	f7f9 fdfb 	bl	13c90 <bsd_os_errno_set>
   1a09a:	682b      	ldr	r3, [r5, #0]
   1a09c:	200e      	movs	r0, #14
   1a09e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1a0a2:	602b      	str	r3, [r5, #0]
   1a0a4:	f7f9 fdf4 	bl	13c90 <bsd_os_errno_set>
   1a0a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a0ac:	e6bb      	b.n	19e26 <gnss_interface_setopt+0x26>
   1a0ae:	202a      	movs	r0, #42	; 0x2a
   1a0b0:	f7f9 fdee 	bl	13c90 <bsd_os_errno_set>
   1a0b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a0b8:	e6b5      	b.n	19e26 <gnss_interface_setopt+0x26>
   1a0ba:	2009      	movs	r0, #9
   1a0bc:	f7f9 fde8 	bl	13c90 <bsd_os_errno_set>
   1a0c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a0c4:	e6af      	b.n	19e26 <gnss_interface_setopt+0x26>
   1a0c6:	2073      	movs	r0, #115	; 0x73
   1a0c8:	f7f9 fde2 	bl	13c90 <bsd_os_errno_set>
   1a0cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a0d0:	e6a9      	b.n	19e26 <gnss_interface_setopt+0x26>
   1a0d2:	bf00      	nop
   1a0d4:	200233a8 	.word	0x200233a8
   1a0d8:	49765443 	.word	0x49765443
   1a0dc:	200205b4 	.word	0x200205b4
   1a0e0:	200281ae 	.word	0x200281ae
   1a0e4:	200233ac 	.word	0x200233ac

0001a0e8 <gnss_interface_getopt>:
   1a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0ec:	4c81      	ldr	r4, [pc, #516]	; (1a2f4 <gnss_interface_getopt+0x20c>)
   1a0ee:	b087      	sub	sp, #28
   1a0f0:	6825      	ldr	r5, [r4, #0]
   1a0f2:	4698      	mov	r8, r3
   1a0f4:	b2ad      	uxth	r5, r5
   1a0f6:	2d02      	cmp	r5, #2
   1a0f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a0fa:	f040 80dd 	bne.w	1a2b8 <gnss_interface_getopt+0x1d0>
   1a0fe:	6825      	ldr	r5, [r4, #0]
   1a100:	03ee      	lsls	r6, r5, #15
   1a102:	f100 80eb 	bmi.w	1a2dc <gnss_interface_getopt+0x1f4>
   1a106:	6825      	ldr	r5, [r4, #0]
   1a108:	01ed      	lsls	r5, r5, #7
   1a10a:	f100 80ed 	bmi.w	1a2e8 <gnss_interface_getopt+0x200>
   1a10e:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1a112:	f040 80d7 	bne.w	1a2c4 <gnss_interface_getopt+0x1dc>
   1a116:	4978      	ldr	r1, [pc, #480]	; (1a2f8 <gnss_interface_getopt+0x210>)
   1a118:	4288      	cmp	r0, r1
   1a11a:	f040 80d9 	bne.w	1a2d0 <gnss_interface_getopt+0x1e8>
   1a11e:	f1b8 0f00 	cmp.w	r8, #0
   1a122:	d00b      	beq.n	1a13c <gnss_interface_getopt+0x54>
   1a124:	b153      	cbz	r3, 1a13c <gnss_interface_getopt+0x54>
   1a126:	1e57      	subs	r7, r2, #1
   1a128:	2f05      	cmp	r7, #5
   1a12a:	d807      	bhi.n	1a13c <gnss_interface_getopt+0x54>
   1a12c:	e8df f007 	tbb	[pc, r7]
   1a130:	0f030f0f 	.word	0x0f030f0f
   1a134:	0303      	.short	0x0303
   1a136:	681b      	ldr	r3, [r3, #0]
   1a138:	2b01      	cmp	r3, #1
   1a13a:	d00b      	beq.n	1a154 <gnss_interface_getopt+0x6c>
   1a13c:	2016      	movs	r0, #22
   1a13e:	f7f9 fda7 	bl	13c90 <bsd_os_errno_set>
   1a142:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a146:	4628      	mov	r0, r5
   1a148:	b007      	add	sp, #28
   1a14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a14e:	681b      	ldr	r3, [r3, #0]
   1a150:	2b02      	cmp	r3, #2
   1a152:	d1f3      	bne.n	1a13c <gnss_interface_getopt+0x54>
   1a154:	6823      	ldr	r3, [r4, #0]
   1a156:	2212      	movs	r2, #18
   1a158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1a15c:	2100      	movs	r1, #0
   1a15e:	a801      	add	r0, sp, #4
   1a160:	6023      	str	r3, [r4, #0]
   1a162:	f00d fc2a 	bl	279ba <memset>
   1a166:	2112      	movs	r1, #18
   1a168:	4668      	mov	r0, sp
   1a16a:	f002 f935 	bl	1c3d8 <rpc_gnss_client_request_alloc>
   1a16e:	4605      	mov	r5, r0
   1a170:	9800      	ldr	r0, [sp, #0]
   1a172:	2d00      	cmp	r5, #0
   1a174:	f040 808a 	bne.w	1a28c <gnss_interface_getopt+0x1a4>
   1a178:	2800      	cmp	r0, #0
   1a17a:	f000 808e 	beq.w	1a29a <gnss_interface_getopt+0x1b2>
   1a17e:	f241 1602 	movw	r6, #4354	; 0x1102
   1a182:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1a186:	2212      	movs	r2, #18
   1a188:	f04f 0976 	mov.w	r9, #118	; 0x76
   1a18c:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1a190:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1a194:	f8df c168 	ldr.w	ip, [pc, #360]	; 1a300 <gnss_interface_getopt+0x218>
   1a198:	f880 e00f 	strb.w	lr, [r0, #15]
   1a19c:	f8bc 3000 	ldrh.w	r3, [ip]
   1a1a0:	f880 900e 	strb.w	r9, [r0, #14]
   1a1a4:	3301      	adds	r3, #1
   1a1a6:	b29b      	uxth	r3, r3
   1a1a8:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   1a1ac:	f8cd e004 	str.w	lr, [sp, #4]
   1a1b0:	7145      	strb	r5, [r0, #5]
   1a1b2:	7185      	strb	r5, [r0, #6]
   1a1b4:	71c5      	strb	r5, [r0, #7]
   1a1b6:	7205      	strb	r5, [r0, #8]
   1a1b8:	7245      	strb	r5, [r0, #9]
   1a1ba:	7285      	strb	r5, [r0, #10]
   1a1bc:	72c5      	strb	r5, [r0, #11]
   1a1be:	a901      	add	r1, sp, #4
   1a1c0:	7102      	strb	r2, [r0, #4]
   1a1c2:	f880 b00c 	strb.w	fp, [r0, #12]
   1a1c6:	f880 a00d 	strb.w	sl, [r0, #13]
   1a1ca:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1a304 <gnss_interface_getopt+0x21c>
   1a1ce:	6800      	ldr	r0, [r0, #0]
   1a1d0:	f8ac 3000 	strh.w	r3, [ip]
   1a1d4:	f00d fbb7 	bl	27946 <memcpy>
   1a1d8:	4631      	mov	r1, r6
   1a1da:	9800      	ldr	r0, [sp, #0]
   1a1dc:	f8c9 5000 	str.w	r5, [r9]
   1a1e0:	f002 f90e 	bl	1c400 <rpc_gnss_client_request_send>
   1a1e4:	2800      	cmp	r0, #0
   1a1e6:	d15d      	bne.n	1a2a4 <gnss_interface_getopt+0x1bc>
   1a1e8:	4e44      	ldr	r6, [pc, #272]	; (1a2fc <gnss_interface_getopt+0x214>)
   1a1ea:	4d43      	ldr	r5, [pc, #268]	; (1a2f8 <gnss_interface_getopt+0x210>)
   1a1ec:	4631      	mov	r1, r6
   1a1ee:	4628      	mov	r0, r5
   1a1f0:	f7f9 fc98 	bl	13b24 <bsd_os_timedwait>
   1a1f4:	6823      	ldr	r3, [r4, #0]
   1a1f6:	01db      	lsls	r3, r3, #7
   1a1f8:	d4f8      	bmi.n	1a1ec <gnss_interface_getopt+0x104>
   1a1fa:	f8d9 0000 	ldr.w	r0, [r9]
   1a1fe:	b1d8      	cbz	r0, 1a238 <gnss_interface_getopt+0x150>
   1a200:	6825      	ldr	r5, [r4, #0]
   1a202:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1a206:	d00f      	beq.n	1a228 <gnss_interface_getopt+0x140>
   1a208:	2f05      	cmp	r7, #5
   1a20a:	d837      	bhi.n	1a27c <gnss_interface_getopt+0x194>
   1a20c:	e8df f007 	tbb	[pc, r7]
   1a210:	2b26201a 	.word	0x2b26201a
   1a214:	0331      	.short	0x0331
   1a216:	2500      	movs	r5, #0
   1a218:	7b43      	ldrb	r3, [r0, #13]
   1a21a:	f888 3000 	strb.w	r3, [r8]
   1a21e:	f002 f90d 	bl	1c43c <rpc_gnss_client_data_free>
   1a222:	2300      	movs	r3, #0
   1a224:	f8c9 3000 	str.w	r3, [r9]
   1a228:	6823      	ldr	r3, [r4, #0]
   1a22a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1a22e:	6023      	str	r3, [r4, #0]
   1a230:	4628      	mov	r0, r5
   1a232:	b007      	add	sp, #28
   1a234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a238:	6823      	ldr	r3, [r4, #0]
   1a23a:	4605      	mov	r5, r0
   1a23c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1a240:	6023      	str	r3, [r4, #0]
   1a242:	e7f5      	b.n	1a230 <gnss_interface_getopt+0x148>
   1a244:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   1a248:	2500      	movs	r5, #0
   1a24a:	f8a8 3000 	strh.w	r3, [r8]
   1a24e:	e7e6      	b.n	1a21e <gnss_interface_getopt+0x136>
   1a250:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   1a254:	2500      	movs	r5, #0
   1a256:	f8a8 3000 	strh.w	r3, [r8]
   1a25a:	e7e0      	b.n	1a21e <gnss_interface_getopt+0x136>
   1a25c:	7b83      	ldrb	r3, [r0, #14]
   1a25e:	2500      	movs	r5, #0
   1a260:	f888 3000 	strb.w	r3, [r8]
   1a264:	e7db      	b.n	1a21e <gnss_interface_getopt+0x136>
   1a266:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1a26a:	2500      	movs	r5, #0
   1a26c:	f8a8 3000 	strh.w	r3, [r8]
   1a270:	e7d5      	b.n	1a21e <gnss_interface_getopt+0x136>
   1a272:	7b03      	ldrb	r3, [r0, #12]
   1a274:	2500      	movs	r5, #0
   1a276:	f888 3000 	strb.w	r3, [r8]
   1a27a:	e7d0      	b.n	1a21e <gnss_interface_getopt+0x136>
   1a27c:	2016      	movs	r0, #22
   1a27e:	f7f9 fd07 	bl	13c90 <bsd_os_errno_set>
   1a282:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a286:	f8d9 0000 	ldr.w	r0, [r9]
   1a28a:	e7c8      	b.n	1a21e <gnss_interface_getopt+0x136>
   1a28c:	b128      	cbz	r0, 1a29a <gnss_interface_getopt+0x1b2>
   1a28e:	6803      	ldr	r3, [r0, #0]
   1a290:	b11b      	cbz	r3, 1a29a <gnss_interface_getopt+0x1b2>
   1a292:	4618      	mov	r0, r3
   1a294:	f002 f8d2 	bl	1c43c <rpc_gnss_client_data_free>
   1a298:	9800      	ldr	r0, [sp, #0]
   1a29a:	f002 f8c7 	bl	1c42c <rpc_gnss_client_message_free>
   1a29e:	2023      	movs	r0, #35	; 0x23
   1a2a0:	f7f9 fcf6 	bl	13c90 <bsd_os_errno_set>
   1a2a4:	6823      	ldr	r3, [r4, #0]
   1a2a6:	200e      	movs	r0, #14
   1a2a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1a2ac:	6023      	str	r3, [r4, #0]
   1a2ae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a2b2:	f7f9 fced 	bl	13c90 <bsd_os_errno_set>
   1a2b6:	e746      	b.n	1a146 <gnss_interface_getopt+0x5e>
   1a2b8:	200e      	movs	r0, #14
   1a2ba:	f7f9 fce9 	bl	13c90 <bsd_os_errno_set>
   1a2be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a2c2:	e740      	b.n	1a146 <gnss_interface_getopt+0x5e>
   1a2c4:	202a      	movs	r0, #42	; 0x2a
   1a2c6:	f7f9 fce3 	bl	13c90 <bsd_os_errno_set>
   1a2ca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a2ce:	e73a      	b.n	1a146 <gnss_interface_getopt+0x5e>
   1a2d0:	2009      	movs	r0, #9
   1a2d2:	f7f9 fcdd 	bl	13c90 <bsd_os_errno_set>
   1a2d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a2da:	e734      	b.n	1a146 <gnss_interface_getopt+0x5e>
   1a2dc:	2005      	movs	r0, #5
   1a2de:	f7f9 fcd7 	bl	13c90 <bsd_os_errno_set>
   1a2e2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a2e6:	e72e      	b.n	1a146 <gnss_interface_getopt+0x5e>
   1a2e8:	2073      	movs	r0, #115	; 0x73
   1a2ea:	f7f9 fcd1 	bl	13c90 <bsd_os_errno_set>
   1a2ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a2f2:	e728      	b.n	1a146 <gnss_interface_getopt+0x5e>
   1a2f4:	200233a8 	.word	0x200233a8
   1a2f8:	49765443 	.word	0x49765443
   1a2fc:	200205b4 	.word	0x200205b4
   1a300:	200281ae 	.word	0x200281ae
   1a304:	200233ac 	.word	0x200233ac

0001a308 <gnss_interface_init>:
   1a308:	2100      	movs	r1, #0
   1a30a:	b538      	push	{r3, r4, r5, lr}
   1a30c:	4c09      	ldr	r4, [pc, #36]	; (1a334 <gnss_interface_init+0x2c>)
   1a30e:	4d0a      	ldr	r5, [pc, #40]	; (1a338 <gnss_interface_init+0x30>)
   1a310:	6822      	ldr	r2, [r4, #0]
   1a312:	480a      	ldr	r0, [pc, #40]	; (1a33c <gnss_interface_init+0x34>)
   1a314:	4b0a      	ldr	r3, [pc, #40]	; (1a340 <gnss_interface_init+0x38>)
   1a316:	402a      	ands	r2, r5
   1a318:	6022      	str	r2, [r4, #0]
   1a31a:	8001      	strh	r1, [r0, #0]
   1a31c:	6019      	str	r1, [r3, #0]
   1a31e:	f002 f855 	bl	1c3cc <rpc_gnss_client_init>
   1a322:	b928      	cbnz	r0, 1a330 <gnss_interface_init+0x28>
   1a324:	6823      	ldr	r3, [r4, #0]
   1a326:	402b      	ands	r3, r5
   1a328:	f043 0301 	orr.w	r3, r3, #1
   1a32c:	6023      	str	r3, [r4, #0]
   1a32e:	bd38      	pop	{r3, r4, r5, pc}
   1a330:	2003      	movs	r0, #3
   1a332:	bd38      	pop	{r3, r4, r5, pc}
   1a334:	200233a8 	.word	0x200233a8
   1a338:	ffff0000 	.word	0xffff0000
   1a33c:	200281ae 	.word	0x200281ae
   1a340:	200233ac 	.word	0x200233ac

0001a344 <gnss_interface_open>:
   1a344:	2902      	cmp	r1, #2
   1a346:	b510      	push	{r4, lr}
   1a348:	d121      	bne.n	1a38e <gnss_interface_open+0x4a>
   1a34a:	4c17      	ldr	r4, [pc, #92]	; (1a3a8 <gnss_interface_open+0x64>)
   1a34c:	6823      	ldr	r3, [r4, #0]
   1a34e:	b29b      	uxth	r3, r3
   1a350:	2b01      	cmp	r3, #1
   1a352:	d116      	bne.n	1a382 <gnss_interface_open+0x3e>
   1a354:	6823      	ldr	r3, [r4, #0]
   1a356:	4608      	mov	r0, r1
   1a358:	0c1b      	lsrs	r3, r3, #16
   1a35a:	041b      	lsls	r3, r3, #16
   1a35c:	f043 0302 	orr.w	r3, r3, #2
   1a360:	2200      	movs	r2, #0
   1a362:	4912      	ldr	r1, [pc, #72]	; (1a3ac <gnss_interface_open+0x68>)
   1a364:	6023      	str	r3, [r4, #0]
   1a366:	f002 f953 	bl	1c610 <packet_handler_create>
   1a36a:	4a11      	ldr	r2, [pc, #68]	; (1a3b0 <gnss_interface_open+0x6c>)
   1a36c:	6010      	str	r0, [r2, #0]
   1a36e:	b1a0      	cbz	r0, 1a39a <gnss_interface_open+0x56>
   1a370:	6823      	ldr	r3, [r4, #0]
   1a372:	6802      	ldr	r2, [r0, #0]
   1a374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1a378:	6812      	ldr	r2, [r2, #0]
   1a37a:	6023      	str	r3, [r4, #0]
   1a37c:	4790      	blx	r2
   1a37e:	480d      	ldr	r0, [pc, #52]	; (1a3b4 <gnss_interface_open+0x70>)
   1a380:	bd10      	pop	{r4, pc}
   1a382:	2005      	movs	r0, #5
   1a384:	f7f9 fc84 	bl	13c90 <bsd_os_errno_set>
   1a388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a38c:	bd10      	pop	{r4, pc}
   1a38e:	2029      	movs	r0, #41	; 0x29
   1a390:	f7f9 fc7e 	bl	13c90 <bsd_os_errno_set>
   1a394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a398:	bd10      	pop	{r4, pc}
   1a39a:	200e      	movs	r0, #14
   1a39c:	f7f9 fc78 	bl	13c90 <bsd_os_errno_set>
   1a3a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a3a4:	bd10      	pop	{r4, pc}
   1a3a6:	bf00      	nop
   1a3a8:	200233a8 	.word	0x200233a8
   1a3ac:	0001963d 	.word	0x0001963d
   1a3b0:	200233b0 	.word	0x200233b0
   1a3b4:	49765443 	.word	0x49765443

0001a3b8 <gnss_interface_close>:
   1a3b8:	b530      	push	{r4, r5, lr}
   1a3ba:	4b15      	ldr	r3, [pc, #84]	; (1a410 <gnss_interface_close+0x58>)
   1a3bc:	b085      	sub	sp, #20
   1a3be:	4298      	cmp	r0, r3
   1a3c0:	d11f      	bne.n	1a402 <gnss_interface_close+0x4a>
   1a3c2:	4c14      	ldr	r4, [pc, #80]	; (1a414 <gnss_interface_close+0x5c>)
   1a3c4:	6822      	ldr	r2, [r4, #0]
   1a3c6:	b292      	uxth	r2, r2
   1a3c8:	2a04      	cmp	r2, #4
   1a3ca:	d00f      	beq.n	1a3ec <gnss_interface_close+0x34>
   1a3cc:	4d12      	ldr	r5, [pc, #72]	; (1a418 <gnss_interface_close+0x60>)
   1a3ce:	6828      	ldr	r0, [r5, #0]
   1a3d0:	b118      	cbz	r0, 1a3da <gnss_interface_close+0x22>
   1a3d2:	f002 f93d 	bl	1c650 <packet_handler_delete>
   1a3d6:	2300      	movs	r3, #0
   1a3d8:	602b      	str	r3, [r5, #0]
   1a3da:	2000      	movs	r0, #0
   1a3dc:	6823      	ldr	r3, [r4, #0]
   1a3de:	0c1b      	lsrs	r3, r3, #16
   1a3e0:	041b      	lsls	r3, r3, #16
   1a3e2:	f043 0301 	orr.w	r3, r3, #1
   1a3e6:	6023      	str	r3, [r4, #0]
   1a3e8:	b005      	add	sp, #20
   1a3ea:	bd30      	pop	{r4, r5, pc}
   1a3ec:	2100      	movs	r1, #0
   1a3ee:	ab04      	add	r3, sp, #16
   1a3f0:	f843 1d04 	str.w	r1, [r3, #-4]!
   1a3f4:	9200      	str	r2, [sp, #0]
   1a3f6:	f44f 7101 	mov.w	r1, #516	; 0x204
   1a3fa:	2208      	movs	r2, #8
   1a3fc:	f001 fe66 	bl	1c0cc <nrf_setsockopt>
   1a400:	e7e4      	b.n	1a3cc <gnss_interface_close+0x14>
   1a402:	2009      	movs	r0, #9
   1a404:	f7f9 fc44 	bl	13c90 <bsd_os_errno_set>
   1a408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a40c:	e7ec      	b.n	1a3e8 <gnss_interface_close+0x30>
   1a40e:	bf00      	nop
   1a410:	49765443 	.word	0x49765443
   1a414:	200233a8 	.word	0x200233a8
   1a418:	200233b0 	.word	0x200233b0

0001a41c <rpc_logobj_client_evt_handler>:
   1a41c:	b120      	cbz	r0, 1a428 <rpc_logobj_client_evt_handler+0xc>
   1a41e:	f850 1b08 	ldr.w	r1, [r0], #8
   1a422:	0c09      	lsrs	r1, r1, #16
   1a424:	f7fb bb6c 	b.w	15b00 <logobj_event_handler>
   1a428:	4770      	bx	lr
   1a42a:	bf00      	nop

0001a42c <rpc_logobj_client_init>:
   1a42c:	4801      	ldr	r0, [pc, #4]	; (1a434 <rpc_logobj_client_init+0x8>)
   1a42e:	f7ff b847 	b.w	194c0 <rpc_client_register>
   1a432:	bf00      	nop
   1a434:	00028cf8 	.word	0x00028cf8

0001a438 <rpc_logobj_client_request_alloc>:
   1a438:	2300      	movs	r3, #0
   1a43a:	b510      	push	{r4, lr}
   1a43c:	b082      	sub	sp, #8
   1a43e:	9301      	str	r3, [sp, #4]
   1a440:	b961      	cbnz	r1, 1a45c <rpc_logobj_client_request_alloc+0x24>
   1a442:	b170      	cbz	r0, 1a462 <rpc_logobj_client_request_alloc+0x2a>
   1a444:	4604      	mov	r4, r0
   1a446:	aa01      	add	r2, sp, #4
   1a448:	2009      	movs	r0, #9
   1a44a:	f7ff f8b3 	bl	195b4 <rpc_message_alloc>
   1a44e:	b918      	cbnz	r0, 1a458 <rpc_logobj_client_request_alloc+0x20>
   1a450:	9b01      	ldr	r3, [sp, #4]
   1a452:	b10b      	cbz	r3, 1a458 <rpc_logobj_client_request_alloc+0x20>
   1a454:	3308      	adds	r3, #8
   1a456:	6023      	str	r3, [r4, #0]
   1a458:	b002      	add	sp, #8
   1a45a:	bd10      	pop	{r4, pc}
   1a45c:	200f      	movs	r0, #15
   1a45e:	b002      	add	sp, #8
   1a460:	bd10      	pop	{r4, pc}
   1a462:	200e      	movs	r0, #14
   1a464:	b002      	add	sp, #8
   1a466:	bd10      	pop	{r4, pc}

0001a468 <rpc_logobj_client_request_send>:
   1a468:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1a46c:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1a470:	d10b      	bne.n	1a48a <rpc_logobj_client_request_send+0x22>
   1a472:	b160      	cbz	r0, 1a48e <rpc_logobj_client_request_send+0x26>
   1a474:	4603      	mov	r3, r0
   1a476:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1a47a:	2009      	movs	r0, #9
   1a47c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1a480:	f843 1d08 	str.w	r1, [r3, #-8]!
   1a484:	4619      	mov	r1, r3
   1a486:	f7ff b885 	b.w	19594 <rpc_message_send>
   1a48a:	200f      	movs	r0, #15
   1a48c:	4770      	bx	lr
   1a48e:	200e      	movs	r0, #14
   1a490:	4770      	bx	lr
   1a492:	bf00      	nop

0001a494 <rpc_logobj_client_message_free>:
   1a494:	b120      	cbz	r0, 1a4a0 <rpc_logobj_client_message_free+0xc>
   1a496:	f1a0 0108 	sub.w	r1, r0, #8
   1a49a:	2009      	movs	r0, #9
   1a49c:	f7ff b8b6 	b.w	1960c <rpc_message_free>
   1a4a0:	200e      	movs	r0, #14
   1a4a2:	4770      	bx	lr

0001a4a4 <rpc_logobj_client_data_free>:
   1a4a4:	b118      	cbz	r0, 1a4ae <rpc_logobj_client_data_free+0xa>
   1a4a6:	4601      	mov	r1, r0
   1a4a8:	2009      	movs	r0, #9
   1a4aa:	f7ff b8bb 	b.w	19624 <rpc_message_data_free>
   1a4ae:	200e      	movs	r0, #14
   1a4b0:	4770      	bx	lr
   1a4b2:	bf00      	nop

0001a4b4 <dfu_client_event_handler>:
   1a4b4:	f850 1b08 	ldr.w	r1, [r0], #8
   1a4b8:	0c09      	lsrs	r1, r1, #16
   1a4ba:	f002 bdcf 	b.w	1d05c <rpc_dfu_event_handler>
   1a4be:	bf00      	nop

0001a4c0 <rpc_dfu_client_init>:
   1a4c0:	4801      	ldr	r0, [pc, #4]	; (1a4c8 <rpc_dfu_client_init+0x8>)
   1a4c2:	f7fe bffd 	b.w	194c0 <rpc_client_register>
   1a4c6:	bf00      	nop
   1a4c8:	00028d08 	.word	0x00028d08

0001a4cc <rpc_dfu_client_request_alloc>:
   1a4cc:	2300      	movs	r3, #0
   1a4ce:	b510      	push	{r4, lr}
   1a4d0:	b082      	sub	sp, #8
   1a4d2:	9301      	str	r3, [sp, #4]
   1a4d4:	b158      	cbz	r0, 1a4ee <rpc_dfu_client_request_alloc+0x22>
   1a4d6:	4604      	mov	r4, r0
   1a4d8:	aa01      	add	r2, sp, #4
   1a4da:	2006      	movs	r0, #6
   1a4dc:	f7ff f86a 	bl	195b4 <rpc_message_alloc>
   1a4e0:	b918      	cbnz	r0, 1a4ea <rpc_dfu_client_request_alloc+0x1e>
   1a4e2:	9b01      	ldr	r3, [sp, #4]
   1a4e4:	b10b      	cbz	r3, 1a4ea <rpc_dfu_client_request_alloc+0x1e>
   1a4e6:	3308      	adds	r3, #8
   1a4e8:	6023      	str	r3, [r4, #0]
   1a4ea:	b002      	add	sp, #8
   1a4ec:	bd10      	pop	{r4, pc}
   1a4ee:	2007      	movs	r0, #7
   1a4f0:	b002      	add	sp, #8
   1a4f2:	bd10      	pop	{r4, pc}

0001a4f4 <rpc_dfu_client_request_send>:
   1a4f4:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   1a4f8:	d10b      	bne.n	1a512 <rpc_dfu_client_request_send+0x1e>
   1a4fa:	b160      	cbz	r0, 1a516 <rpc_dfu_client_request_send+0x22>
   1a4fc:	4603      	mov	r3, r0
   1a4fe:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1a502:	2006      	movs	r0, #6
   1a504:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1a508:	f843 1d08 	str.w	r1, [r3, #-8]!
   1a50c:	4619      	mov	r1, r3
   1a50e:	f7ff b841 	b.w	19594 <rpc_message_send>
   1a512:	200f      	movs	r0, #15
   1a514:	4770      	bx	lr
   1a516:	2007      	movs	r0, #7
   1a518:	4770      	bx	lr
   1a51a:	bf00      	nop

0001a51c <rpc_dfu_client_message_free>:
   1a51c:	b120      	cbz	r0, 1a528 <rpc_dfu_client_message_free+0xc>
   1a51e:	f1a0 0108 	sub.w	r1, r0, #8
   1a522:	2006      	movs	r0, #6
   1a524:	f7ff b872 	b.w	1960c <rpc_message_free>
   1a528:	2007      	movs	r0, #7
   1a52a:	4770      	bx	lr

0001a52c <rpc_dfu_client_data_free>:
   1a52c:	b118      	cbz	r0, 1a536 <rpc_dfu_client_data_free+0xa>
   1a52e:	4601      	mov	r1, r0
   1a530:	2006      	movs	r0, #6
   1a532:	f7ff b877 	b.w	19624 <rpc_message_data_free>
   1a536:	2007      	movs	r0, #7
   1a538:	4770      	bx	lr
   1a53a:	bf00      	nop

0001a53c <packet_free_cb>:
   1a53c:	6800      	ldr	r0, [r0, #0]
   1a53e:	f003 bb27 	b.w	1db90 <rpc_at_client_data_free>
   1a542:	bf00      	nop

0001a544 <at_interface_write>:
   1a544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a548:	b083      	sub	sp, #12
   1a54a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1a54c:	2c00      	cmp	r4, #0
   1a54e:	d166      	bne.n	1a61e <at_interface_write+0xda>
   1a550:	4688      	mov	r8, r1
   1a552:	4615      	mov	r5, r2
   1a554:	461e      	mov	r6, r3
   1a556:	4607      	mov	r7, r0
   1a558:	f003 f9b8 	bl	1d8cc <interface_socket_from_handle_get>
   1a55c:	4604      	mov	r4, r0
   1a55e:	2e00      	cmp	r6, #0
   1a560:	d137      	bne.n	1a5d2 <at_interface_write+0x8e>
   1a562:	2800      	cmp	r0, #0
   1a564:	d061      	beq.n	1a62a <at_interface_write+0xe6>
   1a566:	6803      	ldr	r3, [r0, #0]
   1a568:	039b      	lsls	r3, r3, #14
   1a56a:	d55e      	bpl.n	1a62a <at_interface_write+0xe6>
   1a56c:	6803      	ldr	r3, [r0, #0]
   1a56e:	4629      	mov	r1, r5
   1a570:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1a574:	6003      	str	r3, [r0, #0]
   1a576:	6803      	ldr	r3, [r0, #0]
   1a578:	4668      	mov	r0, sp
   1a57a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1a57e:	6023      	str	r3, [r4, #0]
   1a580:	f003 fadc 	bl	1db3c <rpc_at_client_request_alloc>
   1a584:	4606      	mov	r6, r0
   1a586:	4638      	mov	r0, r7
   1a588:	f003 f9a0 	bl	1d8cc <interface_socket_from_handle_get>
   1a58c:	4681      	mov	r9, r0
   1a58e:	2e00      	cmp	r6, #0
   1a590:	d13f      	bne.n	1a612 <at_interface_write+0xce>
   1a592:	2304      	movs	r3, #4
   1a594:	9800      	ldr	r0, [sp, #0]
   1a596:	7203      	strb	r3, [r0, #8]
   1a598:	7246      	strb	r6, [r0, #9]
   1a59a:	7286      	strb	r6, [r0, #10]
   1a59c:	72c6      	strb	r6, [r0, #11]
   1a59e:	60c7      	str	r7, [r0, #12]
   1a5a0:	b9fd      	cbnz	r5, 1a5e2 <at_interface_write+0x9e>
   1a5a2:	2101      	movs	r1, #1
   1a5a4:	f003 fade 	bl	1db64 <rpc_at_client_request_send>
   1a5a8:	bb50      	cbnz	r0, 1a600 <at_interface_write+0xbc>
   1a5aa:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   1a5ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a5b2:	2900      	cmp	r1, #0
   1a5b4:	bf08      	it	eq
   1a5b6:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   1a5ba:	ab02      	add	r3, sp, #8
   1a5bc:	f843 1d04 	str.w	r1, [r3, #-4]!
   1a5c0:	4638      	mov	r0, r7
   1a5c2:	4611      	mov	r1, r2
   1a5c4:	f003 f902 	bl	1d7cc <interface_socket_wait>
   1a5c8:	b9f0      	cbnz	r0, 1a608 <at_interface_write+0xc4>
   1a5ca:	4628      	mov	r0, r5
   1a5cc:	b003      	add	sp, #12
   1a5ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a5d2:	b360      	cbz	r0, 1a62e <at_interface_write+0xea>
   1a5d4:	6803      	ldr	r3, [r0, #0]
   1a5d6:	202d      	movs	r0, #45	; 0x2d
   1a5d8:	f7f9 fb5a 	bl	13c90 <bsd_os_errno_set>
   1a5dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a5e0:	e7f4      	b.n	1a5cc <at_interface_write+0x88>
   1a5e2:	4641      	mov	r1, r8
   1a5e4:	6800      	ldr	r0, [r0, #0]
   1a5e6:	462a      	mov	r2, r5
   1a5e8:	f00d f9ad 	bl	27946 <memcpy>
   1a5ec:	2101      	movs	r1, #1
   1a5ee:	9800      	ldr	r0, [sp, #0]
   1a5f0:	f003 fab8 	bl	1db64 <rpc_at_client_request_send>
   1a5f4:	2800      	cmp	r0, #0
   1a5f6:	d0d8      	beq.n	1a5aa <at_interface_write+0x66>
   1a5f8:	9b00      	ldr	r3, [sp, #0]
   1a5fa:	6818      	ldr	r0, [r3, #0]
   1a5fc:	f003 fac8 	bl	1db90 <rpc_at_client_data_free>
   1a600:	9800      	ldr	r0, [sp, #0]
   1a602:	f003 fabd 	bl	1db80 <rpc_at_client_message_free>
   1a606:	2023      	movs	r0, #35	; 0x23
   1a608:	6823      	ldr	r3, [r4, #0]
   1a60a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1a60e:	6023      	str	r3, [r4, #0]
   1a610:	e7e2      	b.n	1a5d8 <at_interface_write+0x94>
   1a612:	6823      	ldr	r3, [r4, #0]
   1a614:	200c      	movs	r0, #12
   1a616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1a61a:	6023      	str	r3, [r4, #0]
   1a61c:	e7dc      	b.n	1a5d8 <at_interface_write+0x94>
   1a61e:	2038      	movs	r0, #56	; 0x38
   1a620:	f7f9 fb36 	bl	13c90 <bsd_os_errno_set>
   1a624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a628:	e7d0      	b.n	1a5cc <at_interface_write+0x88>
   1a62a:	2016      	movs	r0, #22
   1a62c:	e7d4      	b.n	1a5d8 <at_interface_write+0x94>
   1a62e:	202d      	movs	r0, #45	; 0x2d
   1a630:	e7d2      	b.n	1a5d8 <at_interface_write+0x94>
   1a632:	bf00      	nop

0001a634 <at_interface_init>:
   1a634:	b508      	push	{r3, lr}
   1a636:	f003 fa7b 	bl	1db30 <rpc_at_client_init>
   1a63a:	b910      	cbnz	r0, 1a642 <at_interface_init+0xe>
   1a63c:	2201      	movs	r2, #1
   1a63e:	4b01      	ldr	r3, [pc, #4]	; (1a644 <at_interface_init+0x10>)
   1a640:	701a      	strb	r2, [r3, #0]
   1a642:	bd08      	pop	{r3, pc}
   1a644:	2002af31 	.word	0x2002af31

0001a648 <at_interface_open>:
   1a648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a64c:	2600      	movs	r6, #0
   1a64e:	4b2e      	ldr	r3, [pc, #184]	; (1a708 <at_interface_open+0xc0>)
   1a650:	b084      	sub	sp, #16
   1a652:	781b      	ldrb	r3, [r3, #0]
   1a654:	9601      	str	r6, [sp, #4]
   1a656:	2b00      	cmp	r3, #0
   1a658:	d050      	beq.n	1a6fc <at_interface_open+0xb4>
   1a65a:	2902      	cmp	r1, #2
   1a65c:	460d      	mov	r5, r1
   1a65e:	d147      	bne.n	1a6f0 <at_interface_open+0xa8>
   1a660:	4680      	mov	r8, r0
   1a662:	4617      	mov	r7, r2
   1a664:	a801      	add	r0, sp, #4
   1a666:	4a29      	ldr	r2, [pc, #164]	; (1a70c <at_interface_open+0xc4>)
   1a668:	f002 fffe 	bl	1d668 <interface_socket_allocate>
   1a66c:	9b01      	ldr	r3, [sp, #4]
   1a66e:	4604      	mov	r4, r0
   1a670:	b35b      	cbz	r3, 1a6ca <at_interface_open+0x82>
   1a672:	615f      	str	r7, [r3, #20]
   1a674:	4631      	mov	r1, r6
   1a676:	e9c3 8503 	strd	r8, r5, [r3, #12]
   1a67a:	a802      	add	r0, sp, #8
   1a67c:	f003 fa5e 	bl	1db3c <rpc_at_client_request_alloc>
   1a680:	4606      	mov	r6, r0
   1a682:	4620      	mov	r0, r4
   1a684:	f003 f922 	bl	1d8cc <interface_socket_from_handle_get>
   1a688:	4607      	mov	r7, r0
   1a68a:	bb16      	cbnz	r6, 1a6d2 <at_interface_open+0x8a>
   1a68c:	2304      	movs	r3, #4
   1a68e:	9802      	ldr	r0, [sp, #8]
   1a690:	2105      	movs	r1, #5
   1a692:	7203      	strb	r3, [r0, #8]
   1a694:	7246      	strb	r6, [r0, #9]
   1a696:	7286      	strb	r6, [r0, #10]
   1a698:	72c6      	strb	r6, [r0, #11]
   1a69a:	60c4      	str	r4, [r0, #12]
   1a69c:	f003 fa62 	bl	1db64 <rpc_at_client_request_send>
   1a6a0:	bb08      	cbnz	r0, 1a6e6 <at_interface_open+0x9e>
   1a6a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1a6a4:	ab04      	add	r3, sp, #16
   1a6a6:	2a00      	cmp	r2, #0
   1a6a8:	bf08      	it	eq
   1a6aa:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1a6ae:	4629      	mov	r1, r5
   1a6b0:	f843 2d04 	str.w	r2, [r3, #-4]!
   1a6b4:	4620      	mov	r0, r4
   1a6b6:	462a      	mov	r2, r5
   1a6b8:	f003 f888 	bl	1d7cc <interface_socket_wait>
   1a6bc:	4605      	mov	r5, r0
   1a6be:	b948      	cbnz	r0, 1a6d4 <at_interface_open+0x8c>
   1a6c0:	9a01      	ldr	r2, [sp, #4]
   1a6c2:	6813      	ldr	r3, [r2, #0]
   1a6c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1a6c8:	6013      	str	r3, [r2, #0]
   1a6ca:	4620      	mov	r0, r4
   1a6cc:	b004      	add	sp, #16
   1a6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a6d2:	250c      	movs	r5, #12
   1a6d4:	4620      	mov	r0, r4
   1a6d6:	f003 f82b 	bl	1d730 <interface_socket_free>
   1a6da:	4628      	mov	r0, r5
   1a6dc:	f7f9 fad8 	bl	13c90 <bsd_os_errno_set>
   1a6e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a6e4:	e7f1      	b.n	1a6ca <at_interface_open+0x82>
   1a6e6:	9802      	ldr	r0, [sp, #8]
   1a6e8:	f003 fa4a 	bl	1db80 <rpc_at_client_message_free>
   1a6ec:	2523      	movs	r5, #35	; 0x23
   1a6ee:	e7f1      	b.n	1a6d4 <at_interface_open+0x8c>
   1a6f0:	2029      	movs	r0, #41	; 0x29
   1a6f2:	f7f9 facd 	bl	13c90 <bsd_os_errno_set>
   1a6f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a6fa:	e7e6      	b.n	1a6ca <at_interface_open+0x82>
   1a6fc:	2005      	movs	r0, #5
   1a6fe:	f7f9 fac7 	bl	13c90 <bsd_os_errno_set>
   1a702:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a706:	e7e0      	b.n	1a6ca <at_interface_open+0x82>
   1a708:	2002af31 	.word	0x2002af31
   1a70c:	0001a53d 	.word	0x0001a53d

0001a710 <at_interface_close>:
   1a710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a714:	b082      	sub	sp, #8
   1a716:	4606      	mov	r6, r0
   1a718:	f003 f8d8 	bl	1d8cc <interface_socket_from_handle_get>
   1a71c:	2800      	cmp	r0, #0
   1a71e:	d044      	beq.n	1a7aa <at_interface_close+0x9a>
   1a720:	230d      	movs	r3, #13
   1a722:	6807      	ldr	r7, [r0, #0]
   1a724:	6003      	str	r3, [r0, #0]
   1a726:	6803      	ldr	r3, [r0, #0]
   1a728:	4604      	mov	r4, r0
   1a72a:	039b      	lsls	r3, r3, #14
   1a72c:	d42b      	bmi.n	1a786 <at_interface_close+0x76>
   1a72e:	2100      	movs	r1, #0
   1a730:	4668      	mov	r0, sp
   1a732:	f003 fa03 	bl	1db3c <rpc_at_client_request_alloc>
   1a736:	4605      	mov	r5, r0
   1a738:	4630      	mov	r0, r6
   1a73a:	f003 f8c7 	bl	1d8cc <interface_socket_from_handle_get>
   1a73e:	4680      	mov	r8, r0
   1a740:	bb8d      	cbnz	r5, 1a7a6 <at_interface_close+0x96>
   1a742:	2304      	movs	r3, #4
   1a744:	9800      	ldr	r0, [sp, #0]
   1a746:	2106      	movs	r1, #6
   1a748:	7203      	strb	r3, [r0, #8]
   1a74a:	7245      	strb	r5, [r0, #9]
   1a74c:	7285      	strb	r5, [r0, #10]
   1a74e:	72c5      	strb	r5, [r0, #11]
   1a750:	60c6      	str	r6, [r0, #12]
   1a752:	f003 fa07 	bl	1db64 <rpc_at_client_request_send>
   1a756:	b9d8      	cbnz	r0, 1a790 <at_interface_close+0x80>
   1a758:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   1a75c:	220e      	movs	r2, #14
   1a75e:	2900      	cmp	r1, #0
   1a760:	bf08      	it	eq
   1a762:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   1a766:	ab02      	add	r3, sp, #8
   1a768:	f843 1d04 	str.w	r1, [r3, #-4]!
   1a76c:	4630      	mov	r0, r6
   1a76e:	4611      	mov	r1, r2
   1a770:	f003 f82c 	bl	1d7cc <interface_socket_wait>
   1a774:	4605      	mov	r5, r0
   1a776:	b978      	cbnz	r0, 1a798 <at_interface_close+0x88>
   1a778:	4630      	mov	r0, r6
   1a77a:	f002 ffd9 	bl	1d730 <interface_socket_free>
   1a77e:	4628      	mov	r0, r5
   1a780:	b002      	add	sp, #8
   1a782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a786:	6803      	ldr	r3, [r0, #0]
   1a788:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1a78c:	6003      	str	r3, [r0, #0]
   1a78e:	e7ce      	b.n	1a72e <at_interface_close+0x1e>
   1a790:	9800      	ldr	r0, [sp, #0]
   1a792:	f003 f9f5 	bl	1db80 <rpc_at_client_message_free>
   1a796:	2523      	movs	r5, #35	; 0x23
   1a798:	6027      	str	r7, [r4, #0]
   1a79a:	4628      	mov	r0, r5
   1a79c:	f7f9 fa78 	bl	13c90 <bsd_os_errno_set>
   1a7a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a7a4:	e7eb      	b.n	1a77e <at_interface_close+0x6e>
   1a7a6:	250c      	movs	r5, #12
   1a7a8:	e7f6      	b.n	1a798 <at_interface_close+0x88>
   1a7aa:	2516      	movs	r5, #22
   1a7ac:	e7f5      	b.n	1a79a <at_interface_close+0x8a>
   1a7ae:	bf00      	nop

0001a7b0 <at_interface_read>:
   1a7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a7b4:	b086      	sub	sp, #24
   1a7b6:	4688      	mov	r8, r1
   1a7b8:	4615      	mov	r5, r2
   1a7ba:	461e      	mov	r6, r3
   1a7bc:	4607      	mov	r7, r0
   1a7be:	f003 f885 	bl	1d8cc <interface_socket_from_handle_get>
   1a7c2:	2800      	cmp	r0, #0
   1a7c4:	d045      	beq.n	1a852 <at_interface_read+0xa2>
   1a7c6:	2300      	movs	r3, #0
   1a7c8:	4604      	mov	r4, r0
   1a7ca:	e9cd 8502 	strd	r8, r5, [sp, #8]
   1a7ce:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1a7d2:	bb3e      	cbnz	r6, 1a824 <at_interface_read+0x74>
   1a7d4:	f016 0502 	ands.w	r5, r6, #2
   1a7d8:	d00f      	beq.n	1a7fa <at_interface_read+0x4a>
   1a7da:	e02a      	b.n	1a832 <at_interface_read+0x82>
   1a7dc:	b9dd      	cbnz	r5, 1a816 <at_interface_read+0x66>
   1a7de:	6a25      	ldr	r5, [r4, #32]
   1a7e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a7e4:	2d00      	cmp	r5, #0
   1a7e6:	bf08      	it	eq
   1a7e8:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   1a7ec:	4611      	mov	r1, r2
   1a7ee:	ab01      	add	r3, sp, #4
   1a7f0:	4638      	mov	r0, r7
   1a7f2:	9501      	str	r5, [sp, #4]
   1a7f4:	f002 ffea 	bl	1d7cc <interface_socket_wait>
   1a7f8:	4605      	mov	r5, r0
   1a7fa:	6823      	ldr	r3, [r4, #0]
   1a7fc:	69e0      	ldr	r0, [r4, #28]
   1a7fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1a802:	6023      	str	r3, [r4, #0]
   1a804:	6803      	ldr	r3, [r0, #0]
   1a806:	4632      	mov	r2, r6
   1a808:	689b      	ldr	r3, [r3, #8]
   1a80a:	a902      	add	r1, sp, #8
   1a80c:	4798      	blx	r3
   1a80e:	f1b0 0800 	subs.w	r8, r0, #0
   1a812:	dbe3      	blt.n	1a7dc <at_interface_read+0x2c>
   1a814:	b115      	cbz	r5, 1a81c <at_interface_read+0x6c>
   1a816:	4628      	mov	r0, r5
   1a818:	f7f9 fa3a 	bl	13c90 <bsd_os_errno_set>
   1a81c:	4640      	mov	r0, r8
   1a81e:	b006      	add	sp, #24
   1a820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a824:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   1a828:	d1d4      	bne.n	1a7d4 <at_interface_read+0x24>
   1a82a:	252d      	movs	r5, #45	; 0x2d
   1a82c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1a830:	e7f1      	b.n	1a816 <at_interface_read+0x66>
   1a832:	6823      	ldr	r3, [r4, #0]
   1a834:	69e0      	ldr	r0, [r4, #28]
   1a836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1a83a:	6023      	str	r3, [r4, #0]
   1a83c:	6803      	ldr	r3, [r0, #0]
   1a83e:	4632      	mov	r2, r6
   1a840:	689b      	ldr	r3, [r3, #8]
   1a842:	a902      	add	r1, sp, #8
   1a844:	4798      	blx	r3
   1a846:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1a84a:	4680      	mov	r8, r0
   1a84c:	d1e6      	bne.n	1a81c <at_interface_read+0x6c>
   1a84e:	2523      	movs	r5, #35	; 0x23
   1a850:	e7e1      	b.n	1a816 <at_interface_read+0x66>
   1a852:	2516      	movs	r5, #22
   1a854:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1a858:	e7dd      	b.n	1a816 <at_interface_read+0x66>
   1a85a:	bf00      	nop

0001a85c <at_interface_getopt>:
   1a85c:	f003 b8a4 	b.w	1d9a8 <interface_socket_getopt>

0001a860 <at_interface_setopt>:
   1a860:	f003 b85c 	b.w	1d91c <interface_socket_setopt>

0001a864 <rpc_at_event_handler>:
   1a864:	b570      	push	{r4, r5, r6, lr}
   1a866:	4606      	mov	r6, r0
   1a868:	b084      	sub	sp, #16
   1a86a:	68c0      	ldr	r0, [r0, #12]
   1a86c:	460d      	mov	r5, r1
   1a86e:	f003 f82d 	bl	1d8cc <interface_socket_from_handle_get>
   1a872:	4604      	mov	r4, r0
   1a874:	b348      	cbz	r0, 1a8ca <rpc_at_event_handler+0x66>
   1a876:	6803      	ldr	r3, [r0, #0]
   1a878:	b29b      	uxth	r3, r3
   1a87a:	2b01      	cmp	r3, #1
   1a87c:	d01f      	beq.n	1a8be <rpc_at_event_handler+0x5a>
   1a87e:	6803      	ldr	r3, [r0, #0]
   1a880:	b29b      	uxth	r3, r3
   1a882:	2b0d      	cmp	r3, #13
   1a884:	d029      	beq.n	1a8da <rpc_at_event_handler+0x76>
   1a886:	6803      	ldr	r3, [r0, #0]
   1a888:	b29b      	uxth	r3, r3
   1a88a:	2b02      	cmp	r3, #2
   1a88c:	d02d      	beq.n	1a8ea <rpc_at_event_handler+0x86>
   1a88e:	3d03      	subs	r5, #3
   1a890:	2d01      	cmp	r5, #1
   1a892:	d817      	bhi.n	1a8c4 <rpc_at_event_handler+0x60>
   1a894:	2500      	movs	r5, #0
   1a896:	6873      	ldr	r3, [r6, #4]
   1a898:	6832      	ldr	r2, [r6, #0]
   1a89a:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1a89e:	e9cd 2300 	strd	r2, r3, [sp]
   1a8a2:	69e0      	ldr	r0, [r4, #28]
   1a8a4:	4669      	mov	r1, sp
   1a8a6:	6803      	ldr	r3, [r0, #0]
   1a8a8:	685b      	ldr	r3, [r3, #4]
   1a8aa:	4798      	blx	r3
   1a8ac:	3001      	adds	r0, #1
   1a8ae:	d019      	beq.n	1a8e4 <rpc_at_event_handler+0x80>
   1a8b0:	4628      	mov	r0, r5
   1a8b2:	6823      	ldr	r3, [r4, #0]
   1a8b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1a8b8:	6023      	str	r3, [r4, #0]
   1a8ba:	b004      	add	sp, #16
   1a8bc:	bd70      	pop	{r4, r5, r6, pc}
   1a8be:	2d02      	cmp	r5, #2
   1a8c0:	d1e5      	bne.n	1a88e <rpc_at_event_handler+0x2a>
   1a8c2:	6005      	str	r5, [r0, #0]
   1a8c4:	2000      	movs	r0, #0
   1a8c6:	b004      	add	sp, #16
   1a8c8:	bd70      	pop	{r4, r5, r6, pc}
   1a8ca:	6830      	ldr	r0, [r6, #0]
   1a8cc:	2800      	cmp	r0, #0
   1a8ce:	d0f9      	beq.n	1a8c4 <rpc_at_event_handler+0x60>
   1a8d0:	f003 f95e 	bl	1db90 <rpc_at_client_data_free>
   1a8d4:	4620      	mov	r0, r4
   1a8d6:	b004      	add	sp, #16
   1a8d8:	bd70      	pop	{r4, r5, r6, pc}
   1a8da:	2d02      	cmp	r5, #2
   1a8dc:	d1d7      	bne.n	1a88e <rpc_at_event_handler+0x2a>
   1a8de:	230e      	movs	r3, #14
   1a8e0:	6003      	str	r3, [r0, #0]
   1a8e2:	e7ef      	b.n	1a8c4 <rpc_at_event_handler+0x60>
   1a8e4:	2002      	movs	r0, #2
   1a8e6:	b004      	add	sp, #16
   1a8e8:	bd70      	pop	{r4, r5, r6, pc}
   1a8ea:	6803      	ldr	r3, [r0, #0]
   1a8ec:	029b      	lsls	r3, r3, #10
   1a8ee:	d5ce      	bpl.n	1a88e <rpc_at_event_handler+0x2a>
   1a8f0:	2d02      	cmp	r5, #2
   1a8f2:	d1cc      	bne.n	1a88e <rpc_at_event_handler+0x2a>
   1a8f4:	6803      	ldr	r3, [r0, #0]
   1a8f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1a8fa:	6003      	str	r3, [r0, #0]
   1a8fc:	6803      	ldr	r3, [r0, #0]
   1a8fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1a902:	6003      	str	r3, [r0, #0]
   1a904:	e7de      	b.n	1a8c4 <rpc_at_event_handler+0x60>
   1a906:	bf00      	nop

0001a908 <ok_rsp_parser>:
   1a908:	2000      	movs	r0, #0
   1a90a:	4770      	bx	lr

0001a90c <pdn_state_get_parser>:
   1a90c:	2200      	movs	r2, #0
   1a90e:	b570      	push	{r4, r5, r6, lr}
   1a910:	780b      	ldrb	r3, [r1, #0]
   1a912:	b084      	sub	sp, #16
   1a914:	460e      	mov	r6, r1
   1a916:	e9cd 2200 	strd	r2, r2, [sp]
   1a91a:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1a91e:	b323      	cbz	r3, 1a96a <pdn_state_get_parser+0x5e>
   1a920:	460c      	mov	r4, r1
   1a922:	2b20      	cmp	r3, #32
   1a924:	460d      	mov	r5, r1
   1a926:	d01b      	beq.n	1a960 <pdn_state_get_parser+0x54>
   1a928:	700b      	strb	r3, [r1, #0]
   1a92a:	3201      	adds	r2, #1
   1a92c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1a930:	18b1      	adds	r1, r6, r2
   1a932:	460d      	mov	r5, r1
   1a934:	2b00      	cmp	r3, #0
   1a936:	d1f4      	bne.n	1a922 <pdn_state_get_parser+0x16>
   1a938:	2200      	movs	r2, #0
   1a93a:	4b0d      	ldr	r3, [pc, #52]	; (1a970 <pdn_state_get_parser+0x64>)
   1a93c:	702a      	strb	r2, [r5, #0]
   1a93e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a942:	4a0c      	ldr	r2, [pc, #48]	; (1a974 <pdn_state_get_parser+0x68>)
   1a944:	681b      	ldr	r3, [r3, #0]
   1a946:	2110      	movs	r1, #16
   1a948:	4668      	mov	r0, sp
   1a94a:	f005 fa4f 	bl	1fdec <sniprintf>
   1a94e:	4669      	mov	r1, sp
   1a950:	4630      	mov	r0, r6
   1a952:	f00d f9f8 	bl	27d46 <strstr>
   1a956:	3000      	adds	r0, #0
   1a958:	bf18      	it	ne
   1a95a:	2001      	movne	r0, #1
   1a95c:	b004      	add	sp, #16
   1a95e:	bd70      	pop	{r4, r5, r6, pc}
   1a960:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1a964:	2b00      	cmp	r3, #0
   1a966:	d1dc      	bne.n	1a922 <pdn_state_get_parser+0x16>
   1a968:	e7e6      	b.n	1a938 <pdn_state_get_parser+0x2c>
   1a96a:	460d      	mov	r5, r1
   1a96c:	e7e4      	b.n	1a938 <pdn_state_get_parser+0x2c>
   1a96e:	bf00      	nop
   1a970:	200234b8 	.word	0x200234b8
   1a974:	00028dc0 	.word	0x00028dc0

0001a978 <pdn_id_get_parser>:
   1a978:	b570      	push	{r4, r5, r6, lr}
   1a97a:	780b      	ldrb	r3, [r1, #0]
   1a97c:	4606      	mov	r6, r0
   1a97e:	b313      	cbz	r3, 1a9c6 <pdn_id_get_parser+0x4e>
   1a980:	4608      	mov	r0, r1
   1a982:	2400      	movs	r4, #0
   1a984:	460a      	mov	r2, r1
   1a986:	2b20      	cmp	r3, #32
   1a988:	4615      	mov	r5, r2
   1a98a:	d017      	beq.n	1a9bc <pdn_id_get_parser+0x44>
   1a98c:	7013      	strb	r3, [r2, #0]
   1a98e:	3401      	adds	r4, #1
   1a990:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1a994:	190a      	adds	r2, r1, r4
   1a996:	4615      	mov	r5, r2
   1a998:	2b00      	cmp	r3, #0
   1a99a:	d1f4      	bne.n	1a986 <pdn_id_get_parser+0xe>
   1a99c:	2300      	movs	r3, #0
   1a99e:	4608      	mov	r0, r1
   1a9a0:	702b      	strb	r3, [r5, #0]
   1a9a2:	213a      	movs	r1, #58	; 0x3a
   1a9a4:	f00d f980 	bl	27ca8 <strchr>
   1a9a8:	b130      	cbz	r0, 1a9b8 <pdn_id_get_parser+0x40>
   1a9aa:	3001      	adds	r0, #1
   1a9ac:	f00c ffab 	bl	27906 <atoi>
   1a9b0:	4b06      	ldr	r3, [pc, #24]	; (1a9cc <pdn_id_get_parser+0x54>)
   1a9b2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1a9b6:	6058      	str	r0, [r3, #4]
   1a9b8:	2000      	movs	r0, #0
   1a9ba:	bd70      	pop	{r4, r5, r6, pc}
   1a9bc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1a9c0:	2b00      	cmp	r3, #0
   1a9c2:	d1e0      	bne.n	1a986 <pdn_id_get_parser+0xe>
   1a9c4:	e7ea      	b.n	1a99c <pdn_id_get_parser+0x24>
   1a9c6:	460d      	mov	r5, r1
   1a9c8:	e7e8      	b.n	1a99c <pdn_id_get_parser+0x24>
   1a9ca:	bf00      	nop
   1a9cc:	200234b8 	.word	0x200234b8

0001a9d0 <context_create_parser>:
   1a9d0:	b570      	push	{r4, r5, r6, lr}
   1a9d2:	780b      	ldrb	r3, [r1, #0]
   1a9d4:	4606      	mov	r6, r0
   1a9d6:	b313      	cbz	r3, 1aa1e <context_create_parser+0x4e>
   1a9d8:	4608      	mov	r0, r1
   1a9da:	2400      	movs	r4, #0
   1a9dc:	460a      	mov	r2, r1
   1a9de:	2b20      	cmp	r3, #32
   1a9e0:	4615      	mov	r5, r2
   1a9e2:	d017      	beq.n	1aa14 <context_create_parser+0x44>
   1a9e4:	7013      	strb	r3, [r2, #0]
   1a9e6:	3401      	adds	r4, #1
   1a9e8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1a9ec:	190a      	adds	r2, r1, r4
   1a9ee:	4615      	mov	r5, r2
   1a9f0:	2b00      	cmp	r3, #0
   1a9f2:	d1f4      	bne.n	1a9de <context_create_parser+0xe>
   1a9f4:	2300      	movs	r3, #0
   1a9f6:	4608      	mov	r0, r1
   1a9f8:	702b      	strb	r3, [r5, #0]
   1a9fa:	213a      	movs	r1, #58	; 0x3a
   1a9fc:	f00d f954 	bl	27ca8 <strchr>
   1aa00:	b130      	cbz	r0, 1aa10 <context_create_parser+0x40>
   1aa02:	4b08      	ldr	r3, [pc, #32]	; (1aa24 <context_create_parser+0x54>)
   1aa04:	3001      	adds	r0, #1
   1aa06:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   1aa0a:	f00c ff7c 	bl	27906 <atoi>
   1aa0e:	6020      	str	r0, [r4, #0]
   1aa10:	2000      	movs	r0, #0
   1aa12:	bd70      	pop	{r4, r5, r6, pc}
   1aa14:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1aa18:	2b00      	cmp	r3, #0
   1aa1a:	d1e0      	bne.n	1a9de <context_create_parser+0xe>
   1aa1c:	e7ea      	b.n	1a9f4 <context_create_parser+0x24>
   1aa1e:	460d      	mov	r5, r1
   1aa20:	e7e8      	b.n	1a9f4 <context_create_parser+0x24>
   1aa22:	bf00      	nop
   1aa24:	200234b8 	.word	0x200234b8

0001aa28 <pdn_interface_init>:
   1aa28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aa2c:	b510      	push	{r4, lr}
   1aa2e:	4c0b      	ldr	r4, [pc, #44]	; (1aa5c <pdn_interface_init+0x34>)
   1aa30:	2228      	movs	r2, #40	; 0x28
   1aa32:	2100      	movs	r1, #0
   1aa34:	480a      	ldr	r0, [pc, #40]	; (1aa60 <pdn_interface_init+0x38>)
   1aa36:	6023      	str	r3, [r4, #0]
   1aa38:	f00c ffbf 	bl	279ba <memset>
   1aa3c:	f240 2201 	movw	r2, #513	; 0x201
   1aa40:	2102      	movs	r1, #2
   1aa42:	2066      	movs	r0, #102	; 0x66
   1aa44:	f7ff fe00 	bl	1a648 <at_interface_open>
   1aa48:	2800      	cmp	r0, #0
   1aa4a:	6020      	str	r0, [r4, #0]
   1aa4c:	db04      	blt.n	1aa58 <pdn_interface_init+0x30>
   1aa4e:	2201      	movs	r2, #1
   1aa50:	4b04      	ldr	r3, [pc, #16]	; (1aa64 <pdn_interface_init+0x3c>)
   1aa52:	2000      	movs	r0, #0
   1aa54:	701a      	strb	r2, [r3, #0]
   1aa56:	bd10      	pop	{r4, pc}
   1aa58:	2003      	movs	r0, #3
   1aa5a:	bd10      	pop	{r4, pc}
   1aa5c:	200233b4 	.word	0x200233b4
   1aa60:	200234b8 	.word	0x200234b8
   1aa64:	2002af32 	.word	0x2002af32

0001aa68 <pdn_interface_open>:
   1aa68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1aa6c:	4b66      	ldr	r3, [pc, #408]	; (1ac08 <pdn_interface_open+0x1a0>)
   1aa6e:	b083      	sub	sp, #12
   1aa70:	781b      	ldrb	r3, [r3, #0]
   1aa72:	2b00      	cmp	r3, #0
   1aa74:	f000 80c2 	beq.w	1abfc <pdn_interface_open+0x194>
   1aa78:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1aa7c:	f040 80ad 	bne.w	1abda <pdn_interface_open+0x172>
   1aa80:	4c62      	ldr	r4, [pc, #392]	; (1ac0c <pdn_interface_open+0x1a4>)
   1aa82:	6825      	ldr	r5, [r4, #0]
   1aa84:	b34d      	cbz	r5, 1aada <pdn_interface_open+0x72>
   1aa86:	6863      	ldr	r3, [r4, #4]
   1aa88:	2b00      	cmp	r3, #0
   1aa8a:	f000 8098 	beq.w	1abbe <pdn_interface_open+0x156>
   1aa8e:	68a3      	ldr	r3, [r4, #8]
   1aa90:	2b00      	cmp	r3, #0
   1aa92:	f000 8096 	beq.w	1abc2 <pdn_interface_open+0x15a>
   1aa96:	68e3      	ldr	r3, [r4, #12]
   1aa98:	2b00      	cmp	r3, #0
   1aa9a:	f000 8094 	beq.w	1abc6 <pdn_interface_open+0x15e>
   1aa9e:	6923      	ldr	r3, [r4, #16]
   1aaa0:	2b00      	cmp	r3, #0
   1aaa2:	f000 8092 	beq.w	1abca <pdn_interface_open+0x162>
   1aaa6:	6963      	ldr	r3, [r4, #20]
   1aaa8:	2b00      	cmp	r3, #0
   1aaaa:	f000 8090 	beq.w	1abce <pdn_interface_open+0x166>
   1aaae:	69a3      	ldr	r3, [r4, #24]
   1aab0:	2b00      	cmp	r3, #0
   1aab2:	f000 808e 	beq.w	1abd2 <pdn_interface_open+0x16a>
   1aab6:	69e3      	ldr	r3, [r4, #28]
   1aab8:	2b00      	cmp	r3, #0
   1aaba:	f000 808c 	beq.w	1abd6 <pdn_interface_open+0x16e>
   1aabe:	6a23      	ldr	r3, [r4, #32]
   1aac0:	b153      	cbz	r3, 1aad8 <pdn_interface_open+0x70>
   1aac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aac4:	2509      	movs	r5, #9
   1aac6:	b143      	cbz	r3, 1aada <pdn_interface_open+0x72>
   1aac8:	200c      	movs	r0, #12
   1aaca:	f7f9 f8e1 	bl	13c90 <bsd_os_errno_set>
   1aace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aad2:	b003      	add	sp, #12
   1aad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1aad8:	2508      	movs	r5, #8
   1aada:	2074      	movs	r0, #116	; 0x74
   1aadc:	f002 fa92 	bl	1d004 <nrf_malloc>
   1aae0:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   1aae4:	2800      	cmp	r0, #0
   1aae6:	d0ef      	beq.n	1aac8 <pdn_interface_open+0x60>
   1aae8:	2274      	movs	r2, #116	; 0x74
   1aaea:	2100      	movs	r1, #0
   1aaec:	f00c ff65 	bl	279ba <memset>
   1aaf0:	2101      	movs	r1, #1
   1aaf2:	2003      	movs	r0, #3
   1aaf4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1aaf8:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1aafc:	4a44      	ldr	r2, [pc, #272]	; (1ac10 <pdn_interface_open+0x1a8>)
   1aafe:	6099      	str	r1, [r3, #8]
   1ab00:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1ab04:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ab08:	6718      	str	r0, [r3, #112]	; 0x70
   1ab0a:	605f      	str	r7, [r3, #4]
   1ab0c:	4841      	ldr	r0, [pc, #260]	; (1ac14 <pdn_interface_open+0x1ac>)
   1ab0e:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1ac20 <pdn_interface_open+0x1b8>
   1ab12:	f005 f96b 	bl	1fdec <sniprintf>
   1ab16:	483f      	ldr	r0, [pc, #252]	; (1ac14 <pdn_interface_open+0x1ac>)
   1ab18:	f8d8 9000 	ldr.w	r9, [r8]
   1ab1c:	2600      	movs	r6, #0
   1ab1e:	f7f2 fa0b 	bl	cf38 <strlen>
   1ab22:	4633      	mov	r3, r6
   1ab24:	4602      	mov	r2, r0
   1ab26:	493b      	ldr	r1, [pc, #236]	; (1ac14 <pdn_interface_open+0x1ac>)
   1ab28:	4648      	mov	r0, r9
   1ab2a:	9601      	str	r6, [sp, #4]
   1ab2c:	9600      	str	r6, [sp, #0]
   1ab2e:	f7ff fd09 	bl	1a544 <at_interface_write>
   1ab32:	4681      	mov	r9, r0
   1ab34:	4837      	ldr	r0, [pc, #220]	; (1ac14 <pdn_interface_open+0x1ac>)
   1ab36:	f7f2 f9ff 	bl	cf38 <strlen>
   1ab3a:	4548      	cmp	r0, r9
   1ab3c:	d153      	bne.n	1abe6 <pdn_interface_open+0x17e>
   1ab3e:	4633      	mov	r3, r6
   1ab40:	e9cd 6600 	strd	r6, r6, [sp]
   1ab44:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ab48:	4932      	ldr	r1, [pc, #200]	; (1ac14 <pdn_interface_open+0x1ac>)
   1ab4a:	f8d8 0000 	ldr.w	r0, [r8]
   1ab4e:	f7ff fe2f 	bl	1a7b0 <at_interface_read>
   1ab52:	4606      	mov	r6, r0
   1ab54:	4830      	ldr	r0, [pc, #192]	; (1ac18 <pdn_interface_open+0x1b0>)
   1ab56:	f7f2 f9ef 	bl	cf38 <strlen>
   1ab5a:	4286      	cmp	r6, r0
   1ab5c:	db15      	blt.n	1ab8a <pdn_interface_open+0x122>
   1ab5e:	4602      	mov	r2, r0
   1ab60:	492c      	ldr	r1, [pc, #176]	; (1ac14 <pdn_interface_open+0x1ac>)
   1ab62:	482d      	ldr	r0, [pc, #180]	; (1ac18 <pdn_interface_open+0x1b0>)
   1ab64:	f00d f8ca 	bl	27cfc <strncmp>
   1ab68:	b978      	cbnz	r0, 1ab8a <pdn_interface_open+0x122>
   1ab6a:	492a      	ldr	r1, [pc, #168]	; (1ac14 <pdn_interface_open+0x1ac>)
   1ab6c:	4628      	mov	r0, r5
   1ab6e:	f7ff ff2f 	bl	1a9d0 <context_create_parser>
   1ab72:	b9b0      	cbnz	r0, 1aba2 <pdn_interface_open+0x13a>
   1ab74:	2202      	movs	r2, #2
   1ab76:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1ab7a:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   1ab7e:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   1ab82:	609a      	str	r2, [r3, #8]
   1ab84:	b003      	add	sp, #12
   1ab86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ab8a:	4824      	ldr	r0, [pc, #144]	; (1ac1c <pdn_interface_open+0x1b4>)
   1ab8c:	f7f2 f9d4 	bl	cf38 <strlen>
   1ab90:	4920      	ldr	r1, [pc, #128]	; (1ac14 <pdn_interface_open+0x1ac>)
   1ab92:	4602      	mov	r2, r0
   1ab94:	4821      	ldr	r0, [pc, #132]	; (1ac1c <pdn_interface_open+0x1b4>)
   1ab96:	f00d f8b1 	bl	27cfc <strncmp>
   1ab9a:	b960      	cbnz	r0, 1abb6 <pdn_interface_open+0x14e>
   1ab9c:	2008      	movs	r0, #8
   1ab9e:	f7f9 f877 	bl	13c90 <bsd_os_errno_set>
   1aba2:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1aba6:	f002 fa37 	bl	1d018 <nrf_free>
   1abaa:	2300      	movs	r3, #0
   1abac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1abb0:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   1abb4:	e78d      	b.n	1aad2 <pdn_interface_open+0x6a>
   1abb6:	2005      	movs	r0, #5
   1abb8:	f7f9 f86a 	bl	13c90 <bsd_os_errno_set>
   1abbc:	e7f1      	b.n	1aba2 <pdn_interface_open+0x13a>
   1abbe:	2501      	movs	r5, #1
   1abc0:	e78b      	b.n	1aada <pdn_interface_open+0x72>
   1abc2:	2502      	movs	r5, #2
   1abc4:	e789      	b.n	1aada <pdn_interface_open+0x72>
   1abc6:	2503      	movs	r5, #3
   1abc8:	e787      	b.n	1aada <pdn_interface_open+0x72>
   1abca:	2504      	movs	r5, #4
   1abcc:	e785      	b.n	1aada <pdn_interface_open+0x72>
   1abce:	2505      	movs	r5, #5
   1abd0:	e783      	b.n	1aada <pdn_interface_open+0x72>
   1abd2:	2506      	movs	r5, #6
   1abd4:	e781      	b.n	1aada <pdn_interface_open+0x72>
   1abd6:	2507      	movs	r5, #7
   1abd8:	e77f      	b.n	1aada <pdn_interface_open+0x72>
   1abda:	2029      	movs	r0, #41	; 0x29
   1abdc:	f7f9 f858 	bl	13c90 <bsd_os_errno_set>
   1abe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1abe4:	e775      	b.n	1aad2 <pdn_interface_open+0x6a>
   1abe6:	2005      	movs	r0, #5
   1abe8:	f7f9 f852 	bl	13c90 <bsd_os_errno_set>
   1abec:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1abf0:	f002 fa12 	bl	1d018 <nrf_free>
   1abf4:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   1abf8:	4638      	mov	r0, r7
   1abfa:	e76a      	b.n	1aad2 <pdn_interface_open+0x6a>
   1abfc:	2005      	movs	r0, #5
   1abfe:	f7f9 f847 	bl	13c90 <bsd_os_errno_set>
   1ac02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ac06:	e764      	b.n	1aad2 <pdn_interface_open+0x6a>
   1ac08:	2002af32 	.word	0x2002af32
   1ac0c:	200234b8 	.word	0x200234b8
   1ac10:	00028d9c 	.word	0x00028d9c
   1ac14:	200233b8 	.word	0x200233b8
   1ac18:	00028dac 	.word	0x00028dac
   1ac1c:	00028db8 	.word	0x00028db8
   1ac20:	200233b4 	.word	0x200233b4

0001ac24 <pdn_interface_connect>:
   1ac24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac28:	b083      	sub	sp, #12
   1ac2a:	2900      	cmp	r1, #0
   1ac2c:	f000 813d 	beq.w	1aeaa <pdn_interface_connect+0x286>
   1ac30:	2a64      	cmp	r2, #100	; 0x64
   1ac32:	4691      	mov	r9, r2
   1ac34:	f200 8139 	bhi.w	1aeaa <pdn_interface_connect+0x286>
   1ac38:	4605      	mov	r5, r0
   1ac3a:	4608      	mov	r0, r1
   1ac3c:	4688      	mov	r8, r1
   1ac3e:	f7f2 f97b 	bl	cf38 <strlen>
   1ac42:	2864      	cmp	r0, #100	; 0x64
   1ac44:	f200 8131 	bhi.w	1aeaa <pdn_interface_connect+0x286>
   1ac48:	0c2b      	lsrs	r3, r5, #16
   1ac4a:	4aa5      	ldr	r2, [pc, #660]	; (1aee0 <pdn_interface_connect+0x2bc>)
   1ac4c:	041b      	lsls	r3, r3, #16
   1ac4e:	4293      	cmp	r3, r2
   1ac50:	f040 8122 	bne.w	1ae98 <pdn_interface_connect+0x274>
   1ac54:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   1ac58:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   1ac5c:	2d09      	cmp	r5, #9
   1ac5e:	f300 811b 	bgt.w	1ae98 <pdn_interface_connect+0x274>
   1ac62:	4fa0      	ldr	r7, [pc, #640]	; (1aee4 <pdn_interface_connect+0x2c0>)
   1ac64:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1ac68:	2b00      	cmp	r3, #0
   1ac6a:	f000 8115 	beq.w	1ae98 <pdn_interface_connect+0x274>
   1ac6e:	689a      	ldr	r2, [r3, #8]
   1ac70:	2a00      	cmp	r2, #0
   1ac72:	f000 8111 	beq.w	1ae98 <pdn_interface_connect+0x274>
   1ac76:	689b      	ldr	r3, [r3, #8]
   1ac78:	2b02      	cmp	r3, #2
   1ac7a:	f040 810d 	bne.w	1ae98 <pdn_interface_connect+0x274>
   1ac7e:	4e9a      	ldr	r6, [pc, #616]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ac80:	4a9a      	ldr	r2, [pc, #616]	; (1aeec <pdn_interface_connect+0x2c8>)
   1ac82:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ac86:	4630      	mov	r0, r6
   1ac88:	f005 f8b0 	bl	1fdec <sniprintf>
   1ac8c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1ac90:	4604      	mov	r4, r0
   1ac92:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1ac96:	681b      	ldr	r3, [r3, #0]
   1ac98:	4a95      	ldr	r2, [pc, #596]	; (1aef0 <pdn_interface_connect+0x2cc>)
   1ac9a:	1830      	adds	r0, r6, r0
   1ac9c:	f005 f8a6 	bl	1fdec <sniprintf>
   1aca0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1aca4:	4404      	add	r4, r0
   1aca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1aca8:	f003 0203 	and.w	r2, r3, #3
   1acac:	2a03      	cmp	r2, #3
   1acae:	f000 80ea 	beq.w	1ae86 <pdn_interface_connect+0x262>
   1acb2:	079b      	lsls	r3, r3, #30
   1acb4:	eb06 0004 	add.w	r0, r6, r4
   1acb8:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1acbc:	bf4c      	ite	mi
   1acbe:	4b8d      	ldrmi	r3, [pc, #564]	; (1aef4 <pdn_interface_connect+0x2d0>)
   1acc0:	4b8d      	ldrpl	r3, [pc, #564]	; (1aef8 <pdn_interface_connect+0x2d4>)
   1acc2:	4a8e      	ldr	r2, [pc, #568]	; (1aefc <pdn_interface_connect+0x2d8>)
   1acc4:	f005 f892 	bl	1fdec <sniprintf>
   1acc8:	4404      	add	r4, r0
   1acca:	4643      	mov	r3, r8
   1accc:	4a8c      	ldr	r2, [pc, #560]	; (1af00 <pdn_interface_connect+0x2dc>)
   1acce:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1acd2:	1930      	adds	r0, r6, r4
   1acd4:	f005 f88a 	bl	1fdec <sniprintf>
   1acd8:	4420      	add	r0, r4
   1acda:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1acde:	f300 80f7 	bgt.w	1aed0 <pdn_interface_connect+0x2ac>
   1ace2:	f8df a23c 	ldr.w	sl, [pc, #572]	; 1af20 <pdn_interface_connect+0x2fc>
   1ace6:	4880      	ldr	r0, [pc, #512]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ace8:	f8da b000 	ldr.w	fp, [sl]
   1acec:	2400      	movs	r4, #0
   1acee:	f7f2 f923 	bl	cf38 <strlen>
   1acf2:	4623      	mov	r3, r4
   1acf4:	4602      	mov	r2, r0
   1acf6:	497c      	ldr	r1, [pc, #496]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1acf8:	4658      	mov	r0, fp
   1acfa:	9401      	str	r4, [sp, #4]
   1acfc:	9400      	str	r4, [sp, #0]
   1acfe:	f7ff fc21 	bl	1a544 <at_interface_write>
   1ad02:	4683      	mov	fp, r0
   1ad04:	4878      	ldr	r0, [pc, #480]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ad06:	f7f2 f917 	bl	cf38 <strlen>
   1ad0a:	4558      	cmp	r0, fp
   1ad0c:	d008      	beq.n	1ad20 <pdn_interface_connect+0xfc>
   1ad0e:	2005      	movs	r0, #5
   1ad10:	f7f8 ffbe 	bl	13c90 <bsd_os_errno_set>
   1ad14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ad18:	4620      	mov	r0, r4
   1ad1a:	b003      	add	sp, #12
   1ad1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad20:	4623      	mov	r3, r4
   1ad22:	e9cd 4400 	strd	r4, r4, [sp]
   1ad26:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ad2a:	496f      	ldr	r1, [pc, #444]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ad2c:	f8da 0000 	ldr.w	r0, [sl]
   1ad30:	f7ff fd3e 	bl	1a7b0 <at_interface_read>
   1ad34:	4604      	mov	r4, r0
   1ad36:	4873      	ldr	r0, [pc, #460]	; (1af04 <pdn_interface_connect+0x2e0>)
   1ad38:	f7f2 f8fe 	bl	cf38 <strlen>
   1ad3c:	4284      	cmp	r4, r0
   1ad3e:	f2c0 8091 	blt.w	1ae64 <pdn_interface_connect+0x240>
   1ad42:	4602      	mov	r2, r0
   1ad44:	4968      	ldr	r1, [pc, #416]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ad46:	486f      	ldr	r0, [pc, #444]	; (1af04 <pdn_interface_connect+0x2e0>)
   1ad48:	f00c ffd8 	bl	27cfc <strncmp>
   1ad4c:	2800      	cmp	r0, #0
   1ad4e:	f040 8089 	bne.w	1ae64 <pdn_interface_connect+0x240>
   1ad52:	4965      	ldr	r1, [pc, #404]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ad54:	4628      	mov	r0, r5
   1ad56:	f7ff fdd7 	bl	1a908 <ok_rsp_parser>
   1ad5a:	4604      	mov	r4, r0
   1ad5c:	2800      	cmp	r0, #0
   1ad5e:	d1db      	bne.n	1ad18 <pdn_interface_connect+0xf4>
   1ad60:	4a69      	ldr	r2, [pc, #420]	; (1af08 <pdn_interface_connect+0x2e4>)
   1ad62:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ad66:	4860      	ldr	r0, [pc, #384]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ad68:	f005 f840 	bl	1fdec <sniprintf>
   1ad6c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1ad70:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1ad74:	681b      	ldr	r3, [r3, #0]
   1ad76:	4a65      	ldr	r2, [pc, #404]	; (1af0c <pdn_interface_connect+0x2e8>)
   1ad78:	4430      	add	r0, r6
   1ad7a:	f005 f837 	bl	1fdec <sniprintf>
   1ad7e:	485a      	ldr	r0, [pc, #360]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ad80:	f8da b000 	ldr.w	fp, [sl]
   1ad84:	f7f2 f8d8 	bl	cf38 <strlen>
   1ad88:	4623      	mov	r3, r4
   1ad8a:	4602      	mov	r2, r0
   1ad8c:	4956      	ldr	r1, [pc, #344]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ad8e:	4658      	mov	r0, fp
   1ad90:	9401      	str	r4, [sp, #4]
   1ad92:	9400      	str	r4, [sp, #0]
   1ad94:	f7ff fbd6 	bl	1a544 <at_interface_write>
   1ad98:	4683      	mov	fp, r0
   1ad9a:	4853      	ldr	r0, [pc, #332]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ad9c:	f7f2 f8cc 	bl	cf38 <strlen>
   1ada0:	4558      	cmp	r0, fp
   1ada2:	d1b4      	bne.n	1ad0e <pdn_interface_connect+0xea>
   1ada4:	4623      	mov	r3, r4
   1ada6:	f44f 7280 	mov.w	r2, #256	; 0x100
   1adaa:	494f      	ldr	r1, [pc, #316]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1adac:	f8da 0000 	ldr.w	r0, [sl]
   1adb0:	e9cd 4400 	strd	r4, r4, [sp]
   1adb4:	f7ff fcfc 	bl	1a7b0 <at_interface_read>
   1adb8:	4683      	mov	fp, r0
   1adba:	4852      	ldr	r0, [pc, #328]	; (1af04 <pdn_interface_connect+0x2e0>)
   1adbc:	f7f2 f8bc 	bl	cf38 <strlen>
   1adc0:	4583      	cmp	fp, r0
   1adc2:	db4f      	blt.n	1ae64 <pdn_interface_connect+0x240>
   1adc4:	4602      	mov	r2, r0
   1adc6:	4948      	ldr	r1, [pc, #288]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1adc8:	484e      	ldr	r0, [pc, #312]	; (1af04 <pdn_interface_connect+0x2e0>)
   1adca:	f00c ff97 	bl	27cfc <strncmp>
   1adce:	2800      	cmp	r0, #0
   1add0:	d148      	bne.n	1ae64 <pdn_interface_connect+0x240>
   1add2:	2103      	movs	r1, #3
   1add4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1add8:	464a      	mov	r2, r9
   1adda:	6099      	str	r1, [r3, #8]
   1addc:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   1ade0:	4641      	mov	r1, r8
   1ade2:	300c      	adds	r0, #12
   1ade4:	f00c fdaf 	bl	27946 <memcpy>
   1ade8:	4a49      	ldr	r2, [pc, #292]	; (1af10 <pdn_interface_connect+0x2ec>)
   1adea:	f44f 7180 	mov.w	r1, #256	; 0x100
   1adee:	483e      	ldr	r0, [pc, #248]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1adf0:	f004 fffc 	bl	1fdec <sniprintf>
   1adf4:	4601      	mov	r1, r0
   1adf6:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1adfa:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1adfe:	681b      	ldr	r3, [r3, #0]
   1ae00:	4a42      	ldr	r2, [pc, #264]	; (1af0c <pdn_interface_connect+0x2e8>)
   1ae02:	1830      	adds	r0, r6, r0
   1ae04:	f004 fff2 	bl	1fdec <sniprintf>
   1ae08:	4837      	ldr	r0, [pc, #220]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ae0a:	f8da 6000 	ldr.w	r6, [sl]
   1ae0e:	f7f2 f893 	bl	cf38 <strlen>
   1ae12:	4623      	mov	r3, r4
   1ae14:	4602      	mov	r2, r0
   1ae16:	4934      	ldr	r1, [pc, #208]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ae18:	4630      	mov	r0, r6
   1ae1a:	9401      	str	r4, [sp, #4]
   1ae1c:	9400      	str	r4, [sp, #0]
   1ae1e:	f7ff fb91 	bl	1a544 <at_interface_write>
   1ae22:	4606      	mov	r6, r0
   1ae24:	4830      	ldr	r0, [pc, #192]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ae26:	f7f2 f887 	bl	cf38 <strlen>
   1ae2a:	42b0      	cmp	r0, r6
   1ae2c:	d153      	bne.n	1aed6 <pdn_interface_connect+0x2b2>
   1ae2e:	4623      	mov	r3, r4
   1ae30:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ae34:	492c      	ldr	r1, [pc, #176]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ae36:	f8da 0000 	ldr.w	r0, [sl]
   1ae3a:	e9cd 4400 	strd	r4, r4, [sp]
   1ae3e:	f7ff fcb7 	bl	1a7b0 <at_interface_read>
   1ae42:	4606      	mov	r6, r0
   1ae44:	4833      	ldr	r0, [pc, #204]	; (1af14 <pdn_interface_connect+0x2f0>)
   1ae46:	f7f2 f877 	bl	cf38 <strlen>
   1ae4a:	4286      	cmp	r6, r0
   1ae4c:	db33      	blt.n	1aeb6 <pdn_interface_connect+0x292>
   1ae4e:	4602      	mov	r2, r0
   1ae50:	4925      	ldr	r1, [pc, #148]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ae52:	4830      	ldr	r0, [pc, #192]	; (1af14 <pdn_interface_connect+0x2f0>)
   1ae54:	f00c ff52 	bl	27cfc <strncmp>
   1ae58:	bb68      	cbnz	r0, 1aeb6 <pdn_interface_connect+0x292>
   1ae5a:	4628      	mov	r0, r5
   1ae5c:	4922      	ldr	r1, [pc, #136]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ae5e:	f7ff fd8b 	bl	1a978 <pdn_id_get_parser>
   1ae62:	e759      	b.n	1ad18 <pdn_interface_connect+0xf4>
   1ae64:	482c      	ldr	r0, [pc, #176]	; (1af18 <pdn_interface_connect+0x2f4>)
   1ae66:	f7f2 f867 	bl	cf38 <strlen>
   1ae6a:	491f      	ldr	r1, [pc, #124]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1ae6c:	4602      	mov	r2, r0
   1ae6e:	482a      	ldr	r0, [pc, #168]	; (1af18 <pdn_interface_connect+0x2f4>)
   1ae70:	f00c ff44 	bl	27cfc <strncmp>
   1ae74:	2800      	cmp	r0, #0
   1ae76:	f47f af4a 	bne.w	1ad0e <pdn_interface_connect+0xea>
   1ae7a:	2008      	movs	r0, #8
   1ae7c:	f7f8 ff08 	bl	13c90 <bsd_os_errno_set>
   1ae80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ae84:	e748      	b.n	1ad18 <pdn_interface_connect+0xf4>
   1ae86:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1ae8a:	1930      	adds	r0, r6, r4
   1ae8c:	4b23      	ldr	r3, [pc, #140]	; (1af1c <pdn_interface_connect+0x2f8>)
   1ae8e:	4a1b      	ldr	r2, [pc, #108]	; (1aefc <pdn_interface_connect+0x2d8>)
   1ae90:	f004 ffac 	bl	1fdec <sniprintf>
   1ae94:	4404      	add	r4, r0
   1ae96:	e718      	b.n	1acca <pdn_interface_connect+0xa6>
   1ae98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ae9c:	2009      	movs	r0, #9
   1ae9e:	f7f8 fef7 	bl	13c90 <bsd_os_errno_set>
   1aea2:	4620      	mov	r0, r4
   1aea4:	b003      	add	sp, #12
   1aea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aeaa:	2016      	movs	r0, #22
   1aeac:	f7f8 fef0 	bl	13c90 <bsd_os_errno_set>
   1aeb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1aeb4:	e730      	b.n	1ad18 <pdn_interface_connect+0xf4>
   1aeb6:	4818      	ldr	r0, [pc, #96]	; (1af18 <pdn_interface_connect+0x2f4>)
   1aeb8:	f7f2 f83e 	bl	cf38 <strlen>
   1aebc:	490a      	ldr	r1, [pc, #40]	; (1aee8 <pdn_interface_connect+0x2c4>)
   1aebe:	4602      	mov	r2, r0
   1aec0:	4815      	ldr	r0, [pc, #84]	; (1af18 <pdn_interface_connect+0x2f4>)
   1aec2:	f00c ff1b 	bl	27cfc <strncmp>
   1aec6:	b930      	cbnz	r0, 1aed6 <pdn_interface_connect+0x2b2>
   1aec8:	2008      	movs	r0, #8
   1aeca:	f7f8 fee1 	bl	13c90 <bsd_os_errno_set>
   1aece:	e723      	b.n	1ad18 <pdn_interface_connect+0xf4>
   1aed0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1aed4:	e720      	b.n	1ad18 <pdn_interface_connect+0xf4>
   1aed6:	2005      	movs	r0, #5
   1aed8:	f7f8 feda 	bl	13c90 <bsd_os_errno_set>
   1aedc:	e71c      	b.n	1ad18 <pdn_interface_connect+0xf4>
   1aede:	bf00      	nop
   1aee0:	789a0000 	.word	0x789a0000
   1aee4:	200234b8 	.word	0x200234b8
   1aee8:	200233b8 	.word	0x200233b8
   1aeec:	00028d24 	.word	0x00028d24
   1aef0:	00028d30 	.word	0x00028d30
   1aef4:	00028d44 	.word	0x00028d44
   1aef8:	00028d4c 	.word	0x00028d4c
   1aefc:	00028d3c 	.word	0x00028d3c
   1af00:	00028d80 	.word	0x00028d80
   1af04:	00028d50 	.word	0x00028d50
   1af08:	00028d54 	.word	0x00028d54
   1af0c:	00028d60 	.word	0x00028d60
   1af10:	00028d64 	.word	0x00028d64
   1af14:	00028d74 	.word	0x00028d74
   1af18:	00028db8 	.word	0x00028db8
   1af1c:	00028d34 	.word	0x00028d34
   1af20:	200233b4 	.word	0x200233b4

0001af24 <pdn_interface_close>:
   1af24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1af28:	4a6b      	ldr	r2, [pc, #428]	; (1b0d8 <pdn_interface_close+0x1b4>)
   1af2a:	0c03      	lsrs	r3, r0, #16
   1af2c:	041b      	lsls	r3, r3, #16
   1af2e:	4293      	cmp	r3, r2
   1af30:	b083      	sub	sp, #12
   1af32:	f040 80ac 	bne.w	1b08e <pdn_interface_close+0x16a>
   1af36:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1af3a:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1af3e:	2c09      	cmp	r4, #9
   1af40:	f300 80a5 	bgt.w	1b08e <pdn_interface_close+0x16a>
   1af44:	4d65      	ldr	r5, [pc, #404]	; (1b0dc <pdn_interface_close+0x1b8>)
   1af46:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1af4a:	2800      	cmp	r0, #0
   1af4c:	f000 809f 	beq.w	1b08e <pdn_interface_close+0x16a>
   1af50:	6883      	ldr	r3, [r0, #8]
   1af52:	2b00      	cmp	r3, #0
   1af54:	f000 809b 	beq.w	1b08e <pdn_interface_close+0x16a>
   1af58:	6883      	ldr	r3, [r0, #8]
   1af5a:	2b03      	cmp	r3, #3
   1af5c:	d00b      	beq.n	1af76 <pdn_interface_close+0x52>
   1af5e:	6883      	ldr	r3, [r0, #8]
   1af60:	2b02      	cmp	r3, #2
   1af62:	d055      	beq.n	1b010 <pdn_interface_close+0xec>
   1af64:	f002 f858 	bl	1d018 <nrf_free>
   1af68:	2300      	movs	r3, #0
   1af6a:	4618      	mov	r0, r3
   1af6c:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   1af70:	b003      	add	sp, #12
   1af72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1af76:	4e5a      	ldr	r6, [pc, #360]	; (1b0e0 <pdn_interface_close+0x1bc>)
   1af78:	4a5a      	ldr	r2, [pc, #360]	; (1b0e4 <pdn_interface_close+0x1c0>)
   1af7a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1af7e:	4630      	mov	r0, r6
   1af80:	f004 ff34 	bl	1fdec <sniprintf>
   1af84:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1af88:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1af8c:	681b      	ldr	r3, [r3, #0]
   1af8e:	4a56      	ldr	r2, [pc, #344]	; (1b0e8 <pdn_interface_close+0x1c4>)
   1af90:	4430      	add	r0, r6
   1af92:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1b0f8 <pdn_interface_close+0x1d4>
   1af96:	f004 ff29 	bl	1fdec <sniprintf>
   1af9a:	4630      	mov	r0, r6
   1af9c:	f8d8 9000 	ldr.w	r9, [r8]
   1afa0:	2700      	movs	r7, #0
   1afa2:	f7f1 ffc9 	bl	cf38 <strlen>
   1afa6:	4631      	mov	r1, r6
   1afa8:	4602      	mov	r2, r0
   1afaa:	463b      	mov	r3, r7
   1afac:	4648      	mov	r0, r9
   1afae:	9701      	str	r7, [sp, #4]
   1afb0:	9700      	str	r7, [sp, #0]
   1afb2:	f7ff fac7 	bl	1a544 <at_interface_write>
   1afb6:	4681      	mov	r9, r0
   1afb8:	4630      	mov	r0, r6
   1afba:	f7f1 ffbd 	bl	cf38 <strlen>
   1afbe:	4548      	cmp	r0, r9
   1afc0:	f040 8082 	bne.w	1b0c8 <pdn_interface_close+0x1a4>
   1afc4:	463b      	mov	r3, r7
   1afc6:	e9cd 7700 	strd	r7, r7, [sp]
   1afca:	f44f 7280 	mov.w	r2, #256	; 0x100
   1afce:	4631      	mov	r1, r6
   1afd0:	f8d8 0000 	ldr.w	r0, [r8]
   1afd4:	f7ff fbec 	bl	1a7b0 <at_interface_read>
   1afd8:	4607      	mov	r7, r0
   1afda:	4844      	ldr	r0, [pc, #272]	; (1b0ec <pdn_interface_close+0x1c8>)
   1afdc:	f7f1 ffac 	bl	cf38 <strlen>
   1afe0:	4287      	cmp	r7, r0
   1afe2:	da5a      	bge.n	1b09a <pdn_interface_close+0x176>
   1afe4:	4842      	ldr	r0, [pc, #264]	; (1b0f0 <pdn_interface_close+0x1cc>)
   1afe6:	f7f1 ffa7 	bl	cf38 <strlen>
   1afea:	493d      	ldr	r1, [pc, #244]	; (1b0e0 <pdn_interface_close+0x1bc>)
   1afec:	4602      	mov	r2, r0
   1afee:	4840      	ldr	r0, [pc, #256]	; (1b0f0 <pdn_interface_close+0x1cc>)
   1aff0:	f00c fe84 	bl	27cfc <strncmp>
   1aff4:	2800      	cmp	r0, #0
   1aff6:	d167      	bne.n	1b0c8 <pdn_interface_close+0x1a4>
   1aff8:	2008      	movs	r0, #8
   1affa:	f7f8 fe49 	bl	13c90 <bsd_os_errno_set>
   1affe:	2202      	movs	r2, #2
   1b000:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1b004:	609a      	str	r2, [r3, #8]
   1b006:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1b00a:	6883      	ldr	r3, [r0, #8]
   1b00c:	2b02      	cmp	r3, #2
   1b00e:	d1a9      	bne.n	1af64 <pdn_interface_close+0x40>
   1b010:	4e33      	ldr	r6, [pc, #204]	; (1b0e0 <pdn_interface_close+0x1bc>)
   1b012:	4a38      	ldr	r2, [pc, #224]	; (1b0f4 <pdn_interface_close+0x1d0>)
   1b014:	f44f 7180 	mov.w	r1, #256	; 0x100
   1b018:	4630      	mov	r0, r6
   1b01a:	f004 fee7 	bl	1fdec <sniprintf>
   1b01e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1b022:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1b026:	681b      	ldr	r3, [r3, #0]
   1b028:	4a2f      	ldr	r2, [pc, #188]	; (1b0e8 <pdn_interface_close+0x1c4>)
   1b02a:	4430      	add	r0, r6
   1b02c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 1b0f8 <pdn_interface_close+0x1d4>
   1b030:	f004 fedc 	bl	1fdec <sniprintf>
   1b034:	4630      	mov	r0, r6
   1b036:	f8d8 9000 	ldr.w	r9, [r8]
   1b03a:	2700      	movs	r7, #0
   1b03c:	f7f1 ff7c 	bl	cf38 <strlen>
   1b040:	4631      	mov	r1, r6
   1b042:	4602      	mov	r2, r0
   1b044:	463b      	mov	r3, r7
   1b046:	4648      	mov	r0, r9
   1b048:	9701      	str	r7, [sp, #4]
   1b04a:	9700      	str	r7, [sp, #0]
   1b04c:	f7ff fa7a 	bl	1a544 <at_interface_write>
   1b050:	4681      	mov	r9, r0
   1b052:	4630      	mov	r0, r6
   1b054:	f7f1 ff70 	bl	cf38 <strlen>
   1b058:	4548      	cmp	r0, r9
   1b05a:	d139      	bne.n	1b0d0 <pdn_interface_close+0x1ac>
   1b05c:	463b      	mov	r3, r7
   1b05e:	e9cd 7700 	strd	r7, r7, [sp]
   1b062:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b066:	4631      	mov	r1, r6
   1b068:	f8d8 0000 	ldr.w	r0, [r8]
   1b06c:	f7ff fba0 	bl	1a7b0 <at_interface_read>
   1b070:	4607      	mov	r7, r0
   1b072:	481e      	ldr	r0, [pc, #120]	; (1b0ec <pdn_interface_close+0x1c8>)
   1b074:	f7f1 ff60 	bl	cf38 <strlen>
   1b078:	4287      	cmp	r7, r0
   1b07a:	db16      	blt.n	1b0aa <pdn_interface_close+0x186>
   1b07c:	4602      	mov	r2, r0
   1b07e:	4631      	mov	r1, r6
   1b080:	481a      	ldr	r0, [pc, #104]	; (1b0ec <pdn_interface_close+0x1c8>)
   1b082:	f00c fe3b 	bl	27cfc <strncmp>
   1b086:	b980      	cbnz	r0, 1b0aa <pdn_interface_close+0x186>
   1b088:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1b08c:	e76a      	b.n	1af64 <pdn_interface_close+0x40>
   1b08e:	2009      	movs	r0, #9
   1b090:	f7f8 fdfe 	bl	13c90 <bsd_os_errno_set>
   1b094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b098:	e76a      	b.n	1af70 <pdn_interface_close+0x4c>
   1b09a:	4602      	mov	r2, r0
   1b09c:	4631      	mov	r1, r6
   1b09e:	4813      	ldr	r0, [pc, #76]	; (1b0ec <pdn_interface_close+0x1c8>)
   1b0a0:	f00c fe2c 	bl	27cfc <strncmp>
   1b0a4:	2800      	cmp	r0, #0
   1b0a6:	d0aa      	beq.n	1affe <pdn_interface_close+0xda>
   1b0a8:	e79c      	b.n	1afe4 <pdn_interface_close+0xc0>
   1b0aa:	4811      	ldr	r0, [pc, #68]	; (1b0f0 <pdn_interface_close+0x1cc>)
   1b0ac:	f7f1 ff44 	bl	cf38 <strlen>
   1b0b0:	490b      	ldr	r1, [pc, #44]	; (1b0e0 <pdn_interface_close+0x1bc>)
   1b0b2:	4602      	mov	r2, r0
   1b0b4:	480e      	ldr	r0, [pc, #56]	; (1b0f0 <pdn_interface_close+0x1cc>)
   1b0b6:	f00c fe21 	bl	27cfc <strncmp>
   1b0ba:	b948      	cbnz	r0, 1b0d0 <pdn_interface_close+0x1ac>
   1b0bc:	2008      	movs	r0, #8
   1b0be:	f7f8 fde7 	bl	13c90 <bsd_os_errno_set>
   1b0c2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1b0c6:	e74d      	b.n	1af64 <pdn_interface_close+0x40>
   1b0c8:	2005      	movs	r0, #5
   1b0ca:	f7f8 fde1 	bl	13c90 <bsd_os_errno_set>
   1b0ce:	e796      	b.n	1affe <pdn_interface_close+0xda>
   1b0d0:	2005      	movs	r0, #5
   1b0d2:	f7f8 fddd 	bl	13c90 <bsd_os_errno_set>
   1b0d6:	e7d7      	b.n	1b088 <pdn_interface_close+0x164>
   1b0d8:	789a0000 	.word	0x789a0000
   1b0dc:	200234b8 	.word	0x200234b8
   1b0e0:	200233b8 	.word	0x200233b8
   1b0e4:	00028d18 	.word	0x00028d18
   1b0e8:	00028d60 	.word	0x00028d60
   1b0ec:	00028d50 	.word	0x00028d50
   1b0f0:	00028db8 	.word	0x00028db8
   1b0f4:	00028d24 	.word	0x00028d24
   1b0f8:	200233b4 	.word	0x200233b4

0001b0fc <pdn_interface_setopt>:
   1b0fc:	b538      	push	{r3, r4, r5, lr}
   1b0fe:	f240 2502 	movw	r5, #514	; 0x202
   1b102:	42a9      	cmp	r1, r5
   1b104:	9c04      	ldr	r4, [sp, #16]
   1b106:	d140      	bne.n	1b18a <pdn_interface_setopt+0x8e>
   1b108:	2b00      	cmp	r3, #0
   1b10a:	d03e      	beq.n	1b18a <pdn_interface_setopt+0x8e>
   1b10c:	2c00      	cmp	r4, #0
   1b10e:	d03c      	beq.n	1b18a <pdn_interface_setopt+0x8e>
   1b110:	0c01      	lsrs	r1, r0, #16
   1b112:	4d22      	ldr	r5, [pc, #136]	; (1b19c <pdn_interface_setopt+0xa0>)
   1b114:	0409      	lsls	r1, r1, #16
   1b116:	42a9      	cmp	r1, r5
   1b118:	d005      	beq.n	1b126 <pdn_interface_setopt+0x2a>
   1b11a:	2009      	movs	r0, #9
   1b11c:	f7f8 fdb8 	bl	13c90 <bsd_os_errno_set>
   1b120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b124:	bd38      	pop	{r3, r4, r5, pc}
   1b126:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   1b12a:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   1b12e:	2809      	cmp	r0, #9
   1b130:	dcf3      	bgt.n	1b11a <pdn_interface_setopt+0x1e>
   1b132:	491b      	ldr	r1, [pc, #108]	; (1b1a0 <pdn_interface_setopt+0xa4>)
   1b134:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   1b138:	2900      	cmp	r1, #0
   1b13a:	d0ee      	beq.n	1b11a <pdn_interface_setopt+0x1e>
   1b13c:	6888      	ldr	r0, [r1, #8]
   1b13e:	2800      	cmp	r0, #0
   1b140:	d0eb      	beq.n	1b11a <pdn_interface_setopt+0x1e>
   1b142:	2a01      	cmp	r2, #1
   1b144:	d128      	bne.n	1b198 <pdn_interface_setopt+0x9c>
   1b146:	688a      	ldr	r2, [r1, #8]
   1b148:	b1ea      	cbz	r2, 1b186 <pdn_interface_setopt+0x8a>
   1b14a:	688a      	ldr	r2, [r1, #8]
   1b14c:	2a03      	cmp	r2, #3
   1b14e:	d01a      	beq.n	1b186 <pdn_interface_setopt+0x8a>
   1b150:	688a      	ldr	r2, [r1, #8]
   1b152:	2a04      	cmp	r2, #4
   1b154:	d017      	beq.n	1b186 <pdn_interface_setopt+0x8a>
   1b156:	08a2      	lsrs	r2, r4, #2
   1b158:	1e50      	subs	r0, r2, #1
   1b15a:	2801      	cmp	r0, #1
   1b15c:	d815      	bhi.n	1b18a <pdn_interface_setopt+0x8e>
   1b15e:	07a0      	lsls	r0, r4, #30
   1b160:	d113      	bne.n	1b18a <pdn_interface_setopt+0x8e>
   1b162:	6818      	ldr	r0, [r3, #0]
   1b164:	2802      	cmp	r0, #2
   1b166:	d012      	beq.n	1b18e <pdn_interface_setopt+0x92>
   1b168:	280a      	cmp	r0, #10
   1b16a:	d10e      	bne.n	1b18a <pdn_interface_setopt+0x8e>
   1b16c:	2002      	movs	r0, #2
   1b16e:	2a02      	cmp	r2, #2
   1b170:	d106      	bne.n	1b180 <pdn_interface_setopt+0x84>
   1b172:	685b      	ldr	r3, [r3, #4]
   1b174:	2b02      	cmp	r3, #2
   1b176:	d00c      	beq.n	1b192 <pdn_interface_setopt+0x96>
   1b178:	2b0a      	cmp	r3, #10
   1b17a:	d106      	bne.n	1b18a <pdn_interface_setopt+0x8e>
   1b17c:	f040 0002 	orr.w	r0, r0, #2
   1b180:	6708      	str	r0, [r1, #112]	; 0x70
   1b182:	2000      	movs	r0, #0
   1b184:	bd38      	pop	{r3, r4, r5, pc}
   1b186:	200e      	movs	r0, #14
   1b188:	e7c8      	b.n	1b11c <pdn_interface_setopt+0x20>
   1b18a:	2016      	movs	r0, #22
   1b18c:	e7c6      	b.n	1b11c <pdn_interface_setopt+0x20>
   1b18e:	2001      	movs	r0, #1
   1b190:	e7ed      	b.n	1b16e <pdn_interface_setopt+0x72>
   1b192:	f040 0001 	orr.w	r0, r0, #1
   1b196:	e7f3      	b.n	1b180 <pdn_interface_setopt+0x84>
   1b198:	202d      	movs	r0, #45	; 0x2d
   1b19a:	e7bf      	b.n	1b11c <pdn_interface_setopt+0x20>
   1b19c:	789a0000 	.word	0x789a0000
   1b1a0:	200234b8 	.word	0x200234b8

0001b1a4 <pdn_interface_getopt>:
   1b1a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b1a8:	f240 2402 	movw	r4, #514	; 0x202
   1b1ac:	b083      	sub	sp, #12
   1b1ae:	42a1      	cmp	r1, r4
   1b1b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1b1b2:	f040 809f 	bne.w	1b2f4 <pdn_interface_getopt+0x150>
   1b1b6:	461e      	mov	r6, r3
   1b1b8:	2b00      	cmp	r3, #0
   1b1ba:	f000 809b 	beq.w	1b2f4 <pdn_interface_getopt+0x150>
   1b1be:	2d00      	cmp	r5, #0
   1b1c0:	f000 8098 	beq.w	1b2f4 <pdn_interface_getopt+0x150>
   1b1c4:	0c03      	lsrs	r3, r0, #16
   1b1c6:	4955      	ldr	r1, [pc, #340]	; (1b31c <pdn_interface_getopt+0x178>)
   1b1c8:	041b      	lsls	r3, r3, #16
   1b1ca:	428b      	cmp	r3, r1
   1b1cc:	f040 8094 	bne.w	1b2f8 <pdn_interface_getopt+0x154>
   1b1d0:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1b1d4:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1b1d8:	2c09      	cmp	r4, #9
   1b1da:	f300 808d 	bgt.w	1b2f8 <pdn_interface_getopt+0x154>
   1b1de:	4b50      	ldr	r3, [pc, #320]	; (1b320 <pdn_interface_getopt+0x17c>)
   1b1e0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1b1e4:	2b00      	cmp	r3, #0
   1b1e6:	f000 8087 	beq.w	1b2f8 <pdn_interface_getopt+0x154>
   1b1ea:	6899      	ldr	r1, [r3, #8]
   1b1ec:	2900      	cmp	r1, #0
   1b1ee:	f000 8083 	beq.w	1b2f8 <pdn_interface_getopt+0x154>
   1b1f2:	2a02      	cmp	r2, #2
   1b1f4:	d04c      	beq.n	1b290 <pdn_interface_getopt+0xec>
   1b1f6:	2a03      	cmp	r2, #3
   1b1f8:	d009      	beq.n	1b20e <pdn_interface_getopt+0x6a>
   1b1fa:	2a01      	cmp	r2, #1
   1b1fc:	d052      	beq.n	1b2a4 <pdn_interface_getopt+0x100>
   1b1fe:	202d      	movs	r0, #45	; 0x2d
   1b200:	f7f8 fd46 	bl	13c90 <bsd_os_errno_set>
   1b204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b208:	b003      	add	sp, #12
   1b20a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b20e:	682b      	ldr	r3, [r5, #0]
   1b210:	2b00      	cmp	r3, #0
   1b212:	d06f      	beq.n	1b2f4 <pdn_interface_getopt+0x150>
   1b214:	4a43      	ldr	r2, [pc, #268]	; (1b324 <pdn_interface_getopt+0x180>)
   1b216:	f44f 7180 	mov.w	r1, #256	; 0x100
   1b21a:	4843      	ldr	r0, [pc, #268]	; (1b328 <pdn_interface_getopt+0x184>)
   1b21c:	f8df 8114 	ldr.w	r8, [pc, #276]	; 1b334 <pdn_interface_getopt+0x190>
   1b220:	f004 fde4 	bl	1fdec <sniprintf>
   1b224:	4840      	ldr	r0, [pc, #256]	; (1b328 <pdn_interface_getopt+0x184>)
   1b226:	f8d8 9000 	ldr.w	r9, [r8]
   1b22a:	2700      	movs	r7, #0
   1b22c:	f7f1 fe84 	bl	cf38 <strlen>
   1b230:	463b      	mov	r3, r7
   1b232:	4602      	mov	r2, r0
   1b234:	493c      	ldr	r1, [pc, #240]	; (1b328 <pdn_interface_getopt+0x184>)
   1b236:	4648      	mov	r0, r9
   1b238:	9701      	str	r7, [sp, #4]
   1b23a:	9700      	str	r7, [sp, #0]
   1b23c:	f7ff f982 	bl	1a544 <at_interface_write>
   1b240:	4681      	mov	r9, r0
   1b242:	4839      	ldr	r0, [pc, #228]	; (1b328 <pdn_interface_getopt+0x184>)
   1b244:	f7f1 fe78 	bl	cf38 <strlen>
   1b248:	4548      	cmp	r0, r9
   1b24a:	d160      	bne.n	1b30e <pdn_interface_getopt+0x16a>
   1b24c:	463b      	mov	r3, r7
   1b24e:	e9cd 7700 	strd	r7, r7, [sp]
   1b252:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b256:	4934      	ldr	r1, [pc, #208]	; (1b328 <pdn_interface_getopt+0x184>)
   1b258:	f8d8 0000 	ldr.w	r0, [r8]
   1b25c:	f7ff faa8 	bl	1a7b0 <at_interface_read>
   1b260:	4607      	mov	r7, r0
   1b262:	4832      	ldr	r0, [pc, #200]	; (1b32c <pdn_interface_getopt+0x188>)
   1b264:	f7f1 fe68 	bl	cf38 <strlen>
   1b268:	4287      	cmp	r7, r0
   1b26a:	db32      	blt.n	1b2d2 <pdn_interface_getopt+0x12e>
   1b26c:	4602      	mov	r2, r0
   1b26e:	492e      	ldr	r1, [pc, #184]	; (1b328 <pdn_interface_getopt+0x184>)
   1b270:	482e      	ldr	r0, [pc, #184]	; (1b32c <pdn_interface_getopt+0x188>)
   1b272:	f00c fd43 	bl	27cfc <strncmp>
   1b276:	4607      	mov	r7, r0
   1b278:	bb58      	cbnz	r0, 1b2d2 <pdn_interface_getopt+0x12e>
   1b27a:	4620      	mov	r0, r4
   1b27c:	492a      	ldr	r1, [pc, #168]	; (1b328 <pdn_interface_getopt+0x184>)
   1b27e:	f7ff fb45 	bl	1a90c <pdn_state_get_parser>
   1b282:	2800      	cmp	r0, #0
   1b284:	dbbc      	blt.n	1b200 <pdn_interface_getopt+0x5c>
   1b286:	2301      	movs	r3, #1
   1b288:	7030      	strb	r0, [r6, #0]
   1b28a:	4638      	mov	r0, r7
   1b28c:	602b      	str	r3, [r5, #0]
   1b28e:	e7bb      	b.n	1b208 <pdn_interface_getopt+0x64>
   1b290:	682a      	ldr	r2, [r5, #0]
   1b292:	b37a      	cbz	r2, 1b2f4 <pdn_interface_getopt+0x150>
   1b294:	2201      	movs	r2, #1
   1b296:	2000      	movs	r0, #0
   1b298:	681b      	ldr	r3, [r3, #0]
   1b29a:	7033      	strb	r3, [r6, #0]
   1b29c:	602a      	str	r2, [r5, #0]
   1b29e:	b003      	add	sp, #12
   1b2a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b2a4:	689a      	ldr	r2, [r3, #8]
   1b2a6:	b31a      	cbz	r2, 1b2f0 <pdn_interface_getopt+0x14c>
   1b2a8:	689a      	ldr	r2, [r3, #8]
   1b2aa:	2a04      	cmp	r2, #4
   1b2ac:	d020      	beq.n	1b2f0 <pdn_interface_getopt+0x14c>
   1b2ae:	682a      	ldr	r2, [r5, #0]
   1b2b0:	2a07      	cmp	r2, #7
   1b2b2:	d91f      	bls.n	1b2f4 <pdn_interface_getopt+0x150>
   1b2b4:	f012 0203 	ands.w	r2, r2, #3
   1b2b8:	d11c      	bne.n	1b2f4 <pdn_interface_getopt+0x150>
   1b2ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b2bc:	0799      	lsls	r1, r3, #30
   1b2be:	d421      	bmi.n	1b304 <pdn_interface_getopt+0x160>
   1b2c0:	2104      	movs	r1, #4
   1b2c2:	07db      	lsls	r3, r3, #31
   1b2c4:	d502      	bpl.n	1b2cc <pdn_interface_getopt+0x128>
   1b2c6:	2302      	movs	r3, #2
   1b2c8:	50b3      	str	r3, [r6, r2]
   1b2ca:	460a      	mov	r2, r1
   1b2cc:	602a      	str	r2, [r5, #0]
   1b2ce:	2000      	movs	r0, #0
   1b2d0:	e79a      	b.n	1b208 <pdn_interface_getopt+0x64>
   1b2d2:	4817      	ldr	r0, [pc, #92]	; (1b330 <pdn_interface_getopt+0x18c>)
   1b2d4:	f7f1 fe30 	bl	cf38 <strlen>
   1b2d8:	4913      	ldr	r1, [pc, #76]	; (1b328 <pdn_interface_getopt+0x184>)
   1b2da:	4602      	mov	r2, r0
   1b2dc:	4814      	ldr	r0, [pc, #80]	; (1b330 <pdn_interface_getopt+0x18c>)
   1b2de:	f00c fd0d 	bl	27cfc <strncmp>
   1b2e2:	b9a0      	cbnz	r0, 1b30e <pdn_interface_getopt+0x16a>
   1b2e4:	2008      	movs	r0, #8
   1b2e6:	f7f8 fcd3 	bl	13c90 <bsd_os_errno_set>
   1b2ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b2ee:	e787      	b.n	1b200 <pdn_interface_getopt+0x5c>
   1b2f0:	200e      	movs	r0, #14
   1b2f2:	e785      	b.n	1b200 <pdn_interface_getopt+0x5c>
   1b2f4:	2016      	movs	r0, #22
   1b2f6:	e783      	b.n	1b200 <pdn_interface_getopt+0x5c>
   1b2f8:	2009      	movs	r0, #9
   1b2fa:	f7f8 fcc9 	bl	13c90 <bsd_os_errno_set>
   1b2fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b302:	e781      	b.n	1b208 <pdn_interface_getopt+0x64>
   1b304:	220a      	movs	r2, #10
   1b306:	2108      	movs	r1, #8
   1b308:	6032      	str	r2, [r6, #0]
   1b30a:	2204      	movs	r2, #4
   1b30c:	e7d9      	b.n	1b2c2 <pdn_interface_getopt+0x11e>
   1b30e:	2005      	movs	r0, #5
   1b310:	f7f8 fcbe 	bl	13c90 <bsd_os_errno_set>
   1b314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b318:	e772      	b.n	1b200 <pdn_interface_getopt+0x5c>
   1b31a:	bf00      	nop
   1b31c:	789a0000 	.word	0x789a0000
   1b320:	200234b8 	.word	0x200234b8
   1b324:	00028d88 	.word	0x00028d88
   1b328:	200233b8 	.word	0x200233b8
   1b32c:	00028d94 	.word	0x00028d94
   1b330:	00028db8 	.word	0x00028db8
   1b334:	200233b4 	.word	0x200233b4

0001b338 <pdn_interface_pdn_id_get>:
   1b338:	2900      	cmp	r1, #0
   1b33a:	f000 83b9 	beq.w	1bab0 <pdn_interface_pdn_id_get+0x778>
   1b33e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b342:	4ca3      	ldr	r4, [pc, #652]	; (1b5d0 <pdn_interface_pdn_id_get+0x298>)
   1b344:	2802      	cmp	r0, #2
   1b346:	b083      	sub	sp, #12
   1b348:	460d      	mov	r5, r1
   1b34a:	6823      	ldr	r3, [r4, #0]
   1b34c:	f000 8094 	beq.w	1b478 <pdn_interface_pdn_id_get+0x140>
   1b350:	280a      	cmp	r0, #10
   1b352:	d03f      	beq.n	1b3d4 <pdn_interface_pdn_id_get+0x9c>
   1b354:	b11b      	cbz	r3, 1b35e <pdn_interface_pdn_id_get+0x26>
   1b356:	689b      	ldr	r3, [r3, #8]
   1b358:	2b03      	cmp	r3, #3
   1b35a:	f000 8127 	beq.w	1b5ac <pdn_interface_pdn_id_get+0x274>
   1b35e:	6863      	ldr	r3, [r4, #4]
   1b360:	b11b      	cbz	r3, 1b36a <pdn_interface_pdn_id_get+0x32>
   1b362:	689b      	ldr	r3, [r3, #8]
   1b364:	2b03      	cmp	r3, #3
   1b366:	f000 8110 	beq.w	1b58a <pdn_interface_pdn_id_get+0x252>
   1b36a:	68a3      	ldr	r3, [r4, #8]
   1b36c:	b11b      	cbz	r3, 1b376 <pdn_interface_pdn_id_get+0x3e>
   1b36e:	689b      	ldr	r3, [r3, #8]
   1b370:	2b03      	cmp	r3, #3
   1b372:	f000 80f9 	beq.w	1b568 <pdn_interface_pdn_id_get+0x230>
   1b376:	68e3      	ldr	r3, [r4, #12]
   1b378:	b11b      	cbz	r3, 1b382 <pdn_interface_pdn_id_get+0x4a>
   1b37a:	689b      	ldr	r3, [r3, #8]
   1b37c:	2b03      	cmp	r3, #3
   1b37e:	f000 80e2 	beq.w	1b546 <pdn_interface_pdn_id_get+0x20e>
   1b382:	6923      	ldr	r3, [r4, #16]
   1b384:	b11b      	cbz	r3, 1b38e <pdn_interface_pdn_id_get+0x56>
   1b386:	689b      	ldr	r3, [r3, #8]
   1b388:	2b03      	cmp	r3, #3
   1b38a:	f000 8123 	beq.w	1b5d4 <pdn_interface_pdn_id_get+0x29c>
   1b38e:	6963      	ldr	r3, [r4, #20]
   1b390:	b11b      	cbz	r3, 1b39a <pdn_interface_pdn_id_get+0x62>
   1b392:	689b      	ldr	r3, [r3, #8]
   1b394:	2b03      	cmp	r3, #3
   1b396:	f000 8161 	beq.w	1b65c <pdn_interface_pdn_id_get+0x324>
   1b39a:	69a3      	ldr	r3, [r4, #24]
   1b39c:	b11b      	cbz	r3, 1b3a6 <pdn_interface_pdn_id_get+0x6e>
   1b39e:	689b      	ldr	r3, [r3, #8]
   1b3a0:	2b03      	cmp	r3, #3
   1b3a2:	f000 814a 	beq.w	1b63a <pdn_interface_pdn_id_get+0x302>
   1b3a6:	69e3      	ldr	r3, [r4, #28]
   1b3a8:	b11b      	cbz	r3, 1b3b2 <pdn_interface_pdn_id_get+0x7a>
   1b3aa:	689b      	ldr	r3, [r3, #8]
   1b3ac:	2b03      	cmp	r3, #3
   1b3ae:	f000 8133 	beq.w	1b618 <pdn_interface_pdn_id_get+0x2e0>
   1b3b2:	6a23      	ldr	r3, [r4, #32]
   1b3b4:	b11b      	cbz	r3, 1b3be <pdn_interface_pdn_id_get+0x86>
   1b3b6:	689b      	ldr	r3, [r3, #8]
   1b3b8:	2b03      	cmp	r3, #3
   1b3ba:	f000 811c 	beq.w	1b5f6 <pdn_interface_pdn_id_get+0x2be>
   1b3be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b3c0:	b11b      	cbz	r3, 1b3ca <pdn_interface_pdn_id_get+0x92>
   1b3c2:	689b      	ldr	r3, [r3, #8]
   1b3c4:	2b03      	cmp	r3, #3
   1b3c6:	f000 80ad 	beq.w	1b524 <pdn_interface_pdn_id_get+0x1ec>
   1b3ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b3ce:	b003      	add	sp, #12
   1b3d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b3d4:	b11b      	cbz	r3, 1b3de <pdn_interface_pdn_id_get+0xa6>
   1b3d6:	689b      	ldr	r3, [r3, #8]
   1b3d8:	2b03      	cmp	r3, #3
   1b3da:	f000 8335 	beq.w	1ba48 <pdn_interface_pdn_id_get+0x710>
   1b3de:	6863      	ldr	r3, [r4, #4]
   1b3e0:	b11b      	cbz	r3, 1b3ea <pdn_interface_pdn_id_get+0xb2>
   1b3e2:	689b      	ldr	r3, [r3, #8]
   1b3e4:	2b03      	cmp	r3, #3
   1b3e6:	f000 82fd 	beq.w	1b9e4 <pdn_interface_pdn_id_get+0x6ac>
   1b3ea:	68a3      	ldr	r3, [r4, #8]
   1b3ec:	b11b      	cbz	r3, 1b3f6 <pdn_interface_pdn_id_get+0xbe>
   1b3ee:	689b      	ldr	r3, [r3, #8]
   1b3f0:	2b03      	cmp	r3, #3
   1b3f2:	f000 82d5 	beq.w	1b9a0 <pdn_interface_pdn_id_get+0x668>
   1b3f6:	68e3      	ldr	r3, [r4, #12]
   1b3f8:	b11b      	cbz	r3, 1b402 <pdn_interface_pdn_id_get+0xca>
   1b3fa:	689e      	ldr	r6, [r3, #8]
   1b3fc:	2e03      	cmp	r6, #3
   1b3fe:	f000 81f0 	beq.w	1b7e2 <pdn_interface_pdn_id_get+0x4aa>
   1b402:	6923      	ldr	r3, [r4, #16]
   1b404:	b11b      	cbz	r3, 1b40e <pdn_interface_pdn_id_get+0xd6>
   1b406:	689b      	ldr	r3, [r3, #8]
   1b408:	2b03      	cmp	r3, #3
   1b40a:	f000 8203 	beq.w	1b814 <pdn_interface_pdn_id_get+0x4dc>
   1b40e:	6963      	ldr	r3, [r4, #20]
   1b410:	b11b      	cbz	r3, 1b41a <pdn_interface_pdn_id_get+0xe2>
   1b412:	689b      	ldr	r3, [r3, #8]
   1b414:	2b03      	cmp	r3, #3
   1b416:	f000 8215 	beq.w	1b844 <pdn_interface_pdn_id_get+0x50c>
   1b41a:	69a3      	ldr	r3, [r4, #24]
   1b41c:	b11b      	cbz	r3, 1b426 <pdn_interface_pdn_id_get+0xee>
   1b41e:	689b      	ldr	r3, [r3, #8]
   1b420:	2b03      	cmp	r3, #3
   1b422:	f000 8227 	beq.w	1b874 <pdn_interface_pdn_id_get+0x53c>
   1b426:	69e3      	ldr	r3, [r4, #28]
   1b428:	b11b      	cbz	r3, 1b432 <pdn_interface_pdn_id_get+0xfa>
   1b42a:	689b      	ldr	r3, [r3, #8]
   1b42c:	2b03      	cmp	r3, #3
   1b42e:	f000 8239 	beq.w	1b8a4 <pdn_interface_pdn_id_get+0x56c>
   1b432:	6a23      	ldr	r3, [r4, #32]
   1b434:	b11b      	cbz	r3, 1b43e <pdn_interface_pdn_id_get+0x106>
   1b436:	689b      	ldr	r3, [r3, #8]
   1b438:	2b03      	cmp	r3, #3
   1b43a:	f000 824d 	beq.w	1b8d8 <pdn_interface_pdn_id_get+0x5a0>
   1b43e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b440:	2b00      	cmp	r3, #0
   1b442:	d0c2      	beq.n	1b3ca <pdn_interface_pdn_id_get+0x92>
   1b444:	689b      	ldr	r3, [r3, #8]
   1b446:	2b03      	cmp	r3, #3
   1b448:	d1bf      	bne.n	1b3ca <pdn_interface_pdn_id_get+0x92>
   1b44a:	4628      	mov	r0, r5
   1b44c:	f7f1 fd74 	bl	cf38 <strlen>
   1b450:	4606      	mov	r6, r0
   1b452:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1b454:	300c      	adds	r0, #12
   1b456:	f7f1 fd6f 	bl	cf38 <strlen>
   1b45a:	42b0      	cmp	r0, r6
   1b45c:	d1b5      	bne.n	1b3ca <pdn_interface_pdn_id_get+0x92>
   1b45e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1b460:	4628      	mov	r0, r5
   1b462:	310c      	adds	r1, #12
   1b464:	f7f1 fd5e 	bl	cf24 <strcmp>
   1b468:	2800      	cmp	r0, #0
   1b46a:	d1ae      	bne.n	1b3ca <pdn_interface_pdn_id_get+0x92>
   1b46c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b46e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b470:	0792      	lsls	r2, r2, #30
   1b472:	d5aa      	bpl.n	1b3ca <pdn_interface_pdn_id_get+0x92>
   1b474:	2609      	movs	r6, #9
   1b476:	e11a      	b.n	1b6ae <pdn_interface_pdn_id_get+0x376>
   1b478:	b11b      	cbz	r3, 1b482 <pdn_interface_pdn_id_get+0x14a>
   1b47a:	689b      	ldr	r3, [r3, #8]
   1b47c:	2b03      	cmp	r3, #3
   1b47e:	f000 82fd 	beq.w	1ba7c <pdn_interface_pdn_id_get+0x744>
   1b482:	6863      	ldr	r3, [r4, #4]
   1b484:	b11b      	cbz	r3, 1b48e <pdn_interface_pdn_id_get+0x156>
   1b486:	689b      	ldr	r3, [r3, #8]
   1b488:	2b03      	cmp	r3, #3
   1b48a:	f000 82c5 	beq.w	1ba18 <pdn_interface_pdn_id_get+0x6e0>
   1b48e:	68a3      	ldr	r3, [r4, #8]
   1b490:	b11b      	cbz	r3, 1b49a <pdn_interface_pdn_id_get+0x162>
   1b492:	689b      	ldr	r3, [r3, #8]
   1b494:	2b03      	cmp	r3, #3
   1b496:	f000 8269 	beq.w	1b96c <pdn_interface_pdn_id_get+0x634>
   1b49a:	68e3      	ldr	r3, [r4, #12]
   1b49c:	b11b      	cbz	r3, 1b4a6 <pdn_interface_pdn_id_get+0x16e>
   1b49e:	689e      	ldr	r6, [r3, #8]
   1b4a0:	2e03      	cmp	r6, #3
   1b4a2:	f000 80ec 	beq.w	1b67e <pdn_interface_pdn_id_get+0x346>
   1b4a6:	6923      	ldr	r3, [r4, #16]
   1b4a8:	b11b      	cbz	r3, 1b4b2 <pdn_interface_pdn_id_get+0x17a>
   1b4aa:	689b      	ldr	r3, [r3, #8]
   1b4ac:	2b03      	cmp	r3, #3
   1b4ae:	f000 814a 	beq.w	1b746 <pdn_interface_pdn_id_get+0x40e>
   1b4b2:	6963      	ldr	r3, [r4, #20]
   1b4b4:	b11b      	cbz	r3, 1b4be <pdn_interface_pdn_id_get+0x186>
   1b4b6:	689b      	ldr	r3, [r3, #8]
   1b4b8:	2b03      	cmp	r3, #3
   1b4ba:	f000 815e 	beq.w	1b77a <pdn_interface_pdn_id_get+0x442>
   1b4be:	69a3      	ldr	r3, [r4, #24]
   1b4c0:	b11b      	cbz	r3, 1b4ca <pdn_interface_pdn_id_get+0x192>
   1b4c2:	689b      	ldr	r3, [r3, #8]
   1b4c4:	2b03      	cmp	r3, #3
   1b4c6:	f000 8172 	beq.w	1b7ae <pdn_interface_pdn_id_get+0x476>
   1b4ca:	69e3      	ldr	r3, [r4, #28]
   1b4cc:	b11b      	cbz	r3, 1b4d6 <pdn_interface_pdn_id_get+0x19e>
   1b4ce:	689b      	ldr	r3, [r3, #8]
   1b4d0:	2b03      	cmp	r3, #3
   1b4d2:	f000 821b 	beq.w	1b90c <pdn_interface_pdn_id_get+0x5d4>
   1b4d6:	6a23      	ldr	r3, [r4, #32]
   1b4d8:	b11b      	cbz	r3, 1b4e2 <pdn_interface_pdn_id_get+0x1aa>
   1b4da:	689b      	ldr	r3, [r3, #8]
   1b4dc:	2b03      	cmp	r3, #3
   1b4de:	f000 822d 	beq.w	1b93c <pdn_interface_pdn_id_get+0x604>
   1b4e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b4e4:	2b00      	cmp	r3, #0
   1b4e6:	f43f af70 	beq.w	1b3ca <pdn_interface_pdn_id_get+0x92>
   1b4ea:	689b      	ldr	r3, [r3, #8]
   1b4ec:	2b03      	cmp	r3, #3
   1b4ee:	f47f af6c 	bne.w	1b3ca <pdn_interface_pdn_id_get+0x92>
   1b4f2:	4628      	mov	r0, r5
   1b4f4:	f7f1 fd20 	bl	cf38 <strlen>
   1b4f8:	4606      	mov	r6, r0
   1b4fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1b4fc:	300c      	adds	r0, #12
   1b4fe:	f7f1 fd1b 	bl	cf38 <strlen>
   1b502:	4286      	cmp	r6, r0
   1b504:	f47f af61 	bne.w	1b3ca <pdn_interface_pdn_id_get+0x92>
   1b508:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1b50a:	4628      	mov	r0, r5
   1b50c:	310c      	adds	r1, #12
   1b50e:	f7f1 fd09 	bl	cf24 <strcmp>
   1b512:	2800      	cmp	r0, #0
   1b514:	f47f af59 	bne.w	1b3ca <pdn_interface_pdn_id_get+0x92>
   1b518:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b51a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b51c:	07d2      	lsls	r2, r2, #31
   1b51e:	f57f af54 	bpl.w	1b3ca <pdn_interface_pdn_id_get+0x92>
   1b522:	e7a7      	b.n	1b474 <pdn_interface_pdn_id_get+0x13c>
   1b524:	4628      	mov	r0, r5
   1b526:	f7f1 fd07 	bl	cf38 <strlen>
   1b52a:	4606      	mov	r6, r0
   1b52c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1b52e:	300c      	adds	r0, #12
   1b530:	f7f1 fd02 	bl	cf38 <strlen>
   1b534:	42b0      	cmp	r0, r6
   1b536:	f47f af48 	bne.w	1b3ca <pdn_interface_pdn_id_get+0x92>
   1b53a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1b53c:	4628      	mov	r0, r5
   1b53e:	310c      	adds	r1, #12
   1b540:	f7f1 fcf0 	bl	cf24 <strcmp>
   1b544:	e741      	b.n	1b3ca <pdn_interface_pdn_id_get+0x92>
   1b546:	4628      	mov	r0, r5
   1b548:	f7f1 fcf6 	bl	cf38 <strlen>
   1b54c:	4606      	mov	r6, r0
   1b54e:	68e0      	ldr	r0, [r4, #12]
   1b550:	300c      	adds	r0, #12
   1b552:	f7f1 fcf1 	bl	cf38 <strlen>
   1b556:	4286      	cmp	r6, r0
   1b558:	f47f af13 	bne.w	1b382 <pdn_interface_pdn_id_get+0x4a>
   1b55c:	68e1      	ldr	r1, [r4, #12]
   1b55e:	4628      	mov	r0, r5
   1b560:	310c      	adds	r1, #12
   1b562:	f7f1 fcdf 	bl	cf24 <strcmp>
   1b566:	e70c      	b.n	1b382 <pdn_interface_pdn_id_get+0x4a>
   1b568:	4628      	mov	r0, r5
   1b56a:	f7f1 fce5 	bl	cf38 <strlen>
   1b56e:	4606      	mov	r6, r0
   1b570:	68a0      	ldr	r0, [r4, #8]
   1b572:	300c      	adds	r0, #12
   1b574:	f7f1 fce0 	bl	cf38 <strlen>
   1b578:	4286      	cmp	r6, r0
   1b57a:	f47f aefc 	bne.w	1b376 <pdn_interface_pdn_id_get+0x3e>
   1b57e:	68a1      	ldr	r1, [r4, #8]
   1b580:	4628      	mov	r0, r5
   1b582:	310c      	adds	r1, #12
   1b584:	f7f1 fcce 	bl	cf24 <strcmp>
   1b588:	e6f5      	b.n	1b376 <pdn_interface_pdn_id_get+0x3e>
   1b58a:	4628      	mov	r0, r5
   1b58c:	f7f1 fcd4 	bl	cf38 <strlen>
   1b590:	4606      	mov	r6, r0
   1b592:	6860      	ldr	r0, [r4, #4]
   1b594:	300c      	adds	r0, #12
   1b596:	f7f1 fccf 	bl	cf38 <strlen>
   1b59a:	4286      	cmp	r6, r0
   1b59c:	f47f aee5 	bne.w	1b36a <pdn_interface_pdn_id_get+0x32>
   1b5a0:	6861      	ldr	r1, [r4, #4]
   1b5a2:	4628      	mov	r0, r5
   1b5a4:	310c      	adds	r1, #12
   1b5a6:	f7f1 fcbd 	bl	cf24 <strcmp>
   1b5aa:	e6de      	b.n	1b36a <pdn_interface_pdn_id_get+0x32>
   1b5ac:	4608      	mov	r0, r1
   1b5ae:	f7f1 fcc3 	bl	cf38 <strlen>
   1b5b2:	4606      	mov	r6, r0
   1b5b4:	6820      	ldr	r0, [r4, #0]
   1b5b6:	300c      	adds	r0, #12
   1b5b8:	f7f1 fcbe 	bl	cf38 <strlen>
   1b5bc:	4286      	cmp	r6, r0
   1b5be:	f47f aece 	bne.w	1b35e <pdn_interface_pdn_id_get+0x26>
   1b5c2:	6821      	ldr	r1, [r4, #0]
   1b5c4:	4628      	mov	r0, r5
   1b5c6:	310c      	adds	r1, #12
   1b5c8:	f7f1 fcac 	bl	cf24 <strcmp>
   1b5cc:	e6c7      	b.n	1b35e <pdn_interface_pdn_id_get+0x26>
   1b5ce:	bf00      	nop
   1b5d0:	200234b8 	.word	0x200234b8
   1b5d4:	4628      	mov	r0, r5
   1b5d6:	f7f1 fcaf 	bl	cf38 <strlen>
   1b5da:	4606      	mov	r6, r0
   1b5dc:	6920      	ldr	r0, [r4, #16]
   1b5de:	300c      	adds	r0, #12
   1b5e0:	f7f1 fcaa 	bl	cf38 <strlen>
   1b5e4:	4286      	cmp	r6, r0
   1b5e6:	f47f aed2 	bne.w	1b38e <pdn_interface_pdn_id_get+0x56>
   1b5ea:	6921      	ldr	r1, [r4, #16]
   1b5ec:	4628      	mov	r0, r5
   1b5ee:	310c      	adds	r1, #12
   1b5f0:	f7f1 fc98 	bl	cf24 <strcmp>
   1b5f4:	e6cb      	b.n	1b38e <pdn_interface_pdn_id_get+0x56>
   1b5f6:	4628      	mov	r0, r5
   1b5f8:	f7f1 fc9e 	bl	cf38 <strlen>
   1b5fc:	4606      	mov	r6, r0
   1b5fe:	6a20      	ldr	r0, [r4, #32]
   1b600:	300c      	adds	r0, #12
   1b602:	f7f1 fc99 	bl	cf38 <strlen>
   1b606:	4286      	cmp	r6, r0
   1b608:	f47f aed9 	bne.w	1b3be <pdn_interface_pdn_id_get+0x86>
   1b60c:	6a21      	ldr	r1, [r4, #32]
   1b60e:	4628      	mov	r0, r5
   1b610:	310c      	adds	r1, #12
   1b612:	f7f1 fc87 	bl	cf24 <strcmp>
   1b616:	e6d2      	b.n	1b3be <pdn_interface_pdn_id_get+0x86>
   1b618:	4628      	mov	r0, r5
   1b61a:	f7f1 fc8d 	bl	cf38 <strlen>
   1b61e:	4606      	mov	r6, r0
   1b620:	69e0      	ldr	r0, [r4, #28]
   1b622:	300c      	adds	r0, #12
   1b624:	f7f1 fc88 	bl	cf38 <strlen>
   1b628:	4286      	cmp	r6, r0
   1b62a:	f47f aec2 	bne.w	1b3b2 <pdn_interface_pdn_id_get+0x7a>
   1b62e:	69e1      	ldr	r1, [r4, #28]
   1b630:	4628      	mov	r0, r5
   1b632:	310c      	adds	r1, #12
   1b634:	f7f1 fc76 	bl	cf24 <strcmp>
   1b638:	e6bb      	b.n	1b3b2 <pdn_interface_pdn_id_get+0x7a>
   1b63a:	4628      	mov	r0, r5
   1b63c:	f7f1 fc7c 	bl	cf38 <strlen>
   1b640:	4606      	mov	r6, r0
   1b642:	69a0      	ldr	r0, [r4, #24]
   1b644:	300c      	adds	r0, #12
   1b646:	f7f1 fc77 	bl	cf38 <strlen>
   1b64a:	4286      	cmp	r6, r0
   1b64c:	f47f aeab 	bne.w	1b3a6 <pdn_interface_pdn_id_get+0x6e>
   1b650:	69a1      	ldr	r1, [r4, #24]
   1b652:	4628      	mov	r0, r5
   1b654:	310c      	adds	r1, #12
   1b656:	f7f1 fc65 	bl	cf24 <strcmp>
   1b65a:	e6a4      	b.n	1b3a6 <pdn_interface_pdn_id_get+0x6e>
   1b65c:	4628      	mov	r0, r5
   1b65e:	f7f1 fc6b 	bl	cf38 <strlen>
   1b662:	4606      	mov	r6, r0
   1b664:	6960      	ldr	r0, [r4, #20]
   1b666:	300c      	adds	r0, #12
   1b668:	f7f1 fc66 	bl	cf38 <strlen>
   1b66c:	4286      	cmp	r6, r0
   1b66e:	f47f ae94 	bne.w	1b39a <pdn_interface_pdn_id_get+0x62>
   1b672:	6961      	ldr	r1, [r4, #20]
   1b674:	4628      	mov	r0, r5
   1b676:	310c      	adds	r1, #12
   1b678:	f7f1 fc54 	bl	cf24 <strcmp>
   1b67c:	e68d      	b.n	1b39a <pdn_interface_pdn_id_get+0x62>
   1b67e:	4628      	mov	r0, r5
   1b680:	f7f1 fc5a 	bl	cf38 <strlen>
   1b684:	4607      	mov	r7, r0
   1b686:	68e0      	ldr	r0, [r4, #12]
   1b688:	300c      	adds	r0, #12
   1b68a:	f7f1 fc55 	bl	cf38 <strlen>
   1b68e:	4287      	cmp	r7, r0
   1b690:	f47f af09 	bne.w	1b4a6 <pdn_interface_pdn_id_get+0x16e>
   1b694:	68e1      	ldr	r1, [r4, #12]
   1b696:	4628      	mov	r0, r5
   1b698:	310c      	adds	r1, #12
   1b69a:	f7f1 fc43 	bl	cf24 <strcmp>
   1b69e:	2800      	cmp	r0, #0
   1b6a0:	f47f af01 	bne.w	1b4a6 <pdn_interface_pdn_id_get+0x16e>
   1b6a4:	68e3      	ldr	r3, [r4, #12]
   1b6a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b6a8:	07d1      	lsls	r1, r2, #31
   1b6aa:	f57f aefc 	bpl.w	1b4a6 <pdn_interface_pdn_id_get+0x16e>
   1b6ae:	6858      	ldr	r0, [r3, #4]
   1b6b0:	1c43      	adds	r3, r0, #1
   1b6b2:	f47f ae8c 	bne.w	1b3ce <pdn_interface_pdn_id_get+0x96>
   1b6b6:	4dc6      	ldr	r5, [pc, #792]	; (1b9d0 <pdn_interface_pdn_id_get+0x698>)
   1b6b8:	4ac6      	ldr	r2, [pc, #792]	; (1b9d4 <pdn_interface_pdn_id_get+0x69c>)
   1b6ba:	f44f 7180 	mov.w	r1, #256	; 0x100
   1b6be:	4628      	mov	r0, r5
   1b6c0:	f004 fb94 	bl	1fdec <sniprintf>
   1b6c4:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1b6c8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1b6cc:	681b      	ldr	r3, [r3, #0]
   1b6ce:	4ac2      	ldr	r2, [pc, #776]	; (1b9d8 <pdn_interface_pdn_id_get+0x6a0>)
   1b6d0:	4428      	add	r0, r5
   1b6d2:	f8df 830c 	ldr.w	r8, [pc, #780]	; 1b9e0 <pdn_interface_pdn_id_get+0x6a8>
   1b6d6:	f004 fb89 	bl	1fdec <sniprintf>
   1b6da:	4628      	mov	r0, r5
   1b6dc:	f8d8 9000 	ldr.w	r9, [r8]
   1b6e0:	2700      	movs	r7, #0
   1b6e2:	f7f1 fc29 	bl	cf38 <strlen>
   1b6e6:	4629      	mov	r1, r5
   1b6e8:	4602      	mov	r2, r0
   1b6ea:	463b      	mov	r3, r7
   1b6ec:	4648      	mov	r0, r9
   1b6ee:	9701      	str	r7, [sp, #4]
   1b6f0:	9700      	str	r7, [sp, #0]
   1b6f2:	f7fe ff27 	bl	1a544 <at_interface_write>
   1b6f6:	4681      	mov	r9, r0
   1b6f8:	4628      	mov	r0, r5
   1b6fa:	f7f1 fc1d 	bl	cf38 <strlen>
   1b6fe:	4548      	cmp	r0, r9
   1b700:	f040 81e9 	bne.w	1bad6 <pdn_interface_pdn_id_get+0x79e>
   1b704:	463b      	mov	r3, r7
   1b706:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b70a:	e9cd 7700 	strd	r7, r7, [sp]
   1b70e:	4629      	mov	r1, r5
   1b710:	f8d8 0000 	ldr.w	r0, [r8]
   1b714:	f7ff f84c 	bl	1a7b0 <at_interface_read>
   1b718:	4607      	mov	r7, r0
   1b71a:	48b0      	ldr	r0, [pc, #704]	; (1b9dc <pdn_interface_pdn_id_get+0x6a4>)
   1b71c:	f7f1 fc0c 	bl	cf38 <strlen>
   1b720:	4287      	cmp	r7, r0
   1b722:	4602      	mov	r2, r0
   1b724:	f2c0 81c7 	blt.w	1bab6 <pdn_interface_pdn_id_get+0x77e>
   1b728:	4629      	mov	r1, r5
   1b72a:	48ac      	ldr	r0, [pc, #688]	; (1b9dc <pdn_interface_pdn_id_get+0x6a4>)
   1b72c:	f00c fae6 	bl	27cfc <strncmp>
   1b730:	2800      	cmp	r0, #0
   1b732:	f040 81c0 	bne.w	1bab6 <pdn_interface_pdn_id_get+0x77e>
   1b736:	4629      	mov	r1, r5
   1b738:	4630      	mov	r0, r6
   1b73a:	f7ff f91d 	bl	1a978 <pdn_id_get_parser>
   1b73e:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1b742:	6858      	ldr	r0, [r3, #4]
   1b744:	e643      	b.n	1b3ce <pdn_interface_pdn_id_get+0x96>
   1b746:	4628      	mov	r0, r5
   1b748:	f7f1 fbf6 	bl	cf38 <strlen>
   1b74c:	4606      	mov	r6, r0
   1b74e:	6920      	ldr	r0, [r4, #16]
   1b750:	300c      	adds	r0, #12
   1b752:	f7f1 fbf1 	bl	cf38 <strlen>
   1b756:	4286      	cmp	r6, r0
   1b758:	f47f aeab 	bne.w	1b4b2 <pdn_interface_pdn_id_get+0x17a>
   1b75c:	6921      	ldr	r1, [r4, #16]
   1b75e:	4628      	mov	r0, r5
   1b760:	310c      	adds	r1, #12
   1b762:	f7f1 fbdf 	bl	cf24 <strcmp>
   1b766:	2800      	cmp	r0, #0
   1b768:	f47f aea3 	bne.w	1b4b2 <pdn_interface_pdn_id_get+0x17a>
   1b76c:	6923      	ldr	r3, [r4, #16]
   1b76e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b770:	07d2      	lsls	r2, r2, #31
   1b772:	f57f ae9e 	bpl.w	1b4b2 <pdn_interface_pdn_id_get+0x17a>
   1b776:	2604      	movs	r6, #4
   1b778:	e799      	b.n	1b6ae <pdn_interface_pdn_id_get+0x376>
   1b77a:	4628      	mov	r0, r5
   1b77c:	f7f1 fbdc 	bl	cf38 <strlen>
   1b780:	4606      	mov	r6, r0
   1b782:	6960      	ldr	r0, [r4, #20]
   1b784:	300c      	adds	r0, #12
   1b786:	f7f1 fbd7 	bl	cf38 <strlen>
   1b78a:	4286      	cmp	r6, r0
   1b78c:	f47f ae97 	bne.w	1b4be <pdn_interface_pdn_id_get+0x186>
   1b790:	6961      	ldr	r1, [r4, #20]
   1b792:	4628      	mov	r0, r5
   1b794:	310c      	adds	r1, #12
   1b796:	f7f1 fbc5 	bl	cf24 <strcmp>
   1b79a:	2800      	cmp	r0, #0
   1b79c:	f47f ae8f 	bne.w	1b4be <pdn_interface_pdn_id_get+0x186>
   1b7a0:	6963      	ldr	r3, [r4, #20]
   1b7a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b7a4:	07d7      	lsls	r7, r2, #31
   1b7a6:	f57f ae8a 	bpl.w	1b4be <pdn_interface_pdn_id_get+0x186>
   1b7aa:	2605      	movs	r6, #5
   1b7ac:	e77f      	b.n	1b6ae <pdn_interface_pdn_id_get+0x376>
   1b7ae:	4628      	mov	r0, r5
   1b7b0:	f7f1 fbc2 	bl	cf38 <strlen>
   1b7b4:	4606      	mov	r6, r0
   1b7b6:	69a0      	ldr	r0, [r4, #24]
   1b7b8:	300c      	adds	r0, #12
   1b7ba:	f7f1 fbbd 	bl	cf38 <strlen>
   1b7be:	4286      	cmp	r6, r0
   1b7c0:	f47f ae83 	bne.w	1b4ca <pdn_interface_pdn_id_get+0x192>
   1b7c4:	69a1      	ldr	r1, [r4, #24]
   1b7c6:	4628      	mov	r0, r5
   1b7c8:	310c      	adds	r1, #12
   1b7ca:	f7f1 fbab 	bl	cf24 <strcmp>
   1b7ce:	2800      	cmp	r0, #0
   1b7d0:	f47f ae7b 	bne.w	1b4ca <pdn_interface_pdn_id_get+0x192>
   1b7d4:	69a3      	ldr	r3, [r4, #24]
   1b7d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b7d8:	07d6      	lsls	r6, r2, #31
   1b7da:	f57f ae76 	bpl.w	1b4ca <pdn_interface_pdn_id_get+0x192>
   1b7de:	2606      	movs	r6, #6
   1b7e0:	e765      	b.n	1b6ae <pdn_interface_pdn_id_get+0x376>
   1b7e2:	4628      	mov	r0, r5
   1b7e4:	f7f1 fba8 	bl	cf38 <strlen>
   1b7e8:	4607      	mov	r7, r0
   1b7ea:	68e0      	ldr	r0, [r4, #12]
   1b7ec:	300c      	adds	r0, #12
   1b7ee:	f7f1 fba3 	bl	cf38 <strlen>
   1b7f2:	4287      	cmp	r7, r0
   1b7f4:	f47f ae05 	bne.w	1b402 <pdn_interface_pdn_id_get+0xca>
   1b7f8:	68e1      	ldr	r1, [r4, #12]
   1b7fa:	4628      	mov	r0, r5
   1b7fc:	310c      	adds	r1, #12
   1b7fe:	f7f1 fb91 	bl	cf24 <strcmp>
   1b802:	2800      	cmp	r0, #0
   1b804:	f47f adfd 	bne.w	1b402 <pdn_interface_pdn_id_get+0xca>
   1b808:	68e3      	ldr	r3, [r4, #12]
   1b80a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b80c:	0791      	lsls	r1, r2, #30
   1b80e:	f53f af4e 	bmi.w	1b6ae <pdn_interface_pdn_id_get+0x376>
   1b812:	e5f6      	b.n	1b402 <pdn_interface_pdn_id_get+0xca>
   1b814:	4628      	mov	r0, r5
   1b816:	f7f1 fb8f 	bl	cf38 <strlen>
   1b81a:	4606      	mov	r6, r0
   1b81c:	6920      	ldr	r0, [r4, #16]
   1b81e:	300c      	adds	r0, #12
   1b820:	f7f1 fb8a 	bl	cf38 <strlen>
   1b824:	4286      	cmp	r6, r0
   1b826:	f47f adf2 	bne.w	1b40e <pdn_interface_pdn_id_get+0xd6>
   1b82a:	6921      	ldr	r1, [r4, #16]
   1b82c:	4628      	mov	r0, r5
   1b82e:	310c      	adds	r1, #12
   1b830:	f7f1 fb78 	bl	cf24 <strcmp>
   1b834:	2800      	cmp	r0, #0
   1b836:	f47f adea 	bne.w	1b40e <pdn_interface_pdn_id_get+0xd6>
   1b83a:	6923      	ldr	r3, [r4, #16]
   1b83c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b83e:	0792      	lsls	r2, r2, #30
   1b840:	d499      	bmi.n	1b776 <pdn_interface_pdn_id_get+0x43e>
   1b842:	e5e4      	b.n	1b40e <pdn_interface_pdn_id_get+0xd6>
   1b844:	4628      	mov	r0, r5
   1b846:	f7f1 fb77 	bl	cf38 <strlen>
   1b84a:	4606      	mov	r6, r0
   1b84c:	6960      	ldr	r0, [r4, #20]
   1b84e:	300c      	adds	r0, #12
   1b850:	f7f1 fb72 	bl	cf38 <strlen>
   1b854:	4286      	cmp	r6, r0
   1b856:	f47f ade0 	bne.w	1b41a <pdn_interface_pdn_id_get+0xe2>
   1b85a:	6961      	ldr	r1, [r4, #20]
   1b85c:	4628      	mov	r0, r5
   1b85e:	310c      	adds	r1, #12
   1b860:	f7f1 fb60 	bl	cf24 <strcmp>
   1b864:	2800      	cmp	r0, #0
   1b866:	f47f add8 	bne.w	1b41a <pdn_interface_pdn_id_get+0xe2>
   1b86a:	6963      	ldr	r3, [r4, #20]
   1b86c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b86e:	0797      	lsls	r7, r2, #30
   1b870:	d49b      	bmi.n	1b7aa <pdn_interface_pdn_id_get+0x472>
   1b872:	e5d2      	b.n	1b41a <pdn_interface_pdn_id_get+0xe2>
   1b874:	4628      	mov	r0, r5
   1b876:	f7f1 fb5f 	bl	cf38 <strlen>
   1b87a:	4606      	mov	r6, r0
   1b87c:	69a0      	ldr	r0, [r4, #24]
   1b87e:	300c      	adds	r0, #12
   1b880:	f7f1 fb5a 	bl	cf38 <strlen>
   1b884:	4286      	cmp	r6, r0
   1b886:	f47f adce 	bne.w	1b426 <pdn_interface_pdn_id_get+0xee>
   1b88a:	69a1      	ldr	r1, [r4, #24]
   1b88c:	4628      	mov	r0, r5
   1b88e:	310c      	adds	r1, #12
   1b890:	f7f1 fb48 	bl	cf24 <strcmp>
   1b894:	2800      	cmp	r0, #0
   1b896:	f47f adc6 	bne.w	1b426 <pdn_interface_pdn_id_get+0xee>
   1b89a:	69a3      	ldr	r3, [r4, #24]
   1b89c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b89e:	0796      	lsls	r6, r2, #30
   1b8a0:	d49d      	bmi.n	1b7de <pdn_interface_pdn_id_get+0x4a6>
   1b8a2:	e5c0      	b.n	1b426 <pdn_interface_pdn_id_get+0xee>
   1b8a4:	4628      	mov	r0, r5
   1b8a6:	f7f1 fb47 	bl	cf38 <strlen>
   1b8aa:	4606      	mov	r6, r0
   1b8ac:	69e0      	ldr	r0, [r4, #28]
   1b8ae:	300c      	adds	r0, #12
   1b8b0:	f7f1 fb42 	bl	cf38 <strlen>
   1b8b4:	4286      	cmp	r6, r0
   1b8b6:	f47f adbc 	bne.w	1b432 <pdn_interface_pdn_id_get+0xfa>
   1b8ba:	69e1      	ldr	r1, [r4, #28]
   1b8bc:	4628      	mov	r0, r5
   1b8be:	310c      	adds	r1, #12
   1b8c0:	f7f1 fb30 	bl	cf24 <strcmp>
   1b8c4:	2800      	cmp	r0, #0
   1b8c6:	f47f adb4 	bne.w	1b432 <pdn_interface_pdn_id_get+0xfa>
   1b8ca:	69e3      	ldr	r3, [r4, #28]
   1b8cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b8ce:	0790      	lsls	r0, r2, #30
   1b8d0:	f57f adaf 	bpl.w	1b432 <pdn_interface_pdn_id_get+0xfa>
   1b8d4:	2607      	movs	r6, #7
   1b8d6:	e6ea      	b.n	1b6ae <pdn_interface_pdn_id_get+0x376>
   1b8d8:	4628      	mov	r0, r5
   1b8da:	f7f1 fb2d 	bl	cf38 <strlen>
   1b8de:	4606      	mov	r6, r0
   1b8e0:	6a20      	ldr	r0, [r4, #32]
   1b8e2:	300c      	adds	r0, #12
   1b8e4:	f7f1 fb28 	bl	cf38 <strlen>
   1b8e8:	4286      	cmp	r6, r0
   1b8ea:	f47f ada8 	bne.w	1b43e <pdn_interface_pdn_id_get+0x106>
   1b8ee:	6a21      	ldr	r1, [r4, #32]
   1b8f0:	4628      	mov	r0, r5
   1b8f2:	310c      	adds	r1, #12
   1b8f4:	f7f1 fb16 	bl	cf24 <strcmp>
   1b8f8:	2800      	cmp	r0, #0
   1b8fa:	f47f ada0 	bne.w	1b43e <pdn_interface_pdn_id_get+0x106>
   1b8fe:	6a23      	ldr	r3, [r4, #32]
   1b900:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b902:	0791      	lsls	r1, r2, #30
   1b904:	f57f ad9b 	bpl.w	1b43e <pdn_interface_pdn_id_get+0x106>
   1b908:	2608      	movs	r6, #8
   1b90a:	e6d0      	b.n	1b6ae <pdn_interface_pdn_id_get+0x376>
   1b90c:	4628      	mov	r0, r5
   1b90e:	f7f1 fb13 	bl	cf38 <strlen>
   1b912:	4606      	mov	r6, r0
   1b914:	69e0      	ldr	r0, [r4, #28]
   1b916:	300c      	adds	r0, #12
   1b918:	f7f1 fb0e 	bl	cf38 <strlen>
   1b91c:	4286      	cmp	r6, r0
   1b91e:	f47f adda 	bne.w	1b4d6 <pdn_interface_pdn_id_get+0x19e>
   1b922:	69e1      	ldr	r1, [r4, #28]
   1b924:	4628      	mov	r0, r5
   1b926:	310c      	adds	r1, #12
   1b928:	f7f1 fafc 	bl	cf24 <strcmp>
   1b92c:	2800      	cmp	r0, #0
   1b92e:	f47f add2 	bne.w	1b4d6 <pdn_interface_pdn_id_get+0x19e>
   1b932:	69e3      	ldr	r3, [r4, #28]
   1b934:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b936:	07d0      	lsls	r0, r2, #31
   1b938:	d4cc      	bmi.n	1b8d4 <pdn_interface_pdn_id_get+0x59c>
   1b93a:	e5cc      	b.n	1b4d6 <pdn_interface_pdn_id_get+0x19e>
   1b93c:	4628      	mov	r0, r5
   1b93e:	f7f1 fafb 	bl	cf38 <strlen>
   1b942:	4606      	mov	r6, r0
   1b944:	6a20      	ldr	r0, [r4, #32]
   1b946:	300c      	adds	r0, #12
   1b948:	f7f1 faf6 	bl	cf38 <strlen>
   1b94c:	4286      	cmp	r6, r0
   1b94e:	f47f adc8 	bne.w	1b4e2 <pdn_interface_pdn_id_get+0x1aa>
   1b952:	6a21      	ldr	r1, [r4, #32]
   1b954:	4628      	mov	r0, r5
   1b956:	310c      	adds	r1, #12
   1b958:	f7f1 fae4 	bl	cf24 <strcmp>
   1b95c:	2800      	cmp	r0, #0
   1b95e:	f47f adc0 	bne.w	1b4e2 <pdn_interface_pdn_id_get+0x1aa>
   1b962:	6a23      	ldr	r3, [r4, #32]
   1b964:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b966:	07d1      	lsls	r1, r2, #31
   1b968:	d4ce      	bmi.n	1b908 <pdn_interface_pdn_id_get+0x5d0>
   1b96a:	e5ba      	b.n	1b4e2 <pdn_interface_pdn_id_get+0x1aa>
   1b96c:	4628      	mov	r0, r5
   1b96e:	f7f1 fae3 	bl	cf38 <strlen>
   1b972:	4606      	mov	r6, r0
   1b974:	68a0      	ldr	r0, [r4, #8]
   1b976:	300c      	adds	r0, #12
   1b978:	f7f1 fade 	bl	cf38 <strlen>
   1b97c:	4286      	cmp	r6, r0
   1b97e:	f47f ad8c 	bne.w	1b49a <pdn_interface_pdn_id_get+0x162>
   1b982:	68a1      	ldr	r1, [r4, #8]
   1b984:	4628      	mov	r0, r5
   1b986:	310c      	adds	r1, #12
   1b988:	f7f1 facc 	bl	cf24 <strcmp>
   1b98c:	2800      	cmp	r0, #0
   1b98e:	f47f ad84 	bne.w	1b49a <pdn_interface_pdn_id_get+0x162>
   1b992:	68a3      	ldr	r3, [r4, #8]
   1b994:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b996:	07d0      	lsls	r0, r2, #31
   1b998:	f57f ad7f 	bpl.w	1b49a <pdn_interface_pdn_id_get+0x162>
   1b99c:	2602      	movs	r6, #2
   1b99e:	e686      	b.n	1b6ae <pdn_interface_pdn_id_get+0x376>
   1b9a0:	4628      	mov	r0, r5
   1b9a2:	f7f1 fac9 	bl	cf38 <strlen>
   1b9a6:	4606      	mov	r6, r0
   1b9a8:	68a0      	ldr	r0, [r4, #8]
   1b9aa:	300c      	adds	r0, #12
   1b9ac:	f7f1 fac4 	bl	cf38 <strlen>
   1b9b0:	4286      	cmp	r6, r0
   1b9b2:	f47f ad20 	bne.w	1b3f6 <pdn_interface_pdn_id_get+0xbe>
   1b9b6:	68a1      	ldr	r1, [r4, #8]
   1b9b8:	4628      	mov	r0, r5
   1b9ba:	310c      	adds	r1, #12
   1b9bc:	f7f1 fab2 	bl	cf24 <strcmp>
   1b9c0:	2800      	cmp	r0, #0
   1b9c2:	f47f ad18 	bne.w	1b3f6 <pdn_interface_pdn_id_get+0xbe>
   1b9c6:	68a3      	ldr	r3, [r4, #8]
   1b9c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1b9ca:	0790      	lsls	r0, r2, #30
   1b9cc:	d4e6      	bmi.n	1b99c <pdn_interface_pdn_id_get+0x664>
   1b9ce:	e512      	b.n	1b3f6 <pdn_interface_pdn_id_get+0xbe>
   1b9d0:	200233b8 	.word	0x200233b8
   1b9d4:	00028d64 	.word	0x00028d64
   1b9d8:	00028d60 	.word	0x00028d60
   1b9dc:	00028d74 	.word	0x00028d74
   1b9e0:	200233b4 	.word	0x200233b4
   1b9e4:	4628      	mov	r0, r5
   1b9e6:	f7f1 faa7 	bl	cf38 <strlen>
   1b9ea:	4606      	mov	r6, r0
   1b9ec:	6860      	ldr	r0, [r4, #4]
   1b9ee:	300c      	adds	r0, #12
   1b9f0:	f7f1 faa2 	bl	cf38 <strlen>
   1b9f4:	4286      	cmp	r6, r0
   1b9f6:	f47f acf8 	bne.w	1b3ea <pdn_interface_pdn_id_get+0xb2>
   1b9fa:	6861      	ldr	r1, [r4, #4]
   1b9fc:	4628      	mov	r0, r5
   1b9fe:	310c      	adds	r1, #12
   1ba00:	f7f1 fa90 	bl	cf24 <strcmp>
   1ba04:	2800      	cmp	r0, #0
   1ba06:	f47f acf0 	bne.w	1b3ea <pdn_interface_pdn_id_get+0xb2>
   1ba0a:	6863      	ldr	r3, [r4, #4]
   1ba0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1ba0e:	0796      	lsls	r6, r2, #30
   1ba10:	f57f aceb 	bpl.w	1b3ea <pdn_interface_pdn_id_get+0xb2>
   1ba14:	2601      	movs	r6, #1
   1ba16:	e64a      	b.n	1b6ae <pdn_interface_pdn_id_get+0x376>
   1ba18:	4628      	mov	r0, r5
   1ba1a:	f7f1 fa8d 	bl	cf38 <strlen>
   1ba1e:	4606      	mov	r6, r0
   1ba20:	6860      	ldr	r0, [r4, #4]
   1ba22:	300c      	adds	r0, #12
   1ba24:	f7f1 fa88 	bl	cf38 <strlen>
   1ba28:	4286      	cmp	r6, r0
   1ba2a:	f47f ad30 	bne.w	1b48e <pdn_interface_pdn_id_get+0x156>
   1ba2e:	6861      	ldr	r1, [r4, #4]
   1ba30:	4628      	mov	r0, r5
   1ba32:	310c      	adds	r1, #12
   1ba34:	f7f1 fa76 	bl	cf24 <strcmp>
   1ba38:	2800      	cmp	r0, #0
   1ba3a:	f47f ad28 	bne.w	1b48e <pdn_interface_pdn_id_get+0x156>
   1ba3e:	6863      	ldr	r3, [r4, #4]
   1ba40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1ba42:	07d6      	lsls	r6, r2, #31
   1ba44:	d4e6      	bmi.n	1ba14 <pdn_interface_pdn_id_get+0x6dc>
   1ba46:	e522      	b.n	1b48e <pdn_interface_pdn_id_get+0x156>
   1ba48:	4608      	mov	r0, r1
   1ba4a:	f7f1 fa75 	bl	cf38 <strlen>
   1ba4e:	4606      	mov	r6, r0
   1ba50:	6820      	ldr	r0, [r4, #0]
   1ba52:	300c      	adds	r0, #12
   1ba54:	f7f1 fa70 	bl	cf38 <strlen>
   1ba58:	4286      	cmp	r6, r0
   1ba5a:	f47f acc0 	bne.w	1b3de <pdn_interface_pdn_id_get+0xa6>
   1ba5e:	6821      	ldr	r1, [r4, #0]
   1ba60:	4628      	mov	r0, r5
   1ba62:	310c      	adds	r1, #12
   1ba64:	f7f1 fa5e 	bl	cf24 <strcmp>
   1ba68:	4606      	mov	r6, r0
   1ba6a:	2800      	cmp	r0, #0
   1ba6c:	f47f acb7 	bne.w	1b3de <pdn_interface_pdn_id_get+0xa6>
   1ba70:	6823      	ldr	r3, [r4, #0]
   1ba72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1ba74:	0797      	lsls	r7, r2, #30
   1ba76:	f53f ae1a 	bmi.w	1b6ae <pdn_interface_pdn_id_get+0x376>
   1ba7a:	e4b0      	b.n	1b3de <pdn_interface_pdn_id_get+0xa6>
   1ba7c:	4608      	mov	r0, r1
   1ba7e:	f7f1 fa5b 	bl	cf38 <strlen>
   1ba82:	4606      	mov	r6, r0
   1ba84:	6820      	ldr	r0, [r4, #0]
   1ba86:	300c      	adds	r0, #12
   1ba88:	f7f1 fa56 	bl	cf38 <strlen>
   1ba8c:	4286      	cmp	r6, r0
   1ba8e:	f47f acf8 	bne.w	1b482 <pdn_interface_pdn_id_get+0x14a>
   1ba92:	6821      	ldr	r1, [r4, #0]
   1ba94:	4628      	mov	r0, r5
   1ba96:	310c      	adds	r1, #12
   1ba98:	f7f1 fa44 	bl	cf24 <strcmp>
   1ba9c:	4606      	mov	r6, r0
   1ba9e:	2800      	cmp	r0, #0
   1baa0:	f47f acef 	bne.w	1b482 <pdn_interface_pdn_id_get+0x14a>
   1baa4:	6823      	ldr	r3, [r4, #0]
   1baa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1baa8:	07d7      	lsls	r7, r2, #31
   1baaa:	f53f ae00 	bmi.w	1b6ae <pdn_interface_pdn_id_get+0x376>
   1baae:	e4e8      	b.n	1b482 <pdn_interface_pdn_id_get+0x14a>
   1bab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bab4:	4770      	bx	lr
   1bab6:	480b      	ldr	r0, [pc, #44]	; (1bae4 <pdn_interface_pdn_id_get+0x7ac>)
   1bab8:	f7f1 fa3e 	bl	cf38 <strlen>
   1babc:	490a      	ldr	r1, [pc, #40]	; (1bae8 <pdn_interface_pdn_id_get+0x7b0>)
   1babe:	4602      	mov	r2, r0
   1bac0:	4808      	ldr	r0, [pc, #32]	; (1bae4 <pdn_interface_pdn_id_get+0x7ac>)
   1bac2:	f00c f91b 	bl	27cfc <strncmp>
   1bac6:	b930      	cbnz	r0, 1bad6 <pdn_interface_pdn_id_get+0x79e>
   1bac8:	2008      	movs	r0, #8
   1baca:	f7f8 f8e1 	bl	13c90 <bsd_os_errno_set>
   1bace:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1bad2:	6858      	ldr	r0, [r3, #4]
   1bad4:	e47b      	b.n	1b3ce <pdn_interface_pdn_id_get+0x96>
   1bad6:	2005      	movs	r0, #5
   1bad8:	f7f8 f8da 	bl	13c90 <bsd_os_errno_set>
   1badc:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1bae0:	6858      	ldr	r0, [r3, #4]
   1bae2:	e474      	b.n	1b3ce <pdn_interface_pdn_id_get+0x96>
   1bae4:	00028db8 	.word	0x00028db8
   1bae8:	200233b8 	.word	0x200233b8

0001baec <bsd_platform_error_handler>:
   1baec:	b508      	push	{r3, lr}
   1baee:	f006 f958 	bl	21da2 <bsd_recoverable_error_handler>
   1baf2:	bd08      	pop	{r3, pc}

0001baf4 <bsd_init>:
   1baf4:	b160      	cbz	r0, 1bb10 <bsd_init+0x1c>
   1baf6:	b510      	push	{r4, lr}
   1baf8:	4c07      	ldr	r4, [pc, #28]	; (1bb18 <bsd_init+0x24>)
   1bafa:	7823      	ldrb	r3, [r4, #0]
   1bafc:	b92b      	cbnz	r3, 1bb0a <bsd_init+0x16>
   1bafe:	f000 f829 	bl	1bb54 <bsd_platform_init>
   1bb02:	b908      	cbnz	r0, 1bb08 <bsd_init+0x14>
   1bb04:	2301      	movs	r3, #1
   1bb06:	7023      	strb	r3, [r4, #0]
   1bb08:	bd10      	pop	{r4, pc}
   1bb0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bb0e:	bd10      	pop	{r4, pc}
   1bb10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bb14:	4770      	bx	lr
   1bb16:	bf00      	nop
   1bb18:	2002af33 	.word	0x2002af33

0001bb1c <bsd_shutdown>:
   1bb1c:	b510      	push	{r4, lr}
   1bb1e:	4c05      	ldr	r4, [pc, #20]	; (1bb34 <bsd_shutdown+0x18>)
   1bb20:	7823      	ldrb	r3, [r4, #0]
   1bb22:	b123      	cbz	r3, 1bb2e <bsd_shutdown+0x12>
   1bb24:	f000 f89a 	bl	1bc5c <bsd_platform_shutdown>
   1bb28:	b900      	cbnz	r0, 1bb2c <bsd_shutdown+0x10>
   1bb2a:	7020      	strb	r0, [r4, #0]
   1bb2c:	bd10      	pop	{r4, pc}
   1bb2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bb32:	bd10      	pop	{r4, pc}
   1bb34:	2002af33 	.word	0x2002af33

0001bb38 <unimplemented_method>:
   1bb38:	b40f      	push	{r0, r1, r2, r3}
   1bb3a:	b508      	push	{r3, lr}
   1bb3c:	202d      	movs	r0, #45	; 0x2d
   1bb3e:	f7f8 f8a7 	bl	13c90 <bsd_os_errno_set>
   1bb42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1bb46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bb4a:	b004      	add	sp, #16
   1bb4c:	4770      	bx	lr
   1bb4e:	bf00      	nop

0001bb50 <rpc_transport_ipc_fault_handler>:
   1bb50:	f7ff bfcc 	b.w	1baec <bsd_platform_error_handler>

0001bb54 <bsd_platform_init>:
   1bb54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb56:	f04f 0c00 	mov.w	ip, #0
   1bb5a:	f247 0660 	movw	r6, #28768	; 0x7060
   1bb5e:	f24b 0260 	movw	r2, #45152	; 0xb060
   1bb62:	6843      	ldr	r3, [r0, #4]
   1bb64:	4d3a      	ldr	r5, [pc, #232]	; (1bc50 <bsd_platform_init+0xfc>)
   1bb66:	4607      	mov	r7, r0
   1bb68:	602b      	str	r3, [r5, #0]
   1bb6a:	7801      	ldrb	r1, [r0, #0]
   1bb6c:	2006      	movs	r0, #6
   1bb6e:	4561      	cmp	r1, ip
   1bb70:	bf08      	it	eq
   1bb72:	4632      	moveq	r2, r6
   1bb74:	4413      	add	r3, r2
   1bb76:	4c37      	ldr	r4, [pc, #220]	; (1bc54 <bsd_platform_init+0x100>)
   1bb78:	60ab      	str	r3, [r5, #8]
   1bb7a:	68b9      	ldr	r1, [r7, #8]
   1bb7c:	6063      	str	r3, [r4, #4]
   1bb7e:	4b36      	ldr	r3, [pc, #216]	; (1bc58 <bsd_platform_init+0x104>)
   1bb80:	b093      	sub	sp, #76	; 0x4c
   1bb82:	606a      	str	r2, [r5, #4]
   1bb84:	f8a4 c000 	strh.w	ip, [r4]
   1bb88:	1a8a      	subs	r2, r1, r2
   1bb8a:	60ea      	str	r2, [r5, #12]
   1bb8c:	60a2      	str	r2, [r4, #8]
   1bb8e:	81a0      	strh	r0, [r4, #12]
   1bb90:	6123      	str	r3, [r4, #16]
   1bb92:	f001 f8a9 	bl	1cce8 <nrf_mem_init>
   1bb96:	2800      	cmp	r0, #0
   1bb98:	d156      	bne.n	1bc48 <bsd_platform_init+0xf4>
   1bb9a:	4621      	mov	r1, r4
   1bb9c:	a801      	add	r0, sp, #4
   1bb9e:	f001 f917 	bl	1cdd0 <nrf_mem_register>
   1bba2:	2800      	cmp	r0, #0
   1bba4:	d150      	bne.n	1bc48 <bsd_platform_init+0xf4>
   1bba6:	f7f8 f9ef 	bl	13f88 <bsd_os_init>
   1bbaa:	f7fd fc7f 	bl	194ac <rpc_framework_init>
   1bbae:	2800      	cmp	r0, #0
   1bbb0:	d14a      	bne.n	1bc48 <bsd_platform_init+0xf4>
   1bbb2:	783a      	ldrb	r2, [r7, #0]
   1bbb4:	682b      	ldr	r3, [r5, #0]
   1bbb6:	bb32      	cbnz	r2, 1bc06 <bsd_platform_init+0xb2>
   1bbb8:	4606      	mov	r6, r0
   1bbba:	2220      	movs	r2, #32
   1bbbc:	2408      	movs	r4, #8
   1bbbe:	2500      	movs	r5, #0
   1bbc0:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   1bbc4:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   1bbc8:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   1bbcc:	4411      	add	r1, r2
   1bbce:	9302      	str	r3, [sp, #8]
   1bbd0:	e9cd 6008 	strd	r6, r0, [sp, #32]
   1bbd4:	910c      	str	r1, [sp, #48]	; 0x30
   1bbd6:	9203      	str	r2, [sp, #12]
   1bbd8:	f103 0140 	add.w	r1, r3, #64	; 0x40
   1bbdc:	9205      	str	r2, [sp, #20]
   1bbde:	9207      	str	r2, [sp, #28]
   1bbe0:	eb0d 0004 	add.w	r0, sp, r4
   1bbe4:	189a      	adds	r2, r3, r2
   1bbe6:	3360      	adds	r3, #96	; 0x60
   1bbe8:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   1bbec:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1bbf0:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   1bbf4:	940f      	str	r4, [sp, #60]	; 0x3c
   1bbf6:	9104      	str	r1, [sp, #16]
   1bbf8:	9206      	str	r2, [sp, #24]
   1bbfa:	930a      	str	r3, [sp, #40]	; 0x28
   1bbfc:	f7fa fdc0 	bl	16780 <rpc_transport_ipc_init>
   1bc00:	b128      	cbz	r0, 1bc0e <bsd_platform_init+0xba>
   1bc02:	b013      	add	sp, #76	; 0x4c
   1bc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bc06:	441e      	add	r6, r3
   1bc08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   1bc0c:	e7d5      	b.n	1bbba <bsd_platform_init+0x66>
   1bc0e:	f001 fd1f 	bl	1d650 <interface_init>
   1bc12:	b9c8      	cbnz	r0, 1bc48 <bsd_platform_init+0xf4>
   1bc14:	f7fe fd0e 	bl	1a634 <at_interface_init>
   1bc18:	b9b0      	cbnz	r0, 1bc48 <bsd_platform_init+0xf4>
   1bc1a:	f7fc f88d 	bl	17d38 <ip_interface_init>
   1bc1e:	b998      	cbnz	r0, 1bc48 <bsd_platform_init+0xf4>
   1bc20:	f7fb fbc0 	bl	173a4 <tls_interface_init>
   1bc24:	b980      	cbnz	r0, 1bc48 <bsd_platform_init+0xf4>
   1bc26:	f001 fa2f 	bl	1d088 <mfu_interface_init>
   1bc2a:	b968      	cbnz	r0, 1bc48 <bsd_platform_init+0xf4>
   1bc2c:	f7fe fefc 	bl	1aa28 <pdn_interface_init>
   1bc30:	b950      	cbnz	r0, 1bc48 <bsd_platform_init+0xf4>
   1bc32:	f7fe fb69 	bl	1a308 <gnss_interface_init>
   1bc36:	b938      	cbnz	r0, 1bc48 <bsd_platform_init+0xf4>
   1bc38:	f7f9 ffe0 	bl	15bfc <logobj_interface_init>
   1bc3c:	1b40      	subs	r0, r0, r5
   1bc3e:	bf18      	it	ne
   1bc40:	2001      	movne	r0, #1
   1bc42:	4240      	negs	r0, r0
   1bc44:	b013      	add	sp, #76	; 0x4c
   1bc46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bc48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bc4c:	b013      	add	sp, #76	; 0x4c
   1bc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bc50:	200234f4 	.word	0x200234f4
   1bc54:	200234e0 	.word	0x200234e0
   1bc58:	00028f0c 	.word	0x00028f0c

0001bc5c <bsd_platform_shutdown>:
   1bc5c:	b508      	push	{r3, lr}
   1bc5e:	f001 feed 	bl	1da3c <interface_shutdown>
   1bc62:	f7fb fad3 	bl	1720c <rpc_transport_ipc_request_shutdown>
   1bc66:	f7fb f8e3 	bl	16e30 <rpc_transport_ipc_shutdown_done>
   1bc6a:	2800      	cmp	r0, #0
   1bc6c:	d0fb      	beq.n	1bc66 <bsd_platform_shutdown+0xa>
   1bc6e:	2000      	movs	r0, #0
   1bc70:	bd08      	pop	{r3, pc}
   1bc72:	bf00      	nop

0001bc74 <bsd_platform_af_method_table_get>:
   1bc74:	2805      	cmp	r0, #5
   1bc76:	d02a      	beq.n	1bcce <bsd_platform_af_method_table_get+0x5a>
   1bc78:	b508      	push	{r3, lr}
   1bc7a:	d914      	bls.n	1bca6 <bsd_platform_af_method_table_get+0x32>
   1bc7c:	280a      	cmp	r0, #10
   1bc7e:	d016      	beq.n	1bcae <bsd_platform_af_method_table_get+0x3a>
   1bc80:	2866      	cmp	r0, #102	; 0x66
   1bc82:	d11f      	bne.n	1bcc4 <bsd_platform_af_method_table_get+0x50>
   1bc84:	f240 2302 	movw	r3, #514	; 0x202
   1bc88:	429a      	cmp	r2, r3
   1bc8a:	d035      	beq.n	1bcf8 <bsd_platform_af_method_table_get+0x84>
   1bc8c:	f240 2305 	movw	r3, #517	; 0x205
   1bc90:	429a      	cmp	r2, r3
   1bc92:	d035      	beq.n	1bd00 <bsd_platform_af_method_table_get+0x8c>
   1bc94:	f240 2301 	movw	r3, #513	; 0x201
   1bc98:	429a      	cmp	r2, r3
   1bc9a:	d02f      	beq.n	1bcfc <bsd_platform_af_method_table_get+0x88>
   1bc9c:	202b      	movs	r0, #43	; 0x2b
   1bc9e:	f7f7 fff7 	bl	13c90 <bsd_os_errno_set>
   1bca2:	2000      	movs	r0, #0
   1bca4:	bd08      	pop	{r3, pc}
   1bca6:	2801      	cmp	r0, #1
   1bca8:	d016      	beq.n	1bcd8 <bsd_platform_af_method_table_get+0x64>
   1bcaa:	2802      	cmp	r0, #2
   1bcac:	d10a      	bne.n	1bcc4 <bsd_platform_af_method_table_get+0x50>
   1bcae:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1bcb2:	d21a      	bcs.n	1bcea <bsd_platform_af_method_table_get+0x76>
   1bcb4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1bcb8:	d21a      	bcs.n	1bcf0 <bsd_platform_af_method_table_get+0x7c>
   1bcba:	3a01      	subs	r2, #1
   1bcbc:	2a01      	cmp	r2, #1
   1bcbe:	d8ed      	bhi.n	1bc9c <bsd_platform_af_method_table_get+0x28>
   1bcc0:	4810      	ldr	r0, [pc, #64]	; (1bd04 <bsd_platform_af_method_table_get+0x90>)
   1bcc2:	bd08      	pop	{r3, pc}
   1bcc4:	2016      	movs	r0, #22
   1bcc6:	f7f7 ffe3 	bl	13c90 <bsd_os_errno_set>
   1bcca:	2000      	movs	r0, #0
   1bccc:	bd08      	pop	{r3, pc}
   1bcce:	2903      	cmp	r1, #3
   1bcd0:	480d      	ldr	r0, [pc, #52]	; (1bd08 <bsd_platform_af_method_table_get+0x94>)
   1bcd2:	bf18      	it	ne
   1bcd4:	2000      	movne	r0, #0
   1bcd6:	4770      	bx	lr
   1bcd8:	f240 2303 	movw	r3, #515	; 0x203
   1bcdc:	429a      	cmp	r2, r3
   1bcde:	d009      	beq.n	1bcf4 <bsd_platform_af_method_table_get+0x80>
   1bce0:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1bce4:	d1da      	bne.n	1bc9c <bsd_platform_af_method_table_get+0x28>
   1bce6:	4809      	ldr	r0, [pc, #36]	; (1bd0c <bsd_platform_af_method_table_get+0x98>)
   1bce8:	bd08      	pop	{r3, pc}
   1bcea:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1bcee:	d1d5      	bne.n	1bc9c <bsd_platform_af_method_table_get+0x28>
   1bcf0:	4807      	ldr	r0, [pc, #28]	; (1bd10 <bsd_platform_af_method_table_get+0x9c>)
   1bcf2:	bd08      	pop	{r3, pc}
   1bcf4:	4807      	ldr	r0, [pc, #28]	; (1bd14 <bsd_platform_af_method_table_get+0xa0>)
   1bcf6:	bd08      	pop	{r3, pc}
   1bcf8:	4807      	ldr	r0, [pc, #28]	; (1bd18 <bsd_platform_af_method_table_get+0xa4>)
   1bcfa:	bd08      	pop	{r3, pc}
   1bcfc:	4807      	ldr	r0, [pc, #28]	; (1bd1c <bsd_platform_af_method_table_get+0xa8>)
   1bcfe:	bd08      	pop	{r3, pc}
   1bd00:	4807      	ldr	r0, [pc, #28]	; (1bd20 <bsd_platform_af_method_table_get+0xac>)
   1bd02:	bd08      	pop	{r3, pc}
   1bd04:	00028df4 	.word	0x00028df4
   1bd08:	00028ee4 	.word	0x00028ee4
   1bd0c:	00028e94 	.word	0x00028e94
   1bd10:	00028e1c 	.word	0x00028e1c
   1bd14:	00028e44 	.word	0x00028e44
   1bd18:	00028e6c 	.word	0x00028e6c
   1bd1c:	00028dcc 	.word	0x00028dcc
   1bd20:	00028ebc 	.word	0x00028ebc

0001bd24 <bsd_platform_fd_method_table_get>:
   1bd24:	b538      	push	{r3, r4, r5, lr}
   1bd26:	4605      	mov	r5, r0
   1bd28:	f001 fdd0 	bl	1d8cc <interface_socket_from_handle_get>
   1bd2c:	4604      	mov	r4, r0
   1bd2e:	b960      	cbnz	r0, 1bd4a <bsd_platform_fd_method_table_get+0x26>
   1bd30:	4b2c      	ldr	r3, [pc, #176]	; (1bde4 <bsd_platform_fd_method_table_get+0xc0>)
   1bd32:	429d      	cmp	r5, r3
   1bd34:	d02f      	beq.n	1bd96 <bsd_platform_fd_method_table_get+0x72>
   1bd36:	0c2b      	lsrs	r3, r5, #16
   1bd38:	4a2b      	ldr	r2, [pc, #172]	; (1bde8 <bsd_platform_fd_method_table_get+0xc4>)
   1bd3a:	041b      	lsls	r3, r3, #16
   1bd3c:	4293      	cmp	r3, r2
   1bd3e:	d03d      	beq.n	1bdbc <bsd_platform_fd_method_table_get+0x98>
   1bd40:	4b2a      	ldr	r3, [pc, #168]	; (1bdec <bsd_platform_fd_method_table_get+0xc8>)
   1bd42:	429d      	cmp	r5, r3
   1bd44:	d149      	bne.n	1bdda <bsd_platform_fd_method_table_get+0xb6>
   1bd46:	482a      	ldr	r0, [pc, #168]	; (1bdf0 <bsd_platform_fd_method_table_get+0xcc>)
   1bd48:	bd38      	pop	{r3, r4, r5, pc}
   1bd4a:	68c3      	ldr	r3, [r0, #12]
   1bd4c:	6942      	ldr	r2, [r0, #20]
   1bd4e:	2b05      	cmp	r3, #5
   1bd50:	d036      	beq.n	1bdc0 <bsd_platform_fd_method_table_get+0x9c>
   1bd52:	d911      	bls.n	1bd78 <bsd_platform_fd_method_table_get+0x54>
   1bd54:	2b0a      	cmp	r3, #10
   1bd56:	d013      	beq.n	1bd80 <bsd_platform_fd_method_table_get+0x5c>
   1bd58:	2b66      	cmp	r3, #102	; 0x66
   1bd5a:	d11e      	bne.n	1bd9a <bsd_platform_fd_method_table_get+0x76>
   1bd5c:	f240 2302 	movw	r3, #514	; 0x202
   1bd60:	429a      	cmp	r2, r3
   1bd62:	d02b      	beq.n	1bdbc <bsd_platform_fd_method_table_get+0x98>
   1bd64:	f240 2305 	movw	r3, #517	; 0x205
   1bd68:	429a      	cmp	r2, r3
   1bd6a:	d02f      	beq.n	1bdcc <bsd_platform_fd_method_table_get+0xa8>
   1bd6c:	f240 2301 	movw	r3, #513	; 0x201
   1bd70:	429a      	cmp	r2, r3
   1bd72:	d11e      	bne.n	1bdb2 <bsd_platform_fd_method_table_get+0x8e>
   1bd74:	481f      	ldr	r0, [pc, #124]	; (1bdf4 <bsd_platform_fd_method_table_get+0xd0>)
   1bd76:	bd38      	pop	{r3, r4, r5, pc}
   1bd78:	2b01      	cmp	r3, #1
   1bd7a:	d013      	beq.n	1bda4 <bsd_platform_fd_method_table_get+0x80>
   1bd7c:	2b02      	cmp	r3, #2
   1bd7e:	d10c      	bne.n	1bd9a <bsd_platform_fd_method_table_get+0x76>
   1bd80:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1bd84:	d224      	bcs.n	1bdd0 <bsd_platform_fd_method_table_get+0xac>
   1bd86:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1bd8a:	d224      	bcs.n	1bdd6 <bsd_platform_fd_method_table_get+0xb2>
   1bd8c:	3a01      	subs	r2, #1
   1bd8e:	2a01      	cmp	r2, #1
   1bd90:	d80f      	bhi.n	1bdb2 <bsd_platform_fd_method_table_get+0x8e>
   1bd92:	4819      	ldr	r0, [pc, #100]	; (1bdf8 <bsd_platform_fd_method_table_get+0xd4>)
   1bd94:	bd38      	pop	{r3, r4, r5, pc}
   1bd96:	4819      	ldr	r0, [pc, #100]	; (1bdfc <bsd_platform_fd_method_table_get+0xd8>)
   1bd98:	bd38      	pop	{r3, r4, r5, pc}
   1bd9a:	2016      	movs	r0, #22
   1bd9c:	f7f7 ff78 	bl	13c90 <bsd_os_errno_set>
   1bda0:	2000      	movs	r0, #0
   1bda2:	bd38      	pop	{r3, r4, r5, pc}
   1bda4:	f240 2303 	movw	r3, #515	; 0x203
   1bda8:	429a      	cmp	r2, r3
   1bdaa:	d0f4      	beq.n	1bd96 <bsd_platform_fd_method_table_get+0x72>
   1bdac:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1bdb0:	d0c9      	beq.n	1bd46 <bsd_platform_fd_method_table_get+0x22>
   1bdb2:	202b      	movs	r0, #43	; 0x2b
   1bdb4:	f7f7 ff6c 	bl	13c90 <bsd_os_errno_set>
   1bdb8:	2000      	movs	r0, #0
   1bdba:	bd38      	pop	{r3, r4, r5, pc}
   1bdbc:	4810      	ldr	r0, [pc, #64]	; (1be00 <bsd_platform_fd_method_table_get+0xdc>)
   1bdbe:	bd38      	pop	{r3, r4, r5, pc}
   1bdc0:	6903      	ldr	r3, [r0, #16]
   1bdc2:	4810      	ldr	r0, [pc, #64]	; (1be04 <bsd_platform_fd_method_table_get+0xe0>)
   1bdc4:	2b03      	cmp	r3, #3
   1bdc6:	bf18      	it	ne
   1bdc8:	2000      	movne	r0, #0
   1bdca:	bd38      	pop	{r3, r4, r5, pc}
   1bdcc:	480e      	ldr	r0, [pc, #56]	; (1be08 <bsd_platform_fd_method_table_get+0xe4>)
   1bdce:	bd38      	pop	{r3, r4, r5, pc}
   1bdd0:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1bdd4:	d1ed      	bne.n	1bdb2 <bsd_platform_fd_method_table_get+0x8e>
   1bdd6:	480d      	ldr	r0, [pc, #52]	; (1be0c <bsd_platform_fd_method_table_get+0xe8>)
   1bdd8:	bd38      	pop	{r3, r4, r5, pc}
   1bdda:	2009      	movs	r0, #9
   1bddc:	f7f7 ff58 	bl	13c90 <bsd_os_errno_set>
   1bde0:	4620      	mov	r0, r4
   1bde2:	bd38      	pop	{r3, r4, r5, pc}
   1bde4:	49765432 	.word	0x49765432
   1bde8:	789a0000 	.word	0x789a0000
   1bdec:	49765443 	.word	0x49765443
   1bdf0:	00028e94 	.word	0x00028e94
   1bdf4:	00028dcc 	.word	0x00028dcc
   1bdf8:	00028df4 	.word	0x00028df4
   1bdfc:	00028e44 	.word	0x00028e44
   1be00:	00028e6c 	.word	0x00028e6c
   1be04:	00028ee4 	.word	0x00028ee4
   1be08:	00028ebc 	.word	0x00028ebc
   1be0c:	00028e1c 	.word	0x00028e1c

0001be10 <bsd_platform_getaddrinfo>:
   1be10:	f7fc bf52 	b.w	18cb8 <ip_interface_getaddrinfo>

0001be14 <bsd_platform_freeaddrinfo>:
   1be14:	f7fd b846 	b.w	18ea4 <ip_interface_freeaddrinfo>

0001be18 <bsd_platform_poll>:
   1be18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1be1c:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   1be20:	b083      	sub	sp, #12
   1be22:	9200      	str	r2, [sp, #0]
   1be24:	2800      	cmp	r0, #0
   1be26:	d048      	beq.n	1beba <bsd_platform_poll+0xa2>
   1be28:	1e4b      	subs	r3, r1, #1
   1be2a:	2b08      	cmp	r3, #8
   1be2c:	d845      	bhi.n	1beba <bsd_platform_poll+0xa2>
   1be2e:	4680      	mov	r8, r0
   1be30:	4605      	mov	r5, r0
   1be32:	2400      	movs	r4, #0
   1be34:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   1be38:	88ab      	ldrh	r3, [r5, #4]
   1be3a:	6828      	ldr	r0, [r5, #0]
   1be3c:	f003 0303 	and.w	r3, r3, #3
   1be40:	a901      	add	r1, sp, #4
   1be42:	f043 061c 	orr.w	r6, r3, #28
   1be46:	f001 fd4f 	bl	1d8e8 <interface_socket_event_get>
   1be4a:	9b01      	ldr	r3, [sp, #4]
   1be4c:	3508      	adds	r5, #8
   1be4e:	4033      	ands	r3, r6
   1be50:	f825 3c02 	strh.w	r3, [r5, #-2]
   1be54:	b103      	cbz	r3, 1be58 <bsd_platform_poll+0x40>
   1be56:	3401      	adds	r4, #1
   1be58:	42af      	cmp	r7, r5
   1be5a:	d1ed      	bne.n	1be38 <bsd_platform_poll+0x20>
   1be5c:	bb9c      	cbnz	r4, 1bec6 <bsd_platform_poll+0xae>
   1be5e:	4669      	mov	r1, sp
   1be60:	4640      	mov	r0, r8
   1be62:	f7f7 fe5f 	bl	13b24 <bsd_os_timedwait>
   1be66:	4607      	mov	r7, r0
   1be68:	b108      	cbz	r0, 1be6e <bsd_platform_poll+0x56>
   1be6a:	283c      	cmp	r0, #60	; 0x3c
   1be6c:	d11d      	bne.n	1beaa <bsd_platform_poll+0x92>
   1be6e:	46c1      	mov	r9, r8
   1be70:	2600      	movs	r6, #0
   1be72:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1be76:	f8d9 0000 	ldr.w	r0, [r9]
   1be7a:	f003 0303 	and.w	r3, r3, #3
   1be7e:	a901      	add	r1, sp, #4
   1be80:	f043 041c 	orr.w	r4, r3, #28
   1be84:	f001 fd30 	bl	1d8e8 <interface_socket_event_get>
   1be88:	9b01      	ldr	r3, [sp, #4]
   1be8a:	f109 0908 	add.w	r9, r9, #8
   1be8e:	4023      	ands	r3, r4
   1be90:	f829 3c02 	strh.w	r3, [r9, #-2]
   1be94:	b103      	cbz	r3, 1be98 <bsd_platform_poll+0x80>
   1be96:	3601      	adds	r6, #1
   1be98:	454d      	cmp	r5, r9
   1be9a:	d1ea      	bne.n	1be72 <bsd_platform_poll+0x5a>
   1be9c:	b90e      	cbnz	r6, 1bea2 <bsd_platform_poll+0x8a>
   1be9e:	2f00      	cmp	r7, #0
   1bea0:	d0dd      	beq.n	1be5e <bsd_platform_poll+0x46>
   1bea2:	4630      	mov	r0, r6
   1bea4:	b003      	add	sp, #12
   1bea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1beaa:	2023      	movs	r0, #35	; 0x23
   1beac:	f7f7 fef0 	bl	13c90 <bsd_os_errno_set>
   1beb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1beb4:	b003      	add	sp, #12
   1beb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1beba:	2016      	movs	r0, #22
   1bebc:	f7f7 fee8 	bl	13c90 <bsd_os_errno_set>
   1bec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bec4:	e7ee      	b.n	1bea4 <bsd_platform_poll+0x8c>
   1bec6:	4620      	mov	r0, r4
   1bec8:	e7ec      	b.n	1bea4 <bsd_platform_poll+0x8c>
   1beca:	bf00      	nop

0001becc <bsd_platform_fcntl>:
   1becc:	b508      	push	{r3, lr}
   1bece:	4b06      	ldr	r3, [pc, #24]	; (1bee8 <bsd_platform_fcntl+0x1c>)
   1bed0:	4298      	cmp	r0, r3
   1bed2:	d003      	beq.n	1bedc <bsd_platform_fcntl+0x10>
   1bed4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1bed8:	f001 bde4 	b.w	1daa4 <interface_socket_fcntl>
   1bedc:	202d      	movs	r0, #45	; 0x2d
   1bede:	f7f7 fed7 	bl	13c90 <bsd_os_errno_set>
   1bee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bee6:	bd08      	pop	{r3, pc}
   1bee8:	49765432 	.word	0x49765432

0001beec <linked_list_init>:
   1beec:	b128      	cbz	r0, 1befa <linked_list_init+0xe>
   1beee:	2300      	movs	r3, #0
   1bef0:	6003      	str	r3, [r0, #0]
   1bef2:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1bef6:	4618      	mov	r0, r3
   1bef8:	4770      	bx	lr
   1befa:	2007      	movs	r0, #7
   1befc:	4770      	bx	lr
   1befe:	bf00      	nop

0001bf00 <linked_list_push>:
   1bf00:	6802      	ldr	r2, [r0, #0]
   1bf02:	4603      	mov	r3, r0
   1bf04:	3201      	adds	r2, #1
   1bf06:	d00e      	beq.n	1bf26 <linked_list_push+0x26>
   1bf08:	2200      	movs	r2, #0
   1bf0a:	600a      	str	r2, [r1, #0]
   1bf0c:	6802      	ldr	r2, [r0, #0]
   1bf0e:	b13a      	cbz	r2, 1bf20 <linked_list_push+0x20>
   1bf10:	6882      	ldr	r2, [r0, #8]
   1bf12:	6011      	str	r1, [r2, #0]
   1bf14:	6081      	str	r1, [r0, #8]
   1bf16:	681a      	ldr	r2, [r3, #0]
   1bf18:	2000      	movs	r0, #0
   1bf1a:	3201      	adds	r2, #1
   1bf1c:	601a      	str	r2, [r3, #0]
   1bf1e:	4770      	bx	lr
   1bf20:	e9c0 1101 	strd	r1, r1, [r0, #4]
   1bf24:	e7f7      	b.n	1bf16 <linked_list_push+0x16>
   1bf26:	2004      	movs	r0, #4
   1bf28:	4770      	bx	lr
   1bf2a:	bf00      	nop

0001bf2c <linked_list_pop>:
   1bf2c:	4603      	mov	r3, r0
   1bf2e:	6800      	ldr	r0, [r0, #0]
   1bf30:	b128      	cbz	r0, 1bf3e <linked_list_pop+0x12>
   1bf32:	6858      	ldr	r0, [r3, #4]
   1bf34:	681a      	ldr	r2, [r3, #0]
   1bf36:	6801      	ldr	r1, [r0, #0]
   1bf38:	3a01      	subs	r2, #1
   1bf3a:	6059      	str	r1, [r3, #4]
   1bf3c:	601a      	str	r2, [r3, #0]
   1bf3e:	4770      	bx	lr

0001bf40 <linked_list_peek>:
   1bf40:	6803      	ldr	r3, [r0, #0]
   1bf42:	b10b      	cbz	r3, 1bf48 <linked_list_peek+0x8>
   1bf44:	6840      	ldr	r0, [r0, #4]
   1bf46:	4770      	bx	lr
   1bf48:	4618      	mov	r0, r3
   1bf4a:	4770      	bx	lr

0001bf4c <linked_list_size_get>:
   1bf4c:	6800      	ldr	r0, [r0, #0]
   1bf4e:	4770      	bx	lr

0001bf50 <linked_list_get_next>:
   1bf50:	6800      	ldr	r0, [r0, #0]
   1bf52:	4770      	bx	lr

0001bf54 <nrf_socket>:
   1bf54:	b570      	push	{r4, r5, r6, lr}
   1bf56:	4604      	mov	r4, r0
   1bf58:	460d      	mov	r5, r1
   1bf5a:	4616      	mov	r6, r2
   1bf5c:	f7ff fe8a 	bl	1bc74 <bsd_platform_af_method_table_get>
   1bf60:	b130      	cbz	r0, 1bf70 <nrf_socket+0x1c>
   1bf62:	6803      	ldr	r3, [r0, #0]
   1bf64:	4632      	mov	r2, r6
   1bf66:	4629      	mov	r1, r5
   1bf68:	4620      	mov	r0, r4
   1bf6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bf6e:	4718      	bx	r3
   1bf70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bf74:	bd70      	pop	{r4, r5, r6, pc}
   1bf76:	bf00      	nop

0001bf78 <nrf_close>:
   1bf78:	b510      	push	{r4, lr}
   1bf7a:	4604      	mov	r4, r0
   1bf7c:	f7ff fed2 	bl	1bd24 <bsd_platform_fd_method_table_get>
   1bf80:	b120      	cbz	r0, 1bf8c <nrf_close+0x14>
   1bf82:	6843      	ldr	r3, [r0, #4]
   1bf84:	4620      	mov	r0, r4
   1bf86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bf8a:	4718      	bx	r3
   1bf8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bf90:	bd10      	pop	{r4, pc}
   1bf92:	bf00      	nop

0001bf94 <nrf_sendto>:
   1bf94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bf98:	460d      	mov	r5, r1
   1bf9a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1bf9e:	4616      	mov	r6, r2
   1bfa0:	461f      	mov	r7, r3
   1bfa2:	4604      	mov	r4, r0
   1bfa4:	f7ff febe 	bl	1bd24 <bsd_platform_fd_method_table_get>
   1bfa8:	b158      	cbz	r0, 1bfc2 <nrf_sendto+0x2e>
   1bfaa:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1bfae:	f8d0 e008 	ldr.w	lr, [r0, #8]
   1bfb2:	463b      	mov	r3, r7
   1bfb4:	4632      	mov	r2, r6
   1bfb6:	4629      	mov	r1, r5
   1bfb8:	4620      	mov	r0, r4
   1bfba:	46f4      	mov	ip, lr
   1bfbc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bfc0:	4760      	bx	ip
   1bfc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bfca:	bf00      	nop

0001bfcc <nrf_recvfrom>:
   1bfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bfd0:	460d      	mov	r5, r1
   1bfd2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1bfd6:	4616      	mov	r6, r2
   1bfd8:	461f      	mov	r7, r3
   1bfda:	4604      	mov	r4, r0
   1bfdc:	f7ff fea2 	bl	1bd24 <bsd_platform_fd_method_table_get>
   1bfe0:	b158      	cbz	r0, 1bffa <nrf_recvfrom+0x2e>
   1bfe2:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1bfe6:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   1bfea:	463b      	mov	r3, r7
   1bfec:	4632      	mov	r2, r6
   1bfee:	4629      	mov	r1, r5
   1bff0:	4620      	mov	r0, r4
   1bff2:	46f4      	mov	ip, lr
   1bff4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bff8:	4760      	bx	ip
   1bffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c002:	bf00      	nop

0001c004 <nrf_recv>:
   1c004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c008:	b082      	sub	sp, #8
   1c00a:	460e      	mov	r6, r1
   1c00c:	4617      	mov	r7, r2
   1c00e:	4698      	mov	r8, r3
   1c010:	4605      	mov	r5, r0
   1c012:	f7ff fe87 	bl	1bd24 <bsd_platform_fd_method_table_get>
   1c016:	b160      	cbz	r0, 1c032 <nrf_recv+0x2e>
   1c018:	4604      	mov	r4, r0
   1c01a:	2000      	movs	r0, #0
   1c01c:	e9cd 0000 	strd	r0, r0, [sp]
   1c020:	4643      	mov	r3, r8
   1c022:	463a      	mov	r2, r7
   1c024:	4631      	mov	r1, r6
   1c026:	4628      	mov	r0, r5
   1c028:	68e4      	ldr	r4, [r4, #12]
   1c02a:	47a0      	blx	r4
   1c02c:	b002      	add	sp, #8
   1c02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c036:	e7f9      	b.n	1c02c <nrf_recv+0x28>

0001c038 <nrf_connect>:
   1c038:	b570      	push	{r4, r5, r6, lr}
   1c03a:	460d      	mov	r5, r1
   1c03c:	4616      	mov	r6, r2
   1c03e:	4604      	mov	r4, r0
   1c040:	f7ff fe70 	bl	1bd24 <bsd_platform_fd_method_table_get>
   1c044:	b130      	cbz	r0, 1c054 <nrf_connect+0x1c>
   1c046:	6943      	ldr	r3, [r0, #20]
   1c048:	4632      	mov	r2, r6
   1c04a:	4629      	mov	r1, r5
   1c04c:	4620      	mov	r0, r4
   1c04e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c052:	4718      	bx	r3
   1c054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c058:	bd70      	pop	{r4, r5, r6, pc}
   1c05a:	bf00      	nop

0001c05c <nrf_listen>:
   1c05c:	b570      	push	{r4, r5, r6, lr}
   1c05e:	460d      	mov	r5, r1
   1c060:	4604      	mov	r4, r0
   1c062:	f7ff fe5f 	bl	1bd24 <bsd_platform_fd_method_table_get>
   1c066:	b128      	cbz	r0, 1c074 <nrf_listen+0x18>
   1c068:	6983      	ldr	r3, [r0, #24]
   1c06a:	4629      	mov	r1, r5
   1c06c:	4620      	mov	r0, r4
   1c06e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c072:	4718      	bx	r3
   1c074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c078:	bd70      	pop	{r4, r5, r6, pc}
   1c07a:	bf00      	nop

0001c07c <nrf_accept>:
   1c07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c080:	460d      	mov	r5, r1
   1c082:	4616      	mov	r6, r2
   1c084:	4604      	mov	r4, r0
   1c086:	f7ff fe4d 	bl	1bd24 <bsd_platform_fd_method_table_get>
   1c08a:	b140      	cbz	r0, 1c09e <nrf_accept+0x22>
   1c08c:	69c7      	ldr	r7, [r0, #28]
   1c08e:	4632      	mov	r2, r6
   1c090:	4629      	mov	r1, r5
   1c092:	4620      	mov	r0, r4
   1c094:	46bc      	mov	ip, r7
   1c096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c09a:	2300      	movs	r3, #0
   1c09c:	4760      	bx	ip
   1c09e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c0a6:	bf00      	nop

0001c0a8 <nrf_bind>:
   1c0a8:	b570      	push	{r4, r5, r6, lr}
   1c0aa:	460d      	mov	r5, r1
   1c0ac:	4616      	mov	r6, r2
   1c0ae:	4604      	mov	r4, r0
   1c0b0:	f7ff fe38 	bl	1bd24 <bsd_platform_fd_method_table_get>
   1c0b4:	b130      	cbz	r0, 1c0c4 <nrf_bind+0x1c>
   1c0b6:	6903      	ldr	r3, [r0, #16]
   1c0b8:	4632      	mov	r2, r6
   1c0ba:	4629      	mov	r1, r5
   1c0bc:	4620      	mov	r0, r4
   1c0be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c0c2:	4718      	bx	r3
   1c0c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c0c8:	bd70      	pop	{r4, r5, r6, pc}
   1c0ca:	bf00      	nop

0001c0cc <nrf_setsockopt>:
   1c0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c0d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1c0d4:	460d      	mov	r5, r1
   1c0d6:	4616      	mov	r6, r2
   1c0d8:	461f      	mov	r7, r3
   1c0da:	4604      	mov	r4, r0
   1c0dc:	f7ff fe22 	bl	1bd24 <bsd_platform_fd_method_table_get>
   1c0e0:	b158      	cbz	r0, 1c0fa <nrf_setsockopt+0x2e>
   1c0e2:	f8cd 8018 	str.w	r8, [sp, #24]
   1c0e6:	f8d0 e020 	ldr.w	lr, [r0, #32]
   1c0ea:	463b      	mov	r3, r7
   1c0ec:	4632      	mov	r2, r6
   1c0ee:	4629      	mov	r1, r5
   1c0f0:	4620      	mov	r0, r4
   1c0f2:	46f4      	mov	ip, lr
   1c0f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c0f8:	4760      	bx	ip
   1c0fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c102:	bf00      	nop

0001c104 <nrf_getsockopt>:
   1c104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c108:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1c10c:	460d      	mov	r5, r1
   1c10e:	4616      	mov	r6, r2
   1c110:	461f      	mov	r7, r3
   1c112:	4604      	mov	r4, r0
   1c114:	f7ff fe06 	bl	1bd24 <bsd_platform_fd_method_table_get>
   1c118:	b158      	cbz	r0, 1c132 <nrf_getsockopt+0x2e>
   1c11a:	f8cd 8018 	str.w	r8, [sp, #24]
   1c11e:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   1c122:	463b      	mov	r3, r7
   1c124:	4632      	mov	r2, r6
   1c126:	4629      	mov	r1, r5
   1c128:	4620      	mov	r0, r4
   1c12a:	46f4      	mov	ip, lr
   1c12c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c130:	4760      	bx	ip
   1c132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c13a:	bf00      	nop

0001c13c <nrf_getaddrinfo>:
   1c13c:	f7ff be68 	b.w	1be10 <bsd_platform_getaddrinfo>

0001c140 <nrf_freeaddrinfo>:
   1c140:	f7ff be68 	b.w	1be14 <bsd_platform_freeaddrinfo>

0001c144 <nrf_poll>:
   1c144:	f7ff be68 	b.w	1be18 <bsd_platform_poll>

0001c148 <nrf_fcntl>:
   1c148:	f7ff bec0 	b.w	1becc <bsd_platform_fcntl>

0001c14c <rpc_gnss_serialize_utc>:
   1c14c:	4603      	mov	r3, r0
   1c14e:	b1d8      	cbz	r0, 1c188 <rpc_gnss_serialize_utc+0x3c>
   1c150:	b1d1      	cbz	r1, 1c188 <rpc_gnss_serialize_utc+0x3c>
   1c152:	2000      	movs	r0, #0
   1c154:	2201      	movs	r2, #1
   1c156:	7048      	strb	r0, [r1, #1]
   1c158:	700a      	strb	r2, [r1, #0]
   1c15a:	685a      	ldr	r2, [r3, #4]
   1c15c:	2010      	movs	r0, #16
   1c15e:	f8c1 2006 	str.w	r2, [r1, #6]
   1c162:	681a      	ldr	r2, [r3, #0]
   1c164:	f8c1 2002 	str.w	r2, [r1, #2]
   1c168:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1c16c:	730a      	strb	r2, [r1, #12]
   1c16e:	f993 200d 	ldrsb.w	r2, [r3, #13]
   1c172:	73ca      	strb	r2, [r1, #15]
   1c174:	f993 200c 	ldrsb.w	r2, [r3, #12]
   1c178:	738a      	strb	r2, [r1, #14]
   1c17a:	7a1a      	ldrb	r2, [r3, #8]
   1c17c:	728a      	strb	r2, [r1, #10]
   1c17e:	7ada      	ldrb	r2, [r3, #11]
   1c180:	734a      	strb	r2, [r1, #13]
   1c182:	7a5b      	ldrb	r3, [r3, #9]
   1c184:	72cb      	strb	r3, [r1, #11]
   1c186:	4770      	bx	lr
   1c188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c18c:	4770      	bx	lr
   1c18e:	bf00      	nop

0001c190 <rpc_gnss_serialize_ephe>:
   1c190:	4603      	mov	r3, r0
   1c192:	2800      	cmp	r0, #0
   1c194:	d04b      	beq.n	1c22e <rpc_gnss_serialize_ephe+0x9e>
   1c196:	2900      	cmp	r1, #0
   1c198:	d049      	beq.n	1c22e <rpc_gnss_serialize_ephe+0x9e>
   1c19a:	2000      	movs	r0, #0
   1c19c:	2202      	movs	r2, #2
   1c19e:	7048      	strb	r0, [r1, #1]
   1c1a0:	700a      	strb	r2, [r1, #0]
   1c1a2:	68da      	ldr	r2, [r3, #12]
   1c1a4:	2040      	movs	r0, #64	; 0x40
   1c1a6:	f8c1 200b 	str.w	r2, [r1, #11]
   1c1aa:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1c1ae:	f8a1 2009 	strh.w	r2, [r1, #9]
   1c1b2:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1c1b6:	720a      	strb	r2, [r1, #8]
   1c1b8:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   1c1bc:	878a      	strh	r2, [r1, #60]	; 0x3c
   1c1be:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   1c1c2:	86ca      	strh	r2, [r1, #54]	; 0x36
   1c1c4:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   1c1c8:	874a      	strh	r2, [r1, #58]	; 0x3a
   1c1ca:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1c1ce:	868a      	strh	r2, [r1, #52]	; 0x34
   1c1d0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   1c1d4:	87ca      	strh	r2, [r1, #62]	; 0x3e
   1c1d6:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   1c1da:	870a      	strh	r2, [r1, #56]	; 0x38
   1c1dc:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1c1e0:	830a      	strh	r2, [r1, #24]
   1c1e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1c1e4:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   1c1e8:	7c9a      	ldrb	r2, [r3, #18]
   1c1ea:	744a      	strb	r2, [r1, #17]
   1c1ec:	785a      	ldrb	r2, [r3, #1]
   1c1ee:	70ca      	strb	r2, [r1, #3]
   1c1f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1c1f2:	62ca      	str	r2, [r1, #44]	; 0x2c
   1c1f4:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   1c1f8:	84ca      	strh	r2, [r1, #38]	; 0x26
   1c1fa:	885a      	ldrh	r2, [r3, #2]
   1c1fc:	808a      	strh	r2, [r1, #4]
   1c1fe:	6a1a      	ldr	r2, [r3, #32]
   1c200:	f8c1 201a 	str.w	r2, [r1, #26]
   1c204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c206:	630a      	str	r2, [r1, #48]	; 0x30
   1c208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1c20a:	f8c1 201e 	str.w	r2, [r1, #30]
   1c20e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c210:	628a      	str	r2, [r1, #40]	; 0x28
   1c212:	781a      	ldrb	r2, [r3, #0]
   1c214:	708a      	strb	r2, [r1, #2]
   1c216:	f993 2010 	ldrsb.w	r2, [r3, #16]
   1c21a:	73ca      	strb	r2, [r1, #15]
   1c21c:	889a      	ldrh	r2, [r3, #4]
   1c21e:	80ca      	strh	r2, [r1, #6]
   1c220:	8a9a      	ldrh	r2, [r3, #20]
   1c222:	824a      	strh	r2, [r1, #18]
   1c224:	7c5a      	ldrb	r2, [r3, #17]
   1c226:	740a      	strb	r2, [r1, #16]
   1c228:	699b      	ldr	r3, [r3, #24]
   1c22a:	614b      	str	r3, [r1, #20]
   1c22c:	4770      	bx	lr
   1c22e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c232:	4770      	bx	lr

0001c234 <rpc_gnss_serialize_alm>:
   1c234:	4603      	mov	r3, r0
   1c236:	b360      	cbz	r0, 1c292 <rpc_gnss_serialize_alm+0x5e>
   1c238:	b359      	cbz	r1, 1c292 <rpc_gnss_serialize_alm+0x5e>
   1c23a:	2000      	movs	r0, #0
   1c23c:	2203      	movs	r2, #3
   1c23e:	7048      	strb	r0, [r1, #1]
   1c240:	700a      	strb	r2, [r1, #0]
   1c242:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1c246:	2021      	movs	r0, #33	; 0x21
   1c248:	f8a1 201d 	strh.w	r2, [r1, #29]
   1c24c:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   1c250:	f8a1 201f 	strh.w	r2, [r1, #31]
   1c254:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   1c258:	810a      	strh	r2, [r1, #8]
   1c25a:	889a      	ldrh	r2, [r3, #4]
   1c25c:	80ca      	strh	r2, [r1, #6]
   1c25e:	78da      	ldrb	r2, [r3, #3]
   1c260:	714a      	strb	r2, [r1, #5]
   1c262:	699a      	ldr	r2, [r3, #24]
   1c264:	f8c1 2019 	str.w	r2, [r1, #25]
   1c268:	691a      	ldr	r2, [r3, #16]
   1c26a:	f8c1 2011 	str.w	r2, [r1, #17]
   1c26e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1c272:	814a      	strh	r2, [r1, #10]
   1c274:	68da      	ldr	r2, [r3, #12]
   1c276:	f8c1 200d 	str.w	r2, [r1, #13]
   1c27a:	7a9a      	ldrb	r2, [r3, #10]
   1c27c:	730a      	strb	r2, [r1, #12]
   1c27e:	781a      	ldrb	r2, [r3, #0]
   1c280:	708a      	strb	r2, [r1, #2]
   1c282:	789a      	ldrb	r2, [r3, #2]
   1c284:	710a      	strb	r2, [r1, #4]
   1c286:	695a      	ldr	r2, [r3, #20]
   1c288:	f8c1 2015 	str.w	r2, [r1, #21]
   1c28c:	785b      	ldrb	r3, [r3, #1]
   1c28e:	70cb      	strb	r3, [r1, #3]
   1c290:	4770      	bx	lr
   1c292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c296:	4770      	bx	lr

0001c298 <rpc_gnss_serialize_klob>:
   1c298:	4603      	mov	r3, r0
   1c29a:	b1f0      	cbz	r0, 1c2da <rpc_gnss_serialize_klob+0x42>
   1c29c:	b1e9      	cbz	r1, 1c2da <rpc_gnss_serialize_klob+0x42>
   1c29e:	2000      	movs	r0, #0
   1c2a0:	2204      	movs	r2, #4
   1c2a2:	7048      	strb	r0, [r1, #1]
   1c2a4:	700a      	strb	r2, [r1, #0]
   1c2a6:	f993 2000 	ldrsb.w	r2, [r3]
   1c2aa:	200a      	movs	r0, #10
   1c2ac:	708a      	strb	r2, [r1, #2]
   1c2ae:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1c2b2:	70ca      	strb	r2, [r1, #3]
   1c2b4:	f993 2002 	ldrsb.w	r2, [r3, #2]
   1c2b8:	710a      	strb	r2, [r1, #4]
   1c2ba:	f993 2003 	ldrsb.w	r2, [r3, #3]
   1c2be:	714a      	strb	r2, [r1, #5]
   1c2c0:	f993 2004 	ldrsb.w	r2, [r3, #4]
   1c2c4:	718a      	strb	r2, [r1, #6]
   1c2c6:	f993 2005 	ldrsb.w	r2, [r3, #5]
   1c2ca:	71ca      	strb	r2, [r1, #7]
   1c2cc:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1c2d0:	720a      	strb	r2, [r1, #8]
   1c2d2:	f993 3007 	ldrsb.w	r3, [r3, #7]
   1c2d6:	724b      	strb	r3, [r1, #9]
   1c2d8:	4770      	bx	lr
   1c2da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c2de:	4770      	bx	lr

0001c2e0 <rpc_gnss_serialize_nequick>:
   1c2e0:	4603      	mov	r3, r0
   1c2e2:	b198      	cbz	r0, 1c30c <rpc_gnss_serialize_nequick+0x2c>
   1c2e4:	b191      	cbz	r1, 1c30c <rpc_gnss_serialize_nequick+0x2c>
   1c2e6:	2000      	movs	r0, #0
   1c2e8:	2205      	movs	r2, #5
   1c2ea:	7048      	strb	r0, [r1, #1]
   1c2ec:	700a      	strb	r2, [r1, #0]
   1c2ee:	f9b3 2000 	ldrsh.w	r2, [r3]
   1c2f2:	200a      	movs	r0, #10
   1c2f4:	804a      	strh	r2, [r1, #2]
   1c2f6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1c2fa:	808a      	strh	r2, [r1, #4]
   1c2fc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   1c300:	80ca      	strh	r2, [r1, #6]
   1c302:	799a      	ldrb	r2, [r3, #6]
   1c304:	720a      	strb	r2, [r1, #8]
   1c306:	79db      	ldrb	r3, [r3, #7]
   1c308:	724b      	strb	r3, [r1, #9]
   1c30a:	4770      	bx	lr
   1c30c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c310:	4770      	bx	lr
   1c312:	bf00      	nop

0001c314 <rpc_gnss_serialize_time_and_sv_tow>:
   1c314:	b310      	cbz	r0, 1c35c <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1c316:	b309      	cbz	r1, 1c35c <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1c318:	b470      	push	{r4, r5, r6}
   1c31a:	2500      	movs	r5, #0
   1c31c:	2606      	movs	r6, #6
   1c31e:	460c      	mov	r4, r1
   1c320:	704d      	strb	r5, [r1, #1]
   1c322:	700e      	strb	r6, [r1, #0]
   1c324:	462b      	mov	r3, r5
   1c326:	8805      	ldrh	r5, [r0, #0]
   1c328:	4602      	mov	r2, r0
   1c32a:	804d      	strh	r5, [r1, #2]
   1c32c:	68c5      	ldr	r5, [r0, #12]
   1c32e:	f8c1 500a 	str.w	r5, [r1, #10]
   1c332:	8905      	ldrh	r5, [r0, #8]
   1c334:	810d      	strh	r5, [r1, #8]
   1c336:	6840      	ldr	r0, [r0, #4]
   1c338:	6048      	str	r0, [r1, #4]
   1c33a:	8a15      	ldrh	r5, [r2, #16]
   1c33c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1c340:	4408      	add	r0, r1
   1c342:	81c5      	strh	r5, [r0, #14]
   1c344:	7c90      	ldrb	r0, [r2, #18]
   1c346:	3301      	adds	r3, #1
   1c348:	2b20      	cmp	r3, #32
   1c34a:	7420      	strb	r0, [r4, #16]
   1c34c:	f102 0204 	add.w	r2, r2, #4
   1c350:	f104 0403 	add.w	r4, r4, #3
   1c354:	d1f1      	bne.n	1c33a <rpc_gnss_serialize_time_and_sv_tow+0x26>
   1c356:	206e      	movs	r0, #110	; 0x6e
   1c358:	bc70      	pop	{r4, r5, r6}
   1c35a:	4770      	bx	lr
   1c35c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c360:	4770      	bx	lr
   1c362:	bf00      	nop

0001c364 <rpc_gnss_serialize_location>:
   1c364:	4603      	mov	r3, r0
   1c366:	b1c8      	cbz	r0, 1c39c <rpc_gnss_serialize_location+0x38>
   1c368:	b1c1      	cbz	r1, 1c39c <rpc_gnss_serialize_location+0x38>
   1c36a:	2000      	movs	r0, #0
   1c36c:	2207      	movs	r2, #7
   1c36e:	7048      	strb	r0, [r1, #1]
   1c370:	700a      	strb	r2, [r1, #0]
   1c372:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1c376:	2011      	movs	r0, #17
   1c378:	814a      	strh	r2, [r1, #10]
   1c37a:	7b9a      	ldrb	r2, [r3, #14]
   1c37c:	740a      	strb	r2, [r1, #16]
   1c37e:	681a      	ldr	r2, [r3, #0]
   1c380:	f8c1 2002 	str.w	r2, [r1, #2]
   1c384:	685a      	ldr	r2, [r3, #4]
   1c386:	f8c1 2006 	str.w	r2, [r1, #6]
   1c38a:	7b1a      	ldrb	r2, [r3, #12]
   1c38c:	738a      	strb	r2, [r1, #14]
   1c38e:	7b5a      	ldrb	r2, [r3, #13]
   1c390:	73ca      	strb	r2, [r1, #15]
   1c392:	7a9a      	ldrb	r2, [r3, #10]
   1c394:	730a      	strb	r2, [r1, #12]
   1c396:	7adb      	ldrb	r3, [r3, #11]
   1c398:	734b      	strb	r3, [r1, #13]
   1c39a:	4770      	bx	lr
   1c39c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c3a0:	4770      	bx	lr
   1c3a2:	bf00      	nop

0001c3a4 <rpc_gnss_serialize_integrity>:
   1c3a4:	b148      	cbz	r0, 1c3ba <rpc_gnss_serialize_integrity+0x16>
   1c3a6:	b141      	cbz	r1, 1c3ba <rpc_gnss_serialize_integrity+0x16>
   1c3a8:	2200      	movs	r2, #0
   1c3aa:	2308      	movs	r3, #8
   1c3ac:	704a      	strb	r2, [r1, #1]
   1c3ae:	700b      	strb	r3, [r1, #0]
   1c3b0:	6803      	ldr	r3, [r0, #0]
   1c3b2:	2006      	movs	r0, #6
   1c3b4:	f8c1 3002 	str.w	r3, [r1, #2]
   1c3b8:	4770      	bx	lr
   1c3ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c3be:	4770      	bx	lr

0001c3c0 <gnss_client_event_handler>:
   1c3c0:	f850 1b08 	ldr.w	r1, [r0], #8
   1c3c4:	0c09      	lsrs	r1, r1, #16
   1c3c6:	f7fd b947 	b.w	19658 <rpc_gnss_event_handler>
   1c3ca:	bf00      	nop

0001c3cc <rpc_gnss_client_init>:
   1c3cc:	4801      	ldr	r0, [pc, #4]	; (1c3d4 <rpc_gnss_client_init+0x8>)
   1c3ce:	f7fd b877 	b.w	194c0 <rpc_client_register>
   1c3d2:	bf00      	nop
   1c3d4:	00028f24 	.word	0x00028f24

0001c3d8 <rpc_gnss_client_request_alloc>:
   1c3d8:	2300      	movs	r3, #0
   1c3da:	b510      	push	{r4, lr}
   1c3dc:	b082      	sub	sp, #8
   1c3de:	9301      	str	r3, [sp, #4]
   1c3e0:	b158      	cbz	r0, 1c3fa <rpc_gnss_client_request_alloc+0x22>
   1c3e2:	4604      	mov	r4, r0
   1c3e4:	aa01      	add	r2, sp, #4
   1c3e6:	2007      	movs	r0, #7
   1c3e8:	f7fd f8e4 	bl	195b4 <rpc_message_alloc>
   1c3ec:	b918      	cbnz	r0, 1c3f6 <rpc_gnss_client_request_alloc+0x1e>
   1c3ee:	9b01      	ldr	r3, [sp, #4]
   1c3f0:	b10b      	cbz	r3, 1c3f6 <rpc_gnss_client_request_alloc+0x1e>
   1c3f2:	3308      	adds	r3, #8
   1c3f4:	6023      	str	r3, [r4, #0]
   1c3f6:	b002      	add	sp, #8
   1c3f8:	bd10      	pop	{r4, pc}
   1c3fa:	2007      	movs	r0, #7
   1c3fc:	b002      	add	sp, #8
   1c3fe:	bd10      	pop	{r4, pc}

0001c400 <rpc_gnss_client_request_send>:
   1c400:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1c404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1c408:	d10b      	bne.n	1c422 <rpc_gnss_client_request_send+0x22>
   1c40a:	b160      	cbz	r0, 1c426 <rpc_gnss_client_request_send+0x26>
   1c40c:	4603      	mov	r3, r0
   1c40e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1c412:	2007      	movs	r0, #7
   1c414:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1c418:	f843 1d08 	str.w	r1, [r3, #-8]!
   1c41c:	4619      	mov	r1, r3
   1c41e:	f7fd b8b9 	b.w	19594 <rpc_message_send>
   1c422:	200f      	movs	r0, #15
   1c424:	4770      	bx	lr
   1c426:	2007      	movs	r0, #7
   1c428:	4770      	bx	lr
   1c42a:	bf00      	nop

0001c42c <rpc_gnss_client_message_free>:
   1c42c:	b120      	cbz	r0, 1c438 <rpc_gnss_client_message_free+0xc>
   1c42e:	f1a0 0108 	sub.w	r1, r0, #8
   1c432:	2007      	movs	r0, #7
   1c434:	f7fd b8ea 	b.w	1960c <rpc_message_free>
   1c438:	2007      	movs	r0, #7
   1c43a:	4770      	bx	lr

0001c43c <rpc_gnss_client_data_free>:
   1c43c:	b118      	cbz	r0, 1c446 <rpc_gnss_client_data_free+0xa>
   1c43e:	4601      	mov	r1, r0
   1c440:	2007      	movs	r0, #7
   1c442:	f7fd b8ef 	b.w	19624 <rpc_message_data_free>
   1c446:	2007      	movs	r0, #7
   1c448:	4770      	bx	lr
   1c44a:	bf00      	nop

0001c44c <datagram_handler_init>:
   1c44c:	b510      	push	{r4, lr}
   1c44e:	4604      	mov	r4, r0
   1c450:	200c      	movs	r0, #12
   1c452:	f000 fdd7 	bl	1d004 <nrf_malloc>
   1c456:	60e0      	str	r0, [r4, #12]
   1c458:	b118      	cbz	r0, 1c462 <datagram_handler_init+0x16>
   1c45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c45e:	f7ff bd45 	b.w	1beec <linked_list_init>
   1c462:	2004      	movs	r0, #4
   1c464:	bd10      	pop	{r4, pc}
   1c466:	bf00      	nop

0001c468 <datagram_handler_put>:
   1c468:	b570      	push	{r4, r5, r6, lr}
   1c46a:	4606      	mov	r6, r0
   1c46c:	2014      	movs	r0, #20
   1c46e:	460d      	mov	r5, r1
   1c470:	f000 fdc8 	bl	1d004 <nrf_malloc>
   1c474:	b178      	cbz	r0, 1c496 <datagram_handler_put+0x2e>
   1c476:	682b      	ldr	r3, [r5, #0]
   1c478:	4604      	mov	r4, r0
   1c47a:	6043      	str	r3, [r0, #4]
   1c47c:	686b      	ldr	r3, [r5, #4]
   1c47e:	4601      	mov	r1, r0
   1c480:	6083      	str	r3, [r0, #8]
   1c482:	68eb      	ldr	r3, [r5, #12]
   1c484:	60c3      	str	r3, [r0, #12]
   1c486:	68ab      	ldr	r3, [r5, #8]
   1c488:	6103      	str	r3, [r0, #16]
   1c48a:	68f0      	ldr	r0, [r6, #12]
   1c48c:	f7ff fd38 	bl	1bf00 <linked_list_push>
   1c490:	b920      	cbnz	r0, 1c49c <datagram_handler_put+0x34>
   1c492:	6868      	ldr	r0, [r5, #4]
   1c494:	bd70      	pop	{r4, r5, r6, pc}
   1c496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c49a:	bd70      	pop	{r4, r5, r6, pc}
   1c49c:	4620      	mov	r0, r4
   1c49e:	f000 fdbb 	bl	1d018 <nrf_free>
   1c4a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c4a6:	bd70      	pop	{r4, r5, r6, pc}

0001c4a8 <datagram_handler_get>:
   1c4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c4ac:	4607      	mov	r7, r0
   1c4ae:	b084      	sub	sp, #16
   1c4b0:	68c0      	ldr	r0, [r0, #12]
   1c4b2:	460c      	mov	r4, r1
   1c4b4:	4616      	mov	r6, r2
   1c4b6:	f7ff fd43 	bl	1bf40 <linked_list_peek>
   1c4ba:	2800      	cmp	r0, #0
   1c4bc:	d03b      	beq.n	1c536 <datagram_handler_get+0x8e>
   1c4be:	6882      	ldr	r2, [r0, #8]
   1c4c0:	4605      	mov	r5, r0
   1c4c2:	e9d4 0300 	ldrd	r0, r3, [r4]
   1c4c6:	429a      	cmp	r2, r3
   1c4c8:	bf28      	it	cs
   1c4ca:	461a      	movcs	r2, r3
   1c4cc:	6062      	str	r2, [r4, #4]
   1c4ce:	b110      	cbz	r0, 1c4d6 <datagram_handler_get+0x2e>
   1c4d0:	6869      	ldr	r1, [r5, #4]
   1c4d2:	f00b fa38 	bl	27946 <memcpy>
   1c4d6:	68a0      	ldr	r0, [r4, #8]
   1c4d8:	b118      	cbz	r0, 1c4e2 <datagram_handler_get+0x3a>
   1c4da:	692b      	ldr	r3, [r5, #16]
   1c4dc:	b10b      	cbz	r3, 1c4e2 <datagram_handler_get+0x3a>
   1c4de:	68ea      	ldr	r2, [r5, #12]
   1c4e0:	bb02      	cbnz	r2, 1c524 <datagram_handler_get+0x7c>
   1c4e2:	2300      	movs	r3, #0
   1c4e4:	60e3      	str	r3, [r4, #12]
   1c4e6:	0732      	lsls	r2, r6, #28
   1c4e8:	d506      	bpl.n	1c4f8 <datagram_handler_get+0x50>
   1c4ea:	06b3      	lsls	r3, r6, #26
   1c4ec:	bf4c      	ite	mi
   1c4ee:	68a8      	ldrmi	r0, [r5, #8]
   1c4f0:	6860      	ldrpl	r0, [r4, #4]
   1c4f2:	b004      	add	sp, #16
   1c4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c4f8:	68f8      	ldr	r0, [r7, #12]
   1c4fa:	f7ff fd17 	bl	1bf2c <linked_list_pop>
   1c4fe:	4680      	mov	r8, r0
   1c500:	2800      	cmp	r0, #0
   1c502:	d0f2      	beq.n	1c4ea <datagram_handler_get+0x42>
   1c504:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1c508:	6902      	ldr	r2, [r0, #16]
   1c50a:	9300      	str	r3, [sp, #0]
   1c50c:	68c3      	ldr	r3, [r0, #12]
   1c50e:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1c512:	9303      	str	r3, [sp, #12]
   1c514:	4668      	mov	r0, sp
   1c516:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   1c51a:	4798      	blx	r3
   1c51c:	4640      	mov	r0, r8
   1c51e:	f000 fd7b 	bl	1d018 <nrf_free>
   1c522:	e7e2      	b.n	1c4ea <datagram_handler_get+0x42>
   1c524:	68e3      	ldr	r3, [r4, #12]
   1c526:	429a      	cmp	r2, r3
   1c528:	bf28      	it	cs
   1c52a:	461a      	movcs	r2, r3
   1c52c:	60e2      	str	r2, [r4, #12]
   1c52e:	6929      	ldr	r1, [r5, #16]
   1c530:	f00b fa09 	bl	27946 <memcpy>
   1c534:	e7d7      	b.n	1c4e6 <datagram_handler_get+0x3e>
   1c536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c53a:	e7da      	b.n	1c4f2 <datagram_handler_get+0x4a>

0001c53c <datagram_handler_available>:
   1c53c:	b508      	push	{r3, lr}
   1c53e:	68c0      	ldr	r0, [r0, #12]
   1c540:	f7ff fcfe 	bl	1bf40 <linked_list_peek>
   1c544:	b108      	cbz	r0, 1c54a <datagram_handler_available+0xe>
   1c546:	6880      	ldr	r0, [r0, #8]
   1c548:	bd08      	pop	{r3, pc}
   1c54a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c54e:	bd08      	pop	{r3, pc}

0001c550 <datagram_handler_flush>:
   1c550:	b530      	push	{r4, r5, lr}
   1c552:	4605      	mov	r5, r0
   1c554:	68c0      	ldr	r0, [r0, #12]
   1c556:	b085      	sub	sp, #20
   1c558:	b9a8      	cbnz	r0, 1c586 <datagram_handler_flush+0x36>
   1c55a:	e01a      	b.n	1c592 <datagram_handler_flush+0x42>
   1c55c:	68e8      	ldr	r0, [r5, #12]
   1c55e:	f7ff fce5 	bl	1bf2c <linked_list_pop>
   1c562:	4604      	mov	r4, r0
   1c564:	b170      	cbz	r0, 1c584 <datagram_handler_flush+0x34>
   1c566:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1c56a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1c56e:	e9cd 0100 	strd	r0, r1, [sp]
   1c572:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c576:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1c57a:	4668      	mov	r0, sp
   1c57c:	4798      	blx	r3
   1c57e:	4620      	mov	r0, r4
   1c580:	f000 fd4a 	bl	1d018 <nrf_free>
   1c584:	68e8      	ldr	r0, [r5, #12]
   1c586:	f7ff fce1 	bl	1bf4c <linked_list_size_get>
   1c58a:	2800      	cmp	r0, #0
   1c58c:	d1e6      	bne.n	1c55c <datagram_handler_flush+0xc>
   1c58e:	b005      	add	sp, #20
   1c590:	bd30      	pop	{r4, r5, pc}
   1c592:	2008      	movs	r0, #8
   1c594:	b005      	add	sp, #20
   1c596:	bd30      	pop	{r4, r5, pc}

0001c598 <datagram_handler_free>:
   1c598:	b530      	push	{r4, r5, lr}
   1c59a:	4605      	mov	r5, r0
   1c59c:	68c0      	ldr	r0, [r0, #12]
   1c59e:	b085      	sub	sp, #20
   1c5a0:	b9a0      	cbnz	r0, 1c5cc <datagram_handler_free+0x34>
   1c5a2:	e01c      	b.n	1c5de <datagram_handler_free+0x46>
   1c5a4:	f7ff fcc2 	bl	1bf2c <linked_list_pop>
   1c5a8:	4604      	mov	r4, r0
   1c5aa:	b170      	cbz	r0, 1c5ca <datagram_handler_free+0x32>
   1c5ac:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1c5b0:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1c5b4:	e9cd 0100 	strd	r0, r1, [sp]
   1c5b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c5bc:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1c5c0:	4668      	mov	r0, sp
   1c5c2:	4798      	blx	r3
   1c5c4:	4620      	mov	r0, r4
   1c5c6:	f000 fd27 	bl	1d018 <nrf_free>
   1c5ca:	68e8      	ldr	r0, [r5, #12]
   1c5cc:	f7ff fcbe 	bl	1bf4c <linked_list_size_get>
   1c5d0:	4604      	mov	r4, r0
   1c5d2:	68e8      	ldr	r0, [r5, #12]
   1c5d4:	2c00      	cmp	r4, #0
   1c5d6:	d1e5      	bne.n	1c5a4 <datagram_handler_free+0xc>
   1c5d8:	f000 fd1e 	bl	1d018 <nrf_free>
   1c5dc:	60ec      	str	r4, [r5, #12]
   1c5de:	b005      	add	sp, #20
   1c5e0:	bd30      	pop	{r4, r5, pc}
   1c5e2:	bf00      	nop

0001c5e4 <null_handler_init>:
   1c5e4:	2000      	movs	r0, #0
   1c5e6:	4770      	bx	lr

0001c5e8 <null_handler_put>:
   1c5e8:	b510      	push	{r4, lr}
   1c5ea:	460c      	mov	r4, r1
   1c5ec:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1c5f0:	4620      	mov	r0, r4
   1c5f2:	4798      	blx	r3
   1c5f4:	6860      	ldr	r0, [r4, #4]
   1c5f6:	bd10      	pop	{r4, pc}

0001c5f8 <null_handler_get>:
   1c5f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c5fc:	4770      	bx	lr
   1c5fe:	bf00      	nop

0001c600 <null_handler_available>:
   1c600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c604:	4770      	bx	lr
   1c606:	bf00      	nop

0001c608 <null_handler_flush>:
   1c608:	2000      	movs	r0, #0
   1c60a:	4770      	bx	lr

0001c60c <null_handler_free>:
   1c60c:	4770      	bx	lr
   1c60e:	bf00      	nop

0001c610 <packet_handler_create>:
   1c610:	2801      	cmp	r0, #1
   1c612:	b538      	push	{r3, r4, r5, lr}
   1c614:	460d      	mov	r5, r1
   1c616:	4614      	mov	r4, r2
   1c618:	d00d      	beq.n	1c636 <packet_handler_create+0x26>
   1c61a:	db11      	blt.n	1c640 <packet_handler_create+0x30>
   1c61c:	2803      	cmp	r0, #3
   1c61e:	dc0f      	bgt.n	1c640 <packet_handler_create+0x30>
   1c620:	2010      	movs	r0, #16
   1c622:	f000 fcef 	bl	1d004 <nrf_malloc>
   1c626:	2218      	movs	r2, #24
   1c628:	b120      	cbz	r0, 1c634 <packet_handler_create+0x24>
   1c62a:	4b08      	ldr	r3, [pc, #32]	; (1c64c <packet_handler_create+0x3c>)
   1c62c:	6045      	str	r5, [r0, #4]
   1c62e:	4413      	add	r3, r2
   1c630:	6084      	str	r4, [r0, #8]
   1c632:	6003      	str	r3, [r0, #0]
   1c634:	bd38      	pop	{r3, r4, r5, pc}
   1c636:	2014      	movs	r0, #20
   1c638:	f000 fce4 	bl	1d004 <nrf_malloc>
   1c63c:	2230      	movs	r2, #48	; 0x30
   1c63e:	e7f3      	b.n	1c628 <packet_handler_create+0x18>
   1c640:	200c      	movs	r0, #12
   1c642:	f000 fcdf 	bl	1d004 <nrf_malloc>
   1c646:	2200      	movs	r2, #0
   1c648:	e7ee      	b.n	1c628 <packet_handler_create+0x18>
   1c64a:	bf00      	nop
   1c64c:	00028f34 	.word	0x00028f34

0001c650 <packet_handler_delete>:
   1c650:	b510      	push	{r4, lr}
   1c652:	4604      	mov	r4, r0
   1c654:	6803      	ldr	r3, [r0, #0]
   1c656:	691b      	ldr	r3, [r3, #16]
   1c658:	4798      	blx	r3
   1c65a:	6823      	ldr	r3, [r4, #0]
   1c65c:	4620      	mov	r0, r4
   1c65e:	695b      	ldr	r3, [r3, #20]
   1c660:	4798      	blx	r3
   1c662:	4620      	mov	r0, r4
   1c664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c668:	f000 bcd6 	b.w	1d018 <nrf_free>

0001c66c <stream_handler_init>:
   1c66c:	b510      	push	{r4, lr}
   1c66e:	4604      	mov	r4, r0
   1c670:	200c      	movs	r0, #12
   1c672:	f000 fcc7 	bl	1d004 <nrf_malloc>
   1c676:	60e0      	str	r0, [r4, #12]
   1c678:	b128      	cbz	r0, 1c686 <stream_handler_init+0x1a>
   1c67a:	2300      	movs	r3, #0
   1c67c:	6123      	str	r3, [r4, #16]
   1c67e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c682:	f7ff bc33 	b.w	1beec <linked_list_init>
   1c686:	2004      	movs	r0, #4
   1c688:	bd10      	pop	{r4, pc}
   1c68a:	bf00      	nop

0001c68c <stream_handler_put>:
   1c68c:	b570      	push	{r4, r5, r6, lr}
   1c68e:	4606      	mov	r6, r0
   1c690:	2014      	movs	r0, #20
   1c692:	460d      	mov	r5, r1
   1c694:	f000 fcb6 	bl	1d004 <nrf_malloc>
   1c698:	b178      	cbz	r0, 1c6ba <stream_handler_put+0x2e>
   1c69a:	682b      	ldr	r3, [r5, #0]
   1c69c:	4604      	mov	r4, r0
   1c69e:	6043      	str	r3, [r0, #4]
   1c6a0:	686b      	ldr	r3, [r5, #4]
   1c6a2:	4601      	mov	r1, r0
   1c6a4:	6083      	str	r3, [r0, #8]
   1c6a6:	68eb      	ldr	r3, [r5, #12]
   1c6a8:	60c3      	str	r3, [r0, #12]
   1c6aa:	68ab      	ldr	r3, [r5, #8]
   1c6ac:	6103      	str	r3, [r0, #16]
   1c6ae:	68f0      	ldr	r0, [r6, #12]
   1c6b0:	f7ff fc26 	bl	1bf00 <linked_list_push>
   1c6b4:	b920      	cbnz	r0, 1c6c0 <stream_handler_put+0x34>
   1c6b6:	6868      	ldr	r0, [r5, #4]
   1c6b8:	bd70      	pop	{r4, r5, r6, pc}
   1c6ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c6be:	bd70      	pop	{r4, r5, r6, pc}
   1c6c0:	4620      	mov	r0, r4
   1c6c2:	f000 fca9 	bl	1d018 <nrf_free>
   1c6c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c6ca:	bd70      	pop	{r4, r5, r6, pc}

0001c6cc <stream_handler_get>:
   1c6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6d0:	4682      	mov	sl, r0
   1c6d2:	b089      	sub	sp, #36	; 0x24
   1c6d4:	68c0      	ldr	r0, [r0, #12]
   1c6d6:	4689      	mov	r9, r1
   1c6d8:	4693      	mov	fp, r2
   1c6da:	f7ff fc31 	bl	1bf40 <linked_list_peek>
   1c6de:	2800      	cmp	r0, #0
   1c6e0:	d071      	beq.n	1c7c6 <stream_handler_get+0xfa>
   1c6e2:	4605      	mov	r5, r0
   1c6e4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1c6e8:	b120      	cbz	r0, 1c6f4 <stream_handler_get+0x28>
   1c6ea:	692b      	ldr	r3, [r5, #16]
   1c6ec:	b113      	cbz	r3, 1c6f4 <stream_handler_get+0x28>
   1c6ee:	68ea      	ldr	r2, [r5, #12]
   1c6f0:	2a00      	cmp	r2, #0
   1c6f2:	d15d      	bne.n	1c7b0 <stream_handler_get+0xe4>
   1c6f4:	2300      	movs	r3, #0
   1c6f6:	f8c9 300c 	str.w	r3, [r9, #12]
   1c6fa:	f8d9 2000 	ldr.w	r2, [r9]
   1c6fe:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1c702:	f8da 1010 	ldr.w	r1, [sl, #16]
   1c706:	9203      	str	r2, [sp, #12]
   1c708:	f1b8 0f00 	cmp.w	r8, #0
   1c70c:	d030      	beq.n	1c770 <stream_handler_get+0xa4>
   1c70e:	2400      	movs	r4, #0
   1c710:	f00b 0320 	and.w	r3, fp, #32
   1c714:	9301      	str	r3, [sp, #4]
   1c716:	f00b 0b08 	and.w	fp, fp, #8
   1c71a:	68ae      	ldr	r6, [r5, #8]
   1c71c:	eba8 0304 	sub.w	r3, r8, r4
   1c720:	1a76      	subs	r6, r6, r1
   1c722:	429e      	cmp	r6, r3
   1c724:	4637      	mov	r7, r6
   1c726:	bf28      	it	cs
   1c728:	461f      	movcs	r7, r3
   1c72a:	b10a      	cbz	r2, 1c730 <stream_handler_get+0x64>
   1c72c:	9a01      	ldr	r2, [sp, #4]
   1c72e:	b1aa      	cbz	r2, 1c75c <stream_handler_get+0x90>
   1c730:	f1bb 0f00 	cmp.w	fp, #0
   1c734:	d106      	bne.n	1c744 <stream_handler_get+0x78>
   1c736:	429e      	cmp	r6, r3
   1c738:	d921      	bls.n	1c77e <stream_handler_get+0xb2>
   1c73a:	f8da 3010 	ldr.w	r3, [sl, #16]
   1c73e:	443b      	add	r3, r7
   1c740:	f8ca 3010 	str.w	r3, [sl, #16]
   1c744:	4628      	mov	r0, r5
   1c746:	f7ff fc03 	bl	1bf50 <linked_list_get_next>
   1c74a:	443c      	add	r4, r7
   1c74c:	4605      	mov	r5, r0
   1c74e:	b180      	cbz	r0, 1c772 <stream_handler_get+0xa6>
   1c750:	45a0      	cmp	r8, r4
   1c752:	d90e      	bls.n	1c772 <stream_handler_get+0xa6>
   1c754:	f8d9 2000 	ldr.w	r2, [r9]
   1c758:	2100      	movs	r1, #0
   1c75a:	e7de      	b.n	1c71a <stream_handler_get+0x4e>
   1c75c:	6868      	ldr	r0, [r5, #4]
   1c75e:	9302      	str	r3, [sp, #8]
   1c760:	9b03      	ldr	r3, [sp, #12]
   1c762:	4401      	add	r1, r0
   1c764:	463a      	mov	r2, r7
   1c766:	1918      	adds	r0, r3, r4
   1c768:	f00b f8ed 	bl	27946 <memcpy>
   1c76c:	9b02      	ldr	r3, [sp, #8]
   1c76e:	e7df      	b.n	1c730 <stream_handler_get+0x64>
   1c770:	4644      	mov	r4, r8
   1c772:	4620      	mov	r0, r4
   1c774:	f8c9 4004 	str.w	r4, [r9, #4]
   1c778:	b009      	add	sp, #36	; 0x24
   1c77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c77e:	f8da 000c 	ldr.w	r0, [sl, #12]
   1c782:	f7ff fbd3 	bl	1bf2c <linked_list_pop>
   1c786:	4606      	mov	r6, r0
   1c788:	b170      	cbz	r0, 1c7a8 <stream_handler_get+0xdc>
   1c78a:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1c78e:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   1c792:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1c796:	e9cd 1006 	strd	r1, r0, [sp, #24]
   1c79a:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   1c79e:	a804      	add	r0, sp, #16
   1c7a0:	4798      	blx	r3
   1c7a2:	4630      	mov	r0, r6
   1c7a4:	f000 fc38 	bl	1d018 <nrf_free>
   1c7a8:	2300      	movs	r3, #0
   1c7aa:	f8ca 3010 	str.w	r3, [sl, #16]
   1c7ae:	e7c9      	b.n	1c744 <stream_handler_get+0x78>
   1c7b0:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1c7b4:	429a      	cmp	r2, r3
   1c7b6:	bf28      	it	cs
   1c7b8:	461a      	movcs	r2, r3
   1c7ba:	f8c9 200c 	str.w	r2, [r9, #12]
   1c7be:	6929      	ldr	r1, [r5, #16]
   1c7c0:	f00b f8c1 	bl	27946 <memcpy>
   1c7c4:	e799      	b.n	1c6fa <stream_handler_get+0x2e>
   1c7c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c7ca:	e7d5      	b.n	1c778 <stream_handler_get+0xac>

0001c7cc <stream_handler_available>:
   1c7cc:	b510      	push	{r4, lr}
   1c7ce:	4604      	mov	r4, r0
   1c7d0:	68c0      	ldr	r0, [r0, #12]
   1c7d2:	f7ff fbb5 	bl	1bf40 <linked_list_peek>
   1c7d6:	b150      	cbz	r0, 1c7ee <stream_handler_available+0x22>
   1c7d8:	6924      	ldr	r4, [r4, #16]
   1c7da:	4264      	negs	r4, r4
   1c7dc:	6883      	ldr	r3, [r0, #8]
   1c7de:	441c      	add	r4, r3
   1c7e0:	f7ff fbb6 	bl	1bf50 <linked_list_get_next>
   1c7e4:	2800      	cmp	r0, #0
   1c7e6:	d1f9      	bne.n	1c7dc <stream_handler_available+0x10>
   1c7e8:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1c7ec:	bd10      	pop	{r4, pc}
   1c7ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c7f2:	bd10      	pop	{r4, pc}

0001c7f4 <stream_handler_flush>:
   1c7f4:	b530      	push	{r4, r5, lr}
   1c7f6:	4605      	mov	r5, r0
   1c7f8:	68c0      	ldr	r0, [r0, #12]
   1c7fa:	b085      	sub	sp, #20
   1c7fc:	b9a8      	cbnz	r0, 1c82a <stream_handler_flush+0x36>
   1c7fe:	e01a      	b.n	1c836 <stream_handler_flush+0x42>
   1c800:	68e8      	ldr	r0, [r5, #12]
   1c802:	f7ff fb93 	bl	1bf2c <linked_list_pop>
   1c806:	4604      	mov	r4, r0
   1c808:	b170      	cbz	r0, 1c828 <stream_handler_flush+0x34>
   1c80a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1c80e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1c812:	e9cd 0100 	strd	r0, r1, [sp]
   1c816:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c81a:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1c81e:	4668      	mov	r0, sp
   1c820:	4798      	blx	r3
   1c822:	4620      	mov	r0, r4
   1c824:	f000 fbf8 	bl	1d018 <nrf_free>
   1c828:	68e8      	ldr	r0, [r5, #12]
   1c82a:	f7ff fb8f 	bl	1bf4c <linked_list_size_get>
   1c82e:	2800      	cmp	r0, #0
   1c830:	d1e6      	bne.n	1c800 <stream_handler_flush+0xc>
   1c832:	b005      	add	sp, #20
   1c834:	bd30      	pop	{r4, r5, pc}
   1c836:	2008      	movs	r0, #8
   1c838:	b005      	add	sp, #20
   1c83a:	bd30      	pop	{r4, r5, pc}

0001c83c <stream_handler_free>:
   1c83c:	b530      	push	{r4, r5, lr}
   1c83e:	4605      	mov	r5, r0
   1c840:	68c0      	ldr	r0, [r0, #12]
   1c842:	b085      	sub	sp, #20
   1c844:	b9a0      	cbnz	r0, 1c870 <stream_handler_free+0x34>
   1c846:	e01c      	b.n	1c882 <stream_handler_free+0x46>
   1c848:	f7ff fb70 	bl	1bf2c <linked_list_pop>
   1c84c:	4604      	mov	r4, r0
   1c84e:	b170      	cbz	r0, 1c86e <stream_handler_free+0x32>
   1c850:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1c854:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1c858:	e9cd 0100 	strd	r0, r1, [sp]
   1c85c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c860:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1c864:	4668      	mov	r0, sp
   1c866:	4798      	blx	r3
   1c868:	4620      	mov	r0, r4
   1c86a:	f000 fbd5 	bl	1d018 <nrf_free>
   1c86e:	68e8      	ldr	r0, [r5, #12]
   1c870:	f7ff fb6c 	bl	1bf4c <linked_list_size_get>
   1c874:	4604      	mov	r4, r0
   1c876:	68e8      	ldr	r0, [r5, #12]
   1c878:	2c00      	cmp	r4, #0
   1c87a:	d1e5      	bne.n	1c848 <stream_handler_free+0xc>
   1c87c:	f000 fbcc 	bl	1d018 <nrf_free>
   1c880:	60ec      	str	r4, [r5, #12]
   1c882:	b005      	add	sp, #20
   1c884:	bd30      	pop	{r4, r5, pc}
   1c886:	bf00      	nop

0001c888 <mem_free>:
   1c888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c88c:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1c95c <mem_free+0xd4>
   1c890:	b083      	sub	sp, #12
   1c892:	9000      	str	r0, [sp, #0]
   1c894:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   1c898:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1c89c:	b12b      	cbz	r3, 1c8aa <mem_free+0x22>
   1c89e:	f8dc 2000 	ldr.w	r2, [ip]
   1c8a2:	9c00      	ldr	r4, [sp, #0]
   1c8a4:	7810      	ldrb	r0, [r2, #0]
   1c8a6:	42a0      	cmp	r0, r4
   1c8a8:	d006      	beq.n	1c8b8 <mem_free+0x30>
   1c8aa:	f10c 0c0c 	add.w	ip, ip, #12
   1c8ae:	45e3      	cmp	fp, ip
   1c8b0:	d1f2      	bne.n	1c898 <mem_free+0x10>
   1c8b2:	b003      	add	sp, #12
   1c8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8b8:	f8dc a004 	ldr.w	sl, [ip, #4]
   1c8bc:	eb03 080a 	add.w	r8, r3, sl
   1c8c0:	45c2      	cmp	sl, r8
   1c8c2:	d2f2      	bcs.n	1c8aa <mem_free+0x22>
   1c8c4:	6853      	ldr	r3, [r2, #4]
   1c8c6:	f8cd c004 	str.w	ip, [sp, #4]
   1c8ca:	46d6      	mov	lr, sl
   1c8cc:	469c      	mov	ip, r3
   1c8ce:	f8d2 9010 	ldr.w	r9, [r2, #16]
   1c8d2:	8997      	ldrh	r7, [r2, #12]
   1c8d4:	ebae 000a 	sub.w	r0, lr, sl
   1c8d8:	b3df      	cbz	r7, 1c952 <mem_free+0xca>
   1c8da:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1c8de:	4290      	cmp	r0, r2
   1c8e0:	d31c      	bcc.n	1c91c <mem_free+0x94>
   1c8e2:	4665      	mov	r5, ip
   1c8e4:	2400      	movs	r4, #0
   1c8e6:	f109 0304 	add.w	r3, r9, #4
   1c8ea:	e003      	b.n	1c8f4 <mem_free+0x6c>
   1c8ec:	885a      	ldrh	r2, [r3, #2]
   1c8ee:	3304      	adds	r3, #4
   1c8f0:	4282      	cmp	r2, r0
   1c8f2:	d815      	bhi.n	1c920 <mem_free+0x98>
   1c8f4:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   1c8f8:	3401      	adds	r4, #1
   1c8fa:	42a7      	cmp	r7, r4
   1c8fc:	fb02 5506 	mla	r5, r2, r6, r5
   1c900:	eba0 0002 	sub.w	r0, r0, r2
   1c904:	461e      	mov	r6, r3
   1c906:	d1f1      	bne.n	1c8ec <mem_free+0x64>
   1c908:	2000      	movs	r0, #0
   1c90a:	4281      	cmp	r1, r0
   1c90c:	d00d      	beq.n	1c92a <mem_free+0xa2>
   1c90e:	f10e 0e01 	add.w	lr, lr, #1
   1c912:	45f0      	cmp	r8, lr
   1c914:	d1de      	bne.n	1c8d4 <mem_free+0x4c>
   1c916:	f8dd c004 	ldr.w	ip, [sp, #4]
   1c91a:	e7c6      	b.n	1c8aa <mem_free+0x22>
   1c91c:	4665      	mov	r5, ip
   1c91e:	464e      	mov	r6, r9
   1c920:	8833      	ldrh	r3, [r6, #0]
   1c922:	fb00 5003 	mla	r0, r0, r3, r5
   1c926:	4281      	cmp	r1, r0
   1c928:	d1f1      	bne.n	1c90e <mem_free+0x86>
   1c92a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1c92e:	f8dd c004 	ldr.w	ip, [sp, #4]
   1c932:	d0ba      	beq.n	1c8aa <mem_free+0x22>
   1c934:	2301      	movs	r3, #1
   1c936:	4a08      	ldr	r2, [pc, #32]	; (1c958 <mem_free+0xd0>)
   1c938:	ea4f 115e 	mov.w	r1, lr, lsr #5
   1c93c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1c940:	f00e 0e1f 	and.w	lr, lr, #31
   1c944:	fa03 fe0e 	lsl.w	lr, r3, lr
   1c948:	ea4e 0000 	orr.w	r0, lr, r0
   1c94c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   1c950:	e7af      	b.n	1c8b2 <mem_free+0x2a>
   1c952:	4638      	mov	r0, r7
   1c954:	e7d9      	b.n	1c90a <mem_free+0x82>
   1c956:	bf00      	nop
   1c958:	20023504 	.word	0x20023504
   1c95c:	20023548 	.word	0x20023548

0001c960 <mem_alloc.constprop.5>:
   1c960:	2800      	cmp	r0, #0
   1c962:	d050      	beq.n	1ca06 <mem_alloc.constprop.5+0xa6>
   1c964:	4b6d      	ldr	r3, [pc, #436]	; (1cb1c <mem_alloc.constprop.5+0x1bc>)
   1c966:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1c96a:	4290      	cmp	r0, r2
   1c96c:	d84b      	bhi.n	1ca06 <mem_alloc.constprop.5+0xa6>
   1c96e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c972:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   1c976:	b083      	sub	sp, #12
   1c978:	f1bb 0f00 	cmp.w	fp, #0
   1c97c:	d054      	beq.n	1ca28 <mem_alloc.constprop.5+0xc8>
   1c97e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   1c982:	4691      	mov	r9, r2
   1c984:	2600      	movs	r6, #0
   1c986:	f04f 0812 	mov.w	r8, #18
   1c98a:	4f65      	ldr	r7, [pc, #404]	; (1cb20 <mem_alloc.constprop.5+0x1c0>)
   1c98c:	9201      	str	r2, [sp, #4]
   1c98e:	f10b 0e11 	add.w	lr, fp, #17
   1c992:	eb06 0209 	add.w	r2, r6, r9
   1c996:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   1c99a:	3201      	adds	r2, #1
   1c99c:	0852      	lsrs	r2, r2, #1
   1c99e:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   1c9a2:	f102 0112 	add.w	r1, r2, #18
   1c9a6:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   1c9aa:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   1c9ae:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   1c9b2:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   1c9b6:	f8dc c004 	ldr.w	ip, [ip, #4]
   1c9ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1c9be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1c9c2:	f8da a010 	ldr.w	sl, [sl, #16]
   1c9c6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   1c9ca:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   1c9ce:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   1c9d2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1c9d6:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   1c9da:	6849      	ldr	r1, [r1, #4]
   1c9dc:	692d      	ldr	r5, [r5, #16]
   1c9de:	6924      	ldr	r4, [r4, #16]
   1c9e0:	f8dc c004 	ldr.w	ip, [ip, #4]
   1c9e4:	4550      	cmp	r0, sl
   1c9e6:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   1c9ea:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   1c9ee:	d915      	bls.n	1ca1c <mem_alloc.constprop.5+0xbc>
   1c9f0:	4288      	cmp	r0, r1
   1c9f2:	d211      	bcs.n	1ca18 <mem_alloc.constprop.5+0xb8>
   1c9f4:	42a8      	cmp	r0, r5
   1c9f6:	d908      	bls.n	1ca0a <mem_alloc.constprop.5+0xaa>
   1c9f8:	1c56      	adds	r6, r2, #1
   1c9fa:	45b1      	cmp	r9, r6
   1c9fc:	f0c0 8087 	bcc.w	1cb0e <mem_alloc.constprop.5+0x1ae>
   1ca00:	f102 0813 	add.w	r8, r2, #19
   1ca04:	e7c5      	b.n	1c992 <mem_alloc.constprop.5+0x32>
   1ca06:	2000      	movs	r0, #0
   1ca08:	4770      	bx	lr
   1ca0a:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1ca0e:	454e      	cmp	r6, r9
   1ca10:	d87d      	bhi.n	1cb0e <mem_alloc.constprop.5+0x1ae>
   1ca12:	f102 0e11 	add.w	lr, r2, #17
   1ca16:	e7bc      	b.n	1c992 <mem_alloc.constprop.5+0x32>
   1ca18:	f109 0601 	add.w	r6, r9, #1
   1ca1c:	45b3      	cmp	fp, r6
   1ca1e:	d007      	beq.n	1ca30 <mem_alloc.constprop.5+0xd0>
   1ca20:	2e10      	cmp	r6, #16
   1ca22:	d001      	beq.n	1ca28 <mem_alloc.constprop.5+0xc8>
   1ca24:	45b3      	cmp	fp, r6
   1ca26:	d808      	bhi.n	1ca3a <mem_alloc.constprop.5+0xda>
   1ca28:	2000      	movs	r0, #0
   1ca2a:	b003      	add	sp, #12
   1ca2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca30:	9a01      	ldr	r2, [sp, #4]
   1ca32:	2a10      	cmp	r2, #16
   1ca34:	bf18      	it	ne
   1ca36:	4616      	movne	r6, r2
   1ca38:	d0f6      	beq.n	1ca28 <mem_alloc.constprop.5+0xc8>
   1ca3a:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1cb24 <mem_alloc.constprop.5+0x1c4>
   1ca3e:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   1ca42:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   1ca46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1ca4a:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   1ca4e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   1ca52:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1ca56:	691d      	ldr	r5, [r3, #16]
   1ca58:	2c00      	cmp	r4, #0
   1ca5a:	d056      	beq.n	1cb0a <mem_alloc.constprop.5+0x1aa>
   1ca5c:	462a      	mov	r2, r5
   1ca5e:	4670      	mov	r0, lr
   1ca60:	00a4      	lsls	r4, r4, #2
   1ca62:	eb05 0904 	add.w	r9, r5, r4
   1ca66:	8851      	ldrh	r1, [r2, #2]
   1ca68:	3204      	adds	r2, #4
   1ca6a:	4591      	cmp	r9, r2
   1ca6c:	4408      	add	r0, r1
   1ca6e:	d1fa      	bne.n	1ca66 <mem_alloc.constprop.5+0x106>
   1ca70:	1929      	adds	r1, r5, r4
   1ca72:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   1ca76:	4482      	add	sl, r0
   1ca78:	4582      	cmp	sl, r0
   1ca7a:	d918      	bls.n	1caae <mem_alloc.constprop.5+0x14e>
   1ca7c:	0941      	lsrs	r1, r0, #5
   1ca7e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1ca82:	f000 041f 	and.w	r4, r0, #31
   1ca86:	fa22 f904 	lsr.w	r9, r2, r4
   1ca8a:	f019 0f01 	tst.w	r9, #1
   1ca8e:	d007      	beq.n	1caa0 <mem_alloc.constprop.5+0x140>
   1ca90:	e013      	b.n	1caba <mem_alloc.constprop.5+0x15a>
   1ca92:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1ca96:	fa22 f904 	lsr.w	r9, r2, r4
   1ca9a:	f019 0f01 	tst.w	r9, #1
   1ca9e:	d10c      	bne.n	1caba <mem_alloc.constprop.5+0x15a>
   1caa0:	3001      	adds	r0, #1
   1caa2:	4582      	cmp	sl, r0
   1caa4:	ea4f 1150 	mov.w	r1, r0, lsr #5
   1caa8:	f000 041f 	and.w	r4, r0, #31
   1caac:	d1f1      	bne.n	1ca92 <mem_alloc.constprop.5+0x132>
   1caae:	3601      	adds	r6, #1
   1cab0:	455e      	cmp	r6, fp
   1cab2:	f108 0808 	add.w	r8, r8, #8
   1cab6:	d3c4      	bcc.n	1ca42 <mem_alloc.constprop.5+0xe2>
   1cab8:	e7b6      	b.n	1ca28 <mem_alloc.constprop.5+0xc8>
   1caba:	2601      	movs	r6, #1
   1cabc:	fa06 f404 	lsl.w	r4, r6, r4
   1cac0:	899e      	ldrh	r6, [r3, #12]
   1cac2:	ea22 0204 	bic.w	r2, r2, r4
   1cac6:	eba0 000e 	sub.w	r0, r0, lr
   1caca:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   1cace:	685c      	ldr	r4, [r3, #4]
   1cad0:	2e00      	cmp	r6, #0
   1cad2:	d0a9      	beq.n	1ca28 <mem_alloc.constprop.5+0xc8>
   1cad4:	886a      	ldrh	r2, [r5, #2]
   1cad6:	4282      	cmp	r2, r0
   1cad8:	d811      	bhi.n	1cafe <mem_alloc.constprop.5+0x19e>
   1cada:	2100      	movs	r1, #0
   1cadc:	1d2b      	adds	r3, r5, #4
   1cade:	e003      	b.n	1cae8 <mem_alloc.constprop.5+0x188>
   1cae0:	885a      	ldrh	r2, [r3, #2]
   1cae2:	3304      	adds	r3, #4
   1cae4:	4282      	cmp	r2, r0
   1cae6:	d80a      	bhi.n	1cafe <mem_alloc.constprop.5+0x19e>
   1cae8:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1caec:	3101      	adds	r1, #1
   1caee:	428e      	cmp	r6, r1
   1caf0:	fb02 4405 	mla	r4, r2, r5, r4
   1caf4:	eba0 0002 	sub.w	r0, r0, r2
   1caf8:	461d      	mov	r5, r3
   1cafa:	d1f1      	bne.n	1cae0 <mem_alloc.constprop.5+0x180>
   1cafc:	e794      	b.n	1ca28 <mem_alloc.constprop.5+0xc8>
   1cafe:	882b      	ldrh	r3, [r5, #0]
   1cb00:	fb00 4003 	mla	r0, r0, r3, r4
   1cb04:	b003      	add	sp, #12
   1cb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb0a:	4670      	mov	r0, lr
   1cb0c:	e7b0      	b.n	1ca70 <mem_alloc.constprop.5+0x110>
   1cb0e:	f1bb 0f10 	cmp.w	fp, #16
   1cb12:	bf08      	it	eq
   1cb14:	260f      	moveq	r6, #15
   1cb16:	d090      	beq.n	1ca3a <mem_alloc.constprop.5+0xda>
   1cb18:	e786      	b.n	1ca28 <mem_alloc.constprop.5+0xc8>
   1cb1a:	bf00      	nop
   1cb1c:	20023584 	.word	0x20023584
   1cb20:	20023548 	.word	0x20023548
   1cb24:	20023504 	.word	0x20023504

0001cb28 <mem_alloc.constprop.4>:
   1cb28:	2800      	cmp	r0, #0
   1cb2a:	d04c      	beq.n	1cbc6 <mem_alloc.constprop.4+0x9e>
   1cb2c:	4b6b      	ldr	r3, [pc, #428]	; (1ccdc <mem_alloc.constprop.4+0x1b4>)
   1cb2e:	681a      	ldr	r2, [r3, #0]
   1cb30:	4290      	cmp	r0, r2
   1cb32:	d848      	bhi.n	1cbc6 <mem_alloc.constprop.4+0x9e>
   1cb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb38:	685f      	ldr	r7, [r3, #4]
   1cb3a:	b083      	sub	sp, #12
   1cb3c:	9700      	str	r7, [sp, #0]
   1cb3e:	2f00      	cmp	r7, #0
   1cb40:	d051      	beq.n	1cbe6 <mem_alloc.constprop.4+0xbe>
   1cb42:	1e7a      	subs	r2, r7, #1
   1cb44:	4696      	mov	lr, r2
   1cb46:	2100      	movs	r1, #0
   1cb48:	f04f 0c01 	mov.w	ip, #1
   1cb4c:	4c64      	ldr	r4, [pc, #400]	; (1cce0 <mem_alloc.constprop.4+0x1b8>)
   1cb4e:	9201      	str	r2, [sp, #4]
   1cb50:	eb01 020e 	add.w	r2, r1, lr
   1cb54:	3201      	adds	r2, #1
   1cb56:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   1cb5a:	0852      	lsrs	r2, r2, #1
   1cb5c:	f102 0801 	add.w	r8, r2, #1
   1cb60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1cb64:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   1cb68:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   1cb6c:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   1cb70:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   1cb74:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   1cb78:	f8d9 9004 	ldr.w	r9, [r9, #4]
   1cb7c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   1cb80:	f8da a010 	ldr.w	sl, [sl, #16]
   1cb84:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   1cb88:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   1cb8c:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   1cb90:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   1cb94:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   1cb98:	6936      	ldr	r6, [r6, #16]
   1cb9a:	f8db b004 	ldr.w	fp, [fp, #4]
   1cb9e:	692d      	ldr	r5, [r5, #16]
   1cba0:	f8d9 9004 	ldr.w	r9, [r9, #4]
   1cba4:	4550      	cmp	r0, sl
   1cba6:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   1cbaa:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   1cbae:	d913      	bls.n	1cbd8 <mem_alloc.constprop.4+0xb0>
   1cbb0:	42a8      	cmp	r0, r5
   1cbb2:	d210      	bcs.n	1cbd6 <mem_alloc.constprop.4+0xae>
   1cbb4:	42b0      	cmp	r0, r6
   1cbb6:	d908      	bls.n	1cbca <mem_alloc.constprop.4+0xa2>
   1cbb8:	45c6      	cmp	lr, r8
   1cbba:	4641      	mov	r1, r8
   1cbbc:	f0c0 8087 	bcc.w	1ccce <mem_alloc.constprop.4+0x1a6>
   1cbc0:	f108 0c01 	add.w	ip, r8, #1
   1cbc4:	e7c4      	b.n	1cb50 <mem_alloc.constprop.4+0x28>
   1cbc6:	2000      	movs	r0, #0
   1cbc8:	4770      	bx	lr
   1cbca:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   1cbce:	4571      	cmp	r1, lr
   1cbd0:	d87d      	bhi.n	1ccce <mem_alloc.constprop.4+0x1a6>
   1cbd2:	4617      	mov	r7, r2
   1cbd4:	e7bc      	b.n	1cb50 <mem_alloc.constprop.4+0x28>
   1cbd6:	4639      	mov	r1, r7
   1cbd8:	9a00      	ldr	r2, [sp, #0]
   1cbda:	428a      	cmp	r2, r1
   1cbdc:	d007      	beq.n	1cbee <mem_alloc.constprop.4+0xc6>
   1cbde:	2910      	cmp	r1, #16
   1cbe0:	d001      	beq.n	1cbe6 <mem_alloc.constprop.4+0xbe>
   1cbe2:	428a      	cmp	r2, r1
   1cbe4:	d808      	bhi.n	1cbf8 <mem_alloc.constprop.4+0xd0>
   1cbe6:	2000      	movs	r0, #0
   1cbe8:	b003      	add	sp, #12
   1cbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbee:	9a01      	ldr	r2, [sp, #4]
   1cbf0:	2a10      	cmp	r2, #16
   1cbf2:	bf18      	it	ne
   1cbf4:	4611      	movne	r1, r2
   1cbf6:	d0f6      	beq.n	1cbe6 <mem_alloc.constprop.4+0xbe>
   1cbf8:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1cce4 <mem_alloc.constprop.4+0x1bc>
   1cbfc:	f8dd 9000 	ldr.w	r9, [sp]
   1cc00:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   1cc04:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   1cc08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1cc0c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   1cc10:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1cc14:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1cc18:	691f      	ldr	r7, [r3, #16]
   1cc1a:	2e00      	cmp	r6, #0
   1cc1c:	d055      	beq.n	1ccca <mem_alloc.constprop.4+0x1a2>
   1cc1e:	463a      	mov	r2, r7
   1cc20:	4670      	mov	r0, lr
   1cc22:	00b6      	lsls	r6, r6, #2
   1cc24:	eb07 0a06 	add.w	sl, r7, r6
   1cc28:	8855      	ldrh	r5, [r2, #2]
   1cc2a:	3204      	adds	r2, #4
   1cc2c:	4592      	cmp	sl, r2
   1cc2e:	4428      	add	r0, r5
   1cc30:	d1fa      	bne.n	1cc28 <mem_alloc.constprop.4+0x100>
   1cc32:	19bd      	adds	r5, r7, r6
   1cc34:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   1cc38:	4483      	add	fp, r0
   1cc3a:	4583      	cmp	fp, r0
   1cc3c:	d918      	bls.n	1cc70 <mem_alloc.constprop.4+0x148>
   1cc3e:	0945      	lsrs	r5, r0, #5
   1cc40:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   1cc44:	f000 061f 	and.w	r6, r0, #31
   1cc48:	fa22 fa06 	lsr.w	sl, r2, r6
   1cc4c:	f01a 0f01 	tst.w	sl, #1
   1cc50:	d007      	beq.n	1cc62 <mem_alloc.constprop.4+0x13a>
   1cc52:	e013      	b.n	1cc7c <mem_alloc.constprop.4+0x154>
   1cc54:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   1cc58:	fa22 fa06 	lsr.w	sl, r2, r6
   1cc5c:	f01a 0f01 	tst.w	sl, #1
   1cc60:	d10c      	bne.n	1cc7c <mem_alloc.constprop.4+0x154>
   1cc62:	3001      	adds	r0, #1
   1cc64:	4583      	cmp	fp, r0
   1cc66:	ea4f 1550 	mov.w	r5, r0, lsr #5
   1cc6a:	f000 061f 	and.w	r6, r0, #31
   1cc6e:	d1f1      	bne.n	1cc54 <mem_alloc.constprop.4+0x12c>
   1cc70:	3101      	adds	r1, #1
   1cc72:	4549      	cmp	r1, r9
   1cc74:	f108 0808 	add.w	r8, r8, #8
   1cc78:	d3c4      	bcc.n	1cc04 <mem_alloc.constprop.4+0xdc>
   1cc7a:	e7b4      	b.n	1cbe6 <mem_alloc.constprop.4+0xbe>
   1cc7c:	2101      	movs	r1, #1
   1cc7e:	40b1      	lsls	r1, r6
   1cc80:	899e      	ldrh	r6, [r3, #12]
   1cc82:	ea22 0201 	bic.w	r2, r2, r1
   1cc86:	eba0 000e 	sub.w	r0, r0, lr
   1cc8a:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   1cc8e:	685c      	ldr	r4, [r3, #4]
   1cc90:	2e00      	cmp	r6, #0
   1cc92:	d0a8      	beq.n	1cbe6 <mem_alloc.constprop.4+0xbe>
   1cc94:	887a      	ldrh	r2, [r7, #2]
   1cc96:	4282      	cmp	r2, r0
   1cc98:	d811      	bhi.n	1ccbe <mem_alloc.constprop.4+0x196>
   1cc9a:	2100      	movs	r1, #0
   1cc9c:	1d3b      	adds	r3, r7, #4
   1cc9e:	e003      	b.n	1cca8 <mem_alloc.constprop.4+0x180>
   1cca0:	885a      	ldrh	r2, [r3, #2]
   1cca2:	3304      	adds	r3, #4
   1cca4:	4282      	cmp	r2, r0
   1cca6:	d80a      	bhi.n	1ccbe <mem_alloc.constprop.4+0x196>
   1cca8:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1ccac:	3101      	adds	r1, #1
   1ccae:	428e      	cmp	r6, r1
   1ccb0:	eba0 0002 	sub.w	r0, r0, r2
   1ccb4:	fb02 4405 	mla	r4, r2, r5, r4
   1ccb8:	461f      	mov	r7, r3
   1ccba:	d1f1      	bne.n	1cca0 <mem_alloc.constprop.4+0x178>
   1ccbc:	e793      	b.n	1cbe6 <mem_alloc.constprop.4+0xbe>
   1ccbe:	883b      	ldrh	r3, [r7, #0]
   1ccc0:	fb00 4003 	mla	r0, r0, r3, r4
   1ccc4:	b003      	add	sp, #12
   1ccc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ccca:	4670      	mov	r0, lr
   1cccc:	e7b1      	b.n	1cc32 <mem_alloc.constprop.4+0x10a>
   1ccce:	9a00      	ldr	r2, [sp, #0]
   1ccd0:	2a10      	cmp	r2, #16
   1ccd2:	bf08      	it	eq
   1ccd4:	210f      	moveq	r1, #15
   1ccd6:	d08f      	beq.n	1cbf8 <mem_alloc.constprop.4+0xd0>
   1ccd8:	e785      	b.n	1cbe6 <mem_alloc.constprop.4+0xbe>
   1ccda:	bf00      	nop
   1ccdc:	20023584 	.word	0x20023584
   1cce0:	20023548 	.word	0x20023548
   1cce4:	20023504 	.word	0x20023504

0001cce8 <nrf_mem_init>:
   1cce8:	b570      	push	{r4, r5, r6, lr}
   1ccea:	2200      	movs	r2, #0
   1ccec:	2501      	movs	r5, #1
   1ccee:	4833      	ldr	r0, [pc, #204]	; (1cdbc <nrf_mem_init+0xd4>)
   1ccf0:	0951      	lsrs	r1, r2, #5
   1ccf2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1ccf6:	f002 031f 	and.w	r3, r2, #31
   1ccfa:	fa05 f303 	lsl.w	r3, r5, r3
   1ccfe:	3201      	adds	r2, #1
   1cd00:	4323      	orrs	r3, r4
   1cd02:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1cd06:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   1cd0a:	d1f1      	bne.n	1ccf0 <nrf_mem_init+0x8>
   1cd0c:	2400      	movs	r4, #0
   1cd0e:	4b2c      	ldr	r3, [pc, #176]	; (1cdc0 <nrf_mem_init+0xd8>)
   1cd10:	4621      	mov	r1, r4
   1cd12:	223c      	movs	r2, #60	; 0x3c
   1cd14:	482b      	ldr	r0, [pc, #172]	; (1cdc4 <nrf_mem_init+0xdc>)
   1cd16:	601c      	str	r4, [r3, #0]
   1cd18:	f00a fe4f 	bl	279ba <memset>
   1cd1c:	2110      	movs	r1, #16
   1cd1e:	2205      	movs	r2, #5
   1cd20:	4b29      	ldr	r3, [pc, #164]	; (1cdc8 <nrf_mem_init+0xe0>)
   1cd22:	4e2a      	ldr	r6, [pc, #168]	; (1cdcc <nrf_mem_init+0xe4>)
   1cd24:	e9c3 4400 	strd	r4, r4, [r3]
   1cd28:	60d9      	str	r1, [r3, #12]
   1cd2a:	6159      	str	r1, [r3, #20]
   1cd2c:	61d9      	str	r1, [r3, #28]
   1cd2e:	6259      	str	r1, [r3, #36]	; 0x24
   1cd30:	62d9      	str	r1, [r3, #44]	; 0x2c
   1cd32:	6359      	str	r1, [r3, #52]	; 0x34
   1cd34:	63d9      	str	r1, [r3, #60]	; 0x3c
   1cd36:	6459      	str	r1, [r3, #68]	; 0x44
   1cd38:	64d9      	str	r1, [r3, #76]	; 0x4c
   1cd3a:	6559      	str	r1, [r3, #84]	; 0x54
   1cd3c:	65d9      	str	r1, [r3, #92]	; 0x5c
   1cd3e:	6659      	str	r1, [r3, #100]	; 0x64
   1cd40:	66d9      	str	r1, [r3, #108]	; 0x6c
   1cd42:	6759      	str	r1, [r3, #116]	; 0x74
   1cd44:	67d9      	str	r1, [r3, #124]	; 0x7c
   1cd46:	609a      	str	r2, [r3, #8]
   1cd48:	611a      	str	r2, [r3, #16]
   1cd4a:	619a      	str	r2, [r3, #24]
   1cd4c:	621a      	str	r2, [r3, #32]
   1cd4e:	629a      	str	r2, [r3, #40]	; 0x28
   1cd50:	631a      	str	r2, [r3, #48]	; 0x30
   1cd52:	639a      	str	r2, [r3, #56]	; 0x38
   1cd54:	641a      	str	r2, [r3, #64]	; 0x40
   1cd56:	649a      	str	r2, [r3, #72]	; 0x48
   1cd58:	651a      	str	r2, [r3, #80]	; 0x50
   1cd5a:	659a      	str	r2, [r3, #88]	; 0x58
   1cd5c:	661a      	str	r2, [r3, #96]	; 0x60
   1cd5e:	669a      	str	r2, [r3, #104]	; 0x68
   1cd60:	671a      	str	r2, [r3, #112]	; 0x70
   1cd62:	679a      	str	r2, [r3, #120]	; 0x78
   1cd64:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   1cd68:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   1cd6c:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   1cd70:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   1cd74:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   1cd78:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   1cd7c:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   1cd80:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   1cd84:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   1cd88:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   1cd8c:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   1cd90:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   1cd94:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   1cd98:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   1cd9c:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   1cda0:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   1cda4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1cda8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1cdac:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   1cdb0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1cdb4:	4620      	mov	r0, r4
   1cdb6:	7035      	strb	r5, [r6, #0]
   1cdb8:	bd70      	pop	{r4, r5, r6, pc}
   1cdba:	bf00      	nop
   1cdbc:	20023504 	.word	0x20023504
   1cdc0:	20023544 	.word	0x20023544
   1cdc4:	20023548 	.word	0x20023548
   1cdc8:	20023584 	.word	0x20023584
   1cdcc:	2002af34 	.word	0x2002af34

0001cdd0 <nrf_mem_register>:
   1cdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cdd4:	4b87      	ldr	r3, [pc, #540]	; (1cff4 <nrf_mem_register+0x224>)
   1cdd6:	b087      	sub	sp, #28
   1cdd8:	781b      	ldrb	r3, [r3, #0]
   1cdda:	2b00      	cmp	r3, #0
   1cddc:	f000 808c 	beq.w	1cef8 <nrf_mem_register+0x128>
   1cde0:	b328      	cbz	r0, 1ce2e <nrf_mem_register+0x5e>
   1cde2:	b321      	cbz	r1, 1ce2e <nrf_mem_register+0x5e>
   1cde4:	780b      	ldrb	r3, [r1, #0]
   1cde6:	f8df 8218 	ldr.w	r8, [pc, #536]	; 1d000 <nrf_mem_register+0x230>
   1cdea:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1cdee:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1cdf2:	685b      	ldr	r3, [r3, #4]
   1cdf4:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   1cdf8:	4463      	add	r3, ip
   1cdfa:	2b10      	cmp	r3, #16
   1cdfc:	d811      	bhi.n	1ce22 <nrf_mem_register+0x52>
   1cdfe:	f04f 0a00 	mov.w	sl, #0
   1ce02:	4689      	mov	r9, r1
   1ce04:	4b7c      	ldr	r3, [pc, #496]	; (1cff8 <nrf_mem_register+0x228>)
   1ce06:	4f7d      	ldr	r7, [pc, #500]	; (1cffc <nrf_mem_register+0x22c>)
   1ce08:	681b      	ldr	r3, [r3, #0]
   1ce0a:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   1ce0e:	9300      	str	r3, [sp, #0]
   1ce10:	68b9      	ldr	r1, [r7, #8]
   1ce12:	b191      	cbz	r1, 1ce3a <nrf_mem_register+0x6a>
   1ce14:	f10a 0a01 	add.w	sl, sl, #1
   1ce18:	f1ba 0f05 	cmp.w	sl, #5
   1ce1c:	f107 070c 	add.w	r7, r7, #12
   1ce20:	d1f6      	bne.n	1ce10 <nrf_mem_register+0x40>
   1ce22:	f248 1b07 	movw	fp, #33031	; 0x8107
   1ce26:	4658      	mov	r0, fp
   1ce28:	b007      	add	sp, #28
   1ce2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce2e:	f248 1b0e 	movw	fp, #33038	; 0x810e
   1ce32:	4658      	mov	r0, fp
   1ce34:	b007      	add	sp, #28
   1ce36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce3a:	f1bc 0f00 	cmp.w	ip, #0
   1ce3e:	d061      	beq.n	1cf04 <nrf_mem_register+0x134>
   1ce40:	460d      	mov	r5, r1
   1ce42:	460c      	mov	r4, r1
   1ce44:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1ce48:	eb0e 0b03 	add.w	fp, lr, r3
   1ce4c:	885a      	ldrh	r2, [r3, #2]
   1ce4e:	f833 6b04 	ldrh.w	r6, [r3], #4
   1ce52:	4415      	add	r5, r2
   1ce54:	459b      	cmp	fp, r3
   1ce56:	fb02 4406 	mla	r4, r2, r6, r4
   1ce5a:	d1f7      	bne.n	1ce4c <nrf_mem_register+0x7c>
   1ce5c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1ce60:	42a3      	cmp	r3, r4
   1ce62:	d3d7      	bcc.n	1ce14 <nrf_mem_register+0x44>
   1ce64:	9b00      	ldr	r3, [sp, #0]
   1ce66:	442b      	add	r3, r5
   1ce68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1ce6c:	d2d2      	bcs.n	1ce14 <nrf_mem_register+0x44>
   1ce6e:	4c63      	ldr	r4, [pc, #396]	; (1cffc <nrf_mem_register+0x22c>)
   1ce70:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   1ce74:	0092      	lsls	r2, r2, #2
   1ce76:	f8c0 a000 	str.w	sl, [r0]
   1ce7a:	18a0      	adds	r0, r4, r2
   1ce7c:	f844 9002 	str.w	r9, [r4, r2]
   1ce80:	9a00      	ldr	r2, [sp, #0]
   1ce82:	468b      	mov	fp, r1
   1ce84:	e9c0 2501 	strd	r2, r5, [r0, #4]
   1ce88:	f899 2001 	ldrb.w	r2, [r9, #1]
   1ce8c:	485a      	ldr	r0, [pc, #360]	; (1cff8 <nrf_mem_register+0x228>)
   1ce8e:	2a01      	cmp	r2, #1
   1ce90:	6003      	str	r3, [r0, #0]
   1ce92:	d0c8      	beq.n	1ce26 <nrf_mem_register+0x56>
   1ce94:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   1ce98:	2b00      	cmp	r3, #0
   1ce9a:	d0c4      	beq.n	1ce26 <nrf_mem_register+0x56>
   1ce9c:	2500      	movs	r5, #0
   1ce9e:	f8cd 9004 	str.w	r9, [sp, #4]
   1cea2:	f8cd a00c 	str.w	sl, [sp, #12]
   1cea6:	f8cd b014 	str.w	fp, [sp, #20]
   1ceaa:	9b01      	ldr	r3, [sp, #4]
   1ceac:	781f      	ldrb	r7, [r3, #0]
   1ceae:	691a      	ldr	r2, [r3, #16]
   1ceb0:	013b      	lsls	r3, r7, #4
   1ceb2:	eb03 0907 	add.w	r9, r3, r7
   1ceb6:	9300      	str	r3, [sp, #0]
   1ceb8:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   1cebc:	6859      	ldr	r1, [r3, #4]
   1cebe:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   1cec2:	9102      	str	r1, [sp, #8]
   1cec4:	bb39      	cbnz	r1, 1cf16 <nrf_mem_register+0x146>
   1cec6:	9a03      	ldr	r2, [sp, #12]
   1cec8:	60dd      	str	r5, [r3, #12]
   1ceca:	609a      	str	r2, [r3, #8]
   1cecc:	9b00      	ldr	r3, [sp, #0]
   1cece:	443b      	add	r3, r7
   1ced0:	461f      	mov	r7, r3
   1ced2:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   1ced6:	684b      	ldr	r3, [r1, #4]
   1ced8:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   1cedc:	3301      	adds	r3, #1
   1cede:	4294      	cmp	r4, r2
   1cee0:	604b      	str	r3, [r1, #4]
   1cee2:	d912      	bls.n	1cf0a <nrf_mem_register+0x13a>
   1cee4:	9b01      	ldr	r3, [sp, #4]
   1cee6:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   1ceea:	899b      	ldrh	r3, [r3, #12]
   1ceec:	3501      	adds	r5, #1
   1ceee:	429d      	cmp	r5, r3
   1cef0:	d3db      	bcc.n	1ceaa <nrf_mem_register+0xda>
   1cef2:	f8dd b014 	ldr.w	fp, [sp, #20]
   1cef6:	e796      	b.n	1ce26 <nrf_mem_register+0x56>
   1cef8:	f248 1b08 	movw	fp, #33032	; 0x8108
   1cefc:	4658      	mov	r0, fp
   1cefe:	b007      	add	sp, #28
   1cf00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf04:	9b00      	ldr	r3, [sp, #0]
   1cf06:	4665      	mov	r5, ip
   1cf08:	e7ae      	b.n	1ce68 <nrf_mem_register+0x98>
   1cf0a:	9b01      	ldr	r3, [sp, #4]
   1cf0c:	3501      	adds	r5, #1
   1cf0e:	899b      	ldrh	r3, [r3, #12]
   1cf10:	42ab      	cmp	r3, r5
   1cf12:	d8ca      	bhi.n	1ceaa <nrf_mem_register+0xda>
   1cf14:	e7ed      	b.n	1cef2 <nrf_mem_register+0x122>
   1cf16:	2600      	movs	r6, #0
   1cf18:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   1cf1c:	9504      	str	r5, [sp, #16]
   1cf1e:	eb06 000a 	add.w	r0, r6, sl
   1cf22:	eb09 0206 	add.w	r2, r9, r6
   1cf26:	3201      	adds	r2, #1
   1cf28:	3001      	adds	r0, #1
   1cf2a:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   1cf2e:	0840      	lsrs	r0, r0, #1
   1cf30:	4d32      	ldr	r5, [pc, #200]	; (1cffc <nrf_mem_register+0x22c>)
   1cf32:	eb09 0100 	add.w	r1, r9, r0
   1cf36:	eb09 030a 	add.w	r3, r9, sl
   1cf3a:	3101      	adds	r1, #1
   1cf3c:	3301      	adds	r3, #1
   1cf3e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1cf42:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   1cf46:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   1cf4a:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   1cf4e:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   1cf52:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   1cf56:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1cf5a:	f8db b010 	ldr.w	fp, [fp, #16]
   1cf5e:	6852      	ldr	r2, [r2, #4]
   1cf60:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   1cf64:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   1cf68:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   1cf6c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1cf70:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   1cf74:	f8de e010 	ldr.w	lr, [lr, #16]
   1cf78:	6849      	ldr	r1, [r1, #4]
   1cf7a:	f8dc c010 	ldr.w	ip, [ip, #16]
   1cf7e:	685b      	ldr	r3, [r3, #4]
   1cf80:	4294      	cmp	r4, r2
   1cf82:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   1cf86:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   1cf8a:	d92d      	bls.n	1cfe8 <nrf_mem_register+0x218>
   1cf8c:	429c      	cmp	r4, r3
   1cf8e:	d22d      	bcs.n	1cfec <nrf_mem_register+0x21c>
   1cf90:	428c      	cmp	r4, r1
   1cf92:	d924      	bls.n	1cfde <nrf_mem_register+0x20e>
   1cf94:	1c46      	adds	r6, r0, #1
   1cf96:	45b2      	cmp	sl, r6
   1cf98:	d2c1      	bcs.n	1cf1e <nrf_mem_register+0x14e>
   1cf9a:	2610      	movs	r6, #16
   1cf9c:	9d04      	ldr	r5, [sp, #16]
   1cf9e:	9a02      	ldr	r2, [sp, #8]
   1cfa0:	42b2      	cmp	r2, r6
   1cfa2:	d911      	bls.n	1cfc8 <nrf_mem_register+0x1f8>
   1cfa4:	9b00      	ldr	r3, [sp, #0]
   1cfa6:	443b      	add	r3, r7
   1cfa8:	441a      	add	r2, r3
   1cfaa:	4433      	add	r3, r6
   1cfac:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   1cfb0:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   1cfb4:	2208      	movs	r2, #8
   1cfb6:	4651      	mov	r1, sl
   1cfb8:	eb0a 0002 	add.w	r0, sl, r2
   1cfbc:	f1aa 0a08 	sub.w	sl, sl, #8
   1cfc0:	f00a fcc1 	bl	27946 <memcpy>
   1cfc4:	45d1      	cmp	r9, sl
   1cfc6:	d1f5      	bne.n	1cfb4 <nrf_mem_register+0x1e4>
   1cfc8:	9b00      	ldr	r3, [sp, #0]
   1cfca:	9903      	ldr	r1, [sp, #12]
   1cfcc:	443b      	add	r3, r7
   1cfce:	4433      	add	r3, r6
   1cfd0:	3301      	adds	r3, #1
   1cfd2:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1cfd6:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   1cfda:	6055      	str	r5, [r2, #4]
   1cfdc:	e776      	b.n	1cecc <nrf_mem_register+0xfc>
   1cfde:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   1cfe2:	4556      	cmp	r6, sl
   1cfe4:	d99b      	bls.n	1cf1e <nrf_mem_register+0x14e>
   1cfe6:	e7d8      	b.n	1cf9a <nrf_mem_register+0x1ca>
   1cfe8:	9d04      	ldr	r5, [sp, #16]
   1cfea:	e7d8      	b.n	1cf9e <nrf_mem_register+0x1ce>
   1cfec:	9d04      	ldr	r5, [sp, #16]
   1cfee:	f10a 0601 	add.w	r6, sl, #1
   1cff2:	e7d4      	b.n	1cf9e <nrf_mem_register+0x1ce>
   1cff4:	2002af34 	.word	0x2002af34
   1cff8:	20023544 	.word	0x20023544
   1cffc:	20023548 	.word	0x20023548
   1d000:	20023584 	.word	0x20023584

0001d004 <nrf_malloc>:
   1d004:	4b03      	ldr	r3, [pc, #12]	; (1d014 <nrf_malloc+0x10>)
   1d006:	781b      	ldrb	r3, [r3, #0]
   1d008:	b10b      	cbz	r3, 1d00e <nrf_malloc+0xa>
   1d00a:	f7ff bd8d 	b.w	1cb28 <mem_alloc.constprop.4>
   1d00e:	4618      	mov	r0, r3
   1d010:	4770      	bx	lr
   1d012:	bf00      	nop
   1d014:	2002af34 	.word	0x2002af34

0001d018 <nrf_free>:
   1d018:	4b04      	ldr	r3, [pc, #16]	; (1d02c <nrf_free+0x14>)
   1d01a:	781b      	ldrb	r3, [r3, #0]
   1d01c:	b123      	cbz	r3, 1d028 <nrf_free+0x10>
   1d01e:	b118      	cbz	r0, 1d028 <nrf_free+0x10>
   1d020:	4601      	mov	r1, r0
   1d022:	2000      	movs	r0, #0
   1d024:	f7ff bc30 	b.w	1c888 <mem_free>
   1d028:	4770      	bx	lr
   1d02a:	bf00      	nop
   1d02c:	2002af34 	.word	0x2002af34

0001d030 <nrf_shared_malloc>:
   1d030:	4b03      	ldr	r3, [pc, #12]	; (1d040 <nrf_shared_malloc+0x10>)
   1d032:	781b      	ldrb	r3, [r3, #0]
   1d034:	b10b      	cbz	r3, 1d03a <nrf_shared_malloc+0xa>
   1d036:	f7ff bc93 	b.w	1c960 <mem_alloc.constprop.5>
   1d03a:	4618      	mov	r0, r3
   1d03c:	4770      	bx	lr
   1d03e:	bf00      	nop
   1d040:	2002af34 	.word	0x2002af34

0001d044 <nrf_shared_free>:
   1d044:	4b04      	ldr	r3, [pc, #16]	; (1d058 <nrf_shared_free+0x14>)
   1d046:	781b      	ldrb	r3, [r3, #0]
   1d048:	b123      	cbz	r3, 1d054 <nrf_shared_free+0x10>
   1d04a:	b118      	cbz	r0, 1d054 <nrf_shared_free+0x10>
   1d04c:	4601      	mov	r1, r0
   1d04e:	2001      	movs	r0, #1
   1d050:	f7ff bc1a 	b.w	1c888 <mem_free>
   1d054:	4770      	bx	lr
   1d056:	bf00      	nop
   1d058:	2002af34 	.word	0x2002af34

0001d05c <rpc_dfu_event_handler>:
   1d05c:	b508      	push	{r3, lr}
   1d05e:	4a08      	ldr	r2, [pc, #32]	; (1d080 <rpc_dfu_event_handler+0x24>)
   1d060:	68c1      	ldr	r1, [r0, #12]
   1d062:	8812      	ldrh	r2, [r2, #0]
   1d064:	4603      	mov	r3, r0
   1d066:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   1d06a:	d005      	beq.n	1d078 <rpc_dfu_event_handler+0x1c>
   1d06c:	6800      	ldr	r0, [r0, #0]
   1d06e:	b110      	cbz	r0, 1d076 <rpc_dfu_event_handler+0x1a>
   1d070:	f7fd fa5c 	bl	1a52c <rpc_dfu_client_data_free>
   1d074:	2000      	movs	r0, #0
   1d076:	bd08      	pop	{r3, pc}
   1d078:	4a02      	ldr	r2, [pc, #8]	; (1d084 <rpc_dfu_event_handler+0x28>)
   1d07a:	2001      	movs	r0, #1
   1d07c:	6013      	str	r3, [r2, #0]
   1d07e:	bd08      	pop	{r3, pc}
   1d080:	200281b0 	.word	0x200281b0
   1d084:	200236a0 	.word	0x200236a0

0001d088 <mfu_interface_init>:
   1d088:	2300      	movs	r3, #0
   1d08a:	b510      	push	{r4, lr}
   1d08c:	4808      	ldr	r0, [pc, #32]	; (1d0b0 <mfu_interface_init+0x28>)
   1d08e:	4909      	ldr	r1, [pc, #36]	; (1d0b4 <mfu_interface_init+0x2c>)
   1d090:	4a09      	ldr	r2, [pc, #36]	; (1d0b8 <mfu_interface_init+0x30>)
   1d092:	4c0a      	ldr	r4, [pc, #40]	; (1d0bc <mfu_interface_init+0x34>)
   1d094:	8003      	strh	r3, [r0, #0]
   1d096:	600b      	str	r3, [r1, #0]
   1d098:	6013      	str	r3, [r2, #0]
   1d09a:	6023      	str	r3, [r4, #0]
   1d09c:	f7fd fa10 	bl	1a4c0 <rpc_dfu_client_init>
   1d0a0:	b910      	cbnz	r0, 1d0a8 <mfu_interface_init+0x20>
   1d0a2:	2301      	movs	r3, #1
   1d0a4:	6023      	str	r3, [r4, #0]
   1d0a6:	bd10      	pop	{r4, pc}
   1d0a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d0ac:	bd10      	pop	{r4, pc}
   1d0ae:	bf00      	nop
   1d0b0:	200281b0 	.word	0x200281b0
   1d0b4:	200236a0 	.word	0x200236a0
   1d0b8:	2002369c 	.word	0x2002369c
   1d0bc:	20023694 	.word	0x20023694

0001d0c0 <mfu_interface_open>:
   1d0c0:	b508      	push	{r3, lr}
   1d0c2:	4b07      	ldr	r3, [pc, #28]	; (1d0e0 <mfu_interface_open+0x20>)
   1d0c4:	681a      	ldr	r2, [r3, #0]
   1d0c6:	2a01      	cmp	r2, #1
   1d0c8:	d103      	bne.n	1d0d2 <mfu_interface_open+0x12>
   1d0ca:	2202      	movs	r2, #2
   1d0cc:	601a      	str	r2, [r3, #0]
   1d0ce:	4805      	ldr	r0, [pc, #20]	; (1d0e4 <mfu_interface_open+0x24>)
   1d0d0:	bd08      	pop	{r3, pc}
   1d0d2:	2001      	movs	r0, #1
   1d0d4:	f7f6 fddc 	bl	13c90 <bsd_os_errno_set>
   1d0d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d0dc:	bd08      	pop	{r3, pc}
   1d0de:	bf00      	nop
   1d0e0:	20023694 	.word	0x20023694
   1d0e4:	49765432 	.word	0x49765432

0001d0e8 <mfu_interface_close>:
   1d0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d0ea:	4c32      	ldr	r4, [pc, #200]	; (1d1b4 <mfu_interface_close+0xcc>)
   1d0ec:	b083      	sub	sp, #12
   1d0ee:	6823      	ldr	r3, [r4, #0]
   1d0f0:	1e9a      	subs	r2, r3, #2
   1d0f2:	2a01      	cmp	r2, #1
   1d0f4:	d857      	bhi.n	1d1a6 <mfu_interface_close+0xbe>
   1d0f6:	2b03      	cmp	r3, #3
   1d0f8:	d004      	beq.n	1d104 <mfu_interface_close+0x1c>
   1d0fa:	2301      	movs	r3, #1
   1d0fc:	2000      	movs	r0, #0
   1d0fe:	6023      	str	r3, [r4, #0]
   1d100:	b003      	add	sp, #12
   1d102:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d104:	2100      	movs	r1, #0
   1d106:	4668      	mov	r0, sp
   1d108:	f7fd f9e0 	bl	1a4cc <rpc_dfu_client_request_alloc>
   1d10c:	4603      	mov	r3, r0
   1d10e:	2800      	cmp	r0, #0
   1d110:	d13d      	bne.n	1d18e <mfu_interface_close+0xa6>
   1d112:	2104      	movs	r1, #4
   1d114:	4e28      	ldr	r6, [pc, #160]	; (1d1b8 <mfu_interface_close+0xd0>)
   1d116:	9800      	ldr	r0, [sp, #0]
   1d118:	8832      	ldrh	r2, [r6, #0]
   1d11a:	7201      	strb	r1, [r0, #8]
   1d11c:	3201      	adds	r2, #1
   1d11e:	b292      	uxth	r2, r2
   1d120:	0411      	lsls	r1, r2, #16
   1d122:	f041 0106 	orr.w	r1, r1, #6
   1d126:	4d25      	ldr	r5, [pc, #148]	; (1d1bc <mfu_interface_close+0xd4>)
   1d128:	60c1      	str	r1, [r0, #12]
   1d12a:	7103      	strb	r3, [r0, #4]
   1d12c:	7143      	strb	r3, [r0, #5]
   1d12e:	7183      	strb	r3, [r0, #6]
   1d130:	71c3      	strb	r3, [r0, #7]
   1d132:	7243      	strb	r3, [r0, #9]
   1d134:	7283      	strb	r3, [r0, #10]
   1d136:	72c3      	strb	r3, [r0, #11]
   1d138:	2106      	movs	r1, #6
   1d13a:	8032      	strh	r2, [r6, #0]
   1d13c:	602b      	str	r3, [r5, #0]
   1d13e:	f7fd f9d9 	bl	1a4f4 <rpc_dfu_client_request_send>
   1d142:	b9d8      	cbnz	r0, 1d17c <mfu_interface_close+0x94>
   1d144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d148:	ae02      	add	r6, sp, #8
   1d14a:	4627      	mov	r7, r4
   1d14c:	f846 3d04 	str.w	r3, [r6, #-4]!
   1d150:	e004      	b.n	1d15c <mfu_interface_close+0x74>
   1d152:	4631      	mov	r1, r6
   1d154:	4638      	mov	r0, r7
   1d156:	f7f6 fce5 	bl	13b24 <bsd_os_timedwait>
   1d15a:	b9f0      	cbnz	r0, 1d19a <mfu_interface_close+0xb2>
   1d15c:	6828      	ldr	r0, [r5, #0]
   1d15e:	2800      	cmp	r0, #0
   1d160:	d0f7      	beq.n	1d152 <mfu_interface_close+0x6a>
   1d162:	6905      	ldr	r5, [r0, #16]
   1d164:	f7fd f9da 	bl	1a51c <rpc_dfu_client_message_free>
   1d168:	2d00      	cmp	r5, #0
   1d16a:	d0c6      	beq.n	1d0fa <mfu_interface_close+0x12>
   1d16c:	4b14      	ldr	r3, [pc, #80]	; (1d1c0 <mfu_interface_close+0xd8>)
   1d16e:	2008      	movs	r0, #8
   1d170:	601d      	str	r5, [r3, #0]
   1d172:	f7f6 fd8d 	bl	13c90 <bsd_os_errno_set>
   1d176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d17a:	e7c1      	b.n	1d100 <mfu_interface_close+0x18>
   1d17c:	9800      	ldr	r0, [sp, #0]
   1d17e:	6803      	ldr	r3, [r0, #0]
   1d180:	b11b      	cbz	r3, 1d18a <mfu_interface_close+0xa2>
   1d182:	4618      	mov	r0, r3
   1d184:	f7fd f9d2 	bl	1a52c <rpc_dfu_client_data_free>
   1d188:	9800      	ldr	r0, [sp, #0]
   1d18a:	f7fd f9c7 	bl	1a51c <rpc_dfu_client_message_free>
   1d18e:	200c      	movs	r0, #12
   1d190:	f7f6 fd7e 	bl	13c90 <bsd_os_errno_set>
   1d194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d198:	e7b2      	b.n	1d100 <mfu_interface_close+0x18>
   1d19a:	203c      	movs	r0, #60	; 0x3c
   1d19c:	f7f6 fd78 	bl	13c90 <bsd_os_errno_set>
   1d1a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d1a4:	e7ac      	b.n	1d100 <mfu_interface_close+0x18>
   1d1a6:	2001      	movs	r0, #1
   1d1a8:	f7f6 fd72 	bl	13c90 <bsd_os_errno_set>
   1d1ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d1b0:	e7a6      	b.n	1d100 <mfu_interface_close+0x18>
   1d1b2:	bf00      	nop
   1d1b4:	20023694 	.word	0x20023694
   1d1b8:	200281b0 	.word	0x200281b0
   1d1bc:	200236a0 	.word	0x200236a0
   1d1c0:	20023698 	.word	0x20023698

0001d1c4 <mfu_interface_sendto>:
   1d1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d1c8:	4e64      	ldr	r6, [pc, #400]	; (1d35c <mfu_interface_sendto+0x198>)
   1d1ca:	460f      	mov	r7, r1
   1d1cc:	6831      	ldr	r1, [r6, #0]
   1d1ce:	4615      	mov	r5, r2
   1d1d0:	1e8a      	subs	r2, r1, #2
   1d1d2:	2a01      	cmp	r2, #1
   1d1d4:	b082      	sub	sp, #8
   1d1d6:	f200 80b4 	bhi.w	1d342 <mfu_interface_sendto+0x17e>
   1d1da:	2f00      	cmp	r7, #0
   1d1dc:	f000 80a5 	beq.w	1d32a <mfu_interface_sendto+0x166>
   1d1e0:	2d00      	cmp	r5, #0
   1d1e2:	f000 80a2 	beq.w	1d32a <mfu_interface_sendto+0x166>
   1d1e6:	2b00      	cmp	r3, #0
   1d1e8:	f040 80b1 	bne.w	1d34e <mfu_interface_sendto+0x18a>
   1d1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d1ee:	2b00      	cmp	r3, #0
   1d1f0:	f040 80a1 	bne.w	1d336 <mfu_interface_sendto+0x172>
   1d1f4:	2902      	cmp	r1, #2
   1d1f6:	d04f      	beq.n	1d298 <mfu_interface_sendto+0xd4>
   1d1f8:	46e8      	mov	r8, sp
   1d1fa:	4640      	mov	r0, r8
   1d1fc:	4629      	mov	r1, r5
   1d1fe:	f7fd f965 	bl	1a4cc <rpc_dfu_client_request_alloc>
   1d202:	4606      	mov	r6, r0
   1d204:	b140      	cbz	r0, 1d218 <mfu_interface_sendto+0x54>
   1d206:	200c      	movs	r0, #12
   1d208:	f7f6 fd42 	bl	13c90 <bsd_os_errno_set>
   1d20c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1d210:	4628      	mov	r0, r5
   1d212:	b002      	add	sp, #8
   1d214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d218:	9b00      	ldr	r3, [sp, #0]
   1d21a:	4639      	mov	r1, r7
   1d21c:	6818      	ldr	r0, [r3, #0]
   1d21e:	462a      	mov	r2, r5
   1d220:	f00a fb91 	bl	27946 <memcpy>
   1d224:	2104      	movs	r1, #4
   1d226:	4c4e      	ldr	r4, [pc, #312]	; (1d360 <mfu_interface_sendto+0x19c>)
   1d228:	9800      	ldr	r0, [sp, #0]
   1d22a:	8823      	ldrh	r3, [r4, #0]
   1d22c:	6045      	str	r5, [r0, #4]
   1d22e:	3301      	adds	r3, #1
   1d230:	b29b      	uxth	r3, r3
   1d232:	041a      	lsls	r2, r3, #16
   1d234:	8023      	strh	r3, [r4, #0]
   1d236:	430a      	orrs	r2, r1
   1d238:	4c4a      	ldr	r4, [pc, #296]	; (1d364 <mfu_interface_sendto+0x1a0>)
   1d23a:	60c2      	str	r2, [r0, #12]
   1d23c:	7246      	strb	r6, [r0, #9]
   1d23e:	7286      	strb	r6, [r0, #10]
   1d240:	72c6      	strb	r6, [r0, #11]
   1d242:	7201      	strb	r1, [r0, #8]
   1d244:	6026      	str	r6, [r4, #0]
   1d246:	f7fd f955 	bl	1a4f4 <rpc_dfu_client_request_send>
   1d24a:	2800      	cmp	r0, #0
   1d24c:	d163      	bne.n	1d316 <mfu_interface_sendto+0x152>
   1d24e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d252:	ae02      	add	r6, sp, #8
   1d254:	4f41      	ldr	r7, [pc, #260]	; (1d35c <mfu_interface_sendto+0x198>)
   1d256:	f846 3d04 	str.w	r3, [r6, #-4]!
   1d25a:	e004      	b.n	1d266 <mfu_interface_sendto+0xa2>
   1d25c:	4631      	mov	r1, r6
   1d25e:	4638      	mov	r0, r7
   1d260:	f7f6 fc60 	bl	13b24 <bsd_os_timedwait>
   1d264:	b978      	cbnz	r0, 1d286 <mfu_interface_sendto+0xc2>
   1d266:	6820      	ldr	r0, [r4, #0]
   1d268:	2800      	cmp	r0, #0
   1d26a:	d0f7      	beq.n	1d25c <mfu_interface_sendto+0x98>
   1d26c:	6904      	ldr	r4, [r0, #16]
   1d26e:	f7fd f955 	bl	1a51c <rpc_dfu_client_message_free>
   1d272:	2c00      	cmp	r4, #0
   1d274:	d0cc      	beq.n	1d210 <mfu_interface_sendto+0x4c>
   1d276:	4b3c      	ldr	r3, [pc, #240]	; (1d368 <mfu_interface_sendto+0x1a4>)
   1d278:	2008      	movs	r0, #8
   1d27a:	601c      	str	r4, [r3, #0]
   1d27c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1d280:	f7f6 fd06 	bl	13c90 <bsd_os_errno_set>
   1d284:	e7c4      	b.n	1d210 <mfu_interface_sendto+0x4c>
   1d286:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1d28a:	203c      	movs	r0, #60	; 0x3c
   1d28c:	f7f6 fd00 	bl	13c90 <bsd_os_errno_set>
   1d290:	4628      	mov	r0, r5
   1d292:	b002      	add	sp, #8
   1d294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d298:	46e8      	mov	r8, sp
   1d29a:	4619      	mov	r1, r3
   1d29c:	4640      	mov	r0, r8
   1d29e:	f7fd f915 	bl	1a4cc <rpc_dfu_client_request_alloc>
   1d2a2:	4602      	mov	r2, r0
   1d2a4:	2800      	cmp	r0, #0
   1d2a6:	d1ae      	bne.n	1d206 <mfu_interface_sendto+0x42>
   1d2a8:	f04f 0c08 	mov.w	ip, #8
   1d2ac:	492c      	ldr	r1, [pc, #176]	; (1d360 <mfu_interface_sendto+0x19c>)
   1d2ae:	482f      	ldr	r0, [pc, #188]	; (1d36c <mfu_interface_sendto+0x1a8>)
   1d2b0:	880b      	ldrh	r3, [r1, #0]
   1d2b2:	6804      	ldr	r4, [r0, #0]
   1d2b4:	3301      	adds	r3, #1
   1d2b6:	9800      	ldr	r0, [sp, #0]
   1d2b8:	b29b      	uxth	r3, r3
   1d2ba:	800b      	strh	r3, [r1, #0]
   1d2bc:	041b      	lsls	r3, r3, #16
   1d2be:	f043 0303 	orr.w	r3, r3, #3
   1d2c2:	6104      	str	r4, [r0, #16]
   1d2c4:	4c27      	ldr	r4, [pc, #156]	; (1d364 <mfu_interface_sendto+0x1a0>)
   1d2c6:	60c3      	str	r3, [r0, #12]
   1d2c8:	7102      	strb	r2, [r0, #4]
   1d2ca:	7142      	strb	r2, [r0, #5]
   1d2cc:	7182      	strb	r2, [r0, #6]
   1d2ce:	71c2      	strb	r2, [r0, #7]
   1d2d0:	7242      	strb	r2, [r0, #9]
   1d2d2:	7282      	strb	r2, [r0, #10]
   1d2d4:	72c2      	strb	r2, [r0, #11]
   1d2d6:	f880 c008 	strb.w	ip, [r0, #8]
   1d2da:	2103      	movs	r1, #3
   1d2dc:	6022      	str	r2, [r4, #0]
   1d2de:	f7fd f909 	bl	1a4f4 <rpc_dfu_client_request_send>
   1d2e2:	b9c0      	cbnz	r0, 1d316 <mfu_interface_sendto+0x152>
   1d2e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d2e8:	f10d 0908 	add.w	r9, sp, #8
   1d2ec:	f849 3d04 	str.w	r3, [r9, #-4]!
   1d2f0:	46b2      	mov	sl, r6
   1d2f2:	e005      	b.n	1d300 <mfu_interface_sendto+0x13c>
   1d2f4:	4649      	mov	r1, r9
   1d2f6:	4650      	mov	r0, sl
   1d2f8:	f7f6 fc14 	bl	13b24 <bsd_os_timedwait>
   1d2fc:	2800      	cmp	r0, #0
   1d2fe:	d1c2      	bne.n	1d286 <mfu_interface_sendto+0xc2>
   1d300:	6820      	ldr	r0, [r4, #0]
   1d302:	2800      	cmp	r0, #0
   1d304:	d0f6      	beq.n	1d2f4 <mfu_interface_sendto+0x130>
   1d306:	6904      	ldr	r4, [r0, #16]
   1d308:	f7fd f908 	bl	1a51c <rpc_dfu_client_message_free>
   1d30c:	2c00      	cmp	r4, #0
   1d30e:	d1b2      	bne.n	1d276 <mfu_interface_sendto+0xb2>
   1d310:	2303      	movs	r3, #3
   1d312:	6033      	str	r3, [r6, #0]
   1d314:	e771      	b.n	1d1fa <mfu_interface_sendto+0x36>
   1d316:	9800      	ldr	r0, [sp, #0]
   1d318:	6803      	ldr	r3, [r0, #0]
   1d31a:	b11b      	cbz	r3, 1d324 <mfu_interface_sendto+0x160>
   1d31c:	4618      	mov	r0, r3
   1d31e:	f7fd f905 	bl	1a52c <rpc_dfu_client_data_free>
   1d322:	9800      	ldr	r0, [sp, #0]
   1d324:	f7fd f8fa 	bl	1a51c <rpc_dfu_client_message_free>
   1d328:	e76d      	b.n	1d206 <mfu_interface_sendto+0x42>
   1d32a:	2016      	movs	r0, #22
   1d32c:	f7f6 fcb0 	bl	13c90 <bsd_os_errno_set>
   1d330:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1d334:	e76c      	b.n	1d210 <mfu_interface_sendto+0x4c>
   1d336:	2038      	movs	r0, #56	; 0x38
   1d338:	f7f6 fcaa 	bl	13c90 <bsd_os_errno_set>
   1d33c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1d340:	e766      	b.n	1d210 <mfu_interface_sendto+0x4c>
   1d342:	2001      	movs	r0, #1
   1d344:	f7f6 fca4 	bl	13c90 <bsd_os_errno_set>
   1d348:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1d34c:	e760      	b.n	1d210 <mfu_interface_sendto+0x4c>
   1d34e:	202d      	movs	r0, #45	; 0x2d
   1d350:	f7f6 fc9e 	bl	13c90 <bsd_os_errno_set>
   1d354:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1d358:	e75a      	b.n	1d210 <mfu_interface_sendto+0x4c>
   1d35a:	bf00      	nop
   1d35c:	20023694 	.word	0x20023694
   1d360:	200281b0 	.word	0x200281b0
   1d364:	200236a0 	.word	0x200236a0
   1d368:	20023698 	.word	0x20023698
   1d36c:	2002369c 	.word	0x2002369c

0001d370 <mfu_interface_setopt>:
   1d370:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d372:	4846      	ldr	r0, [pc, #280]	; (1d48c <mfu_interface_setopt+0x11c>)
   1d374:	b083      	sub	sp, #12
   1d376:	6800      	ldr	r0, [r0, #0]
   1d378:	3802      	subs	r0, #2
   1d37a:	2801      	cmp	r0, #1
   1d37c:	d877      	bhi.n	1d46e <mfu_interface_setopt+0xfe>
   1d37e:	f240 2003 	movw	r0, #515	; 0x203
   1d382:	4281      	cmp	r1, r0
   1d384:	d16d      	bne.n	1d462 <mfu_interface_setopt+0xf2>
   1d386:	3a04      	subs	r2, #4
   1d388:	2a03      	cmp	r2, #3
   1d38a:	d85c      	bhi.n	1d446 <mfu_interface_setopt+0xd6>
   1d38c:	e8df f002 	tbb	[pc, r2]
   1d390:	514e024b 	.word	0x514e024b
   1d394:	2407      	movs	r4, #7
   1d396:	4625      	mov	r5, r4
   1d398:	2100      	movs	r1, #0
   1d39a:	4668      	mov	r0, sp
   1d39c:	f7fd f896 	bl	1a4cc <rpc_dfu_client_request_alloc>
   1d3a0:	4603      	mov	r3, r0
   1d3a2:	2800      	cmp	r0, #0
   1d3a4:	d138      	bne.n	1d418 <mfu_interface_setopt+0xa8>
   1d3a6:	2704      	movs	r7, #4
   1d3a8:	4e39      	ldr	r6, [pc, #228]	; (1d490 <mfu_interface_setopt+0x120>)
   1d3aa:	9800      	ldr	r0, [sp, #0]
   1d3ac:	8832      	ldrh	r2, [r6, #0]
   1d3ae:	4629      	mov	r1, r5
   1d3b0:	3201      	adds	r2, #1
   1d3b2:	b292      	uxth	r2, r2
   1d3b4:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   1d3b8:	4c36      	ldr	r4, [pc, #216]	; (1d494 <mfu_interface_setopt+0x124>)
   1d3ba:	60c5      	str	r5, [r0, #12]
   1d3bc:	7103      	strb	r3, [r0, #4]
   1d3be:	7143      	strb	r3, [r0, #5]
   1d3c0:	7183      	strb	r3, [r0, #6]
   1d3c2:	71c3      	strb	r3, [r0, #7]
   1d3c4:	7243      	strb	r3, [r0, #9]
   1d3c6:	7283      	strb	r3, [r0, #10]
   1d3c8:	72c3      	strb	r3, [r0, #11]
   1d3ca:	7207      	strb	r7, [r0, #8]
   1d3cc:	8032      	strh	r2, [r6, #0]
   1d3ce:	6023      	str	r3, [r4, #0]
   1d3d0:	f7fd f890 	bl	1a4f4 <rpc_dfu_client_request_send>
   1d3d4:	b9b8      	cbnz	r0, 1d406 <mfu_interface_setopt+0x96>
   1d3d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d3da:	ad02      	add	r5, sp, #8
   1d3dc:	4e2b      	ldr	r6, [pc, #172]	; (1d48c <mfu_interface_setopt+0x11c>)
   1d3de:	f845 3d04 	str.w	r3, [r5, #-4]!
   1d3e2:	e005      	b.n	1d3f0 <mfu_interface_setopt+0x80>
   1d3e4:	4629      	mov	r1, r5
   1d3e6:	4630      	mov	r0, r6
   1d3e8:	f7f6 fb9c 	bl	13b24 <bsd_os_timedwait>
   1d3ec:	2800      	cmp	r0, #0
   1d3ee:	d131      	bne.n	1d454 <mfu_interface_setopt+0xe4>
   1d3f0:	6820      	ldr	r0, [r4, #0]
   1d3f2:	2800      	cmp	r0, #0
   1d3f4:	d0f6      	beq.n	1d3e4 <mfu_interface_setopt+0x74>
   1d3f6:	6904      	ldr	r4, [r0, #16]
   1d3f8:	f7fd f890 	bl	1a51c <rpc_dfu_client_message_free>
   1d3fc:	2c00      	cmp	r4, #0
   1d3fe:	d13c      	bne.n	1d47a <mfu_interface_setopt+0x10a>
   1d400:	4620      	mov	r0, r4
   1d402:	b003      	add	sp, #12
   1d404:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d406:	9800      	ldr	r0, [sp, #0]
   1d408:	6803      	ldr	r3, [r0, #0]
   1d40a:	b11b      	cbz	r3, 1d414 <mfu_interface_setopt+0xa4>
   1d40c:	4618      	mov	r0, r3
   1d40e:	f7fd f88d 	bl	1a52c <rpc_dfu_client_data_free>
   1d412:	9800      	ldr	r0, [sp, #0]
   1d414:	f7fd f882 	bl	1a51c <rpc_dfu_client_message_free>
   1d418:	200c      	movs	r0, #12
   1d41a:	f7f6 fc39 	bl	13c90 <bsd_os_errno_set>
   1d41e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d422:	b003      	add	sp, #12
   1d424:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d426:	2405      	movs	r4, #5
   1d428:	4625      	mov	r5, r4
   1d42a:	e7b5      	b.n	1d398 <mfu_interface_setopt+0x28>
   1d42c:	2408      	movs	r4, #8
   1d42e:	4625      	mov	r5, r4
   1d430:	e7b2      	b.n	1d398 <mfu_interface_setopt+0x28>
   1d432:	b1b3      	cbz	r3, 1d462 <mfu_interface_setopt+0xf2>
   1d434:	9a08      	ldr	r2, [sp, #32]
   1d436:	2a04      	cmp	r2, #4
   1d438:	d113      	bne.n	1d462 <mfu_interface_setopt+0xf2>
   1d43a:	2000      	movs	r0, #0
   1d43c:	681a      	ldr	r2, [r3, #0]
   1d43e:	4b16      	ldr	r3, [pc, #88]	; (1d498 <mfu_interface_setopt+0x128>)
   1d440:	601a      	str	r2, [r3, #0]
   1d442:	b003      	add	sp, #12
   1d444:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d446:	202a      	movs	r0, #42	; 0x2a
   1d448:	f7f6 fc22 	bl	13c90 <bsd_os_errno_set>
   1d44c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d450:	b003      	add	sp, #12
   1d452:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d454:	203c      	movs	r0, #60	; 0x3c
   1d456:	f7f6 fc1b 	bl	13c90 <bsd_os_errno_set>
   1d45a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d45e:	b003      	add	sp, #12
   1d460:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d462:	2016      	movs	r0, #22
   1d464:	f7f6 fc14 	bl	13c90 <bsd_os_errno_set>
   1d468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d46c:	e7c9      	b.n	1d402 <mfu_interface_setopt+0x92>
   1d46e:	2001      	movs	r0, #1
   1d470:	f7f6 fc0e 	bl	13c90 <bsd_os_errno_set>
   1d474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d478:	e7c3      	b.n	1d402 <mfu_interface_setopt+0x92>
   1d47a:	4b08      	ldr	r3, [pc, #32]	; (1d49c <mfu_interface_setopt+0x12c>)
   1d47c:	2008      	movs	r0, #8
   1d47e:	601c      	str	r4, [r3, #0]
   1d480:	f7f6 fc06 	bl	13c90 <bsd_os_errno_set>
   1d484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d488:	e7bb      	b.n	1d402 <mfu_interface_setopt+0x92>
   1d48a:	bf00      	nop
   1d48c:	20023694 	.word	0x20023694
   1d490:	200281b0 	.word	0x200281b0
   1d494:	200236a0 	.word	0x200236a0
   1d498:	2002369c 	.word	0x2002369c
   1d49c:	20023698 	.word	0x20023698

0001d4a0 <mfu_interface_getopt>:
   1d4a0:	f240 2003 	movw	r0, #515	; 0x203
   1d4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d4a8:	4281      	cmp	r1, r0
   1d4aa:	b082      	sub	sp, #8
   1d4ac:	9e08      	ldr	r6, [sp, #32]
   1d4ae:	f040 80ae 	bne.w	1d60e <mfu_interface_getopt+0x16e>
   1d4b2:	461d      	mov	r5, r3
   1d4b4:	2b00      	cmp	r3, #0
   1d4b6:	f000 80aa 	beq.w	1d60e <mfu_interface_getopt+0x16e>
   1d4ba:	2e00      	cmp	r6, #0
   1d4bc:	f000 80a7 	beq.w	1d60e <mfu_interface_getopt+0x16e>
   1d4c0:	4b5e      	ldr	r3, [pc, #376]	; (1d63c <mfu_interface_getopt+0x19c>)
   1d4c2:	681b      	ldr	r3, [r3, #0]
   1d4c4:	3b02      	subs	r3, #2
   1d4c6:	2b01      	cmp	r3, #1
   1d4c8:	f200 80a7 	bhi.w	1d61a <mfu_interface_getopt+0x17a>
   1d4cc:	3a01      	subs	r2, #1
   1d4ce:	2a13      	cmp	r2, #19
   1d4d0:	d879      	bhi.n	1d5c6 <mfu_interface_getopt+0x126>
   1d4d2:	e8df f002 	tbb	[pc, r2]
   1d4d6:	5f17      	.short	0x5f17
   1d4d8:	78787878 	.word	0x78787878
   1d4dc:	78787872 	.word	0x78787872
   1d4e0:	78787878 	.word	0x78787878
   1d4e4:	78787878 	.word	0x78787878
   1d4e8:	0a78      	.short	0x0a78
   1d4ea:	6833      	ldr	r3, [r6, #0]
   1d4ec:	2b04      	cmp	r3, #4
   1d4ee:	f040 808e 	bne.w	1d60e <mfu_interface_getopt+0x16e>
   1d4f2:	2200      	movs	r2, #0
   1d4f4:	4610      	mov	r0, r2
   1d4f6:	4b52      	ldr	r3, [pc, #328]	; (1d640 <mfu_interface_getopt+0x1a0>)
   1d4f8:	6819      	ldr	r1, [r3, #0]
   1d4fa:	601a      	str	r2, [r3, #0]
   1d4fc:	6029      	str	r1, [r5, #0]
   1d4fe:	b002      	add	sp, #8
   1d500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d504:	6833      	ldr	r3, [r6, #0]
   1d506:	2b24      	cmp	r3, #36	; 0x24
   1d508:	f040 8081 	bne.w	1d60e <mfu_interface_getopt+0x16e>
   1d50c:	2401      	movs	r4, #1
   1d50e:	46a0      	mov	r8, r4
   1d510:	2100      	movs	r1, #0
   1d512:	4668      	mov	r0, sp
   1d514:	f7fc ffda 	bl	1a4cc <rpc_dfu_client_request_alloc>
   1d518:	2800      	cmp	r0, #0
   1d51a:	d146      	bne.n	1d5aa <mfu_interface_getopt+0x10a>
   1d51c:	4949      	ldr	r1, [pc, #292]	; (1d644 <mfu_interface_getopt+0x1a4>)
   1d51e:	9b00      	ldr	r3, [sp, #0]
   1d520:	880a      	ldrh	r2, [r1, #0]
   1d522:	f1b8 0f03 	cmp.w	r8, #3
   1d526:	f102 0201 	add.w	r2, r2, #1
   1d52a:	b292      	uxth	r2, r2
   1d52c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   1d530:	7118      	strb	r0, [r3, #4]
   1d532:	800a      	strh	r2, [r1, #0]
   1d534:	60dc      	str	r4, [r3, #12]
   1d536:	7158      	strb	r0, [r3, #5]
   1d538:	7198      	strb	r0, [r3, #6]
   1d53a:	71d8      	strb	r0, [r3, #7]
   1d53c:	d04b      	beq.n	1d5d6 <mfu_interface_getopt+0x136>
   1d53e:	2104      	movs	r1, #4
   1d540:	2200      	movs	r2, #0
   1d542:	4f41      	ldr	r7, [pc, #260]	; (1d648 <mfu_interface_getopt+0x1a8>)
   1d544:	6099      	str	r1, [r3, #8]
   1d546:	4618      	mov	r0, r3
   1d548:	4641      	mov	r1, r8
   1d54a:	603a      	str	r2, [r7, #0]
   1d54c:	f7fc ffd2 	bl	1a4f4 <rpc_dfu_client_request_send>
   1d550:	2800      	cmp	r0, #0
   1d552:	d14d      	bne.n	1d5f0 <mfu_interface_getopt+0x150>
   1d554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d558:	ac02      	add	r4, sp, #8
   1d55a:	f844 3d04 	str.w	r3, [r4, #-4]!
   1d55e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1d63c <mfu_interface_getopt+0x19c>
   1d562:	e005      	b.n	1d570 <mfu_interface_getopt+0xd0>
   1d564:	4621      	mov	r1, r4
   1d566:	4640      	mov	r0, r8
   1d568:	f7f6 fadc 	bl	13b24 <bsd_os_timedwait>
   1d56c:	2800      	cmp	r0, #0
   1d56e:	d137      	bne.n	1d5e0 <mfu_interface_getopt+0x140>
   1d570:	6839      	ldr	r1, [r7, #0]
   1d572:	2900      	cmp	r1, #0
   1d574:	d0f6      	beq.n	1d564 <mfu_interface_getopt+0xc4>
   1d576:	690c      	ldr	r4, [r1, #16]
   1d578:	2c00      	cmp	r4, #0
   1d57a:	d154      	bne.n	1d626 <mfu_interface_getopt+0x186>
   1d57c:	6832      	ldr	r2, [r6, #0]
   1d57e:	3114      	adds	r1, #20
   1d580:	4628      	mov	r0, r5
   1d582:	f00a f9e0 	bl	27946 <memcpy>
   1d586:	6838      	ldr	r0, [r7, #0]
   1d588:	f7fc ffc8 	bl	1a51c <rpc_dfu_client_message_free>
   1d58c:	4620      	mov	r0, r4
   1d58e:	b002      	add	sp, #8
   1d590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d594:	6833      	ldr	r3, [r6, #0]
   1d596:	2b04      	cmp	r3, #4
   1d598:	d139      	bne.n	1d60e <mfu_interface_getopt+0x16e>
   1d59a:	2402      	movs	r4, #2
   1d59c:	2100      	movs	r1, #0
   1d59e:	4668      	mov	r0, sp
   1d5a0:	46a0      	mov	r8, r4
   1d5a2:	f7fc ff93 	bl	1a4cc <rpc_dfu_client_request_alloc>
   1d5a6:	2800      	cmp	r0, #0
   1d5a8:	d0b8      	beq.n	1d51c <mfu_interface_getopt+0x7c>
   1d5aa:	200c      	movs	r0, #12
   1d5ac:	f7f6 fb70 	bl	13c90 <bsd_os_errno_set>
   1d5b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d5b4:	b002      	add	sp, #8
   1d5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d5ba:	6833      	ldr	r3, [r6, #0]
   1d5bc:	2b04      	cmp	r3, #4
   1d5be:	d126      	bne.n	1d60e <mfu_interface_getopt+0x16e>
   1d5c0:	2409      	movs	r4, #9
   1d5c2:	46a0      	mov	r8, r4
   1d5c4:	e7a4      	b.n	1d510 <mfu_interface_getopt+0x70>
   1d5c6:	202a      	movs	r0, #42	; 0x2a
   1d5c8:	f7f6 fb62 	bl	13c90 <bsd_os_errno_set>
   1d5cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d5d0:	b002      	add	sp, #8
   1d5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d5d6:	4a1d      	ldr	r2, [pc, #116]	; (1d64c <mfu_interface_getopt+0x1ac>)
   1d5d8:	2108      	movs	r1, #8
   1d5da:	6812      	ldr	r2, [r2, #0]
   1d5dc:	611a      	str	r2, [r3, #16]
   1d5de:	e7af      	b.n	1d540 <mfu_interface_getopt+0xa0>
   1d5e0:	203c      	movs	r0, #60	; 0x3c
   1d5e2:	f7f6 fb55 	bl	13c90 <bsd_os_errno_set>
   1d5e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d5ea:	b002      	add	sp, #8
   1d5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d5f0:	9800      	ldr	r0, [sp, #0]
   1d5f2:	6803      	ldr	r3, [r0, #0]
   1d5f4:	b11b      	cbz	r3, 1d5fe <mfu_interface_getopt+0x15e>
   1d5f6:	4618      	mov	r0, r3
   1d5f8:	f7fc ff98 	bl	1a52c <rpc_dfu_client_data_free>
   1d5fc:	9800      	ldr	r0, [sp, #0]
   1d5fe:	f7fc ff8d 	bl	1a51c <rpc_dfu_client_message_free>
   1d602:	200c      	movs	r0, #12
   1d604:	f7f6 fb44 	bl	13c90 <bsd_os_errno_set>
   1d608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d60c:	e7d2      	b.n	1d5b4 <mfu_interface_getopt+0x114>
   1d60e:	2016      	movs	r0, #22
   1d610:	f7f6 fb3e 	bl	13c90 <bsd_os_errno_set>
   1d614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d618:	e771      	b.n	1d4fe <mfu_interface_getopt+0x5e>
   1d61a:	2001      	movs	r0, #1
   1d61c:	f7f6 fb38 	bl	13c90 <bsd_os_errno_set>
   1d620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d624:	e76b      	b.n	1d4fe <mfu_interface_getopt+0x5e>
   1d626:	4b06      	ldr	r3, [pc, #24]	; (1d640 <mfu_interface_getopt+0x1a0>)
   1d628:	2008      	movs	r0, #8
   1d62a:	601c      	str	r4, [r3, #0]
   1d62c:	f7f6 fb30 	bl	13c90 <bsd_os_errno_set>
   1d630:	6838      	ldr	r0, [r7, #0]
   1d632:	f7fc ff73 	bl	1a51c <rpc_dfu_client_message_free>
   1d636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d63a:	e760      	b.n	1d4fe <mfu_interface_getopt+0x5e>
   1d63c:	20023694 	.word	0x20023694
   1d640:	20023698 	.word	0x20023698
   1d644:	200281b0 	.word	0x200281b0
   1d648:	200236a0 	.word	0x200236a0
   1d64c:	2002369c 	.word	0x2002369c

0001d650 <interface_init>:
   1d650:	b508      	push	{r3, lr}
   1d652:	f44f 72b4 	mov.w	r2, #360	; 0x168
   1d656:	2100      	movs	r1, #0
   1d658:	4802      	ldr	r0, [pc, #8]	; (1d664 <interface_init+0x14>)
   1d65a:	f00a f9ae 	bl	279ba <memset>
   1d65e:	2000      	movs	r0, #0
   1d660:	bd08      	pop	{r3, pc}
   1d662:	bf00      	nop
   1d664:	2002af4c 	.word	0x2002af4c

0001d668 <interface_socket_allocate>:
   1d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d66a:	4b30      	ldr	r3, [pc, #192]	; (1d72c <interface_socket_allocate+0xc4>)
   1d66c:	4606      	mov	r6, r0
   1d66e:	681d      	ldr	r5, [r3, #0]
   1d670:	4608      	mov	r0, r1
   1d672:	b31d      	cbz	r5, 1d6bc <interface_socket_allocate+0x54>
   1d674:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1d676:	2c00      	cmp	r4, #0
   1d678:	d04a      	beq.n	1d710 <interface_socket_allocate+0xa8>
   1d67a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   1d67c:	2c00      	cmp	r4, #0
   1d67e:	d049      	beq.n	1d714 <interface_socket_allocate+0xac>
   1d680:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   1d682:	2c00      	cmp	r4, #0
   1d684:	d048      	beq.n	1d718 <interface_socket_allocate+0xb0>
   1d686:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   1d68a:	2900      	cmp	r1, #0
   1d68c:	d046      	beq.n	1d71c <interface_socket_allocate+0xb4>
   1d68e:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   1d692:	b191      	cbz	r1, 1d6ba <interface_socket_allocate+0x52>
   1d694:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   1d698:	2900      	cmp	r1, #0
   1d69a:	d043      	beq.n	1d724 <interface_socket_allocate+0xbc>
   1d69c:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   1d6a0:	2900      	cmp	r1, #0
   1d6a2:	d041      	beq.n	1d728 <interface_socket_allocate+0xc0>
   1d6a4:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   1d6a8:	2900      	cmp	r1, #0
   1d6aa:	d039      	beq.n	1d720 <interface_socket_allocate+0xb8>
   1d6ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1d6b0:	2069      	movs	r0, #105	; 0x69
   1d6b2:	f7f6 faed 	bl	13c90 <bsd_os_errno_set>
   1d6b6:	4628      	mov	r0, r5
   1d6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d6ba:	2505      	movs	r5, #5
   1d6bc:	f04f 0c01 	mov.w	ip, #1
   1d6c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1d6c4:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   1d6c8:	00e4      	lsls	r4, r4, #3
   1d6ca:	f843 c004 	str.w	ip, [r3, r4]
   1d6ce:	441c      	add	r4, r3
   1d6d0:	4611      	mov	r1, r2
   1d6d2:	61a7      	str	r7, [r4, #24]
   1d6d4:	4622      	mov	r2, r4
   1d6d6:	f7fe ff9b 	bl	1c610 <packet_handler_create>
   1d6da:	4603      	mov	r3, r0
   1d6dc:	61e0      	str	r0, [r4, #28]
   1d6de:	b158      	cbz	r0, 1d6f8 <interface_socket_allocate+0x90>
   1d6e0:	681b      	ldr	r3, [r3, #0]
   1d6e2:	681b      	ldr	r3, [r3, #0]
   1d6e4:	4798      	blx	r3
   1d6e6:	b910      	cbnz	r0, 1d6ee <interface_socket_allocate+0x86>
   1d6e8:	6034      	str	r4, [r6, #0]
   1d6ea:	4628      	mov	r0, r5
   1d6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d6ee:	69e0      	ldr	r0, [r4, #28]
   1d6f0:	f7fe ffae 	bl	1c650 <packet_handler_delete>
   1d6f4:	2300      	movs	r3, #0
   1d6f6:	61e3      	str	r3, [r4, #28]
   1d6f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1d6fc:	2228      	movs	r2, #40	; 0x28
   1d6fe:	2100      	movs	r1, #0
   1d700:	4620      	mov	r0, r4
   1d702:	f00a f95a 	bl	279ba <memset>
   1d706:	200c      	movs	r0, #12
   1d708:	f7f6 fac2 	bl	13c90 <bsd_os_errno_set>
   1d70c:	4628      	mov	r0, r5
   1d70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d710:	2501      	movs	r5, #1
   1d712:	e7d3      	b.n	1d6bc <interface_socket_allocate+0x54>
   1d714:	2502      	movs	r5, #2
   1d716:	e7d1      	b.n	1d6bc <interface_socket_allocate+0x54>
   1d718:	2503      	movs	r5, #3
   1d71a:	e7cf      	b.n	1d6bc <interface_socket_allocate+0x54>
   1d71c:	2504      	movs	r5, #4
   1d71e:	e7cd      	b.n	1d6bc <interface_socket_allocate+0x54>
   1d720:	2508      	movs	r5, #8
   1d722:	e7cb      	b.n	1d6bc <interface_socket_allocate+0x54>
   1d724:	2506      	movs	r5, #6
   1d726:	e7c9      	b.n	1d6bc <interface_socket_allocate+0x54>
   1d728:	2507      	movs	r5, #7
   1d72a:	e7c7      	b.n	1d6bc <interface_socket_allocate+0x54>
   1d72c:	2002af4c 	.word	0x2002af4c

0001d730 <interface_socket_free>:
   1d730:	2808      	cmp	r0, #8
   1d732:	d900      	bls.n	1d736 <interface_socket_free+0x6>
   1d734:	4770      	bx	lr
   1d736:	b510      	push	{r4, lr}
   1d738:	4c07      	ldr	r4, [pc, #28]	; (1d758 <interface_socket_free+0x28>)
   1d73a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1d73e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   1d742:	69e0      	ldr	r0, [r4, #28]
   1d744:	b108      	cbz	r0, 1d74a <interface_socket_free+0x1a>
   1d746:	f7fe ff83 	bl	1c650 <packet_handler_delete>
   1d74a:	4620      	mov	r0, r4
   1d74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d750:	2228      	movs	r2, #40	; 0x28
   1d752:	2100      	movs	r1, #0
   1d754:	f00a b931 	b.w	279ba <memset>
   1d758:	2002af4c 	.word	0x2002af4c

0001d75c <interface_socket_packet_handler_update>:
   1d75c:	2808      	cmp	r0, #8
   1d75e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d762:	d81e      	bhi.n	1d7a2 <interface_socket_packet_handler_update+0x46>
   1d764:	ea4f 0880 	mov.w	r8, r0, lsl #2
   1d768:	4e17      	ldr	r6, [pc, #92]	; (1d7c8 <interface_socket_packet_handler_update+0x6c>)
   1d76a:	eb08 0300 	add.w	r3, r8, r0
   1d76e:	00db      	lsls	r3, r3, #3
   1d770:	58f4      	ldr	r4, [r6, r3]
   1d772:	18f5      	adds	r5, r6, r3
   1d774:	b1ac      	cbz	r4, 1d7a2 <interface_socket_packet_handler_update+0x46>
   1d776:	460b      	mov	r3, r1
   1d778:	4604      	mov	r4, r0
   1d77a:	4611      	mov	r1, r2
   1d77c:	4618      	mov	r0, r3
   1d77e:	462a      	mov	r2, r5
   1d780:	f8d5 901c 	ldr.w	r9, [r5, #28]
   1d784:	f7fe ff44 	bl	1c610 <packet_handler_create>
   1d788:	61e8      	str	r0, [r5, #28]
   1d78a:	b1d0      	cbz	r0, 1d7c2 <interface_socket_packet_handler_update+0x66>
   1d78c:	6803      	ldr	r3, [r0, #0]
   1d78e:	681b      	ldr	r3, [r3, #0]
   1d790:	4798      	blx	r3
   1d792:	4607      	mov	r7, r0
   1d794:	b948      	cbnz	r0, 1d7aa <interface_socket_packet_handler_update+0x4e>
   1d796:	4648      	mov	r0, r9
   1d798:	f7fe ff5a 	bl	1c650 <packet_handler_delete>
   1d79c:	4638      	mov	r0, r7
   1d79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d7a2:	2705      	movs	r7, #5
   1d7a4:	4638      	mov	r0, r7
   1d7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d7aa:	69e8      	ldr	r0, [r5, #28]
   1d7ac:	f7fe ff50 	bl	1c650 <packet_handler_delete>
   1d7b0:	eb08 0004 	add.w	r0, r8, r4
   1d7b4:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   1d7b8:	f8c6 901c 	str.w	r9, [r6, #28]
   1d7bc:	4638      	mov	r0, r7
   1d7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d7c2:	2704      	movs	r7, #4
   1d7c4:	e7f4      	b.n	1d7b0 <interface_socket_packet_handler_update+0x54>
   1d7c6:	bf00      	nop
   1d7c8:	2002af4c 	.word	0x2002af4c

0001d7cc <interface_socket_wait>:
   1d7cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7d0:	4692      	mov	sl, r2
   1d7d2:	ea4f 0980 	mov.w	r9, r0, lsl #2
   1d7d6:	4d13      	ldr	r5, [pc, #76]	; (1d824 <interface_socket_wait+0x58>)
   1d7d8:	eb09 0400 	add.w	r4, r9, r0
   1d7dc:	00e4      	lsls	r4, r4, #3
   1d7de:	592a      	ldr	r2, [r5, r4]
   1d7e0:	4606      	mov	r6, r0
   1d7e2:	ea02 020a 	and.w	r2, r2, sl
   1d7e6:	428a      	cmp	r2, r1
   1d7e8:	442c      	add	r4, r5
   1d7ea:	d013      	beq.n	1d814 <interface_socket_wait+0x48>
   1d7ec:	4698      	mov	r8, r3
   1d7ee:	6863      	ldr	r3, [r4, #4]
   1d7f0:	b983      	cbnz	r3, 1d814 <interface_socket_wait+0x48>
   1d7f2:	460f      	mov	r7, r1
   1d7f4:	46a3      	mov	fp, r4
   1d7f6:	e007      	b.n	1d808 <interface_socket_wait+0x3c>
   1d7f8:	f8db 3004 	ldr.w	r3, [fp, #4]
   1d7fc:	b953      	cbnz	r3, 1d814 <interface_socket_wait+0x48>
   1d7fe:	4641      	mov	r1, r8
   1d800:	4620      	mov	r0, r4
   1d802:	f7f6 f98f 	bl	13b24 <bsd_os_timedwait>
   1d806:	b958      	cbnz	r0, 1d820 <interface_socket_wait+0x54>
   1d808:	f8db 3000 	ldr.w	r3, [fp]
   1d80c:	ea03 030a 	and.w	r3, r3, sl
   1d810:	42bb      	cmp	r3, r7
   1d812:	d1f1      	bne.n	1d7f8 <interface_socket_wait+0x2c>
   1d814:	444e      	add	r6, r9
   1d816:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   1d81a:	6868      	ldr	r0, [r5, #4]
   1d81c:	b100      	cbz	r0, 1d820 <interface_socket_wait+0x54>
   1d81e:	6868      	ldr	r0, [r5, #4]
   1d820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d824:	2002af4c 	.word	0x2002af4c

0001d828 <interface_from_internal_id_search>:
   1d828:	4b27      	ldr	r3, [pc, #156]	; (1d8c8 <interface_from_internal_id_search+0xa0>)
   1d82a:	681a      	ldr	r2, [r3, #0]
   1d82c:	b112      	cbz	r2, 1d834 <interface_from_internal_id_search+0xc>
   1d82e:	699a      	ldr	r2, [r3, #24]
   1d830:	4282      	cmp	r2, r0
   1d832:	d039      	beq.n	1d8a8 <interface_from_internal_id_search+0x80>
   1d834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1d836:	b112      	cbz	r2, 1d83e <interface_from_internal_id_search+0x16>
   1d838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1d83a:	4282      	cmp	r2, r0
   1d83c:	d036      	beq.n	1d8ac <interface_from_internal_id_search+0x84>
   1d83e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1d840:	b112      	cbz	r2, 1d848 <interface_from_internal_id_search+0x20>
   1d842:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1d844:	4282      	cmp	r2, r0
   1d846:	d033      	beq.n	1d8b0 <interface_from_internal_id_search+0x88>
   1d848:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   1d84a:	b11a      	cbz	r2, 1d854 <interface_from_internal_id_search+0x2c>
   1d84c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1d850:	4282      	cmp	r2, r0
   1d852:	d02f      	beq.n	1d8b4 <interface_from_internal_id_search+0x8c>
   1d854:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1d858:	b11a      	cbz	r2, 1d862 <interface_from_internal_id_search+0x3a>
   1d85a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   1d85e:	4282      	cmp	r2, r0
   1d860:	d02a      	beq.n	1d8b8 <interface_from_internal_id_search+0x90>
   1d862:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   1d866:	b11a      	cbz	r2, 1d870 <interface_from_internal_id_search+0x48>
   1d868:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   1d86c:	4282      	cmp	r2, r0
   1d86e:	d025      	beq.n	1d8bc <interface_from_internal_id_search+0x94>
   1d870:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   1d874:	b11a      	cbz	r2, 1d87e <interface_from_internal_id_search+0x56>
   1d876:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   1d87a:	4282      	cmp	r2, r0
   1d87c:	d020      	beq.n	1d8c0 <interface_from_internal_id_search+0x98>
   1d87e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   1d882:	b11a      	cbz	r2, 1d88c <interface_from_internal_id_search+0x64>
   1d884:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1d888:	4282      	cmp	r2, r0
   1d88a:	d01b      	beq.n	1d8c4 <interface_from_internal_id_search+0x9c>
   1d88c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1d890:	b13a      	cbz	r2, 1d8a2 <interface_from_internal_id_search+0x7a>
   1d892:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   1d896:	4283      	cmp	r3, r0
   1d898:	bf14      	ite	ne
   1d89a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1d89e:	2008      	moveq	r0, #8
   1d8a0:	4770      	bx	lr
   1d8a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d8a6:	4770      	bx	lr
   1d8a8:	2000      	movs	r0, #0
   1d8aa:	4770      	bx	lr
   1d8ac:	2001      	movs	r0, #1
   1d8ae:	4770      	bx	lr
   1d8b0:	2002      	movs	r0, #2
   1d8b2:	4770      	bx	lr
   1d8b4:	2003      	movs	r0, #3
   1d8b6:	4770      	bx	lr
   1d8b8:	2004      	movs	r0, #4
   1d8ba:	4770      	bx	lr
   1d8bc:	2005      	movs	r0, #5
   1d8be:	4770      	bx	lr
   1d8c0:	2006      	movs	r0, #6
   1d8c2:	4770      	bx	lr
   1d8c4:	2007      	movs	r0, #7
   1d8c6:	4770      	bx	lr
   1d8c8:	2002af4c 	.word	0x2002af4c

0001d8cc <interface_socket_from_handle_get>:
   1d8cc:	2808      	cmp	r0, #8
   1d8ce:	d807      	bhi.n	1d8e0 <interface_socket_from_handle_get+0x14>
   1d8d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1d8d4:	4b03      	ldr	r3, [pc, #12]	; (1d8e4 <interface_socket_from_handle_get+0x18>)
   1d8d6:	00c0      	lsls	r0, r0, #3
   1d8d8:	581a      	ldr	r2, [r3, r0]
   1d8da:	b10a      	cbz	r2, 1d8e0 <interface_socket_from_handle_get+0x14>
   1d8dc:	4418      	add	r0, r3
   1d8de:	4770      	bx	lr
   1d8e0:	2000      	movs	r0, #0
   1d8e2:	4770      	bx	lr
   1d8e4:	2002af4c 	.word	0x2002af4c

0001d8e8 <interface_socket_event_get>:
   1d8e8:	b119      	cbz	r1, 1d8f2 <interface_socket_event_get+0xa>
   1d8ea:	2808      	cmp	r0, #8
   1d8ec:	d902      	bls.n	1d8f4 <interface_socket_event_get+0xc>
   1d8ee:	2310      	movs	r3, #16
   1d8f0:	600b      	str	r3, [r1, #0]
   1d8f2:	4770      	bx	lr
   1d8f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1d8f8:	4b07      	ldr	r3, [pc, #28]	; (1d918 <interface_socket_event_get+0x30>)
   1d8fa:	00c0      	lsls	r0, r0, #3
   1d8fc:	581a      	ldr	r2, [r3, r0]
   1d8fe:	2a00      	cmp	r2, #0
   1d900:	d0f5      	beq.n	1d8ee <interface_socket_event_get+0x6>
   1d902:	581b      	ldr	r3, [r3, r0]
   1d904:	0c1b      	lsrs	r3, r3, #16
   1d906:	f003 020a 	and.w	r2, r3, #10
   1d90a:	2a0a      	cmp	r2, #10
   1d90c:	bf14      	ite	ne
   1d90e:	f003 030f 	andne.w	r3, r3, #15
   1d912:	f003 030d 	andeq.w	r3, r3, #13
   1d916:	e7eb      	b.n	1d8f0 <interface_socket_event_get+0x8>
   1d918:	2002af4c 	.word	0x2002af4c

0001d91c <interface_socket_setopt>:
   1d91c:	2808      	cmp	r0, #8
   1d91e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d920:	d82c      	bhi.n	1d97c <interface_socket_setopt+0x60>
   1d922:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1d926:	4e1e      	ldr	r6, [pc, #120]	; (1d9a0 <interface_socket_setopt+0x84>)
   1d928:	00c0      	lsls	r0, r0, #3
   1d92a:	5834      	ldr	r4, [r6, r0]
   1d92c:	b334      	cbz	r4, 1d97c <interface_socket_setopt+0x60>
   1d92e:	2901      	cmp	r1, #1
   1d930:	d11e      	bne.n	1d970 <interface_socket_setopt+0x54>
   1d932:	f1a2 0114 	sub.w	r1, r2, #20
   1d936:	2901      	cmp	r1, #1
   1d938:	d81a      	bhi.n	1d970 <interface_socket_setopt+0x54>
   1d93a:	9906      	ldr	r1, [sp, #24]
   1d93c:	2908      	cmp	r1, #8
   1d93e:	d123      	bne.n	1d988 <interface_socket_setopt+0x6c>
   1d940:	b313      	cbz	r3, 1d988 <interface_socket_setopt+0x6c>
   1d942:	6859      	ldr	r1, [r3, #4]
   1d944:	4c17      	ldr	r4, [pc, #92]	; (1d9a4 <interface_socket_setopt+0x88>)
   1d946:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1d94a:	fba4 4101 	umull	r4, r1, r4, r1
   1d94e:	0989      	lsrs	r1, r1, #6
   1d950:	460c      	mov	r4, r1
   1d952:	2500      	movs	r5, #0
   1d954:	681b      	ldr	r3, [r3, #0]
   1d956:	fbe7 4503 	umlal	r4, r5, r7, r3
   1d95a:	2d01      	cmp	r5, #1
   1d95c:	bf08      	it	eq
   1d95e:	2c00      	cmpeq	r4, #0
   1d960:	d218      	bcs.n	1d994 <interface_socket_setopt+0x78>
   1d962:	4430      	add	r0, r6
   1d964:	2a14      	cmp	r2, #20
   1d966:	bf0c      	ite	eq
   1d968:	6204      	streq	r4, [r0, #32]
   1d96a:	6244      	strne	r4, [r0, #36]	; 0x24
   1d96c:	2000      	movs	r0, #0
   1d96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d970:	202a      	movs	r0, #42	; 0x2a
   1d972:	f7f6 f98d 	bl	13c90 <bsd_os_errno_set>
   1d976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d97c:	2009      	movs	r0, #9
   1d97e:	f7f6 f987 	bl	13c90 <bsd_os_errno_set>
   1d982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d988:	2016      	movs	r0, #22
   1d98a:	f7f6 f981 	bl	13c90 <bsd_os_errno_set>
   1d98e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d994:	2025      	movs	r0, #37	; 0x25
   1d996:	f7f6 f97b 	bl	13c90 <bsd_os_errno_set>
   1d99a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d9a0:	2002af4c 	.word	0x2002af4c
   1d9a4:	10624dd3 	.word	0x10624dd3

0001d9a8 <interface_socket_getopt>:
   1d9a8:	b570      	push	{r4, r5, r6, lr}
   1d9aa:	2808      	cmp	r0, #8
   1d9ac:	9d04      	ldr	r5, [sp, #16]
   1d9ae:	d835      	bhi.n	1da1c <interface_socket_getopt+0x74>
   1d9b0:	4c20      	ldr	r4, [pc, #128]	; (1da34 <interface_socket_getopt+0x8c>)
   1d9b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1d9b6:	00c0      	lsls	r0, r0, #3
   1d9b8:	5826      	ldr	r6, [r4, r0]
   1d9ba:	4404      	add	r4, r0
   1d9bc:	b376      	cbz	r6, 1da1c <interface_socket_getopt+0x74>
   1d9be:	2901      	cmp	r1, #1
   1d9c0:	d132      	bne.n	1da28 <interface_socket_getopt+0x80>
   1d9c2:	b32b      	cbz	r3, 1da10 <interface_socket_getopt+0x68>
   1d9c4:	b325      	cbz	r5, 1da10 <interface_socket_getopt+0x68>
   1d9c6:	2a04      	cmp	r2, #4
   1d9c8:	d019      	beq.n	1d9fe <interface_socket_getopt+0x56>
   1d9ca:	f1a2 0114 	sub.w	r1, r2, #20
   1d9ce:	2901      	cmp	r1, #1
   1d9d0:	d82a      	bhi.n	1da28 <interface_socket_getopt+0x80>
   1d9d2:	6829      	ldr	r1, [r5, #0]
   1d9d4:	2908      	cmp	r1, #8
   1d9d6:	d11b      	bne.n	1da10 <interface_socket_getopt+0x68>
   1d9d8:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   1d9dc:	2a14      	cmp	r2, #20
   1d9de:	bf18      	it	ne
   1d9e0:	4601      	movne	r1, r0
   1d9e2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1d9e6:	4a14      	ldr	r2, [pc, #80]	; (1da38 <interface_socket_getopt+0x90>)
   1d9e8:	2000      	movs	r0, #0
   1d9ea:	fba2 5201 	umull	r5, r2, r2, r1
   1d9ee:	0992      	lsrs	r2, r2, #6
   1d9f0:	fb04 1112 	mls	r1, r4, r2, r1
   1d9f4:	fb04 f101 	mul.w	r1, r4, r1
   1d9f8:	e9c3 2100 	strd	r2, r1, [r3]
   1d9fc:	bd70      	pop	{r4, r5, r6, pc}
   1d9fe:	682a      	ldr	r2, [r5, #0]
   1da00:	2a04      	cmp	r2, #4
   1da02:	d105      	bne.n	1da10 <interface_socket_getopt+0x68>
   1da04:	2200      	movs	r2, #0
   1da06:	6861      	ldr	r1, [r4, #4]
   1da08:	4610      	mov	r0, r2
   1da0a:	6019      	str	r1, [r3, #0]
   1da0c:	6062      	str	r2, [r4, #4]
   1da0e:	bd70      	pop	{r4, r5, r6, pc}
   1da10:	2016      	movs	r0, #22
   1da12:	f7f6 f93d 	bl	13c90 <bsd_os_errno_set>
   1da16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1da1a:	bd70      	pop	{r4, r5, r6, pc}
   1da1c:	2009      	movs	r0, #9
   1da1e:	f7f6 f937 	bl	13c90 <bsd_os_errno_set>
   1da22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1da26:	bd70      	pop	{r4, r5, r6, pc}
   1da28:	202a      	movs	r0, #42	; 0x2a
   1da2a:	f7f6 f931 	bl	13c90 <bsd_os_errno_set>
   1da2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1da32:	bd70      	pop	{r4, r5, r6, pc}
   1da34:	2002af4c 	.word	0x2002af4c
   1da38:	10624dd3 	.word	0x10624dd3

0001da3c <interface_shutdown>:
   1da3c:	4b18      	ldr	r3, [pc, #96]	; (1daa0 <interface_shutdown+0x64>)
   1da3e:	681a      	ldr	r2, [r3, #0]
   1da40:	b10a      	cbz	r2, 1da46 <interface_shutdown+0xa>
   1da42:	2270      	movs	r2, #112	; 0x70
   1da44:	605a      	str	r2, [r3, #4]
   1da46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1da48:	b10a      	cbz	r2, 1da4e <interface_shutdown+0x12>
   1da4a:	2270      	movs	r2, #112	; 0x70
   1da4c:	62da      	str	r2, [r3, #44]	; 0x2c
   1da4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1da50:	b10a      	cbz	r2, 1da56 <interface_shutdown+0x1a>
   1da52:	2270      	movs	r2, #112	; 0x70
   1da54:	655a      	str	r2, [r3, #84]	; 0x54
   1da56:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   1da58:	b10a      	cbz	r2, 1da5e <interface_shutdown+0x22>
   1da5a:	2270      	movs	r2, #112	; 0x70
   1da5c:	67da      	str	r2, [r3, #124]	; 0x7c
   1da5e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1da62:	b112      	cbz	r2, 1da6a <interface_shutdown+0x2e>
   1da64:	2270      	movs	r2, #112	; 0x70
   1da66:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
   1da6a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   1da6e:	b112      	cbz	r2, 1da76 <interface_shutdown+0x3a>
   1da70:	2270      	movs	r2, #112	; 0x70
   1da72:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
   1da76:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   1da7a:	b112      	cbz	r2, 1da82 <interface_shutdown+0x46>
   1da7c:	2270      	movs	r2, #112	; 0x70
   1da7e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
   1da82:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   1da86:	b112      	cbz	r2, 1da8e <interface_shutdown+0x52>
   1da88:	2270      	movs	r2, #112	; 0x70
   1da8a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   1da8e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1da92:	b112      	cbz	r2, 1da9a <interface_shutdown+0x5e>
   1da94:	2270      	movs	r2, #112	; 0x70
   1da96:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1da9a:	2000      	movs	r0, #0
   1da9c:	4770      	bx	lr
   1da9e:	bf00      	nop
   1daa0:	2002af4c 	.word	0x2002af4c

0001daa4 <interface_socket_fcntl>:
   1daa4:	2808      	cmp	r0, #8
   1daa6:	b510      	push	{r4, lr}
   1daa8:	d826      	bhi.n	1daf8 <interface_socket_fcntl+0x54>
   1daaa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1daae:	4c1b      	ldr	r4, [pc, #108]	; (1db1c <interface_socket_fcntl+0x78>)
   1dab0:	00c3      	lsls	r3, r0, #3
   1dab2:	58e0      	ldr	r0, [r4, r3]
   1dab4:	b300      	cbz	r0, 1daf8 <interface_socket_fcntl+0x54>
   1dab6:	2901      	cmp	r1, #1
   1dab8:	d005      	beq.n	1dac6 <interface_socket_fcntl+0x22>
   1daba:	2902      	cmp	r1, #2
   1dabc:	d122      	bne.n	1db04 <interface_socket_fcntl+0x60>
   1dabe:	58e0      	ldr	r0, [r4, r3]
   1dac0:	f3c0 7000 	ubfx	r0, r0, #28, #1
   1dac4:	bd10      	pop	{r4, pc}
   1dac6:	07d2      	lsls	r2, r2, #31
   1dac8:	d410      	bmi.n	1daec <interface_socket_fcntl+0x48>
   1daca:	58e0      	ldr	r0, [r4, r3]
   1dacc:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   1dad0:	d11e      	bne.n	1db10 <interface_socket_fcntl+0x6c>
   1dad2:	58e2      	ldr	r2, [r4, r3]
   1dad4:	b292      	uxth	r2, r2
   1dad6:	2a0a      	cmp	r2, #10
   1dad8:	d01a      	beq.n	1db10 <interface_socket_fcntl+0x6c>
   1dada:	58e2      	ldr	r2, [r4, r3]
   1dadc:	b292      	uxth	r2, r2
   1dade:	2a0b      	cmp	r2, #11
   1dae0:	d016      	beq.n	1db10 <interface_socket_fcntl+0x6c>
   1dae2:	58e2      	ldr	r2, [r4, r3]
   1dae4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   1dae8:	50e2      	str	r2, [r4, r3]
   1daea:	bd10      	pop	{r4, pc}
   1daec:	58e2      	ldr	r2, [r4, r3]
   1daee:	2000      	movs	r0, #0
   1daf0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1daf4:	50e2      	str	r2, [r4, r3]
   1daf6:	bd10      	pop	{r4, pc}
   1daf8:	2009      	movs	r0, #9
   1dafa:	f7f6 f8c9 	bl	13c90 <bsd_os_errno_set>
   1dafe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1db02:	bd10      	pop	{r4, pc}
   1db04:	2016      	movs	r0, #22
   1db06:	f7f6 f8c3 	bl	13c90 <bsd_os_errno_set>
   1db0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1db0e:	bd10      	pop	{r4, pc}
   1db10:	2023      	movs	r0, #35	; 0x23
   1db12:	f7f6 f8bd 	bl	13c90 <bsd_os_errno_set>
   1db16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1db1a:	bd10      	pop	{r4, pc}
   1db1c:	2002af4c 	.word	0x2002af4c

0001db20 <at_client_evt_handler>:
   1db20:	b120      	cbz	r0, 1db2c <at_client_evt_handler+0xc>
   1db22:	f850 1b08 	ldr.w	r1, [r0], #8
   1db26:	0c09      	lsrs	r1, r1, #16
   1db28:	f7fc be9c 	b.w	1a864 <rpc_at_event_handler>
   1db2c:	4770      	bx	lr
   1db2e:	bf00      	nop

0001db30 <rpc_at_client_init>:
   1db30:	4801      	ldr	r0, [pc, #4]	; (1db38 <rpc_at_client_init+0x8>)
   1db32:	f7fb bcc5 	b.w	194c0 <rpc_client_register>
   1db36:	bf00      	nop
   1db38:	00028f7c 	.word	0x00028f7c

0001db3c <rpc_at_client_request_alloc>:
   1db3c:	b180      	cbz	r0, 1db60 <rpc_at_client_request_alloc+0x24>
   1db3e:	2300      	movs	r3, #0
   1db40:	b510      	push	{r4, lr}
   1db42:	b082      	sub	sp, #8
   1db44:	aa02      	add	r2, sp, #8
   1db46:	4604      	mov	r4, r0
   1db48:	f842 3d04 	str.w	r3, [r2, #-4]!
   1db4c:	2003      	movs	r0, #3
   1db4e:	f7fb fd31 	bl	195b4 <rpc_message_alloc>
   1db52:	b918      	cbnz	r0, 1db5c <rpc_at_client_request_alloc+0x20>
   1db54:	9b01      	ldr	r3, [sp, #4]
   1db56:	b10b      	cbz	r3, 1db5c <rpc_at_client_request_alloc+0x20>
   1db58:	3308      	adds	r3, #8
   1db5a:	6023      	str	r3, [r4, #0]
   1db5c:	b002      	add	sp, #8
   1db5e:	bd10      	pop	{r4, pc}
   1db60:	200e      	movs	r0, #14
   1db62:	4770      	bx	lr

0001db64 <rpc_at_client_request_send>:
   1db64:	b150      	cbz	r0, 1db7c <rpc_at_client_request_send+0x18>
   1db66:	4603      	mov	r3, r0
   1db68:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1db6c:	2003      	movs	r0, #3
   1db6e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1db72:	f843 1d08 	str.w	r1, [r3, #-8]!
   1db76:	4619      	mov	r1, r3
   1db78:	f7fb bd0c 	b.w	19594 <rpc_message_send>
   1db7c:	200e      	movs	r0, #14
   1db7e:	4770      	bx	lr

0001db80 <rpc_at_client_message_free>:
   1db80:	b120      	cbz	r0, 1db8c <rpc_at_client_message_free+0xc>
   1db82:	f1a0 0108 	sub.w	r1, r0, #8
   1db86:	2003      	movs	r0, #3
   1db88:	f7fb bd40 	b.w	1960c <rpc_message_free>
   1db8c:	200e      	movs	r0, #14
   1db8e:	4770      	bx	lr

0001db90 <rpc_at_client_data_free>:
   1db90:	b118      	cbz	r0, 1db9a <rpc_at_client_data_free+0xa>
   1db92:	4601      	mov	r1, r0
   1db94:	2003      	movs	r0, #3
   1db96:	f7fb bd45 	b.w	19624 <rpc_message_data_free>
   1db9a:	200e      	movs	r0, #14
   1db9c:	4770      	bx	lr
   1db9e:	bf00      	nop

0001dba0 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1dba0:	4a07      	ldr	r2, [pc, #28]	; (1dbc0 <SystemInit+0x20>)
   1dba2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1dba6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1dbaa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1dbae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1dbb2:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1dbb6:	4b03      	ldr	r3, [pc, #12]	; (1dbc4 <SystemInit+0x24>)
   1dbb8:	4a03      	ldr	r2, [pc, #12]	; (1dbc8 <SystemInit+0x28>)
   1dbba:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1dbbc:	4770      	bx	lr
   1dbbe:	bf00      	nop
   1dbc0:	e000ed00 	.word	0xe000ed00
   1dbc4:	200205b8 	.word	0x200205b8
   1dbc8:	03d09000 	.word	0x03d09000

0001dbcc <nrfx_wdt_init>:
static wdt_control_block_t m_cb[NRFX_WDT_ENABLED_COUNT];

nrfx_err_t nrfx_wdt_init(nrfx_wdt_t const *        p_instance,
                         nrfx_wdt_config_t const * p_config,
                         nrfx_wdt_event_handler_t  wdt_event_handler)
{
   1dbcc:	b570      	push	{r4, r5, r6, lr}
   1dbce:	4615      	mov	r5, r2
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

#if NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    (void)wdt_event_handler;
#else
    p_cb->wdt_event_handler = wdt_event_handler;
   1dbd0:	4b11      	ldr	r3, [pc, #68]	; (1dc18 <nrfx_wdt_init+0x4c>)
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1dbd2:	7902      	ldrb	r2, [r0, #4]
    p_cb->wdt_event_handler = wdt_event_handler;
   1dbd4:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
   1dbd8:	6065      	str	r5, [r4, #4]
#endif

    if (p_cb->state == NRFX_DRV_STATE_UNINITIALIZED)
   1dbda:	f813 4032 	ldrb.w	r4, [r3, r2, lsl #3]
   1dbde:	b9cc      	cbnz	r4, 1dc14 <nrfx_wdt_init+0x48>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1dbe0:	2601      	movs	r6, #1
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    nrf_wdt_behaviour_set(p_instance->p_reg, p_config->behaviour);
   1dbe2:	6804      	ldr	r4, [r0, #0]
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1dbe4:	f803 6032 	strb.w	r6, [r3, r2, lsl #3]
    p_reg->CONFIG = behaviour;
   1dbe8:	780b      	ldrb	r3, [r1, #0]

    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   1dbea:	6849      	ldr	r1, [r1, #4]
   1dbec:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
   1dbf0:	03c8      	lsls	r0, r1, #15
   1dbf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1dbf6:	2300      	movs	r3, #0
   1dbf8:	0c49      	lsrs	r1, r1, #17
   1dbfa:	f7ee fddd 	bl	c7b8 <__aeabi_uldivmod>
}

NRF_STATIC_INLINE void nrf_wdt_reload_value_set(NRF_WDT_Type * p_reg, uint32_t reload_value)
{
    p_reg->CRV = reload_value;
   1dbfe:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    NRFX_ASSERT(ticks <= UINT32_MAX);

    nrf_wdt_reload_value_set(p_instance->p_reg, (uint32_t) ticks);

#if !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    if (wdt_event_handler)
   1dc02:	b12d      	cbz	r5, 1dc10 <nrfx_wdt_init+0x44>
    p_reg->INTENSET = mask;
   1dc04:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    {
        nrf_wdt_int_enable(p_instance->p_reg, NRF_WDT_INT_TIMEOUT_MASK);
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg), p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1dc08:	f344 3007 	sbfx	r0, r4, #12, #8
   1dc0c:	f7f2 f922 	bl	fe54 <arch_irq_enable>
    }
#endif

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1dc10:	4802      	ldr	r0, [pc, #8]	; (1dc1c <nrfx_wdt_init+0x50>)
   1dc12:	e000      	b.n	1dc16 <nrfx_wdt_init+0x4a>
        return err_code;
   1dc14:	4802      	ldr	r0, [pc, #8]	; (1dc20 <nrfx_wdt_init+0x54>)
}
   1dc16:	bd70      	pop	{r4, r5, r6, pc}
   1dc18:	200236a4 	.word	0x200236a4
   1dc1c:	0bad0000 	.word	0x0bad0000
   1dc20:	0bad0005 	.word	0x0bad0005

0001dc24 <nrfx_wdt_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x01UL;
   1dc24:	2101      	movs	r1, #1
void nrfx_wdt_enable(nrfx_wdt_t const * p_instance)
{
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->alloc_index != 0);
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    nrf_wdt_task_trigger(p_instance->p_reg, NRF_WDT_TASK_START);
   1dc26:	6803      	ldr	r3, [r0, #0]
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1dc28:	7902      	ldrb	r2, [r0, #4]
   1dc2a:	6019      	str	r1, [r3, #0]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1dc2c:	2102      	movs	r1, #2
   1dc2e:	4b02      	ldr	r3, [pc, #8]	; (1dc38 <nrfx_wdt_enable+0x14>)
   1dc30:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
    NRFX_LOG_INFO("Enabled.");
}
   1dc34:	4770      	bx	lr
   1dc36:	bf00      	nop
   1dc38:	200236a4 	.word	0x200236a4

0001dc3c <nrfx_wdt_channel_alloc>:
        nrf_wdt_reload_request_set(p_instance->p_reg, (nrf_wdt_rr_register_t)(NRF_WDT_RR0 + i));
    }
}

nrfx_err_t nrfx_wdt_channel_alloc(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id * p_channel_id)
{
   1dc3c:	b510      	push	{r4, lr}
    nrfx_err_t result;
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1dc3e:	7902      	ldrb	r2, [r0, #4]
	__asm__ volatile(
   1dc40:	f04f 0320 	mov.w	r3, #32
   1dc44:	f3ef 8411 	mrs	r4, BASEPRI
   1dc48:	f383 8811 	msr	BASEPRI, r3
   1dc4c:	f3bf 8f6f 	isb	sy

    NRFX_ASSERT(p_channel_id);
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    NRFX_CRITICAL_SECTION_ENTER();
    if (p_cb->alloc_index < NRF_WDT_CHANNEL_NUMBER)
   1dc50:	4b0c      	ldr	r3, [pc, #48]	; (1dc84 <nrfx_wdt_channel_alloc+0x48>)
   1dc52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1dc56:	785a      	ldrb	r2, [r3, #1]
   1dc58:	2a07      	cmp	r2, #7
   1dc5a:	d810      	bhi.n	1dc7e <nrfx_wdt_channel_alloc+0x42>
    {
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
   1dc5c:	700a      	strb	r2, [r1, #0]
        p_cb->alloc_index++;
   1dc5e:	1c51      	adds	r1, r2, #1
   1dc60:	7059      	strb	r1, [r3, #1]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_enable(NRF_WDT_Type *        p_reg,
                                                     nrf_wdt_rr_register_t rr_register)
{
    p_reg->RREN |= 0x1UL << rr_register;
   1dc62:	2301      	movs	r3, #1
        nrf_wdt_reload_request_enable(p_instance->p_reg, *p_channel_id);
   1dc64:	6801      	ldr	r1, [r0, #0]
   1dc66:	4093      	lsls	r3, r2
   1dc68:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
   1dc6c:	4303      	orrs	r3, r0
        result = NRFX_SUCCESS;
   1dc6e:	4806      	ldr	r0, [pc, #24]	; (1dc88 <nrfx_wdt_channel_alloc+0x4c>)
   1dc70:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
	__asm__ volatile(
   1dc74:	f384 8811 	msr	BASEPRI, r4
   1dc78:	f3bf 8f6f 	isb	sy
        result = NRFX_ERROR_NO_MEM;
    }
    NRFX_CRITICAL_SECTION_EXIT();
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(result));
    return result;
}
   1dc7c:	bd10      	pop	{r4, pc}
        result = NRFX_ERROR_NO_MEM;
   1dc7e:	4803      	ldr	r0, [pc, #12]	; (1dc8c <nrfx_wdt_channel_alloc+0x50>)
   1dc80:	e7f8      	b.n	1dc74 <nrfx_wdt_channel_alloc+0x38>
   1dc82:	bf00      	nop
   1dc84:	200236a4 	.word	0x200236a4
   1dc88:	0bad0000 	.word	0x0bad0000
   1dc8c:	0bad0002 	.word	0x0bad0002

0001dc90 <nrfx_wdt_channel_feed>:

void nrfx_wdt_channel_feed(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id channel_id)
{
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
    nrf_wdt_reload_request_set(p_instance->p_reg, channel_id);
   1dc90:	6803      	ldr	r3, [r0, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
   1dc92:	4a03      	ldr	r2, [pc, #12]	; (1dca0 <nrfx_wdt_channel_feed+0x10>)
   1dc94:	f501 71c0 	add.w	r1, r1, #384	; 0x180
   1dc98:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
   1dc9c:	4770      	bx	lr
   1dc9e:	bf00      	nop
   1dca0:	6e524635 	.word	0x6e524635

0001dca4 <nrfx_wdt_0_irq_handler>:

#if NRFX_CHECK(NRFX_WDT0_ENABLED) && !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
void nrfx_wdt_0_irq_handler(void)
{
   1dca4:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1dca6:	4c04      	ldr	r4, [pc, #16]	; (1dcb8 <nrfx_wdt_0_irq_handler+0x14>)
   1dca8:	6823      	ldr	r3, [r4, #0]
    if (nrf_wdt_event_check(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT))
   1dcaa:	b123      	cbz	r3, 1dcb6 <nrfx_wdt_0_irq_handler+0x12>
    {
        m_cb[NRFX_WDT0_INST_IDX].wdt_event_handler();
   1dcac:	4b03      	ldr	r3, [pc, #12]	; (1dcbc <nrfx_wdt_0_irq_handler+0x18>)
   1dcae:	685b      	ldr	r3, [r3, #4]
   1dcb0:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dcb2:	2300      	movs	r3, #0
   1dcb4:	6023      	str	r3, [r4, #0]
        nrf_wdt_event_clear(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT);
    }
}
   1dcb6:	bd10      	pop	{r4, pc}
   1dcb8:	40018100 	.word	0x40018100
   1dcbc:	200236a4 	.word	0x200236a4

0001dcc0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
   1dcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
   1dcc2:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1dcc4:	4b08      	ldr	r3, [pc, #32]	; (1dce8 <z_sys_init_run_level+0x28>)
   1dcc6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1dcca:	3001      	adds	r0, #1
   1dccc:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1dcd0:	42a6      	cmp	r6, r4
   1dcd2:	d800      	bhi.n	1dcd6 <z_sys_init_run_level+0x16>
			}
		}
	}
}
   1dcd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
   1dcd6:	e9d4 3500 	ldrd	r3, r5, [r4]
   1dcda:	4628      	mov	r0, r5
   1dcdc:	4798      	blx	r3
		if (retval != 0) {
   1dcde:	b108      	cbz	r0, 1dce4 <z_sys_init_run_level+0x24>
			if (dev) {
   1dce0:	b105      	cbz	r5, 1dce4 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
   1dce2:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1dce4:	3408      	adds	r4, #8
   1dce6:	e7f3      	b.n	1dcd0 <z_sys_init_run_level+0x10>
   1dce8:	00028f8c 	.word	0x00028f8c

0001dcec <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1dcec:	4b0f      	ldr	r3, [pc, #60]	; (1dd2c <z_impl_device_get_binding+0x40>)
{
   1dcee:	b570      	push	{r4, r5, r6, lr}
   1dcf0:	4605      	mov	r5, r0
   1dcf2:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
   1dcf4:	4c0e      	ldr	r4, [pc, #56]	; (1dd30 <z_impl_device_get_binding+0x44>)
   1dcf6:	429c      	cmp	r4, r3
   1dcf8:	d104      	bne.n	1dd04 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1dcfa:	4c0d      	ldr	r4, [pc, #52]	; (1dd30 <z_impl_device_get_binding+0x44>)
   1dcfc:	42b4      	cmp	r4, r6
   1dcfe:	d108      	bne.n	1dd12 <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
   1dd00:	2400      	movs	r4, #0
   1dd02:	e010      	b.n	1dd26 <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
   1dd04:	68a2      	ldr	r2, [r4, #8]
   1dd06:	b112      	cbz	r2, 1dd0e <z_impl_device_get_binding+0x22>
   1dd08:	6822      	ldr	r2, [r4, #0]
   1dd0a:	42aa      	cmp	r2, r5
   1dd0c:	d00b      	beq.n	1dd26 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
   1dd0e:	3410      	adds	r4, #16
   1dd10:	e7f1      	b.n	1dcf6 <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
   1dd12:	68a3      	ldr	r3, [r4, #8]
   1dd14:	b90b      	cbnz	r3, 1dd1a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1dd16:	3410      	adds	r4, #16
   1dd18:	e7f0      	b.n	1dcfc <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
   1dd1a:	4628      	mov	r0, r5
   1dd1c:	6821      	ldr	r1, [r4, #0]
   1dd1e:	f7ef f901 	bl	cf24 <strcmp>
		if ((dev->driver_api != NULL) &&
   1dd22:	2800      	cmp	r0, #0
   1dd24:	d1f7      	bne.n	1dd16 <z_impl_device_get_binding+0x2a>
}
   1dd26:	4620      	mov	r0, r4
   1dd28:	bd70      	pop	{r4, r5, r6, pc}
   1dd2a:	bf00      	nop
   1dd2c:	2002085c 	.word	0x2002085c
   1dd30:	200207bc 	.word	0x200207bc

0001dd34 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1dd34:	4b01      	ldr	r3, [pc, #4]	; (1dd3c <z_impl_z_errno+0x8>)
   1dd36:	6898      	ldr	r0, [r3, #8]
}
   1dd38:	305c      	adds	r0, #92	; 0x5c
   1dd3a:	4770      	bx	lr
   1dd3c:	2002807c 	.word	0x2002807c

0001dd40 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1dd40:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1dd42:	4d0b      	ldr	r5, [pc, #44]	; (1dd70 <idle+0x30>)
	__asm__ volatile(
   1dd44:	f04f 0220 	mov.w	r2, #32
   1dd48:	f3ef 8311 	mrs	r3, BASEPRI
   1dd4c:	f382 8811 	msr	BASEPRI, r2
   1dd50:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   1dd54:	f009 fc73 	bl	2763e <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1dd58:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   1dd5a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1dd5c:	2802      	cmp	r0, #2
   1dd5e:	bfd8      	it	le
   1dd60:	4608      	movle	r0, r1
   1dd62:	f009 fc7c 	bl	2765e <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1dd66:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   1dd68:	f7f2 f988 	bl	1007c <arch_cpu_idle>
}
   1dd6c:	e7ea      	b.n	1dd44 <idle+0x4>
   1dd6e:	bf00      	nop
   1dd70:	2002807c 	.word	0x2002807c

0001dd74 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1dd74:	4802      	ldr	r0, [pc, #8]	; (1dd80 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   1dd76:	4a03      	ldr	r2, [pc, #12]	; (1dd84 <z_bss_zero+0x10>)
   1dd78:	2100      	movs	r1, #0
   1dd7a:	1a12      	subs	r2, r2, r0
   1dd7c:	f009 be1d 	b.w	279ba <memset>
   1dd80:	20020a00 	.word	0x20020a00
   1dd84:	2002b0c4 	.word	0x2002b0c4

0001dd88 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1dd88:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1dd8a:	4806      	ldr	r0, [pc, #24]	; (1dda4 <z_data_copy+0x1c>)
   1dd8c:	4a06      	ldr	r2, [pc, #24]	; (1dda8 <z_data_copy+0x20>)
   1dd8e:	4907      	ldr	r1, [pc, #28]	; (1ddac <z_data_copy+0x24>)
   1dd90:	1a12      	subs	r2, r2, r0
   1dd92:	f009 fdd8 	bl	27946 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1dd96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1dd9a:	4a05      	ldr	r2, [pc, #20]	; (1ddb0 <z_data_copy+0x28>)
   1dd9c:	4905      	ldr	r1, [pc, #20]	; (1ddb4 <z_data_copy+0x2c>)
   1dd9e:	4806      	ldr	r0, [pc, #24]	; (1ddb8 <z_data_copy+0x30>)
   1dda0:	f009 bdd1 	b.w	27946 <memcpy>
   1dda4:	20020000 	.word	0x20020000
   1dda8:	200209fc 	.word	0x200209fc
   1ddac:	00029a88 	.word	0x00029a88
   1ddb0:	00000000 	.word	0x00000000
   1ddb4:	00029a88 	.word	0x00029a88
   1ddb8:	20020000 	.word	0x20020000

0001ddbc <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1ddbc:	2201      	movs	r2, #1
{
   1ddbe:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1ddc0:	4b0b      	ldr	r3, [pc, #44]	; (1ddf0 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ddc2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1ddc4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ddc6:	f7ff ff7b 	bl	1dcc0 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1ddca:	4a0a      	ldr	r2, [pc, #40]	; (1ddf4 <bg_thread_main+0x38>)
   1ddcc:	490a      	ldr	r1, [pc, #40]	; (1ddf8 <bg_thread_main+0x3c>)
   1ddce:	480b      	ldr	r0, [pc, #44]	; (1ddfc <bg_thread_main+0x40>)
   1ddd0:	f004 fa72 	bl	222b8 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1ddd4:	2003      	movs	r0, #3
   1ddd6:	f7ff ff73 	bl	1dcc0 <z_sys_init_run_level>

	z_init_static_threads();
   1ddda:	f000 fee7 	bl	1ebac <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1ddde:	f7f0 f9e1 	bl	e1a4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1dde2:	4a07      	ldr	r2, [pc, #28]	; (1de00 <bg_thread_main+0x44>)
   1dde4:	7b13      	ldrb	r3, [r2, #12]
   1dde6:	f023 0301 	bic.w	r3, r3, #1
   1ddea:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1ddec:	bd08      	pop	{r3, pc}
   1ddee:	bf00      	nop
   1ddf0:	2002af35 	.word	0x2002af35
   1ddf4:	00029641 	.word	0x00029641
   1ddf8:	00029679 	.word	0x00029679
   1ddfc:	00029689 	.word	0x00029689
   1de00:	20023764 	.word	0x20023764

0001de04 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1de04:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
   1de08:	4b36      	ldr	r3, [pc, #216]	; (1dee4 <z_cstart+0xe0>)
   1de0a:	b0b5      	sub	sp, #212	; 0xd4
   1de0c:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1de10:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1de14:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1de18:	2400      	movs	r4, #0
   1de1a:	23e0      	movs	r3, #224	; 0xe0
   1de1c:	4d32      	ldr	r5, [pc, #200]	; (1dee8 <z_cstart+0xe4>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1de1e:	f04f 0b01 	mov.w	fp, #1
   1de22:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1de26:	77ec      	strb	r4, [r5, #31]
   1de28:	762c      	strb	r4, [r5, #24]
   1de2a:	766c      	strb	r4, [r5, #25]
   1de2c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1de2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   1de30:	4e2e      	ldr	r6, [pc, #184]	; (1deec <z_cstart+0xe8>)
   1de32:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1de36:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1de38:	f7f2 fa4e 	bl	102d8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1de3c:	f7f2 f918 	bl	10070 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1de40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de44:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1de46:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1de48:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
   1de4c:	4d28      	ldr	r5, [pc, #160]	; (1def0 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1de4e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1de52:	ab06      	add	r3, sp, #24
   1de54:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1de56:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1de58:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
   1de5c:	f7ff ff30 	bl	1dcc0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1de60:	2001      	movs	r0, #1
   1de62:	f7ff ff2d 	bl	1dcc0 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1de66:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1df04 <z_cstart+0x100>
	z_sched_init();
   1de6a:	f000 fd67 	bl	1e93c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1de6e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1df08 <z_cstart+0x104>
   1de72:	4b20      	ldr	r3, [pc, #128]	; (1def4 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   1de74:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1de76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1de7a:	4641      	mov	r1, r8
   1de7c:	4630      	mov	r0, r6
   1de7e:	9305      	str	r3, [sp, #20]
   1de80:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1de84:	4653      	mov	r3, sl
   1de86:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1de8a:	9400      	str	r4, [sp, #0]
   1de8c:	f000 fe3c 	bl	1eb08 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1de90:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   1de92:	4630      	mov	r0, r6
   1de94:	f023 0304 	bic.w	r3, r3, #4
   1de98:	7373      	strb	r3, [r6, #13]
   1de9a:	f009 fa66 	bl	2736a <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1de9e:	230f      	movs	r3, #15
   1dea0:	4f15      	ldr	r7, [pc, #84]	; (1def8 <z_cstart+0xf4>)
   1dea2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1dea6:	4638      	mov	r0, r7
   1dea8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1deac:	4913      	ldr	r1, [pc, #76]	; (1defc <z_cstart+0xf8>)
   1deae:	4b14      	ldr	r3, [pc, #80]	; (1df00 <z_cstart+0xfc>)
   1deb0:	e9cd b404 	strd	fp, r4, [sp, #16]
   1deb4:	e9cd 4400 	strd	r4, r4, [sp]
   1deb8:	f000 fe26 	bl	1eb08 <z_setup_new_thread>
   1debc:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1debe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1dec2:	f023 0304 	bic.w	r3, r3, #4
   1dec6:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1dec8:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1decc:	e9c5 3306 	strd	r3, r3, [r5, #24]
   1ded0:	4641      	mov	r1, r8
   1ded2:	4653      	mov	r3, sl
   1ded4:	4630      	mov	r0, r6
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1ded6:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   1ded8:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1deda:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1dede:	f7f2 f809 	bl	fef4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1dee2:	bf00      	nop
   1dee4:	2002eb98 	.word	0x2002eb98
   1dee8:	e000ed00 	.word	0xe000ed00
   1deec:	20023764 	.word	0x20023764
   1def0:	2002807c 	.word	0x2002807c
   1def4:	000296b0 	.word	0x000296b0
   1def8:	200236ac 	.word	0x200236ac
   1defc:	2002ea58 	.word	0x2002ea58
   1df00:	0001dd41 	.word	0x0001dd41
   1df04:	0001ddbd 	.word	0x0001ddbd
   1df08:	2002ca58 	.word	0x2002ca58

0001df0c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
   1df0c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1df0e:	4c06      	ldr	r4, [pc, #24]	; (1df28 <statics_init+0x1c>)
   1df10:	4d06      	ldr	r5, [pc, #24]	; (1df2c <statics_init+0x20>)
   1df12:	42ac      	cmp	r4, r5
   1df14:	d301      	bcc.n	1df1a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1df16:	2000      	movs	r0, #0
   1df18:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1df1a:	4620      	mov	r0, r4
   1df1c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1df20:	f009 f874 	bl	2700c <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1df24:	3414      	adds	r4, #20
   1df26:	e7f4      	b.n	1df12 <statics_init+0x6>
   1df28:	200208b0 	.word	0x200208b0
   1df2c:	200208c4 	.word	0x200208c4

0001df30 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1df30:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1df32:	4b0e      	ldr	r3, [pc, #56]	; (1df6c <init_mem_slab_module+0x3c>)
   1df34:	4c0e      	ldr	r4, [pc, #56]	; (1df70 <init_mem_slab_module+0x40>)
   1df36:	42a3      	cmp	r3, r4
   1df38:	d301      	bcc.n	1df3e <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1df3a:	2000      	movs	r0, #0
	return rc;
}
   1df3c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1df3e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1df42:	ea41 0200 	orr.w	r2, r1, r0
   1df46:	f012 0203 	ands.w	r2, r2, #3
   1df4a:	d10b      	bne.n	1df64 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1df4c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1df4e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1df50:	42aa      	cmp	r2, r5
   1df52:	d101      	bne.n	1df58 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1df54:	331c      	adds	r3, #28
   1df56:	e7ee      	b.n	1df36 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1df58:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1df5a:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   1df5c:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   1df5e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1df60:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1df62:	e7f5      	b.n	1df50 <init_mem_slab_module+0x20>
		return -EINVAL;
   1df64:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1df68:	e7e8      	b.n	1df3c <init_mem_slab_module+0xc>
   1df6a:	bf00      	nop
   1df6c:	2002085c 	.word	0x2002085c
   1df70:	200208b0 	.word	0x200208b0

0001df74 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1df74:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1df76:	460c      	mov	r4, r1
   1df78:	4616      	mov	r6, r2
   1df7a:	461f      	mov	r7, r3
   1df7c:	f04f 0320 	mov.w	r3, #32
   1df80:	f3ef 8111 	mrs	r1, BASEPRI
   1df84:	f383 8811 	msr	BASEPRI, r3
   1df88:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1df8c:	6943      	ldr	r3, [r0, #20]
   1df8e:	b15b      	cbz	r3, 1dfa8 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1df90:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1df92:	681b      	ldr	r3, [r3, #0]
   1df94:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1df96:	6983      	ldr	r3, [r0, #24]
   1df98:	3301      	adds	r3, #1
   1df9a:	6183      	str	r3, [r0, #24]
		result = 0;
   1df9c:	2000      	movs	r0, #0
	__asm__ volatile(
   1df9e:	f381 8811 	msr	BASEPRI, r1
   1dfa2:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1dfa6:	e011      	b.n	1dfcc <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1dfa8:	ea56 0207 	orrs.w	r2, r6, r7
   1dfac:	d103      	bne.n	1dfb6 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   1dfae:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   1dfb2:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1dfb4:	e7f3      	b.n	1df9e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1dfb6:	4602      	mov	r2, r0
   1dfb8:	e9cd 6700 	strd	r6, r7, [sp]
   1dfbc:	4804      	ldr	r0, [pc, #16]	; (1dfd0 <k_mem_slab_alloc+0x5c>)
   1dfbe:	f000 fc69 	bl	1e894 <z_pend_curr>
		if (result == 0) {
   1dfc2:	b918      	cbnz	r0, 1dfcc <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1dfc4:	4b03      	ldr	r3, [pc, #12]	; (1dfd4 <k_mem_slab_alloc+0x60>)
   1dfc6:	689b      	ldr	r3, [r3, #8]
   1dfc8:	695b      	ldr	r3, [r3, #20]
   1dfca:	6023      	str	r3, [r4, #0]
}
   1dfcc:	b002      	add	sp, #8
   1dfce:	bdd0      	pop	{r4, r6, r7, pc}
   1dfd0:	2002af36 	.word	0x2002af36
   1dfd4:	2002807c 	.word	0x2002807c

0001dfd8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1dfd8:	b570      	push	{r4, r5, r6, lr}
   1dfda:	4604      	mov	r4, r0
   1dfdc:	460d      	mov	r5, r1
	__asm__ volatile(
   1dfde:	f04f 0320 	mov.w	r3, #32
   1dfe2:	f3ef 8611 	mrs	r6, BASEPRI
   1dfe6:	f383 8811 	msr	BASEPRI, r3
   1dfea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1dfee:	f009 fa2f 	bl	27450 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1dff2:	b158      	cbz	r0, 1e00c <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1dff4:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1dff6:	682a      	ldr	r2, [r5, #0]
   1dff8:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1dffa:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   1dffc:	f009 f9b5 	bl	2736a <z_ready_thread>
		z_reschedule(&lock, key);
   1e000:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1e002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1e006:	4808      	ldr	r0, [pc, #32]	; (1e028 <k_mem_slab_free+0x50>)
   1e008:	f009 b96b 	b.w	272e2 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1e00c:	682b      	ldr	r3, [r5, #0]
   1e00e:	6962      	ldr	r2, [r4, #20]
   1e010:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1e012:	682b      	ldr	r3, [r5, #0]
   1e014:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1e016:	69a3      	ldr	r3, [r4, #24]
   1e018:	3b01      	subs	r3, #1
   1e01a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1e01c:	f386 8811 	msr	BASEPRI, r6
   1e020:	f3bf 8f6f 	isb	sy
}
   1e024:	bd70      	pop	{r4, r5, r6, pc}
   1e026:	bf00      	nop
   1e028:	2002af36 	.word	0x2002af36

0001e02c <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   1e02c:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1e02e:	4801      	ldr	r0, [pc, #4]	; (1e034 <k_malloc+0x8>)
   1e030:	f009 b871 	b.w	27116 <k_mem_pool_malloc>
   1e034:	200205bc 	.word	0x200205bc

0001e038 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1e038:	b507      	push	{r0, r1, r2, lr}
   1e03a:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1e03c:	f009 fa55 	bl	274ea <k_is_in_isr>
   1e040:	9901      	ldr	r1, [sp, #4]
   1e042:	b948      	cbnz	r0, 1e058 <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1e044:	4b07      	ldr	r3, [pc, #28]	; (1e064 <z_thread_malloc+0x2c>)
   1e046:	689b      	ldr	r3, [r3, #8]
   1e048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	}

	if (pool) {
   1e04a:	b13b      	cbz	r3, 1e05c <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   1e04c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1e04e:	b003      	add	sp, #12
   1e050:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   1e054:	f009 b85f 	b.w	27116 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   1e058:	4b03      	ldr	r3, [pc, #12]	; (1e068 <z_thread_malloc+0x30>)
   1e05a:	e7f7      	b.n	1e04c <z_thread_malloc+0x14>
}
   1e05c:	b003      	add	sp, #12
   1e05e:	f85d fb04 	ldr.w	pc, [sp], #4
   1e062:	bf00      	nop
   1e064:	2002807c 	.word	0x2002807c
   1e068:	200205bc 	.word	0x200205bc

0001e06c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   1e06c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e070:	4604      	mov	r4, r0
   1e072:	4616      	mov	r6, r2
   1e074:	461f      	mov	r7, r3
   1e076:	b085      	sub	sp, #20

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1e078:	f100 0908 	add.w	r9, r0, #8
	__asm__ volatile(
   1e07c:	f04f 0320 	mov.w	r3, #32
   1e080:	f3ef 8811 	mrs	r8, BASEPRI
   1e084:	f383 8811 	msr	BASEPRI, r3
   1e088:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   1e08c:	6a02      	ldr	r2, [r0, #32]
   1e08e:	68c3      	ldr	r3, [r0, #12]
   1e090:	429a      	cmp	r2, r3
   1e092:	d22b      	bcs.n	1e0ec <z_impl_k_msgq_put+0x80>
   1e094:	9103      	str	r1, [sp, #12]
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1e096:	f009 f9db 	bl	27450 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1e09a:	68a2      	ldr	r2, [r4, #8]
   1e09c:	4605      	mov	r5, r0
   1e09e:	9903      	ldr	r1, [sp, #12]
   1e0a0:	b178      	cbz	r0, 1e0c2 <z_impl_k_msgq_put+0x56>
   1e0a2:	2400      	movs	r4, #0
   1e0a4:	6940      	ldr	r0, [r0, #20]
   1e0a6:	f009 fc4e 	bl	27946 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1e0aa:	4628      	mov	r0, r5
   1e0ac:	672c      	str	r4, [r5, #112]	; 0x70
   1e0ae:	f009 f95c 	bl	2736a <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1e0b2:	4648      	mov	r0, r9
   1e0b4:	4641      	mov	r1, r8
   1e0b6:	f009 f914 	bl	272e2 <z_reschedule>
			return 0;
   1e0ba:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1e0bc:	b005      	add	sp, #20
   1e0be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e0c2:	69e0      	ldr	r0, [r4, #28]
   1e0c4:	f009 fc3f 	bl	27946 <memcpy>
		result = 0;
   1e0c8:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   1e0ca:	69e3      	ldr	r3, [r4, #28]
   1e0cc:	68a2      	ldr	r2, [r4, #8]
   1e0ce:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1e0d0:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1e0d2:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1e0d4:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1e0d6:	bf04      	itt	eq
   1e0d8:	6923      	ldreq	r3, [r4, #16]
   1e0da:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1e0dc:	6a23      	ldr	r3, [r4, #32]
   1e0de:	3301      	adds	r3, #1
   1e0e0:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   1e0e2:	f388 8811 	msr	BASEPRI, r8
   1e0e6:	f3bf 8f6f 	isb	sy
	return result;
   1e0ea:	e7e7      	b.n	1e0bc <z_impl_k_msgq_put+0x50>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e0ec:	ea56 0307 	orrs.w	r3, r6, r7
   1e0f0:	d00a      	beq.n	1e108 <z_impl_k_msgq_put+0x9c>
		_current->base.swap_data = data;
   1e0f2:	4b07      	ldr	r3, [pc, #28]	; (1e110 <z_impl_k_msgq_put+0xa4>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1e0f4:	4602      	mov	r2, r0
		_current->base.swap_data = data;
   1e0f6:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1e0f8:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   1e0fa:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1e0fc:	4641      	mov	r1, r8
   1e0fe:	e9cd 6700 	strd	r6, r7, [sp]
   1e102:	f000 fbc7 	bl	1e894 <z_pend_curr>
   1e106:	e7d9      	b.n	1e0bc <z_impl_k_msgq_put+0x50>
		result = -ENOMSG;
   1e108:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1e10c:	e7e9      	b.n	1e0e2 <z_impl_k_msgq_put+0x76>
   1e10e:	bf00      	nop
   1e110:	2002807c 	.word	0x2002807c

0001e114 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   1e114:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1e118:	4604      	mov	r4, r0
   1e11a:	4616      	mov	r6, r2
   1e11c:	4608      	mov	r0, r1
   1e11e:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1e120:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   1e124:	f04f 0320 	mov.w	r3, #32
   1e128:	f3ef 8811 	mrs	r8, BASEPRI
   1e12c:	f383 8811 	msr	BASEPRI, r3
   1e130:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   1e134:	6a23      	ldr	r3, [r4, #32]
   1e136:	2b00      	cmp	r3, #0
   1e138:	d032      	beq.n	1e1a0 <z_impl_k_msgq_get+0x8c>
   1e13a:	68a2      	ldr	r2, [r4, #8]
   1e13c:	69a1      	ldr	r1, [r4, #24]
   1e13e:	f009 fc02 	bl	27946 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   1e142:	69a3      	ldr	r3, [r4, #24]
   1e144:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1e146:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   1e148:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1e14a:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   1e14c:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1e14e:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1e150:	bf04      	itt	eq
   1e152:	6923      	ldreq	r3, [r4, #16]
   1e154:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   1e156:	6a23      	ldr	r3, [r4, #32]
   1e158:	3b01      	subs	r3, #1
   1e15a:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1e15c:	f009 f978 	bl	27450 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1e160:	4605      	mov	r5, r0
   1e162:	b368      	cbz	r0, 1e1c0 <z_impl_k_msgq_get+0xac>
   1e164:	6941      	ldr	r1, [r0, #20]
   1e166:	68a2      	ldr	r2, [r4, #8]
   1e168:	69e0      	ldr	r0, [r4, #28]
   1e16a:	f009 fbec 	bl	27946 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1e16e:	69e3      	ldr	r3, [r4, #28]
   1e170:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1e172:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   1e174:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1e176:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1e178:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1e17a:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1e17c:	bf04      	itt	eq
   1e17e:	6923      	ldreq	r3, [r4, #16]
   1e180:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1e182:	6a23      	ldr	r3, [r4, #32]
   1e184:	3301      	adds	r3, #1
   1e186:	6223      	str	r3, [r4, #32]
   1e188:	2400      	movs	r4, #0
   1e18a:	672c      	str	r4, [r5, #112]	; 0x70
			z_ready_thread(pending_thread);
   1e18c:	f009 f8ed 	bl	2736a <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1e190:	4648      	mov	r0, r9
   1e192:	4641      	mov	r1, r8
   1e194:	f009 f8a5 	bl	272e2 <z_reschedule>
			return 0;
   1e198:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1e19a:	b003      	add	sp, #12
   1e19c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e1a0:	ea56 0307 	orrs.w	r3, r6, r7
   1e1a4:	d00a      	beq.n	1e1bc <z_impl_k_msgq_get+0xa8>
		_current->base.swap_data = data;
   1e1a6:	4b09      	ldr	r3, [pc, #36]	; (1e1cc <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1e1a8:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   1e1aa:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1e1ac:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   1e1ae:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1e1b0:	4641      	mov	r1, r8
   1e1b2:	e9cd 6700 	strd	r6, r7, [sp]
   1e1b6:	f000 fb6d 	bl	1e894 <z_pend_curr>
   1e1ba:	e7ee      	b.n	1e19a <z_impl_k_msgq_get+0x86>
		result = -ENOMSG;
   1e1bc:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   1e1c0:	f388 8811 	msr	BASEPRI, r8
   1e1c4:	f3bf 8f6f 	isb	sy
	return result;
   1e1c8:	e7e7      	b.n	1e19a <z_impl_k_msgq_get+0x86>
   1e1ca:	bf00      	nop
   1e1cc:	2002807c 	.word	0x2002807c

0001e1d0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1e1d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e1d4:	4604      	mov	r4, r0
   1e1d6:	4616      	mov	r6, r2
   1e1d8:	461f      	mov	r7, r3
	__asm__ volatile(
   1e1da:	f04f 0320 	mov.w	r3, #32
   1e1de:	f3ef 8811 	mrs	r8, BASEPRI
   1e1e2:	f383 8811 	msr	BASEPRI, r3
   1e1e6:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1e1ea:	68c3      	ldr	r3, [r0, #12]
   1e1ec:	4a32      	ldr	r2, [pc, #200]	; (1e2b8 <z_impl_k_mutex_lock+0xe8>)
   1e1ee:	b16b      	cbz	r3, 1e20c <z_impl_k_mutex_lock+0x3c>
   1e1f0:	6880      	ldr	r0, [r0, #8]
   1e1f2:	6891      	ldr	r1, [r2, #8]
   1e1f4:	4288      	cmp	r0, r1
   1e1f6:	d019      	beq.n	1e22c <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1e1f8:	ea56 0307 	orrs.w	r3, r6, r7
   1e1fc:	d118      	bne.n	1e230 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1e1fe:	f388 8811 	msr	BASEPRI, r8
   1e202:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1e206:	f06f 000f 	mvn.w	r0, #15
   1e20a:	e00c      	b.n	1e226 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1e20c:	6891      	ldr	r1, [r2, #8]
   1e20e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1e212:	3301      	adds	r3, #1
   1e214:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1e216:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1e218:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1e21a:	60a3      	str	r3, [r4, #8]
   1e21c:	f388 8811 	msr	BASEPRI, r8
   1e220:	f3bf 8f6f 	isb	sy
		return 0;
   1e224:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1e226:	b002      	add	sp, #8
   1e228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1e22c:	6921      	ldr	r1, [r4, #16]
   1e22e:	e7f0      	b.n	1e212 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1e230:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e234:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1e238:	4299      	cmp	r1, r3
   1e23a:	bfa8      	it	ge
   1e23c:	4619      	movge	r1, r3
   1e23e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1e242:	428b      	cmp	r3, r1
   1e244:	dd2c      	ble.n	1e2a0 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1e246:	f000 fb39 	bl	1e8bc <z_set_prio>
   1e24a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1e24c:	4622      	mov	r2, r4
   1e24e:	4641      	mov	r1, r8
   1e250:	e9cd 6700 	strd	r6, r7, [sp]
   1e254:	4819      	ldr	r0, [pc, #100]	; (1e2bc <z_impl_k_mutex_lock+0xec>)
   1e256:	f000 fb1d 	bl	1e894 <z_pend_curr>
	if (got_mutex == 0) {
   1e25a:	2800      	cmp	r0, #0
   1e25c:	d0e3      	beq.n	1e226 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1e25e:	f04f 0320 	mov.w	r3, #32
   1e262:	f3ef 8611 	mrs	r6, BASEPRI
   1e266:	f383 8811 	msr	BASEPRI, r3
   1e26a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1e26e:	6823      	ldr	r3, [r4, #0]
   1e270:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e272:	429c      	cmp	r4, r3
   1e274:	d007      	beq.n	1e286 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1e276:	b133      	cbz	r3, 1e286 <z_impl_k_mutex_lock+0xb6>
   1e278:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1e27c:	4299      	cmp	r1, r3
   1e27e:	bfa8      	it	ge
   1e280:	4619      	movge	r1, r3
   1e282:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1e286:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1e288:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e28c:	4299      	cmp	r1, r3
   1e28e:	d109      	bne.n	1e2a4 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1e290:	b16d      	cbz	r5, 1e2ae <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1e292:	4631      	mov	r1, r6
   1e294:	4809      	ldr	r0, [pc, #36]	; (1e2bc <z_impl_k_mutex_lock+0xec>)
   1e296:	f009 f824 	bl	272e2 <z_reschedule>
	return -EAGAIN;
   1e29a:	f06f 000a 	mvn.w	r0, #10
   1e29e:	e7c2      	b.n	1e226 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1e2a0:	2500      	movs	r5, #0
   1e2a2:	e7d3      	b.n	1e24c <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1e2a4:	f000 fb0a 	bl	1e8bc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1e2a8:	2800      	cmp	r0, #0
   1e2aa:	d1f2      	bne.n	1e292 <z_impl_k_mutex_lock+0xc2>
   1e2ac:	e7f0      	b.n	1e290 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1e2ae:	f386 8811 	msr	BASEPRI, r6
   1e2b2:	f3bf 8f6f 	isb	sy
   1e2b6:	e7f0      	b.n	1e29a <z_impl_k_mutex_lock+0xca>
   1e2b8:	2002807c 	.word	0x2002807c
   1e2bc:	2002af36 	.word	0x2002af36

0001e2c0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1e2c0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   1e2c2:	6883      	ldr	r3, [r0, #8]
{
   1e2c4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1e2c6:	2b00      	cmp	r3, #0
   1e2c8:	d036      	beq.n	1e338 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1e2ca:	4a1e      	ldr	r2, [pc, #120]	; (1e344 <z_impl_k_mutex_unlock+0x84>)
   1e2cc:	6892      	ldr	r2, [r2, #8]
   1e2ce:	4293      	cmp	r3, r2
   1e2d0:	d135      	bne.n	1e33e <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1e2d2:	7bda      	ldrb	r2, [r3, #15]
   1e2d4:	3a01      	subs	r2, #1
   1e2d6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1e2d8:	68c3      	ldr	r3, [r0, #12]
   1e2da:	2b01      	cmp	r3, #1
   1e2dc:	d005      	beq.n	1e2ea <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1e2de:	3b01      	subs	r3, #1
   1e2e0:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1e2e2:	f000 f8f7 	bl	1e4d4 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1e2e6:	2000      	movs	r0, #0
}
   1e2e8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1e2ea:	f04f 0320 	mov.w	r3, #32
   1e2ee:	f3ef 8511 	mrs	r5, BASEPRI
   1e2f2:	f383 8811 	msr	BASEPRI, r3
   1e2f6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1e2fa:	6901      	ldr	r1, [r0, #16]
   1e2fc:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1e2fe:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e302:	4299      	cmp	r1, r3
   1e304:	d001      	beq.n	1e30a <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1e306:	f000 fad9 	bl	1e8bc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1e30a:	4620      	mov	r0, r4
   1e30c:	f009 f8a0 	bl	27450 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1e310:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1e312:	b158      	cbz	r0, 1e32c <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1e314:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1e318:	6122      	str	r2, [r4, #16]
   1e31a:	2200      	movs	r2, #0
   1e31c:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
   1e31e:	f009 f824 	bl	2736a <z_ready_thread>
		z_reschedule(&lock, key);
   1e322:	4629      	mov	r1, r5
   1e324:	4808      	ldr	r0, [pc, #32]	; (1e348 <z_impl_k_mutex_unlock+0x88>)
   1e326:	f008 ffdc 	bl	272e2 <z_reschedule>
   1e32a:	e7da      	b.n	1e2e2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1e32c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1e32e:	f385 8811 	msr	BASEPRI, r5
   1e332:	f3bf 8f6f 	isb	sy
   1e336:	e7d4      	b.n	1e2e2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1e338:	f06f 0015 	mvn.w	r0, #21
   1e33c:	e7d4      	b.n	1e2e8 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1e33e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e342:	e7d1      	b.n	1e2e8 <z_impl_k_mutex_unlock+0x28>
   1e344:	2002807c 	.word	0x2002807c
   1e348:	2002af36 	.word	0x2002af36

0001e34c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1e34c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e34e:	4616      	mov	r6, r2
   1e350:	461f      	mov	r7, r3
	__asm__ volatile(
   1e352:	f04f 0320 	mov.w	r3, #32
   1e356:	f3ef 8511 	mrs	r5, BASEPRI
   1e35a:	f383 8811 	msr	BASEPRI, r3
   1e35e:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1e362:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1e364:	b19c      	cbz	r4, 1e38e <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e366:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e368:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e36a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e36e:	4294      	cmp	r4, r2
	list->head = node;
   1e370:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1e372:	bf08      	it	eq
   1e374:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1e376:	2101      	movs	r1, #1
   1e378:	4620      	mov	r0, r4
   1e37a:	f008 ff67 	bl	2724c <z_queue_node_peek>
   1e37e:	4604      	mov	r4, r0
	__asm__ volatile(
   1e380:	f385 8811 	msr	BASEPRI, r5
   1e384:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1e388:	4620      	mov	r0, r4
   1e38a:	b003      	add	sp, #12
   1e38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e38e:	ea56 0307 	orrs.w	r3, r6, r7
   1e392:	d0f5      	beq.n	1e380 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e394:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1e398:	4629      	mov	r1, r5
   1e39a:	4610      	mov	r0, r2
   1e39c:	e9cd 6700 	strd	r6, r7, [sp]
   1e3a0:	f000 fa78 	bl	1e894 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1e3a4:	2800      	cmp	r0, #0
   1e3a6:	d1ef      	bne.n	1e388 <z_impl_k_queue_get+0x3c>
   1e3a8:	4b01      	ldr	r3, [pc, #4]	; (1e3b0 <z_impl_k_queue_get+0x64>)
   1e3aa:	689b      	ldr	r3, [r3, #8]
   1e3ac:	695c      	ldr	r4, [r3, #20]
   1e3ae:	e7eb      	b.n	1e388 <z_impl_k_queue_get+0x3c>
   1e3b0:	2002807c 	.word	0x2002807c

0001e3b4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1e3b4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1e3b6:	4c08      	ldr	r4, [pc, #32]	; (1e3d8 <z_reset_time_slice+0x24>)
   1e3b8:	6823      	ldr	r3, [r4, #0]
   1e3ba:	b15b      	cbz	r3, 1e3d4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1e3bc:	f7f1 fcfc 	bl	fdb8 <z_clock_elapsed>
   1e3c0:	6822      	ldr	r2, [r4, #0]
   1e3c2:	4906      	ldr	r1, [pc, #24]	; (1e3dc <z_reset_time_slice+0x28>)
   1e3c4:	4410      	add	r0, r2
   1e3c6:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
   1e3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1e3cc:	2100      	movs	r1, #0
   1e3ce:	4610      	mov	r0, r2
   1e3d0:	f009 b945 	b.w	2765e <z_set_timeout_expiry>
}
   1e3d4:	bd10      	pop	{r4, pc}
   1e3d6:	bf00      	nop
   1e3d8:	200280b8 	.word	0x200280b8
   1e3dc:	2002807c 	.word	0x2002807c

0001e3e0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   1e3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e3e2:	460c      	mov	r4, r1
	__asm__ volatile(
   1e3e4:	f04f 0320 	mov.w	r3, #32
   1e3e8:	f3ef 8511 	mrs	r5, BASEPRI
   1e3ec:	f383 8811 	msr	BASEPRI, r3
   1e3f0:	f3bf 8f6f 	isb	sy
   1e3f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1e3f8:	f240 36e7 	movw	r6, #999	; 0x3e7
   1e3fc:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1e3fe:	2200      	movs	r2, #0
   1e400:	fbe1 6700 	umlal	r6, r7, r1, r0
   1e404:	4b09      	ldr	r3, [pc, #36]	; (1e42c <k_sched_time_slice_set+0x4c>)
   1e406:	4630      	mov	r0, r6
   1e408:	611a      	str	r2, [r3, #16]
   1e40a:	4639      	mov	r1, r7
   1e40c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e410:	2300      	movs	r3, #0
   1e412:	f7ee f9d1 	bl	c7b8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1e416:	4b06      	ldr	r3, [pc, #24]	; (1e430 <k_sched_time_slice_set+0x50>)
   1e418:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1e41a:	4b06      	ldr	r3, [pc, #24]	; (1e434 <k_sched_time_slice_set+0x54>)
   1e41c:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1e41e:	f7ff ffc9 	bl	1e3b4 <z_reset_time_slice>
	__asm__ volatile(
   1e422:	f385 8811 	msr	BASEPRI, r5
   1e426:	f3bf 8f6f 	isb	sy
	}
}
   1e42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e42c:	2002807c 	.word	0x2002807c
   1e430:	200280b8 	.word	0x200280b8
   1e434:	200280b4 	.word	0x200280b4

0001e438 <k_sched_lock>:
	__asm__ volatile(
   1e438:	f04f 0320 	mov.w	r3, #32
   1e43c:	f3ef 8111 	mrs	r1, BASEPRI
   1e440:	f383 8811 	msr	BASEPRI, r3
   1e444:	f3bf 8f6f 	isb	sy
   1e448:	4b04      	ldr	r3, [pc, #16]	; (1e45c <k_sched_lock+0x24>)
   1e44a:	689a      	ldr	r2, [r3, #8]
   1e44c:	7bd3      	ldrb	r3, [r2, #15]
   1e44e:	3b01      	subs	r3, #1
   1e450:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1e452:	f381 8811 	msr	BASEPRI, r1
   1e456:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1e45a:	4770      	bx	lr
   1e45c:	2002807c 	.word	0x2002807c

0001e460 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1e460:	4b09      	ldr	r3, [pc, #36]	; (1e488 <_flash_used+0x4>)
   1e462:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1e466:	4282      	cmp	r2, r0
   1e468:	d105      	bne.n	1e476 <z_priq_dumb_remove+0x16>
   1e46a:	689b      	ldr	r3, [r3, #8]
   1e46c:	428b      	cmp	r3, r1
   1e46e:	d102      	bne.n	1e476 <z_priq_dumb_remove+0x16>
   1e470:	7b4b      	ldrb	r3, [r1, #13]
   1e472:	06db      	lsls	r3, r3, #27
   1e474:	d106      	bne.n	1e484 <_flash_used>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1e476:	e9d1 3200 	ldrd	r3, r2, [r1]
   1e47a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1e47c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e47e:	2300      	movs	r3, #0
	node->prev = NULL;
   1e480:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1e484:	4770      	bx	lr
   1e486:	bf00      	nop
   1e488:	2002807c 	.word	0x2002807c

0001e48c <update_cache>:
{
   1e48c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1e48e:	4c10      	ldr	r4, [pc, #64]	; (1e4d0 <update_cache+0x44>)
{
   1e490:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1e492:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1e496:	f008 ff62 	bl	2735e <z_priq_dumb_best>
   1e49a:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1e49c:	68a3      	ldr	r3, [r4, #8]
   1e49e:	7b59      	ldrb	r1, [r3, #13]
   1e4a0:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1e4a2:	bf44      	itt	mi
   1e4a4:	f041 0108 	orrmi.w	r1, r1, #8
   1e4a8:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1e4aa:	b905      	cbnz	r5, 1e4ae <update_cache+0x22>
   1e4ac:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1e4ae:	b94e      	cbnz	r6, 1e4c4 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   1e4b0:	7b5a      	ldrb	r2, [r3, #13]
   1e4b2:	06d2      	lsls	r2, r2, #27
   1e4b4:	d106      	bne.n	1e4c4 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1e4b6:	69aa      	ldr	r2, [r5, #24]
   1e4b8:	b922      	cbnz	r2, 1e4c4 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   1e4ba:	89da      	ldrh	r2, [r3, #14]
   1e4bc:	2a7f      	cmp	r2, #127	; 0x7f
   1e4be:	d901      	bls.n	1e4c4 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   1e4c0:	6263      	str	r3, [r4, #36]	; 0x24
}
   1e4c2:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   1e4c4:	42ab      	cmp	r3, r5
   1e4c6:	d001      	beq.n	1e4cc <update_cache+0x40>
			z_reset_time_slice();
   1e4c8:	f7ff ff74 	bl	1e3b4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1e4cc:	6265      	str	r5, [r4, #36]	; 0x24
}
   1e4ce:	e7f8      	b.n	1e4c2 <update_cache+0x36>
   1e4d0:	2002807c 	.word	0x2002807c

0001e4d4 <k_sched_unlock>:
{
   1e4d4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e4d6:	f04f 0320 	mov.w	r3, #32
   1e4da:	f3ef 8411 	mrs	r4, BASEPRI
   1e4de:	f383 8811 	msr	BASEPRI, r3
   1e4e2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1e4e6:	4b08      	ldr	r3, [pc, #32]	; (1e508 <k_sched_unlock+0x34>)
		update_cache(0);
   1e4e8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1e4ea:	689a      	ldr	r2, [r3, #8]
   1e4ec:	7bd3      	ldrb	r3, [r2, #15]
   1e4ee:	3301      	adds	r3, #1
   1e4f0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1e4f2:	f7ff ffcb 	bl	1e48c <update_cache>
	__asm__ volatile(
   1e4f6:	f384 8811 	msr	BASEPRI, r4
   1e4fa:	f3bf 8f6f 	isb	sy
}
   1e4fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1e502:	f008 bf05 	b.w	27310 <z_reschedule_unlocked>
   1e506:	bf00      	nop
   1e508:	2002807c 	.word	0x2002807c

0001e50c <ready_thread>:
{
   1e50c:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e50e:	7b43      	ldrb	r3, [r0, #13]
   1e510:	06db      	lsls	r3, r3, #27
   1e512:	d127      	bne.n	1e564 <ready_thread+0x58>
	if (z_is_thread_ready(thread)) {
   1e514:	6983      	ldr	r3, [r0, #24]
   1e516:	bb2b      	cbnz	r3, 1e564 <ready_thread+0x58>
	return list->head == list;
   1e518:	4a13      	ldr	r2, [pc, #76]	; (1e568 <ready_thread+0x5c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e51a:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1e51e:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
   1e522:	428b      	cmp	r3, r1
   1e524:	d018      	beq.n	1e558 <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e526:	b1bb      	cbz	r3, 1e558 <ready_thread+0x4c>
	if (thread_1->base.prio < thread_2->base.prio) {
   1e528:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1e52c:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1e530:	42ae      	cmp	r6, r5
   1e532:	dd0c      	ble.n	1e54e <ready_thread+0x42>
	node->prev = successor->prev;
   1e534:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1e536:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1e53a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1e53c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1e53e:	7b43      	ldrb	r3, [r0, #13]
   1e540:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1e544:	7343      	strb	r3, [r0, #13]
}
   1e546:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1e548:	2000      	movs	r0, #0
   1e54a:	f7ff bf9f 	b.w	1e48c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1e54e:	429c      	cmp	r4, r3
   1e550:	d002      	beq.n	1e558 <ready_thread+0x4c>
   1e552:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e554:	2b00      	cmp	r3, #0
   1e556:	d1e9      	bne.n	1e52c <ready_thread+0x20>
	node->prev = list->tail;
   1e558:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1e55c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1e55e:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1e560:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   1e562:	e7ec      	b.n	1e53e <ready_thread+0x32>
}
   1e564:	bc70      	pop	{r4, r5, r6}
   1e566:	4770      	bx	lr
   1e568:	2002807c 	.word	0x2002807c

0001e56c <z_sched_start>:
{
   1e56c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e56e:	f04f 0220 	mov.w	r2, #32
   1e572:	f3ef 8411 	mrs	r4, BASEPRI
   1e576:	f382 8811 	msr	BASEPRI, r2
   1e57a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1e57e:	7b42      	ldrb	r2, [r0, #13]
   1e580:	0751      	lsls	r1, r2, #29
   1e582:	d404      	bmi.n	1e58e <z_sched_start+0x22>
	__asm__ volatile(
   1e584:	f384 8811 	msr	BASEPRI, r4
   1e588:	f3bf 8f6f 	isb	sy
}
   1e58c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1e58e:	f022 0204 	bic.w	r2, r2, #4
   1e592:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1e594:	f7ff ffba 	bl	1e50c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1e598:	4621      	mov	r1, r4
}
   1e59a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1e59e:	4801      	ldr	r0, [pc, #4]	; (1e5a4 <z_sched_start+0x38>)
   1e5a0:	f008 be9f 	b.w	272e2 <z_reschedule>
   1e5a4:	2002af36 	.word	0x2002af36

0001e5a8 <z_move_thread_to_end_of_prio_q>:
{
   1e5a8:	4601      	mov	r1, r0
   1e5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1e5ac:	f04f 0320 	mov.w	r3, #32
   1e5b0:	f3ef 8411 	mrs	r4, BASEPRI
   1e5b4:	f383 8811 	msr	BASEPRI, r3
   1e5b8:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1e5bc:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1e5c0:	2b00      	cmp	r3, #0
   1e5c2:	da02      	bge.n	1e5ca <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1e5c4:	4817      	ldr	r0, [pc, #92]	; (1e624 <z_move_thread_to_end_of_prio_q+0x7c>)
   1e5c6:	f7ff ff4b 	bl	1e460 <z_priq_dumb_remove>
	return list->head == list;
   1e5ca:	4a17      	ldr	r2, [pc, #92]	; (1e628 <z_move_thread_to_end_of_prio_q+0x80>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e5cc:	f102 0028 	add.w	r0, r2, #40	; 0x28
   1e5d0:	e9d2 350a 	ldrd	r3, r5, [r2, #40]	; 0x28
   1e5d4:	4283      	cmp	r3, r0
   1e5d6:	d01f      	beq.n	1e618 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e5d8:	b1f3      	cbz	r3, 1e618 <z_move_thread_to_end_of_prio_q+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1e5da:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1e5de:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1e5e2:	42b7      	cmp	r7, r6
   1e5e4:	dd13      	ble.n	1e60e <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
   1e5e6:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1e5e8:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1e5ec:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1e5ee:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1e5f0:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
   1e5f2:	6890      	ldr	r0, [r2, #8]
   1e5f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1e5f8:	734b      	strb	r3, [r1, #13]
   1e5fa:	1a43      	subs	r3, r0, r1
   1e5fc:	4258      	negs	r0, r3
   1e5fe:	4158      	adcs	r0, r3
   1e600:	f7ff ff44 	bl	1e48c <update_cache>
	__asm__ volatile(
   1e604:	f384 8811 	msr	BASEPRI, r4
   1e608:	f3bf 8f6f 	isb	sy
}
   1e60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1e60e:	429d      	cmp	r5, r3
   1e610:	d002      	beq.n	1e618 <z_move_thread_to_end_of_prio_q+0x70>
   1e612:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e614:	2b00      	cmp	r3, #0
   1e616:	d1e2      	bne.n	1e5de <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   1e618:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
   1e61c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1e61e:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1e620:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1e622:	e7e5      	b.n	1e5f0 <z_move_thread_to_end_of_prio_q+0x48>
   1e624:	200280a4 	.word	0x200280a4
   1e628:	2002807c 	.word	0x2002807c

0001e62c <z_time_slice>:
{
   1e62c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1e62e:	4a15      	ldr	r2, [pc, #84]	; (1e684 <z_time_slice+0x58>)
   1e630:	4b15      	ldr	r3, [pc, #84]	; (1e688 <z_time_slice+0x5c>)
   1e632:	6814      	ldr	r4, [r2, #0]
{
   1e634:	4601      	mov	r1, r0
	if (pending_current == _current) {
   1e636:	6898      	ldr	r0, [r3, #8]
   1e638:	42a0      	cmp	r0, r4
   1e63a:	461c      	mov	r4, r3
   1e63c:	d103      	bne.n	1e646 <z_time_slice+0x1a>
}
   1e63e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1e642:	f7ff beb7 	b.w	1e3b4 <z_reset_time_slice>
	pending_current = NULL;
   1e646:	2500      	movs	r5, #0
   1e648:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1e64a:	4a10      	ldr	r2, [pc, #64]	; (1e68c <z_time_slice+0x60>)
   1e64c:	6812      	ldr	r2, [r2, #0]
   1e64e:	b1b2      	cbz	r2, 1e67e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1e650:	89c2      	ldrh	r2, [r0, #14]
   1e652:	2a7f      	cmp	r2, #127	; 0x7f
   1e654:	d813      	bhi.n	1e67e <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1e656:	4a0e      	ldr	r2, [pc, #56]	; (1e690 <z_time_slice+0x64>)
   1e658:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1e65c:	6812      	ldr	r2, [r2, #0]
   1e65e:	4295      	cmp	r5, r2
   1e660:	db0d      	blt.n	1e67e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   1e662:	4a0c      	ldr	r2, [pc, #48]	; (1e694 <z_time_slice+0x68>)
   1e664:	4290      	cmp	r0, r2
   1e666:	d00a      	beq.n	1e67e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1e668:	6982      	ldr	r2, [r0, #24]
   1e66a:	b942      	cbnz	r2, 1e67e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1e66c:	691a      	ldr	r2, [r3, #16]
   1e66e:	428a      	cmp	r2, r1
   1e670:	dc02      	bgt.n	1e678 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1e672:	f7ff ff99 	bl	1e5a8 <z_move_thread_to_end_of_prio_q>
   1e676:	e7e2      	b.n	1e63e <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   1e678:	1a52      	subs	r2, r2, r1
   1e67a:	611a      	str	r2, [r3, #16]
}
   1e67c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1e67e:	2300      	movs	r3, #0
   1e680:	6123      	str	r3, [r4, #16]
   1e682:	e7fb      	b.n	1e67c <z_time_slice+0x50>
   1e684:	200280b0 	.word	0x200280b0
   1e688:	2002807c 	.word	0x2002807c
   1e68c:	200280b8 	.word	0x200280b8
   1e690:	200280b4 	.word	0x200280b4
   1e694:	200236ac 	.word	0x200236ac

0001e698 <z_impl_k_thread_suspend>:
{
   1e698:	b570      	push	{r4, r5, r6, lr}
   1e69a:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1e69c:	3018      	adds	r0, #24
   1e69e:	f008 ffa8 	bl	275f2 <z_abort_timeout>
	__asm__ volatile(
   1e6a2:	f04f 0320 	mov.w	r3, #32
   1e6a6:	f3ef 8611 	mrs	r6, BASEPRI
   1e6aa:	f383 8811 	msr	BASEPRI, r3
   1e6ae:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1e6b2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1e6b6:	2b00      	cmp	r3, #0
   1e6b8:	da07      	bge.n	1e6ca <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1e6ba:	4621      	mov	r1, r4
   1e6bc:	480e      	ldr	r0, [pc, #56]	; (1e6f8 <z_impl_k_thread_suspend+0x60>)
   1e6be:	f7ff fecf 	bl	1e460 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1e6c2:	7b63      	ldrb	r3, [r4, #13]
   1e6c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e6c8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1e6ca:	4d0c      	ldr	r5, [pc, #48]	; (1e6fc <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1e6cc:	7b63      	ldrb	r3, [r4, #13]
   1e6ce:	68a8      	ldr	r0, [r5, #8]
   1e6d0:	f043 0310 	orr.w	r3, r3, #16
   1e6d4:	7363      	strb	r3, [r4, #13]
   1e6d6:	1b03      	subs	r3, r0, r4
   1e6d8:	4258      	negs	r0, r3
   1e6da:	4158      	adcs	r0, r3
   1e6dc:	f7ff fed6 	bl	1e48c <update_cache>
	__asm__ volatile(
   1e6e0:	f386 8811 	msr	BASEPRI, r6
   1e6e4:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1e6e8:	68ab      	ldr	r3, [r5, #8]
   1e6ea:	42a3      	cmp	r3, r4
   1e6ec:	d103      	bne.n	1e6f6 <z_impl_k_thread_suspend+0x5e>
}
   1e6ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1e6f2:	f008 be0d 	b.w	27310 <z_reschedule_unlocked>
}
   1e6f6:	bd70      	pop	{r4, r5, r6, pc}
   1e6f8:	200280a4 	.word	0x200280a4
   1e6fc:	2002807c 	.word	0x2002807c

0001e700 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1e700:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
   1e702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e706:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1e708:	b103      	cbz	r3, 1e70c <z_thread_single_abort+0xc>
		thread->fn_abort();
   1e70a:	4798      	blx	r3
   1e70c:	f104 0018 	add.w	r0, r4, #24
   1e710:	f008 ff6f 	bl	275f2 <z_abort_timeout>
	__asm__ volatile(
   1e714:	f04f 0320 	mov.w	r3, #32
   1e718:	f3ef 8611 	mrs	r6, BASEPRI
   1e71c:	f383 8811 	msr	BASEPRI, r3
   1e720:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e724:	7b63      	ldrb	r3, [r4, #13]
   1e726:	06d8      	lsls	r0, r3, #27
   1e728:	d123      	bne.n	1e772 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   1e72a:	69a2      	ldr	r2, [r4, #24]
   1e72c:	bb0a      	cbnz	r2, 1e772 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   1e72e:	0619      	lsls	r1, r3, #24
   1e730:	d507      	bpl.n	1e742 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   1e732:	4621      	mov	r1, r4
   1e734:	481e      	ldr	r0, [pc, #120]	; (1e7b0 <z_thread_single_abort+0xb0>)
   1e736:	f7ff fe93 	bl	1e460 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1e73a:	7b63      	ldrb	r3, [r4, #13]
   1e73c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e740:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1e742:	4b1c      	ldr	r3, [pc, #112]	; (1e7b4 <z_thread_single_abort+0xb4>)
   1e744:	6898      	ldr	r0, [r3, #8]
   1e746:	1b02      	subs	r2, r0, r4
   1e748:	4250      	negs	r0, r2
   1e74a:	4150      	adcs	r0, r2
   1e74c:	f7ff fe9e 	bl	1e48c <update_cache>
			waiter->base.pended_on = NULL;
   1e750:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   1e752:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1e754:	f104 0828 	add.w	r8, r4, #40	; 0x28
   1e758:	f043 0308 	orr.w	r3, r3, #8
   1e75c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1e75e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e760:	4545      	cmp	r5, r8
   1e762:	d000      	beq.n	1e766 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1e764:	b995      	cbnz	r5, 1e78c <z_thread_single_abort+0x8c>
	__asm__ volatile(
   1e766:	f386 8811 	msr	BASEPRI, r6
   1e76a:	f3bf 8f6f 	isb	sy
}
   1e76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   1e772:	079b      	lsls	r3, r3, #30
   1e774:	d5ec      	bpl.n	1e750 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1e776:	4621      	mov	r1, r4
   1e778:	68a0      	ldr	r0, [r4, #8]
   1e77a:	f7ff fe71 	bl	1e460 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e77e:	7b63      	ldrb	r3, [r4, #13]
   1e780:	f023 0302 	bic.w	r3, r3, #2
   1e784:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1e786:	2300      	movs	r3, #0
   1e788:	60a3      	str	r3, [r4, #8]
   1e78a:	e7e1      	b.n	1e750 <z_thread_single_abort+0x50>
   1e78c:	f105 0018 	add.w	r0, r5, #24
   1e790:	f008 ff2f 	bl	275f2 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1e794:	68a8      	ldr	r0, [r5, #8]
   1e796:	4629      	mov	r1, r5
   1e798:	f7ff fe62 	bl	1e460 <z_priq_dumb_remove>
   1e79c:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1e79e:	4628      	mov	r0, r5
   1e7a0:	f023 0302 	bic.w	r3, r3, #2
   1e7a4:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1e7a6:	60af      	str	r7, [r5, #8]
   1e7a8:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
   1e7aa:	f7ff feaf 	bl	1e50c <ready_thread>
   1e7ae:	e7d6      	b.n	1e75e <z_thread_single_abort+0x5e>
   1e7b0:	200280a4 	.word	0x200280a4
   1e7b4:	2002807c 	.word	0x2002807c

0001e7b8 <unready_thread>:
{
   1e7b8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1e7ba:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1e7be:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1e7c0:	2b00      	cmp	r3, #0
   1e7c2:	da06      	bge.n	1e7d2 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1e7c4:	4807      	ldr	r0, [pc, #28]	; (1e7e4 <unready_thread+0x2c>)
   1e7c6:	f7ff fe4b 	bl	1e460 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1e7ca:	7b4b      	ldrb	r3, [r1, #13]
   1e7cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e7d0:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1e7d2:	4b05      	ldr	r3, [pc, #20]	; (1e7e8 <unready_thread+0x30>)
   1e7d4:	6898      	ldr	r0, [r3, #8]
   1e7d6:	1a43      	subs	r3, r0, r1
   1e7d8:	4258      	negs	r0, r3
   1e7da:	4158      	adcs	r0, r3
}
   1e7dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1e7e0:	f7ff be54 	b.w	1e48c <update_cache>
   1e7e4:	200280a4 	.word	0x200280a4
   1e7e8:	2002807c 	.word	0x2002807c

0001e7ec <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   1e7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7ee:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   1e7f0:	f008 ff50 	bl	27694 <z_tick_get_32>
   1e7f4:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1e7f6:	f04f 0320 	mov.w	r3, #32
   1e7fa:	f3ef 8711 	mrs	r7, BASEPRI
   1e7fe:	f383 8811 	msr	BASEPRI, r3
   1e802:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1e806:	4e0d      	ldr	r6, [pc, #52]	; (1e83c <z_tick_sleep.part.0+0x50>)
   1e808:	4b0d      	ldr	r3, [pc, #52]	; (1e840 <z_tick_sleep.part.0+0x54>)
   1e80a:	68b0      	ldr	r0, [r6, #8]
   1e80c:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1e80e:	f008 fde7 	bl	273e0 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
   1e812:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1e814:	490b      	ldr	r1, [pc, #44]	; (1e844 <z_tick_sleep.part.0+0x58>)
   1e816:	462a      	mov	r2, r5
   1e818:	17eb      	asrs	r3, r5, #31
   1e81a:	3018      	adds	r0, #24
   1e81c:	f000 faf0 	bl	1ee00 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1e820:	68b2      	ldr	r2, [r6, #8]
	ret = arch_swap(key);
   1e822:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1e824:	7b53      	ldrb	r3, [r2, #13]
   1e826:	f043 0310 	orr.w	r3, r3, #16
   1e82a:	7353      	strb	r3, [r2, #13]
   1e82c:	f7f1 faf8 	bl	fe20 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1e830:	f008 ff30 	bl	27694 <z_tick_get_32>
   1e834:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1e836:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1e83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e83c:	2002807c 	.word	0x2002807c
   1e840:	200280b0 	.word	0x200280b0
   1e844:	0002738b 	.word	0x0002738b

0001e848 <pend>:
{
   1e848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e84c:	4606      	mov	r6, r0
   1e84e:	4614      	mov	r4, r2
   1e850:	461d      	mov	r5, r3
   1e852:	f04f 0320 	mov.w	r3, #32
   1e856:	f3ef 8711 	mrs	r7, BASEPRI
   1e85a:	f383 8811 	msr	BASEPRI, r3
   1e85e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1e862:	f008 fdcd 	bl	27400 <add_to_waitq_locked>
	__asm__ volatile(
   1e866:	f387 8811 	msr	BASEPRI, r7
   1e86a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e86e:	1c6b      	adds	r3, r5, #1
   1e870:	bf08      	it	eq
   1e872:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1e876:	d008      	beq.n	1e88a <pend+0x42>
   1e878:	4622      	mov	r2, r4
   1e87a:	462b      	mov	r3, r5
   1e87c:	f106 0018 	add.w	r0, r6, #24
   1e880:	4903      	ldr	r1, [pc, #12]	; (1e890 <pend+0x48>)
}
   1e882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e886:	f000 babb 	b.w	1ee00 <z_add_timeout>
   1e88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e88e:	bf00      	nop
   1e890:	0002738b 	.word	0x0002738b

0001e894 <z_pend_curr>:
{
   1e894:	b510      	push	{r4, lr}
   1e896:	460c      	mov	r4, r1
	pending_current = _current;
   1e898:	4b06      	ldr	r3, [pc, #24]	; (1e8b4 <z_pend_curr+0x20>)
{
   1e89a:	4611      	mov	r1, r2
	pending_current = _current;
   1e89c:	6898      	ldr	r0, [r3, #8]
   1e89e:	4b06      	ldr	r3, [pc, #24]	; (1e8b8 <z_pend_curr+0x24>)
   1e8a0:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1e8a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1e8a6:	f7ff ffcf 	bl	1e848 <pend>
   1e8aa:	4620      	mov	r0, r4
}
   1e8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e8b0:	f7f1 bab6 	b.w	fe20 <arch_swap>
   1e8b4:	2002807c 	.word	0x2002807c
   1e8b8:	200280b0 	.word	0x200280b0

0001e8bc <z_set_prio>:
{
   1e8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e8be:	4604      	mov	r4, r0
	__asm__ volatile(
   1e8c0:	f04f 0320 	mov.w	r3, #32
   1e8c4:	f3ef 8711 	mrs	r7, BASEPRI
   1e8c8:	f383 8811 	msr	BASEPRI, r3
   1e8cc:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e8d0:	7b43      	ldrb	r3, [r0, #13]
   1e8d2:	b24e      	sxtb	r6, r1
   1e8d4:	06db      	lsls	r3, r3, #27
   1e8d6:	d12c      	bne.n	1e932 <z_set_prio+0x76>
		if (need_sched) {
   1e8d8:	6983      	ldr	r3, [r0, #24]
   1e8da:	bb53      	cbnz	r3, 1e932 <z_set_prio+0x76>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1e8dc:	4d16      	ldr	r5, [pc, #88]	; (1e938 <z_set_prio+0x7c>)
   1e8de:	4621      	mov	r1, r4
   1e8e0:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1e8e4:	f7ff fdbc 	bl	1e460 <z_priq_dumb_remove>
	return list->head == list;
   1e8e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e8ea:	462a      	mov	r2, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e8ec:	4283      	cmp	r3, r0
				thread->base.prio = prio;
   1e8ee:	73a6      	strb	r6, [r4, #14]
   1e8f0:	d018      	beq.n	1e924 <z_set_prio+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e8f2:	b1bb      	cbz	r3, 1e924 <z_set_prio+0x68>
   1e8f4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1e8f6:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1e8fa:	42b5      	cmp	r5, r6
   1e8fc:	dd0d      	ble.n	1e91a <z_set_prio+0x5e>
	node->prev = successor->prev;
   1e8fe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1e900:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1e904:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1e906:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1e908:	2001      	movs	r0, #1
   1e90a:	f7ff fdbf 	bl	1e48c <update_cache>
   1e90e:	2001      	movs	r0, #1
	__asm__ volatile(
   1e910:	f387 8811 	msr	BASEPRI, r7
   1e914:	f3bf 8f6f 	isb	sy
}
   1e918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1e91a:	428b      	cmp	r3, r1
   1e91c:	d002      	beq.n	1e924 <z_set_prio+0x68>
   1e91e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e920:	2b00      	cmp	r3, #0
   1e922:	d1e8      	bne.n	1e8f6 <z_set_prio+0x3a>
	node->prev = list->tail;
   1e924:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1e926:	6020      	str	r0, [r4, #0]
	node->prev = list->tail;
   1e928:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1e92a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1e92c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e92e:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   1e930:	e7ea      	b.n	1e908 <z_set_prio+0x4c>
			thread->base.prio = prio;
   1e932:	2000      	movs	r0, #0
   1e934:	73a6      	strb	r6, [r4, #14]
   1e936:	e7eb      	b.n	1e910 <z_set_prio+0x54>
   1e938:	2002807c 	.word	0x2002807c

0001e93c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1e93c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1e93e:	4b04      	ldr	r3, [pc, #16]	; (1e950 <z_sched_init+0x14>)
   1e940:	4608      	mov	r0, r1
   1e942:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1e946:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1e94a:	f7ff bd49 	b.w	1e3e0 <k_sched_time_slice_set>
   1e94e:	bf00      	nop
   1e950:	2002807c 	.word	0x2002807c

0001e954 <z_impl_k_yield>:
{
   1e954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1e956:	4c23      	ldr	r4, [pc, #140]	; (1e9e4 <z_impl_k_yield+0x90>)
   1e958:	4b23      	ldr	r3, [pc, #140]	; (1e9e8 <z_impl_k_yield+0x94>)
   1e95a:	68a2      	ldr	r2, [r4, #8]
   1e95c:	429a      	cmp	r2, r3
   1e95e:	d028      	beq.n	1e9b2 <z_impl_k_yield+0x5e>
	__asm__ volatile(
   1e960:	f04f 0320 	mov.w	r3, #32
   1e964:	f3ef 8511 	mrs	r5, BASEPRI
   1e968:	f383 8811 	msr	BASEPRI, r3
   1e96c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1e970:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1e974:	68a1      	ldr	r1, [r4, #8]
   1e976:	f7ff fd73 	bl	1e460 <z_priq_dumb_remove>
	return list->head == list;
   1e97a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1e97c:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e97e:	4282      	cmp	r2, r0
   1e980:	d028      	beq.n	1e9d4 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e982:	b33a      	cbz	r2, 1e9d4 <z_impl_k_yield+0x80>
   1e984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1e986:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1e98a:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1e98e:	428f      	cmp	r7, r1
   1e990:	dd1b      	ble.n	1e9ca <z_impl_k_yield+0x76>
	node->prev = successor->prev;
   1e992:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1e994:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1e998:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1e99a:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1e99c:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   1e99e:	2001      	movs	r0, #1
   1e9a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1e9a4:	735a      	strb	r2, [r3, #13]
   1e9a6:	f7ff fd71 	bl	1e48c <update_cache>
	__asm__ volatile(
   1e9aa:	f385 8811 	msr	BASEPRI, r5
   1e9ae:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e9b2:	f04f 0320 	mov.w	r3, #32
   1e9b6:	f3ef 8011 	mrs	r0, BASEPRI
   1e9ba:	f383 8811 	msr	BASEPRI, r3
   1e9be:	f3bf 8f6f 	isb	sy
}
   1e9c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e9c6:	f7f1 ba2b 	b.w	fe20 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1e9ca:	4296      	cmp	r6, r2
   1e9cc:	d002      	beq.n	1e9d4 <z_impl_k_yield+0x80>
   1e9ce:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e9d0:	2a00      	cmp	r2, #0
   1e9d2:	d1da      	bne.n	1e98a <z_impl_k_yield+0x36>
	node->prev = list->tail;
   1e9d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   1e9d6:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
   1e9d8:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1e9da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1e9dc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1e9de:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   1e9e0:	e7dc      	b.n	1e99c <z_impl_k_yield+0x48>
   1e9e2:	bf00      	nop
   1e9e4:	2002807c 	.word	0x2002807c
   1e9e8:	200236ac 	.word	0x200236ac

0001e9ec <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1e9ec:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e9ee:	3301      	adds	r3, #1
   1e9f0:	bf08      	it	eq
   1e9f2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1e9f6:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e9f8:	d106      	bne.n	1ea08 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1e9fa:	4b0b      	ldr	r3, [pc, #44]	; (1ea28 <z_impl_k_sleep+0x3c>)
   1e9fc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1e9fe:	f7ff fe4b 	bl	1e698 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
   1ea02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1ea06:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   1ea08:	4604      	mov	r4, r0
	if (ticks == 0) {
   1ea0a:	b948      	cbnz	r0, 1ea20 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   1ea0c:	f7ff ffa2 	bl	1e954 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   1ea10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1ea14:	fb84 3400 	smull	r3, r4, r4, r0
   1ea18:	0bd8      	lsrs	r0, r3, #15
   1ea1a:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1ea1e:	e7f2      	b.n	1ea06 <z_impl_k_sleep+0x1a>
   1ea20:	f7ff fee4 	bl	1e7ec <z_tick_sleep.part.0>
   1ea24:	4604      	mov	r4, r0
   1ea26:	e7f3      	b.n	1ea10 <z_impl_k_sleep+0x24>
   1ea28:	2002807c 	.word	0x2002807c

0001ea2c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1ea2c:	4b01      	ldr	r3, [pc, #4]	; (1ea34 <z_impl_k_current_get+0x8>)
   1ea2e:	6898      	ldr	r0, [r3, #8]
   1ea30:	4770      	bx	lr
   1ea32:	bf00      	nop
   1ea34:	2002807c 	.word	0x2002807c

0001ea38 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1ea38:	b538      	push	{r3, r4, r5, lr}
   1ea3a:	4604      	mov	r4, r0
   1ea3c:	f04f 0320 	mov.w	r3, #32
   1ea40:	f3ef 8511 	mrs	r5, BASEPRI
   1ea44:	f383 8811 	msr	BASEPRI, r3
   1ea48:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1ea4c:	f008 fd00 	bl	27450 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   1ea50:	b148      	cbz	r0, 1ea66 <z_impl_k_sem_give+0x2e>
   1ea52:	2200      	movs	r2, #0
   1ea54:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1ea56:	f008 fc88 	bl	2736a <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1ea5a:	4629      	mov	r1, r5
}
   1ea5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1ea60:	4807      	ldr	r0, [pc, #28]	; (1ea80 <z_impl_k_sem_give+0x48>)
   1ea62:	f008 bc3e 	b.w	272e2 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1ea66:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1ea6a:	429a      	cmp	r2, r3
   1ea6c:	bf18      	it	ne
   1ea6e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1ea70:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1ea72:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1ea74:	f104 0010 	add.w	r0, r4, #16
   1ea78:	f008 ff32 	bl	278e0 <z_handle_obj_poll_events>
}
   1ea7c:	e7ed      	b.n	1ea5a <z_impl_k_sem_give+0x22>
   1ea7e:	bf00      	nop
   1ea80:	2002af36 	.word	0x2002af36

0001ea84 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1ea84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ea86:	4614      	mov	r4, r2
   1ea88:	461d      	mov	r5, r3
   1ea8a:	f04f 0320 	mov.w	r3, #32
   1ea8e:	f3ef 8111 	mrs	r1, BASEPRI
   1ea92:	f383 8811 	msr	BASEPRI, r3
   1ea96:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1ea9a:	6883      	ldr	r3, [r0, #8]
   1ea9c:	b143      	cbz	r3, 1eab0 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1ea9e:	3b01      	subs	r3, #1
   1eaa0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1eaa2:	f381 8811 	msr	BASEPRI, r1
   1eaa6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1eaaa:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1eaac:	b003      	add	sp, #12
   1eaae:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1eab0:	ea54 0305 	orrs.w	r3, r4, r5
   1eab4:	d106      	bne.n	1eac4 <z_impl_k_sem_take+0x40>
   1eab6:	f381 8811 	msr	BASEPRI, r1
   1eaba:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1eabe:	f06f 000f 	mvn.w	r0, #15
   1eac2:	e7f3      	b.n	1eaac <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1eac4:	4602      	mov	r2, r0
   1eac6:	e9cd 4500 	strd	r4, r5, [sp]
   1eaca:	4802      	ldr	r0, [pc, #8]	; (1ead4 <z_impl_k_sem_take+0x50>)
   1eacc:	f7ff fee2 	bl	1e894 <z_pend_curr>
	return ret;
   1ead0:	e7ec      	b.n	1eaac <z_impl_k_sem_take+0x28>
   1ead2:	bf00      	nop
   1ead4:	2002af36 	.word	0x2002af36

0001ead8 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1ead8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1eada:	4c08      	ldr	r4, [pc, #32]	; (1eafc <k_sys_work_q_init+0x24>)
   1eadc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1eae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1eae4:	4620      	mov	r0, r4
   1eae6:	4906      	ldr	r1, [pc, #24]	; (1eb00 <k_sys_work_q_init+0x28>)
   1eae8:	f000 f8c2 	bl	1ec70 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1eaec:	4905      	ldr	r1, [pc, #20]	; (1eb04 <k_sys_work_q_init+0x2c>)
   1eaee:	f104 0018 	add.w	r0, r4, #24
   1eaf2:	f008 fd02 	bl	274fa <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1eaf6:	2000      	movs	r0, #0
   1eaf8:	bd10      	pop	{r4, pc}
   1eafa:	bf00      	nop
   1eafc:	200280bc 	.word	0x200280bc
   1eb00:	2002f398 	.word	0x2002f398
   1eb04:	000296b5 	.word	0x000296b5

0001eb08 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1eb08:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
   1eb0a:	f100 0528 	add.w	r5, r0, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1eb0e:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
   1eb12:	2504      	movs	r5, #4
   1eb14:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   1eb16:	2500      	movs	r5, #0
{
   1eb18:	4604      	mov	r4, r0
   1eb1a:	b087      	sub	sp, #28
   1eb1c:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1eb20:	e9cd 6703 	strd	r6, r7, [sp, #12]
	thread_base->prio = priority;
   1eb24:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1eb26:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	node->prev = NULL;
   1eb28:	e9c0 5506 	strd	r5, r5, [r0, #24]
   1eb2c:	9602      	str	r6, [sp, #8]
   1eb2e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	thread_base->user_options = (u8_t)options;
   1eb30:	7307      	strb	r7, [r0, #12]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1eb32:	9601      	str	r6, [sp, #4]
   1eb34:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   1eb36:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1eb38:	9600      	str	r6, [sp, #0]
   1eb3a:	f7f1 f9bf 	bl	febc <arch_new_thread>
	if (!_current) {
   1eb3e:	4b04      	ldr	r3, [pc, #16]	; (1eb50 <z_setup_new_thread+0x48>)
	new_thread->fn_abort = NULL;
   1eb40:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
   1eb44:	689b      	ldr	r3, [r3, #8]
   1eb46:	b103      	cbz	r3, 1eb4a <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
   1eb48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1eb4a:	66a3      	str	r3, [r4, #104]	; 0x68
}
   1eb4c:	b007      	add	sp, #28
   1eb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eb50:	2002807c 	.word	0x2002807c

0001eb54 <z_impl_k_thread_create>:
{
   1eb54:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1eb56:	2500      	movs	r5, #0
{
   1eb58:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1eb5a:	9505      	str	r5, [sp, #20]
   1eb5c:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   1eb5e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1eb62:	9504      	str	r5, [sp, #16]
   1eb64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   1eb66:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1eb68:	9503      	str	r5, [sp, #12]
   1eb6a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1eb6c:	9502      	str	r5, [sp, #8]
   1eb6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1eb70:	9501      	str	r5, [sp, #4]
   1eb72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1eb74:	9500      	str	r5, [sp, #0]
   1eb76:	f7ff ffc7 	bl	1eb08 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1eb7a:	1c7b      	adds	r3, r7, #1
   1eb7c:	bf08      	it	eq
   1eb7e:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1eb82:	d005      	beq.n	1eb90 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1eb84:	ea56 0307 	orrs.w	r3, r6, r7
   1eb88:	d105      	bne.n	1eb96 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1eb8a:	4620      	mov	r0, r4
   1eb8c:	f7ff fcee 	bl	1e56c <z_sched_start>
}
   1eb90:	4620      	mov	r0, r4
   1eb92:	b007      	add	sp, #28
   1eb94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eb96:	4632      	mov	r2, r6
   1eb98:	463b      	mov	r3, r7
   1eb9a:	4903      	ldr	r1, [pc, #12]	; (1eba8 <z_impl_k_thread_create+0x54>)
   1eb9c:	f104 0018 	add.w	r0, r4, #24
   1eba0:	f000 f92e 	bl	1ee00 <z_add_timeout>
   1eba4:	e7f4      	b.n	1eb90 <z_impl_k_thread_create+0x3c>
   1eba6:	bf00      	nop
   1eba8:	0002738b 	.word	0x0002738b

0001ebac <z_init_static_threads>:
{
   1ebac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1ebb0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1ec68 <z_init_static_threads+0xbc>
   1ebb4:	4d2b      	ldr	r5, [pc, #172]	; (1ec64 <z_init_static_threads+0xb8>)
   1ebb6:	46c8      	mov	r8, r9
{
   1ebb8:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1ebba:	454d      	cmp	r5, r9
   1ebbc:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1ebc0:	d30d      	bcc.n	1ebde <z_init_static_threads+0x32>
	k_sched_lock();
   1ebc2:	f7ff fc39 	bl	1e438 <k_sched_lock>
			return (u32_t)((t * to_hz + off) / from_hz);
   1ebc6:	f44f 4900 	mov.w	r9, #32768	; 0x8000
	_FOREACH_STATIC_THREAD(thread_data) {
   1ebca:	4c26      	ldr	r4, [pc, #152]	; (1ec64 <z_init_static_threads+0xb8>)
   1ebcc:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1ec6c <z_init_static_threads+0xc0>
   1ebd0:	4544      	cmp	r4, r8
   1ebd2:	d321      	bcc.n	1ec18 <z_init_static_threads+0x6c>
}
   1ebd4:	b007      	add	sp, #28
   1ebd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1ebda:	f7ff bc7b 	b.w	1e4d4 <k_sched_unlock>
		z_setup_new_thread(
   1ebde:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1ebe2:	9305      	str	r3, [sp, #20]
   1ebe4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1ebe8:	9304      	str	r3, [sp, #16]
   1ebea:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1ebee:	9303      	str	r3, [sp, #12]
   1ebf0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1ebf4:	9302      	str	r3, [sp, #8]
   1ebf6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1ebfa:	9301      	str	r3, [sp, #4]
   1ebfc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1ec00:	9300      	str	r3, [sp, #0]
   1ec02:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1ec06:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1ec0a:	f7ff ff7d 	bl	1eb08 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1ec0e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1ec12:	655d      	str	r5, [r3, #84]	; 0x54
   1ec14:	4625      	mov	r5, r4
   1ec16:	e7d0      	b.n	1ebba <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1ec18:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1ec1a:	1c4b      	adds	r3, r1, #1
   1ec1c:	d017      	beq.n	1ec4e <z_init_static_threads+0xa2>
   1ec1e:	f240 3be7 	movw	fp, #999	; 0x3e7
   1ec22:	f04f 0c00 	mov.w	ip, #0
					    K_MSEC(thread_data->init_delay));
   1ec26:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1ec2a:	fbc9 bc01 	smlal	fp, ip, r9, r1
   1ec2e:	2300      	movs	r3, #0
   1ec30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ec34:	4658      	mov	r0, fp
   1ec36:	4661      	mov	r1, ip
   1ec38:	f7ed fdbe 	bl	c7b8 <__aeabi_uldivmod>
   1ec3c:	2700      	movs	r7, #0
   1ec3e:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ec40:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
   1ec44:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ec46:	d104      	bne.n	1ec52 <z_init_static_threads+0xa6>
	z_sched_start(thread);
   1ec48:	4628      	mov	r0, r5
   1ec4a:	f7ff fc8f 	bl	1e56c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ec4e:	3430      	adds	r4, #48	; 0x30
   1ec50:	e7be      	b.n	1ebd0 <z_init_static_threads+0x24>
   1ec52:	4602      	mov	r2, r0
   1ec54:	463b      	mov	r3, r7
   1ec56:	4651      	mov	r1, sl
   1ec58:	f105 0018 	add.w	r0, r5, #24
   1ec5c:	f000 f8d0 	bl	1ee00 <z_add_timeout>
   1ec60:	e7f5      	b.n	1ec4e <z_init_static_threads+0xa2>
   1ec62:	bf00      	nop
   1ec64:	2002085c 	.word	0x2002085c
   1ec68:	2002085c 	.word	0x2002085c
   1ec6c:	0002738b 	.word	0x0002738b

0001ec70 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1ec70:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1ec74:	b08a      	sub	sp, #40	; 0x28
   1ec76:	4604      	mov	r4, r0
   1ec78:	461d      	mov	r5, r3
   1ec7a:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   1ec7e:	f008 faf1 	bl	27264 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1ec82:	f104 0618 	add.w	r6, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ec86:	2000      	movs	r0, #0
   1ec88:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   1ec8c:	f04f 0800 	mov.w	r8, #0
   1ec90:	f04f 0900 	mov.w	r9, #0
   1ec94:	e9cd 5003 	strd	r5, r0, [sp, #12]
   1ec98:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1ec9c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1eca0:	4630      	mov	r0, r6
   1eca2:	4b05      	ldr	r3, [pc, #20]	; (1ecb8 <k_work_q_start+0x48>)
   1eca4:	9400      	str	r4, [sp, #0]
   1eca6:	f7ff ff55 	bl	1eb54 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1ecaa:	4630      	mov	r0, r6
   1ecac:	4903      	ldr	r1, [pc, #12]	; (1ecbc <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1ecae:	b00a      	add	sp, #40	; 0x28
   1ecb0:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   1ecb4:	f008 bc21 	b.w	274fa <z_impl_k_thread_name_set>
   1ecb8:	00022329 	.word	0x00022329
   1ecbc:	000296be 	.word	0x000296be

0001ecc0 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1ecc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ecc4:	4606      	mov	r6, r0
   1ecc6:	460d      	mov	r5, r1
   1ecc8:	4690      	mov	r8, r2
   1ecca:	4699      	mov	r9, r3
	__asm__ volatile(
   1eccc:	f04f 0320 	mov.w	r3, #32
   1ecd0:	f3ef 8711 	mrs	r7, BASEPRI
   1ecd4:	f383 8811 	msr	BASEPRI, r3
   1ecd8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1ecdc:	69cb      	ldr	r3, [r1, #28]
   1ecde:	b17b      	cbz	r3, 1ed00 <k_delayed_work_submit_to_queue+0x40>
   1ece0:	4283      	cmp	r3, r0
   1ece2:	d128      	bne.n	1ed36 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1ece4:	4628      	mov	r0, r5
   1ece6:	f008 fc24 	bl	27532 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   1ecea:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   1ecee:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1ecf0:	d008      	beq.n	1ed04 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1ecf2:	2800      	cmp	r0, #0
   1ecf4:	da07      	bge.n	1ed06 <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1ecf6:	f387 8811 	msr	BASEPRI, r7
   1ecfa:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1ecfe:	e00f      	b.n	1ed20 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1ed00:	2800      	cmp	r0, #0
   1ed02:	d0ef      	beq.n	1ece4 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1ed04:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ed06:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1ed0a:	61ee      	str	r6, [r5, #28]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ed0c:	d10b      	bne.n	1ed26 <k_delayed_work_submit_to_queue+0x66>
   1ed0e:	f387 8811 	msr	BASEPRI, r7
   1ed12:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1ed16:	4629      	mov	r1, r5
   1ed18:	4630      	mov	r0, r6
   1ed1a:	f008 fbf1 	bl	27500 <k_work_submit_to_queue>
		return 0;
   1ed1e:	2400      	movs	r4, #0
}
   1ed20:	4620      	mov	r0, r4
   1ed22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1ed26:	4642      	mov	r2, r8
   1ed28:	464b      	mov	r3, r9
   1ed2a:	4904      	ldr	r1, [pc, #16]	; (1ed3c <k_delayed_work_submit_to_queue+0x7c>)
   1ed2c:	f105 000c 	add.w	r0, r5, #12
   1ed30:	f000 f866 	bl	1ee00 <z_add_timeout>
   1ed34:	e7df      	b.n	1ecf6 <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1ed36:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1ed3a:	e7dc      	b.n	1ecf6 <k_delayed_work_submit_to_queue+0x36>
   1ed3c:	00027529 	.word	0x00027529

0001ed40 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1ed40:	4b03      	ldr	r3, [pc, #12]	; (1ed50 <elapsed+0x10>)
   1ed42:	681b      	ldr	r3, [r3, #0]
   1ed44:	b90b      	cbnz	r3, 1ed4a <elapsed+0xa>
   1ed46:	f7f1 b837 	b.w	fdb8 <z_clock_elapsed>
}
   1ed4a:	2000      	movs	r0, #0
   1ed4c:	4770      	bx	lr
   1ed4e:	bf00      	nop
   1ed50:	2002818c 	.word	0x2002818c

0001ed54 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ed54:	6803      	ldr	r3, [r0, #0]
   1ed56:	b140      	cbz	r0, 1ed6a <remove_timeout+0x16>
   1ed58:	4a07      	ldr	r2, [pc, #28]	; (1ed78 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1ed5a:	6852      	ldr	r2, [r2, #4]
   1ed5c:	4290      	cmp	r0, r2
   1ed5e:	d004      	beq.n	1ed6a <remove_timeout+0x16>
	if (next(t) != NULL) {
   1ed60:	b11b      	cbz	r3, 1ed6a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1ed62:	689a      	ldr	r2, [r3, #8]
   1ed64:	6881      	ldr	r1, [r0, #8]
   1ed66:	440a      	add	r2, r1
   1ed68:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1ed6a:	6842      	ldr	r2, [r0, #4]
   1ed6c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1ed6e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ed70:	2300      	movs	r3, #0
	node->prev = NULL;
   1ed72:	e9c0 3300 	strd	r3, r3, [r0]
}
   1ed76:	4770      	bx	lr
   1ed78:	200205c0 	.word	0x200205c0

0001ed7c <next_timeout>:
	return list->head == list;
   1ed7c:	4b0b      	ldr	r3, [pc, #44]	; (1edac <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1ed7e:	b510      	push	{r4, lr}
   1ed80:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ed82:	429c      	cmp	r4, r3
   1ed84:	bf08      	it	eq
   1ed86:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1ed88:	f7ff ffda 	bl	1ed40 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1ed8c:	b154      	cbz	r4, 1eda4 <next_timeout+0x28>
   1ed8e:	68a3      	ldr	r3, [r4, #8]
   1ed90:	1a18      	subs	r0, r3, r0
   1ed92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1ed96:	4b06      	ldr	r3, [pc, #24]	; (1edb0 <next_timeout+0x34>)
   1ed98:	691b      	ldr	r3, [r3, #16]
   1ed9a:	b113      	cbz	r3, 1eda2 <next_timeout+0x26>
   1ed9c:	4298      	cmp	r0, r3
   1ed9e:	bfa8      	it	ge
   1eda0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1eda2:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1eda4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1eda8:	e7f5      	b.n	1ed96 <next_timeout+0x1a>
   1edaa:	bf00      	nop
   1edac:	200205c0 	.word	0x200205c0
   1edb0:	2002807c 	.word	0x2002807c

0001edb4 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(struct _timeout *timeout)
{
   1edb4:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   1edb6:	6803      	ldr	r3, [r0, #0]
   1edb8:	b1e3      	cbz	r3, 1edf4 <timeout_rem+0x40>
	return list->head == list;
   1edba:	4a10      	ldr	r2, [pc, #64]	; (1edfc <timeout_rem+0x48>)
   1edbc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1edbe:	4293      	cmp	r3, r2
   1edc0:	d015      	beq.n	1edee <timeout_rem+0x3a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1edc2:	2400      	movs	r4, #0
   1edc4:	2500      	movs	r5, #0
   1edc6:	6852      	ldr	r2, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   1edc8:	b93b      	cbnz	r3, 1edda <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   1edca:	f7ff ffb9 	bl	1ed40 <elapsed>
   1edce:	1a24      	subs	r4, r4, r0
   1edd0:	eb65 75e0 	sbc.w	r5, r5, r0, asr #31
}
   1edd4:	4620      	mov	r0, r4
   1edd6:	4629      	mov	r1, r5
   1edd8:	bd38      	pop	{r3, r4, r5, pc}
		ticks += t->dticks;
   1edda:	6899      	ldr	r1, [r3, #8]
   1eddc:	1864      	adds	r4, r4, r1
   1edde:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		if (timeout == t) {
   1ede2:	4283      	cmp	r3, r0
   1ede4:	d0f1      	beq.n	1edca <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   1ede6:	4293      	cmp	r3, r2
   1ede8:	d0ef      	beq.n	1edca <timeout_rem+0x16>
   1edea:	681b      	ldr	r3, [r3, #0]
   1edec:	e7ec      	b.n	1edc8 <timeout_rem+0x14>
   1edee:	2400      	movs	r4, #0
   1edf0:	2500      	movs	r5, #0
   1edf2:	e7ea      	b.n	1edca <timeout_rem+0x16>
		return 0;
   1edf4:	2400      	movs	r4, #0
   1edf6:	2500      	movs	r5, #0
   1edf8:	e7ec      	b.n	1edd4 <timeout_rem+0x20>
   1edfa:	bf00      	nop
   1edfc:	200205c0 	.word	0x200205c0

0001ee00 <z_add_timeout>:
{
   1ee00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee04:	9101      	str	r1, [sp, #4]
   1ee06:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ee08:	1c4b      	adds	r3, r1, #1
   1ee0a:	bf08      	it	eq
   1ee0c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1ee10:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ee12:	d061      	beq.n	1eed8 <z_add_timeout+0xd8>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1ee14:	f06f 0301 	mvn.w	r3, #1
   1ee18:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	k_ticks_t ticks = timeout.ticks + 1;
   1ee1c:	1c54      	adds	r4, r2, #1
   1ee1e:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1ee22:	ebb3 0804 	subs.w	r8, r3, r4
   1ee26:	eb6b 0905 	sbc.w	r9, fp, r5
   1ee2a:	f1b8 0f00 	cmp.w	r8, #0
   1ee2e:	f179 0300 	sbcs.w	r3, r9, #0
   1ee32:	db0f      	blt.n	1ee54 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1ee34:	f7ff ff84 	bl	1ed40 <elapsed>
   1ee38:	f06f 0301 	mvn.w	r3, #1
   1ee3c:	4a2b      	ldr	r2, [pc, #172]	; (1eeec <z_add_timeout+0xec>)
   1ee3e:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1ee42:	1a5b      	subs	r3, r3, r1
   1ee44:	eb6b 020c 	sbc.w	r2, fp, ip
   1ee48:	1b1e      	subs	r6, r3, r4
   1ee4a:	eb62 0705 	sbc.w	r7, r2, r5
   1ee4e:	1a34      	subs	r4, r6, r0
   1ee50:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	to->fn = fn;
   1ee54:	9b01      	ldr	r3, [sp, #4]
   1ee56:	f8ca 300c 	str.w	r3, [sl, #12]
	__asm__ volatile(
   1ee5a:	f04f 0320 	mov.w	r3, #32
   1ee5e:	f3ef 8611 	mrs	r6, BASEPRI
   1ee62:	f383 8811 	msr	BASEPRI, r3
   1ee66:	f3bf 8f6f 	isb	sy
		to->dticks = ticks + elapsed();
   1ee6a:	f7ff ff69 	bl	1ed40 <elapsed>
	ticks = MAX(1, ticks);
   1ee6e:	2c01      	cmp	r4, #1
   1ee70:	f175 0300 	sbcs.w	r3, r5, #0
   1ee74:	bfb8      	it	lt
   1ee76:	2401      	movlt	r4, #1
	return list->head == list;
   1ee78:	4b1d      	ldr	r3, [pc, #116]	; (1eef0 <z_add_timeout+0xf0>)
		to->dticks = ticks + elapsed();
   1ee7a:	4420      	add	r0, r4
   1ee7c:	681a      	ldr	r2, [r3, #0]
   1ee7e:	f8ca 0008 	str.w	r0, [sl, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ee82:	429a      	cmp	r2, r3
   1ee84:	d001      	beq.n	1ee8a <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ee86:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1ee88:	b952      	cbnz	r2, 1eea0 <z_add_timeout+0xa0>
	node->prev = list->tail;
   1ee8a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1ee8c:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   1ee90:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1ee94:	685a      	ldr	r2, [r3, #4]
   1ee96:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1ee9a:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1ee9e:	e00d      	b.n	1eebc <z_add_timeout+0xbc>
			if (t->dticks > to->dticks) {
   1eea0:	6890      	ldr	r0, [r2, #8]
   1eea2:	f8da 1008 	ldr.w	r1, [sl, #8]
   1eea6:	4288      	cmp	r0, r1
   1eea8:	dd19      	ble.n	1eede <z_add_timeout+0xde>
				t->dticks -= to->dticks;
   1eeaa:	1a41      	subs	r1, r0, r1
   1eeac:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1eeae:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1eeb0:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1eeb4:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1eeb8:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1eebc:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1eebe:	429a      	cmp	r2, r3
   1eec0:	d006      	beq.n	1eed0 <z_add_timeout+0xd0>
		if (to == first()) {
   1eec2:	4592      	cmp	sl, r2
   1eec4:	d104      	bne.n	1eed0 <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
   1eec6:	f7ff ff59 	bl	1ed7c <next_timeout>
   1eeca:	2100      	movs	r1, #0
   1eecc:	f7f0 ff10 	bl	fcf0 <z_clock_set_timeout>
	__asm__ volatile(
   1eed0:	f386 8811 	msr	BASEPRI, r6
   1eed4:	f3bf 8f6f 	isb	sy
}
   1eed8:	b003      	add	sp, #12
   1eeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1eede:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1eee0:	4294      	cmp	r4, r2
   1eee2:	f8ca 1008 	str.w	r1, [sl, #8]
   1eee6:	d0d0      	beq.n	1ee8a <z_add_timeout+0x8a>
   1eee8:	6812      	ldr	r2, [r2, #0]
   1eeea:	e7cd      	b.n	1ee88 <z_add_timeout+0x88>
   1eeec:	20022360 	.word	0x20022360
   1eef0:	200205c0 	.word	0x200205c0

0001eef4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1eef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eef8:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1eefa:	f7ff fb97 	bl	1e62c <z_time_slice>
	__asm__ volatile(
   1eefe:	f04f 0320 	mov.w	r3, #32
   1ef02:	f3ef 8411 	mrs	r4, BASEPRI
   1ef06:	f383 8811 	msr	BASEPRI, r3
   1ef0a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1ef0e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1ef94 <z_clock_announce+0xa0>
   1ef12:	4d1f      	ldr	r5, [pc, #124]	; (1ef90 <z_clock_announce+0x9c>)
   1ef14:	46c1      	mov	r9, r8
	return list->head == list;
   1ef16:	f8df a080 	ldr.w	sl, [pc, #128]	; 1ef98 <z_clock_announce+0xa4>
   1ef1a:	602e      	str	r6, [r5, #0]
   1ef1c:	f8da 0000 	ldr.w	r0, [sl]
   1ef20:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ef22:	4550      	cmp	r0, sl
   1ef24:	e9d8 6700 	ldrd	r6, r7, [r8]
   1ef28:	d005      	beq.n	1ef36 <z_clock_announce+0x42>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1ef2a:	b120      	cbz	r0, 1ef36 <z_clock_announce+0x42>
   1ef2c:	6883      	ldr	r3, [r0, #8]
   1ef2e:	4293      	cmp	r3, r2
   1ef30:	dd13      	ble.n	1ef5a <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1ef32:	1a9b      	subs	r3, r3, r2
   1ef34:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
   1ef36:	18b6      	adds	r6, r6, r2
   1ef38:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
   1ef3c:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
   1ef40:	2600      	movs	r6, #0
   1ef42:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   1ef44:	f7ff ff1a 	bl	1ed7c <next_timeout>
   1ef48:	4631      	mov	r1, r6
   1ef4a:	f7f0 fed1 	bl	fcf0 <z_clock_set_timeout>
	__asm__ volatile(
   1ef4e:	f384 8811 	msr	BASEPRI, r4
   1ef52:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1ef56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
   1ef5a:	18f6      	adds	r6, r6, r3
   1ef5c:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
   1ef60:	1ad3      	subs	r3, r2, r3
   1ef62:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
   1ef64:	2300      	movs	r3, #0
   1ef66:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
   1ef68:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
   1ef6c:	f7ff fef2 	bl	1ed54 <remove_timeout>
   1ef70:	f384 8811 	msr	BASEPRI, r4
   1ef74:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1ef78:	68c3      	ldr	r3, [r0, #12]
   1ef7a:	4798      	blx	r3
	__asm__ volatile(
   1ef7c:	f04f 0320 	mov.w	r3, #32
   1ef80:	f3ef 8411 	mrs	r4, BASEPRI
   1ef84:	f383 8811 	msr	BASEPRI, r3
   1ef88:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1ef8c:	e7c6      	b.n	1ef1c <z_clock_announce+0x28>
   1ef8e:	bf00      	nop
   1ef90:	2002818c 	.word	0x2002818c
   1ef94:	20022360 	.word	0x20022360
   1ef98:	200205c0 	.word	0x200205c0

0001ef9c <z_tick_get>:

s64_t z_tick_get(void)
{
   1ef9c:	b510      	push	{r4, lr}
   1ef9e:	f04f 0320 	mov.w	r3, #32
   1efa2:	f3ef 8411 	mrs	r4, BASEPRI
   1efa6:	f383 8811 	msr	BASEPRI, r3
   1efaa:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1efae:	f7f0 ff03 	bl	fdb8 <z_clock_elapsed>
   1efb2:	4b06      	ldr	r3, [pc, #24]	; (1efcc <z_tick_get+0x30>)
   1efb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1efb8:	1812      	adds	r2, r2, r0
   1efba:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1efbe:	f384 8811 	msr	BASEPRI, r4
   1efc2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1efc6:	4610      	mov	r0, r2
   1efc8:	4619      	mov	r1, r3
   1efca:	bd10      	pop	{r4, pc}
   1efcc:	20022360 	.word	0x20022360

0001efd0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1efd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1efd4:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1efd6:	2301      	movs	r3, #1
{
   1efd8:	b089      	sub	sp, #36	; 0x24
	struct _poller poller = { .is_polling = true,
   1efda:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   1efde:	4b29      	ldr	r3, [pc, #164]	; (1f084 <z_impl_k_poll+0xb4>)
{
   1efe0:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   1efe2:	689b      	ldr	r3, [r3, #8]
{
   1efe4:	4605      	mov	r5, r0
	struct _poller poller = { .is_polling = true,
   1efe6:	9306      	str	r3, [sp, #24]
   1efe8:	4b27      	ldr	r3, [pc, #156]	; (1f088 <z_impl_k_poll+0xb8>)
   1efea:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   1efec:	ea52 0307 	orrs.w	r3, r2, r7
   1eff0:	bf0c      	ite	eq
   1eff2:	2301      	moveq	r3, #1
   1eff4:	2300      	movne	r3, #0
   1eff6:	aa05      	add	r2, sp, #20
   1eff8:	f008 fc11 	bl	2781e <register_events>
   1effc:	4680      	mov	r8, r0
	__asm__ volatile(
   1effe:	f04f 0320 	mov.w	r3, #32
   1f002:	f3ef 8911 	mrs	r9, BASEPRI
   1f006:	f383 8811 	msr	BASEPRI, r3
   1f00a:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1f00e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1f012:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1f016:	b963      	cbnz	r3, 1f032 <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
   1f018:	4601      	mov	r1, r0
   1f01a:	464a      	mov	r2, r9
   1f01c:	4628      	mov	r0, r5
   1f01e:	f008 fb68 	bl	276f2 <clear_event_registrations>
	__asm__ volatile(
   1f022:	f389 8811 	msr	BASEPRI, r9
   1f026:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1f02a:	4620      	mov	r0, r4
   1f02c:	b009      	add	sp, #36	; 0x24
   1f02e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
   1f032:	2300      	movs	r3, #0
   1f034:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f038:	ea56 0307 	orrs.w	r3, r6, r7
   1f03c:	d106      	bne.n	1f04c <z_impl_k_poll+0x7c>
   1f03e:	f389 8811 	msr	BASEPRI, r9
   1f042:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1f046:	f06f 040a 	mvn.w	r4, #10
   1f04a:	e7ee      	b.n	1f02a <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1f04c:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1f04e:	4649      	mov	r1, r9
   1f050:	e9cd 6700 	strd	r6, r7, [sp]
   1f054:	480d      	ldr	r0, [pc, #52]	; (1f08c <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1f056:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1f05a:	f7ff fc1b 	bl	1e894 <z_pend_curr>
   1f05e:	4604      	mov	r4, r0
	__asm__ volatile(
   1f060:	f04f 0320 	mov.w	r3, #32
   1f064:	f3ef 8611 	mrs	r6, BASEPRI
   1f068:	f383 8811 	msr	BASEPRI, r3
   1f06c:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1f070:	4632      	mov	r2, r6
   1f072:	4641      	mov	r1, r8
   1f074:	4628      	mov	r0, r5
   1f076:	f008 fb3c 	bl	276f2 <clear_event_registrations>
	__asm__ volatile(
   1f07a:	f386 8811 	msr	BASEPRI, r6
   1f07e:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1f082:	e7d2      	b.n	1f02a <z_impl_k_poll+0x5a>
   1f084:	2002807c 	.word	0x2002807c
   1f088:	0002777f 	.word	0x0002777f
   1f08c:	2002af36 	.word	0x2002af36

0001f090 <malloc>:
   1f090:	4b02      	ldr	r3, [pc, #8]	; (1f09c <malloc+0xc>)
   1f092:	4601      	mov	r1, r0
   1f094:	6818      	ldr	r0, [r3, #0]
   1f096:	f000 badb 	b.w	1f650 <_malloc_r>
   1f09a:	bf00      	nop
   1f09c:	200205d0 	.word	0x200205d0

0001f0a0 <free>:
   1f0a0:	4b02      	ldr	r3, [pc, #8]	; (1f0ac <free+0xc>)
   1f0a2:	4601      	mov	r1, r0
   1f0a4:	6818      	ldr	r0, [r3, #0]
   1f0a6:	f000 ba83 	b.w	1f5b0 <_free_r>
   1f0aa:	bf00      	nop
   1f0ac:	200205d0 	.word	0x200205d0

0001f0b0 <validate_structure>:
   1f0b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f0b2:	6801      	ldr	r1, [r0, #0]
   1f0b4:	4604      	mov	r4, r0
   1f0b6:	293b      	cmp	r1, #59	; 0x3b
   1f0b8:	d911      	bls.n	1f0de <validate_structure+0x2e>
   1f0ba:	223c      	movs	r2, #60	; 0x3c
   1f0bc:	4668      	mov	r0, sp
   1f0be:	f008 feb1 	bl	27e24 <div>
   1f0c2:	9a01      	ldr	r2, [sp, #4]
   1f0c4:	6863      	ldr	r3, [r4, #4]
   1f0c6:	9900      	ldr	r1, [sp, #0]
   1f0c8:	2a00      	cmp	r2, #0
   1f0ca:	440b      	add	r3, r1
   1f0cc:	bfb4      	ite	lt
   1f0ce:	323c      	addlt	r2, #60	; 0x3c
   1f0d0:	6022      	strge	r2, [r4, #0]
   1f0d2:	6063      	str	r3, [r4, #4]
   1f0d4:	bfbe      	ittt	lt
   1f0d6:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   1f0da:	6022      	strlt	r2, [r4, #0]
   1f0dc:	6063      	strlt	r3, [r4, #4]
   1f0de:	6861      	ldr	r1, [r4, #4]
   1f0e0:	293b      	cmp	r1, #59	; 0x3b
   1f0e2:	d911      	bls.n	1f108 <validate_structure+0x58>
   1f0e4:	223c      	movs	r2, #60	; 0x3c
   1f0e6:	4668      	mov	r0, sp
   1f0e8:	f008 fe9c 	bl	27e24 <div>
   1f0ec:	9a01      	ldr	r2, [sp, #4]
   1f0ee:	68a3      	ldr	r3, [r4, #8]
   1f0f0:	9900      	ldr	r1, [sp, #0]
   1f0f2:	2a00      	cmp	r2, #0
   1f0f4:	440b      	add	r3, r1
   1f0f6:	bfb4      	ite	lt
   1f0f8:	323c      	addlt	r2, #60	; 0x3c
   1f0fa:	6062      	strge	r2, [r4, #4]
   1f0fc:	60a3      	str	r3, [r4, #8]
   1f0fe:	bfbe      	ittt	lt
   1f100:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   1f104:	6062      	strlt	r2, [r4, #4]
   1f106:	60a3      	strlt	r3, [r4, #8]
   1f108:	68a1      	ldr	r1, [r4, #8]
   1f10a:	2917      	cmp	r1, #23
   1f10c:	d911      	bls.n	1f132 <validate_structure+0x82>
   1f10e:	2218      	movs	r2, #24
   1f110:	4668      	mov	r0, sp
   1f112:	f008 fe87 	bl	27e24 <div>
   1f116:	9a01      	ldr	r2, [sp, #4]
   1f118:	68e3      	ldr	r3, [r4, #12]
   1f11a:	9900      	ldr	r1, [sp, #0]
   1f11c:	2a00      	cmp	r2, #0
   1f11e:	440b      	add	r3, r1
   1f120:	bfb4      	ite	lt
   1f122:	3218      	addlt	r2, #24
   1f124:	60a2      	strge	r2, [r4, #8]
   1f126:	60e3      	str	r3, [r4, #12]
   1f128:	bfbe      	ittt	lt
   1f12a:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   1f12e:	60a2      	strlt	r2, [r4, #8]
   1f130:	60e3      	strlt	r3, [r4, #12]
   1f132:	6921      	ldr	r1, [r4, #16]
   1f134:	290b      	cmp	r1, #11
   1f136:	d911      	bls.n	1f15c <validate_structure+0xac>
   1f138:	220c      	movs	r2, #12
   1f13a:	4668      	mov	r0, sp
   1f13c:	f008 fe72 	bl	27e24 <div>
   1f140:	9a01      	ldr	r2, [sp, #4]
   1f142:	6963      	ldr	r3, [r4, #20]
   1f144:	9900      	ldr	r1, [sp, #0]
   1f146:	2a00      	cmp	r2, #0
   1f148:	440b      	add	r3, r1
   1f14a:	bfb4      	ite	lt
   1f14c:	320c      	addlt	r2, #12
   1f14e:	6122      	strge	r2, [r4, #16]
   1f150:	6163      	str	r3, [r4, #20]
   1f152:	bfbe      	ittt	lt
   1f154:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   1f158:	6122      	strlt	r2, [r4, #16]
   1f15a:	6163      	strlt	r3, [r4, #20]
   1f15c:	6963      	ldr	r3, [r4, #20]
   1f15e:	0799      	lsls	r1, r3, #30
   1f160:	d120      	bne.n	1f1a4 <validate_structure+0xf4>
   1f162:	2164      	movs	r1, #100	; 0x64
   1f164:	fb93 f2f1 	sdiv	r2, r3, r1
   1f168:	fb01 3212 	mls	r2, r1, r2, r3
   1f16c:	b9e2      	cbnz	r2, 1f1a8 <validate_structure+0xf8>
   1f16e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   1f172:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1f176:	fb93 f2f1 	sdiv	r2, r3, r1
   1f17a:	fb01 3312 	mls	r3, r1, r2, r3
   1f17e:	2b00      	cmp	r3, #0
   1f180:	bf14      	ite	ne
   1f182:	231c      	movne	r3, #28
   1f184:	231d      	moveq	r3, #29
   1f186:	68e2      	ldr	r2, [r4, #12]
   1f188:	2a00      	cmp	r2, #0
   1f18a:	dc0f      	bgt.n	1f1ac <validate_structure+0xfc>
   1f18c:	260b      	movs	r6, #11
   1f18e:	2064      	movs	r0, #100	; 0x64
   1f190:	f44f 75c8 	mov.w	r5, #400	; 0x190
   1f194:	4f31      	ldr	r7, [pc, #196]	; (1f25c <validate_structure+0x1ac>)
   1f196:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   1f19a:	f1bc 0f00 	cmp.w	ip, #0
   1f19e:	dd31      	ble.n	1f204 <validate_structure+0x154>
   1f1a0:	b003      	add	sp, #12
   1f1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f1a4:	231c      	movs	r3, #28
   1f1a6:	e7ee      	b.n	1f186 <validate_structure+0xd6>
   1f1a8:	231d      	movs	r3, #29
   1f1aa:	e7ec      	b.n	1f186 <validate_structure+0xd6>
   1f1ac:	4f2b      	ldr	r7, [pc, #172]	; (1f25c <validate_structure+0x1ac>)
   1f1ae:	f04f 0c00 	mov.w	ip, #0
   1f1b2:	2564      	movs	r5, #100	; 0x64
   1f1b4:	f44f 76c8 	mov.w	r6, #400	; 0x190
   1f1b8:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1f1bc:	2a01      	cmp	r2, #1
   1f1be:	bf14      	ite	ne
   1f1c0:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
   1f1c4:	4618      	moveq	r0, r3
   1f1c6:	4281      	cmp	r1, r0
   1f1c8:	ddea      	ble.n	1f1a0 <validate_structure+0xf0>
   1f1ca:	3201      	adds	r2, #1
   1f1cc:	1a09      	subs	r1, r1, r0
   1f1ce:	2a0c      	cmp	r2, #12
   1f1d0:	60e1      	str	r1, [r4, #12]
   1f1d2:	6122      	str	r2, [r4, #16]
   1f1d4:	d1f0      	bne.n	1f1b8 <validate_structure+0x108>
   1f1d6:	6963      	ldr	r3, [r4, #20]
   1f1d8:	1c5a      	adds	r2, r3, #1
   1f1da:	0791      	lsls	r1, r2, #30
   1f1dc:	e9c4 c204 	strd	ip, r2, [r4, #16]
   1f1e0:	d137      	bne.n	1f252 <validate_structure+0x1a2>
   1f1e2:	fb92 f1f5 	sdiv	r1, r2, r5
   1f1e6:	fb05 2211 	mls	r2, r5, r1, r2
   1f1ea:	2a00      	cmp	r2, #0
   1f1ec:	d133      	bne.n	1f256 <validate_structure+0x1a6>
   1f1ee:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   1f1f2:	fb93 f2f6 	sdiv	r2, r3, r6
   1f1f6:	fb06 3312 	mls	r3, r6, r2, r3
   1f1fa:	2b00      	cmp	r3, #0
   1f1fc:	bf14      	ite	ne
   1f1fe:	231c      	movne	r3, #28
   1f200:	231d      	moveq	r3, #29
   1f202:	e7d9      	b.n	1f1b8 <validate_structure+0x108>
   1f204:	6921      	ldr	r1, [r4, #16]
   1f206:	3901      	subs	r1, #1
   1f208:	6121      	str	r1, [r4, #16]
   1f20a:	3101      	adds	r1, #1
   1f20c:	d114      	bne.n	1f238 <validate_structure+0x188>
   1f20e:	6963      	ldr	r3, [r4, #20]
   1f210:	1e59      	subs	r1, r3, #1
   1f212:	078a      	lsls	r2, r1, #30
   1f214:	e9c4 6104 	strd	r6, r1, [r4, #16]
   1f218:	d117      	bne.n	1f24a <validate_structure+0x19a>
   1f21a:	fb91 f2f0 	sdiv	r2, r1, r0
   1f21e:	fb00 1112 	mls	r1, r0, r2, r1
   1f222:	b9a1      	cbnz	r1, 1f24e <validate_structure+0x19e>
   1f224:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   1f228:	fb93 f2f5 	sdiv	r2, r3, r5
   1f22c:	fb05 3312 	mls	r3, r5, r2, r3
   1f230:	2b00      	cmp	r3, #0
   1f232:	bf14      	ite	ne
   1f234:	231c      	movne	r3, #28
   1f236:	231d      	moveq	r3, #29
   1f238:	6922      	ldr	r2, [r4, #16]
   1f23a:	2a01      	cmp	r2, #1
   1f23c:	bf14      	ite	ne
   1f23e:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   1f242:	461a      	moveq	r2, r3
   1f244:	4462      	add	r2, ip
   1f246:	60e2      	str	r2, [r4, #12]
   1f248:	e7a5      	b.n	1f196 <validate_structure+0xe6>
   1f24a:	231c      	movs	r3, #28
   1f24c:	e7f4      	b.n	1f238 <validate_structure+0x188>
   1f24e:	231d      	movs	r3, #29
   1f250:	e7f2      	b.n	1f238 <validate_structure+0x188>
   1f252:	231c      	movs	r3, #28
   1f254:	e7b0      	b.n	1f1b8 <validate_structure+0x108>
   1f256:	231d      	movs	r3, #29
   1f258:	e7ae      	b.n	1f1b8 <validate_structure+0x108>
   1f25a:	bf00      	nop
   1f25c:	00028fa4 	.word	0x00028fa4

0001f260 <mktime>:
   1f260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f264:	4605      	mov	r5, r0
   1f266:	b08b      	sub	sp, #44	; 0x2c
   1f268:	f001 fa84 	bl	20774 <__gettzinfo>
   1f26c:	4607      	mov	r7, r0
   1f26e:	4628      	mov	r0, r5
   1f270:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   1f274:	f7ff ff1c 	bl	1f0b0 <validate_structure>
   1f278:	68a8      	ldr	r0, [r5, #8]
   1f27a:	696e      	ldr	r6, [r5, #20]
   1f27c:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f280:	fb0a 2303 	mla	r3, sl, r3, r2
   1f284:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
   1f288:	4ac3      	ldr	r2, [pc, #780]	; (1f598 <mktime+0x338>)
   1f28a:	fb0a 3a00 	mla	sl, sl, r0, r3
   1f28e:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
   1f292:	3c01      	subs	r4, #1
   1f294:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1f298:	2b01      	cmp	r3, #1
   1f29a:	4414      	add	r4, r2
   1f29c:	dd11      	ble.n	1f2c2 <mktime+0x62>
   1f29e:	07b1      	lsls	r1, r6, #30
   1f2a0:	d10f      	bne.n	1f2c2 <mktime+0x62>
   1f2a2:	2264      	movs	r2, #100	; 0x64
   1f2a4:	fb96 f3f2 	sdiv	r3, r6, r2
   1f2a8:	fb02 6313 	mls	r3, r2, r3, r6
   1f2ac:	b943      	cbnz	r3, 1f2c0 <mktime+0x60>
   1f2ae:	f206 716c 	addw	r1, r6, #1900	; 0x76c
   1f2b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1f2b6:	fb91 f3f2 	sdiv	r3, r1, r2
   1f2ba:	fb02 1313 	mls	r3, r2, r3, r1
   1f2be:	b903      	cbnz	r3, 1f2c2 <mktime+0x62>
   1f2c0:	3401      	adds	r4, #1
   1f2c2:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
   1f2c6:	f644 6220 	movw	r2, #20000	; 0x4e20
   1f2ca:	61ec      	str	r4, [r5, #28]
   1f2cc:	3310      	adds	r3, #16
   1f2ce:	4293      	cmp	r3, r2
   1f2d0:	f200 8168 	bhi.w	1f5a4 <mktime+0x344>
   1f2d4:	2e46      	cmp	r6, #70	; 0x46
   1f2d6:	dd77      	ble.n	1f3c8 <mktime+0x168>
   1f2d8:	2346      	movs	r3, #70	; 0x46
   1f2da:	f240 1e6d 	movw	lr, #365	; 0x16d
   1f2de:	2164      	movs	r1, #100	; 0x64
   1f2e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1f2e4:	079a      	lsls	r2, r3, #30
   1f2e6:	d169      	bne.n	1f3bc <mktime+0x15c>
   1f2e8:	fb93 f2f1 	sdiv	r2, r3, r1
   1f2ec:	fb01 3212 	mls	r2, r1, r2, r3
   1f2f0:	2a00      	cmp	r2, #0
   1f2f2:	d166      	bne.n	1f3c2 <mktime+0x162>
   1f2f4:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
   1f2f8:	fb9c f2f0 	sdiv	r2, ip, r0
   1f2fc:	fb00 c212 	mls	r2, r0, r2, ip
   1f300:	2a00      	cmp	r2, #0
   1f302:	bf14      	ite	ne
   1f304:	4672      	movne	r2, lr
   1f306:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   1f30a:	3301      	adds	r3, #1
   1f30c:	4414      	add	r4, r2
   1f30e:	429e      	cmp	r6, r3
   1f310:	d1e8      	bne.n	1f2e4 <mktime+0x84>
   1f312:	4ba2      	ldr	r3, [pc, #648]	; (1f59c <mktime+0x33c>)
   1f314:	ea4f 7bea 	mov.w	fp, sl, asr #31
   1f318:	fbc3 ab04 	smlal	sl, fp, r3, r4
   1f31c:	f000 ffba 	bl	20294 <__tz_lock>
   1f320:	f000 ffc4 	bl	202ac <_tzset_unlocked>
   1f324:	4b9e      	ldr	r3, [pc, #632]	; (1f5a0 <mktime+0x340>)
   1f326:	f8d3 9000 	ldr.w	r9, [r3]
   1f32a:	f1b9 0f00 	cmp.w	r9, #0
   1f32e:	d03f      	beq.n	1f3b0 <mktime+0x150>
   1f330:	f8d5 9020 	ldr.w	r9, [r5, #32]
   1f334:	6968      	ldr	r0, [r5, #20]
   1f336:	f1b9 0f01 	cmp.w	r9, #1
   1f33a:	687b      	ldr	r3, [r7, #4]
   1f33c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   1f340:	46c8      	mov	r8, r9
   1f342:	bfa8      	it	ge
   1f344:	f04f 0801 	movge.w	r8, #1
   1f348:	4283      	cmp	r3, r0
   1f34a:	d17f      	bne.n	1f44c <mktime+0x1ec>
   1f34c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1f34e:	4619      	mov	r1, r3
   1f350:	17da      	asrs	r2, r3, #31
   1f352:	e9cd 1200 	strd	r1, r2, [sp]
   1f356:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
   1f35a:	e9cd 1202 	strd	r1, r2, [sp, #8]
   1f35e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f362:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1f364:	1a80      	subs	r0, r0, r2
   1f366:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
   1f36a:	4582      	cmp	sl, r0
   1f36c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1f370:	eb7b 0101 	sbcs.w	r1, fp, r1
   1f374:	da71      	bge.n	1f45a <mktime+0x1fa>
   1f376:	9800      	ldr	r0, [sp, #0]
   1f378:	6a39      	ldr	r1, [r7, #32]
   1f37a:	1a09      	subs	r1, r1, r0
   1f37c:	9801      	ldr	r0, [sp, #4]
   1f37e:	9104      	str	r1, [sp, #16]
   1f380:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1f382:	eb61 0100 	sbc.w	r1, r1, r0
   1f386:	9105      	str	r1, [sp, #20]
   1f388:	6839      	ldr	r1, [r7, #0]
   1f38a:	2900      	cmp	r1, #0
   1f38c:	d075      	beq.n	1f47a <mktime+0x21a>
   1f38e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f392:	4582      	cmp	sl, r0
   1f394:	eb7b 0101 	sbcs.w	r1, fp, r1
   1f398:	db05      	blt.n	1f3a6 <mktime+0x146>
   1f39a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1f39e:	4582      	cmp	sl, r0
   1f3a0:	eb7b 0101 	sbcs.w	r1, fp, r1
   1f3a4:	db6f      	blt.n	1f486 <mktime+0x226>
   1f3a6:	f1b9 0f00 	cmp.w	r9, #0
   1f3aa:	f04f 0900 	mov.w	r9, #0
   1f3ae:	da6f      	bge.n	1f490 <mktime+0x230>
   1f3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f3b2:	eb1a 0a03 	adds.w	sl, sl, r3
   1f3b6:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
   1f3ba:	e0ae      	b.n	1f51a <mktime+0x2ba>
   1f3bc:	f240 126d 	movw	r2, #365	; 0x16d
   1f3c0:	e7a3      	b.n	1f30a <mktime+0xaa>
   1f3c2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   1f3c6:	e7a0      	b.n	1f30a <mktime+0xaa>
   1f3c8:	d0a3      	beq.n	1f312 <mktime+0xb2>
   1f3ca:	2345      	movs	r3, #69	; 0x45
   1f3cc:	f240 1e6d 	movw	lr, #365	; 0x16d
   1f3d0:	2164      	movs	r1, #100	; 0x64
   1f3d2:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1f3d6:	e012      	b.n	1f3fe <mktime+0x19e>
   1f3d8:	bb62      	cbnz	r2, 1f434 <mktime+0x1d4>
   1f3da:	fb93 f2f1 	sdiv	r2, r3, r1
   1f3de:	fb01 3212 	mls	r2, r1, r2, r3
   1f3e2:	bb52      	cbnz	r2, 1f43a <mktime+0x1da>
   1f3e4:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
   1f3e8:	fb9c f2f0 	sdiv	r2, ip, r0
   1f3ec:	fb00 c212 	mls	r2, r0, r2, ip
   1f3f0:	2a00      	cmp	r2, #0
   1f3f2:	bf14      	ite	ne
   1f3f4:	4672      	movne	r2, lr
   1f3f6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   1f3fa:	1aa4      	subs	r4, r4, r2
   1f3fc:	3b01      	subs	r3, #1
   1f3fe:	429e      	cmp	r6, r3
   1f400:	f003 0203 	and.w	r2, r3, #3
   1f404:	dbe8      	blt.n	1f3d8 <mktime+0x178>
   1f406:	b9da      	cbnz	r2, 1f440 <mktime+0x1e0>
   1f408:	2264      	movs	r2, #100	; 0x64
   1f40a:	fb96 f3f2 	sdiv	r3, r6, r2
   1f40e:	fb02 6313 	mls	r3, r2, r3, r6
   1f412:	b9c3      	cbnz	r3, 1f446 <mktime+0x1e6>
   1f414:	f206 716c 	addw	r1, r6, #1900	; 0x76c
   1f418:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1f41c:	fb91 f3f2 	sdiv	r3, r1, r2
   1f420:	fb02 1313 	mls	r3, r2, r3, r1
   1f424:	2b00      	cmp	r3, #0
   1f426:	f240 136d 	movw	r3, #365	; 0x16d
   1f42a:	bf08      	it	eq
   1f42c:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   1f430:	1ae4      	subs	r4, r4, r3
   1f432:	e76e      	b.n	1f312 <mktime+0xb2>
   1f434:	f240 126d 	movw	r2, #365	; 0x16d
   1f438:	e7df      	b.n	1f3fa <mktime+0x19a>
   1f43a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   1f43e:	e7dc      	b.n	1f3fa <mktime+0x19a>
   1f440:	f240 136d 	movw	r3, #365	; 0x16d
   1f444:	e7f4      	b.n	1f430 <mktime+0x1d0>
   1f446:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   1f44a:	e7f1      	b.n	1f430 <mktime+0x1d0>
   1f44c:	f000 fe7a 	bl	20144 <__tzcalc_limits>
   1f450:	2800      	cmp	r0, #0
   1f452:	f47f af7b 	bne.w	1f34c <mktime+0xec>
   1f456:	46c1      	mov	r9, r8
   1f458:	e054      	b.n	1f504 <mktime+0x2a4>
   1f45a:	9800      	ldr	r0, [sp, #0]
   1f45c:	9902      	ldr	r1, [sp, #8]
   1f45e:	1a09      	subs	r1, r1, r0
   1f460:	9801      	ldr	r0, [sp, #4]
   1f462:	9108      	str	r1, [sp, #32]
   1f464:	9903      	ldr	r1, [sp, #12]
   1f466:	eb61 0100 	sbc.w	r1, r1, r0
   1f46a:	9109      	str	r1, [sp, #36]	; 0x24
   1f46c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1f470:	4582      	cmp	sl, r0
   1f472:	eb7b 0101 	sbcs.w	r1, fp, r1
   1f476:	dbee      	blt.n	1f456 <mktime+0x1f6>
   1f478:	e77d      	b.n	1f376 <mktime+0x116>
   1f47a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f47e:	4582      	cmp	sl, r0
   1f480:	eb7b 0101 	sbcs.w	r1, fp, r1
   1f484:	db89      	blt.n	1f39a <mktime+0x13a>
   1f486:	f1b9 0f00 	cmp.w	r9, #0
   1f48a:	db3f      	blt.n	1f50c <mktime+0x2ac>
   1f48c:	f04f 0901 	mov.w	r9, #1
   1f490:	ea88 0809 	eor.w	r8, r8, r9
   1f494:	f1b8 0f01 	cmp.w	r8, #1
   1f498:	d134      	bne.n	1f504 <mktime+0x2a4>
   1f49a:	f1b9 0f00 	cmp.w	r9, #0
   1f49e:	d04f      	beq.n	1f540 <mktime+0x2e0>
   1f4a0:	1ad3      	subs	r3, r2, r3
   1f4a2:	682a      	ldr	r2, [r5, #0]
   1f4a4:	eb1a 0a03 	adds.w	sl, sl, r3
   1f4a8:	4628      	mov	r0, r5
   1f4aa:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1f4ae:	441a      	add	r2, r3
   1f4b0:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
   1f4b4:	602a      	str	r2, [r5, #0]
   1f4b6:	f7ff fdfb 	bl	1f0b0 <validate_structure>
   1f4ba:	68ea      	ldr	r2, [r5, #12]
   1f4bc:	ebb2 0208 	subs.w	r2, r2, r8
   1f4c0:	d020      	beq.n	1f504 <mktime+0x2a4>
   1f4c2:	2a01      	cmp	r2, #1
   1f4c4:	dc3e      	bgt.n	1f544 <mktime+0x2e4>
   1f4c6:	1c90      	adds	r0, r2, #2
   1f4c8:	bfd8      	it	le
   1f4ca:	2201      	movle	r2, #1
   1f4cc:	69eb      	ldr	r3, [r5, #28]
   1f4ce:	4414      	add	r4, r2
   1f4d0:	18d3      	adds	r3, r2, r3
   1f4d2:	d540      	bpl.n	1f556 <mktime+0x2f6>
   1f4d4:	1e72      	subs	r2, r6, #1
   1f4d6:	0791      	lsls	r1, r2, #30
   1f4d8:	d137      	bne.n	1f54a <mktime+0x2ea>
   1f4da:	2164      	movs	r1, #100	; 0x64
   1f4dc:	fb92 f3f1 	sdiv	r3, r2, r1
   1f4e0:	fb01 2313 	mls	r3, r1, r3, r2
   1f4e4:	bba3      	cbnz	r3, 1f550 <mktime+0x2f0>
   1f4e6:	f206 766b 	addw	r6, r6, #1899	; 0x76b
   1f4ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1f4ee:	fb96 f3f2 	sdiv	r3, r6, r2
   1f4f2:	fb02 6613 	mls	r6, r2, r3, r6
   1f4f6:	f240 136d 	movw	r3, #365	; 0x16d
   1f4fa:	2e00      	cmp	r6, #0
   1f4fc:	bf18      	it	ne
   1f4fe:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   1f502:	61eb      	str	r3, [r5, #28]
   1f504:	f1b9 0f01 	cmp.w	r9, #1
   1f508:	f47f af52 	bne.w	1f3b0 <mktime+0x150>
   1f50c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1f50e:	f04f 0901 	mov.w	r9, #1
   1f512:	eb1a 0a03 	adds.w	sl, sl, r3
   1f516:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
   1f51a:	f000 fec1 	bl	202a0 <__tz_unlock>
   1f51e:	3404      	adds	r4, #4
   1f520:	2307      	movs	r3, #7
   1f522:	f8c5 9020 	str.w	r9, [r5, #32]
   1f526:	fb94 f3f3 	sdiv	r3, r4, r3
   1f52a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1f52e:	1ae4      	subs	r4, r4, r3
   1f530:	bf48      	it	mi
   1f532:	3407      	addmi	r4, #7
   1f534:	61ac      	str	r4, [r5, #24]
   1f536:	4650      	mov	r0, sl
   1f538:	4659      	mov	r1, fp
   1f53a:	b00b      	add	sp, #44	; 0x2c
   1f53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f540:	1a9b      	subs	r3, r3, r2
   1f542:	e7ae      	b.n	1f4a2 <mktime+0x242>
   1f544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f548:	e7c0      	b.n	1f4cc <mktime+0x26c>
   1f54a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   1f54e:	e7d8      	b.n	1f502 <mktime+0x2a2>
   1f550:	f240 136d 	movw	r3, #365	; 0x16d
   1f554:	e7d5      	b.n	1f502 <mktime+0x2a2>
   1f556:	07b2      	lsls	r2, r6, #30
   1f558:	d117      	bne.n	1f58a <mktime+0x32a>
   1f55a:	2164      	movs	r1, #100	; 0x64
   1f55c:	fb96 f2f1 	sdiv	r2, r6, r1
   1f560:	fb01 6212 	mls	r2, r1, r2, r6
   1f564:	b9a2      	cbnz	r2, 1f590 <mktime+0x330>
   1f566:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1f56a:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1f56e:	fb96 f2f1 	sdiv	r2, r6, r1
   1f572:	fb01 6612 	mls	r6, r1, r2, r6
   1f576:	f240 126d 	movw	r2, #365	; 0x16d
   1f57a:	2e00      	cmp	r6, #0
   1f57c:	bf08      	it	eq
   1f57e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   1f582:	4293      	cmp	r3, r2
   1f584:	bfa8      	it	ge
   1f586:	1a9b      	subge	r3, r3, r2
   1f588:	e7bb      	b.n	1f502 <mktime+0x2a2>
   1f58a:	f240 126d 	movw	r2, #365	; 0x16d
   1f58e:	e7f8      	b.n	1f582 <mktime+0x322>
   1f590:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   1f594:	e7f5      	b.n	1f582 <mktime+0x322>
   1f596:	bf00      	nop
   1f598:	00028fd4 	.word	0x00028fd4
   1f59c:	00015180 	.word	0x00015180
   1f5a0:	2002819c 	.word	0x2002819c
   1f5a4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1f5a8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1f5ac:	e7c3      	b.n	1f536 <mktime+0x2d6>
   1f5ae:	bf00      	nop

0001f5b0 <_free_r>:
   1f5b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f5b2:	2900      	cmp	r1, #0
   1f5b4:	d047      	beq.n	1f646 <__kernel_ram_size+0x46>
   1f5b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1f5ba:	1f0c      	subs	r4, r1, #4
   1f5bc:	9001      	str	r0, [sp, #4]
   1f5be:	2b00      	cmp	r3, #0
   1f5c0:	bfb8      	it	lt
   1f5c2:	18e4      	addlt	r4, r4, r3
   1f5c4:	f001 f8f0 	bl	207a8 <__malloc_lock>
   1f5c8:	4a20      	ldr	r2, [pc, #128]	; (1f64c <__kernel_ram_size+0x4c>)
   1f5ca:	9801      	ldr	r0, [sp, #4]
   1f5cc:	6813      	ldr	r3, [r2, #0]
   1f5ce:	4615      	mov	r5, r2
   1f5d0:	b933      	cbnz	r3, 1f5e0 <_free_r+0x30>
   1f5d2:	6063      	str	r3, [r4, #4]
   1f5d4:	6014      	str	r4, [r2, #0]
   1f5d6:	b003      	add	sp, #12
   1f5d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1f5dc:	f001 b8ea 	b.w	207b4 <__malloc_unlock>
   1f5e0:	42a3      	cmp	r3, r4
   1f5e2:	d90b      	bls.n	1f5fc <_free_r+0x4c>
   1f5e4:	6821      	ldr	r1, [r4, #0]
   1f5e6:	1862      	adds	r2, r4, r1
   1f5e8:	4293      	cmp	r3, r2
   1f5ea:	bf02      	ittt	eq
   1f5ec:	681a      	ldreq	r2, [r3, #0]
   1f5ee:	685b      	ldreq	r3, [r3, #4]
   1f5f0:	1852      	addeq	r2, r2, r1
   1f5f2:	6063      	str	r3, [r4, #4]
   1f5f4:	bf08      	it	eq
   1f5f6:	6022      	streq	r2, [r4, #0]
   1f5f8:	602c      	str	r4, [r5, #0]
   1f5fa:	e7ec      	b.n	1f5d6 <_free_r+0x26>
   1f5fc:	461a      	mov	r2, r3
   1f5fe:	685b      	ldr	r3, [r3, #4]
   1f600:	b10b      	cbz	r3, 1f606 <__kernel_ram_size+0x6>
   1f602:	42a3      	cmp	r3, r4
   1f604:	d9fa      	bls.n	1f5fc <_free_r+0x4c>
   1f606:	6811      	ldr	r1, [r2, #0]
   1f608:	1855      	adds	r5, r2, r1
   1f60a:	42a5      	cmp	r5, r4
   1f60c:	d10b      	bne.n	1f626 <__kernel_ram_size+0x26>
   1f60e:	6824      	ldr	r4, [r4, #0]
   1f610:	4421      	add	r1, r4
   1f612:	1854      	adds	r4, r2, r1
   1f614:	6011      	str	r1, [r2, #0]
   1f616:	42a3      	cmp	r3, r4
   1f618:	d1dd      	bne.n	1f5d6 <_free_r+0x26>
   1f61a:	681c      	ldr	r4, [r3, #0]
   1f61c:	685b      	ldr	r3, [r3, #4]
   1f61e:	4421      	add	r1, r4
   1f620:	6053      	str	r3, [r2, #4]
   1f622:	6011      	str	r1, [r2, #0]
   1f624:	e7d7      	b.n	1f5d6 <_free_r+0x26>
   1f626:	d902      	bls.n	1f62e <__kernel_ram_size+0x2e>
   1f628:	230c      	movs	r3, #12
   1f62a:	6003      	str	r3, [r0, #0]
   1f62c:	e7d3      	b.n	1f5d6 <_free_r+0x26>
   1f62e:	6825      	ldr	r5, [r4, #0]
   1f630:	1961      	adds	r1, r4, r5
   1f632:	428b      	cmp	r3, r1
   1f634:	bf02      	ittt	eq
   1f636:	6819      	ldreq	r1, [r3, #0]
   1f638:	685b      	ldreq	r3, [r3, #4]
   1f63a:	1949      	addeq	r1, r1, r5
   1f63c:	6063      	str	r3, [r4, #4]
   1f63e:	bf08      	it	eq
   1f640:	6021      	streq	r1, [r4, #0]
   1f642:	6054      	str	r4, [r2, #4]
   1f644:	e7c7      	b.n	1f5d6 <_free_r+0x26>
   1f646:	b003      	add	sp, #12
   1f648:	bd30      	pop	{r4, r5, pc}
   1f64a:	bf00      	nop
   1f64c:	20028190 	.word	0x20028190

0001f650 <_malloc_r>:
   1f650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f652:	1ccd      	adds	r5, r1, #3
   1f654:	4606      	mov	r6, r0
   1f656:	f025 0503 	bic.w	r5, r5, #3
   1f65a:	3508      	adds	r5, #8
   1f65c:	2d0c      	cmp	r5, #12
   1f65e:	bf38      	it	cc
   1f660:	250c      	movcc	r5, #12
   1f662:	2d00      	cmp	r5, #0
   1f664:	db01      	blt.n	1f66a <_malloc_r+0x1a>
   1f666:	42a9      	cmp	r1, r5
   1f668:	d903      	bls.n	1f672 <_malloc_r+0x22>
   1f66a:	230c      	movs	r3, #12
   1f66c:	6033      	str	r3, [r6, #0]
   1f66e:	2000      	movs	r0, #0
   1f670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f672:	f001 f899 	bl	207a8 <__malloc_lock>
   1f676:	4921      	ldr	r1, [pc, #132]	; (1f6fc <_malloc_r+0xac>)
   1f678:	680a      	ldr	r2, [r1, #0]
   1f67a:	4614      	mov	r4, r2
   1f67c:	b99c      	cbnz	r4, 1f6a6 <_malloc_r+0x56>
   1f67e:	4f20      	ldr	r7, [pc, #128]	; (1f700 <_malloc_r+0xb0>)
   1f680:	683b      	ldr	r3, [r7, #0]
   1f682:	b923      	cbnz	r3, 1f68e <_malloc_r+0x3e>
   1f684:	4621      	mov	r1, r4
   1f686:	4630      	mov	r0, r6
   1f688:	f000 fba0 	bl	1fdcc <_sbrk_r>
   1f68c:	6038      	str	r0, [r7, #0]
   1f68e:	4629      	mov	r1, r5
   1f690:	4630      	mov	r0, r6
   1f692:	f000 fb9b 	bl	1fdcc <_sbrk_r>
   1f696:	1c43      	adds	r3, r0, #1
   1f698:	d123      	bne.n	1f6e2 <_malloc_r+0x92>
   1f69a:	230c      	movs	r3, #12
   1f69c:	4630      	mov	r0, r6
   1f69e:	6033      	str	r3, [r6, #0]
   1f6a0:	f001 f888 	bl	207b4 <__malloc_unlock>
   1f6a4:	e7e3      	b.n	1f66e <_malloc_r+0x1e>
   1f6a6:	6823      	ldr	r3, [r4, #0]
   1f6a8:	1b5b      	subs	r3, r3, r5
   1f6aa:	d417      	bmi.n	1f6dc <_malloc_r+0x8c>
   1f6ac:	2b0b      	cmp	r3, #11
   1f6ae:	d903      	bls.n	1f6b8 <_malloc_r+0x68>
   1f6b0:	6023      	str	r3, [r4, #0]
   1f6b2:	441c      	add	r4, r3
   1f6b4:	6025      	str	r5, [r4, #0]
   1f6b6:	e004      	b.n	1f6c2 <_malloc_r+0x72>
   1f6b8:	6863      	ldr	r3, [r4, #4]
   1f6ba:	42a2      	cmp	r2, r4
   1f6bc:	bf0c      	ite	eq
   1f6be:	600b      	streq	r3, [r1, #0]
   1f6c0:	6053      	strne	r3, [r2, #4]
   1f6c2:	4630      	mov	r0, r6
   1f6c4:	f001 f876 	bl	207b4 <__malloc_unlock>
   1f6c8:	f104 000b 	add.w	r0, r4, #11
   1f6cc:	1d23      	adds	r3, r4, #4
   1f6ce:	f020 0007 	bic.w	r0, r0, #7
   1f6d2:	1ac2      	subs	r2, r0, r3
   1f6d4:	d0cc      	beq.n	1f670 <_malloc_r+0x20>
   1f6d6:	1a1b      	subs	r3, r3, r0
   1f6d8:	50a3      	str	r3, [r4, r2]
   1f6da:	e7c9      	b.n	1f670 <_malloc_r+0x20>
   1f6dc:	4622      	mov	r2, r4
   1f6de:	6864      	ldr	r4, [r4, #4]
   1f6e0:	e7cc      	b.n	1f67c <_malloc_r+0x2c>
   1f6e2:	1cc4      	adds	r4, r0, #3
   1f6e4:	f024 0403 	bic.w	r4, r4, #3
   1f6e8:	42a0      	cmp	r0, r4
   1f6ea:	d0e3      	beq.n	1f6b4 <_malloc_r+0x64>
   1f6ec:	1a21      	subs	r1, r4, r0
   1f6ee:	4630      	mov	r0, r6
   1f6f0:	f000 fb6c 	bl	1fdcc <_sbrk_r>
   1f6f4:	3001      	adds	r0, #1
   1f6f6:	d1dd      	bne.n	1f6b4 <_malloc_r+0x64>
   1f6f8:	e7cf      	b.n	1f69a <_malloc_r+0x4a>
   1f6fa:	bf00      	nop
   1f6fc:	20028190 	.word	0x20028190
   1f700:	20028194 	.word	0x20028194

0001f704 <_printf_float>:
   1f704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f708:	ed2d 8b02 	vpush	{d8}
   1f70c:	b08d      	sub	sp, #52	; 0x34
   1f70e:	460c      	mov	r4, r1
   1f710:	4616      	mov	r6, r2
   1f712:	461f      	mov	r7, r3
   1f714:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   1f718:	4605      	mov	r5, r0
   1f71a:	f001 f82f 	bl	2077c <_localeconv_r>
   1f71e:	f8d0 a000 	ldr.w	sl, [r0]
   1f722:	4650      	mov	r0, sl
   1f724:	f7ed fc08 	bl	cf38 <strlen>
   1f728:	2300      	movs	r3, #0
   1f72a:	f894 b018 	ldrb.w	fp, [r4, #24]
   1f72e:	ee08 0a10 	vmov	s16, r0
   1f732:	930a      	str	r3, [sp, #40]	; 0x28
   1f734:	6823      	ldr	r3, [r4, #0]
   1f736:	9305      	str	r3, [sp, #20]
   1f738:	f8d8 3000 	ldr.w	r3, [r8]
   1f73c:	3307      	adds	r3, #7
   1f73e:	f023 0307 	bic.w	r3, r3, #7
   1f742:	f103 0208 	add.w	r2, r3, #8
   1f746:	f8c8 2000 	str.w	r2, [r8]
   1f74a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f74e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   1f752:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   1f756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f75a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   1f75e:	f8cd 8018 	str.w	r8, [sp, #24]
   1f762:	9307      	str	r3, [sp, #28]
   1f764:	4b9e      	ldr	r3, [pc, #632]	; (1f9e0 <_printf_float+0x2dc>)
   1f766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1f76a:	f7ed fbc5 	bl	cef8 <__aeabi_dcmpun>
   1f76e:	bb88      	cbnz	r0, 1f7d4 <_printf_float+0xd0>
   1f770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f774:	4b9a      	ldr	r3, [pc, #616]	; (1f9e0 <_printf_float+0x2dc>)
   1f776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1f77a:	f7ec ff87 	bl	c68c <__aeabi_dcmple>
   1f77e:	bb48      	cbnz	r0, 1f7d4 <_printf_float+0xd0>
   1f780:	2200      	movs	r2, #0
   1f782:	2300      	movs	r3, #0
   1f784:	4640      	mov	r0, r8
   1f786:	4649      	mov	r1, r9
   1f788:	f7ec ff76 	bl	c678 <__aeabi_dcmplt>
   1f78c:	b110      	cbz	r0, 1f794 <_printf_float+0x90>
   1f78e:	232d      	movs	r3, #45	; 0x2d
   1f790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1f794:	4b93      	ldr	r3, [pc, #588]	; (1f9e4 <_printf_float+0x2e0>)
   1f796:	4894      	ldr	r0, [pc, #592]	; (1f9e8 <_printf_float+0x2e4>)
   1f798:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   1f79c:	bf94      	ite	ls
   1f79e:	4698      	movls	r8, r3
   1f7a0:	4680      	movhi	r8, r0
   1f7a2:	2303      	movs	r3, #3
   1f7a4:	f04f 0900 	mov.w	r9, #0
   1f7a8:	6123      	str	r3, [r4, #16]
   1f7aa:	9b05      	ldr	r3, [sp, #20]
   1f7ac:	f023 0204 	bic.w	r2, r3, #4
   1f7b0:	6022      	str	r2, [r4, #0]
   1f7b2:	4633      	mov	r3, r6
   1f7b4:	aa0b      	add	r2, sp, #44	; 0x2c
   1f7b6:	4621      	mov	r1, r4
   1f7b8:	4628      	mov	r0, r5
   1f7ba:	9700      	str	r7, [sp, #0]
   1f7bc:	f008 f9a5 	bl	27b0a <_printf_common>
   1f7c0:	3001      	adds	r0, #1
   1f7c2:	f040 8090 	bne.w	1f8e6 <_printf_float+0x1e2>
   1f7c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f7ca:	b00d      	add	sp, #52	; 0x34
   1f7cc:	ecbd 8b02 	vpop	{d8}
   1f7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7d4:	4642      	mov	r2, r8
   1f7d6:	464b      	mov	r3, r9
   1f7d8:	4640      	mov	r0, r8
   1f7da:	4649      	mov	r1, r9
   1f7dc:	f7ed fb8c 	bl	cef8 <__aeabi_dcmpun>
   1f7e0:	b140      	cbz	r0, 1f7f4 <_printf_float+0xf0>
   1f7e2:	464b      	mov	r3, r9
   1f7e4:	4881      	ldr	r0, [pc, #516]	; (1f9ec <_printf_float+0x2e8>)
   1f7e6:	2b00      	cmp	r3, #0
   1f7e8:	bfbc      	itt	lt
   1f7ea:	232d      	movlt	r3, #45	; 0x2d
   1f7ec:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   1f7f0:	4b7f      	ldr	r3, [pc, #508]	; (1f9f0 <_printf_float+0x2ec>)
   1f7f2:	e7d1      	b.n	1f798 <_printf_float+0x94>
   1f7f4:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   1f7f8:	6863      	ldr	r3, [r4, #4]
   1f7fa:	9206      	str	r2, [sp, #24]
   1f7fc:	1c5a      	adds	r2, r3, #1
   1f7fe:	d13f      	bne.n	1f880 <_printf_float+0x17c>
   1f800:	2306      	movs	r3, #6
   1f802:	6063      	str	r3, [r4, #4]
   1f804:	9b05      	ldr	r3, [sp, #20]
   1f806:	4628      	mov	r0, r5
   1f808:	6861      	ldr	r1, [r4, #4]
   1f80a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   1f80e:	2300      	movs	r3, #0
   1f810:	9303      	str	r3, [sp, #12]
   1f812:	ab0a      	add	r3, sp, #40	; 0x28
   1f814:	6022      	str	r2, [r4, #0]
   1f816:	e9cd b301 	strd	fp, r3, [sp, #4]
   1f81a:	ab09      	add	r3, sp, #36	; 0x24
   1f81c:	ec49 8b10 	vmov	d0, r8, r9
   1f820:	9300      	str	r3, [sp, #0]
   1f822:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1f826:	f008 f8d0 	bl	279ca <__cvt>
   1f82a:	9b06      	ldr	r3, [sp, #24]
   1f82c:	4680      	mov	r8, r0
   1f82e:	9909      	ldr	r1, [sp, #36]	; 0x24
   1f830:	2b47      	cmp	r3, #71	; 0x47
   1f832:	d108      	bne.n	1f846 <_printf_float+0x142>
   1f834:	1cc8      	adds	r0, r1, #3
   1f836:	db02      	blt.n	1f83e <_printf_float+0x13a>
   1f838:	6863      	ldr	r3, [r4, #4]
   1f83a:	4299      	cmp	r1, r3
   1f83c:	dd41      	ble.n	1f8c2 <_printf_float+0x1be>
   1f83e:	f1ab 0b02 	sub.w	fp, fp, #2
   1f842:	fa5f fb8b 	uxtb.w	fp, fp
   1f846:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   1f84a:	d820      	bhi.n	1f88e <_printf_float+0x18a>
   1f84c:	3901      	subs	r1, #1
   1f84e:	465a      	mov	r2, fp
   1f850:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1f854:	9109      	str	r1, [sp, #36]	; 0x24
   1f856:	f008 f91a 	bl	27a8e <__exponent>
   1f85a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f85c:	4681      	mov	r9, r0
   1f85e:	1813      	adds	r3, r2, r0
   1f860:	2a01      	cmp	r2, #1
   1f862:	6123      	str	r3, [r4, #16]
   1f864:	dc02      	bgt.n	1f86c <_printf_float+0x168>
   1f866:	6822      	ldr	r2, [r4, #0]
   1f868:	07d2      	lsls	r2, r2, #31
   1f86a:	d501      	bpl.n	1f870 <_printf_float+0x16c>
   1f86c:	3301      	adds	r3, #1
   1f86e:	6123      	str	r3, [r4, #16]
   1f870:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1f874:	2b00      	cmp	r3, #0
   1f876:	d09c      	beq.n	1f7b2 <_printf_float+0xae>
   1f878:	232d      	movs	r3, #45	; 0x2d
   1f87a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1f87e:	e798      	b.n	1f7b2 <_printf_float+0xae>
   1f880:	9a06      	ldr	r2, [sp, #24]
   1f882:	2a47      	cmp	r2, #71	; 0x47
   1f884:	d1be      	bne.n	1f804 <_printf_float+0x100>
   1f886:	2b00      	cmp	r3, #0
   1f888:	d1bc      	bne.n	1f804 <_printf_float+0x100>
   1f88a:	2301      	movs	r3, #1
   1f88c:	e7b9      	b.n	1f802 <_printf_float+0xfe>
   1f88e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   1f892:	d118      	bne.n	1f8c6 <_printf_float+0x1c2>
   1f894:	2900      	cmp	r1, #0
   1f896:	6863      	ldr	r3, [r4, #4]
   1f898:	dd0b      	ble.n	1f8b2 <_printf_float+0x1ae>
   1f89a:	6121      	str	r1, [r4, #16]
   1f89c:	b913      	cbnz	r3, 1f8a4 <_printf_float+0x1a0>
   1f89e:	6822      	ldr	r2, [r4, #0]
   1f8a0:	07d0      	lsls	r0, r2, #31
   1f8a2:	d502      	bpl.n	1f8aa <_printf_float+0x1a6>
   1f8a4:	3301      	adds	r3, #1
   1f8a6:	440b      	add	r3, r1
   1f8a8:	6123      	str	r3, [r4, #16]
   1f8aa:	f04f 0900 	mov.w	r9, #0
   1f8ae:	65a1      	str	r1, [r4, #88]	; 0x58
   1f8b0:	e7de      	b.n	1f870 <_printf_float+0x16c>
   1f8b2:	b913      	cbnz	r3, 1f8ba <_printf_float+0x1b6>
   1f8b4:	6822      	ldr	r2, [r4, #0]
   1f8b6:	07d2      	lsls	r2, r2, #31
   1f8b8:	d501      	bpl.n	1f8be <_printf_float+0x1ba>
   1f8ba:	3302      	adds	r3, #2
   1f8bc:	e7f4      	b.n	1f8a8 <_printf_float+0x1a4>
   1f8be:	2301      	movs	r3, #1
   1f8c0:	e7f2      	b.n	1f8a8 <_printf_float+0x1a4>
   1f8c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
   1f8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f8c8:	4299      	cmp	r1, r3
   1f8ca:	db05      	blt.n	1f8d8 <_printf_float+0x1d4>
   1f8cc:	6823      	ldr	r3, [r4, #0]
   1f8ce:	6121      	str	r1, [r4, #16]
   1f8d0:	07d8      	lsls	r0, r3, #31
   1f8d2:	d5ea      	bpl.n	1f8aa <_printf_float+0x1a6>
   1f8d4:	1c4b      	adds	r3, r1, #1
   1f8d6:	e7e7      	b.n	1f8a8 <_printf_float+0x1a4>
   1f8d8:	2900      	cmp	r1, #0
   1f8da:	bfd4      	ite	le
   1f8dc:	f1c1 0202 	rsble	r2, r1, #2
   1f8e0:	2201      	movgt	r2, #1
   1f8e2:	4413      	add	r3, r2
   1f8e4:	e7e0      	b.n	1f8a8 <_printf_float+0x1a4>
   1f8e6:	6823      	ldr	r3, [r4, #0]
   1f8e8:	055a      	lsls	r2, r3, #21
   1f8ea:	d407      	bmi.n	1f8fc <_printf_float+0x1f8>
   1f8ec:	6923      	ldr	r3, [r4, #16]
   1f8ee:	4642      	mov	r2, r8
   1f8f0:	4631      	mov	r1, r6
   1f8f2:	4628      	mov	r0, r5
   1f8f4:	47b8      	blx	r7
   1f8f6:	3001      	adds	r0, #1
   1f8f8:	d12c      	bne.n	1f954 <_printf_float+0x250>
   1f8fa:	e764      	b.n	1f7c6 <_printf_float+0xc2>
   1f8fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   1f900:	f240 80e0 	bls.w	1fac4 <_printf_float+0x3c0>
   1f904:	2200      	movs	r2, #0
   1f906:	2300      	movs	r3, #0
   1f908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1f90c:	f7ec feaa 	bl	c664 <__aeabi_dcmpeq>
   1f910:	2800      	cmp	r0, #0
   1f912:	d034      	beq.n	1f97e <_printf_float+0x27a>
   1f914:	2301      	movs	r3, #1
   1f916:	4a37      	ldr	r2, [pc, #220]	; (1f9f4 <_printf_float+0x2f0>)
   1f918:	4631      	mov	r1, r6
   1f91a:	4628      	mov	r0, r5
   1f91c:	47b8      	blx	r7
   1f91e:	3001      	adds	r0, #1
   1f920:	f43f af51 	beq.w	1f7c6 <_printf_float+0xc2>
   1f924:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1f928:	429a      	cmp	r2, r3
   1f92a:	db02      	blt.n	1f932 <_printf_float+0x22e>
   1f92c:	6823      	ldr	r3, [r4, #0]
   1f92e:	07d8      	lsls	r0, r3, #31
   1f930:	d510      	bpl.n	1f954 <_printf_float+0x250>
   1f932:	ee18 3a10 	vmov	r3, s16
   1f936:	4652      	mov	r2, sl
   1f938:	4631      	mov	r1, r6
   1f93a:	4628      	mov	r0, r5
   1f93c:	47b8      	blx	r7
   1f93e:	3001      	adds	r0, #1
   1f940:	f43f af41 	beq.w	1f7c6 <_printf_float+0xc2>
   1f944:	f04f 0800 	mov.w	r8, #0
   1f948:	f104 091a 	add.w	r9, r4, #26
   1f94c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f94e:	3b01      	subs	r3, #1
   1f950:	4543      	cmp	r3, r8
   1f952:	dc09      	bgt.n	1f968 <_printf_float+0x264>
   1f954:	6823      	ldr	r3, [r4, #0]
   1f956:	079b      	lsls	r3, r3, #30
   1f958:	f100 8105 	bmi.w	1fb66 <_printf_float+0x462>
   1f95c:	68e0      	ldr	r0, [r4, #12]
   1f95e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f960:	4298      	cmp	r0, r3
   1f962:	bfb8      	it	lt
   1f964:	4618      	movlt	r0, r3
   1f966:	e730      	b.n	1f7ca <_printf_float+0xc6>
   1f968:	2301      	movs	r3, #1
   1f96a:	464a      	mov	r2, r9
   1f96c:	4631      	mov	r1, r6
   1f96e:	4628      	mov	r0, r5
   1f970:	47b8      	blx	r7
   1f972:	3001      	adds	r0, #1
   1f974:	f43f af27 	beq.w	1f7c6 <_printf_float+0xc2>
   1f978:	f108 0801 	add.w	r8, r8, #1
   1f97c:	e7e6      	b.n	1f94c <_printf_float+0x248>
   1f97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f980:	2b00      	cmp	r3, #0
   1f982:	dc39      	bgt.n	1f9f8 <_printf_float+0x2f4>
   1f984:	2301      	movs	r3, #1
   1f986:	4a1b      	ldr	r2, [pc, #108]	; (1f9f4 <_printf_float+0x2f0>)
   1f988:	4631      	mov	r1, r6
   1f98a:	4628      	mov	r0, r5
   1f98c:	47b8      	blx	r7
   1f98e:	3001      	adds	r0, #1
   1f990:	f43f af19 	beq.w	1f7c6 <_printf_float+0xc2>
   1f994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1f998:	4313      	orrs	r3, r2
   1f99a:	d102      	bne.n	1f9a2 <_printf_float+0x29e>
   1f99c:	6823      	ldr	r3, [r4, #0]
   1f99e:	07d9      	lsls	r1, r3, #31
   1f9a0:	d5d8      	bpl.n	1f954 <_printf_float+0x250>
   1f9a2:	ee18 3a10 	vmov	r3, s16
   1f9a6:	4652      	mov	r2, sl
   1f9a8:	4631      	mov	r1, r6
   1f9aa:	4628      	mov	r0, r5
   1f9ac:	47b8      	blx	r7
   1f9ae:	3001      	adds	r0, #1
   1f9b0:	f43f af09 	beq.w	1f7c6 <_printf_float+0xc2>
   1f9b4:	f04f 0900 	mov.w	r9, #0
   1f9b8:	f104 0a1a 	add.w	sl, r4, #26
   1f9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f9be:	425b      	negs	r3, r3
   1f9c0:	454b      	cmp	r3, r9
   1f9c2:	dc01      	bgt.n	1f9c8 <_printf_float+0x2c4>
   1f9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f9c6:	e792      	b.n	1f8ee <_printf_float+0x1ea>
   1f9c8:	2301      	movs	r3, #1
   1f9ca:	4652      	mov	r2, sl
   1f9cc:	4631      	mov	r1, r6
   1f9ce:	4628      	mov	r0, r5
   1f9d0:	47b8      	blx	r7
   1f9d2:	3001      	adds	r0, #1
   1f9d4:	f43f aef7 	beq.w	1f7c6 <_printf_float+0xc2>
   1f9d8:	f109 0901 	add.w	r9, r9, #1
   1f9dc:	e7ee      	b.n	1f9bc <_printf_float+0x2b8>
   1f9de:	bf00      	nop
   1f9e0:	7fefffff 	.word	0x7fefffff
   1f9e4:	000297c9 	.word	0x000297c9
   1f9e8:	000297cd 	.word	0x000297cd
   1f9ec:	000297d5 	.word	0x000297d5
   1f9f0:	000297d1 	.word	0x000297d1
   1f9f4:	00029401 	.word	0x00029401
   1f9f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f9fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1f9fc:	429a      	cmp	r2, r3
   1f9fe:	bfa8      	it	ge
   1fa00:	461a      	movge	r2, r3
   1fa02:	2a00      	cmp	r2, #0
   1fa04:	4691      	mov	r9, r2
   1fa06:	dc37      	bgt.n	1fa78 <_printf_float+0x374>
   1fa08:	f04f 0b00 	mov.w	fp, #0
   1fa0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   1fa10:	f104 021a 	add.w	r2, r4, #26
   1fa14:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1fa16:	9305      	str	r3, [sp, #20]
   1fa18:	eba3 0309 	sub.w	r3, r3, r9
   1fa1c:	455b      	cmp	r3, fp
   1fa1e:	dc33      	bgt.n	1fa88 <_printf_float+0x384>
   1fa20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1fa24:	429a      	cmp	r2, r3
   1fa26:	db3b      	blt.n	1faa0 <_printf_float+0x39c>
   1fa28:	6823      	ldr	r3, [r4, #0]
   1fa2a:	07da      	lsls	r2, r3, #31
   1fa2c:	d438      	bmi.n	1faa0 <_printf_float+0x39c>
   1fa2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1fa30:	9b05      	ldr	r3, [sp, #20]
   1fa32:	9909      	ldr	r1, [sp, #36]	; 0x24
   1fa34:	1ad3      	subs	r3, r2, r3
   1fa36:	eba2 0901 	sub.w	r9, r2, r1
   1fa3a:	4599      	cmp	r9, r3
   1fa3c:	bfa8      	it	ge
   1fa3e:	4699      	movge	r9, r3
   1fa40:	f1b9 0f00 	cmp.w	r9, #0
   1fa44:	dc35      	bgt.n	1fab2 <_printf_float+0x3ae>
   1fa46:	f04f 0800 	mov.w	r8, #0
   1fa4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   1fa4e:	f104 0a1a 	add.w	sl, r4, #26
   1fa52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1fa56:	1a9b      	subs	r3, r3, r2
   1fa58:	eba3 0309 	sub.w	r3, r3, r9
   1fa5c:	4543      	cmp	r3, r8
   1fa5e:	f77f af79 	ble.w	1f954 <_printf_float+0x250>
   1fa62:	2301      	movs	r3, #1
   1fa64:	4652      	mov	r2, sl
   1fa66:	4631      	mov	r1, r6
   1fa68:	4628      	mov	r0, r5
   1fa6a:	47b8      	blx	r7
   1fa6c:	3001      	adds	r0, #1
   1fa6e:	f43f aeaa 	beq.w	1f7c6 <_printf_float+0xc2>
   1fa72:	f108 0801 	add.w	r8, r8, #1
   1fa76:	e7ec      	b.n	1fa52 <_printf_float+0x34e>
   1fa78:	4613      	mov	r3, r2
   1fa7a:	4631      	mov	r1, r6
   1fa7c:	4642      	mov	r2, r8
   1fa7e:	4628      	mov	r0, r5
   1fa80:	47b8      	blx	r7
   1fa82:	3001      	adds	r0, #1
   1fa84:	d1c0      	bne.n	1fa08 <_printf_float+0x304>
   1fa86:	e69e      	b.n	1f7c6 <_printf_float+0xc2>
   1fa88:	2301      	movs	r3, #1
   1fa8a:	4631      	mov	r1, r6
   1fa8c:	4628      	mov	r0, r5
   1fa8e:	9205      	str	r2, [sp, #20]
   1fa90:	47b8      	blx	r7
   1fa92:	3001      	adds	r0, #1
   1fa94:	f43f ae97 	beq.w	1f7c6 <_printf_float+0xc2>
   1fa98:	f10b 0b01 	add.w	fp, fp, #1
   1fa9c:	9a05      	ldr	r2, [sp, #20]
   1fa9e:	e7b9      	b.n	1fa14 <_printf_float+0x310>
   1faa0:	ee18 3a10 	vmov	r3, s16
   1faa4:	4652      	mov	r2, sl
   1faa6:	4631      	mov	r1, r6
   1faa8:	4628      	mov	r0, r5
   1faaa:	47b8      	blx	r7
   1faac:	3001      	adds	r0, #1
   1faae:	d1be      	bne.n	1fa2e <_printf_float+0x32a>
   1fab0:	e689      	b.n	1f7c6 <_printf_float+0xc2>
   1fab2:	9a05      	ldr	r2, [sp, #20]
   1fab4:	464b      	mov	r3, r9
   1fab6:	4631      	mov	r1, r6
   1fab8:	4628      	mov	r0, r5
   1faba:	4442      	add	r2, r8
   1fabc:	47b8      	blx	r7
   1fabe:	3001      	adds	r0, #1
   1fac0:	d1c1      	bne.n	1fa46 <_printf_float+0x342>
   1fac2:	e680      	b.n	1f7c6 <_printf_float+0xc2>
   1fac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1fac6:	2a01      	cmp	r2, #1
   1fac8:	dc01      	bgt.n	1face <_printf_float+0x3ca>
   1faca:	07db      	lsls	r3, r3, #31
   1facc:	d538      	bpl.n	1fb40 <_printf_float+0x43c>
   1face:	2301      	movs	r3, #1
   1fad0:	4642      	mov	r2, r8
   1fad2:	4631      	mov	r1, r6
   1fad4:	4628      	mov	r0, r5
   1fad6:	47b8      	blx	r7
   1fad8:	3001      	adds	r0, #1
   1fada:	f43f ae74 	beq.w	1f7c6 <_printf_float+0xc2>
   1fade:	ee18 3a10 	vmov	r3, s16
   1fae2:	4652      	mov	r2, sl
   1fae4:	4631      	mov	r1, r6
   1fae6:	4628      	mov	r0, r5
   1fae8:	47b8      	blx	r7
   1faea:	3001      	adds	r0, #1
   1faec:	f43f ae6b 	beq.w	1f7c6 <_printf_float+0xc2>
   1faf0:	2200      	movs	r2, #0
   1faf2:	2300      	movs	r3, #0
   1faf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1faf8:	f7ec fdb4 	bl	c664 <__aeabi_dcmpeq>
   1fafc:	b9d8      	cbnz	r0, 1fb36 <_printf_float+0x432>
   1fafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fb00:	f108 0201 	add.w	r2, r8, #1
   1fb04:	3b01      	subs	r3, #1
   1fb06:	4631      	mov	r1, r6
   1fb08:	4628      	mov	r0, r5
   1fb0a:	47b8      	blx	r7
   1fb0c:	3001      	adds	r0, #1
   1fb0e:	d10e      	bne.n	1fb2e <_printf_float+0x42a>
   1fb10:	e659      	b.n	1f7c6 <_printf_float+0xc2>
   1fb12:	2301      	movs	r3, #1
   1fb14:	4652      	mov	r2, sl
   1fb16:	4631      	mov	r1, r6
   1fb18:	4628      	mov	r0, r5
   1fb1a:	47b8      	blx	r7
   1fb1c:	3001      	adds	r0, #1
   1fb1e:	f43f ae52 	beq.w	1f7c6 <_printf_float+0xc2>
   1fb22:	f108 0801 	add.w	r8, r8, #1
   1fb26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fb28:	3b01      	subs	r3, #1
   1fb2a:	4543      	cmp	r3, r8
   1fb2c:	dcf1      	bgt.n	1fb12 <_printf_float+0x40e>
   1fb2e:	464b      	mov	r3, r9
   1fb30:	f104 0250 	add.w	r2, r4, #80	; 0x50
   1fb34:	e6dc      	b.n	1f8f0 <_printf_float+0x1ec>
   1fb36:	f04f 0800 	mov.w	r8, #0
   1fb3a:	f104 0a1a 	add.w	sl, r4, #26
   1fb3e:	e7f2      	b.n	1fb26 <_printf_float+0x422>
   1fb40:	2301      	movs	r3, #1
   1fb42:	4642      	mov	r2, r8
   1fb44:	e7df      	b.n	1fb06 <_printf_float+0x402>
   1fb46:	2301      	movs	r3, #1
   1fb48:	464a      	mov	r2, r9
   1fb4a:	4631      	mov	r1, r6
   1fb4c:	4628      	mov	r0, r5
   1fb4e:	47b8      	blx	r7
   1fb50:	3001      	adds	r0, #1
   1fb52:	f43f ae38 	beq.w	1f7c6 <_printf_float+0xc2>
   1fb56:	f108 0801 	add.w	r8, r8, #1
   1fb5a:	68e3      	ldr	r3, [r4, #12]
   1fb5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1fb5e:	1a5b      	subs	r3, r3, r1
   1fb60:	4543      	cmp	r3, r8
   1fb62:	dcf0      	bgt.n	1fb46 <_printf_float+0x442>
   1fb64:	e6fa      	b.n	1f95c <_printf_float+0x258>
   1fb66:	f04f 0800 	mov.w	r8, #0
   1fb6a:	f104 0919 	add.w	r9, r4, #25
   1fb6e:	e7f4      	b.n	1fb5a <_printf_float+0x456>

0001fb70 <_printf_i>:
   1fb70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1fb74:	460c      	mov	r4, r1
   1fb76:	4691      	mov	r9, r2
   1fb78:	4680      	mov	r8, r0
   1fb7a:	469a      	mov	sl, r3
   1fb7c:	7e27      	ldrb	r7, [r4, #24]
   1fb7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1fb82:	990c      	ldr	r1, [sp, #48]	; 0x30
   1fb84:	2f78      	cmp	r7, #120	; 0x78
   1fb86:	d807      	bhi.n	1fb98 <_printf_i+0x28>
   1fb88:	2f62      	cmp	r7, #98	; 0x62
   1fb8a:	d80a      	bhi.n	1fba2 <_printf_i+0x32>
   1fb8c:	2f00      	cmp	r7, #0
   1fb8e:	f000 80d8 	beq.w	1fd42 <_printf_i+0x1d2>
   1fb92:	2f58      	cmp	r7, #88	; 0x58
   1fb94:	f000 80a3 	beq.w	1fcde <_printf_i+0x16e>
   1fb98:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1fb9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1fba0:	e03a      	b.n	1fc18 <_printf_i+0xa8>
   1fba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1fba6:	2b15      	cmp	r3, #21
   1fba8:	d8f6      	bhi.n	1fb98 <_printf_i+0x28>
   1fbaa:	a001      	add	r0, pc, #4	; (adr r0, 1fbb0 <_printf_i+0x40>)
   1fbac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1fbb0:	0001fc09 	.word	0x0001fc09
   1fbb4:	0001fc1d 	.word	0x0001fc1d
   1fbb8:	0001fb99 	.word	0x0001fb99
   1fbbc:	0001fb99 	.word	0x0001fb99
   1fbc0:	0001fb99 	.word	0x0001fb99
   1fbc4:	0001fb99 	.word	0x0001fb99
   1fbc8:	0001fc1d 	.word	0x0001fc1d
   1fbcc:	0001fb99 	.word	0x0001fb99
   1fbd0:	0001fb99 	.word	0x0001fb99
   1fbd4:	0001fb99 	.word	0x0001fb99
   1fbd8:	0001fb99 	.word	0x0001fb99
   1fbdc:	0001fd29 	.word	0x0001fd29
   1fbe0:	0001fc4d 	.word	0x0001fc4d
   1fbe4:	0001fd0b 	.word	0x0001fd0b
   1fbe8:	0001fb99 	.word	0x0001fb99
   1fbec:	0001fb99 	.word	0x0001fb99
   1fbf0:	0001fd4b 	.word	0x0001fd4b
   1fbf4:	0001fb99 	.word	0x0001fb99
   1fbf8:	0001fc4d 	.word	0x0001fc4d
   1fbfc:	0001fb99 	.word	0x0001fb99
   1fc00:	0001fb99 	.word	0x0001fb99
   1fc04:	0001fd13 	.word	0x0001fd13
   1fc08:	680b      	ldr	r3, [r1, #0]
   1fc0a:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1fc0e:	1d1a      	adds	r2, r3, #4
   1fc10:	681b      	ldr	r3, [r3, #0]
   1fc12:	600a      	str	r2, [r1, #0]
   1fc14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1fc18:	2301      	movs	r3, #1
   1fc1a:	e0a3      	b.n	1fd64 <_printf_i+0x1f4>
   1fc1c:	6825      	ldr	r5, [r4, #0]
   1fc1e:	6808      	ldr	r0, [r1, #0]
   1fc20:	062e      	lsls	r6, r5, #24
   1fc22:	f100 0304 	add.w	r3, r0, #4
   1fc26:	d50a      	bpl.n	1fc3e <_printf_i+0xce>
   1fc28:	6805      	ldr	r5, [r0, #0]
   1fc2a:	600b      	str	r3, [r1, #0]
   1fc2c:	2d00      	cmp	r5, #0
   1fc2e:	da03      	bge.n	1fc38 <_printf_i+0xc8>
   1fc30:	232d      	movs	r3, #45	; 0x2d
   1fc32:	426d      	negs	r5, r5
   1fc34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1fc38:	485e      	ldr	r0, [pc, #376]	; (1fdb4 <_printf_i+0x244>)
   1fc3a:	230a      	movs	r3, #10
   1fc3c:	e019      	b.n	1fc72 <_printf_i+0x102>
   1fc3e:	f015 0f40 	tst.w	r5, #64	; 0x40
   1fc42:	6805      	ldr	r5, [r0, #0]
   1fc44:	600b      	str	r3, [r1, #0]
   1fc46:	bf18      	it	ne
   1fc48:	b22d      	sxthne	r5, r5
   1fc4a:	e7ef      	b.n	1fc2c <_printf_i+0xbc>
   1fc4c:	680b      	ldr	r3, [r1, #0]
   1fc4e:	6825      	ldr	r5, [r4, #0]
   1fc50:	1d18      	adds	r0, r3, #4
   1fc52:	6008      	str	r0, [r1, #0]
   1fc54:	0628      	lsls	r0, r5, #24
   1fc56:	d501      	bpl.n	1fc5c <_printf_i+0xec>
   1fc58:	681d      	ldr	r5, [r3, #0]
   1fc5a:	e002      	b.n	1fc62 <_printf_i+0xf2>
   1fc5c:	0669      	lsls	r1, r5, #25
   1fc5e:	d5fb      	bpl.n	1fc58 <_printf_i+0xe8>
   1fc60:	881d      	ldrh	r5, [r3, #0]
   1fc62:	2f6f      	cmp	r7, #111	; 0x6f
   1fc64:	4853      	ldr	r0, [pc, #332]	; (1fdb4 <_printf_i+0x244>)
   1fc66:	bf0c      	ite	eq
   1fc68:	2308      	moveq	r3, #8
   1fc6a:	230a      	movne	r3, #10
   1fc6c:	2100      	movs	r1, #0
   1fc6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1fc72:	6866      	ldr	r6, [r4, #4]
   1fc74:	2e00      	cmp	r6, #0
   1fc76:	60a6      	str	r6, [r4, #8]
   1fc78:	bfa2      	ittt	ge
   1fc7a:	6821      	ldrge	r1, [r4, #0]
   1fc7c:	f021 0104 	bicge.w	r1, r1, #4
   1fc80:	6021      	strge	r1, [r4, #0]
   1fc82:	b90d      	cbnz	r5, 1fc88 <_printf_i+0x118>
   1fc84:	2e00      	cmp	r6, #0
   1fc86:	d04d      	beq.n	1fd24 <_printf_i+0x1b4>
   1fc88:	4616      	mov	r6, r2
   1fc8a:	fbb5 f1f3 	udiv	r1, r5, r3
   1fc8e:	fb03 5711 	mls	r7, r3, r1, r5
   1fc92:	5dc7      	ldrb	r7, [r0, r7]
   1fc94:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1fc98:	462f      	mov	r7, r5
   1fc9a:	460d      	mov	r5, r1
   1fc9c:	42bb      	cmp	r3, r7
   1fc9e:	d9f4      	bls.n	1fc8a <_printf_i+0x11a>
   1fca0:	2b08      	cmp	r3, #8
   1fca2:	d10b      	bne.n	1fcbc <_printf_i+0x14c>
   1fca4:	6823      	ldr	r3, [r4, #0]
   1fca6:	07df      	lsls	r7, r3, #31
   1fca8:	d508      	bpl.n	1fcbc <_printf_i+0x14c>
   1fcaa:	6923      	ldr	r3, [r4, #16]
   1fcac:	6861      	ldr	r1, [r4, #4]
   1fcae:	4299      	cmp	r1, r3
   1fcb0:	bfde      	ittt	le
   1fcb2:	2330      	movle	r3, #48	; 0x30
   1fcb4:	f806 3c01 	strble.w	r3, [r6, #-1]
   1fcb8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   1fcbc:	1b92      	subs	r2, r2, r6
   1fcbe:	6122      	str	r2, [r4, #16]
   1fcc0:	464b      	mov	r3, r9
   1fcc2:	aa03      	add	r2, sp, #12
   1fcc4:	4621      	mov	r1, r4
   1fcc6:	4640      	mov	r0, r8
   1fcc8:	f8cd a000 	str.w	sl, [sp]
   1fccc:	f007 ff1d 	bl	27b0a <_printf_common>
   1fcd0:	3001      	adds	r0, #1
   1fcd2:	d14c      	bne.n	1fd6e <_printf_i+0x1fe>
   1fcd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fcd8:	b004      	add	sp, #16
   1fcda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fcde:	4835      	ldr	r0, [pc, #212]	; (1fdb4 <_printf_i+0x244>)
   1fce0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   1fce4:	6823      	ldr	r3, [r4, #0]
   1fce6:	680e      	ldr	r6, [r1, #0]
   1fce8:	061f      	lsls	r7, r3, #24
   1fcea:	f856 5b04 	ldr.w	r5, [r6], #4
   1fcee:	600e      	str	r6, [r1, #0]
   1fcf0:	d514      	bpl.n	1fd1c <_printf_i+0x1ac>
   1fcf2:	07d9      	lsls	r1, r3, #31
   1fcf4:	bf44      	itt	mi
   1fcf6:	f043 0320 	orrmi.w	r3, r3, #32
   1fcfa:	6023      	strmi	r3, [r4, #0]
   1fcfc:	b91d      	cbnz	r5, 1fd06 <_printf_i+0x196>
   1fcfe:	6823      	ldr	r3, [r4, #0]
   1fd00:	f023 0320 	bic.w	r3, r3, #32
   1fd04:	6023      	str	r3, [r4, #0]
   1fd06:	2310      	movs	r3, #16
   1fd08:	e7b0      	b.n	1fc6c <_printf_i+0xfc>
   1fd0a:	6823      	ldr	r3, [r4, #0]
   1fd0c:	f043 0320 	orr.w	r3, r3, #32
   1fd10:	6023      	str	r3, [r4, #0]
   1fd12:	2378      	movs	r3, #120	; 0x78
   1fd14:	4828      	ldr	r0, [pc, #160]	; (1fdb8 <_printf_i+0x248>)
   1fd16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   1fd1a:	e7e3      	b.n	1fce4 <_printf_i+0x174>
   1fd1c:	065e      	lsls	r6, r3, #25
   1fd1e:	bf48      	it	mi
   1fd20:	b2ad      	uxthmi	r5, r5
   1fd22:	e7e6      	b.n	1fcf2 <_printf_i+0x182>
   1fd24:	4616      	mov	r6, r2
   1fd26:	e7bb      	b.n	1fca0 <_printf_i+0x130>
   1fd28:	680b      	ldr	r3, [r1, #0]
   1fd2a:	6826      	ldr	r6, [r4, #0]
   1fd2c:	1d1d      	adds	r5, r3, #4
   1fd2e:	6960      	ldr	r0, [r4, #20]
   1fd30:	600d      	str	r5, [r1, #0]
   1fd32:	0635      	lsls	r5, r6, #24
   1fd34:	681b      	ldr	r3, [r3, #0]
   1fd36:	d501      	bpl.n	1fd3c <_printf_i+0x1cc>
   1fd38:	6018      	str	r0, [r3, #0]
   1fd3a:	e002      	b.n	1fd42 <_printf_i+0x1d2>
   1fd3c:	0671      	lsls	r1, r6, #25
   1fd3e:	d5fb      	bpl.n	1fd38 <_printf_i+0x1c8>
   1fd40:	8018      	strh	r0, [r3, #0]
   1fd42:	2300      	movs	r3, #0
   1fd44:	4616      	mov	r6, r2
   1fd46:	6123      	str	r3, [r4, #16]
   1fd48:	e7ba      	b.n	1fcc0 <_printf_i+0x150>
   1fd4a:	680b      	ldr	r3, [r1, #0]
   1fd4c:	1d1a      	adds	r2, r3, #4
   1fd4e:	600a      	str	r2, [r1, #0]
   1fd50:	2100      	movs	r1, #0
   1fd52:	681e      	ldr	r6, [r3, #0]
   1fd54:	6862      	ldr	r2, [r4, #4]
   1fd56:	4630      	mov	r0, r6
   1fd58:	f007 fdd9 	bl	2790e <memchr>
   1fd5c:	b108      	cbz	r0, 1fd62 <_printf_i+0x1f2>
   1fd5e:	1b80      	subs	r0, r0, r6
   1fd60:	6060      	str	r0, [r4, #4]
   1fd62:	6863      	ldr	r3, [r4, #4]
   1fd64:	6123      	str	r3, [r4, #16]
   1fd66:	2300      	movs	r3, #0
   1fd68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1fd6c:	e7a8      	b.n	1fcc0 <_printf_i+0x150>
   1fd6e:	6923      	ldr	r3, [r4, #16]
   1fd70:	4632      	mov	r2, r6
   1fd72:	4649      	mov	r1, r9
   1fd74:	4640      	mov	r0, r8
   1fd76:	47d0      	blx	sl
   1fd78:	3001      	adds	r0, #1
   1fd7a:	d0ab      	beq.n	1fcd4 <_printf_i+0x164>
   1fd7c:	6823      	ldr	r3, [r4, #0]
   1fd7e:	079b      	lsls	r3, r3, #30
   1fd80:	d413      	bmi.n	1fdaa <_printf_i+0x23a>
   1fd82:	68e0      	ldr	r0, [r4, #12]
   1fd84:	9b03      	ldr	r3, [sp, #12]
   1fd86:	4298      	cmp	r0, r3
   1fd88:	bfb8      	it	lt
   1fd8a:	4618      	movlt	r0, r3
   1fd8c:	e7a4      	b.n	1fcd8 <_printf_i+0x168>
   1fd8e:	2301      	movs	r3, #1
   1fd90:	4632      	mov	r2, r6
   1fd92:	4649      	mov	r1, r9
   1fd94:	4640      	mov	r0, r8
   1fd96:	47d0      	blx	sl
   1fd98:	3001      	adds	r0, #1
   1fd9a:	d09b      	beq.n	1fcd4 <_printf_i+0x164>
   1fd9c:	3501      	adds	r5, #1
   1fd9e:	68e3      	ldr	r3, [r4, #12]
   1fda0:	9903      	ldr	r1, [sp, #12]
   1fda2:	1a5b      	subs	r3, r3, r1
   1fda4:	42ab      	cmp	r3, r5
   1fda6:	dcf2      	bgt.n	1fd8e <_printf_i+0x21e>
   1fda8:	e7eb      	b.n	1fd82 <_printf_i+0x212>
   1fdaa:	2500      	movs	r5, #0
   1fdac:	f104 0619 	add.w	r6, r4, #25
   1fdb0:	e7f5      	b.n	1fd9e <_printf_i+0x22e>
   1fdb2:	bf00      	nop
   1fdb4:	000297d9 	.word	0x000297d9
   1fdb8:	000297ea 	.word	0x000297ea

0001fdbc <realloc>:
   1fdbc:	4b02      	ldr	r3, [pc, #8]	; (1fdc8 <realloc+0xc>)
   1fdbe:	460a      	mov	r2, r1
   1fdc0:	4601      	mov	r1, r0
   1fdc2:	6818      	ldr	r0, [r3, #0]
   1fdc4:	f008 b96a 	b.w	2809c <_realloc_r>
   1fdc8:	200205d0 	.word	0x200205d0

0001fdcc <_sbrk_r>:
   1fdcc:	b538      	push	{r3, r4, r5, lr}
   1fdce:	2300      	movs	r3, #0
   1fdd0:	4d05      	ldr	r5, [pc, #20]	; (1fde8 <_sbrk_r+0x1c>)
   1fdd2:	4604      	mov	r4, r0
   1fdd4:	4608      	mov	r0, r1
   1fdd6:	602b      	str	r3, [r5, #0]
   1fdd8:	f7f0 fc80 	bl	106dc <_sbrk>
   1fddc:	1c43      	adds	r3, r0, #1
   1fdde:	d102      	bne.n	1fde6 <_sbrk_r+0x1a>
   1fde0:	682b      	ldr	r3, [r5, #0]
   1fde2:	b103      	cbz	r3, 1fde6 <_sbrk_r+0x1a>
   1fde4:	6023      	str	r3, [r4, #0]
   1fde6:	bd38      	pop	{r3, r4, r5, pc}
   1fde8:	2002b0b4 	.word	0x2002b0b4

0001fdec <sniprintf>:
   1fdec:	b40c      	push	{r2, r3}
   1fdee:	4b18      	ldr	r3, [pc, #96]	; (1fe50 <sniprintf+0x64>)
   1fdf0:	b530      	push	{r4, r5, lr}
   1fdf2:	1e0c      	subs	r4, r1, #0
   1fdf4:	b09d      	sub	sp, #116	; 0x74
   1fdf6:	681d      	ldr	r5, [r3, #0]
   1fdf8:	da08      	bge.n	1fe0c <sniprintf+0x20>
   1fdfa:	238b      	movs	r3, #139	; 0x8b
   1fdfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fe00:	602b      	str	r3, [r5, #0]
   1fe02:	b01d      	add	sp, #116	; 0x74
   1fe04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1fe08:	b002      	add	sp, #8
   1fe0a:	4770      	bx	lr
   1fe0c:	f44f 7302 	mov.w	r3, #520	; 0x208
   1fe10:	9002      	str	r0, [sp, #8]
   1fe12:	9006      	str	r0, [sp, #24]
   1fe14:	a902      	add	r1, sp, #8
   1fe16:	f8ad 3014 	strh.w	r3, [sp, #20]
   1fe1a:	bf14      	ite	ne
   1fe1c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   1fe20:	4623      	moveq	r3, r4
   1fe22:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1fe24:	4628      	mov	r0, r5
   1fe26:	9304      	str	r3, [sp, #16]
   1fe28:	9307      	str	r3, [sp, #28]
   1fe2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1fe2e:	f8ad 3016 	strh.w	r3, [sp, #22]
   1fe32:	ab21      	add	r3, sp, #132	; 0x84
   1fe34:	9301      	str	r3, [sp, #4]
   1fe36:	f000 ffdd 	bl	20df4 <_svfiprintf_r>
   1fe3a:	1c43      	adds	r3, r0, #1
   1fe3c:	bfbc      	itt	lt
   1fe3e:	238b      	movlt	r3, #139	; 0x8b
   1fe40:	602b      	strlt	r3, [r5, #0]
   1fe42:	2c00      	cmp	r4, #0
   1fe44:	d0dd      	beq.n	1fe02 <sniprintf+0x16>
   1fe46:	9b02      	ldr	r3, [sp, #8]
   1fe48:	2200      	movs	r2, #0
   1fe4a:	701a      	strb	r2, [r3, #0]
   1fe4c:	e7d9      	b.n	1fe02 <sniprintf+0x16>
   1fe4e:	bf00      	nop
   1fe50:	200205d0 	.word	0x200205d0

0001fe54 <siscanf>:
   1fe54:	b40e      	push	{r1, r2, r3}
   1fe56:	b510      	push	{r4, lr}
   1fe58:	b09f      	sub	sp, #124	; 0x7c
   1fe5a:	f44f 7101 	mov.w	r1, #516	; 0x204
   1fe5e:	ac21      	add	r4, sp, #132	; 0x84
   1fe60:	f8ad 101c 	strh.w	r1, [sp, #28]
   1fe64:	9004      	str	r0, [sp, #16]
   1fe66:	f854 2b04 	ldr.w	r2, [r4], #4
   1fe6a:	9008      	str	r0, [sp, #32]
   1fe6c:	9201      	str	r2, [sp, #4]
   1fe6e:	f7ed f863 	bl	cf38 <strlen>
   1fe72:	4b0c      	ldr	r3, [pc, #48]	; (1fea4 <siscanf+0x50>)
   1fe74:	a904      	add	r1, sp, #16
   1fe76:	9005      	str	r0, [sp, #20]
   1fe78:	930d      	str	r3, [sp, #52]	; 0x34
   1fe7a:	2300      	movs	r3, #0
   1fe7c:	9009      	str	r0, [sp, #36]	; 0x24
   1fe7e:	9311      	str	r3, [sp, #68]	; 0x44
   1fe80:	9316      	str	r3, [sp, #88]	; 0x58
   1fe82:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1fe86:	4808      	ldr	r0, [pc, #32]	; (1fea8 <siscanf+0x54>)
   1fe88:	f8ad 301e 	strh.w	r3, [sp, #30]
   1fe8c:	4623      	mov	r3, r4
   1fe8e:	9a01      	ldr	r2, [sp, #4]
   1fe90:	6800      	ldr	r0, [r0, #0]
   1fe92:	9403      	str	r4, [sp, #12]
   1fe94:	f001 f8ae 	bl	20ff4 <__ssvfiscanf_r>
   1fe98:	b01f      	add	sp, #124	; 0x7c
   1fe9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fe9e:	b003      	add	sp, #12
   1fea0:	4770      	bx	lr
   1fea2:	bf00      	nop
   1fea4:	00027c41 	.word	0x00027c41
   1fea8:	200205d0 	.word	0x200205d0

0001feac <strdup>:
   1feac:	4b02      	ldr	r3, [pc, #8]	; (1feb8 <strdup+0xc>)
   1feae:	4601      	mov	r1, r0
   1feb0:	6818      	ldr	r0, [r3, #0]
   1feb2:	f007 bf0e 	b.w	27cd2 <_strdup_r>
   1feb6:	bf00      	nop
   1feb8:	200205d0 	.word	0x200205d0

0001febc <strtok>:
   1febc:	4b16      	ldr	r3, [pc, #88]	; (1ff18 <strtok+0x5c>)
   1febe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1fec0:	681e      	ldr	r6, [r3, #0]
   1fec2:	4605      	mov	r5, r0
   1fec4:	6db4      	ldr	r4, [r6, #88]	; 0x58
   1fec6:	b9fc      	cbnz	r4, 1ff08 <strtok+0x4c>
   1fec8:	2050      	movs	r0, #80	; 0x50
   1feca:	9101      	str	r1, [sp, #4]
   1fecc:	f7ff f8e0 	bl	1f090 <malloc>
   1fed0:	9901      	ldr	r1, [sp, #4]
   1fed2:	4602      	mov	r2, r0
   1fed4:	65b0      	str	r0, [r6, #88]	; 0x58
   1fed6:	b920      	cbnz	r0, 1fee2 <strtok+0x26>
   1fed8:	4b10      	ldr	r3, [pc, #64]	; (1ff1c <strtok+0x60>)
   1feda:	2157      	movs	r1, #87	; 0x57
   1fedc:	4810      	ldr	r0, [pc, #64]	; (1ff20 <strtok+0x64>)
   1fede:	f000 fbab 	bl	20638 <__assert_func>
   1fee2:	e9c0 4400 	strd	r4, r4, [r0]
   1fee6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   1feea:	e9c0 4404 	strd	r4, r4, [r0, #16]
   1feee:	6184      	str	r4, [r0, #24]
   1fef0:	7704      	strb	r4, [r0, #28]
   1fef2:	6244      	str	r4, [r0, #36]	; 0x24
   1fef4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   1fef8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   1fefc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   1ff00:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   1ff04:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   1ff08:	2301      	movs	r3, #1
   1ff0a:	6db2      	ldr	r2, [r6, #88]	; 0x58
   1ff0c:	4628      	mov	r0, r5
   1ff0e:	b002      	add	sp, #8
   1ff10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ff14:	f007 bf2e 	b.w	27d74 <__strtok_r>
   1ff18:	200205d0 	.word	0x200205d0
   1ff1c:	000297fb 	.word	0x000297fb
   1ff20:	00029812 	.word	0x00029812

0001ff24 <_strtol_l.isra.0>:
   1ff24:	2b01      	cmp	r3, #1
   1ff26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ff2a:	d001      	beq.n	1ff30 <_strtol_l.isra.0+0xc>
   1ff2c:	2b24      	cmp	r3, #36	; 0x24
   1ff2e:	d906      	bls.n	1ff3e <_strtol_l.isra.0+0x1a>
   1ff30:	f003 f838 	bl	22fa4 <__errno>
   1ff34:	2316      	movs	r3, #22
   1ff36:	6003      	str	r3, [r0, #0]
   1ff38:	2000      	movs	r0, #0
   1ff3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ff3e:	468e      	mov	lr, r1
   1ff40:	4f38      	ldr	r7, [pc, #224]	; (20024 <_strtol_l.isra.0+0x100>)
   1ff42:	4676      	mov	r6, lr
   1ff44:	f81e 4b01 	ldrb.w	r4, [lr], #1
   1ff48:	5de5      	ldrb	r5, [r4, r7]
   1ff4a:	f015 0508 	ands.w	r5, r5, #8
   1ff4e:	d1f8      	bne.n	1ff42 <_strtol_l.isra.0+0x1e>
   1ff50:	2c2d      	cmp	r4, #45	; 0x2d
   1ff52:	d134      	bne.n	1ffbe <_strtol_l.isra.0+0x9a>
   1ff54:	f89e 4000 	ldrb.w	r4, [lr]
   1ff58:	f04f 0801 	mov.w	r8, #1
   1ff5c:	f106 0e02 	add.w	lr, r6, #2
   1ff60:	2b00      	cmp	r3, #0
   1ff62:	d05b      	beq.n	2001c <_strtol_l.isra.0+0xf8>
   1ff64:	2b10      	cmp	r3, #16
   1ff66:	d10c      	bne.n	1ff82 <_strtol_l.isra.0+0x5e>
   1ff68:	2c30      	cmp	r4, #48	; 0x30
   1ff6a:	d10a      	bne.n	1ff82 <_strtol_l.isra.0+0x5e>
   1ff6c:	f89e 4000 	ldrb.w	r4, [lr]
   1ff70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   1ff74:	2c58      	cmp	r4, #88	; 0x58
   1ff76:	d14c      	bne.n	20012 <_strtol_l.isra.0+0xee>
   1ff78:	f89e 4001 	ldrb.w	r4, [lr, #1]
   1ff7c:	2310      	movs	r3, #16
   1ff7e:	f10e 0e02 	add.w	lr, lr, #2
   1ff82:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
   1ff86:	2600      	movs	r6, #0
   1ff88:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1ff8c:	4635      	mov	r5, r6
   1ff8e:	fbbc f9f3 	udiv	r9, ip, r3
   1ff92:	fb03 ca19 	mls	sl, r3, r9, ip
   1ff96:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   1ff9a:	2f09      	cmp	r7, #9
   1ff9c:	d817      	bhi.n	1ffce <_strtol_l.isra.0+0xaa>
   1ff9e:	463c      	mov	r4, r7
   1ffa0:	42a3      	cmp	r3, r4
   1ffa2:	dd23      	ble.n	1ffec <_strtol_l.isra.0+0xc8>
   1ffa4:	2e00      	cmp	r6, #0
   1ffa6:	db1e      	blt.n	1ffe6 <_strtol_l.isra.0+0xc2>
   1ffa8:	45a9      	cmp	r9, r5
   1ffaa:	d31c      	bcc.n	1ffe6 <_strtol_l.isra.0+0xc2>
   1ffac:	d101      	bne.n	1ffb2 <_strtol_l.isra.0+0x8e>
   1ffae:	45a2      	cmp	sl, r4
   1ffb0:	db19      	blt.n	1ffe6 <_strtol_l.isra.0+0xc2>
   1ffb2:	fb05 4503 	mla	r5, r5, r3, r4
   1ffb6:	2601      	movs	r6, #1
   1ffb8:	f81e 4b01 	ldrb.w	r4, [lr], #1
   1ffbc:	e7eb      	b.n	1ff96 <_strtol_l.isra.0+0x72>
   1ffbe:	2c2b      	cmp	r4, #43	; 0x2b
   1ffc0:	46a8      	mov	r8, r5
   1ffc2:	bf04      	itt	eq
   1ffc4:	f89e 4000 	ldrbeq.w	r4, [lr]
   1ffc8:	f106 0e02 	addeq.w	lr, r6, #2
   1ffcc:	e7c8      	b.n	1ff60 <_strtol_l.isra.0+0x3c>
   1ffce:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   1ffd2:	2f19      	cmp	r7, #25
   1ffd4:	d801      	bhi.n	1ffda <_strtol_l.isra.0+0xb6>
   1ffd6:	3c37      	subs	r4, #55	; 0x37
   1ffd8:	e7e2      	b.n	1ffa0 <_strtol_l.isra.0+0x7c>
   1ffda:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   1ffde:	2f19      	cmp	r7, #25
   1ffe0:	d804      	bhi.n	1ffec <_strtol_l.isra.0+0xc8>
   1ffe2:	3c57      	subs	r4, #87	; 0x57
   1ffe4:	e7dc      	b.n	1ffa0 <_strtol_l.isra.0+0x7c>
   1ffe6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1ffea:	e7e5      	b.n	1ffb8 <_strtol_l.isra.0+0x94>
   1ffec:	2e00      	cmp	r6, #0
   1ffee:	da05      	bge.n	1fffc <_strtol_l.isra.0+0xd8>
   1fff0:	2322      	movs	r3, #34	; 0x22
   1fff2:	4665      	mov	r5, ip
   1fff4:	6003      	str	r3, [r0, #0]
   1fff6:	b942      	cbnz	r2, 2000a <_strtol_l.isra.0+0xe6>
   1fff8:	4628      	mov	r0, r5
   1fffa:	e79e      	b.n	1ff3a <_strtol_l.isra.0+0x16>
   1fffc:	f1b8 0f00 	cmp.w	r8, #0
   20000:	d000      	beq.n	20004 <_strtol_l.isra.0+0xe0>
   20002:	426d      	negs	r5, r5
   20004:	2a00      	cmp	r2, #0
   20006:	d0f7      	beq.n	1fff8 <_strtol_l.isra.0+0xd4>
   20008:	b10e      	cbz	r6, 2000e <_strtol_l.isra.0+0xea>
   2000a:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   2000e:	6011      	str	r1, [r2, #0]
   20010:	e7f2      	b.n	1fff8 <_strtol_l.isra.0+0xd4>
   20012:	2430      	movs	r4, #48	; 0x30
   20014:	2b00      	cmp	r3, #0
   20016:	d1b4      	bne.n	1ff82 <_strtol_l.isra.0+0x5e>
   20018:	2308      	movs	r3, #8
   2001a:	e7b2      	b.n	1ff82 <_strtol_l.isra.0+0x5e>
   2001c:	2c30      	cmp	r4, #48	; 0x30
   2001e:	d0a5      	beq.n	1ff6c <_strtol_l.isra.0+0x48>
   20020:	230a      	movs	r3, #10
   20022:	e7ae      	b.n	1ff82 <_strtol_l.isra.0+0x5e>
   20024:	000296c9 	.word	0x000296c9

00020028 <strtol>:
   20028:	4613      	mov	r3, r2
   2002a:	460a      	mov	r2, r1
   2002c:	4601      	mov	r1, r0
   2002e:	4802      	ldr	r0, [pc, #8]	; (20038 <strtol+0x10>)
   20030:	6800      	ldr	r0, [r0, #0]
   20032:	f7ff bf77 	b.w	1ff24 <_strtol_l.isra.0>
   20036:	bf00      	nop
   20038:	200205d0 	.word	0x200205d0

0002003c <_strtoul_l.isra.0>:
   2003c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20040:	468c      	mov	ip, r1
   20042:	4686      	mov	lr, r0
   20044:	4e39      	ldr	r6, [pc, #228]	; (2012c <_strtoul_l.isra.0+0xf0>)
   20046:	4660      	mov	r0, ip
   20048:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2004c:	5da5      	ldrb	r5, [r4, r6]
   2004e:	f015 0508 	ands.w	r5, r5, #8
   20052:	d1f8      	bne.n	20046 <_strtoul_l.isra.0+0xa>
   20054:	2c2d      	cmp	r4, #45	; 0x2d
   20056:	d134      	bne.n	200c2 <_strtoul_l.isra.0+0x86>
   20058:	f89c 4000 	ldrb.w	r4, [ip]
   2005c:	f04f 0801 	mov.w	r8, #1
   20060:	f100 0c02 	add.w	ip, r0, #2
   20064:	2b00      	cmp	r3, #0
   20066:	d05d      	beq.n	20124 <_strtoul_l.isra.0+0xe8>
   20068:	2b10      	cmp	r3, #16
   2006a:	d10c      	bne.n	20086 <_strtoul_l.isra.0+0x4a>
   2006c:	2c30      	cmp	r4, #48	; 0x30
   2006e:	d10a      	bne.n	20086 <_strtoul_l.isra.0+0x4a>
   20070:	f89c 0000 	ldrb.w	r0, [ip]
   20074:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   20078:	2858      	cmp	r0, #88	; 0x58
   2007a:	d14e      	bne.n	2011a <_strtoul_l.isra.0+0xde>
   2007c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   20080:	2310      	movs	r3, #16
   20082:	f10c 0c02 	add.w	ip, ip, #2
   20086:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2008a:	2500      	movs	r5, #0
   2008c:	fbb7 f7f3 	udiv	r7, r7, r3
   20090:	fb03 f907 	mul.w	r9, r3, r7
   20094:	4628      	mov	r0, r5
   20096:	ea6f 0909 	mvn.w	r9, r9
   2009a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   2009e:	2e09      	cmp	r6, #9
   200a0:	d817      	bhi.n	200d2 <_strtoul_l.isra.0+0x96>
   200a2:	4634      	mov	r4, r6
   200a4:	42a3      	cmp	r3, r4
   200a6:	dd23      	ble.n	200f0 <_strtoul_l.isra.0+0xb4>
   200a8:	2d00      	cmp	r5, #0
   200aa:	db1e      	blt.n	200ea <_strtoul_l.isra.0+0xae>
   200ac:	4287      	cmp	r7, r0
   200ae:	d31c      	bcc.n	200ea <_strtoul_l.isra.0+0xae>
   200b0:	d101      	bne.n	200b6 <_strtoul_l.isra.0+0x7a>
   200b2:	45a1      	cmp	r9, r4
   200b4:	db19      	blt.n	200ea <_strtoul_l.isra.0+0xae>
   200b6:	fb00 4003 	mla	r0, r0, r3, r4
   200ba:	2501      	movs	r5, #1
   200bc:	f81c 4b01 	ldrb.w	r4, [ip], #1
   200c0:	e7eb      	b.n	2009a <_strtoul_l.isra.0+0x5e>
   200c2:	2c2b      	cmp	r4, #43	; 0x2b
   200c4:	46a8      	mov	r8, r5
   200c6:	bf04      	itt	eq
   200c8:	f89c 4000 	ldrbeq.w	r4, [ip]
   200cc:	f100 0c02 	addeq.w	ip, r0, #2
   200d0:	e7c8      	b.n	20064 <_strtoul_l.isra.0+0x28>
   200d2:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   200d6:	2e19      	cmp	r6, #25
   200d8:	d801      	bhi.n	200de <_strtoul_l.isra.0+0xa2>
   200da:	3c37      	subs	r4, #55	; 0x37
   200dc:	e7e2      	b.n	200a4 <_strtoul_l.isra.0+0x68>
   200de:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   200e2:	2e19      	cmp	r6, #25
   200e4:	d804      	bhi.n	200f0 <_strtoul_l.isra.0+0xb4>
   200e6:	3c57      	subs	r4, #87	; 0x57
   200e8:	e7dc      	b.n	200a4 <_strtoul_l.isra.0+0x68>
   200ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   200ee:	e7e5      	b.n	200bc <_strtoul_l.isra.0+0x80>
   200f0:	2d00      	cmp	r5, #0
   200f2:	da07      	bge.n	20104 <_strtoul_l.isra.0+0xc8>
   200f4:	2322      	movs	r3, #34	; 0x22
   200f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   200fa:	f8ce 3000 	str.w	r3, [lr]
   200fe:	b942      	cbnz	r2, 20112 <_strtoul_l.isra.0+0xd6>
   20100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20104:	f1b8 0f00 	cmp.w	r8, #0
   20108:	d000      	beq.n	2010c <_strtoul_l.isra.0+0xd0>
   2010a:	4240      	negs	r0, r0
   2010c:	2a00      	cmp	r2, #0
   2010e:	d0f7      	beq.n	20100 <_strtoul_l.isra.0+0xc4>
   20110:	b10d      	cbz	r5, 20116 <_strtoul_l.isra.0+0xda>
   20112:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   20116:	6011      	str	r1, [r2, #0]
   20118:	e7f2      	b.n	20100 <_strtoul_l.isra.0+0xc4>
   2011a:	2430      	movs	r4, #48	; 0x30
   2011c:	2b00      	cmp	r3, #0
   2011e:	d1b2      	bne.n	20086 <_strtoul_l.isra.0+0x4a>
   20120:	2308      	movs	r3, #8
   20122:	e7b0      	b.n	20086 <_strtoul_l.isra.0+0x4a>
   20124:	2c30      	cmp	r4, #48	; 0x30
   20126:	d0a3      	beq.n	20070 <_strtoul_l.isra.0+0x34>
   20128:	230a      	movs	r3, #10
   2012a:	e7ac      	b.n	20086 <_strtoul_l.isra.0+0x4a>
   2012c:	000296c9 	.word	0x000296c9

00020130 <strtoul>:
   20130:	4613      	mov	r3, r2
   20132:	460a      	mov	r2, r1
   20134:	4601      	mov	r1, r0
   20136:	4802      	ldr	r0, [pc, #8]	; (20140 <strtoul+0x10>)
   20138:	6800      	ldr	r0, [r0, #0]
   2013a:	f7ff bf7f 	b.w	2003c <_strtoul_l.isra.0>
   2013e:	bf00      	nop
   20140:	200205d0 	.word	0x200205d0

00020144 <__tzcalc_limits>:
   20144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20148:	4680      	mov	r8, r0
   2014a:	f000 fb13 	bl	20774 <__gettzinfo>
   2014e:	f240 73b1 	movw	r3, #1969	; 0x7b1
   20152:	4598      	cmp	r8, r3
   20154:	f340 8098 	ble.w	20288 <__tzcalc_limits+0x144>
   20158:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   2015c:	f240 126d 	movw	r2, #365	; 0x16d
   20160:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
   20164:	4604      	mov	r4, r0
   20166:	4443      	add	r3, r8
   20168:	f100 0b50 	add.w	fp, r0, #80	; 0x50
   2016c:	f04f 0e07 	mov.w	lr, #7
   20170:	f8c0 8004 	str.w	r8, [r0, #4]
   20174:	109b      	asrs	r3, r3, #2
   20176:	fb02 3505 	mla	r5, r2, r5, r3
   2017a:	f06f 0263 	mvn.w	r2, #99	; 0x63
   2017e:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
   20182:	fb93 f3f2 	sdiv	r3, r3, r2
   20186:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   2018a:	441d      	add	r5, r3
   2018c:	f44f 73c8 	mov.w	r3, #400	; 0x190
   20190:	4442      	add	r2, r8
   20192:	fbb2 f2f3 	udiv	r2, r2, r3
   20196:	fb98 f7f3 	sdiv	r7, r8, r3
   2019a:	4415      	add	r5, r2
   2019c:	2264      	movs	r2, #100	; 0x64
   2019e:	fb03 8717 	mls	r7, r3, r7, r8
   201a2:	f008 0303 	and.w	r3, r8, #3
   201a6:	fb98 f6f2 	sdiv	r6, r8, r2
   201aa:	fab7 fc87 	clz	ip, r7
   201ae:	fb02 8616 	mls	r6, r2, r6, r8
   201b2:	9300      	str	r3, [sp, #0]
   201b4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   201b8:	7a22      	ldrb	r2, [r4, #8]
   201ba:	6963      	ldr	r3, [r4, #20]
   201bc:	2a4a      	cmp	r2, #74	; 0x4a
   201be:	d128      	bne.n	20212 <__tzcalc_limits+0xce>
   201c0:	9900      	ldr	r1, [sp, #0]
   201c2:	18ea      	adds	r2, r5, r3
   201c4:	b901      	cbnz	r1, 201c8 <__tzcalc_limits+0x84>
   201c6:	b906      	cbnz	r6, 201ca <__tzcalc_limits+0x86>
   201c8:	bb0f      	cbnz	r7, 2020e <__tzcalc_limits+0xca>
   201ca:	2b3b      	cmp	r3, #59	; 0x3b
   201cc:	bfd4      	ite	le
   201ce:	2300      	movle	r3, #0
   201d0:	2301      	movgt	r3, #1
   201d2:	4413      	add	r3, r2
   201d4:	1e5a      	subs	r2, r3, #1
   201d6:	69a3      	ldr	r3, [r4, #24]
   201d8:	3428      	adds	r4, #40	; 0x28
   201da:	492c      	ldr	r1, [pc, #176]	; (2028c <__tzcalc_limits+0x148>)
   201dc:	fb01 3202 	mla	r2, r1, r2, r3
   201e0:	6823      	ldr	r3, [r4, #0]
   201e2:	4413      	add	r3, r2
   201e4:	461a      	mov	r2, r3
   201e6:	17db      	asrs	r3, r3, #31
   201e8:	e944 2302 	strd	r2, r3, [r4, #-8]
   201ec:	45a3      	cmp	fp, r4
   201ee:	d1e3      	bne.n	201b8 <__tzcalc_limits+0x74>
   201f0:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
   201f4:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
   201f8:	4294      	cmp	r4, r2
   201fa:	eb75 0303 	sbcs.w	r3, r5, r3
   201fe:	bfb4      	ite	lt
   20200:	2301      	movlt	r3, #1
   20202:	2300      	movge	r3, #0
   20204:	6003      	str	r3, [r0, #0]
   20206:	2001      	movs	r0, #1
   20208:	b003      	add	sp, #12
   2020a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2020e:	2300      	movs	r3, #0
   20210:	e7df      	b.n	201d2 <__tzcalc_limits+0x8e>
   20212:	2a44      	cmp	r2, #68	; 0x44
   20214:	d101      	bne.n	2021a <__tzcalc_limits+0xd6>
   20216:	18ea      	adds	r2, r5, r3
   20218:	e7dd      	b.n	201d6 <__tzcalc_limits+0x92>
   2021a:	9a00      	ldr	r2, [sp, #0]
   2021c:	bb72      	cbnz	r2, 2027c <__tzcalc_limits+0x138>
   2021e:	2e00      	cmp	r6, #0
   20220:	bf0c      	ite	eq
   20222:	46e0      	moveq	r8, ip
   20224:	f04f 0801 	movne.w	r8, #1
   20228:	f04f 0a30 	mov.w	sl, #48	; 0x30
   2022c:	4918      	ldr	r1, [pc, #96]	; (20290 <__tzcalc_limits+0x14c>)
   2022e:	68e2      	ldr	r2, [r4, #12]
   20230:	f04f 0900 	mov.w	r9, #0
   20234:	fb0a 1808 	mla	r8, sl, r8, r1
   20238:	9201      	str	r2, [sp, #4]
   2023a:	462a      	mov	r2, r5
   2023c:	f1a8 0804 	sub.w	r8, r8, #4
   20240:	f109 0901 	add.w	r9, r9, #1
   20244:	9901      	ldr	r1, [sp, #4]
   20246:	4549      	cmp	r1, r9
   20248:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
   2024c:	dc18      	bgt.n	20280 <__tzcalc_limits+0x13c>
   2024e:	f102 0804 	add.w	r8, r2, #4
   20252:	fb98 f9fe 	sdiv	r9, r8, lr
   20256:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
   2025a:	eba8 0909 	sub.w	r9, r8, r9
   2025e:	ebb3 0909 	subs.w	r9, r3, r9
   20262:	6923      	ldr	r3, [r4, #16]
   20264:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   20268:	bf48      	it	mi
   2026a:	f109 0907 	addmi.w	r9, r9, #7
   2026e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   20272:	444b      	add	r3, r9
   20274:	4553      	cmp	r3, sl
   20276:	da05      	bge.n	20284 <__tzcalc_limits+0x140>
   20278:	441a      	add	r2, r3
   2027a:	e7ac      	b.n	201d6 <__tzcalc_limits+0x92>
   2027c:	46e0      	mov	r8, ip
   2027e:	e7d3      	b.n	20228 <__tzcalc_limits+0xe4>
   20280:	4452      	add	r2, sl
   20282:	e7dd      	b.n	20240 <__tzcalc_limits+0xfc>
   20284:	3b07      	subs	r3, #7
   20286:	e7f5      	b.n	20274 <__tzcalc_limits+0x130>
   20288:	2000      	movs	r0, #0
   2028a:	e7bd      	b.n	20208 <__tzcalc_limits+0xc4>
   2028c:	00015180 	.word	0x00015180
   20290:	00029008 	.word	0x00029008

00020294 <__tz_lock>:
   20294:	4801      	ldr	r0, [pc, #4]	; (2029c <__tz_lock+0x8>)
   20296:	f007 be70 	b.w	27f7a <__retarget_lock_acquire>
   2029a:	bf00      	nop
   2029c:	2002b0bf 	.word	0x2002b0bf

000202a0 <__tz_unlock>:
   202a0:	4801      	ldr	r0, [pc, #4]	; (202a8 <__tz_unlock+0x8>)
   202a2:	f007 be6c 	b.w	27f7e <__retarget_lock_release>
   202a6:	bf00      	nop
   202a8:	2002b0bf 	.word	0x2002b0bf

000202ac <_tzset_unlocked>:
   202ac:	4b01      	ldr	r3, [pc, #4]	; (202b4 <_tzset_unlocked+0x8>)
   202ae:	6818      	ldr	r0, [r3, #0]
   202b0:	f000 b802 	b.w	202b8 <_tzset_unlocked_r>
   202b4:	200205d0 	.word	0x200205d0

000202b8 <_tzset_unlocked_r>:
   202b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   202bc:	4607      	mov	r7, r0
   202be:	b08d      	sub	sp, #52	; 0x34
   202c0:	f000 fa58 	bl	20774 <__gettzinfo>
   202c4:	49b0      	ldr	r1, [pc, #704]	; (20588 <_tzset_unlocked_r+0x2d0>)
   202c6:	4605      	mov	r5, r0
   202c8:	4638      	mov	r0, r7
   202ca:	f007 fe4e 	bl	27f6a <_getenv_r>
   202ce:	4eaf      	ldr	r6, [pc, #700]	; (2058c <_tzset_unlocked_r+0x2d4>)
   202d0:	4604      	mov	r4, r0
   202d2:	b970      	cbnz	r0, 202f2 <_tzset_unlocked_r+0x3a>
   202d4:	4bae      	ldr	r3, [pc, #696]	; (20590 <_tzset_unlocked_r+0x2d8>)
   202d6:	4aaf      	ldr	r2, [pc, #700]	; (20594 <_tzset_unlocked_r+0x2dc>)
   202d8:	6018      	str	r0, [r3, #0]
   202da:	4baf      	ldr	r3, [pc, #700]	; (20598 <_tzset_unlocked_r+0x2e0>)
   202dc:	6018      	str	r0, [r3, #0]
   202de:	4baf      	ldr	r3, [pc, #700]	; (2059c <_tzset_unlocked_r+0x2e4>)
   202e0:	6830      	ldr	r0, [r6, #0]
   202e2:	e9c3 2200 	strd	r2, r2, [r3]
   202e6:	f7fe fedb 	bl	1f0a0 <free>
   202ea:	6034      	str	r4, [r6, #0]
   202ec:	b00d      	add	sp, #52	; 0x34
   202ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202f2:	6831      	ldr	r1, [r6, #0]
   202f4:	2900      	cmp	r1, #0
   202f6:	d15f      	bne.n	203b8 <_tzset_unlocked_r+0x100>
   202f8:	6830      	ldr	r0, [r6, #0]
   202fa:	f7fe fed1 	bl	1f0a0 <free>
   202fe:	4620      	mov	r0, r4
   20300:	f7ec fe1a 	bl	cf38 <strlen>
   20304:	1c41      	adds	r1, r0, #1
   20306:	4638      	mov	r0, r7
   20308:	f7ff f9a2 	bl	1f650 <_malloc_r>
   2030c:	6030      	str	r0, [r6, #0]
   2030e:	2800      	cmp	r0, #0
   20310:	d157      	bne.n	203c2 <_tzset_unlocked_r+0x10a>
   20312:	7823      	ldrb	r3, [r4, #0]
   20314:	ae0a      	add	r6, sp, #40	; 0x28
   20316:	4aa2      	ldr	r2, [pc, #648]	; (205a0 <_tzset_unlocked_r+0x2e8>)
   20318:	2b3a      	cmp	r3, #58	; 0x3a
   2031a:	49a2      	ldr	r1, [pc, #648]	; (205a4 <_tzset_unlocked_r+0x2ec>)
   2031c:	4633      	mov	r3, r6
   2031e:	bf08      	it	eq
   20320:	3401      	addeq	r4, #1
   20322:	4620      	mov	r0, r4
   20324:	f7ff fd96 	bl	1fe54 <siscanf>
   20328:	2800      	cmp	r0, #0
   2032a:	dddf      	ble.n	202ec <_tzset_unlocked_r+0x34>
   2032c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2032e:	18e7      	adds	r7, r4, r3
   20330:	5ce3      	ldrb	r3, [r4, r3]
   20332:	2b2d      	cmp	r3, #45	; 0x2d
   20334:	d149      	bne.n	203ca <_tzset_unlocked_r+0x112>
   20336:	3701      	adds	r7, #1
   20338:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2033c:	f10d 0a20 	add.w	sl, sp, #32
   20340:	f10d 0b1e 	add.w	fp, sp, #30
   20344:	f04f 0800 	mov.w	r8, #0
   20348:	4633      	mov	r3, r6
   2034a:	aa07      	add	r2, sp, #28
   2034c:	4996      	ldr	r1, [pc, #600]	; (205a8 <_tzset_unlocked_r+0x2f0>)
   2034e:	4638      	mov	r0, r7
   20350:	9603      	str	r6, [sp, #12]
   20352:	f8cd b000 	str.w	fp, [sp]
   20356:	f8ad 801e 	strh.w	r8, [sp, #30]
   2035a:	f8ad 8020 	strh.w	r8, [sp, #32]
   2035e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
   20362:	f7ff fd77 	bl	1fe54 <siscanf>
   20366:	4540      	cmp	r0, r8
   20368:	ddc0      	ble.n	202ec <_tzset_unlocked_r+0x34>
   2036a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2036e:	213c      	movs	r1, #60	; 0x3c
   20370:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   20374:	f8df 923c 	ldr.w	r9, [pc, #572]	; 205b4 <_tzset_unlocked_r+0x2fc>
   20378:	fb01 2203 	mla	r2, r1, r3, r2
   2037c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   20380:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   20384:	fb01 2303 	mla	r3, r1, r3, r2
   20388:	464a      	mov	r2, r9
   2038a:	4986      	ldr	r1, [pc, #536]	; (205a4 <_tzset_unlocked_r+0x2ec>)
   2038c:	435c      	muls	r4, r3
   2038e:	4b84      	ldr	r3, [pc, #528]	; (205a0 <_tzset_unlocked_r+0x2e8>)
   20390:	62ac      	str	r4, [r5, #40]	; 0x28
   20392:	4c82      	ldr	r4, [pc, #520]	; (2059c <_tzset_unlocked_r+0x2e4>)
   20394:	6023      	str	r3, [r4, #0]
   20396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20398:	441f      	add	r7, r3
   2039a:	4633      	mov	r3, r6
   2039c:	4638      	mov	r0, r7
   2039e:	f7ff fd59 	bl	1fe54 <siscanf>
   203a2:	4540      	cmp	r0, r8
   203a4:	dc17      	bgt.n	203d6 <_tzset_unlocked_r+0x11e>
   203a6:	6823      	ldr	r3, [r4, #0]
   203a8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   203aa:	6063      	str	r3, [r4, #4]
   203ac:	4b78      	ldr	r3, [pc, #480]	; (20590 <_tzset_unlocked_r+0x2d8>)
   203ae:	601a      	str	r2, [r3, #0]
   203b0:	4b79      	ldr	r3, [pc, #484]	; (20598 <_tzset_unlocked_r+0x2e0>)
   203b2:	f8c3 8000 	str.w	r8, [r3]
   203b6:	e799      	b.n	202ec <_tzset_unlocked_r+0x34>
   203b8:	f7ec fdb4 	bl	cf24 <strcmp>
   203bc:	2800      	cmp	r0, #0
   203be:	d19b      	bne.n	202f8 <_tzset_unlocked_r+0x40>
   203c0:	e794      	b.n	202ec <_tzset_unlocked_r+0x34>
   203c2:	4621      	mov	r1, r4
   203c4:	f007 fc7d 	bl	27cc2 <strcpy>
   203c8:	e7a3      	b.n	20312 <_tzset_unlocked_r+0x5a>
   203ca:	2b2b      	cmp	r3, #43	; 0x2b
   203cc:	f04f 0401 	mov.w	r4, #1
   203d0:	bf08      	it	eq
   203d2:	3701      	addeq	r7, #1
   203d4:	e7b2      	b.n	2033c <_tzset_unlocked_r+0x84>
   203d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   203d8:	f8c4 9004 	str.w	r9, [r4, #4]
   203dc:	18fc      	adds	r4, r7, r3
   203de:	5cfb      	ldrb	r3, [r7, r3]
   203e0:	2b2d      	cmp	r3, #45	; 0x2d
   203e2:	f040 808c 	bne.w	204fe <_tzset_unlocked_r+0x246>
   203e6:	3401      	adds	r4, #1
   203e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   203ec:	2300      	movs	r3, #0
   203ee:	aa07      	add	r2, sp, #28
   203f0:	496d      	ldr	r1, [pc, #436]	; (205a8 <_tzset_unlocked_r+0x2f0>)
   203f2:	4620      	mov	r0, r4
   203f4:	f8ad 301c 	strh.w	r3, [sp, #28]
   203f8:	f8ad 301e 	strh.w	r3, [sp, #30]
   203fc:	f8ad 3020 	strh.w	r3, [sp, #32]
   20400:	930a      	str	r3, [sp, #40]	; 0x28
   20402:	4633      	mov	r3, r6
   20404:	e9cd a602 	strd	sl, r6, [sp, #8]
   20408:	e9cd b600 	strd	fp, r6, [sp]
   2040c:	f7ff fd22 	bl	1fe54 <siscanf>
   20410:	2800      	cmp	r0, #0
   20412:	dc7a      	bgt.n	2050a <_tzset_unlocked_r+0x252>
   20414:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   20416:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
   2041a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2041c:	f04f 0900 	mov.w	r9, #0
   20420:	652f      	str	r7, [r5, #80]	; 0x50
   20422:	462f      	mov	r7, r5
   20424:	441c      	add	r4, r3
   20426:	7823      	ldrb	r3, [r4, #0]
   20428:	2b2c      	cmp	r3, #44	; 0x2c
   2042a:	bf08      	it	eq
   2042c:	3401      	addeq	r4, #1
   2042e:	f894 8000 	ldrb.w	r8, [r4]
   20432:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   20436:	d17a      	bne.n	2052e <_tzset_unlocked_r+0x276>
   20438:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   2043c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   20440:	495a      	ldr	r1, [pc, #360]	; (205ac <_tzset_unlocked_r+0x2f4>)
   20442:	4620      	mov	r0, r4
   20444:	9603      	str	r6, [sp, #12]
   20446:	e9cd 6301 	strd	r6, r3, [sp, #4]
   2044a:	ab09      	add	r3, sp, #36	; 0x24
   2044c:	9300      	str	r3, [sp, #0]
   2044e:	4633      	mov	r3, r6
   20450:	f7ff fd00 	bl	1fe54 <siscanf>
   20454:	2803      	cmp	r0, #3
   20456:	f47f af49 	bne.w	202ec <_tzset_unlocked_r+0x34>
   2045a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   2045e:	1e4b      	subs	r3, r1, #1
   20460:	2b0b      	cmp	r3, #11
   20462:	f63f af43 	bhi.w	202ec <_tzset_unlocked_r+0x34>
   20466:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2046a:	1e53      	subs	r3, r2, #1
   2046c:	2b04      	cmp	r3, #4
   2046e:	f63f af3d 	bhi.w	202ec <_tzset_unlocked_r+0x34>
   20472:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   20476:	2b06      	cmp	r3, #6
   20478:	f63f af38 	bhi.w	202ec <_tzset_unlocked_r+0x34>
   2047c:	f887 8008 	strb.w	r8, [r7, #8]
   20480:	617b      	str	r3, [r7, #20]
   20482:	e9c7 1203 	strd	r1, r2, [r7, #12]
   20486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20488:	eb04 0803 	add.w	r8, r4, r3
   2048c:	2302      	movs	r3, #2
   2048e:	f8ad 301c 	strh.w	r3, [sp, #28]
   20492:	2300      	movs	r3, #0
   20494:	f8ad 301e 	strh.w	r3, [sp, #30]
   20498:	f8ad 3020 	strh.w	r3, [sp, #32]
   2049c:	930a      	str	r3, [sp, #40]	; 0x28
   2049e:	f898 3000 	ldrb.w	r3, [r8]
   204a2:	2b2f      	cmp	r3, #47	; 0x2f
   204a4:	d109      	bne.n	204ba <_tzset_unlocked_r+0x202>
   204a6:	4633      	mov	r3, r6
   204a8:	aa07      	add	r2, sp, #28
   204aa:	4941      	ldr	r1, [pc, #260]	; (205b0 <_tzset_unlocked_r+0x2f8>)
   204ac:	4640      	mov	r0, r8
   204ae:	e9cd a602 	strd	sl, r6, [sp, #8]
   204b2:	e9cd b600 	strd	fp, r6, [sp]
   204b6:	f7ff fccd 	bl	1fe54 <siscanf>
   204ba:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   204be:	213c      	movs	r1, #60	; 0x3c
   204c0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   204c4:	3728      	adds	r7, #40	; 0x28
   204c6:	fb01 2203 	mla	r2, r1, r3, r2
   204ca:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   204ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   204d2:	fb01 2303 	mla	r3, r1, r3, r2
   204d6:	f847 3c10 	str.w	r3, [r7, #-16]
   204da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   204dc:	4444      	add	r4, r8
   204de:	f1b9 0f00 	cmp.w	r9, #0
   204e2:	d021      	beq.n	20528 <_tzset_unlocked_r+0x270>
   204e4:	6868      	ldr	r0, [r5, #4]
   204e6:	f7ff fe2d 	bl	20144 <__tzcalc_limits>
   204ea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   204ec:	4b28      	ldr	r3, [pc, #160]	; (20590 <_tzset_unlocked_r+0x2d8>)
   204ee:	601a      	str	r2, [r3, #0]
   204f0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   204f2:	1a9b      	subs	r3, r3, r2
   204f4:	4a28      	ldr	r2, [pc, #160]	; (20598 <_tzset_unlocked_r+0x2e0>)
   204f6:	bf18      	it	ne
   204f8:	2301      	movne	r3, #1
   204fa:	6013      	str	r3, [r2, #0]
   204fc:	e6f6      	b.n	202ec <_tzset_unlocked_r+0x34>
   204fe:	2b2b      	cmp	r3, #43	; 0x2b
   20500:	f04f 0701 	mov.w	r7, #1
   20504:	bf08      	it	eq
   20506:	3401      	addeq	r4, #1
   20508:	e770      	b.n	203ec <_tzset_unlocked_r+0x134>
   2050a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2050e:	213c      	movs	r1, #60	; 0x3c
   20510:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   20514:	fb01 2203 	mla	r2, r1, r3, r2
   20518:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2051c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   20520:	fb01 2303 	mla	r3, r1, r3, r2
   20524:	435f      	muls	r7, r3
   20526:	e778      	b.n	2041a <_tzset_unlocked_r+0x162>
   20528:	f04f 0901 	mov.w	r9, #1
   2052c:	e77b      	b.n	20426 <_tzset_unlocked_r+0x16e>
   2052e:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   20532:	f04f 020a 	mov.w	r2, #10
   20536:	a90b      	add	r1, sp, #44	; 0x2c
   20538:	bf06      	itte	eq
   2053a:	3401      	addeq	r4, #1
   2053c:	4643      	moveq	r3, r8
   2053e:	2344      	movne	r3, #68	; 0x44
   20540:	4620      	mov	r0, r4
   20542:	9305      	str	r3, [sp, #20]
   20544:	f7ff fdf4 	bl	20130 <strtoul>
   20548:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   2054c:	9b05      	ldr	r3, [sp, #20]
   2054e:	45a0      	cmp	r8, r4
   20550:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   20554:	d114      	bne.n	20580 <_tzset_unlocked_r+0x2c8>
   20556:	234d      	movs	r3, #77	; 0x4d
   20558:	f1b9 0f00 	cmp.w	r9, #0
   2055c:	d107      	bne.n	2056e <_tzset_unlocked_r+0x2b6>
   2055e:	2103      	movs	r1, #3
   20560:	722b      	strb	r3, [r5, #8]
   20562:	2302      	movs	r3, #2
   20564:	f8c5 9014 	str.w	r9, [r5, #20]
   20568:	e9c5 1303 	strd	r1, r3, [r5, #12]
   2056c:	e78e      	b.n	2048c <_tzset_unlocked_r+0x1d4>
   2056e:	220b      	movs	r2, #11
   20570:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   20574:	2301      	movs	r3, #1
   20576:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
   2057a:	2300      	movs	r3, #0
   2057c:	63eb      	str	r3, [r5, #60]	; 0x3c
   2057e:	e785      	b.n	2048c <_tzset_unlocked_r+0x1d4>
   20580:	b280      	uxth	r0, r0
   20582:	723b      	strb	r3, [r7, #8]
   20584:	6178      	str	r0, [r7, #20]
   20586:	e781      	b.n	2048c <_tzset_unlocked_r+0x1d4>
   20588:	00029890 	.word	0x00029890
   2058c:	20028198 	.word	0x20028198
   20590:	200281a0 	.word	0x200281a0
   20594:	00029893 	.word	0x00029893
   20598:	2002819c 	.word	0x2002819c
   2059c:	200205c8 	.word	0x200205c8
   205a0:	2002af41 	.word	0x2002af41
   205a4:	00029897 	.word	0x00029897
   205a8:	000298ba 	.word	0x000298ba
   205ac:	000298a6 	.word	0x000298a6
   205b0:	000298b9 	.word	0x000298b9
   205b4:	2002af36 	.word	0x2002af36

000205b8 <vsniprintf>:
   205b8:	b507      	push	{r0, r1, r2, lr}
   205ba:	9300      	str	r3, [sp, #0]
   205bc:	4613      	mov	r3, r2
   205be:	460a      	mov	r2, r1
   205c0:	4601      	mov	r1, r0
   205c2:	4803      	ldr	r0, [pc, #12]	; (205d0 <vsniprintf+0x18>)
   205c4:	6800      	ldr	r0, [r0, #0]
   205c6:	f007 fc01 	bl	27dcc <_vsniprintf_r>
   205ca:	b003      	add	sp, #12
   205cc:	f85d fb04 	ldr.w	pc, [sp], #4
   205d0:	200205d0 	.word	0x200205d0

000205d4 <_vsiprintf_r>:
   205d4:	b500      	push	{lr}
   205d6:	b09b      	sub	sp, #108	; 0x6c
   205d8:	9100      	str	r1, [sp, #0]
   205da:	9104      	str	r1, [sp, #16]
   205dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   205e0:	9105      	str	r1, [sp, #20]
   205e2:	9102      	str	r1, [sp, #8]
   205e4:	4905      	ldr	r1, [pc, #20]	; (205fc <_vsiprintf_r+0x28>)
   205e6:	9103      	str	r1, [sp, #12]
   205e8:	4669      	mov	r1, sp
   205ea:	f000 fc03 	bl	20df4 <_svfiprintf_r>
   205ee:	9b00      	ldr	r3, [sp, #0]
   205f0:	2200      	movs	r2, #0
   205f2:	701a      	strb	r2, [r3, #0]
   205f4:	b01b      	add	sp, #108	; 0x6c
   205f6:	f85d fb04 	ldr.w	pc, [sp], #4
   205fa:	bf00      	nop
   205fc:	ffff0208 	.word	0xffff0208

00020600 <vsiprintf>:
   20600:	4613      	mov	r3, r2
   20602:	460a      	mov	r2, r1
   20604:	4601      	mov	r1, r0
   20606:	4802      	ldr	r0, [pc, #8]	; (20610 <vsiprintf+0x10>)
   20608:	6800      	ldr	r0, [r0, #0]
   2060a:	f7ff bfe3 	b.w	205d4 <_vsiprintf_r>
   2060e:	bf00      	nop
   20610:	200205d0 	.word	0x200205d0

00020614 <_write_r>:
   20614:	b538      	push	{r3, r4, r5, lr}
   20616:	4604      	mov	r4, r0
   20618:	4d06      	ldr	r5, [pc, #24]	; (20634 <_write_r+0x20>)
   2061a:	4608      	mov	r0, r1
   2061c:	4611      	mov	r1, r2
   2061e:	2200      	movs	r2, #0
   20620:	602a      	str	r2, [r5, #0]
   20622:	461a      	mov	r2, r3
   20624:	f002 fcaa 	bl	22f7c <_write>
   20628:	1c43      	adds	r3, r0, #1
   2062a:	d102      	bne.n	20632 <_write_r+0x1e>
   2062c:	682b      	ldr	r3, [r5, #0]
   2062e:	b103      	cbz	r3, 20632 <_write_r+0x1e>
   20630:	6023      	str	r3, [r4, #0]
   20632:	bd38      	pop	{r3, r4, r5, pc}
   20634:	2002b0b4 	.word	0x2002b0b4

00020638 <__assert_func>:
   20638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2063a:	4614      	mov	r4, r2
   2063c:	461a      	mov	r2, r3
   2063e:	4b09      	ldr	r3, [pc, #36]	; (20664 <__assert_func+0x2c>)
   20640:	4605      	mov	r5, r0
   20642:	681b      	ldr	r3, [r3, #0]
   20644:	68d8      	ldr	r0, [r3, #12]
   20646:	b14c      	cbz	r4, 2065c <__assert_func+0x24>
   20648:	4b07      	ldr	r3, [pc, #28]	; (20668 <__assert_func+0x30>)
   2064a:	9100      	str	r1, [sp, #0]
   2064c:	4907      	ldr	r1, [pc, #28]	; (2066c <__assert_func+0x34>)
   2064e:	e9cd 3401 	strd	r3, r4, [sp, #4]
   20652:	462b      	mov	r3, r5
   20654:	f000 f842 	bl	206dc <fiprintf>
   20658:	f007 fecb 	bl	283f2 <abort>
   2065c:	4b04      	ldr	r3, [pc, #16]	; (20670 <__assert_func+0x38>)
   2065e:	461c      	mov	r4, r3
   20660:	e7f3      	b.n	2064a <__assert_func+0x12>
   20662:	bf00      	nop
   20664:	200205d0 	.word	0x200205d0
   20668:	000298cc 	.word	0x000298cc
   2066c:	000298d9 	.word	0x000298d9
   20670:	00029641 	.word	0x00029641

00020674 <__chk_fail>:
   20674:	b500      	push	{lr}
   20676:	b08d      	sub	sp, #52	; 0x34
   20678:	4b0f      	ldr	r3, [pc, #60]	; (206b8 <__chk_fail+0x44>)
   2067a:	466a      	mov	r2, sp
   2067c:	f103 0628 	add.w	r6, r3, #40	; 0x28
   20680:	4615      	mov	r5, r2
   20682:	6818      	ldr	r0, [r3, #0]
   20684:	3308      	adds	r3, #8
   20686:	f853 1c04 	ldr.w	r1, [r3, #-4]
   2068a:	4614      	mov	r4, r2
   2068c:	42b3      	cmp	r3, r6
   2068e:	c403      	stmia	r4!, {r0, r1}
   20690:	4622      	mov	r2, r4
   20692:	d1f6      	bne.n	20682 <__chk_fail+0xe>
   20694:	6818      	ldr	r0, [r3, #0]
   20696:	889b      	ldrh	r3, [r3, #4]
   20698:	6020      	str	r0, [r4, #0]
   2069a:	4628      	mov	r0, r5
   2069c:	80a3      	strh	r3, [r4, #4]
   2069e:	f7ec fc4b 	bl	cf38 <strlen>
   206a2:	4629      	mov	r1, r5
   206a4:	4602      	mov	r2, r0
   206a6:	2002      	movs	r0, #2
   206a8:	f002 fc68 	bl	22f7c <_write>
   206ac:	2006      	movs	r0, #6
   206ae:	f001 f8a9 	bl	21804 <raise>
   206b2:	207f      	movs	r0, #127	; 0x7f
   206b4:	f7f0 f80a 	bl	106cc <_exit>
   206b8:	00029908 	.word	0x00029908

000206bc <_close_r>:
   206bc:	b538      	push	{r3, r4, r5, lr}
   206be:	2300      	movs	r3, #0
   206c0:	4d05      	ldr	r5, [pc, #20]	; (206d8 <_close_r+0x1c>)
   206c2:	4604      	mov	r4, r0
   206c4:	4608      	mov	r0, r1
   206c6:	602b      	str	r3, [r5, #0]
   206c8:	f002 fc5c 	bl	22f84 <_close>
   206cc:	1c43      	adds	r3, r0, #1
   206ce:	d102      	bne.n	206d6 <_close_r+0x1a>
   206d0:	682b      	ldr	r3, [r5, #0]
   206d2:	b103      	cbz	r3, 206d6 <_close_r+0x1a>
   206d4:	6023      	str	r3, [r4, #0]
   206d6:	bd38      	pop	{r3, r4, r5, pc}
   206d8:	2002b0b4 	.word	0x2002b0b4

000206dc <fiprintf>:
   206dc:	b40e      	push	{r1, r2, r3}
   206de:	b503      	push	{r0, r1, lr}
   206e0:	ab03      	add	r3, sp, #12
   206e2:	4601      	mov	r1, r0
   206e4:	4805      	ldr	r0, [pc, #20]	; (206fc <fiprintf+0x20>)
   206e6:	f853 2b04 	ldr.w	r2, [r3], #4
   206ea:	6800      	ldr	r0, [r0, #0]
   206ec:	9301      	str	r3, [sp, #4]
   206ee:	f000 fdfd 	bl	212ec <_vfiprintf_r>
   206f2:	b002      	add	sp, #8
   206f4:	f85d eb04 	ldr.w	lr, [sp], #4
   206f8:	b003      	add	sp, #12
   206fa:	4770      	bx	lr
   206fc:	200205d0 	.word	0x200205d0

00020700 <_findenv_r>:
   20700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20704:	4607      	mov	r7, r0
   20706:	4689      	mov	r9, r1
   20708:	4616      	mov	r6, r2
   2070a:	f001 f955 	bl	219b8 <__env_lock>
   2070e:	4b18      	ldr	r3, [pc, #96]	; (20770 <_findenv_r+0x70>)
   20710:	681c      	ldr	r4, [r3, #0]
   20712:	469a      	mov	sl, r3
   20714:	b134      	cbz	r4, 20724 <_findenv_r+0x24>
   20716:	464b      	mov	r3, r9
   20718:	4698      	mov	r8, r3
   2071a:	f813 1b01 	ldrb.w	r1, [r3], #1
   2071e:	b139      	cbz	r1, 20730 <_findenv_r+0x30>
   20720:	293d      	cmp	r1, #61	; 0x3d
   20722:	d1f9      	bne.n	20718 <_findenv_r+0x18>
   20724:	4638      	mov	r0, r7
   20726:	f001 f94d 	bl	219c4 <__env_unlock>
   2072a:	2000      	movs	r0, #0
   2072c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20730:	eba8 0809 	sub.w	r8, r8, r9
   20734:	46a3      	mov	fp, r4
   20736:	f854 0b04 	ldr.w	r0, [r4], #4
   2073a:	2800      	cmp	r0, #0
   2073c:	d0f2      	beq.n	20724 <_findenv_r+0x24>
   2073e:	4642      	mov	r2, r8
   20740:	4649      	mov	r1, r9
   20742:	f007 fadb 	bl	27cfc <strncmp>
   20746:	2800      	cmp	r0, #0
   20748:	d1f4      	bne.n	20734 <_findenv_r+0x34>
   2074a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2074e:	eb03 0508 	add.w	r5, r3, r8
   20752:	f813 3008 	ldrb.w	r3, [r3, r8]
   20756:	2b3d      	cmp	r3, #61	; 0x3d
   20758:	d1ec      	bne.n	20734 <_findenv_r+0x34>
   2075a:	f8da 3000 	ldr.w	r3, [sl]
   2075e:	4638      	mov	r0, r7
   20760:	ebab 0303 	sub.w	r3, fp, r3
   20764:	109b      	asrs	r3, r3, #2
   20766:	6033      	str	r3, [r6, #0]
   20768:	f001 f92c 	bl	219c4 <__env_unlock>
   2076c:	1c68      	adds	r0, r5, #1
   2076e:	e7dd      	b.n	2072c <_findenv_r+0x2c>
   20770:	200207a0 	.word	0x200207a0

00020774 <__gettzinfo>:
   20774:	4800      	ldr	r0, [pc, #0]	; (20778 <__gettzinfo+0x4>)
   20776:	4770      	bx	lr
   20778:	20020000 	.word	0x20020000

0002077c <_localeconv_r>:
   2077c:	4800      	ldr	r0, [pc, #0]	; (20780 <_localeconv_r+0x4>)
   2077e:	4770      	bx	lr
   20780:	20020724 	.word	0x20020724

00020784 <_lseek_r>:
   20784:	b538      	push	{r3, r4, r5, lr}
   20786:	4604      	mov	r4, r0
   20788:	4d06      	ldr	r5, [pc, #24]	; (207a4 <_lseek_r+0x20>)
   2078a:	4608      	mov	r0, r1
   2078c:	4611      	mov	r1, r2
   2078e:	2200      	movs	r2, #0
   20790:	602a      	str	r2, [r5, #0]
   20792:	461a      	mov	r2, r3
   20794:	f002 fbf9 	bl	22f8a <_lseek>
   20798:	1c43      	adds	r3, r0, #1
   2079a:	d102      	bne.n	207a2 <_lseek_r+0x1e>
   2079c:	682b      	ldr	r3, [r5, #0]
   2079e:	b103      	cbz	r3, 207a2 <_lseek_r+0x1e>
   207a0:	6023      	str	r3, [r4, #0]
   207a2:	bd38      	pop	{r3, r4, r5, pc}
   207a4:	2002b0b4 	.word	0x2002b0b4

000207a8 <__malloc_lock>:
   207a8:	4801      	ldr	r0, [pc, #4]	; (207b0 <__malloc_lock+0x8>)
   207aa:	f007 bbe7 	b.w	27f7c <__retarget_lock_acquire_recursive>
   207ae:	bf00      	nop
   207b0:	2002b0bc 	.word	0x2002b0bc

000207b4 <__malloc_unlock>:
   207b4:	4801      	ldr	r0, [pc, #4]	; (207bc <__malloc_unlock+0x8>)
   207b6:	f007 bbe3 	b.w	27f80 <__retarget_lock_release_recursive>
   207ba:	bf00      	nop
   207bc:	2002b0bc 	.word	0x2002b0bc

000207c0 <_Balloc>:
   207c0:	b570      	push	{r4, r5, r6, lr}
   207c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
   207c4:	4604      	mov	r4, r0
   207c6:	460d      	mov	r5, r1
   207c8:	b976      	cbnz	r6, 207e8 <_Balloc+0x28>
   207ca:	2010      	movs	r0, #16
   207cc:	f7fe fc60 	bl	1f090 <malloc>
   207d0:	4602      	mov	r2, r0
   207d2:	6260      	str	r0, [r4, #36]	; 0x24
   207d4:	b920      	cbnz	r0, 207e0 <_Balloc+0x20>
   207d6:	4b18      	ldr	r3, [pc, #96]	; (20838 <_Balloc+0x78>)
   207d8:	2166      	movs	r1, #102	; 0x66
   207da:	4818      	ldr	r0, [pc, #96]	; (2083c <_Balloc+0x7c>)
   207dc:	f7ff ff2c 	bl	20638 <__assert_func>
   207e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
   207e4:	6006      	str	r6, [r0, #0]
   207e6:	60c6      	str	r6, [r0, #12]
   207e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   207ea:	68f3      	ldr	r3, [r6, #12]
   207ec:	b183      	cbz	r3, 20810 <_Balloc+0x50>
   207ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   207f0:	68db      	ldr	r3, [r3, #12]
   207f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   207f6:	b9b8      	cbnz	r0, 20828 <_Balloc+0x68>
   207f8:	2101      	movs	r1, #1
   207fa:	4620      	mov	r0, r4
   207fc:	fa01 f605 	lsl.w	r6, r1, r5
   20800:	1d72      	adds	r2, r6, #5
   20802:	0092      	lsls	r2, r2, #2
   20804:	f007 fc3b 	bl	2807e <_calloc_r>
   20808:	b160      	cbz	r0, 20824 <_Balloc+0x64>
   2080a:	e9c0 5601 	strd	r5, r6, [r0, #4]
   2080e:	e00e      	b.n	2082e <_Balloc+0x6e>
   20810:	2221      	movs	r2, #33	; 0x21
   20812:	2104      	movs	r1, #4
   20814:	4620      	mov	r0, r4
   20816:	f007 fc32 	bl	2807e <_calloc_r>
   2081a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2081c:	60f0      	str	r0, [r6, #12]
   2081e:	68db      	ldr	r3, [r3, #12]
   20820:	2b00      	cmp	r3, #0
   20822:	d1e4      	bne.n	207ee <_Balloc+0x2e>
   20824:	2000      	movs	r0, #0
   20826:	bd70      	pop	{r4, r5, r6, pc}
   20828:	6802      	ldr	r2, [r0, #0]
   2082a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   2082e:	2300      	movs	r3, #0
   20830:	e9c0 3303 	strd	r3, r3, [r0, #12]
   20834:	e7f7      	b.n	20826 <_Balloc+0x66>
   20836:	bf00      	nop
   20838:	000297fb 	.word	0x000297fb
   2083c:	000299da 	.word	0x000299da

00020840 <_Bfree>:
   20840:	b570      	push	{r4, r5, r6, lr}
   20842:	6a46      	ldr	r6, [r0, #36]	; 0x24
   20844:	4605      	mov	r5, r0
   20846:	460c      	mov	r4, r1
   20848:	b976      	cbnz	r6, 20868 <_Bfree+0x28>
   2084a:	2010      	movs	r0, #16
   2084c:	f7fe fc20 	bl	1f090 <malloc>
   20850:	4602      	mov	r2, r0
   20852:	6268      	str	r0, [r5, #36]	; 0x24
   20854:	b920      	cbnz	r0, 20860 <_Bfree+0x20>
   20856:	4b09      	ldr	r3, [pc, #36]	; (2087c <_Bfree+0x3c>)
   20858:	218a      	movs	r1, #138	; 0x8a
   2085a:	4809      	ldr	r0, [pc, #36]	; (20880 <_Bfree+0x40>)
   2085c:	f7ff feec 	bl	20638 <__assert_func>
   20860:	e9c0 6601 	strd	r6, r6, [r0, #4]
   20864:	6006      	str	r6, [r0, #0]
   20866:	60c6      	str	r6, [r0, #12]
   20868:	b13c      	cbz	r4, 2087a <_Bfree+0x3a>
   2086a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2086c:	6862      	ldr	r2, [r4, #4]
   2086e:	68db      	ldr	r3, [r3, #12]
   20870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   20874:	6021      	str	r1, [r4, #0]
   20876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2087a:	bd70      	pop	{r4, r5, r6, pc}
   2087c:	000297fb 	.word	0x000297fb
   20880:	000299da 	.word	0x000299da

00020884 <__multadd>:
   20884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20888:	4607      	mov	r7, r0
   2088a:	4698      	mov	r8, r3
   2088c:	460c      	mov	r4, r1
   2088e:	690e      	ldr	r6, [r1, #16]
   20890:	f101 0014 	add.w	r0, r1, #20
   20894:	2300      	movs	r3, #0
   20896:	6805      	ldr	r5, [r0, #0]
   20898:	3301      	adds	r3, #1
   2089a:	b2a9      	uxth	r1, r5
   2089c:	429e      	cmp	r6, r3
   2089e:	ea4f 4515 	mov.w	r5, r5, lsr #16
   208a2:	fb02 8101 	mla	r1, r2, r1, r8
   208a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   208aa:	b289      	uxth	r1, r1
   208ac:	fb02 c505 	mla	r5, r2, r5, ip
   208b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   208b4:	ea4f 4815 	mov.w	r8, r5, lsr #16
   208b8:	f840 1b04 	str.w	r1, [r0], #4
   208bc:	dceb      	bgt.n	20896 <__multadd+0x12>
   208be:	f1b8 0f00 	cmp.w	r8, #0
   208c2:	d022      	beq.n	2090a <__multadd+0x86>
   208c4:	68a3      	ldr	r3, [r4, #8]
   208c6:	42b3      	cmp	r3, r6
   208c8:	dc19      	bgt.n	208fe <__multadd+0x7a>
   208ca:	6861      	ldr	r1, [r4, #4]
   208cc:	4638      	mov	r0, r7
   208ce:	3101      	adds	r1, #1
   208d0:	f7ff ff76 	bl	207c0 <_Balloc>
   208d4:	4605      	mov	r5, r0
   208d6:	b928      	cbnz	r0, 208e4 <__multadd+0x60>
   208d8:	4602      	mov	r2, r0
   208da:	4b0d      	ldr	r3, [pc, #52]	; (20910 <__multadd+0x8c>)
   208dc:	21b5      	movs	r1, #181	; 0xb5
   208de:	480d      	ldr	r0, [pc, #52]	; (20914 <__multadd+0x90>)
   208e0:	f7ff feaa 	bl	20638 <__assert_func>
   208e4:	6922      	ldr	r2, [r4, #16]
   208e6:	f104 010c 	add.w	r1, r4, #12
   208ea:	300c      	adds	r0, #12
   208ec:	3202      	adds	r2, #2
   208ee:	0092      	lsls	r2, r2, #2
   208f0:	f007 f829 	bl	27946 <memcpy>
   208f4:	4621      	mov	r1, r4
   208f6:	462c      	mov	r4, r5
   208f8:	4638      	mov	r0, r7
   208fa:	f7ff ffa1 	bl	20840 <_Bfree>
   208fe:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   20902:	3601      	adds	r6, #1
   20904:	f8c3 8014 	str.w	r8, [r3, #20]
   20908:	6126      	str	r6, [r4, #16]
   2090a:	4620      	mov	r0, r4
   2090c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20910:	000299bf 	.word	0x000299bf
   20914:	000299da 	.word	0x000299da

00020918 <__i2b>:
   20918:	b510      	push	{r4, lr}
   2091a:	460c      	mov	r4, r1
   2091c:	2101      	movs	r1, #1
   2091e:	f7ff ff4f 	bl	207c0 <_Balloc>
   20922:	4602      	mov	r2, r0
   20924:	b928      	cbnz	r0, 20932 <__i2b+0x1a>
   20926:	4b05      	ldr	r3, [pc, #20]	; (2093c <__i2b+0x24>)
   20928:	f44f 71a0 	mov.w	r1, #320	; 0x140
   2092c:	4804      	ldr	r0, [pc, #16]	; (20940 <__i2b+0x28>)
   2092e:	f7ff fe83 	bl	20638 <__assert_func>
   20932:	2301      	movs	r3, #1
   20934:	6144      	str	r4, [r0, #20]
   20936:	6103      	str	r3, [r0, #16]
   20938:	bd10      	pop	{r4, pc}
   2093a:	bf00      	nop
   2093c:	000299bf 	.word	0x000299bf
   20940:	000299da 	.word	0x000299da

00020944 <__multiply>:
   20944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20948:	4614      	mov	r4, r2
   2094a:	690a      	ldr	r2, [r1, #16]
   2094c:	460d      	mov	r5, r1
   2094e:	b085      	sub	sp, #20
   20950:	6923      	ldr	r3, [r4, #16]
   20952:	429a      	cmp	r2, r3
   20954:	bfbe      	ittt	lt
   20956:	460b      	movlt	r3, r1
   20958:	4625      	movlt	r5, r4
   2095a:	461c      	movlt	r4, r3
   2095c:	f8d5 a010 	ldr.w	sl, [r5, #16]
   20960:	68ab      	ldr	r3, [r5, #8]
   20962:	f8d4 9010 	ldr.w	r9, [r4, #16]
   20966:	6869      	ldr	r1, [r5, #4]
   20968:	eb0a 0709 	add.w	r7, sl, r9
   2096c:	42bb      	cmp	r3, r7
   2096e:	bfb8      	it	lt
   20970:	3101      	addlt	r1, #1
   20972:	f7ff ff25 	bl	207c0 <_Balloc>
   20976:	b930      	cbnz	r0, 20986 <__multiply+0x42>
   20978:	4602      	mov	r2, r0
   2097a:	4b43      	ldr	r3, [pc, #268]	; (20a88 <__multiply+0x144>)
   2097c:	f240 115d 	movw	r1, #349	; 0x15d
   20980:	4842      	ldr	r0, [pc, #264]	; (20a8c <__multiply+0x148>)
   20982:	f7ff fe59 	bl	20638 <__assert_func>
   20986:	f100 0614 	add.w	r6, r0, #20
   2098a:	2200      	movs	r2, #0
   2098c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
   20990:	4633      	mov	r3, r6
   20992:	4543      	cmp	r3, r8
   20994:	d31e      	bcc.n	209d4 <__multiply+0x90>
   20996:	f105 0c14 	add.w	ip, r5, #20
   2099a:	f104 0314 	add.w	r3, r4, #20
   2099e:	f105 0115 	add.w	r1, r5, #21
   209a2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
   209a6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
   209aa:	9202      	str	r2, [sp, #8]
   209ac:	ebac 0205 	sub.w	r2, ip, r5
   209b0:	3a15      	subs	r2, #21
   209b2:	f022 0203 	bic.w	r2, r2, #3
   209b6:	3204      	adds	r2, #4
   209b8:	458c      	cmp	ip, r1
   209ba:	bf38      	it	cc
   209bc:	2204      	movcc	r2, #4
   209be:	9201      	str	r2, [sp, #4]
   209c0:	9a02      	ldr	r2, [sp, #8]
   209c2:	9303      	str	r3, [sp, #12]
   209c4:	429a      	cmp	r2, r3
   209c6:	d808      	bhi.n	209da <__multiply+0x96>
   209c8:	2f00      	cmp	r7, #0
   209ca:	dc57      	bgt.n	20a7c <__multiply+0x138>
   209cc:	6107      	str	r7, [r0, #16]
   209ce:	b005      	add	sp, #20
   209d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209d4:	f843 2b04 	str.w	r2, [r3], #4
   209d8:	e7db      	b.n	20992 <__multiply+0x4e>
   209da:	f8b3 a000 	ldrh.w	sl, [r3]
   209de:	f1ba 0f00 	cmp.w	sl, #0
   209e2:	d022      	beq.n	20a2a <__multiply+0xe6>
   209e4:	f105 0e14 	add.w	lr, r5, #20
   209e8:	46b1      	mov	r9, r6
   209ea:	2200      	movs	r2, #0
   209ec:	f85e 4b04 	ldr.w	r4, [lr], #4
   209f0:	f8d9 b000 	ldr.w	fp, [r9]
   209f4:	b2a1      	uxth	r1, r4
   209f6:	45f4      	cmp	ip, lr
   209f8:	fa1f fb8b 	uxth.w	fp, fp
   209fc:	ea4f 4414 	mov.w	r4, r4, lsr #16
   20a00:	fb0a b101 	mla	r1, sl, r1, fp
   20a04:	4411      	add	r1, r2
   20a06:	f8d9 2000 	ldr.w	r2, [r9]
   20a0a:	ea4f 4212 	mov.w	r2, r2, lsr #16
   20a0e:	fb0a 2404 	mla	r4, sl, r4, r2
   20a12:	eb04 4411 	add.w	r4, r4, r1, lsr #16
   20a16:	b289      	uxth	r1, r1
   20a18:	ea4f 4214 	mov.w	r2, r4, lsr #16
   20a1c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
   20a20:	f849 1b04 	str.w	r1, [r9], #4
   20a24:	d8e2      	bhi.n	209ec <__multiply+0xa8>
   20a26:	9901      	ldr	r1, [sp, #4]
   20a28:	5072      	str	r2, [r6, r1]
   20a2a:	9a03      	ldr	r2, [sp, #12]
   20a2c:	3304      	adds	r3, #4
   20a2e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   20a32:	f1b9 0f00 	cmp.w	r9, #0
   20a36:	d01f      	beq.n	20a78 <__multiply+0x134>
   20a38:	6834      	ldr	r4, [r6, #0]
   20a3a:	f105 0114 	add.w	r1, r5, #20
   20a3e:	46b6      	mov	lr, r6
   20a40:	f04f 0a00 	mov.w	sl, #0
   20a44:	880a      	ldrh	r2, [r1, #0]
   20a46:	b2a4      	uxth	r4, r4
   20a48:	f8be b002 	ldrh.w	fp, [lr, #2]
   20a4c:	fb09 b202 	mla	r2, r9, r2, fp
   20a50:	4492      	add	sl, r2
   20a52:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
   20a56:	f84e 4b04 	str.w	r4, [lr], #4
   20a5a:	f851 4b04 	ldr.w	r4, [r1], #4
   20a5e:	f8be 2000 	ldrh.w	r2, [lr]
   20a62:	0c24      	lsrs	r4, r4, #16
   20a64:	458c      	cmp	ip, r1
   20a66:	fb09 2404 	mla	r4, r9, r4, r2
   20a6a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
   20a6e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   20a72:	d8e7      	bhi.n	20a44 <__multiply+0x100>
   20a74:	9a01      	ldr	r2, [sp, #4]
   20a76:	50b4      	str	r4, [r6, r2]
   20a78:	3604      	adds	r6, #4
   20a7a:	e7a1      	b.n	209c0 <__multiply+0x7c>
   20a7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   20a80:	2b00      	cmp	r3, #0
   20a82:	d1a3      	bne.n	209cc <__multiply+0x88>
   20a84:	3f01      	subs	r7, #1
   20a86:	e79f      	b.n	209c8 <__multiply+0x84>
   20a88:	000299bf 	.word	0x000299bf
   20a8c:	000299da 	.word	0x000299da

00020a90 <__pow5mult>:
   20a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20a94:	4615      	mov	r5, r2
   20a96:	f012 0203 	ands.w	r2, r2, #3
   20a9a:	4606      	mov	r6, r0
   20a9c:	460f      	mov	r7, r1
   20a9e:	d007      	beq.n	20ab0 <__pow5mult+0x20>
   20aa0:	3a01      	subs	r2, #1
   20aa2:	4c25      	ldr	r4, [pc, #148]	; (20b38 <__pow5mult+0xa8>)
   20aa4:	2300      	movs	r3, #0
   20aa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   20aaa:	f7ff feeb 	bl	20884 <__multadd>
   20aae:	4607      	mov	r7, r0
   20ab0:	10ad      	asrs	r5, r5, #2
   20ab2:	d03d      	beq.n	20b30 <__pow5mult+0xa0>
   20ab4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   20ab6:	b97c      	cbnz	r4, 20ad8 <__pow5mult+0x48>
   20ab8:	2010      	movs	r0, #16
   20aba:	f7fe fae9 	bl	1f090 <malloc>
   20abe:	4602      	mov	r2, r0
   20ac0:	6270      	str	r0, [r6, #36]	; 0x24
   20ac2:	b928      	cbnz	r0, 20ad0 <__pow5mult+0x40>
   20ac4:	4b1d      	ldr	r3, [pc, #116]	; (20b3c <__pow5mult+0xac>)
   20ac6:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   20aca:	481d      	ldr	r0, [pc, #116]	; (20b40 <__pow5mult+0xb0>)
   20acc:	f7ff fdb4 	bl	20638 <__assert_func>
   20ad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   20ad4:	6004      	str	r4, [r0, #0]
   20ad6:	60c4      	str	r4, [r0, #12]
   20ad8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   20adc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   20ae0:	b94c      	cbnz	r4, 20af6 <__pow5mult+0x66>
   20ae2:	f240 2171 	movw	r1, #625	; 0x271
   20ae6:	4630      	mov	r0, r6
   20ae8:	f7ff ff16 	bl	20918 <__i2b>
   20aec:	2300      	movs	r3, #0
   20aee:	4604      	mov	r4, r0
   20af0:	f8c8 0008 	str.w	r0, [r8, #8]
   20af4:	6003      	str	r3, [r0, #0]
   20af6:	f04f 0900 	mov.w	r9, #0
   20afa:	07eb      	lsls	r3, r5, #31
   20afc:	d50a      	bpl.n	20b14 <__pow5mult+0x84>
   20afe:	4639      	mov	r1, r7
   20b00:	4622      	mov	r2, r4
   20b02:	4630      	mov	r0, r6
   20b04:	f7ff ff1e 	bl	20944 <__multiply>
   20b08:	4680      	mov	r8, r0
   20b0a:	4639      	mov	r1, r7
   20b0c:	4630      	mov	r0, r6
   20b0e:	4647      	mov	r7, r8
   20b10:	f7ff fe96 	bl	20840 <_Bfree>
   20b14:	106d      	asrs	r5, r5, #1
   20b16:	d00b      	beq.n	20b30 <__pow5mult+0xa0>
   20b18:	6820      	ldr	r0, [r4, #0]
   20b1a:	b938      	cbnz	r0, 20b2c <__pow5mult+0x9c>
   20b1c:	4622      	mov	r2, r4
   20b1e:	4621      	mov	r1, r4
   20b20:	4630      	mov	r0, r6
   20b22:	f7ff ff0f 	bl	20944 <__multiply>
   20b26:	6020      	str	r0, [r4, #0]
   20b28:	f8c0 9000 	str.w	r9, [r0]
   20b2c:	4604      	mov	r4, r0
   20b2e:	e7e4      	b.n	20afa <__pow5mult+0x6a>
   20b30:	4638      	mov	r0, r7
   20b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   20b36:	bf00      	nop
   20b38:	00029068 	.word	0x00029068
   20b3c:	000297fb 	.word	0x000297fb
   20b40:	000299da 	.word	0x000299da

00020b44 <__lshift>:
   20b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20b48:	460c      	mov	r4, r1
   20b4a:	4607      	mov	r7, r0
   20b4c:	4691      	mov	r9, r2
   20b4e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   20b52:	6923      	ldr	r3, [r4, #16]
   20b54:	6849      	ldr	r1, [r1, #4]
   20b56:	eb03 1862 	add.w	r8, r3, r2, asr #5
   20b5a:	68a3      	ldr	r3, [r4, #8]
   20b5c:	f108 0601 	add.w	r6, r8, #1
   20b60:	42b3      	cmp	r3, r6
   20b62:	db0b      	blt.n	20b7c <__lshift+0x38>
   20b64:	4638      	mov	r0, r7
   20b66:	f7ff fe2b 	bl	207c0 <_Balloc>
   20b6a:	4605      	mov	r5, r0
   20b6c:	b948      	cbnz	r0, 20b82 <__lshift+0x3e>
   20b6e:	4602      	mov	r2, r0
   20b70:	4b28      	ldr	r3, [pc, #160]	; (20c14 <__lshift+0xd0>)
   20b72:	f240 11d9 	movw	r1, #473	; 0x1d9
   20b76:	4828      	ldr	r0, [pc, #160]	; (20c18 <__lshift+0xd4>)
   20b78:	f7ff fd5e 	bl	20638 <__assert_func>
   20b7c:	3101      	adds	r1, #1
   20b7e:	005b      	lsls	r3, r3, #1
   20b80:	e7ee      	b.n	20b60 <__lshift+0x1c>
   20b82:	2300      	movs	r3, #0
   20b84:	f100 0114 	add.w	r1, r0, #20
   20b88:	f100 0210 	add.w	r2, r0, #16
   20b8c:	4618      	mov	r0, r3
   20b8e:	4553      	cmp	r3, sl
   20b90:	db33      	blt.n	20bfa <__lshift+0xb6>
   20b92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   20b96:	f104 0314 	add.w	r3, r4, #20
   20b9a:	6920      	ldr	r0, [r4, #16]
   20b9c:	f019 091f 	ands.w	r9, r9, #31
   20ba0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   20ba4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   20ba8:	d02b      	beq.n	20c02 <__lshift+0xbe>
   20baa:	f1c9 0e20 	rsb	lr, r9, #32
   20bae:	468a      	mov	sl, r1
   20bb0:	2200      	movs	r2, #0
   20bb2:	6818      	ldr	r0, [r3, #0]
   20bb4:	fa00 f009 	lsl.w	r0, r0, r9
   20bb8:	4302      	orrs	r2, r0
   20bba:	f84a 2b04 	str.w	r2, [sl], #4
   20bbe:	f853 2b04 	ldr.w	r2, [r3], #4
   20bc2:	459c      	cmp	ip, r3
   20bc4:	fa22 f20e 	lsr.w	r2, r2, lr
   20bc8:	d8f3      	bhi.n	20bb2 <__lshift+0x6e>
   20bca:	ebac 0304 	sub.w	r3, ip, r4
   20bce:	f104 0015 	add.w	r0, r4, #21
   20bd2:	3b15      	subs	r3, #21
   20bd4:	f023 0303 	bic.w	r3, r3, #3
   20bd8:	3304      	adds	r3, #4
   20bda:	4584      	cmp	ip, r0
   20bdc:	bf38      	it	cc
   20bde:	2304      	movcc	r3, #4
   20be0:	50ca      	str	r2, [r1, r3]
   20be2:	b10a      	cbz	r2, 20be8 <__lshift+0xa4>
   20be4:	f108 0602 	add.w	r6, r8, #2
   20be8:	3e01      	subs	r6, #1
   20bea:	4638      	mov	r0, r7
   20bec:	4621      	mov	r1, r4
   20bee:	612e      	str	r6, [r5, #16]
   20bf0:	f7ff fe26 	bl	20840 <_Bfree>
   20bf4:	4628      	mov	r0, r5
   20bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20bfa:	3301      	adds	r3, #1
   20bfc:	f842 0f04 	str.w	r0, [r2, #4]!
   20c00:	e7c5      	b.n	20b8e <__lshift+0x4a>
   20c02:	3904      	subs	r1, #4
   20c04:	f853 2b04 	ldr.w	r2, [r3], #4
   20c08:	459c      	cmp	ip, r3
   20c0a:	f841 2f04 	str.w	r2, [r1, #4]!
   20c0e:	d8f9      	bhi.n	20c04 <__lshift+0xc0>
   20c10:	e7ea      	b.n	20be8 <__lshift+0xa4>
   20c12:	bf00      	nop
   20c14:	000299bf 	.word	0x000299bf
   20c18:	000299da 	.word	0x000299da

00020c1c <__mdiff>:
   20c1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c20:	460c      	mov	r4, r1
   20c22:	4606      	mov	r6, r0
   20c24:	4611      	mov	r1, r2
   20c26:	4692      	mov	sl, r2
   20c28:	4620      	mov	r0, r4
   20c2a:	f007 fa0c 	bl	28046 <__mcmp>
   20c2e:	1e05      	subs	r5, r0, #0
   20c30:	d110      	bne.n	20c54 <__mdiff+0x38>
   20c32:	4629      	mov	r1, r5
   20c34:	4630      	mov	r0, r6
   20c36:	f7ff fdc3 	bl	207c0 <_Balloc>
   20c3a:	b930      	cbnz	r0, 20c4a <__mdiff+0x2e>
   20c3c:	4b3d      	ldr	r3, [pc, #244]	; (20d34 <__mdiff+0x118>)
   20c3e:	4602      	mov	r2, r0
   20c40:	f240 2132 	movw	r1, #562	; 0x232
   20c44:	483c      	ldr	r0, [pc, #240]	; (20d38 <__mdiff+0x11c>)
   20c46:	f7ff fcf7 	bl	20638 <__assert_func>
   20c4a:	2301      	movs	r3, #1
   20c4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   20c50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c54:	bfa4      	itt	ge
   20c56:	4653      	movge	r3, sl
   20c58:	46a2      	movge	sl, r4
   20c5a:	4630      	mov	r0, r6
   20c5c:	bfa8      	it	ge
   20c5e:	2500      	movge	r5, #0
   20c60:	f8da 1004 	ldr.w	r1, [sl, #4]
   20c64:	bfac      	ite	ge
   20c66:	461c      	movge	r4, r3
   20c68:	2501      	movlt	r5, #1
   20c6a:	f7ff fda9 	bl	207c0 <_Balloc>
   20c6e:	b920      	cbnz	r0, 20c7a <__mdiff+0x5e>
   20c70:	4b30      	ldr	r3, [pc, #192]	; (20d34 <__mdiff+0x118>)
   20c72:	4602      	mov	r2, r0
   20c74:	f44f 7110 	mov.w	r1, #576	; 0x240
   20c78:	e7e4      	b.n	20c44 <__mdiff+0x28>
   20c7a:	f8da 7010 	ldr.w	r7, [sl, #16]
   20c7e:	f104 0914 	add.w	r9, r4, #20
   20c82:	6926      	ldr	r6, [r4, #16]
   20c84:	f100 0814 	add.w	r8, r0, #20
   20c88:	60c5      	str	r5, [r0, #12]
   20c8a:	f10a 0514 	add.w	r5, sl, #20
   20c8e:	f10a 0210 	add.w	r2, sl, #16
   20c92:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   20c96:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   20c9a:	46c2      	mov	sl, r8
   20c9c:	f04f 0c00 	mov.w	ip, #0
   20ca0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   20ca4:	f859 3b04 	ldr.w	r3, [r9], #4
   20ca8:	fa1f f18b 	uxth.w	r1, fp
   20cac:	454e      	cmp	r6, r9
   20cae:	4461      	add	r1, ip
   20cb0:	fa1f fc83 	uxth.w	ip, r3
   20cb4:	ea4f 4313 	mov.w	r3, r3, lsr #16
   20cb8:	eba1 010c 	sub.w	r1, r1, ip
   20cbc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   20cc0:	eb03 4321 	add.w	r3, r3, r1, asr #16
   20cc4:	b289      	uxth	r1, r1
   20cc6:	ea4f 4c23 	mov.w	ip, r3, asr #16
   20cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   20cce:	f84a 3b04 	str.w	r3, [sl], #4
   20cd2:	d8e5      	bhi.n	20ca0 <__mdiff+0x84>
   20cd4:	1b33      	subs	r3, r6, r4
   20cd6:	3415      	adds	r4, #21
   20cd8:	3b15      	subs	r3, #21
   20cda:	f023 0303 	bic.w	r3, r3, #3
   20cde:	3304      	adds	r3, #4
   20ce0:	42a6      	cmp	r6, r4
   20ce2:	bf38      	it	cc
   20ce4:	2304      	movcc	r3, #4
   20ce6:	441d      	add	r5, r3
   20ce8:	4443      	add	r3, r8
   20cea:	462c      	mov	r4, r5
   20cec:	461e      	mov	r6, r3
   20cee:	4574      	cmp	r4, lr
   20cf0:	d30e      	bcc.n	20d10 <__mdiff+0xf4>
   20cf2:	f10e 0203 	add.w	r2, lr, #3
   20cf6:	1b52      	subs	r2, r2, r5
   20cf8:	3d03      	subs	r5, #3
   20cfa:	f022 0203 	bic.w	r2, r2, #3
   20cfe:	45ae      	cmp	lr, r5
   20d00:	bf38      	it	cc
   20d02:	2200      	movcc	r2, #0
   20d04:	441a      	add	r2, r3
   20d06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   20d0a:	b18b      	cbz	r3, 20d30 <__mdiff+0x114>
   20d0c:	6107      	str	r7, [r0, #16]
   20d0e:	e79f      	b.n	20c50 <__mdiff+0x34>
   20d10:	f854 8b04 	ldr.w	r8, [r4], #4
   20d14:	fa1f f288 	uxth.w	r2, r8
   20d18:	4462      	add	r2, ip
   20d1a:	1411      	asrs	r1, r2, #16
   20d1c:	b292      	uxth	r2, r2
   20d1e:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   20d22:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   20d26:	ea4f 4c21 	mov.w	ip, r1, asr #16
   20d2a:	f846 2b04 	str.w	r2, [r6], #4
   20d2e:	e7de      	b.n	20cee <__mdiff+0xd2>
   20d30:	3f01      	subs	r7, #1
   20d32:	e7e8      	b.n	20d06 <__mdiff+0xea>
   20d34:	000299bf 	.word	0x000299bf
   20d38:	000299da 	.word	0x000299da

00020d3c <__d2b>:
   20d3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20d40:	4689      	mov	r9, r1
   20d42:	2101      	movs	r1, #1
   20d44:	4690      	mov	r8, r2
   20d46:	ec57 6b10 	vmov	r6, r7, d0
   20d4a:	f7ff fd39 	bl	207c0 <_Balloc>
   20d4e:	4604      	mov	r4, r0
   20d50:	b930      	cbnz	r0, 20d60 <__d2b+0x24>
   20d52:	4602      	mov	r2, r0
   20d54:	4b25      	ldr	r3, [pc, #148]	; (20dec <__d2b+0xb0>)
   20d56:	f240 310a 	movw	r1, #778	; 0x30a
   20d5a:	4825      	ldr	r0, [pc, #148]	; (20df0 <__d2b+0xb4>)
   20d5c:	f7ff fc6c 	bl	20638 <__assert_func>
   20d60:	f3c7 550a 	ubfx	r5, r7, #20, #11
   20d64:	f3c7 0313 	ubfx	r3, r7, #0, #20
   20d68:	bb35      	cbnz	r5, 20db8 <__d2b+0x7c>
   20d6a:	2e00      	cmp	r6, #0
   20d6c:	9301      	str	r3, [sp, #4]
   20d6e:	d028      	beq.n	20dc2 <__d2b+0x86>
   20d70:	4668      	mov	r0, sp
   20d72:	9600      	str	r6, [sp, #0]
   20d74:	f007 f937 	bl	27fe6 <__lo0bits>
   20d78:	9900      	ldr	r1, [sp, #0]
   20d7a:	b300      	cbz	r0, 20dbe <__d2b+0x82>
   20d7c:	9a01      	ldr	r2, [sp, #4]
   20d7e:	f1c0 0320 	rsb	r3, r0, #32
   20d82:	fa02 f303 	lsl.w	r3, r2, r3
   20d86:	40c2      	lsrs	r2, r0
   20d88:	430b      	orrs	r3, r1
   20d8a:	9201      	str	r2, [sp, #4]
   20d8c:	6163      	str	r3, [r4, #20]
   20d8e:	9b01      	ldr	r3, [sp, #4]
   20d90:	2b00      	cmp	r3, #0
   20d92:	61a3      	str	r3, [r4, #24]
   20d94:	bf14      	ite	ne
   20d96:	2202      	movne	r2, #2
   20d98:	2201      	moveq	r2, #1
   20d9a:	6122      	str	r2, [r4, #16]
   20d9c:	b1d5      	cbz	r5, 20dd4 <__d2b+0x98>
   20d9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   20da2:	4405      	add	r5, r0
   20da4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   20da8:	f8c9 5000 	str.w	r5, [r9]
   20dac:	f8c8 0000 	str.w	r0, [r8]
   20db0:	4620      	mov	r0, r4
   20db2:	b003      	add	sp, #12
   20db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20db8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   20dbc:	e7d5      	b.n	20d6a <__d2b+0x2e>
   20dbe:	6161      	str	r1, [r4, #20]
   20dc0:	e7e5      	b.n	20d8e <__d2b+0x52>
   20dc2:	a801      	add	r0, sp, #4
   20dc4:	f007 f90f 	bl	27fe6 <__lo0bits>
   20dc8:	9b01      	ldr	r3, [sp, #4]
   20dca:	2201      	movs	r2, #1
   20dcc:	3020      	adds	r0, #32
   20dce:	6163      	str	r3, [r4, #20]
   20dd0:	6122      	str	r2, [r4, #16]
   20dd2:	e7e3      	b.n	20d9c <__d2b+0x60>
   20dd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   20dd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   20ddc:	f8c9 0000 	str.w	r0, [r9]
   20de0:	6918      	ldr	r0, [r3, #16]
   20de2:	f007 f8e0 	bl	27fa6 <__hi0bits>
   20de6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   20dea:	e7df      	b.n	20dac <__d2b+0x70>
   20dec:	000299bf 	.word	0x000299bf
   20df0:	000299da 	.word	0x000299da

00020df4 <_svfiprintf_r>:
   20df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20df8:	4698      	mov	r8, r3
   20dfa:	898b      	ldrh	r3, [r1, #12]
   20dfc:	b09d      	sub	sp, #116	; 0x74
   20dfe:	4607      	mov	r7, r0
   20e00:	061b      	lsls	r3, r3, #24
   20e02:	460d      	mov	r5, r1
   20e04:	4614      	mov	r4, r2
   20e06:	d50e      	bpl.n	20e26 <_svfiprintf_r+0x32>
   20e08:	690b      	ldr	r3, [r1, #16]
   20e0a:	b963      	cbnz	r3, 20e26 <_svfiprintf_r+0x32>
   20e0c:	2140      	movs	r1, #64	; 0x40
   20e0e:	f7fe fc1f 	bl	1f650 <_malloc_r>
   20e12:	6028      	str	r0, [r5, #0]
   20e14:	6128      	str	r0, [r5, #16]
   20e16:	b920      	cbnz	r0, 20e22 <_svfiprintf_r+0x2e>
   20e18:	230c      	movs	r3, #12
   20e1a:	603b      	str	r3, [r7, #0]
   20e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20e20:	e0d1      	b.n	20fc6 <_svfiprintf_r+0x1d2>
   20e22:	2340      	movs	r3, #64	; 0x40
   20e24:	616b      	str	r3, [r5, #20]
   20e26:	2300      	movs	r3, #0
   20e28:	f8cd 800c 	str.w	r8, [sp, #12]
   20e2c:	f04f 0901 	mov.w	r9, #1
   20e30:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 20fe0 <_svfiprintf_r+0x1ec>
   20e34:	9309      	str	r3, [sp, #36]	; 0x24
   20e36:	2320      	movs	r3, #32
   20e38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   20e3c:	2330      	movs	r3, #48	; 0x30
   20e3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   20e42:	4623      	mov	r3, r4
   20e44:	469a      	mov	sl, r3
   20e46:	f813 2b01 	ldrb.w	r2, [r3], #1
   20e4a:	b10a      	cbz	r2, 20e50 <_svfiprintf_r+0x5c>
   20e4c:	2a25      	cmp	r2, #37	; 0x25
   20e4e:	d1f9      	bne.n	20e44 <_svfiprintf_r+0x50>
   20e50:	ebba 0b04 	subs.w	fp, sl, r4
   20e54:	d00b      	beq.n	20e6e <_svfiprintf_r+0x7a>
   20e56:	465b      	mov	r3, fp
   20e58:	4622      	mov	r2, r4
   20e5a:	4629      	mov	r1, r5
   20e5c:	4638      	mov	r0, r7
   20e5e:	f007 f943 	bl	280e8 <__ssputs_r>
   20e62:	3001      	adds	r0, #1
   20e64:	f000 80aa 	beq.w	20fbc <_svfiprintf_r+0x1c8>
   20e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20e6a:	445a      	add	r2, fp
   20e6c:	9209      	str	r2, [sp, #36]	; 0x24
   20e6e:	f89a 3000 	ldrb.w	r3, [sl]
   20e72:	2b00      	cmp	r3, #0
   20e74:	f000 80a2 	beq.w	20fbc <_svfiprintf_r+0x1c8>
   20e78:	2300      	movs	r3, #0
   20e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20e7e:	f10a 0a01 	add.w	sl, sl, #1
   20e82:	9304      	str	r3, [sp, #16]
   20e84:	9307      	str	r3, [sp, #28]
   20e86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   20e8a:	931a      	str	r3, [sp, #104]	; 0x68
   20e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
   20e90:	4654      	mov	r4, sl
   20e92:	2205      	movs	r2, #5
   20e94:	4852      	ldr	r0, [pc, #328]	; (20fe0 <_svfiprintf_r+0x1ec>)
   20e96:	f814 1b01 	ldrb.w	r1, [r4], #1
   20e9a:	f006 fd38 	bl	2790e <memchr>
   20e9e:	9a04      	ldr	r2, [sp, #16]
   20ea0:	b9d8      	cbnz	r0, 20eda <_svfiprintf_r+0xe6>
   20ea2:	06d0      	lsls	r0, r2, #27
   20ea4:	bf44      	itt	mi
   20ea6:	2320      	movmi	r3, #32
   20ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   20eac:	0711      	lsls	r1, r2, #28
   20eae:	bf44      	itt	mi
   20eb0:	232b      	movmi	r3, #43	; 0x2b
   20eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   20eb6:	f89a 3000 	ldrb.w	r3, [sl]
   20eba:	2b2a      	cmp	r3, #42	; 0x2a
   20ebc:	d015      	beq.n	20eea <_svfiprintf_r+0xf6>
   20ebe:	9a07      	ldr	r2, [sp, #28]
   20ec0:	4654      	mov	r4, sl
   20ec2:	2000      	movs	r0, #0
   20ec4:	f04f 0c0a 	mov.w	ip, #10
   20ec8:	4621      	mov	r1, r4
   20eca:	f811 3b01 	ldrb.w	r3, [r1], #1
   20ece:	3b30      	subs	r3, #48	; 0x30
   20ed0:	2b09      	cmp	r3, #9
   20ed2:	d94e      	bls.n	20f72 <_svfiprintf_r+0x17e>
   20ed4:	b1b0      	cbz	r0, 20f04 <_svfiprintf_r+0x110>
   20ed6:	9207      	str	r2, [sp, #28]
   20ed8:	e014      	b.n	20f04 <_svfiprintf_r+0x110>
   20eda:	eba0 0308 	sub.w	r3, r0, r8
   20ede:	46a2      	mov	sl, r4
   20ee0:	fa09 f303 	lsl.w	r3, r9, r3
   20ee4:	4313      	orrs	r3, r2
   20ee6:	9304      	str	r3, [sp, #16]
   20ee8:	e7d2      	b.n	20e90 <_svfiprintf_r+0x9c>
   20eea:	9b03      	ldr	r3, [sp, #12]
   20eec:	1d19      	adds	r1, r3, #4
   20eee:	681b      	ldr	r3, [r3, #0]
   20ef0:	2b00      	cmp	r3, #0
   20ef2:	9103      	str	r1, [sp, #12]
   20ef4:	bfbb      	ittet	lt
   20ef6:	425b      	neglt	r3, r3
   20ef8:	f042 0202 	orrlt.w	r2, r2, #2
   20efc:	9307      	strge	r3, [sp, #28]
   20efe:	9307      	strlt	r3, [sp, #28]
   20f00:	bfb8      	it	lt
   20f02:	9204      	strlt	r2, [sp, #16]
   20f04:	7823      	ldrb	r3, [r4, #0]
   20f06:	2b2e      	cmp	r3, #46	; 0x2e
   20f08:	d10c      	bne.n	20f24 <_svfiprintf_r+0x130>
   20f0a:	7863      	ldrb	r3, [r4, #1]
   20f0c:	2b2a      	cmp	r3, #42	; 0x2a
   20f0e:	d135      	bne.n	20f7c <_svfiprintf_r+0x188>
   20f10:	9b03      	ldr	r3, [sp, #12]
   20f12:	3402      	adds	r4, #2
   20f14:	1d1a      	adds	r2, r3, #4
   20f16:	681b      	ldr	r3, [r3, #0]
   20f18:	2b00      	cmp	r3, #0
   20f1a:	9203      	str	r2, [sp, #12]
   20f1c:	bfb8      	it	lt
   20f1e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   20f22:	9305      	str	r3, [sp, #20]
   20f24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 20ff0 <_svfiprintf_r+0x1fc>
   20f28:	2203      	movs	r2, #3
   20f2a:	7821      	ldrb	r1, [r4, #0]
   20f2c:	4650      	mov	r0, sl
   20f2e:	f006 fcee 	bl	2790e <memchr>
   20f32:	b140      	cbz	r0, 20f46 <_svfiprintf_r+0x152>
   20f34:	2340      	movs	r3, #64	; 0x40
   20f36:	eba0 000a 	sub.w	r0, r0, sl
   20f3a:	3401      	adds	r4, #1
   20f3c:	fa03 f000 	lsl.w	r0, r3, r0
   20f40:	9b04      	ldr	r3, [sp, #16]
   20f42:	4303      	orrs	r3, r0
   20f44:	9304      	str	r3, [sp, #16]
   20f46:	f814 1b01 	ldrb.w	r1, [r4], #1
   20f4a:	2206      	movs	r2, #6
   20f4c:	4825      	ldr	r0, [pc, #148]	; (20fe4 <_svfiprintf_r+0x1f0>)
   20f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   20f52:	f006 fcdc 	bl	2790e <memchr>
   20f56:	2800      	cmp	r0, #0
   20f58:	d038      	beq.n	20fcc <_svfiprintf_r+0x1d8>
   20f5a:	4b23      	ldr	r3, [pc, #140]	; (20fe8 <_svfiprintf_r+0x1f4>)
   20f5c:	bb1b      	cbnz	r3, 20fa6 <_svfiprintf_r+0x1b2>
   20f5e:	9b03      	ldr	r3, [sp, #12]
   20f60:	3307      	adds	r3, #7
   20f62:	f023 0307 	bic.w	r3, r3, #7
   20f66:	3308      	adds	r3, #8
   20f68:	9303      	str	r3, [sp, #12]
   20f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20f6c:	4433      	add	r3, r6
   20f6e:	9309      	str	r3, [sp, #36]	; 0x24
   20f70:	e767      	b.n	20e42 <_svfiprintf_r+0x4e>
   20f72:	fb0c 3202 	mla	r2, ip, r2, r3
   20f76:	460c      	mov	r4, r1
   20f78:	2001      	movs	r0, #1
   20f7a:	e7a5      	b.n	20ec8 <_svfiprintf_r+0xd4>
   20f7c:	2300      	movs	r3, #0
   20f7e:	3401      	adds	r4, #1
   20f80:	f04f 0c0a 	mov.w	ip, #10
   20f84:	4619      	mov	r1, r3
   20f86:	9305      	str	r3, [sp, #20]
   20f88:	4620      	mov	r0, r4
   20f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
   20f8e:	3a30      	subs	r2, #48	; 0x30
   20f90:	2a09      	cmp	r2, #9
   20f92:	d903      	bls.n	20f9c <_svfiprintf_r+0x1a8>
   20f94:	2b00      	cmp	r3, #0
   20f96:	d0c5      	beq.n	20f24 <_svfiprintf_r+0x130>
   20f98:	9105      	str	r1, [sp, #20]
   20f9a:	e7c3      	b.n	20f24 <_svfiprintf_r+0x130>
   20f9c:	fb0c 2101 	mla	r1, ip, r1, r2
   20fa0:	4604      	mov	r4, r0
   20fa2:	2301      	movs	r3, #1
   20fa4:	e7f0      	b.n	20f88 <_svfiprintf_r+0x194>
   20fa6:	ab03      	add	r3, sp, #12
   20fa8:	462a      	mov	r2, r5
   20faa:	a904      	add	r1, sp, #16
   20fac:	4638      	mov	r0, r7
   20fae:	9300      	str	r3, [sp, #0]
   20fb0:	4b0e      	ldr	r3, [pc, #56]	; (20fec <_svfiprintf_r+0x1f8>)
   20fb2:	f7fe fba7 	bl	1f704 <_printf_float>
   20fb6:	1c42      	adds	r2, r0, #1
   20fb8:	4606      	mov	r6, r0
   20fba:	d1d6      	bne.n	20f6a <_svfiprintf_r+0x176>
   20fbc:	89ab      	ldrh	r3, [r5, #12]
   20fbe:	065b      	lsls	r3, r3, #25
   20fc0:	f53f af2c 	bmi.w	20e1c <_svfiprintf_r+0x28>
   20fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
   20fc6:	b01d      	add	sp, #116	; 0x74
   20fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fcc:	ab03      	add	r3, sp, #12
   20fce:	462a      	mov	r2, r5
   20fd0:	a904      	add	r1, sp, #16
   20fd2:	4638      	mov	r0, r7
   20fd4:	9300      	str	r3, [sp, #0]
   20fd6:	4b05      	ldr	r3, [pc, #20]	; (20fec <_svfiprintf_r+0x1f8>)
   20fd8:	f7fe fdca 	bl	1fb70 <_printf_i>
   20fdc:	e7eb      	b.n	20fb6 <_svfiprintf_r+0x1c2>
   20fde:	bf00      	nop
   20fe0:	00029a57 	.word	0x00029a57
   20fe4:	00029a61 	.word	0x00029a61
   20fe8:	0001f705 	.word	0x0001f705
   20fec:	000280e9 	.word	0x000280e9
   20ff0:	00029a5d 	.word	0x00029a5d

00020ff4 <__ssvfiscanf_r>:
   20ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ff8:	460c      	mov	r4, r1
   20ffa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   20ffe:	2100      	movs	r1, #0
   21000:	4606      	mov	r6, r0
   21002:	f10d 0804 	add.w	r8, sp, #4
   21006:	4fb4      	ldr	r7, [pc, #720]	; (212d8 <__ssvfiscanf_r+0x2e4>)
   21008:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 212e4 <__ssvfiscanf_r+0x2f0>
   2100c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   21010:	9300      	str	r3, [sp, #0]
   21012:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   21016:	49b1      	ldr	r1, [pc, #708]	; (212dc <__ssvfiscanf_r+0x2e8>)
   21018:	91a0      	str	r1, [sp, #640]	; 0x280
   2101a:	49b1      	ldr	r1, [pc, #708]	; (212e0 <__ssvfiscanf_r+0x2ec>)
   2101c:	91a1      	str	r1, [sp, #644]	; 0x284
   2101e:	f892 a000 	ldrb.w	sl, [r2]
   21022:	f1ba 0f00 	cmp.w	sl, #0
   21026:	f000 8154 	beq.w	212d2 <__ssvfiscanf_r+0x2de>
   2102a:	f81a 3007 	ldrb.w	r3, [sl, r7]
   2102e:	1c55      	adds	r5, r2, #1
   21030:	f013 0308 	ands.w	r3, r3, #8
   21034:	d019      	beq.n	2106a <__ssvfiscanf_r+0x76>
   21036:	6863      	ldr	r3, [r4, #4]
   21038:	2b00      	cmp	r3, #0
   2103a:	dd0f      	ble.n	2105c <__ssvfiscanf_r+0x68>
   2103c:	6823      	ldr	r3, [r4, #0]
   2103e:	781a      	ldrb	r2, [r3, #0]
   21040:	5cba      	ldrb	r2, [r7, r2]
   21042:	0712      	lsls	r2, r2, #28
   21044:	d401      	bmi.n	2104a <__ssvfiscanf_r+0x56>
   21046:	462a      	mov	r2, r5
   21048:	e7e9      	b.n	2101e <__ssvfiscanf_r+0x2a>
   2104a:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2104c:	3301      	adds	r3, #1
   2104e:	3201      	adds	r2, #1
   21050:	6023      	str	r3, [r4, #0]
   21052:	9245      	str	r2, [sp, #276]	; 0x114
   21054:	6862      	ldr	r2, [r4, #4]
   21056:	3a01      	subs	r2, #1
   21058:	6062      	str	r2, [r4, #4]
   2105a:	e7ec      	b.n	21036 <__ssvfiscanf_r+0x42>
   2105c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2105e:	4621      	mov	r1, r4
   21060:	4630      	mov	r0, r6
   21062:	4798      	blx	r3
   21064:	2800      	cmp	r0, #0
   21066:	d0e9      	beq.n	2103c <__ssvfiscanf_r+0x48>
   21068:	e7ed      	b.n	21046 <__ssvfiscanf_r+0x52>
   2106a:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   2106e:	f040 8086 	bne.w	2117e <__ssvfiscanf_r+0x18a>
   21072:	9341      	str	r3, [sp, #260]	; 0x104
   21074:	9343      	str	r3, [sp, #268]	; 0x10c
   21076:	7853      	ldrb	r3, [r2, #1]
   21078:	2b2a      	cmp	r3, #42	; 0x2a
   2107a:	bf04      	itt	eq
   2107c:	2310      	moveq	r3, #16
   2107e:	1c95      	addeq	r5, r2, #2
   21080:	f04f 020a 	mov.w	r2, #10
   21084:	bf08      	it	eq
   21086:	9341      	streq	r3, [sp, #260]	; 0x104
   21088:	46ab      	mov	fp, r5
   2108a:	f81b 1b01 	ldrb.w	r1, [fp], #1
   2108e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   21092:	2b09      	cmp	r3, #9
   21094:	d91d      	bls.n	210d2 <__ssvfiscanf_r+0xde>
   21096:	2203      	movs	r2, #3
   21098:	4892      	ldr	r0, [pc, #584]	; (212e4 <__ssvfiscanf_r+0x2f0>)
   2109a:	f006 fc38 	bl	2790e <memchr>
   2109e:	b140      	cbz	r0, 210b2 <__ssvfiscanf_r+0xbe>
   210a0:	2301      	movs	r3, #1
   210a2:	eba0 0009 	sub.w	r0, r0, r9
   210a6:	465d      	mov	r5, fp
   210a8:	fa03 f000 	lsl.w	r0, r3, r0
   210ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
   210ae:	4318      	orrs	r0, r3
   210b0:	9041      	str	r0, [sp, #260]	; 0x104
   210b2:	f815 3b01 	ldrb.w	r3, [r5], #1
   210b6:	2b78      	cmp	r3, #120	; 0x78
   210b8:	d806      	bhi.n	210c8 <__ssvfiscanf_r+0xd4>
   210ba:	2b57      	cmp	r3, #87	; 0x57
   210bc:	d810      	bhi.n	210e0 <__ssvfiscanf_r+0xec>
   210be:	2b25      	cmp	r3, #37	; 0x25
   210c0:	d05d      	beq.n	2117e <__ssvfiscanf_r+0x18a>
   210c2:	d857      	bhi.n	21174 <__ssvfiscanf_r+0x180>
   210c4:	2b00      	cmp	r3, #0
   210c6:	d075      	beq.n	211b4 <__ssvfiscanf_r+0x1c0>
   210c8:	2303      	movs	r3, #3
   210ca:	9347      	str	r3, [sp, #284]	; 0x11c
   210cc:	230a      	movs	r3, #10
   210ce:	9342      	str	r3, [sp, #264]	; 0x108
   210d0:	e082      	b.n	211d8 <__ssvfiscanf_r+0x1e4>
   210d2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   210d4:	465d      	mov	r5, fp
   210d6:	fb02 1303 	mla	r3, r2, r3, r1
   210da:	3b30      	subs	r3, #48	; 0x30
   210dc:	9343      	str	r3, [sp, #268]	; 0x10c
   210de:	e7d3      	b.n	21088 <__ssvfiscanf_r+0x94>
   210e0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   210e4:	2a20      	cmp	r2, #32
   210e6:	d8ef      	bhi.n	210c8 <__ssvfiscanf_r+0xd4>
   210e8:	a101      	add	r1, pc, #4	; (adr r1, 210f0 <__ssvfiscanf_r+0xfc>)
   210ea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   210ee:	bf00      	nop
   210f0:	000211c3 	.word	0x000211c3
   210f4:	000210c9 	.word	0x000210c9
   210f8:	000210c9 	.word	0x000210c9
   210fc:	00021221 	.word	0x00021221
   21100:	000210c9 	.word	0x000210c9
   21104:	000210c9 	.word	0x000210c9
   21108:	000210c9 	.word	0x000210c9
   2110c:	000210c9 	.word	0x000210c9
   21110:	000210c9 	.word	0x000210c9
   21114:	000210c9 	.word	0x000210c9
   21118:	000210c9 	.word	0x000210c9
   2111c:	00021237 	.word	0x00021237
   21120:	0002120d 	.word	0x0002120d
   21124:	0002117b 	.word	0x0002117b
   21128:	0002117b 	.word	0x0002117b
   2112c:	0002117b 	.word	0x0002117b
   21130:	000210c9 	.word	0x000210c9
   21134:	00021211 	.word	0x00021211
   21138:	000210c9 	.word	0x000210c9
   2113c:	000210c9 	.word	0x000210c9
   21140:	000210c9 	.word	0x000210c9
   21144:	000210c9 	.word	0x000210c9
   21148:	00021247 	.word	0x00021247
   2114c:	00021219 	.word	0x00021219
   21150:	000211bb 	.word	0x000211bb
   21154:	000210c9 	.word	0x000210c9
   21158:	000210c9 	.word	0x000210c9
   2115c:	00021243 	.word	0x00021243
   21160:	000210c9 	.word	0x000210c9
   21164:	0002120d 	.word	0x0002120d
   21168:	000210c9 	.word	0x000210c9
   2116c:	000210c9 	.word	0x000210c9
   21170:	000211c3 	.word	0x000211c3
   21174:	3b45      	subs	r3, #69	; 0x45
   21176:	2b02      	cmp	r3, #2
   21178:	d8a6      	bhi.n	210c8 <__ssvfiscanf_r+0xd4>
   2117a:	2305      	movs	r3, #5
   2117c:	e02b      	b.n	211d6 <__ssvfiscanf_r+0x1e2>
   2117e:	6863      	ldr	r3, [r4, #4]
   21180:	2b00      	cmp	r3, #0
   21182:	dd0d      	ble.n	211a0 <__ssvfiscanf_r+0x1ac>
   21184:	6823      	ldr	r3, [r4, #0]
   21186:	781a      	ldrb	r2, [r3, #0]
   21188:	4552      	cmp	r2, sl
   2118a:	f040 80a2 	bne.w	212d2 <__ssvfiscanf_r+0x2de>
   2118e:	3301      	adds	r3, #1
   21190:	6862      	ldr	r2, [r4, #4]
   21192:	6023      	str	r3, [r4, #0]
   21194:	3a01      	subs	r2, #1
   21196:	9b45      	ldr	r3, [sp, #276]	; 0x114
   21198:	6062      	str	r2, [r4, #4]
   2119a:	3301      	adds	r3, #1
   2119c:	9345      	str	r3, [sp, #276]	; 0x114
   2119e:	e752      	b.n	21046 <__ssvfiscanf_r+0x52>
   211a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   211a2:	4621      	mov	r1, r4
   211a4:	4630      	mov	r0, r6
   211a6:	4798      	blx	r3
   211a8:	2800      	cmp	r0, #0
   211aa:	d0eb      	beq.n	21184 <__ssvfiscanf_r+0x190>
   211ac:	9844      	ldr	r0, [sp, #272]	; 0x110
   211ae:	2800      	cmp	r0, #0
   211b0:	f040 8085 	bne.w	212be <__ssvfiscanf_r+0x2ca>
   211b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   211b8:	e087      	b.n	212ca <__ssvfiscanf_r+0x2d6>
   211ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
   211bc:	f042 0220 	orr.w	r2, r2, #32
   211c0:	9241      	str	r2, [sp, #260]	; 0x104
   211c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
   211c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   211c8:	9241      	str	r2, [sp, #260]	; 0x104
   211ca:	2210      	movs	r2, #16
   211cc:	2b6f      	cmp	r3, #111	; 0x6f
   211ce:	9242      	str	r2, [sp, #264]	; 0x108
   211d0:	bf34      	ite	cc
   211d2:	2303      	movcc	r3, #3
   211d4:	2304      	movcs	r3, #4
   211d6:	9347      	str	r3, [sp, #284]	; 0x11c
   211d8:	6863      	ldr	r3, [r4, #4]
   211da:	2b00      	cmp	r3, #0
   211dc:	dd42      	ble.n	21264 <__ssvfiscanf_r+0x270>
   211de:	9b41      	ldr	r3, [sp, #260]	; 0x104
   211e0:	0659      	lsls	r1, r3, #25
   211e2:	d404      	bmi.n	211ee <__ssvfiscanf_r+0x1fa>
   211e4:	6823      	ldr	r3, [r4, #0]
   211e6:	781a      	ldrb	r2, [r3, #0]
   211e8:	5cba      	ldrb	r2, [r7, r2]
   211ea:	0712      	lsls	r2, r2, #28
   211ec:	d441      	bmi.n	21272 <__ssvfiscanf_r+0x27e>
   211ee:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   211f0:	2b02      	cmp	r3, #2
   211f2:	dc50      	bgt.n	21296 <__ssvfiscanf_r+0x2a2>
   211f4:	466b      	mov	r3, sp
   211f6:	4622      	mov	r2, r4
   211f8:	a941      	add	r1, sp, #260	; 0x104
   211fa:	4630      	mov	r0, r6
   211fc:	f000 f9a6 	bl	2154c <_scanf_chars>
   21200:	2801      	cmp	r0, #1
   21202:	d066      	beq.n	212d2 <__ssvfiscanf_r+0x2de>
   21204:	2802      	cmp	r0, #2
   21206:	f47f af1e 	bne.w	21046 <__ssvfiscanf_r+0x52>
   2120a:	e7cf      	b.n	211ac <__ssvfiscanf_r+0x1b8>
   2120c:	220a      	movs	r2, #10
   2120e:	e7dd      	b.n	211cc <__ssvfiscanf_r+0x1d8>
   21210:	2300      	movs	r3, #0
   21212:	9342      	str	r3, [sp, #264]	; 0x108
   21214:	2303      	movs	r3, #3
   21216:	e7de      	b.n	211d6 <__ssvfiscanf_r+0x1e2>
   21218:	2308      	movs	r3, #8
   2121a:	9342      	str	r3, [sp, #264]	; 0x108
   2121c:	2304      	movs	r3, #4
   2121e:	e7da      	b.n	211d6 <__ssvfiscanf_r+0x1e2>
   21220:	4629      	mov	r1, r5
   21222:	4640      	mov	r0, r8
   21224:	f007 f83e 	bl	282a4 <__sccl>
   21228:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2122a:	4605      	mov	r5, r0
   2122c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21230:	9341      	str	r3, [sp, #260]	; 0x104
   21232:	2301      	movs	r3, #1
   21234:	e7cf      	b.n	211d6 <__ssvfiscanf_r+0x1e2>
   21236:	9b41      	ldr	r3, [sp, #260]	; 0x104
   21238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2123c:	9341      	str	r3, [sp, #260]	; 0x104
   2123e:	2300      	movs	r3, #0
   21240:	e7c9      	b.n	211d6 <__ssvfiscanf_r+0x1e2>
   21242:	2302      	movs	r3, #2
   21244:	e7c7      	b.n	211d6 <__ssvfiscanf_r+0x1e2>
   21246:	9841      	ldr	r0, [sp, #260]	; 0x104
   21248:	06c3      	lsls	r3, r0, #27
   2124a:	f53f aefc 	bmi.w	21046 <__ssvfiscanf_r+0x52>
   2124e:	9b00      	ldr	r3, [sp, #0]
   21250:	07c0      	lsls	r0, r0, #31
   21252:	9a45      	ldr	r2, [sp, #276]	; 0x114
   21254:	f103 0104 	add.w	r1, r3, #4
   21258:	9100      	str	r1, [sp, #0]
   2125a:	681b      	ldr	r3, [r3, #0]
   2125c:	bf4c      	ite	mi
   2125e:	801a      	strhmi	r2, [r3, #0]
   21260:	601a      	strpl	r2, [r3, #0]
   21262:	e6f0      	b.n	21046 <__ssvfiscanf_r+0x52>
   21264:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   21266:	4621      	mov	r1, r4
   21268:	4630      	mov	r0, r6
   2126a:	4798      	blx	r3
   2126c:	2800      	cmp	r0, #0
   2126e:	d0b6      	beq.n	211de <__ssvfiscanf_r+0x1ea>
   21270:	e79c      	b.n	211ac <__ssvfiscanf_r+0x1b8>
   21272:	9a45      	ldr	r2, [sp, #276]	; 0x114
   21274:	3201      	adds	r2, #1
   21276:	9245      	str	r2, [sp, #276]	; 0x114
   21278:	6862      	ldr	r2, [r4, #4]
   2127a:	3a01      	subs	r2, #1
   2127c:	2a00      	cmp	r2, #0
   2127e:	6062      	str	r2, [r4, #4]
   21280:	dd02      	ble.n	21288 <__ssvfiscanf_r+0x294>
   21282:	3301      	adds	r3, #1
   21284:	6023      	str	r3, [r4, #0]
   21286:	e7ad      	b.n	211e4 <__ssvfiscanf_r+0x1f0>
   21288:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2128a:	4621      	mov	r1, r4
   2128c:	4630      	mov	r0, r6
   2128e:	4798      	blx	r3
   21290:	2800      	cmp	r0, #0
   21292:	d0a7      	beq.n	211e4 <__ssvfiscanf_r+0x1f0>
   21294:	e78a      	b.n	211ac <__ssvfiscanf_r+0x1b8>
   21296:	2b04      	cmp	r3, #4
   21298:	dc06      	bgt.n	212a8 <__ssvfiscanf_r+0x2b4>
   2129a:	466b      	mov	r3, sp
   2129c:	4622      	mov	r2, r4
   2129e:	a941      	add	r1, sp, #260	; 0x104
   212a0:	4630      	mov	r0, r6
   212a2:	f000 f9ab 	bl	215fc <_scanf_i>
   212a6:	e7ab      	b.n	21200 <__ssvfiscanf_r+0x20c>
   212a8:	4b0f      	ldr	r3, [pc, #60]	; (212e8 <__ssvfiscanf_r+0x2f4>)
   212aa:	2b00      	cmp	r3, #0
   212ac:	f43f aecb 	beq.w	21046 <__ssvfiscanf_r+0x52>
   212b0:	466b      	mov	r3, sp
   212b2:	4622      	mov	r2, r4
   212b4:	a941      	add	r1, sp, #260	; 0x104
   212b6:	4630      	mov	r0, r6
   212b8:	e000      	b.n	212bc <__ssvfiscanf_r+0x2c8>
   212ba:	bf00      	nop
   212bc:	e7a0      	b.n	21200 <__ssvfiscanf_r+0x20c>
   212be:	89a3      	ldrh	r3, [r4, #12]
   212c0:	f013 0f40 	tst.w	r3, #64	; 0x40
   212c4:	bf18      	it	ne
   212c6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   212ca:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   212ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212d2:	9844      	ldr	r0, [sp, #272]	; 0x110
   212d4:	e7f9      	b.n	212ca <__ssvfiscanf_r+0x2d6>
   212d6:	bf00      	nop
   212d8:	000296c9 	.word	0x000296c9
   212dc:	0002819f 	.word	0x0002819f
   212e0:	00028219 	.word	0x00028219
   212e4:	00029a5d 	.word	0x00029a5d
   212e8:	00000000 	.word	0x00000000

000212ec <_vfiprintf_r>:
   212ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212f0:	460d      	mov	r5, r1
   212f2:	b09d      	sub	sp, #116	; 0x74
   212f4:	4614      	mov	r4, r2
   212f6:	4698      	mov	r8, r3
   212f8:	4606      	mov	r6, r0
   212fa:	b118      	cbz	r0, 21304 <_vfiprintf_r+0x18>
   212fc:	6983      	ldr	r3, [r0, #24]
   212fe:	b90b      	cbnz	r3, 21304 <_vfiprintf_r+0x18>
   21300:	f000 fc68 	bl	21bd4 <__sinit>
   21304:	4b89      	ldr	r3, [pc, #548]	; (2152c <_vfiprintf_r+0x240>)
   21306:	429d      	cmp	r5, r3
   21308:	d11b      	bne.n	21342 <_vfiprintf_r+0x56>
   2130a:	6875      	ldr	r5, [r6, #4]
   2130c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2130e:	07d9      	lsls	r1, r3, #31
   21310:	d405      	bmi.n	2131e <_vfiprintf_r+0x32>
   21312:	89ab      	ldrh	r3, [r5, #12]
   21314:	059a      	lsls	r2, r3, #22
   21316:	d402      	bmi.n	2131e <_vfiprintf_r+0x32>
   21318:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2131a:	f006 fe2f 	bl	27f7c <__retarget_lock_acquire_recursive>
   2131e:	89ab      	ldrh	r3, [r5, #12]
   21320:	071b      	lsls	r3, r3, #28
   21322:	d501      	bpl.n	21328 <_vfiprintf_r+0x3c>
   21324:	692b      	ldr	r3, [r5, #16]
   21326:	b9eb      	cbnz	r3, 21364 <_vfiprintf_r+0x78>
   21328:	4629      	mov	r1, r5
   2132a:	4630      	mov	r0, r6
   2132c:	f000 fad6 	bl	218dc <__swsetup_r>
   21330:	b1c0      	cbz	r0, 21364 <_vfiprintf_r+0x78>
   21332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   21334:	07dc      	lsls	r4, r3, #31
   21336:	d50e      	bpl.n	21356 <_vfiprintf_r+0x6a>
   21338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2133c:	b01d      	add	sp, #116	; 0x74
   2133e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21342:	4b7b      	ldr	r3, [pc, #492]	; (21530 <_vfiprintf_r+0x244>)
   21344:	429d      	cmp	r5, r3
   21346:	d101      	bne.n	2134c <_vfiprintf_r+0x60>
   21348:	68b5      	ldr	r5, [r6, #8]
   2134a:	e7df      	b.n	2130c <_vfiprintf_r+0x20>
   2134c:	4b79      	ldr	r3, [pc, #484]	; (21534 <_vfiprintf_r+0x248>)
   2134e:	429d      	cmp	r5, r3
   21350:	bf08      	it	eq
   21352:	68f5      	ldreq	r5, [r6, #12]
   21354:	e7da      	b.n	2130c <_vfiprintf_r+0x20>
   21356:	89ab      	ldrh	r3, [r5, #12]
   21358:	0598      	lsls	r0, r3, #22
   2135a:	d4ed      	bmi.n	21338 <_vfiprintf_r+0x4c>
   2135c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2135e:	f006 fe0f 	bl	27f80 <__retarget_lock_release_recursive>
   21362:	e7e9      	b.n	21338 <_vfiprintf_r+0x4c>
   21364:	2300      	movs	r3, #0
   21366:	f8cd 800c 	str.w	r8, [sp, #12]
   2136a:	f04f 0901 	mov.w	r9, #1
   2136e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 21538 <_vfiprintf_r+0x24c>
   21372:	9309      	str	r3, [sp, #36]	; 0x24
   21374:	2320      	movs	r3, #32
   21376:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2137a:	2330      	movs	r3, #48	; 0x30
   2137c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   21380:	4623      	mov	r3, r4
   21382:	469a      	mov	sl, r3
   21384:	f813 2b01 	ldrb.w	r2, [r3], #1
   21388:	b10a      	cbz	r2, 2138e <_vfiprintf_r+0xa2>
   2138a:	2a25      	cmp	r2, #37	; 0x25
   2138c:	d1f9      	bne.n	21382 <_vfiprintf_r+0x96>
   2138e:	ebba 0b04 	subs.w	fp, sl, r4
   21392:	d00b      	beq.n	213ac <_vfiprintf_r+0xc0>
   21394:	465b      	mov	r3, fp
   21396:	4622      	mov	r2, r4
   21398:	4629      	mov	r1, r5
   2139a:	4630      	mov	r0, r6
   2139c:	f006 ff70 	bl	28280 <__sfputs_r>
   213a0:	3001      	adds	r0, #1
   213a2:	f000 80aa 	beq.w	214fa <_vfiprintf_r+0x20e>
   213a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   213a8:	445a      	add	r2, fp
   213aa:	9209      	str	r2, [sp, #36]	; 0x24
   213ac:	f89a 3000 	ldrb.w	r3, [sl]
   213b0:	2b00      	cmp	r3, #0
   213b2:	f000 80a2 	beq.w	214fa <_vfiprintf_r+0x20e>
   213b6:	2300      	movs	r3, #0
   213b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   213bc:	f10a 0a01 	add.w	sl, sl, #1
   213c0:	9304      	str	r3, [sp, #16]
   213c2:	9307      	str	r3, [sp, #28]
   213c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   213c8:	931a      	str	r3, [sp, #104]	; 0x68
   213ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
   213ce:	4654      	mov	r4, sl
   213d0:	2205      	movs	r2, #5
   213d2:	4859      	ldr	r0, [pc, #356]	; (21538 <_vfiprintf_r+0x24c>)
   213d4:	f814 1b01 	ldrb.w	r1, [r4], #1
   213d8:	f006 fa99 	bl	2790e <memchr>
   213dc:	9a04      	ldr	r2, [sp, #16]
   213de:	b9d8      	cbnz	r0, 21418 <_vfiprintf_r+0x12c>
   213e0:	06d1      	lsls	r1, r2, #27
   213e2:	bf44      	itt	mi
   213e4:	2320      	movmi	r3, #32
   213e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   213ea:	0713      	lsls	r3, r2, #28
   213ec:	bf44      	itt	mi
   213ee:	232b      	movmi	r3, #43	; 0x2b
   213f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   213f4:	f89a 3000 	ldrb.w	r3, [sl]
   213f8:	2b2a      	cmp	r3, #42	; 0x2a
   213fa:	d015      	beq.n	21428 <_vfiprintf_r+0x13c>
   213fc:	9a07      	ldr	r2, [sp, #28]
   213fe:	4654      	mov	r4, sl
   21400:	2000      	movs	r0, #0
   21402:	f04f 0c0a 	mov.w	ip, #10
   21406:	4621      	mov	r1, r4
   21408:	f811 3b01 	ldrb.w	r3, [r1], #1
   2140c:	3b30      	subs	r3, #48	; 0x30
   2140e:	2b09      	cmp	r3, #9
   21410:	d94e      	bls.n	214b0 <_vfiprintf_r+0x1c4>
   21412:	b1b0      	cbz	r0, 21442 <_vfiprintf_r+0x156>
   21414:	9207      	str	r2, [sp, #28]
   21416:	e014      	b.n	21442 <_vfiprintf_r+0x156>
   21418:	eba0 0308 	sub.w	r3, r0, r8
   2141c:	46a2      	mov	sl, r4
   2141e:	fa09 f303 	lsl.w	r3, r9, r3
   21422:	4313      	orrs	r3, r2
   21424:	9304      	str	r3, [sp, #16]
   21426:	e7d2      	b.n	213ce <_vfiprintf_r+0xe2>
   21428:	9b03      	ldr	r3, [sp, #12]
   2142a:	1d19      	adds	r1, r3, #4
   2142c:	681b      	ldr	r3, [r3, #0]
   2142e:	2b00      	cmp	r3, #0
   21430:	9103      	str	r1, [sp, #12]
   21432:	bfbb      	ittet	lt
   21434:	425b      	neglt	r3, r3
   21436:	f042 0202 	orrlt.w	r2, r2, #2
   2143a:	9307      	strge	r3, [sp, #28]
   2143c:	9307      	strlt	r3, [sp, #28]
   2143e:	bfb8      	it	lt
   21440:	9204      	strlt	r2, [sp, #16]
   21442:	7823      	ldrb	r3, [r4, #0]
   21444:	2b2e      	cmp	r3, #46	; 0x2e
   21446:	d10c      	bne.n	21462 <_vfiprintf_r+0x176>
   21448:	7863      	ldrb	r3, [r4, #1]
   2144a:	2b2a      	cmp	r3, #42	; 0x2a
   2144c:	d135      	bne.n	214ba <_vfiprintf_r+0x1ce>
   2144e:	9b03      	ldr	r3, [sp, #12]
   21450:	3402      	adds	r4, #2
   21452:	1d1a      	adds	r2, r3, #4
   21454:	681b      	ldr	r3, [r3, #0]
   21456:	2b00      	cmp	r3, #0
   21458:	9203      	str	r2, [sp, #12]
   2145a:	bfb8      	it	lt
   2145c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   21460:	9305      	str	r3, [sp, #20]
   21462:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 21548 <_vfiprintf_r+0x25c>
   21466:	2203      	movs	r2, #3
   21468:	7821      	ldrb	r1, [r4, #0]
   2146a:	4650      	mov	r0, sl
   2146c:	f006 fa4f 	bl	2790e <memchr>
   21470:	b140      	cbz	r0, 21484 <_vfiprintf_r+0x198>
   21472:	2340      	movs	r3, #64	; 0x40
   21474:	eba0 000a 	sub.w	r0, r0, sl
   21478:	3401      	adds	r4, #1
   2147a:	fa03 f000 	lsl.w	r0, r3, r0
   2147e:	9b04      	ldr	r3, [sp, #16]
   21480:	4303      	orrs	r3, r0
   21482:	9304      	str	r3, [sp, #16]
   21484:	f814 1b01 	ldrb.w	r1, [r4], #1
   21488:	2206      	movs	r2, #6
   2148a:	482c      	ldr	r0, [pc, #176]	; (2153c <_vfiprintf_r+0x250>)
   2148c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   21490:	f006 fa3d 	bl	2790e <memchr>
   21494:	2800      	cmp	r0, #0
   21496:	d03f      	beq.n	21518 <_vfiprintf_r+0x22c>
   21498:	4b29      	ldr	r3, [pc, #164]	; (21540 <_vfiprintf_r+0x254>)
   2149a:	bb1b      	cbnz	r3, 214e4 <_vfiprintf_r+0x1f8>
   2149c:	9b03      	ldr	r3, [sp, #12]
   2149e:	3307      	adds	r3, #7
   214a0:	f023 0307 	bic.w	r3, r3, #7
   214a4:	3308      	adds	r3, #8
   214a6:	9303      	str	r3, [sp, #12]
   214a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   214aa:	443b      	add	r3, r7
   214ac:	9309      	str	r3, [sp, #36]	; 0x24
   214ae:	e767      	b.n	21380 <_vfiprintf_r+0x94>
   214b0:	fb0c 3202 	mla	r2, ip, r2, r3
   214b4:	460c      	mov	r4, r1
   214b6:	2001      	movs	r0, #1
   214b8:	e7a5      	b.n	21406 <_vfiprintf_r+0x11a>
   214ba:	2300      	movs	r3, #0
   214bc:	3401      	adds	r4, #1
   214be:	f04f 0c0a 	mov.w	ip, #10
   214c2:	4619      	mov	r1, r3
   214c4:	9305      	str	r3, [sp, #20]
   214c6:	4620      	mov	r0, r4
   214c8:	f810 2b01 	ldrb.w	r2, [r0], #1
   214cc:	3a30      	subs	r2, #48	; 0x30
   214ce:	2a09      	cmp	r2, #9
   214d0:	d903      	bls.n	214da <_vfiprintf_r+0x1ee>
   214d2:	2b00      	cmp	r3, #0
   214d4:	d0c5      	beq.n	21462 <_vfiprintf_r+0x176>
   214d6:	9105      	str	r1, [sp, #20]
   214d8:	e7c3      	b.n	21462 <_vfiprintf_r+0x176>
   214da:	fb0c 2101 	mla	r1, ip, r1, r2
   214de:	4604      	mov	r4, r0
   214e0:	2301      	movs	r3, #1
   214e2:	e7f0      	b.n	214c6 <_vfiprintf_r+0x1da>
   214e4:	ab03      	add	r3, sp, #12
   214e6:	462a      	mov	r2, r5
   214e8:	a904      	add	r1, sp, #16
   214ea:	4630      	mov	r0, r6
   214ec:	9300      	str	r3, [sp, #0]
   214ee:	4b15      	ldr	r3, [pc, #84]	; (21544 <_vfiprintf_r+0x258>)
   214f0:	f7fe f908 	bl	1f704 <_printf_float>
   214f4:	4607      	mov	r7, r0
   214f6:	1c78      	adds	r0, r7, #1
   214f8:	d1d6      	bne.n	214a8 <_vfiprintf_r+0x1bc>
   214fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   214fc:	07d9      	lsls	r1, r3, #31
   214fe:	d405      	bmi.n	2150c <_vfiprintf_r+0x220>
   21500:	89ab      	ldrh	r3, [r5, #12]
   21502:	059a      	lsls	r2, r3, #22
   21504:	d402      	bmi.n	2150c <_vfiprintf_r+0x220>
   21506:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21508:	f006 fd3a 	bl	27f80 <__retarget_lock_release_recursive>
   2150c:	89ab      	ldrh	r3, [r5, #12]
   2150e:	065b      	lsls	r3, r3, #25
   21510:	f53f af12 	bmi.w	21338 <_vfiprintf_r+0x4c>
   21514:	9809      	ldr	r0, [sp, #36]	; 0x24
   21516:	e711      	b.n	2133c <_vfiprintf_r+0x50>
   21518:	ab03      	add	r3, sp, #12
   2151a:	462a      	mov	r2, r5
   2151c:	a904      	add	r1, sp, #16
   2151e:	4630      	mov	r0, r6
   21520:	9300      	str	r3, [sp, #0]
   21522:	4b08      	ldr	r3, [pc, #32]	; (21544 <_vfiprintf_r+0x258>)
   21524:	f7fe fb24 	bl	1fb70 <_printf_i>
   21528:	e7e4      	b.n	214f4 <_vfiprintf_r+0x208>
   2152a:	bf00      	nop
   2152c:	00029094 	.word	0x00029094
   21530:	000290b4 	.word	0x000290b4
   21534:	00029074 	.word	0x00029074
   21538:	00029a57 	.word	0x00029a57
   2153c:	00029a61 	.word	0x00029a61
   21540:	0001f705 	.word	0x0001f705
   21544:	00028281 	.word	0x00028281
   21548:	00029a5d 	.word	0x00029a5d

0002154c <_scanf_chars>:
   2154c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21550:	4615      	mov	r5, r2
   21552:	688a      	ldr	r2, [r1, #8]
   21554:	4680      	mov	r8, r0
   21556:	460c      	mov	r4, r1
   21558:	b932      	cbnz	r2, 21568 <_scanf_chars+0x1c>
   2155a:	698a      	ldr	r2, [r1, #24]
   2155c:	2a00      	cmp	r2, #0
   2155e:	bf0c      	ite	eq
   21560:	2201      	moveq	r2, #1
   21562:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   21566:	608a      	str	r2, [r1, #8]
   21568:	6822      	ldr	r2, [r4, #0]
   2156a:	2700      	movs	r7, #0
   2156c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 215f8 <_scanf_chars+0xac>
   21570:	06d1      	lsls	r1, r2, #27
   21572:	bf5f      	itttt	pl
   21574:	681a      	ldrpl	r2, [r3, #0]
   21576:	1d11      	addpl	r1, r2, #4
   21578:	6019      	strpl	r1, [r3, #0]
   2157a:	6816      	ldrpl	r6, [r2, #0]
   2157c:	69a0      	ldr	r0, [r4, #24]
   2157e:	b188      	cbz	r0, 215a4 <_scanf_chars+0x58>
   21580:	2801      	cmp	r0, #1
   21582:	d107      	bne.n	21594 <_scanf_chars+0x48>
   21584:	682b      	ldr	r3, [r5, #0]
   21586:	781a      	ldrb	r2, [r3, #0]
   21588:	6963      	ldr	r3, [r4, #20]
   2158a:	5c9b      	ldrb	r3, [r3, r2]
   2158c:	b953      	cbnz	r3, 215a4 <_scanf_chars+0x58>
   2158e:	bb27      	cbnz	r7, 215da <_scanf_chars+0x8e>
   21590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21594:	2802      	cmp	r0, #2
   21596:	d120      	bne.n	215da <_scanf_chars+0x8e>
   21598:	682b      	ldr	r3, [r5, #0]
   2159a:	781b      	ldrb	r3, [r3, #0]
   2159c:	f813 3009 	ldrb.w	r3, [r3, r9]
   215a0:	071b      	lsls	r3, r3, #28
   215a2:	d41a      	bmi.n	215da <_scanf_chars+0x8e>
   215a4:	6823      	ldr	r3, [r4, #0]
   215a6:	3701      	adds	r7, #1
   215a8:	06da      	lsls	r2, r3, #27
   215aa:	bf5e      	ittt	pl
   215ac:	682b      	ldrpl	r3, [r5, #0]
   215ae:	781b      	ldrbpl	r3, [r3, #0]
   215b0:	f806 3b01 	strbpl.w	r3, [r6], #1
   215b4:	682a      	ldr	r2, [r5, #0]
   215b6:	686b      	ldr	r3, [r5, #4]
   215b8:	3201      	adds	r2, #1
   215ba:	3b01      	subs	r3, #1
   215bc:	602a      	str	r2, [r5, #0]
   215be:	68a2      	ldr	r2, [r4, #8]
   215c0:	606b      	str	r3, [r5, #4]
   215c2:	3a01      	subs	r2, #1
   215c4:	60a2      	str	r2, [r4, #8]
   215c6:	b142      	cbz	r2, 215da <_scanf_chars+0x8e>
   215c8:	2b00      	cmp	r3, #0
   215ca:	dcd7      	bgt.n	2157c <_scanf_chars+0x30>
   215cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   215d0:	4629      	mov	r1, r5
   215d2:	4640      	mov	r0, r8
   215d4:	4798      	blx	r3
   215d6:	2800      	cmp	r0, #0
   215d8:	d0d0      	beq.n	2157c <_scanf_chars+0x30>
   215da:	6823      	ldr	r3, [r4, #0]
   215dc:	f013 0310 	ands.w	r3, r3, #16
   215e0:	d105      	bne.n	215ee <_scanf_chars+0xa2>
   215e2:	68e2      	ldr	r2, [r4, #12]
   215e4:	3201      	adds	r2, #1
   215e6:	60e2      	str	r2, [r4, #12]
   215e8:	69a2      	ldr	r2, [r4, #24]
   215ea:	b102      	cbz	r2, 215ee <_scanf_chars+0xa2>
   215ec:	7033      	strb	r3, [r6, #0]
   215ee:	6923      	ldr	r3, [r4, #16]
   215f0:	2000      	movs	r0, #0
   215f2:	441f      	add	r7, r3
   215f4:	6127      	str	r7, [r4, #16]
   215f6:	e7cb      	b.n	21590 <_scanf_chars+0x44>
   215f8:	000296c9 	.word	0x000296c9

000215fc <_scanf_i>:
   215fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21600:	4698      	mov	r8, r3
   21602:	b087      	sub	sp, #28
   21604:	4b72      	ldr	r3, [pc, #456]	; (217d0 <_scanf_i+0x1d4>)
   21606:	460c      	mov	r4, r1
   21608:	4682      	mov	sl, r0
   2160a:	4616      	mov	r6, r2
   2160c:	4627      	mov	r7, r4
   2160e:	f04f 0b00 	mov.w	fp, #0
   21612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   21616:	ab03      	add	r3, sp, #12
   21618:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   2161c:	4b6d      	ldr	r3, [pc, #436]	; (217d4 <_scanf_i+0x1d8>)
   2161e:	69a1      	ldr	r1, [r4, #24]
   21620:	4a6d      	ldr	r2, [pc, #436]	; (217d8 <_scanf_i+0x1dc>)
   21622:	2903      	cmp	r1, #3
   21624:	bf18      	it	ne
   21626:	461a      	movne	r2, r3
   21628:	68a3      	ldr	r3, [r4, #8]
   2162a:	9201      	str	r2, [sp, #4]
   2162c:	1e5a      	subs	r2, r3, #1
   2162e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   21632:	bf89      	itett	hi
   21634:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   21638:	f04f 0900 	movls.w	r9, #0
   2163c:	eb03 0905 	addhi.w	r9, r3, r5
   21640:	f240 135d 	movwhi	r3, #349	; 0x15d
   21644:	bf88      	it	hi
   21646:	60a3      	strhi	r3, [r4, #8]
   21648:	f857 3b1c 	ldr.w	r3, [r7], #28
   2164c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   21650:	463d      	mov	r5, r7
   21652:	6023      	str	r3, [r4, #0]
   21654:	6831      	ldr	r1, [r6, #0]
   21656:	ab03      	add	r3, sp, #12
   21658:	2202      	movs	r2, #2
   2165a:	7809      	ldrb	r1, [r1, #0]
   2165c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   21660:	f006 f955 	bl	2790e <memchr>
   21664:	b328      	cbz	r0, 216b2 <_scanf_i+0xb6>
   21666:	f1bb 0f01 	cmp.w	fp, #1
   2166a:	d159      	bne.n	21720 <_scanf_i+0x124>
   2166c:	6862      	ldr	r2, [r4, #4]
   2166e:	b92a      	cbnz	r2, 2167c <_scanf_i+0x80>
   21670:	6822      	ldr	r2, [r4, #0]
   21672:	2308      	movs	r3, #8
   21674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   21678:	6063      	str	r3, [r4, #4]
   2167a:	6022      	str	r2, [r4, #0]
   2167c:	6822      	ldr	r2, [r4, #0]
   2167e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   21682:	6022      	str	r2, [r4, #0]
   21684:	68a2      	ldr	r2, [r4, #8]
   21686:	1e51      	subs	r1, r2, #1
   21688:	60a1      	str	r1, [r4, #8]
   2168a:	b192      	cbz	r2, 216b2 <_scanf_i+0xb6>
   2168c:	6832      	ldr	r2, [r6, #0]
   2168e:	1c51      	adds	r1, r2, #1
   21690:	6031      	str	r1, [r6, #0]
   21692:	7812      	ldrb	r2, [r2, #0]
   21694:	f805 2b01 	strb.w	r2, [r5], #1
   21698:	6872      	ldr	r2, [r6, #4]
   2169a:	3a01      	subs	r2, #1
   2169c:	2a00      	cmp	r2, #0
   2169e:	6072      	str	r2, [r6, #4]
   216a0:	dc07      	bgt.n	216b2 <_scanf_i+0xb6>
   216a2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   216a6:	4631      	mov	r1, r6
   216a8:	4650      	mov	r0, sl
   216aa:	4790      	blx	r2
   216ac:	2800      	cmp	r0, #0
   216ae:	f040 8085 	bne.w	217bc <_scanf_i+0x1c0>
   216b2:	f10b 0b01 	add.w	fp, fp, #1
   216b6:	f1bb 0f03 	cmp.w	fp, #3
   216ba:	d1cb      	bne.n	21654 <_scanf_i+0x58>
   216bc:	6863      	ldr	r3, [r4, #4]
   216be:	b90b      	cbnz	r3, 216c4 <_scanf_i+0xc8>
   216c0:	230a      	movs	r3, #10
   216c2:	6063      	str	r3, [r4, #4]
   216c4:	6863      	ldr	r3, [r4, #4]
   216c6:	f04f 0b00 	mov.w	fp, #0
   216ca:	4944      	ldr	r1, [pc, #272]	; (217dc <_scanf_i+0x1e0>)
   216cc:	6960      	ldr	r0, [r4, #20]
   216ce:	1ac9      	subs	r1, r1, r3
   216d0:	f006 fde8 	bl	282a4 <__sccl>
   216d4:	68a3      	ldr	r3, [r4, #8]
   216d6:	6822      	ldr	r2, [r4, #0]
   216d8:	2b00      	cmp	r3, #0
   216da:	d03d      	beq.n	21758 <_scanf_i+0x15c>
   216dc:	6831      	ldr	r1, [r6, #0]
   216de:	6960      	ldr	r0, [r4, #20]
   216e0:	f891 c000 	ldrb.w	ip, [r1]
   216e4:	f810 000c 	ldrb.w	r0, [r0, ip]
   216e8:	2800      	cmp	r0, #0
   216ea:	d035      	beq.n	21758 <_scanf_i+0x15c>
   216ec:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   216f0:	d124      	bne.n	2173c <_scanf_i+0x140>
   216f2:	0510      	lsls	r0, r2, #20
   216f4:	d522      	bpl.n	2173c <_scanf_i+0x140>
   216f6:	f10b 0b01 	add.w	fp, fp, #1
   216fa:	f1b9 0f00 	cmp.w	r9, #0
   216fe:	d003      	beq.n	21708 <_scanf_i+0x10c>
   21700:	3301      	adds	r3, #1
   21702:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   21706:	60a3      	str	r3, [r4, #8]
   21708:	6873      	ldr	r3, [r6, #4]
   2170a:	3b01      	subs	r3, #1
   2170c:	2b00      	cmp	r3, #0
   2170e:	6073      	str	r3, [r6, #4]
   21710:	dd1b      	ble.n	2174a <_scanf_i+0x14e>
   21712:	6833      	ldr	r3, [r6, #0]
   21714:	3301      	adds	r3, #1
   21716:	6033      	str	r3, [r6, #0]
   21718:	68a3      	ldr	r3, [r4, #8]
   2171a:	3b01      	subs	r3, #1
   2171c:	60a3      	str	r3, [r4, #8]
   2171e:	e7d9      	b.n	216d4 <_scanf_i+0xd8>
   21720:	f1bb 0f02 	cmp.w	fp, #2
   21724:	d1ae      	bne.n	21684 <_scanf_i+0x88>
   21726:	6822      	ldr	r2, [r4, #0]
   21728:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   2172c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   21730:	d1bf      	bne.n	216b2 <_scanf_i+0xb6>
   21732:	2310      	movs	r3, #16
   21734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   21738:	6063      	str	r3, [r4, #4]
   2173a:	e7a2      	b.n	21682 <_scanf_i+0x86>
   2173c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   21740:	6022      	str	r2, [r4, #0]
   21742:	780b      	ldrb	r3, [r1, #0]
   21744:	f805 3b01 	strb.w	r3, [r5], #1
   21748:	e7de      	b.n	21708 <_scanf_i+0x10c>
   2174a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2174e:	4631      	mov	r1, r6
   21750:	4650      	mov	r0, sl
   21752:	4798      	blx	r3
   21754:	2800      	cmp	r0, #0
   21756:	d0df      	beq.n	21718 <_scanf_i+0x11c>
   21758:	6823      	ldr	r3, [r4, #0]
   2175a:	05d9      	lsls	r1, r3, #23
   2175c:	d50d      	bpl.n	2177a <_scanf_i+0x17e>
   2175e:	42bd      	cmp	r5, r7
   21760:	d909      	bls.n	21776 <_scanf_i+0x17a>
   21762:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   21766:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2176a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   2176e:	4632      	mov	r2, r6
   21770:	464d      	mov	r5, r9
   21772:	4650      	mov	r0, sl
   21774:	4798      	blx	r3
   21776:	42bd      	cmp	r5, r7
   21778:	d028      	beq.n	217cc <_scanf_i+0x1d0>
   2177a:	6822      	ldr	r2, [r4, #0]
   2177c:	f012 0210 	ands.w	r2, r2, #16
   21780:	d113      	bne.n	217aa <_scanf_i+0x1ae>
   21782:	702a      	strb	r2, [r5, #0]
   21784:	4639      	mov	r1, r7
   21786:	6863      	ldr	r3, [r4, #4]
   21788:	4650      	mov	r0, sl
   2178a:	9e01      	ldr	r6, [sp, #4]
   2178c:	47b0      	blx	r6
   2178e:	f8d8 3000 	ldr.w	r3, [r8]
   21792:	6821      	ldr	r1, [r4, #0]
   21794:	1d1a      	adds	r2, r3, #4
   21796:	f011 0f20 	tst.w	r1, #32
   2179a:	f8c8 2000 	str.w	r2, [r8]
   2179e:	681b      	ldr	r3, [r3, #0]
   217a0:	d00f      	beq.n	217c2 <_scanf_i+0x1c6>
   217a2:	6018      	str	r0, [r3, #0]
   217a4:	68e3      	ldr	r3, [r4, #12]
   217a6:	3301      	adds	r3, #1
   217a8:	60e3      	str	r3, [r4, #12]
   217aa:	1bed      	subs	r5, r5, r7
   217ac:	2000      	movs	r0, #0
   217ae:	44ab      	add	fp, r5
   217b0:	6925      	ldr	r5, [r4, #16]
   217b2:	445d      	add	r5, fp
   217b4:	6125      	str	r5, [r4, #16]
   217b6:	b007      	add	sp, #28
   217b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217bc:	f04f 0b00 	mov.w	fp, #0
   217c0:	e7ca      	b.n	21758 <_scanf_i+0x15c>
   217c2:	07ca      	lsls	r2, r1, #31
   217c4:	bf4c      	ite	mi
   217c6:	8018      	strhmi	r0, [r3, #0]
   217c8:	6018      	strpl	r0, [r3, #0]
   217ca:	e7eb      	b.n	217a4 <_scanf_i+0x1a8>
   217cc:	2001      	movs	r0, #1
   217ce:	e7f2      	b.n	217b6 <_scanf_i+0x1ba>
   217d0:	000287e0 	.word	0x000287e0
   217d4:	00027dc9 	.word	0x00027dc9
   217d8:	00027dc5 	.word	0x00027dc5
   217dc:	00029a81 	.word	0x00029a81

000217e0 <_read_r>:
   217e0:	b538      	push	{r3, r4, r5, lr}
   217e2:	4604      	mov	r4, r0
   217e4:	4d06      	ldr	r5, [pc, #24]	; (21800 <_read_r+0x20>)
   217e6:	4608      	mov	r0, r1
   217e8:	4611      	mov	r1, r2
   217ea:	2200      	movs	r2, #0
   217ec:	602a      	str	r2, [r5, #0]
   217ee:	461a      	mov	r2, r3
   217f0:	f001 fbc0 	bl	22f74 <_read>
   217f4:	1c43      	adds	r3, r0, #1
   217f6:	d102      	bne.n	217fe <_read_r+0x1e>
   217f8:	682b      	ldr	r3, [r5, #0]
   217fa:	b103      	cbz	r3, 217fe <_read_r+0x1e>
   217fc:	6023      	str	r3, [r4, #0]
   217fe:	bd38      	pop	{r3, r4, r5, pc}
   21800:	2002b0b4 	.word	0x2002b0b4

00021804 <raise>:
   21804:	4b02      	ldr	r3, [pc, #8]	; (21810 <raise+0xc>)
   21806:	4601      	mov	r1, r0
   21808:	6818      	ldr	r0, [r3, #0]
   2180a:	f006 bd84 	b.w	28316 <_raise_r>
   2180e:	bf00      	nop
   21810:	200205d0 	.word	0x200205d0

00021814 <_kill_r>:
   21814:	b538      	push	{r3, r4, r5, lr}
   21816:	2300      	movs	r3, #0
   21818:	4d06      	ldr	r5, [pc, #24]	; (21834 <_kill_r+0x20>)
   2181a:	4604      	mov	r4, r0
   2181c:	4608      	mov	r0, r1
   2181e:	4611      	mov	r1, r2
   21820:	602b      	str	r3, [r5, #0]
   21822:	f001 fbb6 	bl	22f92 <_kill>
   21826:	1c43      	adds	r3, r0, #1
   21828:	d102      	bne.n	21830 <_kill_r+0x1c>
   2182a:	682b      	ldr	r3, [r5, #0]
   2182c:	b103      	cbz	r3, 21830 <_kill_r+0x1c>
   2182e:	6023      	str	r3, [r4, #0]
   21830:	bd38      	pop	{r3, r4, r5, pc}
   21832:	bf00      	nop
   21834:	2002b0b4 	.word	0x2002b0b4

00021838 <__swbuf_r>:
   21838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2183a:	460e      	mov	r6, r1
   2183c:	4614      	mov	r4, r2
   2183e:	4605      	mov	r5, r0
   21840:	b118      	cbz	r0, 2184a <__swbuf_r+0x12>
   21842:	6983      	ldr	r3, [r0, #24]
   21844:	b90b      	cbnz	r3, 2184a <__swbuf_r+0x12>
   21846:	f000 f9c5 	bl	21bd4 <__sinit>
   2184a:	4b21      	ldr	r3, [pc, #132]	; (218d0 <__swbuf_r+0x98>)
   2184c:	429c      	cmp	r4, r3
   2184e:	d12b      	bne.n	218a8 <__swbuf_r+0x70>
   21850:	686c      	ldr	r4, [r5, #4]
   21852:	69a3      	ldr	r3, [r4, #24]
   21854:	60a3      	str	r3, [r4, #8]
   21856:	89a3      	ldrh	r3, [r4, #12]
   21858:	071a      	lsls	r2, r3, #28
   2185a:	d52f      	bpl.n	218bc <__swbuf_r+0x84>
   2185c:	6923      	ldr	r3, [r4, #16]
   2185e:	b36b      	cbz	r3, 218bc <__swbuf_r+0x84>
   21860:	6923      	ldr	r3, [r4, #16]
   21862:	b2f6      	uxtb	r6, r6
   21864:	6820      	ldr	r0, [r4, #0]
   21866:	4637      	mov	r7, r6
   21868:	1ac0      	subs	r0, r0, r3
   2186a:	6963      	ldr	r3, [r4, #20]
   2186c:	4283      	cmp	r3, r0
   2186e:	dc04      	bgt.n	2187a <__swbuf_r+0x42>
   21870:	4621      	mov	r1, r4
   21872:	4628      	mov	r0, r5
   21874:	f000 f930 	bl	21ad8 <_fflush_r>
   21878:	bb30      	cbnz	r0, 218c8 <__swbuf_r+0x90>
   2187a:	68a3      	ldr	r3, [r4, #8]
   2187c:	3001      	adds	r0, #1
   2187e:	3b01      	subs	r3, #1
   21880:	60a3      	str	r3, [r4, #8]
   21882:	6823      	ldr	r3, [r4, #0]
   21884:	1c5a      	adds	r2, r3, #1
   21886:	6022      	str	r2, [r4, #0]
   21888:	701e      	strb	r6, [r3, #0]
   2188a:	6963      	ldr	r3, [r4, #20]
   2188c:	4283      	cmp	r3, r0
   2188e:	d004      	beq.n	2189a <__swbuf_r+0x62>
   21890:	89a3      	ldrh	r3, [r4, #12]
   21892:	07db      	lsls	r3, r3, #31
   21894:	d506      	bpl.n	218a4 <__swbuf_r+0x6c>
   21896:	2e0a      	cmp	r6, #10
   21898:	d104      	bne.n	218a4 <__swbuf_r+0x6c>
   2189a:	4621      	mov	r1, r4
   2189c:	4628      	mov	r0, r5
   2189e:	f000 f91b 	bl	21ad8 <_fflush_r>
   218a2:	b988      	cbnz	r0, 218c8 <__swbuf_r+0x90>
   218a4:	4638      	mov	r0, r7
   218a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   218a8:	4b0a      	ldr	r3, [pc, #40]	; (218d4 <__swbuf_r+0x9c>)
   218aa:	429c      	cmp	r4, r3
   218ac:	d101      	bne.n	218b2 <__swbuf_r+0x7a>
   218ae:	68ac      	ldr	r4, [r5, #8]
   218b0:	e7cf      	b.n	21852 <__swbuf_r+0x1a>
   218b2:	4b09      	ldr	r3, [pc, #36]	; (218d8 <__swbuf_r+0xa0>)
   218b4:	429c      	cmp	r4, r3
   218b6:	bf08      	it	eq
   218b8:	68ec      	ldreq	r4, [r5, #12]
   218ba:	e7ca      	b.n	21852 <__swbuf_r+0x1a>
   218bc:	4621      	mov	r1, r4
   218be:	4628      	mov	r0, r5
   218c0:	f000 f80c 	bl	218dc <__swsetup_r>
   218c4:	2800      	cmp	r0, #0
   218c6:	d0cb      	beq.n	21860 <__swbuf_r+0x28>
   218c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   218cc:	e7ea      	b.n	218a4 <__swbuf_r+0x6c>
   218ce:	bf00      	nop
   218d0:	00029094 	.word	0x00029094
   218d4:	000290b4 	.word	0x000290b4
   218d8:	00029074 	.word	0x00029074

000218dc <__swsetup_r>:
   218dc:	4b32      	ldr	r3, [pc, #200]	; (219a8 <__swsetup_r+0xcc>)
   218de:	b570      	push	{r4, r5, r6, lr}
   218e0:	681d      	ldr	r5, [r3, #0]
   218e2:	4606      	mov	r6, r0
   218e4:	460c      	mov	r4, r1
   218e6:	b125      	cbz	r5, 218f2 <__swsetup_r+0x16>
   218e8:	69ab      	ldr	r3, [r5, #24]
   218ea:	b913      	cbnz	r3, 218f2 <__swsetup_r+0x16>
   218ec:	4628      	mov	r0, r5
   218ee:	f000 f971 	bl	21bd4 <__sinit>
   218f2:	4b2e      	ldr	r3, [pc, #184]	; (219ac <__swsetup_r+0xd0>)
   218f4:	429c      	cmp	r4, r3
   218f6:	d10f      	bne.n	21918 <__swsetup_r+0x3c>
   218f8:	686c      	ldr	r4, [r5, #4]
   218fa:	89a3      	ldrh	r3, [r4, #12]
   218fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   21900:	0719      	lsls	r1, r3, #28
   21902:	d42c      	bmi.n	2195e <__swsetup_r+0x82>
   21904:	06dd      	lsls	r5, r3, #27
   21906:	d411      	bmi.n	2192c <__swsetup_r+0x50>
   21908:	2309      	movs	r3, #9
   2190a:	6033      	str	r3, [r6, #0]
   2190c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   21910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21914:	81a3      	strh	r3, [r4, #12]
   21916:	e03e      	b.n	21996 <__swsetup_r+0xba>
   21918:	4b25      	ldr	r3, [pc, #148]	; (219b0 <__swsetup_r+0xd4>)
   2191a:	429c      	cmp	r4, r3
   2191c:	d101      	bne.n	21922 <__swsetup_r+0x46>
   2191e:	68ac      	ldr	r4, [r5, #8]
   21920:	e7eb      	b.n	218fa <__swsetup_r+0x1e>
   21922:	4b24      	ldr	r3, [pc, #144]	; (219b4 <__swsetup_r+0xd8>)
   21924:	429c      	cmp	r4, r3
   21926:	bf08      	it	eq
   21928:	68ec      	ldreq	r4, [r5, #12]
   2192a:	e7e6      	b.n	218fa <__swsetup_r+0x1e>
   2192c:	0758      	lsls	r0, r3, #29
   2192e:	d512      	bpl.n	21956 <__swsetup_r+0x7a>
   21930:	6b61      	ldr	r1, [r4, #52]	; 0x34
   21932:	b141      	cbz	r1, 21946 <__swsetup_r+0x6a>
   21934:	f104 0344 	add.w	r3, r4, #68	; 0x44
   21938:	4299      	cmp	r1, r3
   2193a:	d002      	beq.n	21942 <__swsetup_r+0x66>
   2193c:	4630      	mov	r0, r6
   2193e:	f7fd fe37 	bl	1f5b0 <_free_r>
   21942:	2300      	movs	r3, #0
   21944:	6363      	str	r3, [r4, #52]	; 0x34
   21946:	89a3      	ldrh	r3, [r4, #12]
   21948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2194c:	81a3      	strh	r3, [r4, #12]
   2194e:	2300      	movs	r3, #0
   21950:	6063      	str	r3, [r4, #4]
   21952:	6923      	ldr	r3, [r4, #16]
   21954:	6023      	str	r3, [r4, #0]
   21956:	89a3      	ldrh	r3, [r4, #12]
   21958:	f043 0308 	orr.w	r3, r3, #8
   2195c:	81a3      	strh	r3, [r4, #12]
   2195e:	6923      	ldr	r3, [r4, #16]
   21960:	b94b      	cbnz	r3, 21976 <__swsetup_r+0x9a>
   21962:	89a3      	ldrh	r3, [r4, #12]
   21964:	f403 7320 	and.w	r3, r3, #640	; 0x280
   21968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2196c:	d003      	beq.n	21976 <__swsetup_r+0x9a>
   2196e:	4621      	mov	r1, r4
   21970:	4630      	mov	r0, r6
   21972:	f000 f9ad 	bl	21cd0 <__smakebuf_r>
   21976:	89a0      	ldrh	r0, [r4, #12]
   21978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2197c:	f010 0301 	ands.w	r3, r0, #1
   21980:	d00a      	beq.n	21998 <__swsetup_r+0xbc>
   21982:	2300      	movs	r3, #0
   21984:	60a3      	str	r3, [r4, #8]
   21986:	6963      	ldr	r3, [r4, #20]
   21988:	425b      	negs	r3, r3
   2198a:	61a3      	str	r3, [r4, #24]
   2198c:	6923      	ldr	r3, [r4, #16]
   2198e:	b943      	cbnz	r3, 219a2 <__swsetup_r+0xc6>
   21990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   21994:	d1ba      	bne.n	2190c <__swsetup_r+0x30>
   21996:	bd70      	pop	{r4, r5, r6, pc}
   21998:	0781      	lsls	r1, r0, #30
   2199a:	bf58      	it	pl
   2199c:	6963      	ldrpl	r3, [r4, #20]
   2199e:	60a3      	str	r3, [r4, #8]
   219a0:	e7f4      	b.n	2198c <__swsetup_r+0xb0>
   219a2:	2000      	movs	r0, #0
   219a4:	e7f7      	b.n	21996 <__swsetup_r+0xba>
   219a6:	bf00      	nop
   219a8:	200205d0 	.word	0x200205d0
   219ac:	00029094 	.word	0x00029094
   219b0:	000290b4 	.word	0x000290b4
   219b4:	00029074 	.word	0x00029074

000219b8 <__env_lock>:
   219b8:	4801      	ldr	r0, [pc, #4]	; (219c0 <__env_lock+0x8>)
   219ba:	f006 badf 	b.w	27f7c <__retarget_lock_acquire_recursive>
   219be:	bf00      	nop
   219c0:	2002b0ba 	.word	0x2002b0ba

000219c4 <__env_unlock>:
   219c4:	4801      	ldr	r0, [pc, #4]	; (219cc <__env_unlock+0x8>)
   219c6:	f006 badb 	b.w	27f80 <__retarget_lock_release_recursive>
   219ca:	bf00      	nop
   219cc:	2002b0ba 	.word	0x2002b0ba

000219d0 <__sflush_r>:
   219d0:	898a      	ldrh	r2, [r1, #12]
   219d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   219d6:	4605      	mov	r5, r0
   219d8:	0710      	lsls	r0, r2, #28
   219da:	460c      	mov	r4, r1
   219dc:	d458      	bmi.n	21a90 <__sflush_r+0xc0>
   219de:	684b      	ldr	r3, [r1, #4]
   219e0:	2b00      	cmp	r3, #0
   219e2:	dc05      	bgt.n	219f0 <__sflush_r+0x20>
   219e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   219e6:	2b00      	cmp	r3, #0
   219e8:	dc02      	bgt.n	219f0 <__sflush_r+0x20>
   219ea:	2000      	movs	r0, #0
   219ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   219f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   219f2:	2e00      	cmp	r6, #0
   219f4:	d0f9      	beq.n	219ea <__sflush_r+0x1a>
   219f6:	2300      	movs	r3, #0
   219f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   219fc:	682f      	ldr	r7, [r5, #0]
   219fe:	602b      	str	r3, [r5, #0]
   21a00:	d032      	beq.n	21a68 <__sflush_r+0x98>
   21a02:	6d60      	ldr	r0, [r4, #84]	; 0x54
   21a04:	89a3      	ldrh	r3, [r4, #12]
   21a06:	075a      	lsls	r2, r3, #29
   21a08:	d505      	bpl.n	21a16 <__sflush_r+0x46>
   21a0a:	6863      	ldr	r3, [r4, #4]
   21a0c:	1ac0      	subs	r0, r0, r3
   21a0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   21a10:	b10b      	cbz	r3, 21a16 <__sflush_r+0x46>
   21a12:	6c23      	ldr	r3, [r4, #64]	; 0x40
   21a14:	1ac0      	subs	r0, r0, r3
   21a16:	2300      	movs	r3, #0
   21a18:	4602      	mov	r2, r0
   21a1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   21a1c:	4628      	mov	r0, r5
   21a1e:	6a21      	ldr	r1, [r4, #32]
   21a20:	47b0      	blx	r6
   21a22:	1c43      	adds	r3, r0, #1
   21a24:	89a3      	ldrh	r3, [r4, #12]
   21a26:	d106      	bne.n	21a36 <__sflush_r+0x66>
   21a28:	6829      	ldr	r1, [r5, #0]
   21a2a:	291d      	cmp	r1, #29
   21a2c:	d82c      	bhi.n	21a88 <__sflush_r+0xb8>
   21a2e:	4a29      	ldr	r2, [pc, #164]	; (21ad4 <__sflush_r+0x104>)
   21a30:	40ca      	lsrs	r2, r1
   21a32:	07d6      	lsls	r6, r2, #31
   21a34:	d528      	bpl.n	21a88 <__sflush_r+0xb8>
   21a36:	2200      	movs	r2, #0
   21a38:	04d9      	lsls	r1, r3, #19
   21a3a:	6062      	str	r2, [r4, #4]
   21a3c:	6922      	ldr	r2, [r4, #16]
   21a3e:	6022      	str	r2, [r4, #0]
   21a40:	d504      	bpl.n	21a4c <__sflush_r+0x7c>
   21a42:	1c42      	adds	r2, r0, #1
   21a44:	d101      	bne.n	21a4a <__sflush_r+0x7a>
   21a46:	682b      	ldr	r3, [r5, #0]
   21a48:	b903      	cbnz	r3, 21a4c <__sflush_r+0x7c>
   21a4a:	6560      	str	r0, [r4, #84]	; 0x54
   21a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   21a4e:	602f      	str	r7, [r5, #0]
   21a50:	2900      	cmp	r1, #0
   21a52:	d0ca      	beq.n	219ea <__sflush_r+0x1a>
   21a54:	f104 0344 	add.w	r3, r4, #68	; 0x44
   21a58:	4299      	cmp	r1, r3
   21a5a:	d002      	beq.n	21a62 <__sflush_r+0x92>
   21a5c:	4628      	mov	r0, r5
   21a5e:	f7fd fda7 	bl	1f5b0 <_free_r>
   21a62:	2000      	movs	r0, #0
   21a64:	6360      	str	r0, [r4, #52]	; 0x34
   21a66:	e7c1      	b.n	219ec <__sflush_r+0x1c>
   21a68:	6a21      	ldr	r1, [r4, #32]
   21a6a:	2301      	movs	r3, #1
   21a6c:	4628      	mov	r0, r5
   21a6e:	47b0      	blx	r6
   21a70:	1c41      	adds	r1, r0, #1
   21a72:	d1c7      	bne.n	21a04 <__sflush_r+0x34>
   21a74:	682b      	ldr	r3, [r5, #0]
   21a76:	2b00      	cmp	r3, #0
   21a78:	d0c4      	beq.n	21a04 <__sflush_r+0x34>
   21a7a:	2b1d      	cmp	r3, #29
   21a7c:	d001      	beq.n	21a82 <__sflush_r+0xb2>
   21a7e:	2b16      	cmp	r3, #22
   21a80:	d101      	bne.n	21a86 <__sflush_r+0xb6>
   21a82:	602f      	str	r7, [r5, #0]
   21a84:	e7b1      	b.n	219ea <__sflush_r+0x1a>
   21a86:	89a3      	ldrh	r3, [r4, #12]
   21a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21a8c:	81a3      	strh	r3, [r4, #12]
   21a8e:	e7ad      	b.n	219ec <__sflush_r+0x1c>
   21a90:	690f      	ldr	r7, [r1, #16]
   21a92:	2f00      	cmp	r7, #0
   21a94:	d0a9      	beq.n	219ea <__sflush_r+0x1a>
   21a96:	0793      	lsls	r3, r2, #30
   21a98:	680e      	ldr	r6, [r1, #0]
   21a9a:	600f      	str	r7, [r1, #0]
   21a9c:	bf0c      	ite	eq
   21a9e:	694b      	ldreq	r3, [r1, #20]
   21aa0:	2300      	movne	r3, #0
   21aa2:	eba6 0807 	sub.w	r8, r6, r7
   21aa6:	608b      	str	r3, [r1, #8]
   21aa8:	f1b8 0f00 	cmp.w	r8, #0
   21aac:	dd9d      	ble.n	219ea <__sflush_r+0x1a>
   21aae:	4643      	mov	r3, r8
   21ab0:	463a      	mov	r2, r7
   21ab2:	6a21      	ldr	r1, [r4, #32]
   21ab4:	4628      	mov	r0, r5
   21ab6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   21ab8:	47b0      	blx	r6
   21aba:	2800      	cmp	r0, #0
   21abc:	dc06      	bgt.n	21acc <__sflush_r+0xfc>
   21abe:	89a3      	ldrh	r3, [r4, #12]
   21ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21ac8:	81a3      	strh	r3, [r4, #12]
   21aca:	e78f      	b.n	219ec <__sflush_r+0x1c>
   21acc:	4407      	add	r7, r0
   21ace:	eba8 0800 	sub.w	r8, r8, r0
   21ad2:	e7e9      	b.n	21aa8 <__sflush_r+0xd8>
   21ad4:	20400001 	.word	0x20400001

00021ad8 <_fflush_r>:
   21ad8:	b538      	push	{r3, r4, r5, lr}
   21ada:	690b      	ldr	r3, [r1, #16]
   21adc:	4605      	mov	r5, r0
   21ade:	460c      	mov	r4, r1
   21ae0:	b913      	cbnz	r3, 21ae8 <_fflush_r+0x10>
   21ae2:	2500      	movs	r5, #0
   21ae4:	4628      	mov	r0, r5
   21ae6:	bd38      	pop	{r3, r4, r5, pc}
   21ae8:	b118      	cbz	r0, 21af2 <_fflush_r+0x1a>
   21aea:	6983      	ldr	r3, [r0, #24]
   21aec:	b90b      	cbnz	r3, 21af2 <_fflush_r+0x1a>
   21aee:	f000 f871 	bl	21bd4 <__sinit>
   21af2:	4b14      	ldr	r3, [pc, #80]	; (21b44 <_fflush_r+0x6c>)
   21af4:	429c      	cmp	r4, r3
   21af6:	d11b      	bne.n	21b30 <_fflush_r+0x58>
   21af8:	686c      	ldr	r4, [r5, #4]
   21afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21afe:	2b00      	cmp	r3, #0
   21b00:	d0ef      	beq.n	21ae2 <_fflush_r+0xa>
   21b02:	6e62      	ldr	r2, [r4, #100]	; 0x64
   21b04:	07d0      	lsls	r0, r2, #31
   21b06:	d404      	bmi.n	21b12 <_fflush_r+0x3a>
   21b08:	0599      	lsls	r1, r3, #22
   21b0a:	d402      	bmi.n	21b12 <_fflush_r+0x3a>
   21b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   21b0e:	f006 fa35 	bl	27f7c <__retarget_lock_acquire_recursive>
   21b12:	4628      	mov	r0, r5
   21b14:	4621      	mov	r1, r4
   21b16:	f7ff ff5b 	bl	219d0 <__sflush_r>
   21b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   21b1c:	4605      	mov	r5, r0
   21b1e:	07da      	lsls	r2, r3, #31
   21b20:	d4e0      	bmi.n	21ae4 <_fflush_r+0xc>
   21b22:	89a3      	ldrh	r3, [r4, #12]
   21b24:	059b      	lsls	r3, r3, #22
   21b26:	d4dd      	bmi.n	21ae4 <_fflush_r+0xc>
   21b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
   21b2a:	f006 fa29 	bl	27f80 <__retarget_lock_release_recursive>
   21b2e:	e7d9      	b.n	21ae4 <_fflush_r+0xc>
   21b30:	4b05      	ldr	r3, [pc, #20]	; (21b48 <_fflush_r+0x70>)
   21b32:	429c      	cmp	r4, r3
   21b34:	d101      	bne.n	21b3a <_fflush_r+0x62>
   21b36:	68ac      	ldr	r4, [r5, #8]
   21b38:	e7df      	b.n	21afa <_fflush_r+0x22>
   21b3a:	4b04      	ldr	r3, [pc, #16]	; (21b4c <_fflush_r+0x74>)
   21b3c:	429c      	cmp	r4, r3
   21b3e:	bf08      	it	eq
   21b40:	68ec      	ldreq	r4, [r5, #12]
   21b42:	e7da      	b.n	21afa <_fflush_r+0x22>
   21b44:	00029094 	.word	0x00029094
   21b48:	000290b4 	.word	0x000290b4
   21b4c:	00029074 	.word	0x00029074

00021b50 <std>:
   21b50:	2300      	movs	r3, #0
   21b52:	b510      	push	{r4, lr}
   21b54:	4604      	mov	r4, r0
   21b56:	6083      	str	r3, [r0, #8]
   21b58:	8181      	strh	r1, [r0, #12]
   21b5a:	4619      	mov	r1, r3
   21b5c:	6643      	str	r3, [r0, #100]	; 0x64
   21b5e:	81c2      	strh	r2, [r0, #14]
   21b60:	2208      	movs	r2, #8
   21b62:	6183      	str	r3, [r0, #24]
   21b64:	e9c0 3300 	strd	r3, r3, [r0]
   21b68:	e9c0 3304 	strd	r3, r3, [r0, #16]
   21b6c:	305c      	adds	r0, #92	; 0x5c
   21b6e:	f005 ff24 	bl	279ba <memset>
   21b72:	4b05      	ldr	r3, [pc, #20]	; (21b88 <std+0x38>)
   21b74:	6224      	str	r4, [r4, #32]
   21b76:	6263      	str	r3, [r4, #36]	; 0x24
   21b78:	4b04      	ldr	r3, [pc, #16]	; (21b8c <std+0x3c>)
   21b7a:	62a3      	str	r3, [r4, #40]	; 0x28
   21b7c:	4b04      	ldr	r3, [pc, #16]	; (21b90 <std+0x40>)
   21b7e:	62e3      	str	r3, [r4, #44]	; 0x2c
   21b80:	4b04      	ldr	r3, [pc, #16]	; (21b94 <std+0x44>)
   21b82:	6323      	str	r3, [r4, #48]	; 0x30
   21b84:	bd10      	pop	{r4, pc}
   21b86:	bf00      	nop
   21b88:	00027c1f 	.word	0x00027c1f
   21b8c:	00027c45 	.word	0x00027c45
   21b90:	00027c7d 	.word	0x00027c7d
   21b94:	00027ca1 	.word	0x00027ca1

00021b98 <_cleanup_r>:
   21b98:	4901      	ldr	r1, [pc, #4]	; (21ba0 <_cleanup_r+0x8>)
   21b9a:	f006 bc47 	b.w	2842c <_fwalk_reent>
   21b9e:	bf00      	nop
   21ba0:	00021ad9 	.word	0x00021ad9

00021ba4 <__sfp_lock_acquire>:
   21ba4:	4801      	ldr	r0, [pc, #4]	; (21bac <__sfp_lock_acquire+0x8>)
   21ba6:	f006 b9e9 	b.w	27f7c <__retarget_lock_acquire_recursive>
   21baa:	bf00      	nop
   21bac:	2002b0c0 	.word	0x2002b0c0

00021bb0 <__sfp_lock_release>:
   21bb0:	4801      	ldr	r0, [pc, #4]	; (21bb8 <__sfp_lock_release+0x8>)
   21bb2:	f006 b9e5 	b.w	27f80 <__retarget_lock_release_recursive>
   21bb6:	bf00      	nop
   21bb8:	2002b0c0 	.word	0x2002b0c0

00021bbc <__sinit_lock_acquire>:
   21bbc:	4801      	ldr	r0, [pc, #4]	; (21bc4 <__sinit_lock_acquire+0x8>)
   21bbe:	f006 b9dd 	b.w	27f7c <__retarget_lock_acquire_recursive>
   21bc2:	bf00      	nop
   21bc4:	2002b0bb 	.word	0x2002b0bb

00021bc8 <__sinit_lock_release>:
   21bc8:	4801      	ldr	r0, [pc, #4]	; (21bd0 <__sinit_lock_release+0x8>)
   21bca:	f006 b9d9 	b.w	27f80 <__retarget_lock_release_recursive>
   21bce:	bf00      	nop
   21bd0:	2002b0bb 	.word	0x2002b0bb

00021bd4 <__sinit>:
   21bd4:	b510      	push	{r4, lr}
   21bd6:	4604      	mov	r4, r0
   21bd8:	f7ff fff0 	bl	21bbc <__sinit_lock_acquire>
   21bdc:	69a3      	ldr	r3, [r4, #24]
   21bde:	b11b      	cbz	r3, 21be8 <__sinit+0x14>
   21be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21be4:	f7ff bff0 	b.w	21bc8 <__sinit_lock_release>
   21be8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   21bec:	6523      	str	r3, [r4, #80]	; 0x50
   21bee:	4620      	mov	r0, r4
   21bf0:	4b12      	ldr	r3, [pc, #72]	; (21c3c <__sinit+0x68>)
   21bf2:	4a13      	ldr	r2, [pc, #76]	; (21c40 <__sinit+0x6c>)
   21bf4:	681b      	ldr	r3, [r3, #0]
   21bf6:	62a2      	str	r2, [r4, #40]	; 0x28
   21bf8:	42a3      	cmp	r3, r4
   21bfa:	bf04      	itt	eq
   21bfc:	2301      	moveq	r3, #1
   21bfe:	61a3      	streq	r3, [r4, #24]
   21c00:	f000 f820 	bl	21c44 <__sfp>
   21c04:	6060      	str	r0, [r4, #4]
   21c06:	4620      	mov	r0, r4
   21c08:	f000 f81c 	bl	21c44 <__sfp>
   21c0c:	60a0      	str	r0, [r4, #8]
   21c0e:	4620      	mov	r0, r4
   21c10:	f000 f818 	bl	21c44 <__sfp>
   21c14:	2200      	movs	r2, #0
   21c16:	2104      	movs	r1, #4
   21c18:	60e0      	str	r0, [r4, #12]
   21c1a:	6860      	ldr	r0, [r4, #4]
   21c1c:	f7ff ff98 	bl	21b50 <std>
   21c20:	2201      	movs	r2, #1
   21c22:	2109      	movs	r1, #9
   21c24:	68a0      	ldr	r0, [r4, #8]
   21c26:	f7ff ff93 	bl	21b50 <std>
   21c2a:	2202      	movs	r2, #2
   21c2c:	2112      	movs	r1, #18
   21c2e:	68e0      	ldr	r0, [r4, #12]
   21c30:	f7ff ff8e 	bl	21b50 <std>
   21c34:	2301      	movs	r3, #1
   21c36:	61a3      	str	r3, [r4, #24]
   21c38:	e7d2      	b.n	21be0 <__sinit+0xc>
   21c3a:	bf00      	nop
   21c3c:	00029004 	.word	0x00029004
   21c40:	00021b99 	.word	0x00021b99

00021c44 <__sfp>:
   21c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21c46:	4607      	mov	r7, r0
   21c48:	f7ff ffac 	bl	21ba4 <__sfp_lock_acquire>
   21c4c:	4b1e      	ldr	r3, [pc, #120]	; (21cc8 <__sfp+0x84>)
   21c4e:	681e      	ldr	r6, [r3, #0]
   21c50:	69b3      	ldr	r3, [r6, #24]
   21c52:	b913      	cbnz	r3, 21c5a <__sfp+0x16>
   21c54:	4630      	mov	r0, r6
   21c56:	f7ff ffbd 	bl	21bd4 <__sinit>
   21c5a:	3648      	adds	r6, #72	; 0x48
   21c5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   21c60:	3b01      	subs	r3, #1
   21c62:	d503      	bpl.n	21c6c <__sfp+0x28>
   21c64:	6833      	ldr	r3, [r6, #0]
   21c66:	b30b      	cbz	r3, 21cac <__sfp+0x68>
   21c68:	6836      	ldr	r6, [r6, #0]
   21c6a:	e7f7      	b.n	21c5c <__sfp+0x18>
   21c6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   21c70:	b9d5      	cbnz	r5, 21ca8 <__sfp+0x64>
   21c72:	4b16      	ldr	r3, [pc, #88]	; (21ccc <__sfp+0x88>)
   21c74:	f104 0058 	add.w	r0, r4, #88	; 0x58
   21c78:	6665      	str	r5, [r4, #100]	; 0x64
   21c7a:	60e3      	str	r3, [r4, #12]
   21c7c:	f006 f97c 	bl	27f78 <__retarget_lock_init_recursive>
   21c80:	f7ff ff96 	bl	21bb0 <__sfp_lock_release>
   21c84:	2208      	movs	r2, #8
   21c86:	4629      	mov	r1, r5
   21c88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   21c8c:	6025      	str	r5, [r4, #0]
   21c8e:	61a5      	str	r5, [r4, #24]
   21c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
   21c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
   21c98:	f005 fe8f 	bl	279ba <memset>
   21c9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   21ca0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   21ca4:	4620      	mov	r0, r4
   21ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21ca8:	3468      	adds	r4, #104	; 0x68
   21caa:	e7d9      	b.n	21c60 <__sfp+0x1c>
   21cac:	2104      	movs	r1, #4
   21cae:	4638      	mov	r0, r7
   21cb0:	f006 fba6 	bl	28400 <__sfmoreglue>
   21cb4:	4604      	mov	r4, r0
   21cb6:	6030      	str	r0, [r6, #0]
   21cb8:	2800      	cmp	r0, #0
   21cba:	d1d5      	bne.n	21c68 <__sfp+0x24>
   21cbc:	f7ff ff78 	bl	21bb0 <__sfp_lock_release>
   21cc0:	230c      	movs	r3, #12
   21cc2:	603b      	str	r3, [r7, #0]
   21cc4:	e7ee      	b.n	21ca4 <__sfp+0x60>
   21cc6:	bf00      	nop
   21cc8:	00029004 	.word	0x00029004
   21ccc:	ffff0001 	.word	0xffff0001

00021cd0 <__smakebuf_r>:
   21cd0:	898b      	ldrh	r3, [r1, #12]
   21cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21cd4:	079d      	lsls	r5, r3, #30
   21cd6:	4606      	mov	r6, r0
   21cd8:	460c      	mov	r4, r1
   21cda:	d507      	bpl.n	21cec <__smakebuf_r+0x1c>
   21cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
   21ce0:	6023      	str	r3, [r4, #0]
   21ce2:	6123      	str	r3, [r4, #16]
   21ce4:	2301      	movs	r3, #1
   21ce6:	6163      	str	r3, [r4, #20]
   21ce8:	b002      	add	sp, #8
   21cea:	bd70      	pop	{r4, r5, r6, pc}
   21cec:	ab01      	add	r3, sp, #4
   21cee:	466a      	mov	r2, sp
   21cf0:	f006 fbbb 	bl	2846a <__swhatbuf_r>
   21cf4:	9900      	ldr	r1, [sp, #0]
   21cf6:	4605      	mov	r5, r0
   21cf8:	4630      	mov	r0, r6
   21cfa:	f7fd fca9 	bl	1f650 <_malloc_r>
   21cfe:	b948      	cbnz	r0, 21d14 <__smakebuf_r+0x44>
   21d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21d04:	059a      	lsls	r2, r3, #22
   21d06:	d4ef      	bmi.n	21ce8 <__smakebuf_r+0x18>
   21d08:	f023 0303 	bic.w	r3, r3, #3
   21d0c:	f043 0302 	orr.w	r3, r3, #2
   21d10:	81a3      	strh	r3, [r4, #12]
   21d12:	e7e3      	b.n	21cdc <__smakebuf_r+0xc>
   21d14:	4b0d      	ldr	r3, [pc, #52]	; (21d4c <__smakebuf_r+0x7c>)
   21d16:	62b3      	str	r3, [r6, #40]	; 0x28
   21d18:	89a3      	ldrh	r3, [r4, #12]
   21d1a:	6020      	str	r0, [r4, #0]
   21d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21d20:	6120      	str	r0, [r4, #16]
   21d22:	81a3      	strh	r3, [r4, #12]
   21d24:	9b00      	ldr	r3, [sp, #0]
   21d26:	6163      	str	r3, [r4, #20]
   21d28:	9b01      	ldr	r3, [sp, #4]
   21d2a:	b15b      	cbz	r3, 21d44 <__smakebuf_r+0x74>
   21d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21d30:	4630      	mov	r0, r6
   21d32:	f000 f81f 	bl	21d74 <_isatty_r>
   21d36:	b128      	cbz	r0, 21d44 <__smakebuf_r+0x74>
   21d38:	89a3      	ldrh	r3, [r4, #12]
   21d3a:	f023 0303 	bic.w	r3, r3, #3
   21d3e:	f043 0301 	orr.w	r3, r3, #1
   21d42:	81a3      	strh	r3, [r4, #12]
   21d44:	89a0      	ldrh	r0, [r4, #12]
   21d46:	4305      	orrs	r5, r0
   21d48:	81a5      	strh	r5, [r4, #12]
   21d4a:	e7cd      	b.n	21ce8 <__smakebuf_r+0x18>
   21d4c:	00021b99 	.word	0x00021b99

00021d50 <_fstat_r>:
   21d50:	b538      	push	{r3, r4, r5, lr}
   21d52:	2300      	movs	r3, #0
   21d54:	4d06      	ldr	r5, [pc, #24]	; (21d70 <_fstat_r+0x20>)
   21d56:	4604      	mov	r4, r0
   21d58:	4608      	mov	r0, r1
   21d5a:	4611      	mov	r1, r2
   21d5c:	602b      	str	r3, [r5, #0]
   21d5e:	f001 f91c 	bl	22f9a <_fstat>
   21d62:	1c43      	adds	r3, r0, #1
   21d64:	d102      	bne.n	21d6c <_fstat_r+0x1c>
   21d66:	682b      	ldr	r3, [r5, #0]
   21d68:	b103      	cbz	r3, 21d6c <_fstat_r+0x1c>
   21d6a:	6023      	str	r3, [r4, #0]
   21d6c:	bd38      	pop	{r3, r4, r5, pc}
   21d6e:	bf00      	nop
   21d70:	2002b0b4 	.word	0x2002b0b4

00021d74 <_isatty_r>:
   21d74:	b538      	push	{r3, r4, r5, lr}
   21d76:	2300      	movs	r3, #0
   21d78:	4d05      	ldr	r5, [pc, #20]	; (21d90 <_isatty_r+0x1c>)
   21d7a:	4604      	mov	r4, r0
   21d7c:	4608      	mov	r0, r1
   21d7e:	602b      	str	r3, [r5, #0]
   21d80:	f001 f905 	bl	22f8e <_isatty>
   21d84:	1c43      	adds	r3, r0, #1
   21d86:	d102      	bne.n	21d8e <_isatty_r+0x1a>
   21d88:	682b      	ldr	r3, [r5, #0]
   21d8a:	b103      	cbz	r3, 21d8e <_isatty_r+0x1a>
   21d8c:	6023      	str	r3, [r4, #0]
   21d8e:	bd38      	pop	{r3, r4, r5, pc}
   21d90:	2002b0b4 	.word	0x2002b0b4

00021d94 <k_sleep>:
	return z_impl_k_sleep(timeout);
   21d94:	f7fc be2a 	b.w	1e9ec <z_impl_k_sleep>

00021d98 <k_sys_fatal_error_handler>:
{
   21d98:	4601      	mov	r1, r0
   21d9a:	b508      	push	{r3, lr}
	error_handler(ERROR_SYSTEM_FAULT, reason);
   21d9c:	2003      	movs	r0, #3
   21d9e:	f7ec f9b3 	bl	e108 <error_handler>

00021da2 <bsd_recoverable_error_handler>:
{
   21da2:	4601      	mov	r1, r0
	error_handler(ERROR_BSD_RECOVERABLE, (int)err);
   21da4:	2001      	movs	r0, #1
   21da6:	f7ec b9af 	b.w	e108 <error_handler>

00021daa <mac_address_bin_init>:
   21daa:	680b      	ldr	r3, [r1, #0]
   21dac:	6003      	str	r3, [r0, #0]
   21dae:	888b      	ldrh	r3, [r1, #4]
   21db0:	8083      	strh	r3, [r0, #4]
}
   21db2:	4770      	bx	lr

00021db4 <ruuvi_send_nrf_get_id>:
    api_send_get_device_id(RE_CA_UART_GET_DEVICE_ID);
   21db4:	2018      	movs	r0, #24
   21db6:	f000 b800 	b.w	21dba <api_send_get_device_id>

00021dba <api_send_get_device_id>:
    return (int8_t)res;
}

int8_t
api_send_get_device_id(uint32_t cmd)
{
   21dba:	b510      	push	{r4, lr}
   21dbc:	b0be      	sub	sp, #248	; 0xf8
   21dbe:	4604      	mov	r4, r0
    int8_t               res          = 0;
    re_ca_uart_payload_t uart_payload = { 0 };
   21dc0:	2228      	movs	r2, #40	; 0x28
   21dc2:	2100      	movs	r1, #0
   21dc4:	a801      	add	r0, sp, #4
   21dc6:	f005 fdf8 	bl	279ba <memset>
    uint8_t              data[BUFFER_PAYLOAD_SIZE];
    uint8_t              data_length;


    uart_payload.cmd = (re_ca_uart_cmd_t)cmd;
    data_length      = sizeof(data);
   21dca:	23cc      	movs	r3, #204	; 0xcc

    if (RE_SUCCESS != re_ca_uart_encode(data, &data_length, &uart_payload))
   21dcc:	aa01      	add	r2, sp, #4
   21dce:	f10d 0103 	add.w	r1, sp, #3
   21dd2:	a80b      	add	r0, sp, #44	; 0x2c
    uart_payload.cmd = (re_ca_uart_cmd_t)cmd;
   21dd4:	f88d 4004 	strb.w	r4, [sp, #4]
    data_length      = sizeof(data);
   21dd8:	f88d 3003 	strb.w	r3, [sp, #3]
    if (RE_SUCCESS != re_ca_uart_encode(data, &data_length, &uart_payload))
   21ddc:	f000 f94d 	bl	2207a <re_ca_uart_encode>
   21de0:	4604      	mov	r4, r0
   21de2:	b938      	cbnz	r0, 21df4 <api_send_get_device_id+0x3a>
    {
        res = (-1);
    }
    else
    {
        uart_driver_write(data, data_length);
   21de4:	a80b      	add	r0, sp, #44	; 0x2c
   21de6:	f89d 1003 	ldrb.w	r1, [sp, #3]
   21dea:	f7ec fd1f 	bl	e82c <uart_driver_write>
    int8_t               res          = 0;
   21dee:	4620      	mov	r0, r4
    }

    return (int8_t)res;
}
   21df0:	b03e      	add	sp, #248	; 0xf8
   21df2:	bd10      	pop	{r4, pc}
        res = (-1);
   21df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21df8:	e7fa      	b.n	21df0 <api_send_get_device_id+0x36>

00021dfa <gpio_pin_set>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   21dfa:	2301      	movs	r3, #1
   21dfc:	fa03 f101 	lsl.w	r1, r3, r1
   21e00:	68c3      	ldr	r3, [r0, #12]
   21e02:	681b      	ldr	r3, [r3, #0]
   21e04:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   21e06:	bf1c      	itt	ne
   21e08:	fab2 f282 	clzne	r2, r2
   21e0c:	0952      	lsrne	r2, r2, #5
	if (value != 0)	{
   21e0e:	b112      	cbz	r2, 21e16 <gpio_pin_set+0x1c>
	return api->port_set_bits_raw(port, pins);
   21e10:	6883      	ldr	r3, [r0, #8]
   21e12:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   21e14:	4718      	bx	r3
   21e16:	6883      	ldr	r3, [r0, #8]
   21e18:	691b      	ldr	r3, [r3, #16]
   21e1a:	e7fb      	b.n	21e14 <gpio_pin_set+0x1a>

00021e1c <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(struct device *port, gpio_pin_t pin,
   21e1c:	b538      	push	{r3, r4, r5, lr}
   21e1e:	460c      	mov	r4, r1
	struct gpio_driver_data *data =
   21e20:	68c5      	ldr	r5, [r0, #12]
	return api->pin_configure(port, pin, flags);
   21e22:	6883      	ldr	r3, [r0, #8]
   21e24:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
   21e28:	681b      	ldr	r3, [r3, #0]
   21e2a:	4798      	blx	r3
	if (ret != 0) {
   21e2c:	b930      	cbnz	r0, 21e3c <gpio_pin_configure.constprop.0+0x20>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   21e2e:	2201      	movs	r2, #1
   21e30:	682b      	ldr	r3, [r5, #0]
   21e32:	fa02 f104 	lsl.w	r1, r2, r4
   21e36:	ea23 0301 	bic.w	r3, r3, r1
   21e3a:	602b      	str	r3, [r5, #0]
}
   21e3c:	bd38      	pop	{r3, r4, r5, pc}

00021e3e <add_crc16>:
                                 const uint16_t * p_crc)
{
    uint32_t i;
    uint16_t crc = RE_CA_CRC_DEFAULT;

    if ( (p_data == NULL)
   21e3e:	1c42      	adds	r2, r0, #1
}

/** @brief Function to add crc to buffer */
static void add_crc16 (uint8_t * const buffer,
                       uint32_t * written)
{
   21e40:	b570      	push	{r4, r5, r6, lr}
    if ( (p_data == NULL)
   21e42:	d020      	beq.n	21e86 <add_crc16+0x48>
    uint16_t crc16 = RE_CA_CRC_INVALID;
    uint16_t p_crc = RE_CA_CRC_DEFAULT;
    crc16 = calculate_crc16 (buffer + RE_CA_UART_STX_ETX_LEN,
                             (*written) - RE_CA_UART_STX_ETX_LEN, &p_crc);
   21e44:	680c      	ldr	r4, [r1, #0]
            || (size == 0))
   21e46:	2c01      	cmp	r4, #1
   21e48:	d01d      	beq.n	21e86 <add_crc16+0x48>
   21e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21e4e:	1906      	adds	r6, r0, r4
            crc ^= p_data[i];
   21e50:	f812 5b01 	ldrb.w	r5, [r2], #1
   21e54:	ba5b      	rev16	r3, r3
   21e56:	b29b      	uxth	r3, r3
   21e58:	406b      	eors	r3, r5
            crc ^= (unsigned char) (crc & U16_LSB_MASK) >> U8_HALF_OFFSET;
   21e5a:	f3c3 1503 	ubfx	r5, r3, #4, #4
   21e5e:	406b      	eors	r3, r5
            crc ^= (crc << U16_MSB_OFFSET) << U8_HALF_OFFSET;
   21e60:	ea83 3303 	eor.w	r3, r3, r3, lsl #12
   21e64:	b21d      	sxth	r5, r3
            crc ^= ( (crc & U16_LSB_MASK) << U8_HALF_OFFSET) << 1;
   21e66:	015b      	lsls	r3, r3, #5
   21e68:	f403 53ff 	and.w	r3, r3, #8160	; 0x1fe0
   21e6c:	405d      	eors	r5, r3
        for (i = 0; i < size; i++)
   21e6e:	42b2      	cmp	r2, r6
            crc ^= ( (crc & U16_LSB_MASK) << U8_HALF_OFFSET) << 1;
   21e70:	b2ab      	uxth	r3, r5
        for (i = 0; i < size; i++)
   21e72:	d1ed      	bne.n	21e50 <add_crc16+0x12>

    if (crc16 != RE_CA_CRC_INVALID)
   21e74:	b13b      	cbz	r3, 21e86 <add_crc16+0x48>
    {
        buffer[ (*written)++] = (uint8_t) (crc16 & U16_LSB_MASK);
   21e76:	1c62      	adds	r2, r4, #1
   21e78:	600a      	str	r2, [r1, #0]
   21e7a:	5505      	strb	r5, [r0, r4]
        buffer[ (*written)++] = (uint8_t) ( (crc16 & U16_MSB_MASK) >> U16_MSB_OFFSET);
   21e7c:	680a      	ldr	r2, [r1, #0]
   21e7e:	0a1b      	lsrs	r3, r3, #8
   21e80:	1c54      	adds	r4, r2, #1
   21e82:	600c      	str	r4, [r1, #0]
   21e84:	5483      	strb	r3, [r0, r2]
    }
}
   21e86:	bd70      	pop	{r4, r5, r6, pc}

00021e88 <re_ca_uart_decode>:
    return err_code;
}

re_status_t re_ca_uart_decode (const uint8_t * const buffer,
                               re_ca_uart_payload_t * const payload)
{
   21e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e8a:	460c      	mov	r4, r1
    re_status_t err_code = RE_SUCCESS;

    // Sanity check buffer format
    if (NULL == buffer)
   21e8c:	4605      	mov	r5, r0
   21e8e:	2800      	cmp	r0, #0
   21e90:	f000 80e1 	beq.w	22056 <re_ca_uart_decode+0x1ce>
    {
        err_code |= RE_ERROR_NULL;
    }
    else if (NULL == payload)
   21e94:	2900      	cmp	r1, #0
   21e96:	f000 80de 	beq.w	22056 <re_ca_uart_decode+0x1ce>
    {
        err_code |= RE_ERROR_NULL;
    }
    else if (RE_CA_UART_STX != buffer[RE_CA_UART_STX_INDEX])
   21e9a:	7803      	ldrb	r3, [r0, #0]
   21e9c:	2bca      	cmp	r3, #202	; 0xca
   21e9e:	f040 80dd 	bne.w	2205c <re_ca_uart_decode+0x1d4>
    {
        err_code |= RE_ERROR_DECODING_STX;
    }
    else if (RE_CA_UART_ETX != buffer[buffer[RE_CA_UART_LEN_INDEX]
   21ea2:	7843      	ldrb	r3, [r0, #1]
   21ea4:	18c7      	adds	r7, r0, r3
   21ea6:	797a      	ldrb	r2, [r7, #5]
   21ea8:	2a0a      	cmp	r2, #10
   21eaa:	f040 80da 	bne.w	22062 <re_ca_uart_decode+0x1da>
    if ( (p_data == NULL)
   21eae:	1c42      	adds	r2, r0, #1
   21eb0:	f000 80da 	beq.w	22068 <re_ca_uart_decode+0x1e0>
    crc16 = calculate_crc16 (buffer + RE_CA_UART_STX_ETX_LEN,
   21eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   21eb8:	f103 0c02 	add.w	ip, r3, #2
            crc  = (unsigned char) (crc >> U16_MSB_OFFSET) | (crc << U16_MSB_OFFSET);
   21ebc:	ba51      	rev16	r1, r2
            crc ^= p_data[i];
   21ebe:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   21ec2:	b289      	uxth	r1, r1
   21ec4:	4051      	eors	r1, r2
            crc ^= (unsigned char) (crc & U16_LSB_MASK) >> U8_HALF_OFFSET;
   21ec6:	f3c1 1203 	ubfx	r2, r1, #4, #4
   21eca:	4051      	eors	r1, r2
            crc ^= (crc << U16_MSB_OFFSET) << U8_HALF_OFFSET;
   21ecc:	ea81 3101 	eor.w	r1, r1, r1, lsl #12
            crc ^= ( (crc & U16_LSB_MASK) << U8_HALF_OFFSET) << 1;
   21ed0:	014a      	lsls	r2, r1, #5
   21ed2:	f402 56ff 	and.w	r6, r2, #8160	; 0x1fe0
   21ed6:	b28a      	uxth	r2, r1
        for (i = 0; i < size; i++)
   21ed8:	1b41      	subs	r1, r0, r5
   21eda:	458c      	cmp	ip, r1
            crc ^= ( (crc & U16_LSB_MASK) << U8_HALF_OFFSET) << 1;
   21edc:	ea82 0206 	eor.w	r2, r2, r6
        for (i = 0; i < size; i++)
   21ee0:	d8ec      	bhi.n	21ebc <re_ca_uart_decode+0x34>
    if (crc16 != RE_CA_CRC_INVALID)
   21ee2:	2a00      	cmp	r2, #0
   21ee4:	f000 80c0 	beq.w	22068 <re_ca_uart_decode+0x1e0>
        if (in_crc == crc16)
   21ee8:	f8b7 1003 	ldrh.w	r1, [r7, #3]
   21eec:	4291      	cmp	r1, r2
   21eee:	f040 80bb 	bne.w	22068 <re_ca_uart_decode+0x1e0>
    {
        err_code |= RE_ERROR_DECODING_CRC;
    }
    else
    {
        switch (buffer[RE_CA_UART_CMD_INDEX])
   21ef2:	78aa      	ldrb	r2, [r5, #2]
   21ef4:	2a18      	cmp	r2, #24
   21ef6:	d810      	bhi.n	21f1a <re_ca_uart_decode+0x92>
   21ef8:	2a04      	cmp	r2, #4
   21efa:	d910      	bls.n	21f1e <re_ca_uart_decode+0x96>
   21efc:	1f51      	subs	r1, r2, #5
   21efe:	2913      	cmp	r1, #19
   21f00:	d80d      	bhi.n	21f1e <re_ca_uart_decode+0x96>
   21f02:	e8df f001 	tbb	[pc, r1]
   21f06:	260f      	.short	0x260f
   21f08:	0f0f0f0f 	.word	0x0f0f0f0f
   21f0c:	0c0c0f0f 	.word	0x0c0c0f0f
   21f10:	0c906330 	.word	0x0c906330
   21f14:	0c0c0c0c 	.word	0x0c0c0c0c
   21f18:	a40c      	.short	0xa40c
   21f1a:	2a20      	cmp	r2, #32
   21f1c:	d00d      	beq.n	21f3a <re_ca_uart_decode+0xb2>
   21f1e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   21f22:	e009      	b.n	21f38 <re_ca_uart_decode+0xb0>
    if (buffer[RE_CA_UART_LEN_INDEX] != (RE_CA_UART_CMD_BOOL_LEN
   21f24:	2b02      	cmp	r3, #2
   21f26:	f040 80a5 	bne.w	22074 <re_ca_uart_decode+0x1ec>
        payload->cmd = buffer[RE_CA_UART_CMD_INDEX];
   21f2a:	7022      	strb	r2, [r4, #0]
        payload->params.bool_param.state =
   21f2c:	7863      	ldrb	r3, [r4, #1]
   21f2e:	78ea      	ldrb	r2, [r5, #3]
   21f30:	f362 0300 	bfi	r3, r2, #0, #1
   21f34:	7063      	strb	r3, [r4, #1]
    re_status_t err_code = RE_SUCCESS;
   21f36:	2000      	movs	r0, #0
                break;
        }
    }

    return err_code;
}
   21f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (buffer[RE_CA_UART_LEN_INDEX] != (RE_CA_UART_CMD_ACK_LEN
   21f3a:	2b04      	cmp	r3, #4
   21f3c:	f040 809a 	bne.w	22074 <re_ca_uart_decode+0x1ec>
        payload->cmd = buffer[RE_CA_UART_CMD_INDEX];
   21f40:	7022      	strb	r2, [r4, #0]
        payload->params.ack.cmd = (* ( (re_ca_uart_cmd_t *) &buffer[RE_CA_UART_PAYLOAD_INDEX])) &
   21f42:	78eb      	ldrb	r3, [r5, #3]
   21f44:	7063      	strb	r3, [r4, #1]
        payload->params.ack.ack_state.state =
   21f46:	796a      	ldrb	r2, [r5, #5]
   21f48:	78a3      	ldrb	r3, [r4, #2]
   21f4a:	f362 0300 	bfi	r3, r2, #0, #1
   21f4e:	70a3      	strb	r3, [r4, #2]
   21f50:	e7f1      	b.n	21f36 <re_ca_uart_decode+0xae>
    if (buffer[RE_CA_UART_LEN_INDEX] != (RE_CA_UART_CMD_FLTR_ID_LEN
   21f52:	2b03      	cmp	r3, #3
   21f54:	f040 808e 	bne.w	22074 <re_ca_uart_decode+0x1ec>
        payload->cmd = buffer[RE_CA_UART_CMD_INDEX];
   21f58:	2306      	movs	r3, #6
   21f5a:	7023      	strb	r3, [r4, #0]
        payload->params.fltr_id_param.id = * ( (uint16_t *) &buffer[RE_CA_UART_PAYLOAD_INDEX]);
   21f5c:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   21f60:	f8a4 3001 	strh.w	r3, [r4, #1]
   21f64:	e7e7      	b.n	21f36 <re_ca_uart_decode+0xae>
    if (buffer[RE_CA_UART_LEN_INDEX] != (RE_CA_UART_CMD_ALL_LEN
   21f66:	2b05      	cmp	r3, #5
   21f68:	f040 8084 	bne.w	22074 <re_ca_uart_decode+0x1ec>
        payload->cmd = buffer[RE_CA_UART_CMD_INDEX];
   21f6c:	230f      	movs	r3, #15
   21f6e:	7023      	strb	r3, [r4, #0]
        payload->params.all_params.fltr_id.id = * ( (uint16_t *)
   21f70:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   21f74:	f8a4 3001 	strh.w	r3, [r4, #1]
        payload->params.all_params.bools.fltr_tags.state =
   21f78:	79aa      	ldrb	r2, [r5, #6]
   21f7a:	78e3      	ldrb	r3, [r4, #3]
   21f7c:	f362 0300 	bfi	r3, r2, #0, #1
   21f80:	70e3      	strb	r3, [r4, #3]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CODED_PHY_BIT) & 1U);
   21f82:	79ab      	ldrb	r3, [r5, #6]
        payload->params.all_params.bools.coded_phy.state =
   21f84:	7922      	ldrb	r2, [r4, #4]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CODED_PHY_BIT) & 1U);
   21f86:	085b      	lsrs	r3, r3, #1
        payload->params.all_params.bools.coded_phy.state =
   21f88:	f363 0200 	bfi	r2, r3, #0, #1
   21f8c:	7122      	strb	r2, [r4, #4]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_SCAN_PHY_BIT) & 1U);
   21f8e:	79ab      	ldrb	r3, [r5, #6]
        payload->params.all_params.bools.scan_phy.state =
   21f90:	7962      	ldrb	r2, [r4, #5]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_SCAN_PHY_BIT) & 1U);
   21f92:	089b      	lsrs	r3, r3, #2
        payload->params.all_params.bools.scan_phy.state =
   21f94:	f363 0200 	bfi	r2, r3, #0, #1
   21f98:	7162      	strb	r2, [r4, #5]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_EXT_PLD_BIT) & 1U);
   21f9a:	79ab      	ldrb	r3, [r5, #6]
        payload->params.all_params.bools.ext_payload.state =
   21f9c:	79a2      	ldrb	r2, [r4, #6]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_EXT_PLD_BIT) & 1U);
   21f9e:	08db      	lsrs	r3, r3, #3
        payload->params.all_params.bools.ext_payload.state =
   21fa0:	f363 0200 	bfi	r2, r3, #0, #1
   21fa4:	71a2      	strb	r2, [r4, #6]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CH_37_BIT) & 1U);
   21fa6:	79ab      	ldrb	r3, [r5, #6]
        payload->params.all_params.bools.ch_37.state =
   21fa8:	79e2      	ldrb	r2, [r4, #7]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CH_37_BIT) & 1U);
   21faa:	091b      	lsrs	r3, r3, #4
        payload->params.all_params.bools.ch_37.state =
   21fac:	f363 0200 	bfi	r2, r3, #0, #1
   21fb0:	71e2      	strb	r2, [r4, #7]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CH_38_BIT) & 1U);
   21fb2:	79ab      	ldrb	r3, [r5, #6]
        payload->params.all_params.bools.ch_38.state =
   21fb4:	7a22      	ldrb	r2, [r4, #8]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CH_38_BIT) & 1U);
   21fb6:	095b      	lsrs	r3, r3, #5
        payload->params.all_params.bools.ch_38.state =
   21fb8:	f363 0200 	bfi	r2, r3, #0, #1
   21fbc:	7222      	strb	r2, [r4, #8]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CH_39_BIT) & 1U);
   21fbe:	79ab      	ldrb	r3, [r5, #6]
        payload->params.all_params.bools.ch_39.state =
   21fc0:	7a62      	ldrb	r2, [r4, #9]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CH_39_BIT) & 1U);
   21fc2:	099b      	lsrs	r3, r3, #6
        payload->params.all_params.bools.ch_39.state =
   21fc4:	f363 0200 	bfi	r2, r3, #0, #1
   21fc8:	7262      	strb	r2, [r4, #9]
   21fca:	e7b4      	b.n	21f36 <re_ca_uart_decode+0xae>
    const uint8_t adv_len = buffer[RE_CA_UART_LEN_INDEX]
   21fcc:	f1a3 060a 	sub.w	r6, r3, #10
   21fd0:	b2f6      	uxtb	r6, r6
    if (adv_len > RE_CA_UART_ADV_BYTES)
   21fd2:	2e1f      	cmp	r6, #31
   21fd4:	d84e      	bhi.n	22074 <re_ca_uart_decode+0x1ec>
    else if (RE_CA_UART_FIELD_DELIMITER != * (p_data - RE_CA_UART_DELIMITER_LEN))
   21fd6:	7a6a      	ldrb	r2, [r5, #9]
   21fd8:	2a2c      	cmp	r2, #44	; 0x2c
   21fda:	d148      	bne.n	2206e <re_ca_uart_decode+0x1e6>
                                    - RE_CA_UART_DELIMITER_LEN;
   21fdc:	1c5f      	adds	r7, r3, #1
    const uint8_t * const  p_rssi = buffer
   21fde:	19eb      	adds	r3, r5, r7
    else if (RE_CA_UART_FIELD_DELIMITER != * (p_rssi - RE_CA_UART_DELIMITER_LEN))
   21fe0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   21fe4:	2a2c      	cmp	r2, #44	; 0x2c
   21fe6:	d142      	bne.n	2206e <re_ca_uart_decode+0x1e6>
    else if (RE_CA_UART_FIELD_DELIMITER != * (p_rssi + RE_CA_UART_RSSI_BYTES))
   21fe8:	785b      	ldrb	r3, [r3, #1]
   21fea:	2b2c      	cmp	r3, #44	; 0x2c
   21fec:	d13f      	bne.n	2206e <re_ca_uart_decode+0x1e6>
        memcpy (payload->params.adv.mac,
   21fee:	462b      	mov	r3, r5
   21ff0:	f853 2f03 	ldr.w	r2, [r3, #3]!
   21ff4:	f105 010a 	add.w	r1, r5, #10
   21ff8:	f8c4 2001 	str.w	r2, [r4, #1]
   21ffc:	889b      	ldrh	r3, [r3, #4]
   21ffe:	4632      	mov	r2, r6
   22000:	f8a4 3005 	strh.w	r3, [r4, #5]
   22004:	1de0      	adds	r0, r4, #7
   22006:	f005 fc9e 	bl	27946 <memcpy>
        payload->cmd = RE_CA_UART_ADV_RPRT;
   2200a:	2310      	movs	r3, #16
   2200c:	7023      	strb	r3, [r4, #0]
    if (byte > I8_MAX)
   2200e:	57eb      	ldrsb	r3, [r5, r7]
    int16_t rval = byte;
   22010:	5dea      	ldrb	r2, [r5, r7]
    if (byte > I8_MAX)
   22012:	2b00      	cmp	r3, #0
        rval -= U8_OVERFLOW;
   22014:	bfbc      	itt	lt
   22016:	f5a2 7280 	sublt.w	r2, r2, #256	; 0x100
   2201a:	b212      	sxthlt	r2, r2
    return rval;
   2201c:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
        payload->params.adv.adv_len = adv_len;
   22020:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
   22024:	e787      	b.n	21f36 <re_ca_uart_decode+0xae>
    if (buffer[RE_CA_UART_LEN_INDEX] != (RE_CA_UART_DEVICE_ID_LEN + RE_CA_UART_DEVICE_ADDR_LEN
   22026:	2b12      	cmp	r3, #18
   22028:	d124      	bne.n	22074 <re_ca_uart_decode+0x1ec>
        payload->cmd = buffer[RE_CA_UART_CMD_INDEX];
   2202a:	4623      	mov	r3, r4
   2202c:	2211      	movs	r2, #17
   2202e:	f803 2b01 	strb.w	r2, [r3], #1
        payload->params.device_id.id = * ( (uint64_t *) &buffer[RE_CA_UART_PAYLOAD_INDEX]);
   22032:	f8d5 2007 	ldr.w	r2, [r5, #7]
   22036:	f8d5 1003 	ldr.w	r1, [r5, #3]
   2203a:	f8c4 1001 	str.w	r1, [r4, #1]
   2203e:	605a      	str	r2, [r3, #4]
        payload->params.device_id.addr = * ( (uint64_t *) &buffer[RE_CA_UART_PAYLOAD_INDEX
   22040:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   22044:	f8c4 2009 	str.w	r2, [r4, #9]
   22048:	f8c4 300d 	str.w	r3, [r4, #13]
   2204c:	e773      	b.n	21f36 <re_ca_uart_decode+0xae>
    if (buffer[RE_CA_UART_LEN_INDEX] != (RE_CA_UART_GET_DEVICE_ID_LEN
   2204e:	b98b      	cbnz	r3, 22074 <re_ca_uart_decode+0x1ec>
        payload->cmd = buffer[RE_CA_UART_CMD_INDEX];
   22050:	2218      	movs	r2, #24
   22052:	7022      	strb	r2, [r4, #0]
   22054:	e76f      	b.n	21f36 <re_ca_uart_decode+0xae>
        err_code |= RE_ERROR_NULL;
   22056:	f44f 6000 	mov.w	r0, #2048	; 0x800
   2205a:	e76d      	b.n	21f38 <re_ca_uart_decode+0xb0>
        err_code |= RE_ERROR_DECODING_STX;
   2205c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   22060:	e76a      	b.n	21f38 <re_ca_uart_decode+0xb0>
        err_code |= RE_ERROR_DECODING_ETX;
   22062:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   22066:	e767      	b.n	21f38 <re_ca_uart_decode+0xb0>
        err_code |= RE_ERROR_DECODING_CRC;
   22068:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   2206c:	e764      	b.n	21f38 <re_ca_uart_decode+0xb0>
        err_code |= RE_ERROR_DECODING_DELIMITER;
   2206e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   22072:	e761      	b.n	21f38 <re_ca_uart_decode+0xb0>
        err_code |= RE_ERROR_DECODING_LEN;
   22074:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    return err_code;
   22078:	e75e      	b.n	21f38 <re_ca_uart_decode+0xb0>

0002207a <re_ca_uart_encode>:
    return err_code;
}

re_status_t re_ca_uart_encode (uint8_t * const buffer, uint8_t * const buf_len,
                               const re_ca_uart_payload_t * const payload)
{
   2207a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2207e:	460f      	mov	r7, r1
   22080:	4615      	mov	r5, r2
    re_status_t err_code = RE_SUCCESS;

    if (NULL == buffer)
   22082:	4604      	mov	r4, r0
   22084:	2800      	cmp	r0, #0
   22086:	f000 80f1 	beq.w	2226c <re_ca_uart_encode+0x1f2>
    {
        err_code |= RE_ERROR_NULL;
    }
    else if (NULL == buf_len)
   2208a:	2900      	cmp	r1, #0
   2208c:	f000 80ee 	beq.w	2226c <re_ca_uart_encode+0x1f2>
    {
        err_code |= RE_ERROR_NULL;
    }
    else if (NULL == payload)
   22090:	2a00      	cmp	r2, #0
   22092:	f000 80eb 	beq.w	2226c <re_ca_uart_encode+0x1f2>
    {
        err_code |= RE_ERROR_NULL;
    }
    else
    {
        switch (payload->cmd)
   22096:	7813      	ldrb	r3, [r2, #0]
   22098:	2b18      	cmp	r3, #24
   2209a:	d810      	bhi.n	220be <re_ca_uart_encode+0x44>
   2209c:	2b04      	cmp	r3, #4
   2209e:	d910      	bls.n	220c2 <re_ca_uart_encode+0x48>
   220a0:	3b05      	subs	r3, #5
   220a2:	2b13      	cmp	r3, #19
   220a4:	d80d      	bhi.n	220c2 <re_ca_uart_encode+0x48>
   220a6:	e8df f003 	tbb	[pc, r3]
   220aa:	440e      	.short	0x440e
   220ac:	0e0e0e0e 	.word	0x0e0e0e0e
   220b0:	0c0c0e0e 	.word	0x0c0c0e0e
   220b4:	0cb98d57 	.word	0x0cb98d57
   220b8:	0c0c0c0c 	.word	0x0c0c0c0c
   220bc:	d30c      	.short	0xd30c
   220be:	2b20      	cmp	r3, #32
   220c0:	d016      	beq.n	220f0 <re_ca_uart_encode+0x76>
   220c2:	2010      	movs	r0, #16
                err_code |= RE_ERROR_INVALID_PARAM;
                break;
        }
    }

    return err_code;
   220c4:	e032      	b.n	2212c <re_ca_uart_encode+0xb2>
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   220c6:	780b      	ldrb	r3, [r1, #0]
   220c8:	2b2c      	cmp	r3, #44	; 0x2c
   220ca:	f240 80cd 	bls.w	22268 <re_ca_uart_encode+0x1ee>
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   220ce:	23ca      	movs	r3, #202	; 0xca
   220d0:	7003      	strb	r3, [r0, #0]
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_CMD_BOOL_LEN
   220d2:	2302      	movs	r3, #2
   220d4:	7043      	strb	r3, [r0, #1]
        buffer[RE_CA_UART_CMD_INDEX] = payload->cmd;
   220d6:	782b      	ldrb	r3, [r5, #0]
   220d8:	7083      	strb	r3, [r0, #2]
        buffer[RE_CA_UART_PAYLOAD_INDEX] = (payload->params.bool_param.state & 1U);
   220da:	786b      	ldrb	r3, [r5, #1]
   220dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
   220e0:	70c3      	strb	r3, [r0, #3]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   220e2:	2305      	movs	r3, #5
   220e4:	9301      	str	r3, [sp, #4]
   220e6:	232c      	movs	r3, #44	; 0x2c
   220e8:	7103      	strb	r3, [r0, #4]
        add_crc16 (buffer, &written);
   220ea:	4620      	mov	r0, r4
   220ec:	a901      	add	r1, sp, #4
   220ee:	e015      	b.n	2211c <re_ca_uart_encode+0xa2>
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   220f0:	780b      	ldrb	r3, [r1, #0]
   220f2:	2b2c      	cmp	r3, #44	; 0x2c
   220f4:	f240 80b8 	bls.w	22268 <re_ca_uart_encode+0x1ee>
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   220f8:	23ca      	movs	r3, #202	; 0xca
   220fa:	7003      	strb	r3, [r0, #0]
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_CMD_ACK_LEN
   220fc:	2304      	movs	r3, #4
   220fe:	7043      	strb	r3, [r0, #1]
        buffer[RE_CA_UART_CMD_INDEX] = payload->cmd;
   22100:	7813      	ldrb	r3, [r2, #0]
        add_crc16 (buffer, &written);
   22102:	a901      	add	r1, sp, #4
        buffer[RE_CA_UART_CMD_INDEX] = payload->cmd;
   22104:	7083      	strb	r3, [r0, #2]
        buffer[written++] = (uint8_t) payload->params.ack.cmd;
   22106:	7853      	ldrb	r3, [r2, #1]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   22108:	222c      	movs	r2, #44	; 0x2c
        buffer[written++] = (uint8_t) payload->params.ack.cmd;
   2210a:	70c3      	strb	r3, [r0, #3]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   2210c:	7102      	strb	r2, [r0, #4]
        buffer[written++] = (payload->params.ack.ack_state.state & 1U);
   2210e:	78ab      	ldrb	r3, [r5, #2]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   22110:	7182      	strb	r2, [r0, #6]
        buffer[written++] = (payload->params.ack.ack_state.state & 1U);
   22112:	f3c3 0300 	ubfx	r3, r3, #0, #1
   22116:	7143      	strb	r3, [r0, #5]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   22118:	2307      	movs	r3, #7
   2211a:	9301      	str	r3, [sp, #4]
        add_crc16 (buffer, &written);
   2211c:	f7ff fe8f 	bl	21e3e <add_crc16>
        buffer[written++] = RE_CA_UART_ETX;
   22120:	220a      	movs	r2, #10
    re_status_t err_code = RE_SUCCESS;
   22122:	2000      	movs	r0, #0
        buffer[written++] = RE_CA_UART_ETX;
   22124:	9b01      	ldr	r3, [sp, #4]
   22126:	54e2      	strb	r2, [r4, r3]
   22128:	3301      	adds	r3, #1
        *buf_len = written;
   2212a:	703b      	strb	r3, [r7, #0]
}
   2212c:	b002      	add	sp, #8
   2212e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   22132:	780b      	ldrb	r3, [r1, #0]
   22134:	2b2c      	cmp	r3, #44	; 0x2c
   22136:	f240 8097 	bls.w	22268 <re_ca_uart_encode+0x1ee>
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   2213a:	23ca      	movs	r3, #202	; 0xca
   2213c:	7003      	strb	r3, [r0, #0]
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_CMD_FLTR_ID_LEN
   2213e:	2303      	movs	r3, #3
   22140:	7043      	strb	r3, [r0, #1]
        buffer[RE_CA_UART_CMD_INDEX] = payload->cmd;
   22142:	782b      	ldrb	r3, [r5, #0]
   22144:	7083      	strb	r3, [r0, #2]
   22146:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   2214a:	f8a0 3003 	strh.w	r3, [r0, #3]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   2214e:	2306      	movs	r3, #6
   22150:	9301      	str	r3, [sp, #4]
   22152:	232c      	movs	r3, #44	; 0x2c
   22154:	7143      	strb	r3, [r0, #5]
        add_crc16 (buffer, &written);
   22156:	e7c8      	b.n	220ea <re_ca_uart_encode+0x70>
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   22158:	780b      	ldrb	r3, [r1, #0]
   2215a:	2b2c      	cmp	r3, #44	; 0x2c
   2215c:	f240 8084 	bls.w	22268 <re_ca_uart_encode+0x1ee>
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   22160:	23ca      	movs	r3, #202	; 0xca
   22162:	7003      	strb	r3, [r0, #0]
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_CMD_ALL_BOOL_LEN
   22164:	2305      	movs	r3, #5
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   22166:	212c      	movs	r1, #44	; 0x2c
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_CMD_ALL_BOOL_LEN
   22168:	7043      	strb	r3, [r0, #1]
        buffer[RE_CA_UART_CMD_INDEX] = payload->cmd;
   2216a:	782b      	ldrb	r3, [r5, #0]
   2216c:	7083      	strb	r3, [r0, #2]
   2216e:	f8b5 3001 	ldrh.w	r3, [r5, #1]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   22172:	7141      	strb	r1, [r0, #5]
   22174:	f8a0 3003 	strh.w	r3, [r0, #3]
                            | ( (payload->params.all_params.bools.coded_phy.state  & 1U)
   22178:	792b      	ldrb	r3, [r5, #4]
   2217a:	f3c3 0200 	ubfx	r2, r3, #0, #1
                            | ( (payload->params.all_params.bools.scan_phy.state  & 1U)
   2217e:	796b      	ldrb	r3, [r5, #5]
   22180:	f3c3 0300 	ubfx	r3, r3, #0, #1
                                << RE_CA_UART_ALL_SCAN_PHY_BIT)
   22184:	009b      	lsls	r3, r3, #2
                            | ( (payload->params.all_params.bools.scan_phy.state  & 1U)
   22186:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
        buffer[written] = ( ( (payload->params.all_params.bools.fltr_tags.state & 1U)
   2218a:	78ea      	ldrb	r2, [r5, #3]
   2218c:	f3c2 0200 	ubfx	r2, r2, #0, #1
                            | ( (payload->params.all_params.bools.scan_phy.state  & 1U)
   22190:	4313      	orrs	r3, r2
                            | ( (payload->params.all_params.bools.ext_payload.state  & 1U)
   22192:	79aa      	ldrb	r2, [r5, #6]
   22194:	f3c2 0200 	ubfx	r2, r2, #0, #1
   22198:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                            | ( (payload->params.all_params.bools.ch_37.state  & 1U)
   2219c:	79ea      	ldrb	r2, [r5, #7]
   2219e:	f3c2 0200 	ubfx	r2, r2, #0, #1
   221a2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                            | ( (payload->params.all_params.bools.ch_38.state  & 1U)
   221a6:	7a2a      	ldrb	r2, [r5, #8]
   221a8:	f3c2 0200 	ubfx	r2, r2, #0, #1
   221ac:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                            | ( (payload->params.all_params.bools.ch_39.state  & 1U)
   221b0:	7a6a      	ldrb	r2, [r5, #9]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   221b2:	71c1      	strb	r1, [r0, #7]
                            | ( (payload->params.all_params.bools.ch_39.state  & 1U)
   221b4:	f3c2 0200 	ubfx	r2, r2, #0, #1
   221b8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
        buffer[written] = ( ( (payload->params.all_params.bools.fltr_tags.state & 1U)
   221bc:	7183      	strb	r3, [r0, #6]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   221be:	2308      	movs	r3, #8
   221c0:	9301      	str	r3, [sp, #4]
   221c2:	e792      	b.n	220ea <re_ca_uart_encode+0x70>
    uint32_t written = 0;
   221c4:	2600      	movs	r6, #0
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   221c6:	780b      	ldrb	r3, [r1, #0]
    uint32_t written = 0;
   221c8:	9601      	str	r6, [sp, #4]
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   221ca:	2b2c      	cmp	r3, #44	; 0x2c
   221cc:	d94c      	bls.n	22268 <re_ca_uart_encode+0x1ee>
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   221ce:	23ca      	movs	r3, #202	; 0xca
   221d0:	7003      	strb	r3, [r0, #0]
                                       + RE_CA_UART_ADV_FIELDS * RE_CA_UART_DELIMITER_LEN;
   221d2:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   221d6:	f04f 082c 	mov.w	r8, #44	; 0x2c
                                       + RE_CA_UART_ADV_FIELDS * RE_CA_UART_DELIMITER_LEN;
   221da:	330a      	adds	r3, #10
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_MAC_BYTES
   221dc:	7043      	strb	r3, [r0, #1]
        buffer[RE_CA_UART_CMD_INDEX] = RE_CA_UART_ADV_RPRT;
   221de:	2310      	movs	r3, #16
   221e0:	7083      	strb	r3, [r0, #2]
   221e2:	462b      	mov	r3, r5
   221e4:	f853 2f01 	ldr.w	r2, [r3, #1]!
   221e8:	1de9      	adds	r1, r5, #7
   221ea:	f8c0 2003 	str.w	r2, [r0, #3]
   221ee:	889b      	ldrh	r3, [r3, #4]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   221f0:	f880 8009 	strb.w	r8, [r0, #9]
   221f4:	f8a0 3007 	strh.w	r3, [r0, #7]
   221f8:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
   221fc:	300a      	adds	r0, #10
   221fe:	f005 fba2 	bl	27946 <memcpy>
        written += payload->params.adv.adv_len;
   22202:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   22206:	18e2      	adds	r2, r4, r3
   22208:	f882 800a 	strb.w	r8, [r2, #10]
        buffer[written++] = i8tou8 (payload->params.adv.rssi_db);
   2220c:	f895 1027 	ldrb.w	r1, [r5, #39]	; 0x27
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   22210:	330d      	adds	r3, #13
        buffer[written++] = i8tou8 (payload->params.adv.rssi_db);
   22212:	72d1      	strb	r1, [r2, #11]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   22214:	9301      	str	r3, [sp, #4]
   22216:	f882 800c 	strb.w	r8, [r2, #12]
        add_crc16 (buffer, &written);
   2221a:	e766      	b.n	220ea <re_ca_uart_encode+0x70>
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   2221c:	780b      	ldrb	r3, [r1, #0]
   2221e:	2b2c      	cmp	r3, #44	; 0x2c
   22220:	d922      	bls.n	22268 <re_ca_uart_encode+0x1ee>
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   22222:	23ca      	movs	r3, #202	; 0xca
   22224:	7003      	strb	r3, [r0, #0]
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_DEVICE_ID_LEN + RE_CA_UART_DEVICE_ADDR_LEN
   22226:	2312      	movs	r3, #18
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   22228:	222c      	movs	r2, #44	; 0x2c
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_DEVICE_ID_LEN + RE_CA_UART_DEVICE_ADDR_LEN
   2222a:	7043      	strb	r3, [r0, #1]
        buffer[RE_CA_UART_CMD_INDEX] = payload->cmd;
   2222c:	782b      	ldrb	r3, [r5, #0]
   2222e:	7083      	strb	r3, [r0, #2]
   22230:	f855 3f01 	ldr.w	r3, [r5, #1]!
   22234:	f8c0 3003 	str.w	r3, [r0, #3]
   22238:	686b      	ldr	r3, [r5, #4]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   2223a:	72c2      	strb	r2, [r0, #11]
   2223c:	f8c0 3007 	str.w	r3, [r0, #7]
   22240:	682b      	ldr	r3, [r5, #0]
   22242:	60c3      	str	r3, [r0, #12]
   22244:	686b      	ldr	r3, [r5, #4]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   22246:	7502      	strb	r2, [r0, #20]
   22248:	6103      	str	r3, [r0, #16]
   2224a:	2315      	movs	r3, #21
   2224c:	9301      	str	r3, [sp, #4]
   2224e:	e74c      	b.n	220ea <re_ca_uart_encode+0x70>
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   22250:	780b      	ldrb	r3, [r1, #0]
    uint32_t written = 0;
   22252:	2600      	movs	r6, #0
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   22254:	2b2c      	cmp	r3, #44	; 0x2c
   22256:	d907      	bls.n	22268 <re_ca_uart_encode+0x1ee>
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   22258:	23ca      	movs	r3, #202	; 0xca
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_GET_DEVICE_ID_LEN
   2225a:	7046      	strb	r6, [r0, #1]
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   2225c:	7003      	strb	r3, [r0, #0]
        buffer[RE_CA_UART_CMD_INDEX] = payload->cmd;
   2225e:	782b      	ldrb	r3, [r5, #0]
   22260:	7083      	strb	r3, [r0, #2]
        written += RE_CA_UART_HEADER_SIZE;
   22262:	2303      	movs	r3, #3
   22264:	9301      	str	r3, [sp, #4]
   22266:	e740      	b.n	220ea <re_ca_uart_encode+0x70>
        err_code |= RE_ERROR_DATA_SIZE;
   22268:	2008      	movs	r0, #8
                break;
   2226a:	e75f      	b.n	2212c <re_ca_uart_encode+0xb2>
        err_code |= RE_ERROR_NULL;
   2226c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   22270:	e75c      	b.n	2212c <re_ca_uart_encode+0xb2>

00022272 <arch_printk_char_out>:
}
   22272:	2000      	movs	r0, #0
   22274:	4770      	bx	lr

00022276 <print_err>:
{
   22276:	b570      	push	{r4, r5, r6, lr}
   22278:	460d      	mov	r5, r1
   2227a:	4604      	mov	r4, r0
	out('E', ctx);
   2227c:	2045      	movs	r0, #69	; 0x45
   2227e:	47a0      	blx	r4
	out('R', ctx);
   22280:	4629      	mov	r1, r5
   22282:	2052      	movs	r0, #82	; 0x52
   22284:	47a0      	blx	r4
	out('R', ctx);
   22286:	4629      	mov	r1, r5
   22288:	4623      	mov	r3, r4
}
   2228a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   2228e:	2052      	movs	r0, #82	; 0x52
   22290:	4718      	bx	r3

00022292 <str_out>:
{
   22292:	b530      	push	{r4, r5, lr}
   22294:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   22296:	680c      	ldr	r4, [r1, #0]
   22298:	1c55      	adds	r5, r2, #1
   2229a:	b114      	cbz	r4, 222a2 <str_out+0x10>
   2229c:	684b      	ldr	r3, [r1, #4]
   2229e:	4293      	cmp	r3, r2
   222a0:	dc01      	bgt.n	222a6 <str_out+0x14>
		ctx->count++;
   222a2:	608d      	str	r5, [r1, #8]
}
   222a4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   222a6:	3b01      	subs	r3, #1
   222a8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   222aa:	bf08      	it	eq
   222ac:	2200      	moveq	r2, #0
   222ae:	608d      	str	r5, [r1, #8]
   222b0:	bf0c      	ite	eq
   222b2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   222b4:	54a0      	strbne	r0, [r4, r2]
   222b6:	e7f5      	b.n	222a4 <str_out+0x12>

000222b8 <printk>:
{
   222b8:	b40f      	push	{r0, r1, r2, r3}
   222ba:	b507      	push	{r0, r1, r2, lr}
   222bc:	a904      	add	r1, sp, #16
   222be:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   222c2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   222c4:	f7ed f8ba 	bl	f43c <vprintk>
}
   222c8:	b003      	add	sp, #12
   222ca:	f85d eb04 	ldr.w	lr, [sp], #4
   222ce:	b004      	add	sp, #16
   222d0:	4770      	bx	lr

000222d2 <snprintk>:
{
   222d2:	b40c      	push	{r2, r3}
   222d4:	b507      	push	{r0, r1, r2, lr}
   222d6:	ab04      	add	r3, sp, #16
   222d8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   222dc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   222de:	f7ed f8bb 	bl	f458 <vsnprintk>
}
   222e2:	b003      	add	sp, #12
   222e4:	f85d eb04 	ldr.w	lr, [sp], #4
   222e8:	b002      	add	sp, #8
   222ea:	4770      	bx	lr

000222ec <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   222ec:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   222ee:	f7fc fba3 	bl	1ea38 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   222f2:	2000      	movs	r0, #0
   222f4:	bd08      	pop	{r3, pc}

000222f6 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   222f6:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   222f8:	f7fc fbc4 	bl	1ea84 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   222fc:	f110 0f0b 	cmn.w	r0, #11
   22300:	d005      	beq.n	2230e <sys_sem_take+0x18>
   22302:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   22306:	bf08      	it	eq
   22308:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   2230c:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   2230e:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   22312:	e7fb      	b.n	2230c <sys_sem_take+0x16>

00022314 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   22314:	4604      	mov	r4, r0
   22316:	b508      	push	{r3, lr}
   22318:	4608      	mov	r0, r1
   2231a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2231c:	461a      	mov	r2, r3
   2231e:	47a0      	blx	r4
	return z_impl_k_current_get();
   22320:	f7fc fb84 	bl	1ea2c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   22324:	f7ee f802 	bl	1032c <z_impl_k_thread_abort>

00022328 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   22328:	b510      	push	{r4, lr}
   2232a:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   2232c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22334:	4620      	mov	r0, r4
   22336:	f7fc f809 	bl	1e34c <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   2233a:	4603      	mov	r3, r0
   2233c:	2800      	cmp	r0, #0
   2233e:	d0f5      	beq.n	2232c <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   22340:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22342:	3308      	adds	r3, #8
   22344:	e8d3 1fef 	ldaex	r1, [r3]
   22348:	f021 0c01 	bic.w	ip, r1, #1
   2234c:	e8c3 cfee 	stlex	lr, ip, [r3]
   22350:	f1be 0f00 	cmp.w	lr, #0
   22354:	d1f6      	bne.n	22344 <z_work_q_main+0x1c>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   22356:	07cb      	lsls	r3, r1, #31
   22358:	d500      	bpl.n	2235c <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   2235a:	4790      	blx	r2
	z_impl_k_yield();
   2235c:	f7fc fafa 	bl	1e954 <z_impl_k_yield>
   22360:	e7e4      	b.n	2232c <z_work_q_main+0x4>

00022362 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   22362:	6803      	ldr	r3, [r0, #0]
   22364:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   22368:	6883      	ldr	r3, [r0, #8]
   2236a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   2236e:	bf2c      	ite	cs
   22370:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   22374:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   22378:	4770      	bx	lr

0002237a <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   2237a:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   2237c:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   2237e:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   22380:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   22384:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   22388:	bf2c      	ite	cs
   2238a:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   2238e:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   22392:	bd10      	pop	{r4, pc}

00022394 <right_chunk>:
{
	return c - left_size(h, c);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
   22394:	b538      	push	{r3, r4, r5, lr}
   22396:	4605      	mov	r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   22398:	2200      	movs	r2, #0
{
   2239a:	460c      	mov	r4, r1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2239c:	f7ff ffe1 	bl	22362 <chunk_field>
   223a0:	68eb      	ldr	r3, [r5, #12]
   223a2:	4018      	ands	r0, r3
	return c + size(h, c);
}
   223a4:	4420      	add	r0, r4
   223a6:	bd38      	pop	{r3, r4, r5, pc}

000223a8 <free_list_remove>:
	return ret;
}

static void free_list_remove(struct z_heap *h, int bidx,
			     chunkid_t c)
{
   223a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   223ac:	460d      	mov	r5, r1
	struct z_heap_bucket *b = &h->buckets[bidx];
   223ae:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   223b2:	4611      	mov	r1, r2
	struct z_heap_bucket *b = &h->buckets[bidx];
   223b4:	eb08 02c5 	add.w	r2, r8, r5, lsl #3
	CHECK(b->next != 0);
	CHECK(b->list_size > 0);
	CHECK((((h->avail_buckets & (1 << bidx)) == 0)
	       == (h->buckets[bidx].next == 0)));

	b->list_size--;
   223b8:	6853      	ldr	r3, [r2, #4]
{
   223ba:	4604      	mov	r4, r0
	b->list_size--;
   223bc:	3b01      	subs	r3, #1
   223be:	6053      	str	r3, [r2, #4]

	if (b->list_size == 0) {
   223c0:	b95b      	cbnz	r3, 223da <free_list_remove+0x32>
		h->avail_buckets &= ~(1 << bidx);
   223c2:	2201      	movs	r2, #1
   223c4:	fa02 f105 	lsl.w	r1, r2, r5
   223c8:	6942      	ldr	r2, [r0, #20]
   223ca:	ea22 0201 	bic.w	r2, r2, r1
   223ce:	6142      	str	r2, [r0, #20]
		b->next = 0;
   223d0:	f848 3035 	str.w	r3, [r8, r5, lsl #3]

		b->next = second;
		chunk_set(h, first, FREE_NEXT, second);
		chunk_set(h, second, FREE_PREV, first);
	}
}
   223d4:	b002      	add	sp, #8
   223d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   223da:	2202      	movs	r2, #2
   223dc:	9101      	str	r1, [sp, #4]
   223de:	f7ff ffc0 	bl	22362 <chunk_field>
	return chunk_field(h, c, FREE_NEXT);
   223e2:	9901      	ldr	r1, [sp, #4]
	return chunk_field(h, c, FREE_PREV);
   223e4:	4607      	mov	r7, r0
	return chunk_field(h, c, FREE_NEXT);
   223e6:	2203      	movs	r2, #3
   223e8:	4620      	mov	r0, r4
   223ea:	f7ff ffba 	bl	22362 <chunk_field>
   223ee:	4606      	mov	r6, r0
		chunk_set(h, first, FREE_NEXT, second);
   223f0:	4603      	mov	r3, r0
   223f2:	4639      	mov	r1, r7
		b->next = second;
   223f4:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
		chunk_set(h, first, FREE_NEXT, second);
   223f8:	2203      	movs	r2, #3
   223fa:	4620      	mov	r0, r4
   223fc:	f7ff ffbd 	bl	2237a <chunk_set>
		chunk_set(h, second, FREE_PREV, first);
   22400:	463b      	mov	r3, r7
   22402:	2202      	movs	r2, #2
   22404:	4631      	mov	r1, r6
   22406:	4620      	mov	r0, r4
}
   22408:	b002      	add	sp, #8
   2240a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, first);
   2240e:	f7ff bfb4 	b.w	2237a <chunk_set>

00022412 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   22412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22416:	4604      	mov	r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   22418:	2200      	movs	r2, #0
   2241a:	460d      	mov	r5, r1
   2241c:	f7ff ffa1 	bl	22362 <chunk_field>
   22420:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   22422:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   22424:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   22426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2242a:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2242e:	bf34      	ite	cc
   22430:	2000      	movcc	r0, #0
   22432:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   22434:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   22436:	f1c0 001f 	rsb	r0, r0, #31
   2243a:	1a80      	subs	r0, r0, r2
   2243c:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   22440:	684a      	ldr	r2, [r1, #4]
   22442:	1c56      	adds	r6, r2, #1
   22444:	604e      	str	r6, [r1, #4]
   22446:	b9a2      	cbnz	r2, 22472 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   22448:	2201      	movs	r2, #1
   2244a:	fa02 f100 	lsl.w	r1, r2, r0
   2244e:	6962      	ldr	r2, [r4, #20]
   22450:	430a      	orrs	r2, r1
   22452:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   22454:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   22456:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   2245a:	2202      	movs	r2, #2
   2245c:	462b      	mov	r3, r5
   2245e:	4620      	mov	r0, r4
   22460:	f7ff ff8b 	bl	2237a <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   22464:	2203      	movs	r2, #3
   22466:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   22468:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   2246a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   2246e:	f7ff bf84 	b.w	2237a <chunk_set>
		chunkid_t second = h->buckets[b].next;
   22472:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   22476:	2202      	movs	r2, #2
   22478:	4639      	mov	r1, r7
   2247a:	4620      	mov	r0, r4
   2247c:	f7ff ff71 	bl	22362 <chunk_field>
   22480:	4606      	mov	r6, r0
		chunk_set(h, c, FREE_PREV, first);
   22482:	4603      	mov	r3, r0
   22484:	2202      	movs	r2, #2
   22486:	4629      	mov	r1, r5
   22488:	4620      	mov	r0, r4
   2248a:	f7ff ff76 	bl	2237a <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   2248e:	463b      	mov	r3, r7
   22490:	2203      	movs	r2, #3
   22492:	4629      	mov	r1, r5
   22494:	4620      	mov	r0, r4
   22496:	f7ff ff70 	bl	2237a <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   2249a:	2203      	movs	r2, #3
   2249c:	4631      	mov	r1, r6
   2249e:	462b      	mov	r3, r5
   224a0:	4620      	mov	r0, r4
   224a2:	f7ff ff6a 	bl	2237a <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   224a6:	2202      	movs	r2, #2
   224a8:	4639      	mov	r1, r7
   224aa:	e7dd      	b.n	22468 <free_list_add+0x56>

000224ac <split_alloc>:

/* Allocates (fit check has already been perfomred) from the next
 * chunk at the specified bucket level
 */
static void *split_alloc(struct z_heap *h, int bidx, size_t sz)
{
   224ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   224b0:	4604      	mov	r4, r0
	CHECK(h->buckets[bidx].next != 0
	      && sz <= size(h, h->buckets[bidx].next));

	chunkid_t c = h->buckets[bidx].next;
   224b2:	6843      	ldr	r3, [r0, #4]
{
   224b4:	4617      	mov	r7, r2
	chunkid_t c = h->buckets[bidx].next;
   224b6:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]

	free_list_remove(h, bidx, c);
   224ba:	462a      	mov	r2, r5
   224bc:	f7ff ff74 	bl	223a8 <free_list_remove>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   224c0:	2200      	movs	r2, #0
   224c2:	4629      	mov	r1, r5
   224c4:	4620      	mov	r0, r4
   224c6:	f7ff ff4c 	bl	22362 <chunk_field>
	/* Split off remainder if it's usefully large */
	size_t rem = size(h, c) - sz;

	CHECK(rem < h->len);

	if (rem >= (big_heap(h) ? 2 : 1)) {
   224ca:	68a3      	ldr	r3, [r4, #8]
   224cc:	68e6      	ldr	r6, [r4, #12]
   224ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   224d2:	bf2c      	ite	cs
   224d4:	2302      	movcs	r3, #2
   224d6:	2301      	movcc	r3, #1
   224d8:	4030      	ands	r0, r6
	size_t rem = size(h, c) - sz;
   224da:	1bc6      	subs	r6, r0, r7
	if (rem >= (big_heap(h) ? 2 : 1)) {
   224dc:	42b3      	cmp	r3, r6
   224de:	d82d      	bhi.n	2253c <split_alloc+0x90>
		chunkid_t c2 = c + sz;
		chunkid_t c3 = right_chunk(h, c);
   224e0:	4629      	mov	r1, r5
   224e2:	4620      	mov	r0, r4
   224e4:	f7ff ff56 	bl	22394 <right_chunk>
		chunkid_t c2 = c + sz;
   224e8:	eb05 0807 	add.w	r8, r5, r7

		chunk_set(h, c, SIZE_AND_USED, sz);
   224ec:	463b      	mov	r3, r7
   224ee:	2200      	movs	r2, #0
   224f0:	4629      	mov	r1, r5
		chunkid_t c3 = right_chunk(h, c);
   224f2:	4681      	mov	r9, r0
		chunk_set(h, c, SIZE_AND_USED, sz);
   224f4:	4620      	mov	r0, r4
   224f6:	f7ff ff40 	bl	2237a <chunk_set>
		chunk_set(h, c2, SIZE_AND_USED, rem);
   224fa:	4633      	mov	r3, r6
   224fc:	2200      	movs	r2, #0
   224fe:	4641      	mov	r1, r8
   22500:	4620      	mov	r0, r4
   22502:	f7ff ff3a 	bl	2237a <chunk_set>
		chunk_set(h, c2, LEFT_SIZE, sz);
   22506:	463b      	mov	r3, r7
   22508:	2201      	movs	r2, #1
   2250a:	4641      	mov	r1, r8
   2250c:	4620      	mov	r0, r4
   2250e:	f7ff ff34 	bl	2237a <chunk_set>
   22512:	2200      	movs	r2, #0
   22514:	4641      	mov	r1, r8
   22516:	4620      	mov	r0, r4
   22518:	f7ff ff23 	bl	22362 <chunk_field>
   2251c:	68e3      	ldr	r3, [r4, #12]
		if (!last_chunk(h, c2)) {
   2251e:	68a2      	ldr	r2, [r4, #8]
   22520:	4003      	ands	r3, r0
	return (c + size(h, c)) == h->len;
   22522:	4443      	add	r3, r8
		if (!last_chunk(h, c2)) {
   22524:	4293      	cmp	r3, r2
   22526:	d005      	beq.n	22534 <split_alloc+0x88>
			chunk_set(h, c3, LEFT_SIZE, rem);
   22528:	4633      	mov	r3, r6
   2252a:	2201      	movs	r2, #1
   2252c:	4649      	mov	r1, r9
   2252e:	4620      	mov	r0, r4
   22530:	f7ff ff23 	bl	2237a <chunk_set>
		}
		free_list_add(h, c2);
   22534:	4641      	mov	r1, r8
   22536:	4620      	mov	r0, r4
   22538:	f7ff ff6b 	bl	22412 <free_list_add>
   2253c:	4629      	mov	r1, r5
   2253e:	2200      	movs	r2, #0
   22540:	4620      	mov	r0, r4
   22542:	f7ff ff0e 	bl	22362 <chunk_field>
   22546:	68e2      	ldr	r2, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   22548:	4629      	mov	r1, r5
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2254a:	4010      	ands	r0, r2
		  size(h, c) | (used ? (h->size_mask + 1) : 0));
   2254c:	3201      	adds	r2, #1
	chunk_set(h, c, SIZE_AND_USED,
   2254e:	ea40 0302 	orr.w	r3, r0, r2
   22552:	4620      	mov	r0, r4
   22554:	2200      	movs	r2, #0
   22556:	f7ff ff10 	bl	2237a <chunk_set>
	return big_heap(h) ? 8 : 4;
   2255a:	68a3      	ldr	r3, [r4, #8]
	u8_t *ret = ((u8_t *)&h->buf[c]) + chunk_header_bytes(h);
   2255c:	6820      	ldr	r0, [r4, #0]
   2255e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   22562:	bf2c      	ite	cs
   22564:	2308      	movcs	r3, #8
   22566:	2304      	movcc	r3, #4
   22568:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	}

	chunk_set_used(h, c, true);

	return chunk_mem(h, c);
}
   2256c:	4428      	add	r0, r5
   2256e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00022572 <sys_heap_free>:

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   22572:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (mem == NULL) {
   22576:	2900      	cmp	r1, #0
   22578:	f000 80ae 	beq.w	226d8 <sys_heap_free+0x166>
		return; /* ISO C free() semantics */
	}

	struct z_heap *h = heap->heap;
   2257c:	6804      	ldr	r4, [r0, #0]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2257e:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   22580:	68a7      	ldr	r7, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   22582:	4620      	mov	r0, r4
	return big_heap(h) ? 8 : 4;
   22584:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   22588:	bf2c      	ite	cs
   2258a:	2508      	movcs	r5, #8
   2258c:	2504      	movcc	r5, #4
	chunkid_t c = ((u8_t *)mem - chunk_header_bytes(h)
   2258e:	1b49      	subs	r1, r1, r5
		       - (u8_t *)h->buf) / CHUNK_UNIT;
   22590:	6825      	ldr	r5, [r4, #0]
   22592:	1b4d      	subs	r5, r1, r5
   22594:	bf48      	it	mi
   22596:	3507      	addmi	r5, #7
   22598:	10ed      	asrs	r5, r5, #3
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2259a:	4629      	mov	r1, r5
   2259c:	f7ff fee1 	bl	22362 <chunk_field>
   225a0:	68e6      	ldr	r6, [r4, #12]
   225a2:	ea06 0800 	and.w	r8, r6, r0
	return (c + size(h, c)) == h->len;
   225a6:	eb05 0308 	add.w	r3, r5, r8

	/* Merge with right chunk?  We can just absorb it. */
	if (!last_chunk(h, c) && !used(h, right_chunk(h, c))) {
   225aa:	42bb      	cmp	r3, r7
   225ac:	d036      	beq.n	2261c <sys_heap_free+0xaa>
   225ae:	4629      	mov	r1, r5
   225b0:	4620      	mov	r0, r4
   225b2:	f7ff feef 	bl	22394 <right_chunk>
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   225b6:	2200      	movs	r2, #0
   225b8:	4601      	mov	r1, r0
   225ba:	4682      	mov	sl, r0
   225bc:	4620      	mov	r0, r4
   225be:	f7ff fed0 	bl	22362 <chunk_field>
   225c2:	ea30 0906 	bics.w	r9, r0, r6
   225c6:	d129      	bne.n	2261c <sys_heap_free+0xaa>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   225c8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   225cc:	bf34      	ite	cc
   225ce:	2700      	movcc	r7, #0
   225d0:	2701      	movcs	r7, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   225d2:	4006      	ands	r6, r0
		chunkid_t rc = right_chunk(h, c);
		size_t newsz = size(h, c) + size(h, rc);
   225d4:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   225d6:	fab6 f686 	clz	r6, r6
   225da:	f1c7 071f 	rsb	r7, r7, #31

		free_list_remove(h, bucket_idx(h, size(h, rc)), rc);
   225de:	4652      	mov	r2, sl
   225e0:	4620      	mov	r0, r4
   225e2:	1bb9      	subs	r1, r7, r6
   225e4:	f7ff fee0 	bl	223a8 <free_list_remove>
		chunk_set(h, c, SIZE_AND_USED, newsz);
   225e8:	4643      	mov	r3, r8
   225ea:	464a      	mov	r2, r9
   225ec:	4629      	mov	r1, r5
   225ee:	4620      	mov	r0, r4
   225f0:	f7ff fec3 	bl	2237a <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   225f4:	4629      	mov	r1, r5
   225f6:	4620      	mov	r0, r4
   225f8:	f7ff feb3 	bl	22362 <chunk_field>
   225fc:	68e3      	ldr	r3, [r4, #12]
   225fe:	4018      	ands	r0, r3
		if (!last_chunk(h, c)) {
   22600:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   22602:	4428      	add	r0, r5
		if (!last_chunk(h, c)) {
   22604:	4283      	cmp	r3, r0
   22606:	d009      	beq.n	2261c <sys_heap_free+0xaa>
			chunk_set(h, right_chunk(h, c), LEFT_SIZE, newsz);
   22608:	4629      	mov	r1, r5
   2260a:	4620      	mov	r0, r4
   2260c:	f7ff fec2 	bl	22394 <right_chunk>
   22610:	4643      	mov	r3, r8
   22612:	4601      	mov	r1, r0
   22614:	2201      	movs	r2, #1
   22616:	4620      	mov	r0, r4
   22618:	f7ff feaf 	bl	2237a <chunk_set>
		}
	}

	/* Merge with left chunk?  It absorbs us. */
	if (c != h->chunk0 && !used(h, left_chunk(h, c))) {
   2261c:	6923      	ldr	r3, [r4, #16]
   2261e:	42ab      	cmp	r3, r5
   22620:	d047      	beq.n	226b2 <sys_heap_free+0x140>
	return chunk_field(h, c, LEFT_SIZE);
   22622:	2201      	movs	r2, #1
   22624:	4629      	mov	r1, r5
   22626:	4620      	mov	r0, r4
   22628:	f7ff fe9b 	bl	22362 <chunk_field>
	return c - left_size(h, c);
   2262c:	1a2f      	subs	r7, r5, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   2262e:	2200      	movs	r2, #0
   22630:	4639      	mov	r1, r7
   22632:	4620      	mov	r0, r4
   22634:	f7ff fe95 	bl	22362 <chunk_field>
   22638:	f8d4 800c 	ldr.w	r8, [r4, #12]
   2263c:	4606      	mov	r6, r0
   2263e:	ea30 0908 	bics.w	r9, r0, r8
   22642:	d136      	bne.n	226b2 <sys_heap_free+0x140>
   22644:	464a      	mov	r2, r9
   22646:	4629      	mov	r1, r5
   22648:	4620      	mov	r0, r4
   2264a:	f7ff fe8a 	bl	22362 <chunk_field>
		chunkid_t lc = left_chunk(h, c);
		chunkid_t rc = right_chunk(h, c);
   2264e:	4629      	mov	r1, r5
   22650:	4682      	mov	sl, r0
   22652:	4620      	mov	r0, r4
   22654:	f7ff fe9e 	bl	22394 <right_chunk>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   22658:	68a1      	ldr	r1, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2265a:	ea06 0608 	and.w	r6, r6, r8
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2265e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   22662:	bf34      	ite	cc
   22664:	2100      	movcc	r1, #0
   22666:	2101      	movcs	r1, #1
   22668:	4605      	mov	r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2266a:	ea08 000a 	and.w	r0, r8, sl
		size_t csz = size(h, c);
		size_t merged_sz = csz + size(h, lc);
   2266e:	1983      	adds	r3, r0, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   22670:	fab6 f686 	clz	r6, r6
   22674:	f1c1 011f 	rsb	r1, r1, #31

		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   22678:	463a      	mov	r2, r7
   2267a:	4620      	mov	r0, r4
   2267c:	1b89      	subs	r1, r1, r6
		size_t merged_sz = csz + size(h, lc);
   2267e:	9301      	str	r3, [sp, #4]
		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   22680:	f7ff fe92 	bl	223a8 <free_list_remove>
		chunk_set(h, lc, SIZE_AND_USED, merged_sz);
   22684:	464a      	mov	r2, r9
   22686:	4639      	mov	r1, r7
   22688:	4620      	mov	r0, r4
   2268a:	9b01      	ldr	r3, [sp, #4]
   2268c:	f7ff fe75 	bl	2237a <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   22690:	4639      	mov	r1, r7
   22692:	4620      	mov	r0, r4
   22694:	f7ff fe65 	bl	22362 <chunk_field>
   22698:	68e2      	ldr	r2, [r4, #12]
   2269a:	4010      	ands	r0, r2
		if (!last_chunk(h, lc)) {
   2269c:	68a2      	ldr	r2, [r4, #8]
	return (c + size(h, c)) == h->len;
   2269e:	4438      	add	r0, r7
		if (!last_chunk(h, lc)) {
   226a0:	4290      	cmp	r0, r2
   226a2:	d005      	beq.n	226b0 <sys_heap_free+0x13e>
			chunk_set(h, rc, LEFT_SIZE, merged_sz);
   226a4:	2201      	movs	r2, #1
   226a6:	4629      	mov	r1, r5
   226a8:	4620      	mov	r0, r4
   226aa:	9b01      	ldr	r3, [sp, #4]
   226ac:	f7ff fe65 	bl	2237a <chunk_set>
		}

		c = lc;
   226b0:	463d      	mov	r5, r7
   226b2:	4629      	mov	r1, r5
   226b4:	2200      	movs	r2, #0
   226b6:	4620      	mov	r0, r4
   226b8:	f7ff fe53 	bl	22362 <chunk_field>
   226bc:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   226be:	4629      	mov	r1, r5
   226c0:	4003      	ands	r3, r0
   226c2:	2200      	movs	r2, #0
   226c4:	4620      	mov	r0, r4
   226c6:	f7ff fe58 	bl	2237a <chunk_set>
	}

	chunk_set_used(h, c, false);
	free_list_add(h, c);
   226ca:	4629      	mov	r1, r5
   226cc:	4620      	mov	r0, r4
}
   226ce:	b002      	add	sp, #8
   226d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	free_list_add(h, c);
   226d4:	f7ff be9d 	b.w	22412 <free_list_add>
}
   226d8:	b002      	add	sp, #8
   226da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000226de <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   226de:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;
   226e2:	6804      	ldr	r4, [r0, #0]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   226e4:	1dcd      	adds	r5, r1, #7
	return big_heap(h) ? 8 : 4;
   226e6:	68a2      	ldr	r2, [r4, #8]
   226e8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   226ec:	bf2c      	ite	cs
   226ee:	2308      	movcs	r3, #8
   226f0:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   226f2:	441d      	add	r5, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   226f4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   226f8:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   226fc:	fab5 f685 	clz	r6, r5
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   22700:	bf34      	ite	cc
   22702:	2300      	movcc	r3, #0
   22704:	2301      	movcs	r3, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   22706:	441e      	add	r6, r3
   22708:	f1c6 081f 	rsb	r8, r6, #31
	size_t sz = bytes_to_chunksz(h, bytes);
	int bi = bucket_idx(h, sz);
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bytes == 0 || bi > bucket_idx(h, h->len)) {
   2270c:	2900      	cmp	r1, #0
   2270e:	d03b      	beq.n	22788 <sys_heap_alloc+0xaa>
   22710:	fab2 f282 	clz	r2, r2
   22714:	f1c3 031f 	rsb	r3, r3, #31
   22718:	1a9b      	subs	r3, r3, r2
   2271a:	4598      	cmp	r8, r3
   2271c:	dc34      	bgt.n	22788 <sys_heap_alloc+0xaa>
	struct z_heap_bucket *b = &h->buckets[bi];
   2271e:	6867      	ldr	r7, [r4, #4]
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);

	for (int i = 0; i < loops; i++) {
   22720:	f04f 0a00 	mov.w	sl, #0
	struct z_heap_bucket *b = &h->buckets[bi];
   22724:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);
   22728:	687b      	ldr	r3, [r7, #4]
   2272a:	2b03      	cmp	r3, #3
   2272c:	bf28      	it	cs
   2272e:	2303      	movcs	r3, #3
   22730:	4699      	mov	r9, r3
	for (int i = 0; i < loops; i++) {
   22732:	45ca      	cmp	sl, r9
   22734:	db0d      	blt.n	22752 <sys_heap_alloc+0x74>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   22736:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2273a:	6963      	ldr	r3, [r4, #20]
   2273c:	f1c6 0620 	rsb	r6, r6, #32
   22740:	40b1      	lsls	r1, r6

	if ((bmask & h->avail_buckets) != 0) {
   22742:	4019      	ands	r1, r3
   22744:	d020      	beq.n	22788 <sys_heap_alloc+0xaa>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);

		return split_alloc(h, minbucket, sz);
   22746:	fa91 f1a1 	rbit	r1, r1
   2274a:	462a      	mov	r2, r5
   2274c:	fab1 f181 	clz	r1, r1
   22750:	e00c      	b.n	2276c <sys_heap_alloc+0x8e>
		if (size(h, b->next) >= sz) {
   22752:	6839      	ldr	r1, [r7, #0]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   22754:	2200      	movs	r2, #0
   22756:	4620      	mov	r0, r4
   22758:	9101      	str	r1, [sp, #4]
   2275a:	f7ff fe02 	bl	22362 <chunk_field>
   2275e:	68e3      	ldr	r3, [r4, #12]
   22760:	9901      	ldr	r1, [sp, #4]
   22762:	4018      	ands	r0, r3
   22764:	42a8      	cmp	r0, r5
   22766:	d307      	bcc.n	22778 <sys_heap_alloc+0x9a>
			return split_alloc(h, bi, sz);
   22768:	462a      	mov	r2, r5
   2276a:	4641      	mov	r1, r8
		return split_alloc(h, minbucket, sz);
   2276c:	4620      	mov	r0, r4
	}

	return NULL;
}
   2276e:	b002      	add	sp, #8
   22770:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return split_alloc(h, minbucket, sz);
   22774:	f7ff be9a 	b.w	224ac <split_alloc>
	return chunk_field(h, c, FREE_NEXT);
   22778:	2203      	movs	r2, #3
   2277a:	4620      	mov	r0, r4
   2277c:	f7ff fdf1 	bl	22362 <chunk_field>
	for (int i = 0; i < loops; i++) {
   22780:	f10a 0a01 	add.w	sl, sl, #1
		b->next = free_next(h, b->next);
   22784:	6038      	str	r0, [r7, #0]
	for (int i = 0; i < loops; i++) {
   22786:	e7d4      	b.n	22732 <sys_heap_alloc+0x54>
}
   22788:	2000      	movs	r0, #0
   2278a:	b002      	add	sp, #8
   2278c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00022790 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   22790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   22792:	188b      	adds	r3, r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   22794:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   22798:	1dcc      	adds	r4, r1, #7
   2279a:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   2279e:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   227a2:	1b1b      	subs	r3, r3, r4
   227a4:	08db      	lsrs	r3, r3, #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   227a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   227aa:	bf2c      	ite	cs
   227ac:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   227b0:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
   227b2:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
   227b4:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   227b6:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   227b8:	60e1      	str	r1, [r4, #12]
   227ba:	bf94      	ite	ls
   227bc:	2100      	movls	r1, #0
   227be:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   227c0:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   227c4:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   227c6:	4684      	mov	ip, r0
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   227c8:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   227cc:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   227d0:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   227d2:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   227d6:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   227da:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   227dc:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   227de:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   227e0:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   227e2:	68a2      	ldr	r2, [r4, #8]
   227e4:	42ba      	cmp	r2, r7
   227e6:	bf94      	ite	ls
   227e8:	2200      	movls	r2, #0
   227ea:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   227ec:	f1c2 021f 	rsb	r2, r2, #31
   227f0:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   227f2:	4290      	cmp	r0, r2
   227f4:	dd0a      	ble.n	2280c <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   227f6:	4620      	mov	r0, r4
   227f8:	1a5b      	subs	r3, r3, r1
   227fa:	2200      	movs	r2, #0
   227fc:	f7ff fdbd 	bl	2237a <chunk_set>
	free_list_add(h, h->chunk0);
   22800:	4620      	mov	r0, r4
   22802:	6921      	ldr	r1, [r4, #16]
}
   22804:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   22808:	f7ff be03 	b.w	22412 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   2280c:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   22810:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   22812:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   22816:	e7e4      	b.n	227e2 <sys_heap_init+0x52>

00022818 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   22818:	4770      	bx	lr

0002281a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   2281a:	f7fb b9c1 	b.w	1dba0 <SystemInit>

0002281e <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   2281e:	f7ed b87b 	b.w	f918 <socket_offload_getaddrinfo>

00022822 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   22822:	f7ed b883 	b.w	f92c <socket_offload_freeaddrinfo>

00022826 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   22826:	b40c      	push	{r2, r3}
   22828:	4603      	mov	r3, r0
   2282a:	b507      	push	{r0, r1, r2, lr}
   2282c:	aa04      	add	r2, sp, #16
   2282e:	4608      	mov	r0, r1
   22830:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   22834:	689b      	ldr	r3, [r3, #8]
	va_start(args, request);
   22836:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   22838:	4798      	blx	r3
	va_end(args);

	return res;
}
   2283a:	b003      	add	sp, #12
   2283c:	f85d eb04 	ldr.w	lr, [sp], #4
   22840:	b002      	add	sp, #8
   22842:	4770      	bx	lr

00022844 <sock_getsockopt_vmeth>:
   22844:	b508      	push	{r3, lr}
   22846:	f000 fbad 	bl	22fa4 <__errno>
   2284a:	236d      	movs	r3, #109	; 0x6d
   2284c:	6003      	str	r3, [r0, #0]
   2284e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22852:	bd08      	pop	{r3, pc}

00022854 <zsock_received_cb>:
{
   22854:	b570      	push	{r4, r5, r6, lr}
   22856:	4604      	mov	r4, r0
	if (!pkt) {
   22858:	460d      	mov	r5, r1
   2285a:	f100 066c 	add.w	r6, r0, #108	; 0x6c
   2285e:	b999      	cbnz	r1, 22888 <zsock_received_cb+0x34>
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
   22860:	6f00      	ldr	r0, [r0, #112]	; 0x70
   22862:	f004 fcf3 	bl	2724c <z_queue_node_peek>
		if (!last_pkt) {
   22866:	b940      	cbnz	r0, 2287a <zsock_received_cb+0x26>
	val = (val & ~mask) | flag;
   22868:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2286a:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   2286e:	66a3      	str	r3, [r4, #104]	; 0x68
	z_impl_k_queue_cancel_wait(queue);
   22870:	4630      	mov	r0, r6
}
   22872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22876:	f004 bd01 	b.w	2727c <z_impl_k_queue_cancel_wait>
	pkt->sent_or_eof = eof;
   2287a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   2287e:	f043 0302 	orr.w	r3, r3, #2
   22882:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
   22886:	bd70      	pop	{r4, r5, r6, pc}
   22888:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   2288c:	f36f 0341 	bfc	r3, #1, #1
   22890:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   22894:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
   22898:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (net_context_get_type(ctx) == SOCK_STREAM) {
   2289c:	2b01      	cmp	r3, #1
   2289e:	d106      	bne.n	228ae <zsock_received_cb+0x5a>
		net_context_update_recv_wnd(ctx, -net_pkt_remaining_data(pkt));
   228a0:	4608      	mov	r0, r1
   228a2:	f001 febd 	bl	24620 <net_pkt_remaining_data>
   228a6:	4241      	negs	r1, r0
   228a8:	4620      	mov	r0, r4
   228aa:	f001 fc77 	bl	2419c <net_context_update_recv_wnd>
	k_fifo_put(&ctx->recv_q, pkt);
   228ae:	4629      	mov	r1, r5
   228b0:	4630      	mov	r0, r6
}
   228b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_fifo_put(&ctx->recv_q, pkt);
   228b6:	f004 bd01 	b.w	272bc <k_queue_append>

000228ba <zsock_close_ctx>:
{
   228ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   228bc:	2100      	movs	r1, #0
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   228be:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
   228c2:	4605      	mov	r5, r0
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   228c4:	f3c3 0341 	ubfx	r3, r3, #1, #2
   228c8:	2b03      	cmp	r3, #3
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   228ca:	f04f 0200 	mov.w	r2, #0
   228ce:	f04f 0300 	mov.w	r3, #0
   228d2:	9100      	str	r1, [sp, #0]
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   228d4:	d11e      	bne.n	22914 <zsock_close_ctx+0x5a>
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   228d6:	f001 fbbf 	bl	24058 <net_context_accept>
   228da:	f8b5 6086 	ldrh.w	r6, [r5, #134]	; 0x86
	while ((p = k_fifo_get(&ctx->recv_q, K_NO_WAIT)) != NULL) {
   228de:	f105 076c 	add.w	r7, r5, #108	; 0x6c
	return (enum net_context_state)
   228e2:	f3c6 0641 	ubfx	r6, r6, #1, #2
	return z_impl_k_queue_get(queue, timeout);
   228e6:	2200      	movs	r2, #0
   228e8:	2300      	movs	r3, #0
   228ea:	4638      	mov	r0, r7
   228ec:	f7fb fd2e 	bl	1e34c <z_impl_k_queue_get>
   228f0:	4604      	mov	r4, r0
   228f2:	b990      	cbnz	r0, 2291a <zsock_close_ctx+0x60>
	z_impl_k_queue_cancel_wait(queue);
   228f4:	4638      	mov	r0, r7
   228f6:	f004 fcc1 	bl	2727c <z_impl_k_queue_cancel_wait>
	SET_ERRNO(net_context_put(ctx));
   228fa:	4628      	mov	r0, r5
   228fc:	f7ee ffb6 	bl	1186c <net_context_put>
   22900:	1e05      	subs	r5, r0, #0
   22902:	da12      	bge.n	2292a <zsock_close_ctx+0x70>
   22904:	f000 fb4e 	bl	22fa4 <__errno>
   22908:	426d      	negs	r5, r5
   2290a:	6005      	str	r5, [r0, #0]
   2290c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   22910:	b003      	add	sp, #12
   22912:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)net_context_recv(ctx, NULL, K_NO_WAIT, NULL);
   22914:	f7ee ffce 	bl	118b4 <net_context_recv>
   22918:	e7df      	b.n	228da <zsock_close_ctx+0x20>
		if (is_listen) {
   2291a:	2e03      	cmp	r6, #3
   2291c:	d102      	bne.n	22924 <zsock_close_ctx+0x6a>
			net_context_put(p);
   2291e:	f7ee ffa5 	bl	1186c <net_context_put>
   22922:	e7e0      	b.n	228e6 <zsock_close_ctx+0x2c>
			net_pkt_unref(p);
   22924:	f001 fd0b 	bl	2433e <net_pkt_unref>
   22928:	e7dd      	b.n	228e6 <zsock_close_ctx+0x2c>
	return 0;
   2292a:	4620      	mov	r0, r4
   2292c:	e7f0      	b.n	22910 <zsock_close_ctx+0x56>

0002292e <z_impl_zsock_close>:
{
   2292e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	void *ctx = z_get_fd_obj_and_vtable(sock, &vtable);
   22930:	a901      	add	r1, sp, #4
{
   22932:	4605      	mov	r5, r0
	void *ctx = z_get_fd_obj_and_vtable(sock, &vtable);
   22934:	f7ec fb42 	bl	efbc <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   22938:	4604      	mov	r4, r0
   2293a:	b150      	cbz	r0, 22952 <z_impl_zsock_close+0x24>
	z_free_fd(sock);
   2293c:	4628      	mov	r0, r5
   2293e:	f7ec fb7f 	bl	f040 <z_free_fd>
	return z_fdtable_call_ioctl(vtable, ctx, ZFD_IOCTL_CLOSE);
   22942:	f44f 7280 	mov.w	r2, #256	; 0x100
   22946:	4621      	mov	r1, r4
   22948:	9801      	ldr	r0, [sp, #4]
   2294a:	f7ff ff6c 	bl	22826 <z_fdtable_call_ioctl>
}
   2294e:	b003      	add	sp, #12
   22950:	bd30      	pop	{r4, r5, pc}
		return -1;
   22952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22956:	e7fa      	b.n	2294e <z_impl_zsock_close+0x20>

00022958 <sock_bind_vmeth>:

static int sock_bind_vmeth(void *obj, const struct sockaddr *addr,
			   socklen_t addrlen)
{
	return zsock_bind_ctx(obj, addr, addrlen);
   22958:	f7ec be2a 	b.w	f5b0 <zsock_bind_ctx>

0002295c <sock_connect_vmeth>:
}

static int sock_connect_vmeth(void *obj, const struct sockaddr *addr,
			      socklen_t addrlen)
{
	return zsock_connect_ctx(obj, addr, addrlen);
   2295c:	f7ec be4a 	b.w	f5f4 <zsock_connect_ctx>

00022960 <z_impl_zsock_connect>:
{
   22960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   22962:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   22964:	a903      	add	r1, sp, #12
{
   22966:	9201      	str	r2, [sp, #4]
	return z_get_fd_obj_and_vtable(sock,
   22968:	f7ec fb28 	bl	efbc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   2296c:	b138      	cbz	r0, 2297e <z_impl_zsock_connect+0x1e>
   2296e:	9b03      	ldr	r3, [sp, #12]
   22970:	691b      	ldr	r3, [r3, #16]
   22972:	b123      	cbz	r3, 2297e <z_impl_zsock_connect+0x1e>
   22974:	4621      	mov	r1, r4
   22976:	9a01      	ldr	r2, [sp, #4]
   22978:	4798      	blx	r3
}
   2297a:	b004      	add	sp, #16
   2297c:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   2297e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22982:	e7fa      	b.n	2297a <z_impl_zsock_connect+0x1a>

00022984 <sock_listen_vmeth>:
}

static int sock_listen_vmeth(void *obj, int backlog)
{
	return zsock_listen_ctx(obj, backlog);
   22984:	f7ec be5e 	b.w	f644 <zsock_listen_ctx>

00022988 <sock_accept_vmeth>:
}

static int sock_accept_vmeth(void *obj, struct sockaddr *addr,
			     socklen_t *addrlen)
{
	return zsock_accept_ctx(obj, addr, addrlen);
   22988:	f7ec be78 	b.w	f67c <zsock_accept_ctx>

0002298c <sock_sendto_vmeth>:

static ssize_t sock_sendto_vmeth(void *obj, const void *buf, size_t len,
				 int flags, const struct sockaddr *dest_addr,
				 socklen_t addrlen)
{
	return zsock_sendto_ctx(obj, buf, len, flags, dest_addr, addrlen);
   2298c:	f7ec bee6 	b.w	f75c <zsock_sendto_ctx>

00022990 <sock_write_vmeth>:
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
   22990:	2300      	movs	r3, #0
{
   22992:	b507      	push	{r0, r1, r2, lr}
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
   22994:	e9cd 3300 	strd	r3, r3, [sp]
   22998:	f7ec fee0 	bl	f75c <zsock_sendto_ctx>
}
   2299c:	b003      	add	sp, #12
   2299e:	f85d fb04 	ldr.w	pc, [sp], #4

000229a2 <z_impl_zsock_sendto>:
{
   229a2:	b530      	push	{r4, r5, lr}
   229a4:	b087      	sub	sp, #28
   229a6:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   229a8:	a905      	add	r1, sp, #20
{
   229aa:	e9cd 3202 	strd	r3, r2, [sp, #8]
	return z_get_fd_obj_and_vtable(sock,
   229ae:	f7ec fb05 	bl	efbc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   229b2:	b160      	cbz	r0, 229ce <z_impl_zsock_sendto+0x2c>
   229b4:	9905      	ldr	r1, [sp, #20]
   229b6:	69cd      	ldr	r5, [r1, #28]
   229b8:	b14d      	cbz	r5, 229ce <z_impl_zsock_sendto+0x2c>
   229ba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   229be:	990b      	ldr	r1, [sp, #44]	; 0x2c
   229c0:	9101      	str	r1, [sp, #4]
   229c2:	990a      	ldr	r1, [sp, #40]	; 0x28
   229c4:	9100      	str	r1, [sp, #0]
   229c6:	4621      	mov	r1, r4
   229c8:	47a8      	blx	r5
}
   229ca:	b007      	add	sp, #28
   229cc:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   229ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   229d2:	e7fa      	b.n	229ca <z_impl_zsock_sendto+0x28>

000229d4 <zsock_sendmsg_ctx>:
{
   229d4:	b530      	push	{r4, r5, lr}
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   229d6:	0653      	lsls	r3, r2, #25
	k_timeout_t timeout = K_FOREVER;
   229d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   229dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
{
   229e0:	b085      	sub	sp, #20
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   229e2:	d402      	bmi.n	229ea <zsock_sendmsg_ctx+0x16>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   229e4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   229e6:	079b      	lsls	r3, r3, #30
   229e8:	d501      	bpl.n	229ee <zsock_sendmsg_ctx+0x1a>
		timeout = K_NO_WAIT;
   229ea:	2400      	movs	r4, #0
   229ec:	2500      	movs	r5, #0
	status = net_context_sendmsg(ctx, msg, flags, NULL, timeout, NULL);
   229ee:	2300      	movs	r3, #0
   229f0:	e9cd 4500 	strd	r4, r5, [sp]
   229f4:	9302      	str	r3, [sp, #8]
   229f6:	f001 fb8c 	bl	24112 <net_context_sendmsg>
	if (status < 0) {
   229fa:	1e04      	subs	r4, r0, #0
   229fc:	da05      	bge.n	22a0a <zsock_sendmsg_ctx+0x36>
		errno = -status;
   229fe:	f000 fad1 	bl	22fa4 <__errno>
   22a02:	4264      	negs	r4, r4
   22a04:	6004      	str	r4, [r0, #0]
		return -1;
   22a06:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   22a0a:	4620      	mov	r0, r4
   22a0c:	b005      	add	sp, #20
   22a0e:	bd30      	pop	{r4, r5, pc}

00022a10 <sock_sendmsg_vmeth>:
}

static ssize_t sock_sendmsg_vmeth(void *obj, const struct msghdr *msg,
				  int flags)
{
	return zsock_sendmsg_ctx(obj, msg, flags);
   22a10:	f7ff bfe0 	b.w	229d4 <zsock_sendmsg_ctx>

00022a14 <zsock_recvfrom_ctx>:
{
   22a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a18:	b08f      	sub	sp, #60	; 0x3c
   22a1a:	4604      	mov	r4, r0
   22a1c:	468b      	mov	fp, r1
   22a1e:	461e      	mov	r6, r3
	if (max_len == 0) {
   22a20:	4617      	mov	r7, r2
{
   22a22:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (max_len == 0) {
   22a24:	2a00      	cmp	r2, #0
   22a26:	f000 810b 	beq.w	22c40 <zsock_recvfrom_ctx+0x22c>
	enum net_sock_type sock_type = net_context_get_type(ctx);
   22a2a:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   22a2e:	f3c3 1281 	ubfx	r2, r3, #6, #2
	if (sock_type == SOCK_DGRAM) {
   22a32:	2a02      	cmp	r2, #2
   22a34:	f040 80e8 	bne.w	22c08 <zsock_recvfrom_ctx+0x1f4>
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   22a38:	f016 0240 	ands.w	r2, r6, #64	; 0x40
   22a3c:	d134      	bne.n	22aa8 <zsock_recvfrom_ctx+0x94>
   22a3e:	6e83      	ldr	r3, [r0, #104]	; 0x68
   22a40:	f083 0302 	eor.w	r3, r3, #2
   22a44:	f3c3 0840 	ubfx	r8, r3, #1, #1
   22a48:	f1d8 0800 	rsbs	r8, r8, #0
   22a4c:	eb62 0942 	sbc.w	r9, r2, r2, lsl #1
	if (flags & ZSOCK_MSG_PEEK) {
   22a50:	f016 0302 	ands.w	r3, r6, #2
   22a54:	f104 0a6c 	add.w	sl, r4, #108	; 0x6c
   22a58:	9300      	str	r3, [sp, #0]
   22a5a:	d034      	beq.n	22ac6 <zsock_recvfrom_ctx+0xb2>
	struct k_poll_event events[] = {
   22a5c:	2210      	movs	r2, #16
   22a5e:	2100      	movs	r1, #0
   22a60:	a809      	add	r0, sp, #36	; 0x24
   22a62:	f004 ffaa 	bl	279ba <memset>
   22a66:	2304      	movs	r3, #4
   22a68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   22a6c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   22a70:	2101      	movs	r1, #1
   22a72:	464b      	mov	r3, r9
   22a74:	4642      	mov	r2, r8
   22a76:	a809      	add	r0, sp, #36	; 0x24
   22a78:	f7fc faaa 	bl	1efd0 <z_impl_k_poll>
		if (res && res != -EAGAIN && res != -EINTR) {
   22a7c:	f100 030b 	add.w	r3, r0, #11
   22a80:	2b0b      	cmp	r3, #11
   22a82:	4606      	mov	r6, r0
   22a84:	d806      	bhi.n	22a94 <zsock_recvfrom_ctx+0x80>
   22a86:	f640 0181 	movw	r1, #2177	; 0x881
   22a8a:	40d9      	lsrs	r1, r3
   22a8c:	43c9      	mvns	r1, r1
   22a8e:	f011 0101 	ands.w	r1, r1, #1
   22a92:	d00e      	beq.n	22ab2 <zsock_recvfrom_ctx+0x9e>
			errno = -res;
   22a94:	f000 fa86 	bl	22fa4 <__errno>
   22a98:	4276      	negs	r6, r6
   22a9a:	6006      	str	r6, [r0, #0]
		return -1;
   22a9c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
}
   22aa0:	4648      	mov	r0, r9
   22aa2:	b00f      	add	sp, #60	; 0x3c
   22aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_NO_WAIT;
   22aa8:	f04f 0800 	mov.w	r8, #0
   22aac:	f04f 0900 	mov.w	r9, #0
   22ab0:	e7ce      	b.n	22a50 <zsock_recvfrom_ctx+0x3c>
	return z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   22ab2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   22ab4:	f004 fbca 	bl	2724c <z_queue_node_peek>
	return z_impl_k_queue_get(queue, timeout);
   22ab8:	4606      	mov	r6, r0
	if (!pkt) {
   22aba:	b950      	cbnz	r0, 22ad2 <zsock_recvfrom_ctx+0xbe>
		errno = EAGAIN;
   22abc:	f000 fa72 	bl	22fa4 <__errno>
   22ac0:	230b      	movs	r3, #11
   22ac2:	6003      	str	r3, [r0, #0]
   22ac4:	e7ea      	b.n	22a9c <zsock_recvfrom_ctx+0x88>
   22ac6:	4642      	mov	r2, r8
   22ac8:	464b      	mov	r3, r9
   22aca:	4650      	mov	r0, sl
   22acc:	f7fb fc3e 	bl	1e34c <z_impl_k_queue_get>
   22ad0:	e7f2      	b.n	22ab8 <zsock_recvfrom_ctx+0xa4>
	backup->pos = pkt->cursor.pos;
   22ad2:	e9d0 a805 	ldrd	sl, r8, [r0, #20]
	if (src_addr && addrlen) {
   22ad6:	2d00      	cmp	r5, #0
   22ad8:	d073      	beq.n	22bc2 <zsock_recvfrom_ctx+0x1ae>
   22ada:	9b19      	ldr	r3, [sp, #100]	; 0x64
   22adc:	2b00      	cmp	r3, #0
   22ade:	d070      	beq.n	22bc2 <zsock_recvfrom_ctx+0x1ae>
		rv = sock_get_pkt_src_addr(pkt, net_context_get_ip_proto(ctx),
   22ae0:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
   22ae4:	9301      	str	r3, [sp, #4]
   22ae6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   22ae8:	681c      	ldr	r4, [r3, #0]
	net_pkt_cursor_init(pkt);
   22aea:	f001 fc98 	bl	2441e <net_pkt_cursor_init>
	return pkt->family;
   22aee:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
   22af2:	f3c3 0342 	ubfx	r3, r3, #1, #3
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   22af6:	2b02      	cmp	r3, #2
	addr->sa_family = net_pkt_family(pkt);
   22af8:	802b      	strh	r3, [r5, #0]
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   22afa:	d010      	beq.n	22b1e <zsock_recvfrom_ctx+0x10a>
		ret = -ENOTSUP;
   22afc:	f06f 0485 	mvn.w	r4, #133	; 0x85
	pkt->cursor.pos = backup->pos;
   22b00:	e9c6 a805 	strd	sl, r8, [r6, #20]
		if (rv < 0) {
   22b04:	2c00      	cmp	r4, #0
   22b06:	d056      	beq.n	22bb6 <zsock_recvfrom_ctx+0x1a2>
			errno = -rv;
   22b08:	f000 fa4c 	bl	22fa4 <__errno>
   22b0c:	4264      	negs	r4, r4
   22b0e:	6004      	str	r4, [r0, #0]
	if (!(flags & ZSOCK_MSG_PEEK)) {
   22b10:	9b00      	ldr	r3, [sp, #0]
   22b12:	2b00      	cmp	r3, #0
   22b14:	d1c2      	bne.n	22a9c <zsock_recvfrom_ctx+0x88>
		net_pkt_unref(pkt);
   22b16:	4630      	mov	r0, r6
   22b18:	f001 fc11 	bl	2433e <net_pkt_unref>
   22b1c:	e7be      	b.n	22a9c <zsock_recvfrom_ctx+0x88>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access,
   22b1e:	2000      	movs	r0, #0
   22b20:	2328      	movs	r3, #40	; 0x28
		if (addrlen < sizeof(struct sockaddr_in6)) {
   22b22:	2c17      	cmp	r4, #23
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access,
   22b24:	e9cd 0307 	strd	r0, r3, [sp, #28]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   22b28:	d942      	bls.n	22bb0 <zsock_recvfrom_ctx+0x19c>
		ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(
   22b2a:	4630      	mov	r0, r6
   22b2c:	a907      	add	r1, sp, #28
   22b2e:	f001 fe5c 	bl	247ea <net_pkt_get_data>
		if (!ipv6_hdr ||
   22b32:	4681      	mov	r9, r0
   22b34:	b910      	cbnz	r0, 22b3c <zsock_recvfrom_ctx+0x128>
			ret = -ENOBUFS;
   22b36:	f06f 0468 	mvn.w	r4, #104	; 0x68
   22b3a:	e7e1      	b.n	22b00 <zsock_recvfrom_ctx+0xec>
	return net_pkt_skip(pkt, access->size);
   22b3c:	4630      	mov	r0, r6
   22b3e:	9908      	ldr	r1, [sp, #32]
   22b40:	f001 fcf7 	bl	24532 <net_pkt_skip>
		if (!ipv6_hdr ||
   22b44:	2800      	cmp	r0, #0
   22b46:	d1f6      	bne.n	22b36 <zsock_recvfrom_ctx+0x122>
		    net_pkt_skip(pkt, net_pkt_ipv6_ext_len(pkt))) {
   22b48:	4630      	mov	r0, r6
   22b4a:	8ff1      	ldrh	r1, [r6, #62]	; 0x3e
   22b4c:	f001 fcf1 	bl	24532 <net_pkt_skip>
		    net_pkt_acknowledge_data(pkt, &ipv6_access) ||
   22b50:	4604      	mov	r4, r0
   22b52:	2800      	cmp	r0, #0
   22b54:	d1ef      	bne.n	22b36 <zsock_recvfrom_ctx+0x122>
		net_ipaddr_copy(&addr6->sin6_addr, &ipv6_hdr->src);
   22b56:	f109 0308 	add.w	r3, r9, #8
   22b5a:	aa09      	add	r2, sp, #36	; 0x24
   22b5c:	f109 0918 	add.w	r9, r9, #24
   22b60:	4694      	mov	ip, r2
   22b62:	6818      	ldr	r0, [r3, #0]
   22b64:	6859      	ldr	r1, [r3, #4]
   22b66:	3308      	adds	r3, #8
   22b68:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   22b6c:	454b      	cmp	r3, r9
   22b6e:	4662      	mov	r2, ip
   22b70:	d1f6      	bne.n	22b60 <zsock_recvfrom_ctx+0x14c>
   22b72:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   22b76:	1d2a      	adds	r2, r5, #4
   22b78:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
   22b7c:	4663      	mov	r3, ip
   22b7e:	cb03      	ldmia	r3!, {r0, r1}
   22b80:	4573      	cmp	r3, lr
   22b82:	6010      	str	r0, [r2, #0]
   22b84:	6051      	str	r1, [r2, #4]
   22b86:	469c      	mov	ip, r3
   22b88:	f102 0208 	add.w	r2, r2, #8
   22b8c:	d1f6      	bne.n	22b7c <zsock_recvfrom_ctx+0x168>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   22b8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   22b92:	2b11      	cmp	r3, #17
   22b94:	d1b2      	bne.n	22afc <zsock_recvfrom_ctx+0xe8>
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   22b96:	ab05      	add	r3, sp, #20
   22b98:	9307      	str	r3, [sp, #28]
   22b9a:	2308      	movs	r3, #8
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
   22b9c:	4630      	mov	r0, r6
   22b9e:	a907      	add	r1, sp, #28
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   22ba0:	9308      	str	r3, [sp, #32]
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
   22ba2:	f001 fe22 	bl	247ea <net_pkt_get_data>
		if (!udp_hdr) {
   22ba6:	2800      	cmp	r0, #0
   22ba8:	d0c5      	beq.n	22b36 <zsock_recvfrom_ctx+0x122>
		*port = udp_hdr->src_port;
   22baa:	8803      	ldrh	r3, [r0, #0]
   22bac:	806b      	strh	r3, [r5, #2]
   22bae:	e7a7      	b.n	22b00 <zsock_recvfrom_ctx+0xec>
			ret = -EINVAL;
   22bb0:	f06f 0415 	mvn.w	r4, #21
   22bb4:	e7a4      	b.n	22b00 <zsock_recvfrom_ctx+0xec>
		if (src_addr->sa_family == AF_INET) {
   22bb6:	882b      	ldrh	r3, [r5, #0]
   22bb8:	2b01      	cmp	r3, #1
   22bba:	d113      	bne.n	22be4 <zsock_recvfrom_ctx+0x1d0>
			*addrlen = sizeof(struct sockaddr_in);
   22bbc:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
   22bbe:	9a19      	ldr	r2, [sp, #100]	; 0x64
   22bc0:	6013      	str	r3, [r2, #0]
	recv_len = net_pkt_remaining_data(pkt);
   22bc2:	4630      	mov	r0, r6
   22bc4:	f001 fd2c 	bl	24620 <net_pkt_remaining_data>
	if (recv_len > max_len) {
   22bc8:	4287      	cmp	r7, r0
   22bca:	bf28      	it	cs
   22bcc:	4607      	movcs	r7, r0
	if (net_pkt_read(pkt, buf, recv_len)) {
   22bce:	4659      	mov	r1, fp
   22bd0:	463a      	mov	r2, r7
   22bd2:	4630      	mov	r0, r6
   22bd4:	46b9      	mov	r9, r7
   22bd6:	f001 fcc2 	bl	2455e <net_pkt_read>
   22bda:	b160      	cbz	r0, 22bf6 <zsock_recvfrom_ctx+0x1e2>
		errno = ENOBUFS;
   22bdc:	f000 f9e2 	bl	22fa4 <__errno>
   22be0:	2369      	movs	r3, #105	; 0x69
   22be2:	e006      	b.n	22bf2 <zsock_recvfrom_ctx+0x1de>
		} else if (src_addr->sa_family == AF_INET6) {
   22be4:	2b02      	cmp	r3, #2
   22be6:	d101      	bne.n	22bec <zsock_recvfrom_ctx+0x1d8>
			*addrlen = sizeof(struct sockaddr_in6);
   22be8:	2318      	movs	r3, #24
   22bea:	e7e8      	b.n	22bbe <zsock_recvfrom_ctx+0x1aa>
			errno = ENOTSUP;
   22bec:	f000 f9da 	bl	22fa4 <__errno>
   22bf0:	2386      	movs	r3, #134	; 0x86
		errno = ENOBUFS;
   22bf2:	6003      	str	r3, [r0, #0]
		goto fail;
   22bf4:	e78c      	b.n	22b10 <zsock_recvfrom_ctx+0xfc>
	if (!(flags & ZSOCK_MSG_PEEK)) {
   22bf6:	9b00      	ldr	r3, [sp, #0]
   22bf8:	b91b      	cbnz	r3, 22c02 <zsock_recvfrom_ctx+0x1ee>
		net_pkt_unref(pkt);
   22bfa:	4630      	mov	r0, r6
   22bfc:	f001 fb9f 	bl	2433e <net_pkt_unref>
   22c00:	e74e      	b.n	22aa0 <zsock_recvfrom_ctx+0x8c>
	pkt->cursor.pos = backup->pos;
   22c02:	e9c6 a805 	strd	sl, r8, [r6, #20]
	return recv_len;
   22c06:	e74b      	b.n	22aa0 <zsock_recvfrom_ctx+0x8c>
	} else if (sock_type == SOCK_STREAM) {
   22c08:	2a01      	cmp	r2, #1
   22c0a:	d119      	bne.n	22c40 <zsock_recvfrom_ctx+0x22c>
	if (!net_context_is_used(ctx)) {
   22c0c:	07d9      	lsls	r1, r3, #31
   22c0e:	d403      	bmi.n	22c18 <zsock_recvfrom_ctx+0x204>
		errno = EBADF;
   22c10:	f000 f9c8 	bl	22fa4 <__errno>
   22c14:	2309      	movs	r3, #9
   22c16:	e754      	b.n	22ac2 <zsock_recvfrom_ctx+0xae>
   22c18:	6e83      	ldr	r3, [r0, #104]	; 0x68
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   22c1a:	f006 0240 	and.w	r2, r6, #64	; 0x40
   22c1e:	f003 0302 	and.w	r3, r3, #2
   22c22:	4313      	orrs	r3, r2
   22c24:	bf0c      	ite	eq
   22c26:	2301      	moveq	r3, #1
   22c28:	2300      	movne	r3, #0
   22c2a:	4259      	negs	r1, r3
   22c2c:	eb62 0202 	sbc.w	r2, r2, r2
   22c30:	e9cd 1202 	strd	r1, r2, [sp, #8]
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   22c34:	f100 0a6c 	add.w	sl, r0, #108	; 0x6c
   22c38:	6ea1      	ldr	r1, [r4, #104]	; 0x68
		if (sock_is_eof(ctx)) {
   22c3a:	f011 0101 	ands.w	r1, r1, #1
   22c3e:	d002      	beq.n	22c46 <zsock_recvfrom_ctx+0x232>
		return 0;
   22c40:	f04f 0900 	mov.w	r9, #0
   22c44:	e72c      	b.n	22aa0 <zsock_recvfrom_ctx+0x8c>
	struct k_poll_event events[] = {
   22c46:	2210      	movs	r2, #16
   22c48:	a809      	add	r0, sp, #36	; 0x24
   22c4a:	f004 feb6 	bl	279ba <memset>
   22c4e:	2204      	movs	r2, #4
   22c50:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   22c54:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   22c58:	f362 0303 	bfi	r3, r2, #0, #4
   22c5c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	return z_impl_k_poll(events, num_events, timeout);
   22c60:	2101      	movs	r1, #1
   22c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22c66:	a809      	add	r0, sp, #36	; 0x24
   22c68:	f7fc f9b2 	bl	1efd0 <z_impl_k_poll>
		if (res && res != -EAGAIN && res != -EINTR) {
   22c6c:	f100 030b 	add.w	r3, r0, #11
   22c70:	2b0b      	cmp	r3, #11
   22c72:	4605      	mov	r5, r0
   22c74:	d806      	bhi.n	22c84 <zsock_recvfrom_ctx+0x270>
   22c76:	f640 0181 	movw	r1, #2177	; 0x881
   22c7a:	40d9      	lsrs	r1, r3
   22c7c:	43c9      	mvns	r1, r1
   22c7e:	f011 0101 	ands.w	r1, r1, #1
   22c82:	d004      	beq.n	22c8e <zsock_recvfrom_ctx+0x27a>
			errno = -res;
   22c84:	f000 f98e 	bl	22fa4 <__errno>
   22c88:	426d      	negs	r5, r5
   22c8a:	6005      	str	r5, [r0, #0]
			return -1;
   22c8c:	e706      	b.n	22a9c <zsock_recvfrom_ctx+0x88>
   22c8e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   22c90:	f004 fadc 	bl	2724c <z_queue_node_peek>
		if (!pkt) {
   22c94:	4605      	mov	r5, r0
   22c96:	b918      	cbnz	r0, 22ca0 <zsock_recvfrom_ctx+0x28c>
   22c98:	6ea3      	ldr	r3, [r4, #104]	; 0x68
			if (sock_is_eof(ctx)) {
   22c9a:	07da      	lsls	r2, r3, #31
   22c9c:	d4d0      	bmi.n	22c40 <zsock_recvfrom_ctx+0x22c>
   22c9e:	e70d      	b.n	22abc <zsock_recvfrom_ctx+0xa8>
	backup->buf = pkt->cursor.buf;
   22ca0:	6943      	ldr	r3, [r0, #20]
   22ca2:	46b9      	mov	r9, r7
   22ca4:	9301      	str	r3, [sp, #4]
	backup->pos = pkt->cursor.pos;
   22ca6:	6983      	ldr	r3, [r0, #24]
   22ca8:	9300      	str	r3, [sp, #0]
		data_len = net_pkt_remaining_data(pkt);
   22caa:	f001 fcb9 	bl	24620 <net_pkt_remaining_data>
   22cae:	4287      	cmp	r7, r0
   22cb0:	bf28      	it	cs
   22cb2:	4681      	movcs	r9, r0
   22cb4:	4680      	mov	r8, r0
		if (net_pkt_read(pkt, buf, recv_len)) {
   22cb6:	464a      	mov	r2, r9
   22cb8:	4659      	mov	r1, fp
   22cba:	4628      	mov	r0, r5
   22cbc:	f001 fc4f 	bl	2455e <net_pkt_read>
   22cc0:	9b01      	ldr	r3, [sp, #4]
   22cc2:	b118      	cbz	r0, 22ccc <zsock_recvfrom_ctx+0x2b8>
			errno = ENOBUFS;
   22cc4:	f000 f96e 	bl	22fa4 <__errno>
   22cc8:	2369      	movs	r3, #105	; 0x69
   22cca:	e6fa      	b.n	22ac2 <zsock_recvfrom_ctx+0xae>
		if (!(flags & ZSOCK_MSG_PEEK)) {
   22ccc:	f016 0202 	ands.w	r2, r6, #2
   22cd0:	9201      	str	r2, [sp, #4]
   22cd2:	d11d      	bne.n	22d10 <zsock_recvfrom_ctx+0x2fc>
			if (recv_len == data_len) {
   22cd4:	4547      	cmp	r7, r8
   22cd6:	d30f      	bcc.n	22cf8 <zsock_recvfrom_ctx+0x2e4>
	return z_impl_k_queue_get(queue, timeout);
   22cd8:	2300      	movs	r3, #0
   22cda:	2200      	movs	r2, #0
   22cdc:	4650      	mov	r0, sl
   22cde:	f7fb fb35 	bl	1e34c <z_impl_k_queue_get>
	return pkt->sent_or_eof;
   22ce2:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
				net_pkt_unref(pkt);
   22ce6:	4628      	mov	r0, r5
				if (net_pkt_eof(pkt)) {
   22ce8:	079b      	lsls	r3, r3, #30
	val = (val & ~mask) | flag;
   22cea:	bf42      	ittt	mi
   22cec:	6ea3      	ldrmi	r3, [r4, #104]	; 0x68
   22cee:	f043 0301 	orrmi.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   22cf2:	66a3      	strmi	r3, [r4, #104]	; 0x68
				net_pkt_unref(pkt);
   22cf4:	f001 fb23 	bl	2433e <net_pkt_unref>
	} while (recv_len == 0);
   22cf8:	f1b9 0f00 	cmp.w	r9, #0
   22cfc:	d09c      	beq.n	22c38 <zsock_recvfrom_ctx+0x224>
	if (!(flags & ZSOCK_MSG_PEEK)) {
   22cfe:	9b01      	ldr	r3, [sp, #4]
   22d00:	2b00      	cmp	r3, #0
   22d02:	f47f aecd 	bne.w	22aa0 <zsock_recvfrom_ctx+0x8c>
		net_context_update_recv_wnd(ctx, recv_len);
   22d06:	4649      	mov	r1, r9
   22d08:	4620      	mov	r0, r4
   22d0a:	f001 fa47 	bl	2419c <net_context_update_recv_wnd>
		return zsock_recv_stream(ctx, buf, max_len, flags);
   22d0e:	e6c7      	b.n	22aa0 <zsock_recvfrom_ctx+0x8c>
	pkt->cursor.buf = backup->buf;
   22d10:	616b      	str	r3, [r5, #20]
	pkt->cursor.pos = backup->pos;
   22d12:	9b00      	ldr	r3, [sp, #0]
   22d14:	61ab      	str	r3, [r5, #24]
}
   22d16:	e7ef      	b.n	22cf8 <zsock_recvfrom_ctx+0x2e4>

00022d18 <sock_recvfrom_vmeth>:

static ssize_t sock_recvfrom_vmeth(void *obj, void *buf, size_t max_len,
				   int flags, struct sockaddr *src_addr,
				   socklen_t *addrlen)
{
	return zsock_recvfrom_ctx(obj, buf, max_len, flags,
   22d18:	f7ff be7c 	b.w	22a14 <zsock_recvfrom_ctx>

00022d1c <sock_read_vmeth>:
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
   22d1c:	2300      	movs	r3, #0
{
   22d1e:	b507      	push	{r0, r1, r2, lr}
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
   22d20:	e9cd 3300 	strd	r3, r3, [sp]
   22d24:	f7ff fe76 	bl	22a14 <zsock_recvfrom_ctx>
}
   22d28:	b003      	add	sp, #12
   22d2a:	f85d fb04 	ldr.w	pc, [sp], #4

00022d2e <z_impl_zsock_recvfrom>:
{
   22d2e:	b530      	push	{r4, r5, lr}
   22d30:	b087      	sub	sp, #28
   22d32:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   22d34:	a905      	add	r1, sp, #20
{
   22d36:	e9cd 3202 	strd	r3, r2, [sp, #8]
	return z_get_fd_obj_and_vtable(sock,
   22d3a:	f7ec f93f 	bl	efbc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   22d3e:	b160      	cbz	r0, 22d5a <z_impl_zsock_recvfrom+0x2c>
   22d40:	9905      	ldr	r1, [sp, #20]
   22d42:	6a0d      	ldr	r5, [r1, #32]
   22d44:	b14d      	cbz	r5, 22d5a <z_impl_zsock_recvfrom+0x2c>
   22d46:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   22d4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   22d4c:	9101      	str	r1, [sp, #4]
   22d4e:	990a      	ldr	r1, [sp, #40]	; 0x28
   22d50:	9100      	str	r1, [sp, #0]
   22d52:	4621      	mov	r1, r4
   22d54:	47a8      	blx	r5
}
   22d56:	b007      	add	sp, #28
   22d58:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   22d5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22d5e:	e7fa      	b.n	22d56 <z_impl_zsock_recvfrom+0x28>

00022d60 <zsock_setsockopt_ctx>:
	switch (level) {
   22d60:	2906      	cmp	r1, #6
{
   22d62:	b508      	push	{r3, lr}
	switch (level) {
   22d64:	d00c      	beq.n	22d80 <zsock_setsockopt_ctx+0x20>
   22d66:	2929      	cmp	r1, #41	; 0x29
   22d68:	d00c      	beq.n	22d84 <zsock_setsockopt_ctx+0x24>
   22d6a:	2901      	cmp	r1, #1
   22d6c:	d101      	bne.n	22d72 <zsock_setsockopt_ctx+0x12>
		switch (optname) {
   22d6e:	2a02      	cmp	r2, #2
   22d70:	d00a      	beq.n	22d88 <zsock_setsockopt_ctx+0x28>
	errno = ENOPROTOOPT;
   22d72:	f000 f917 	bl	22fa4 <__errno>
   22d76:	236d      	movs	r3, #109	; 0x6d
   22d78:	6003      	str	r3, [r0, #0]
   22d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   22d7e:	bd08      	pop	{r3, pc}
		switch (optname) {
   22d80:	2a01      	cmp	r2, #1
   22d82:	e7f5      	b.n	22d70 <zsock_setsockopt_ctx+0x10>
		switch (optname) {
   22d84:	2a1a      	cmp	r2, #26
   22d86:	e7f3      	b.n	22d70 <zsock_setsockopt_ctx+0x10>
			return 0;
   22d88:	2000      	movs	r0, #0
   22d8a:	e7f8      	b.n	22d7e <zsock_setsockopt_ctx+0x1e>

00022d8c <sock_setsockopt_vmeth>:
}

static int sock_setsockopt_vmeth(void *obj, int level, int optname,
				 const void *optval, socklen_t optlen)
{
	return zsock_setsockopt_ctx(obj, level, optname, optval, optlen);
   22d8c:	f7ff bfe8 	b.w	22d60 <zsock_setsockopt_ctx>

00022d90 <z_impl_zsock_setsockopt>:
{
   22d90:	b530      	push	{r4, r5, lr}
   22d92:	b087      	sub	sp, #28
   22d94:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   22d96:	a905      	add	r1, sp, #20
{
   22d98:	e9cd 3202 	strd	r3, r2, [sp, #8]
	return z_get_fd_obj_and_vtable(sock,
   22d9c:	f7ec f90e 	bl	efbc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   22da0:	b150      	cbz	r0, 22db8 <z_impl_zsock_setsockopt+0x28>
   22da2:	9905      	ldr	r1, [sp, #20]
   22da4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   22da6:	b13d      	cbz	r5, 22db8 <z_impl_zsock_setsockopt+0x28>
   22da8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   22dac:	990a      	ldr	r1, [sp, #40]	; 0x28
   22dae:	9100      	str	r1, [sp, #0]
   22db0:	4621      	mov	r1, r4
   22db2:	47a8      	blx	r5
}
   22db4:	b007      	add	sp, #28
   22db6:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   22db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22dbc:	e7fa      	b.n	22db4 <z_impl_zsock_setsockopt+0x24>

00022dbe <zsock_getsockname_ctx>:
{
   22dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
   22dc0:	4614      	mov	r4, r2
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   22dc2:	8b82      	ldrh	r2, [r0, #28]
{
   22dc4:	460d      	mov	r5, r1
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   22dc6:	2a02      	cmp	r2, #2
   22dc8:	f04f 0300 	mov.w	r3, #0
{
   22dcc:	b087      	sub	sp, #28
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   22dce:	d11a      	bne.n	22e06 <zsock_getsockname_ctx+0x48>
		struct sockaddr_in6 addr6 = { 0 };
   22dd0:	9305      	str	r3, [sp, #20]
		addr6.sin6_port = net_sin6_ptr(&ctx->local)->sin6_port;
   22dd2:	8bc3      	ldrh	r3, [r0, #30]
		addr6.sin6_family = AF_INET6;
   22dd4:	f8ad 2000 	strh.w	r2, [sp]
		addr6.sin6_port = net_sin6_ptr(&ctx->local)->sin6_port;
   22dd8:	f8ad 3002 	strh.w	r3, [sp, #2]
		memcpy(&addr6.sin6_addr, net_sin6_ptr(&ctx->local)->sin6_addr,
   22ddc:	6a03      	ldr	r3, [r0, #32]
   22dde:	ae01      	add	r6, sp, #4
   22de0:	f103 0710 	add.w	r7, r3, #16
   22de4:	4632      	mov	r2, r6
   22de6:	6818      	ldr	r0, [r3, #0]
   22de8:	6859      	ldr	r1, [r3, #4]
   22dea:	3308      	adds	r3, #8
   22dec:	c203      	stmia	r2!, {r0, r1}
   22dee:	42bb      	cmp	r3, r7
   22df0:	4616      	mov	r6, r2
   22df2:	d1f7      	bne.n	22de4 <zsock_getsockname_ctx+0x26>
		memcpy(addr, &addr6, MIN(*addrlen, newlen));
   22df4:	6822      	ldr	r2, [r4, #0]
   22df6:	4669      	mov	r1, sp
   22df8:	2a18      	cmp	r2, #24
   22dfa:	bf28      	it	cs
   22dfc:	2218      	movcs	r2, #24
   22dfe:	4628      	mov	r0, r5
   22e00:	f004 fda1 	bl	27946 <memcpy>
		newlen = sizeof(struct sockaddr_in6);
   22e04:	2318      	movs	r3, #24
}
   22e06:	2000      	movs	r0, #0
	*addrlen = newlen;
   22e08:	6023      	str	r3, [r4, #0]
}
   22e0a:	b007      	add	sp, #28
   22e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022e0e <get_status>:
	if (data->started) {
   22e0e:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
   22e10:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
   22e12:	b2c9      	uxtb	r1, r1
	if (data->started) {
   22e14:	fb02 3101 	mla	r1, r2, r1, r3
   22e18:	7a4b      	ldrb	r3, [r1, #9]
   22e1a:	b923      	cbnz	r3, 22e26 <get_status+0x18>
	if (data->ref > 0) {
   22e1c:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   22e1e:	fab0 f080 	clz	r0, r0
   22e22:	0940      	lsrs	r0, r0, #5
   22e24:	4770      	bx	lr
   22e26:	2002      	movs	r0, #2
}
   22e28:	4770      	bx	lr

00022e2a <clock_stop>:
{
   22e2a:	b570      	push	{r4, r5, r6, lr}
   22e2c:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
   22e2e:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
   22e30:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
   22e32:	f04f 0320 	mov.w	r3, #32
   22e36:	f3ef 8611 	mrs	r6, BASEPRI
   22e3a:	f383 8811 	msr	BASEPRI, r3
   22e3e:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   22e42:	230c      	movs	r3, #12
   22e44:	434b      	muls	r3, r1
   22e46:	18ea      	adds	r2, r5, r3
   22e48:	7a10      	ldrb	r0, [r2, #8]
   22e4a:	b1a0      	cbz	r0, 22e76 <clock_stop+0x4c>
	data->ref--;
   22e4c:	3801      	subs	r0, #1
   22e4e:	b2c0      	uxtb	r0, r0
   22e50:	7210      	strb	r0, [r2, #8]
	if (data->ref == 0) {
   22e52:	b998      	cbnz	r0, 22e7c <clock_stop+0x52>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   22e54:	eb04 0181 	add.w	r1, r4, r1, lsl #2
	list->head = NULL;
   22e58:	50e8      	str	r0, [r5, r3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22e5a:	78cb      	ldrb	r3, [r1, #3]
   22e5c:	2101      	movs	r1, #1
   22e5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22e62:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
	list->tail = NULL;
   22e66:	6050      	str	r0, [r2, #4]
   22e68:	6019      	str	r1, [r3, #0]
		data->started = false;
   22e6a:	7250      	strb	r0, [r2, #9]
	__asm__ volatile(
   22e6c:	f386 8811 	msr	BASEPRI, r6
   22e70:	f3bf 8f6f 	isb	sy
}
   22e74:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   22e76:	f06f 0077 	mvn.w	r0, #119	; 0x77
   22e7a:	e7f7      	b.n	22e6c <clock_stop+0x42>
	int err = 0;
   22e7c:	2000      	movs	r0, #0
   22e7e:	e7f5      	b.n	22e6c <clock_stop+0x42>

00022e80 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   22e80:	2200      	movs	r2, #0
   22e82:	f7ec bd99 	b.w	f9b8 <clock_async_start>

00022e86 <wdt_nrf_disable>:
}
   22e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22e8a:	4770      	bx	lr

00022e8c <wdt_nrf_feed>:
{
   22e8c:	b508      	push	{r3, lr}
	if (channel_id > get_dev_data(dev)->m_allocated_channels) {
   22e8e:	68c3      	ldr	r3, [r0, #12]
   22e90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   22e94:	428b      	cmp	r3, r1
   22e96:	db05      	blt.n	22ea4 <wdt_nrf_feed+0x18>
	nrfx_wdt_channel_feed(&get_dev_config(dev)->wdt,
   22e98:	6840      	ldr	r0, [r0, #4]
   22e9a:	b2c9      	uxtb	r1, r1
   22e9c:	f7fa fef8 	bl	1dc90 <nrfx_wdt_channel_feed>
	return 0;
   22ea0:	2000      	movs	r0, #0
}
   22ea2:	bd08      	pop	{r3, pc}
		return -EINVAL;
   22ea4:	f06f 0015 	mvn.w	r0, #21
   22ea8:	e7fb      	b.n	22ea2 <wdt_nrf_feed+0x16>

00022eaa <wdt_nrf_setup>:
{
   22eaa:	b538      	push	{r3, r4, r5, lr}
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   22eac:	6844      	ldr	r4, [r0, #4]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
   22eae:	f001 0301 	and.w	r3, r1, #1
   22eb2:	f1c3 0309 	rsb	r3, r3, #9
	if (options & WDT_OPT_PAUSE_HALTED_BY_DBG) {
   22eb6:	078a      	lsls	r2, r1, #30
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   22eb8:	6825      	ldr	r5, [r4, #0]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
   22eba:	b2db      	uxtb	r3, r3
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_HALT;
   22ebc:	bf48      	it	mi
   22ebe:	f003 03f7 	andmi.w	r3, r3, #247	; 0xf7
    p_reg->CONFIG = behaviour;
   22ec2:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   22ec6:	68c3      	ldr	r3, [r0, #12]
			   / 1000));
   22ec8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   22ecc:	6a19      	ldr	r1, [r3, #32]
			   / 1000));
   22ece:	2300      	movs	r3, #0
   22ed0:	03c8      	lsls	r0, r1, #15
   22ed2:	0c49      	lsrs	r1, r1, #17
   22ed4:	f7e9 fc70 	bl	c7b8 <__aeabi_uldivmod>
    p_reg->CRV = reload_value;
   22ed8:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
	nrfx_wdt_enable(&get_dev_config(dev)->wdt);
   22edc:	4620      	mov	r0, r4
   22ede:	f7fa fea1 	bl	1dc24 <nrfx_wdt_enable>
}
   22ee2:	2000      	movs	r0, #0
   22ee4:	bd38      	pop	{r3, r4, r5, pc}

00022ee6 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   22ee6:	4770      	bx	lr

00022ee8 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   22ee8:	4770      	bx	lr

00022eea <sys_clock_disable>:
   22eea:	4770      	bx	lr

00022eec <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   22eec:	2100      	movs	r1, #0
   22eee:	2001      	movs	r0, #1
   22ef0:	f000 b804 	b.w	22efc <z_arm_fatal_error>

00022ef4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   22ef4:	6e03      	ldr	r3, [r0, #96]	; 0x60
   22ef6:	f383 880b 	msr	PSPLIM, r3
}
   22efa:	4770      	bx	lr

00022efc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   22efc:	f004 b868 	b.w	26fd0 <z_fatal_error>

00022f00 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   22f00:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   22f02:	6800      	ldr	r0, [r0, #0]
   22f04:	f004 b864 	b.w	26fd0 <z_fatal_error>

00022f08 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   22f08:	b508      	push	{r3, lr}
	handler();
   22f0a:	f7ed f8c5 	bl	10098 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   22f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   22f12:	f7ed b907 	b.w	10124 <z_arm_exc_exit>

00022f16 <mpu_configure_region>:
{
   22f16:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   22f18:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   22f1a:	680c      	ldr	r4, [r1, #0]
{
   22f1c:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   22f1e:	890a      	ldrh	r2, [r1, #8]
   22f20:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   22f22:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   22f24:	3b01      	subs	r3, #1
   22f26:	f024 041f 	bic.w	r4, r4, #31
   22f2a:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   22f2c:	f002 021f 	and.w	r2, r2, #31
   22f30:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   22f34:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   22f38:	280f      	cmp	r0, #15
   22f3a:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
   22f3c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   22f40:	9303      	str	r3, [sp, #12]
   22f42:	d805      	bhi.n	22f50 <mpu_configure_region+0x3a>
	region_init(index, region_conf);
   22f44:	4669      	mov	r1, sp
   22f46:	f7ed fa41 	bl	103cc <region_init>
}
   22f4a:	4620      	mov	r0, r4
   22f4c:	b005      	add	sp, #20
   22f4e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   22f50:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   22f54:	e7f9      	b.n	22f4a <mpu_configure_region+0x34>

00022f56 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   22f56:	e840 f000 	tt	r0, r0
   22f5a:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   22f5c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   22f60:	bf14      	ite	ne
   22f62:	4618      	movne	r0, r3
   22f64:	f06f 0015 	mvneq.w	r0, #21
   22f68:	4770      	bx	lr

00022f6a <_stdout_hook_default>:
}
   22f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22f6e:	4770      	bx	lr

00022f70 <_stdin_hook_default>:
}
   22f70:	2000      	movs	r0, #0
   22f72:	4770      	bx	lr

00022f74 <_read>:
{
   22f74:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   22f76:	4611      	mov	r1, r2
   22f78:	f7ed bb7c 	b.w	10674 <z_impl_zephyr_read_stdin>

00022f7c <_write>:
{
   22f7c:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   22f7e:	4611      	mov	r1, r2
   22f80:	f7ed bb8c 	b.w	1069c <z_impl_zephyr_write_stdout>

00022f84 <_close>:
   22f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22f88:	4770      	bx	lr

00022f8a <_lseek>:
}
   22f8a:	2000      	movs	r0, #0
   22f8c:	4770      	bx	lr

00022f8e <_isatty>:
}
   22f8e:	2001      	movs	r0, #1
   22f90:	4770      	bx	lr

00022f92 <_kill>:
}
   22f92:	2000      	movs	r0, #0
   22f94:	4770      	bx	lr

00022f96 <_getpid>:
}
   22f96:	2000      	movs	r0, #0
   22f98:	4770      	bx	lr

00022f9a <_fstat>:
	st->st_mode = S_IFCHR;
   22f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   22f9e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   22fa0:	604b      	str	r3, [r1, #4]
}
   22fa2:	4770      	bx	lr

00022fa4 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   22fa4:	f7fa bec6 	b.w	1dd34 <z_impl_z_errno>

00022fa8 <fixed_data_unref>:
}
   22fa8:	4770      	bx	lr

00022faa <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   22faa:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   22fac:	6849      	ldr	r1, [r1, #4]
   22fae:	6809      	ldr	r1, [r1, #0]
   22fb0:	f7ed bbde 	b.w	10770 <net_buf_alloc_len>

00022fb4 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   22fb4:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   22fb6:	4618      	mov	r0, r3
   22fb8:	681b      	ldr	r3, [r3, #0]
   22fba:	2b00      	cmp	r3, #0
   22fbc:	d1fb      	bne.n	22fb6 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   22fbe:	4770      	bx	lr

00022fc0 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   22fc0:	6802      	ldr	r2, [r0, #0]
{
   22fc2:	b510      	push	{r4, lr}
	if (parent->frags) {
   22fc4:	b12a      	cbz	r2, 22fd2 <net_buf_frag_insert+0x12>
   22fc6:	460b      	mov	r3, r1
	while (buf->frags) {
   22fc8:	461c      	mov	r4, r3
   22fca:	681b      	ldr	r3, [r3, #0]
   22fcc:	2b00      	cmp	r3, #0
   22fce:	d1fb      	bne.n	22fc8 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   22fd0:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   22fd2:	6001      	str	r1, [r0, #0]
}
   22fd4:	bd10      	pop	{r4, pc}

00022fd6 <net_buf_simple_add>:
	return buf->data + buf->len;
   22fd6:	8883      	ldrh	r3, [r0, #4]
   22fd8:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   22fda:	4419      	add	r1, r3
   22fdc:	8081      	strh	r1, [r0, #4]
	return tail;
}
   22fde:	18d0      	adds	r0, r2, r3
   22fe0:	4770      	bx	lr

00022fe2 <net_ipv6_is_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22fe2:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22fe4:	b94a      	cbnz	r2, 22ffa <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22fe6:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22fe8:	b93b      	cbnz	r3, 22ffa <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22fea:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22fec:	b92a      	cbnz	r2, 22ffa <net_ipv6_is_addr_loopback+0x18>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   22fee:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22ff0:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
   22ff4:	4258      	negs	r0, r3
   22ff6:	4158      	adcs	r0, r3
   22ff8:	4770      	bx	lr
   22ffa:	2000      	movs	r0, #0
   22ffc:	4770      	bx	lr

00022ffe <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   22ffe:	b538      	push	{r3, r4, r5, lr}
	if (!pkt->frags) {
   23000:	6903      	ldr	r3, [r0, #16]
{
   23002:	4604      	mov	r4, r0
   23004:	460d      	mov	r5, r1
	if (!pkt->frags) {
   23006:	b923      	cbnz	r3, 23012 <processing_data+0x14>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   23008:	4620      	mov	r0, r4
		break;
	}
}
   2300a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_pkt_unref(pkt);
   2300e:	f001 b996 	b.w	2433e <net_pkt_unref>
	if (!is_loopback && !locally_routed) {
   23012:	b171      	cbz	r1, 23032 <processing_data+0x34>
	net_pkt_cursor_init(pkt);
   23014:	4620      	mov	r0, r4
   23016:	f001 fa02 	bl	2441e <net_pkt_cursor_init>
	return pkt->frags->data;
   2301a:	6923      	ldr	r3, [r4, #16]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   2301c:	689b      	ldr	r3, [r3, #8]
   2301e:	781b      	ldrb	r3, [r3, #0]
   23020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   23024:	2b60      	cmp	r3, #96	; 0x60
   23026:	d1ef      	bne.n	23008 <processing_data+0xa>
		return net_ipv6_input(pkt, is_loopback);
   23028:	4629      	mov	r1, r5
   2302a:	4620      	mov	r0, r4
   2302c:	f001 fe1c 	bl	24c68 <net_ipv6_input>
   23030:	e005      	b.n	2303e <processing_data+0x40>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
   23032:	4601      	mov	r1, r0
   23034:	6a00      	ldr	r0, [r0, #32]
   23036:	f000 fc7d 	bl	23934 <net_if_recv_data>
		if (ret != NET_CONTINUE) {
   2303a:	2801      	cmp	r0, #1
   2303c:	d0ea      	beq.n	23014 <processing_data+0x16>
	switch (process_data(pkt, is_loopback)) {
   2303e:	2800      	cmp	r0, #0
   23040:	d1e2      	bne.n	23008 <processing_data+0xa>
}
   23042:	bd38      	pop	{r3, r4, r5, pc}

00023044 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   23044:	b508      	push	{r3, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   23046:	f001 fbf5 	bl	24834 <net_pkt_init>

	net_context_init();
   2304a:	f7ee fccf 	bl	119ec <net_context_init>
	net_icmpv6_init();
   2304e:	f7ee fe31 	bl	11cb4 <net_icmpv6_init>
	net_ipv6_init();
   23052:	f001 ff88 	bl	24f66 <net_ipv6_init>
		net_conn_init();
   23056:	f7ef fe6d 	bl	12d34 <net_conn_init>
	net_route_init();
   2305a:	f002 fef5 	bl	25e48 <net_route_init>
	net_if_init();
   2305e:	f7ee fa17 	bl	11490 <net_if_init>
	net_tc_rx_init();
   23062:	f7ee fdd1 	bl	11c08 <net_tc_rx_init>
	net_if_post_init();
   23066:	f7ee fa73 	bl	11550 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   2306a:	2000      	movs	r0, #0
   2306c:	bd08      	pop	{r3, pc}

0002306e <net_send_data>:
{
   2306e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pkt || !pkt->frags) {
   23072:	4604      	mov	r4, r0
{
   23074:	b090      	sub	sp, #64	; 0x40
	if (!pkt || !pkt->frags) {
   23076:	2800      	cmp	r0, #0
   23078:	f000 8090 	beq.w	2319c <net_send_data+0x12e>
   2307c:	6903      	ldr	r3, [r0, #16]
   2307e:	2b00      	cmp	r3, #0
   23080:	f000 808c 	beq.w	2319c <net_send_data+0x12e>
	if (!net_pkt_iface(pkt)) {
   23084:	6a03      	ldr	r3, [r0, #32]
   23086:	2b00      	cmp	r3, #0
   23088:	f000 808b 	beq.w	231a2 <net_send_data+0x134>
	net_pkt_trim_buffer(pkt);
   2308c:	f001 f9ad 	bl	243ea <net_pkt_trim_buffer>
	net_pkt_cursor_init(pkt);
   23090:	4620      	mov	r0, r4
   23092:	f001 f9c4 	bl	2441e <net_pkt_cursor_init>
	return pkt->family;
   23096:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	if (net_pkt_family(pkt) == AF_INET6) {
   2309a:	f3c3 0342 	ubfx	r3, r3, #1, #3
   2309e:	2b02      	cmp	r3, #2
   230a0:	d172      	bne.n	23188 <net_send_data+0x11a>
	return pkt->frags->data;
   230a2:	6923      	ldr	r3, [r4, #16]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   230a4:	689d      	ldr	r5, [r3, #8]
   230a6:	f7ee fa93 	bl	115d0 <net_ipv6_unspecified_address>
   230aa:	3518      	adds	r5, #24
   230ac:	4601      	mov	r1, r0
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   230ae:	2210      	movs	r2, #16
   230b0:	4628      	mov	r0, r5
   230b2:	f004 fc3a 	bl	2792a <memcmp>
   230b6:	b920      	cbnz	r0, 230c2 <net_send_data+0x54>
			return -EADDRNOTAVAIL;
   230b8:	f06f 007c 	mvn.w	r0, #124	; 0x7c
}
   230bc:	b010      	add	sp, #64	; 0x40
   230be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   230c2:	6923      	ldr	r3, [r4, #16]
		if (net_ipv6_is_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   230c4:	689d      	ldr	r5, [r3, #8]
   230c6:	3518      	adds	r5, #24
   230c8:	4628      	mov	r0, r5
   230ca:	f7ff ff8a 	bl	22fe2 <net_ipv6_is_addr_loopback>
   230ce:	4601      	mov	r1, r0
   230d0:	2800      	cmp	r0, #0
   230d2:	d047      	beq.n	23164 <net_send_data+0xf6>
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   230d4:	ae0c      	add	r6, sp, #48	; 0x30
   230d6:	4635      	mov	r5, r6
   230d8:	6923      	ldr	r3, [r4, #16]
   230da:	689a      	ldr	r2, [r3, #8]
   230dc:	f102 0308 	add.w	r3, r2, #8
   230e0:	3218      	adds	r2, #24
   230e2:	4637      	mov	r7, r6
   230e4:	6818      	ldr	r0, [r3, #0]
   230e6:	6859      	ldr	r1, [r3, #4]
   230e8:	3308      	adds	r3, #8
   230ea:	c703      	stmia	r7!, {r0, r1}
   230ec:	4293      	cmp	r3, r2
   230ee:	463e      	mov	r6, r7
   230f0:	d1f7      	bne.n	230e2 <net_send_data+0x74>
   230f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   230f6:	466e      	mov	r6, sp
   230f8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   230fc:	af08      	add	r7, sp, #32
   230fe:	46bc      	mov	ip, r7
   23100:	6923      	ldr	r3, [r4, #16]
   23102:	689b      	ldr	r3, [r3, #8]
   23104:	f103 0218 	add.w	r2, r3, #24
   23108:	f103 0828 	add.w	r8, r3, #40	; 0x28
   2310c:	46be      	mov	lr, r7
   2310e:	6810      	ldr	r0, [r2, #0]
   23110:	6851      	ldr	r1, [r2, #4]
   23112:	3208      	adds	r2, #8
   23114:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   23118:	4542      	cmp	r2, r8
   2311a:	4677      	mov	r7, lr
   2311c:	d1f6      	bne.n	2310c <net_send_data+0x9e>
   2311e:	4667      	mov	r7, ip
   23120:	3308      	adds	r3, #8
   23122:	463a      	mov	r2, r7
   23124:	ca03      	ldmia	r2!, {r0, r1}
   23126:	42aa      	cmp	r2, r5
   23128:	6018      	str	r0, [r3, #0]
   2312a:	6059      	str	r1, [r3, #4]
   2312c:	4617      	mov	r7, r2
   2312e:	f103 0308 	add.w	r3, r3, #8
   23132:	d1f6      	bne.n	23122 <net_send_data+0xb4>
   23134:	6923      	ldr	r3, [r4, #16]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   23136:	ad04      	add	r5, sp, #16
   23138:	689f      	ldr	r7, [r3, #8]
   2313a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   2313e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   23142:	f107 0318 	add.w	r3, r7, #24
   23146:	462a      	mov	r2, r5
   23148:	ca03      	ldmia	r2!, {r0, r1}
   2314a:	4562      	cmp	r2, ip
   2314c:	6018      	str	r0, [r3, #0]
   2314e:	6059      	str	r1, [r3, #4]
   23150:	4615      	mov	r5, r2
   23152:	f103 0308 	add.w	r3, r3, #8
   23156:	d1f6      	bne.n	23146 <net_send_data+0xd8>
		processing_data(pkt, true);
   23158:	4620      	mov	r0, r4
   2315a:	2101      	movs	r1, #1
   2315c:	f7ff ff4f 	bl	22ffe <processing_data>
		return 0;
   23160:	2000      	movs	r0, #0
   23162:	e7ab      	b.n	230bc <net_send_data+0x4e>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   23164:	4628      	mov	r0, r5
   23166:	f7ed fe09 	bl	10d7c <net_if_ipv6_addr_lookup>
		if (net_ipv6_is_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   2316a:	2800      	cmp	r0, #0
   2316c:	d1b2      	bne.n	230d4 <net_send_data+0x66>
   2316e:	6923      	ldr	r3, [r4, #16]
   23170:	6898      	ldr	r0, [r3, #8]
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
   23172:	7e03      	ldrb	r3, [r0, #24]
   23174:	2bff      	cmp	r3, #255	; 0xff
   23176:	d102      	bne.n	2317e <net_send_data+0x110>
   23178:	7e43      	ldrb	r3, [r0, #25]
   2317a:	2b01      	cmp	r3, #1
   2317c:	d0ec      	beq.n	23158 <net_send_data+0xea>
		if (net_ipv6_is_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   2317e:	3008      	adds	r0, #8
   23180:	f7ff ff2f 	bl	22fe2 <net_ipv6_is_addr_loopback>
   23184:	2800      	cmp	r0, #0
   23186:	d197      	bne.n	230b8 <net_send_data+0x4a>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   23188:	4621      	mov	r1, r4
   2318a:	6a20      	ldr	r0, [r4, #32]
   2318c:	f000 fbdb 	bl	23946 <net_if_send_data>
		return -EIO;
   23190:	2802      	cmp	r0, #2
   23192:	bf14      	ite	ne
   23194:	2000      	movne	r0, #0
   23196:	f06f 0004 	mvneq.w	r0, #4
   2319a:	e78f      	b.n	230bc <net_send_data+0x4e>
		return -ENODATA;
   2319c:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   231a0:	e78c      	b.n	230bc <net_send_data+0x4e>
		return -EINVAL;
   231a2:	f06f 0015 	mvn.w	r0, #21
   231a6:	e789      	b.n	230bc <net_send_data+0x4e>

000231a8 <sys_slist_append>:
	parent->next = child;
   231a8:	2300      	movs	r3, #0
   231aa:	600b      	str	r3, [r1, #0]
Z_GENLIST_APPEND(slist, snode)
   231ac:	6843      	ldr	r3, [r0, #4]
   231ae:	b913      	cbnz	r3, 231b6 <sys_slist_append+0xe>
	list->head = node;
   231b0:	e9c0 1100 	strd	r1, r1, [r0]
}
   231b4:	4770      	bx	lr
	parent->next = child;
   231b6:	6019      	str	r1, [r3, #0]
	list->tail = node;
   231b8:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   231ba:	4770      	bx	lr

000231bc <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   231bc:	2200      	movs	r2, #0
   231be:	6803      	ldr	r3, [r0, #0]
   231c0:	b90b      	cbnz	r3, 231c6 <sys_slist_find_and_remove+0xa>
   231c2:	4618      	mov	r0, r3
   231c4:	4770      	bx	lr
   231c6:	428b      	cmp	r3, r1
   231c8:	d110      	bne.n	231ec <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   231ca:	680b      	ldr	r3, [r1, #0]
   231cc:	b942      	cbnz	r2, 231e0 <sys_slist_find_and_remove+0x24>
   231ce:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   231d0:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   231d2:	4291      	cmp	r1, r2
   231d4:	d100      	bne.n	231d8 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   231d6:	6043      	str	r3, [r0, #4]
	parent->next = child;
   231d8:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   231da:	2001      	movs	r0, #1
	parent->next = child;
   231dc:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   231de:	4770      	bx	lr
	parent->next = child;
   231e0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   231e2:	6843      	ldr	r3, [r0, #4]
   231e4:	4299      	cmp	r1, r3
	list->tail = node;
   231e6:	bf08      	it	eq
   231e8:	6042      	streq	r2, [r0, #4]
}
   231ea:	e7f5      	b.n	231d8 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   231ec:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   231ee:	681b      	ldr	r3, [r3, #0]
   231f0:	e7e6      	b.n	231c0 <sys_slist_find_and_remove+0x4>

000231f2 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   231f2:	b110      	cbz	r0, 231fa <net_if_l2+0x8>
   231f4:	6800      	ldr	r0, [r0, #0]
   231f6:	b100      	cbz	r0, 231fa <net_if_l2+0x8>
	return iface->if_dev->l2;
   231f8:	6840      	ldr	r0, [r0, #4]
}
   231fa:	4770      	bx	lr

000231fc <net_context_send_cb>:
{
   231fc:	b410      	push	{r4}
	if (!context) {
   231fe:	b130      	cbz	r0, 2320e <net_context_send_cb+0x12>
	if (context->send_cb) {
   23200:	6c84      	ldr	r4, [r0, #72]	; 0x48
   23202:	b124      	cbz	r4, 2320e <net_context_send_cb+0x12>
		context->send_cb(context, status, context->user_data);
   23204:	4623      	mov	r3, r4
   23206:	6802      	ldr	r2, [r0, #0]
}
   23208:	f85d 4b04 	ldr.w	r4, [sp], #4
		context->send_cb(context, status, context->user_data);
   2320c:	4718      	bx	r3
}
   2320e:	f85d 4b04 	ldr.w	r4, [sp], #4
   23212:	4770      	bx	lr

00023214 <l2_flags_get>:
{
   23214:	b510      	push	{r4, lr}
   23216:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   23218:	f7ff ffeb 	bl	231f2 <net_if_l2>
   2321c:	b128      	cbz	r0, 2322a <l2_flags_get+0x16>
   2321e:	68c2      	ldr	r2, [r0, #12]
   23220:	b11a      	cbz	r2, 2322a <l2_flags_get+0x16>
}
   23222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   23226:	4618      	mov	r0, r3
   23228:	4710      	bx	r2
}
   2322a:	2000      	movs	r0, #0
   2322c:	bd10      	pop	{r4, pc}

0002322e <net_ipv6_is_prefix>:
	if (length > 128) {
   2322e:	2a80      	cmp	r2, #128	; 0x80
{
   23230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23232:	4607      	mov	r7, r0
   23234:	460e      	mov	r6, r1
   23236:	4614      	mov	r4, r2
	if (length > 128) {
   23238:	d901      	bls.n	2323e <net_ipv6_is_prefix+0x10>
		return false;
   2323a:	2000      	movs	r0, #0
}
   2323c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (memcmp(addr1, addr2, bytes)) {
   2323e:	08d5      	lsrs	r5, r2, #3
   23240:	462a      	mov	r2, r5
   23242:	f004 fb72 	bl	2792a <memcmp>
   23246:	2800      	cmp	r0, #0
   23248:	d1f7      	bne.n	2323a <net_ipv6_is_prefix+0xc>
	u8_t bits = 128 - length;
   2324a:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   2324e:	f014 0407 	ands.w	r4, r4, #7
   23252:	d00f      	beq.n	23274 <net_ipv6_is_prefix+0x46>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   23254:	5d7b      	ldrb	r3, [r7, r5]
   23256:	5d72      	ldrb	r2, [r6, r5]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   23258:	f1c4 0108 	rsb	r1, r4, #8
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   2325c:	405a      	eors	r2, r3
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   2325e:	23ff      	movs	r3, #255	; 0xff
   23260:	408b      	lsls	r3, r1
   23262:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   23266:	fa03 f404 	lsl.w	r4, r3, r4
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   2326a:	4222      	tst	r2, r4
   2326c:	bf0c      	ite	eq
   2326e:	2001      	moveq	r0, #1
   23270:	2000      	movne	r0, #0
   23272:	e7e3      	b.n	2323c <net_ipv6_is_prefix+0xe>
		return true;
   23274:	2001      	movs	r0, #1
   23276:	e7e1      	b.n	2323c <net_ipv6_is_prefix+0xe>

00023278 <net_ipv6_addr_cmp>:
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   23278:	2210      	movs	r2, #16
{
   2327a:	b508      	push	{r3, lr}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   2327c:	f004 fb55 	bl	2792a <memcmp>
}
   23280:	fab0 f080 	clz	r0, r0
   23284:	0940      	lsrs	r0, r0, #5
   23286:	bd08      	pop	{r3, pc}

00023288 <k_uptime_get_32>:
{
   23288:	e92d 4800 	stmdb	sp!, {fp, lr}
	return z_impl_k_uptime_ticks();
   2328c:	f004 fa06 	bl	2769c <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   23290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   23294:	fba0 bc03 	umull	fp, ip, r0, r3
   23298:	fb03 cc01 	mla	ip, r3, r1, ip
   2329c:	ea4f 30db 	mov.w	r0, fp, lsr #15
}
   232a0:	ea40 404c 	orr.w	r0, r0, ip, lsl #17
   232a4:	e8bd 8800 	ldmia.w	sp!, {fp, pc}

000232a8 <k_delayed_work_remaining_get>:
{
   232a8:	b508      	push	{r3, lr}
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   232aa:	300c      	adds	r0, #12
   232ac:	f004 f9b7 	bl	2761e <z_timeout_remaining>
			return (u32_t)((t * to_hz + off) / from_hz);
   232b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   232b4:	fba0 2303 	umull	r2, r3, r0, r3
   232b8:	0bd0      	lsrs	r0, r2, #15
}
   232ba:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   232be:	bd08      	pop	{r3, pc}

000232c0 <net_if_ipv6_addr_lookup_by_iface>:
{
   232c0:	b538      	push	{r3, r4, r5, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   232c2:	6844      	ldr	r4, [r0, #4]
{
   232c4:	460d      	mov	r5, r1
	if (!ipv6) {
   232c6:	b90c      	cbnz	r4, 232cc <net_if_ipv6_addr_lookup_by_iface+0xc>
		return NULL;
   232c8:	2000      	movs	r0, #0
}
   232ca:	bd38      	pop	{r3, r4, r5, pc}
		if (!ipv6->unicast[i].is_used ||
   232cc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   232d0:	079a      	lsls	r2, r3, #30
   232d2:	d508      	bpl.n	232e6 <net_if_ipv6_addr_lookup_by_iface+0x26>
   232d4:	8823      	ldrh	r3, [r4, #0]
   232d6:	2b02      	cmp	r3, #2
   232d8:	d105      	bne.n	232e6 <net_if_ipv6_addr_lookup_by_iface+0x26>
		if (net_ipv6_is_prefix(
   232da:	2280      	movs	r2, #128	; 0x80
   232dc:	4628      	mov	r0, r5
   232de:	1d21      	adds	r1, r4, #4
   232e0:	f7ff ffa5 	bl	2322e <net_ipv6_is_prefix>
   232e4:	b988      	cbnz	r0, 2330a <net_if_ipv6_addr_lookup_by_iface+0x4a>
		if (!ipv6->unicast[i].is_used ||
   232e6:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
   232ea:	079b      	lsls	r3, r3, #30
   232ec:	d5ec      	bpl.n	232c8 <net_if_ipv6_addr_lookup_by_iface+0x8>
   232ee:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   232f0:	2b02      	cmp	r3, #2
   232f2:	d1e9      	bne.n	232c8 <net_if_ipv6_addr_lookup_by_iface+0x8>
		if (net_ipv6_is_prefix(
   232f4:	2280      	movs	r2, #128	; 0x80
   232f6:	4628      	mov	r0, r5
   232f8:	f104 0134 	add.w	r1, r4, #52	; 0x34
   232fc:	f7ff ff97 	bl	2322e <net_ipv6_is_prefix>
   23300:	2800      	cmp	r0, #0
   23302:	d0e1      	beq.n	232c8 <net_if_ipv6_addr_lookup_by_iface+0x8>
   23304:	2030      	movs	r0, #48	; 0x30
			return &ipv6->unicast[i];
   23306:	4420      	add	r0, r4
   23308:	e7df      	b.n	232ca <net_if_ipv6_addr_lookup_by_iface+0xa>
		if (net_ipv6_is_prefix(
   2330a:	2000      	movs	r0, #0
   2330c:	e7fb      	b.n	23306 <net_if_ipv6_addr_lookup_by_iface+0x46>

0002330e <net_if_ipv6_addr_add>:
{
   2330e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23312:	b08b      	sub	sp, #44	; 0x2c
   23314:	460c      	mov	r4, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   23316:	a901      	add	r1, sp, #4
{
   23318:	4606      	mov	r6, r0
   2331a:	4691      	mov	r9, r2
   2331c:	4698      	mov	r8, r3
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   2331e:	f7ed fc83 	bl	10c28 <net_if_config_ipv6_get>
   23322:	2800      	cmp	r0, #0
   23324:	da03      	bge.n	2332e <net_if_ipv6_addr_add+0x20>
		return NULL;
   23326:	2000      	movs	r0, #0
}
   23328:	b00b      	add	sp, #44	; 0x2c
   2332a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ifaddr = ipv6_addr_find(iface, addr);
   2332e:	6875      	ldr	r5, [r6, #4]
		if (!ipv6->unicast[i].is_used) {
   23330:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   23334:	079f      	lsls	r7, r3, #30
   23336:	f100 809b 	bmi.w	23470 <net_if_ipv6_addr_add+0x162>
   2333a:	f895 305f 	ldrb.w	r3, [r5, #95]	; 0x5f
   2333e:	0798      	lsls	r0, r3, #30
   23340:	f100 809f 	bmi.w	23482 <net_if_ipv6_addr_add+0x174>
		if (ipv6->unicast[i].is_used) {
   23344:	f8dd c004 	ldr.w	ip, [sp, #4]
   23348:	f89c 302f 	ldrb.w	r3, [ip, #47]	; 0x2f
   2334c:	0799      	lsls	r1, r3, #30
   2334e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   23352:	f100 80a6 	bmi.w	234a2 <net_if_ipv6_addr_add+0x194>
		net_if_addr_init(&ipv6->unicast[i], addr, addr_type,
   23356:	2030      	movs	r0, #48	; 0x30
   23358:	fb00 f705 	mul.w	r7, r0, r5
   2335c:	eb0c 0e07 	add.w	lr, ip, r7
	ifaddr->is_used = true;
   23360:	f89e 302f 	ldrb.w	r3, [lr, #47]	; 0x2f
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   23364:	4622      	mov	r2, r4
	ifaddr->is_used = true;
   23366:	f043 0302 	orr.w	r3, r3, #2
   2336a:	f88e 302f 	strb.w	r3, [lr, #47]	; 0x2f
	ifaddr->address.family = AF_INET6;
   2336e:	2302      	movs	r3, #2
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   23370:	ac02      	add	r4, sp, #8
	ifaddr->address.family = AF_INET6;
   23372:	f82c 3007 	strh.w	r3, [ip, r7]
	ifaddr->addr_type = addr_type;
   23376:	4623      	mov	r3, r4
   23378:	f88e 902c 	strb.w	r9, [lr, #44]	; 0x2c
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   2337c:	f102 0a10 	add.w	sl, r2, #16
   23380:	46a1      	mov	r9, r4
   23382:	6810      	ldr	r0, [r2, #0]
   23384:	6851      	ldr	r1, [r2, #4]
   23386:	3208      	adds	r2, #8
   23388:	e8a9 0003 	stmia.w	r9!, {r0, r1}
   2338c:	4552      	cmp	r2, sl
   2338e:	464c      	mov	r4, r9
   23390:	d1f6      	bne.n	23380 <net_if_ipv6_addr_add+0x72>
   23392:	461a      	mov	r2, r3
   23394:	f10e 0404 	add.w	r4, lr, #4
   23398:	f10d 0918 	add.w	r9, sp, #24
   2339c:	4613      	mov	r3, r2
   2339e:	cb03      	ldmia	r3!, {r0, r1}
   233a0:	454b      	cmp	r3, r9
   233a2:	6020      	str	r0, [r4, #0]
   233a4:	6061      	str	r1, [r4, #4]
   233a6:	461a      	mov	r2, r3
   233a8:	f104 0408 	add.w	r4, r4, #8
   233ac:	d1f6      	bne.n	2339c <net_if_ipv6_addr_add+0x8e>
	if (vlifetime) {
   233ae:	2330      	movs	r3, #48	; 0x30
		ifaddr->is_infinite = false;
   233b0:	fb03 c305 	mla	r3, r3, r5, ip
   233b4:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
	if (vlifetime) {
   233b8:	f1b8 0f00 	cmp.w	r8, #0
   233bc:	d078      	beq.n	234b0 <net_if_ipv6_addr_add+0x1a2>
		ifaddr->is_infinite = false;
   233be:	f36f 0200 	bfc	r2, #0, #1
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   233c2:	4641      	mov	r1, r8
   233c4:	4670      	mov	r0, lr
		ifaddr->is_infinite = false;
   233c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   233ca:	f7e9 fdbd 	bl	cf48 <net_if_ipv6_addr_update_lifetime>
		if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   233ce:	4630      	mov	r0, r6
   233d0:	f7ff ff20 	bl	23214 <l2_flags_get>
   233d4:	f010 0a08 	ands.w	sl, r0, #8
   233d8:	d147      	bne.n	2346a <net_if_ipv6_addr_add+0x15c>
	flags = l2_flags_get(iface);
   233da:	4630      	mov	r0, r6
					 &ipv6->unicast[i].address.in6_addr);
   233dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
	flags = l2_flags_get(iface);
   233e0:	f7ff ff18 	bl	23214 <l2_flags_get>
	if (flags & NET_L2_MULTICAST) {
   233e4:	07c3      	lsls	r3, r0, #31
	flags = l2_flags_get(iface);
   233e6:	4604      	mov	r4, r0
	if (flags & NET_L2_MULTICAST) {
   233e8:	d53a      	bpl.n	23460 <net_if_ipv6_addr_add+0x152>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   233ea:	f240 2bff 	movw	fp, #767	; 0x2ff
   233ee:	f8ad b018 	strh.w	fp, [sp, #24]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   233f2:	f8ad a01a 	strh.w	sl, [sp, #26]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   233f6:	f8ad a01c 	strh.w	sl, [sp, #28]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   233fa:	f8ad a01e 	strh.w	sl, [sp, #30]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   233fe:	f8ad a020 	strh.w	sl, [sp, #32]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   23402:	f8ad a022 	strh.w	sl, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   23406:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   2340a:	f44f 7a80 	mov.w	sl, #256	; 0x100
   2340e:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
	ret = net_ipv6_mld_join(iface, &addr);
   23412:	4649      	mov	r1, r9
   23414:	4630      	mov	r0, r6
   23416:	f002 fc3c 	bl	25c92 <net_ipv6_mld_join>
		if (!(flags & NET_L2_MULTICAST_SKIP_JOIN_SOLICIT_NODE)) {
   2341a:	f014 0402 	ands.w	r4, r4, #2
   2341e:	d11f      	bne.n	23460 <net_if_ipv6_addr_add+0x152>
	dst->s6_addr[0]   = 0xFF;
   23420:	f8cd b018 	str.w	fp, [sp, #24]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   23424:	f8ad 401c 	strh.w	r4, [sp, #28]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   23428:	f8ad 401e 	strh.w	r4, [sp, #30]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   2342c:	f8ad 4020 	strh.w	r4, [sp, #32]
	dst->s6_addr[12]  = 0xFF;
   23430:	23ff      	movs	r3, #255	; 0xff
   23432:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   23436:	2330      	movs	r3, #48	; 0x30
   23438:	fb03 8505 	mla	r5, r3, r5, r8
	dst->s6_addr[10]  = 0U;
   2343c:	f8ad a022 	strh.w	sl, [sp, #34]	; 0x22
	dst->s6_addr[13]  = src->s6_addr[13];
   23440:	7c6b      	ldrb	r3, [r5, #17]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   23442:	44b8      	add	r8, r7
   23444:	f898 2013 	ldrb.w	r2, [r8, #19]
	dst->s6_addr[13]  = src->s6_addr[13];
   23448:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   2344c:	f898 3012 	ldrb.w	r3, [r8, #18]
   23450:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   23454:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	ret = net_ipv6_mld_join(iface, &addr);
   23458:	4649      	mov	r1, r9
   2345a:	4630      	mov	r0, r6
   2345c:	f002 fc19 	bl	25c92 <net_ipv6_mld_join>
			net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
   23460:	9901      	ldr	r1, [sp, #4]
   23462:	4630      	mov	r0, r6
   23464:	4439      	add	r1, r7
   23466:	f7ed fb63 	bl	10b30 <net_if_ipv6_start_dad>
		return &ipv6->unicast[i];
   2346a:	9801      	ldr	r0, [sp, #4]
   2346c:	4438      	add	r0, r7
   2346e:	e75b      	b.n	23328 <net_if_ipv6_addr_add+0x1a>
		if (net_ipv6_addr_cmp(
   23470:	4620      	mov	r0, r4
   23472:	1d29      	adds	r1, r5, #4
   23474:	f7ff ff00 	bl	23278 <net_ipv6_addr_cmp>
   23478:	2800      	cmp	r0, #0
   2347a:	f43f af5e 	beq.w	2333a <net_if_ipv6_addr_add+0x2c>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2347e:	2100      	movs	r1, #0
   23480:	e008      	b.n	23494 <net_if_ipv6_addr_add+0x186>
		if (net_ipv6_addr_cmp(
   23482:	4620      	mov	r0, r4
   23484:	f105 0134 	add.w	r1, r5, #52	; 0x34
   23488:	f7ff fef6 	bl	23278 <net_ipv6_addr_cmp>
   2348c:	2800      	cmp	r0, #0
   2348e:	f43f af59 	beq.w	23344 <net_if_ipv6_addr_add+0x36>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   23492:	2101      	movs	r1, #1
			return &ipv6->unicast[i];
   23494:	2030      	movs	r0, #48	; 0x30
   23496:	fb00 5001 	mla	r0, r0, r1, r5
	if (ifaddr) {
   2349a:	2800      	cmp	r0, #0
   2349c:	f47f af44 	bne.w	23328 <net_if_ipv6_addr_add+0x1a>
   234a0:	e750      	b.n	23344 <net_if_ipv6_addr_add+0x36>
		if (ipv6->unicast[i].is_used) {
   234a2:	f89c 305f 	ldrb.w	r3, [ip, #95]	; 0x5f
   234a6:	079a      	lsls	r2, r3, #30
   234a8:	f53f af3d 	bmi.w	23326 <net_if_ipv6_addr_add+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   234ac:	2501      	movs	r5, #1
   234ae:	e752      	b.n	23356 <net_if_ipv6_addr_add+0x48>
		ifaddr->is_infinite = true;
   234b0:	f042 0201 	orr.w	r2, r2, #1
   234b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   234b8:	e789      	b.n	233ce <net_if_ipv6_addr_add+0xc0>

000234ba <net_if_start_dad>:
{
   234ba:	b530      	push	{r4, r5, lr}
   234bc:	4604      	mov	r4, r0
   234be:	b087      	sub	sp, #28
	struct in6_addr addr = { };
   234c0:	2210      	movs	r2, #16
   234c2:	2100      	movs	r1, #0
   234c4:	a802      	add	r0, sp, #8
   234c6:	f004 fa78 	bl	279ba <memset>
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   234ca:	4620      	mov	r0, r4
   234cc:	a901      	add	r1, sp, #4
   234ce:	f7ed fbab 	bl	10c28 <net_if_config_ipv6_get>
   234d2:	2800      	cmp	r0, #0
   234d4:	db45      	blt.n	23562 <net_if_start_dad+0xa8>
	if (!ipv6) {
   234d6:	9b01      	ldr	r3, [sp, #4]
   234d8:	2b00      	cmp	r3, #0
   234da:	d042      	beq.n	23562 <net_if_start_dad+0xa8>
	addr->s6_addr[0] = 0xfe;
   234dc:	f248 03fe 	movw	r3, #33022	; 0x80fe
	net_ipv6_addr_create_iid(&addr, net_if_get_link_addr(iface));
   234e0:	6822      	ldr	r2, [r4, #0]
   234e2:	9302      	str	r3, [sp, #8]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   234e4:	2300      	movs	r3, #0
   234e6:	9303      	str	r3, [sp, #12]
	switch (lladdr->len) {
   234e8:	7d13      	ldrb	r3, [r2, #20]
   234ea:	2b06      	cmp	r3, #6
   234ec:	d03b      	beq.n	23566 <net_if_start_dad+0xac>
   234ee:	2b08      	cmp	r3, #8
   234f0:	d057      	beq.n	235a2 <net_if_start_dad+0xe8>
   234f2:	2b02      	cmp	r3, #2
   234f4:	d113      	bne.n	2351e <net_if_start_dad+0x64>
		if (lladdr->type == NET_LINK_IEEE802154 ||
   234f6:	7d53      	ldrb	r3, [r2, #21]
   234f8:	2b01      	cmp	r3, #1
   234fa:	d001      	beq.n	23500 <net_if_start_dad+0x46>
   234fc:	2b06      	cmp	r3, #6
   234fe:	d10e      	bne.n	2351e <net_if_start_dad+0x64>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   23500:	2300      	movs	r3, #0
   23502:	9304      	str	r3, [sp, #16]
			addr->s6_addr[11] = 0xff;
   23504:	23ff      	movs	r3, #255	; 0xff
   23506:	f88d 3013 	strb.w	r3, [sp, #19]
			addr->s6_addr[12] = 0xfe;
   2350a:	23fe      	movs	r3, #254	; 0xfe
   2350c:	f8ad 3014 	strh.w	r3, [sp, #20]
			addr->s6_addr[14] = lladdr->addr[0];
   23510:	6913      	ldr	r3, [r2, #16]
   23512:	781a      	ldrb	r2, [r3, #0]
   23514:	f88d 2016 	strb.w	r2, [sp, #22]
			addr->s6_addr[15] = lladdr->addr[1];
   23518:	785b      	ldrb	r3, [r3, #1]
   2351a:	f88d 3017 	strb.w	r3, [sp, #23]
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   2351e:	2300      	movs	r3, #0
   23520:	2201      	movs	r2, #1
   23522:	a902      	add	r1, sp, #8
   23524:	4620      	mov	r0, r4
   23526:	f7ff fef2 	bl	2330e <net_if_ipv6_addr_add>
		if (!ipv6->unicast[i].is_used ||
   2352a:	9901      	ldr	r1, [sp, #4]
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   2352c:	4605      	mov	r5, r0
		if (!ipv6->unicast[i].is_used ||
   2352e:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
   23532:	079a      	lsls	r2, r3, #30
   23534:	d507      	bpl.n	23546 <net_if_start_dad+0x8c>
   23536:	880b      	ldrh	r3, [r1, #0]
   23538:	2b02      	cmp	r3, #2
   2353a:	d104      	bne.n	23546 <net_if_start_dad+0x8c>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   2353c:	4288      	cmp	r0, r1
   2353e:	d002      	beq.n	23546 <net_if_start_dad+0x8c>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
   23540:	4620      	mov	r0, r4
   23542:	f7ed faf5 	bl	10b30 <net_if_ipv6_start_dad>
		if (!ipv6->unicast[i].is_used ||
   23546:	9901      	ldr	r1, [sp, #4]
   23548:	f891 305f 	ldrb.w	r3, [r1, #95]	; 0x5f
   2354c:	079b      	lsls	r3, r3, #30
   2354e:	d508      	bpl.n	23562 <net_if_start_dad+0xa8>
   23550:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
   23552:	2b02      	cmp	r3, #2
   23554:	d105      	bne.n	23562 <net_if_start_dad+0xa8>
		    &ipv6->unicast[i] == ifaddr) {
   23556:	3130      	adds	r1, #48	; 0x30
		    ipv6->unicast[i].address.family != AF_INET6 ||
   23558:	428d      	cmp	r5, r1
   2355a:	d002      	beq.n	23562 <net_if_start_dad+0xa8>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
   2355c:	4620      	mov	r0, r4
   2355e:	f7ed fae7 	bl	10b30 <net_if_ipv6_start_dad>
}
   23562:	b007      	add	sp, #28
   23564:	bd30      	pop	{r4, r5, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   23566:	6913      	ldr	r3, [r2, #16]
   23568:	7899      	ldrb	r1, [r3, #2]
   2356a:	8818      	ldrh	r0, [r3, #0]
   2356c:	f88d 1012 	strb.w	r1, [sp, #18]
		addr->s6_addr[11] = 0xff;
   23570:	21ff      	movs	r1, #255	; 0xff
   23572:	f88d 1013 	strb.w	r1, [sp, #19]
		addr->s6_addr[12] = 0xfe;
   23576:	21fe      	movs	r1, #254	; 0xfe
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   23578:	f8ad 0010 	strh.w	r0, [sp, #16]
		addr->s6_addr[12] = 0xfe;
   2357c:	f88d 1014 	strb.w	r1, [sp, #20]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   23580:	f833 1f03 	ldrh.w	r1, [r3, #3]!
   23584:	f8ad 1015 	strh.w	r1, [sp, #21]
   23588:	789b      	ldrb	r3, [r3, #2]
   2358a:	f88d 3017 	strb.w	r3, [sp, #23]
		if (lladdr->type == NET_LINK_ETHERNET) {
   2358e:	7d53      	ldrb	r3, [r2, #21]
   23590:	2b03      	cmp	r3, #3
   23592:	d1c4      	bne.n	2351e <net_if_start_dad+0x64>
		addr->s6_addr[8] ^= 0x02;
   23594:	f89d 3010 	ldrb.w	r3, [sp, #16]
   23598:	f083 0302 	eor.w	r3, r3, #2
   2359c:	f88d 3010 	strb.w	r3, [sp, #16]
		break;
   235a0:	e7bd      	b.n	2351e <net_if_start_dad+0x64>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   235a2:	6912      	ldr	r2, [r2, #16]
   235a4:	ab04      	add	r3, sp, #16
   235a6:	6810      	ldr	r0, [r2, #0]
   235a8:	6851      	ldr	r1, [r2, #4]
   235aa:	c303      	stmia	r3!, {r0, r1}
   235ac:	e7f2      	b.n	23594 <net_if_start_dad+0xda>

000235ae <net_if_ipv6_maddr_add>:
{
   235ae:	b513      	push	{r0, r1, r4, lr}
   235b0:	460c      	mov	r4, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   235b2:	a901      	add	r1, sp, #4
   235b4:	f7ed fb38 	bl	10c28 <net_if_config_ipv6_get>
   235b8:	2800      	cmp	r0, #0
   235ba:	db30      	blt.n	2361e <net_if_ipv6_maddr_add+0x70>
	if (!net_ipv6_is_addr_mcast(addr)) {
   235bc:	7823      	ldrb	r3, [r4, #0]
   235be:	2bff      	cmp	r3, #255	; 0xff
   235c0:	d12d      	bne.n	2361e <net_if_ipv6_maddr_add+0x70>
		if (ipv6->mcast[i].is_used) {
   235c2:	9b01      	ldr	r3, [sp, #4]
   235c4:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
   235c8:	f010 0001 	ands.w	r0, r0, #1
   235cc:	d008      	beq.n	235e0 <net_if_ipv6_maddr_add+0x32>
   235ce:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
   235d2:	07d1      	lsls	r1, r2, #31
   235d4:	d521      	bpl.n	2361a <net_if_ipv6_maddr_add+0x6c>
   235d6:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
   235da:	07d2      	lsls	r2, r2, #31
   235dc:	d41f      	bmi.n	2361e <net_if_ipv6_maddr_add+0x70>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   235de:	2002      	movs	r0, #2
		ipv6->mcast[i].is_used = true;
   235e0:	2218      	movs	r2, #24
   235e2:	4350      	muls	r0, r2
   235e4:	181a      	adds	r2, r3, r0
   235e6:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   235ea:	f041 0101 	orr.w	r1, r1, #1
   235ee:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
		ipv6->mcast[i].address.family = AF_INET6;
   235f2:	2102      	movs	r1, #2
   235f4:	f8a2 1060 	strh.w	r1, [r2, #96]	; 0x60
   235f8:	4621      	mov	r1, r4
		memcpy(&ipv6->mcast[i].address.in6_addr, addr, 16);
   235fa:	f100 0264 	add.w	r2, r0, #100	; 0x64
   235fe:	4413      	add	r3, r2
   23600:	f104 0210 	add.w	r2, r4, #16
   23604:	f851 4b04 	ldr.w	r4, [r1], #4
   23608:	4291      	cmp	r1, r2
   2360a:	f843 4b04 	str.w	r4, [r3], #4
   2360e:	d1f9      	bne.n	23604 <net_if_ipv6_maddr_add+0x56>
		return &ipv6->mcast[i];
   23610:	9b01      	ldr	r3, [sp, #4]
   23612:	3060      	adds	r0, #96	; 0x60
   23614:	4418      	add	r0, r3
}
   23616:	b002      	add	sp, #8
   23618:	bd10      	pop	{r4, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   2361a:	2001      	movs	r0, #1
   2361c:	e7e0      	b.n	235e0 <net_if_ipv6_maddr_add+0x32>
		return NULL;
   2361e:	2000      	movs	r0, #0
   23620:	e7f9      	b.n	23616 <net_if_ipv6_maddr_add+0x68>

00023622 <net_if_ipv6_maddr_rm>:
{
   23622:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   23626:	6845      	ldr	r5, [r0, #4]
{
   23628:	4689      	mov	r9, r1
	if (!ipv6) {
   2362a:	b1d5      	cbz	r5, 23662 <net_if_ipv6_maddr_rm+0x40>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   2362c:	2400      	movs	r4, #0
		if (!ipv6->mcast[i].is_used) {
   2362e:	2718      	movs	r7, #24
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
   23630:	f105 0864 	add.w	r8, r5, #100	; 0x64
		if (!ipv6->mcast[i].is_used) {
   23634:	fb07 f004 	mul.w	r0, r7, r4
   23638:	182b      	adds	r3, r5, r0
   2363a:	f103 0670 	add.w	r6, r3, #112	; 0x70
   2363e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   23642:	07db      	lsls	r3, r3, #31
   23644:	d50a      	bpl.n	2365c <net_if_ipv6_maddr_rm+0x3a>
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
   23646:	4649      	mov	r1, r9
   23648:	4440      	add	r0, r8
   2364a:	f7ff fe15 	bl	23278 <net_ipv6_addr_cmp>
   2364e:	b128      	cbz	r0, 2365c <net_if_ipv6_maddr_rm+0x3a>
		ipv6->mcast[i].is_used = false;
   23650:	7933      	ldrb	r3, [r6, #4]
   23652:	f36f 0300 	bfc	r3, #0, #1
   23656:	7133      	strb	r3, [r6, #4]
}
   23658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   2365c:	3401      	adds	r4, #1
   2365e:	2c03      	cmp	r4, #3
   23660:	d1e8      	bne.n	23634 <net_if_ipv6_maddr_rm+0x12>
		return false;
   23662:	2000      	movs	r0, #0
   23664:	e7f8      	b.n	23658 <net_if_ipv6_maddr_rm+0x36>

00023666 <remove_prefix_addresses>:
{
   23666:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23668:	4616      	mov	r6, r2
   2366a:	461a      	mov	r2, r3
		if (!ipv6->unicast[i].is_used ||
   2366c:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
{
   23670:	460c      	mov	r4, r1
		if (!ipv6->unicast[i].is_used ||
   23672:	0799      	lsls	r1, r3, #30
{
   23674:	4605      	mov	r5, r0
		if (!ipv6->unicast[i].is_used ||
   23676:	d514      	bpl.n	236a2 <remove_prefix_addresses+0x3c>
   23678:	8823      	ldrh	r3, [r4, #0]
   2367a:	2b02      	cmp	r3, #2
   2367c:	d111      	bne.n	236a2 <remove_prefix_addresses+0x3c>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   2367e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   23682:	2b01      	cmp	r3, #1
   23684:	d10d      	bne.n	236a2 <remove_prefix_addresses+0x3c>
				ipv6->unicast[i].address.in6_addr.s6_addr,
   23686:	1d21      	adds	r1, r4, #4
		if (net_ipv6_is_prefix(
   23688:	4630      	mov	r0, r6
   2368a:	e9cd 1200 	strd	r1, r2, [sp]
   2368e:	f7ff fdce 	bl	2322e <net_ipv6_is_prefix>
   23692:	e9dd 1200 	ldrd	r1, r2, [sp]
   23696:	b120      	cbz	r0, 236a2 <remove_prefix_addresses+0x3c>
			net_if_ipv6_addr_rm(iface,
   23698:	4628      	mov	r0, r5
   2369a:	9200      	str	r2, [sp, #0]
   2369c:	f7ed fc00 	bl	10ea0 <net_if_ipv6_addr_rm>
   236a0:	9a00      	ldr	r2, [sp, #0]
		if (!ipv6->unicast[i].is_used ||
   236a2:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
   236a6:	079b      	lsls	r3, r3, #30
   236a8:	d514      	bpl.n	236d4 <remove_prefix_addresses+0x6e>
   236aa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   236ac:	2b02      	cmp	r3, #2
   236ae:	d111      	bne.n	236d4 <remove_prefix_addresses+0x6e>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   236b0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
   236b4:	2b01      	cmp	r3, #1
   236b6:	d10d      	bne.n	236d4 <remove_prefix_addresses+0x6e>
				ipv6->unicast[i].address.in6_addr.s6_addr,
   236b8:	f104 0134 	add.w	r1, r4, #52	; 0x34
		if (net_ipv6_is_prefix(
   236bc:	4630      	mov	r0, r6
   236be:	9100      	str	r1, [sp, #0]
   236c0:	f7ff fdb5 	bl	2322e <net_ipv6_is_prefix>
   236c4:	9900      	ldr	r1, [sp, #0]
   236c6:	b128      	cbz	r0, 236d4 <remove_prefix_addresses+0x6e>
			net_if_ipv6_addr_rm(iface,
   236c8:	4628      	mov	r0, r5
}
   236ca:	b002      	add	sp, #8
   236cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_if_ipv6_addr_rm(iface,
   236d0:	f7ed bbe6 	b.w	10ea0 <net_if_ipv6_addr_rm>
}
   236d4:	b002      	add	sp, #8
   236d6:	bd70      	pop	{r4, r5, r6, pc}

000236d8 <net_if_ipv6_prefix_add>:
{
   236d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   236dc:	b086      	sub	sp, #24
   236de:	460d      	mov	r5, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   236e0:	a901      	add	r1, sp, #4
{
   236e2:	4680      	mov	r8, r0
   236e4:	4617      	mov	r7, r2
   236e6:	461e      	mov	r6, r3
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   236e8:	f7ed fa9e 	bl	10c28 <net_if_config_ipv6_get>
   236ec:	2800      	cmp	r0, #0
   236ee:	da03      	bge.n	236f8 <net_if_ipv6_prefix_add+0x20>
		return NULL;
   236f0:	2000      	movs	r0, #0
}
   236f2:	b006      	add	sp, #24
   236f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ifprefix = ipv6_prefix_find(iface, prefix, len);
   236f8:	f8d8 4004 	ldr.w	r4, [r8, #4]
	if (!ipv6) {
   236fc:	2c00      	cmp	r4, #0
   236fe:	d147      	bne.n	23790 <net_if_ipv6_prefix_add+0xb8>
	if (!ipv6) {
   23700:	9c01      	ldr	r4, [sp, #4]
   23702:	2c00      	cmp	r4, #0
   23704:	d0f4      	beq.n	236f0 <net_if_ipv6_prefix_add+0x18>
		if (ipv6->prefix[i].is_used) {
   23706:	f894 20cd 	ldrb.w	r2, [r4, #205]	; 0xcd
   2370a:	0791      	lsls	r1, r2, #30
   2370c:	f3c2 0340 	ubfx	r3, r2, #1, #1
   23710:	d504      	bpl.n	2371c <net_if_ipv6_prefix_add+0x44>
   23712:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   23716:	079a      	lsls	r2, r3, #30
   23718:	d4ea      	bmi.n	236f0 <net_if_ipv6_prefix_add+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   2371a:	2301      	movs	r3, #1
		net_if_ipv6_prefix_init(iface, &ipv6->prefix[i], prefix,
   2371c:	2128      	movs	r1, #40	; 0x28
   2371e:	4359      	muls	r1, r3
   23720:	f101 0ca8 	add.w	ip, r1, #168	; 0xa8
	ifprefix->is_used = true;
   23724:	4421      	add	r1, r4
   23726:	f891 20cd 	ldrb.w	r2, [r1, #205]	; 0xcd
	ifprefix->len = len;
   2372a:	f881 70cc 	strb.w	r7, [r1, #204]	; 0xcc
	ifprefix->is_used = true;
   2372e:	f042 0202 	orr.w	r2, r2, #2
   23732:	f881 20cd 	strb.w	r2, [r1, #205]	; 0xcd
	net_ipaddr_copy(&ifprefix->prefix, addr);
   23736:	462a      	mov	r2, r5
   23738:	ad02      	add	r5, sp, #8
   2373a:	462f      	mov	r7, r5
	ifprefix->iface = iface;
   2373c:	f8c1 80c8 	str.w	r8, [r1, #200]	; 0xc8
	net_ipaddr_copy(&ifprefix->prefix, addr);
   23740:	f102 0810 	add.w	r8, r2, #16
   23744:	46ae      	mov	lr, r5
   23746:	6810      	ldr	r0, [r2, #0]
   23748:	6851      	ldr	r1, [r2, #4]
   2374a:	3208      	adds	r2, #8
   2374c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   23750:	4542      	cmp	r2, r8
   23752:	4675      	mov	r5, lr
   23754:	d1f6      	bne.n	23744 <net_if_ipv6_prefix_add+0x6c>
   23756:	eb04 020c 	add.w	r2, r4, ip
   2375a:	3210      	adds	r2, #16
   2375c:	f10d 0e18 	add.w	lr, sp, #24
   23760:	463d      	mov	r5, r7
   23762:	cd03      	ldmia	r5!, {r0, r1}
   23764:	4575      	cmp	r5, lr
   23766:	6010      	str	r0, [r2, #0]
   23768:	6051      	str	r1, [r2, #4]
   2376a:	462f      	mov	r7, r5
   2376c:	f102 0208 	add.w	r2, r2, #8
   23770:	d1f6      	bne.n	23760 <net_if_ipv6_prefix_add+0x88>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   23772:	2228      	movs	r2, #40	; 0x28
   23774:	fb02 4403 	mla	r4, r2, r3, r4
   23778:	1c73      	adds	r3, r6, #1
   2377a:	425e      	negs	r6, r3
   2377c:	415e      	adcs	r6, r3
   2377e:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
		return &ipv6->prefix[i];
   23782:	9801      	ldr	r0, [sp, #4]
   23784:	f366 0300 	bfi	r3, r6, #0, #1
   23788:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
   2378c:	4460      	add	r0, ip
   2378e:	e7b0      	b.n	236f2 <net_if_ipv6_prefix_add+0x1a>
		if (!ipv6->unicast[i].is_used) {
   23790:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   23794:	079b      	lsls	r3, r3, #30
   23796:	d509      	bpl.n	237ac <net_if_ipv6_prefix_add+0xd4>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   23798:	4628      	mov	r0, r5
   2379a:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
   2379e:	f7ff fd6b 	bl	23278 <net_ipv6_addr_cmp>
   237a2:	b118      	cbz	r0, 237ac <net_if_ipv6_prefix_add+0xd4>
   237a4:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   237a8:	42bb      	cmp	r3, r7
   237aa:	d013      	beq.n	237d4 <net_if_ipv6_prefix_add+0xfc>
		if (!ipv6->unicast[i].is_used) {
   237ac:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
   237b0:	0798      	lsls	r0, r3, #30
   237b2:	d5a5      	bpl.n	23700 <net_if_ipv6_prefix_add+0x28>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   237b4:	4628      	mov	r0, r5
   237b6:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
   237ba:	f7ff fd5d 	bl	23278 <net_ipv6_addr_cmp>
   237be:	2800      	cmp	r0, #0
   237c0:	d09e      	beq.n	23700 <net_if_ipv6_prefix_add+0x28>
   237c2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   237c6:	42bb      	cmp	r3, r7
   237c8:	d19a      	bne.n	23700 <net_if_ipv6_prefix_add+0x28>
   237ca:	2028      	movs	r0, #40	; 0x28
			return &ipv6->prefix[i];
   237cc:	30a8      	adds	r0, #168	; 0xa8
	if (ifprefix) {
   237ce:	1820      	adds	r0, r4, r0
   237d0:	d18f      	bne.n	236f2 <net_if_ipv6_prefix_add+0x1a>
   237d2:	e795      	b.n	23700 <net_if_ipv6_prefix_add+0x28>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   237d4:	2000      	movs	r0, #0
   237d6:	e7f9      	b.n	237cc <net_if_ipv6_prefix_add+0xf4>

000237d8 <net_if_ipv6_prefix_lookup>:
{
   237d8:	b570      	push	{r4, r5, r6, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   237da:	6844      	ldr	r4, [r0, #4]
{
   237dc:	460d      	mov	r5, r1
   237de:	4616      	mov	r6, r2
	if (!ipv6) {
   237e0:	b90c      	cbnz	r4, 237e6 <net_if_ipv6_prefix_lookup+0xe>
		return NULL;
   237e2:	2000      	movs	r0, #0
}
   237e4:	bd70      	pop	{r4, r5, r6, pc}
		if (!ipv6->prefix[i].is_used) {
   237e6:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   237ea:	0798      	lsls	r0, r3, #30
   237ec:	d411      	bmi.n	23812 <net_if_ipv6_prefix_lookup+0x3a>
   237ee:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   237f2:	079b      	lsls	r3, r3, #30
   237f4:	d5f5      	bpl.n	237e2 <net_if_ipv6_prefix_lookup+0xa>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
   237f6:	4632      	mov	r2, r6
   237f8:	4629      	mov	r1, r5
   237fa:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   237fe:	f7ff fd16 	bl	2322e <net_ipv6_is_prefix>
   23802:	2800      	cmp	r0, #0
   23804:	d0ed      	beq.n	237e2 <net_if_ipv6_prefix_lookup+0xa>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   23806:	2001      	movs	r0, #1
			return &ipv6->prefix[i];
   23808:	2328      	movs	r3, #40	; 0x28
   2380a:	fb03 4000 	mla	r0, r3, r0, r4
   2380e:	30a8      	adds	r0, #168	; 0xa8
   23810:	e7e8      	b.n	237e4 <net_if_ipv6_prefix_lookup+0xc>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
   23812:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   23816:	f7ff fd0a 	bl	2322e <net_ipv6_is_prefix>
   2381a:	2800      	cmp	r0, #0
   2381c:	d0e7      	beq.n	237ee <net_if_ipv6_prefix_lookup+0x16>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   2381e:	2000      	movs	r0, #0
   23820:	e7f2      	b.n	23808 <net_if_ipv6_prefix_lookup+0x30>

00023822 <net_if_ipv6_prefix_rm>:
{
   23822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   23826:	6844      	ldr	r4, [r0, #4]
{
   23828:	4607      	mov	r7, r0
   2382a:	4688      	mov	r8, r1
   2382c:	4616      	mov	r6, r2
	if (!ipv6) {
   2382e:	b914      	cbnz	r4, 23836 <net_if_ipv6_prefix_rm+0x14>
		return false;
   23830:	2000      	movs	r0, #0
}
   23832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!ipv6->prefix[i].is_used) {
   23836:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   2383a:	079a      	lsls	r2, r3, #30
   2383c:	d508      	bpl.n	23850 <net_if_ipv6_prefix_rm+0x2e>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   2383e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   23842:	f7ff fd19 	bl	23278 <net_ipv6_addr_cmp>
   23846:	b118      	cbz	r0, 23850 <net_if_ipv6_prefix_rm+0x2e>
   23848:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   2384c:	42b3      	cmp	r3, r6
   2384e:	d025      	beq.n	2389c <net_if_ipv6_prefix_rm+0x7a>
		if (!ipv6->prefix[i].is_used) {
   23850:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   23854:	079b      	lsls	r3, r3, #30
   23856:	d5eb      	bpl.n	23830 <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   23858:	4641      	mov	r1, r8
   2385a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   2385e:	f7ff fd0b 	bl	23278 <net_ipv6_addr_cmp>
   23862:	2800      	cmp	r0, #0
   23864:	d0e4      	beq.n	23830 <net_if_ipv6_prefix_rm+0xe>
   23866:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   2386a:	42b3      	cmp	r3, r6
   2386c:	d1e0      	bne.n	23830 <net_if_ipv6_prefix_rm+0xe>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   2386e:	2501      	movs	r5, #1
   23870:	2028      	movs	r0, #40	; 0x28
		net_if_ipv6_prefix_unset_timer(&ipv6->prefix[i]);
   23872:	30a8      	adds	r0, #168	; 0xa8
   23874:	4420      	add	r0, r4
   23876:	f7ed fc99 	bl	111ac <net_if_ipv6_prefix_unset_timer>
		ipv6->prefix[i].is_used = false;
   2387a:	2328      	movs	r3, #40	; 0x28
   2387c:	fb03 4505 	mla	r5, r3, r5, r4
   23880:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
		remove_prefix_addresses(iface, ipv6, addr, len);
   23884:	4638      	mov	r0, r7
		ipv6->prefix[i].is_used = false;
   23886:	f36f 0341 	bfc	r3, #1, #1
   2388a:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		remove_prefix_addresses(iface, ipv6, addr, len);
   2388e:	4642      	mov	r2, r8
   23890:	4633      	mov	r3, r6
   23892:	4621      	mov	r1, r4
   23894:	f7ff fee7 	bl	23666 <remove_prefix_addresses>
		return true;
   23898:	2001      	movs	r0, #1
   2389a:	e7ca      	b.n	23832 <net_if_ipv6_prefix_rm+0x10>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   2389c:	2500      	movs	r5, #0
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   2389e:	4628      	mov	r0, r5
   238a0:	e7e7      	b.n	23872 <net_if_ipv6_prefix_rm+0x50>

000238a2 <net_if_ipv6_router_update_lifetime>:
{
   238a2:	b538      	push	{r3, r4, r5, lr}
   238a4:	4604      	mov	r4, r0
   238a6:	460d      	mov	r5, r1
	router->life_start = k_uptime_get_32();
   238a8:	f7ff fcee 	bl	23288 <k_uptime_get_32>
	router->lifetime = lifetime;
   238ac:	8425      	strh	r5, [r4, #32]
	router->life_start = k_uptime_get_32();
   238ae:	61e0      	str	r0, [r4, #28]
}
   238b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	iface_router_run_timer(router->life_start);
   238b4:	f7ed b8aa 	b.w	10a0c <iface_router_run_timer>

000238b8 <net_if_ipv6_get_ll>:
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   238b8:	6840      	ldr	r0, [r0, #4]
{
   238ba:	b510      	push	{r4, lr}
	if (!ipv6) {
   238bc:	b338      	cbz	r0, 2390e <net_if_ipv6_get_ll+0x56>
		if (!ipv6->unicast[i].is_used ||
   238be:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   238c2:	079b      	lsls	r3, r3, #30
   238c4:	d50e      	bpl.n	238e4 <net_if_ipv6_get_ll+0x2c>
   238c6:	1c4c      	adds	r4, r1, #1
   238c8:	d003      	beq.n	238d2 <net_if_ipv6_get_ll+0x1a>
		    (addr_state != NET_ADDR_ANY_STATE &&
   238ca:	f990 302d 	ldrsb.w	r3, [r0, #45]	; 0x2d
   238ce:	428b      	cmp	r3, r1
   238d0:	d108      	bne.n	238e4 <net_if_ipv6_get_ll+0x2c>
		     ipv6->unicast[i].addr_state != addr_state) ||
   238d2:	8803      	ldrh	r3, [r0, #0]
   238d4:	2b02      	cmp	r3, #2
   238d6:	d105      	bne.n	238e4 <net_if_ipv6_get_ll+0x2c>
		if (net_ipv6_is_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
   238d8:	f248 02fe 	movw	r2, #33022	; 0x80fe
   238dc:	8884      	ldrh	r4, [r0, #4]
   238de:	1d03      	adds	r3, r0, #4
   238e0:	4294      	cmp	r4, r2
   238e2:	d013      	beq.n	2390c <net_if_ipv6_get_ll+0x54>
		if (!ipv6->unicast[i].is_used ||
   238e4:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
   238e8:	079a      	lsls	r2, r3, #30
   238ea:	d511      	bpl.n	23910 <net_if_ipv6_get_ll+0x58>
   238ec:	1c4b      	adds	r3, r1, #1
   238ee:	d003      	beq.n	238f8 <net_if_ipv6_get_ll+0x40>
		    (addr_state != NET_ADDR_ANY_STATE &&
   238f0:	f990 305d 	ldrsb.w	r3, [r0, #93]	; 0x5d
   238f4:	428b      	cmp	r3, r1
   238f6:	d10b      	bne.n	23910 <net_if_ipv6_get_ll+0x58>
		     ipv6->unicast[i].addr_state != addr_state) ||
   238f8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   238fa:	2b02      	cmp	r3, #2
   238fc:	d108      	bne.n	23910 <net_if_ipv6_get_ll+0x58>
		if (net_ipv6_is_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
   238fe:	f248 02fe 	movw	r2, #33022	; 0x80fe
   23902:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   23904:	f100 0334 	add.w	r3, r0, #52	; 0x34
   23908:	4291      	cmp	r1, r2
   2390a:	d101      	bne.n	23910 <net_if_ipv6_get_ll+0x58>
   2390c:	4618      	mov	r0, r3
}
   2390e:	bd10      	pop	{r4, pc}
		return NULL;
   23910:	2000      	movs	r0, #0
   23912:	e7fc      	b.n	2390e <net_if_ipv6_get_ll+0x56>

00023914 <net_if_ipv6_calc_reachable_time>:
{
   23914:	b538      	push	{r3, r4, r5, lr}
	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
   23916:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
	       sys_rand32_get() % (max_reachable - min_reachable);
   2391a:	f7ef fa25 	bl	12d68 <sys_rand32_get>
	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
   2391e:	0865      	lsrs	r5, r4, #1
	max_reachable = (MAX_RANDOM_NUMER * ipv6->base_reachable_time)
   23920:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	       sys_rand32_get() % (max_reachable - min_reachable);
   23924:	ebc5 0454 	rsb	r4, r5, r4, lsr #1
   23928:	fbb0 f3f4 	udiv	r3, r0, r4
   2392c:	fb03 0014 	mls	r0, r3, r4, r0
}
   23930:	4428      	add	r0, r5
   23932:	bd38      	pop	{r3, r4, r5, pc}

00023934 <net_if_recv_data>:
{
   23934:	b510      	push	{r4, lr}
   23936:	4603      	mov	r3, r0
	return net_if_l2(iface)->recv(iface, pkt);
   23938:	f7ff fc5b 	bl	231f2 <net_if_l2>
}
   2393c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_l2(iface)->recv(iface, pkt);
   23940:	6802      	ldr	r2, [r0, #0]
   23942:	4618      	mov	r0, r3
   23944:	4710      	bx	r2

00023946 <net_if_send_data>:
{
   23946:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23948:	6803      	ldr	r3, [r0, #0]
   2394a:	4605      	mov	r5, r0
   2394c:	460c      	mov	r4, r1
	struct net_context *context = net_pkt_context(pkt);
   2394e:	69ce      	ldr	r6, [r1, #28]
   23950:	330c      	adds	r3, #12
   23952:	e8d3 3faf 	lda	r3, [r3]
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
   23956:	07d9      	lsls	r1, r3, #31
   23958:	d411      	bmi.n	2397e <net_if_send_data+0x38>
		status = -ENETDOWN;
   2395a:	f06f 0272 	mvn.w	r2, #114	; 0x72
		if (context) {
   2395e:	b12e      	cbz	r6, 2396c <net_if_send_data+0x26>
			net_context_send_cb(context, status);
   23960:	4611      	mov	r1, r2
   23962:	4630      	mov	r0, r6
   23964:	9201      	str	r2, [sp, #4]
   23966:	f7ff fc49 	bl	231fc <net_context_send_cb>
   2396a:	9a01      	ldr	r2, [sp, #4]
		if (dst->addr) {
   2396c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2396e:	b123      	cbz	r3, 2397a <net_if_send_data+0x34>
			net_if_call_link_cb(iface, dst, status);
   23970:	4628      	mov	r0, r5
   23972:	f104 0130 	add.w	r1, r4, #48	; 0x30
   23976:	f7ed fd0d 	bl	11394 <net_if_call_link_cb>
   2397a:	2002      	movs	r0, #2
   2397c:	e01f      	b.n	239be <net_if_send_data+0x78>
   2397e:	6803      	ldr	r3, [r0, #0]
   23980:	330c      	adds	r3, #12
   23982:	e8d3 3faf 	lda	r3, [r3]
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
   23986:	06da      	lsls	r2, r3, #27
   23988:	d4e7      	bmi.n	2395a <net_if_send_data+0x14>
   2398a:	6803      	ldr	r3, [r0, #0]
   2398c:	330c      	adds	r3, #12
   2398e:	e8d3 3faf 	lda	r3, [r3]
	if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
   23992:	079b      	lsls	r3, r3, #30
   23994:	d408      	bmi.n	239a8 <net_if_send_data+0x62>
   23996:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23998:	b933      	cbnz	r3, 239a8 <net_if_send_data+0x62>
	return net_if_get_link_addr(pkt->iface);
   2399a:	6a23      	ldr	r3, [r4, #32]
   2399c:	681b      	ldr	r3, [r3, #0]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   2399e:	691a      	ldr	r2, [r3, #16]
   239a0:	62a2      	str	r2, [r4, #40]	; 0x28
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   239a2:	7d1b      	ldrb	r3, [r3, #20]
   239a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	return pkt->family;
   239a8:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	if (IS_ENABLED(CONFIG_NET_IPV6) && net_pkt_family(pkt) == AF_INET6) {
   239ac:	f3c3 0342 	ubfx	r3, r3, #1, #3
   239b0:	2b02      	cmp	r3, #2
   239b2:	d006      	beq.n	239c2 <net_if_send_data+0x7c>
		net_if_queue_tx(iface, pkt);
   239b4:	4628      	mov	r0, r5
   239b6:	4621      	mov	r1, r4
   239b8:	f7ed f91a 	bl	10bf0 <net_if_queue_tx>
   239bc:	2000      	movs	r0, #0
}
   239be:	b002      	add	sp, #8
   239c0:	bd70      	pop	{r4, r5, r6, pc}
		verdict = net_ipv6_prepare_for_send(pkt);
   239c2:	4620      	mov	r0, r4
   239c4:	f001 feee 	bl	257a4 <net_ipv6_prepare_for_send>
	if (verdict == NET_DROP) {
   239c8:	2802      	cmp	r0, #2
   239ca:	d102      	bne.n	239d2 <net_if_send_data+0x8c>
	int status = -EIO;
   239cc:	f06f 0204 	mvn.w	r2, #4
   239d0:	e7c5      	b.n	2395e <net_if_send_data+0x18>
	} else if (verdict == NET_OK) {
   239d2:	2800      	cmp	r0, #0
   239d4:	d1f3      	bne.n	239be <net_if_send_data+0x78>
   239d6:	e7ed      	b.n	239b4 <net_if_send_data+0x6e>

000239d8 <net_if_need_calc_tx_checksum>:
   239d8:	2001      	movs	r0, #1
   239da:	4770      	bx	lr

000239dc <net_if_need_calc_rx_checksum>:
}
   239dc:	2001      	movs	r0, #1
   239de:	4770      	bx	lr

000239e0 <net_if_up>:
{
   239e0:	b538      	push	{r3, r4, r5, lr}
   239e2:	4605      	mov	r5, r0
   239e4:	6803      	ldr	r3, [r0, #0]
   239e6:	330c      	adds	r3, #12
   239e8:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   239ec:	f013 0301 	ands.w	r3, r3, #1
   239f0:	d001      	beq.n	239f6 <net_if_up+0x16>
		return 0;
   239f2:	2000      	movs	r0, #0
}
   239f4:	bd38      	pop	{r3, r4, r5, pc}
	     net_if_is_socket_offloaded(iface))) {
   239f6:	6802      	ldr	r2, [r0, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   239f8:	7e91      	ldrb	r1, [r2, #26]
   239fa:	b149      	cbz	r1, 23a10 <net_if_up+0x30>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   239fc:	320c      	adds	r2, #12
   239fe:	e8d2 1fef 	ldaex	r1, [r2]
   23a02:	f041 0101 	orr.w	r1, r1, #1
   23a06:	e8c2 1fe0 	stlex	r0, r1, [r2]
   23a0a:	2800      	cmp	r0, #0
   23a0c:	d0f1      	beq.n	239f2 <net_if_up+0x12>
   23a0e:	e7f6      	b.n	239fe <net_if_up+0x1e>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   23a10:	f7ff fbef 	bl	231f2 <net_if_l2>
   23a14:	b9b8      	cbnz	r0, 23a46 <net_if_up+0x66>
   23a16:	682b      	ldr	r3, [r5, #0]
   23a18:	330c      	adds	r3, #12
   23a1a:	e8d3 2fef 	ldaex	r2, [r3]
   23a1e:	f042 0201 	orr.w	r2, r2, #1
   23a22:	e8c3 2fe1 	stlex	r1, r2, [r3]
   23a26:	2900      	cmp	r1, #0
   23a28:	d1f7      	bne.n	23a1a <net_if_up+0x3a>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   23a2a:	4628      	mov	r0, r5
   23a2c:	f7ff fbf2 	bl	23214 <l2_flags_get>
   23a30:	f010 0408 	ands.w	r4, r0, #8
   23a34:	d1dd      	bne.n	239f2 <net_if_up+0x12>
		net_if_start_dad(iface);
   23a36:	4628      	mov	r0, r5
   23a38:	f7ff fd3f 	bl	234ba <net_if_start_dad>
	net_if_start_rs(iface);
   23a3c:	4628      	mov	r0, r5
   23a3e:	f7ed f90b 	bl	10c58 <net_if_start_rs>
}
   23a42:	4620      	mov	r0, r4
   23a44:	e7d6      	b.n	239f4 <net_if_up+0x14>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   23a46:	6883      	ldr	r3, [r0, #8]
   23a48:	2b00      	cmp	r3, #0
   23a4a:	d0e4      	beq.n	23a16 <net_if_up+0x36>
	status = net_if_l2(iface)->enable(iface, true);
   23a4c:	2101      	movs	r1, #1
   23a4e:	4628      	mov	r0, r5
   23a50:	4798      	blx	r3
	if (status < 0) {
   23a52:	2800      	cmp	r0, #0
   23a54:	dadf      	bge.n	23a16 <net_if_up+0x36>
   23a56:	e7cd      	b.n	239f4 <net_if_up+0x14>

00023a58 <calc_chksum>:
{
   23a58:	b570      	push	{r4, r5, r6, lr}
	while (data < end) {
   23a5a:	460c      	mov	r4, r1
	end = data + len - 1;
   23a5c:	3a01      	subs	r2, #1
   23a5e:	188d      	adds	r5, r1, r2
	while (data < end) {
   23a60:	42ac      	cmp	r4, r5
   23a62:	d315      	bcc.n	23a90 <calc_chksum+0x38>
   23a64:	f1c1 0301 	rsb	r3, r1, #1
   23a68:	442b      	add	r3, r5
   23a6a:	f023 0301 	bic.w	r3, r3, #1
   23a6e:	1e4c      	subs	r4, r1, #1
   23a70:	42a5      	cmp	r5, r4
   23a72:	bf38      	it	cc
   23a74:	2300      	movcc	r3, #0
   23a76:	440b      	add	r3, r1
	if (data == end) {
   23a78:	42ab      	cmp	r3, r5
   23a7a:	d108      	bne.n	23a8e <calc_chksum+0x36>
		tmp = data[0] << 8;
   23a7c:	5c8b      	ldrb	r3, [r1, r2]
		sum += tmp;
   23a7e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   23a82:	b280      	uxth	r0, r0
		if (sum < tmp) {
   23a84:	ebb0 2f03 	cmp.w	r0, r3, lsl #8
			sum++;
   23a88:	bf3c      	itt	cc
   23a8a:	3001      	addcc	r0, #1
   23a8c:	b280      	uxthcc	r0, r0
}
   23a8e:	bd70      	pop	{r4, r5, r6, pc}
		tmp = (data[0] << 8) + data[1];
   23a90:	7826      	ldrb	r6, [r4, #0]
   23a92:	7863      	ldrb	r3, [r4, #1]
		data += 2;
   23a94:	3402      	adds	r4, #2
		tmp = (data[0] << 8) + data[1];
   23a96:	eb03 2306 	add.w	r3, r3, r6, lsl #8
		sum += tmp;
   23a9a:	fa10 f083 	uxtah	r0, r0, r3
   23a9e:	b280      	uxth	r0, r0
		tmp = (data[0] << 8) + data[1];
   23aa0:	b29e      	uxth	r6, r3
		if (sum < tmp) {
   23aa2:	4286      	cmp	r6, r0
			sum++;
   23aa4:	bf84      	itt	hi
   23aa6:	3001      	addhi	r0, #1
   23aa8:	b280      	uxthhi	r0, r0
		data += 2;
   23aaa:	e7d9      	b.n	23a60 <calc_chksum+0x8>

00023aac <net_byte_to_hex>:
{
   23aac:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   23aae:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   23ab0:	b1bb      	cbz	r3, 23ae2 <net_byte_to_hex+0x36>
		if (val < 10) {
   23ab2:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   23ab4:	b26b      	sxtb	r3, r5
   23ab6:	bf86      	itte	hi
   23ab8:	f1a2 050a 	subhi.w	r5, r2, #10
   23abc:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   23abe:	3330      	addls	r3, #48	; 0x30
   23ac0:	1c44      	adds	r4, r0, #1
   23ac2:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   23ac4:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   23ac8:	4619      	mov	r1, r3
   23aca:	2b09      	cmp	r3, #9
	*ptr = '\0';
   23acc:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   23ad0:	bf83      	ittte	hi
   23ad2:	3a0a      	subhi	r2, #10
   23ad4:	1889      	addhi	r1, r1, r2
   23ad6:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   23ad8:	3130      	addls	r1, #48	; 0x30
   23ada:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   23adc:	7063      	strb	r3, [r4, #1]
   23ade:	1c60      	adds	r0, r4, #1
}
   23ae0:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   23ae2:	2d00      	cmp	r5, #0
   23ae4:	d1e5      	bne.n	23ab2 <net_byte_to_hex+0x6>
   23ae6:	4604      	mov	r4, r0
   23ae8:	e7ec      	b.n	23ac4 <net_byte_to_hex+0x18>

00023aea <net_calc_chksum>:
   23aea:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
{
   23aee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   23af2:	f3c3 0342 	ubfx	r3, r3, #1, #3
   23af6:	2b02      	cmp	r3, #2
{
   23af8:	4605      	mov	r5, r0
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   23afa:	d16f      	bne.n	23bdc <net_calc_chksum+0xf2>
	size_t bytes = 0;
   23afc:	2200      	movs	r2, #0
		sum =  net_pkt_get_len(pkt) -
   23afe:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   23b00:	2b00      	cmp	r3, #0
   23b02:	d143      	bne.n	23b8c <net_calc_chksum+0xa2>
	backup->pos = pkt->cursor.pos;
   23b04:	e9d5 8705 	ldrd	r8, r7, [r5, #20]
			net_pkt_ip_hdr_len(pkt) -
   23b08:	f895 4038 	ldrb.w	r4, [r5, #56]	; 0x38
	net_pkt_cursor_init(pkt);
   23b0c:	4628      	mov	r0, r5
		sum =  net_pkt_get_len(pkt) -
   23b0e:	1b09      	subs	r1, r1, r4
   23b10:	8fec      	ldrh	r4, [r5, #62]	; 0x3e
   23b12:	1b0c      	subs	r4, r1, r4
   23b14:	4414      	add	r4, r2
	net_pkt_cursor_init(pkt);
   23b16:	f000 fc82 	bl	2441e <net_pkt_cursor_init>
	return pkt->overwrite;
   23b1a:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
   23b1e:	f895 1038 	ldrb.w	r1, [r5, #56]	; 0x38
   23b22:	f003 0601 	and.w	r6, r3, #1
	pkt->overwrite = overwrite;
   23b26:	f043 0301 	orr.w	r3, r3, #1
   23b2a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		sum =  net_pkt_get_len(pkt) -
   23b2e:	b2a4      	uxth	r4, r4
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
   23b30:	3920      	subs	r1, #32
   23b32:	4628      	mov	r0, r5
   23b34:	f000 fcfd 	bl	24532 <net_pkt_skip>
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   23b38:	69a9      	ldr	r1, [r5, #24]
   23b3a:	2220      	movs	r2, #32
   23b3c:	4620      	mov	r0, r4
   23b3e:	f7ff ff8b 	bl	23a58 <calc_chksum>
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
   23b42:	8fe9      	ldrh	r1, [r5, #62]	; 0x3e
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   23b44:	4604      	mov	r4, r0
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
   23b46:	3120      	adds	r1, #32
   23b48:	4628      	mov	r0, r5
   23b4a:	f000 fcf2 	bl	24532 <net_pkt_skip>
	if (!cur->buf || !cur->pos) {
   23b4e:	6969      	ldr	r1, [r5, #20]
   23b50:	b161      	cbz	r1, 23b6c <net_calc_chksum+0x82>
   23b52:	69ab      	ldr	r3, [r5, #24]
   23b54:	b153      	cbz	r3, 23b6c <net_calc_chksum+0x82>
	len = cur->buf->len - (cur->pos - cur->buf->data);
   23b56:	688a      	ldr	r2, [r1, #8]
   23b58:	f8b1 900c 	ldrh.w	r9, [r1, #12]
   23b5c:	1a9b      	subs	r3, r3, r2
   23b5e:	eba9 0903 	sub.w	r9, r9, r3
	while (cur->buf) {
   23b62:	f8d5 a014 	ldr.w	sl, [r5, #20]
   23b66:	f1ba 0f00 	cmp.w	sl, #0
   23b6a:	d113      	bne.n	23b94 <net_calc_chksum+0xaa>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   23b6c:	2c00      	cmp	r4, #0
   23b6e:	d032      	beq.n	23bd6 <net_calc_chksum+0xec>
   23b70:	ba64      	rev16	r4, r4
   23b72:	b2a4      	uxth	r4, r4
	return ~sum;
   23b74:	43e0      	mvns	r0, r4
   23b76:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	pkt->cursor.pos = backup->pos;
   23b7a:	e9c5 8705 	strd	r8, r7, [r5, #20]
	pkt->overwrite = overwrite;
   23b7e:	f366 0300 	bfi	r3, r6, #0, #1
   23b82:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   23b86:	b280      	uxth	r0, r0
}
   23b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   23b8c:	8998      	ldrh	r0, [r3, #12]
		buf = buf->frags;
   23b8e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   23b90:	4402      	add	r2, r0
		buf = buf->frags;
   23b92:	e7b5      	b.n	23b00 <net_calc_chksum+0x16>
		sum = calc_chksum(sum, cur->pos, len);
   23b94:	4620      	mov	r0, r4
   23b96:	464a      	mov	r2, r9
   23b98:	69a9      	ldr	r1, [r5, #24]
   23b9a:	f7ff ff5d 	bl	23a58 <calc_chksum>
		cur->buf = cur->buf->frags;
   23b9e:	f8da 3000 	ldr.w	r3, [sl]
		sum = calc_chksum(sum, cur->pos, len);
   23ba2:	4604      	mov	r4, r0
		cur->buf = cur->buf->frags;
   23ba4:	616b      	str	r3, [r5, #20]
		if (!cur->buf || !cur->buf->len) {
   23ba6:	2b00      	cmp	r3, #0
   23ba8:	d0e0      	beq.n	23b6c <net_calc_chksum+0x82>
   23baa:	899a      	ldrh	r2, [r3, #12]
   23bac:	2a00      	cmp	r2, #0
   23bae:	d0dd      	beq.n	23b6c <net_calc_chksum+0x82>
		cur->pos = cur->buf->data;
   23bb0:	689b      	ldr	r3, [r3, #8]
		if (len % 2) {
   23bb2:	f019 0f01 	tst.w	r9, #1
		cur->pos = cur->buf->data;
   23bb6:	61ab      	str	r3, [r5, #24]
		if (len % 2) {
   23bb8:	d00b      	beq.n	23bd2 <net_calc_chksum+0xe8>
			sum += *cur->pos;
   23bba:	7819      	ldrb	r1, [r3, #0]
			cur->pos++;
   23bbc:	3301      	adds	r3, #1
			sum += *cur->pos;
   23bbe:	440c      	add	r4, r1
   23bc0:	b2a4      	uxth	r4, r4
			if (sum < *cur->pos) {
   23bc2:	42a1      	cmp	r1, r4
				sum++;
   23bc4:	bf84      	itt	hi
   23bc6:	3401      	addhi	r4, #1
   23bc8:	b2a4      	uxthhi	r4, r4
			cur->pos++;
   23bca:	61ab      	str	r3, [r5, #24]
			len = cur->buf->len - 1;
   23bcc:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   23bd0:	e7c7      	b.n	23b62 <net_calc_chksum+0x78>
			len = cur->buf->len;
   23bd2:	4691      	mov	r9, r2
   23bd4:	e7c5      	b.n	23b62 <net_calc_chksum+0x78>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   23bd6:	f64f 74ff 	movw	r4, #65535	; 0xffff
   23bda:	e7cb      	b.n	23b74 <net_calc_chksum+0x8a>
		return 0;
   23bdc:	2000      	movs	r0, #0
   23bde:	e7d3      	b.n	23b88 <net_calc_chksum+0x9e>

00023be0 <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   23be0:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   23be2:	b942      	cbnz	r2, 23bf6 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   23be4:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   23be6:	b933      	cbnz	r3, 23bf6 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   23be8:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   23bea:	b922      	cbnz	r2, 23bf6 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   23bec:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   23bee:	fab0 f080 	clz	r0, r0
   23bf2:	0940      	lsrs	r0, r0, #5
   23bf4:	4770      	bx	lr
   23bf6:	2000      	movs	r0, #0
   23bf8:	4770      	bx	lr

00023bfa <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   23bfa:	f7fa bb61 	b.w	1e2c0 <z_impl_k_mutex_unlock>

00023bfe <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   23bfe:	f7fa bae7 	b.w	1e1d0 <z_impl_k_mutex_lock>

00023c02 <net_context_ref>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23c02:	3004      	adds	r0, #4
   23c04:	e8d0 3fef 	ldaex	r3, [r0]
   23c08:	1c5a      	adds	r2, r3, #1
   23c0a:	e8c0 2fe1 	stlex	r1, r2, [r0]
   23c0e:	2900      	cmp	r1, #0
   23c10:	d1f8      	bne.n	23c04 <net_context_ref+0x2>
}
   23c12:	1c58      	adds	r0, r3, #1
   23c14:	4770      	bx	lr

00023c16 <net_context_unref>:
{
   23c16:	b538      	push	{r3, r4, r5, lr}
   23c18:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   23c1a:	1d03      	adds	r3, r0, #4
   23c1c:	e8d3 0fef 	ldaex	r0, [r3]
   23c20:	1e42      	subs	r2, r0, #1
   23c22:	e8c3 2fe1 	stlex	r1, r2, [r3]
   23c26:	2900      	cmp	r1, #0
   23c28:	d1f8      	bne.n	23c1c <net_context_unref+0x6>
	if (old_rc != 1) {
   23c2a:	2801      	cmp	r0, #1
   23c2c:	d001      	beq.n	23c32 <net_context_unref+0x1c>
		return old_rc - 1;
   23c2e:	3801      	subs	r0, #1
}
   23c30:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_lock(&context->lock, K_FOREVER);
   23c32:	f104 0508 	add.w	r5, r4, #8
   23c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23c3e:	4628      	mov	r0, r5
   23c40:	f7ff ffdd 	bl	23bfe <k_mutex_lock.constprop.0>
	if (context->conn_handler) {
   23c44:	6c20      	ldr	r0, [r4, #64]	; 0x40
   23c46:	b118      	cbz	r0, 23c50 <net_context_unref+0x3a>
			net_conn_unregister(context->conn_handler);
   23c48:	f7ee ff46 	bl	12ad8 <net_conn_unregister>
		context->conn_handler = NULL;
   23c4c:	2300      	movs	r3, #0
   23c4e:	6423      	str	r3, [r4, #64]	; 0x40
	context->flags &= ~NET_CONTEXT_IN_USE;
   23c50:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	k_mutex_unlock(&context->lock);
   23c54:	4628      	mov	r0, r5
	context->flags &= ~NET_CONTEXT_IN_USE;
   23c56:	f023 0307 	bic.w	r3, r3, #7
   23c5a:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
	k_mutex_unlock(&context->lock);
   23c5e:	f7ff ffcc 	bl	23bfa <k_mutex_unlock>
	return 0;
   23c62:	2000      	movs	r0, #0
   23c64:	e7e4      	b.n	23c30 <net_context_unref+0x1a>

00023c66 <net_context_bind>:
	if (context->conn_handler) {
   23c66:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
   23c68:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23c6a:	4606      	mov	r6, r0
   23c6c:	460d      	mov	r5, r1
	if (context->conn_handler) {
   23c6e:	2b00      	cmp	r3, #0
   23c70:	d140      	bne.n	23cf4 <net_context_bind+0x8e>
	if (IS_ENABLED(CONFIG_NET_IPV6) && addr->sa_family == AF_INET6) {
   23c72:	8809      	ldrh	r1, [r1, #0]
   23c74:	2902      	cmp	r1, #2
   23c76:	d140      	bne.n	23cfa <net_context_bind+0x94>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   23c78:	2a17      	cmp	r2, #23
		struct net_if *iface = NULL;
   23c7a:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   23c7c:	d93d      	bls.n	23cfa <net_context_bind+0x94>
		if (net_ipv6_is_addr_mcast(&addr6->sin6_addr)) {
   23c7e:	792b      	ldrb	r3, [r5, #4]
   23c80:	1d2c      	adds	r4, r5, #4
   23c82:	2bff      	cmp	r3, #255	; 0xff
   23c84:	d109      	bne.n	23c9a <net_context_bind+0x34>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   23c86:	4620      	mov	r0, r4
   23c88:	a901      	add	r1, sp, #4
   23c8a:	f7ed fa01 	bl	11090 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   23c8e:	4604      	mov	r4, r0
   23c90:	bb38      	cbnz	r0, 23ce2 <net_context_bind+0x7c>
				return -ENOENT;
   23c92:	f06f 0001 	mvn.w	r0, #1
}
   23c96:	b002      	add	sp, #8
   23c98:	bd70      	pop	{r4, r5, r6, pc}
		} else if (net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
   23c9a:	4620      	mov	r0, r4
   23c9c:	f7ff ffa0 	bl	23be0 <net_ipv6_is_addr_unspecified>
   23ca0:	b1d0      	cbz	r0, 23cd8 <net_context_bind+0x72>
			iface = net_if_ipv6_select_src_iface(
   23ca2:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   23ca6:	f7ed fb57 	bl	11358 <net_if_ipv6_select_src_iface>
   23caa:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   23cac:	f7ed fc90 	bl	115d0 <net_ipv6_unspecified_address>
   23cb0:	4604      	mov	r4, r0
		if (!iface) {
   23cb2:	9801      	ldr	r0, [sp, #4]
   23cb4:	b1d8      	cbz	r0, 23cee <net_context_bind+0x88>
	context->iface = net_if_get_by_iface(iface);
   23cb6:	f7ed fbd9 	bl	1146c <net_if_get_by_iface>
   23cba:	f886 0088 	strb.w	r0, [r6, #136]	; 0x88
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   23cbe:	2002      	movs	r0, #2
		if (addr6->sin6_port) {
   23cc0:	8869      	ldrh	r1, [r5, #2]
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   23cc2:	83b0      	strh	r0, [r6, #28]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   23cc4:	6234      	str	r4, [r6, #32]
		if (addr6->sin6_port) {
   23cc6:	b171      	cbz	r1, 23ce6 <net_context_bind+0x80>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   23cc8:	462a      	mov	r2, r5
   23cca:	f7ed fc85 	bl	115d8 <check_used_port>
			if (!ret) {
   23cce:	2800      	cmp	r0, #0
   23cd0:	d1e1      	bne.n	23c96 <net_context_bind+0x30>
				net_sin6_ptr(&context->local)->sin6_port =
   23cd2:	886b      	ldrh	r3, [r5, #2]
   23cd4:	83f3      	strh	r3, [r6, #30]
   23cd6:	e7de      	b.n	23c96 <net_context_bind+0x30>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   23cd8:	4620      	mov	r0, r4
   23cda:	a901      	add	r1, sp, #4
   23cdc:	f7ed f84e 	bl	10d7c <net_if_ipv6_addr_lookup>
   23ce0:	e7d5      	b.n	23c8e <net_context_bind+0x28>
			ptr = &ifaddr->address.in6_addr;
   23ce2:	3404      	adds	r4, #4
   23ce4:	e7e5      	b.n	23cb2 <net_context_bind+0x4c>
			addr6->sin6_port =
   23ce6:	8bf3      	ldrh	r3, [r6, #30]
		return 0;
   23ce8:	4608      	mov	r0, r1
			addr6->sin6_port =
   23cea:	806b      	strh	r3, [r5, #2]
   23cec:	e7d3      	b.n	23c96 <net_context_bind+0x30>
			return -EADDRNOTAVAIL;
   23cee:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   23cf2:	e7d0      	b.n	23c96 <net_context_bind+0x30>
		return -EISCONN;
   23cf4:	f06f 007e 	mvn.w	r0, #126	; 0x7e
   23cf8:	e7cd      	b.n	23c96 <net_context_bind+0x30>
	return -EINVAL;
   23cfa:	f06f 0015 	mvn.w	r0, #21
   23cfe:	e7ca      	b.n	23c96 <net_context_bind+0x30>

00023d00 <bind_default>:
{
   23d00:	b570      	push	{r4, r5, r6, lr}
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   23d02:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
   23d06:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   23d08:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   23d0c:	2b02      	cmp	r3, #2
{
   23d0e:	b086      	sub	sp, #24
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   23d10:	d120      	bne.n	23d54 <bind_default+0x54>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   23d12:	6a02      	ldr	r2, [r0, #32]
   23d14:	b9e2      	cbnz	r2, 23d50 <bind_default+0x50>
		addr6.sin6_family = AF_INET6;
   23d16:	f8ad 3000 	strh.w	r3, [sp]
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   23d1a:	f7ed fc59 	bl	115d0 <net_ipv6_unspecified_address>
   23d1e:	4603      	mov	r3, r0
   23d20:	ad01      	add	r5, sp, #4
   23d22:	f100 0610 	add.w	r6, r0, #16
   23d26:	462a      	mov	r2, r5
   23d28:	6818      	ldr	r0, [r3, #0]
   23d2a:	6859      	ldr	r1, [r3, #4]
   23d2c:	3308      	adds	r3, #8
   23d2e:	c203      	stmia	r2!, {r0, r1}
   23d30:	42b3      	cmp	r3, r6
   23d32:	4615      	mov	r5, r2
   23d34:	d1f7      	bne.n	23d26 <bind_default+0x26>
			find_available_port(context,
   23d36:	4669      	mov	r1, sp
   23d38:	4620      	mov	r0, r4
   23d3a:	f7ed fc77 	bl	1162c <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr6,
   23d3e:	2218      	movs	r2, #24
		addr6.sin6_port =
   23d40:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   23d44:	4669      	mov	r1, sp
   23d46:	4620      	mov	r0, r4
   23d48:	f7ff ff8d 	bl	23c66 <net_context_bind>
}
   23d4c:	b006      	add	sp, #24
   23d4e:	bd70      	pop	{r4, r5, r6, pc}
			return 0;
   23d50:	2000      	movs	r0, #0
   23d52:	e7fb      	b.n	23d4c <bind_default+0x4c>
	return -EINVAL;
   23d54:	f06f 0015 	mvn.w	r0, #21
   23d58:	e7f8      	b.n	23d4c <bind_default+0x4c>

00023d5a <net_context_listen>:
	return context->flags & NET_CONTEXT_IN_USE;
   23d5a:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
{
   23d5e:	b510      	push	{r4, lr}
	if (!net_context_is_used(context)) {
   23d60:	07db      	lsls	r3, r3, #31
   23d62:	d50e      	bpl.n	23d82 <net_context_listen+0x28>
	k_mutex_lock(&context->lock, K_FOREVER);
   23d64:	f100 0408 	add.w	r4, r0, #8
   23d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23d70:	4620      	mov	r0, r4
   23d72:	f7ff ff44 	bl	23bfe <k_mutex_lock.constprop.0>
	k_mutex_unlock(&context->lock);
   23d76:	4620      	mov	r0, r4
   23d78:	f7ff ff3f 	bl	23bfa <k_mutex_unlock>
	return -EOPNOTSUPP;
   23d7c:	f06f 005e 	mvn.w	r0, #94	; 0x5e
}
   23d80:	bd10      	pop	{r4, pc}
		return -EBADF;
   23d82:	f06f 0008 	mvn.w	r0, #8
   23d86:	e7fb      	b.n	23d80 <net_context_listen+0x26>

00023d88 <net_context_create_ipv6_new>:
{
   23d88:	b5e0      	push	{r5, r6, r7, lr}
   23d8a:	460d      	mov	r5, r1
   23d8c:	4607      	mov	r7, r0
   23d8e:	461e      	mov	r6, r3
	if (!src) {
   23d90:	4611      	mov	r1, r2
   23d92:	b902      	cbnz	r2, 23d96 <net_context_create_ipv6_new+0xe>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   23d94:	6a01      	ldr	r1, [r0, #32]
	if (net_ipv6_is_addr_unspecified(src)
   23d96:	4608      	mov	r0, r1
   23d98:	f7ff ff22 	bl	23be0 <net_ipv6_is_addr_unspecified>
   23d9c:	b910      	cbnz	r0, 23da4 <net_context_create_ipv6_new+0x1c>
	    || net_ipv6_is_addr_mcast(src)) {
   23d9e:	780b      	ldrb	r3, [r1, #0]
   23da0:	2bff      	cmp	r3, #255	; 0xff
   23da2:	d104      	bne.n	23dae <net_context_create_ipv6_new+0x26>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   23da4:	4631      	mov	r1, r6
   23da6:	6a28      	ldr	r0, [r5, #32]
   23da8:	f7ed fa96 	bl	112d8 <net_if_ipv6_select_src_addr>
   23dac:	4601      	mov	r1, r0
	net_pkt_set_ipv6_hop_limit(pkt,
   23dae:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
	return net_ipv6_create(pkt, src, dst);
   23db2:	4632      	mov	r2, r6
   23db4:	4628      	mov	r0, r5
	pkt->ipv6_hop_limit = hop_limit;
   23db6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
}
   23dba:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
	return net_ipv6_create(pkt, src, dst);
   23dbe:	f000 beab 	b.w	24b18 <net_ipv6_create>

00023dc2 <context_sendto.isra.0>:
static int context_sendto(struct net_context *context,
   23dc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23dc6:	4617      	mov	r7, r2
	if (!net_context_is_used(context)) {
   23dc8:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
static int context_sendto(struct net_context *context,
   23dcc:	4605      	mov	r5, r0
	if (!net_context_is_used(context)) {
   23dce:	07d0      	lsls	r0, r2, #31
static int context_sendto(struct net_context *context,
   23dd0:	4689      	mov	r9, r1
   23dd2:	469a      	mov	sl, r3
   23dd4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   23dd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (!net_context_is_used(context)) {
   23dda:	f140 80c6 	bpl.w	23f6a <context_sendto.isra.0+0x1a8>
	if (sendto && addrlen == 0 && dst_addr == NULL && buf != NULL) {
   23dde:	b149      	cbz	r1, 23df4 <context_sendto.isra.0+0x32>
   23de0:	b943      	cbnz	r3, 23df4 <context_sendto.isra.0+0x32>
   23de2:	f1ba 0f00 	cmp.w	sl, #0
   23de6:	d108      	bne.n	23dfa <context_sendto.isra.0+0x38>
   23de8:	f1b9 0f00 	cmp.w	r9, #0
   23dec:	d175      	bne.n	23eda <context_sendto.isra.0+0x118>
		return -EDESTADDRREQ;
   23dee:	f06f 0478 	mvn.w	r4, #120	; 0x78
   23df2:	e0a8      	b.n	23f46 <context_sendto.isra.0+0x184>
	if (!msghdr && !dst_addr &&
   23df4:	f1ba 0f00 	cmp.w	sl, #0
   23df8:	d0f9      	beq.n	23dee <context_sendto.isra.0+0x2c>
   23dfa:	f04f 0800 	mov.w	r8, #0
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   23dfe:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   23e02:	2a02      	cmp	r2, #2
   23e04:	d16d      	bne.n	23ee2 <context_sendto.isra.0+0x120>
		if (msghdr) {
   23e06:	f1b8 0f00 	cmp.w	r8, #0
   23e0a:	d068      	beq.n	23ede <context_sendto.isra.0+0x11c>
			addrlen = msghdr->msg_namelen;
   23e0c:	e9d8 a300 	ldrd	sl, r3, [r8]
			if (!addr6) {
   23e10:	f1ba 0f00 	cmp.w	sl, #0
   23e14:	d163      	bne.n	23ede <context_sendto.isra.0+0x11c>
				addr6 = net_sin6(&context->remote);
   23e16:	f105 0a28 	add.w	sl, r5, #40	; 0x28
		if (net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
   23e1a:	f10a 0404 	add.w	r4, sl, #4
   23e1e:	4620      	mov	r0, r4
   23e20:	f7ff fede 	bl	23be0 <net_ipv6_is_addr_unspecified>
   23e24:	2800      	cmp	r0, #0
   23e26:	d1e2      	bne.n	23dee <context_sendto.isra.0+0x2c>
	if (msghdr && len == 0) {
   23e28:	f1b8 0f00 	cmp.w	r8, #0
   23e2c:	d005      	beq.n	23e3a <context_sendto.isra.0+0x78>
   23e2e:	b927      	cbnz	r7, 23e3a <context_sendto.isra.0+0x78>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   23e30:	463b      	mov	r3, r7
   23e32:	f8d8 100c 	ldr.w	r1, [r8, #12]
   23e36:	428b      	cmp	r3, r1
   23e38:	d156      	bne.n	23ee8 <context_sendto.isra.0+0x126>
	return net_if_get_by_index(context->iface);
   23e3a:	f995 0088 	ldrsb.w	r0, [r5, #136]	; 0x88
   23e3e:	f7ed fb03 	bl	11448 <net_if_get_by_index>
	pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context), len,
   23e42:	f44f 4b00 	mov.w	fp, #32768	; 0x8000
   23e46:	f04f 0c00 	mov.w	ip, #0
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   23e4a:	f8b5 2086 	ldrh.w	r2, [r5, #134]	; 0x86
   23e4e:	4639      	mov	r1, r7
   23e50:	e9cd bc00 	strd	fp, ip, [sp]
   23e54:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
   23e58:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   23e5c:	f7ed fe8c 	bl	11b78 <net_pkt_alloc_with_buffer>
	if (pkt) {
   23e60:	4606      	mov	r6, r0
   23e62:	2800      	cmp	r0, #0
   23e64:	f000 8084 	beq.w	23f70 <context_sendto.isra.0+0x1ae>
	tmp_len = net_pkt_available_payload_buffer(
   23e68:	f895 1084 	ldrb.w	r1, [r5, #132]	; 0x84
	pkt->context = ctx;
   23e6c:	61c5      	str	r5, [r0, #28]
   23e6e:	f000 fa98 	bl	243a2 <net_pkt_available_payload_buffer>
	context->send_cb = cb;
   23e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	tmp_len = net_pkt_available_payload_buffer(
   23e74:	4683      	mov	fp, r0
	context->send_cb = cb;
   23e76:	64ab      	str	r3, [r5, #72]	; 0x48
	context->user_data = user_data;
   23e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23e7a:	602b      	str	r3, [r5, #0]
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
   23e7c:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
   23e80:	2b11      	cmp	r3, #17
   23e82:	d16c      	bne.n	23f5e <context_sendto.isra.0+0x19c>
   23e84:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   23e88:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   23e8c:	2b02      	cmp	r3, #2
   23e8e:	d169      	bne.n	23f64 <context_sendto.isra.0+0x1a2>
		ret = net_context_create_ipv6_new(context, pkt,
   23e90:	4623      	mov	r3, r4
   23e92:	2200      	movs	r2, #0
   23e94:	4631      	mov	r1, r6
   23e96:	4628      	mov	r0, r5
		dst_port = addr6->sin6_port;
   23e98:	f8ba a002 	ldrh.w	sl, [sl, #2]
		ret = net_context_create_ipv6_new(context, pkt,
   23e9c:	f7ff ff74 	bl	23d88 <net_context_create_ipv6_new>
	if (ret < 0) {
   23ea0:	1e04      	subs	r4, r0, #0
   23ea2:	db58      	blt.n	23f56 <context_sendto.isra.0+0x194>
   23ea4:	455f      	cmp	r7, fp
	ret = bind_default(context);
   23ea6:	4628      	mov	r0, r5
   23ea8:	bf28      	it	cs
   23eaa:	465f      	movcs	r7, fp
   23eac:	f7ff ff28 	bl	23d00 <bind_default>
	if (ret) {
   23eb0:	4604      	mov	r4, r0
   23eb2:	2800      	cmp	r0, #0
   23eb4:	d14d      	bne.n	23f52 <context_sendto.isra.0+0x190>
	ret = net_udp_create(pkt,
   23eb6:	4652      	mov	r2, sl
   23eb8:	4630      	mov	r0, r6
   23eba:	8be9      	ldrh	r1, [r5, #30]
   23ebc:	f001 ffd2 	bl	25e64 <net_udp_create>
	if (ret) {
   23ec0:	4604      	mov	r4, r0
   23ec2:	2800      	cmp	r0, #0
   23ec4:	d145      	bne.n	23f52 <context_sendto.isra.0+0x190>
	if (msghdr) {
   23ec6:	f1b8 0f00 	cmp.w	r8, #0
   23eca:	d140      	bne.n	23f4e <context_sendto.isra.0+0x18c>
		ret = net_pkt_write(pkt, buf, buf_len);
   23ecc:	463a      	mov	r2, r7
   23ece:	4649      	mov	r1, r9
   23ed0:	4630      	mov	r0, r6
   23ed2:	f000 fc6e 	bl	247b2 <net_pkt_write>
   23ed6:	4604      	mov	r4, r0
   23ed8:	e020      	b.n	23f1c <context_sendto.isra.0+0x15a>
   23eda:	46c8      	mov	r8, r9
   23edc:	e78f      	b.n	23dfe <context_sendto.isra.0+0x3c>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   23ede:	2b17      	cmp	r3, #23
   23ee0:	d89b      	bhi.n	23e1a <context_sendto.isra.0+0x58>
		return -EINVAL;
   23ee2:	f06f 0415 	mvn.w	r4, #21
   23ee6:	e02e      	b.n	23f46 <context_sendto.isra.0+0x184>
			len += msghdr->msg_iov[i].iov_len;
   23ee8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23eec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   23ef0:	6852      	ldr	r2, [r2, #4]
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   23ef2:	3301      	adds	r3, #1
			len += msghdr->msg_iov[i].iov_len;
   23ef4:	4417      	add	r7, r2
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   23ef6:	e79e      	b.n	23e36 <context_sendto.isra.0+0x74>
			ret = net_pkt_write(pkt, msghdr->msg_iov[i].iov_base,
   23ef8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   23efc:	4630      	mov	r0, r6
   23efe:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
   23f02:	6852      	ldr	r2, [r2, #4]
   23f04:	f853 1039 	ldr.w	r1, [r3, r9, lsl #3]
   23f08:	f000 fc53 	bl	247b2 <net_pkt_write>
			if (ret < 0) {
   23f0c:	1e04      	subs	r4, r0, #0
   23f0e:	db22      	blt.n	23f56 <context_sendto.isra.0+0x194>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   23f10:	f109 0901 	add.w	r9, r9, #1
   23f14:	f8d8 300c 	ldr.w	r3, [r8, #12]
   23f18:	454b      	cmp	r3, r9
   23f1a:	d8ed      	bhi.n	23ef8 <context_sendto.isra.0+0x136>
	if (ret) {
   23f1c:	b9cc      	cbnz	r4, 23f52 <context_sendto.isra.0+0x190>
	net_pkt_cursor_init(pkt);
   23f1e:	4630      	mov	r0, r6
   23f20:	f000 fa7d 	bl	2441e <net_pkt_cursor_init>
   23f24:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   23f28:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   23f2c:	2b02      	cmp	r3, #2
   23f2e:	d104      	bne.n	23f3a <context_sendto.isra.0+0x178>
		net_ipv6_finalize(pkt, net_context_get_ip_proto(context));
   23f30:	4630      	mov	r0, r6
   23f32:	f895 1084 	ldrb.w	r1, [r5, #132]	; 0x84
   23f36:	f000 fe52 	bl	24bde <net_ipv6_finalize>
		ret = net_send_data(pkt);
   23f3a:	4630      	mov	r0, r6
   23f3c:	f7ff f897 	bl	2306e <net_send_data>
	if (ret < 0) {
   23f40:	1e04      	subs	r4, r0, #0
   23f42:	db08      	blt.n	23f56 <context_sendto.isra.0+0x194>
	return len;
   23f44:	463c      	mov	r4, r7
}
   23f46:	4620      	mov	r0, r4
   23f48:	b003      	add	sp, #12
   23f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   23f4e:	4681      	mov	r9, r0
   23f50:	e7e0      	b.n	23f14 <context_sendto.isra.0+0x152>
		if (ret < 0) {
   23f52:	2c00      	cmp	r4, #0
   23f54:	dae3      	bge.n	23f1e <context_sendto.isra.0+0x15c>
	net_pkt_unref(pkt);
   23f56:	4630      	mov	r0, r6
   23f58:	f000 f9f1 	bl	2433e <net_pkt_unref>
	return ret;
   23f5c:	e7f3      	b.n	23f46 <context_sendto.isra.0+0x184>
		ret = -EPROTONOSUPPORT;
   23f5e:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   23f62:	e7f8      	b.n	23f56 <context_sendto.isra.0+0x194>
	int ret = -EINVAL;
   23f64:	f06f 0415 	mvn.w	r4, #21
   23f68:	e7f5      	b.n	23f56 <context_sendto.isra.0+0x194>
		return -EBADF;
   23f6a:	f06f 0408 	mvn.w	r4, #8
   23f6e:	e7ea      	b.n	23f46 <context_sendto.isra.0+0x184>
		return -ENOMEM;
   23f70:	f06f 040b 	mvn.w	r4, #11
   23f74:	e7e7      	b.n	23f46 <context_sendto.isra.0+0x184>

00023f76 <net_context_connect>:
{
   23f76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23f7a:	4604      	mov	r4, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   23f7c:	f100 0708 	add.w	r7, r0, #8
{
   23f80:	4691      	mov	r9, r2
   23f82:	461e      	mov	r6, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   23f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23f8c:	4638      	mov	r0, r7
{
   23f8e:	4688      	mov	r8, r1
	k_mutex_lock(&context->lock, K_FOREVER);
   23f90:	f7ff fe35 	bl	23bfe <k_mutex_lock.constprop.0>
	if (!net_context_is_used(context)) {
   23f94:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
   23f98:	07eb      	lsls	r3, r5, #31
   23f9a:	d54e      	bpl.n	2403a <net_context_connect+0xc4>
	if (addr->sa_family != net_context_get_family(context)) {
   23f9c:	f8b8 2000 	ldrh.w	r2, [r8]
   23fa0:	f3c5 03c2 	ubfx	r3, r5, #3, #3
   23fa4:	429a      	cmp	r2, r3
   23fa6:	d14e      	bne.n	24046 <net_context_connect+0xd0>
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   23fa8:	f3c5 0341 	ubfx	r3, r5, #1, #2
   23fac:	2b03      	cmp	r3, #3
   23fae:	d047      	beq.n	24040 <net_context_connect+0xca>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   23fb0:	2a02      	cmp	r2, #2
   23fb2:	d148      	bne.n	24046 <net_context_connect+0xd0>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   23fb4:	f1b9 0f17 	cmp.w	r9, #23
   23fb8:	d945      	bls.n	24046 <net_context_connect+0xd0>
		if (net_context_get_ip_proto(context) == IPPROTO_TCP &&
   23fba:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
   23fbe:	2b06      	cmp	r3, #6
   23fc0:	d103      	bne.n	23fca <net_context_connect+0x54>
   23fc2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   23fc6:	2bff      	cmp	r3, #255	; 0xff
   23fc8:	d040      	beq.n	2404c <net_context_connect+0xd6>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   23fca:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   23fce:	4602      	mov	r2, r0
   23fd0:	f108 0304 	add.w	r3, r8, #4
   23fd4:	f108 0114 	add.w	r1, r8, #20
   23fd8:	f853 cb04 	ldr.w	ip, [r3], #4
   23fdc:	428b      	cmp	r3, r1
   23fde:	f842 cb04 	str.w	ip, [r2], #4
   23fe2:	d1f9      	bne.n	23fd8 <net_context_connect+0x62>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   23fe4:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   23fe8:	8563      	strh	r3, [r4, #42]	; 0x2a
		addr6->sin6_family = AF_INET6;
   23fea:	2302      	movs	r3, #2
   23fec:	8523      	strh	r3, [r4, #40]	; 0x28
		if (!net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
   23fee:	f7ff fdf7 	bl	23be0 <net_ipv6_is_addr_unspecified>
   23ff2:	b9f0      	cbnz	r0, 24032 <net_context_connect+0xbc>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   23ff4:	f445 7580 	orr.w	r5, r5, #256	; 0x100
   23ff8:	f8a4 5086 	strh.w	r5, [r4, #134]	; 0x86
		ret = bind_default(context);
   23ffc:	4620      	mov	r0, r4
   23ffe:	f7ff fe7f 	bl	23d00 <bind_default>
		if (ret) {
   24002:	4605      	mov	r5, r0
   24004:	b978      	cbnz	r0, 24026 <net_context_connect+0xb0>
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   24006:	2302      	movs	r3, #2
   24008:	83a3      	strh	r3, [r4, #28]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   2400a:	6a23      	ldr	r3, [r4, #32]
   2400c:	2b00      	cmp	r3, #0
   2400e:	d0ff      	beq.n	24010 <net_context_connect+0x9a>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   24010:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
   24014:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   24018:	2b02      	cmp	r3, #2
   2401a:	d11a      	bne.n	24052 <net_context_connect+0xdc>
		if (cb) {
   2401c:	b11e      	cbz	r6, 24026 <net_context_connect+0xb0>
			cb(context, 0, user_data);
   2401e:	2100      	movs	r1, #0
   24020:	4620      	mov	r0, r4
   24022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   24024:	47b0      	blx	r6
	k_mutex_unlock(&context->lock);
   24026:	4638      	mov	r0, r7
   24028:	f7ff fde7 	bl	23bfa <k_mutex_unlock>
}
   2402c:	4628      	mov	r0, r5
   2402e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   24032:	f425 7580 	bic.w	r5, r5, #256	; 0x100
   24036:	b2ad      	uxth	r5, r5
   24038:	e7de      	b.n	23ff8 <net_context_connect+0x82>
		ret = -EBADF;
   2403a:	f06f 0508 	mvn.w	r5, #8
   2403e:	e7f2      	b.n	24026 <net_context_connect+0xb0>
		ret = -EOPNOTSUPP;
   24040:	f06f 055e 	mvn.w	r5, #94	; 0x5e
   24044:	e7ef      	b.n	24026 <net_context_connect+0xb0>
		ret = -EINVAL;
   24046:	f06f 0515 	mvn.w	r5, #21
   2404a:	e7ec      	b.n	24026 <net_context_connect+0xb0>
			ret = -EADDRNOTAVAIL;
   2404c:	f06f 057c 	mvn.w	r5, #124	; 0x7c
   24050:	e7e9      	b.n	24026 <net_context_connect+0xb0>
		ret = -ENOTSUP;
   24052:	f06f 0585 	mvn.w	r5, #133	; 0x85
   24056:	e7e6      	b.n	24026 <net_context_connect+0xb0>

00024058 <net_context_accept>:
{
   24058:	b538      	push	{r3, r4, r5, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   2405a:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
   2405e:	4604      	mov	r4, r0
	if (!net_context_is_used(context)) {
   24060:	07db      	lsls	r3, r3, #31
   24062:	d521      	bpl.n	240a8 <net_context_accept+0x50>
	k_mutex_lock(&context->lock, K_FOREVER);
   24064:	f100 0508 	add.w	r5, r0, #8
   24068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2406c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24070:	4628      	mov	r0, r5
   24072:	f7ff fdc4 	bl	23bfe <k_mutex_lock.constprop.0>
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
   24076:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
   2407a:	f3c3 0241 	ubfx	r2, r3, #1, #2
   2407e:	2a03      	cmp	r2, #3
   24080:	d003      	beq.n	2408a <net_context_accept+0x32>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   24082:	f3c3 1381 	ubfx	r3, r3, #6, #2
   24086:	2b01      	cmp	r3, #1
   24088:	d10b      	bne.n	240a2 <net_context_accept+0x4a>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   2408a:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
		ret = net_tcp_accept(context, cb, user_data);
   2408e:	2b06      	cmp	r3, #6
   24090:	bf14      	ite	ne
   24092:	2400      	movne	r4, #0
   24094:	f06f 047a 	mvneq.w	r4, #122	; 0x7a
	k_mutex_unlock(&context->lock);
   24098:	4628      	mov	r0, r5
   2409a:	f7ff fdae 	bl	23bfa <k_mutex_unlock>
}
   2409e:	4620      	mov	r0, r4
   240a0:	bd38      	pop	{r3, r4, r5, pc}
		ret = -EINVAL;
   240a2:	f06f 0415 	mvn.w	r4, #21
   240a6:	e7f7      	b.n	24098 <net_context_accept+0x40>
		return -EBADF;
   240a8:	f06f 0408 	mvn.w	r4, #8
   240ac:	e7f7      	b.n	2409e <net_context_accept+0x46>

000240ae <net_context_send>:
{
   240ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   240b0:	4604      	mov	r4, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   240b2:	f100 0608 	add.w	r6, r0, #8
{
   240b6:	b087      	sub	sp, #28
   240b8:	4615      	mov	r5, r2
   240ba:	461f      	mov	r7, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   240bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   240c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   240c4:	4630      	mov	r0, r6
{
   240c6:	9105      	str	r1, [sp, #20]
	k_mutex_lock(&context->lock, K_FOREVER);
   240c8:	f7ff fd99 	bl	23bfe <k_mutex_lock.constprop.0>
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   240cc:	f8b4 0086 	ldrh.w	r0, [r4, #134]	; 0x86
   240d0:	05c3      	lsls	r3, r0, #23
   240d2:	d51b      	bpl.n	2410c <net_context_send+0x5e>
   240d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   240d6:	b1cb      	cbz	r3, 2410c <net_context_send+0x5e>
	ret = context_sendto(context, buf, len, &context->remote,
   240d8:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   240da:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   240de:	2802      	cmp	r0, #2
		addrlen = 0;
   240e0:	bf0c      	ite	eq
   240e2:	2318      	moveq	r3, #24
   240e4:	2300      	movne	r3, #0
	ret = context_sendto(context, buf, len, &context->remote,
   240e6:	9203      	str	r2, [sp, #12]
   240e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   240ea:	4620      	mov	r0, r4
   240ec:	e9cd 7201 	strd	r7, r2, [sp, #4]
   240f0:	9300      	str	r3, [sp, #0]
   240f2:	462a      	mov	r2, r5
   240f4:	f104 0328 	add.w	r3, r4, #40	; 0x28
   240f8:	9905      	ldr	r1, [sp, #20]
   240fa:	f7ff fe62 	bl	23dc2 <context_sendto.isra.0>
   240fe:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
   24100:	4630      	mov	r0, r6
   24102:	f7ff fd7a 	bl	23bfa <k_mutex_unlock>
}
   24106:	4620      	mov	r0, r4
   24108:	b007      	add	sp, #28
   2410a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = -EDESTADDRREQ;
   2410c:	f06f 0478 	mvn.w	r4, #120	; 0x78
   24110:	e7f6      	b.n	24100 <net_context_send+0x52>

00024112 <net_context_sendmsg>:
{
   24112:	b570      	push	{r4, r5, r6, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
   24114:	f100 0608 	add.w	r6, r0, #8
{
   24118:	b086      	sub	sp, #24
   2411a:	4604      	mov	r4, r0
   2411c:	461d      	mov	r5, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   2411e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24126:	4630      	mov	r0, r6
{
   24128:	9105      	str	r1, [sp, #20]
	k_mutex_lock(&context->lock, K_FOREVER);
   2412a:	f7ff fd68 	bl	23bfe <k_mutex_lock.constprop.0>
	ret = context_sendto(context, msghdr, 0, NULL, 0,
   2412e:	2301      	movs	r3, #1
   24130:	9303      	str	r3, [sp, #12]
   24132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24134:	9905      	ldr	r1, [sp, #20]
   24136:	e9cd 5301 	strd	r5, r3, [sp, #4]
   2413a:	2300      	movs	r3, #0
   2413c:	4620      	mov	r0, r4
   2413e:	461a      	mov	r2, r3
   24140:	9300      	str	r3, [sp, #0]
   24142:	f7ff fe3e 	bl	23dc2 <context_sendto.isra.0>
   24146:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
   24148:	4630      	mov	r0, r6
   2414a:	f7ff fd56 	bl	23bfa <k_mutex_unlock>
}
   2414e:	4620      	mov	r0, r4
   24150:	b006      	add	sp, #24
   24152:	bd70      	pop	{r4, r5, r6, pc}

00024154 <net_context_sendto>:
{
   24154:	b5f0      	push	{r4, r5, r6, r7, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
   24156:	f100 0708 	add.w	r7, r0, #8
{
   2415a:	b087      	sub	sp, #28
   2415c:	4604      	mov	r4, r0
   2415e:	4615      	mov	r5, r2
   24160:	461e      	mov	r6, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   24162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2416a:	4638      	mov	r0, r7
{
   2416c:	9105      	str	r1, [sp, #20]
	k_mutex_lock(&context->lock, K_FOREVER);
   2416e:	f7ff fd46 	bl	23bfe <k_mutex_lock.constprop.0>
	ret = context_sendto(context, buf, len, dst_addr, addrlen,
   24172:	2301      	movs	r3, #1
   24174:	9303      	str	r3, [sp, #12]
   24176:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24178:	462a      	mov	r2, r5
   2417a:	9302      	str	r3, [sp, #8]
   2417c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2417e:	9905      	ldr	r1, [sp, #20]
   24180:	9301      	str	r3, [sp, #4]
   24182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24184:	4620      	mov	r0, r4
   24186:	9300      	str	r3, [sp, #0]
   24188:	4633      	mov	r3, r6
   2418a:	f7ff fe1a 	bl	23dc2 <context_sendto.isra.0>
   2418e:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
   24190:	4638      	mov	r0, r7
   24192:	f7ff fd32 	bl	23bfa <k_mutex_unlock>
}
   24196:	4620      	mov	r0, r4
   24198:	b007      	add	sp, #28
   2419a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002419c <net_context_update_recv_wnd>:

int net_context_update_recv_wnd(struct net_context *context,
				s32_t delta)
{
   2419c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
		net_if_is_ip_offloaded(net_context_get_iface(context))) {
		return 0;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
   2419e:	f100 0408 	add.w	r4, r0, #8
   241a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   241a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   241aa:	4620      	mov	r0, r4
   241ac:	f7ff fd27 	bl	23bfe <k_mutex_lock.constprop.0>

	ret = net_tcp_update_recv_wnd(context, delta);

	k_mutex_unlock(&context->lock);
   241b0:	4620      	mov	r0, r4
   241b2:	f7ff fd22 	bl	23bfa <k_mutex_unlock>

	return ret;
}
   241b6:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   241ba:	bd10      	pop	{r4, pc}

000241bc <net_buf_frags_len>:
	size_t bytes = 0;
   241bc:	2300      	movs	r3, #0
	while (buf) {
   241be:	b908      	cbnz	r0, 241c4 <net_buf_frags_len+0x8>
	}

	return bytes;
}
   241c0:	4618      	mov	r0, r3
   241c2:	4770      	bx	lr
		bytes += buf->len;
   241c4:	8982      	ldrh	r2, [r0, #12]
		buf = buf->frags;
   241c6:	6800      	ldr	r0, [r0, #0]
		bytes += buf->len;
   241c8:	4413      	add	r3, r2
		buf = buf->frags;
   241ca:	e7f8      	b.n	241be <net_buf_frags_len+0x2>

000241cc <pkt_cursor_jump>:

static void pkt_cursor_jump(struct net_pkt *pkt, bool write)
{
	struct net_pkt_cursor *cursor = &pkt->cursor;

	cursor->buf = cursor->buf->frags;
   241cc:	6943      	ldr	r3, [r0, #20]
	while (cursor->buf) {
		size_t len = write ? cursor->buf->size : cursor->buf->len;

		if (!len) {
			cursor->buf = cursor->buf->frags;
   241ce:	681b      	ldr	r3, [r3, #0]
   241d0:	6143      	str	r3, [r0, #20]
	while (cursor->buf) {
   241d2:	6943      	ldr	r3, [r0, #20]
   241d4:	b90b      	cbnz	r3, 241da <pkt_cursor_jump+0xe>
	}

	if (cursor->buf) {
		cursor->pos = cursor->buf->data;
	} else {
		cursor->pos = NULL;
   241d6:	6183      	str	r3, [r0, #24]
	}
}
   241d8:	4770      	bx	lr
		size_t len = write ? cursor->buf->size : cursor->buf->len;
   241da:	b121      	cbz	r1, 241e6 <pkt_cursor_jump+0x1a>
   241dc:	89da      	ldrh	r2, [r3, #14]
		if (!len) {
   241de:	2a00      	cmp	r2, #0
   241e0:	d0f5      	beq.n	241ce <pkt_cursor_jump+0x2>
		cursor->pos = cursor->buf->data;
   241e2:	689b      	ldr	r3, [r3, #8]
   241e4:	e7f7      	b.n	241d6 <pkt_cursor_jump+0xa>
		size_t len = write ? cursor->buf->size : cursor->buf->len;
   241e6:	899a      	ldrh	r2, [r3, #12]
   241e8:	e7f9      	b.n	241de <pkt_cursor_jump+0x12>

000241ea <pkt_cursor_advance>:
static void pkt_cursor_advance(struct net_pkt *pkt, bool write)
{
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (!cursor->buf) {
   241ea:	6943      	ldr	r3, [r0, #20]
{
   241ec:	b410      	push	{r4}
	if (!cursor->buf) {
   241ee:	b163      	cbz	r3, 2420a <pkt_cursor_advance+0x20>
		return;
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   241f0:	b149      	cbz	r1, 24206 <pkt_cursor_advance+0x1c>
   241f2:	89dc      	ldrh	r4, [r3, #14]
	if ((cursor->pos - cursor->buf->data) == len) {
   241f4:	6982      	ldr	r2, [r0, #24]
   241f6:	689b      	ldr	r3, [r3, #8]
   241f8:	1ad2      	subs	r2, r2, r3
   241fa:	42a2      	cmp	r2, r4
   241fc:	d105      	bne.n	2420a <pkt_cursor_advance+0x20>
		pkt_cursor_jump(pkt, write);
	}
}
   241fe:	f85d 4b04 	ldr.w	r4, [sp], #4
		pkt_cursor_jump(pkt, write);
   24202:	f7ff bfe3 	b.w	241cc <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
   24206:	899c      	ldrh	r4, [r3, #12]
   24208:	e7f4      	b.n	241f4 <pkt_cursor_advance+0xa>
}
   2420a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2420e:	4770      	bx	lr

00024210 <pkt_cursor_update>:
	return pkt->overwrite;
   24210:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39

static void pkt_cursor_update(struct net_pkt *pkt,
			      size_t length, bool write)
{
   24214:	b4f0      	push	{r4, r5, r6, r7}
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (net_pkt_is_being_overwritten(pkt)) {
   24216:	f013 0601 	ands.w	r6, r3, #1
   2421a:	6945      	ldr	r5, [r0, #20]
   2421c:	d10f      	bne.n	2423e <pkt_cursor_update+0x2e>
		write = false;
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   2421e:	b172      	cbz	r2, 2423e <pkt_cursor_update+0x2e>
   24220:	89ef      	ldrh	r7, [r5, #14]
	if (length + (cursor->pos - cursor->buf->data) == len &&
   24222:	6984      	ldr	r4, [r0, #24]
   24224:	68ab      	ldr	r3, [r5, #8]
   24226:	1ae3      	subs	r3, r4, r3
   24228:	440b      	add	r3, r1
   2422a:	42bb      	cmp	r3, r7
   2422c:	d10a      	bne.n	24244 <pkt_cursor_update+0x34>
   2422e:	b116      	cbz	r6, 24236 <pkt_cursor_update+0x26>
	    !(net_pkt_is_being_overwritten(pkt) && len < cursor->buf->size)) {
   24230:	89eb      	ldrh	r3, [r5, #14]
   24232:	42bb      	cmp	r3, r7
   24234:	d806      	bhi.n	24244 <pkt_cursor_update+0x34>
		pkt_cursor_jump(pkt, write);
	} else {
		cursor->pos += length;
	}
}
   24236:	bcf0      	pop	{r4, r5, r6, r7}
		pkt_cursor_jump(pkt, write);
   24238:	4611      	mov	r1, r2
   2423a:	f7ff bfc7 	b.w	241cc <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
   2423e:	2200      	movs	r2, #0
   24240:	89af      	ldrh	r7, [r5, #12]
   24242:	e7ee      	b.n	24222 <pkt_cursor_update+0x12>
		cursor->pos += length;
   24244:	4421      	add	r1, r4
   24246:	6181      	str	r1, [r0, #24]
}
   24248:	bcf0      	pop	{r4, r5, r6, r7}
   2424a:	4770      	bx	lr

0002424c <net_pkt_cursor_operate>:

/* Internal function that does all operation (skip/read/write/memset) */
static int net_pkt_cursor_operate(struct net_pkt *pkt,
				  void *data, size_t length,
				  bool copy, bool write)
{
   2424c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24250:	4606      	mov	r6, r0
   24252:	460f      	mov	r7, r1
   24254:	4615      	mov	r5, r2
   24256:	4699      	mov	r9, r3
   24258:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* We use such variable to avoid lengthy lines */
	struct net_pkt_cursor *c_op = &pkt->cursor;

	while (c_op->buf && length) {
   2425c:	6973      	ldr	r3, [r6, #20]
   2425e:	2b00      	cmp	r3, #0
   24260:	d051      	beq.n	24306 <net_pkt_cursor_operate+0xba>
   24262:	b90d      	cbnz	r5, 24268 <net_pkt_cursor_operate+0x1c>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
   24264:	4628      	mov	r0, r5
   24266:	e00d      	b.n	24284 <net_pkt_cursor_operate+0x38>
   24268:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
   2426c:	4630      	mov	r0, r6
   2426e:	f013 0f01 	tst.w	r3, #1
   24272:	bf0c      	ite	eq
   24274:	4641      	moveq	r1, r8
   24276:	2100      	movne	r1, #0
   24278:	f7ff ffb7 	bl	241ea <pkt_cursor_advance>
		if (c_op->buf == NULL) {
   2427c:	6973      	ldr	r3, [r6, #20]
   2427e:	b91b      	cbnz	r3, 24288 <net_pkt_cursor_operate+0x3c>
		return -ENOBUFS;
   24280:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   24284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   24288:	69b0      	ldr	r0, [r6, #24]
   2428a:	689c      	ldr	r4, [r3, #8]
   2428c:	1b04      	subs	r4, r0, r4
   2428e:	f1b8 0f00 	cmp.w	r8, #0
   24292:	d02d      	beq.n	242f0 <net_pkt_cursor_operate+0xa4>
   24294:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
   24298:	07d2      	lsls	r2, r2, #31
   2429a:	d429      	bmi.n	242f0 <net_pkt_cursor_operate+0xa4>
			d_len = c_op->buf->size - (c_op->pos - c_op->buf->data);
   2429c:	89db      	ldrh	r3, [r3, #14]
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   2429e:	1b1c      	subs	r4, r3, r4
		if (!d_len) {
   242a0:	2c00      	cmp	r4, #0
   242a2:	d0ed      	beq.n	24280 <net_pkt_cursor_operate+0x34>
		if (length < d_len) {
   242a4:	42ac      	cmp	r4, r5
   242a6:	bf28      	it	cs
   242a8:	462c      	movcs	r4, r5
		if (copy) {
   242aa:	f1b9 0f00 	cmp.w	r9, #0
   242ae:	d023      	beq.n	242f8 <net_pkt_cursor_operate+0xac>
			memcpy(write ? c_op->pos : data,
   242b0:	f1b8 0f00 	cmp.w	r8, #0
   242b4:	d11e      	bne.n	242f4 <net_pkt_cursor_operate+0xa8>
   242b6:	4601      	mov	r1, r0
   242b8:	4638      	mov	r0, r7
   242ba:	4622      	mov	r2, r4
   242bc:	f003 fb43 	bl	27946 <memcpy>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   242c0:	f1b8 0f00 	cmp.w	r8, #0
   242c4:	d008      	beq.n	242d8 <net_pkt_cursor_operate+0x8c>
   242c6:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
   242ca:	07db      	lsls	r3, r3, #31
   242cc:	d404      	bmi.n	242d8 <net_pkt_cursor_operate+0x8c>
			net_buf_add(c_op->buf, len);
   242ce:	6970      	ldr	r0, [r6, #20]
   242d0:	4621      	mov	r1, r4
   242d2:	3008      	adds	r0, #8
   242d4:	f7fe fe7f 	bl	22fd6 <net_buf_simple_add>
		pkt_cursor_update(pkt, len, write);
   242d8:	4642      	mov	r2, r8
   242da:	4621      	mov	r1, r4
   242dc:	4630      	mov	r0, r6
   242de:	f7ff ff97 	bl	24210 <pkt_cursor_update>
		if (copy && data) {
   242e2:	f1b9 0f00 	cmp.w	r9, #0
   242e6:	d001      	beq.n	242ec <net_pkt_cursor_operate+0xa0>
   242e8:	b107      	cbz	r7, 242ec <net_pkt_cursor_operate+0xa0>
			data = (u8_t *) data + len;
   242ea:	4427      	add	r7, r4
		length -= len;
   242ec:	1b2d      	subs	r5, r5, r4
   242ee:	e7b5      	b.n	2425c <net_pkt_cursor_operate+0x10>
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   242f0:	899b      	ldrh	r3, [r3, #12]
   242f2:	e7d4      	b.n	2429e <net_pkt_cursor_operate+0x52>
   242f4:	4639      	mov	r1, r7
   242f6:	e7e0      	b.n	242ba <net_pkt_cursor_operate+0x6e>
		} else if (data) {
   242f8:	2f00      	cmp	r7, #0
   242fa:	d0e1      	beq.n	242c0 <net_pkt_cursor_operate+0x74>
__ssp_bos_icheck3(memset, void *, int)
   242fc:	4622      	mov	r2, r4
   242fe:	6839      	ldr	r1, [r7, #0]
   24300:	f003 fb5b 	bl	279ba <memset>
   24304:	e7dc      	b.n	242c0 <net_pkt_cursor_operate+0x74>
	if (length) {
   24306:	2d00      	cmp	r5, #0
   24308:	d0ac      	beq.n	24264 <net_pkt_cursor_operate+0x18>
   2430a:	e7b9      	b.n	24280 <net_pkt_cursor_operate+0x34>

0002430c <net_pkt_ref>:
{
   2430c:	b510      	push	{r4, lr}
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
   2430e:	f100 0324 	add.w	r3, r0, #36	; 0x24
   24312:	b170      	cbz	r0, 24332 <net_pkt_ref+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24314:	e8d3 2faf 	lda	r2, [r3]
		if (!ref) {
   24318:	b15a      	cbz	r2, 24332 <net_pkt_ref+0x26>
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref + 1));
   2431a:	1c51      	adds	r1, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2431c:	e8d3 4fef 	ldaex	r4, [r3]
   24320:	4294      	cmp	r4, r2
   24322:	d104      	bne.n	2432e <net_pkt_ref+0x22>
   24324:	e8c3 1fec 	stlex	ip, r1, [r3]
   24328:	f1bc 0f00 	cmp.w	ip, #0
   2432c:	d1f6      	bne.n	2431c <net_pkt_ref+0x10>
   2432e:	d1f0      	bne.n	24312 <net_pkt_ref+0x6>
}
   24330:	bd10      	pop	{r4, pc}
			return NULL;
   24332:	2000      	movs	r0, #0
   24334:	e7fc      	b.n	24330 <net_pkt_ref+0x24>

00024336 <net_pkt_frag_unref>:
	if (!frag) {
   24336:	b108      	cbz	r0, 2433c <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
   24338:	f7ec baa6 	b.w	10888 <net_buf_unref>
}
   2433c:	4770      	bx	lr

0002433e <net_pkt_unref>:
{
   2433e:	b507      	push	{r0, r1, r2, lr}
   24340:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   24342:	b1e8      	cbz	r0, 24380 <net_pkt_unref+0x42>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24344:	9b01      	ldr	r3, [sp, #4]
   24346:	3324      	adds	r3, #36	; 0x24
   24348:	e8d3 3faf 	lda	r3, [r3]
		if (!ref) {
   2434c:	b1c3      	cbz	r3, 24380 <net_pkt_unref+0x42>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2434e:	9a01      	ldr	r2, [sp, #4]
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref - 1));
   24350:	1e59      	subs	r1, r3, #1
   24352:	3224      	adds	r2, #36	; 0x24
   24354:	e8d2 0fef 	ldaex	r0, [r2]
   24358:	4298      	cmp	r0, r3
   2435a:	d104      	bne.n	24366 <net_pkt_unref+0x28>
   2435c:	e8c2 1fec 	stlex	ip, r1, [r2]
   24360:	f1bc 0f00 	cmp.w	ip, #0
   24364:	d1f6      	bne.n	24354 <net_pkt_unref+0x16>
   24366:	d1ed      	bne.n	24344 <net_pkt_unref+0x6>
	if (ref > 1) {
   24368:	2b01      	cmp	r3, #1
   2436a:	dc09      	bgt.n	24380 <net_pkt_unref+0x42>
	if (pkt->frags) {
   2436c:	9b01      	ldr	r3, [sp, #4]
   2436e:	6918      	ldr	r0, [r3, #16]
   24370:	b108      	cbz	r0, 24376 <net_pkt_unref+0x38>
		net_pkt_frag_unref(pkt->frags);
   24372:	f7ff ffe0 	bl	24336 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   24376:	9b01      	ldr	r3, [sp, #4]
   24378:	a901      	add	r1, sp, #4
   2437a:	68d8      	ldr	r0, [r3, #12]
   2437c:	f7f9 fe2c 	bl	1dfd8 <k_mem_slab_free>
}
   24380:	b003      	add	sp, #12
   24382:	f85d fb04 	ldr.w	pc, [sp], #4

00024386 <net_pkt_available_buffer>:
{
   24386:	b508      	push	{r3, lr}
	if (!pkt) {
   24388:	b130      	cbz	r0, 24398 <net_pkt_available_buffer+0x12>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
   2438a:	6900      	ldr	r0, [r0, #16]
	size_t size = 0;
   2438c:	2100      	movs	r1, #0
	struct net_buf *buf = pkt->buffer;
   2438e:	4603      	mov	r3, r0
	while (buf) {
   24390:	b91b      	cbnz	r3, 2439a <net_pkt_available_buffer+0x14>
	return net_buf_frags_len(pkt->frags);
   24392:	f7ff ff13 	bl	241bc <net_buf_frags_len>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
   24396:	1a08      	subs	r0, r1, r0
}
   24398:	bd08      	pop	{r3, pc}
		size += buf->size;
   2439a:	89da      	ldrh	r2, [r3, #14]
		buf = buf->frags;
   2439c:	681b      	ldr	r3, [r3, #0]
		size += buf->size;
   2439e:	4411      	add	r1, r2
		buf = buf->frags;
   243a0:	e7f6      	b.n	24390 <net_pkt_available_buffer+0xa>

000243a2 <net_pkt_available_payload_buffer>:
{
   243a2:	b538      	push	{r3, r4, r5, lr}
	if (!pkt) {
   243a4:	4605      	mov	r5, r0
   243a6:	b1c8      	cbz	r0, 243dc <net_pkt_available_payload_buffer+0x3a>
	return pkt->family;
   243a8:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	if (family == AF_UNSPEC) {
   243ac:	f013 0f0e 	tst.w	r3, #14
	hdr_len = pkt_estimate_headers_length(pkt, net_pkt_family(pkt), proto);
   243b0:	f3c3 0442 	ubfx	r4, r3, #1, #3
	if (family == AF_UNSPEC) {
   243b4:	d006      	beq.n	243c4 <net_pkt_available_payload_buffer+0x22>
		hdr_len += NET_IPV6H_LEN;
   243b6:	2c02      	cmp	r4, #2
   243b8:	bf14      	ite	ne
   243ba:	2400      	movne	r4, #0
   243bc:	2428      	moveq	r4, #40	; 0x28
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   243be:	2911      	cmp	r1, #17
   243c0:	d10d      	bne.n	243de <net_pkt_available_payload_buffer+0x3c>
		hdr_len += NET_UDPH_LEN;
   243c2:	3408      	adds	r4, #8
	return net_buf_frags_len(pkt->frags);
   243c4:	6928      	ldr	r0, [r5, #16]
   243c6:	f7ff fef9 	bl	241bc <net_buf_frags_len>
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   243ca:	42a0      	cmp	r0, r4
   243cc:	bf38      	it	cc
   243ce:	1a24      	subcc	r4, r4, r0
	len = net_pkt_available_buffer(pkt) - hdr_len;
   243d0:	4628      	mov	r0, r5
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   243d2:	bf28      	it	cs
   243d4:	2400      	movcs	r4, #0
	len = net_pkt_available_buffer(pkt) - hdr_len;
   243d6:	f7ff ffd6 	bl	24386 <net_pkt_available_buffer>
   243da:	1b00      	subs	r0, r0, r4
}
   243dc:	bd38      	pop	{r3, r4, r5, pc}
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
   243de:	2901      	cmp	r1, #1
   243e0:	d001      	beq.n	243e6 <net_pkt_available_payload_buffer+0x44>
   243e2:	293a      	cmp	r1, #58	; 0x3a
   243e4:	d1ee      	bne.n	243c4 <net_pkt_available_payload_buffer+0x22>
		hdr_len += NET_ICMPH_LEN;
   243e6:	3404      	adds	r4, #4
   243e8:	e7ec      	b.n	243c4 <net_pkt_available_payload_buffer+0x22>

000243ea <net_pkt_trim_buffer>:
{
   243ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   243ec:	4604      	mov	r4, r0
	buf = pkt->buffer;
   243ee:	6900      	ldr	r0, [r0, #16]
			buf->frags = NULL;
   243f0:	2700      	movs	r7, #0
	prev = buf;
   243f2:	4605      	mov	r5, r0
	while (buf) {
   243f4:	b900      	cbnz	r0, 243f8 <net_pkt_trim_buffer+0xe>
}
   243f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!buf->len) {
   243f8:	8983      	ldrh	r3, [r0, #12]
		struct net_buf *next = buf->frags;
   243fa:	6806      	ldr	r6, [r0, #0]
		if (!buf->len) {
   243fc:	b93b      	cbnz	r3, 2440e <net_pkt_trim_buffer+0x24>
			if (buf == pkt->buffer) {
   243fe:	6923      	ldr	r3, [r4, #16]
   24400:	4283      	cmp	r3, r0
   24402:	d107      	bne.n	24414 <net_pkt_trim_buffer+0x2a>
				pkt->buffer = next;
   24404:	6126      	str	r6, [r4, #16]
			buf->frags = NULL;
   24406:	6007      	str	r7, [r0, #0]
			net_buf_unref(buf);
   24408:	f7ec fa3e 	bl	10888 <net_buf_unref>
   2440c:	4628      	mov	r0, r5
   2440e:	4605      	mov	r5, r0
   24410:	4630      	mov	r0, r6
   24412:	e7ef      	b.n	243f4 <net_pkt_trim_buffer+0xa>
			} else if (buf == prev->frags) {
   24414:	682b      	ldr	r3, [r5, #0]
   24416:	4283      	cmp	r3, r0
				prev->frags = next;
   24418:	bf08      	it	eq
   2441a:	602e      	streq	r6, [r5, #0]
   2441c:	e7f3      	b.n	24406 <net_pkt_trim_buffer+0x1c>

0002441e <net_pkt_cursor_init>:
	pkt->cursor.buf = pkt->buffer;
   2441e:	6903      	ldr	r3, [r0, #16]
   24420:	6143      	str	r3, [r0, #20]
	if (pkt->cursor.buf) {
   24422:	b103      	cbz	r3, 24426 <net_pkt_cursor_init+0x8>
		pkt->cursor.pos = pkt->cursor.buf->data;
   24424:	689b      	ldr	r3, [r3, #8]
   24426:	6183      	str	r3, [r0, #24]
}
   24428:	4770      	bx	lr

0002442a <pkt_alloc>:
{
   2442a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2442c:	4604      	mov	r4, r0
   2442e:	4616      	mov	r6, r2
   24430:	461d      	mov	r5, r3
	if (k_is_in_isr()) {
   24432:	f003 f85a 	bl	274ea <k_is_in_isr>
   24436:	b108      	cbz	r0, 2443c <pkt_alloc+0x12>
		timeout = K_NO_WAIT;
   24438:	2600      	movs	r6, #0
   2443a:	4635      	mov	r5, r6
	ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   2443c:	a901      	add	r1, sp, #4
   2443e:	4632      	mov	r2, r6
   24440:	462b      	mov	r3, r5
   24442:	4620      	mov	r0, r4
   24444:	f7f9 fd96 	bl	1df74 <k_mem_slab_alloc>
	if (ret) {
   24448:	4601      	mov	r1, r0
   2444a:	b978      	cbnz	r0, 2446c <pkt_alloc+0x42>
   2444c:	2244      	movs	r2, #68	; 0x44
   2444e:	9801      	ldr	r0, [sp, #4]
   24450:	f003 fab3 	bl	279ba <memset>
	pkt->atomic_ref = ATOMIC_INIT(1);
   24454:	2301      	movs	r3, #1
   24456:	9801      	ldr	r0, [sp, #4]
   24458:	6243      	str	r3, [r0, #36]	; 0x24
	pkt->ipv6_next_hdr = next_hdr;
   2445a:	23ff      	movs	r3, #255	; 0xff
	pkt->slab = slab;
   2445c:	60c4      	str	r4, [r0, #12]
   2445e:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
	net_pkt_cursor_init(pkt);
   24462:	f7ff ffdc 	bl	2441e <net_pkt_cursor_init>
	return pkt;
   24466:	9801      	ldr	r0, [sp, #4]
}
   24468:	b002      	add	sp, #8
   2446a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   2446c:	2000      	movs	r0, #0
   2446e:	e7fb      	b.n	24468 <pkt_alloc+0x3e>

00024470 <pkt_alloc_on_iface>:
{
   24470:	b510      	push	{r4, lr}
   24472:	460c      	mov	r4, r1
	pkt = pkt_alloc(slab, timeout);
   24474:	f7ff ffd9 	bl	2442a <pkt_alloc>
	if (pkt) {
   24478:	b148      	cbz	r0, 2448e <pkt_alloc_on_iface+0x1e>
	pkt->iface = iface;
   2447a:	6204      	str	r4, [r0, #32]
	if (iface) {
   2447c:	b13c      	cbz	r4, 2448e <pkt_alloc_on_iface+0x1e>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   2447e:	6823      	ldr	r3, [r4, #0]
   24480:	7d5b      	ldrb	r3, [r3, #21]
   24482:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   24486:	6823      	ldr	r3, [r4, #0]
   24488:	7d5b      	ldrb	r3, [r3, #21]
   2448a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
}
   2448e:	bd10      	pop	{r4, pc}

00024490 <net_pkt_append_buffer>:
	if (!pkt->buffer) {
   24490:	6902      	ldr	r2, [r0, #16]
{
   24492:	b510      	push	{r4, lr}
   24494:	460c      	mov	r4, r1
	if (!pkt->buffer) {
   24496:	b922      	cbnz	r2, 244a2 <net_pkt_append_buffer+0x12>
}
   24498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pkt->buffer = buffer;
   2449c:	6101      	str	r1, [r0, #16]
		net_pkt_cursor_init(pkt);
   2449e:	f7ff bfbe 	b.w	2441e <net_pkt_cursor_init>
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   244a2:	4610      	mov	r0, r2
   244a4:	f7fe fd86 	bl	22fb4 <net_buf_frag_last>
   244a8:	4621      	mov	r1, r4
}
   244aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   244ae:	f7fe bd87 	b.w	22fc0 <net_buf_frag_insert>

000244b2 <pkt_alloc_with_buffer>:
{
   244b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244b6:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   244ba:	4604      	mov	r4, r0
   244bc:	468b      	mov	fp, r1
	u64_t end = z_timeout_end_calc(timeout);
   244be:	4630      	mov	r0, r6
   244c0:	4639      	mov	r1, r7
{
   244c2:	4690      	mov	r8, r2
   244c4:	469a      	mov	sl, r3
	u64_t end = z_timeout_end_calc(timeout);
   244c6:	f003 f8eb 	bl	276a0 <z_timeout_end_calc>
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   244ca:	4632      	mov	r2, r6
	u64_t end = z_timeout_end_calc(timeout);
   244cc:	4605      	mov	r5, r0
   244ce:	4689      	mov	r9, r1
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   244d0:	4620      	mov	r0, r4
   244d2:	463b      	mov	r3, r7
   244d4:	4659      	mov	r1, fp
   244d6:	f7ff ffcb 	bl	24470 <pkt_alloc_on_iface>
	if (!pkt) {
   244da:	4604      	mov	r4, r0
   244dc:	b328      	cbz	r0, 2452a <pkt_alloc_with_buffer+0x78>
	pkt->family = family;
   244de:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   244e2:	f36a 0343 	bfi	r3, sl, #1, #3
   244e6:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   244ea:	ea56 0307 	orrs.w	r3, r6, r7
   244ee:	d00f      	beq.n	24510 <pkt_alloc_with_buffer+0x5e>
   244f0:	1c7b      	adds	r3, r7, #1
   244f2:	bf08      	it	eq
   244f4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   244f8:	d00a      	beq.n	24510 <pkt_alloc_with_buffer+0x5e>
		s64_t remaining = end - z_tick_get();
   244fa:	f7fa fd4f 	bl	1ef9c <z_tick_get>
   244fe:	1a2e      	subs	r6, r5, r0
   24500:	eb69 0701 	sbc.w	r7, r9, r1
   24504:	2e00      	cmp	r6, #0
   24506:	f177 0300 	sbcs.w	r3, r7, #0
   2450a:	bfbc      	itt	lt
   2450c:	2600      	movlt	r6, #0
   2450e:	2700      	movlt	r7, #0
	ret = net_pkt_alloc_buffer(pkt, size, proto, timeout);
   24510:	4641      	mov	r1, r8
   24512:	4620      	mov	r0, r4
   24514:	e9cd 6700 	strd	r6, r7, [sp]
   24518:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   2451c:	f7ed fa6e 	bl	119fc <net_pkt_alloc_buffer>
	if (ret) {
   24520:	b118      	cbz	r0, 2452a <pkt_alloc_with_buffer+0x78>
		net_pkt_unref(pkt);
   24522:	4620      	mov	r0, r4
   24524:	f7ff ff0b 	bl	2433e <net_pkt_unref>
		return NULL;
   24528:	2400      	movs	r4, #0
}
   2452a:	4620      	mov	r0, r4
   2452c:	b003      	add	sp, #12
   2452e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024532 <net_pkt_skip>:

int net_pkt_skip(struct net_pkt *pkt, size_t skip)
{
	NET_DBG("pkt %p skip %zu", pkt, skip);

	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   24532:	2301      	movs	r3, #1
{
   24534:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   24536:	9300      	str	r3, [sp, #0]
   24538:	2300      	movs	r3, #0
{
   2453a:	460a      	mov	r2, r1
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   2453c:	4619      	mov	r1, r3
   2453e:	f7ff fe85 	bl	2424c <net_pkt_cursor_operate>
}
   24542:	b003      	add	sp, #12
   24544:	f85d fb04 	ldr.w	pc, [sp], #4

00024548 <net_pkt_memset>:

int net_pkt_memset(struct net_pkt *pkt, int byte, size_t amount)
{
   24548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	NET_DBG("pkt %p byte %d amount %zu", pkt, byte, amount);

	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   2454a:	2301      	movs	r3, #1
{
   2454c:	9103      	str	r1, [sp, #12]
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   2454e:	9300      	str	r3, [sp, #0]
   24550:	a903      	add	r1, sp, #12
   24552:	2300      	movs	r3, #0
   24554:	f7ff fe7a 	bl	2424c <net_pkt_cursor_operate>
}
   24558:	b005      	add	sp, #20
   2455a:	f85d fb04 	ldr.w	pc, [sp], #4

0002455e <net_pkt_read>:

int net_pkt_read(struct net_pkt *pkt, void *data, size_t length)
{
	NET_DBG("pkt %p data %p length %zu", pkt, data, length);

	return net_pkt_cursor_operate(pkt, data, length, true, false);
   2455e:	2300      	movs	r3, #0
{
   24560:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, data, length, true, false);
   24562:	9300      	str	r3, [sp, #0]
   24564:	2301      	movs	r3, #1
   24566:	f7ff fe71 	bl	2424c <net_pkt_cursor_operate>
}
   2456a:	b003      	add	sp, #12
   2456c:	f85d fb04 	ldr.w	pc, [sp], #4

00024570 <net_pkt_read_be32>:
int net_pkt_read_be32(struct net_pkt *pkt, u32_t *data)
{
	u8_t d32[4];
	int ret;

	ret = net_pkt_read(pkt, d32, sizeof(u32_t));
   24570:	2204      	movs	r2, #4
{
   24572:	b513      	push	{r0, r1, r4, lr}
   24574:	460c      	mov	r4, r1
	ret = net_pkt_read(pkt, d32, sizeof(u32_t));
   24576:	eb0d 0102 	add.w	r1, sp, r2
   2457a:	f7ff fff0 	bl	2455e <net_pkt_read>

	*data = d32[0] << 24 | d32[1] << 16 | d32[2] << 8 | d32[3];
   2457e:	9b01      	ldr	r3, [sp, #4]
   24580:	ba1b      	rev	r3, r3
   24582:	6023      	str	r3, [r4, #0]

	return ret;
}
   24584:	b002      	add	sp, #8
   24586:	bd10      	pop	{r4, pc}

00024588 <net_pkt_copy>:
}

int net_pkt_copy(struct net_pkt *pkt_dst,
		 struct net_pkt *pkt_src,
		 size_t length)
{
   24588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2458a:	4606      	mov	r6, r0
   2458c:	460f      	mov	r7, r1
   2458e:	4614      	mov	r4, r2
	struct net_pkt_cursor *c_dst = &pkt_dst->cursor;
	struct net_pkt_cursor *c_src = &pkt_src->cursor;

	while (c_dst->buf && c_src->buf && length) {
   24590:	6973      	ldr	r3, [r6, #20]
   24592:	2b00      	cmp	r3, #0
   24594:	d041      	beq.n	2461a <net_pkt_copy+0x92>
   24596:	697b      	ldr	r3, [r7, #20]
   24598:	2b00      	cmp	r3, #0
   2459a:	d03e      	beq.n	2461a <net_pkt_copy+0x92>
   2459c:	b90c      	cbnz	r4, 245a2 <net_pkt_copy+0x1a>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
   2459e:	4620      	mov	r0, r4
   245a0:	e021      	b.n	245e6 <net_pkt_copy+0x5e>
		pkt_cursor_advance(pkt_dst, true);
   245a2:	2101      	movs	r1, #1
   245a4:	4630      	mov	r0, r6
   245a6:	f7ff fe20 	bl	241ea <pkt_cursor_advance>
		pkt_cursor_advance(pkt_src, false);
   245aa:	2100      	movs	r1, #0
   245ac:	4638      	mov	r0, r7
   245ae:	f7ff fe1c 	bl	241ea <pkt_cursor_advance>
		if (!c_dst->buf || !c_src->buf) {
   245b2:	6972      	ldr	r2, [r6, #20]
   245b4:	b1aa      	cbz	r2, 245e2 <net_pkt_copy+0x5a>
   245b6:	697b      	ldr	r3, [r7, #20]
   245b8:	b19b      	cbz	r3, 245e2 <net_pkt_copy+0x5a>
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   245ba:	899d      	ldrh	r5, [r3, #12]
   245bc:	69b9      	ldr	r1, [r7, #24]
   245be:	689b      	ldr	r3, [r3, #8]
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   245c0:	69b0      	ldr	r0, [r6, #24]
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   245c2:	1acb      	subs	r3, r1, r3
   245c4:	1aed      	subs	r5, r5, r3
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   245c6:	89d3      	ldrh	r3, [r2, #14]
   245c8:	6892      	ldr	r2, [r2, #8]
		if (length < s_len && length < d_len) {
   245ca:	42ac      	cmp	r4, r5
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   245cc:	eba0 0202 	sub.w	r2, r0, r2
   245d0:	eba3 0302 	sub.w	r3, r3, r2
		if (length < s_len && length < d_len) {
   245d4:	d201      	bcs.n	245da <net_pkt_copy+0x52>
   245d6:	429c      	cmp	r4, r3
   245d8:	d306      	bcc.n	245e8 <net_pkt_copy+0x60>
			if (d_len < s_len) {
   245da:	429d      	cmp	r5, r3
   245dc:	bf28      	it	cs
   245de:	461d      	movcs	r5, r3
		if (!len) {
   245e0:	b91d      	cbnz	r5, 245ea <net_pkt_copy+0x62>
		return -ENOBUFS;
   245e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   245e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   245e8:	4625      	mov	r5, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   245ea:	462a      	mov	r2, r5
   245ec:	f003 f9ab 	bl	27946 <memcpy>
	return pkt->overwrite;
   245f0:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
		if (!net_pkt_is_being_overwritten(pkt_dst)) {
   245f4:	07db      	lsls	r3, r3, #31
   245f6:	d404      	bmi.n	24602 <net_pkt_copy+0x7a>
			net_buf_add(c_dst->buf, len);
   245f8:	6970      	ldr	r0, [r6, #20]
   245fa:	4629      	mov	r1, r5
   245fc:	3008      	adds	r0, #8
   245fe:	f7fe fcea 	bl	22fd6 <net_buf_simple_add>
		pkt_cursor_update(pkt_dst, len, true);
   24602:	2201      	movs	r2, #1
   24604:	4629      	mov	r1, r5
   24606:	4630      	mov	r0, r6
   24608:	f7ff fe02 	bl	24210 <pkt_cursor_update>
		pkt_cursor_update(pkt_src, len, false);
   2460c:	2200      	movs	r2, #0
   2460e:	4629      	mov	r1, r5
   24610:	4638      	mov	r0, r7
   24612:	f7ff fdfd 	bl	24210 <pkt_cursor_update>
		length -= len;
   24616:	1b64      	subs	r4, r4, r5
   24618:	e7ba      	b.n	24590 <net_pkt_copy+0x8>
	if (length) {
   2461a:	2c00      	cmp	r4, #0
   2461c:	d0bf      	beq.n	2459e <net_pkt_copy+0x16>
   2461e:	e7e0      	b.n	245e2 <net_pkt_copy+0x5a>

00024620 <net_pkt_remaining_data>:
size_t net_pkt_remaining_data(struct net_pkt *pkt)
{
	struct net_buf *buf;
	size_t data_length;

	if (!pkt || !pkt->cursor.buf || !pkt->cursor.pos) {
   24620:	b170      	cbz	r0, 24640 <net_pkt_remaining_data+0x20>
   24622:	6943      	ldr	r3, [r0, #20]
   24624:	b15b      	cbz	r3, 2463e <net_pkt_remaining_data+0x1e>
   24626:	6980      	ldr	r0, [r0, #24]
   24628:	b150      	cbz	r0, 24640 <net_pkt_remaining_data+0x20>
		return 0;
	}

	buf = pkt->cursor.buf;
	data_length = buf->len - (pkt->cursor.pos - buf->data);
   2462a:	6899      	ldr	r1, [r3, #8]
   2462c:	899a      	ldrh	r2, [r3, #12]
   2462e:	1a40      	subs	r0, r0, r1
   24630:	1a10      	subs	r0, r2, r0

	buf = buf->frags;
	while (buf) {
		data_length += buf->len;
		buf = buf->frags;
   24632:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   24634:	b903      	cbnz	r3, 24638 <net_pkt_remaining_data+0x18>
   24636:	4770      	bx	lr
		data_length += buf->len;
   24638:	899a      	ldrh	r2, [r3, #12]
   2463a:	4410      	add	r0, r2
   2463c:	e7f9      	b.n	24632 <net_pkt_remaining_data+0x12>
		return 0;
   2463e:	4618      	mov	r0, r3
	}

	return data_length;
}
   24640:	4770      	bx	lr

00024642 <net_pkt_update_length>:

int net_pkt_update_length(struct net_pkt *pkt, size_t length)
{
	struct net_buf *buf;

	for (buf = pkt->buffer; buf; buf = buf->frags) {
   24642:	6903      	ldr	r3, [r0, #16]
   24644:	b92b      	cbnz	r3, 24652 <net_pkt_update_length+0x10>
			buf->len = length;
			length = 0;
		}
	}

	return !length ? 0 : -EINVAL;
   24646:	2900      	cmp	r1, #0
}
   24648:	bf14      	ite	ne
   2464a:	f06f 0015 	mvnne.w	r0, #21
   2464e:	2000      	moveq	r0, #0
   24650:	4770      	bx	lr
		if (buf->len < length) {
   24652:	899a      	ldrh	r2, [r3, #12]
   24654:	428a      	cmp	r2, r1
			buf->len = length;
   24656:	bf2a      	itet	cs
   24658:	8199      	strhcs	r1, [r3, #12]
			length -= buf->len;
   2465a:	1a89      	subcc	r1, r1, r2
			length = 0;
   2465c:	2100      	movcs	r1, #0
	for (buf = pkt->buffer; buf; buf = buf->frags) {
   2465e:	681b      	ldr	r3, [r3, #0]
   24660:	e7f0      	b.n	24644 <net_pkt_update_length+0x2>

00024662 <net_pkt_get_current_offset>:
u16_t net_pkt_get_current_offset(struct net_pkt *pkt)
{
	struct net_buf *buf = pkt->buffer;
	u16_t offset;

	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   24662:	6941      	ldr	r1, [r0, #20]
{
   24664:	b510      	push	{r4, lr}
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   24666:	b179      	cbz	r1, 24688 <net_pkt_get_current_offset+0x26>
   24668:	6983      	ldr	r3, [r0, #24]
   2466a:	b17b      	cbz	r3, 2468c <net_pkt_get_current_offset+0x2a>
		return 0;
	}

	offset = 0U;
   2466c:	2200      	movs	r2, #0
	struct net_buf *buf = pkt->buffer;
   2466e:	6904      	ldr	r4, [r0, #16]

	while (buf != pkt->cursor.buf) {
   24670:	42a1      	cmp	r1, r4
   24672:	d104      	bne.n	2467e <net_pkt_get_current_offset+0x1c>
		offset += buf->len;
		buf = buf->frags;
	}

	offset += pkt->cursor.pos - buf->data;
   24674:	6888      	ldr	r0, [r1, #8]
   24676:	1a18      	subs	r0, r3, r0
   24678:	4410      	add	r0, r2
   2467a:	b280      	uxth	r0, r0

	return offset;
}
   2467c:	bd10      	pop	{r4, pc}
		offset += buf->len;
   2467e:	89a0      	ldrh	r0, [r4, #12]
		buf = buf->frags;
   24680:	6824      	ldr	r4, [r4, #0]
		offset += buf->len;
   24682:	4402      	add	r2, r0
   24684:	b292      	uxth	r2, r2
		buf = buf->frags;
   24686:	e7f3      	b.n	24670 <net_pkt_get_current_offset+0xe>
		return 0;
   24688:	4608      	mov	r0, r1
   2468a:	e7f7      	b.n	2467c <net_pkt_get_current_offset+0x1a>
   2468c:	4618      	mov	r0, r3
   2468e:	e7f5      	b.n	2467c <net_pkt_get_current_offset+0x1a>

00024690 <net_pkt_clone>:
{
   24690:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24694:	461c      	mov	r4, r3
   24696:	4617      	mov	r7, r2
   24698:	4605      	mov	r5, r0
	size_t cursor_offset = net_pkt_get_current_offset(pkt);
   2469a:	f7ff ffe2 	bl	24662 <net_pkt_get_current_offset>
   2469e:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
   246a0:	6928      	ldr	r0, [r5, #16]
   246a2:	f7ff fd8b 	bl	241bc <net_buf_frags_len>
	clone_pkt = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
   246a6:	2300      	movs	r3, #0
   246a8:	4601      	mov	r1, r0
   246aa:	e9cd 7400 	strd	r7, r4, [sp]
   246ae:	461a      	mov	r2, r3
   246b0:	6a28      	ldr	r0, [r5, #32]
   246b2:	f7ed fa61 	bl	11b78 <net_pkt_alloc_with_buffer>
	if (!clone_pkt) {
   246b6:	4604      	mov	r4, r0
   246b8:	b198      	cbz	r0, 246e2 <net_pkt_clone+0x52>
	backup->pos = pkt->cursor.pos;
   246ba:	e9d5 8705 	ldrd	r8, r7, [r5, #20]
	net_pkt_cursor_init(pkt);
   246be:	4628      	mov	r0, r5
   246c0:	f7ff fead 	bl	2441e <net_pkt_cursor_init>
	return net_buf_frags_len(pkt->frags);
   246c4:	6928      	ldr	r0, [r5, #16]
   246c6:	f7ff fd79 	bl	241bc <net_buf_frags_len>
	if (net_pkt_copy(clone_pkt, pkt, net_pkt_get_len(pkt))) {
   246ca:	4629      	mov	r1, r5
   246cc:	4602      	mov	r2, r0
   246ce:	4620      	mov	r0, r4
   246d0:	f7ff ff5a 	bl	24588 <net_pkt_copy>
   246d4:	b148      	cbz	r0, 246ea <net_pkt_clone+0x5a>
		net_pkt_unref(clone_pkt);
   246d6:	4620      	mov	r0, r4
		return NULL;
   246d8:	2400      	movs	r4, #0
		net_pkt_unref(clone_pkt);
   246da:	f7ff fe30 	bl	2433e <net_pkt_unref>
	pkt->cursor.pos = backup->pos;
   246de:	e9c5 8705 	strd	r8, r7, [r5, #20]
}
   246e2:	4620      	mov	r0, r4
   246e4:	b002      	add	sp, #8
   246e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clone_pkt->buffer) {
   246ea:	6923      	ldr	r3, [r4, #16]
   246ec:	b15b      	cbz	r3, 24706 <net_pkt_clone+0x76>
   246ee:	462a      	mov	r2, r5
   246f0:	f852 3f28 	ldr.w	r3, [r2, #40]!
   246f4:	62a3      	str	r3, [r4, #40]	; 0x28
   246f6:	6853      	ldr	r3, [r2, #4]
   246f8:	462a      	mov	r2, r5
   246fa:	62e3      	str	r3, [r4, #44]	; 0x2c
   246fc:	f852 3f30 	ldr.w	r3, [r2, #48]!
   24700:	6323      	str	r3, [r4, #48]	; 0x30
   24702:	6853      	ldr	r3, [r2, #4]
   24704:	6363      	str	r3, [r4, #52]	; 0x34
	return pkt->family;
   24706:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	pkt->family = family;
   2470a:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
	return pkt->family;
   2470e:	f3c3 0342 	ubfx	r3, r3, #1, #3
	pkt->family = family;
   24712:	f363 0243 	bfi	r2, r3, #1, #3
   24716:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
	net_pkt_set_context(clone_pkt, net_pkt_context(pkt));
   2471a:	69eb      	ldr	r3, [r5, #28]
	pkt->context = ctx;
   2471c:	61e3      	str	r3, [r4, #28]
	net_pkt_set_ip_hdr_len(clone_pkt, net_pkt_ip_hdr_len(pkt));
   2471e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
	pkt->ip_hdr_len = len;
   24722:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return pkt->family;
   24726:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   2472a:	f3c3 0342 	ubfx	r3, r3, #1, #3
   2472e:	2b02      	cmp	r3, #2
   24730:	d111      	bne.n	24756 <net_pkt_clone+0xc6>
		net_pkt_set_ipv6_hop_limit(clone_pkt,
   24732:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
	pkt->ipv6_hop_limit = hop_limit;
   24736:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		net_pkt_set_ipv6_ext_len(clone_pkt, net_pkt_ipv6_ext_len(pkt));
   2473a:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
	pkt->ipv6_ext_len = len;
   2473c:	87e3      	strh	r3, [r4, #62]	; 0x3e
		net_pkt_set_ipv6_ext_opt_len(clone_pkt,
   2473e:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
	pkt->ipv6_ext_opt_len = len;
   24742:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		net_pkt_set_ipv6_hdr_prev(clone_pkt,
   24746:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
	pkt->ipv6_prev_hdr_start = offset;
   2474a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		net_pkt_set_ipv6_next_hdr(clone_pkt,
   2474e:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
	pkt->ipv6_next_hdr = next_hdr;
   24752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	net_pkt_cursor_init(clone_pkt);
   24756:	4620      	mov	r0, r4
   24758:	f7ff fe61 	bl	2441e <net_pkt_cursor_init>
	if (cursor_offset) {
   2475c:	b146      	cbz	r6, 24770 <net_pkt_clone+0xe0>
	pkt->overwrite = overwrite;
   2475e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		net_pkt_skip(clone_pkt, cursor_offset);
   24762:	4631      	mov	r1, r6
   24764:	f043 0301 	orr.w	r3, r3, #1
   24768:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   2476c:	f7ff fee1 	bl	24532 <net_pkt_skip>
	pkt->cursor.pos = backup->pos;
   24770:	e9c5 8705 	strd	r8, r7, [r5, #20]
	return clone_pkt;
   24774:	e7b5      	b.n	246e2 <net_pkt_clone+0x52>

00024776 <net_pkt_is_contiguous>:

bool net_pkt_is_contiguous(struct net_pkt *pkt, size_t size)
{
   24776:	b538      	push	{r3, r4, r5, lr}
   24778:	460d      	mov	r5, r1
	return pkt->overwrite;
   2477a:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   2477e:	4604      	mov	r4, r0
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
   24780:	43c9      	mvns	r1, r1
   24782:	f001 0101 	and.w	r1, r1, #1
   24786:	f7ff fd30 	bl	241ea <pkt_cursor_advance>

	if (pkt->cursor.buf && pkt->cursor.pos) {
   2478a:	6940      	ldr	r0, [r0, #20]
   2478c:	b170      	cbz	r0, 247ac <net_pkt_is_contiguous+0x36>
   2478e:	69a3      	ldr	r3, [r4, #24]
   24790:	b16b      	cbz	r3, 247ae <net_pkt_is_contiguous+0x38>
   24792:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
		size_t len;

		len = net_pkt_is_being_overwritten(pkt) ?
			pkt->cursor.buf->len : pkt->cursor.buf->size;
   24796:	07d2      	lsls	r2, r2, #31
   24798:	bf4c      	ite	mi
   2479a:	8982      	ldrhmi	r2, [r0, #12]
   2479c:	89c2      	ldrhpl	r2, [r0, #14]
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
   2479e:	6880      	ldr	r0, [r0, #8]
   247a0:	1a1b      	subs	r3, r3, r0
   247a2:	1ad3      	subs	r3, r2, r3
		if (len >= size) {
   247a4:	42ab      	cmp	r3, r5
   247a6:	bf34      	ite	cc
   247a8:	2000      	movcc	r0, #0
   247aa:	2001      	movcs	r0, #1
			return true;
		}
	}

	return false;
}
   247ac:	bd38      	pop	{r3, r4, r5, pc}
	return false;
   247ae:	4618      	mov	r0, r3
   247b0:	e7fc      	b.n	247ac <net_pkt_is_contiguous+0x36>

000247b2 <net_pkt_write>:
{
   247b2:	b530      	push	{r4, r5, lr}
   247b4:	460d      	mov	r5, r1
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   247b6:	6983      	ldr	r3, [r0, #24]
{
   247b8:	4604      	mov	r4, r0
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   247ba:	429d      	cmp	r5, r3
{
   247bc:	4611      	mov	r1, r2
   247be:	b085      	sub	sp, #20
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   247c0:	d10a      	bne.n	247d8 <net_pkt_write+0x26>
   247c2:	9203      	str	r2, [sp, #12]
   247c4:	f7ff ffd7 	bl	24776 <net_pkt_is_contiguous>
   247c8:	9903      	ldr	r1, [sp, #12]
   247ca:	b128      	cbz	r0, 247d8 <net_pkt_write+0x26>
		return net_pkt_skip(pkt, length);
   247cc:	4620      	mov	r0, r4
}
   247ce:	b005      	add	sp, #20
   247d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return net_pkt_skip(pkt, length);
   247d4:	f7ff bead 	b.w	24532 <net_pkt_skip>
	return net_pkt_cursor_operate(pkt, (void *)data, length, true, true);
   247d8:	2301      	movs	r3, #1
   247da:	460a      	mov	r2, r1
   247dc:	4620      	mov	r0, r4
   247de:	4629      	mov	r1, r5
   247e0:	9300      	str	r3, [sp, #0]
   247e2:	f7ff fd33 	bl	2424c <net_pkt_cursor_operate>
}
   247e6:	b005      	add	sp, #20
   247e8:	bd30      	pop	{r4, r5, pc}

000247ea <net_pkt_get_data>:

void *net_pkt_get_data(struct net_pkt *pkt,
		       struct net_pkt_data_access *access)
{
   247ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   247ee:	460d      	mov	r5, r1
			return NULL;
		}

		return pkt->cursor.pos;
	} else {
		if (net_pkt_is_contiguous(pkt, access->size)) {
   247f0:	6849      	ldr	r1, [r1, #4]
{
   247f2:	4604      	mov	r4, r0
		if (net_pkt_is_contiguous(pkt, access->size)) {
   247f4:	f7ff ffbf 	bl	24776 <net_pkt_is_contiguous>
   247f8:	4606      	mov	r6, r0
   247fa:	b118      	cbz	r0, 24804 <net_pkt_get_data+0x1a>
			access->data = pkt->cursor.pos;
   247fc:	69a3      	ldr	r3, [r4, #24]
   247fe:	602b      	str	r3, [r5, #0]
			}

			net_pkt_cursor_restore(pkt, &backup);
		}

		return access->data;
   24800:	6829      	ldr	r1, [r5, #0]
   24802:	e010      	b.n	24826 <net_pkt_get_data+0x3c>
   24804:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		} else if (net_pkt_is_being_overwritten(pkt)) {
   24808:	07db      	lsls	r3, r3, #31
   2480a:	d5f9      	bpl.n	24800 <net_pkt_get_data+0x16>
   2480c:	6829      	ldr	r1, [r5, #0]
			if (!access->data) {
   2480e:	b151      	cbz	r1, 24826 <net_pkt_get_data+0x3c>
	backup->pos = pkt->cursor.pos;
   24810:	e9d4 8705 	ldrd	r8, r7, [r4, #20]
			if (net_pkt_read(pkt, access->data, access->size)) {
   24814:	4620      	mov	r0, r4
   24816:	686a      	ldr	r2, [r5, #4]
   24818:	f7ff fea1 	bl	2455e <net_pkt_read>
	pkt->cursor.pos = backup->pos;
   2481c:	e9c4 8705 	strd	r8, r7, [r4, #20]
   24820:	2800      	cmp	r0, #0
   24822:	d0ed      	beq.n	24800 <net_pkt_get_data+0x16>
				return NULL;
   24824:	4631      	mov	r1, r6
	}

	return NULL;
}
   24826:	4608      	mov	r0, r1
   24828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002482c <net_pkt_set_data>:
{
	if (IS_ENABLED(CONFIG_NET_HEADERS_ALWAYS_CONTIGUOUS)) {
		return net_pkt_skip(pkt, access->size);
	}

	return net_pkt_write(pkt, access->data, access->size);
   2482c:	e9d1 1200 	ldrd	r1, r2, [r1]
   24830:	f7ff bfbf 	b.w	247b2 <net_pkt_write>

00024834 <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
   24834:	4770      	bx	lr

00024836 <k_work_submit_to_queue>:
{
   24836:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24838:	f101 0308 	add.w	r3, r1, #8
   2483c:	e8d3 2fef 	ldaex	r2, [r3]
   24840:	f042 0c01 	orr.w	ip, r2, #1
   24844:	e8c3 cfee 	stlex	lr, ip, [r3]
   24848:	f1be 0f00 	cmp.w	lr, #0
   2484c:	d1f6      	bne.n	2483c <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2484e:	07d3      	lsls	r3, r2, #31
   24850:	d403      	bmi.n	2485a <k_work_submit_to_queue+0x24>
}
   24852:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   24856:	f002 bd31 	b.w	272bc <k_queue_append>
}
   2485a:	f85d fb04 	ldr.w	pc, [sp], #4

0002485e <net_icmpv6_finalize>:
{
   2485e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   24860:	2304      	movs	r3, #4
   24862:	2200      	movs	r2, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   24864:	4669      	mov	r1, sp
{
   24866:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   24868:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   2486c:	f7ff ffbd 	bl	247ea <net_pkt_get_data>
	if (!icmp_hdr) {
   24870:	4605      	mov	r5, r0
   24872:	b150      	cbz	r0, 2488a <net_icmpv6_finalize+0x2c>
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   24874:	213a      	movs	r1, #58	; 0x3a
   24876:	4620      	mov	r0, r4
   24878:	f7ff f937 	bl	23aea <net_calc_chksum>
	return net_pkt_set_data(pkt, &icmp_access);
   2487c:	4669      	mov	r1, sp
	icmp_hdr->chksum = net_calc_chksum_icmpv6(pkt);
   2487e:	8068      	strh	r0, [r5, #2]
	return net_pkt_set_data(pkt, &icmp_access);
   24880:	4620      	mov	r0, r4
   24882:	f7ff ffd3 	bl	2482c <net_pkt_set_data>
}
   24886:	b003      	add	sp, #12
   24888:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   2488a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2488e:	e7fa      	b.n	24886 <net_icmpv6_finalize+0x28>

00024890 <net_icmpv6_create>:
{
   24890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   24892:	2304      	movs	r3, #4
   24894:	2500      	movs	r5, #0
{
   24896:	460f      	mov	r7, r1
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   24898:	4669      	mov	r1, sp
{
   2489a:	4604      	mov	r4, r0
   2489c:	4616      	mov	r6, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   2489e:	e9cd 5300 	strd	r5, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   248a2:	f7ff ffa2 	bl	247ea <net_pkt_get_data>
	if (!icmp_hdr) {
   248a6:	b148      	cbz	r0, 248bc <net_icmpv6_create+0x2c>
	icmp_hdr->type   = icmp_type;
   248a8:	7007      	strb	r7, [r0, #0]
	icmp_hdr->code   = icmp_code;
   248aa:	7046      	strb	r6, [r0, #1]
	icmp_hdr->chksum = 0U;
   248ac:	7085      	strb	r5, [r0, #2]
   248ae:	70c5      	strb	r5, [r0, #3]
	return net_pkt_set_data(pkt, &icmp_access);
   248b0:	4669      	mov	r1, sp
   248b2:	4620      	mov	r0, r4
   248b4:	f7ff ffba 	bl	2482c <net_pkt_set_data>
}
   248b8:	b003      	add	sp, #12
   248ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   248bc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   248c0:	e7fa      	b.n	248b8 <net_icmpv6_create+0x28>

000248c2 <icmpv6_handle_echo_request>:
{
   248c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	payload_len = ntohs(ip_hdr->len) -
   248c4:	888b      	ldrh	r3, [r1, #4]
{
   248c6:	4606      	mov	r6, r0
	payload_len = ntohs(ip_hdr->len) -
   248c8:	021d      	lsls	r5, r3, #8
   248ca:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   248ce:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
{
   248d0:	460f      	mov	r7, r1
	payload_len = ntohs(ip_hdr->len) -
   248d2:	1aed      	subs	r5, r5, r3
   248d4:	3d04      	subs	r5, #4
   248d6:	b22d      	sxth	r5, r5
	if (payload_len < NET_ICMPV6_UNUSED_LEN) {
   248d8:	2d03      	cmp	r5, #3
   248da:	dc01      	bgt.n	248e0 <icmpv6_handle_echo_request+0x1e>
	return NET_DROP;
   248dc:	2002      	movs	r0, #2
   248de:	e03c      	b.n	2495a <icmpv6_handle_echo_request+0x98>
					  PKT_WAIT_TIME);
   248e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   248e4:	2300      	movs	r3, #0
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt), payload_len,
   248e6:	e9cd 2300 	strd	r2, r3, [sp]
   248ea:	4629      	mov	r1, r5
   248ec:	233a      	movs	r3, #58	; 0x3a
   248ee:	2202      	movs	r2, #2
   248f0:	6a00      	ldr	r0, [r0, #32]
   248f2:	f7ed f941 	bl	11b78 <net_pkt_alloc_with_buffer>
	if (!reply) {
   248f6:	4604      	mov	r4, r0
   248f8:	2800      	cmp	r0, #0
   248fa:	d0ef      	beq.n	248dc <icmpv6_handle_echo_request+0x1a>
	if (net_ipv6_is_addr_mcast(&ip_hdr->dst)) {
   248fc:	7e3b      	ldrb	r3, [r7, #24]
   248fe:	f107 0118 	add.w	r1, r7, #24
   24902:	2bff      	cmp	r3, #255	; 0xff
   24904:	d103      	bne.n	2490e <icmpv6_handle_echo_request+0x4c>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   24906:	6a30      	ldr	r0, [r6, #32]
   24908:	f7ec fce6 	bl	112d8 <net_if_ipv6_select_src_addr>
   2490c:	4601      	mov	r1, r0
	net_pkt_lladdr_dst(reply)->addr = NULL;
   2490e:	2300      	movs	r3, #0
	if (net_ipv6_create(reply, src, &ip_hdr->src)) {
   24910:	f107 0208 	add.w	r2, r7, #8
   24914:	4620      	mov	r0, r4
	net_pkt_lladdr_dst(reply)->addr = NULL;
   24916:	6323      	str	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_src(reply)->addr = NULL;
   24918:	62a3      	str	r3, [r4, #40]	; 0x28
	if (net_ipv6_create(reply, src, &ip_hdr->src)) {
   2491a:	f000 f8fd 	bl	24b18 <net_ipv6_create>
   2491e:	4602      	mov	r2, r0
   24920:	b9e8      	cbnz	r0, 2495e <icmpv6_handle_echo_request+0x9c>
	if (net_icmpv6_create(reply, NET_ICMPV6_ECHO_REPLY, 0) ||
   24922:	2181      	movs	r1, #129	; 0x81
   24924:	4620      	mov	r0, r4
   24926:	f7ff ffb3 	bl	24890 <net_icmpv6_create>
   2492a:	b9c0      	cbnz	r0, 2495e <icmpv6_handle_echo_request+0x9c>
	    net_pkt_copy(reply, pkt, payload_len)) {
   2492c:	462a      	mov	r2, r5
   2492e:	4631      	mov	r1, r6
   24930:	4620      	mov	r0, r4
   24932:	f7ff fe29 	bl	24588 <net_pkt_copy>
	if (net_icmpv6_create(reply, NET_ICMPV6_ECHO_REPLY, 0) ||
   24936:	4605      	mov	r5, r0
   24938:	b988      	cbnz	r0, 2495e <icmpv6_handle_echo_request+0x9c>
	net_pkt_cursor_init(reply);
   2493a:	4620      	mov	r0, r4
   2493c:	f7ff fd6f 	bl	2441e <net_pkt_cursor_init>
	net_ipv6_finalize(reply, IPPROTO_ICMPV6);
   24940:	213a      	movs	r1, #58	; 0x3a
   24942:	4620      	mov	r0, r4
   24944:	f000 f94b 	bl	24bde <net_ipv6_finalize>
	if (net_send_data(reply) < 0) {
   24948:	4620      	mov	r0, r4
   2494a:	f7fe fb90 	bl	2306e <net_send_data>
   2494e:	2800      	cmp	r0, #0
   24950:	db05      	blt.n	2495e <icmpv6_handle_echo_request+0x9c>
	net_pkt_unref(pkt);
   24952:	4630      	mov	r0, r6
   24954:	f7ff fcf3 	bl	2433e <net_pkt_unref>
	return NET_OK;
   24958:	4628      	mov	r0, r5
}
   2495a:	b003      	add	sp, #12
   2495c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_pkt_unref(reply);
   2495e:	4620      	mov	r0, r4
   24960:	f7ff fced 	bl	2433e <net_pkt_unref>
   24964:	e7ba      	b.n	248dc <icmpv6_handle_echo_request+0x1a>

00024966 <net_icmpv6_send_error>:
{
   24966:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2496a:	4605      	mov	r5, r0
   2496c:	4698      	mov	r8, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   2496e:	2400      	movs	r4, #0
   24970:	2328      	movs	r3, #40	; 0x28
{
   24972:	b087      	sub	sp, #28
   24974:	460f      	mov	r7, r1
   24976:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   24978:	e9cd 4302 	strd	r4, r3, [sp, #8]
	net_pkt_cursor_init(orig);
   2497c:	f7ff fd4f 	bl	2441e <net_pkt_cursor_init>
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(orig, &ipv6_access);
   24980:	4628      	mov	r0, r5
   24982:	a902      	add	r1, sp, #8
   24984:	f7ff ff31 	bl	247ea <net_pkt_get_data>
	if (!ip_hdr) {
   24988:	4606      	mov	r6, r0
   2498a:	2800      	cmp	r0, #0
   2498c:	f000 808e 	beq.w	24aac <net_icmpv6_send_error+0x146>
	if (ip_hdr->nexthdr == IPPROTO_ICMPV6) {
   24990:	7983      	ldrb	r3, [r0, #6]
   24992:	2b3a      	cmp	r3, #58	; 0x3a
   24994:	d118      	bne.n	249c8 <net_icmpv6_send_error+0x62>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv6_access,
   24996:	2304      	movs	r3, #4
	return net_pkt_skip(pkt, access->size);
   24998:	9903      	ldr	r1, [sp, #12]
   2499a:	4628      	mov	r0, r5
   2499c:	9404      	str	r4, [sp, #16]
   2499e:	9305      	str	r3, [sp, #20]
   249a0:	f7ff fdc7 	bl	24532 <net_pkt_skip>
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
   249a4:	4628      	mov	r0, r5
   249a6:	a904      	add	r1, sp, #16
   249a8:	f7ff ff1f 	bl	247ea <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 128) {
   249ac:	b118      	cbz	r0, 249b6 <net_icmpv6_send_error+0x50>
   249ae:	f990 3001 	ldrsb.w	r3, [r0, #1]
   249b2:	42a3      	cmp	r3, r4
   249b4:	db05      	blt.n	249c2 <net_icmpv6_send_error+0x5c>
			err = -EINVAL;
   249b6:	f06f 0615 	mvn.w	r6, #21
}
   249ba:	4630      	mov	r0, r6
   249bc:	b007      	add	sp, #28
   249be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_pkt_cursor_init(orig);
   249c2:	4628      	mov	r0, r5
   249c4:	f7ff fd2b 	bl	2441e <net_pkt_cursor_init>
	if (ip_hdr->nexthdr == IPPROTO_UDP) {
   249c8:	79b3      	ldrb	r3, [r6, #6]
   249ca:	2b11      	cmp	r3, #17
   249cc:	d02c      	beq.n	24a28 <net_icmpv6_send_error+0xc2>
	} else if (ip_hdr->nexthdr == IPPROTO_TCP) {
   249ce:	2b06      	cmp	r3, #6
   249d0:	d02c      	beq.n	24a2c <net_icmpv6_send_error+0xc6>
	size_t bytes = 0;
   249d2:	2100      	movs	r1, #0
		copy_len = net_pkt_get_len(orig);
   249d4:	692b      	ldr	r3, [r5, #16]
	while (buf) {
   249d6:	bb1b      	cbnz	r3, 24a20 <net_icmpv6_send_error+0xba>
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
   249d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   249dc:	2300      	movs	r3, #0
   249de:	6a28      	ldr	r0, [r5, #32]
   249e0:	e9cd 2300 	strd	r2, r3, [sp]
   249e4:	3104      	adds	r1, #4
   249e6:	233a      	movs	r3, #58	; 0x3a
   249e8:	2202      	movs	r2, #2
   249ea:	f7ed f8c5 	bl	11b78 <net_pkt_alloc_with_buffer>
	if (!pkt) {
   249ee:	4604      	mov	r4, r0
   249f0:	2800      	cmp	r0, #0
   249f2:	d05e      	beq.n	24ab2 <net_icmpv6_send_error+0x14c>
	if (net_ipv6_is_addr_mcast(&ip_hdr->dst)) {
   249f4:	7e33      	ldrb	r3, [r6, #24]
   249f6:	f106 0118 	add.w	r1, r6, #24
   249fa:	2bff      	cmp	r3, #255	; 0xff
   249fc:	d103      	bne.n	24a06 <net_icmpv6_send_error+0xa0>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   249fe:	6a00      	ldr	r0, [r0, #32]
   24a00:	f7ec fc6a 	bl	112d8 <net_if_ipv6_select_src_addr>
   24a04:	4601      	mov	r1, r0
	if (net_ipv6_create(pkt, src, &ip_hdr->src) ||
   24a06:	4620      	mov	r0, r4
   24a08:	f106 0208 	add.w	r2, r6, #8
   24a0c:	f000 f884 	bl	24b18 <net_ipv6_create>
   24a10:	b170      	cbz	r0, 24a30 <net_icmpv6_send_error+0xca>
	int err = -EIO;
   24a12:	f06f 0704 	mvn.w	r7, #4
	net_pkt_unref(pkt);
   24a16:	4620      	mov	r0, r4
   24a18:	f7ff fc91 	bl	2433e <net_pkt_unref>
   24a1c:	463e      	mov	r6, r7
   24a1e:	e7cc      	b.n	249ba <net_icmpv6_send_error+0x54>
		bytes += buf->len;
   24a20:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   24a22:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   24a24:	4411      	add	r1, r2
		buf = buf->frags;
   24a26:	e7d6      	b.n	249d6 <net_icmpv6_send_error+0x70>
		copy_len = sizeof(struct net_ipv6_hdr) +
   24a28:	2130      	movs	r1, #48	; 0x30
   24a2a:	e7d5      	b.n	249d8 <net_icmpv6_send_error+0x72>
		copy_len = sizeof(struct net_ipv6_hdr) +
   24a2c:	213c      	movs	r1, #60	; 0x3c
   24a2e:	e7d3      	b.n	249d8 <net_icmpv6_send_error+0x72>
	    net_icmpv6_create(pkt, type, code)) {
   24a30:	4639      	mov	r1, r7
   24a32:	464a      	mov	r2, r9
   24a34:	4620      	mov	r0, r4
   24a36:	f7ff ff2b 	bl	24890 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, &ip_hdr->src) ||
   24a3a:	4601      	mov	r1, r0
   24a3c:	2800      	cmp	r0, #0
   24a3e:	d1e8      	bne.n	24a12 <net_icmpv6_send_error+0xac>
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   24a40:	2f04      	cmp	r7, #4
   24a42:	d12e      	bne.n	24aa2 <net_icmpv6_send_error+0x13c>
	u32_t data_be32 = htonl(data);
   24a44:	fa98 f388 	rev.w	r3, r8
	return net_pkt_write(pkt, &data_be32, sizeof(u32_t));
   24a48:	463a      	mov	r2, r7
   24a4a:	4620      	mov	r0, r4
   24a4c:	a904      	add	r1, sp, #16
	u32_t data_be32 = htonl(data);
   24a4e:	9304      	str	r3, [sp, #16]
	return net_pkt_write(pkt, &data_be32, sizeof(u32_t));
   24a50:	f7ff feaf 	bl	247b2 <net_pkt_write>
		err = net_pkt_memset(pkt, 0, NET_ICMPV6_UNUSED_LEN);
   24a54:	4607      	mov	r7, r0
	copy_len = net_pkt_available_buffer(pkt);
   24a56:	4620      	mov	r0, r4
   24a58:	f7ff fc95 	bl	24386 <net_pkt_available_buffer>
   24a5c:	4602      	mov	r2, r0
	if (err || net_pkt_copy(pkt, orig, copy_len)) {
   24a5e:	2f00      	cmp	r7, #0
   24a60:	d1d9      	bne.n	24a16 <net_icmpv6_send_error+0xb0>
   24a62:	4629      	mov	r1, r5
   24a64:	4620      	mov	r0, r4
   24a66:	f7ff fd8f 	bl	24588 <net_pkt_copy>
   24a6a:	4606      	mov	r6, r0
   24a6c:	2800      	cmp	r0, #0
   24a6e:	d1d2      	bne.n	24a16 <net_icmpv6_send_error+0xb0>
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_dst(orig)->addr;
   24a70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	net_pkt_cursor_init(pkt);
   24a72:	4620      	mov	r0, r4
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_dst(orig)->addr;
   24a74:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_dst(orig)->len;
   24a76:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   24a7a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   24a7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   24a80:	6323      	str	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
   24a82:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   24a86:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	net_pkt_cursor_init(pkt);
   24a8a:	f7ff fcc8 	bl	2441e <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   24a8e:	213a      	movs	r1, #58	; 0x3a
   24a90:	4620      	mov	r0, r4
   24a92:	f000 f8a4 	bl	24bde <net_ipv6_finalize>
	if (net_send_data(pkt) >= 0) {
   24a96:	4620      	mov	r0, r4
   24a98:	f7fe fae9 	bl	2306e <net_send_data>
   24a9c:	2800      	cmp	r0, #0
   24a9e:	dbba      	blt.n	24a16 <net_icmpv6_send_error+0xb0>
   24aa0:	e78b      	b.n	249ba <net_icmpv6_send_error+0x54>
		err = net_pkt_memset(pkt, 0, NET_ICMPV6_UNUSED_LEN);
   24aa2:	2204      	movs	r2, #4
   24aa4:	4620      	mov	r0, r4
   24aa6:	f7ff fd4f 	bl	24548 <net_pkt_memset>
   24aaa:	e7d3      	b.n	24a54 <net_icmpv6_send_error+0xee>
	int err = -EIO;
   24aac:	f06f 0604 	mvn.w	r6, #4
   24ab0:	e783      	b.n	249ba <net_icmpv6_send_error+0x54>
		err = -ENOMEM;
   24ab2:	f06f 060b 	mvn.w	r6, #11
   24ab6:	e780      	b.n	249ba <net_icmpv6_send_error+0x54>

00024ab8 <net_nbr_unref>:
	if (--nbr->ref) {
   24ab8:	7803      	ldrb	r3, [r0, #0]
   24aba:	3b01      	subs	r3, #1
   24abc:	b2db      	uxtb	r3, r3
   24abe:	7003      	strb	r3, [r0, #0]
   24ac0:	b913      	cbnz	r3, 24ac8 <net_nbr_unref+0x10>
	if (nbr->remove) {
   24ac2:	6903      	ldr	r3, [r0, #16]
   24ac4:	b103      	cbz	r3, 24ac8 <net_nbr_unref+0x10>
		nbr->remove(nbr);
   24ac6:	4718      	bx	r3
}
   24ac8:	4770      	bx	lr

00024aca <net_nbr_get>:
{
   24aca:	4601      	mov	r1, r0
	for (i = 0; i < table->nbr_count; i++) {
   24acc:	2200      	movs	r2, #0
{
   24ace:	b530      	push	{r4, r5, lr}
	for (i = 0; i < table->nbr_count; i++) {
   24ad0:	8905      	ldrh	r5, [r0, #8]
   24ad2:	4295      	cmp	r5, r2
   24ad4:	dc01      	bgt.n	24ada <net_nbr_get+0x10>
	return NULL;
   24ad6:	2000      	movs	r0, #0
   24ad8:	e00d      	b.n	24af6 <net_nbr_get+0x2c>
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   24ada:	680c      	ldr	r4, [r1, #0]
			  start->size + start->extra_data_size) * idx));
   24adc:	88a0      	ldrh	r0, [r4, #4]
   24ade:	8863      	ldrh	r3, [r4, #2]
   24ae0:	4403      	add	r3, r0
   24ae2:	3314      	adds	r3, #20
   24ae4:	4353      	muls	r3, r2
	return (struct net_nbr *)((u8_t *)start +
   24ae6:	18e0      	adds	r0, r4, r3
		if (!nbr->ref) {
   24ae8:	5ce3      	ldrb	r3, [r4, r3]
   24aea:	b92b      	cbnz	r3, 24af8 <net_nbr_get+0x2e>
			nbr->data = nbr->__nbr;
   24aec:	f100 0314 	add.w	r3, r0, #20
   24af0:	60c3      	str	r3, [r0, #12]
	nbr->ref++;
   24af2:	2301      	movs	r3, #1
   24af4:	7003      	strb	r3, [r0, #0]
}
   24af6:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < table->nbr_count; i++) {
   24af8:	3201      	adds	r2, #1
   24afa:	e7ea      	b.n	24ad2 <net_nbr_get+0x8>

00024afc <net_ipv6_is_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24afc:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24afe:	b94a      	cbnz	r2, 24b14 <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24b00:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24b02:	b93b      	cbnz	r3, 24b14 <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24b04:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24b06:	b92a      	cbnz	r2, 24b14 <net_ipv6_is_addr_loopback+0x18>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   24b08:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24b0a:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
   24b0e:	4258      	negs	r0, r3
   24b10:	4158      	adcs	r0, r3
   24b12:	4770      	bx	lr
   24b14:	2000      	movs	r0, #0
   24b16:	4770      	bx	lr

00024b18 <net_ipv6_create>:
#define MAX_REACHABLE_TIME 3600000

int net_ipv6_create(struct net_pkt *pkt,
		    const struct in6_addr *src,
		    const struct in6_addr *dst)
{
   24b18:	b5f0      	push	{r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   24b1a:	2328      	movs	r3, #40	; 0x28
   24b1c:	2700      	movs	r7, #0
{
   24b1e:	b08b      	sub	sp, #44	; 0x2c
   24b20:	460c      	mov	r4, r1
	struct net_ipv6_hdr *ipv6_hdr;

	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   24b22:	4669      	mov	r1, sp
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   24b24:	e9cd 7300 	strd	r7, r3, [sp]
{
   24b28:	4606      	mov	r6, r0
   24b2a:	4615      	mov	r5, r2
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   24b2c:	f7ff fe5d 	bl	247ea <net_pkt_get_data>
	if (!ipv6_hdr) {
   24b30:	4603      	mov	r3, r0
   24b32:	2800      	cmp	r0, #0
   24b34:	d050      	beq.n	24bd8 <net_ipv6_create+0xc0>
		return -ENOBUFS;
	}

	ipv6_hdr->vtc     = 0x60;
   24b36:	2260      	movs	r2, #96	; 0x60
	ipv6_hdr->tcflow  = 0U;
   24b38:	7047      	strb	r7, [r0, #1]
	ipv6_hdr->vtc     = 0x60;
   24b3a:	7002      	strb	r2, [r0, #0]
	ipv6_hdr->flow    = 0U;
	ipv6_hdr->len     = 0U;
	ipv6_hdr->nexthdr = 0U;
   24b3c:	7187      	strb	r7, [r0, #6]

	/* User can tweak the default hop limit if needed */
	ipv6_hdr->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   24b3e:	f896 203d 	ldrb.w	r2, [r6, #61]	; 0x3d
	ipv6_hdr->flow    = 0U;
   24b42:	7087      	strb	r7, [r0, #2]
   24b44:	70c7      	strb	r7, [r0, #3]
	ipv6_hdr->len     = 0U;
   24b46:	7107      	strb	r7, [r0, #4]
   24b48:	7147      	strb	r7, [r0, #5]
	ipv6_hdr->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   24b4a:	71c2      	strb	r2, [r0, #7]
	if (ipv6_hdr->hop_limit == 0U) {
   24b4c:	b92a      	cbnz	r2, 24b5a <net_ipv6_create+0x42>
		ipv6_hdr->hop_limit =
			net_if_ipv6_get_hop_limit(net_pkt_iface(pkt));
   24b4e:	6a31      	ldr	r1, [r6, #32]
   24b50:	6849      	ldr	r1, [r1, #4]
	if (!iface->config.ip.ipv6) {
   24b52:	b109      	cbz	r1, 24b58 <net_ipv6_create+0x40>
	return iface->config.ip.ipv6->hop_limit;
   24b54:	f891 210d 	ldrb.w	r2, [r1, #269]	; 0x10d
		ipv6_hdr->hop_limit =
   24b58:	71da      	strb	r2, [r3, #7]
	}

	net_ipaddr_copy(&ipv6_hdr->dst, dst);
   24b5a:	462a      	mov	r2, r5
   24b5c:	ad02      	add	r5, sp, #8
   24b5e:	462f      	mov	r7, r5
   24b60:	f102 0e10 	add.w	lr, r2, #16
   24b64:	46ac      	mov	ip, r5
   24b66:	6810      	ldr	r0, [r2, #0]
   24b68:	6851      	ldr	r1, [r2, #4]
   24b6a:	3208      	adds	r2, #8
   24b6c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   24b70:	4572      	cmp	r2, lr
   24b72:	4665      	mov	r5, ip
   24b74:	d1f6      	bne.n	24b64 <net_ipv6_create+0x4c>
   24b76:	f103 0c18 	add.w	ip, r3, #24
   24b7a:	ad06      	add	r5, sp, #24
   24b7c:	463a      	mov	r2, r7
   24b7e:	ca03      	ldmia	r2!, {r0, r1}
   24b80:	42aa      	cmp	r2, r5
   24b82:	f8cc 0000 	str.w	r0, [ip]
   24b86:	f8cc 1004 	str.w	r1, [ip, #4]
   24b8a:	4617      	mov	r7, r2
   24b8c:	f10c 0c08 	add.w	ip, ip, #8
   24b90:	d1f4      	bne.n	24b7c <net_ipv6_create+0x64>
	net_ipaddr_copy(&ipv6_hdr->src, src);
   24b92:	4622      	mov	r2, r4
   24b94:	462f      	mov	r7, r5
   24b96:	f104 0c10 	add.w	ip, r4, #16
   24b9a:	463c      	mov	r4, r7
   24b9c:	6810      	ldr	r0, [r2, #0]
   24b9e:	6851      	ldr	r1, [r2, #4]
   24ba0:	3208      	adds	r2, #8
   24ba2:	c403      	stmia	r4!, {r0, r1}
   24ba4:	4562      	cmp	r2, ip
   24ba6:	4627      	mov	r7, r4
   24ba8:	d1f7      	bne.n	24b9a <net_ipv6_create+0x82>
   24baa:	462a      	mov	r2, r5
   24bac:	3308      	adds	r3, #8
   24bae:	ad0a      	add	r5, sp, #40	; 0x28
   24bb0:	4614      	mov	r4, r2
   24bb2:	cc03      	ldmia	r4!, {r0, r1}
   24bb4:	42ac      	cmp	r4, r5
   24bb6:	6018      	str	r0, [r3, #0]
   24bb8:	6059      	str	r1, [r3, #4]
   24bba:	4622      	mov	r2, r4
   24bbc:	f103 0308 	add.w	r3, r3, #8
   24bc0:	d1f6      	bne.n	24bb0 <net_ipv6_create+0x98>
	pkt->ip_hdr_len = len;
   24bc2:	2328      	movs	r3, #40	; 0x28
   24bc4:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	pkt->ipv6_ext_len = len;
   24bc8:	2300      	movs	r3, #0

	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));
	net_pkt_set_ipv6_ext_len(pkt, 0);

	return net_pkt_set_data(pkt, &ipv6_access);
   24bca:	4669      	mov	r1, sp
   24bcc:	4630      	mov	r0, r6
   24bce:	87f3      	strh	r3, [r6, #62]	; 0x3e
   24bd0:	f7ff fe2c 	bl	2482c <net_pkt_set_data>
}
   24bd4:	b00b      	add	sp, #44	; 0x2c
   24bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   24bd8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24bdc:	e7fa      	b.n	24bd4 <net_ipv6_create+0xbc>

00024bde <net_ipv6_finalize>:

int net_ipv6_finalize(struct net_pkt *pkt, u8_t next_header_proto)
{
   24bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   24be0:	2328      	movs	r3, #40	; 0x28
   24be2:	2500      	movs	r5, #0
   24be4:	e9cd 5300 	strd	r5, r3, [sp]
	pkt->overwrite = overwrite;
   24be8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
   24bec:	460e      	mov	r6, r1
   24bee:	f043 0301 	orr.w	r3, r3, #1
	struct net_ipv6_hdr *ipv6_hdr;

	net_pkt_set_overwrite(pkt, true);

	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   24bf2:	4669      	mov	r1, sp
   24bf4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
{
   24bf8:	4604      	mov	r4, r0
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   24bfa:	f7ff fdf6 	bl	247ea <net_pkt_get_data>
	if (!ipv6_hdr) {
   24bfe:	b918      	cbnz	r0, 24c08 <net_ipv6_finalize+0x2a>
		return -ENOBUFS;
   24c00:	f06f 0068 	mvn.w	r0, #104	; 0x68
	} else if (next_header_proto == IPPROTO_ICMPV6) {
		return net_icmpv6_finalize(pkt);
	}

	return 0;
}
   24c04:	b002      	add	sp, #8
   24c06:	bd70      	pop	{r4, r5, r6, pc}
	size_t bytes = 0;
   24c08:	462b      	mov	r3, r5
	ipv6_hdr->len = htons(net_pkt_get_len(pkt) -
   24c0a:	6922      	ldr	r2, [r4, #16]
	while (buf) {
   24c0c:	b9ca      	cbnz	r2, 24c42 <net_ipv6_finalize+0x64>
   24c0e:	3b28      	subs	r3, #40	; 0x28
   24c10:	f3c3 2207 	ubfx	r2, r3, #8, #8
   24c14:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   24c18:	8083      	strh	r3, [r0, #4]
	if (net_pkt_ipv6_next_hdr(pkt) != 255U) {
   24c1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	net_pkt_set_data(pkt, &ipv6_access);
   24c1e:	4669      	mov	r1, sp
   24c20:	2bff      	cmp	r3, #255	; 0xff
   24c22:	bf08      	it	eq
   24c24:	4633      	moveq	r3, r6
   24c26:	7183      	strb	r3, [r0, #6]
   24c28:	4620      	mov	r0, r4
   24c2a:	f7ff fdff 	bl	2482c <net_pkt_set_data>
	if (net_pkt_ipv6_next_hdr(pkt) != 255U &&
   24c2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   24c32:	2bff      	cmp	r3, #255	; 0xff
   24c34:	d109      	bne.n	24c4a <net_ipv6_finalize+0x6c>
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   24c36:	2e11      	cmp	r6, #17
   24c38:	d10e      	bne.n	24c58 <net_ipv6_finalize+0x7a>
		return net_udp_finalize(pkt);
   24c3a:	4620      	mov	r0, r4
   24c3c:	f001 f92f 	bl	25e9e <net_udp_finalize>
   24c40:	e7e0      	b.n	24c04 <net_ipv6_finalize+0x26>
		bytes += buf->len;
   24c42:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   24c44:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   24c46:	440b      	add	r3, r1
		buf = buf->frags;
   24c48:	e7e0      	b.n	24c0c <net_ipv6_finalize+0x2e>
	    net_pkt_skip(pkt, net_pkt_ipv6_ext_len(pkt))) {
   24c4a:	4620      	mov	r0, r4
   24c4c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   24c4e:	f7ff fc70 	bl	24532 <net_pkt_skip>
	if (net_pkt_ipv6_next_hdr(pkt) != 255U &&
   24c52:	2800      	cmp	r0, #0
   24c54:	d0ef      	beq.n	24c36 <net_ipv6_finalize+0x58>
   24c56:	e7d3      	b.n	24c00 <net_ipv6_finalize+0x22>
	} else if (next_header_proto == IPPROTO_ICMPV6) {
   24c58:	2e3a      	cmp	r6, #58	; 0x3a
   24c5a:	d103      	bne.n	24c64 <net_ipv6_finalize+0x86>
		return net_icmpv6_finalize(pkt);
   24c5c:	4620      	mov	r0, r4
   24c5e:	f7ff fdfe 	bl	2485e <net_icmpv6_finalize>
   24c62:	e7cf      	b.n	24c04 <net_ipv6_finalize+0x26>
	return 0;
   24c64:	2000      	movs	r0, #0
   24c66:	e7cd      	b.n	24c04 <net_ipv6_finalize+0x26>

00024c68 <net_ipv6_input>:
}

#endif /* CONFIG_NET_ROUTE */

enum net_verdict net_ipv6_input(struct net_pkt *pkt, bool is_loopback)
{
   24c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   24c6c:	2328      	movs	r3, #40	; 0x28
   24c6e:	2600      	movs	r6, #0
{
   24c70:	b08b      	sub	sp, #44	; 0x2c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   24c72:	e9cd 6304 	strd	r6, r3, [sp, #16]
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   24c76:	ab06      	add	r3, sp, #24
   24c78:	9308      	str	r3, [sp, #32]
   24c7a:	2308      	movs	r3, #8
{
   24c7c:	4604      	mov	r4, r0
   24c7e:	4688      	mov	r8, r1
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   24c80:	9309      	str	r3, [sp, #36]	; 0x24
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
	enum net_verdict verdict = NET_DROP;
	int real_len = net_pkt_get_len(pkt);
   24c82:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   24c84:	b93b      	cbnz	r3, 24c96 <net_ipv6_input+0x2e>
	union net_ip_header ip;
	int pkt_len;

	net_stats_update_ipv6_recv(net_pkt_iface(pkt));

	hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   24c86:	4620      	mov	r0, r4
   24c88:	a904      	add	r1, sp, #16
   24c8a:	f7ff fdae 	bl	247ea <net_pkt_get_data>
	if (!hdr) {
   24c8e:	4605      	mov	r5, r0
   24c90:	b928      	cbnz	r0, 24c9e <net_ipv6_input+0x36>
			      net_pkt_get_current_offset(pkt) - 1);

	NET_DBG("DROP: Unknown/wrong nexthdr type");
	net_stats_update_ip_errors_protoerr(net_pkt_iface(pkt));

	return NET_DROP;
   24c92:	2002      	movs	r0, #2
   24c94:	e097      	b.n	24dc6 <net_ipv6_input+0x15e>
		bytes += buf->len;
   24c96:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   24c98:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   24c9a:	4416      	add	r6, r2
		buf = buf->frags;
   24c9c:	e7f2      	b.n	24c84 <net_ipv6_input+0x1c>
	pkt_len = ntohs(hdr->len) + sizeof(struct net_ipv6_hdr);
   24c9e:	8883      	ldrh	r3, [r0, #4]
   24ca0:	021f      	lsls	r7, r3, #8
   24ca2:	ea47 2713 	orr.w	r7, r7, r3, lsr #8
   24ca6:	b2bf      	uxth	r7, r7
   24ca8:	3728      	adds	r7, #40	; 0x28
	if (real_len < pkt_len) {
   24caa:	42b7      	cmp	r7, r6
   24cac:	dcf1      	bgt.n	24c92 <net_ipv6_input+0x2a>
	} else if (real_len > pkt_len) {
   24cae:	da03      	bge.n	24cb8 <net_ipv6_input+0x50>
		net_pkt_update_length(pkt, pkt_len);
   24cb0:	4639      	mov	r1, r7
   24cb2:	4620      	mov	r0, r4
   24cb4:	f7ff fcc5 	bl	24642 <net_pkt_update_length>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24cb8:	68ab      	ldr	r3, [r5, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24cba:	b933      	cbnz	r3, 24cca <net_ipv6_input+0x62>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24cbc:	68eb      	ldr	r3, [r5, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24cbe:	b923      	cbnz	r3, 24cca <net_ipv6_input+0x62>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24cc0:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24cc2:	b913      	cbnz	r3, 24cca <net_ipv6_input+0x62>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   24cc4:	696b      	ldr	r3, [r5, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24cc6:	2b00      	cmp	r3, #0
   24cc8:	d0e3      	beq.n	24c92 <net_ipv6_input+0x2a>
	if (net_ipv6_is_addr_mcast(&hdr->src) ||
   24cca:	7a2b      	ldrb	r3, [r5, #8]
   24ccc:	2bff      	cmp	r3, #255	; 0xff
   24cce:	d0e0      	beq.n	24c92 <net_ipv6_input+0x2a>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
   24cd0:	7e29      	ldrb	r1, [r5, #24]
	    net_ipv6_is_addr_mcast_scope(&hdr->dst, 0)) {
   24cd2:	f105 0618 	add.w	r6, r5, #24
   24cd6:	29ff      	cmp	r1, #255	; 0xff
   24cd8:	d102      	bne.n	24ce0 <net_ipv6_input+0x78>
   24cda:	7e6b      	ldrb	r3, [r5, #25]
   24cdc:	2b00      	cmp	r3, #0
   24cde:	d0d8      	beq.n	24c92 <net_ipv6_input+0x2a>
	if (!is_loopback) {
   24ce0:	f1b8 0f00 	cmp.w	r8, #0
   24ce4:	d130      	bne.n	24d48 <net_ipv6_input+0xe0>
		if (net_ipv6_is_addr_loopback(&hdr->dst) ||
   24ce6:	4630      	mov	r0, r6
   24ce8:	f7ff ff08 	bl	24afc <net_ipv6_is_addr_loopback>
   24cec:	2800      	cmp	r0, #0
   24cee:	d1d0      	bne.n	24c92 <net_ipv6_input+0x2a>
		    net_ipv6_is_addr_loopback(&hdr->src)) {
   24cf0:	f105 0008 	add.w	r0, r5, #8
   24cf4:	f7ff ff02 	bl	24afc <net_ipv6_is_addr_loopback>
		if (net_ipv6_is_addr_loopback(&hdr->dst) ||
   24cf8:	2800      	cmp	r0, #0
   24cfa:	d1ca      	bne.n	24c92 <net_ipv6_input+0x2a>
   24cfc:	29ff      	cmp	r1, #255	; 0xff
   24cfe:	d102      	bne.n	24d06 <net_ipv6_input+0x9e>
   24d00:	7e6b      	ldrb	r3, [r5, #25]
   24d02:	2b01      	cmp	r3, #1
   24d04:	d0c5      	beq.n	24c92 <net_ipv6_input+0x2a>
		    (net_ipv6_is_addr_mcast_group(
   24d06:	f7ec fc63 	bl	115d0 <net_ipv6_unspecified_address>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
   24d0a:	8b6a      	ldrh	r2, [r5, #26]
   24d0c:	8843      	ldrh	r3, [r0, #2]
   24d0e:	429a      	cmp	r2, r3
   24d10:	d11a      	bne.n	24d48 <net_ipv6_input+0xe0>
	return UNALIGNED_GET(&addr->s6_addr16[1]) == group->s6_addr16[1] &&
   24d12:	8baa      	ldrh	r2, [r5, #28]
   24d14:	8883      	ldrh	r3, [r0, #4]
   24d16:	429a      	cmp	r2, r3
   24d18:	d116      	bne.n	24d48 <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr16[2]) == group->s6_addr16[2] &&
   24d1a:	8bea      	ldrh	r2, [r5, #30]
   24d1c:	88c3      	ldrh	r3, [r0, #6]
   24d1e:	429a      	cmp	r2, r3
   24d20:	d112      	bne.n	24d48 <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
   24d22:	6842      	ldr	r2, [r0, #4]
   24d24:	69eb      	ldr	r3, [r5, #28]
		UNALIGNED_GET(&addr->s6_addr16[3]) == group->s6_addr16[3] &&
   24d26:	4293      	cmp	r3, r2
   24d28:	d10e      	bne.n	24d48 <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
   24d2a:	6a2a      	ldr	r2, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
   24d2c:	4293      	cmp	r3, r2
   24d2e:	d10b      	bne.n	24d48 <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr32[3]) == group->s6_addr32[3];
   24d30:	6a6a      	ldr	r2, [r5, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
   24d32:	68c3      	ldr	r3, [r0, #12]
   24d34:	429a      	cmp	r2, r3
   24d36:	d107      	bne.n	24d48 <net_ipv6_input+0xe0>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
   24d38:	7e2b      	ldrb	r3, [r5, #24]
   24d3a:	2bff      	cmp	r3, #255	; 0xff
   24d3c:	d104      	bne.n	24d48 <net_ipv6_input+0xe0>
   24d3e:	7e6b      	ldrb	r3, [r5, #25]
   24d40:	2b05      	cmp	r3, #5
   24d42:	d0a6      	beq.n	24c92 <net_ipv6_input+0x2a>
   24d44:	2b08      	cmp	r3, #8
   24d46:	d0a4      	beq.n	24c92 <net_ipv6_input+0x2a>
	net_pkt_set_ipv6_next_hdr(pkt, hdr->nexthdr);
   24d48:	79ab      	ldrb	r3, [r5, #6]
	pkt->ipv6_ext_len = len;
   24d4a:	2100      	movs	r1, #0
	pkt->ipv6_next_hdr = next_hdr;
   24d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	pkt->ip_hdr_len = len;
   24d50:	2328      	movs	r3, #40	; 0x28
	pkt->family = family;
   24d52:	2202      	movs	r2, #2
	pkt->ip_hdr_len = len;
   24d54:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return pkt->frags->data;
   24d58:	6923      	ldr	r3, [r4, #16]
	pkt->ipv6_ext_len = len;
   24d5a:	87e1      	strh	r1, [r4, #62]	; 0x3e
	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_HDR(pkt)->hop_limit);
   24d5c:	689b      	ldr	r3, [r3, #8]
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   24d5e:	4630      	mov	r0, r6
   24d60:	79db      	ldrb	r3, [r3, #7]
	pkt->ipv6_hop_limit = hop_limit;
   24d62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	pkt->family = family;
   24d66:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   24d6a:	f362 0343 	bfi	r3, r2, #1, #3
   24d6e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   24d72:	f7ec f803 	bl	10d7c <net_if_ipv6_addr_lookup>
	if (!net_ipv6_is_my_addr(&hdr->dst) &&
   24d76:	4601      	mov	r1, r0
   24d78:	2800      	cmp	r0, #0
   24d7a:	d138      	bne.n	24dee <net_ipv6_input+0x186>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   24d7c:	4630      	mov	r0, r6
   24d7e:	f7ec f987 	bl	11090 <net_if_ipv6_maddr_lookup>
   24d82:	2800      	cmp	r0, #0
   24d84:	d133      	bne.n	24dee <net_ipv6_input+0x186>
	    !net_ipv6_is_my_maddr(&hdr->dst) &&
   24d86:	7e2b      	ldrb	r3, [r5, #24]
   24d88:	2bff      	cmp	r3, #255	; 0xff
   24d8a:	d030      	beq.n	24dee <net_ipv6_input+0x186>
		found = net_route_get_info(net_pkt_iface(pkt),
   24d8c:	4631      	mov	r1, r6
   24d8e:	6a20      	ldr	r0, [r4, #32]
   24d90:	ab02      	add	r3, sp, #8
   24d92:	aa01      	add	r2, sp, #4
   24d94:	f000 ffd4 	bl	25d40 <net_route_get_info>
	if (found) {
   24d98:	4605      	mov	r5, r0
   24d9a:	b1b8      	cbz	r0, 24dcc <net_ipv6_input+0x164>
		if (route) {
   24d9c:	9b01      	ldr	r3, [sp, #4]
   24d9e:	b153      	cbz	r3, 24db6 <net_ipv6_input+0x14e>
			net_pkt_set_iface(pkt, route->iface);
   24da0:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   24da2:	6223      	str	r3, [r4, #32]
	if (iface) {
   24da4:	b13b      	cbz	r3, 24db6 <net_ipv6_input+0x14e>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   24da6:	681a      	ldr	r2, [r3, #0]
   24da8:	7d52      	ldrb	r2, [r2, #21]
   24daa:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   24dae:	681b      	ldr	r3, [r3, #0]
   24db0:	7d5b      	ldrb	r3, [r3, #21]
   24db2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		ret = net_route_packet(pkt, nexthop);
   24db6:	4620      	mov	r0, r4
   24db8:	9902      	ldr	r1, [sp, #8]
   24dba:	f000 ffe3 	bl	25d84 <net_route_packet>
	return NET_DROP;
   24dbe:	2800      	cmp	r0, #0
   24dc0:	bfac      	ite	ge
   24dc2:	2000      	movge	r0, #0
   24dc4:	2002      	movlt	r0, #2
}
   24dc6:	b00b      	add	sp, #44	; 0x2c
   24dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		struct net_if *iface = NULL;
   24dcc:	9003      	str	r0, [sp, #12]
		if (net_if_ipv6_addr_onlink(&iface, &hdr->dst)) {
   24dce:	4631      	mov	r1, r6
   24dd0:	a803      	add	r0, sp, #12
   24dd2:	f7ec f9b3 	bl	1113c <net_if_ipv6_addr_onlink>
   24dd6:	2800      	cmp	r0, #0
   24dd8:	f43f af5b 	beq.w	24c92 <net_ipv6_input+0x2a>
			ret = net_route_packet_if(pkt, iface);
   24ddc:	4620      	mov	r0, r4
   24dde:	9903      	ldr	r1, [sp, #12]
   24de0:	f001 f817 	bl	25e12 <net_route_packet_if>
			if (ret < 0) {
   24de4:	2800      	cmp	r0, #0
   24de6:	f6ff af54 	blt.w	24c92 <net_ipv6_input+0x2a>
			return NET_OK;
   24dea:	4628      	mov	r0, r5
   24dec:	e7eb      	b.n	24dc6 <net_ipv6_input+0x15e>
	u16_t ext_len = 0U;
   24dee:	f04f 0900 	mov.w	r9, #0
	u8_t ext_bitmap = 0U;
   24df2:	46c8      	mov	r8, r9
	return net_pkt_skip(pkt, access->size);
   24df4:	4620      	mov	r0, r4
   24df6:	9905      	ldr	r1, [sp, #20]
   24df8:	f7ff fb9b 	bl	24532 <net_pkt_skip>
	nexthdr = hdr->nexthdr;
   24dfc:	79ae      	ldrb	r6, [r5, #6]
		     u8_t flags);


static inline bool net_ipv6_is_nexthdr_upper_layer(u8_t nexthdr)
{
	return (nexthdr == IPPROTO_ICMPV6 || nexthdr == IPPROTO_UDP ||
   24dfe:	2e3a      	cmp	r6, #58	; 0x3a
   24e00:	d003      	beq.n	24e0a <net_ipv6_input+0x1a2>
   24e02:	2e11      	cmp	r6, #17
   24e04:	d001      	beq.n	24e0a <net_ipv6_input+0x1a2>
	while (!net_ipv6_is_nexthdr_upper_layer(nexthdr)) {
   24e06:	2e06      	cmp	r6, #6
   24e08:	d10c      	bne.n	24e24 <net_ipv6_input+0x1bc>
	switch (nexthdr) {
   24e0a:	2e11      	cmp	r6, #17
	pkt->ipv6_ext_len = len;
   24e0c:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
   24e10:	f000 8093 	beq.w	24f3a <net_ipv6_input+0x2d2>
   24e14:	2e3a      	cmp	r6, #58	; 0x3a
   24e16:	f47f af3c 	bne.w	24c92 <net_ipv6_input+0x2a>
		verdict = net_icmpv6_input(pkt, hdr);
   24e1a:	4629      	mov	r1, r5
   24e1c:	4620      	mov	r0, r4
   24e1e:	f7ec ff17 	bl	11c50 <net_icmpv6_input>
	if (verdict == NET_DROP) {
   24e22:	e7d0      	b.n	24dc6 <net_ipv6_input+0x15e>
	return net_pkt_read(pkt, data, 1);
   24e24:	2201      	movs	r2, #1
   24e26:	4620      	mov	r0, r4
   24e28:	f10d 0103 	add.w	r1, sp, #3
   24e2c:	f7ff fb97 	bl	2455e <net_pkt_read>
		if (net_pkt_read_u8(pkt, &next_nexthdr)) {
   24e30:	2800      	cmp	r0, #0
   24e32:	f47f af2e 	bne.w	24c92 <net_ipv6_input+0x2a>
		switch (nexthdr) {
   24e36:	2e3b      	cmp	r6, #59	; 0x3b
   24e38:	f43f af2b 	beq.w	24c92 <net_ipv6_input+0x2a>
   24e3c:	2e3c      	cmp	r6, #60	; 0x3c
   24e3e:	d02d      	beq.n	24e9c <net_ipv6_input+0x234>
   24e40:	2e00      	cmp	r6, #0
   24e42:	f040 808a 	bne.w	24f5a <net_ipv6_input+0x2f2>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   24e46:	f018 0f01 	tst.w	r8, #1
   24e4a:	f47f af22 	bne.w	24c92 <net_ipv6_input+0x2a>
			if (nexthdr != hdr->nexthdr) {
   24e4e:	79ab      	ldrb	r3, [r5, #6]
   24e50:	2b00      	cmp	r3, #0
   24e52:	f040 8082 	bne.w	24f5a <net_ipv6_input+0x2f2>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   24e56:	f048 0801 	orr.w	r8, r8, #1
	u16_t exthdr_len = 0U;
   24e5a:	2300      	movs	r3, #0
   24e5c:	2201      	movs	r2, #1
   24e5e:	4620      	mov	r0, r4
   24e60:	a903      	add	r1, sp, #12
		exthdr_len = ipv6_handle_ext_hdr_options(pkt, hdr, pkt_len);
   24e62:	b2be      	uxth	r6, r7
	u16_t exthdr_len = 0U;
   24e64:	f8ad 300c 	strh.w	r3, [sp, #12]
   24e68:	f7ff fb79 	bl	2455e <net_pkt_read>
	if (net_pkt_read_u8(pkt, (u8_t *)&exthdr_len)) {
   24e6c:	2800      	cmp	r0, #0
   24e6e:	f47f af10 	bne.w	24c92 <net_ipv6_input+0x2a>
	exthdr_len = exthdr_len * 8U + 8;
   24e72:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   24e76:	3301      	adds	r3, #1
   24e78:	00db      	lsls	r3, r3, #3
   24e7a:	b29b      	uxth	r3, r3
	if (exthdr_len > pkt_len) {
   24e7c:	429e      	cmp	r6, r3
	exthdr_len = exthdr_len * 8U + 8;
   24e7e:	f8ad 300c 	strh.w	r3, [sp, #12]
	if (exthdr_len > pkt_len) {
   24e82:	f4ff af06 	bcc.w	24c92 <net_ipv6_input+0x2a>
	length += 2U;
   24e86:	2602      	movs	r6, #2
	while (length < exthdr_len) {
   24e88:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   24e8c:	429e      	cmp	r6, r3
   24e8e:	d310      	bcc.n	24eb2 <net_ipv6_input+0x24a>
		ext_len += exthdr_len;
   24e90:	4499      	add	r9, r3
		nexthdr = next_nexthdr;
   24e92:	f89d 6003 	ldrb.w	r6, [sp, #3]
		ext_len += exthdr_len;
   24e96:	fa1f f989 	uxth.w	r9, r9
		nexthdr = next_nexthdr;
   24e9a:	e7b0      	b.n	24dfe <net_ipv6_input+0x196>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_DESTO2) {
   24e9c:	f018 0f40 	tst.w	r8, #64	; 0x40
   24ea0:	d15b      	bne.n	24f5a <net_ipv6_input+0x2f2>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_DESTO1) {
   24ea2:	f018 0f02 	tst.w	r8, #2
				ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_DESTO2;
   24ea6:	bf14      	ite	ne
   24ea8:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
				ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_DESTO1;
   24eac:	f048 0802 	orreq.w	r8, r8, #2
   24eb0:	e7d3      	b.n	24e5a <net_ipv6_input+0x1f2>
   24eb2:	2201      	movs	r2, #1
   24eb4:	4620      	mov	r0, r4
   24eb6:	a901      	add	r1, sp, #4
   24eb8:	f7ff fb51 	bl	2455e <net_pkt_read>
		if (net_pkt_read_u8(pkt, &opt_type)) {
   24ebc:	2800      	cmp	r0, #0
   24ebe:	f47f aee8 	bne.w	24c92 <net_ipv6_input+0x2a>
		if (opt_type != NET_IPV6_EXT_HDR_OPT_PAD1) {
   24ec2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   24ec6:	b9fb      	cbnz	r3, 24f08 <net_ipv6_input+0x2a0>
		switch (opt_type) {
   24ec8:	f89d 2004 	ldrb.w	r2, [sp, #4]
   24ecc:	b322      	cbz	r2, 24f18 <net_ipv6_input+0x2b0>
   24ece:	2a01      	cmp	r2, #1
   24ed0:	f89d 1008 	ldrb.w	r1, [sp, #8]
   24ed4:	d023      	beq.n	24f1e <net_ipv6_input+0x2b6>
			if (opt_len > (exthdr_len - (1 + 1 + 1 + 1))) {
   24ed6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   24eda:	3b04      	subs	r3, #4
   24edc:	4299      	cmp	r1, r3
   24ede:	f73f aed8 	bgt.w	24c92 <net_ipv6_input+0x2a>
	switch (opt_type & 0xc0) {
   24ee2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   24ee6:	2a80      	cmp	r2, #128	; 0x80
   24ee8:	d020      	beq.n	24f2c <net_ipv6_input+0x2c4>
   24eea:	2ac0      	cmp	r2, #192	; 0xc0
   24eec:	d01a      	beq.n	24f24 <net_ipv6_input+0x2bc>
   24eee:	2a00      	cmp	r2, #0
   24ef0:	f47f aecf 	bne.w	24c92 <net_ipv6_input+0x2a>
			if (net_pkt_skip(pkt, opt_len)) {
   24ef4:	4620      	mov	r0, r4
   24ef6:	f7ff fb1c 	bl	24532 <net_pkt_skip>
   24efa:	2800      	cmp	r0, #0
   24efc:	f47f aec9 	bne.w	24c92 <net_ipv6_input+0x2a>
			length += opt_len + 2;
   24f00:	f89d 3008 	ldrb.w	r3, [sp, #8]
   24f04:	441e      	add	r6, r3
   24f06:	e00b      	b.n	24f20 <net_ipv6_input+0x2b8>
   24f08:	2201      	movs	r2, #1
   24f0a:	4620      	mov	r0, r4
   24f0c:	a902      	add	r1, sp, #8
   24f0e:	f7ff fb26 	bl	2455e <net_pkt_read>
			if (net_pkt_read_u8(pkt, &opt_len)) {
   24f12:	2800      	cmp	r0, #0
   24f14:	d0d8      	beq.n	24ec8 <net_ipv6_input+0x260>
   24f16:	e6bc      	b.n	24c92 <net_ipv6_input+0x2a>
			length++;
   24f18:	3601      	adds	r6, #1
			length += opt_len + 2;
   24f1a:	b2b6      	uxth	r6, r6
			break;
   24f1c:	e7b4      	b.n	24e88 <net_ipv6_input+0x220>
			length += opt_len + 2;
   24f1e:	440e      	add	r6, r1
			length += opt_len + 2;
   24f20:	3602      	adds	r6, #2
   24f22:	e7fa      	b.n	24f1a <net_ipv6_input+0x2b2>
		if (net_ipv6_is_addr_mcast(&hdr->dst)) {
   24f24:	7e2b      	ldrb	r3, [r5, #24]
   24f26:	2bff      	cmp	r3, #255	; 0xff
   24f28:	f43f aeb3 	beq.w	24c92 <net_ipv6_input+0x2a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   24f2c:	4633      	mov	r3, r6
   24f2e:	2202      	movs	r2, #2
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   24f30:	2104      	movs	r1, #4
   24f32:	4620      	mov	r0, r4
   24f34:	f7ff fd17 	bl	24966 <net_icmpv6_send_error>
   24f38:	e6ab      	b.n	24c92 <net_ipv6_input+0x2a>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
   24f3a:	4620      	mov	r0, r4
   24f3c:	a908      	add	r1, sp, #32
   24f3e:	f000 ffe0 	bl	25f02 <net_udp_input>
   24f42:	9002      	str	r0, [sp, #8]
		if (proto_hdr.udp) {
   24f44:	2800      	cmp	r0, #0
   24f46:	f43f aea4 	beq.w	24c92 <net_ipv6_input+0x2a>
	verdict = net_conn_input(pkt, &ip, nexthdr, &proto_hdr);
   24f4a:	4632      	mov	r2, r6
   24f4c:	4620      	mov	r0, r4
   24f4e:	ab02      	add	r3, sp, #8
   24f50:	a903      	add	r1, sp, #12
	ip.ipv6 = hdr;
   24f52:	9503      	str	r5, [sp, #12]
	verdict = net_conn_input(pkt, &ip, nexthdr, &proto_hdr);
   24f54:	f7ed fdf2 	bl	12b3c <net_conn_input>
	if (verdict != NET_DROP) {
   24f58:	e735      	b.n	24dc6 <net_ipv6_input+0x15e>
			      net_pkt_get_current_offset(pkt) - 1);
   24f5a:	4620      	mov	r0, r4
   24f5c:	f7ff fb81 	bl	24662 <net_pkt_get_current_offset>
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   24f60:	2201      	movs	r2, #1
   24f62:	1e43      	subs	r3, r0, #1
   24f64:	e7e4      	b.n	24f30 <net_ipv6_input+0x2c8>

00024f66 <net_ipv6_init>:

void net_ipv6_init(void)
{
   24f66:	b508      	push	{r3, lr}
	net_ipv6_nbr_init();
   24f68:	f7ed fbe8 	bl	1273c <net_ipv6_nbr_init>

#if defined(CONFIG_NET_IPV6_MLD)
	net_ipv6_mld_init();
#endif
}
   24f6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	net_ipv6_mld_init();
   24f70:	f7ed bc0e 	b.w	12790 <net_ipv6_mld_init>

00024f74 <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24f74:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24f76:	b942      	cbnz	r2, 24f8a <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24f78:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24f7a:	b933      	cbnz	r3, 24f8a <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24f7c:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24f7e:	b922      	cbnz	r2, 24f8a <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   24f80:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24f82:	fab0 f080 	clz	r0, r0
   24f86:	0940      	lsrs	r0, r0, #5
   24f88:	4770      	bx	lr
   24f8a:	2000      	movs	r0, #0
   24f8c:	4770      	bx	lr

00024f8e <net_neighbor_data_remove>:
}
   24f8e:	4770      	bx	lr

00024f90 <nbr_clear_ns_pending>:
	data->send_ns = 0;
   24f90:	2200      	movs	r2, #0
   24f92:	2300      	movs	r3, #0
{
   24f94:	b510      	push	{r4, lr}
   24f96:	4604      	mov	r4, r0
	data->send_ns = 0;
   24f98:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	if (data->pending) {
   24f9c:	6800      	ldr	r0, [r0, #0]
   24f9e:	b118      	cbz	r0, 24fa8 <nbr_clear_ns_pending+0x18>
		net_pkt_unref(data->pending);
   24fa0:	f7ff f9cd 	bl	2433e <net_pkt_unref>
		data->pending = NULL;
   24fa4:	2300      	movs	r3, #0
   24fa6:	6023      	str	r3, [r4, #0]
}
   24fa8:	bd10      	pop	{r4, pc}

00024faa <nbr_free>:
{
   24faa:	b538      	push	{r3, r4, r5, lr}
   24fac:	4604      	mov	r4, r0
	nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   24fae:	68c0      	ldr	r0, [r0, #12]
   24fb0:	f7ff ffee 	bl	24f90 <nbr_clear_ns_pending>
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   24fb4:	2500      	movs	r5, #0
	net_ipv6_nbr_data(nbr)->reachable = 0;
   24fb6:	2100      	movs	r1, #0
   24fb8:	2000      	movs	r0, #0
   24fba:	68e3      	ldr	r3, [r4, #12]
   24fbc:	e9c3 0106 	strd	r0, r1, [r3, #24]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   24fc0:	621d      	str	r5, [r3, #32]
	net_nbr_unref(nbr);
   24fc2:	4620      	mov	r0, r4
   24fc4:	f7ff fd78 	bl	24ab8 <net_nbr_unref>
	net_nbr_unlink(nbr, NULL);
   24fc8:	4629      	mov	r1, r5
   24fca:	4620      	mov	r0, r4
}
   24fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_nbr_unlink(nbr, NULL);
   24fd0:	f7ec bed0 	b.w	11d74 <net_nbr_unlink>

00024fd4 <k_uptime_get>:
{
   24fd4:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   24fd6:	f002 fb61 	bl	2769c <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   24fda:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   24fde:	fba0 2304 	umull	r2, r3, r0, r4
   24fe2:	fb04 3301 	mla	r3, r4, r1, r3
   24fe6:	0bd0      	lsrs	r0, r2, #15
}
   24fe8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   24fec:	0bd9      	lsrs	r1, r3, #15
   24fee:	bd10      	pop	{r4, pc}

00024ff0 <k_delayed_work_remaining_get>:
{
   24ff0:	b508      	push	{r3, lr}
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   24ff2:	300c      	adds	r0, #12
   24ff4:	f002 fb13 	bl	2761e <z_timeout_remaining>
			return (u32_t)((t * to_hz + off) / from_hz);
   24ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24ffc:	fba0 2303 	umull	r2, r3, r0, r3
   25000:	0bd0      	lsrs	r0, r2, #15
}
   25002:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   25006:	bd08      	pop	{r3, pc}

00025008 <set_llao>:
{
   25008:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2500a:	460d      	mov	r5, r1
   2500c:	4614      	mov	r4, r2
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
   2500e:	f88d 3004 	strb.w	r3, [sp, #4]
	if (net_pkt_write(pkt, &opt_hdr,
   25012:	a901      	add	r1, sp, #4
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
   25014:	08d3      	lsrs	r3, r2, #3
	if (net_pkt_write(pkt, &opt_hdr,
   25016:	2202      	movs	r2, #2
{
   25018:	4606      	mov	r6, r0
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
   2501a:	f88d 3005 	strb.w	r3, [sp, #5]
	if (net_pkt_write(pkt, &opt_hdr,
   2501e:	f7ff fbc8 	bl	247b2 <net_pkt_write>
   25022:	b110      	cbz	r0, 2502a <set_llao+0x22>
		return false;
   25024:	2000      	movs	r0, #0
}
   25026:	b002      	add	sp, #8
   25028:	bd70      	pop	{r4, r5, r6, pc}
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
   2502a:	6829      	ldr	r1, [r5, #0]
   2502c:	4630      	mov	r0, r6
   2502e:	792a      	ldrb	r2, [r5, #4]
   25030:	f7ff fbbf 	bl	247b2 <net_pkt_write>
			  sizeof(struct net_icmpv6_nd_opt_hdr)) ||
   25034:	4601      	mov	r1, r0
   25036:	2800      	cmp	r0, #0
   25038:	d1f4      	bne.n	25024 <set_llao+0x1c>
	    net_pkt_memset(pkt, 0, llao_len - lladdr->len - 2)) {
   2503a:	792a      	ldrb	r2, [r5, #4]
   2503c:	4630      	mov	r0, r6
   2503e:	1aa2      	subs	r2, r4, r2
   25040:	3a02      	subs	r2, #2
   25042:	f7ff fa81 	bl	24548 <net_pkt_memset>
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
   25046:	fab0 f080 	clz	r0, r0
   2504a:	0940      	lsrs	r0, r0, #5
   2504c:	e7eb      	b.n	25026 <set_llao+0x1e>

0002504e <net_linkaddr_set>:
{
   2504e:	b510      	push	{r4, lr}
	if (!lladdr_store || !new_addr) {
   25050:	b140      	cbz	r0, 25064 <net_linkaddr_set+0x16>
   25052:	b139      	cbz	r1, 25064 <net_linkaddr_set+0x16>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   25054:	2a06      	cmp	r2, #6
   25056:	d808      	bhi.n	2506a <net_linkaddr_set+0x1c>
	lladdr_store->len = new_len;
   25058:	7042      	strb	r2, [r0, #1]
   2505a:	3002      	adds	r0, #2
   2505c:	f002 fc73 	bl	27946 <memcpy>

	return 0;
   25060:	2000      	movs	r0, #0
}
   25062:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25064:	f06f 0015 	mvn.w	r0, #21
   25068:	e7fb      	b.n	25062 <net_linkaddr_set+0x14>
		return -EMSGSIZE;
   2506a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2506e:	e7f8      	b.n	25062 <net_linkaddr_set+0x14>

00025070 <read_llao>:
	llstorage->len = NET_LINK_ADDR_MAX_LENGTH;
   25070:	2306      	movs	r3, #6
{
   25072:	b570      	push	{r4, r5, r6, lr}
   25074:	4615      	mov	r5, r2
	llstorage->len = NET_LINK_ADDR_MAX_LENGTH;
   25076:	7053      	strb	r3, [r2, #1]
	if (net_pkt_lladdr_src(pkt)->len < llstorage->len) {
   25078:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
   2507c:	460c      	mov	r4, r1
	if (net_pkt_lladdr_src(pkt)->len < llstorage->len) {
   2507e:	2b05      	cmp	r3, #5
		llstorage->len = net_pkt_lladdr_src(pkt)->len;
   25080:	bf98      	it	ls
   25082:	7053      	strbls	r3, [r2, #1]
	if (net_pkt_read(pkt, llstorage->addr, llstorage->len)) {
   25084:	7852      	ldrb	r2, [r2, #1]
   25086:	1ca9      	adds	r1, r5, #2
{
   25088:	4606      	mov	r6, r0
	if (net_pkt_read(pkt, llstorage->addr, llstorage->len)) {
   2508a:	f7ff fa68 	bl	2455e <net_pkt_read>
   2508e:	b968      	cbnz	r0, 250ac <read_llao+0x3c>
	padding = len * 8U - 2 - llstorage->len;
   25090:	786b      	ldrb	r3, [r5, #1]
   25092:	00e1      	lsls	r1, r4, #3
   25094:	3902      	subs	r1, #2
   25096:	1ac9      	subs	r1, r1, r3
	if (padding) {
   25098:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   2509c:	d008      	beq.n	250b0 <read_llao+0x40>
		if (net_pkt_skip(pkt, padding)) {
   2509e:	4630      	mov	r0, r6
   250a0:	f7ff fa47 	bl	24532 <net_pkt_skip>
   250a4:	fab0 f080 	clz	r0, r0
   250a8:	0940      	lsrs	r0, r0, #5
}
   250aa:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   250ac:	2000      	movs	r0, #0
   250ae:	e7fc      	b.n	250aa <read_llao+0x3a>
	return true;
   250b0:	2001      	movs	r0, #1
   250b2:	e7fa      	b.n	250aa <read_llao+0x3a>

000250b4 <net_ipv6_addr_create_ll_allnodes_mcast>:
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   250b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   250b8:	2202      	movs	r2, #2
   250ba:	7003      	strb	r3, [r0, #0]
   250bc:	7042      	strb	r2, [r0, #1]
   250be:	2300      	movs	r3, #0
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   250c0:	7083      	strb	r3, [r0, #2]
   250c2:	70c3      	strb	r3, [r0, #3]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   250c4:	7103      	strb	r3, [r0, #4]
   250c6:	7143      	strb	r3, [r0, #5]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   250c8:	7183      	strb	r3, [r0, #6]
   250ca:	71c3      	strb	r3, [r0, #7]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   250cc:	7203      	strb	r3, [r0, #8]
   250ce:	7243      	strb	r3, [r0, #9]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   250d0:	7283      	strb	r3, [r0, #10]
   250d2:	72c3      	strb	r3, [r0, #11]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   250d4:	7303      	strb	r3, [r0, #12]
   250d6:	7343      	strb	r3, [r0, #13]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   250d8:	7383      	strb	r3, [r0, #14]
   250da:	2301      	movs	r3, #1
   250dc:	73c3      	strb	r3, [r0, #15]
}
   250de:	4770      	bx	lr

000250e0 <net_neighbor_table_clear>:
   250e0:	4770      	bx	lr

000250e2 <nbr_init>:
{
   250e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   250e4:	461f      	mov	r7, r3
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   250e6:	23ff      	movs	r3, #255	; 0xff
{
   250e8:	b085      	sub	sp, #20
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   250ea:	7043      	strb	r3, [r0, #1]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   250ec:	466b      	mov	r3, sp
{
   250ee:	4604      	mov	r4, r0
   250f0:	461e      	mov	r6, r3
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   250f2:	68c5      	ldr	r5, [r0, #12]
	nbr->iface = iface;
   250f4:	6081      	str	r1, [r0, #8]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   250f6:	f102 0e10 	add.w	lr, r2, #16
   250fa:	469c      	mov	ip, r3
   250fc:	6810      	ldr	r0, [r2, #0]
   250fe:	6851      	ldr	r1, [r2, #4]
   25100:	3208      	adds	r2, #8
   25102:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   25106:	4572      	cmp	r2, lr
   25108:	4663      	mov	r3, ip
   2510a:	d1f6      	bne.n	250fa <nbr_init+0x18>
   2510c:	1d2a      	adds	r2, r5, #4
   2510e:	ab04      	add	r3, sp, #16
   25110:	4635      	mov	r5, r6
   25112:	cd03      	ldmia	r5!, {r0, r1}
   25114:	429d      	cmp	r5, r3
   25116:	6010      	str	r0, [r2, #0]
   25118:	6051      	str	r1, [r2, #4]
   2511a:	462e      	mov	r6, r5
   2511c:	f102 0208 	add.w	r2, r2, #8
   25120:	d1f6      	bne.n	25110 <nbr_init+0x2e>
	ipv6_nbr_set_state(nbr, state);
   25122:	4620      	mov	r0, r4
   25124:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   25128:	f7ec febc 	bl	11ea4 <ipv6_nbr_set_state>
	net_ipv6_nbr_data(nbr)->pending = NULL;
   2512c:	2300      	movs	r3, #0
	net_ipv6_nbr_data(nbr)->send_ns = 0;
   2512e:	2000      	movs	r0, #0
   25130:	2100      	movs	r1, #0
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   25132:	68e2      	ldr	r2, [r4, #12]
	net_ipv6_nbr_data(nbr)->send_ns = 0;
   25134:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
	net_ipv6_nbr_data(nbr)->reachable = 0;
   25138:	e9c2 0106 	strd	r0, r1, [r2, #24]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   2513c:	f882 7035 	strb.w	r7, [r2, #53]	; 0x35
	net_ipv6_nbr_data(nbr)->pending = NULL;
   25140:	6013      	str	r3, [r2, #0]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   25142:	6213      	str	r3, [r2, #32]
}
   25144:	b005      	add	sp, #20
   25146:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025148 <net_ipv6_nbr_rm>:
{
   25148:	b570      	push	{r4, r5, r6, lr}
   2514a:	4605      	mov	r5, r0
   2514c:	460e      	mov	r6, r1
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   2514e:	f7ec fe39 	bl	11dc4 <nbr_lookup.isra.0>
	if (!nbr) {
   25152:	4604      	mov	r4, r0
   25154:	b138      	cbz	r0, 25166 <net_ipv6_nbr_rm+0x1e>
	net_route_del_by_nexthop(iface, addr);
   25156:	4631      	mov	r1, r6
   25158:	4628      	mov	r0, r5
   2515a:	f7ed fba7 	bl	128ac <net_route_del_by_nexthop>
	nbr_free(nbr);
   2515e:	4620      	mov	r0, r4
   25160:	f7ff ff23 	bl	24faa <nbr_free>
	return true;
   25164:	2001      	movs	r0, #1
}
   25166:	bd70      	pop	{r4, r5, r6, pc}

00025168 <net_ipv6_nbr_lookup>:
	return nbr_lookup(&net_neighbor.table, iface, addr);
   25168:	f7ec be2c 	b.w	11dc4 <nbr_lookup.isra.0>

0002516c <net_ipv6_send_na>:
{
   2516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   25170:	f04f 0a14 	mov.w	sl, #20
{
   25174:	461e      	mov	r6, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   25176:	2300      	movs	r3, #0
{
   25178:	b088      	sub	sp, #32
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   2517a:	e9cd 3a02 	strd	r3, sl, [sp, #8]
	u8_t total_len = net_if_get_link_addr(iface)->len +
   2517e:	6803      	ldr	r3, [r0, #0]
{
   25180:	4691      	mov	r9, r2
	return ROUND_UP(total_len, 8U);
   25182:	7d1f      	ldrb	r7, [r3, #20]
	pkt = net_pkt_alloc_with_buffer(iface,
   25184:	f640 42cd 	movw	r2, #3277	; 0xccd
   25188:	2300      	movs	r3, #0
	return ROUND_UP(total_len, 8U);
   2518a:	3709      	adds	r7, #9
   2518c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
	pkt = net_pkt_alloc_with_buffer(iface,
   25190:	e9cd 2300 	strd	r2, r3, [sp]
{
   25194:	460d      	mov	r5, r1
	pkt = net_pkt_alloc_with_buffer(iface,
   25196:	233a      	movs	r3, #58	; 0x3a
   25198:	2202      	movs	r2, #2
   2519a:	eb07 010a 	add.w	r1, r7, sl
{
   2519e:	4680      	mov	r8, r0
	pkt = net_pkt_alloc_with_buffer(iface,
   251a0:	f7ec fcea 	bl	11b78 <net_pkt_alloc_with_buffer>
	if (!pkt) {
   251a4:	4604      	mov	r4, r0
   251a6:	2800      	cmp	r0, #0
   251a8:	d05f      	beq.n	2526a <net_ipv6_send_na+0xfe>
	pkt->ipv6_hop_limit = hop_limit;
   251aa:	23ff      	movs	r3, #255	; 0xff
	if (net_ipv6_create(pkt, src, dst) ||
   251ac:	464a      	mov	r2, r9
   251ae:	4629      	mov	r1, r5
   251b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   251b4:	f7ff fcb0 	bl	24b18 <net_ipv6_create>
   251b8:	4602      	mov	r2, r0
   251ba:	b140      	cbz	r0, 251ce <net_ipv6_send_na+0x62>
	int ret = -ENOBUFS;
   251bc:	f06f 0568 	mvn.w	r5, #104	; 0x68
	net_pkt_unref(pkt);
   251c0:	4620      	mov	r0, r4
   251c2:	f7ff f8bc 	bl	2433e <net_pkt_unref>
}
   251c6:	4628      	mov	r0, r5
   251c8:	b008      	add	sp, #32
   251ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    net_icmpv6_create(pkt, NET_ICMPV6_NA, 0)) {
   251ce:	2188      	movs	r1, #136	; 0x88
   251d0:	4620      	mov	r0, r4
   251d2:	f7ff fb5d 	bl	24890 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
   251d6:	4681      	mov	r9, r0
   251d8:	2800      	cmp	r0, #0
   251da:	d1ef      	bne.n	251bc <net_ipv6_send_na+0x50>
	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
   251dc:	4620      	mov	r0, r4
   251de:	a902      	add	r1, sp, #8
   251e0:	f7ff fb03 	bl	247ea <net_pkt_get_data>
	if (!na_hdr) {
   251e4:	4605      	mov	r5, r0
   251e6:	2800      	cmp	r0, #0
   251e8:	d0e8      	beq.n	251bc <net_ipv6_send_na+0x50>
__ssp_bos_icheck3(memset, void *, int)
   251ea:	4652      	mov	r2, sl
   251ec:	4649      	mov	r1, r9
   251ee:	f002 fbe4 	bl	279ba <memset>
	na_hdr->flags = flags;
   251f2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   251f6:	aa04      	add	r2, sp, #16
	na_hdr->flags = flags;
   251f8:	702b      	strb	r3, [r5, #0]
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   251fa:	f106 0e10 	add.w	lr, r6, #16
   251fe:	4633      	mov	r3, r6
   25200:	4616      	mov	r6, r2
   25202:	4694      	mov	ip, r2
   25204:	6818      	ldr	r0, [r3, #0]
   25206:	6859      	ldr	r1, [r3, #4]
   25208:	3308      	adds	r3, #8
   2520a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   2520e:	4573      	cmp	r3, lr
   25210:	4662      	mov	r2, ip
   25212:	d1f6      	bne.n	25202 <net_ipv6_send_na+0x96>
   25214:	1d2b      	adds	r3, r5, #4
   25216:	ad08      	add	r5, sp, #32
   25218:	4632      	mov	r2, r6
   2521a:	ca03      	ldmia	r2!, {r0, r1}
   2521c:	42aa      	cmp	r2, r5
   2521e:	6018      	str	r0, [r3, #0]
   25220:	6059      	str	r1, [r3, #4]
   25222:	4616      	mov	r6, r2
   25224:	f103 0308 	add.w	r3, r3, #8
   25228:	d1f6      	bne.n	25218 <net_ipv6_send_na+0xac>
	if (net_pkt_set_data(pkt, &na_access)) {
   2522a:	4620      	mov	r0, r4
   2522c:	a902      	add	r1, sp, #8
   2522e:	f7ff fafd 	bl	2482c <net_pkt_set_data>
   25232:	4605      	mov	r5, r0
   25234:	2800      	cmp	r0, #0
   25236:	d1c1      	bne.n	251bc <net_ipv6_send_na+0x50>
	return &iface->if_dev->link_addr;
   25238:	f8d8 1000 	ldr.w	r1, [r8]
	if (!set_llao(pkt, net_if_get_link_addr(iface),
   2523c:	2302      	movs	r3, #2
   2523e:	463a      	mov	r2, r7
   25240:	4620      	mov	r0, r4
   25242:	3110      	adds	r1, #16
   25244:	f7ff fee0 	bl	25008 <set_llao>
   25248:	2800      	cmp	r0, #0
   2524a:	d0b7      	beq.n	251bc <net_ipv6_send_na+0x50>
	net_pkt_cursor_init(pkt);
   2524c:	4620      	mov	r0, r4
   2524e:	f7ff f8e6 	bl	2441e <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   25252:	213a      	movs	r1, #58	; 0x3a
   25254:	4620      	mov	r0, r4
   25256:	f7ff fcc2 	bl	24bde <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
   2525a:	4620      	mov	r0, r4
   2525c:	f7fd ff07 	bl	2306e <net_send_data>
   25260:	2800      	cmp	r0, #0
   25262:	dab0      	bge.n	251c6 <net_ipv6_send_na+0x5a>
		ret = -EINVAL;
   25264:	f06f 0515 	mvn.w	r5, #21
   25268:	e7aa      	b.n	251c0 <net_ipv6_send_na+0x54>
		return -ENOMEM;
   2526a:	f06f 050b 	mvn.w	r5, #11
   2526e:	e7aa      	b.n	251c6 <net_ipv6_send_na+0x5a>

00025270 <net_ipv6_nbr_set_reachable_timer>:
	time = net_if_ipv6_get_reachable_time(iface);
   25270:	6842      	ldr	r2, [r0, #4]
	if (!iface->config.ip.ipv6) {
   25272:	b10a      	cbz	r2, 25278 <net_ipv6_nbr_set_reachable_timer+0x8>
	return iface->config.ip.ipv6->reachable_time;
   25274:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
	ipv6_nd_restart_reachable_timer(nbr, time);
   25278:	2300      	movs	r3, #0
   2527a:	4608      	mov	r0, r1
   2527c:	f7ec bdd8 	b.w	11e30 <ipv6_nd_restart_reachable_timer>

00025280 <handle_na_input>:
{
   25280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   25284:	2314      	movs	r3, #20
   25286:	2500      	movs	r5, #0
{
   25288:	b08d      	sub	sp, #52	; 0x34
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   2528a:	e9cd 5304 	strd	r5, r3, [sp, #16]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   2528e:	ab03      	add	r3, sp, #12
   25290:	9306      	str	r3, [sp, #24]
   25292:	2302      	movs	r3, #2
{
   25294:	4604      	mov	r4, r0
   25296:	460f      	mov	r7, r1
   25298:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   2529a:	9307      	str	r3, [sp, #28]
	u16_t length = net_pkt_get_len(pkt);
   2529c:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   2529e:	b953      	cbnz	r3, 252b6 <handle_na_input+0x36>
	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
   252a0:	4620      	mov	r0, r4
   252a2:	a904      	add	r1, sp, #16
   252a4:	f7ff faa1 	bl	247ea <net_pkt_get_data>
	u16_t length = net_pkt_get_len(pkt);
   252a8:	b2ad      	uxth	r5, r5
	if (!na_hdr) {
   252aa:	4606      	mov	r6, r0
   252ac:	b938      	cbnz	r0, 252be <handle_na_input+0x3e>
	return NET_DROP;
   252ae:	2002      	movs	r0, #2
}
   252b0:	b00d      	add	sp, #52	; 0x34
   252b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes += buf->len;
   252b6:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   252b8:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   252ba:	4415      	add	r5, r2
		buf = buf->frags;
   252bc:	e7ef      	b.n	2529e <handle_na_input+0x1e>
	if (((length < (sizeof(struct net_ipv6_hdr) +
   252be:	2d41      	cmp	r5, #65	; 0x41
   252c0:	d90b      	bls.n	252da <handle_na_input+0x5a>
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   252c2:	79fb      	ldrb	r3, [r7, #7]
   252c4:	2bff      	cmp	r3, #255	; 0xff
   252c6:	d108      	bne.n	252da <handle_na_input+0x5a>
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   252c8:	7903      	ldrb	r3, [r0, #4]
   252ca:	2bff      	cmp	r3, #255	; 0xff
   252cc:	d005      	beq.n	252da <handle_na_input+0x5a>
	     net_ipv6_is_addr_mcast(&na_hdr->tgt) ||
   252ce:	7803      	ldrb	r3, [r0, #0]
   252d0:	0658      	lsls	r0, r3, #25
   252d2:	d506      	bpl.n	252e2 <handle_na_input+0x62>
	     (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED &&
   252d4:	7e3b      	ldrb	r3, [r7, #24]
   252d6:	2bff      	cmp	r3, #255	; 0xff
   252d8:	d103      	bne.n	252e2 <handle_na_input+0x62>
	      net_ipv6_is_addr_mcast(&ip_hdr->dst))) &&
   252da:	f898 3001 	ldrb.w	r3, [r8, #1]
   252de:	2b00      	cmp	r3, #0
   252e0:	d1e5      	bne.n	252ae <handle_na_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   252e2:	9905      	ldr	r1, [sp, #20]
   252e4:	4620      	mov	r0, r4
   252e6:	f7ff f924 	bl	24532 <net_pkt_skip>
	pkt->ipv6_ext_opt_len = len;
   252ea:	2314      	movs	r3, #20
				net_pkt_get_data(pkt, &nd_access);
   252ec:	4620      	mov	r0, r4
   252ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   252f2:	a906      	add	r1, sp, #24
   252f4:	f7ff fa79 	bl	247ea <net_pkt_get_data>
	u16_t tllao_offset = 0U;
   252f8:	2700      	movs	r7, #0
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
   252fa:	3d2c      	subs	r5, #44	; 0x2c
   252fc:	b2ad      	uxth	r5, r5
	while (nd_opt_hdr && nd_opt_hdr->len &&
   252fe:	b130      	cbz	r0, 2530e <handle_na_input+0x8e>
   25300:	7843      	ldrb	r3, [r0, #1]
   25302:	b123      	cbz	r3, 2530e <handle_na_input+0x8e>
	       net_pkt_ipv6_ext_opt_len(pkt) < length) {
   25304:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
	while (nd_opt_hdr && nd_opt_hdr->len &&
   25308:	42a9      	cmp	r1, r5
	       net_pkt_ipv6_ext_opt_len(pkt) < length) {
   2530a:	460a      	mov	r2, r1
	while (nd_opt_hdr && nd_opt_hdr->len &&
   2530c:	d313      	bcc.n	25336 <handle_na_input+0xb6>
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   2530e:	1d31      	adds	r1, r6, #4
   25310:	6a20      	ldr	r0, [r4, #32]
   25312:	9101      	str	r1, [sp, #4]
   25314:	f7fd ffd4 	bl	232c0 <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   25318:	9901      	ldr	r1, [sp, #4]
   2531a:	b330      	cbz	r0, 2536a <handle_na_input+0xea>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   2531c:	f990 302d 	ldrsb.w	r3, [r0, #45]	; 0x2d
   25320:	2b00      	cmp	r3, #0
   25322:	d1c4      	bne.n	252ae <handle_na_input+0x2e>
	if (net_ipv6_is_ll_addr(addr)) {
   25324:	f248 03fe 	movw	r3, #33022	; 0x80fe
   25328:	88b2      	ldrh	r2, [r6, #4]
   2532a:	429a      	cmp	r2, r3
   2532c:	d0bf      	beq.n	252ae <handle_na_input+0x2e>
	net_if_ipv6_dad_failed(iface, addr);
   2532e:	6a20      	ldr	r0, [r4, #32]
   25330:	f7eb fe1c 	bl	10f6c <net_if_ipv6_dad_failed>
	return true;
   25334:	e7bb      	b.n	252ae <handle_na_input+0x2e>
		switch (nd_opt_hdr->type) {
   25336:	7800      	ldrb	r0, [r0, #0]
   25338:	2802      	cmp	r0, #2
   2533a:	d106      	bne.n	2534a <handle_na_input+0xca>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   2533c:	8fe7      	ldrh	r7, [r4, #62]	; 0x3e
   2533e:	3706      	adds	r7, #6
   25340:	443a      	add	r2, r7
   25342:	f894 7038 	ldrb.w	r7, [r4, #56]	; 0x38
   25346:	443a      	add	r2, r7
   25348:	b297      	uxth	r7, r2
					     net_pkt_ipv6_ext_opt_len(pkt) +
   2534a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   2534e:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   25350:	4299      	cmp	r1, r3
   25352:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   25356:	d2aa      	bcs.n	252ae <handle_na_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   25358:	9907      	ldr	r1, [sp, #28]
   2535a:	4620      	mov	r0, r4
   2535c:	f7ff f8e9 	bl	24532 <net_pkt_skip>
					net_pkt_get_data(pkt, &nd_access);
   25360:	4620      	mov	r0, r4
   25362:	a906      	add	r1, sp, #24
   25364:	f7ff fa41 	bl	247ea <net_pkt_get_data>
   25368:	e7c9      	b.n	252fe <handle_na_input+0x7e>
	struct net_linkaddr_storage lladdr = { 0 };
   2536a:	e9cd 0008 	strd	r0, r0, [sp, #32]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &na_hdr->tgt);
   2536e:	6a20      	ldr	r0, [r4, #32]
   25370:	f7ec fd28 	bl	11dc4 <nbr_lookup.isra.0>
	if (!nbr) {
   25374:	4605      	mov	r5, r0
   25376:	2800      	cmp	r0, #0
   25378:	d099      	beq.n	252ae <handle_na_input+0x2e>
	if (tllao_offset) {
   2537a:	2f00      	cmp	r7, #0
   2537c:	d140      	bne.n	25400 <handle_na_input+0x180>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   2537e:	786b      	ldrb	r3, [r5, #1]
   25380:	2bff      	cmp	r3, #255	; 0xff
   25382:	d055      	beq.n	25430 <handle_na_input+0x1b0>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   25384:	7868      	ldrb	r0, [r5, #1]
   25386:	f7ec fd15 	bl	11db4 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   2538a:	4680      	mov	r8, r0
   2538c:	2800      	cmp	r0, #0
   2538e:	d08e      	beq.n	252ae <handle_na_input+0x2e>
	if (tllao_offset) {
   25390:	2f00      	cmp	r7, #0
   25392:	d062      	beq.n	2545a <handle_na_input+0x1da>
		lladdr_changed = memcmp(lladdr.addr,
   25394:	7842      	ldrb	r2, [r0, #1]
   25396:	1c81      	adds	r1, r0, #2
   25398:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   2539c:	f002 fac5 	bl	2792a <memcmp>
   253a0:	f1b0 0900 	subs.w	r9, r0, #0
   253a4:	bf18      	it	ne
   253a6:	f04f 0901 	movne.w	r9, #1
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   253aa:	68eb      	ldr	r3, [r5, #12]
   253ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   253b0:	2b00      	cmp	r3, #0
   253b2:	d154      	bne.n	2545e <handle_na_input+0x1de>
		if (!tllao_offset) {
   253b4:	2f00      	cmp	r7, #0
   253b6:	f43f af7a 	beq.w	252ae <handle_na_input+0x2e>
		if (lladdr_changed) {
   253ba:	f1b9 0f00 	cmp.w	r9, #0
   253be:	d009      	beq.n	253d4 <handle_na_input+0x154>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
   253c0:	4640      	mov	r0, r8
   253c2:	f7ec fd21 	bl	11e08 <dbg_update_neighbor_lladdr.isra.0>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   253c6:	4640      	mov	r0, r8
   253c8:	f898 2001 	ldrb.w	r2, [r8, #1]
   253cc:	f10d 0122 	add.w	r1, sp, #34	; 0x22
   253d0:	f7ff fe3d 	bl	2504e <net_linkaddr_set>
		if (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED) {
   253d4:	7833      	ldrb	r3, [r6, #0]
   253d6:	0659      	lsls	r1, r3, #25
   253d8:	f140 8086 	bpl.w	254e8 <handle_na_input+0x268>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   253dc:	2101      	movs	r1, #1
   253de:	4628      	mov	r0, r5
   253e0:	f7ec fd60 	bl	11ea4 <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->reachable = 0;
   253e4:	2000      	movs	r0, #0
   253e6:	2100      	movs	r1, #0
			net_ipv6_nbr_data(nbr)->ns_count = 0U;
   253e8:	2200      	movs	r2, #0
   253ea:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable = 0;
   253ec:	e9c3 0106 	strd	r0, r1, [r3, #24]
			net_ipv6_nbr_data(nbr)->ns_count = 0U;
   253f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   253f4:	4629      	mov	r1, r5
   253f6:	6a20      	ldr	r0, [r4, #32]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   253f8:	621a      	str	r2, [r3, #32]
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   253fa:	f7ff ff39 	bl	25270 <net_ipv6_nbr_set_reachable_timer>
   253fe:	e03d      	b.n	2547c <handle_na_input+0x1fc>
		lladdr.len = net_pkt_lladdr_src(pkt)->len;
   25400:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
		net_pkt_cursor_init(pkt);
   25404:	4620      	mov	r0, r4
		lladdr.len = net_pkt_lladdr_src(pkt)->len;
   25406:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		net_pkt_cursor_init(pkt);
   2540a:	f7ff f808 	bl	2441e <net_pkt_cursor_init>
		if (net_pkt_skip(pkt, tllao_offset) ||
   2540e:	4639      	mov	r1, r7
   25410:	4620      	mov	r0, r4
   25412:	f7ff f88e 	bl	24532 <net_pkt_skip>
   25416:	2800      	cmp	r0, #0
   25418:	f47f af49 	bne.w	252ae <handle_na_input+0x2e>
		    net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
   2541c:	4620      	mov	r0, r4
   2541e:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   25422:	f10d 0122 	add.w	r1, sp, #34	; 0x22
   25426:	f7ff f89a 	bl	2455e <net_pkt_read>
		if (net_pkt_skip(pkt, tllao_offset) ||
   2542a:	2800      	cmp	r0, #0
   2542c:	d0a7      	beq.n	2537e <handle_na_input+0xfe>
   2542e:	e73e      	b.n	252ae <handle_na_input+0x2e>
		if (!tllao_offset) {
   25430:	2f00      	cmp	r7, #0
   25432:	f43f af3c 	beq.w	252ae <handle_na_input+0x2e>
		nbr_lladdr.len = lladdr.len;
   25436:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   2543a:	4628      	mov	r0, r5
		nbr_lladdr.len = lladdr.len;
   2543c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   25440:	6a21      	ldr	r1, [r4, #32]
		nbr_lladdr.addr = lladdr.addr;
   25442:	f10d 0322 	add.w	r3, sp, #34	; 0x22
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   25446:	aa0a      	add	r2, sp, #40	; 0x28
		nbr_lladdr.addr = lladdr.addr;
   25448:	930a      	str	r3, [sp, #40]	; 0x28
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   2544a:	f7ec fc39 	bl	11cc0 <net_nbr_link>
   2544e:	2800      	cmp	r0, #0
   25450:	d098      	beq.n	25384 <handle_na_input+0x104>
			nbr_free(nbr);
   25452:	4628      	mov	r0, r5
   25454:	f7ff fda9 	bl	24faa <nbr_free>
			return false;
   25458:	e729      	b.n	252ae <handle_na_input+0x2e>
	bool lladdr_changed = false;
   2545a:	46b9      	mov	r9, r7
   2545c:	e7a5      	b.n	253aa <handle_na_input+0x12a>
	if (!(na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE) && lladdr_changed) {
   2545e:	7832      	ldrb	r2, [r6, #0]
   25460:	0692      	lsls	r2, r2, #26
   25462:	d423      	bmi.n	254ac <handle_na_input+0x22c>
   25464:	f1b9 0f00 	cmp.w	r9, #0
   25468:	d007      	beq.n	2547a <handle_na_input+0x1fa>
		if (net_ipv6_nbr_data(nbr)->state ==
   2546a:	2b01      	cmp	r3, #1
   2546c:	f47f af1f 	bne.w	252ae <handle_na_input+0x2e>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   25470:	2102      	movs	r1, #2
   25472:	4628      	mov	r0, r5
   25474:	f7ec fd16 	bl	11ea4 <ipv6_nbr_set_state>
   25478:	e719      	b.n	252ae <handle_na_input+0x2e>
	if (na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE ||
   2547a:	bb27      	cbnz	r7, 254c6 <handle_na_input+0x246>
		(na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER);
   2547c:	7833      	ldrb	r3, [r6, #0]
	net_ipv6_nbr_data(nbr)->is_router =
   2547e:	68ea      	ldr	r2, [r5, #12]
		(na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER);
   25480:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router =
   25482:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	pending = net_ipv6_nbr_data(nbr)->pending;
   25486:	68eb      	ldr	r3, [r5, #12]
   25488:	681e      	ldr	r6, [r3, #0]
	if (pending) {
   2548a:	b156      	cbz	r6, 254a2 <handle_na_input+0x222>
		if (net_send_data(pending) < 0) {
   2548c:	4630      	mov	r0, r6
   2548e:	f7fd fdee 	bl	2306e <net_send_data>
   25492:	2800      	cmp	r0, #0
   25494:	da2d      	bge.n	254f2 <handle_na_input+0x272>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   25496:	68e8      	ldr	r0, [r5, #12]
   25498:	f7ff fd7a 	bl	24f90 <nbr_clear_ns_pending>
		net_pkt_unref(pending);
   2549c:	4630      	mov	r0, r6
   2549e:	f7fe ff4e 	bl	2433e <net_pkt_unref>
	net_pkt_unref(pkt);
   254a2:	4620      	mov	r0, r4
   254a4:	f7fe ff4b 	bl	2433e <net_pkt_unref>
	return NET_OK;
   254a8:	2000      	movs	r0, #0
   254aa:	e701      	b.n	252b0 <handle_na_input+0x30>
		if (lladdr_changed) {
   254ac:	f1b9 0f00 	cmp.w	r9, #0
   254b0:	d009      	beq.n	254c6 <handle_na_input+0x246>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
   254b2:	4640      	mov	r0, r8
   254b4:	f7ec fca8 	bl	11e08 <dbg_update_neighbor_lladdr.isra.0>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   254b8:	4640      	mov	r0, r8
   254ba:	f898 2001 	ldrb.w	r2, [r8, #1]
   254be:	f10d 0122 	add.w	r1, sp, #34	; 0x22
   254c2:	f7ff fdc4 	bl	2504e <net_linkaddr_set>
		if (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED) {
   254c6:	7833      	ldrb	r3, [r6, #0]
   254c8:	065b      	lsls	r3, r3, #25
   254ca:	d50a      	bpl.n	254e2 <handle_na_input+0x262>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   254cc:	2101      	movs	r1, #1
   254ce:	4628      	mov	r0, r5
   254d0:	f7ec fce8 	bl	11ea4 <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->reachable = 0;
   254d4:	2000      	movs	r0, #0
   254d6:	2100      	movs	r1, #0
   254d8:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   254da:	2200      	movs	r2, #0
			net_ipv6_nbr_data(nbr)->reachable = 0;
   254dc:	e9c3 0106 	strd	r0, r1, [r3, #24]
	return (struct net_ipv6_nbr_data *)nbr->data;
   254e0:	e788      	b.n	253f4 <handle_na_input+0x174>
			if (lladdr_changed) {
   254e2:	f1b9 0f00 	cmp.w	r9, #0
   254e6:	d0c9      	beq.n	2547c <handle_na_input+0x1fc>
				ipv6_nbr_set_state(nbr,
   254e8:	2102      	movs	r1, #2
   254ea:	4628      	mov	r0, r5
   254ec:	f7ec fcda 	bl	11ea4 <ipv6_nbr_set_state>
   254f0:	e7c4      	b.n	2547c <handle_na_input+0x1fc>
			net_ipv6_nbr_data(nbr)->pending = NULL;
   254f2:	2200      	movs	r2, #0
   254f4:	68eb      	ldr	r3, [r5, #12]
   254f6:	601a      	str	r2, [r3, #0]
   254f8:	e7d0      	b.n	2549c <handle_na_input+0x21c>

000254fa <net_ipv6_nbr_add>:
{
   254fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   254fe:	4615      	mov	r5, r2
   25500:	461a      	mov	r2, r3
	nbr = add_nbr(iface, addr, is_router, state);
   25502:	f89d 3020 	ldrb.w	r3, [sp, #32]
{
   25506:	4607      	mov	r7, r0
   25508:	4688      	mov	r8, r1
	nbr = add_nbr(iface, addr, is_router, state);
   2550a:	f7ec fd67 	bl	11fdc <add_nbr>
	if (!nbr) {
   2550e:	4604      	mov	r4, r0
   25510:	b388      	cbz	r0, 25576 <net_ipv6_nbr_add+0x7c>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   25512:	462a      	mov	r2, r5
   25514:	4639      	mov	r1, r7
   25516:	f7ec fbd3 	bl	11cc0 <net_nbr_link>
   2551a:	3078      	adds	r0, #120	; 0x78
   2551c:	d11a      	bne.n	25554 <net_ipv6_nbr_add+0x5a>
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   2551e:	68e3      	ldr	r3, [r4, #12]
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   25520:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   25524:	2b05      	cmp	r3, #5
   25526:	d026      	beq.n	25576 <net_ipv6_nbr_add+0x7c>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   25528:	7860      	ldrb	r0, [r4, #1]
   2552a:	f7ec fc43 	bl	11db4 <net_nbr_get_lladdr>
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   2552e:	792a      	ldrb	r2, [r5, #4]
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   25530:	4606      	mov	r6, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   25532:	6829      	ldr	r1, [r5, #0]
   25534:	3002      	adds	r0, #2
   25536:	f002 f9f8 	bl	2792a <memcmp>
   2553a:	b1b8      	cbz	r0, 2556c <net_ipv6_nbr_add+0x72>
			dbg_update_neighbor_lladdr(lladdr, cached_lladdr, addr);
   2553c:	4630      	mov	r0, r6
   2553e:	f7ec fc63 	bl	11e08 <dbg_update_neighbor_lladdr.isra.0>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   25542:	4630      	mov	r0, r6
   25544:	792a      	ldrb	r2, [r5, #4]
   25546:	6829      	ldr	r1, [r5, #0]
   25548:	f7ff fd81 	bl	2504e <net_linkaddr_set>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   2554c:	2102      	movs	r1, #2
   2554e:	4620      	mov	r0, r4
   25550:	f7ec fca8 	bl	11ea4 <ipv6_nbr_set_state>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   25554:	68e3      	ldr	r3, [r4, #12]
   25556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   2555a:	b963      	cbnz	r3, 25576 <net_ipv6_nbr_add+0x7c>
		ret = net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   2555c:	461a      	mov	r2, r3
   2555e:	4619      	mov	r1, r3
   25560:	4638      	mov	r0, r7
   25562:	e9cd 8300 	strd	r8, r3, [sp]
   25566:	f7ec fd95 	bl	12094 <net_ipv6_send_ns>
		if (ret < 0) {
   2556a:	e004      	b.n	25576 <net_ipv6_nbr_add+0x7c>
		} else if (net_ipv6_nbr_data(nbr)->state ==
   2556c:	68e3      	ldr	r3, [r4, #12]
   2556e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   25572:	2b00      	cmp	r3, #0
   25574:	d0ea      	beq.n	2554c <net_ipv6_nbr_add+0x52>
}
   25576:	4620      	mov	r0, r4
   25578:	b002      	add	sp, #8
   2557a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002557e <handle_ns_input>:
{
   2557e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
   25582:	2314      	movs	r3, #20
   25584:	2600      	movs	r6, #0
{
   25586:	b090      	sub	sp, #64	; 0x40
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
   25588:	e9cd 6304 	strd	r6, r3, [sp, #16]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   2558c:	ab03      	add	r3, sp, #12
   2558e:	9306      	str	r3, [sp, #24]
   25590:	2302      	movs	r3, #2
{
   25592:	4604      	mov	r4, r0
   25594:	460d      	mov	r5, r1
   25596:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   25598:	9307      	str	r3, [sp, #28]
	u16_t length = net_pkt_get_len(pkt);
   2559a:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   2559c:	b963      	cbnz	r3, 255b8 <handle_ns_input+0x3a>
	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
   2559e:	4620      	mov	r0, r4
   255a0:	a904      	add	r1, sp, #16
	src_lladdr.len = 0;
   255a2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
   255a6:	f7ff f920 	bl	247ea <net_pkt_get_data>
	u16_t length = net_pkt_get_len(pkt);
   255aa:	b2b6      	uxth	r6, r6
	if (!ns_hdr) {
   255ac:	4607      	mov	r7, r0
   255ae:	b938      	cbnz	r0, 255c0 <handle_ns_input+0x42>
	return NET_DROP;
   255b0:	2002      	movs	r0, #2
}
   255b2:	b010      	add	sp, #64	; 0x40
   255b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   255b8:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   255ba:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   255bc:	4416      	add	r6, r2
		buf = buf->frags;
   255be:	e7ed      	b.n	2559c <handle_ns_input+0x1e>
	if (((length < (sizeof(struct net_ipv6_hdr) +
   255c0:	2e3f      	cmp	r6, #63	; 0x3f
   255c2:	d902      	bls.n	255ca <handle_ns_input+0x4c>
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   255c4:	79eb      	ldrb	r3, [r5, #7]
   255c6:	2bff      	cmp	r3, #255	; 0xff
   255c8:	d006      	beq.n	255d8 <handle_ns_input+0x5a>
	    (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT)) &&
   255ca:	793b      	ldrb	r3, [r7, #4]
   255cc:	2bff      	cmp	r3, #255	; 0xff
   255ce:	d103      	bne.n	255d8 <handle_ns_input+0x5a>
	    (net_ipv6_is_addr_mcast(&ns_hdr->tgt) && icmp_hdr->code != 0U)) {
   255d0:	f898 3001 	ldrb.w	r3, [r8, #1]
   255d4:	2b00      	cmp	r3, #0
   255d6:	d1eb      	bne.n	255b0 <handle_ns_input+0x32>
   255d8:	9905      	ldr	r1, [sp, #20]
   255da:	4620      	mov	r0, r4
   255dc:	f7fe ffa9 	bl	24532 <net_pkt_skip>
	pkt->ipv6_ext_opt_len = len;
   255e0:	2314      	movs	r3, #20
				net_pkt_get_data(pkt, &nd_access);
   255e2:	4620      	mov	r0, r4
   255e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   255e8:	a906      	add	r1, sp, #24
   255ea:	f7ff f8fe 	bl	247ea <net_pkt_get_data>
   255ee:	4682      	mov	sl, r0
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
   255f0:	3e2c      	subs	r6, #44	; 0x2c
   255f2:	b2b6      	uxth	r6, r6
			if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   255f4:	f105 0808 	add.w	r8, r5, #8
			src_lladdr.addr = src_lladdr_s.addr;
   255f8:	f10d 0922 	add.w	r9, sp, #34	; 0x22
	while (nd_opt_hdr && nd_opt_hdr->len > 0 &&
   255fc:	f1ba 0f00 	cmp.w	sl, #0
   25600:	d006      	beq.n	25610 <handle_ns_input+0x92>
   25602:	f89a 3001 	ldrb.w	r3, [sl, #1]
   25606:	b11b      	cbz	r3, 25610 <handle_ns_input+0x92>
   25608:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   2560c:	42b3      	cmp	r3, r6
   2560e:	d331      	bcc.n	25674 <handle_ns_input+0xf6>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   25610:	3704      	adds	r7, #4
   25612:	4639      	mov	r1, r7
   25614:	6a20      	ldr	r0, [r4, #32]
   25616:	f7fd fe53 	bl	232c0 <net_if_ipv6_addr_lookup_by_iface>
	if (!ifaddr) {
   2561a:	4682      	mov	sl, r0
   2561c:	2800      	cmp	r0, #0
   2561e:	d0c7      	beq.n	255b0 <handle_ns_input+0x32>
	if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   25620:	f105 0808 	add.w	r8, r5, #8
		tgt = &ifaddr->address.in6_addr;
   25624:	1d06      	adds	r6, r0, #4
	if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   25626:	4640      	mov	r0, r8
   25628:	f7ff fca4 	bl	24f74 <net_ipv6_is_addr_unspecified>
		na_src = &ip_hdr->dst;
   2562c:	f105 0918 	add.w	r9, r5, #24
	if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   25630:	4601      	mov	r1, r0
   25632:	2800      	cmp	r0, #0
   25634:	d07f      	beq.n	25736 <handle_ns_input+0x1b8>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   25636:	f240 23ff 	movw	r3, #767	; 0x2ff
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2563a:	69aa      	ldr	r2, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2563c:	429a      	cmp	r2, r3
   2563e:	d1b7      	bne.n	255b0 <handle_ns_input+0x32>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   25640:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   25642:	2b00      	cmp	r3, #0
   25644:	d1b4      	bne.n	255b0 <handle_ns_input+0x32>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   25646:	6a2b      	ldr	r3, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   25648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2564c:	d1b0      	bne.n	255b0 <handle_ns_input+0x32>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   2564e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   25650:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   25652:	2bff      	cmp	r3, #255	; 0xff
   25654:	d1ac      	bne.n	255b0 <handle_ns_input+0x32>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   25656:	f99a 302d 	ldrsb.w	r3, [sl, #45]	; 0x2d
   2565a:	2b00      	cmp	r3, #0
   2565c:	d137      	bne.n	256ce <handle_ns_input+0x150>
	if (net_ipv6_is_ll_addr(addr)) {
   2565e:	f248 03fe 	movw	r3, #33022	; 0x80fe
   25662:	f8ba 2004 	ldrh.w	r2, [sl, #4]
   25666:	429a      	cmp	r2, r3
   25668:	d0a2      	beq.n	255b0 <handle_ns_input+0x32>
	net_if_ipv6_dad_failed(iface, addr);
   2566a:	4631      	mov	r1, r6
   2566c:	6a20      	ldr	r0, [r4, #32]
   2566e:	f7eb fc7d 	bl	10f6c <net_if_ipv6_dad_failed>
   25672:	e79d      	b.n	255b0 <handle_ns_input+0x32>
	return net_pkt_skip(pkt, access->size);
   25674:	4620      	mov	r0, r4
   25676:	9907      	ldr	r1, [sp, #28]
   25678:	f7fe ff5b 	bl	24532 <net_pkt_skip>
		switch (nd_opt_hdr->type) {
   2567c:	f89a 3000 	ldrb.w	r3, [sl]
   25680:	2b01      	cmp	r3, #1
   25682:	d112      	bne.n	256aa <handle_ns_input+0x12c>
			if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   25684:	4640      	mov	r0, r8
   25686:	f7ff fc75 	bl	24f74 <net_ipv6_is_addr_unspecified>
   2568a:	2800      	cmp	r0, #0
   2568c:	d190      	bne.n	255b0 <handle_ns_input+0x32>
			if (!read_llao(pkt, nd_opt_hdr->len, &src_lladdr_s)) {
   2568e:	4620      	mov	r0, r4
   25690:	f89a 1001 	ldrb.w	r1, [sl, #1]
   25694:	aa08      	add	r2, sp, #32
   25696:	f7ff fceb 	bl	25070 <read_llao>
   2569a:	2800      	cmp	r0, #0
   2569c:	d088      	beq.n	255b0 <handle_ns_input+0x32>
			src_lladdr.len = src_lladdr_s.len;
   2569e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
			src_lladdr.addr = src_lladdr_s.addr;
   256a2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
			src_lladdr.len = src_lladdr_s.len;
   256a6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
		prev_opt_len = net_pkt_ipv6_ext_opt_len(pkt);
   256aa:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
					     (nd_opt_hdr->len << 3));
   256ae:	f89a 3001 	ldrb.w	r3, [sl, #1]
					     net_pkt_ipv6_ext_opt_len(pkt) +
   256b2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   256b6:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   256b8:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
   256ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   256be:	f67f af77 	bls.w	255b0 <handle_ns_input+0x32>
					net_pkt_get_data(pkt, &nd_access);
   256c2:	4620      	mov	r0, r4
   256c4:	a906      	add	r1, sp, #24
   256c6:	f7ff f890 	bl	247ea <net_pkt_get_data>
   256ca:	4682      	mov	sl, r0
   256cc:	e796      	b.n	255fc <handle_ns_input+0x7e>
		net_ipv6_addr_create_ll_allnodes_mcast(&ip_hdr->dst);
   256ce:	4648      	mov	r0, r9
   256d0:	f7ff fcf0 	bl	250b4 <net_ipv6_addr_create_ll_allnodes_mcast>
		net_ipaddr_copy(&ip_hdr->src,
   256d4:	4649      	mov	r1, r9
   256d6:	6a20      	ldr	r0, [r4, #32]
   256d8:	f7eb fdfe 	bl	112d8 <net_if_ipv6_select_src_addr>
   256dc:	ad0c      	add	r5, sp, #48	; 0x30
   256de:	4603      	mov	r3, r0
   256e0:	462a      	mov	r2, r5
   256e2:	f100 0c10 	add.w	ip, r0, #16
   256e6:	462f      	mov	r7, r5
   256e8:	6818      	ldr	r0, [r3, #0]
   256ea:	6859      	ldr	r1, [r3, #4]
   256ec:	3308      	adds	r3, #8
   256ee:	c703      	stmia	r7!, {r0, r1}
   256f0:	4563      	cmp	r3, ip
   256f2:	463d      	mov	r5, r7
   256f4:	d1f7      	bne.n	256e6 <handle_ns_input+0x168>
   256f6:	4645      	mov	r5, r8
   256f8:	af10      	add	r7, sp, #64	; 0x40
   256fa:	4613      	mov	r3, r2
   256fc:	cb03      	ldmia	r3!, {r0, r1}
   256fe:	42bb      	cmp	r3, r7
   25700:	6028      	str	r0, [r5, #0]
   25702:	6069      	str	r1, [r5, #4]
   25704:	461a      	mov	r2, r3
   25706:	f105 0508 	add.w	r5, r5, #8
   2570a:	d1f6      	bne.n	256fa <handle_ns_input+0x17c>
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   2570c:	2520      	movs	r5, #32
		na_src = &ip_hdr->src;
   2570e:	4647      	mov	r7, r8
	if (src_lladdr.len) {
   25710:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   25714:	bb7b      	cbnz	r3, 25776 <handle_ns_input+0x1f8>
	if (!net_ipv6_send_na(net_pkt_iface(pkt), na_src,
   25716:	9500      	str	r5, [sp, #0]
   25718:	4633      	mov	r3, r6
   2571a:	464a      	mov	r2, r9
   2571c:	4639      	mov	r1, r7
   2571e:	6a20      	ldr	r0, [r4, #32]
   25720:	f7ff fd24 	bl	2516c <net_ipv6_send_na>
   25724:	4605      	mov	r5, r0
   25726:	2800      	cmp	r0, #0
   25728:	f47f af42 	bne.w	255b0 <handle_ns_input+0x32>
		net_pkt_unref(pkt);
   2572c:	4620      	mov	r0, r4
   2572e:	f7fe fe06 	bl	2433e <net_pkt_unref>
		return NET_OK;
   25732:	4628      	mov	r0, r5
   25734:	e73d      	b.n	255b2 <handle_ns_input+0x34>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   25736:	4640      	mov	r0, r8
   25738:	f7eb fb20 	bl	10d7c <net_if_ipv6_addr_lookup>
	if (net_ipv6_is_my_addr(&ip_hdr->src)) {
   2573c:	2800      	cmp	r0, #0
   2573e:	f47f af37 	bne.w	255b0 <handle_ns_input+0x32>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   25742:	f240 23ff 	movw	r3, #767	; 0x2ff
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   25746:	69aa      	ldr	r2, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   25748:	429a      	cmp	r2, r3
   2574a:	d109      	bne.n	25760 <handle_ns_input+0x1e2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   2574c:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2574e:	b93b      	cbnz	r3, 25760 <handle_ns_input+0x1e2>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   25750:	6a2b      	ldr	r3, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   25752:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   25756:	d103      	bne.n	25760 <handle_ns_input+0x1e2>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   25758:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2575a:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2575c:	2bff      	cmp	r3, #255	; 0xff
   2575e:	d007      	beq.n	25770 <handle_ns_input+0x1f2>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   25760:	4649      	mov	r1, r9
   25762:	6a20      	ldr	r0, [r4, #32]
   25764:	f7fd fdac 	bl	232c0 <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   25768:	2800      	cmp	r0, #0
   2576a:	f43f af21 	beq.w	255b0 <handle_ns_input+0x32>
		tgt = &ifaddr->address.in6_addr;
   2576e:	1d06      	adds	r6, r0, #4
		na_dst = &ip_hdr->src;
   25770:	46c1      	mov	r9, r8
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   25772:	2560      	movs	r5, #96	; 0x60
   25774:	e7cc      	b.n	25710 <handle_ns_input+0x192>
		if (!net_ipv6_nbr_add(net_pkt_iface(pkt),
   25776:	2300      	movs	r3, #0
   25778:	4641      	mov	r1, r8
   2577a:	6a20      	ldr	r0, [r4, #32]
   2577c:	9300      	str	r3, [sp, #0]
   2577e:	aa0a      	add	r2, sp, #40	; 0x28
   25780:	f7ff febb 	bl	254fa <net_ipv6_nbr_add>
   25784:	2800      	cmp	r0, #0
   25786:	d1c6      	bne.n	25716 <handle_ns_input+0x198>
   25788:	e712      	b.n	255b0 <handle_ns_input+0x32>

0002578a <net_ipv6_start_dad>:
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   2578a:	2301      	movs	r3, #1
{
   2578c:	b507      	push	{r0, r1, r2, lr}
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   2578e:	9301      	str	r3, [sp, #4]
   25790:	2300      	movs	r3, #0
				&ifaddr->address.in6_addr, true);
   25792:	3104      	adds	r1, #4
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   25794:	9100      	str	r1, [sp, #0]
   25796:	461a      	mov	r2, r3
   25798:	4619      	mov	r1, r3
   2579a:	f7ec fc7b 	bl	12094 <net_ipv6_send_ns>
}
   2579e:	b003      	add	sp, #12
   257a0:	f85d fb04 	ldr.w	pc, [sp], #4

000257a4 <net_ipv6_prepare_for_send>:
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   257a4:	2300      	movs	r3, #0
   257a6:	2228      	movs	r2, #40	; 0x28
{
   257a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   257aa:	b087      	sub	sp, #28
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   257ac:	a904      	add	r1, sp, #16
{
   257ae:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   257b0:	e9cd 3204 	strd	r3, r2, [sp, #16]
	struct net_if *iface = NULL;
   257b4:	9303      	str	r3, [sp, #12]
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   257b6:	f7ff f818 	bl	247ea <net_pkt_get_data>
	if (!ip_hdr) {
   257ba:	4607      	mov	r7, r0
   257bc:	b910      	cbnz	r0, 257c4 <net_ipv6_prepare_for_send+0x20>
			return NET_DROP;
   257be:	2002      	movs	r0, #2
}
   257c0:	b007      	add	sp, #28
   257c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((net_pkt_lladdr_dst(pkt)->addr &&
   257c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   257c6:	b10b      	cbz	r3, 257cc <net_ipv6_prepare_for_send+0x28>
		return NET_OK;
   257c8:	2000      	movs	r0, #0
   257ca:	e7f9      	b.n	257c0 <net_ipv6_prepare_for_send+0x1c>
	      !IS_ENABLED(CONFIG_NET_ROUTING))) ||
   257cc:	7e03      	ldrb	r3, [r0, #24]
   257ce:	2bff      	cmp	r3, #255	; 0xff
   257d0:	d0fa      	beq.n	257c8 <net_ipv6_prepare_for_send+0x24>
	    net_if_flag_is_set(net_pkt_iface(pkt),
   257d2:	6a23      	ldr	r3, [r4, #32]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   257d4:	681b      	ldr	r3, [r3, #0]
   257d6:	330c      	adds	r3, #12
   257d8:	e8d3 3faf 	lda	r3, [r3]
	    net_ipv6_is_addr_mcast(&ip_hdr->dst) ||
   257dc:	079b      	lsls	r3, r3, #30
   257de:	d4f3      	bmi.n	257c8 <net_ipv6_prepare_for_send+0x24>
	if (net_if_ipv6_addr_onlink(&iface, &ip_hdr->dst)) {
   257e0:	f100 0518 	add.w	r5, r0, #24
   257e4:	4629      	mov	r1, r5
   257e6:	a803      	add	r0, sp, #12
   257e8:	f7eb fca8 	bl	1113c <net_if_ipv6_addr_onlink>
   257ec:	2800      	cmp	r0, #0
   257ee:	d03d      	beq.n	2586c <net_ipv6_prepare_for_send+0xc8>
		net_pkt_set_iface(pkt, iface);
   257f0:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   257f2:	6223      	str	r3, [r4, #32]
	if (iface) {
   257f4:	b13b      	cbz	r3, 25806 <net_ipv6_prepare_for_send+0x62>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   257f6:	681a      	ldr	r2, [r3, #0]
   257f8:	7d52      	ldrb	r2, [r2, #21]
   257fa:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   257fe:	681b      	ldr	r3, [r3, #0]
   25800:	7d5b      	ldrb	r3, [r3, #21]
   25802:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	if (!iface) {
   25806:	9b03      	ldr	r3, [sp, #12]
   25808:	b983      	cbnz	r3, 2582c <net_ipv6_prepare_for_send+0x88>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   2580a:	4629      	mov	r1, r5
   2580c:	a803      	add	r0, sp, #12
   2580e:	f7eb fc95 	bl	1113c <net_if_ipv6_addr_onlink>
   25812:	2800      	cmp	r0, #0
   25814:	d040      	beq.n	25898 <net_ipv6_prepare_for_send+0xf4>
			net_pkt_set_iface(pkt, iface);
   25816:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   25818:	6223      	str	r3, [r4, #32]
	if (iface) {
   2581a:	b13b      	cbz	r3, 2582c <net_ipv6_prepare_for_send+0x88>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   2581c:	681a      	ldr	r2, [r3, #0]
   2581e:	7d52      	ldrb	r2, [r2, #21]
   25820:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   25824:	681b      	ldr	r3, [r3, #0]
   25826:	7d5b      	ldrb	r3, [r3, #21]
   25828:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	nbr = nbr_lookup(&net_neighbor.table, iface, nexthop);
   2582c:	4629      	mov	r1, r5
   2582e:	9803      	ldr	r0, [sp, #12]
   25830:	f7ec fac8 	bl	11dc4 <nbr_lookup.isra.0>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   25834:	4606      	mov	r6, r0
   25836:	b390      	cbz	r0, 2589e <net_ipv6_prepare_for_send+0xfa>
   25838:	7840      	ldrb	r0, [r0, #1]
   2583a:	28ff      	cmp	r0, #255	; 0xff
   2583c:	d02f      	beq.n	2589e <net_ipv6_prepare_for_send+0xfa>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   2583e:	f7ec fab9 	bl	11db4 <net_nbr_get_lladdr>
		net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
   25842:	1c83      	adds	r3, r0, #2
   25844:	6323      	str	r3, [r4, #48]	; 0x30
		net_pkt_lladdr_dst(pkt)->len = lladdr->len;
   25846:	7843      	ldrb	r3, [r0, #1]
   25848:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   2584c:	68f3      	ldr	r3, [r6, #12]
   2584e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   25852:	2b02      	cmp	r3, #2
   25854:	d1b8      	bne.n	257c8 <net_ipv6_prepare_for_send+0x24>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   25856:	4630      	mov	r0, r6
   25858:	2103      	movs	r1, #3
   2585a:	f7ec fb23 	bl	11ea4 <ipv6_nbr_set_state>
			ipv6_nd_restart_reachable_timer(nbr,
   2585e:	f241 3288 	movw	r2, #5000	; 0x1388
   25862:	2300      	movs	r3, #0
   25864:	4630      	mov	r0, r6
   25866:	f7ec fae3 	bl	11e30 <ipv6_nd_restart_reachable_timer>
   2586a:	e7ad      	b.n	257c8 <net_ipv6_prepare_for_send+0x24>
	route = net_route_lookup(iface, dst);
   2586c:	4629      	mov	r1, r5
   2586e:	f7ec ffc9 	bl	12804 <net_route_lookup>
	if (route) {
   25872:	4606      	mov	r6, r0
   25874:	b140      	cbz	r0, 25888 <net_ipv6_prepare_for_send+0xe4>
		nexthop = net_route_get_nexthop(route);
   25876:	f000 fa55 	bl	25d24 <net_route_get_nexthop>
		if (!nexthop) {
   2587a:	4605      	mov	r5, r0
   2587c:	2800      	cmp	r0, #0
   2587e:	d1c2      	bne.n	25806 <net_ipv6_prepare_for_send+0x62>
			net_route_del(route);
   25880:	4630      	mov	r0, r6
   25882:	f000 fa32 	bl	25cea <net_route_del>
   25886:	e79a      	b.n	257be <net_ipv6_prepare_for_send+0x1a>
		router = net_if_ipv6_router_find_default(NULL, dst);
   25888:	4629      	mov	r1, r5
   2588a:	f7eb fcb5 	bl	111f8 <net_if_ipv6_router_find_default>
		if (!router) {
   2588e:	b188      	cbz	r0, 258b4 <net_ipv6_prepare_for_send+0x110>
		if (!nexthop) {
   25890:	f110 0508 	adds.w	r5, r0, #8
   25894:	d1b7      	bne.n	25806 <net_ipv6_prepare_for_send+0x62>
   25896:	e792      	b.n	257be <net_ipv6_prepare_for_send+0x1a>
			iface = net_pkt_iface(pkt);
   25898:	6a23      	ldr	r3, [r4, #32]
   2589a:	9303      	str	r3, [sp, #12]
   2589c:	e7c6      	b.n	2582c <net_ipv6_prepare_for_send+0x88>
	ret = net_ipv6_send_ns(net_pkt_iface(pkt), pkt,
   2589e:	2300      	movs	r3, #0
   258a0:	e9cd 5300 	strd	r5, r3, [sp]
   258a4:	4621      	mov	r1, r4
   258a6:	6a20      	ldr	r0, [r4, #32]
   258a8:	f107 0208 	add.w	r2, r7, #8
   258ac:	f7ec fbf2 	bl	12094 <net_ipv6_send_ns>
	return NET_CONTINUE;
   258b0:	2001      	movs	r0, #1
   258b2:	e785      	b.n	257c0 <net_ipv6_prepare_for_send+0x1c>
		if (!nexthop) {
   258b4:	2d00      	cmp	r5, #0
   258b6:	d1b9      	bne.n	2582c <net_ipv6_prepare_for_send+0x88>
   258b8:	e781      	b.n	257be <net_ipv6_prepare_for_send+0x1a>

000258ba <net_ipv6_send_rs>:
{
   258ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   258bc:	4607      	mov	r7, r0
   258be:	b087      	sub	sp, #28
	net_ipv6_addr_create_ll_allnodes_mcast(&dst);
   258c0:	a802      	add	r0, sp, #8
   258c2:	f7ff fbf7 	bl	250b4 <net_ipv6_addr_create_ll_allnodes_mcast>
	src = net_if_ipv6_select_src_addr(iface, &dst);
   258c6:	4638      	mov	r0, r7
   258c8:	a902      	add	r1, sp, #8
   258ca:	f7eb fd05 	bl	112d8 <net_if_ipv6_select_src_addr>
   258ce:	4606      	mov	r6, r0
	if (!net_ipv6_is_addr_unspecified(src)) {
   258d0:	f7ff fb50 	bl	24f74 <net_ipv6_is_addr_unspecified>
   258d4:	bb18      	cbnz	r0, 2591e <net_ipv6_send_rs+0x64>
	u8_t total_len = net_if_get_link_addr(iface)->len +
   258d6:	683b      	ldr	r3, [r7, #0]
	return ROUND_UP(total_len, 8U);
   258d8:	7d1d      	ldrb	r5, [r3, #20]
   258da:	3509      	adds	r5, #9
   258dc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
	pkt = net_pkt_alloc_with_buffer(iface,
   258e0:	f640 42cd 	movw	r2, #3277	; 0xccd
   258e4:	2300      	movs	r3, #0
   258e6:	4638      	mov	r0, r7
   258e8:	e9cd 2300 	strd	r2, r3, [sp]
   258ec:	1d29      	adds	r1, r5, #4
   258ee:	233a      	movs	r3, #58	; 0x3a
   258f0:	2202      	movs	r2, #2
   258f2:	f7ec f941 	bl	11b78 <net_pkt_alloc_with_buffer>
	if (!pkt) {
   258f6:	4604      	mov	r4, r0
   258f8:	2800      	cmp	r0, #0
   258fa:	d03a      	beq.n	25972 <net_ipv6_send_rs+0xb8>
	pkt->ipv6_hop_limit = hop_limit;
   258fc:	23ff      	movs	r3, #255	; 0xff
	if (net_ipv6_create(pkt, src, &dst) ||
   258fe:	aa02      	add	r2, sp, #8
   25900:	4631      	mov	r1, r6
   25902:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   25906:	f7ff f907 	bl	24b18 <net_ipv6_create>
   2590a:	4602      	mov	r2, r0
   2590c:	b148      	cbz	r0, 25922 <net_ipv6_send_rs+0x68>
	int ret = -ENOBUFS;
   2590e:	f06f 0668 	mvn.w	r6, #104	; 0x68
	net_pkt_unref(pkt);
   25912:	4620      	mov	r0, r4
   25914:	f7fe fd13 	bl	2433e <net_pkt_unref>
}
   25918:	4630      	mov	r0, r6
   2591a:	b007      	add	sp, #28
   2591c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	u8_t llao_len = 0U;
   2591e:	2500      	movs	r5, #0
   25920:	e7de      	b.n	258e0 <net_ipv6_send_rs+0x26>
	    net_icmpv6_create(pkt, NET_ICMPV6_RS, 0) ||
   25922:	2185      	movs	r1, #133	; 0x85
   25924:	4620      	mov	r0, r4
   25926:	f7fe ffb3 	bl	24890 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, &dst) ||
   2592a:	4601      	mov	r1, r0
   2592c:	2800      	cmp	r0, #0
   2592e:	d1ee      	bne.n	2590e <net_ipv6_send_rs+0x54>
	    net_pkt_memset(pkt, 0, sizeof(struct net_icmpv6_rs_hdr))) {
   25930:	2204      	movs	r2, #4
   25932:	4620      	mov	r0, r4
   25934:	f7fe fe08 	bl	24548 <net_pkt_memset>
	    net_icmpv6_create(pkt, NET_ICMPV6_RS, 0) ||
   25938:	4606      	mov	r6, r0
   2593a:	2800      	cmp	r0, #0
   2593c:	d1e7      	bne.n	2590e <net_ipv6_send_rs+0x54>
	if (llao_len > 0) {
   2593e:	b975      	cbnz	r5, 2595e <net_ipv6_send_rs+0xa4>
	net_pkt_cursor_init(pkt);
   25940:	4620      	mov	r0, r4
   25942:	f7fe fd6c 	bl	2441e <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   25946:	213a      	movs	r1, #58	; 0x3a
   25948:	4620      	mov	r0, r4
   2594a:	f7ff f948 	bl	24bde <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
   2594e:	4620      	mov	r0, r4
   25950:	f7fd fb8d 	bl	2306e <net_send_data>
   25954:	2800      	cmp	r0, #0
   25956:	dadf      	bge.n	25918 <net_ipv6_send_rs+0x5e>
		ret = -EINVAL;
   25958:	f06f 0615 	mvn.w	r6, #21
   2595c:	e7d9      	b.n	25912 <net_ipv6_send_rs+0x58>
	return &iface->if_dev->link_addr;
   2595e:	6839      	ldr	r1, [r7, #0]
		if (!set_llao(pkt, net_if_get_link_addr(iface),
   25960:	2301      	movs	r3, #1
   25962:	462a      	mov	r2, r5
   25964:	4620      	mov	r0, r4
   25966:	3110      	adds	r1, #16
   25968:	f7ff fb4e 	bl	25008 <set_llao>
   2596c:	2800      	cmp	r0, #0
   2596e:	d1e7      	bne.n	25940 <net_ipv6_send_rs+0x86>
   25970:	e7cd      	b.n	2590e <net_ipv6_send_rs+0x54>
		return -ENOMEM;
   25972:	f06f 060b 	mvn.w	r6, #11
   25976:	e7cf      	b.n	25918 <net_ipv6_send_rs+0x5e>

00025978 <net_ipv6_start_rs>:
	return net_ipv6_send_rs(iface);
   25978:	f7ff bf9f 	b.w	258ba <net_ipv6_send_rs>

0002597c <net_pkt_write_be16>:
{
   2597c:	b507      	push	{r0, r1, r2, lr}
	u16_t data_be16 = htons(data);
   2597e:	ba49      	rev16	r1, r1
   25980:	f8ad 1006 	strh.w	r1, [sp, #6]
	return net_pkt_write(pkt, &data_be16, sizeof(u16_t));
   25984:	2202      	movs	r2, #2
   25986:	f10d 0106 	add.w	r1, sp, #6
   2598a:	f7fe ff12 	bl	247b2 <net_pkt_write>
}
   2598e:	b003      	add	sp, #12
   25990:	f85d fb04 	ldr.w	pc, [sp], #4

00025994 <mld_create>:
{
   25994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25998:	461f      	mov	r7, r3
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
   2599a:	2314      	movs	r3, #20
{
   2599c:	b08d      	sub	sp, #52	; 0x34
   2599e:	460d      	mov	r5, r1
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
   259a0:	f10d 081c 	add.w	r8, sp, #28
				net_pkt_get_data(pkt, &mld_access);
   259a4:	a901      	add	r1, sp, #4
{
   259a6:	4606      	mov	r6, r0
   259a8:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
   259aa:	f8cd 8004 	str.w	r8, [sp, #4]
   259ae:	9302      	str	r3, [sp, #8]
				net_pkt_get_data(pkt, &mld_access);
   259b0:	f7fe ff1b 	bl	247ea <net_pkt_get_data>
	if (!mld) {
   259b4:	4604      	mov	r4, r0
   259b6:	b368      	cbz	r0, 25a14 <mld_create+0x80>
	mld->aux_data_len = 0U;
   259b8:	2300      	movs	r3, #0
	net_ipaddr_copy(&mld->mcast_address, addr);
   259ba:	462a      	mov	r2, r5
	mld->aux_data_len = 0U;
   259bc:	7043      	strb	r3, [r0, #1]
	net_ipaddr_copy(&mld->mcast_address, addr);
   259be:	ad03      	add	r5, sp, #12
	mld->num_sources = htons(num_sources);
   259c0:	023b      	lsls	r3, r7, #8
   259c2:	8043      	strh	r3, [r0, #2]
   259c4:	462b      	mov	r3, r5
	mld->record_type = record_type;
   259c6:	f880 9000 	strb.w	r9, [r0]
	net_ipaddr_copy(&mld->mcast_address, addr);
   259ca:	f102 0e10 	add.w	lr, r2, #16
   259ce:	46ac      	mov	ip, r5
   259d0:	6810      	ldr	r0, [r2, #0]
   259d2:	6851      	ldr	r1, [r2, #4]
   259d4:	3208      	adds	r2, #8
   259d6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   259da:	4572      	cmp	r2, lr
   259dc:	4665      	mov	r5, ip
   259de:	d1f6      	bne.n	259ce <mld_create+0x3a>
   259e0:	461a      	mov	r2, r3
   259e2:	3404      	adds	r4, #4
   259e4:	4613      	mov	r3, r2
   259e6:	cb03      	ldmia	r3!, {r0, r1}
   259e8:	4543      	cmp	r3, r8
   259ea:	6020      	str	r0, [r4, #0]
   259ec:	6061      	str	r1, [r4, #4]
   259ee:	461a      	mov	r2, r3
   259f0:	f104 0408 	add.w	r4, r4, #8
   259f4:	d1f6      	bne.n	259e4 <mld_create+0x50>
	if (net_pkt_set_data(pkt, &mld_access)) {
   259f6:	4630      	mov	r0, r6
   259f8:	a901      	add	r1, sp, #4
   259fa:	f7fe ff17 	bl	2482c <net_pkt_set_data>
   259fe:	4604      	mov	r4, r0
   25a00:	b940      	cbnz	r0, 25a14 <mld_create+0x80>
	if (num_sources > 0) {
   25a02:	b14f      	cbz	r7, 25a18 <mld_create+0x84>
				  net_ipv6_unspecified_address()->s6_addr,
   25a04:	f7eb fde4 	bl	115d0 <net_ipv6_unspecified_address>
		if (net_pkt_write(pkt,
   25a08:	2210      	movs	r2, #16
				  net_ipv6_unspecified_address()->s6_addr,
   25a0a:	4601      	mov	r1, r0
		if (net_pkt_write(pkt,
   25a0c:	4630      	mov	r0, r6
   25a0e:	f7fe fed0 	bl	247b2 <net_pkt_write>
   25a12:	b108      	cbz	r0, 25a18 <mld_create+0x84>
			return -ENOBUFS;
   25a14:	f06f 0468 	mvn.w	r4, #104	; 0x68
}
   25a18:	4620      	mov	r0, r4
   25a1a:	b00d      	add	sp, #52	; 0x34
   25a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00025a20 <mld_send>:
{
   25a20:	b510      	push	{r4, lr}
   25a22:	4604      	mov	r4, r0
	net_pkt_cursor_init(pkt);
   25a24:	f7fe fcfb 	bl	2441e <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   25a28:	213a      	movs	r1, #58	; 0x3a
   25a2a:	4620      	mov	r0, r4
   25a2c:	f7ff f8d7 	bl	24bde <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
   25a30:	4620      	mov	r0, r4
   25a32:	f7fd fb1c 	bl	2306e <net_send_data>
   25a36:	2800      	cmp	r0, #0
   25a38:	da05      	bge.n	25a46 <mld_send+0x26>
		net_pkt_unref(pkt);
   25a3a:	4620      	mov	r0, r4
   25a3c:	f7fe fc7f 	bl	2433e <net_pkt_unref>
		return -1;
   25a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   25a44:	bd10      	pop	{r4, pc}
	return 0;
   25a46:	2000      	movs	r0, #0
   25a48:	e7fc      	b.n	25a44 <mld_send+0x24>

00025a4a <mld_create_packet>:
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   25a4a:	f240 23ff 	movw	r3, #767	; 0x2ff
{
   25a4e:	b570      	push	{r4, r5, r6, lr}
   25a50:	b086      	sub	sp, #24
   25a52:	4604      	mov	r4, r0
   25a54:	460d      	mov	r5, r1
   25a56:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   25a5a:	2300      	movs	r3, #0
   25a5c:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   25a60:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   25a64:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   25a68:	f8ad 3010 	strh.w	r3, [sp, #16]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   25a6c:	f8ad 3012 	strh.w	r3, [sp, #18]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   25a70:	f8ad 3014 	strh.w	r3, [sp, #20]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   25a74:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   25a78:	f8ad 3016 	strh.w	r3, [sp, #22]
	pkt->ipv6_hop_limit = hop_limit;
   25a7c:	2601      	movs	r6, #1
	if (net_ipv6_create(pkt, net_if_ipv6_select_src_addr(
   25a7e:	a902      	add	r1, sp, #8
   25a80:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
   25a84:	6a00      	ldr	r0, [r0, #32]
   25a86:	f7eb fc27 	bl	112d8 <net_if_ipv6_select_src_addr>
   25a8a:	aa02      	add	r2, sp, #8
   25a8c:	4601      	mov	r1, r0
   25a8e:	4620      	mov	r0, r4
   25a90:	f7ff f842 	bl	24b18 <net_ipv6_create>
   25a94:	b118      	cbz	r0, 25a9e <mld_create_packet+0x54>
		return -ENOBUFS;
   25a96:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   25a9a:	b006      	add	sp, #24
   25a9c:	bd70      	pop	{r4, r5, r6, pc}
	if (net_pkt_write_u8(pkt, IPPROTO_ICMPV6) ||
   25a9e:	233a      	movs	r3, #58	; 0x3a
	return net_pkt_write(pkt, &data, sizeof(u8_t));
   25aa0:	4632      	mov	r2, r6
   25aa2:	4620      	mov	r0, r4
   25aa4:	f10d 0107 	add.w	r1, sp, #7
   25aa8:	f88d 3007 	strb.w	r3, [sp, #7]
   25aac:	f7fe fe81 	bl	247b2 <net_pkt_write>
   25ab0:	2800      	cmp	r0, #0
   25ab2:	d1f0      	bne.n	25a96 <mld_create_packet+0x4c>
   25ab4:	f88d 0007 	strb.w	r0, [sp, #7]
   25ab8:	4632      	mov	r2, r6
   25aba:	4620      	mov	r0, r4
   25abc:	f10d 0107 	add.w	r1, sp, #7
   25ac0:	f7fe fe77 	bl	247b2 <net_pkt_write>
   25ac4:	2800      	cmp	r0, #0
   25ac6:	d1e6      	bne.n	25a96 <mld_create_packet+0x4c>
	if (net_pkt_write_be16(pkt, 0x0502) ||
   25ac8:	f240 5102 	movw	r1, #1282	; 0x502
   25acc:	4620      	mov	r0, r4
   25ace:	f7ff ff55 	bl	2597c <net_pkt_write_be16>
   25ad2:	4601      	mov	r1, r0
   25ad4:	2800      	cmp	r0, #0
   25ad6:	d1de      	bne.n	25a96 <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0) ||
   25ad8:	4620      	mov	r0, r4
   25ada:	f7ff ff4f 	bl	2597c <net_pkt_write_be16>
	if (net_pkt_write_be16(pkt, 0x0502) ||
   25ade:	4601      	mov	r1, r0
   25ae0:	2800      	cmp	r0, #0
   25ae2:	d1d8      	bne.n	25a96 <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0)) {
   25ae4:	4620      	mov	r0, r4
   25ae6:	f7ff ff49 	bl	2597c <net_pkt_write_be16>
	    net_pkt_write_be16(pkt, 0) ||
   25aea:	4602      	mov	r2, r0
   25aec:	2800      	cmp	r0, #0
   25aee:	d1d2      	bne.n	25a96 <mld_create_packet+0x4c>
	pkt->ipv6_ext_len = len;
   25af0:	2308      	movs	r3, #8
	if (net_icmpv6_create(pkt, NET_ICMPV6_MLDv2, 0) ||
   25af2:	218f      	movs	r1, #143	; 0x8f
   25af4:	4620      	mov	r0, r4
   25af6:	87e3      	strh	r3, [r4, #62]	; 0x3e
   25af8:	f7fe feca 	bl	24890 <net_icmpv6_create>
   25afc:	4601      	mov	r1, r0
   25afe:	2800      	cmp	r0, #0
   25b00:	d1c9      	bne.n	25a96 <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0) ||
   25b02:	4620      	mov	r0, r4
   25b04:	f7ff ff3a 	bl	2597c <net_pkt_write_be16>
	if (net_icmpv6_create(pkt, NET_ICMPV6_MLDv2, 0) ||
   25b08:	2800      	cmp	r0, #0
   25b0a:	d1c4      	bne.n	25a96 <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, count)) {
   25b0c:	4629      	mov	r1, r5
   25b0e:	4620      	mov	r0, r4
   25b10:	f7ff ff34 	bl	2597c <net_pkt_write_be16>
	    net_pkt_write_be16(pkt, 0) ||
   25b14:	2800      	cmp	r0, #0
   25b16:	d1be      	bne.n	25a96 <mld_create_packet+0x4c>
	pkt->ipv6_next_hdr = next_hdr;
   25b18:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
	return 0;
   25b1c:	e7bd      	b.n	25a9a <mld_create_packet+0x50>

00025b1e <mld_send_generic>:
{
   25b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
					PKT_WAIT_TIME);
   25b20:	2300      	movs	r3, #0
{
   25b22:	4616      	mov	r6, r2
					PKT_WAIT_TIME);
   25b24:	f240 6267 	movw	r2, #1639	; 0x667
{
   25b28:	460c      	mov	r4, r1
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
   25b2a:	e9cd 2300 	strd	r2, r3, [sp]
   25b2e:	2130      	movs	r1, #48	; 0x30
   25b30:	233a      	movs	r3, #58	; 0x3a
   25b32:	2202      	movs	r2, #2
   25b34:	f7ec f820 	bl	11b78 <net_pkt_alloc_with_buffer>
	if (!pkt) {
   25b38:	4605      	mov	r5, r0
   25b3a:	b1d0      	cbz	r0, 25b72 <mld_send_generic+0x54>
	if (mld_create_packet(pkt, 1) ||
   25b3c:	2101      	movs	r1, #1
   25b3e:	f7ff ff84 	bl	25a4a <mld_create_packet>
   25b42:	b128      	cbz	r0, 25b50 <mld_send_generic+0x32>
		ret = -ENOBUFS;
   25b44:	f06f 0468 	mvn.w	r4, #104	; 0x68
	net_pkt_unref(pkt);
   25b48:	4628      	mov	r0, r5
   25b4a:	f7fe fbf8 	bl	2433e <net_pkt_unref>
	return ret;
   25b4e:	e00d      	b.n	25b6c <mld_send_generic+0x4e>
	    mld_create(pkt, addr, mode, 1)) {
   25b50:	2301      	movs	r3, #1
   25b52:	4632      	mov	r2, r6
   25b54:	4621      	mov	r1, r4
   25b56:	4628      	mov	r0, r5
   25b58:	f7ff ff1c 	bl	25994 <mld_create>
	if (mld_create_packet(pkt, 1) ||
   25b5c:	2800      	cmp	r0, #0
   25b5e:	d1f1      	bne.n	25b44 <mld_send_generic+0x26>
	ret = mld_send(pkt);
   25b60:	4628      	mov	r0, r5
   25b62:	f7ff ff5d 	bl	25a20 <mld_send>
	if (ret) {
   25b66:	4604      	mov	r4, r0
   25b68:	2800      	cmp	r0, #0
   25b6a:	d1ed      	bne.n	25b48 <mld_send_generic+0x2a>
}
   25b6c:	4620      	mov	r0, r4
   25b6e:	b002      	add	sp, #8
   25b70:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   25b72:	f06f 040b 	mvn.w	r4, #11
   25b76:	e7f9      	b.n	25b6c <mld_send_generic+0x4e>

00025b78 <handle_mld_query>:
{
   25b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(mld_access,
   25b7c:	2600      	movs	r6, #0
   25b7e:	2318      	movs	r3, #24
{
   25b80:	4605      	mov	r5, r0
   25b82:	4688      	mov	r8, r1
   25b84:	4617      	mov	r7, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(mld_access,
   25b86:	e9cd 6302 	strd	r6, r3, [sp, #8]
	u16_t length = net_pkt_get_len(pkt);
   25b8a:	6904      	ldr	r4, [r0, #16]
	while (buf) {
   25b8c:	b964      	cbnz	r4, 25ba8 <handle_mld_query+0x30>
				net_pkt_get_data(pkt, &mld_access);
   25b8e:	4628      	mov	r0, r5
   25b90:	a902      	add	r1, sp, #8
   25b92:	f7fe fe2a 	bl	247ea <net_pkt_get_data>
	u16_t length = net_pkt_get_len(pkt);
   25b96:	b2b6      	uxth	r6, r6
	if (!mld_query) {
   25b98:	4681      	mov	r9, r0
   25b9a:	b948      	cbnz	r0, 25bb0 <handle_mld_query+0x38>
	return NET_DROP;
   25b9c:	f04f 0802 	mov.w	r8, #2
}
   25ba0:	4640      	mov	r0, r8
   25ba2:	b004      	add	sp, #16
   25ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   25ba8:	89a3      	ldrh	r3, [r4, #12]
		buf = buf->frags;
   25baa:	6824      	ldr	r4, [r4, #0]
		bytes += buf->len;
   25bac:	441e      	add	r6, r3
		buf = buf->frags;
   25bae:	e7ed      	b.n	25b8c <handle_mld_query+0x14>
	return net_pkt_skip(pkt, access->size);
   25bb0:	4628      	mov	r0, r5
   25bb2:	9903      	ldr	r1, [sp, #12]
   25bb4:	f7fe fcbd 	bl	24532 <net_pkt_skip>
	mld_query->num_sources = ntohs(mld_query->num_sources);
   25bb8:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   25bbc:	0213      	lsls	r3, r2, #8
   25bbe:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   25bc2:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
	mld_query->num_sources = ntohs(mld_query->num_sources);
   25bc4:	f8a9 2016 	strh.w	r2, [r9, #22]
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   25bc8:	3344      	adds	r3, #68	; 0x44
   25bca:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   25bce:	b29b      	uxth	r3, r3
	if (length < pkt_len || pkt_len > NET_IPV6_MTU ||
   25bd0:	42b3      	cmp	r3, r6
   25bd2:	d8e3      	bhi.n	25b9c <handle_mld_query+0x24>
   25bd4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   25bd8:	d8e0      	bhi.n	25b9c <handle_mld_query+0x24>
   25bda:	f898 3007 	ldrb.w	r3, [r8, #7]
   25bde:	2b01      	cmp	r3, #1
   25be0:	d1dc      	bne.n	25b9c <handle_mld_query+0x24>
	    ip_hdr->hop_limit != 1U || icmp_hdr->code != 0U) {
   25be2:	f897 8001 	ldrb.w	r8, [r7, #1]
   25be6:	f1b8 0f00 	cmp.w	r8, #0
   25bea:	d1d7      	bne.n	25b9c <handle_mld_query+0x24>
	if (!net_ipv6_addr_cmp(&mld_query->mcast_address,
   25bec:	f7eb fcf0 	bl	115d0 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   25bf0:	2210      	movs	r2, #16
   25bf2:	4601      	mov	r1, r0
   25bf4:	f109 0004 	add.w	r0, r9, #4
   25bf8:	f001 fe97 	bl	2792a <memcmp>
   25bfc:	4606      	mov	r6, r0
   25bfe:	2800      	cmp	r0, #0
   25c00:	d1cc      	bne.n	25b9c <handle_mld_query+0x24>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   25c02:	2218      	movs	r2, #24
	send_mld_report(net_pkt_iface(pkt));
   25c04:	6a28      	ldr	r0, [r5, #32]
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   25c06:	f8d0 9004 	ldr.w	r9, [r0, #4]
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   25c0a:	fb02 9304 	mla	r3, r2, r4, r9
   25c0e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   25c12:	07df      	lsls	r7, r3, #31
   25c14:	d502      	bpl.n	25c1c <handle_mld_query+0xa4>
   25c16:	0799      	lsls	r1, r3, #30
		count++;
   25c18:	bf48      	it	mi
   25c1a:	3601      	addmi	r6, #1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   25c1c:	3401      	adds	r4, #1
   25c1e:	2c03      	cmp	r4, #3
   25c20:	d1f3      	bne.n	25c0a <handle_mld_query+0x92>
					count * MLDv2_MCAST_RECORD_LEN,
   25c22:	2114      	movs	r1, #20
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
   25c24:	f240 6267 	movw	r2, #1639	; 0x667
   25c28:	2300      	movs	r3, #0
					count * MLDv2_MCAST_RECORD_LEN,
   25c2a:	4371      	muls	r1, r6
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
   25c2c:	e9cd 2300 	strd	r2, r3, [sp]
   25c30:	310c      	adds	r1, #12
   25c32:	233a      	movs	r3, #58	; 0x3a
   25c34:	2202      	movs	r2, #2
   25c36:	f7eb ff9f 	bl	11b78 <net_pkt_alloc_with_buffer>
	if (!pkt) {
   25c3a:	4607      	mov	r7, r0
   25c3c:	b328      	cbz	r0, 25c8a <handle_mld_query+0x112>
	if (mld_create_packet(pkt, count)) {
   25c3e:	b2b1      	uxth	r1, r6
   25c40:	f7ff ff03 	bl	25a4a <mld_create_packet>
   25c44:	4604      	mov	r4, r0
   25c46:	b9e8      	cbnz	r0, 25c84 <handle_mld_query+0x10c>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   25c48:	f04f 0a18 	mov.w	sl, #24
		if (!mld_create(pkt, &ipv6->mcast[i].address.in6_addr,
   25c4c:	f109 0664 	add.w	r6, r9, #100	; 0x64
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   25c50:	fb0a f104 	mul.w	r1, sl, r4
   25c54:	eb09 0301 	add.w	r3, r9, r1
   25c58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   25c5c:	07da      	lsls	r2, r3, #31
   25c5e:	d407      	bmi.n	25c70 <handle_mld_query+0xf8>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   25c60:	3401      	adds	r4, #1
   25c62:	2c03      	cmp	r4, #3
   25c64:	d1f4      	bne.n	25c50 <handle_mld_query+0xd8>
	if (!mld_send(pkt)) {
   25c66:	4638      	mov	r0, r7
   25c68:	f7ff feda 	bl	25a20 <mld_send>
   25c6c:	b950      	cbnz	r0, 25c84 <handle_mld_query+0x10c>
   25c6e:	e00c      	b.n	25c8a <handle_mld_query+0x112>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   25c70:	079b      	lsls	r3, r3, #30
   25c72:	d5f5      	bpl.n	25c60 <handle_mld_query+0xe8>
		if (!mld_create(pkt, &ipv6->mcast[i].address.in6_addr,
   25c74:	2300      	movs	r3, #0
   25c76:	2202      	movs	r2, #2
   25c78:	4638      	mov	r0, r7
   25c7a:	4431      	add	r1, r6
   25c7c:	f7ff fe8a 	bl	25994 <mld_create>
   25c80:	2800      	cmp	r0, #0
   25c82:	d1ed      	bne.n	25c60 <handle_mld_query+0xe8>
	net_pkt_unref(pkt);
   25c84:	4638      	mov	r0, r7
   25c86:	f7fe fb5a 	bl	2433e <net_pkt_unref>
	net_pkt_unref(pkt);
   25c8a:	4628      	mov	r0, r5
   25c8c:	f7fe fb57 	bl	2433e <net_pkt_unref>
	return NET_OK;
   25c90:	e786      	b.n	25ba0 <handle_mld_query+0x28>

00025c92 <net_ipv6_mld_join>:
{
   25c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25c94:	460e      	mov	r6, r1
   25c96:	9001      	str	r0, [sp, #4]
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   25c98:	a901      	add	r1, sp, #4
   25c9a:	4630      	mov	r0, r6
   25c9c:	f7eb f9f8 	bl	11090 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   25ca0:	4604      	mov	r4, r0
   25ca2:	b128      	cbz	r0, 25cb0 <net_ipv6_mld_join+0x1e>
	return addr->is_joined;
   25ca4:	7d03      	ldrb	r3, [r0, #20]
   25ca6:	079b      	lsls	r3, r3, #30
   25ca8:	d508      	bpl.n	25cbc <net_ipv6_mld_join+0x2a>
		return -EALREADY;
   25caa:	f06f 0577 	mvn.w	r5, #119	; 0x77
   25cae:	e015      	b.n	25cdc <net_ipv6_mld_join+0x4a>
		maddr = net_if_ipv6_maddr_add(iface, addr);
   25cb0:	4631      	mov	r1, r6
   25cb2:	9801      	ldr	r0, [sp, #4]
   25cb4:	f7fd fc7b 	bl	235ae <net_if_ipv6_maddr_add>
		if (!maddr) {
   25cb8:	4604      	mov	r4, r0
   25cba:	b190      	cbz	r0, 25ce2 <net_ipv6_mld_join+0x50>
	ret = mld_send_generic(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   25cbc:	2202      	movs	r2, #2
   25cbe:	4631      	mov	r1, r6
   25cc0:	9801      	ldr	r0, [sp, #4]
   25cc2:	f7ff ff2c 	bl	25b1e <mld_send_generic>
	if (ret < 0) {
   25cc6:	1e05      	subs	r5, r0, #0
   25cc8:	db08      	blt.n	25cdc <net_ipv6_mld_join+0x4a>
	addr->is_joined = true;
   25cca:	7d23      	ldrb	r3, [r4, #20]
	net_if_mcast_monitor(iface, addr, true);
   25ccc:	2201      	movs	r2, #1
   25cce:	f043 0302 	orr.w	r3, r3, #2
   25cd2:	4631      	mov	r1, r6
   25cd4:	9801      	ldr	r0, [sp, #4]
   25cd6:	7523      	strb	r3, [r4, #20]
   25cd8:	f7eb fa18 	bl	1110c <net_if_mcast_monitor>
}
   25cdc:	4628      	mov	r0, r5
   25cde:	b002      	add	sp, #8
   25ce0:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   25ce2:	f06f 050b 	mvn.w	r5, #11
   25ce6:	e7f9      	b.n	25cdc <net_ipv6_mld_join+0x4a>

00025ce8 <net_route_entry_remove>:
   25ce8:	4770      	bx	lr

00025cea <net_route_del>:
{
   25cea:	b538      	push	{r3, r4, r5, lr}
	if (!route) {
   25cec:	4604      	mov	r4, r0
   25cee:	b198      	cbz	r0, 25d18 <net_route_del+0x2e>
	sys_slist_find_and_remove(&routes, &route->node);
   25cf0:	f7ec fd54 	bl	1279c <sys_slist_find_and_remove.constprop.0>
	nbr = net_route_get_nbr(route);
   25cf4:	4620      	mov	r0, r4
   25cf6:	f7ec fd6f 	bl	127d8 <net_route_get_nbr>
	if (!nbr) {
   25cfa:	4605      	mov	r5, r0
   25cfc:	b178      	cbz	r0, 25d1e <net_route_del+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   25cfe:	6864      	ldr	r4, [r4, #4]
   25d00:	b924      	cbnz	r4, 25d0c <net_route_del+0x22>
	net_nbr_unref(nbr);
   25d02:	4628      	mov	r0, r5
   25d04:	f7fe fed8 	bl	24ab8 <net_nbr_unref>
	return 0;
   25d08:	2000      	movs	r0, #0
}
   25d0a:	bd38      	pop	{r3, r4, r5, pc}
		if (!nexthop_route->nbr) {
   25d0c:	6860      	ldr	r0, [r4, #4]
   25d0e:	b108      	cbz	r0, 25d14 <net_route_del+0x2a>
	net_nbr_unref(nbr);
   25d10:	f7fe fed2 	bl	24ab8 <net_nbr_unref>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25d14:	6824      	ldr	r4, [r4, #0]
	return node->next;
   25d16:	e7f3      	b.n	25d00 <net_route_del+0x16>
		return -EINVAL;
   25d18:	f06f 0015 	mvn.w	r0, #21
   25d1c:	e7f5      	b.n	25d0a <net_route_del+0x20>
		return -ENOENT;
   25d1e:	f06f 0001 	mvn.w	r0, #1
   25d22:	e7f2      	b.n	25d0a <net_route_del+0x20>

00025d24 <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   25d24:	b158      	cbz	r0, 25d3e <net_route_get_nexthop+0x1a>
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   25d26:	6840      	ldr	r0, [r0, #4]
   25d28:	b148      	cbz	r0, 25d3e <net_route_get_nexthop+0x1a>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   25d2a:	6843      	ldr	r3, [r0, #4]
   25d2c:	785a      	ldrb	r2, [r3, #1]
   25d2e:	2aff      	cmp	r2, #255	; 0xff
   25d30:	d003      	beq.n	25d3a <net_route_get_nexthop+0x16>
			continue;
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
   25d32:	68db      	ldr	r3, [r3, #12]
		if (ipv6_nbr_data) {
   25d34:	b10b      	cbz	r3, 25d3a <net_route_get_nexthop+0x16>
			addr = &ipv6_nbr_data->addr;
   25d36:	1d18      	adds	r0, r3, #4
			NET_ASSERT(addr);

			return addr;
   25d38:	4770      	bx	lr
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25d3a:	6800      	ldr	r0, [r0, #0]
	return node->next;
   25d3c:	e7f4      	b.n	25d28 <net_route_get_nexthop+0x4>
			NET_ERR("could not get neighbor data from next hop");
		}
	}

	return NULL;
}
   25d3e:	4770      	bx	lr

00025d40 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   25d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25d42:	4607      	mov	r7, r0
   25d44:	460d      	mov	r5, r1
   25d46:	4616      	mov	r6, r2
   25d48:	461c      	mov	r4, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   25d4a:	f7ff fa0d 	bl	25168 <net_ipv6_nbr_lookup>
   25d4e:	b120      	cbz	r0, 25d5a <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   25d50:	2300      	movs	r3, #0
   25d52:	6033      	str	r3, [r6, #0]
		*nexthop = dst;
   25d54:	6025      	str	r5, [r4, #0]
			return false;
		}

		*nexthop = &router->address.in6_addr;

		return true;
   25d56:	2001      	movs	r0, #1
   25d58:	e00b      	b.n	25d72 <net_route_get_info+0x32>
	*route = net_route_lookup(iface, dst);
   25d5a:	4629      	mov	r1, r5
   25d5c:	4638      	mov	r0, r7
   25d5e:	f7ec fd51 	bl	12804 <net_route_lookup>
   25d62:	6030      	str	r0, [r6, #0]
	if (*route) {
   25d64:	b130      	cbz	r0, 25d74 <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   25d66:	f7ff ffdd 	bl	25d24 <net_route_get_nexthop>
   25d6a:	6020      	str	r0, [r4, #0]
		if (!*nexthop) {
   25d6c:	3800      	subs	r0, #0
   25d6e:	bf18      	it	ne
   25d70:	2001      	movne	r0, #1
	}

	return false;
}
   25d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   25d74:	4629      	mov	r1, r5
   25d76:	f7eb fa3f 	bl	111f8 <net_if_ipv6_router_find_default>
		if (!router) {
   25d7a:	2800      	cmp	r0, #0
   25d7c:	d0f9      	beq.n	25d72 <net_route_get_info+0x32>
		*nexthop = &router->address.in6_addr;
   25d7e:	3008      	adds	r0, #8
   25d80:	6020      	str	r0, [r4, #0]
   25d82:	e7e8      	b.n	25d56 <net_route_get_info+0x16>

00025d84 <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   25d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25d86:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(NULL, nexthop);
   25d88:	2000      	movs	r0, #0
   25d8a:	f7ff f9ed 	bl	25168 <net_ipv6_nbr_lookup>
	if (!nbr) {
   25d8e:	4606      	mov	r6, r0
   25d90:	2800      	cmp	r0, #0
   25d92:	d038      	beq.n	25e06 <net_route_packet+0x82>
		NET_DBG("Cannot find %s neighbor",
			log_strdup(net_sprint_ipv6_addr(nexthop)));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   25d94:	7840      	ldrb	r0, [r0, #1]
   25d96:	f7ec f80d 	bl	11db4 <net_nbr_get_lladdr>
	if (!lladdr) {
   25d9a:	4605      	mov	r5, r0
   25d9c:	2800      	cmp	r0, #0
   25d9e:	d035      	beq.n	25e0c <net_route_packet+0x88>
	 * link layer. This is done at runtime because we can have multiple
	 * network technologies enabled.
	 */
	if (net_if_l2(net_pkt_iface(pkt)) != &NET_L2_GET_NAME(DUMMY)) {
#endif
		if (!net_pkt_lladdr_src(pkt)->addr) {
   25da0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   25da2:	b910      	cbnz	r0, 25daa <net_route_packet+0x26>
			NET_DBG("Link layer source address not set");
			return -EINVAL;
   25da4:	f06f 0015 	mvn.w	r0, #21
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;

	net_pkt_set_iface(pkt, nbr->iface);

	return net_send_data(pkt);
}
   25da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!memcmp(net_pkt_lladdr_src(pkt)->addr, lladdr->addr,
   25daa:	1caf      	adds	r7, r5, #2
   25dac:	4639      	mov	r1, r7
   25dae:	786a      	ldrb	r2, [r5, #1]
   25db0:	f001 fdbb 	bl	2792a <memcmp>
   25db4:	2800      	cmp	r0, #0
   25db6:	d0f5      	beq.n	25da4 <net_route_packet+0x20>
	pkt->forwarding = forward;
   25db8:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   25dbc:	f043 0301 	orr.w	r3, r3, #1
   25dc0:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return net_if_get_link_addr(pkt->iface);
   25dc4:	6a23      	ldr	r3, [r4, #32]
   25dc6:	681b      	ldr	r3, [r3, #0]
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   25dc8:	691a      	ldr	r2, [r3, #16]
   25dca:	62a2      	str	r2, [r4, #40]	; 0x28
	net_pkt_lladdr_src(pkt)->type = net_pkt_lladdr_if(pkt)->type;
   25dcc:	7d5a      	ldrb	r2, [r3, #21]
   25dce:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   25dd2:	7d1b      	ldrb	r3, [r3, #20]
	net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
   25dd4:	6327      	str	r7, [r4, #48]	; 0x30
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   25dd6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->type = lladdr->type;
   25dda:	782b      	ldrb	r3, [r5, #0]
   25ddc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;
   25de0:	786b      	ldrb	r3, [r5, #1]
   25de2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	net_pkt_set_iface(pkt, nbr->iface);
   25de6:	68b3      	ldr	r3, [r6, #8]
	pkt->iface = iface;
   25de8:	6223      	str	r3, [r4, #32]
	if (iface) {
   25dea:	b13b      	cbz	r3, 25dfc <net_route_packet+0x78>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   25dec:	681a      	ldr	r2, [r3, #0]
   25dee:	7d52      	ldrb	r2, [r2, #21]
   25df0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   25df4:	681b      	ldr	r3, [r3, #0]
   25df6:	7d5b      	ldrb	r3, [r3, #21]
   25df8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return net_send_data(pkt);
   25dfc:	4620      	mov	r0, r4
}
   25dfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return net_send_data(pkt);
   25e02:	f7fd b934 	b.w	2306e <net_send_data>
		return -ENOENT;
   25e06:	f06f 0001 	mvn.w	r0, #1
   25e0a:	e7cd      	b.n	25da8 <net_route_packet+0x24>
		return -ESRCH;
   25e0c:	f06f 0002 	mvn.w	r0, #2
   25e10:	e7ca      	b.n	25da8 <net_route_packet+0x24>

00025e12 <net_route_packet_if>:
	pkt->iface = iface;
   25e12:	6201      	str	r1, [r0, #32]
	if (iface) {
   25e14:	b139      	cbz	r1, 25e26 <net_route_packet_if+0x14>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   25e16:	680b      	ldr	r3, [r1, #0]
   25e18:	7d5b      	ldrb	r3, [r3, #21]
   25e1a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   25e1e:	680b      	ldr	r3, [r1, #0]
   25e20:	7d5b      	ldrb	r3, [r3, #21]
   25e22:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
	pkt->forwarding = forward;
   25e26:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   25e2a:	f043 0301 	orr.w	r3, r3, #1
   25e2e:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
	return net_if_get_link_addr(pkt->iface);
   25e32:	680b      	ldr	r3, [r1, #0]
	net_pkt_set_orig_iface(pkt, net_pkt_iface(pkt));
	net_pkt_set_iface(pkt, iface);

	net_pkt_set_forwarding(pkt, true);

	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   25e34:	691a      	ldr	r2, [r3, #16]
   25e36:	6282      	str	r2, [r0, #40]	; 0x28
	net_pkt_lladdr_src(pkt)->type = net_pkt_lladdr_if(pkt)->type;
   25e38:	7d5a      	ldrb	r2, [r3, #21]
   25e3a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   25e3e:	7d1b      	ldrb	r3, [r3, #20]
   25e40:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

	return net_send_data(pkt);
   25e44:	f7fd b913 	b.w	2306e <net_send_data>

00025e48 <net_route_init>:
	NET_DBG("Allocated %d routing entries (%zu bytes)",
		CONFIG_NET_MAX_ROUTES, sizeof(net_route_entries_pool));

	NET_DBG("Allocated %d nexthop entries (%zu bytes)",
		CONFIG_NET_MAX_NEXTHOPS, sizeof(net_route_nexthop_pool));
}
   25e48:	4770      	bx	lr

00025e4a <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25e4a:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25e4c:	b942      	cbnz	r2, 25e60 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25e4e:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25e50:	b933      	cbnz	r3, 25e60 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25e52:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25e54:	b922      	cbnz	r2, 25e60 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   25e56:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25e58:	fab0 f080 	clz	r0, r0
   25e5c:	0940      	lsrs	r0, r0, #5
   25e5e:	4770      	bx	lr
   25e60:	2000      	movs	r0, #0
   25e62:	4770      	bx	lr

00025e64 <net_udp_create>:
#include "net_stats.h"

#define PKT_WAIT_TIME K_SECONDS(1)

int net_udp_create(struct net_pkt *pkt, u16_t src_port, u16_t dst_port)
{
   25e64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   25e66:	2308      	movs	r3, #8
{
   25e68:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   25e6a:	eb0d 0103 	add.w	r1, sp, r3
{
   25e6e:	4604      	mov	r4, r0
   25e70:	4615      	mov	r5, r2
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   25e72:	f8cd d008 	str.w	sp, [sp, #8]
   25e76:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   25e78:	f7fe fcb7 	bl	247ea <net_pkt_get_data>
	if (!udp_hdr) {
   25e7c:	b160      	cbz	r0, 25e98 <net_udp_create+0x34>
		return -ENOBUFS;
	}

	udp_hdr->src_port = src_port;
	udp_hdr->dst_port = dst_port;
	udp_hdr->len      = 0U;
   25e7e:	2300      	movs	r3, #0
	udp_hdr->src_port = src_port;
   25e80:	8006      	strh	r6, [r0, #0]
	udp_hdr->dst_port = dst_port;
   25e82:	8045      	strh	r5, [r0, #2]
	udp_hdr->len      = 0U;
   25e84:	7103      	strb	r3, [r0, #4]
   25e86:	7143      	strb	r3, [r0, #5]
	udp_hdr->chksum   = 0U;
   25e88:	7183      	strb	r3, [r0, #6]
   25e8a:	71c3      	strb	r3, [r0, #7]

	return net_pkt_set_data(pkt, &udp_access);
   25e8c:	a902      	add	r1, sp, #8
   25e8e:	4620      	mov	r0, r4
   25e90:	f7fe fccc 	bl	2482c <net_pkt_set_data>
}
   25e94:	b004      	add	sp, #16
   25e96:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   25e98:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25e9c:	e7fa      	b.n	25e94 <net_udp_create+0x30>

00025e9e <net_udp_finalize>:

int net_udp_finalize(struct net_pkt *pkt)
{
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   25e9e:	2308      	movs	r3, #8
{
   25ea0:	b530      	push	{r4, r5, lr}
   25ea2:	b085      	sub	sp, #20
	struct net_udp_hdr *udp_hdr;
	u16_t length = 0;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   25ea4:	eb0d 0103 	add.w	r1, sp, r3
{
   25ea8:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   25eaa:	f8cd d008 	str.w	sp, [sp, #8]
   25eae:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   25eb0:	f7fe fc9b 	bl	247ea <net_pkt_get_data>
	if (!udp_hdr) {
   25eb4:	4605      	mov	r5, r0
   25eb6:	b308      	cbz	r0, 25efc <net_udp_finalize+0x5e>
	size_t bytes = 0;
   25eb8:	2300      	movs	r3, #0
		return -ENOBUFS;
	}

	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
   25eba:	6922      	ldr	r2, [r4, #16]
	while (buf) {
   25ebc:	b9d2      	cbnz	r2, 25ef4 <net_udp_finalize+0x56>
   25ebe:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   25ec2:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
		 net_pkt_ip_opts_len(pkt);

	udp_hdr->len = htons(length);

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   25ec4:	6a20      	ldr	r0, [r4, #32]
	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
   25ec6:	440a      	add	r2, r1
   25ec8:	1a9b      	subs	r3, r3, r2
	udp_hdr->len = htons(length);
   25eca:	ba5b      	rev16	r3, r3
   25ecc:	80ab      	strh	r3, [r5, #4]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   25ece:	f7fd fd83 	bl	239d8 <net_if_need_calc_tx_checksum>
   25ed2:	b148      	cbz	r0, 25ee8 <net_udp_finalize+0x4a>
	u16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);
   25ed4:	2111      	movs	r1, #17
   25ed6:	4620      	mov	r0, r4
   25ed8:	f7fd fe07 	bl	23aea <net_calc_chksum>
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
   25edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25ee0:	2800      	cmp	r0, #0
   25ee2:	bf08      	it	eq
   25ee4:	4618      	moveq	r0, r3
   25ee6:	80e8      	strh	r0, [r5, #6]
	}

	return net_pkt_set_data(pkt, &udp_access);
   25ee8:	4620      	mov	r0, r4
   25eea:	a902      	add	r1, sp, #8
   25eec:	f7fe fc9e 	bl	2482c <net_pkt_set_data>
}
   25ef0:	b005      	add	sp, #20
   25ef2:	bd30      	pop	{r4, r5, pc}
		bytes += buf->len;
   25ef4:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   25ef6:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   25ef8:	440b      	add	r3, r1
		buf = buf->frags;
   25efa:	e7df      	b.n	25ebc <net_udp_finalize+0x1e>
		return -ENOBUFS;
   25efc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25f00:	e7f6      	b.n	25ef0 <net_udp_finalize+0x52>

00025f02 <net_udp_input>:
	return net_conn_unregister(handle);
}

struct net_udp_hdr *net_udp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *udp_access)
{
   25f02:	b570      	push	{r4, r5, r6, lr}
   25f04:	4604      	mov	r4, r0
   25f06:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, udp_access);
   25f08:	f7fe fc6f 	bl	247ea <net_pkt_get_data>
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
   25f0c:	4605      	mov	r5, r0
   25f0e:	b1f0      	cbz	r0, 25f4e <net_udp_input+0x4c>
   25f10:	4631      	mov	r1, r6
   25f12:	4620      	mov	r0, r4
   25f14:	f7fe fc8a 	bl	2482c <net_pkt_set_data>
   25f18:	4603      	mov	r3, r0
   25f1a:	b9c0      	cbnz	r0, 25f4e <net_udp_input+0x4c>
		NET_DBG("DROP: corrupted header");
		goto drop;
	}

	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   25f1c:	88a9      	ldrh	r1, [r5, #4]
   25f1e:	020a      	lsls	r2, r1, #8
   25f20:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   25f24:	6921      	ldr	r1, [r4, #16]
   25f26:	b292      	uxth	r2, r2
	while (buf) {
   25f28:	b9a1      	cbnz	r1, 25f54 <net_udp_input+0x52>
				    net_pkt_ip_hdr_len(pkt) -
   25f2a:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
				    net_pkt_ip_opts_len(pkt))) {
   25f2e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
				    net_pkt_ip_hdr_len(pkt) -
   25f30:	4408      	add	r0, r1
   25f32:	1a1b      	subs	r3, r3, r0
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   25f34:	429a      	cmp	r2, r3
   25f36:	d10a      	bne.n	25f4e <net_udp_input+0x4c>
		NET_DBG("DROP: Invalid hdr length");
		goto drop;
	}

	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
   25f38:	6a20      	ldr	r0, [r4, #32]
   25f3a:	f7fd fd4f 	bl	239dc <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   25f3e:	b138      	cbz	r0, 25f50 <net_udp_input+0x4e>
		if (!udp_hdr->chksum) {
   25f40:	88eb      	ldrh	r3, [r5, #6]
   25f42:	b123      	cbz	r3, 25f4e <net_udp_input+0x4c>
	return net_calc_chksum(pkt, IPPROTO_UDP);
   25f44:	2111      	movs	r1, #17
   25f46:	4620      	mov	r0, r4
   25f48:	f7fd fdcf 	bl	23aea <net_calc_chksum>
			}

			goto drop;
		}

		if (net_calc_verify_chksum_udp(pkt) != 0U) {
   25f4c:	b100      	cbz	r0, 25f50 <net_udp_input+0x4e>
	}
out:
	return udp_hdr;
drop:
	net_stats_update_udp_chkerr(net_pkt_iface(pkt));
	return NULL;
   25f4e:	2500      	movs	r5, #0
}
   25f50:	4628      	mov	r0, r5
   25f52:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   25f54:	8988      	ldrh	r0, [r1, #12]
		buf = buf->frags;
   25f56:	6809      	ldr	r1, [r1, #0]
		bytes += buf->len;
   25f58:	4403      	add	r3, r0
		buf = buf->frags;
   25f5a:	e7e5      	b.n	25f28 <net_udp_input+0x26>

00025f5c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f5c:	6843      	ldr	r3, [r0, #4]
}
   25f5e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f60:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   25f62:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   25f64:	600b      	str	r3, [r1, #0]
}
   25f66:	4770      	bx	lr

00025f68 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f68:	6843      	ldr	r3, [r0, #4]
   25f6a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   25f6c:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   25f6e:	4042      	eors	r2, r0
   25f70:	400a      	ands	r2, r1
   25f72:	4042      	eors	r2, r0
    p_reg->OUT = value;
   25f74:	605a      	str	r2, [r3, #4]
}
   25f76:	2000      	movs	r0, #0
   25f78:	4770      	bx	lr

00025f7a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f7a:	6843      	ldr	r3, [r0, #4]
}
   25f7c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f7e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   25f80:	6099      	str	r1, [r3, #8]
}
   25f82:	4770      	bx	lr

00025f84 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f84:	6843      	ldr	r3, [r0, #4]
}
   25f86:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f88:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   25f8a:	60d9      	str	r1, [r3, #12]
}
   25f8c:	4770      	bx	lr

00025f8e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f8e:	6843      	ldr	r3, [r0, #4]
}
   25f90:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f92:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   25f94:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   25f96:	4059      	eors	r1, r3
    p_reg->OUT = value;
   25f98:	6051      	str	r1, [r2, #4]
}
   25f9a:	4770      	bx	lr

00025f9c <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25f9c:	68c3      	ldr	r3, [r0, #12]
{
   25f9e:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   25fa0:	6858      	ldr	r0, [r3, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   25fa2:	b158      	cbz	r0, 25fbc <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25fa4:	2400      	movs	r4, #0
   25fa6:	4281      	cmp	r1, r0
   25fa8:	d113      	bne.n	25fd2 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   25faa:	6808      	ldr	r0, [r1, #0]
   25fac:	b95c      	cbnz	r4, 25fc6 <gpio_nrfx_manage_callback+0x2a>
   25fae:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   25fb0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   25fb2:	42a1      	cmp	r1, r4
   25fb4:	d100      	bne.n	25fb8 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   25fb6:	6098      	str	r0, [r3, #8]
	parent->next = child;
   25fb8:	2000      	movs	r0, #0
   25fba:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   25fbc:	b972      	cbnz	r2, 25fdc <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   25fbe:	2000      	movs	r0, #0
}
   25fc0:	bd30      	pop	{r4, r5, pc}
   25fc2:	4628      	mov	r0, r5
   25fc4:	e7ef      	b.n	25fa6 <gpio_nrfx_manage_callback+0xa>
   25fc6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   25fc8:	6898      	ldr	r0, [r3, #8]
   25fca:	4281      	cmp	r1, r0
	list->tail = node;
   25fcc:	bf08      	it	eq
   25fce:	609c      	streq	r4, [r3, #8]
}
   25fd0:	e7f2      	b.n	25fb8 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25fd2:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25fd4:	4604      	mov	r4, r0
   25fd6:	2d00      	cmp	r5, #0
   25fd8:	d1f3      	bne.n	25fc2 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   25fda:	b13a      	cbz	r2, 25fec <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   25fdc:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   25fde:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   25fe0:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   25fe2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25fe4:	2800      	cmp	r0, #0
   25fe6:	d1ea      	bne.n	25fbe <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   25fe8:	6099      	str	r1, [r3, #8]
}
   25fea:	e7e9      	b.n	25fc0 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   25fec:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25ff0:	e7e6      	b.n	25fc0 <gpio_nrfx_manage_callback+0x24>

00025ff2 <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   25ff2:	2201      	movs	r2, #1
{
   25ff4:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   25ff6:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   25ff8:	408a      	lsls	r2, r1
   25ffa:	6923      	ldr	r3, [r4, #16]
   25ffc:	ea23 0302 	bic.w	r3, r3, r2
   26000:	6123      	str	r3, [r4, #16]
}
   26002:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   26006:	f7ec bf3d 	b.w	12e84 <gpiote_pin_int_cfg>

0002600a <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   2600a:	2201      	movs	r2, #1
{
   2600c:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   2600e:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   26010:	408a      	lsls	r2, r1
   26012:	6923      	ldr	r3, [r4, #16]
   26014:	4313      	orrs	r3, r2
   26016:	6123      	str	r3, [r4, #16]
}
   26018:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   2601c:	f7ec bf32 	b.w	12e84 <gpiote_pin_int_cfg>

00026020 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   26020:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   26022:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   26024:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   26026:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   26028:	7b91      	ldrb	r1, [r2, #14]
   2602a:	b159      	cbz	r1, 26044 <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2602c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   26030:	b141      	cbz	r1, 26044 <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   26032:	f44f 7180 	mov.w	r1, #256	; 0x100
   26036:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2603a:	2101      	movs	r1, #1
   2603c:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   2603e:	2300      	movs	r3, #0
   26040:	7393      	strb	r3, [r2, #14]
		return;
   26042:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26044:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   26048:	b111      	cbz	r1, 26050 <uarte_nrfx_isr_int+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2604a:	2100      	movs	r1, #0
   2604c:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   26050:	6813      	ldr	r3, [r2, #0]
   26052:	b10b      	cbz	r3, 26058 <uarte_nrfx_isr_int+0x38>
		data->int_driven->cb(data->int_driven->cb_data);
   26054:	6850      	ldr	r0, [r2, #4]
   26056:	4718      	bx	r3
}
   26058:	4770      	bx	lr

0002605a <uarte_nrfx_config_get>:
{
   2605a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2605c:	68c2      	ldr	r2, [r0, #12]
   2605e:	e892 0003 	ldmia.w	r2, {r0, r1}
   26062:	e883 0003 	stmia.w	r3, {r0, r1}
}
   26066:	2000      	movs	r0, #0
   26068:	4770      	bx	lr

0002606a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2606a:	6843      	ldr	r3, [r0, #4]
   2606c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2606e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   26072:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   26076:	4770      	bx	lr

00026078 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   26078:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2607a:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2607c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2607e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26082:	b138      	cbz	r0, 26094 <uarte_nrfx_poll_in+0x1c>
	*c = data->rx_data;
   26084:	7c12      	ldrb	r2, [r2, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26086:	2000      	movs	r0, #0
   26088:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2608a:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2608c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26090:	601a      	str	r2, [r3, #0]
	return 0;
   26092:	4770      	bx	lr
		return -1;
   26094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   26098:	4770      	bx	lr

0002609a <uarte_nrfx_fifo_fill>:
	return config->uarte_regs;
   2609a:	6843      	ldr	r3, [r0, #4]
{
   2609c:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2609e:	681c      	ldr	r4, [r3, #0]
{
   260a0:	4605      	mov	r5, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   260a2:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   260a6:	b190      	cbz	r0, 260ce <uarte_nrfx_fifo_fill+0x34>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   260a8:	68ed      	ldr	r5, [r5, #12]
	if (len > data->int_driven->tx_buff_size) {
   260aa:	68ab      	ldr	r3, [r5, #8]
   260ac:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   260ae:	2300      	movs	r3, #0
   260b0:	4290      	cmp	r0, r2
   260b2:	bfa8      	it	ge
   260b4:	4610      	movge	r0, r2
   260b6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   260ba:	68aa      	ldr	r2, [r5, #8]
   260bc:	4283      	cmp	r3, r0
   260be:	6892      	ldr	r2, [r2, #8]
   260c0:	db06      	blt.n	260d0 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   260c2:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   260c4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   260c8:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   260cc:	60a3      	str	r3, [r4, #8]
}
   260ce:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   260d0:	5cce      	ldrb	r6, [r1, r3]
   260d2:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   260d4:	3301      	adds	r3, #1
   260d6:	e7f0      	b.n	260ba <uarte_nrfx_fifo_fill+0x20>

000260d8 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   260d8:	6843      	ldr	r3, [r0, #4]
   260da:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   260dc:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   260e0:	b143      	cbz	r3, 260f4 <uarte_nrfx_fifo_read+0x1c>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   260e2:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   260e4:	2000      	movs	r0, #0
   260e6:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   260ea:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   260ec:	7c1b      	ldrb	r3, [r3, #16]
   260ee:	700b      	strb	r3, [r1, #0]
   260f0:	6010      	str	r0, [r2, #0]
}
   260f2:	4770      	bx	lr
	int num_rx = 0;
   260f4:	4618      	mov	r0, r3
}
   260f6:	4770      	bx	lr

000260f8 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   260f8:	2100      	movs	r1, #0
   260fa:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   260fc:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   260fe:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   26100:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   26102:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   26104:	f44f 7280 	mov.w	r2, #256	; 0x100
   26108:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2610c:	4770      	bx	lr

0002610e <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2610e:	2201      	movs	r2, #1
   26110:	68c3      	ldr	r3, [r0, #12]
   26112:	689b      	ldr	r3, [r3, #8]
   26114:	739a      	strb	r2, [r3, #14]
}
   26116:	4770      	bx	lr

00026118 <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   26118:	68c3      	ldr	r3, [r0, #12]
   2611a:	689b      	ldr	r3, [r3, #8]
   2611c:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   2611e:	b94b      	cbnz	r3, 26134 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   26120:	6843      	ldr	r3, [r0, #4]
   26122:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26124:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   26128:	b128      	cbz	r0, 26136 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   2612a:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   2612e:	f3c0 2000 	ubfx	r0, r0, #8, #1
   26132:	4770      	bx	lr
   26134:	2000      	movs	r0, #0
}
   26136:	4770      	bx	lr

00026138 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   26138:	6843      	ldr	r3, [r0, #4]
   2613a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2613c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   26140:	3800      	subs	r0, #0
   26142:	bf18      	it	ne
   26144:	2001      	movne	r0, #1
   26146:	4770      	bx	lr

00026148 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   26148:	2210      	movs	r2, #16
	return config->uarte_regs;
   2614a:	6843      	ldr	r3, [r0, #4]
   2614c:	681b      	ldr	r3, [r3, #0]
   2614e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   26152:	4770      	bx	lr

00026154 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   26154:	2210      	movs	r2, #16
	return config->uarte_regs;
   26156:	6843      	ldr	r3, [r0, #4]
   26158:	681b      	ldr	r3, [r3, #0]
   2615a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2615e:	4770      	bx	lr

00026160 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   26160:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   26164:	6843      	ldr	r3, [r0, #4]
   26166:	681b      	ldr	r3, [r3, #0]
   26168:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2616c:	4770      	bx	lr

0002616e <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   2616e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   26172:	6843      	ldr	r3, [r0, #4]
   26174:	681b      	ldr	r3, [r3, #0]
   26176:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2617a:	4770      	bx	lr

0002617c <uarte_nrfx_irq_update>:
}
   2617c:	2001      	movs	r0, #1
   2617e:	4770      	bx	lr

00026180 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   26180:	68c3      	ldr	r3, [r0, #12]
   26182:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   26184:	e9c3 1200 	strd	r1, r2, [r3]
}
   26188:	4770      	bx	lr

0002618a <uarte_nrfx_irq_is_pending>:
{
   2618a:	b508      	push	{r3, lr}
	return config->uarte_regs;
   2618c:	6843      	ldr	r3, [r0, #4]
{
   2618e:	4602      	mov	r2, r0
	return config->uarte_regs;
   26190:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   26192:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   26196:	05db      	lsls	r3, r3, #23
   26198:	d405      	bmi.n	261a6 <uarte_nrfx_irq_is_pending+0x1c>
   2619a:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   2619e:	f010 0010 	ands.w	r0, r0, #16
   261a2:	d106      	bne.n	261b2 <uarte_nrfx_irq_is_pending+0x28>
}
   261a4:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   261a6:	f7ff ffb7 	bl	26118 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   261aa:	2800      	cmp	r0, #0
   261ac:	d0f5      	beq.n	2619a <uarte_nrfx_irq_is_pending+0x10>
		||
   261ae:	2001      	movs	r0, #1
   261b0:	e7f8      	b.n	261a4 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   261b2:	4610      	mov	r0, r2
   261b4:	f7ff ffc0 	bl	26138 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   261b8:	3800      	subs	r0, #0
   261ba:	bf18      	it	ne
   261bc:	2001      	movne	r0, #1
   261be:	e7f1      	b.n	261a4 <uarte_nrfx_irq_is_pending+0x1a>

000261c0 <uarte_nrfx_poll_out>:
{
   261c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   261c4:	6843      	ldr	r3, [r0, #4]
{
   261c6:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   261ca:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   261cc:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   261ce:	f001 f98c 	bl	274ea <k_is_in_isr>
   261d2:	b9c0      	cbnz	r0, 26206 <uarte_nrfx_poll_out+0x46>
		lock = &data->poll_out_lock;
   261d4:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   261d6:	f04f 0801 	mov.w	r8, #1
   261da:	f106 070c 	add.w	r7, r6, #12
   261de:	e8d7 3fef 	ldaex	r3, [r7]
   261e2:	2b00      	cmp	r3, #0
   261e4:	d103      	bne.n	261ee <uarte_nrfx_poll_out+0x2e>
   261e6:	e8c7 8fe2 	stlex	r2, r8, [r7]
   261ea:	2a00      	cmp	r2, #0
   261ec:	d1f7      	bne.n	261de <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   261ee:	d00c      	beq.n	2620a <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
   261f0:	2021      	movs	r0, #33	; 0x21
   261f2:	2100      	movs	r1, #0
   261f4:	3d01      	subs	r5, #1
   261f6:	f7f8 fbf9 	bl	1e9ec <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   261fa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   261fe:	d1ee      	bne.n	261de <uarte_nrfx_poll_out+0x1e>
}
   26200:	b002      	add	sp, #8
   26202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   26206:	2301      	movs	r3, #1
   26208:	60f3      	str	r3, [r6, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2620a:	2300      	movs	r3, #0
   2620c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   26210:	f10d 0307 	add.w	r3, sp, #7
   26214:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   26218:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2621a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   2621e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26222:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26224:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   26228:	b923      	cbnz	r3, 26234 <uarte_nrfx_poll_out+0x74>
   2622a:	2001      	movs	r0, #1
   2622c:	f000 fece 	bl	26fcc <nrfx_busy_wait>
   26230:	3d01      	subs	r5, #1
   26232:	d1f7      	bne.n	26224 <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26234:	2301      	movs	r3, #1
   26236:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   26238:	2300      	movs	r3, #0
   2623a:	60f3      	str	r3, [r6, #12]
   2623c:	e7e0      	b.n	26200 <uarte_nrfx_poll_out+0x40>

0002623e <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   2623e:	2000      	movs	r0, #0
   26240:	4770      	bx	lr

00026242 <entropy_cc310_rng_get_entropy>:
{
   26242:	b513      	push	{r0, r1, r4, lr}
   26244:	4614      	mov	r4, r2
   26246:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   26248:	aa01      	add	r2, sp, #4
   2624a:	4621      	mov	r1, r4
   2624c:	f7e1 fed0 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   26250:	9b01      	ldr	r3, [sp, #4]
   26252:	429c      	cmp	r4, r3
}
   26254:	bf18      	it	ne
   26256:	f06f 0015 	mvnne.w	r0, #21
   2625a:	b002      	add	sp, #8
   2625c:	bd10      	pop	{r4, pc}

0002625e <update_offset>:
{
   2625e:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   26260:	4604      	mov	r4, r0
   26262:	b140      	cbz	r0, 26276 <update_offset+0x18>
   26264:	6803      	ldr	r3, [r0, #0]
   26266:	b133      	cbz	r3, 26276 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   26268:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   2626a:	4418      	add	r0, r3
   2626c:	f7e6 fe64 	bl	cf38 <strlen>
   26270:	68a3      	ldr	r3, [r4, #8]
   26272:	4418      	add	r0, r3
   26274:	60a0      	str	r0, [r4, #8]
}
   26276:	bd10      	pop	{r4, pc}

00026278 <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   26278:	b161      	cbz	r1, 26294 <add_item_to_array+0x1c>
   2627a:	b160      	cbz	r0, 26296 <add_item_to_array+0x1e>
    child = array->child;
   2627c:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   2627e:	b913      	cbnz	r3, 26286 <add_item_to_array+0xe>
        array->child = item;
   26280:	6081      	str	r1, [r0, #8]
}
   26282:	2001      	movs	r0, #1
   26284:	4770      	bx	lr
        while (child->next)
   26286:	461a      	mov	r2, r3
   26288:	681b      	ldr	r3, [r3, #0]
   2628a:	2b00      	cmp	r3, #0
   2628c:	d1fb      	bne.n	26286 <add_item_to_array+0xe>
    prev->next = item;
   2628e:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   26290:	604a      	str	r2, [r1, #4]
   26292:	e7f6      	b.n	26282 <add_item_to_array+0xa>
        return false;
   26294:	4608      	mov	r0, r1
}
   26296:	4770      	bx	lr

00026298 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   26298:	4603      	mov	r3, r0
   2629a:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   2629c:	2028      	movs	r0, #40	; 0x28
   2629e:	4798      	blx	r3
    if (node)
   262a0:	4604      	mov	r4, r0
   262a2:	b118      	cbz	r0, 262ac <cJSON_New_Item.isra.0+0x14>
   262a4:	2228      	movs	r2, #40	; 0x28
   262a6:	2100      	movs	r1, #0
   262a8:	f001 fb87 	bl	279ba <memset>
}
   262ac:	4620      	mov	r0, r4
   262ae:	bd10      	pop	{r4, pc}

000262b0 <ensure>:
{
   262b0:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   262b2:	4604      	mov	r4, r0
   262b4:	b1b8      	cbz	r0, 262e6 <ensure+0x36>
   262b6:	6805      	ldr	r5, [r0, #0]
   262b8:	b165      	cbz	r5, 262d4 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   262ba:	6842      	ldr	r2, [r0, #4]
   262bc:	b112      	cbz	r2, 262c4 <ensure+0x14>
   262be:	6883      	ldr	r3, [r0, #8]
   262c0:	429a      	cmp	r2, r3
   262c2:	d910      	bls.n	262e6 <ensure+0x36>
    if (needed > INT_MAX)
   262c4:	2900      	cmp	r1, #0
   262c6:	db0e      	blt.n	262e6 <ensure+0x36>
    needed += p->offset + 1;
   262c8:	68a0      	ldr	r0, [r4, #8]
   262ca:	4401      	add	r1, r0
   262cc:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   262ce:	429a      	cmp	r2, r3
   262d0:	d302      	bcc.n	262d8 <ensure+0x28>
        return p->buffer + p->offset;
   262d2:	4405      	add	r5, r0
}
   262d4:	4628      	mov	r0, r5
   262d6:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   262d8:	6922      	ldr	r2, [r4, #16]
   262da:	b922      	cbnz	r2, 262e6 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   262dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   262e0:	d303      	bcc.n	262ea <ensure+0x3a>
        if (needed <= INT_MAX)
   262e2:	2b00      	cmp	r3, #0
   262e4:	da0f      	bge.n	26306 <ensure+0x56>
        return NULL;
   262e6:	2500      	movs	r5, #0
   262e8:	e7f4      	b.n	262d4 <ensure+0x24>
        newsize = needed + 1;
   262ea:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   262ec:	6a23      	ldr	r3, [r4, #32]
   262ee:	b16b      	cbz	r3, 2630c <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   262f0:	4628      	mov	r0, r5
   262f2:	4631      	mov	r1, r6
   262f4:	4798      	blx	r3
        if (newbuffer == NULL)
   262f6:	4605      	mov	r5, r0
   262f8:	b9b0      	cbnz	r0, 26328 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   262fa:	69e3      	ldr	r3, [r4, #28]
   262fc:	6820      	ldr	r0, [r4, #0]
   262fe:	4798      	blx	r3
            p->buffer = NULL;
   26300:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   26304:	e7e6      	b.n	262d4 <ensure+0x24>
            newsize = INT_MAX;
   26306:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   2630a:	e7ef      	b.n	262ec <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   2630c:	4630      	mov	r0, r6
   2630e:	69a3      	ldr	r3, [r4, #24]
   26310:	4798      	blx	r3
        if (!newbuffer)
   26312:	4605      	mov	r5, r0
   26314:	2800      	cmp	r0, #0
   26316:	d0f0      	beq.n	262fa <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   26318:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2631a:	6821      	ldr	r1, [r4, #0]
   2631c:	3201      	adds	r2, #1
   2631e:	f001 fb12 	bl	27946 <memcpy>
        p->hooks.deallocate(p->buffer);
   26322:	69e3      	ldr	r3, [r4, #28]
   26324:	6820      	ldr	r0, [r4, #0]
   26326:	4798      	blx	r3
    return newbuffer + p->offset;
   26328:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   2632a:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   2632e:	441d      	add	r5, r3
   26330:	e7d0      	b.n	262d4 <ensure+0x24>

00026332 <cJSON_Print>:
    return (char*)print(item, true, &global_hooks);
   26332:	2101      	movs	r1, #1
   26334:	f7ed bb06 	b.w	13944 <print.constprop.0>

00026338 <cJSON_AddItemToObject>:
    add_item_to_object(object, string, item, &global_hooks, false);
   26338:	2300      	movs	r3, #0
   2633a:	f7ed badb 	b.w	138f4 <add_item_to_object.constprop.0>

0002633e <cJSON_AddNumberToObject>:
{
   2633e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26340:	4605      	mov	r5, r0
   26342:	9101      	str	r1, [sp, #4]
    cJSON *number_item = cJSON_CreateNumber(number);
   26344:	f7e6 feb0 	bl	d0a8 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   26348:	2300      	movs	r3, #0
   2634a:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   2634c:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   2634e:	9901      	ldr	r1, [sp, #4]
   26350:	4628      	mov	r0, r5
   26352:	f7ed facf 	bl	138f4 <add_item_to_object.constprop.0>
   26356:	4605      	mov	r5, r0
   26358:	b918      	cbnz	r0, 26362 <cJSON_AddNumberToObject+0x24>
    cJSON_Delete(number_item);
   2635a:	4620      	mov	r0, r4
   2635c:	f7ed fb3e 	bl	139dc <cJSON_Delete>
    return NULL;
   26360:	462c      	mov	r4, r5
}
   26362:	4620      	mov	r0, r4
   26364:	b003      	add	sp, #12
   26366:	bd30      	pop	{r4, r5, pc}

00026368 <cJSON_AddStringToObject>:
{
   26368:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2636a:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   2636c:	4610      	mov	r0, r2
{
   2636e:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   26370:	f7ed fb58 	bl	13a24 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   26374:	2300      	movs	r3, #0
   26376:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   26378:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   2637a:	9901      	ldr	r1, [sp, #4]
   2637c:	4628      	mov	r0, r5
   2637e:	f7ed fab9 	bl	138f4 <add_item_to_object.constprop.0>
   26382:	4605      	mov	r5, r0
   26384:	b918      	cbnz	r0, 2638e <cJSON_AddStringToObject+0x26>
    cJSON_Delete(string_item);
   26386:	4620      	mov	r0, r4
   26388:	f7ed fb28 	bl	139dc <cJSON_Delete>
    return NULL;
   2638c:	462c      	mov	r4, r5
}
   2638e:	4620      	mov	r0, r4
   26390:	b003      	add	sp, #12
   26392:	bd30      	pop	{r4, r5, pc}

00026394 <cJSON_AddObjectToObject>:
{
   26394:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26396:	4605      	mov	r5, r0
   26398:	9101      	str	r1, [sp, #4]
    cJSON *object_item = cJSON_CreateObject();
   2639a:	f7ed fb5b 	bl	13a54 <cJSON_CreateObject>
    if (add_item_to_object(object, name, object_item, &global_hooks, false))
   2639e:	2300      	movs	r3, #0
   263a0:	4602      	mov	r2, r0
    cJSON *object_item = cJSON_CreateObject();
   263a2:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, object_item, &global_hooks, false))
   263a4:	9901      	ldr	r1, [sp, #4]
   263a6:	4628      	mov	r0, r5
   263a8:	f7ed faa4 	bl	138f4 <add_item_to_object.constprop.0>
   263ac:	4605      	mov	r5, r0
   263ae:	b918      	cbnz	r0, 263b8 <cJSON_AddObjectToObject+0x24>
    cJSON_Delete(object_item);
   263b0:	4620      	mov	r0, r4
   263b2:	f7ed fb13 	bl	139dc <cJSON_Delete>
    return NULL;
   263b6:	462c      	mov	r4, r5
}
   263b8:	4620      	mov	r0, r4
   263ba:	b003      	add	sp, #12
   263bc:	bd30      	pop	{r4, r5, pc}

000263be <bsdlib_shutdown>:
{
	return init_ret;
}

int bsdlib_shutdown(void)
{
   263be:	b508      	push	{r3, lr}
	bsd_shutdown();
   263c0:	f7f5 fbac 	bl	1bb1c <bsd_shutdown>

	return 0;
}
   263c4:	2000      	movs	r0, #0
   263c6:	bd08      	pop	{r3, pc}

000263c8 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   263c8:	4668      	mov	r0, sp
   263ca:	f020 0107 	bic.w	r1, r0, #7
   263ce:	468d      	mov	sp, r1
   263d0:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   263d2:	f7ef ff55 	bl	16280 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   263d6:	f7e9 fd63 	bl	fea0 <_arch_isr_direct_pm>
   263da:	f7e9 fea3 	bl	10124 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   263de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   263e2:	4685      	mov	sp, r0
   263e4:	4770      	bx	lr

000263e6 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   263e6:	4668      	mov	r0, sp
   263e8:	f020 0107 	bic.w	r1, r0, #7
   263ec:	468d      	mov	sp, r1
   263ee:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   263f0:	f7f0 fa70 	bl	168d4 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   263f4:	f7e9 fd54 	bl	fea0 <_arch_isr_direct_pm>
   263f8:	f7e9 fe94 	bl	10124 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   263fc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   26400:	4685      	mov	sp, r0
   26402:	4770      	bx	lr

00026404 <trace_task_create>:
{
   26404:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   26406:	201d      	movs	r0, #29
   26408:	2200      	movs	r2, #0
   2640a:	2106      	movs	r1, #6
   2640c:	f7e9 fd32 	bl	fe74 <z_arm_irq_priority_set>
}
   26410:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   26414:	201d      	movs	r0, #29
   26416:	f7e9 bd1d 	b.w	fe54 <arch_irq_enable>

0002641a <read_task_create>:
{
   2641a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   2641c:	201c      	movs	r0, #28
   2641e:	2200      	movs	r2, #0
   26420:	2106      	movs	r1, #6
   26422:	f7e9 fd27 	bl	fe74 <z_arm_irq_priority_set>
}
   26426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   2642a:	201c      	movs	r0, #28
   2642c:	f7e9 bd12 	b.w	fe54 <arch_irq_enable>

00026430 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   26430:	2000      	movs	r0, #0
   26432:	4770      	bx	lr

00026434 <z_to_nrf_flags>:
{
   26434:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   26436:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   2643a:	bf18      	it	ne
   2643c:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   2643e:	079b      	lsls	r3, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   26440:	bf48      	it	mi
   26442:	f040 0008 	orrmi.w	r0, r0, #8
}
   26446:	4770      	bx	lr

00026448 <z_to_nrf_family>:
	switch (z_family) {
   26448:	2806      	cmp	r0, #6
   2644a:	d80a      	bhi.n	26462 <z_to_nrf_family+0x1a>
   2644c:	b198      	cbz	r0, 26476 <z_to_nrf_family+0x2e>
   2644e:	3801      	subs	r0, #1
   26450:	2805      	cmp	r0, #5
   26452:	d810      	bhi.n	26476 <z_to_nrf_family+0x2e>
   26454:	e8df f000 	tbb	[pc, r0]
   26458:	0f0d0312 	.word	0x0f0d0312
   2645c:	0b0f      	.short	0x0b0f
   2645e:	200a      	movs	r0, #10
   26460:	4770      	bx	lr
   26462:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   26464:	bf14      	ite	ne
   26466:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   2646a:	2066      	moveq	r0, #102	; 0x66
   2646c:	4770      	bx	lr
		return NRF_AF_LOCAL;
   2646e:	2001      	movs	r0, #1
   26470:	4770      	bx	lr
		return NRF_AF_PACKET;
   26472:	2005      	movs	r0, #5
   26474:	4770      	bx	lr
		return -EAFNOSUPPORT;
   26476:	f06f 0069 	mvn.w	r0, #105	; 0x69
   2647a:	4770      	bx	lr
		return NRF_AF_INET;
   2647c:	2002      	movs	r0, #2
}
   2647e:	4770      	bx	lr

00026480 <z_to_nrf_protocol>:
	switch (proto) {
   26480:	f240 1311 	movw	r3, #273	; 0x111
   26484:	4298      	cmp	r0, r3
   26486:	d023      	beq.n	264d0 <z_to_nrf_protocol+0x50>
   26488:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   2648c:	da11      	bge.n	264b2 <z_to_nrf_protocol+0x32>
   2648e:	2811      	cmp	r0, #17
   26490:	d021      	beq.n	264d6 <z_to_nrf_protocol+0x56>
   26492:	dc06      	bgt.n	264a2 <z_to_nrf_protocol+0x22>
   26494:	b300      	cbz	r0, 264d8 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   26496:	2806      	cmp	r0, #6
   26498:	bf14      	ite	ne
   2649a:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2649e:	2001      	moveq	r0, #1
   264a0:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   264a2:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   264a6:	bf14      	ite	ne
   264a8:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   264ac:	f44f 7082 	moveq.w	r0, #260	; 0x104
   264b0:	4770      	bx	lr
	switch (proto) {
   264b2:	f240 2302 	movw	r3, #514	; 0x202
   264b6:	4298      	cmp	r0, r3
   264b8:	d00e      	beq.n	264d8 <z_to_nrf_protocol+0x58>
   264ba:	f240 2303 	movw	r3, #515	; 0x203
   264be:	4298      	cmp	r0, r3
   264c0:	d00a      	beq.n	264d8 <z_to_nrf_protocol+0x58>
   264c2:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   264c6:	4298      	cmp	r0, r3
   264c8:	bf18      	it	ne
   264ca:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   264ce:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   264d0:	f44f 7087 	mov.w	r0, #270	; 0x10e
   264d4:	4770      	bx	lr
	switch (proto) {
   264d6:	2002      	movs	r0, #2
}
   264d8:	4770      	bx	lr

000264da <nrf91_socket_is_supported>:
}
   264da:	2001      	movs	r0, #1
   264dc:	4770      	bx	lr

000264de <nrf91_bsdlib_socket_offload_init>:
}
   264de:	2000      	movs	r0, #0
   264e0:	4770      	bx	lr

000264e2 <nrf91_socket_offload_getsockopt>:
{
   264e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   264e6:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   264e8:	2300      	movs	r3, #0
{
   264ea:	b086      	sub	sp, #24
   264ec:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   264f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   264f4:	f8d8 3000 	ldr.w	r3, [r8]
{
   264f8:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   264fa:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   264fc:	f240 2302 	movw	r3, #514	; 0x202
   26500:	4299      	cmp	r1, r3
{
   26502:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   26504:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
	switch (z_in_level) {
   26508:	d005      	beq.n	26516 <nrf91_socket_offload_getsockopt+0x34>
   2650a:	dc2e      	bgt.n	2656a <nrf91_socket_offload_getsockopt+0x88>
   2650c:	2901      	cmp	r1, #1
   2650e:	d002      	beq.n	26516 <nrf91_socket_offload_getsockopt+0x34>
   26510:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   26514:	d139      	bne.n	2658a <nrf91_socket_offload_getsockopt+0xa8>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   26516:	4631      	mov	r1, r6
   26518:	4620      	mov	r0, r4
   2651a:	aa02      	add	r2, sp, #8
   2651c:	f7ed fd4a 	bl	13fb4 <z_to_nrf_optname>
   26520:	2800      	cmp	r0, #0
   26522:	db32      	blt.n	2658a <nrf91_socket_offload_getsockopt+0xa8>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   26524:	2c01      	cmp	r4, #1
   26526:	d124      	bne.n	26572 <nrf91_socket_offload_getsockopt+0x90>
   26528:	2e14      	cmp	r6, #20
   2652a:	d122      	bne.n	26572 <nrf91_socket_offload_getsockopt+0x90>
		nrf_optlen = sizeof(struct nrf_timeval);
   2652c:	2308      	movs	r3, #8
   2652e:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   26530:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   26532:	aa03      	add	r2, sp, #12
   26534:	4638      	mov	r0, r7
   26536:	9200      	str	r2, [sp, #0]
   26538:	4621      	mov	r1, r4
   2653a:	9a02      	ldr	r2, [sp, #8]
   2653c:	f7f5 fde2 	bl	1c104 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   26540:	4607      	mov	r7, r0
   26542:	b970      	cbnz	r0, 26562 <nrf91_socket_offload_getsockopt+0x80>
   26544:	b16d      	cbz	r5, 26562 <nrf91_socket_offload_getsockopt+0x80>
		*optlen = nrf_optlen;
   26546:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   26548:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   2654a:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   2654e:	d108      	bne.n	26562 <nrf91_socket_offload_getsockopt+0x80>
			if (optname == SO_ERROR) {
   26550:	2e04      	cmp	r6, #4
   26552:	d110      	bne.n	26576 <nrf91_socket_offload_getsockopt+0x94>
				bsd_os_errno_set(*(int *)optval);
   26554:	6828      	ldr	r0, [r5, #0]
   26556:	f7ed fb9b 	bl	13c90 <bsd_os_errno_set>
				*(int *)optval = errno;
   2655a:	f7fc fd23 	bl	22fa4 <__errno>
   2655e:	6803      	ldr	r3, [r0, #0]
   26560:	602b      	str	r3, [r5, #0]
}
   26562:	4638      	mov	r0, r7
   26564:	b006      	add	sp, #24
   26566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2656a:	f240 2303 	movw	r3, #515	; 0x203
   2656e:	4299      	cmp	r1, r3
   26570:	e7d0      	b.n	26514 <nrf91_socket_offload_getsockopt+0x32>
   26572:	462b      	mov	r3, r5
   26574:	e7dd      	b.n	26532 <nrf91_socket_offload_getsockopt+0x50>
			} else if (optname == SO_RCVTIMEO) {
   26576:	2e14      	cmp	r6, #20
   26578:	d1f3      	bne.n	26562 <nrf91_socket_offload_getsockopt+0x80>
				((struct timeval *)optval)->tv_sec =
   2657a:	9b04      	ldr	r3, [sp, #16]
   2657c:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   2657e:	9b05      	ldr	r3, [sp, #20]
   26580:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   26582:	2308      	movs	r3, #8
   26584:	f8c8 3000 	str.w	r3, [r8]
   26588:	e7eb      	b.n	26562 <nrf91_socket_offload_getsockopt+0x80>
	errno = ENOPROTOOPT;
   2658a:	f7fc fd0b 	bl	22fa4 <__errno>
   2658e:	236d      	movs	r3, #109	; 0x6d
	return retval;
   26590:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   26594:	6003      	str	r3, [r0, #0]
	return retval;
   26596:	e7e4      	b.n	26562 <nrf91_socket_offload_getsockopt+0x80>

00026598 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   26598:	3801      	subs	r0, #1
   2659a:	f7f5 bd5f 	b.w	1c05c <nrf_listen>

0002659e <nrf91_socket_offload_freeaddrinfo>:
{
   2659e:	b538      	push	{r3, r4, r5, lr}
   265a0:	4604      	mov	r4, r0
	while (next != NULL) {
   265a2:	b904      	cbnz	r4, 265a6 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   265a4:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   265a6:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   265a8:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   265aa:	f000 fdcc 	bl	27146 <k_free>
		k_free(this);
   265ae:	4620      	mov	r0, r4
   265b0:	f000 fdc9 	bl	27146 <k_free>
		next = next->ai_next;
   265b4:	462c      	mov	r4, r5
   265b6:	e7f4      	b.n	265a2 <nrf91_socket_offload_freeaddrinfo+0x4>

000265b8 <z_to_nrf_addrinfo_hints>:
{
   265b8:	b538      	push	{r3, r4, r5, lr}
   265ba:	460c      	mov	r4, r1
   265bc:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   265be:	221c      	movs	r2, #28
   265c0:	2100      	movs	r1, #0
   265c2:	1d20      	adds	r0, r4, #4
   265c4:	f001 f9f9 	bl	279ba <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   265c8:	2300      	movs	r3, #0
   265ca:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   265cc:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   265ce:	2b03      	cmp	r3, #3
   265d0:	d003      	beq.n	265da <z_to_nrf_addrinfo_hints+0x22>
   265d2:	2b04      	cmp	r3, #4
   265d4:	bf08      	it	eq
   265d6:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   265da:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   265dc:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   265de:	f7ff ff33 	bl	26448 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   265e2:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   265e6:	d00b      	beq.n	26600 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   265e8:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   265ea:	6928      	ldr	r0, [r5, #16]
   265ec:	f7ff ff48 	bl	26480 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   265f0:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   265f4:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   265f6:	d003      	beq.n	26600 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   265f8:	69e8      	ldr	r0, [r5, #28]
   265fa:	b108      	cbz	r0, 26600 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   265fc:	61a0      	str	r0, [r4, #24]
	return 0;
   265fe:	2000      	movs	r0, #0
}
   26600:	bd38      	pop	{r3, r4, r5, pc}

00026602 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   26602:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   26604:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   26606:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   26608:	4603      	mov	r3, r0
{
   2660a:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   2660c:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26610:	f101 0420 	add.w	r4, r1, #32
   26614:	f101 0210 	add.w	r2, r1, #16
   26618:	f852 5b04 	ldr.w	r5, [r2], #4
   2661c:	42a2      	cmp	r2, r4
   2661e:	f843 5b04 	str.w	r5, [r3], #4
   26622:	d1f9      	bne.n	26618 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   26624:	6a0b      	ldr	r3, [r1, #32]
   26626:	7503      	strb	r3, [r0, #20]
}
   26628:	bd30      	pop	{r4, r5, pc}

0002662a <nrf91_socket_offload_recvfrom>:
{
   2662a:	b5f0      	push	{r4, r5, r6, r7, lr}
	int sd = OBJ_TO_SD(obj);
   2662c:	1e45      	subs	r5, r0, #1
{
   2662e:	b08d      	sub	sp, #52	; 0x34
   26630:	4618      	mov	r0, r3
   26632:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   26636:	f7ff fefd 	bl	26434 <z_to_nrf_flags>
   2663a:	4603      	mov	r3, r0
	if (from == NULL) {
   2663c:	b944      	cbnz	r4, 26650 <nrf91_socket_offload_recvfrom+0x26>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2663e:	4628      	mov	r0, r5
   26640:	e9cd 4400 	strd	r4, r4, [sp]
   26644:	f7f5 fcc2 	bl	1bfcc <nrf_recvfrom>
   26648:	4605      	mov	r5, r0
}
   2664a:	4628      	mov	r0, r5
   2664c:	b00d      	add	sp, #52	; 0x34
   2664e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   26650:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   26652:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   26654:	9002      	str	r0, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   26656:	a802      	add	r0, sp, #8
   26658:	9001      	str	r0, [sp, #4]
   2665a:	9700      	str	r7, [sp, #0]
   2665c:	4628      	mov	r0, r5
   2665e:	f7f5 fcb5 	bl	1bfcc <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   26662:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   26664:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   26666:	2b02      	cmp	r3, #2
   26668:	d109      	bne.n	2667e <nrf91_socket_offload_recvfrom+0x54>
	ptr->sin_port = nrf_in->sin_port;
   2666a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2666e:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   26670:	2301      	movs	r3, #1
   26672:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   26674:	9b06      	ldr	r3, [sp, #24]
   26676:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   26678:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   2667a:	6033      	str	r3, [r6, #0]
	return retval;
   2667c:	e7e5      	b.n	2664a <nrf91_socket_offload_recvfrom+0x20>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   2667e:	2b0a      	cmp	r3, #10
   26680:	d1e3      	bne.n	2664a <nrf91_socket_offload_recvfrom+0x20>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   26682:	4639      	mov	r1, r7
   26684:	4620      	mov	r0, r4
   26686:	f7ff ffbc 	bl	26602 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   2668a:	2318      	movs	r3, #24
   2668c:	e7f5      	b.n	2667a <nrf91_socket_offload_recvfrom+0x50>

0002668e <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2668e:	2300      	movs	r3, #0
{
   26690:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   26692:	e9cd 3300 	strd	r3, r3, [sp]
   26696:	f7ff ffc8 	bl	2662a <nrf91_socket_offload_recvfrom>
}
   2669a:	b003      	add	sp, #12
   2669c:	f85d fb04 	ldr.w	pc, [sp], #4

000266a0 <nrf91_socket_offload_getaddrinfo>:
{
   266a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   266a4:	4614      	mov	r4, r2
   266a6:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   266a8:	2100      	movs	r1, #0
{
   266aa:	b093      	sub	sp, #76	; 0x4c
   266ac:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   266ae:	2220      	movs	r2, #32
   266b0:	a802      	add	r0, sp, #8
{
   266b2:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   266b4:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   266b6:	f001 f980 	bl	279ba <memset>
	if (hints != NULL) {
   266ba:	b194      	cbz	r4, 266e2 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   266bc:	4620      	mov	r0, r4
   266be:	a902      	add	r1, sp, #8
   266c0:	f7ff ff7a 	bl	265b8 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   266c4:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   266c8:	f000 80c7 	beq.w	2685a <nrf91_socket_offload_getaddrinfo+0x1ba>
		} else if (error == -EAFNOSUPPORT) {
   266cc:	306a      	adds	r0, #106	; 0x6a
   266ce:	f000 80c7 	beq.w	26860 <nrf91_socket_offload_getaddrinfo+0x1c0>
		if (hints->ai_next != NULL) {
   266d2:	6820      	ldr	r0, [r4, #0]
   266d4:	b120      	cbz	r0, 266e0 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   266d6:	ac0a      	add	r4, sp, #40	; 0x28
   266d8:	4621      	mov	r1, r4
   266da:	f7ff ff6d 	bl	265b8 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   266de:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   266e0:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   266e2:	4628      	mov	r0, r5
   266e4:	4622      	mov	r2, r4
   266e6:	4631      	mov	r1, r6
   266e8:	ab01      	add	r3, sp, #4
   266ea:	f7f5 fd27 	bl	1c13c <nrf_getaddrinfo>
	if (retval != 0) {
   266ee:	4605      	mov	r5, r0
   266f0:	b1b8      	cbz	r0, 26722 <nrf91_socket_offload_getaddrinfo+0x82>
	switch (nrf_error) {
   266f2:	282f      	cmp	r0, #47	; 0x2f
   266f4:	f000 80b7 	beq.w	26866 <nrf91_socket_offload_getaddrinfo+0x1c6>
   266f8:	dc0c      	bgt.n	26714 <nrf91_socket_offload_getaddrinfo+0x74>
   266fa:	280c      	cmp	r0, #12
   266fc:	f000 80b6 	beq.w	2686c <nrf91_socket_offload_getaddrinfo+0x1cc>
   26700:	2823      	cmp	r0, #35	; 0x23
   26702:	bf14      	ite	ne
   26704:	f06f 050a 	mvnne.w	r5, #10
   26708:	f06f 0502 	mvneq.w	r5, #2
}
   2670c:	4628      	mov	r0, r5
   2670e:	b013      	add	sp, #76	; 0x4c
   26710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return DNS_EAI_INPROGRESS;
   26714:	2873      	cmp	r0, #115	; 0x73
   26716:	bf14      	ite	ne
   26718:	f06f 050a 	mvnne.w	r5, #10
   2671c:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   26720:	e7f4      	b.n	2670c <nrf91_socket_offload_getaddrinfo+0x6c>
	struct zsock_addrinfo *latest_z_res = NULL;
   26722:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   26724:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   26726:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   26728:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   2672a:	b91e      	cbnz	r6, 26734 <nrf91_socket_offload_getaddrinfo+0x94>
	nrf_freeaddrinfo(nrf_res);
   2672c:	9801      	ldr	r0, [sp, #4]
   2672e:	f7f5 fd07 	bl	1c140 <nrf_freeaddrinfo>
	return retval;
   26732:	e7eb      	b.n	2670c <nrf91_socket_offload_getaddrinfo+0x6c>
					k_malloc(sizeof(struct zsock_addrinfo));
   26734:	2050      	movs	r0, #80	; 0x50
   26736:	f7f7 fc79 	bl	1e02c <k_malloc>
		if (next_z_res == NULL) {
   2673a:	4604      	mov	r4, r0
   2673c:	2800      	cmp	r0, #0
   2673e:	f000 8081 	beq.w	26844 <nrf91_socket_offload_getaddrinfo+0x1a4>
	family = nrf_to_z_family(nrf_in->ai_family);
   26742:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   26744:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   26746:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   26748:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   2674c:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   26750:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   26754:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   26756:	dc23      	bgt.n	267a0 <nrf91_socket_offload_getaddrinfo+0x100>
   26758:	2900      	cmp	r1, #0
   2675a:	dd23      	ble.n	267a4 <nrf91_socket_offload_getaddrinfo+0x104>
   2675c:	1e4b      	subs	r3, r1, #1
   2675e:	2b09      	cmp	r3, #9
   26760:	d820      	bhi.n	267a4 <nrf91_socket_offload_getaddrinfo+0x104>
   26762:	e8df f003 	tbb	[pc, r3]
   26766:	2905      	.short	0x2905
   26768:	1f251f1f 	.word	0x1f251f1f
   2676c:	271f1f1f 	.word	0x271f1f1f
		return AF_LOCAL;
   26770:	2306      	movs	r3, #6
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   26772:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   26774:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   26776:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   2677a:	d04b      	beq.n	26814 <nrf91_socket_offload_getaddrinfo+0x174>
   2677c:	dc26      	bgt.n	267cc <nrf91_socket_offload_getaddrinfo+0x12c>
   2677e:	2a02      	cmp	r2, #2
   26780:	d04c      	beq.n	2681c <nrf91_socket_offload_getaddrinfo+0x17c>
   26782:	dc1d      	bgt.n	267c0 <nrf91_socket_offload_getaddrinfo+0x120>
   26784:	b372      	cbz	r2, 267e4 <nrf91_socket_offload_getaddrinfo+0x144>
   26786:	2a01      	cmp	r2, #1
   26788:	d04a      	beq.n	26820 <nrf91_socket_offload_getaddrinfo+0x180>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2678a:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   2678e:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   26790:	2300      	movs	r3, #0
   26792:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   26794:	4620      	mov	r0, r4
   26796:	f000 fcd6 	bl	27146 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   2679a:	f06f 0506 	mvn.w	r5, #6
   2679e:	e053      	b.n	26848 <nrf91_socket_offload_getaddrinfo+0x1a8>
	switch (nrf_family) {
   267a0:	2966      	cmp	r1, #102	; 0x66
   267a2:	d00b      	beq.n	267bc <nrf91_socket_offload_getaddrinfo+0x11c>
			k_free(next_z_res);
   267a4:	4620      	mov	r0, r4
   267a6:	f000 fcce 	bl	27146 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   267aa:	f06f 0508 	mvn.w	r5, #8
   267ae:	e04b      	b.n	26848 <nrf91_socket_offload_getaddrinfo+0x1a8>
		return AF_PACKET;
   267b0:	2303      	movs	r3, #3
   267b2:	e7de      	b.n	26772 <nrf91_socket_offload_getaddrinfo+0xd2>
		return AF_INET6;
   267b4:	2302      	movs	r3, #2
   267b6:	e7dc      	b.n	26772 <nrf91_socket_offload_getaddrinfo+0xd2>
	switch (nrf_family) {
   267b8:	2301      	movs	r3, #1
   267ba:	e7da      	b.n	26772 <nrf91_socket_offload_getaddrinfo+0xd2>
		return AF_LTE;
   267bc:	460b      	mov	r3, r1
   267be:	e7d8      	b.n	26772 <nrf91_socket_offload_getaddrinfo+0xd2>
	switch (proto) {
   267c0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   267c4:	d1e1      	bne.n	2678a <nrf91_socket_offload_getaddrinfo+0xea>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   267c6:	f44f 7381 	mov.w	r3, #258	; 0x102
   267ca:	e025      	b.n	26818 <nrf91_socket_offload_getaddrinfo+0x178>
	switch (proto) {
   267cc:	f240 2302 	movw	r3, #514	; 0x202
   267d0:	429a      	cmp	r2, r3
   267d2:	d007      	beq.n	267e4 <nrf91_socket_offload_getaddrinfo+0x144>
   267d4:	f240 2303 	movw	r3, #515	; 0x203
   267d8:	429a      	cmp	r2, r3
   267da:	d003      	beq.n	267e4 <nrf91_socket_offload_getaddrinfo+0x144>
   267dc:	f240 2301 	movw	r3, #513	; 0x201
   267e0:	429a      	cmp	r2, r3
   267e2:	d1d2      	bne.n	2678a <nrf91_socket_offload_getaddrinfo+0xea>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   267e4:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   267e6:	2902      	cmp	r1, #2
   267e8:	d11c      	bne.n	26824 <nrf91_socket_offload_getaddrinfo+0x184>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   267ea:	2008      	movs	r0, #8
   267ec:	f7f7 fc1e 	bl	1e02c <k_malloc>
   267f0:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   267f2:	b320      	cbz	r0, 2683e <nrf91_socket_offload_getaddrinfo+0x19e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   267f4:	2308      	movs	r3, #8
   267f6:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   267f8:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   267fa:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   267fc:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   267fe:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   26800:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   26802:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   26804:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   26806:	f1b8 0f00 	cmp.w	r8, #0
   2680a:	d123      	bne.n	26854 <nrf91_socket_offload_getaddrinfo+0x1b4>
			*res = next_z_res;
   2680c:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   2680e:	46a0      	mov	r8, r4
   26810:	69f6      	ldr	r6, [r6, #28]
   26812:	e78a      	b.n	2672a <nrf91_socket_offload_getaddrinfo+0x8a>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   26814:	f240 1311 	movw	r3, #273	; 0x111
   26818:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   2681a:	e7e4      	b.n	267e6 <nrf91_socket_offload_getaddrinfo+0x146>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2681c:	2311      	movs	r3, #17
   2681e:	e7fb      	b.n	26818 <nrf91_socket_offload_getaddrinfo+0x178>
   26820:	2306      	movs	r3, #6
   26822:	e7f9      	b.n	26818 <nrf91_socket_offload_getaddrinfo+0x178>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   26824:	290a      	cmp	r1, #10
   26826:	d1b5      	bne.n	26794 <nrf91_socket_offload_getaddrinfo+0xf4>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   26828:	2018      	movs	r0, #24
   2682a:	f7f7 fbff 	bl	1e02c <k_malloc>
   2682e:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   26830:	b128      	cbz	r0, 2683e <nrf91_socket_offload_getaddrinfo+0x19e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   26832:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   26834:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   26836:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   26838:	f7ff fee3 	bl	26602 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   2683c:	e7e3      	b.n	26806 <nrf91_socket_offload_getaddrinfo+0x166>
			k_free(next_z_res);
   2683e:	4620      	mov	r0, r4
   26840:	f000 fc81 	bl	27146 <k_free>
			retval = DNS_EAI_MEMORY;
   26844:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   26848:	6838      	ldr	r0, [r7, #0]
   2684a:	f7ff fea8 	bl	2659e <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   2684e:	2300      	movs	r3, #0
   26850:	603b      	str	r3, [r7, #0]
   26852:	e76b      	b.n	2672c <nrf91_socket_offload_getaddrinfo+0x8c>
			latest_z_res->ai_next = next_z_res;
   26854:	f8c8 4000 	str.w	r4, [r8]
   26858:	e7d9      	b.n	2680e <nrf91_socket_offload_getaddrinfo+0x16e>
			return DNS_EAI_SOCKTYPE;
   2685a:	f06f 0506 	mvn.w	r5, #6
   2685e:	e755      	b.n	2670c <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   26860:	f06f 0508 	mvn.w	r5, #8
   26864:	e752      	b.n	2670c <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   26866:	f06f 0501 	mvn.w	r5, #1
   2686a:	e74f      	b.n	2670c <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   2686c:	f06f 0509 	mvn.w	r5, #9
   26870:	e74c      	b.n	2670c <nrf91_socket_offload_getaddrinfo+0x6c>

00026872 <z_to_nrf_ipv6>:
{
   26872:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   26874:	2124      	movs	r1, #36	; 0x24
   26876:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   26878:	8841      	ldrh	r1, [r0, #2]
{
   2687a:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   2687c:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   2687e:	210a      	movs	r1, #10
{
   26880:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   26882:	6059      	str	r1, [r3, #4]
   26884:	1d04      	adds	r4, r0, #4
   26886:	f103 0610 	add.w	r6, r3, #16
   2688a:	f100 0714 	add.w	r7, r0, #20
   2688e:	4635      	mov	r5, r6
   26890:	6820      	ldr	r0, [r4, #0]
   26892:	6861      	ldr	r1, [r4, #4]
   26894:	3408      	adds	r4, #8
   26896:	c503      	stmia	r5!, {r0, r1}
   26898:	42bc      	cmp	r4, r7
   2689a:	462e      	mov	r6, r5
   2689c:	d1f7      	bne.n	2688e <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   2689e:	7d12      	ldrb	r2, [r2, #20]
   268a0:	621a      	str	r2, [r3, #32]
}
   268a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000268a4 <nrf91_socket_offload_sendto>:
{
   268a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268a8:	b08e      	sub	sp, #56	; 0x38
   268aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
   268ac:	460e      	mov	r6, r1
   268ae:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   268b0:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   268b2:	b974      	cbnz	r4, 268d2 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   268b4:	4618      	mov	r0, r3
   268b6:	9203      	str	r2, [sp, #12]
   268b8:	f7ff fdbc 	bl	26434 <z_to_nrf_flags>
   268bc:	4603      	mov	r3, r0
   268be:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   268c2:	4631      	mov	r1, r6
   268c4:	4628      	mov	r0, r5
   268c6:	9a03      	ldr	r2, [sp, #12]
   268c8:	f7f5 fb64 	bl	1bf94 <nrf_sendto>
}
   268cc:	b00e      	add	sp, #56	; 0x38
   268ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   268d2:	8823      	ldrh	r3, [r4, #0]
   268d4:	9203      	str	r2, [sp, #12]
   268d6:	2b01      	cmp	r3, #1
   268d8:	d111      	bne.n	268fe <nrf91_socket_offload_sendto+0x5a>
	nrf_out->sin_port = ptr->sin_port;
   268da:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   268dc:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   268de:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   268e2:	2302      	movs	r3, #2
   268e4:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   268e6:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   268e8:	4638      	mov	r0, r7
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   268ea:	f88d 1014 	strb.w	r1, [sp, #20]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   268ee:	9308      	str	r3, [sp, #32]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   268f0:	f7ff fda0 	bl	26434 <z_to_nrf_flags>
   268f4:	9101      	str	r1, [sp, #4]
   268f6:	a905      	add	r1, sp, #20
   268f8:	4603      	mov	r3, r0
   268fa:	9100      	str	r1, [sp, #0]
   268fc:	e7e1      	b.n	268c2 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   268fe:	2b02      	cmp	r3, #2
   26900:	d10d      	bne.n	2691e <nrf91_socket_offload_sendto+0x7a>
		z_to_nrf_ipv6(to, &ipv6);
   26902:	f10d 0814 	add.w	r8, sp, #20
   26906:	4641      	mov	r1, r8
   26908:	4620      	mov	r0, r4
   2690a:	f7ff ffb2 	bl	26872 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2690e:	4638      	mov	r0, r7
   26910:	f7ff fd90 	bl	26434 <z_to_nrf_flags>
   26914:	2124      	movs	r1, #36	; 0x24
   26916:	4603      	mov	r3, r0
   26918:	e9cd 8100 	strd	r8, r1, [sp]
   2691c:	e7d1      	b.n	268c2 <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   2691e:	f7fc fb41 	bl	22fa4 <__errno>
   26922:	2386      	movs	r3, #134	; 0x86
   26924:	6003      	str	r3, [r0, #0]
	return retval;
   26926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2692a:	e7cf      	b.n	268cc <nrf91_socket_offload_sendto+0x28>

0002692c <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2692c:	2300      	movs	r3, #0
{
   2692e:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   26930:	e9cd 3300 	strd	r3, r3, [sp]
   26934:	f7ff ffb6 	bl	268a4 <nrf91_socket_offload_sendto>
}
   26938:	b003      	add	sp, #12
   2693a:	f85d fb04 	ldr.w	pc, [sp], #4

0002693e <nrf91_socket_offload_connect>:
{
   2693e:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   26940:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   26942:	8808      	ldrh	r0, [r1, #0]
{
   26944:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   26946:	2801      	cmp	r0, #1
{
   26948:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2694a:	d10f      	bne.n	2696c <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   2694c:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2694e:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   26950:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   26954:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26956:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26958:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2695c:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2695e:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   26960:	4620      	mov	r0, r4
   26962:	a901      	add	r1, sp, #4
   26964:	f7f5 fb68 	bl	1c038 <nrf_connect>
}
   26968:	b00a      	add	sp, #40	; 0x28
   2696a:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2696c:	2802      	cmp	r0, #2
   2696e:	d105      	bne.n	2697c <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   26970:	4618      	mov	r0, r3
   26972:	a901      	add	r1, sp, #4
   26974:	f7ff ff7d 	bl	26872 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   26978:	2224      	movs	r2, #36	; 0x24
   2697a:	e7f1      	b.n	26960 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2697c:	4620      	mov	r0, r4
   2697e:	f7f5 fb5b 	bl	1c038 <nrf_connect>
		if (retval < 0) {
   26982:	2800      	cmp	r0, #0
   26984:	daf0      	bge.n	26968 <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   26986:	f7fc fb0d 	bl	22fa4 <__errno>
   2698a:	2386      	movs	r3, #134	; 0x86
   2698c:	6003      	str	r3, [r0, #0]
   2698e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26992:	e7e9      	b.n	26968 <nrf91_socket_offload_connect+0x2a>

00026994 <nrf91_socket_offload_setsockopt>:
{
   26994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26998:	461d      	mov	r5, r3
	switch (z_in_level) {
   2699a:	f240 2302 	movw	r3, #514	; 0x202
{
   2699e:	b086      	sub	sp, #24
	switch (z_in_level) {
   269a0:	4299      	cmp	r1, r3
{
   269a2:	460c      	mov	r4, r1
   269a4:	4616      	mov	r6, r2
   269a6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   269a8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	switch (z_in_level) {
   269ac:	d005      	beq.n	269ba <nrf91_socket_offload_setsockopt+0x26>
   269ae:	dc1f      	bgt.n	269f0 <nrf91_socket_offload_setsockopt+0x5c>
   269b0:	2901      	cmp	r1, #1
   269b2:	d002      	beq.n	269ba <nrf91_socket_offload_setsockopt+0x26>
   269b4:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   269b8:	d125      	bne.n	26a06 <nrf91_socket_offload_setsockopt+0x72>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   269ba:	4631      	mov	r1, r6
   269bc:	4620      	mov	r0, r4
   269be:	aa03      	add	r2, sp, #12
   269c0:	f7ed faf8 	bl	13fb4 <z_to_nrf_optname>
   269c4:	2800      	cmp	r0, #0
   269c6:	db1e      	blt.n	26a06 <nrf91_socket_offload_setsockopt+0x72>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   269c8:	2c01      	cmp	r4, #1
   269ca:	d115      	bne.n	269f8 <nrf91_socket_offload_setsockopt+0x64>
   269cc:	2e14      	cmp	r6, #20
   269ce:	d105      	bne.n	269dc <nrf91_socket_offload_setsockopt+0x48>
		nrf_optlen = sizeof(struct nrf_timeval);
   269d0:	2708      	movs	r7, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   269d2:	682b      	ldr	r3, [r5, #0]
   269d4:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   269d6:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   269d8:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   269da:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   269dc:	462b      	mov	r3, r5
   269de:	4621      	mov	r1, r4
   269e0:	4640      	mov	r0, r8
   269e2:	9a03      	ldr	r2, [sp, #12]
   269e4:	9700      	str	r7, [sp, #0]
   269e6:	f7f5 fb71 	bl	1c0cc <nrf_setsockopt>
}
   269ea:	b006      	add	sp, #24
   269ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   269f0:	f240 2303 	movw	r3, #515	; 0x203
   269f4:	4299      	cmp	r1, r3
   269f6:	e7df      	b.n	269b8 <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   269f8:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   269fc:	d1ee      	bne.n	269dc <nrf91_socket_offload_setsockopt+0x48>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   269fe:	2e07      	cmp	r6, #7
   26a00:	bf08      	it	eq
   26a02:	2701      	moveq	r7, #1
   26a04:	e7ea      	b.n	269dc <nrf91_socket_offload_setsockopt+0x48>
	errno = ENOPROTOOPT;
   26a06:	f7fc facd 	bl	22fa4 <__errno>
   26a0a:	236d      	movs	r3, #109	; 0x6d
   26a0c:	6003      	str	r3, [r0, #0]
   26a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26a12:	e7ea      	b.n	269ea <nrf91_socket_offload_setsockopt+0x56>

00026a14 <nrf91_socket_offload_bind>:
{
   26a14:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   26a16:	880a      	ldrh	r2, [r1, #0]
{
   26a18:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   26a1a:	2a01      	cmp	r2, #1
{
   26a1c:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   26a1e:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
	if (addr->sa_family == AF_INET) {
   26a22:	d10f      	bne.n	26a44 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   26a24:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26a26:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   26a28:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   26a2c:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26a2e:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   26a30:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   26a34:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   26a36:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   26a38:	4620      	mov	r0, r4
   26a3a:	a901      	add	r1, sp, #4
   26a3c:	f7f5 fb34 	bl	1c0a8 <nrf_bind>
}
   26a40:	b00a      	add	sp, #40	; 0x28
   26a42:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   26a44:	2a02      	cmp	r2, #2
   26a46:	d105      	bne.n	26a54 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   26a48:	4618      	mov	r0, r3
   26a4a:	a901      	add	r1, sp, #4
   26a4c:	f7ff ff11 	bl	26872 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   26a50:	2224      	movs	r2, #36	; 0x24
   26a52:	e7f1      	b.n	26a38 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   26a54:	f7fc faa6 	bl	22fa4 <__errno>
   26a58:	2386      	movs	r3, #134	; 0x86
   26a5a:	6003      	str	r3, [r0, #0]
   26a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26a60:	e7ee      	b.n	26a40 <nrf91_socket_offload_bind+0x2c>

00026a62 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   26a62:	6883      	ldr	r3, [r0, #8]
   26a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26a66:	b103      	cbz	r3, 26a6a <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   26a68:	4718      	bx	r3
}
   26a6a:	4770      	bx	lr

00026a6c <response_handler>:
	write_uart_string(response);
   26a6c:	4608      	mov	r0, r1
   26a6e:	f7ed bedf 	b.w	14830 <write_uart_string>

00026a72 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   26a72:	280d      	cmp	r0, #13
   26a74:	d004      	beq.n	26a80 <is_lfcr+0xe>
   26a76:	f1a0 030a 	sub.w	r3, r0, #10
   26a7a:	4258      	negs	r0, r3
   26a7c:	4158      	adcs	r0, r3
   26a7e:	4770      	bx	lr
		return true;
   26a80:	2001      	movs	r0, #1
}
   26a82:	4770      	bx	lr

00026a84 <skip_command_prefix>:
{
   26a84:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   26a86:	6801      	ldr	r1, [r0, #0]
{
   26a88:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   26a8a:	1c8b      	adds	r3, r1, #2
   26a8c:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   26a8e:	788c      	ldrb	r4, [r1, #2]
   26a90:	4620      	mov	r0, r4
   26a92:	f7ff ffee 	bl	26a72 <is_lfcr>
   26a96:	b910      	cbnz	r0, 26a9e <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26a98:	b10c      	cbz	r4, 26a9e <skip_command_prefix+0x1a>
	(*cmd)++;
   26a9a:	3103      	adds	r1, #3
   26a9c:	6011      	str	r1, [r2, #0]
}
   26a9e:	bd10      	pop	{r4, pc}

00026aa0 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   26aa0:	6813      	ldr	r3, [r2, #0]
   26aa2:	f7ee b995 	b.w	14dd0 <at_parser_max_params_from_str>

00026aa6 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   26aa6:	6803      	ldr	r3, [r0, #0]
   26aa8:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   26aaa:	bf83      	ittte	hi
   26aac:	230c      	movhi	r3, #12
   26aae:	6840      	ldrhi	r0, [r0, #4]
   26ab0:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   26ab4:	2000      	movls	r0, #0
}
   26ab6:	4770      	bx	lr

00026ab8 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   26ab8:	7803      	ldrb	r3, [r0, #0]
   26aba:	2b01      	cmp	r3, #1
   26abc:	d006      	beq.n	26acc <at_param_size+0x14>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   26abe:	2b02      	cmp	r3, #2
   26ac0:	d006      	beq.n	26ad0 <at_param_size+0x18>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   26ac2:	3b03      	subs	r3, #3
   26ac4:	2b01      	cmp	r3, #1
   26ac6:	d805      	bhi.n	26ad4 <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   26ac8:	6840      	ldr	r0, [r0, #4]
   26aca:	4770      	bx	lr
		return sizeof(u16_t);
   26acc:	2002      	movs	r0, #2
   26ace:	4770      	bx	lr
		return sizeof(u32_t);
   26ad0:	2004      	movs	r0, #4
   26ad2:	4770      	bx	lr
	}

	return 0;
   26ad4:	2000      	movs	r0, #0
}
   26ad6:	4770      	bx	lr

00026ad8 <at_param_clear>:
{
   26ad8:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   26ada:	7803      	ldrb	r3, [r0, #0]
{
   26adc:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   26ade:	3b03      	subs	r3, #3
   26ae0:	2b01      	cmp	r3, #1
   26ae2:	d802      	bhi.n	26aea <at_param_clear+0x12>
		k_free(param->value.str_val);
   26ae4:	6880      	ldr	r0, [r0, #8]
   26ae6:	f000 fb2e 	bl	27146 <k_free>
	param->value.int_val = 0;
   26aea:	2300      	movs	r3, #0
   26aec:	60a3      	str	r3, [r4, #8]
}
   26aee:	bd10      	pop	{r4, pc}

00026af0 <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   26af0:	b538      	push	{r3, r4, r5, lr}
   26af2:	460d      	mov	r5, r1
	if (list == NULL) {
   26af4:	4604      	mov	r4, r0
   26af6:	b140      	cbz	r0, 26b0a <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   26af8:	210c      	movs	r1, #12
   26afa:	4628      	mov	r0, r5
   26afc:	f000 fb28 	bl	27150 <k_calloc>
   26b00:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   26b02:	b128      	cbz	r0, 26b10 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   26b04:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   26b06:	6025      	str	r5, [r4, #0]
}
   26b08:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   26b0a:	f06f 0015 	mvn.w	r0, #21
   26b0e:	e7fb      	b.n	26b08 <at_params_list_init+0x18>
		return -ENOMEM;
   26b10:	f06f 000b 	mvn.w	r0, #11
   26b14:	e7f8      	b.n	26b08 <at_params_list_init+0x18>

00026b16 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   26b16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (list == NULL || list->params == NULL) {
   26b1a:	4604      	mov	r4, r0
   26b1c:	b140      	cbz	r0, 26b30 <at_params_list_clear+0x1a>
   26b1e:	6843      	ldr	r3, [r0, #4]
   26b20:	b133      	cbz	r3, 26b30 <at_params_list_clear+0x1a>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   26b22:	2500      	movs	r5, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   26b24:	f04f 0a0c 	mov.w	sl, #12
__ssp_bos_icheck3(memset, void *, int)
   26b28:	462e      	mov	r6, r5
	for (size_t i = 0; i < list->param_count; ++i) {
   26b2a:	6823      	ldr	r3, [r4, #0]
   26b2c:	429d      	cmp	r5, r3
   26b2e:	d301      	bcc.n	26b34 <at_params_list_clear+0x1e>
		at_param_init(&params[i]);
	}
}
   26b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		at_param_clear(&params[i]);
   26b34:	fb0a f805 	mul.w	r8, sl, r5
   26b38:	f8d4 9004 	ldr.w	r9, [r4, #4]
	for (size_t i = 0; i < list->param_count; ++i) {
   26b3c:	3501      	adds	r5, #1
		at_param_clear(&params[i]);
   26b3e:	eb09 0708 	add.w	r7, r9, r8
   26b42:	4638      	mov	r0, r7
   26b44:	f7ff ffc8 	bl	26ad8 <at_param_clear>
   26b48:	f849 6008 	str.w	r6, [r9, r8]
   26b4c:	607e      	str	r6, [r7, #4]
   26b4e:	60be      	str	r6, [r7, #8]
	for (size_t i = 0; i < list->param_count; ++i) {
   26b50:	e7eb      	b.n	26b2a <at_params_list_clear+0x14>

00026b52 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   26b52:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   26b54:	4604      	mov	r4, r0
   26b56:	b148      	cbz	r0, 26b6c <at_params_list_free+0x1a>
   26b58:	6843      	ldr	r3, [r0, #4]
   26b5a:	b13b      	cbz	r3, 26b6c <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   26b5c:	2500      	movs	r5, #0
	at_params_list_clear(list);
   26b5e:	f7ff ffda 	bl	26b16 <at_params_list_clear>
	k_free(list->params);
   26b62:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   26b64:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   26b66:	f000 faee 	bl	27146 <k_free>
	list->params = NULL;
   26b6a:	6065      	str	r5, [r4, #4]
}
   26b6c:	bd38      	pop	{r3, r4, r5, pc}

00026b6e <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   26b6e:	b538      	push	{r3, r4, r5, lr}
   26b70:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   26b72:	b160      	cbz	r0, 26b8e <at_params_short_put+0x20>
   26b74:	6843      	ldr	r3, [r0, #4]
   26b76:	b153      	cbz	r3, 26b8e <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26b78:	f7ff ff95 	bl	26aa6 <at_params_get>

	if (param == NULL) {
   26b7c:	4604      	mov	r4, r0
   26b7e:	b130      	cbz	r0, 26b8e <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   26b80:	f7ff ffaa 	bl	26ad8 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   26b84:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
   26b86:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   26b88:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   26b8a:	60a5      	str	r5, [r4, #8]
}
   26b8c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   26b8e:	f06f 0015 	mvn.w	r0, #21
   26b92:	e7fb      	b.n	26b8c <at_params_short_put+0x1e>

00026b94 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   26b94:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   26b96:	b160      	cbz	r0, 26bb2 <at_params_empty_put+0x1e>
   26b98:	6843      	ldr	r3, [r0, #4]
   26b9a:	b153      	cbz	r3, 26bb2 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26b9c:	f7ff ff83 	bl	26aa6 <at_params_get>

	if (param == NULL) {
   26ba0:	4604      	mov	r4, r0
   26ba2:	b130      	cbz	r0, 26bb2 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   26ba4:	f7ff ff98 	bl	26ad8 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   26ba8:	2305      	movs	r3, #5
	param->value.int_val = 0;
   26baa:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   26bac:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   26bae:	60a0      	str	r0, [r4, #8]

	return 0;
}
   26bb0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   26bb2:	f06f 0015 	mvn.w	r0, #21
   26bb6:	e7fb      	b.n	26bb0 <at_params_empty_put+0x1c>

00026bb8 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   26bb8:	b538      	push	{r3, r4, r5, lr}
   26bba:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   26bbc:	b160      	cbz	r0, 26bd8 <at_params_int_put+0x20>
   26bbe:	6843      	ldr	r3, [r0, #4]
   26bc0:	b153      	cbz	r3, 26bd8 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26bc2:	f7ff ff70 	bl	26aa6 <at_params_get>

	if (param == NULL) {
   26bc6:	4604      	mov	r4, r0
   26bc8:	b130      	cbz	r0, 26bd8 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   26bca:	f7ff ff85 	bl	26ad8 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   26bce:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   26bd0:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   26bd2:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   26bd4:	60a5      	str	r5, [r4, #8]
}
   26bd6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   26bd8:	f06f 0015 	mvn.w	r0, #21
   26bdc:	e7fb      	b.n	26bd6 <at_params_int_put+0x1e>

00026bde <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   26bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26be0:	4617      	mov	r7, r2
   26be2:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   26be4:	b1c0      	cbz	r0, 26c18 <at_params_string_put+0x3a>
   26be6:	6843      	ldr	r3, [r0, #4]
   26be8:	b1b3      	cbz	r3, 26c18 <at_params_string_put+0x3a>
   26bea:	b1aa      	cbz	r2, 26c18 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26bec:	f7ff ff5b 	bl	26aa6 <at_params_get>

	if (param == NULL) {
   26bf0:	4604      	mov	r4, r0
   26bf2:	b188      	cbz	r0, 26c18 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   26bf4:	1c68      	adds	r0, r5, #1
   26bf6:	f7f7 fa19 	bl	1e02c <k_malloc>

	if (param_value == NULL) {
   26bfa:	4606      	mov	r6, r0
   26bfc:	b178      	cbz	r0, 26c1e <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26bfe:	462a      	mov	r2, r5
   26c00:	4639      	mov	r1, r7
   26c02:	f000 fea0 	bl	27946 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   26c06:	4620      	mov	r0, r4
   26c08:	f7ff ff66 	bl	26ad8 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   26c0c:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   26c0e:	2000      	movs	r0, #0
	param->size = str_len;
   26c10:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   26c12:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   26c14:	60a6      	str	r6, [r4, #8]
}
   26c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   26c18:	f06f 0015 	mvn.w	r0, #21
   26c1c:	e7fb      	b.n	26c16 <at_params_string_put+0x38>
		return -ENOMEM;
   26c1e:	f06f 000b 	mvn.w	r0, #11
   26c22:	e7f8      	b.n	26c16 <at_params_string_put+0x38>

00026c24 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   26c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c26:	4617      	mov	r7, r2
   26c28:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   26c2a:	b1c0      	cbz	r0, 26c5e <at_params_array_put+0x3a>
   26c2c:	6843      	ldr	r3, [r0, #4]
   26c2e:	b1b3      	cbz	r3, 26c5e <at_params_array_put+0x3a>
   26c30:	b1aa      	cbz	r2, 26c5e <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26c32:	f7ff ff38 	bl	26aa6 <at_params_get>

	if (param == NULL) {
   26c36:	4604      	mov	r4, r0
   26c38:	b188      	cbz	r0, 26c5e <at_params_array_put+0x3a>
		return -EINVAL;
	}

	u32_t *param_value = (u32_t *)k_malloc(array_len);
   26c3a:	4628      	mov	r0, r5
   26c3c:	f7f7 f9f6 	bl	1e02c <k_malloc>

	if (param_value == NULL) {
   26c40:	4606      	mov	r6, r0
   26c42:	b178      	cbz	r0, 26c64 <at_params_array_put+0x40>
   26c44:	462a      	mov	r2, r5
   26c46:	4639      	mov	r1, r7
   26c48:	f000 fe7d 	bl	27946 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   26c4c:	4620      	mov	r0, r4
   26c4e:	f7ff ff43 	bl	26ad8 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   26c52:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   26c54:	2000      	movs	r0, #0
	param->size = array_len;
   26c56:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   26c58:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   26c5a:	60a6      	str	r6, [r4, #8]
}
   26c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   26c5e:	f06f 0015 	mvn.w	r0, #21
   26c62:	e7fb      	b.n	26c5c <at_params_array_put+0x38>
		return -ENOMEM;
   26c64:	f06f 000b 	mvn.w	r0, #11
   26c68:	e7f8      	b.n	26c5c <at_params_array_put+0x38>

00026c6a <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   26c6a:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   26c6c:	b160      	cbz	r0, 26c88 <at_params_short_get+0x1e>
   26c6e:	6843      	ldr	r3, [r0, #4]
   26c70:	b153      	cbz	r3, 26c88 <at_params_short_get+0x1e>
   26c72:	b14a      	cbz	r2, 26c88 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26c74:	f7ff ff17 	bl	26aa6 <at_params_get>

	if (param == NULL) {
   26c78:	b130      	cbz	r0, 26c88 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   26c7a:	7803      	ldrb	r3, [r0, #0]
   26c7c:	2b01      	cmp	r3, #1
   26c7e:	d103      	bne.n	26c88 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
   26c80:	6883      	ldr	r3, [r0, #8]
	return 0;
   26c82:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   26c84:	8013      	strh	r3, [r2, #0]
}
   26c86:	bd08      	pop	{r3, pc}
		return -EINVAL;
   26c88:	f06f 0015 	mvn.w	r0, #21
   26c8c:	e7fb      	b.n	26c86 <at_params_short_get+0x1c>

00026c8e <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   26c8e:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   26c90:	b168      	cbz	r0, 26cae <at_params_int_get+0x20>
   26c92:	6843      	ldr	r3, [r0, #4]
   26c94:	b15b      	cbz	r3, 26cae <at_params_int_get+0x20>
   26c96:	b152      	cbz	r2, 26cae <at_params_int_get+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26c98:	f7ff ff05 	bl	26aa6 <at_params_get>

	if (param == NULL) {
   26c9c:	b138      	cbz	r0, 26cae <at_params_int_get+0x20>
		return -EINVAL;
	}

	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   26c9e:	7803      	ldrb	r3, [r0, #0]
   26ca0:	3b01      	subs	r3, #1
   26ca2:	2b01      	cmp	r3, #1
   26ca4:	d803      	bhi.n	26cae <at_params_int_get+0x20>
	    (param->type != AT_PARAM_TYPE_NUM_SHORT)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   26ca6:	6883      	ldr	r3, [r0, #8]
	return 0;
   26ca8:	2000      	movs	r0, #0
	*value = param->value.int_val;
   26caa:	6013      	str	r3, [r2, #0]
}
   26cac:	bd08      	pop	{r3, pc}
		return -EINVAL;
   26cae:	f06f 0015 	mvn.w	r0, #21
   26cb2:	e7fb      	b.n	26cac <at_params_int_get+0x1e>

00026cb4 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   26cb4:	b570      	push	{r4, r5, r6, lr}
   26cb6:	4616      	mov	r6, r2
   26cb8:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   26cba:	b1c0      	cbz	r0, 26cee <at_params_string_get+0x3a>
   26cbc:	6843      	ldr	r3, [r0, #4]
   26cbe:	b1b3      	cbz	r3, 26cee <at_params_string_get+0x3a>
   26cc0:	b1aa      	cbz	r2, 26cee <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   26cc2:	b1a4      	cbz	r4, 26cee <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   26cc4:	f7ff feef 	bl	26aa6 <at_params_get>

	if (param == NULL) {
   26cc8:	4601      	mov	r1, r0
   26cca:	b180      	cbz	r0, 26cee <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   26ccc:	7803      	ldrb	r3, [r0, #0]
   26cce:	2b03      	cmp	r3, #3
   26cd0:	d10d      	bne.n	26cee <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   26cd2:	f7ff fef1 	bl	26ab8 <at_param_size>

	if (*len < param_len) {
   26cd6:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   26cd8:	4605      	mov	r5, r0
	if (*len < param_len) {
   26cda:	4283      	cmp	r3, r0
   26cdc:	d30a      	bcc.n	26cf4 <at_params_string_get+0x40>
   26cde:	4602      	mov	r2, r0
   26ce0:	6889      	ldr	r1, [r1, #8]
   26ce2:	4630      	mov	r0, r6
   26ce4:	f000 fe2f 	bl	27946 <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   26ce8:	2000      	movs	r0, #0
	*len = param_len;
   26cea:	6025      	str	r5, [r4, #0]
}
   26cec:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   26cee:	f06f 0015 	mvn.w	r0, #21
   26cf2:	e7fb      	b.n	26cec <at_params_string_get+0x38>
		return -ENOMEM;
   26cf4:	f06f 000b 	mvn.w	r0, #11
   26cf8:	e7f8      	b.n	26cec <at_params_string_get+0x38>

00026cfa <at_params_valid_count_get>:
	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   26cfa:	4602      	mov	r2, r0
{
   26cfc:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   26cfe:	b170      	cbz	r0, 26d1e <at_params_valid_count_get+0x24>
   26d00:	6840      	ldr	r0, [r0, #4]
   26d02:	b160      	cbz	r0, 26d1e <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   26d04:	6811      	ldr	r1, [r2, #0]
   26d06:	b141      	cbz	r1, 26d1a <at_params_valid_count_get+0x20>
   26d08:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   26d0a:	7803      	ldrb	r3, [r0, #0]
   26d0c:	b12b      	cbz	r3, 26d1a <at_params_valid_count_get+0x20>
		valid_i += 1;
		param = at_params_get(list, valid_i);
   26d0e:	4610      	mov	r0, r2
		valid_i += 1;
   26d10:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   26d12:	f7ff fec8 	bl	26aa6 <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   26d16:	2800      	cmp	r0, #0
   26d18:	d1f7      	bne.n	26d0a <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   26d1a:	4608      	mov	r0, r1
   26d1c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   26d1e:	f06f 0115 	mvn.w	r1, #21
   26d22:	e7fa      	b.n	26d1a <at_params_valid_count_get+0x20>

00026d24 <response_is_valid.part.0>:
static bool response_is_valid(const char *response, size_t response_len,
   26d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26d26:	4605      	mov	r5, r0
	if ((response_len < strlen(check)) ||
   26d28:	4610      	mov	r0, r2
static bool response_is_valid(const char *response, size_t response_len,
   26d2a:	460c      	mov	r4, r1
	if ((response_len < strlen(check)) ||
   26d2c:	9201      	str	r2, [sp, #4]
   26d2e:	f7e6 f903 	bl	cf38 <strlen>
   26d32:	42a0      	cmp	r0, r4
   26d34:	d809      	bhi.n	26d4a <response_is_valid.part.0+0x26>
	    (memcmp(response, check, response_len) != 0)) {
   26d36:	4622      	mov	r2, r4
   26d38:	4628      	mov	r0, r5
   26d3a:	9901      	ldr	r1, [sp, #4]
   26d3c:	f000 fdf5 	bl	2792a <memcmp>
	if ((response_len < strlen(check)) ||
   26d40:	fab0 f080 	clz	r0, r0
   26d44:	0940      	lsrs	r0, r0, #5
}
   26d46:	b003      	add	sp, #12
   26d48:	bd30      	pop	{r4, r5, pc}
		return false;
   26d4a:	2000      	movs	r0, #0
   26d4c:	e7fb      	b.n	26d46 <response_is_valid.part.0+0x22>

00026d4e <w_lte_lc_init_and_connect>:
{
   26d4e:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   26d50:	f7ee f9a8 	bl	150a4 <w_lte_lc_init>
	if (ret) {
   26d54:	b920      	cbnz	r0, 26d60 <w_lte_lc_init_and_connect+0x12>
}
   26d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   26d5a:	2001      	movs	r0, #1
   26d5c:	f7ee b9dc 	b.w	15118 <w_lte_lc_connect>
}
   26d60:	bd08      	pop	{r3, pc}

00026d62 <notify_event>:
	if (drv_data->handler) {
   26d62:	68c3      	ldr	r3, [r0, #12]
   26d64:	685b      	ldr	r3, [r3, #4]
   26d66:	b103      	cbz	r3, 26d6a <notify_event+0x8>
		drv_data->handler(dev, evt);
   26d68:	4718      	bx	r3
}
   26d6a:	4770      	bx	lr

00026d6c <stop_work_fn>:
{
   26d6c:	b510      	push	{r4, lr}
	struct device *dev = drv_data->dev;
   26d6e:	f6a0 101c 	subw	r0, r0, #2332	; 0x91c
{
   26d72:	b0b0      	sub	sp, #192	; 0xc0
	struct device *dev = drv_data->dev;
   26d74:	6804      	ldr	r4, [r0, #0]
	struct gps_event evt = {
   26d76:	22c0      	movs	r2, #192	; 0xc0
   26d78:	2100      	movs	r1, #0
   26d7a:	4668      	mov	r0, sp
   26d7c:	f000 fe1d 	bl	279ba <memset>
   26d80:	2301      	movs	r3, #1
	notify_event(dev, &evt);
   26d82:	4669      	mov	r1, sp
   26d84:	4620      	mov	r0, r4
	struct gps_event evt = {
   26d86:	f88d 3000 	strb.w	r3, [sp]
	notify_event(dev, &evt);
   26d8a:	f7ff ffea 	bl	26d62 <notify_event>
}
   26d8e:	b030      	add	sp, #192	; 0xc0
   26d90:	bd10      	pop	{r4, pc}

00026d92 <stop_gps.isra.0>:
static int stop_gps(struct device *dev, bool is_timeout)
   26d92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	nrf_gnss_delete_mask_t delete_mask = 0;
   26d94:	2200      	movs	r2, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26d96:	f100 031c 	add.w	r3, r0, #28
   26d9a:	9203      	str	r2, [sp, #12]
   26d9c:	e8d3 1fef 	ldaex	r1, [r3]
   26da0:	e8c3 2fec 	stlex	ip, r2, [r3]
   26da4:	f1bc 0f00 	cmp.w	ip, #0
   26da8:	d1f8      	bne.n	26d9c <stop_gps.isra.0+0xa>
	retval = nrf_setsockopt(drv_data->socket,
   26daa:	2304      	movs	r3, #4
   26dac:	9300      	str	r3, [sp, #0]
   26dae:	2208      	movs	r2, #8
   26db0:	f44f 7101 	mov.w	r1, #516	; 0x204
   26db4:	ab03      	add	r3, sp, #12
   26db6:	6a00      	ldr	r0, [r0, #32]
   26db8:	f7f5 f988 	bl	1c0cc <nrf_setsockopt>
	if (retval != 0) {
   26dbc:	2800      	cmp	r0, #0
}
   26dbe:	bf18      	it	ne
   26dc0:	f06f 0004 	mvnne.w	r0, #4
   26dc4:	b005      	add	sp, #20
   26dc6:	f85d fb04 	ldr.w	pc, [sp], #4

00026dca <gps_thread>:
{
   26dca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool has_fix = false;
   26dce:	2500      	movs	r5, #0
{
   26dd0:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
	struct gps_drv_data *drv_data = dev->driver_data;
   26dd4:	68c7      	ldr	r7, [r0, #12]
{
   26dd6:	4604      	mov	r4, r0
	struct gps_event evt = {
   26dd8:	22c0      	movs	r2, #192	; 0xc0
   26dda:	2100      	movs	r1, #0
   26ddc:	4668      	mov	r0, sp
   26dde:	f000 fdec 	bl	279ba <memset>
	bool operation_blocked = false;
   26de2:	46a9      	mov	r9, r5
	k_sem_take(&drv_data->thread_run_sem, K_FOREVER);
   26de4:	f607 08e4 	addw	r8, r7, #2276	; 0x8e4
	return z_impl_k_sem_take(sem, timeout);
   26de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26df0:	4640      	mov	r0, r8
   26df2:	f7f7 fe47 	bl	1ea84 <z_impl_k_sem_take>
	notify_event(dev, &evt);
   26df6:	4669      	mov	r1, sp
   26df8:	4620      	mov	r0, r4
   26dfa:	f7ff ffb2 	bl	26d62 <notify_event>
		nrf_gnss_data_frame_t raw_gps_data = {0};
   26dfe:	22d8      	movs	r2, #216	; 0xd8
   26e00:	2100      	movs	r1, #0
   26e02:	a860      	add	r0, sp, #384	; 0x180
   26e04:	f000 fdd9 	bl	279ba <memset>
		struct gps_event evt = {0};
   26e08:	22c0      	movs	r2, #192	; 0xc0
   26e0a:	2100      	movs	r1, #0
   26e0c:	eb0d 0002 	add.w	r0, sp, r2
   26e10:	f000 fdd3 	bl	279ba <memset>
		len = nrf_recv(drv_data->socket, &raw_gps_data,
   26e14:	2300      	movs	r3, #0
   26e16:	22d8      	movs	r2, #216	; 0xd8
   26e18:	6a38      	ldr	r0, [r7, #32]
   26e1a:	a960      	add	r1, sp, #384	; 0x180
   26e1c:	f7f5 f8f2 	bl	1c004 <nrf_recv>
		if (len <= 0) {
   26e20:	1e06      	subs	r6, r0, #0
   26e22:	dc06      	bgt.n	26e32 <gps_thread+0x68>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26e24:	f107 031c 	add.w	r3, r7, #28
   26e28:	e8d3 3faf 	lda	r3, [r3]
			if (!atomic_get(&drv_data->is_active)) {
   26e2c:	2b00      	cmp	r3, #0
   26e2e:	d0db      	beq.n	26de8 <gps_thread+0x1e>
   26e30:	e7e5      	b.n	26dfe <gps_thread+0x34>
		switch (raw_gps_data.data_id) {
   26e32:	f89d a180 	ldrb.w	sl, [sp, #384]	; 0x180
   26e36:	f1ba 0f02 	cmp.w	sl, #2
   26e3a:	f000 8089 	beq.w	26f50 <gps_thread+0x186>
   26e3e:	f1ba 0f03 	cmp.w	sl, #3
   26e42:	f000 8097 	beq.w	26f74 <gps_thread+0x1aa>
   26e46:	f1ba 0f01 	cmp.w	sl, #1
   26e4a:	d1d8      	bne.n	26dfe <gps_thread+0x34>
			if (has_no_time_window(&raw_gps_data.pvt) ||
   26e4c:	f89d 31c4 	ldrb.w	r3, [sp, #452]	; 0x1c4
   26e50:	f013 0f18 	tst.w	r3, #24
   26e54:	d00d      	beq.n	26e72 <gps_thread+0xa8>
				if (operation_blocked) {
   26e56:	f1b9 0f00 	cmp.w	r9, #0
   26e5a:	f040 809e 	bne.w	26f9a <gps_thread+0x1d0>
				evt.type = GPS_EVT_OPERATION_BLOCKED;
   26e5e:	2307      	movs	r3, #7
				notify_event(dev, &evt);
   26e60:	4620      	mov	r0, r4
   26e62:	a930      	add	r1, sp, #192	; 0xc0
			has_fix = false;
   26e64:	464d      	mov	r5, r9
				evt.type = GPS_EVT_OPERATION_BLOCKED;
   26e66:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
				operation_blocked = true;
   26e6a:	46d1      	mov	r9, sl
				notify_event(dev, &evt);
   26e6c:	f7ff ff79 	bl	26d62 <notify_event>
				continue;
   26e70:	e7c5      	b.n	26dfe <gps_thread+0x34>
			} else if (operation_blocked) {
   26e72:	f1b9 0f00 	cmp.w	r9, #0
   26e76:	d006      	beq.n	26e86 <gps_thread+0xbc>
				evt.type = GPS_EVT_OPERATION_UNBLOCKED;
   26e78:	2308      	movs	r3, #8
				notify_event(dev, &evt);
   26e7a:	4620      	mov	r0, r4
   26e7c:	a930      	add	r1, sp, #192	; 0xc0
				evt.type = GPS_EVT_OPERATION_UNBLOCKED;
   26e7e:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
				notify_event(dev, &evt);
   26e82:	f7ff ff6e 	bl	26d62 <notify_event>
	dest->latitude = src->latitude;
   26e86:	e9dd 2362 	ldrd	r2, r3, [sp, #392]	; 0x188
	for (size_t i = 0;
   26e8a:	2100      	movs	r1, #0
	dest->latitude = src->latitude;
   26e8c:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
	dest->longitude = src->longitude;
   26e90:	e9dd 2364 	ldrd	r2, r3, [sp, #400]	; 0x190
   26e94:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
	dest->altitude = src->altitude;
   26e98:	9b66      	ldr	r3, [sp, #408]	; 0x198
	dest->datetime.year = src->datetime.year;
   26e9a:	9a6a      	ldr	r2, [sp, #424]	; 0x1a8
	dest->altitude = src->altitude;
   26e9c:	9336      	str	r3, [sp, #216]	; 0xd8
	dest->accuracy = src->accuracy;
   26e9e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
	dest->datetime.year = src->datetime.year;
   26ea0:	923f      	str	r2, [sp, #252]	; 0xfc
	dest->accuracy = src->accuracy;
   26ea2:	9337      	str	r3, [sp, #220]	; 0xdc
	dest->speed = src->speed;
   26ea4:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
	dest->datetime.hour = src->datetime.hour;
   26ea6:	f8bd 21ac 	ldrh.w	r2, [sp, #428]	; 0x1ac
	dest->speed = src->speed;
   26eaa:	9338      	str	r3, [sp, #224]	; 0xe0
	dest->heading = src->heading;
   26eac:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
	dest->datetime.hour = src->datetime.hour;
   26eae:	f8ad 2100 	strh.w	r2, [sp, #256]	; 0x100
	dest->heading = src->heading;
   26eb2:	9339      	str	r3, [sp, #228]	; 0xe4
	dest->datetime.seconds = src->datetime.seconds;
   26eb4:	f89d 31ae 	ldrb.w	r3, [sp, #430]	; 0x1ae
   26eb8:	aa60      	add	r2, sp, #384	; 0x180
   26eba:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
	dest->datetime.ms = src->datetime.ms;
   26ebe:	f8bd 31b0 	ldrh.w	r3, [sp, #432]	; 0x1b0
   26ec2:	f8ad 3104 	strh.w	r3, [sp, #260]	; 0x104
	dest->pdop = src->pdop;
   26ec6:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
   26ec8:	933a      	str	r3, [sp, #232]	; 0xe8
	dest->hdop = src->hdop;
   26eca:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
   26ecc:	933b      	str	r3, [sp, #236]	; 0xec
	dest->vdop = src->vdop;
   26ece:	9b6f      	ldr	r3, [sp, #444]	; 0x1bc
   26ed0:	933c      	str	r3, [sp, #240]	; 0xf0
	dest->tdop = src->tdop;
   26ed2:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
   26ed4:	933d      	str	r3, [sp, #244]	; 0xf4
	     i < MIN(NRF_GNSS_MAX_SATELLITES, GPS_PVT_MAX_SV_COUNT); i++) {
   26ed6:	ab30      	add	r3, sp, #192	; 0xc0
		dest->sv[i].sv = src->sv[i].sv;
   26ed8:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
	     i < MIN(NRF_GNSS_MAX_SATELLITES, GPS_PVT_MAX_SV_COUNT); i++) {
   26edc:	3101      	adds	r1, #1
		dest->sv[i].sv = src->sv[i].sv;
   26ede:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
		dest->sv[i].cn0 = src->sv[i].cn0;
   26ee2:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
	for (size_t i = 0;
   26ee6:	290c      	cmp	r1, #12
		dest->sv[i].cn0 = src->sv[i].cn0;
   26ee8:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
		dest->sv[i].elevation = src->sv[i].elevation;
   26eec:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
   26ef0:	f103 030a 	add.w	r3, r3, #10
   26ef4:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
		dest->sv[i].azimuth = src->sv[i].azimuth;
   26ef8:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
   26efc:	f102 020c 	add.w	r2, r2, #12
   26f00:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
		dest->sv[i].signal = src->sv[i].signal;
   26f04:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
   26f08:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
	for (size_t i = 0;
   26f0c:	d1e4      	bne.n	26ed8 <gps_thread+0x10e>
		== NRF_GNSS_PVT_FLAG_FIX_VALID_BIT);
   26f0e:	f89d 51c4 	ldrb.w	r5, [sp, #452]	; 0x1c4
			if (is_fix(&raw_gps_data.pvt)) {
   26f12:	f015 0501 	ands.w	r5, r5, #1
   26f16:	d017      	beq.n	26f48 <gps_thread+0x17e>
				evt.type = GPS_EVT_PVT_FIX;
   26f18:	2304      	movs	r3, #4
   26f1a:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
	return z_impl_k_uptime_ticks();
   26f1e:	f000 fbbd 	bl	2769c <z_impl_k_uptime_ticks>
	struct gps_drv_data *drv_data = dev->driver_data;
   26f22:	68e0      	ldr	r0, [r4, #12]
	switch (drv_data->current_cfg.nav_mode) {
   26f24:	7a03      	ldrb	r3, [r0, #8]
   26f26:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   26f2a:	d106      	bne.n	26f3a <gps_thread+0x170>
		k_delayed_work_cancel(&drv_data->timeout_work);
   26f2c:	f600 103c 	addw	r0, r0, #2364	; 0x93c
   26f30:	f000 fb4a 	bl	275c8 <k_delayed_work_cancel>
		stop_gps(dev, false);
   26f34:	68e0      	ldr	r0, [r4, #12]
   26f36:	f7ff ff2c 	bl	26d92 <stop_gps.isra.0>
			notify_event(dev, &evt);
   26f3a:	4620      	mov	r0, r4
   26f3c:	a930      	add	r1, sp, #192	; 0xc0
   26f3e:	f7ff ff10 	bl	26d62 <notify_event>
			print_satellite_stats(&raw_gps_data);
   26f42:	f04f 0900 	mov.w	r9, #0
   26f46:	e75a      	b.n	26dfe <gps_thread+0x34>
				evt.type = GPS_EVT_PVT;
   26f48:	2303      	movs	r3, #3
   26f4a:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
   26f4e:	e7f4      	b.n	26f3a <gps_thread+0x170>
			if (operation_blocked) {
   26f50:	f1b9 0f00 	cmp.w	r9, #0
   26f54:	f47f af53 	bne.w	26dfe <gps_thread+0x34>
			memcpy(evt.nmea.buf, raw_gps_data.nmea, len);
   26f58:	23b8      	movs	r3, #184	; 0xb8
   26f5a:	4632      	mov	r2, r6
   26f5c:	a962      	add	r1, sp, #392	; 0x188
   26f5e:	a832      	add	r0, sp, #200	; 0xc8
   26f60:	f000 fcfe 	bl	27960 <__memcpy_chk>
			evt.nmea.len = len - 1;
   26f64:	3e01      	subs	r6, #1
				evt.type = GPS_EVT_NMEA_FIX;
   26f66:	2d00      	cmp	r5, #0
   26f68:	bf0c      	ite	eq
   26f6a:	2305      	moveq	r3, #5
   26f6c:	2306      	movne	r3, #6
			evt.nmea.len = len - 1;
   26f6e:	f88d 611b 	strb.w	r6, [sp, #283]	; 0x11b
			if (has_fix) {
   26f72:	e7ea      	b.n	26f4a <gps_thread+0x180>
			evt.type = GPS_EVT_AGPS_DATA_NEEDED;
   26f74:	2309      	movs	r3, #9
   26f76:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
			evt.agps_request.sv_mask_ephe =
   26f7a:	9b62      	ldr	r3, [sp, #392]	; 0x188
			evt.agps_request.utc =
   26f7c:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
			evt.agps_request.sv_mask_ephe =
   26f80:	9332      	str	r3, [sp, #200]	; 0xc8
			evt.agps_request.sv_mask_alm =
   26f82:	9b63      	ldr	r3, [sp, #396]	; 0x18c
			evt.agps_request.utc =
   26f84:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
			evt.agps_request.sv_mask_alm =
   26f88:	9333      	str	r3, [sp, #204]	; 0xcc
			evt.agps_request.utc =
   26f8a:	9b64      	ldr	r3, [sp, #400]	; 0x190
			notify_event(dev, &evt);
   26f8c:	a930      	add	r1, sp, #192	; 0xc0
			evt.agps_request.utc =
   26f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26f92:	4313      	orrs	r3, r2
   26f94:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
			notify_event(dev, &evt);
   26f98:	e72e      	b.n	26df8 <gps_thread+0x2e>
			has_fix = false;
   26f9a:	2500      	movs	r5, #0
   26f9c:	e72f      	b.n	26dfe <gps_thread+0x34>

00026f9e <start_work_fn>:
{
   26f9e:	b530      	push	{r4, r5, lr}
   26fa0:	4604      	mov	r4, r0
	struct device *dev = drv_data->dev;
   26fa2:	f6a0 03fc 	subw	r3, r0, #2300	; 0x8fc
{
   26fa6:	b0b1      	sub	sp, #196	; 0xc4
	struct device *dev = drv_data->dev;
   26fa8:	681d      	ldr	r5, [r3, #0]
	struct gps_event evt = {
   26faa:	22c0      	movs	r2, #192	; 0xc0
   26fac:	2100      	movs	r1, #0
   26fae:	4668      	mov	r0, sp
   26fb0:	f000 fd03 	bl	279ba <memset>
	start(dev, &drv_data->current_cfg);
   26fb4:	f6a4 01f4 	subw	r1, r4, #2292	; 0x8f4
   26fb8:	4628      	mov	r0, r5
   26fba:	f7ee fc97 	bl	158ec <start>
	notify_event(dev, &evt);
   26fbe:	4669      	mov	r1, sp
   26fc0:	4628      	mov	r0, r5
   26fc2:	f7ff fece 	bl	26d62 <notify_event>
}
   26fc6:	b031      	add	sp, #196	; 0xc4
   26fc8:	bd30      	pop	{r4, r5, pc}

00026fca <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   26fca:	4700      	bx	r0

00026fcc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   26fcc:	f000 ba93 	b.w	274f6 <z_impl_k_busy_wait>

00026fd0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   26fd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26fd2:	4605      	mov	r5, r0
   26fd4:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   26fd6:	f04f 0320 	mov.w	r3, #32
   26fda:	f3ef 8611 	mrs	r6, BASEPRI
   26fde:	f383 8811 	msr	BASEPRI, r3
   26fe2:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   26fe6:	f7f7 fd21 	bl	1ea2c <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   26fea:	9901      	ldr	r1, [sp, #4]
   26fec:	4604      	mov	r4, r0
   26fee:	4628      	mov	r0, r5
   26ff0:	f7fa fed2 	bl	21d98 <k_sys_fatal_error_handler>
	__asm__ volatile(
   26ff4:	f386 8811 	msr	BASEPRI, r6
   26ff8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   26ffc:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   26ffe:	b002      	add	sp, #8
   27000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27004:	f7e9 b992 	b.w	1032c <z_impl_k_thread_abort>

00027008 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   27008:	f7fb bf6e 	b.w	22ee8 <z_clock_idle_exit>

0002700c <k_heap_init>:
{
   2700c:	b410      	push	{r4}
   2700e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   27012:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   27016:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   2701a:	f7fb bbb9 	b.w	22790 <sys_heap_init>

0002701e <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   2701e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27022:	4605      	mov	r5, r0
   27024:	b085      	sub	sp, #20
   27026:	460f      	mov	r7, r1
	s64_t now, end = z_timeout_end_calc(timeout);
   27028:	4610      	mov	r0, r2
   2702a:	4619      	mov	r1, r3
   2702c:	f000 fb38 	bl	276a0 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   27030:	f105 0b14 	add.w	fp, r5, #20
	s64_t now, end = z_timeout_end_calc(timeout);
   27034:	9002      	str	r0, [sp, #8]
   27036:	468a      	mov	sl, r1
	__asm__ volatile(
   27038:	f04f 0320 	mov.w	r3, #32
   2703c:	f3ef 8411 	mrs	r4, BASEPRI
   27040:	f383 8811 	msr	BASEPRI, r3
   27044:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   27048:	f105 060c 	add.w	r6, r5, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   2704c:	4639      	mov	r1, r7
   2704e:	4628      	mov	r0, r5
   27050:	f7fb fb45 	bl	226de <sys_heap_alloc>
   27054:	9003      	str	r0, [sp, #12]
		now = z_tick_get();
   27056:	f7f7 ffa1 	bl	1ef9c <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   2705a:	9b03      	ldr	r3, [sp, #12]
   2705c:	b13b      	cbz	r3, 2706e <k_heap_alloc+0x50>
	__asm__ volatile(
   2705e:	f384 8811 	msr	BASEPRI, r4
   27062:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   27066:	4618      	mov	r0, r3
   27068:	b005      	add	sp, #20
   2706a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   2706e:	9a02      	ldr	r2, [sp, #8]
   27070:	ebb2 0800 	subs.w	r8, r2, r0
   27074:	eb6a 0901 	sbc.w	r9, sl, r1
   27078:	f1b8 0f01 	cmp.w	r8, #1
   2707c:	f179 0200 	sbcs.w	r2, r9, #0
   27080:	dbed      	blt.n	2705e <k_heap_alloc+0x40>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   27082:	4632      	mov	r2, r6
   27084:	4621      	mov	r1, r4
   27086:	4658      	mov	r0, fp
   27088:	e9cd 8900 	strd	r8, r9, [sp]
   2708c:	f7f7 fc02 	bl	1e894 <z_pend_curr>
	__asm__ volatile(
   27090:	f04f 0320 	mov.w	r3, #32
   27094:	f3ef 8411 	mrs	r4, BASEPRI
   27098:	f383 8811 	msr	BASEPRI, r3
   2709c:	f3bf 8f6f 	isb	sy
   270a0:	e7d4      	b.n	2704c <k_heap_alloc+0x2e>

000270a2 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   270a2:	b538      	push	{r3, r4, r5, lr}
   270a4:	4604      	mov	r4, r0
   270a6:	f04f 0320 	mov.w	r3, #32
   270aa:	f3ef 8511 	mrs	r5, BASEPRI
   270ae:	f383 8811 	msr	BASEPRI, r3
   270b2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   270b6:	f7fb fa5c 	bl	22572 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   270ba:	f104 000c 	add.w	r0, r4, #12
   270be:	f000 f9f4 	bl	274aa <z_unpend_all>
   270c2:	b130      	cbz	r0, 270d2 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   270c4:	4629      	mov	r1, r5
   270c6:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   270ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   270ce:	f000 b908 	b.w	272e2 <z_reschedule>
	__asm__ volatile(
   270d2:	f385 8811 	msr	BASEPRI, r5
   270d6:	f3bf 8f6f 	isb	sy
}
   270da:	bd38      	pop	{r3, r4, r5, pc}

000270dc <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   270dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   270de:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   270e2:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   270e4:	6800      	ldr	r0, [r0, #0]
{
   270e6:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   270e8:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   270ea:	4632      	mov	r2, r6
   270ec:	463b      	mov	r3, r7
   270ee:	4621      	mov	r1, r4
   270f0:	f7ff ff95 	bl	2701e <k_heap_alloc>
   270f4:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   270f6:	b144      	cbz	r4, 2710a <k_mem_pool_alloc+0x2e>
   270f8:	b938      	cbnz	r0, 2710a <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   270fa:	ea56 0307 	orrs.w	r3, r6, r7
   270fe:	bf0c      	ite	eq
   27100:	f06f 000b 	mvneq.w	r0, #11
   27104:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   27108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   2710a:	2000      	movs	r0, #0
   2710c:	e7fc      	b.n	27108 <k_mem_pool_alloc+0x2c>

0002710e <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   2710e:	e9d0 1000 	ldrd	r1, r0, [r0]
   27112:	f7ff bfc6 	b.w	270a2 <k_heap_free>

00027116 <k_mem_pool_malloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   27116:	2208      	movs	r2, #8
{
   27118:	b530      	push	{r4, r5, lr}
   2711a:	188a      	adds	r2, r1, r2
   2711c:	b085      	sub	sp, #20
   2711e:	d207      	bcs.n	27130 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   27120:	2400      	movs	r4, #0
   27122:	2500      	movs	r5, #0
   27124:	a902      	add	r1, sp, #8
   27126:	e9cd 4500 	strd	r4, r5, [sp]
   2712a:	f7ff ffd7 	bl	270dc <k_mem_pool_alloc>
   2712e:	b110      	cbz	r0, 27136 <k_mem_pool_malloc+0x20>
		return NULL;
   27130:	2000      	movs	r0, #0
}
   27132:	b005      	add	sp, #20
   27134:	bd30      	pop	{r4, r5, pc}
   27136:	9a02      	ldr	r2, [sp, #8]
   27138:	ab02      	add	r3, sp, #8
   2713a:	cb03      	ldmia	r3!, {r0, r1}
   2713c:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   2713e:	9802      	ldr	r0, [sp, #8]
   27140:	6051      	str	r1, [r2, #4]
   27142:	3008      	adds	r0, #8
   27144:	e7f5      	b.n	27132 <k_mem_pool_malloc+0x1c>

00027146 <k_free>:
	if (ptr != NULL) {
   27146:	b110      	cbz	r0, 2714e <k_free+0x8>
		k_mem_pool_free_id(ptr);
   27148:	3808      	subs	r0, #8
   2714a:	f7ff bfe0 	b.w	2710e <k_mem_pool_free_id>
}
   2714e:	4770      	bx	lr

00027150 <k_calloc>:
{
   27150:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   27152:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   27156:	b118      	cbz	r0, 27160 <k_calloc+0x10>
   27158:	fbb2 f0f0 	udiv	r0, r2, r0
   2715c:	4281      	cmp	r1, r0
   2715e:	d10c      	bne.n	2717a <k_calloc+0x2a>
	ret = k_malloc(bounds);
   27160:	4610      	mov	r0, r2
   27162:	9201      	str	r2, [sp, #4]
   27164:	f7f6 ff62 	bl	1e02c <k_malloc>
	if (ret != NULL) {
   27168:	4604      	mov	r4, r0
   2716a:	b118      	cbz	r0, 27174 <k_calloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
   2716c:	2100      	movs	r1, #0
   2716e:	9a01      	ldr	r2, [sp, #4]
   27170:	f000 fc23 	bl	279ba <memset>
}
   27174:	4620      	mov	r0, r4
   27176:	b002      	add	sp, #8
   27178:	bd10      	pop	{r4, pc}
		return NULL;
   2717a:	2400      	movs	r4, #0
   2717c:	e7fa      	b.n	27174 <k_calloc+0x24>

0002717e <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   2717e:	2300      	movs	r3, #0
   27180:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   27184:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   27188:	4618      	mov	r0, r3
   2718a:	4770      	bx	lr

0002718c <queue_insert>:
{
   2718c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27190:	4604      	mov	r4, r0
   27192:	460d      	mov	r5, r1
   27194:	4690      	mov	r8, r2
   27196:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   27198:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2719c:	f04f 0320 	mov.w	r3, #32
   271a0:	f3ef 8711 	mrs	r7, BASEPRI
   271a4:	f383 8811 	msr	BASEPRI, r3
   271a8:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   271ac:	4630      	mov	r0, r6
   271ae:	f000 f94f 	bl	27450 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   271b2:	b158      	cbz	r0, 271cc <queue_insert+0x40>
   271b4:	2400      	movs	r4, #0
   271b6:	f8c0 8014 	str.w	r8, [r0, #20]
   271ba:	6704      	str	r4, [r0, #112]	; 0x70
	z_ready_thread(thread);
   271bc:	f000 f8d5 	bl	2736a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   271c0:	4630      	mov	r0, r6
   271c2:	4639      	mov	r1, r7
   271c4:	f000 f88d 	bl	272e2 <z_reschedule>
	return 0;
   271c8:	2000      	movs	r0, #0
   271ca:	e00c      	b.n	271e6 <queue_insert+0x5a>
	if (alloc) {
   271cc:	f1b9 0f00 	cmp.w	r9, #0
   271d0:	d01b      	beq.n	2720a <queue_insert+0x7e>
		anode = z_thread_malloc(sizeof(*anode));
   271d2:	2008      	movs	r0, #8
   271d4:	f7f6 ff30 	bl	1e038 <z_thread_malloc>
		if (anode == NULL) {
   271d8:	b938      	cbnz	r0, 271ea <queue_insert+0x5e>
	__asm__ volatile(
   271da:	f387 8811 	msr	BASEPRI, r7
   271de:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   271e2:	f06f 000b 	mvn.w	r0, #11
}
   271e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   271ea:	2301      	movs	r3, #1
		anode->data = data;
   271ec:	f8c0 8004 	str.w	r8, [r0, #4]
   271f0:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   271f2:	6803      	ldr	r3, [r0, #0]
   271f4:	f003 0203 	and.w	r2, r3, #3
   271f8:	b95d      	cbnz	r5, 27212 <queue_insert+0x86>
	parent->next_and_flags = cur_flags | (unative_t)child;
   271fa:	6823      	ldr	r3, [r4, #0]
   271fc:	4313      	orrs	r3, r2
   271fe:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   27200:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   27202:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   27204:	b973      	cbnz	r3, 27224 <queue_insert+0x98>
	list->tail = node;
   27206:	6060      	str	r0, [r4, #4]
}
   27208:	e00c      	b.n	27224 <queue_insert+0x98>
}
   2720a:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   2720c:	f8c8 9000 	str.w	r9, [r8]
}
   27210:	e7ef      	b.n	271f2 <queue_insert+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27212:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   27214:	f033 0303 	bics.w	r3, r3, #3
   27218:	d110      	bne.n	2723c <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2721a:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2721c:	6862      	ldr	r2, [r4, #4]
   2721e:	b93a      	cbnz	r2, 27230 <queue_insert+0xa4>
	list->head = node;
   27220:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   27224:	2104      	movs	r1, #4
   27226:	f104 0010 	add.w	r0, r4, #16
   2722a:	f000 fb59 	bl	278e0 <z_handle_obj_poll_events>
   2722e:	e7c7      	b.n	271c0 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27230:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27232:	f003 0303 	and.w	r3, r3, #3
   27236:	4303      	orrs	r3, r0
   27238:	6013      	str	r3, [r2, #0]
   2723a:	e7e4      	b.n	27206 <queue_insert+0x7a>
   2723c:	4313      	orrs	r3, r2
   2723e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27240:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27242:	f003 0303 	and.w	r3, r3, #3
   27246:	4303      	orrs	r3, r0
   27248:	602b      	str	r3, [r5, #0]
}
   2724a:	e7eb      	b.n	27224 <queue_insert+0x98>

0002724c <z_queue_node_peek>:
{
   2724c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   2724e:	4604      	mov	r4, r0
   27250:	b130      	cbz	r0, 27260 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27252:	6802      	ldr	r2, [r0, #0]
   27254:	0793      	lsls	r3, r2, #30
   27256:	d003      	beq.n	27260 <z_queue_node_peek+0x14>
		ret = anode->data;
   27258:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2725a:	b109      	cbz	r1, 27260 <z_queue_node_peek+0x14>
			k_free(anode);
   2725c:	f7ff ff73 	bl	27146 <k_free>
}
   27260:	4620      	mov	r0, r4
   27262:	bd10      	pop	{r4, pc}

00027264 <z_impl_k_queue_init>:
	list->head = NULL;
   27264:	2300      	movs	r3, #0
	list->tail = NULL;
   27266:	e9c0 3300 	strd	r3, r3, [r0]
   2726a:	f100 0308 	add.w	r3, r0, #8
   2726e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   27272:	f100 0310 	add.w	r3, r0, #16
   27276:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2727a:	4770      	bx	lr

0002727c <z_impl_k_queue_cancel_wait>:
{
   2727c:	b570      	push	{r4, r5, r6, lr}
   2727e:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   27280:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   27284:	f04f 0320 	mov.w	r3, #32
   27288:	f3ef 8611 	mrs	r6, BASEPRI
   2728c:	f383 8811 	msr	BASEPRI, r3
   27290:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   27294:	4628      	mov	r0, r5
   27296:	f000 f8db 	bl	27450 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2729a:	b120      	cbz	r0, 272a6 <z_impl_k_queue_cancel_wait+0x2a>
   2729c:	2200      	movs	r2, #0
   2729e:	6702      	str	r2, [r0, #112]	; 0x70
   272a0:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   272a2:	f000 f862 	bl	2736a <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   272a6:	f104 0010 	add.w	r0, r4, #16
   272aa:	2108      	movs	r1, #8
   272ac:	f000 fb18 	bl	278e0 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   272b0:	4631      	mov	r1, r6
   272b2:	4628      	mov	r0, r5
}
   272b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   272b8:	f000 b813 	b.w	272e2 <z_reschedule>

000272bc <k_queue_append>:
{
   272bc:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   272be:	2300      	movs	r3, #0
   272c0:	6841      	ldr	r1, [r0, #4]
   272c2:	f7ff bf63 	b.w	2718c <queue_insert>

000272c6 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   272c6:	2300      	movs	r3, #0
{
   272c8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
   272ca:	4619      	mov	r1, r3
   272cc:	f7ff bf5e 	b.w	2718c <queue_insert>

000272d0 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   272d0:	f990 000e 	ldrsb.w	r0, [r0, #14]
   272d4:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   272d8:	4298      	cmp	r0, r3
   272da:	bfac      	ite	ge
   272dc:	2000      	movge	r0, #0
   272de:	2001      	movlt	r0, #1
   272e0:	4770      	bx	lr

000272e2 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   272e2:	b921      	cbnz	r1, 272ee <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   272e4:	f3ef 8005 	mrs	r0, IPSR
   272e8:	b908      	cbnz	r0, 272ee <z_reschedule+0xc>
   272ea:	f7e8 bd99 	b.w	fe20 <arch_swap>
	__asm__ volatile(
   272ee:	f381 8811 	msr	BASEPRI, r1
   272f2:	f3bf 8f6f 	isb	sy
}
   272f6:	4770      	bx	lr

000272f8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   272f8:	4603      	mov	r3, r0
   272fa:	b920      	cbnz	r0, 27306 <z_reschedule_irqlock+0xe>
   272fc:	f3ef 8205 	mrs	r2, IPSR
   27300:	b90a      	cbnz	r2, 27306 <z_reschedule_irqlock+0xe>
   27302:	f7e8 bd8d 	b.w	fe20 <arch_swap>
   27306:	f383 8811 	msr	BASEPRI, r3
   2730a:	f3bf 8f6f 	isb	sy
}
   2730e:	4770      	bx	lr

00027310 <z_reschedule_unlocked>:
	__asm__ volatile(
   27310:	f04f 0320 	mov.w	r3, #32
   27314:	f3ef 8011 	mrs	r0, BASEPRI
   27318:	f383 8811 	msr	BASEPRI, r3
   2731c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   27320:	f7ff bfea 	b.w	272f8 <z_reschedule_irqlock>

00027324 <z_unpend_thread>:
{
   27324:	b510      	push	{r4, lr}
   27326:	4601      	mov	r1, r0
   27328:	f04f 0320 	mov.w	r3, #32
   2732c:	f3ef 8411 	mrs	r4, BASEPRI
   27330:	f383 8811 	msr	BASEPRI, r3
   27334:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   27338:	6880      	ldr	r0, [r0, #8]
   2733a:	f7f7 f891 	bl	1e460 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2733e:	7b4b      	ldrb	r3, [r1, #13]
   27340:	f023 0302 	bic.w	r3, r3, #2
   27344:	734b      	strb	r3, [r1, #13]
		thread->base.pended_on = NULL;
   27346:	2300      	movs	r3, #0
   27348:	608b      	str	r3, [r1, #8]
	__asm__ volatile(
   2734a:	f384 8811 	msr	BASEPRI, r4
   2734e:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   27352:	f101 0018 	add.w	r0, r1, #24
}
   27356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2735a:	f000 b94a 	b.w	275f2 <z_abort_timeout>

0002735e <z_priq_dumb_best>:
	return list->head == list;
   2735e:	6803      	ldr	r3, [r0, #0]
}
   27360:	4298      	cmp	r0, r3
   27362:	bf14      	ite	ne
   27364:	4618      	movne	r0, r3
   27366:	2000      	moveq	r0, #0
   27368:	4770      	bx	lr

0002736a <z_ready_thread>:
{
   2736a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2736c:	f04f 0320 	mov.w	r3, #32
   27370:	f3ef 8411 	mrs	r4, BASEPRI
   27374:	f383 8811 	msr	BASEPRI, r3
   27378:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   2737c:	f7f7 f8c6 	bl	1e50c <ready_thread>
	__asm__ volatile(
   27380:	f384 8811 	msr	BASEPRI, r4
   27384:	f3bf 8f6f 	isb	sy
}
   27388:	bd10      	pop	{r4, pc}

0002738a <z_thread_timeout>:
{
   2738a:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   2738c:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   27390:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   27392:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   27396:	b1c3      	cbz	r3, 273ca <z_thread_timeout+0x40>
	__asm__ volatile(
   27398:	f04f 0320 	mov.w	r3, #32
   2739c:	f3ef 8511 	mrs	r5, BASEPRI
   273a0:	f383 8811 	msr	BASEPRI, r3
   273a4:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   273a8:	f850 0c10 	ldr.w	r0, [r0, #-16]
   273ac:	f7f7 f858 	bl	1e460 <z_priq_dumb_remove>
   273b0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   273b4:	f023 0302 	bic.w	r3, r3, #2
   273b8:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   273bc:	2300      	movs	r3, #0
   273be:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   273c2:	f385 8811 	msr	BASEPRI, r5
   273c6:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   273ca:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   273ce:	4608      	mov	r0, r1
   273d0:	f023 0314 	bic.w	r3, r3, #20
   273d4:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
   273d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   273dc:	f7ff bfc5 	b.w	2736a <z_ready_thread>

000273e0 <z_remove_thread_from_ready_q>:
{
   273e0:	b510      	push	{r4, lr}
	__asm__ volatile(
   273e2:	f04f 0320 	mov.w	r3, #32
   273e6:	f3ef 8411 	mrs	r4, BASEPRI
   273ea:	f383 8811 	msr	BASEPRI, r3
   273ee:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   273f2:	f7f7 f9e1 	bl	1e7b8 <unready_thread>
	__asm__ volatile(
   273f6:	f384 8811 	msr	BASEPRI, r4
   273fa:	f3bf 8f6f 	isb	sy
}
   273fe:	bd10      	pop	{r4, pc}

00027400 <add_to_waitq_locked>:
{
   27400:	b538      	push	{r3, r4, r5, lr}
   27402:	4604      	mov	r4, r0
   27404:	460d      	mov	r5, r1
	unready_thread(thread);
   27406:	f7f7 f9d7 	bl	1e7b8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2740a:	7b63      	ldrb	r3, [r4, #13]
   2740c:	f043 0302 	orr.w	r3, r3, #2
   27410:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   27412:	b17d      	cbz	r5, 27434 <add_to_waitq_locked+0x34>
   27414:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   27416:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27418:	429d      	cmp	r5, r3
   2741a:	d012      	beq.n	27442 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2741c:	b18b      	cbz	r3, 27442 <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   2741e:	f994 200e 	ldrsb.w	r2, [r4, #14]
   27422:	f993 100e 	ldrsb.w	r1, [r3, #14]
   27426:	4291      	cmp	r1, r2
   27428:	dd05      	ble.n	27436 <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   2742a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2742c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   27430:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27432:	605c      	str	r4, [r3, #4]
}
   27434:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   27436:	6869      	ldr	r1, [r5, #4]
   27438:	428b      	cmp	r3, r1
   2743a:	d002      	beq.n	27442 <add_to_waitq_locked+0x42>
   2743c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2743e:	2b00      	cmp	r3, #0
   27440:	d1ef      	bne.n	27422 <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   27442:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   27444:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   27446:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   27448:	686b      	ldr	r3, [r5, #4]
   2744a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2744c:	606c      	str	r4, [r5, #4]
}
   2744e:	e7f1      	b.n	27434 <add_to_waitq_locked+0x34>

00027450 <z_unpend_first_thread>:
{
   27450:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   27452:	f04f 0320 	mov.w	r3, #32
   27456:	f3ef 8211 	mrs	r2, BASEPRI
   2745a:	f383 8811 	msr	BASEPRI, r3
   2745e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   27462:	f7ff ff7c 	bl	2735e <z_priq_dumb_best>
   27466:	4604      	mov	r4, r0
	__asm__ volatile(
   27468:	f382 8811 	msr	BASEPRI, r2
   2746c:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   27470:	b1c8      	cbz	r0, 274a6 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   27472:	f04f 0320 	mov.w	r3, #32
   27476:	f3ef 8511 	mrs	r5, BASEPRI
   2747a:	f383 8811 	msr	BASEPRI, r3
   2747e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   27482:	4601      	mov	r1, r0
   27484:	6880      	ldr	r0, [r0, #8]
   27486:	f7f6 ffeb 	bl	1e460 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2748a:	7b63      	ldrb	r3, [r4, #13]
   2748c:	f023 0302 	bic.w	r3, r3, #2
   27490:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   27492:	2300      	movs	r3, #0
   27494:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   27496:	f385 8811 	msr	BASEPRI, r5
   2749a:	f3bf 8f6f 	isb	sy
   2749e:	f104 0018 	add.w	r0, r4, #24
   274a2:	f000 f8a6 	bl	275f2 <z_abort_timeout>
}
   274a6:	4620      	mov	r0, r4
   274a8:	bd38      	pop	{r3, r4, r5, pc}

000274aa <z_unpend_all>:
{
   274aa:	b538      	push	{r3, r4, r5, lr}
   274ac:	4605      	mov	r5, r0
	int need_sched = 0;
   274ae:	2000      	movs	r0, #0
	return list->head == list;
   274b0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   274b2:	42a5      	cmp	r5, r4
   274b4:	d000      	beq.n	274b8 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   274b6:	b904      	cbnz	r4, 274ba <z_unpend_all+0x10>
}
   274b8:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   274ba:	4620      	mov	r0, r4
   274bc:	f7ff ff32 	bl	27324 <z_unpend_thread>
		z_ready_thread(thread);
   274c0:	4620      	mov	r0, r4
   274c2:	f7ff ff52 	bl	2736a <z_ready_thread>
		need_sched = 1;
   274c6:	2001      	movs	r0, #1
   274c8:	e7f2      	b.n	274b0 <z_unpend_all+0x6>

000274ca <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   274ca:	b15a      	cbz	r2, 274e4 <z_impl_k_sem_init+0x1a>
   274cc:	428a      	cmp	r2, r1
   274ce:	d309      	bcc.n	274e4 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   274d0:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   274d4:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   274d8:	e9c0 0000 	strd	r0, r0, [r0]
   274dc:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   274e0:	2000      	movs	r0, #0
   274e2:	4770      	bx	lr
		return -EINVAL;
   274e4:	f06f 0015 	mvn.w	r0, #21
}
   274e8:	4770      	bx	lr

000274ea <k_is_in_isr>:
   274ea:	f3ef 8005 	mrs	r0, IPSR
}
   274ee:	3800      	subs	r0, #0
   274f0:	bf18      	it	ne
   274f2:	2001      	movne	r0, #1
   274f4:	4770      	bx	lr

000274f6 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   274f6:	f7e7 bfd7 	b.w	f4a8 <arch_busy_wait>

000274fa <z_impl_k_thread_name_set>:
}
   274fa:	f06f 0057 	mvn.w	r0, #87	; 0x57
   274fe:	4770      	bx	lr

00027500 <k_work_submit_to_queue>:
{
   27500:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27502:	f101 0308 	add.w	r3, r1, #8
   27506:	e8d3 2fef 	ldaex	r2, [r3]
   2750a:	f042 0c01 	orr.w	ip, r2, #1
   2750e:	e8c3 cfee 	stlex	lr, ip, [r3]
   27512:	f1be 0f00 	cmp.w	lr, #0
   27516:	d1f6      	bne.n	27506 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   27518:	07d3      	lsls	r3, r2, #31
   2751a:	d403      	bmi.n	27524 <k_work_submit_to_queue+0x24>
}
   2751c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   27520:	f7ff becc 	b.w	272bc <k_queue_append>
}
   27524:	f85d fb04 	ldr.w	pc, [sp], #4

00027528 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   27528:	f1a0 010c 	sub.w	r1, r0, #12
   2752c:	6900      	ldr	r0, [r0, #16]
   2752e:	f7ff bfe7 	b.w	27500 <k_work_submit_to_queue>

00027532 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   27532:	69c3      	ldr	r3, [r0, #28]
{
   27534:	b570      	push	{r4, r5, r6, lr}
   27536:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   27538:	b913      	cbnz	r3, 27540 <work_cancel+0xe>
		return -EALREADY;
   2753a:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   2753e:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   27540:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27544:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   27548:	07db      	lsls	r3, r3, #31
   2754a:	d52f      	bpl.n	275ac <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2754c:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2754e:	69c2      	ldr	r2, [r0, #28]
   27550:	6813      	ldr	r3, [r2, #0]
   27552:	b913      	cbnz	r3, 2755a <work_cancel+0x28>
			return -EINVAL;
   27554:	f06f 0015 	mvn.w	r0, #21
   27558:	e7f1      	b.n	2753e <work_cancel+0xc>
   2755a:	429c      	cmp	r4, r3
   2755c:	d121      	bne.n	275a2 <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   2755e:	6823      	ldr	r3, [r4, #0]
   27560:	6856      	ldr	r6, [r2, #4]
   27562:	f023 0003 	bic.w	r0, r3, #3
   27566:	b991      	cbnz	r1, 2758e <work_cancel+0x5c>
   27568:	42b4      	cmp	r4, r6
	list->head = node;
   2756a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2756c:	d100      	bne.n	27570 <work_cancel+0x3e>
	list->tail = node;
   2756e:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27570:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27572:	f003 0303 	and.w	r3, r3, #3
   27576:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   27578:	2000      	movs	r0, #0
   2757a:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2757c:	e8d5 3fef 	ldaex	r3, [r5]
   27580:	f023 0301 	bic.w	r3, r3, #1
   27584:	e8c5 3fe2 	stlex	r2, r3, [r5]
   27588:	2a00      	cmp	r2, #0
   2758a:	d0d8      	beq.n	2753e <work_cancel+0xc>
   2758c:	e7f6      	b.n	2757c <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2758e:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   27590:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   27592:	f003 0303 	and.w	r3, r3, #3
   27596:	ea43 0300 	orr.w	r3, r3, r0
   2759a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2759c:	bf08      	it	eq
   2759e:	6051      	streq	r1, [r2, #4]
}
   275a0:	e7e6      	b.n	27570 <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   275a2:	6818      	ldr	r0, [r3, #0]
   275a4:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   275a6:	f020 0303 	bic.w	r3, r0, #3
   275aa:	e7d2      	b.n	27552 <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   275ac:	300c      	adds	r0, #12
   275ae:	f000 f820 	bl	275f2 <z_abort_timeout>
		if (err) {
   275b2:	2800      	cmp	r0, #0
   275b4:	d0e0      	beq.n	27578 <work_cancel+0x46>
   275b6:	e7c0      	b.n	2753a <work_cancel+0x8>

000275b8 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   275b8:	2300      	movs	r3, #0
   275ba:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   275be:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   275c2:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   275c4:	61c3      	str	r3, [r0, #28]
}
   275c6:	4770      	bx	lr

000275c8 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   275c8:	69c3      	ldr	r3, [r0, #28]
{
   275ca:	b510      	push	{r4, lr}
	if (!work->work_q) {
   275cc:	b173      	cbz	r3, 275ec <k_delayed_work_cancel+0x24>
	__asm__ volatile(
   275ce:	f04f 0320 	mov.w	r3, #32
   275d2:	f3ef 8411 	mrs	r4, BASEPRI
   275d6:	f383 8811 	msr	BASEPRI, r3
   275da:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   275de:	f7ff ffa8 	bl	27532 <work_cancel>
	__asm__ volatile(
   275e2:	f384 8811 	msr	BASEPRI, r4
   275e6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   275ea:	bd10      	pop	{r4, pc}
		return -EINVAL;
   275ec:	f06f 0015 	mvn.w	r0, #21
   275f0:	e7fb      	b.n	275ea <k_delayed_work_cancel+0x22>

000275f2 <z_abort_timeout>:
{
   275f2:	b510      	push	{r4, lr}
	__asm__ volatile(
   275f4:	f04f 0220 	mov.w	r2, #32
   275f8:	f3ef 8411 	mrs	r4, BASEPRI
   275fc:	f382 8811 	msr	BASEPRI, r2
   27600:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   27604:	6803      	ldr	r3, [r0, #0]
   27606:	b13b      	cbz	r3, 27618 <z_abort_timeout+0x26>
			remove_timeout(to);
   27608:	f7f7 fba4 	bl	1ed54 <remove_timeout>
			ret = 0;
   2760c:	2000      	movs	r0, #0
	__asm__ volatile(
   2760e:	f384 8811 	msr	BASEPRI, r4
   27612:	f3bf 8f6f 	isb	sy
}
   27616:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   27618:	f06f 0015 	mvn.w	r0, #21
   2761c:	e7f7      	b.n	2760e <z_abort_timeout+0x1c>

0002761e <z_timeout_remaining>:
{
   2761e:	b510      	push	{r4, lr}
	__asm__ volatile(
   27620:	f04f 0320 	mov.w	r3, #32
   27624:	f3ef 8411 	mrs	r4, BASEPRI
   27628:	f383 8811 	msr	BASEPRI, r3
   2762c:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   27630:	f7f7 fbc0 	bl	1edb4 <timeout_rem>
	__asm__ volatile(
   27634:	f384 8811 	msr	BASEPRI, r4
   27638:	f3bf 8f6f 	isb	sy
}
   2763c:	bd10      	pop	{r4, pc}

0002763e <z_get_next_timeout_expiry>:
{
   2763e:	b510      	push	{r4, lr}
	__asm__ volatile(
   27640:	f04f 0320 	mov.w	r3, #32
   27644:	f3ef 8411 	mrs	r4, BASEPRI
   27648:	f383 8811 	msr	BASEPRI, r3
   2764c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   27650:	f7f7 fb94 	bl	1ed7c <next_timeout>
	__asm__ volatile(
   27654:	f384 8811 	msr	BASEPRI, r4
   27658:	f3bf 8f6f 	isb	sy
}
   2765c:	bd10      	pop	{r4, pc}

0002765e <z_set_timeout_expiry>:
{
   2765e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27660:	4604      	mov	r4, r0
   27662:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   27664:	f04f 0320 	mov.w	r3, #32
   27668:	f3ef 8511 	mrs	r5, BASEPRI
   2766c:	f383 8811 	msr	BASEPRI, r3
   27670:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   27674:	f7f7 fb82 	bl	1ed7c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   27678:	2801      	cmp	r0, #1
   2767a:	dd05      	ble.n	27688 <z_set_timeout_expiry+0x2a>
   2767c:	42a0      	cmp	r0, r4
   2767e:	9901      	ldr	r1, [sp, #4]
   27680:	dd02      	ble.n	27688 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   27682:	4620      	mov	r0, r4
   27684:	f7e8 fb34 	bl	fcf0 <z_clock_set_timeout>
	__asm__ volatile(
   27688:	f385 8811 	msr	BASEPRI, r5
   2768c:	f3bf 8f6f 	isb	sy
}
   27690:	b003      	add	sp, #12
   27692:	bd30      	pop	{r4, r5, pc}

00027694 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   27694:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   27696:	f7f7 fc81 	bl	1ef9c <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   2769a:	bd08      	pop	{r3, pc}

0002769c <z_impl_k_uptime_ticks>:

s64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2769c:	f7f7 bc7e 	b.w	1ef9c <z_tick_get>

000276a0 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
u64_t z_timeout_end_calc(k_timeout_t timeout)
{
   276a0:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   276a2:	1c4b      	adds	r3, r1, #1
   276a4:	bf08      	it	eq
   276a6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   276aa:	4604      	mov	r4, r0
   276ac:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   276ae:	d013      	beq.n	276d8 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   276b0:	ea54 0105 	orrs.w	r1, r4, r5
   276b4:	d103      	bne.n	276be <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   276b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   276ba:	f7f7 bc6f 	b.w	1ef9c <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   276be:	f06f 0101 	mvn.w	r1, #1
   276c2:	1a0a      	subs	r2, r1, r0
   276c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   276c8:	eb61 0305 	sbc.w	r3, r1, r5
   276cc:	2a00      	cmp	r2, #0
   276ce:	f173 0100 	sbcs.w	r1, r3, #0
   276d2:	db02      	blt.n	276da <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   276d4:	4610      	mov	r0, r2
   276d6:	4619      	mov	r1, r3
}
   276d8:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   276da:	f7f7 fc5f 	bl	1ef9c <z_tick_get>
   276de:	2c01      	cmp	r4, #1
   276e0:	f175 0300 	sbcs.w	r3, r5, #0
   276e4:	bfbc      	itt	lt
   276e6:	2401      	movlt	r4, #1
   276e8:	2500      	movlt	r5, #0
   276ea:	1820      	adds	r0, r4, r0
   276ec:	eb45 0101 	adc.w	r1, r5, r1
   276f0:	e7f2      	b.n	276d8 <z_timeout_end_calc+0x38>

000276f2 <clear_event_registrations>:
	while (num_events--) {
   276f2:	2314      	movs	r3, #20
{
   276f4:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   276f6:	2400      	movs	r4, #0
   276f8:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   276fc:	4281      	cmp	r1, r0
   276fe:	d100      	bne.n	27702 <clear_event_registrations+0x10>
}
   27700:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   27702:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   27706:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   2770a:	f003 030f 	and.w	r3, r3, #15
   2770e:	2b02      	cmp	r3, #2
   27710:	d80a      	bhi.n	27728 <clear_event_registrations+0x36>
   27712:	b15b      	cbz	r3, 2772c <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   27714:	f851 3c14 	ldr.w	r3, [r1, #-20]
   27718:	b143      	cbz	r3, 2772c <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   2771a:	f851 5c10 	ldr.w	r5, [r1, #-16]
   2771e:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   27720:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   27722:	e941 4405 	strd	r4, r4, [r1, #-20]
	sys_dnode_init(node);
}
   27726:	e001      	b.n	2772c <clear_event_registrations+0x3a>
	switch (event->type) {
   27728:	2b04      	cmp	r3, #4
   2772a:	d0f3      	beq.n	27714 <clear_event_registrations+0x22>
   2772c:	f382 8811 	msr	BASEPRI, r2
   27730:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   27734:	f04f 0320 	mov.w	r3, #32
   27738:	f3ef 8211 	mrs	r2, BASEPRI
   2773c:	f383 8811 	msr	BASEPRI, r3
   27740:	f3bf 8f6f 	isb	sy
   27744:	3914      	subs	r1, #20
   27746:	e7d9      	b.n	276fc <clear_event_registrations+0xa>

00027748 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   27748:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   2774a:	6884      	ldr	r4, [r0, #8]
{
   2774c:	4605      	mov	r5, r0
   2774e:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   27750:	b19c      	cbz	r4, 2777a <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   27752:	68a3      	ldr	r3, [r4, #8]
   27754:	b95b      	cbnz	r3, 2776e <signal_poll_event+0x26>
	int retcode = 0;
   27756:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   27758:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2775a:	2300      	movs	r3, #0
   2775c:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   2775e:	68eb      	ldr	r3, [r5, #12]
   27760:	f3c3 3104 	ubfx	r1, r3, #12, #5
   27764:	430e      	orrs	r6, r1
   27766:	f366 3310 	bfi	r3, r6, #12, #5
   2776a:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   2776c:	e004      	b.n	27778 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   2776e:	4798      	blx	r3
		poller->is_polling = false;
   27770:	2300      	movs	r3, #0
		if (retcode < 0) {
   27772:	2800      	cmp	r0, #0
		poller->is_polling = false;
   27774:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   27776:	daf0      	bge.n	2775a <signal_poll_event+0x12>
}
   27778:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   2777a:	4620      	mov	r0, r4
   2777c:	e7ed      	b.n	2775a <signal_poll_event+0x12>

0002777e <k_poll_poller_cb>:
{
   2777e:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   27780:	6883      	ldr	r3, [r0, #8]
{
   27782:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   27784:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   27786:	7b63      	ldrb	r3, [r4, #13]
   27788:	079a      	lsls	r2, r3, #30
   2778a:	d50e      	bpl.n	277aa <k_poll_poller_cb+0x2c>
	if (z_is_thread_timeout_expired(thread)) {
   2778c:	6a23      	ldr	r3, [r4, #32]
   2778e:	3302      	adds	r3, #2
   27790:	d014      	beq.n	277bc <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   27792:	4620      	mov	r0, r4
   27794:	f7ff fdc6 	bl	27324 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   27798:	2d08      	cmp	r5, #8
   2779a:	bf0c      	ite	eq
   2779c:	f06f 0303 	mvneq.w	r3, #3
   277a0:	2300      	movne	r3, #0
   277a2:	6723      	str	r3, [r4, #112]	; 0x70
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   277a4:	7b63      	ldrb	r3, [r4, #13]
   277a6:	06db      	lsls	r3, r3, #27
   277a8:	d001      	beq.n	277ae <k_poll_poller_cb+0x30>
		return 0;
   277aa:	2000      	movs	r0, #0
}
   277ac:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   277ae:	69a5      	ldr	r5, [r4, #24]
   277b0:	2d00      	cmp	r5, #0
   277b2:	d1fa      	bne.n	277aa <k_poll_poller_cb+0x2c>
	z_ready_thread(thread);
   277b4:	4620      	mov	r0, r4
   277b6:	f7ff fdd8 	bl	2736a <z_ready_thread>
	return 0;
   277ba:	e7f6      	b.n	277aa <k_poll_poller_cb+0x2c>
		return -EAGAIN;
   277bc:	f06f 000a 	mvn.w	r0, #10
   277c0:	e7f4      	b.n	277ac <k_poll_poller_cb+0x2e>

000277c2 <add_event>:
{
   277c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   277c4:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   277c6:	e9d0 2300 	ldrd	r2, r3, [r0]
   277ca:	4290      	cmp	r0, r2
   277cc:	4604      	mov	r4, r0
   277ce:	460d      	mov	r5, r1
   277d0:	d106      	bne.n	277e0 <add_event+0x1e>
	node->prev = list->tail;
   277d2:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   277d4:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   277d6:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   277d8:	6863      	ldr	r3, [r4, #4]
   277da:	601d      	str	r5, [r3, #0]
	list->tail = node;
   277dc:	6065      	str	r5, [r4, #4]
}
   277de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   277e0:	2b00      	cmp	r3, #0
   277e2:	d0f6      	beq.n	277d2 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   277e4:	689b      	ldr	r3, [r3, #8]
   277e6:	6879      	ldr	r1, [r7, #4]
   277e8:	6858      	ldr	r0, [r3, #4]
   277ea:	f7ff fd71 	bl	272d0 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   277ee:	2800      	cmp	r0, #0
   277f0:	d1ef      	bne.n	277d2 <add_event+0x10>
	return list->head == list;
   277f2:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   277f4:	42b4      	cmp	r4, r6
   277f6:	d0ec      	beq.n	277d2 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   277f8:	2e00      	cmp	r6, #0
   277fa:	d0ea      	beq.n	277d2 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   277fc:	68b3      	ldr	r3, [r6, #8]
   277fe:	6878      	ldr	r0, [r7, #4]
   27800:	6859      	ldr	r1, [r3, #4]
   27802:	f7ff fd65 	bl	272d0 <z_is_t1_higher_prio_than_t2>
   27806:	b128      	cbz	r0, 27814 <add_event+0x52>
	node->prev = successor->prev;
   27808:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2780a:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2780e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   27810:	6075      	str	r5, [r6, #4]
			return;
   27812:	e7e4      	b.n	277de <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   27814:	6863      	ldr	r3, [r4, #4]
   27816:	429e      	cmp	r6, r3
   27818:	d0db      	beq.n	277d2 <add_event+0x10>
   2781a:	6836      	ldr	r6, [r6, #0]
   2781c:	e7ec      	b.n	277f8 <add_event+0x36>

0002781e <register_events>:
{
   2781e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   27822:	f04f 0a00 	mov.w	sl, #0
{
   27826:	460e      	mov	r6, r1
   27828:	4614      	mov	r4, r2
   2782a:	461f      	mov	r7, r3
   2782c:	4683      	mov	fp, r0
	int events_registered = 0;
   2782e:	4655      	mov	r5, sl
	event->poller = NULL;
   27830:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   27832:	45b2      	cmp	sl, r6
   27834:	db02      	blt.n	2783c <register_events+0x1e>
}
   27836:	4628      	mov	r0, r5
   27838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2783c:	f04f 0320 	mov.w	r3, #32
   27840:	f3ef 8911 	mrs	r9, BASEPRI
   27844:	f383 8811 	msr	BASEPRI, r3
   27848:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2784c:	f89b 200d 	ldrb.w	r2, [fp, #13]
   27850:	f002 020f 	and.w	r2, r2, #15
   27854:	2a02      	cmp	r2, #2
   27856:	d006      	beq.n	27866 <register_events+0x48>
   27858:	2a04      	cmp	r2, #4
   2785a:	d008      	beq.n	2786e <register_events+0x50>
   2785c:	2a01      	cmp	r2, #1
   2785e:	d120      	bne.n	278a2 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   27860:	f8db 3010 	ldr.w	r3, [fp, #16]
   27864:	e001      	b.n	2786a <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0) {
   27866:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   2786a:	689b      	ldr	r3, [r3, #8]
   2786c:	e002      	b.n	27874 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   2786e:	f8db 3010 	ldr.w	r3, [fp, #16]
   27872:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   27874:	b1ab      	cbz	r3, 278a2 <register_events+0x84>
	event->state |= state;
   27876:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   2787a:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   2787e:	f3c3 3104 	ubfx	r1, r3, #12, #5
   27882:	430a      	orrs	r2, r1
   27884:	f362 3310 	bfi	r3, r2, #12, #5
   27888:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   2788c:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   27890:	f389 8811 	msr	BASEPRI, r9
   27894:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   27898:	f10a 0a01 	add.w	sl, sl, #1
   2789c:	f10b 0b14 	add.w	fp, fp, #20
   278a0:	e7c7      	b.n	27832 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   278a2:	2f00      	cmp	r7, #0
   278a4:	d1f4      	bne.n	27890 <register_events+0x72>
   278a6:	7823      	ldrb	r3, [r4, #0]
   278a8:	2b00      	cmp	r3, #0
   278aa:	d0f1      	beq.n	27890 <register_events+0x72>
	switch (event->type) {
   278ac:	f89b 300d 	ldrb.w	r3, [fp, #13]
   278b0:	f003 030f 	and.w	r3, r3, #15
   278b4:	2b02      	cmp	r3, #2
   278b6:	d008      	beq.n	278ca <register_events+0xac>
   278b8:	2b04      	cmp	r3, #4
   278ba:	d006      	beq.n	278ca <register_events+0xac>
   278bc:	2b01      	cmp	r3, #1
   278be:	d10b      	bne.n	278d8 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   278c0:	4622      	mov	r2, r4
   278c2:	4659      	mov	r1, fp
   278c4:	f8db 0010 	ldr.w	r0, [fp, #16]
   278c8:	e004      	b.n	278d4 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   278ca:	4622      	mov	r2, r4
   278cc:	4659      	mov	r1, fp
   278ce:	f8db 0010 	ldr.w	r0, [fp, #16]
   278d2:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   278d4:	f7ff ff75 	bl	277c2 <add_event>
	event->poller = poller;
   278d8:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   278dc:	3501      	adds	r5, #1
   278de:	e7d7      	b.n	27890 <register_events+0x72>

000278e0 <z_handle_obj_poll_events>:

void z_handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
   278e0:	4603      	mov	r3, r0
	return list->head == list;
   278e2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   278e4:	4283      	cmp	r3, r0
   278e6:	d008      	beq.n	278fa <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   278e8:	e9d0 3200 	ldrd	r3, r2, [r0]
   278ec:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   278ee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   278f0:	2300      	movs	r3, #0
	node->prev = NULL;
   278f2:	e9c0 3300 	strd	r3, r3, [r0]
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   278f6:	f7ff bf27 	b.w	27748 <signal_poll_event>
	}
}
   278fa:	4770      	bx	lr

000278fc <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   278fc:	4770      	bx	lr

000278fe <abs>:
   278fe:	2800      	cmp	r0, #0
   27900:	bfb8      	it	lt
   27902:	4240      	neglt	r0, r0
   27904:	4770      	bx	lr

00027906 <atoi>:
   27906:	220a      	movs	r2, #10
   27908:	2100      	movs	r1, #0
   2790a:	f7f8 bb8d 	b.w	20028 <strtol>

0002790e <memchr>:
   2790e:	b2c9      	uxtb	r1, r1
   27910:	4402      	add	r2, r0
   27912:	b510      	push	{r4, lr}
   27914:	4290      	cmp	r0, r2
   27916:	4603      	mov	r3, r0
   27918:	d101      	bne.n	2791e <memchr+0x10>
   2791a:	2300      	movs	r3, #0
   2791c:	e003      	b.n	27926 <memchr+0x18>
   2791e:	781c      	ldrb	r4, [r3, #0]
   27920:	3001      	adds	r0, #1
   27922:	428c      	cmp	r4, r1
   27924:	d1f6      	bne.n	27914 <memchr+0x6>
   27926:	4618      	mov	r0, r3
   27928:	bd10      	pop	{r4, pc}

0002792a <memcmp>:
   2792a:	b530      	push	{r4, r5, lr}
   2792c:	3901      	subs	r1, #1
   2792e:	2400      	movs	r4, #0
   27930:	42a2      	cmp	r2, r4
   27932:	d101      	bne.n	27938 <memcmp+0xe>
   27934:	2000      	movs	r0, #0
   27936:	e005      	b.n	27944 <memcmp+0x1a>
   27938:	5d03      	ldrb	r3, [r0, r4]
   2793a:	3401      	adds	r4, #1
   2793c:	5d0d      	ldrb	r5, [r1, r4]
   2793e:	42ab      	cmp	r3, r5
   27940:	d0f6      	beq.n	27930 <memcmp+0x6>
   27942:	1b58      	subs	r0, r3, r5
   27944:	bd30      	pop	{r4, r5, pc}

00027946 <memcpy>:
   27946:	440a      	add	r2, r1
   27948:	1e43      	subs	r3, r0, #1
   2794a:	4291      	cmp	r1, r2
   2794c:	d100      	bne.n	27950 <memcpy+0xa>
   2794e:	4770      	bx	lr
   27950:	b510      	push	{r4, lr}
   27952:	f811 4b01 	ldrb.w	r4, [r1], #1
   27956:	4291      	cmp	r1, r2
   27958:	f803 4f01 	strb.w	r4, [r3, #1]!
   2795c:	d1f9      	bne.n	27952 <memcpy+0xc>
   2795e:	bd10      	pop	{r4, pc}

00027960 <__memcpy_chk>:
   27960:	429a      	cmp	r2, r3
   27962:	b508      	push	{r3, lr}
   27964:	d901      	bls.n	2796a <__memcpy_chk+0xa>
   27966:	f7f8 fe85 	bl	20674 <__chk_fail>
   2796a:	4281      	cmp	r1, r0
   2796c:	d804      	bhi.n	27978 <__memcpy_chk+0x18>
   2796e:	188b      	adds	r3, r1, r2
   27970:	4298      	cmp	r0, r3
   27972:	d3f8      	bcc.n	27966 <__memcpy_chk+0x6>
   27974:	4281      	cmp	r1, r0
   27976:	d102      	bne.n	2797e <__memcpy_chk+0x1e>
   27978:	1883      	adds	r3, r0, r2
   2797a:	4299      	cmp	r1, r3
   2797c:	d3f3      	bcc.n	27966 <__memcpy_chk+0x6>
   2797e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   27982:	f7ff bfe0 	b.w	27946 <memcpy>

00027986 <memmove>:
   27986:	4288      	cmp	r0, r1
   27988:	b510      	push	{r4, lr}
   2798a:	eb01 0402 	add.w	r4, r1, r2
   2798e:	d902      	bls.n	27996 <memmove+0x10>
   27990:	4284      	cmp	r4, r0
   27992:	4623      	mov	r3, r4
   27994:	d807      	bhi.n	279a6 <memmove+0x20>
   27996:	1e43      	subs	r3, r0, #1
   27998:	42a1      	cmp	r1, r4
   2799a:	d008      	beq.n	279ae <memmove+0x28>
   2799c:	f811 2b01 	ldrb.w	r2, [r1], #1
   279a0:	f803 2f01 	strb.w	r2, [r3, #1]!
   279a4:	e7f8      	b.n	27998 <memmove+0x12>
   279a6:	4402      	add	r2, r0
   279a8:	4601      	mov	r1, r0
   279aa:	428a      	cmp	r2, r1
   279ac:	d100      	bne.n	279b0 <memmove+0x2a>
   279ae:	bd10      	pop	{r4, pc}
   279b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   279b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   279b8:	e7f7      	b.n	279aa <memmove+0x24>

000279ba <memset>:
   279ba:	4402      	add	r2, r0
   279bc:	4603      	mov	r3, r0
   279be:	4293      	cmp	r3, r2
   279c0:	d100      	bne.n	279c4 <memset+0xa>
   279c2:	4770      	bx	lr
   279c4:	f803 1b01 	strb.w	r1, [r3], #1
   279c8:	e7f9      	b.n	279be <memset+0x4>

000279ca <__cvt>:
   279ca:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   279ce:	ec55 4b10 	vmov	r4, r5, d0
   279d2:	2d00      	cmp	r5, #0
   279d4:	460e      	mov	r6, r1
   279d6:	4619      	mov	r1, r3
   279d8:	462b      	mov	r3, r5
   279da:	bfb4      	ite	lt
   279dc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   279e0:	2300      	movge	r3, #0
   279e2:	4691      	mov	r9, r2
   279e4:	bfbf      	itttt	lt
   279e6:	4622      	movlt	r2, r4
   279e8:	461d      	movlt	r5, r3
   279ea:	232d      	movlt	r3, #45	; 0x2d
   279ec:	4614      	movlt	r4, r2
   279ee:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   279f2:	700b      	strb	r3, [r1, #0]
   279f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   279f6:	f023 0820 	bic.w	r8, r3, #32
   279fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   279fe:	d005      	beq.n	27a0c <__cvt+0x42>
   27a00:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   27a04:	d100      	bne.n	27a08 <__cvt+0x3e>
   27a06:	3601      	adds	r6, #1
   27a08:	2102      	movs	r1, #2
   27a0a:	e000      	b.n	27a0e <__cvt+0x44>
   27a0c:	2103      	movs	r1, #3
   27a0e:	ab03      	add	r3, sp, #12
   27a10:	4632      	mov	r2, r6
   27a12:	9301      	str	r3, [sp, #4]
   27a14:	ab02      	add	r3, sp, #8
   27a16:	ec45 4b10 	vmov	d0, r4, r5
   27a1a:	9300      	str	r3, [sp, #0]
   27a1c:	4653      	mov	r3, sl
   27a1e:	f7e5 fd0f 	bl	d440 <_dtoa_r>
   27a22:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   27a26:	4607      	mov	r7, r0
   27a28:	d102      	bne.n	27a30 <__cvt+0x66>
   27a2a:	f019 0f01 	tst.w	r9, #1
   27a2e:	d022      	beq.n	27a76 <__cvt+0xac>
   27a30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   27a34:	eb07 0906 	add.w	r9, r7, r6
   27a38:	d110      	bne.n	27a5c <__cvt+0x92>
   27a3a:	783b      	ldrb	r3, [r7, #0]
   27a3c:	2b30      	cmp	r3, #48	; 0x30
   27a3e:	d10a      	bne.n	27a56 <__cvt+0x8c>
   27a40:	2200      	movs	r2, #0
   27a42:	2300      	movs	r3, #0
   27a44:	4620      	mov	r0, r4
   27a46:	4629      	mov	r1, r5
   27a48:	f7e4 fe0c 	bl	c664 <__aeabi_dcmpeq>
   27a4c:	b918      	cbnz	r0, 27a56 <__cvt+0x8c>
   27a4e:	f1c6 0601 	rsb	r6, r6, #1
   27a52:	f8ca 6000 	str.w	r6, [sl]
   27a56:	f8da 3000 	ldr.w	r3, [sl]
   27a5a:	4499      	add	r9, r3
   27a5c:	2200      	movs	r2, #0
   27a5e:	2300      	movs	r3, #0
   27a60:	4620      	mov	r0, r4
   27a62:	4629      	mov	r1, r5
   27a64:	f7e4 fdfe 	bl	c664 <__aeabi_dcmpeq>
   27a68:	b108      	cbz	r0, 27a6e <__cvt+0xa4>
   27a6a:	f8cd 900c 	str.w	r9, [sp, #12]
   27a6e:	2230      	movs	r2, #48	; 0x30
   27a70:	9b03      	ldr	r3, [sp, #12]
   27a72:	454b      	cmp	r3, r9
   27a74:	d307      	bcc.n	27a86 <__cvt+0xbc>
   27a76:	9b03      	ldr	r3, [sp, #12]
   27a78:	4638      	mov	r0, r7
   27a7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   27a7c:	1bdb      	subs	r3, r3, r7
   27a7e:	6013      	str	r3, [r2, #0]
   27a80:	b004      	add	sp, #16
   27a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27a86:	1c59      	adds	r1, r3, #1
   27a88:	9103      	str	r1, [sp, #12]
   27a8a:	701a      	strb	r2, [r3, #0]
   27a8c:	e7f0      	b.n	27a70 <__cvt+0xa6>

00027a8e <__exponent>:
   27a8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27a90:	2900      	cmp	r1, #0
   27a92:	4603      	mov	r3, r0
   27a94:	bfb8      	it	lt
   27a96:	4249      	neglt	r1, r1
   27a98:	f803 2b02 	strb.w	r2, [r3], #2
   27a9c:	bfb4      	ite	lt
   27a9e:	222d      	movlt	r2, #45	; 0x2d
   27aa0:	222b      	movge	r2, #43	; 0x2b
   27aa2:	2909      	cmp	r1, #9
   27aa4:	7042      	strb	r2, [r0, #1]
   27aa6:	dd2a      	ble.n	27afe <__exponent+0x70>
   27aa8:	f10d 0407 	add.w	r4, sp, #7
   27aac:	270a      	movs	r7, #10
   27aae:	46a4      	mov	ip, r4
   27ab0:	460a      	mov	r2, r1
   27ab2:	46a6      	mov	lr, r4
   27ab4:	3c01      	subs	r4, #1
   27ab6:	2a63      	cmp	r2, #99	; 0x63
   27ab8:	fb91 f6f7 	sdiv	r6, r1, r7
   27abc:	fb07 1516 	mls	r5, r7, r6, r1
   27ac0:	4631      	mov	r1, r6
   27ac2:	f105 0530 	add.w	r5, r5, #48	; 0x30
   27ac6:	f80e 5c01 	strb.w	r5, [lr, #-1]
   27aca:	dcf1      	bgt.n	27ab0 <__exponent+0x22>
   27acc:	3130      	adds	r1, #48	; 0x30
   27ace:	f1ae 0502 	sub.w	r5, lr, #2
   27ad2:	f804 1c01 	strb.w	r1, [r4, #-1]
   27ad6:	1c44      	adds	r4, r0, #1
   27ad8:	4629      	mov	r1, r5
   27ada:	4561      	cmp	r1, ip
   27adc:	d30a      	bcc.n	27af4 <__exponent+0x66>
   27ade:	f10d 0209 	add.w	r2, sp, #9
   27ae2:	eba2 020e 	sub.w	r2, r2, lr
   27ae6:	4565      	cmp	r5, ip
   27ae8:	bf88      	it	hi
   27aea:	2200      	movhi	r2, #0
   27aec:	4413      	add	r3, r2
   27aee:	1a18      	subs	r0, r3, r0
   27af0:	b003      	add	sp, #12
   27af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27af4:	f811 2b01 	ldrb.w	r2, [r1], #1
   27af8:	f804 2f01 	strb.w	r2, [r4, #1]!
   27afc:	e7ed      	b.n	27ada <__exponent+0x4c>
   27afe:	2330      	movs	r3, #48	; 0x30
   27b00:	3130      	adds	r1, #48	; 0x30
   27b02:	7083      	strb	r3, [r0, #2]
   27b04:	1d03      	adds	r3, r0, #4
   27b06:	70c1      	strb	r1, [r0, #3]
   27b08:	e7f1      	b.n	27aee <__exponent+0x60>

00027b0a <_printf_common>:
   27b0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27b0e:	4616      	mov	r6, r2
   27b10:	4699      	mov	r9, r3
   27b12:	688a      	ldr	r2, [r1, #8]
   27b14:	4607      	mov	r7, r0
   27b16:	690b      	ldr	r3, [r1, #16]
   27b18:	460c      	mov	r4, r1
   27b1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
   27b1e:	4293      	cmp	r3, r2
   27b20:	bfb8      	it	lt
   27b22:	4613      	movlt	r3, r2
   27b24:	6033      	str	r3, [r6, #0]
   27b26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   27b2a:	b10a      	cbz	r2, 27b30 <_printf_common+0x26>
   27b2c:	3301      	adds	r3, #1
   27b2e:	6033      	str	r3, [r6, #0]
   27b30:	6823      	ldr	r3, [r4, #0]
   27b32:	0699      	lsls	r1, r3, #26
   27b34:	bf42      	ittt	mi
   27b36:	6833      	ldrmi	r3, [r6, #0]
   27b38:	3302      	addmi	r3, #2
   27b3a:	6033      	strmi	r3, [r6, #0]
   27b3c:	6825      	ldr	r5, [r4, #0]
   27b3e:	f015 0506 	ands.w	r5, r5, #6
   27b42:	d106      	bne.n	27b52 <_printf_common+0x48>
   27b44:	f104 0a19 	add.w	sl, r4, #25
   27b48:	68e3      	ldr	r3, [r4, #12]
   27b4a:	6832      	ldr	r2, [r6, #0]
   27b4c:	1a9b      	subs	r3, r3, r2
   27b4e:	42ab      	cmp	r3, r5
   27b50:	dc29      	bgt.n	27ba6 <_printf_common+0x9c>
   27b52:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   27b56:	1e13      	subs	r3, r2, #0
   27b58:	6822      	ldr	r2, [r4, #0]
   27b5a:	bf18      	it	ne
   27b5c:	2301      	movne	r3, #1
   27b5e:	0692      	lsls	r2, r2, #26
   27b60:	d42e      	bmi.n	27bc0 <_printf_common+0xb6>
   27b62:	f104 0243 	add.w	r2, r4, #67	; 0x43
   27b66:	4649      	mov	r1, r9
   27b68:	4638      	mov	r0, r7
   27b6a:	47c0      	blx	r8
   27b6c:	3001      	adds	r0, #1
   27b6e:	d021      	beq.n	27bb4 <_printf_common+0xaa>
   27b70:	6823      	ldr	r3, [r4, #0]
   27b72:	341a      	adds	r4, #26
   27b74:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   27b78:	f003 0306 	and.w	r3, r3, #6
   27b7c:	6832      	ldr	r2, [r6, #0]
   27b7e:	2600      	movs	r6, #0
   27b80:	2b04      	cmp	r3, #4
   27b82:	f854 3c12 	ldr.w	r3, [r4, #-18]
   27b86:	bf08      	it	eq
   27b88:	1aad      	subeq	r5, r5, r2
   27b8a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   27b8e:	bf14      	ite	ne
   27b90:	2500      	movne	r5, #0
   27b92:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   27b96:	4293      	cmp	r3, r2
   27b98:	bfc4      	itt	gt
   27b9a:	1a9b      	subgt	r3, r3, r2
   27b9c:	18ed      	addgt	r5, r5, r3
   27b9e:	42b5      	cmp	r5, r6
   27ba0:	d11a      	bne.n	27bd8 <_printf_common+0xce>
   27ba2:	2000      	movs	r0, #0
   27ba4:	e008      	b.n	27bb8 <_printf_common+0xae>
   27ba6:	2301      	movs	r3, #1
   27ba8:	4652      	mov	r2, sl
   27baa:	4649      	mov	r1, r9
   27bac:	4638      	mov	r0, r7
   27bae:	47c0      	blx	r8
   27bb0:	3001      	adds	r0, #1
   27bb2:	d103      	bne.n	27bbc <_printf_common+0xb2>
   27bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27bbc:	3501      	adds	r5, #1
   27bbe:	e7c3      	b.n	27b48 <_printf_common+0x3e>
   27bc0:	18e1      	adds	r1, r4, r3
   27bc2:	1c5a      	adds	r2, r3, #1
   27bc4:	2030      	movs	r0, #48	; 0x30
   27bc6:	3302      	adds	r3, #2
   27bc8:	4422      	add	r2, r4
   27bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   27bce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   27bd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   27bd6:	e7c4      	b.n	27b62 <_printf_common+0x58>
   27bd8:	2301      	movs	r3, #1
   27bda:	4622      	mov	r2, r4
   27bdc:	4649      	mov	r1, r9
   27bde:	4638      	mov	r0, r7
   27be0:	47c0      	blx	r8
   27be2:	3001      	adds	r0, #1
   27be4:	d0e6      	beq.n	27bb4 <_printf_common+0xaa>
   27be6:	3601      	adds	r6, #1
   27be8:	e7d9      	b.n	27b9e <_printf_common+0x94>

00027bea <__sprintf_chk>:
   27bea:	b408      	push	{r3}
   27bec:	b517      	push	{r0, r1, r2, r4, lr}
   27bee:	ab05      	add	r3, sp, #20
   27bf0:	1e14      	subs	r4, r2, #0
   27bf2:	f853 1b04 	ldr.w	r1, [r3], #4
   27bf6:	9301      	str	r3, [sp, #4]
   27bf8:	da07      	bge.n	27c0a <__sprintf_chk+0x20>
   27bfa:	461a      	mov	r2, r3
   27bfc:	f7f8 fd00 	bl	20600 <vsiprintf>
   27c00:	b003      	add	sp, #12
   27c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27c06:	b001      	add	sp, #4
   27c08:	4770      	bx	lr
   27c0a:	460a      	mov	r2, r1
   27c0c:	4621      	mov	r1, r4
   27c0e:	f7f8 fcd3 	bl	205b8 <vsniprintf>
   27c12:	2800      	cmp	r0, #0
   27c14:	dbf4      	blt.n	27c00 <__sprintf_chk+0x16>
   27c16:	42a0      	cmp	r0, r4
   27c18:	d3f2      	bcc.n	27c00 <__sprintf_chk+0x16>
   27c1a:	f7f8 fd2b 	bl	20674 <__chk_fail>

00027c1e <__sread>:
   27c1e:	b510      	push	{r4, lr}
   27c20:	460c      	mov	r4, r1
   27c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   27c26:	f7f9 fddb 	bl	217e0 <_read_r>
   27c2a:	2800      	cmp	r0, #0
   27c2c:	bfab      	itete	ge
   27c2e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   27c30:	89a3      	ldrhlt	r3, [r4, #12]
   27c32:	181b      	addge	r3, r3, r0
   27c34:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   27c38:	bfac      	ite	ge
   27c3a:	6563      	strge	r3, [r4, #84]	; 0x54
   27c3c:	81a3      	strhlt	r3, [r4, #12]
   27c3e:	bd10      	pop	{r4, pc}

00027c40 <__seofread>:
   27c40:	2000      	movs	r0, #0
   27c42:	4770      	bx	lr

00027c44 <__swrite>:
   27c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27c48:	461f      	mov	r7, r3
   27c4a:	898b      	ldrh	r3, [r1, #12]
   27c4c:	4605      	mov	r5, r0
   27c4e:	460c      	mov	r4, r1
   27c50:	05db      	lsls	r3, r3, #23
   27c52:	4616      	mov	r6, r2
   27c54:	d505      	bpl.n	27c62 <__swrite+0x1e>
   27c56:	2302      	movs	r3, #2
   27c58:	2200      	movs	r2, #0
   27c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   27c5e:	f7f8 fd91 	bl	20784 <_lseek_r>
   27c62:	89a3      	ldrh	r3, [r4, #12]
   27c64:	4632      	mov	r2, r6
   27c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   27c6a:	4628      	mov	r0, r5
   27c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   27c70:	81a3      	strh	r3, [r4, #12]
   27c72:	463b      	mov	r3, r7
   27c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27c78:	f7f8 bccc 	b.w	20614 <_write_r>

00027c7c <__sseek>:
   27c7c:	b510      	push	{r4, lr}
   27c7e:	460c      	mov	r4, r1
   27c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   27c84:	f7f8 fd7e 	bl	20784 <_lseek_r>
   27c88:	1c43      	adds	r3, r0, #1
   27c8a:	89a3      	ldrh	r3, [r4, #12]
   27c8c:	bf15      	itete	ne
   27c8e:	6560      	strne	r0, [r4, #84]	; 0x54
   27c90:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   27c94:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   27c98:	81a3      	strheq	r3, [r4, #12]
   27c9a:	bf18      	it	ne
   27c9c:	81a3      	strhne	r3, [r4, #12]
   27c9e:	bd10      	pop	{r4, pc}

00027ca0 <__sclose>:
   27ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   27ca4:	f7f8 bd0a 	b.w	206bc <_close_r>

00027ca8 <strchr>:
   27ca8:	b2c9      	uxtb	r1, r1
   27caa:	4603      	mov	r3, r0
   27cac:	f810 2b01 	ldrb.w	r2, [r0], #1
   27cb0:	b11a      	cbz	r2, 27cba <strchr+0x12>
   27cb2:	428a      	cmp	r2, r1
   27cb4:	d1f9      	bne.n	27caa <strchr+0x2>
   27cb6:	4618      	mov	r0, r3
   27cb8:	4770      	bx	lr
   27cba:	2900      	cmp	r1, #0
   27cbc:	bf18      	it	ne
   27cbe:	2300      	movne	r3, #0
   27cc0:	e7f9      	b.n	27cb6 <strchr+0xe>

00027cc2 <strcpy>:
   27cc2:	4603      	mov	r3, r0
   27cc4:	f811 2b01 	ldrb.w	r2, [r1], #1
   27cc8:	f803 2b01 	strb.w	r2, [r3], #1
   27ccc:	2a00      	cmp	r2, #0
   27cce:	d1f9      	bne.n	27cc4 <strcpy+0x2>
   27cd0:	4770      	bx	lr

00027cd2 <_strdup_r>:
   27cd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27cd4:	4604      	mov	r4, r0
   27cd6:	4608      	mov	r0, r1
   27cd8:	460d      	mov	r5, r1
   27cda:	f7e5 f92d 	bl	cf38 <strlen>
   27cde:	1c42      	adds	r2, r0, #1
   27ce0:	4620      	mov	r0, r4
   27ce2:	4611      	mov	r1, r2
   27ce4:	9201      	str	r2, [sp, #4]
   27ce6:	f7f7 fcb3 	bl	1f650 <_malloc_r>
   27cea:	4604      	mov	r4, r0
   27cec:	b118      	cbz	r0, 27cf6 <_strdup_r+0x24>
   27cee:	9a01      	ldr	r2, [sp, #4]
   27cf0:	4629      	mov	r1, r5
   27cf2:	f7ff fe28 	bl	27946 <memcpy>
   27cf6:	4620      	mov	r0, r4
   27cf8:	b003      	add	sp, #12
   27cfa:	bd30      	pop	{r4, r5, pc}

00027cfc <strncmp>:
   27cfc:	b510      	push	{r4, lr}
   27cfe:	b16a      	cbz	r2, 27d1c <strncmp+0x20>
   27d00:	3901      	subs	r1, #1
   27d02:	1884      	adds	r4, r0, r2
   27d04:	f810 3b01 	ldrb.w	r3, [r0], #1
   27d08:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   27d0c:	4293      	cmp	r3, r2
   27d0e:	d103      	bne.n	27d18 <strncmp+0x1c>
   27d10:	42a0      	cmp	r0, r4
   27d12:	d001      	beq.n	27d18 <strncmp+0x1c>
   27d14:	2b00      	cmp	r3, #0
   27d16:	d1f5      	bne.n	27d04 <strncmp+0x8>
   27d18:	1a98      	subs	r0, r3, r2
   27d1a:	bd10      	pop	{r4, pc}
   27d1c:	4610      	mov	r0, r2
   27d1e:	e7fc      	b.n	27d1a <strncmp+0x1e>

00027d20 <strncpy>:
   27d20:	3901      	subs	r1, #1
   27d22:	4603      	mov	r3, r0
   27d24:	b510      	push	{r4, lr}
   27d26:	b132      	cbz	r2, 27d36 <strncpy+0x16>
   27d28:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   27d2c:	3a01      	subs	r2, #1
   27d2e:	f803 4b01 	strb.w	r4, [r3], #1
   27d32:	2c00      	cmp	r4, #0
   27d34:	d1f7      	bne.n	27d26 <strncpy+0x6>
   27d36:	441a      	add	r2, r3
   27d38:	2100      	movs	r1, #0
   27d3a:	4293      	cmp	r3, r2
   27d3c:	d100      	bne.n	27d40 <strncpy+0x20>
   27d3e:	bd10      	pop	{r4, pc}
   27d40:	f803 1b01 	strb.w	r1, [r3], #1
   27d44:	e7f9      	b.n	27d3a <strncpy+0x1a>

00027d46 <strstr>:
   27d46:	b5f0      	push	{r4, r5, r6, r7, lr}
   27d48:	780c      	ldrb	r4, [r1, #0]
   27d4a:	b164      	cbz	r4, 27d66 <strstr+0x20>
   27d4c:	4603      	mov	r3, r0
   27d4e:	781a      	ldrb	r2, [r3, #0]
   27d50:	4618      	mov	r0, r3
   27d52:	1c5e      	adds	r6, r3, #1
   27d54:	b90a      	cbnz	r2, 27d5a <strstr+0x14>
   27d56:	4610      	mov	r0, r2
   27d58:	e005      	b.n	27d66 <strstr+0x20>
   27d5a:	4294      	cmp	r4, r2
   27d5c:	d108      	bne.n	27d70 <strstr+0x2a>
   27d5e:	460d      	mov	r5, r1
   27d60:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   27d64:	b902      	cbnz	r2, 27d68 <strstr+0x22>
   27d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27d68:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   27d6c:	4297      	cmp	r7, r2
   27d6e:	d0f7      	beq.n	27d60 <strstr+0x1a>
   27d70:	4633      	mov	r3, r6
   27d72:	e7ec      	b.n	27d4e <strstr+0x8>

00027d74 <__strtok_r>:
   27d74:	b5f0      	push	{r4, r5, r6, r7, lr}
   27d76:	b908      	cbnz	r0, 27d7c <__strtok_r+0x8>
   27d78:	6810      	ldr	r0, [r2, #0]
   27d7a:	b188      	cbz	r0, 27da0 <__strtok_r+0x2c>
   27d7c:	4604      	mov	r4, r0
   27d7e:	4620      	mov	r0, r4
   27d80:	460f      	mov	r7, r1
   27d82:	f814 5b01 	ldrb.w	r5, [r4], #1
   27d86:	f817 6b01 	ldrb.w	r6, [r7], #1
   27d8a:	b91e      	cbnz	r6, 27d94 <__strtok_r+0x20>
   27d8c:	b965      	cbnz	r5, 27da8 <__strtok_r+0x34>
   27d8e:	4628      	mov	r0, r5
   27d90:	6015      	str	r5, [r2, #0]
   27d92:	e005      	b.n	27da0 <__strtok_r+0x2c>
   27d94:	42b5      	cmp	r5, r6
   27d96:	d1f6      	bne.n	27d86 <__strtok_r+0x12>
   27d98:	2b00      	cmp	r3, #0
   27d9a:	d1f0      	bne.n	27d7e <__strtok_r+0xa>
   27d9c:	6014      	str	r4, [r2, #0]
   27d9e:	7003      	strb	r3, [r0, #0]
   27da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27da2:	461c      	mov	r4, r3
   27da4:	e00c      	b.n	27dc0 <__strtok_r+0x4c>
   27da6:	b915      	cbnz	r5, 27dae <__strtok_r+0x3a>
   27da8:	f814 3b01 	ldrb.w	r3, [r4], #1
   27dac:	460e      	mov	r6, r1
   27dae:	f816 5b01 	ldrb.w	r5, [r6], #1
   27db2:	42ab      	cmp	r3, r5
   27db4:	d1f7      	bne.n	27da6 <__strtok_r+0x32>
   27db6:	2b00      	cmp	r3, #0
   27db8:	d0f3      	beq.n	27da2 <__strtok_r+0x2e>
   27dba:	2300      	movs	r3, #0
   27dbc:	f804 3c01 	strb.w	r3, [r4, #-1]
   27dc0:	6014      	str	r4, [r2, #0]
   27dc2:	e7ed      	b.n	27da0 <__strtok_r+0x2c>

00027dc4 <_strtol_r>:
   27dc4:	f7f8 b8ae 	b.w	1ff24 <_strtol_l.isra.0>

00027dc8 <_strtoul_r>:
   27dc8:	f7f8 b938 	b.w	2003c <_strtoul_l.isra.0>

00027dcc <_vsniprintf_r>:
   27dcc:	b530      	push	{r4, r5, lr}
   27dce:	1e14      	subs	r4, r2, #0
   27dd0:	4605      	mov	r5, r0
   27dd2:	b09b      	sub	sp, #108	; 0x6c
   27dd4:	4618      	mov	r0, r3
   27dd6:	da05      	bge.n	27de4 <_vsniprintf_r+0x18>
   27dd8:	238b      	movs	r3, #139	; 0x8b
   27dda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27dde:	602b      	str	r3, [r5, #0]
   27de0:	b01b      	add	sp, #108	; 0x6c
   27de2:	bd30      	pop	{r4, r5, pc}
   27de4:	f44f 7302 	mov.w	r3, #520	; 0x208
   27de8:	4602      	mov	r2, r0
   27dea:	9100      	str	r1, [sp, #0]
   27dec:	4628      	mov	r0, r5
   27dee:	f8ad 300c 	strh.w	r3, [sp, #12]
   27df2:	bf14      	ite	ne
   27df4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   27df8:	4623      	moveq	r3, r4
   27dfa:	9104      	str	r1, [sp, #16]
   27dfc:	4669      	mov	r1, sp
   27dfe:	9302      	str	r3, [sp, #8]
   27e00:	9305      	str	r3, [sp, #20]
   27e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
   27e06:	f8ad 300e 	strh.w	r3, [sp, #14]
   27e0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   27e0c:	f7f8 fff2 	bl	20df4 <_svfiprintf_r>
   27e10:	1c43      	adds	r3, r0, #1
   27e12:	bfbc      	itt	lt
   27e14:	238b      	movlt	r3, #139	; 0x8b
   27e16:	602b      	strlt	r3, [r5, #0]
   27e18:	2c00      	cmp	r4, #0
   27e1a:	d0e1      	beq.n	27de0 <_vsniprintf_r+0x14>
   27e1c:	9b00      	ldr	r3, [sp, #0]
   27e1e:	2200      	movs	r2, #0
   27e20:	701a      	strb	r2, [r3, #0]
   27e22:	e7dd      	b.n	27de0 <_vsniprintf_r+0x14>

00027e24 <div>:
   27e24:	b510      	push	{r4, lr}
   27e26:	fb91 f4f2 	sdiv	r4, r1, r2
   27e2a:	2900      	cmp	r1, #0
   27e2c:	fb02 1314 	mls	r3, r2, r4, r1
   27e30:	db06      	blt.n	27e40 <div+0x1c>
   27e32:	2b00      	cmp	r3, #0
   27e34:	da01      	bge.n	27e3a <div+0x16>
   27e36:	3401      	adds	r4, #1
   27e38:	1a9b      	subs	r3, r3, r2
   27e3a:	e9c0 4300 	strd	r4, r3, [r0]
   27e3e:	bd10      	pop	{r4, pc}
   27e40:	2b00      	cmp	r3, #0
   27e42:	bfc4      	itt	gt
   27e44:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   27e48:	189b      	addgt	r3, r3, r2
   27e4a:	e7f6      	b.n	27e3a <div+0x16>

00027e4c <quorem>:
   27e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27e50:	6903      	ldr	r3, [r0, #16]
   27e52:	4607      	mov	r7, r0
   27e54:	690c      	ldr	r4, [r1, #16]
   27e56:	42a3      	cmp	r3, r4
   27e58:	f2c0 8085 	blt.w	27f66 <quorem+0x11a>
   27e5c:	3c01      	subs	r4, #1
   27e5e:	f100 0514 	add.w	r5, r0, #20
   27e62:	f101 0814 	add.w	r8, r1, #20
   27e66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   27e6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   27e6e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   27e72:	9301      	str	r3, [sp, #4]
   27e74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   27e78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   27e7c:	3301      	adds	r3, #1
   27e7e:	429a      	cmp	r2, r3
   27e80:	fbb2 f6f3 	udiv	r6, r2, r3
   27e84:	d333      	bcc.n	27eee <quorem+0xa2>
   27e86:	f04f 0e00 	mov.w	lr, #0
   27e8a:	4640      	mov	r0, r8
   27e8c:	46ac      	mov	ip, r5
   27e8e:	46f2      	mov	sl, lr
   27e90:	f850 2b04 	ldr.w	r2, [r0], #4
   27e94:	b293      	uxth	r3, r2
   27e96:	4581      	cmp	r9, r0
   27e98:	ea4f 4212 	mov.w	r2, r2, lsr #16
   27e9c:	fb06 e303 	mla	r3, r6, r3, lr
   27ea0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   27ea4:	b29b      	uxth	r3, r3
   27ea6:	fb06 e202 	mla	r2, r6, r2, lr
   27eaa:	ebaa 0303 	sub.w	r3, sl, r3
   27eae:	f8dc a000 	ldr.w	sl, [ip]
   27eb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   27eb6:	fa1f fa8a 	uxth.w	sl, sl
   27eba:	4453      	add	r3, sl
   27ebc:	fa1f fa82 	uxth.w	sl, r2
   27ec0:	f8dc 2000 	ldr.w	r2, [ip]
   27ec4:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   27ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
   27ecc:	b29b      	uxth	r3, r3
   27ece:	ea4f 4a22 	mov.w	sl, r2, asr #16
   27ed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   27ed6:	f84c 3b04 	str.w	r3, [ip], #4
   27eda:	d2d9      	bcs.n	27e90 <quorem+0x44>
   27edc:	f855 300b 	ldr.w	r3, [r5, fp]
   27ee0:	b92b      	cbnz	r3, 27eee <quorem+0xa2>
   27ee2:	9b01      	ldr	r3, [sp, #4]
   27ee4:	3b04      	subs	r3, #4
   27ee6:	429d      	cmp	r5, r3
   27ee8:	461a      	mov	r2, r3
   27eea:	d330      	bcc.n	27f4e <quorem+0x102>
   27eec:	613c      	str	r4, [r7, #16]
   27eee:	4638      	mov	r0, r7
   27ef0:	f000 f8a9 	bl	28046 <__mcmp>
   27ef4:	2800      	cmp	r0, #0
   27ef6:	db26      	blt.n	27f46 <quorem+0xfa>
   27ef8:	3601      	adds	r6, #1
   27efa:	4628      	mov	r0, r5
   27efc:	f04f 0c00 	mov.w	ip, #0
   27f00:	f858 1b04 	ldr.w	r1, [r8], #4
   27f04:	f8d0 e000 	ldr.w	lr, [r0]
   27f08:	b28b      	uxth	r3, r1
   27f0a:	45c1      	cmp	r9, r8
   27f0c:	fa1f f28e 	uxth.w	r2, lr
   27f10:	ebac 0303 	sub.w	r3, ip, r3
   27f14:	4413      	add	r3, r2
   27f16:	ea4f 4211 	mov.w	r2, r1, lsr #16
   27f1a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   27f1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
   27f22:	b29b      	uxth	r3, r3
   27f24:	ea4f 4c22 	mov.w	ip, r2, asr #16
   27f28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   27f2c:	f840 3b04 	str.w	r3, [r0], #4
   27f30:	d2e6      	bcs.n	27f00 <quorem+0xb4>
   27f32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   27f36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   27f3a:	b922      	cbnz	r2, 27f46 <quorem+0xfa>
   27f3c:	3b04      	subs	r3, #4
   27f3e:	429d      	cmp	r5, r3
   27f40:	461a      	mov	r2, r3
   27f42:	d30a      	bcc.n	27f5a <quorem+0x10e>
   27f44:	613c      	str	r4, [r7, #16]
   27f46:	4630      	mov	r0, r6
   27f48:	b003      	add	sp, #12
   27f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f4e:	6812      	ldr	r2, [r2, #0]
   27f50:	3b04      	subs	r3, #4
   27f52:	2a00      	cmp	r2, #0
   27f54:	d1ca      	bne.n	27eec <quorem+0xa0>
   27f56:	3c01      	subs	r4, #1
   27f58:	e7c5      	b.n	27ee6 <quorem+0x9a>
   27f5a:	6812      	ldr	r2, [r2, #0]
   27f5c:	3b04      	subs	r3, #4
   27f5e:	2a00      	cmp	r2, #0
   27f60:	d1f0      	bne.n	27f44 <quorem+0xf8>
   27f62:	3c01      	subs	r4, #1
   27f64:	e7eb      	b.n	27f3e <quorem+0xf2>
   27f66:	2000      	movs	r0, #0
   27f68:	e7ee      	b.n	27f48 <quorem+0xfc>

00027f6a <_getenv_r>:
   27f6a:	b507      	push	{r0, r1, r2, lr}
   27f6c:	aa01      	add	r2, sp, #4
   27f6e:	f7f8 fbc7 	bl	20700 <_findenv_r>
   27f72:	b003      	add	sp, #12
   27f74:	f85d fb04 	ldr.w	pc, [sp], #4

00027f78 <__retarget_lock_init_recursive>:
   27f78:	4770      	bx	lr

00027f7a <__retarget_lock_acquire>:
   27f7a:	4770      	bx	lr

00027f7c <__retarget_lock_acquire_recursive>:
   27f7c:	4770      	bx	lr

00027f7e <__retarget_lock_release>:
   27f7e:	4770      	bx	lr

00027f80 <__retarget_lock_release_recursive>:
   27f80:	4770      	bx	lr

00027f82 <__ascii_mbtowc>:
   27f82:	b082      	sub	sp, #8
   27f84:	b901      	cbnz	r1, 27f88 <__ascii_mbtowc+0x6>
   27f86:	a901      	add	r1, sp, #4
   27f88:	b142      	cbz	r2, 27f9c <__ascii_mbtowc+0x1a>
   27f8a:	b14b      	cbz	r3, 27fa0 <__ascii_mbtowc+0x1e>
   27f8c:	7813      	ldrb	r3, [r2, #0]
   27f8e:	600b      	str	r3, [r1, #0]
   27f90:	7812      	ldrb	r2, [r2, #0]
   27f92:	1e10      	subs	r0, r2, #0
   27f94:	bf18      	it	ne
   27f96:	2001      	movne	r0, #1
   27f98:	b002      	add	sp, #8
   27f9a:	4770      	bx	lr
   27f9c:	4610      	mov	r0, r2
   27f9e:	e7fb      	b.n	27f98 <__ascii_mbtowc+0x16>
   27fa0:	f06f 0001 	mvn.w	r0, #1
   27fa4:	e7f8      	b.n	27f98 <__ascii_mbtowc+0x16>

00027fa6 <__hi0bits>:
   27fa6:	0c03      	lsrs	r3, r0, #16
   27fa8:	041b      	lsls	r3, r3, #16
   27faa:	b9d3      	cbnz	r3, 27fe2 <__hi0bits+0x3c>
   27fac:	0400      	lsls	r0, r0, #16
   27fae:	2310      	movs	r3, #16
   27fb0:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   27fb4:	bf04      	itt	eq
   27fb6:	0200      	lsleq	r0, r0, #8
   27fb8:	3308      	addeq	r3, #8
   27fba:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   27fbe:	bf04      	itt	eq
   27fc0:	0100      	lsleq	r0, r0, #4
   27fc2:	3304      	addeq	r3, #4
   27fc4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   27fc8:	bf04      	itt	eq
   27fca:	0080      	lsleq	r0, r0, #2
   27fcc:	3302      	addeq	r3, #2
   27fce:	2800      	cmp	r0, #0
   27fd0:	db05      	blt.n	27fde <__hi0bits+0x38>
   27fd2:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   27fd6:	f103 0301 	add.w	r3, r3, #1
   27fda:	bf08      	it	eq
   27fdc:	2320      	moveq	r3, #32
   27fde:	4618      	mov	r0, r3
   27fe0:	4770      	bx	lr
   27fe2:	2300      	movs	r3, #0
   27fe4:	e7e4      	b.n	27fb0 <__hi0bits+0xa>

00027fe6 <__lo0bits>:
   27fe6:	6803      	ldr	r3, [r0, #0]
   27fe8:	4601      	mov	r1, r0
   27fea:	f013 0207 	ands.w	r2, r3, #7
   27fee:	d00b      	beq.n	28008 <__lo0bits+0x22>
   27ff0:	07da      	lsls	r2, r3, #31
   27ff2:	d424      	bmi.n	2803e <__lo0bits+0x58>
   27ff4:	0798      	lsls	r0, r3, #30
   27ff6:	bf47      	ittee	mi
   27ff8:	085b      	lsrmi	r3, r3, #1
   27ffa:	2001      	movmi	r0, #1
   27ffc:	089b      	lsrpl	r3, r3, #2
   27ffe:	2002      	movpl	r0, #2
   28000:	bf4c      	ite	mi
   28002:	600b      	strmi	r3, [r1, #0]
   28004:	600b      	strpl	r3, [r1, #0]
   28006:	4770      	bx	lr
   28008:	b298      	uxth	r0, r3
   2800a:	b9b0      	cbnz	r0, 2803a <__lo0bits+0x54>
   2800c:	0c1b      	lsrs	r3, r3, #16
   2800e:	2010      	movs	r0, #16
   28010:	f013 0fff 	tst.w	r3, #255	; 0xff
   28014:	bf04      	itt	eq
   28016:	0a1b      	lsreq	r3, r3, #8
   28018:	3008      	addeq	r0, #8
   2801a:	071a      	lsls	r2, r3, #28
   2801c:	bf04      	itt	eq
   2801e:	091b      	lsreq	r3, r3, #4
   28020:	3004      	addeq	r0, #4
   28022:	079a      	lsls	r2, r3, #30
   28024:	bf04      	itt	eq
   28026:	089b      	lsreq	r3, r3, #2
   28028:	3002      	addeq	r0, #2
   2802a:	07da      	lsls	r2, r3, #31
   2802c:	d403      	bmi.n	28036 <__lo0bits+0x50>
   2802e:	085b      	lsrs	r3, r3, #1
   28030:	f100 0001 	add.w	r0, r0, #1
   28034:	d005      	beq.n	28042 <__lo0bits+0x5c>
   28036:	600b      	str	r3, [r1, #0]
   28038:	4770      	bx	lr
   2803a:	4610      	mov	r0, r2
   2803c:	e7e8      	b.n	28010 <__lo0bits+0x2a>
   2803e:	2000      	movs	r0, #0
   28040:	4770      	bx	lr
   28042:	2020      	movs	r0, #32
   28044:	4770      	bx	lr

00028046 <__mcmp>:
   28046:	6902      	ldr	r2, [r0, #16]
   28048:	b530      	push	{r4, r5, lr}
   2804a:	690c      	ldr	r4, [r1, #16]
   2804c:	1b12      	subs	r2, r2, r4
   2804e:	d10e      	bne.n	2806e <__mcmp+0x28>
   28050:	f100 0314 	add.w	r3, r0, #20
   28054:	3114      	adds	r1, #20
   28056:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   2805a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   2805e:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   28062:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   28066:	42a5      	cmp	r5, r4
   28068:	d003      	beq.n	28072 <__mcmp+0x2c>
   2806a:	d305      	bcc.n	28078 <__mcmp+0x32>
   2806c:	2201      	movs	r2, #1
   2806e:	4610      	mov	r0, r2
   28070:	bd30      	pop	{r4, r5, pc}
   28072:	4283      	cmp	r3, r0
   28074:	d3f3      	bcc.n	2805e <__mcmp+0x18>
   28076:	e7fa      	b.n	2806e <__mcmp+0x28>
   28078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2807c:	e7f7      	b.n	2806e <__mcmp+0x28>

0002807e <_calloc_r>:
   2807e:	434a      	muls	r2, r1
   28080:	b513      	push	{r0, r1, r4, lr}
   28082:	4611      	mov	r1, r2
   28084:	9201      	str	r2, [sp, #4]
   28086:	f7f7 fae3 	bl	1f650 <_malloc_r>
   2808a:	4604      	mov	r4, r0
   2808c:	b118      	cbz	r0, 28096 <_calloc_r+0x18>
   2808e:	9a01      	ldr	r2, [sp, #4]
   28090:	2100      	movs	r1, #0
   28092:	f7ff fc92 	bl	279ba <memset>
   28096:	4620      	mov	r0, r4
   28098:	b002      	add	sp, #8
   2809a:	bd10      	pop	{r4, pc}

0002809c <_realloc_r>:
   2809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2809e:	4607      	mov	r7, r0
   280a0:	4614      	mov	r4, r2
   280a2:	460e      	mov	r6, r1
   280a4:	b921      	cbnz	r1, 280b0 <_realloc_r+0x14>
   280a6:	4611      	mov	r1, r2
   280a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   280ac:	f7f7 bad0 	b.w	1f650 <_malloc_r>
   280b0:	b922      	cbnz	r2, 280bc <_realloc_r+0x20>
   280b2:	4625      	mov	r5, r4
   280b4:	f7f7 fa7c 	bl	1f5b0 <_free_r>
   280b8:	4628      	mov	r0, r5
   280ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   280bc:	f000 f9f9 	bl	284b2 <_malloc_usable_size_r>
   280c0:	42a0      	cmp	r0, r4
   280c2:	d20f      	bcs.n	280e4 <_realloc_r+0x48>
   280c4:	4621      	mov	r1, r4
   280c6:	4638      	mov	r0, r7
   280c8:	f7f7 fac2 	bl	1f650 <_malloc_r>
   280cc:	4605      	mov	r5, r0
   280ce:	2800      	cmp	r0, #0
   280d0:	d0f2      	beq.n	280b8 <_realloc_r+0x1c>
   280d2:	4631      	mov	r1, r6
   280d4:	4622      	mov	r2, r4
   280d6:	f7ff fc36 	bl	27946 <memcpy>
   280da:	4631      	mov	r1, r6
   280dc:	4638      	mov	r0, r7
   280de:	f7f7 fa67 	bl	1f5b0 <_free_r>
   280e2:	e7e9      	b.n	280b8 <_realloc_r+0x1c>
   280e4:	4635      	mov	r5, r6
   280e6:	e7e7      	b.n	280b8 <_realloc_r+0x1c>

000280e8 <__ssputs_r>:
   280e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   280ec:	688e      	ldr	r6, [r1, #8]
   280ee:	4682      	mov	sl, r0
   280f0:	460c      	mov	r4, r1
   280f2:	4690      	mov	r8, r2
   280f4:	429e      	cmp	r6, r3
   280f6:	461f      	mov	r7, r3
   280f8:	d838      	bhi.n	2816c <__ssputs_r+0x84>
   280fa:	898a      	ldrh	r2, [r1, #12]
   280fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
   28100:	d032      	beq.n	28168 <__ssputs_r+0x80>
   28102:	6825      	ldr	r5, [r4, #0]
   28104:	3301      	adds	r3, #1
   28106:	6909      	ldr	r1, [r1, #16]
   28108:	eba5 0901 	sub.w	r9, r5, r1
   2810c:	6965      	ldr	r5, [r4, #20]
   2810e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   28112:	444b      	add	r3, r9
   28114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   28118:	106d      	asrs	r5, r5, #1
   2811a:	429d      	cmp	r5, r3
   2811c:	bf38      	it	cc
   2811e:	461d      	movcc	r5, r3
   28120:	0553      	lsls	r3, r2, #21
   28122:	d531      	bpl.n	28188 <__ssputs_r+0xa0>
   28124:	4629      	mov	r1, r5
   28126:	f7f7 fa93 	bl	1f650 <_malloc_r>
   2812a:	4606      	mov	r6, r0
   2812c:	b950      	cbnz	r0, 28144 <__ssputs_r+0x5c>
   2812e:	230c      	movs	r3, #12
   28130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28134:	f8ca 3000 	str.w	r3, [sl]
   28138:	89a3      	ldrh	r3, [r4, #12]
   2813a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2813e:	81a3      	strh	r3, [r4, #12]
   28140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28144:	464a      	mov	r2, r9
   28146:	6921      	ldr	r1, [r4, #16]
   28148:	f7ff fbfd 	bl	27946 <memcpy>
   2814c:	89a3      	ldrh	r3, [r4, #12]
   2814e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   28152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   28156:	81a3      	strh	r3, [r4, #12]
   28158:	6126      	str	r6, [r4, #16]
   2815a:	444e      	add	r6, r9
   2815c:	6165      	str	r5, [r4, #20]
   2815e:	eba5 0509 	sub.w	r5, r5, r9
   28162:	6026      	str	r6, [r4, #0]
   28164:	463e      	mov	r6, r7
   28166:	60a5      	str	r5, [r4, #8]
   28168:	42be      	cmp	r6, r7
   2816a:	d900      	bls.n	2816e <__ssputs_r+0x86>
   2816c:	463e      	mov	r6, r7
   2816e:	4632      	mov	r2, r6
   28170:	4641      	mov	r1, r8
   28172:	6820      	ldr	r0, [r4, #0]
   28174:	f7ff fc07 	bl	27986 <memmove>
   28178:	68a3      	ldr	r3, [r4, #8]
   2817a:	6822      	ldr	r2, [r4, #0]
   2817c:	2000      	movs	r0, #0
   2817e:	1b9b      	subs	r3, r3, r6
   28180:	4432      	add	r2, r6
   28182:	60a3      	str	r3, [r4, #8]
   28184:	6022      	str	r2, [r4, #0]
   28186:	e7db      	b.n	28140 <__ssputs_r+0x58>
   28188:	462a      	mov	r2, r5
   2818a:	f7ff ff87 	bl	2809c <_realloc_r>
   2818e:	4606      	mov	r6, r0
   28190:	2800      	cmp	r0, #0
   28192:	d1e1      	bne.n	28158 <__ssputs_r+0x70>
   28194:	6921      	ldr	r1, [r4, #16]
   28196:	4650      	mov	r0, sl
   28198:	f7f7 fa0a 	bl	1f5b0 <_free_r>
   2819c:	e7c7      	b.n	2812e <__ssputs_r+0x46>

0002819e <_sungetc_r>:
   2819e:	b538      	push	{r3, r4, r5, lr}
   281a0:	1c4b      	adds	r3, r1, #1
   281a2:	4614      	mov	r4, r2
   281a4:	d103      	bne.n	281ae <_sungetc_r+0x10>
   281a6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   281aa:	4628      	mov	r0, r5
   281ac:	bd38      	pop	{r3, r4, r5, pc}
   281ae:	8993      	ldrh	r3, [r2, #12]
   281b0:	b2cd      	uxtb	r5, r1
   281b2:	f023 0320 	bic.w	r3, r3, #32
   281b6:	8193      	strh	r3, [r2, #12]
   281b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   281ba:	6852      	ldr	r2, [r2, #4]
   281bc:	b18b      	cbz	r3, 281e2 <_sungetc_r+0x44>
   281be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   281c0:	4293      	cmp	r3, r2
   281c2:	dd08      	ble.n	281d6 <_sungetc_r+0x38>
   281c4:	6823      	ldr	r3, [r4, #0]
   281c6:	1e5a      	subs	r2, r3, #1
   281c8:	6022      	str	r2, [r4, #0]
   281ca:	f803 5c01 	strb.w	r5, [r3, #-1]
   281ce:	6863      	ldr	r3, [r4, #4]
   281d0:	3301      	adds	r3, #1
   281d2:	6063      	str	r3, [r4, #4]
   281d4:	e7e9      	b.n	281aa <_sungetc_r+0xc>
   281d6:	4621      	mov	r1, r4
   281d8:	f000 f8c7 	bl	2836a <__submore>
   281dc:	2800      	cmp	r0, #0
   281de:	d0f1      	beq.n	281c4 <_sungetc_r+0x26>
   281e0:	e7e1      	b.n	281a6 <_sungetc_r+0x8>
   281e2:	6921      	ldr	r1, [r4, #16]
   281e4:	6823      	ldr	r3, [r4, #0]
   281e6:	b151      	cbz	r1, 281fe <_sungetc_r+0x60>
   281e8:	4299      	cmp	r1, r3
   281ea:	d208      	bcs.n	281fe <_sungetc_r+0x60>
   281ec:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   281f0:	42a9      	cmp	r1, r5
   281f2:	d104      	bne.n	281fe <_sungetc_r+0x60>
   281f4:	3b01      	subs	r3, #1
   281f6:	3201      	adds	r2, #1
   281f8:	6023      	str	r3, [r4, #0]
   281fa:	6062      	str	r2, [r4, #4]
   281fc:	e7d5      	b.n	281aa <_sungetc_r+0xc>
   281fe:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   28202:	f104 0344 	add.w	r3, r4, #68	; 0x44
   28206:	6363      	str	r3, [r4, #52]	; 0x34
   28208:	2303      	movs	r3, #3
   2820a:	63a3      	str	r3, [r4, #56]	; 0x38
   2820c:	4623      	mov	r3, r4
   2820e:	f803 5f46 	strb.w	r5, [r3, #70]!
   28212:	6023      	str	r3, [r4, #0]
   28214:	2301      	movs	r3, #1
   28216:	e7dc      	b.n	281d2 <_sungetc_r+0x34>

00028218 <__ssrefill_r>:
   28218:	b510      	push	{r4, lr}
   2821a:	460c      	mov	r4, r1
   2821c:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2821e:	b169      	cbz	r1, 2823c <__ssrefill_r+0x24>
   28220:	f104 0344 	add.w	r3, r4, #68	; 0x44
   28224:	4299      	cmp	r1, r3
   28226:	d001      	beq.n	2822c <__ssrefill_r+0x14>
   28228:	f7f7 f9c2 	bl	1f5b0 <_free_r>
   2822c:	2000      	movs	r0, #0
   2822e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   28230:	6360      	str	r0, [r4, #52]	; 0x34
   28232:	6063      	str	r3, [r4, #4]
   28234:	b113      	cbz	r3, 2823c <__ssrefill_r+0x24>
   28236:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   28238:	6023      	str	r3, [r4, #0]
   2823a:	bd10      	pop	{r4, pc}
   2823c:	6923      	ldr	r3, [r4, #16]
   2823e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28242:	6023      	str	r3, [r4, #0]
   28244:	2300      	movs	r3, #0
   28246:	6063      	str	r3, [r4, #4]
   28248:	89a3      	ldrh	r3, [r4, #12]
   2824a:	f043 0320 	orr.w	r3, r3, #32
   2824e:	81a3      	strh	r3, [r4, #12]
   28250:	e7f3      	b.n	2823a <__ssrefill_r+0x22>

00028252 <__sfputc_r>:
   28252:	6893      	ldr	r3, [r2, #8]
   28254:	3b01      	subs	r3, #1
   28256:	2b00      	cmp	r3, #0
   28258:	6093      	str	r3, [r2, #8]
   2825a:	b410      	push	{r4}
   2825c:	da08      	bge.n	28270 <__sfputc_r+0x1e>
   2825e:	6994      	ldr	r4, [r2, #24]
   28260:	42a3      	cmp	r3, r4
   28262:	db01      	blt.n	28268 <__sfputc_r+0x16>
   28264:	290a      	cmp	r1, #10
   28266:	d103      	bne.n	28270 <__sfputc_r+0x1e>
   28268:	f85d 4b04 	ldr.w	r4, [sp], #4
   2826c:	f7f9 bae4 	b.w	21838 <__swbuf_r>
   28270:	6813      	ldr	r3, [r2, #0]
   28272:	1c58      	adds	r0, r3, #1
   28274:	6010      	str	r0, [r2, #0]
   28276:	4608      	mov	r0, r1
   28278:	7019      	strb	r1, [r3, #0]
   2827a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2827e:	4770      	bx	lr

00028280 <__sfputs_r>:
   28280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28282:	4606      	mov	r6, r0
   28284:	460f      	mov	r7, r1
   28286:	4614      	mov	r4, r2
   28288:	18d5      	adds	r5, r2, r3
   2828a:	42ac      	cmp	r4, r5
   2828c:	d101      	bne.n	28292 <__sfputs_r+0x12>
   2828e:	2000      	movs	r0, #0
   28290:	e007      	b.n	282a2 <__sfputs_r+0x22>
   28292:	463a      	mov	r2, r7
   28294:	f814 1b01 	ldrb.w	r1, [r4], #1
   28298:	4630      	mov	r0, r6
   2829a:	f7ff ffda 	bl	28252 <__sfputc_r>
   2829e:	1c43      	adds	r3, r0, #1
   282a0:	d1f3      	bne.n	2828a <__sfputs_r+0xa>
   282a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000282a4 <__sccl>:
   282a4:	b570      	push	{r4, r5, r6, lr}
   282a6:	780b      	ldrb	r3, [r1, #0]
   282a8:	4604      	mov	r4, r0
   282aa:	2b5e      	cmp	r3, #94	; 0x5e
   282ac:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   282b0:	bf13      	iteet	ne
   282b2:	1c48      	addne	r0, r1, #1
   282b4:	1c88      	addeq	r0, r1, #2
   282b6:	784b      	ldrbeq	r3, [r1, #1]
   282b8:	2200      	movne	r2, #0
   282ba:	bf08      	it	eq
   282bc:	2201      	moveq	r2, #1
   282be:	1e61      	subs	r1, r4, #1
   282c0:	f801 2f01 	strb.w	r2, [r1, #1]!
   282c4:	42a9      	cmp	r1, r5
   282c6:	d1fb      	bne.n	282c0 <__sccl+0x1c>
   282c8:	b90b      	cbnz	r3, 282ce <__sccl+0x2a>
   282ca:	3801      	subs	r0, #1
   282cc:	bd70      	pop	{r4, r5, r6, pc}
   282ce:	f082 0101 	eor.w	r1, r2, #1
   282d2:	1c42      	adds	r2, r0, #1
   282d4:	54e1      	strb	r1, [r4, r3]
   282d6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   282da:	1e56      	subs	r6, r2, #1
   282dc:	4610      	mov	r0, r2
   282de:	2d2d      	cmp	r5, #45	; 0x2d
   282e0:	d006      	beq.n	282f0 <__sccl+0x4c>
   282e2:	2d5d      	cmp	r5, #93	; 0x5d
   282e4:	d0f2      	beq.n	282cc <__sccl+0x28>
   282e6:	b90d      	cbnz	r5, 282ec <__sccl+0x48>
   282e8:	4630      	mov	r0, r6
   282ea:	e7ef      	b.n	282cc <__sccl+0x28>
   282ec:	462b      	mov	r3, r5
   282ee:	e7f0      	b.n	282d2 <__sccl+0x2e>
   282f0:	7816      	ldrb	r6, [r2, #0]
   282f2:	2e5d      	cmp	r6, #93	; 0x5d
   282f4:	d0fa      	beq.n	282ec <__sccl+0x48>
   282f6:	42b3      	cmp	r3, r6
   282f8:	dcf8      	bgt.n	282ec <__sccl+0x48>
   282fa:	4618      	mov	r0, r3
   282fc:	3001      	adds	r0, #1
   282fe:	4286      	cmp	r6, r0
   28300:	5421      	strb	r1, [r4, r0]
   28302:	dcfb      	bgt.n	282fc <__sccl+0x58>
   28304:	43d8      	mvns	r0, r3
   28306:	1c5d      	adds	r5, r3, #1
   28308:	3202      	adds	r2, #2
   2830a:	4430      	add	r0, r6
   2830c:	42b3      	cmp	r3, r6
   2830e:	bfa8      	it	ge
   28310:	2000      	movge	r0, #0
   28312:	182b      	adds	r3, r5, r0
   28314:	e7df      	b.n	282d6 <__sccl+0x32>

00028316 <_raise_r>:
   28316:	291f      	cmp	r1, #31
   28318:	b538      	push	{r3, r4, r5, lr}
   2831a:	4604      	mov	r4, r0
   2831c:	460d      	mov	r5, r1
   2831e:	d904      	bls.n	2832a <_raise_r+0x14>
   28320:	2316      	movs	r3, #22
   28322:	6003      	str	r3, [r0, #0]
   28324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28328:	bd38      	pop	{r3, r4, r5, pc}
   2832a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2832c:	b112      	cbz	r2, 28334 <_raise_r+0x1e>
   2832e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   28332:	b94b      	cbnz	r3, 28348 <_raise_r+0x32>
   28334:	4620      	mov	r0, r4
   28336:	f000 f816 	bl	28366 <_getpid_r>
   2833a:	462a      	mov	r2, r5
   2833c:	4601      	mov	r1, r0
   2833e:	4620      	mov	r0, r4
   28340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28344:	f7f9 ba66 	b.w	21814 <_kill_r>
   28348:	2b01      	cmp	r3, #1
   2834a:	d00a      	beq.n	28362 <_raise_r+0x4c>
   2834c:	1c59      	adds	r1, r3, #1
   2834e:	d103      	bne.n	28358 <_raise_r+0x42>
   28350:	2316      	movs	r3, #22
   28352:	6003      	str	r3, [r0, #0]
   28354:	2001      	movs	r0, #1
   28356:	e7e7      	b.n	28328 <_raise_r+0x12>
   28358:	2400      	movs	r4, #0
   2835a:	4628      	mov	r0, r5
   2835c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   28360:	4798      	blx	r3
   28362:	2000      	movs	r0, #0
   28364:	e7e0      	b.n	28328 <_raise_r+0x12>

00028366 <_getpid_r>:
   28366:	f7fa be16 	b.w	22f96 <_getpid>

0002836a <__submore>:
   2836a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2836e:	460c      	mov	r4, r1
   28370:	6b49      	ldr	r1, [r1, #52]	; 0x34
   28372:	f104 0344 	add.w	r3, r4, #68	; 0x44
   28376:	4299      	cmp	r1, r3
   28378:	d11a      	bne.n	283b0 <__submore+0x46>
   2837a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2837e:	f7f7 f967 	bl	1f650 <_malloc_r>
   28382:	b918      	cbnz	r0, 2838c <__submore+0x22>
   28384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2838c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   28390:	6360      	str	r0, [r4, #52]	; 0x34
   28392:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   28396:	63a3      	str	r3, [r4, #56]	; 0x38
   28398:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   2839c:	7083      	strb	r3, [r0, #2]
   2839e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   283a2:	7043      	strb	r3, [r0, #1]
   283a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   283a8:	7003      	strb	r3, [r0, #0]
   283aa:	6020      	str	r0, [r4, #0]
   283ac:	2000      	movs	r0, #0
   283ae:	e7eb      	b.n	28388 <__submore+0x1e>
   283b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   283b2:	0077      	lsls	r7, r6, #1
   283b4:	463a      	mov	r2, r7
   283b6:	f7ff fe71 	bl	2809c <_realloc_r>
   283ba:	4605      	mov	r5, r0
   283bc:	2800      	cmp	r0, #0
   283be:	d0e1      	beq.n	28384 <__submore+0x1a>
   283c0:	eb00 0806 	add.w	r8, r0, r6
   283c4:	4601      	mov	r1, r0
   283c6:	4632      	mov	r2, r6
   283c8:	4640      	mov	r0, r8
   283ca:	f7ff fabc 	bl	27946 <memcpy>
   283ce:	f8c4 8000 	str.w	r8, [r4]
   283d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   283d6:	e7e9      	b.n	283ac <__submore+0x42>

000283d8 <__ascii_wctomb>:
   283d8:	b149      	cbz	r1, 283ee <__ascii_wctomb+0x16>
   283da:	2aff      	cmp	r2, #255	; 0xff
   283dc:	bf8d      	iteet	hi
   283de:	238a      	movhi	r3, #138	; 0x8a
   283e0:	2001      	movls	r0, #1
   283e2:	700a      	strbls	r2, [r1, #0]
   283e4:	6003      	strhi	r3, [r0, #0]
   283e6:	bf88      	it	hi
   283e8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   283ec:	4770      	bx	lr
   283ee:	4608      	mov	r0, r1
   283f0:	4770      	bx	lr

000283f2 <abort>:
   283f2:	2006      	movs	r0, #6
   283f4:	b508      	push	{r3, lr}
   283f6:	f7f9 fa05 	bl	21804 <raise>
   283fa:	2001      	movs	r0, #1
   283fc:	f7e8 f966 	bl	106cc <_exit>

00028400 <__sfmoreglue>:
   28400:	b570      	push	{r4, r5, r6, lr}
   28402:	1e4a      	subs	r2, r1, #1
   28404:	2568      	movs	r5, #104	; 0x68
   28406:	460e      	mov	r6, r1
   28408:	4355      	muls	r5, r2
   2840a:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2840e:	f7f7 f91f 	bl	1f650 <_malloc_r>
   28412:	4604      	mov	r4, r0
   28414:	b140      	cbz	r0, 28428 <__sfmoreglue+0x28>
   28416:	2100      	movs	r1, #0
   28418:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2841c:	e9c0 1600 	strd	r1, r6, [r0]
   28420:	300c      	adds	r0, #12
   28422:	60a0      	str	r0, [r4, #8]
   28424:	f7ff fac9 	bl	279ba <memset>
   28428:	4620      	mov	r0, r4
   2842a:	bd70      	pop	{r4, r5, r6, pc}

0002842c <_fwalk_reent>:
   2842c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28430:	4606      	mov	r6, r0
   28432:	4688      	mov	r8, r1
   28434:	f100 0448 	add.w	r4, r0, #72	; 0x48
   28438:	2700      	movs	r7, #0
   2843a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   2843e:	f1b9 0901 	subs.w	r9, r9, #1
   28442:	d505      	bpl.n	28450 <_fwalk_reent+0x24>
   28444:	6824      	ldr	r4, [r4, #0]
   28446:	2c00      	cmp	r4, #0
   28448:	d1f7      	bne.n	2843a <_fwalk_reent+0xe>
   2844a:	4638      	mov	r0, r7
   2844c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   28450:	89ab      	ldrh	r3, [r5, #12]
   28452:	2b01      	cmp	r3, #1
   28454:	d907      	bls.n	28466 <_fwalk_reent+0x3a>
   28456:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2845a:	3301      	adds	r3, #1
   2845c:	d003      	beq.n	28466 <_fwalk_reent+0x3a>
   2845e:	4629      	mov	r1, r5
   28460:	4630      	mov	r0, r6
   28462:	47c0      	blx	r8
   28464:	4307      	orrs	r7, r0
   28466:	3568      	adds	r5, #104	; 0x68
   28468:	e7e9      	b.n	2843e <_fwalk_reent+0x12>

0002846a <__swhatbuf_r>:
   2846a:	b570      	push	{r4, r5, r6, lr}
   2846c:	460e      	mov	r6, r1
   2846e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   28472:	b096      	sub	sp, #88	; 0x58
   28474:	4614      	mov	r4, r2
   28476:	2900      	cmp	r1, #0
   28478:	461d      	mov	r5, r3
   2847a:	da07      	bge.n	2848c <__swhatbuf_r+0x22>
   2847c:	2300      	movs	r3, #0
   2847e:	602b      	str	r3, [r5, #0]
   28480:	89b3      	ldrh	r3, [r6, #12]
   28482:	061a      	lsls	r2, r3, #24
   28484:	d410      	bmi.n	284a8 <__swhatbuf_r+0x3e>
   28486:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2848a:	e00e      	b.n	284aa <__swhatbuf_r+0x40>
   2848c:	466a      	mov	r2, sp
   2848e:	f7f9 fc5f 	bl	21d50 <_fstat_r>
   28492:	2800      	cmp	r0, #0
   28494:	dbf2      	blt.n	2847c <__swhatbuf_r+0x12>
   28496:	9a01      	ldr	r2, [sp, #4]
   28498:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   2849c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   284a0:	425a      	negs	r2, r3
   284a2:	415a      	adcs	r2, r3
   284a4:	602a      	str	r2, [r5, #0]
   284a6:	e7ee      	b.n	28486 <__swhatbuf_r+0x1c>
   284a8:	2340      	movs	r3, #64	; 0x40
   284aa:	2000      	movs	r0, #0
   284ac:	6023      	str	r3, [r4, #0]
   284ae:	b016      	add	sp, #88	; 0x58
   284b0:	bd70      	pop	{r4, r5, r6, pc}

000284b2 <_malloc_usable_size_r>:
   284b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
   284b6:	1f18      	subs	r0, r3, #4
   284b8:	2b00      	cmp	r3, #0
   284ba:	bfbc      	itt	lt
   284bc:	580b      	ldrlt	r3, [r1, r0]
   284be:	18c0      	addlt	r0, r0, r3
   284c0:	4770      	bx	lr
