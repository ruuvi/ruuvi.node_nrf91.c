
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	2002ea98 	.word	0x2002ea98
    c004:	00011031 	.word	0x00011031
    c008:	00024c83 	.word	0x00024c83
    c00c:	00011061 	.word	0x00011061
    c010:	00011061 	.word	0x00011061
    c014:	00011061 	.word	0x00011061
    c018:	00011061 	.word	0x00011061
    c01c:	00011061 	.word	0x00011061
	...
    c02c:	00010fa1 	.word	0x00010fa1
    c030:	00011061 	.word	0x00011061
    c034:	00000000 	.word	0x00000000
    c038:	00010ef1 	.word	0x00010ef1
    c03c:	00024c65 	.word	0x00024c65

0000c040 <_irq_vector_table>:
    c040:	00010ff1 00010ff1 00010ff1 00010ff1     ................
    c050:	00010ff1 00010ff1 00010ff1 00010ff1     ................
    c060:	00010ff1 00010ff1 00010ff1 00010ff1     ................
    c070:	00010ff1 00010ff1 00010ff1 00010ff1     ................
    c080:	00010ff1 00010ff1 00010ff1 00010ff1     ................
    c090:	00010ff1 00010ff1 00010ff1 00010ff1     ................
    c0a0:	00010ff1 00010ff1 00010ff1 00010ff1     ................
    c0b0:	00014d11 00028135 00010ff1 00010ff1     .M..5...........
    c0c0:	00010ff1 00010ff1 00010ff1 00010ff1     ................
    c0d0:	00010ff1 00010ff1 00010ff1 00010ff1     ................
    c0e0:	00010ff1 00010ff1 00028153 00010ff1     ........S.......
    c0f0:	00010ff1 00010ff1 00010ff1 00010ff1     ................
    c100:	00010ff1 00010ff1 00010ff1 00010ff1     ................
    c110:	00010ff1 00010ff1 00010ff1 00010ff1     ................
    c120:	00010ff1 00010ff1 00010ff1 00010ff1     ................
    c130:	00010ff1 00010ff1 00010ff1 00010ff1     ................
    c140:	00010ff1                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00021e94 00000001 0000c000 0000c000     ................
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_drsub>:
    c240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c244:	e002      	b.n	c24c <__adddf3>
    c246:	bf00      	nop

0000c248 <__aeabi_dsub>:
    c248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c24c <__adddf3>:
    c24c:	b530      	push	{r4, r5, lr}
    c24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c256:	ea94 0f05 	teq	r4, r5
    c25a:	bf08      	it	eq
    c25c:	ea90 0f02 	teqeq	r0, r2
    c260:	bf1f      	itttt	ne
    c262:	ea54 0c00 	orrsne.w	ip, r4, r0
    c266:	ea55 0c02 	orrsne.w	ip, r5, r2
    c26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c272:	f000 80e2 	beq.w	c43a <__adddf3+0x1ee>
    c276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27e:	bfb8      	it	lt
    c280:	426d      	neglt	r5, r5
    c282:	dd0c      	ble.n	c29e <__adddf3+0x52>
    c284:	442c      	add	r4, r5
    c286:	ea80 0202 	eor.w	r2, r0, r2
    c28a:	ea81 0303 	eor.w	r3, r1, r3
    c28e:	ea82 0000 	eor.w	r0, r2, r0
    c292:	ea83 0101 	eor.w	r1, r3, r1
    c296:	ea80 0202 	eor.w	r2, r0, r2
    c29a:	ea81 0303 	eor.w	r3, r1, r3
    c29e:	2d36      	cmp	r5, #54	; 0x36
    c2a0:	bf88      	it	hi
    c2a2:	bd30      	pophi	{r4, r5, pc}
    c2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b4:	d002      	beq.n	c2bc <__adddf3+0x70>
    c2b6:	4240      	negs	r0, r0
    c2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c8:	d002      	beq.n	c2d0 <__adddf3+0x84>
    c2ca:	4252      	negs	r2, r2
    c2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2d0:	ea94 0f05 	teq	r4, r5
    c2d4:	f000 80a7 	beq.w	c426 <__adddf3+0x1da>
    c2d8:	f1a4 0401 	sub.w	r4, r4, #1
    c2dc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2e0:	db0d      	blt.n	c2fe <__adddf3+0xb2>
    c2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ea:	1880      	adds	r0, r0, r2
    c2ec:	f141 0100 	adc.w	r1, r1, #0
    c2f0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f4:	1880      	adds	r0, r0, r2
    c2f6:	fa43 f305 	asr.w	r3, r3, r5
    c2fa:	4159      	adcs	r1, r3
    c2fc:	e00e      	b.n	c31c <__adddf3+0xd0>
    c2fe:	f1a5 0520 	sub.w	r5, r5, #32
    c302:	f10e 0e20 	add.w	lr, lr, #32
    c306:	2a01      	cmp	r2, #1
    c308:	fa03 fc0e 	lsl.w	ip, r3, lr
    c30c:	bf28      	it	cs
    c30e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c312:	fa43 f305 	asr.w	r3, r3, r5
    c316:	18c0      	adds	r0, r0, r3
    c318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c320:	d507      	bpl.n	c332 <__adddf3+0xe6>
    c322:	f04f 0e00 	mov.w	lr, #0
    c326:	f1dc 0c00 	rsbs	ip, ip, #0
    c32a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32e:	eb6e 0101 	sbc.w	r1, lr, r1
    c332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c336:	d31b      	bcc.n	c370 <__adddf3+0x124>
    c338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c33c:	d30c      	bcc.n	c358 <__adddf3+0x10c>
    c33e:	0849      	lsrs	r1, r1, #1
    c340:	ea5f 0030 	movs.w	r0, r0, rrx
    c344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c348:	f104 0401 	add.w	r4, r4, #1
    c34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c354:	f080 809a 	bcs.w	c48c <__adddf3+0x240>
    c358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c35c:	bf08      	it	eq
    c35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c362:	f150 0000 	adcs.w	r0, r0, #0
    c366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c36a:	ea41 0105 	orr.w	r1, r1, r5
    c36e:	bd30      	pop	{r4, r5, pc}
    c370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c374:	4140      	adcs	r0, r0
    c376:	eb41 0101 	adc.w	r1, r1, r1
    c37a:	3c01      	subs	r4, #1
    c37c:	bf28      	it	cs
    c37e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c382:	d2e9      	bcs.n	c358 <__adddf3+0x10c>
    c384:	f091 0f00 	teq	r1, #0
    c388:	bf04      	itt	eq
    c38a:	4601      	moveq	r1, r0
    c38c:	2000      	moveq	r0, #0
    c38e:	fab1 f381 	clz	r3, r1
    c392:	bf08      	it	eq
    c394:	3320      	addeq	r3, #32
    c396:	f1a3 030b 	sub.w	r3, r3, #11
    c39a:	f1b3 0220 	subs.w	r2, r3, #32
    c39e:	da0c      	bge.n	c3ba <__adddf3+0x16e>
    c3a0:	320c      	adds	r2, #12
    c3a2:	dd08      	ble.n	c3b6 <__adddf3+0x16a>
    c3a4:	f102 0c14 	add.w	ip, r2, #20
    c3a8:	f1c2 020c 	rsb	r2, r2, #12
    c3ac:	fa01 f00c 	lsl.w	r0, r1, ip
    c3b0:	fa21 f102 	lsr.w	r1, r1, r2
    c3b4:	e00c      	b.n	c3d0 <__adddf3+0x184>
    c3b6:	f102 0214 	add.w	r2, r2, #20
    c3ba:	bfd8      	it	le
    c3bc:	f1c2 0c20 	rsble	ip, r2, #32
    c3c0:	fa01 f102 	lsl.w	r1, r1, r2
    c3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c8:	bfdc      	itt	le
    c3ca:	ea41 010c 	orrle.w	r1, r1, ip
    c3ce:	4090      	lslle	r0, r2
    c3d0:	1ae4      	subs	r4, r4, r3
    c3d2:	bfa2      	ittt	ge
    c3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d8:	4329      	orrge	r1, r5
    c3da:	bd30      	popge	{r4, r5, pc}
    c3dc:	ea6f 0404 	mvn.w	r4, r4
    c3e0:	3c1f      	subs	r4, #31
    c3e2:	da1c      	bge.n	c41e <__adddf3+0x1d2>
    c3e4:	340c      	adds	r4, #12
    c3e6:	dc0e      	bgt.n	c406 <__adddf3+0x1ba>
    c3e8:	f104 0414 	add.w	r4, r4, #20
    c3ec:	f1c4 0220 	rsb	r2, r4, #32
    c3f0:	fa20 f004 	lsr.w	r0, r0, r4
    c3f4:	fa01 f302 	lsl.w	r3, r1, r2
    c3f8:	ea40 0003 	orr.w	r0, r0, r3
    c3fc:	fa21 f304 	lsr.w	r3, r1, r4
    c400:	ea45 0103 	orr.w	r1, r5, r3
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f1c4 040c 	rsb	r4, r4, #12
    c40a:	f1c4 0220 	rsb	r2, r4, #32
    c40e:	fa20 f002 	lsr.w	r0, r0, r2
    c412:	fa01 f304 	lsl.w	r3, r1, r4
    c416:	ea40 0003 	orr.w	r0, r0, r3
    c41a:	4629      	mov	r1, r5
    c41c:	bd30      	pop	{r4, r5, pc}
    c41e:	fa21 f004 	lsr.w	r0, r1, r4
    c422:	4629      	mov	r1, r5
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	f094 0f00 	teq	r4, #0
    c42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42e:	bf06      	itte	eq
    c430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c434:	3401      	addeq	r4, #1
    c436:	3d01      	subne	r5, #1
    c438:	e74e      	b.n	c2d8 <__adddf3+0x8c>
    c43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43e:	bf18      	it	ne
    c440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c444:	d029      	beq.n	c49a <__adddf3+0x24e>
    c446:	ea94 0f05 	teq	r4, r5
    c44a:	bf08      	it	eq
    c44c:	ea90 0f02 	teqeq	r0, r2
    c450:	d005      	beq.n	c45e <__adddf3+0x212>
    c452:	ea54 0c00 	orrs.w	ip, r4, r0
    c456:	bf04      	itt	eq
    c458:	4619      	moveq	r1, r3
    c45a:	4610      	moveq	r0, r2
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	ea91 0f03 	teq	r1, r3
    c462:	bf1e      	ittt	ne
    c464:	2100      	movne	r1, #0
    c466:	2000      	movne	r0, #0
    c468:	bd30      	popne	{r4, r5, pc}
    c46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46e:	d105      	bne.n	c47c <__adddf3+0x230>
    c470:	0040      	lsls	r0, r0, #1
    c472:	4149      	adcs	r1, r1
    c474:	bf28      	it	cs
    c476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c47a:	bd30      	pop	{r4, r5, pc}
    c47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c480:	bf3c      	itt	cc
    c482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c486:	bd30      	popcc	{r4, r5, pc}
    c488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c494:	f04f 0000 	mov.w	r0, #0
    c498:	bd30      	pop	{r4, r5, pc}
    c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49e:	bf1a      	itte	ne
    c4a0:	4619      	movne	r1, r3
    c4a2:	4610      	movne	r0, r2
    c4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a8:	bf1c      	itt	ne
    c4aa:	460b      	movne	r3, r1
    c4ac:	4602      	movne	r2, r0
    c4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4b2:	bf06      	itte	eq
    c4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b8:	ea91 0f03 	teqeq	r1, r3
    c4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_ui2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f04f 0500 	mov.w	r5, #0
    c4dc:	f04f 0100 	mov.w	r1, #0
    c4e0:	e750      	b.n	c384 <__adddf3+0x138>
    c4e2:	bf00      	nop

0000c4e4 <__aeabi_i2d>:
    c4e4:	f090 0f00 	teq	r0, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2100      	moveq	r1, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	b530      	push	{r4, r5, lr}
    c4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4fc:	bf48      	it	mi
    c4fe:	4240      	negmi	r0, r0
    c500:	f04f 0100 	mov.w	r1, #0
    c504:	e73e      	b.n	c384 <__adddf3+0x138>
    c506:	bf00      	nop

0000c508 <__aeabi_f2d>:
    c508:	0042      	lsls	r2, r0, #1
    c50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50e:	ea4f 0131 	mov.w	r1, r1, rrx
    c512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c516:	bf1f      	itttt	ne
    c518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c524:	4770      	bxne	lr
    c526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c52a:	bf08      	it	eq
    c52c:	4770      	bxeq	lr
    c52e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c532:	bf04      	itt	eq
    c534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c538:	4770      	bxeq	lr
    c53a:	b530      	push	{r4, r5, lr}
    c53c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c548:	e71c      	b.n	c384 <__adddf3+0x138>
    c54a:	bf00      	nop

0000c54c <__aeabi_ul2d>:
    c54c:	ea50 0201 	orrs.w	r2, r0, r1
    c550:	bf08      	it	eq
    c552:	4770      	bxeq	lr
    c554:	b530      	push	{r4, r5, lr}
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	e00a      	b.n	c572 <__aeabi_l2d+0x16>

0000c55c <__aeabi_l2d>:
    c55c:	ea50 0201 	orrs.w	r2, r0, r1
    c560:	bf08      	it	eq
    c562:	4770      	bxeq	lr
    c564:	b530      	push	{r4, r5, lr}
    c566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c56a:	d502      	bpl.n	c572 <__aeabi_l2d+0x16>
    c56c:	4240      	negs	r0, r0
    c56e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57e:	f43f aed8 	beq.w	c332 <__adddf3+0xe6>
    c582:	f04f 0203 	mov.w	r2, #3
    c586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58a:	bf18      	it	ne
    c58c:	3203      	addne	r2, #3
    c58e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c592:	bf18      	it	ne
    c594:	3203      	addne	r2, #3
    c596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c59a:	f1c2 0320 	rsb	r3, r2, #32
    c59e:	fa00 fc03 	lsl.w	ip, r0, r3
    c5a2:	fa20 f002 	lsr.w	r0, r0, r2
    c5a6:	fa01 fe03 	lsl.w	lr, r1, r3
    c5aa:	ea40 000e 	orr.w	r0, r0, lr
    c5ae:	fa21 f102 	lsr.w	r1, r1, r2
    c5b2:	4414      	add	r4, r2
    c5b4:	e6bd      	b.n	c332 <__adddf3+0xe6>
    c5b6:	bf00      	nop

0000c5b8 <__gedf2>:
    c5b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    c5bc:	e006      	b.n	c5cc <__cmpdf2+0x4>
    c5be:	bf00      	nop

0000c5c0 <__ledf2>:
    c5c0:	f04f 0c01 	mov.w	ip, #1
    c5c4:	e002      	b.n	c5cc <__cmpdf2+0x4>
    c5c6:	bf00      	nop

0000c5c8 <__cmpdf2>:
    c5c8:	f04f 0c01 	mov.w	ip, #1
    c5cc:	f84d cd04 	str.w	ip, [sp, #-4]!
    c5d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c5d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c5d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c5dc:	bf18      	it	ne
    c5de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    c5e2:	d01b      	beq.n	c61c <__cmpdf2+0x54>
    c5e4:	b001      	add	sp, #4
    c5e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    c5ea:	bf0c      	ite	eq
    c5ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    c5f0:	ea91 0f03 	teqne	r1, r3
    c5f4:	bf02      	ittt	eq
    c5f6:	ea90 0f02 	teqeq	r0, r2
    c5fa:	2000      	moveq	r0, #0
    c5fc:	4770      	bxeq	lr
    c5fe:	f110 0f00 	cmn.w	r0, #0
    c602:	ea91 0f03 	teq	r1, r3
    c606:	bf58      	it	pl
    c608:	4299      	cmppl	r1, r3
    c60a:	bf08      	it	eq
    c60c:	4290      	cmpeq	r0, r2
    c60e:	bf2c      	ite	cs
    c610:	17d8      	asrcs	r0, r3, #31
    c612:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    c616:	f040 0001 	orr.w	r0, r0, #1
    c61a:	4770      	bx	lr
    c61c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c624:	d102      	bne.n	c62c <__cmpdf2+0x64>
    c626:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c62a:	d107      	bne.n	c63c <__cmpdf2+0x74>
    c62c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c630:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c634:	d1d6      	bne.n	c5e4 <__cmpdf2+0x1c>
    c636:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c63a:	d0d3      	beq.n	c5e4 <__cmpdf2+0x1c>
    c63c:	f85d 0b04 	ldr.w	r0, [sp], #4
    c640:	4770      	bx	lr
    c642:	bf00      	nop

0000c644 <__aeabi_cdrcmple>:
    c644:	4684      	mov	ip, r0
    c646:	4610      	mov	r0, r2
    c648:	4662      	mov	r2, ip
    c64a:	468c      	mov	ip, r1
    c64c:	4619      	mov	r1, r3
    c64e:	4663      	mov	r3, ip
    c650:	e000      	b.n	c654 <__aeabi_cdcmpeq>
    c652:	bf00      	nop

0000c654 <__aeabi_cdcmpeq>:
    c654:	b501      	push	{r0, lr}
    c656:	f7ff ffb7 	bl	c5c8 <__cmpdf2>
    c65a:	2800      	cmp	r0, #0
    c65c:	bf48      	it	mi
    c65e:	f110 0f00 	cmnmi.w	r0, #0
    c662:	bd01      	pop	{r0, pc}

0000c664 <__aeabi_dcmpeq>:
    c664:	f84d ed08 	str.w	lr, [sp, #-8]!
    c668:	f7ff fff4 	bl	c654 <__aeabi_cdcmpeq>
    c66c:	bf0c      	ite	eq
    c66e:	2001      	moveq	r0, #1
    c670:	2000      	movne	r0, #0
    c672:	f85d fb08 	ldr.w	pc, [sp], #8
    c676:	bf00      	nop

0000c678 <__aeabi_dcmplt>:
    c678:	f84d ed08 	str.w	lr, [sp, #-8]!
    c67c:	f7ff ffea 	bl	c654 <__aeabi_cdcmpeq>
    c680:	bf34      	ite	cc
    c682:	2001      	movcc	r0, #1
    c684:	2000      	movcs	r0, #0
    c686:	f85d fb08 	ldr.w	pc, [sp], #8
    c68a:	bf00      	nop

0000c68c <__aeabi_dcmple>:
    c68c:	f84d ed08 	str.w	lr, [sp, #-8]!
    c690:	f7ff ffe0 	bl	c654 <__aeabi_cdcmpeq>
    c694:	bf94      	ite	ls
    c696:	2001      	movls	r0, #1
    c698:	2000      	movhi	r0, #0
    c69a:	f85d fb08 	ldr.w	pc, [sp], #8
    c69e:	bf00      	nop

0000c6a0 <__aeabi_dcmpge>:
    c6a0:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6a4:	f7ff ffce 	bl	c644 <__aeabi_cdrcmple>
    c6a8:	bf94      	ite	ls
    c6aa:	2001      	movls	r0, #1
    c6ac:	2000      	movhi	r0, #0
    c6ae:	f85d fb08 	ldr.w	pc, [sp], #8
    c6b2:	bf00      	nop

0000c6b4 <__aeabi_dcmpgt>:
    c6b4:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6b8:	f7ff ffc4 	bl	c644 <__aeabi_cdrcmple>
    c6bc:	bf34      	ite	cc
    c6be:	2001      	movcc	r0, #1
    c6c0:	2000      	movcs	r0, #0
    c6c2:	f85d fb08 	ldr.w	pc, [sp], #8
    c6c6:	bf00      	nop

0000c6c8 <__aeabi_d2iz>:
    c6c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c6cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c6d0:	d215      	bcs.n	c6fe <__aeabi_d2iz+0x36>
    c6d2:	d511      	bpl.n	c6f8 <__aeabi_d2iz+0x30>
    c6d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c6d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c6dc:	d912      	bls.n	c704 <__aeabi_d2iz+0x3c>
    c6de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c6e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c6e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c6ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c6ee:	fa23 f002 	lsr.w	r0, r3, r2
    c6f2:	bf18      	it	ne
    c6f4:	4240      	negne	r0, r0
    c6f6:	4770      	bx	lr
    c6f8:	f04f 0000 	mov.w	r0, #0
    c6fc:	4770      	bx	lr
    c6fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c702:	d105      	bne.n	c710 <__aeabi_d2iz+0x48>
    c704:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    c708:	bf08      	it	eq
    c70a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    c70e:	4770      	bx	lr
    c710:	f04f 0000 	mov.w	r0, #0
    c714:	4770      	bx	lr
    c716:	bf00      	nop

0000c718 <__aeabi_d2f>:
    c718:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c71c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c720:	bf24      	itt	cs
    c722:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c726:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c72a:	d90d      	bls.n	c748 <__aeabi_d2f+0x30>
    c72c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c730:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c734:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c738:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c73c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c740:	bf08      	it	eq
    c742:	f020 0001 	biceq.w	r0, r0, #1
    c746:	4770      	bx	lr
    c748:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c74c:	d121      	bne.n	c792 <__aeabi_d2f+0x7a>
    c74e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c752:	bfbc      	itt	lt
    c754:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c758:	4770      	bxlt	lr
    c75a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c75e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c762:	f1c2 0218 	rsb	r2, r2, #24
    c766:	f1c2 0c20 	rsb	ip, r2, #32
    c76a:	fa10 f30c 	lsls.w	r3, r0, ip
    c76e:	fa20 f002 	lsr.w	r0, r0, r2
    c772:	bf18      	it	ne
    c774:	f040 0001 	orrne.w	r0, r0, #1
    c778:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c77c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c780:	fa03 fc0c 	lsl.w	ip, r3, ip
    c784:	ea40 000c 	orr.w	r0, r0, ip
    c788:	fa23 f302 	lsr.w	r3, r3, r2
    c78c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c790:	e7cc      	b.n	c72c <__aeabi_d2f+0x14>
    c792:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c796:	d107      	bne.n	c7a8 <__aeabi_d2f+0x90>
    c798:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c79c:	bf1e      	ittt	ne
    c79e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c7a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c7a6:	4770      	bxne	lr
    c7a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c7ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c7b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c7b4:	4770      	bx	lr
    c7b6:	bf00      	nop

0000c7b8 <__aeabi_uldivmod>:
    c7b8:	b953      	cbnz	r3, c7d0 <__aeabi_uldivmod+0x18>
    c7ba:	b94a      	cbnz	r2, c7d0 <__aeabi_uldivmod+0x18>
    c7bc:	2900      	cmp	r1, #0
    c7be:	bf08      	it	eq
    c7c0:	2800      	cmpeq	r0, #0
    c7c2:	bf1c      	itt	ne
    c7c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c7c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c7cc:	f000 b980 	b.w	cad0 <__aeabi_idiv0>
    c7d0:	f1ad 0c08 	sub.w	ip, sp, #8
    c7d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c7d8:	f000 f806 	bl	c7e8 <__udivmoddi4>
    c7dc:	f8dd e004 	ldr.w	lr, [sp, #4]
    c7e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c7e4:	b004      	add	sp, #16
    c7e6:	4770      	bx	lr

0000c7e8 <__udivmoddi4>:
    c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c7ee:	4604      	mov	r4, r0
    c7f0:	4688      	mov	r8, r1
    c7f2:	2b00      	cmp	r3, #0
    c7f4:	f040 8084 	bne.w	c900 <__udivmoddi4+0x118>
    c7f8:	428a      	cmp	r2, r1
    c7fa:	4617      	mov	r7, r2
    c7fc:	d943      	bls.n	c886 <__udivmoddi4+0x9e>
    c7fe:	fab2 f282 	clz	r2, r2
    c802:	b142      	cbz	r2, c816 <__udivmoddi4+0x2e>
    c804:	f1c2 0020 	rsb	r0, r2, #32
    c808:	4091      	lsls	r1, r2
    c80a:	4097      	lsls	r7, r2
    c80c:	fa24 f000 	lsr.w	r0, r4, r0
    c810:	4094      	lsls	r4, r2
    c812:	ea40 0801 	orr.w	r8, r0, r1
    c816:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c81a:	0c23      	lsrs	r3, r4, #16
    c81c:	fa1f fe87 	uxth.w	lr, r7
    c820:	fbb8 f6fc 	udiv	r6, r8, ip
    c824:	fb0c 8116 	mls	r1, ip, r6, r8
    c828:	fb06 f00e 	mul.w	r0, r6, lr
    c82c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c830:	4298      	cmp	r0, r3
    c832:	d907      	bls.n	c844 <__udivmoddi4+0x5c>
    c834:	18fb      	adds	r3, r7, r3
    c836:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
    c83a:	d202      	bcs.n	c842 <__udivmoddi4+0x5a>
    c83c:	4298      	cmp	r0, r3
    c83e:	f200 8131 	bhi.w	caa4 <__udivmoddi4+0x2bc>
    c842:	460e      	mov	r6, r1
    c844:	1a19      	subs	r1, r3, r0
    c846:	b2a3      	uxth	r3, r4
    c848:	fbb1 f0fc 	udiv	r0, r1, ip
    c84c:	fb0c 1110 	mls	r1, ip, r0, r1
    c850:	fb00 fe0e 	mul.w	lr, r0, lr
    c854:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c858:	45a6      	cmp	lr, r4
    c85a:	d907      	bls.n	c86c <__udivmoddi4+0x84>
    c85c:	193c      	adds	r4, r7, r4
    c85e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c862:	d202      	bcs.n	c86a <__udivmoddi4+0x82>
    c864:	45a6      	cmp	lr, r4
    c866:	f200 811a 	bhi.w	ca9e <__udivmoddi4+0x2b6>
    c86a:	4618      	mov	r0, r3
    c86c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    c870:	eba4 040e 	sub.w	r4, r4, lr
    c874:	2600      	movs	r6, #0
    c876:	b11d      	cbz	r5, c880 <__udivmoddi4+0x98>
    c878:	40d4      	lsrs	r4, r2
    c87a:	2300      	movs	r3, #0
    c87c:	e9c5 4300 	strd	r4, r3, [r5]
    c880:	4631      	mov	r1, r6
    c882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c886:	b902      	cbnz	r2, c88a <__udivmoddi4+0xa2>
    c888:	deff      	udf	#255	; 0xff
    c88a:	fab2 f282 	clz	r2, r2
    c88e:	2a00      	cmp	r2, #0
    c890:	d152      	bne.n	c938 <__udivmoddi4+0x150>
    c892:	1bcb      	subs	r3, r1, r7
    c894:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c898:	fa1f f887 	uxth.w	r8, r7
    c89c:	2601      	movs	r6, #1
    c89e:	0c21      	lsrs	r1, r4, #16
    c8a0:	fbb3 fcfe 	udiv	ip, r3, lr
    c8a4:	fb0e 301c 	mls	r0, lr, ip, r3
    c8a8:	fb08 f90c 	mul.w	r9, r8, ip
    c8ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c8b0:	4589      	cmp	r9, r1
    c8b2:	d90b      	bls.n	c8cc <__udivmoddi4+0xe4>
    c8b4:	1879      	adds	r1, r7, r1
    c8b6:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    c8ba:	bf2c      	ite	cs
    c8bc:	2001      	movcs	r0, #1
    c8be:	2000      	movcc	r0, #0
    c8c0:	4589      	cmp	r9, r1
    c8c2:	d902      	bls.n	c8ca <__udivmoddi4+0xe2>
    c8c4:	2800      	cmp	r0, #0
    c8c6:	f000 80f0 	beq.w	caaa <__udivmoddi4+0x2c2>
    c8ca:	469c      	mov	ip, r3
    c8cc:	eba1 0109 	sub.w	r1, r1, r9
    c8d0:	b2a3      	uxth	r3, r4
    c8d2:	fbb1 f0fe 	udiv	r0, r1, lr
    c8d6:	fb0e 1110 	mls	r1, lr, r0, r1
    c8da:	fb08 f800 	mul.w	r8, r8, r0
    c8de:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c8e2:	45a0      	cmp	r8, r4
    c8e4:	d907      	bls.n	c8f6 <__udivmoddi4+0x10e>
    c8e6:	193c      	adds	r4, r7, r4
    c8e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c8ec:	d202      	bcs.n	c8f4 <__udivmoddi4+0x10c>
    c8ee:	45a0      	cmp	r8, r4
    c8f0:	f200 80d2 	bhi.w	ca98 <__udivmoddi4+0x2b0>
    c8f4:	4618      	mov	r0, r3
    c8f6:	eba4 0408 	sub.w	r4, r4, r8
    c8fa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c8fe:	e7ba      	b.n	c876 <__udivmoddi4+0x8e>
    c900:	428b      	cmp	r3, r1
    c902:	d909      	bls.n	c918 <__udivmoddi4+0x130>
    c904:	2d00      	cmp	r5, #0
    c906:	f000 80be 	beq.w	ca86 <__udivmoddi4+0x29e>
    c90a:	2600      	movs	r6, #0
    c90c:	e9c5 0100 	strd	r0, r1, [r5]
    c910:	4630      	mov	r0, r6
    c912:	4631      	mov	r1, r6
    c914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c918:	fab3 f683 	clz	r6, r3
    c91c:	2e00      	cmp	r6, #0
    c91e:	d14d      	bne.n	c9bc <__udivmoddi4+0x1d4>
    c920:	428b      	cmp	r3, r1
    c922:	f0c0 80b3 	bcc.w	ca8c <__udivmoddi4+0x2a4>
    c926:	4282      	cmp	r2, r0
    c928:	f240 80b0 	bls.w	ca8c <__udivmoddi4+0x2a4>
    c92c:	4630      	mov	r0, r6
    c92e:	2d00      	cmp	r5, #0
    c930:	d0a6      	beq.n	c880 <__udivmoddi4+0x98>
    c932:	e9c5 4800 	strd	r4, r8, [r5]
    c936:	e7a3      	b.n	c880 <__udivmoddi4+0x98>
    c938:	4097      	lsls	r7, r2
    c93a:	f1c2 0320 	rsb	r3, r2, #32
    c93e:	fa01 f002 	lsl.w	r0, r1, r2
    c942:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c946:	40d9      	lsrs	r1, r3
    c948:	fa24 f303 	lsr.w	r3, r4, r3
    c94c:	fa1f f887 	uxth.w	r8, r7
    c950:	4094      	lsls	r4, r2
    c952:	4303      	orrs	r3, r0
    c954:	fbb1 f0fe 	udiv	r0, r1, lr
    c958:	0c1e      	lsrs	r6, r3, #16
    c95a:	fb0e 1110 	mls	r1, lr, r0, r1
    c95e:	fb00 fc08 	mul.w	ip, r0, r8
    c962:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    c966:	458c      	cmp	ip, r1
    c968:	d90e      	bls.n	c988 <__udivmoddi4+0x1a0>
    c96a:	1879      	adds	r1, r7, r1
    c96c:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
    c970:	bf2c      	ite	cs
    c972:	f04f 0901 	movcs.w	r9, #1
    c976:	f04f 0900 	movcc.w	r9, #0
    c97a:	458c      	cmp	ip, r1
    c97c:	d903      	bls.n	c986 <__udivmoddi4+0x19e>
    c97e:	f1b9 0f00 	cmp.w	r9, #0
    c982:	f000 8096 	beq.w	cab2 <__udivmoddi4+0x2ca>
    c986:	4630      	mov	r0, r6
    c988:	eba1 010c 	sub.w	r1, r1, ip
    c98c:	b29b      	uxth	r3, r3
    c98e:	fbb1 f6fe 	udiv	r6, r1, lr
    c992:	fb0e 1116 	mls	r1, lr, r6, r1
    c996:	fb06 fc08 	mul.w	ip, r6, r8
    c99a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    c99e:	458c      	cmp	ip, r1
    c9a0:	d907      	bls.n	c9b2 <__udivmoddi4+0x1ca>
    c9a2:	1879      	adds	r1, r7, r1
    c9a4:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
    c9a8:	d202      	bcs.n	c9b0 <__udivmoddi4+0x1c8>
    c9aa:	458c      	cmp	ip, r1
    c9ac:	f200 8088 	bhi.w	cac0 <__udivmoddi4+0x2d8>
    c9b0:	461e      	mov	r6, r3
    c9b2:	eba1 030c 	sub.w	r3, r1, ip
    c9b6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    c9ba:	e770      	b.n	c89e <__udivmoddi4+0xb6>
    c9bc:	f1c6 0720 	rsb	r7, r6, #32
    c9c0:	fa03 f406 	lsl.w	r4, r3, r6
    c9c4:	fa02 fc06 	lsl.w	ip, r2, r6
    c9c8:	fa01 fe06 	lsl.w	lr, r1, r6
    c9cc:	40fa      	lsrs	r2, r7
    c9ce:	fa20 f807 	lsr.w	r8, r0, r7
    c9d2:	40f9      	lsrs	r1, r7
    c9d4:	fa00 f306 	lsl.w	r3, r0, r6
    c9d8:	4322      	orrs	r2, r4
    c9da:	ea48 040e 	orr.w	r4, r8, lr
    c9de:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c9e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    c9e6:	fa1f f982 	uxth.w	r9, r2
    c9ea:	fbb1 faf8 	udiv	sl, r1, r8
    c9ee:	fb08 111a 	mls	r1, r8, sl, r1
    c9f2:	fb0a f009 	mul.w	r0, sl, r9
    c9f6:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    c9fa:	4570      	cmp	r0, lr
    c9fc:	d90e      	bls.n	ca1c <__udivmoddi4+0x234>
    c9fe:	eb12 0e0e 	adds.w	lr, r2, lr
    ca02:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
    ca06:	bf2c      	ite	cs
    ca08:	f04f 0b01 	movcs.w	fp, #1
    ca0c:	f04f 0b00 	movcc.w	fp, #0
    ca10:	4570      	cmp	r0, lr
    ca12:	d902      	bls.n	ca1a <__udivmoddi4+0x232>
    ca14:	f1bb 0f00 	cmp.w	fp, #0
    ca18:	d04e      	beq.n	cab8 <__udivmoddi4+0x2d0>
    ca1a:	468a      	mov	sl, r1
    ca1c:	ebae 0e00 	sub.w	lr, lr, r0
    ca20:	b2a4      	uxth	r4, r4
    ca22:	fbbe f0f8 	udiv	r0, lr, r8
    ca26:	fb08 ee10 	mls	lr, r8, r0, lr
    ca2a:	fb00 f909 	mul.w	r9, r0, r9
    ca2e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
    ca32:	45f1      	cmp	r9, lr
    ca34:	d907      	bls.n	ca46 <__udivmoddi4+0x25e>
    ca36:	eb12 0e0e 	adds.w	lr, r2, lr
    ca3a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
    ca3e:	d201      	bcs.n	ca44 <__udivmoddi4+0x25c>
    ca40:	45f1      	cmp	r9, lr
    ca42:	d840      	bhi.n	cac6 <__udivmoddi4+0x2de>
    ca44:	4608      	mov	r0, r1
    ca46:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    ca4a:	ebae 0e09 	sub.w	lr, lr, r9
    ca4e:	fba0 890c 	umull	r8, r9, r0, ip
    ca52:	45ce      	cmp	lr, r9
    ca54:	4641      	mov	r1, r8
    ca56:	464c      	mov	r4, r9
    ca58:	d302      	bcc.n	ca60 <__udivmoddi4+0x278>
    ca5a:	d106      	bne.n	ca6a <__udivmoddi4+0x282>
    ca5c:	4543      	cmp	r3, r8
    ca5e:	d204      	bcs.n	ca6a <__udivmoddi4+0x282>
    ca60:	3801      	subs	r0, #1
    ca62:	ebb8 010c 	subs.w	r1, r8, ip
    ca66:	eb69 0402 	sbc.w	r4, r9, r2
    ca6a:	b37d      	cbz	r5, cacc <__udivmoddi4+0x2e4>
    ca6c:	1a5a      	subs	r2, r3, r1
    ca6e:	eb6e 0e04 	sbc.w	lr, lr, r4
    ca72:	40f2      	lsrs	r2, r6
    ca74:	fa0e f707 	lsl.w	r7, lr, r7
    ca78:	fa2e f306 	lsr.w	r3, lr, r6
    ca7c:	2600      	movs	r6, #0
    ca7e:	4317      	orrs	r7, r2
    ca80:	e9c5 7300 	strd	r7, r3, [r5]
    ca84:	e6fc      	b.n	c880 <__udivmoddi4+0x98>
    ca86:	462e      	mov	r6, r5
    ca88:	4628      	mov	r0, r5
    ca8a:	e6f9      	b.n	c880 <__udivmoddi4+0x98>
    ca8c:	1a84      	subs	r4, r0, r2
    ca8e:	eb61 0103 	sbc.w	r1, r1, r3
    ca92:	2001      	movs	r0, #1
    ca94:	4688      	mov	r8, r1
    ca96:	e74a      	b.n	c92e <__udivmoddi4+0x146>
    ca98:	3802      	subs	r0, #2
    ca9a:	443c      	add	r4, r7
    ca9c:	e72b      	b.n	c8f6 <__udivmoddi4+0x10e>
    ca9e:	3802      	subs	r0, #2
    caa0:	443c      	add	r4, r7
    caa2:	e6e3      	b.n	c86c <__udivmoddi4+0x84>
    caa4:	3e02      	subs	r6, #2
    caa6:	443b      	add	r3, r7
    caa8:	e6cc      	b.n	c844 <__udivmoddi4+0x5c>
    caaa:	f1ac 0c02 	sub.w	ip, ip, #2
    caae:	4439      	add	r1, r7
    cab0:	e70c      	b.n	c8cc <__udivmoddi4+0xe4>
    cab2:	3802      	subs	r0, #2
    cab4:	4439      	add	r1, r7
    cab6:	e767      	b.n	c988 <__udivmoddi4+0x1a0>
    cab8:	f1aa 0a02 	sub.w	sl, sl, #2
    cabc:	4496      	add	lr, r2
    cabe:	e7ad      	b.n	ca1c <__udivmoddi4+0x234>
    cac0:	3e02      	subs	r6, #2
    cac2:	4439      	add	r1, r7
    cac4:	e775      	b.n	c9b2 <__udivmoddi4+0x1ca>
    cac6:	3802      	subs	r0, #2
    cac8:	4496      	add	lr, r2
    caca:	e7bc      	b.n	ca46 <__udivmoddi4+0x25e>
    cacc:	462e      	mov	r6, r5
    cace:	e6d7      	b.n	c880 <__udivmoddi4+0x98>

0000cad0 <__aeabi_idiv0>:
    cad0:	4770      	bx	lr
    cad2:	bf00      	nop

0000cad4 <__aeabi_dmul>:
    cad4:	b570      	push	{r4, r5, r6, lr}
    cad6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cada:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cade:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    cae2:	bf1d      	ittte	ne
    cae4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    cae8:	ea94 0f0c 	teqne	r4, ip
    caec:	ea95 0f0c 	teqne	r5, ip
    caf0:	f000 f8de 	bleq	ccb0 <__aeabi_dmul+0x1dc>
    caf4:	442c      	add	r4, r5
    caf6:	ea81 0603 	eor.w	r6, r1, r3
    cafa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    cafe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    cb02:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    cb06:	bf18      	it	ne
    cb08:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    cb0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cb10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    cb14:	d038      	beq.n	cb88 <__aeabi_dmul+0xb4>
    cb16:	fba0 ce02 	umull	ip, lr, r0, r2
    cb1a:	f04f 0500 	mov.w	r5, #0
    cb1e:	fbe1 e502 	umlal	lr, r5, r1, r2
    cb22:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    cb26:	fbe0 e503 	umlal	lr, r5, r0, r3
    cb2a:	f04f 0600 	mov.w	r6, #0
    cb2e:	fbe1 5603 	umlal	r5, r6, r1, r3
    cb32:	f09c 0f00 	teq	ip, #0
    cb36:	bf18      	it	ne
    cb38:	f04e 0e01 	orrne.w	lr, lr, #1
    cb3c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    cb40:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    cb44:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    cb48:	d204      	bcs.n	cb54 <__aeabi_dmul+0x80>
    cb4a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    cb4e:	416d      	adcs	r5, r5
    cb50:	eb46 0606 	adc.w	r6, r6, r6
    cb54:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    cb58:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    cb5c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    cb60:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    cb64:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    cb68:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    cb6c:	bf88      	it	hi
    cb6e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    cb72:	d81e      	bhi.n	cbb2 <__aeabi_dmul+0xde>
    cb74:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    cb78:	bf08      	it	eq
    cb7a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    cb7e:	f150 0000 	adcs.w	r0, r0, #0
    cb82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cb86:	bd70      	pop	{r4, r5, r6, pc}
    cb88:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    cb8c:	ea46 0101 	orr.w	r1, r6, r1
    cb90:	ea40 0002 	orr.w	r0, r0, r2
    cb94:	ea81 0103 	eor.w	r1, r1, r3
    cb98:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    cb9c:	bfc2      	ittt	gt
    cb9e:	ebd4 050c 	rsbsgt	r5, r4, ip
    cba2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cba6:	bd70      	popgt	{r4, r5, r6, pc}
    cba8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cbac:	f04f 0e00 	mov.w	lr, #0
    cbb0:	3c01      	subs	r4, #1
    cbb2:	f300 80ab 	bgt.w	cd0c <__aeabi_dmul+0x238>
    cbb6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    cbba:	bfde      	ittt	le
    cbbc:	2000      	movle	r0, #0
    cbbe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    cbc2:	bd70      	pople	{r4, r5, r6, pc}
    cbc4:	f1c4 0400 	rsb	r4, r4, #0
    cbc8:	3c20      	subs	r4, #32
    cbca:	da35      	bge.n	cc38 <__aeabi_dmul+0x164>
    cbcc:	340c      	adds	r4, #12
    cbce:	dc1b      	bgt.n	cc08 <__aeabi_dmul+0x134>
    cbd0:	f104 0414 	add.w	r4, r4, #20
    cbd4:	f1c4 0520 	rsb	r5, r4, #32
    cbd8:	fa00 f305 	lsl.w	r3, r0, r5
    cbdc:	fa20 f004 	lsr.w	r0, r0, r4
    cbe0:	fa01 f205 	lsl.w	r2, r1, r5
    cbe4:	ea40 0002 	orr.w	r0, r0, r2
    cbe8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    cbec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cbf0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cbf4:	fa21 f604 	lsr.w	r6, r1, r4
    cbf8:	eb42 0106 	adc.w	r1, r2, r6
    cbfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cc00:	bf08      	it	eq
    cc02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cc06:	bd70      	pop	{r4, r5, r6, pc}
    cc08:	f1c4 040c 	rsb	r4, r4, #12
    cc0c:	f1c4 0520 	rsb	r5, r4, #32
    cc10:	fa00 f304 	lsl.w	r3, r0, r4
    cc14:	fa20 f005 	lsr.w	r0, r0, r5
    cc18:	fa01 f204 	lsl.w	r2, r1, r4
    cc1c:	ea40 0002 	orr.w	r0, r0, r2
    cc20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cc24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cc28:	f141 0100 	adc.w	r1, r1, #0
    cc2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cc30:	bf08      	it	eq
    cc32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cc36:	bd70      	pop	{r4, r5, r6, pc}
    cc38:	f1c4 0520 	rsb	r5, r4, #32
    cc3c:	fa00 f205 	lsl.w	r2, r0, r5
    cc40:	ea4e 0e02 	orr.w	lr, lr, r2
    cc44:	fa20 f304 	lsr.w	r3, r0, r4
    cc48:	fa01 f205 	lsl.w	r2, r1, r5
    cc4c:	ea43 0302 	orr.w	r3, r3, r2
    cc50:	fa21 f004 	lsr.w	r0, r1, r4
    cc54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cc58:	fa21 f204 	lsr.w	r2, r1, r4
    cc5c:	ea20 0002 	bic.w	r0, r0, r2
    cc60:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    cc64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cc68:	bf08      	it	eq
    cc6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cc6e:	bd70      	pop	{r4, r5, r6, pc}
    cc70:	f094 0f00 	teq	r4, #0
    cc74:	d10f      	bne.n	cc96 <__aeabi_dmul+0x1c2>
    cc76:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    cc7a:	0040      	lsls	r0, r0, #1
    cc7c:	eb41 0101 	adc.w	r1, r1, r1
    cc80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cc84:	bf08      	it	eq
    cc86:	3c01      	subeq	r4, #1
    cc88:	d0f7      	beq.n	cc7a <__aeabi_dmul+0x1a6>
    cc8a:	ea41 0106 	orr.w	r1, r1, r6
    cc8e:	f095 0f00 	teq	r5, #0
    cc92:	bf18      	it	ne
    cc94:	4770      	bxne	lr
    cc96:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    cc9a:	0052      	lsls	r2, r2, #1
    cc9c:	eb43 0303 	adc.w	r3, r3, r3
    cca0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    cca4:	bf08      	it	eq
    cca6:	3d01      	subeq	r5, #1
    cca8:	d0f7      	beq.n	cc9a <__aeabi_dmul+0x1c6>
    ccaa:	ea43 0306 	orr.w	r3, r3, r6
    ccae:	4770      	bx	lr
    ccb0:	ea94 0f0c 	teq	r4, ip
    ccb4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ccb8:	bf18      	it	ne
    ccba:	ea95 0f0c 	teqne	r5, ip
    ccbe:	d00c      	beq.n	ccda <__aeabi_dmul+0x206>
    ccc0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ccc4:	bf18      	it	ne
    ccc6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ccca:	d1d1      	bne.n	cc70 <__aeabi_dmul+0x19c>
    cccc:	ea81 0103 	eor.w	r1, r1, r3
    ccd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ccd4:	f04f 0000 	mov.w	r0, #0
    ccd8:	bd70      	pop	{r4, r5, r6, pc}
    ccda:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ccde:	bf06      	itte	eq
    cce0:	4610      	moveq	r0, r2
    cce2:	4619      	moveq	r1, r3
    cce4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cce8:	d019      	beq.n	cd1e <__aeabi_dmul+0x24a>
    ccea:	ea94 0f0c 	teq	r4, ip
    ccee:	d102      	bne.n	ccf6 <__aeabi_dmul+0x222>
    ccf0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    ccf4:	d113      	bne.n	cd1e <__aeabi_dmul+0x24a>
    ccf6:	ea95 0f0c 	teq	r5, ip
    ccfa:	d105      	bne.n	cd08 <__aeabi_dmul+0x234>
    ccfc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    cd00:	bf1c      	itt	ne
    cd02:	4610      	movne	r0, r2
    cd04:	4619      	movne	r1, r3
    cd06:	d10a      	bne.n	cd1e <__aeabi_dmul+0x24a>
    cd08:	ea81 0103 	eor.w	r1, r1, r3
    cd0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cd10:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    cd14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cd18:	f04f 0000 	mov.w	r0, #0
    cd1c:	bd70      	pop	{r4, r5, r6, pc}
    cd1e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    cd22:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    cd26:	bd70      	pop	{r4, r5, r6, pc}

0000cd28 <__aeabi_ddiv>:
    cd28:	b570      	push	{r4, r5, r6, lr}
    cd2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cd2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cd32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    cd36:	bf1d      	ittte	ne
    cd38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    cd3c:	ea94 0f0c 	teqne	r4, ip
    cd40:	ea95 0f0c 	teqne	r5, ip
    cd44:	f000 f8a7 	bleq	ce96 <__aeabi_ddiv+0x16e>
    cd48:	eba4 0405 	sub.w	r4, r4, r5
    cd4c:	ea81 0e03 	eor.w	lr, r1, r3
    cd50:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cd54:	ea4f 3101 	mov.w	r1, r1, lsl #12
    cd58:	f000 8088 	beq.w	ce6c <__aeabi_ddiv+0x144>
    cd5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    cd60:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cd64:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    cd68:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    cd6c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    cd70:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    cd74:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    cd78:	ea4f 2600 	mov.w	r6, r0, lsl #8
    cd7c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    cd80:	429d      	cmp	r5, r3
    cd82:	bf08      	it	eq
    cd84:	4296      	cmpeq	r6, r2
    cd86:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    cd8a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    cd8e:	d202      	bcs.n	cd96 <__aeabi_ddiv+0x6e>
    cd90:	085b      	lsrs	r3, r3, #1
    cd92:	ea4f 0232 	mov.w	r2, r2, rrx
    cd96:	1ab6      	subs	r6, r6, r2
    cd98:	eb65 0503 	sbc.w	r5, r5, r3
    cd9c:	085b      	lsrs	r3, r3, #1
    cd9e:	ea4f 0232 	mov.w	r2, r2, rrx
    cda2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    cda6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    cdaa:	ebb6 0e02 	subs.w	lr, r6, r2
    cdae:	eb75 0e03 	sbcs.w	lr, r5, r3
    cdb2:	bf22      	ittt	cs
    cdb4:	1ab6      	subcs	r6, r6, r2
    cdb6:	4675      	movcs	r5, lr
    cdb8:	ea40 000c 	orrcs.w	r0, r0, ip
    cdbc:	085b      	lsrs	r3, r3, #1
    cdbe:	ea4f 0232 	mov.w	r2, r2, rrx
    cdc2:	ebb6 0e02 	subs.w	lr, r6, r2
    cdc6:	eb75 0e03 	sbcs.w	lr, r5, r3
    cdca:	bf22      	ittt	cs
    cdcc:	1ab6      	subcs	r6, r6, r2
    cdce:	4675      	movcs	r5, lr
    cdd0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    cdd4:	085b      	lsrs	r3, r3, #1
    cdd6:	ea4f 0232 	mov.w	r2, r2, rrx
    cdda:	ebb6 0e02 	subs.w	lr, r6, r2
    cdde:	eb75 0e03 	sbcs.w	lr, r5, r3
    cde2:	bf22      	ittt	cs
    cde4:	1ab6      	subcs	r6, r6, r2
    cde6:	4675      	movcs	r5, lr
    cde8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    cdec:	085b      	lsrs	r3, r3, #1
    cdee:	ea4f 0232 	mov.w	r2, r2, rrx
    cdf2:	ebb6 0e02 	subs.w	lr, r6, r2
    cdf6:	eb75 0e03 	sbcs.w	lr, r5, r3
    cdfa:	bf22      	ittt	cs
    cdfc:	1ab6      	subcs	r6, r6, r2
    cdfe:	4675      	movcs	r5, lr
    ce00:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    ce04:	ea55 0e06 	orrs.w	lr, r5, r6
    ce08:	d018      	beq.n	ce3c <__aeabi_ddiv+0x114>
    ce0a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    ce0e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    ce12:	ea4f 1606 	mov.w	r6, r6, lsl #4
    ce16:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    ce1a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    ce1e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    ce22:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    ce26:	d1c0      	bne.n	cdaa <__aeabi_ddiv+0x82>
    ce28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ce2c:	d10b      	bne.n	ce46 <__aeabi_ddiv+0x11e>
    ce2e:	ea41 0100 	orr.w	r1, r1, r0
    ce32:	f04f 0000 	mov.w	r0, #0
    ce36:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    ce3a:	e7b6      	b.n	cdaa <__aeabi_ddiv+0x82>
    ce3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ce40:	bf04      	itt	eq
    ce42:	4301      	orreq	r1, r0
    ce44:	2000      	moveq	r0, #0
    ce46:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ce4a:	bf88      	it	hi
    ce4c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ce50:	f63f aeaf 	bhi.w	cbb2 <__aeabi_dmul+0xde>
    ce54:	ebb5 0c03 	subs.w	ip, r5, r3
    ce58:	bf04      	itt	eq
    ce5a:	ebb6 0c02 	subseq.w	ip, r6, r2
    ce5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ce62:	f150 0000 	adcs.w	r0, r0, #0
    ce66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ce6a:	bd70      	pop	{r4, r5, r6, pc}
    ce6c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    ce70:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    ce74:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    ce78:	bfc2      	ittt	gt
    ce7a:	ebd4 050c 	rsbsgt	r5, r4, ip
    ce7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    ce82:	bd70      	popgt	{r4, r5, r6, pc}
    ce84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ce88:	f04f 0e00 	mov.w	lr, #0
    ce8c:	3c01      	subs	r4, #1
    ce8e:	e690      	b.n	cbb2 <__aeabi_dmul+0xde>
    ce90:	ea45 0e06 	orr.w	lr, r5, r6
    ce94:	e68d      	b.n	cbb2 <__aeabi_dmul+0xde>
    ce96:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ce9a:	ea94 0f0c 	teq	r4, ip
    ce9e:	bf08      	it	eq
    cea0:	ea95 0f0c 	teqeq	r5, ip
    cea4:	f43f af3b 	beq.w	cd1e <__aeabi_dmul+0x24a>
    cea8:	ea94 0f0c 	teq	r4, ip
    ceac:	d10a      	bne.n	cec4 <__aeabi_ddiv+0x19c>
    ceae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ceb2:	f47f af34 	bne.w	cd1e <__aeabi_dmul+0x24a>
    ceb6:	ea95 0f0c 	teq	r5, ip
    ceba:	f47f af25 	bne.w	cd08 <__aeabi_dmul+0x234>
    cebe:	4610      	mov	r0, r2
    cec0:	4619      	mov	r1, r3
    cec2:	e72c      	b.n	cd1e <__aeabi_dmul+0x24a>
    cec4:	ea95 0f0c 	teq	r5, ip
    cec8:	d106      	bne.n	ced8 <__aeabi_ddiv+0x1b0>
    ceca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cece:	f43f aefd 	beq.w	cccc <__aeabi_dmul+0x1f8>
    ced2:	4610      	mov	r0, r2
    ced4:	4619      	mov	r1, r3
    ced6:	e722      	b.n	cd1e <__aeabi_dmul+0x24a>
    ced8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cedc:	bf18      	it	ne
    cede:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cee2:	f47f aec5 	bne.w	cc70 <__aeabi_dmul+0x19c>
    cee6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ceea:	f47f af0d 	bne.w	cd08 <__aeabi_dmul+0x234>
    ceee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    cef2:	f47f aeeb 	bne.w	cccc <__aeabi_dmul+0x1f8>
    cef6:	e712      	b.n	cd1e <__aeabi_dmul+0x24a>

0000cef8 <__aeabi_dcmpun>:
    cef8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cefc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cf00:	d102      	bne.n	cf08 <__aeabi_dcmpun+0x10>
    cf02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cf06:	d10a      	bne.n	cf1e <__aeabi_dcmpun+0x26>
    cf08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cf0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cf10:	d102      	bne.n	cf18 <__aeabi_dcmpun+0x20>
    cf12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cf16:	d102      	bne.n	cf1e <__aeabi_dcmpun+0x26>
    cf18:	f04f 0000 	mov.w	r0, #0
    cf1c:	4770      	bx	lr
    cf1e:	f04f 0001 	mov.w	r0, #1
    cf22:	4770      	bx	lr

0000cf24 <strcmp>:
    cf24:	f810 2b01 	ldrb.w	r2, [r0], #1
    cf28:	f811 3b01 	ldrb.w	r3, [r1], #1
    cf2c:	2a01      	cmp	r2, #1
    cf2e:	bf28      	it	cs
    cf30:	429a      	cmpcs	r2, r3
    cf32:	d0f7      	beq.n	cf24 <strcmp>
    cf34:	1ad0      	subs	r0, r2, r3
    cf36:	4770      	bx	lr

0000cf38 <strlen>:
    cf38:	4603      	mov	r3, r0
    cf3a:	f813 2b01 	ldrb.w	r2, [r3], #1
    cf3e:	2a00      	cmp	r2, #0
    cf40:	d1fb      	bne.n	cf3a <strlen+0x2>
    cf42:	1a18      	subs	r0, r3, r0
    cf44:	3801      	subs	r0, #1
    cf46:	4770      	bx	lr

0000cf48 <net_if_ipv6_addr_update_lifetime>:
{
	NET_DBG("Updating expire time of %s by %u secs",
		log_strdup(net_sprint_ipv6_addr(&ifaddr->address.in6_addr)),
		vlifetime);

	ifaddr->addr_state = NET_ADDR_PREFERRED;
    cf48:	2301      	movs	r3, #1
{
    cf4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ifaddr->addr_state = NET_ADDR_PREFERRED;
    cf4e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	u64_t expire_timeout = (u64_t)MSEC_PER_SEC * (u64_t)vlifetime;
    cf52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
    cf56:	4604      	mov	r4, r0
	u64_t expire_timeout = (u64_t)MSEC_PER_SEC * (u64_t)vlifetime;
    cf58:	fba1 6703 	umull	r6, r7, r1, r3
	sys_slist_append(&active_address_lifetime_timers,
    cf5c:	f100 0114 	add.w	r1, r0, #20
    cf60:	4821      	ldr	r0, [pc, #132]	; (cfe8 <net_if_ipv6_addr_update_lifetime+0xa0>)
    cf62:	f017 ffd7 	bl	24f14 <sys_slist_append>
	ifaddr->lifetime.timer_start = k_uptime_get_32();
    cf66:	f018 f845 	bl	24ff4 <k_uptime_get_32>
	ifaddr->lifetime.wrap_counter = expire_timeout /
    cf6a:	2300      	movs	r3, #0
    cf6c:	4a1f      	ldr	r2, [pc, #124]	; (cfec <net_if_ipv6_addr_update_lifetime+0xa4>)
	ifaddr->lifetime.timer_start = k_uptime_get_32();
    cf6e:	61a0      	str	r0, [r4, #24]
	ifaddr->lifetime.wrap_counter = expire_timeout /
    cf70:	4639      	mov	r1, r7
    cf72:	4630      	mov	r0, r6
    cf74:	f7ff fc20 	bl	c7b8 <__aeabi_uldivmod>
	ifaddr->lifetime.timer_timeout = expire_timeout -
    cf78:	491c      	ldr	r1, [pc, #112]	; (cfec <net_if_ipv6_addr_update_lifetime+0xa4>)
	ifaddr->lifetime.wrap_counter = expire_timeout /
    cf7a:	6220      	str	r0, [r4, #32]
	ifaddr->lifetime.timer_timeout = expire_timeout -
    cf7c:	fb01 6010 	mls	r0, r1, r0, r6
    cf80:	61e0      	str	r0, [r4, #28]
	remaining = k_delayed_work_remaining_get(&address_lifetime_timer);
    cf82:	481b      	ldr	r0, [pc, #108]	; (cff0 <net_if_ipv6_addr_update_lifetime+0xa8>)
    cf84:	f018 f846 	bl	25014 <k_delayed_work_remaining_get>
	if (!remaining || (ifaddr->lifetime.wrap_counter == 0 &&
    cf88:	4605      	mov	r5, r0
    cf8a:	b120      	cbz	r0, cf96 <net_if_ipv6_addr_update_lifetime+0x4e>
    cf8c:	6a23      	ldr	r3, [r4, #32]
    cf8e:	bb2b      	cbnz	r3, cfdc <net_if_ipv6_addr_update_lifetime+0x94>
    cf90:	69e3      	ldr	r3, [r4, #28]
    cf92:	4298      	cmp	r0, r3
    cf94:	dd22      	ble.n	cfdc <net_if_ipv6_addr_update_lifetime+0x94>
		k_delayed_work_cancel(&address_lifetime_timer);
    cf96:	4816      	ldr	r0, [pc, #88]	; (cff0 <net_if_ipv6_addr_update_lifetime+0xa8>)
    cf98:	f01c f8ac 	bl	290f4 <k_delayed_work_cancel>
		if (ifaddr->lifetime.wrap_counter > 0 && remaining == 0) {
    cf9c:	6a23      	ldr	r3, [r4, #32]
    cf9e:	2b00      	cmp	r3, #0
    cfa0:	dd08      	ble.n	cfb4 <net_if_ipv6_addr_update_lifetime+0x6c>
    cfa2:	b93d      	cbnz	r5, cfb4 <net_if_ipv6_addr_update_lifetime+0x6c>
			k_delayed_work_submit(&address_lifetime_timer,
    cfa4:	a30e      	add	r3, pc, #56	; (adr r3, cfe0 <net_if_ipv6_addr_update_lifetime+0x98>)
    cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]

	address_start_timer(ifaddr, vlifetime);
}
    cfaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_delayed_work_submit(&address_lifetime_timer,
    cfae:	4810      	ldr	r0, [pc, #64]	; (cff0 <net_if_ipv6_addr_update_lifetime+0xa8>)
    cfb0:	f004 bdb8 	b.w	11b24 <k_delayed_work_submit>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    cfb4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
				       K_MSEC(ifaddr->lifetime.timer_timeout));
    cfb8:	69e1      	ldr	r1, [r4, #28]
    cfba:	2500      	movs	r5, #0
    cfbc:	f240 34e7 	movw	r4, #999	; 0x3e7
    cfc0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    cfc4:	fbc0 4501 	smlal	r4, r5, r0, r1
    cfc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cfcc:	2300      	movs	r3, #0
    cfce:	4620      	mov	r0, r4
    cfd0:	4629      	mov	r1, r5
    cfd2:	f7ff fbf1 	bl	c7b8 <__aeabi_uldivmod>
			k_delayed_work_submit(&address_lifetime_timer,
    cfd6:	2300      	movs	r3, #0
    cfd8:	4602      	mov	r2, r0
    cfda:	e7e6      	b.n	cfaa <net_if_ipv6_addr_update_lifetime+0x62>
}
    cfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cfe0:	624dc605 	.word	0x624dc605
    cfe4:	00000000 	.word	0x00000000
    cfe8:	200225ec 	.word	0x200225ec
    cfec:	7fffff9b 	.word	0x7fffff9b
    cff0:	20022614 	.word	0x20022614
    cff4:	00000000 	.word	0x00000000

0000cff8 <net_if_ipv6_prefix_set_timer>:

void net_if_ipv6_prefix_set_timer(struct net_if_ipv6_prefix *prefix,
				  u32_t lifetime)
{
	/* No need to set a timer for infinite timeout */
	if (lifetime == 0xffffffff) {
    cff8:	1c4b      	adds	r3, r1, #1
{
    cffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cffe:	4604      	mov	r4, r0
	if (lifetime == 0xffffffff) {
    d000:	d042      	beq.n	d088 <net_if_ipv6_prefix_set_timer+0x90>
	u64_t expire_timeout = (u64_t)MSEC_PER_SEC * (u64_t)lifetime;
    d002:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    d006:	fba1 6706 	umull	r6, r7, r1, r6
	sys_slist_append(&active_prefix_lifetime_timers,
    d00a:	4601      	mov	r1, r0
    d00c:	4822      	ldr	r0, [pc, #136]	; (d098 <net_if_ipv6_prefix_set_timer+0xa0>)
    d00e:	f017 ff81 	bl	24f14 <sys_slist_append>
	ifprefix->lifetime.timer_start = k_uptime_get_32();
    d012:	f017 ffef 	bl	24ff4 <k_uptime_get_32>
	ifprefix->lifetime.wrap_counter = expire_timeout /
    d016:	2300      	movs	r3, #0
    d018:	4a20      	ldr	r2, [pc, #128]	; (d09c <net_if_ipv6_prefix_set_timer+0xa4>)
	ifprefix->lifetime.timer_start = k_uptime_get_32();
    d01a:	6060      	str	r0, [r4, #4]
	ifprefix->lifetime.wrap_counter = expire_timeout /
    d01c:	4639      	mov	r1, r7
    d01e:	4630      	mov	r0, r6
    d020:	f7ff fbca 	bl	c7b8 <__aeabi_uldivmod>
	ifprefix->lifetime.timer_timeout = expire_timeout -
    d024:	491d      	ldr	r1, [pc, #116]	; (d09c <net_if_ipv6_prefix_set_timer+0xa4>)
	ifprefix->lifetime.wrap_counter = expire_timeout /
    d026:	60e0      	str	r0, [r4, #12]
	ifprefix->lifetime.timer_timeout = expire_timeout -
    d028:	fb01 6010 	mls	r0, r1, r0, r6
    d02c:	60a0      	str	r0, [r4, #8]
	remaining = k_delayed_work_remaining_get(&prefix_lifetime_timer);
    d02e:	481c      	ldr	r0, [pc, #112]	; (d0a0 <net_if_ipv6_prefix_set_timer+0xa8>)
    d030:	f017 fff0 	bl	25014 <k_delayed_work_remaining_get>
	if (!remaining || (ifprefix->lifetime.wrap_counter == 0 &&
    d034:	4605      	mov	r5, r0
    d036:	b120      	cbz	r0, d042 <net_if_ipv6_prefix_set_timer+0x4a>
    d038:	68e3      	ldr	r3, [r4, #12]
    d03a:	bb2b      	cbnz	r3, d088 <net_if_ipv6_prefix_set_timer+0x90>
    d03c:	68a3      	ldr	r3, [r4, #8]
    d03e:	4298      	cmp	r0, r3
    d040:	dd22      	ble.n	d088 <net_if_ipv6_prefix_set_timer+0x90>
		k_delayed_work_cancel(&prefix_lifetime_timer);
    d042:	4817      	ldr	r0, [pc, #92]	; (d0a0 <net_if_ipv6_prefix_set_timer+0xa8>)
    d044:	f01c f856 	bl	290f4 <k_delayed_work_cancel>
		if (ifprefix->lifetime.wrap_counter > 0 && remaining == 0) {
    d048:	68e3      	ldr	r3, [r4, #12]
    d04a:	2b00      	cmp	r3, #0
    d04c:	dd08      	ble.n	d060 <net_if_ipv6_prefix_set_timer+0x68>
    d04e:	b93d      	cbnz	r5, d060 <net_if_ipv6_prefix_set_timer+0x68>
			k_delayed_work_submit(&prefix_lifetime_timer,
    d050:	a30f      	add	r3, pc, #60	; (adr r3, d090 <net_if_ipv6_prefix_set_timer+0x98>)
    d052:	e9d3 2300 	ldrd	r2, r3, [r3]
	}

	NET_DBG("Prefix lifetime %u sec", lifetime);

	prefix_start_timer(prefix, lifetime);
}
    d056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_delayed_work_submit(&prefix_lifetime_timer,
    d05a:	4811      	ldr	r0, [pc, #68]	; (d0a0 <net_if_ipv6_prefix_set_timer+0xa8>)
    d05c:	f004 bd62 	b.w	11b24 <k_delayed_work_submit>
    d060:	f44f 4000 	mov.w	r0, #32768	; 0x8000
				     K_MSEC(ifprefix->lifetime.timer_timeout));
    d064:	68a1      	ldr	r1, [r4, #8]
    d066:	2500      	movs	r5, #0
    d068:	f240 34e7 	movw	r4, #999	; 0x3e7
    d06c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    d070:	fbc0 4501 	smlal	r4, r5, r0, r1
    d074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d078:	2300      	movs	r3, #0
    d07a:	4620      	mov	r0, r4
    d07c:	4629      	mov	r1, r5
    d07e:	f7ff fb9b 	bl	c7b8 <__aeabi_uldivmod>
			k_delayed_work_submit(&prefix_lifetime_timer,
    d082:	2300      	movs	r3, #0
    d084:	4602      	mov	r2, r0
    d086:	e7e6      	b.n	d056 <net_if_ipv6_prefix_set_timer+0x5e>
}
    d088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d08c:	f3af 8000 	nop.w
    d090:	624dc605 	.word	0x624dc605
    d094:	00000000 	.word	0x00000000
    d098:	200225fc 	.word	0x200225fc
    d09c:	7fffff9b 	.word	0x7fffff9b
    d0a0:	20022778 	.word	0x20022778
    d0a4:	00000000 	.word	0x00000000

0000d0a8 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
    d0a8:	4b17      	ldr	r3, [pc, #92]	; (d108 <cJSON_CreateNumber+0x60>)
{
    d0aa:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
    d0ac:	6818      	ldr	r0, [r3, #0]
{
    d0ae:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
    d0b2:	f01a ffa7 	bl	28004 <cJSON_New_Item.isra.0>
    if(item)
    d0b6:	4604      	mov	r4, r0
    d0b8:	b170      	cbz	r0, d0d8 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
    d0ba:	2308      	movs	r3, #8
        item->valuedouble = num;
    d0bc:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
    d0c0:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
    d0c2:	4639      	mov	r1, r7
    d0c4:	a30e      	add	r3, pc, #56	; (adr r3, d100 <cJSON_CreateNumber+0x58>)
    d0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0ca:	4630      	mov	r0, r6
    d0cc:	f7ff fae8 	bl	c6a0 <__aeabi_dcmpge>
    d0d0:	b120      	cbz	r0, d0dc <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
    d0d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
    d0d6:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
    d0d8:	4620      	mov	r0, r4
    d0da:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
    d0dc:	2200      	movs	r2, #0
    d0de:	4630      	mov	r0, r6
    d0e0:	4639      	mov	r1, r7
    d0e2:	4b0a      	ldr	r3, [pc, #40]	; (d10c <cJSON_CreateNumber+0x64>)
    d0e4:	f7ff fad2 	bl	c68c <__aeabi_dcmple>
    d0e8:	b110      	cbz	r0, d0f0 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
    d0ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    d0ee:	e7f2      	b.n	d0d6 <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
    d0f0:	4630      	mov	r0, r6
    d0f2:	4639      	mov	r1, r7
    d0f4:	f7ff fae8 	bl	c6c8 <__aeabi_d2iz>
    d0f8:	6160      	str	r0, [r4, #20]
    return item;
    d0fa:	e7ed      	b.n	d0d8 <cJSON_CreateNumber+0x30>
    d0fc:	f3af 8000 	nop.w
    d100:	ffc00000 	.word	0xffc00000
    d104:	41dfffff 	.word	0x41dfffff
    d108:	200205ac 	.word	0x200205ac
    d10c:	c1e00000 	.word	0xc1e00000

0000d110 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
    d110:	b5f0      	push	{r4, r5, r6, r7, lr}
    d112:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
    d116:	460e      	mov	r6, r1
{
    d118:	b08d      	sub	sp, #52	; 0x34
	if (response == NULL) {
    d11a:	b969      	cbnz	r1, d138 <at_handler+0x28>
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    d11c:	48ae      	ldr	r0, [pc, #696]	; (d3d8 <at_handler+0x2c8>)
    d11e:	4baf      	ldr	r3, [pc, #700]	; (d3dc <at_handler+0x2cc>)
		LOG_ERR("Response buffer is NULL-pointer");
    d120:	49af      	ldr	r1, [pc, #700]	; (d3e0 <at_handler+0x2d0>)
    d122:	1ac0      	subs	r0, r0, r3
    d124:	08c0      	lsrs	r0, r0, #3
    d126:	0180      	lsls	r0, r0, #6
    d128:	f040 0001 	orr.w	r0, r0, #1
    d12c:	f017 f9e8 	bl	24500 <log_string_sync>
	}

	if (evt_handler && notify) {
		evt_handler(&evt);
	}
}
    d130:	b00d      	add	sp, #52	; 0x34
    d132:	ecbd 8b02 	vpop	{d8}
    d136:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d138:	2700      	movs	r7, #0
    d13a:	4caa      	ldr	r4, [pc, #680]	; (d3e4 <at_handler+0x2d4>)
		if (strncmp(at_notifs[i], notif,
    d13c:	f854 5b04 	ldr.w	r5, [r4], #4
    d140:	4628      	mov	r0, r5
    d142:	f7ff fef9 	bl	cf38 <strlen>
    d146:	4631      	mov	r1, r6
    d148:	4602      	mov	r2, r0
    d14a:	4628      	mov	r0, r5
    d14c:	f01c fb95 	bl	2987a <strncmp>
    d150:	4605      	mov	r5, r0
    d152:	bb50      	cbnz	r0, d1aa <at_handler+0x9a>
	switch (notif_type) {
    d154:	2f01      	cmp	r7, #1
			*type = i;
    d156:	b2fb      	uxtb	r3, r7
	switch (notif_type) {
    d158:	f000 80e9 	beq.w	d32e <at_handler+0x21e>
    d15c:	2b02      	cmp	r3, #2
    d15e:	f000 816e 	beq.w	d43e <at_handler+0x32e>
	size_t len = sizeof(str_buf) - 1;
    d162:	2709      	movs	r7, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d164:	210a      	movs	r1, #10
    d166:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
    d168:	9702      	str	r7, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d16a:	f01b fb77 	bl	2885c <at_params_list_init>
	if (err) {
    d16e:	4604      	mov	r4, r0
    d170:	b1f8      	cbz	r0, d1b2 <at_handler+0xa2>
    d172:	4899      	ldr	r0, [pc, #612]	; (d3d8 <at_handler+0x2c8>)
    d174:	4b99      	ldr	r3, [pc, #612]	; (d3dc <at_handler+0x2cc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d176:	4622      	mov	r2, r4
    d178:	1ac0      	subs	r0, r0, r3
    d17a:	08c0      	lsrs	r0, r0, #3
    d17c:	0180      	lsls	r0, r0, #6
    d17e:	499a      	ldr	r1, [pc, #616]	; (d3e8 <at_handler+0x2d8>)
    d180:	f040 0001 	orr.w	r0, r0, #1
    d184:	f017 f9bc 	bl	24500 <log_string_sync>
    d188:	4b94      	ldr	r3, [pc, #592]	; (d3dc <at_handler+0x2cc>)
    d18a:	4d93      	ldr	r5, [pc, #588]	; (d3d8 <at_handler+0x2c8>)
			LOG_ERR("Failed to parse notification (error %d): %s",
    d18c:	4630      	mov	r0, r6
    d18e:	1aed      	subs	r5, r5, r3
    d190:	f017 f9c8 	bl	24524 <log_strdup>
    d194:	08ed      	lsrs	r5, r5, #3
    d196:	01ad      	lsls	r5, r5, #6
    d198:	f045 0501 	orr.w	r5, r5, #1
    d19c:	4603      	mov	r3, r0
    d19e:	4622      	mov	r2, r4
    d1a0:	4628      	mov	r0, r5
    d1a2:	4992      	ldr	r1, [pc, #584]	; (d3ec <at_handler+0x2dc>)
    d1a4:	f017 f9ac 	bl	24500 <log_string_sync>
			return;
    d1a8:	e7c2      	b.n	d130 <at_handler+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d1aa:	3701      	adds	r7, #1
    d1ac:	2f03      	cmp	r7, #3
    d1ae:	d1c5      	bne.n	d13c <at_handler+0x2c>
    d1b0:	e7be      	b.n	d130 <at_handler+0x20>
	err = at_parser_params_from_str(notification,
    d1b2:	4601      	mov	r1, r0
    d1b4:	aa07      	add	r2, sp, #28
    d1b6:	4630      	mov	r0, r6
    d1b8:	f01b fb28 	bl	2880c <at_parser_params_from_str>
	if (err) {
    d1bc:	4604      	mov	r4, r0
    d1be:	2800      	cmp	r0, #0
    d1c0:	d05c      	beq.n	d27c <at_handler+0x16c>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
    d1c2:	4622      	mov	r2, r4
    d1c4:	4884      	ldr	r0, [pc, #528]	; (d3d8 <at_handler+0x2c8>)
    d1c6:	4b85      	ldr	r3, [pc, #532]	; (d3dc <at_handler+0x2cc>)
    d1c8:	4989      	ldr	r1, [pc, #548]	; (d3f0 <at_handler+0x2e0>)
    d1ca:	1ac0      	subs	r0, r0, r3
    d1cc:	08c0      	lsrs	r0, r0, #3
    d1ce:	0180      	lsls	r0, r0, #6
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
    d1d0:	f040 0001 	orr.w	r0, r0, #1
    d1d4:	f017 f994 	bl	24500 <log_string_sync>
	at_params_list_free(&resp_list);
    d1d8:	a807      	add	r0, sp, #28
    d1da:	f01b fb70 	bl	288be <at_params_list_free>
		if (err) {
    d1de:	2c00      	cmp	r4, #0
    d1e0:	d1d2      	bne.n	d188 <at_handler+0x78>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d1e2:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    d1e6:	2b01      	cmp	r3, #1
    d1e8:	d102      	bne.n	d1f0 <at_handler+0xe0>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d1ea:	4882      	ldr	r0, [pc, #520]	; (d3f4 <at_handler+0x2e4>)
    d1ec:	f013 fa96 	bl	2071c <z_impl_k_sem_give>
		if (!evt_handler) {
    d1f0:	4c81      	ldr	r4, [pc, #516]	; (d3f8 <at_handler+0x2e8>)
    d1f2:	6823      	ldr	r3, [r4, #0]
    d1f4:	2b00      	cmp	r3, #0
    d1f6:	d09b      	beq.n	d130 <at_handler+0x20>
		if (reg_status != prev_reg_status) {
    d1f8:	4a80      	ldr	r2, [pc, #512]	; (d3fc <at_handler+0x2ec>)
    d1fa:	7811      	ldrb	r1, [r2, #0]
    d1fc:	42a9      	cmp	r1, r5
    d1fe:	d007      	beq.n	d210 <at_handler+0x100>
			prev_reg_status = reg_status;
    d200:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d202:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
    d204:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d208:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			evt_handler(&evt);
    d20c:	a809      	add	r0, sp, #36	; 0x24
    d20e:	4798      	blx	r3
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
    d210:	4e7b      	ldr	r6, [pc, #492]	; (d400 <at_handler+0x2f0>)
    d212:	ad03      	add	r5, sp, #12
    d214:	2208      	movs	r2, #8
    d216:	4631      	mov	r1, r6
    d218:	4628      	mov	r0, r5
    d21a:	f01c f91c 	bl	29456 <memcmp>
    d21e:	b160      	cbz	r0, d23a <at_handler+0x12a>
			evt.type = LTE_LC_EVT_CELL_UPDATE;
    d220:	e895 0003 	ldmia.w	r5, {r0, r1}
    d224:	2304      	movs	r3, #4
    d226:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    d22a:	ab0c      	add	r3, sp, #48	; 0x30
    d22c:	e903 0003 	stmdb	r3, {r0, r1}
    d230:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
    d234:	6823      	ldr	r3, [r4, #0]
    d236:	a809      	add	r0, sp, #36	; 0x24
    d238:	4798      	blx	r3
		if (memcmp(&psm_cfg, &prev_psm_cfg,
    d23a:	4e72      	ldr	r6, [pc, #456]	; (d404 <at_handler+0x2f4>)
    d23c:	ad05      	add	r5, sp, #20
    d23e:	2208      	movs	r2, #8
    d240:	4631      	mov	r1, r6
    d242:	4628      	mov	r0, r5
    d244:	f01c f907 	bl	29456 <memcmp>
    d248:	b160      	cbz	r0, d264 <at_handler+0x154>
			evt.type = LTE_LC_EVT_PSM_UPDATE;
    d24a:	e895 0003 	ldmia.w	r5, {r0, r1}
    d24e:	2301      	movs	r3, #1
    d250:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_psm_cfg, &psm_cfg,
    d254:	ab0c      	add	r3, sp, #48	; 0x30
    d256:	e903 0003 	stmdb	r3, {r0, r1}
    d25a:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
    d25e:	6823      	ldr	r3, [r4, #0]
    d260:	a809      	add	r0, sp, #36	; 0x24
    d262:	4798      	blx	r3
	bool notify = false;
    d264:	2300      	movs	r3, #0
	if (evt_handler && notify) {
    d266:	4a64      	ldr	r2, [pc, #400]	; (d3f8 <at_handler+0x2e8>)
    d268:	6812      	ldr	r2, [r2, #0]
    d26a:	2a00      	cmp	r2, #0
    d26c:	f43f af60 	beq.w	d130 <at_handler+0x20>
    d270:	2b00      	cmp	r3, #0
    d272:	f43f af5d 	beq.w	d130 <at_handler+0x20>
		evt_handler(&evt);
    d276:	a809      	add	r0, sp, #36	; 0x24
    d278:	4790      	blx	r2
    d27a:	e759      	b.n	d130 <at_handler+0x20>
	err = at_params_int_get(&resp_list,
    d27c:	2101      	movs	r1, #1
    d27e:	aa01      	add	r2, sp, #4
    d280:	a807      	add	r0, sp, #28
    d282:	f01b fbba 	bl	289fa <at_params_int_get>
	if (err) {
    d286:	4604      	mov	r4, r0
    d288:	b138      	cbz	r0, d29a <at_handler+0x18a>
    d28a:	4853      	ldr	r0, [pc, #332]	; (d3d8 <at_handler+0x2c8>)
    d28c:	4b53      	ldr	r3, [pc, #332]	; (d3dc <at_handler+0x2cc>)
		LOG_ERR("Could not get registration status, error: %d", err);
    d28e:	4622      	mov	r2, r4
    d290:	1ac0      	subs	r0, r0, r3
    d292:	08c0      	lsrs	r0, r0, #3
    d294:	495c      	ldr	r1, [pc, #368]	; (d408 <at_handler+0x2f8>)
    d296:	0180      	lsls	r0, r0, #6
    d298:	e79a      	b.n	d1d0 <at_handler+0xc0>
	err = at_params_string_get(&resp_list,
    d29a:	2102      	movs	r1, #2
    d29c:	ab02      	add	r3, sp, #8
    d29e:	aa09      	add	r2, sp, #36	; 0x24
    d2a0:	a807      	add	r0, sp, #28
	*reg_status = status;
    d2a2:	f89d 5004 	ldrb.w	r5, [sp, #4]
	err = at_params_string_get(&resp_list,
    d2a6:	f01b fbbb 	bl	28a20 <at_params_string_get>
	if (err) {
    d2aa:	4604      	mov	r4, r0
    d2ac:	b138      	cbz	r0, d2be <at_handler+0x1ae>
    d2ae:	484a      	ldr	r0, [pc, #296]	; (d3d8 <at_handler+0x2c8>)
    d2b0:	4b4a      	ldr	r3, [pc, #296]	; (d3dc <at_handler+0x2cc>)
		LOG_ERR("Could not get tracking area code, error: %d", err);
    d2b2:	4622      	mov	r2, r4
    d2b4:	1ac0      	subs	r0, r0, r3
    d2b6:	08c0      	lsrs	r0, r0, #3
    d2b8:	4954      	ldr	r1, [pc, #336]	; (d40c <at_handler+0x2fc>)
    d2ba:	0180      	lsls	r0, r0, #6
    d2bc:	e788      	b.n	d1d0 <at_handler+0xc0>
	str_buf[len] = '\0';
    d2be:	9b02      	ldr	r3, [sp, #8]
    d2c0:	aa0c      	add	r2, sp, #48	; 0x30
    d2c2:	4413      	add	r3, r2
	cell->tac = strtoul(str_buf, NULL, 16);
    d2c4:	4601      	mov	r1, r0
	str_buf[len] = '\0';
    d2c6:	f803 0c0c 	strb.w	r0, [r3, #-12]
	cell->tac = strtoul(str_buf, NULL, 16);
    d2ca:	2210      	movs	r2, #16
    d2cc:	a809      	add	r0, sp, #36	; 0x24
    d2ce:	f014 ff01 	bl	220d4 <strtoul>
	err = at_params_string_get(&resp_list,
    d2d2:	2103      	movs	r1, #3
	cell->tac = strtoul(str_buf, NULL, 16);
    d2d4:	9004      	str	r0, [sp, #16]
	err = at_params_string_get(&resp_list,
    d2d6:	ab02      	add	r3, sp, #8
    d2d8:	aa09      	add	r2, sp, #36	; 0x24
    d2da:	a807      	add	r0, sp, #28
	len = sizeof(str_buf) - 1;
    d2dc:	9702      	str	r7, [sp, #8]
	err = at_params_string_get(&resp_list,
    d2de:	f01b fb9f 	bl	28a20 <at_params_string_get>
	if (err) {
    d2e2:	4604      	mov	r4, r0
    d2e4:	b138      	cbz	r0, d2f6 <at_handler+0x1e6>
    d2e6:	483c      	ldr	r0, [pc, #240]	; (d3d8 <at_handler+0x2c8>)
    d2e8:	4b3c      	ldr	r3, [pc, #240]	; (d3dc <at_handler+0x2cc>)
		LOG_ERR("Could not get cell ID, error: %d", err);
    d2ea:	4622      	mov	r2, r4
    d2ec:	1ac0      	subs	r0, r0, r3
    d2ee:	08c0      	lsrs	r0, r0, #3
    d2f0:	4947      	ldr	r1, [pc, #284]	; (d410 <at_handler+0x300>)
    d2f2:	0180      	lsls	r0, r0, #6
    d2f4:	e76c      	b.n	d1d0 <at_handler+0xc0>
	str_buf[len] = '\0';
    d2f6:	9b02      	ldr	r3, [sp, #8]
    d2f8:	aa0c      	add	r2, sp, #48	; 0x30
    d2fa:	4413      	add	r3, r2
	cell->id = strtoul(str_buf, NULL, 16);
    d2fc:	4601      	mov	r1, r0
	str_buf[len] = '\0';
    d2fe:	f803 0c0c 	strb.w	r0, [r3, #-12]
	cell->id = strtoul(str_buf, NULL, 16);
    d302:	2210      	movs	r2, #16
    d304:	a809      	add	r0, sp, #36	; 0x24
    d306:	f014 fee5 	bl	220d4 <strtoul>
	err = parse_psm_cfg(&resp_list, true, psm_cfg);
    d30a:	2101      	movs	r1, #1
	cell->id = strtoul(str_buf, NULL, 16);
    d30c:	9003      	str	r0, [sp, #12]
	err = parse_psm_cfg(&resp_list, true, psm_cfg);
    d30e:	aa05      	add	r2, sp, #20
    d310:	a807      	add	r0, sp, #28
    d312:	f009 f82b 	bl	1636c <parse_psm_cfg>
	if (err) {
    d316:	4604      	mov	r4, r0
    d318:	2800      	cmp	r0, #0
    d31a:	f43f af5d 	beq.w	d1d8 <at_handler+0xc8>
    d31e:	482e      	ldr	r0, [pc, #184]	; (d3d8 <at_handler+0x2c8>)
    d320:	4b2e      	ldr	r3, [pc, #184]	; (d3dc <at_handler+0x2cc>)
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
    d322:	4622      	mov	r2, r4
    d324:	1ac0      	subs	r0, r0, r3
    d326:	08c0      	lsrs	r0, r0, #3
    d328:	493a      	ldr	r1, [pc, #232]	; (d414 <at_handler+0x304>)
    d32a:	0180      	lsls	r0, r0, #6
    d32c:	e750      	b.n	d1d0 <at_handler+0xc0>
static int parse_rrc_mode(const char *at_response,
			  enum lte_lc_rrc_mode *mode,
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
    d32e:	e9cd 0007 	strd	r0, r0, [sp, #28]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
    d332:	2104      	movs	r1, #4
    d334:	a807      	add	r0, sp, #28
    d336:	f01b fa91 	bl	2885c <at_params_list_init>
	if (err) {
    d33a:	4604      	mov	r4, r0
    d33c:	b1b0      	cbz	r0, d36c <at_handler+0x25c>
    d33e:	4826      	ldr	r0, [pc, #152]	; (d3d8 <at_handler+0x2c8>)
    d340:	4b26      	ldr	r3, [pc, #152]	; (d3dc <at_handler+0x2cc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d342:	4622      	mov	r2, r4
    d344:	1ac0      	subs	r0, r0, r3
    d346:	08c0      	lsrs	r0, r0, #3
    d348:	0180      	lsls	r0, r0, #6
    d34a:	4927      	ldr	r1, [pc, #156]	; (d3e8 <at_handler+0x2d8>)
    d34c:	f040 0001 	orr.w	r0, r0, #1
    d350:	f017 f8d6 	bl	24500 <log_string_sync>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
    d354:	4622      	mov	r2, r4
    d356:	4820      	ldr	r0, [pc, #128]	; (d3d8 <at_handler+0x2c8>)
    d358:	4b20      	ldr	r3, [pc, #128]	; (d3dc <at_handler+0x2cc>)
    d35a:	492f      	ldr	r1, [pc, #188]	; (d418 <at_handler+0x308>)
    d35c:	1ac0      	subs	r0, r0, r3
    d35e:	08c0      	lsrs	r0, r0, #3
    d360:	0180      	lsls	r0, r0, #6
			LOG_ERR("Can't parse eDRX, error: %d", err);
    d362:	f040 0001 	orr.w	r0, r0, #1
    d366:	f017 f8cb 	bl	24500 <log_string_sync>
			return;
    d36a:	e6e1      	b.n	d130 <at_handler+0x20>
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d36c:	4601      	mov	r1, r0
    d36e:	aa07      	add	r2, sp, #28
    d370:	4630      	mov	r0, r6
    d372:	f01b fa4b 	bl	2880c <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d376:	4604      	mov	r4, r0
    d378:	b1a0      	cbz	r0, d3a4 <at_handler+0x294>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
    d37a:	4622      	mov	r2, r4
    d37c:	4816      	ldr	r0, [pc, #88]	; (d3d8 <at_handler+0x2c8>)
    d37e:	4b17      	ldr	r3, [pc, #92]	; (d3dc <at_handler+0x2cc>)
    d380:	4926      	ldr	r1, [pc, #152]	; (d41c <at_handler+0x30c>)
    d382:	1ac0      	subs	r0, r0, r3
    d384:	08c0      	lsrs	r0, r0, #3
    d386:	0180      	lsls	r0, r0, #6
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
	if (err) {
		LOG_ERR("Could not get signalling mode, error: %d", err);
    d388:	f040 0001 	orr.w	r0, r0, #1
    d38c:	f017 f8b8 	bl	24500 <log_string_sync>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
    d390:	a807      	add	r0, sp, #28
    d392:	f01b fa94 	bl	288be <at_params_list_free>
		if (err) {
    d396:	2c00      	cmp	r4, #0
    d398:	d1dc      	bne.n	d354 <at_handler+0x244>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
    d39a:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d39c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
    d3a0:	2301      	movs	r3, #1
		break;
    d3a2:	e760      	b.n	d266 <at_handler+0x156>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
    d3a4:	4639      	mov	r1, r7
    d3a6:	aa05      	add	r2, sp, #20
    d3a8:	a807      	add	r0, sp, #28
    d3aa:	f01b fb26 	bl	289fa <at_params_int_get>
	if (err) {
    d3ae:	4604      	mov	r4, r0
    d3b0:	b138      	cbz	r0, d3c2 <at_handler+0x2b2>
    d3b2:	4809      	ldr	r0, [pc, #36]	; (d3d8 <at_handler+0x2c8>)
    d3b4:	4b09      	ldr	r3, [pc, #36]	; (d3dc <at_handler+0x2cc>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
    d3b6:	4622      	mov	r2, r4
    d3b8:	1ac0      	subs	r0, r0, r3
    d3ba:	08c0      	lsrs	r0, r0, #3
    d3bc:	4918      	ldr	r1, [pc, #96]	; (d420 <at_handler+0x310>)
    d3be:	0180      	lsls	r0, r0, #6
    d3c0:	e7e2      	b.n	d388 <at_handler+0x278>
	if (temp_mode == 0) {
    d3c2:	9a05      	ldr	r2, [sp, #20]
    d3c4:	b912      	cbnz	r2, d3cc <at_handler+0x2bc>
		*mode = LTE_LC_RRC_MODE_IDLE;
    d3c6:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    d3ca:	e7e1      	b.n	d390 <at_handler+0x280>
	} else if (temp_mode == 1) {
    d3cc:	2a01      	cmp	r2, #1
    d3ce:	d129      	bne.n	d424 <at_handler+0x314>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
    d3d0:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
    d3d4:	e7dc      	b.n	d390 <at_handler+0x280>
    d3d6:	bf00      	nop
    d3d8:	0002a30c 	.word	0x0002a30c
    d3dc:	0002a2c4 	.word	0x0002a2c4
    d3e0:	0002c680 	.word	0x0002c680
    d3e4:	0002a718 	.word	0x0002a718
    d3e8:	0002c27e 	.word	0x0002c27e
    d3ec:	0002c71a 	.word	0x0002c71a
    d3f0:	0002c2a7 	.word	0x0002c2a7
    d3f4:	200230cc 	.word	0x200230cc
    d3f8:	200230c8 	.word	0x200230c8
    d3fc:	2002af6c 	.word	0x2002af6c
    d400:	200230e4 	.word	0x200230e4
    d404:	200230ec 	.word	0x200230ec
    d408:	0002c34e 	.word	0x0002c34e
    d40c:	0002c6a0 	.word	0x0002c6a0
    d410:	0002c6cc 	.word	0x0002c6cc
    d414:	0002c6ed 	.word	0x0002c6ed
    d418:	0002c7b6 	.word	0x0002c7b6
    d41c:	0002c746 	.word	0x0002c746
    d420:	0002c771 	.word	0x0002c771
    d424:	4b84      	ldr	r3, [pc, #528]	; (d638 <at_handler+0x528>)
    d426:	4885      	ldr	r0, [pc, #532]	; (d63c <at_handler+0x52c>)
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
    d428:	4985      	ldr	r1, [pc, #532]	; (d640 <at_handler+0x530>)
    d42a:	1ac0      	subs	r0, r0, r3
    d42c:	08c0      	lsrs	r0, r0, #3
    d42e:	0180      	lsls	r0, r0, #6
    d430:	f040 0001 	orr.w	r0, r0, #1
    d434:	f017 f864 	bl	24500 <log_string_sync>
		err = -EINVAL;
    d438:	f06f 0415 	mvn.w	r4, #21
    d43c:	e7a8      	b.n	d390 <at_handler+0x280>
{
	int err;
	u8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    d43e:	2304      	movs	r3, #4
	struct at_param_list resp_list = {0};
    d440:	e9cd 0007 	strd	r0, r0, [sp, #28]
	err = lte_lc_system_mode_get(&sys_mode);
    d444:	a809      	add	r0, sp, #36	; 0x24
	size_t len = sizeof(tmp_buf) - 1;
    d446:	9303      	str	r3, [sp, #12]
	err = lte_lc_system_mode_get(&sys_mode);
    d448:	f009 f98c 	bl	16764 <lte_lc_system_mode_get>
	if (err) {
    d44c:	4604      	mov	r4, r0
    d44e:	b158      	cbz	r0, d468 <at_handler+0x358>
		LOG_ERR("Failed to get system mode, error: %d", err);
    d450:	4622      	mov	r2, r4
    d452:	487a      	ldr	r0, [pc, #488]	; (d63c <at_handler+0x52c>)
    d454:	4b78      	ldr	r3, [pc, #480]	; (d638 <at_handler+0x528>)
    d456:	497b      	ldr	r1, [pc, #492]	; (d644 <at_handler+0x534>)
    d458:	1ac0      	subs	r0, r0, r3
    d45a:	08c0      	lsrs	r0, r0, #3
    d45c:	0180      	lsls	r0, r0, #6
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
	if (err) {
		LOG_ERR("Could not init AT params list, error: %d", err);
    d45e:	f040 0001 	orr.w	r0, r0, #1
    d462:	f017 f84d 	bl	24500 <log_string_sync>
		return err;
    d466:	e015      	b.n	d494 <at_handler+0x384>
	switch (sys_mode) {
    d468:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d46c:	3b01      	subs	r3, #1
    d46e:	2b04      	cmp	r3, #4
    d470:	d804      	bhi.n	d47c <at_handler+0x36c>
    d472:	e8df f003 	tbb	[pc, r3]
    d476:	1727      	.short	0x1727
    d478:	2703      	.short	0x2703
    d47a:	17          	.byte	0x17
    d47b:	00          	.byte	0x00
    d47c:	4b6e      	ldr	r3, [pc, #440]	; (d638 <at_handler+0x528>)
    d47e:	486f      	ldr	r0, [pc, #444]	; (d63c <at_handler+0x52c>)
		LOG_ERR("No LTE connection available in this system mode");
    d480:	4971      	ldr	r1, [pc, #452]	; (d648 <at_handler+0x538>)
    d482:	1ac0      	subs	r0, r0, r3
    d484:	08c0      	lsrs	r0, r0, #3
    d486:	0180      	lsls	r0, r0, #6
    d488:	f040 0001 	orr.w	r0, r0, #1
    d48c:	f017 f838 	bl	24500 <log_string_sync>
		return -ENOTCONN;
    d490:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    d494:	4869      	ldr	r0, [pc, #420]	; (d63c <at_handler+0x52c>)
    d496:	4b68      	ldr	r3, [pc, #416]	; (d638 <at_handler+0x528>)
			LOG_ERR("Can't parse eDRX, error: %d", err);
    d498:	4622      	mov	r2, r4
    d49a:	1ac0      	subs	r0, r0, r3
    d49c:	08c0      	lsrs	r0, r0, #3
    d49e:	496b      	ldr	r1, [pc, #428]	; (d64c <at_handler+0x53c>)
    d4a0:	0180      	lsls	r0, r0, #6
    d4a2:	e75e      	b.n	d362 <at_handler+0x252>
		*ptw_multiplier = 2.56;
    d4a4:	ed9f 8a6a 	vldr	s16, [pc, #424]	; d650 <at_handler+0x540>
	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    d4a8:	2105      	movs	r1, #5
    d4aa:	a807      	add	r0, sp, #28
    d4ac:	f01b f9d6 	bl	2885c <at_params_list_init>
	if (err) {
    d4b0:	4604      	mov	r4, r0
    d4b2:	b150      	cbz	r0, d4ca <at_handler+0x3ba>
    d4b4:	4861      	ldr	r0, [pc, #388]	; (d63c <at_handler+0x52c>)
    d4b6:	4b60      	ldr	r3, [pc, #384]	; (d638 <at_handler+0x528>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d4b8:	4622      	mov	r2, r4
    d4ba:	1ac0      	subs	r0, r0, r3
    d4bc:	08c0      	lsrs	r0, r0, #3
    d4be:	4965      	ldr	r1, [pc, #404]	; (d654 <at_handler+0x544>)
    d4c0:	0180      	lsls	r0, r0, #6
    d4c2:	e7cc      	b.n	d45e <at_handler+0x34e>
		*ptw_multiplier = 1.28;
    d4c4:	ed9f 8a64 	vldr	s16, [pc, #400]	; d658 <at_handler+0x548>
    d4c8:	e7ee      	b.n	d4a8 <at_handler+0x398>
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d4ca:	4601      	mov	r1, r0
    d4cc:	aa07      	add	r2, sp, #28
    d4ce:	4630      	mov	r0, r6
    d4d0:	f01b f99c 	bl	2880c <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d4d4:	4604      	mov	r4, r0
    d4d6:	b188      	cbz	r0, d4fc <at_handler+0x3ec>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
    d4d8:	4622      	mov	r2, r4
    d4da:	4858      	ldr	r0, [pc, #352]	; (d63c <at_handler+0x52c>)
    d4dc:	4b56      	ldr	r3, [pc, #344]	; (d638 <at_handler+0x528>)
    d4de:	495f      	ldr	r1, [pc, #380]	; (d65c <at_handler+0x54c>)
    d4e0:	1ac0      	subs	r0, r0, r3
    d4e2:	08c0      	lsrs	r0, r0, #3
    d4e4:	0180      	lsls	r0, r0, #6
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
				   tmp_buf, &len);
	if (err) {
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    d4e6:	f040 0001 	orr.w	r0, r0, #1
    d4ea:	f017 f809 	bl	24500 <log_string_sync>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
    d4ee:	a807      	add	r0, sp, #28
    d4f0:	f01b f9e5 	bl	288be <at_params_list_free>
		if (err) {
    d4f4:	2c00      	cmp	r4, #0
    d4f6:	d1cd      	bne.n	d494 <at_handler+0x384>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d4f8:	2302      	movs	r3, #2
    d4fa:	e74f      	b.n	d39c <at_handler+0x28c>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    d4fc:	2103      	movs	r1, #3
    d4fe:	ab03      	add	r3, sp, #12
    d500:	aa05      	add	r2, sp, #20
    d502:	a807      	add	r0, sp, #28
    d504:	f01b fa8c 	bl	28a20 <at_params_string_get>
	if (err) {
    d508:	4604      	mov	r4, r0
    d50a:	b138      	cbz	r0, d51c <at_handler+0x40c>
    d50c:	484b      	ldr	r0, [pc, #300]	; (d63c <at_handler+0x52c>)
    d50e:	4b4a      	ldr	r3, [pc, #296]	; (d638 <at_handler+0x528>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    d510:	4622      	mov	r2, r4
    d512:	1ac0      	subs	r0, r0, r3
    d514:	08c0      	lsrs	r0, r0, #3
    d516:	4952      	ldr	r1, [pc, #328]	; (d660 <at_handler+0x550>)
    d518:	0180      	lsls	r0, r0, #6
    d51a:	e7e4      	b.n	d4e6 <at_handler+0x3d6>
	tmp_buf[len] = '\0';
    d51c:	9b03      	ldr	r3, [sp, #12]
    d51e:	aa0c      	add	r2, sp, #48	; 0x30
    d520:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d522:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d524:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d528:	2202      	movs	r2, #2
    d52a:	a805      	add	r0, sp, #20
    d52c:	f014 fdd2 	bl	220d4 <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    d530:	b2c5      	uxtb	r5, r0
    d532:	2d0f      	cmp	r5, #15
    d534:	d909      	bls.n	d54a <at_handler+0x43a>
		return -EINVAL;
    d536:	f06f 0415 	mvn.w	r4, #21
    d53a:	4840      	ldr	r0, [pc, #256]	; (d63c <at_handler+0x52c>)
    d53c:	4b3e      	ldr	r3, [pc, #248]	; (d638 <at_handler+0x528>)
		LOG_ERR("Failed to get eDRX value, error; %d", err);
    d53e:	4622      	mov	r2, r4
    d540:	1ac0      	subs	r0, r0, r3
    d542:	08c0      	lsrs	r0, r0, #3
    d544:	4947      	ldr	r1, [pc, #284]	; (d664 <at_handler+0x554>)
    d546:	0180      	lsls	r0, r0, #6
    d548:	e7cd      	b.n	d4e6 <at_handler+0x3d6>
	err = lte_lc_system_mode_get(&sys_mode);
    d54a:	a802      	add	r0, sp, #8
    d54c:	f009 f90a 	bl	16764 <lte_lc_system_mode_get>
	if (err) {
    d550:	4604      	mov	r4, r0
    d552:	b158      	cbz	r0, d56c <at_handler+0x45c>
    d554:	4b38      	ldr	r3, [pc, #224]	; (d638 <at_handler+0x528>)
    d556:	4839      	ldr	r0, [pc, #228]	; (d63c <at_handler+0x52c>)
		LOG_ERR("Failed to get system mode, error: %d", err);
    d558:	4622      	mov	r2, r4
    d55a:	1ac0      	subs	r0, r0, r3
    d55c:	08c0      	lsrs	r0, r0, #3
    d55e:	0180      	lsls	r0, r0, #6
    d560:	4938      	ldr	r1, [pc, #224]	; (d644 <at_handler+0x534>)
    d562:	f040 0001 	orr.w	r0, r0, #1
    d566:	f016 ffcb 	bl	24500 <log_string_sync>
	if (err) {
    d56a:	e7e6      	b.n	d53a <at_handler+0x42a>
	switch (sys_mode) {
    d56c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    d570:	3b01      	subs	r3, #1
    d572:	2b04      	cmp	r3, #4
    d574:	d825      	bhi.n	d5c2 <at_handler+0x4b2>
    d576:	e8df f003 	tbb	[pc, r3]
    d57a:	2203      	.short	0x2203
    d57c:	0324      	.short	0x0324
    d57e:	22          	.byte	0x22
    d57f:	00          	.byte	0x00
		multiplier = edrx_lookup_ltem[idx];
    d580:	4b39      	ldr	r3, [pc, #228]	; (d668 <at_handler+0x558>)
		multiplier = edrx_lookup_nbiot[idx];
    d582:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d586:	b348      	cbz	r0, d5dc <at_handler+0x4cc>
    d588:	f7fe ffac 	bl	c4e4 <__aeabi_i2d>
    d58c:	a328      	add	r3, pc, #160	; (adr r3, d630 <at_handler+0x520>)
    d58e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d592:	f7ff fa9f 	bl	cad4 <__aeabi_dmul>
    d596:	f7ff f8bf 	bl	c718 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    d59a:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d59c:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d59e:	ab03      	add	r3, sp, #12
    d5a0:	aa05      	add	r2, sp, #20
    d5a2:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
    d5a4:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d5a6:	f01b fa3b 	bl	28a20 <at_params_string_get>
	if (err) {
    d5aa:	4604      	mov	r4, r0
    d5ac:	b1c0      	cbz	r0, d5e0 <at_handler+0x4d0>
    d5ae:	4823      	ldr	r0, [pc, #140]	; (d63c <at_handler+0x52c>)
    d5b0:	4b21      	ldr	r3, [pc, #132]	; (d638 <at_handler+0x528>)
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    d5b2:	4622      	mov	r2, r4
    d5b4:	1ac0      	subs	r0, r0, r3
    d5b6:	08c0      	lsrs	r0, r0, #3
    d5b8:	492c      	ldr	r1, [pc, #176]	; (d66c <at_handler+0x55c>)
    d5ba:	0180      	lsls	r0, r0, #6
    d5bc:	e793      	b.n	d4e6 <at_handler+0x3d6>
		multiplier = edrx_lookup_nbiot[idx];
    d5be:	4b2c      	ldr	r3, [pc, #176]	; (d670 <at_handler+0x560>)
    d5c0:	e7df      	b.n	d582 <at_handler+0x472>
    d5c2:	4b1d      	ldr	r3, [pc, #116]	; (d638 <at_handler+0x528>)
    d5c4:	481d      	ldr	r0, [pc, #116]	; (d63c <at_handler+0x52c>)
		LOG_ERR("No LTE connection available in this system mode");
    d5c6:	4920      	ldr	r1, [pc, #128]	; (d648 <at_handler+0x538>)
    d5c8:	1ac0      	subs	r0, r0, r3
    d5ca:	08c0      	lsrs	r0, r0, #3
    d5cc:	0180      	lsls	r0, r0, #6
    d5ce:	f040 0001 	orr.w	r0, r0, #1
    d5d2:	f016 ff95 	bl	24500 <log_string_sync>
		return -ENOTCONN;
    d5d6:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    d5da:	e7ae      	b.n	d53a <at_handler+0x42a>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d5dc:	4825      	ldr	r0, [pc, #148]	; (d674 <at_handler+0x564>)
    d5de:	e7dc      	b.n	d59a <at_handler+0x48a>
	tmp_buf[len] = '\0';
    d5e0:	9b03      	ldr	r3, [sp, #12]
    d5e2:	aa0c      	add	r2, sp, #48	; 0x30
    d5e4:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d5e6:	4601      	mov	r1, r0
    d5e8:	2202      	movs	r2, #2
	tmp_buf[len] = '\0';
    d5ea:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d5ee:	a805      	add	r0, sp, #20
    d5f0:	f014 fd70 	bl	220d4 <strtoul>
	if (idx > 15) {
    d5f4:	b2c2      	uxtb	r2, r0
    d5f6:	2a0f      	cmp	r2, #15
    d5f8:	d90c      	bls.n	d614 <at_handler+0x504>
    d5fa:	4b0f      	ldr	r3, [pc, #60]	; (d638 <at_handler+0x528>)
    d5fc:	480f      	ldr	r0, [pc, #60]	; (d63c <at_handler+0x52c>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
    d5fe:	491e      	ldr	r1, [pc, #120]	; (d678 <at_handler+0x568>)
    d600:	1ac0      	subs	r0, r0, r3
    d602:	08c0      	lsrs	r0, r0, #3
    d604:	0180      	lsls	r0, r0, #6
    d606:	f040 0001 	orr.w	r0, r0, #1
    d60a:	f016 ff79 	bl	24500 <log_string_sync>
		err = -EINVAL;
    d60e:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
    d612:	e76c      	b.n	d4ee <at_handler+0x3de>
	idx += 1;
    d614:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    d616:	b2c0      	uxtb	r0, r0
    d618:	ee07 0a90 	vmov	s15, r0
    d61c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d620:	ee67 7a88 	vmul.f32	s15, s15, s16
    d624:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
clean_exit:
    d628:	e761      	b.n	d4ee <at_handler+0x3de>
    d62a:	bf00      	nop
    d62c:	f3af 8000 	nop.w
    d630:	47ae147b 	.word	0x47ae147b
    d634:	40247ae1 	.word	0x40247ae1
    d638:	0002a2c4 	.word	0x0002a2c4
    d63c:	0002a30c 	.word	0x0002a30c
    d640:	0002c79a 	.word	0x0002c79a
    d644:	0002c7dd 	.word	0x0002c7dd
    d648:	0002c802 	.word	0x0002c802
    d64c:	0002c8f6 	.word	0x0002c8f6
    d650:	4023d70a 	.word	0x4023d70a
    d654:	0002c27e 	.word	0x0002c27e
    d658:	3fa3d70a 	.word	0x3fa3d70a
    d65c:	0002c832 	.word	0x0002c832
    d660:	0002c85e 	.word	0x0002c85e
    d664:	0002c88a 	.word	0x0002c88a
    d668:	0002ad58 	.word	0x0002ad58
    d66c:	0002c8ae 	.word	0x0002c8ae
    d670:	0002ad78 	.word	0x0002ad78
    d674:	40a3d70a 	.word	0x40a3d70a
    d678:	0002c8d9 	.word	0x0002c8d9
    d67c:	00000000 	.word	0x00000000

0000d680 <_dtoa_r>:
    d680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d684:	6a45      	ldr	r5, [r0, #36]	; 0x24
    d686:	4604      	mov	r4, r0
    d688:	ed2d 8b02 	vpush	{d8}
    d68c:	b095      	sub	sp, #84	; 0x54
    d68e:	ec57 6b10 	vmov	r6, r7, d0
    d692:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
    d696:	9105      	str	r1, [sp, #20]
    d698:	9209      	str	r2, [sp, #36]	; 0x24
    d69a:	930f      	str	r3, [sp, #60]	; 0x3c
    d69c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    d6a0:	b975      	cbnz	r5, d6c0 <_dtoa_r+0x40>
    d6a2:	2010      	movs	r0, #16
    d6a4:	f013 fb96 	bl	20dd4 <malloc>
    d6a8:	4602      	mov	r2, r0
    d6aa:	6260      	str	r0, [r4, #36]	; 0x24
    d6ac:	b920      	cbnz	r0, d6b8 <_dtoa_r+0x38>
    d6ae:	4bb2      	ldr	r3, [pc, #712]	; (d978 <_dtoa_r+0x2f8>)
    d6b0:	21ea      	movs	r1, #234	; 0xea
    d6b2:	48b2      	ldr	r0, [pc, #712]	; (d97c <_dtoa_r+0x2fc>)
    d6b4:	f013 fb5e 	bl	20d74 <__assert_func>
    d6b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
    d6bc:	6005      	str	r5, [r0, #0]
    d6be:	60c5      	str	r5, [r0, #12]
    d6c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d6c2:	6819      	ldr	r1, [r3, #0]
    d6c4:	b151      	cbz	r1, d6dc <_dtoa_r+0x5c>
    d6c6:	685a      	ldr	r2, [r3, #4]
    d6c8:	2301      	movs	r3, #1
    d6ca:	4620      	mov	r0, r4
    d6cc:	4093      	lsls	r3, r2
    d6ce:	604a      	str	r2, [r1, #4]
    d6d0:	608b      	str	r3, [r1, #8]
    d6d2:	f015 fad7 	bl	22c84 <_Bfree>
    d6d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d6d8:	2200      	movs	r2, #0
    d6da:	601a      	str	r2, [r3, #0]
    d6dc:	1e3b      	subs	r3, r7, #0
    d6de:	bfb7      	itett	lt
    d6e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    d6e4:	2300      	movge	r3, #0
    d6e6:	2201      	movlt	r2, #1
    d6e8:	9303      	strlt	r3, [sp, #12]
    d6ea:	bfa8      	it	ge
    d6ec:	f8c8 3000 	strge.w	r3, [r8]
    d6f0:	f8dd 900c 	ldr.w	r9, [sp, #12]
    d6f4:	4ba2      	ldr	r3, [pc, #648]	; (d980 <_dtoa_r+0x300>)
    d6f6:	bfb8      	it	lt
    d6f8:	f8c8 2000 	strlt.w	r2, [r8]
    d6fc:	ea33 0309 	bics.w	r3, r3, r9
    d700:	d11b      	bne.n	d73a <_dtoa_r+0xba>
    d702:	f242 730f 	movw	r3, #9999	; 0x270f
    d706:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d708:	6013      	str	r3, [r2, #0]
    d70a:	f3c9 0313 	ubfx	r3, r9, #0, #20
    d70e:	4333      	orrs	r3, r6
    d710:	f000 8577 	beq.w	e202 <_dtoa_r+0xb82>
    d714:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d716:	b963      	cbnz	r3, d732 <_dtoa_r+0xb2>
    d718:	4b9a      	ldr	r3, [pc, #616]	; (d984 <_dtoa_r+0x304>)
    d71a:	e024      	b.n	d766 <_dtoa_r+0xe6>
    d71c:	4b9a      	ldr	r3, [pc, #616]	; (d988 <_dtoa_r+0x308>)
    d71e:	9300      	str	r3, [sp, #0]
    d720:	3308      	adds	r3, #8
    d722:	9a21      	ldr	r2, [sp, #132]	; 0x84
    d724:	6013      	str	r3, [r2, #0]
    d726:	9800      	ldr	r0, [sp, #0]
    d728:	b015      	add	sp, #84	; 0x54
    d72a:	ecbd 8b02 	vpop	{d8}
    d72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d732:	4b94      	ldr	r3, [pc, #592]	; (d984 <_dtoa_r+0x304>)
    d734:	9300      	str	r3, [sp, #0]
    d736:	3303      	adds	r3, #3
    d738:	e7f3      	b.n	d722 <_dtoa_r+0xa2>
    d73a:	ed9d 7b02 	vldr	d7, [sp, #8]
    d73e:	2200      	movs	r2, #0
    d740:	2300      	movs	r3, #0
    d742:	ec51 0b17 	vmov	r0, r1, d7
    d746:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    d74a:	f7fe ff8b 	bl	c664 <__aeabi_dcmpeq>
    d74e:	4680      	mov	r8, r0
    d750:	b158      	cbz	r0, d76a <_dtoa_r+0xea>
    d752:	2301      	movs	r3, #1
    d754:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d756:	6013      	str	r3, [r2, #0]
    d758:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d75a:	2b00      	cmp	r3, #0
    d75c:	f000 854e 	beq.w	e1fc <_dtoa_r+0xb7c>
    d760:	488a      	ldr	r0, [pc, #552]	; (d98c <_dtoa_r+0x30c>)
    d762:	6018      	str	r0, [r3, #0]
    d764:	1e43      	subs	r3, r0, #1
    d766:	9300      	str	r3, [sp, #0]
    d768:	e7dd      	b.n	d726 <_dtoa_r+0xa6>
    d76a:	f3c9 550a 	ubfx	r5, r9, #20, #11
    d76e:	aa12      	add	r2, sp, #72	; 0x48
    d770:	a913      	add	r1, sp, #76	; 0x4c
    d772:	4620      	mov	r0, r4
    d774:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
    d778:	f015 fd02 	bl	23180 <__d2b>
    d77c:	4683      	mov	fp, r0
    d77e:	2d00      	cmp	r5, #0
    d780:	d07a      	beq.n	d878 <_dtoa_r+0x1f8>
    d782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d784:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
    d788:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    d78c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    d790:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    d794:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
    d798:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
    d79c:	2200      	movs	r2, #0
    d79e:	4b7c      	ldr	r3, [pc, #496]	; (d990 <_dtoa_r+0x310>)
    d7a0:	4630      	mov	r0, r6
    d7a2:	4639      	mov	r1, r7
    d7a4:	f7fe fd50 	bl	c248 <__aeabi_dsub>
    d7a8:	a36d      	add	r3, pc, #436	; (adr r3, d960 <_dtoa_r+0x2e0>)
    d7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    d7ae:	f7ff f991 	bl	cad4 <__aeabi_dmul>
    d7b2:	a36d      	add	r3, pc, #436	; (adr r3, d968 <_dtoa_r+0x2e8>)
    d7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    d7b8:	f7fe fd48 	bl	c24c <__adddf3>
    d7bc:	4606      	mov	r6, r0
    d7be:	460f      	mov	r7, r1
    d7c0:	4628      	mov	r0, r5
    d7c2:	f7fe fe8f 	bl	c4e4 <__aeabi_i2d>
    d7c6:	a36a      	add	r3, pc, #424	; (adr r3, d970 <_dtoa_r+0x2f0>)
    d7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    d7cc:	f7ff f982 	bl	cad4 <__aeabi_dmul>
    d7d0:	4602      	mov	r2, r0
    d7d2:	460b      	mov	r3, r1
    d7d4:	4630      	mov	r0, r6
    d7d6:	4639      	mov	r1, r7
    d7d8:	f7fe fd38 	bl	c24c <__adddf3>
    d7dc:	4606      	mov	r6, r0
    d7de:	460f      	mov	r7, r1
    d7e0:	f7fe ff72 	bl	c6c8 <__aeabi_d2iz>
    d7e4:	2200      	movs	r2, #0
    d7e6:	4682      	mov	sl, r0
    d7e8:	2300      	movs	r3, #0
    d7ea:	4630      	mov	r0, r6
    d7ec:	4639      	mov	r1, r7
    d7ee:	f7fe ff43 	bl	c678 <__aeabi_dcmplt>
    d7f2:	b148      	cbz	r0, d808 <_dtoa_r+0x188>
    d7f4:	4650      	mov	r0, sl
    d7f6:	f7fe fe75 	bl	c4e4 <__aeabi_i2d>
    d7fa:	4632      	mov	r2, r6
    d7fc:	463b      	mov	r3, r7
    d7fe:	f7fe ff31 	bl	c664 <__aeabi_dcmpeq>
    d802:	b908      	cbnz	r0, d808 <_dtoa_r+0x188>
    d804:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    d808:	f1ba 0f16 	cmp.w	sl, #22
    d80c:	d853      	bhi.n	d8b6 <_dtoa_r+0x236>
    d80e:	4b61      	ldr	r3, [pc, #388]	; (d994 <_dtoa_r+0x314>)
    d810:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    d814:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    d818:	e9d3 2300 	ldrd	r2, r3, [r3]
    d81c:	f7fe ff2c 	bl	c678 <__aeabi_dcmplt>
    d820:	2800      	cmp	r0, #0
    d822:	d04a      	beq.n	d8ba <_dtoa_r+0x23a>
    d824:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    d828:	2300      	movs	r3, #0
    d82a:	930e      	str	r3, [sp, #56]	; 0x38
    d82c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d82e:	1b5d      	subs	r5, r3, r5
    d830:	1e6b      	subs	r3, r5, #1
    d832:	9304      	str	r3, [sp, #16]
    d834:	bf45      	ittet	mi
    d836:	2300      	movmi	r3, #0
    d838:	f1c5 0801 	rsbmi	r8, r5, #1
    d83c:	f04f 0800 	movpl.w	r8, #0
    d840:	9304      	strmi	r3, [sp, #16]
    d842:	f1ba 0f00 	cmp.w	sl, #0
    d846:	db3a      	blt.n	d8be <_dtoa_r+0x23e>
    d848:	9b04      	ldr	r3, [sp, #16]
    d84a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
    d84e:	4453      	add	r3, sl
    d850:	9304      	str	r3, [sp, #16]
    d852:	2300      	movs	r3, #0
    d854:	9306      	str	r3, [sp, #24]
    d856:	9b05      	ldr	r3, [sp, #20]
    d858:	2b09      	cmp	r3, #9
    d85a:	d868      	bhi.n	d92e <_dtoa_r+0x2ae>
    d85c:	2b05      	cmp	r3, #5
    d85e:	bfc5      	ittet	gt
    d860:	3b04      	subgt	r3, #4
    d862:	2500      	movgt	r5, #0
    d864:	2501      	movle	r5, #1
    d866:	9305      	strgt	r3, [sp, #20]
    d868:	9b05      	ldr	r3, [sp, #20]
    d86a:	3b02      	subs	r3, #2
    d86c:	2b03      	cmp	r3, #3
    d86e:	d86a      	bhi.n	d946 <_dtoa_r+0x2c6>
    d870:	e8df f003 	tbb	[pc, r3]
    d874:	5b4d4f2d 	.word	0x5b4d4f2d
    d878:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
    d87c:	441d      	add	r5, r3
    d87e:	f205 4332 	addw	r3, r5, #1074	; 0x432
    d882:	2b20      	cmp	r3, #32
    d884:	bfc6      	itte	gt
    d886:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    d88a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
    d88e:	f1c3 0320 	rsble	r3, r3, #32
    d892:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    d896:	bfc5      	ittet	gt
    d898:	fa09 f303 	lslgt.w	r3, r9, r3
    d89c:	fa26 f000 	lsrgt.w	r0, r6, r0
    d8a0:	fa06 f003 	lslle.w	r0, r6, r3
    d8a4:	4318      	orrgt	r0, r3
    d8a6:	f7fe fe0d 	bl	c4c4 <__aeabi_ui2d>
    d8aa:	2301      	movs	r3, #1
    d8ac:	4606      	mov	r6, r0
    d8ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
    d8b2:	9310      	str	r3, [sp, #64]	; 0x40
    d8b4:	e772      	b.n	d79c <_dtoa_r+0x11c>
    d8b6:	2301      	movs	r3, #1
    d8b8:	e7b7      	b.n	d82a <_dtoa_r+0x1aa>
    d8ba:	900e      	str	r0, [sp, #56]	; 0x38
    d8bc:	e7b6      	b.n	d82c <_dtoa_r+0x1ac>
    d8be:	f1ca 0300 	rsb	r3, sl, #0
    d8c2:	eba8 080a 	sub.w	r8, r8, sl
    d8c6:	9306      	str	r3, [sp, #24]
    d8c8:	2300      	movs	r3, #0
    d8ca:	930d      	str	r3, [sp, #52]	; 0x34
    d8cc:	e7c3      	b.n	d856 <_dtoa_r+0x1d6>
    d8ce:	2300      	movs	r3, #0
    d8d0:	9308      	str	r3, [sp, #32]
    d8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d8d4:	2b00      	cmp	r3, #0
    d8d6:	dc39      	bgt.n	d94c <_dtoa_r+0x2cc>
    d8d8:	f04f 0901 	mov.w	r9, #1
    d8dc:	464b      	mov	r3, r9
    d8de:	f8cd 9004 	str.w	r9, [sp, #4]
    d8e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    d8e6:	2200      	movs	r2, #0
    d8e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d8ea:	6042      	str	r2, [r0, #4]
    d8ec:	2204      	movs	r2, #4
    d8ee:	f102 0614 	add.w	r6, r2, #20
    d8f2:	6841      	ldr	r1, [r0, #4]
    d8f4:	429e      	cmp	r6, r3
    d8f6:	d92f      	bls.n	d958 <_dtoa_r+0x2d8>
    d8f8:	4620      	mov	r0, r4
    d8fa:	f015 f983 	bl	22c04 <_Balloc>
    d8fe:	9000      	str	r0, [sp, #0]
    d900:	2800      	cmp	r0, #0
    d902:	d14b      	bne.n	d99c <_dtoa_r+0x31c>
    d904:	4b24      	ldr	r3, [pc, #144]	; (d998 <_dtoa_r+0x318>)
    d906:	4602      	mov	r2, r0
    d908:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    d90c:	e6d1      	b.n	d6b2 <_dtoa_r+0x32>
    d90e:	2301      	movs	r3, #1
    d910:	e7de      	b.n	d8d0 <_dtoa_r+0x250>
    d912:	2300      	movs	r3, #0
    d914:	9308      	str	r3, [sp, #32]
    d916:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d918:	eb0a 0903 	add.w	r9, sl, r3
    d91c:	f109 0301 	add.w	r3, r9, #1
    d920:	2b01      	cmp	r3, #1
    d922:	9301      	str	r3, [sp, #4]
    d924:	bfb8      	it	lt
    d926:	2301      	movlt	r3, #1
    d928:	e7dd      	b.n	d8e6 <_dtoa_r+0x266>
    d92a:	2301      	movs	r3, #1
    d92c:	e7f2      	b.n	d914 <_dtoa_r+0x294>
    d92e:	2501      	movs	r5, #1
    d930:	2300      	movs	r3, #0
    d932:	9508      	str	r5, [sp, #32]
    d934:	9305      	str	r3, [sp, #20]
    d936:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    d93a:	2200      	movs	r2, #0
    d93c:	2312      	movs	r3, #18
    d93e:	f8cd 9004 	str.w	r9, [sp, #4]
    d942:	9209      	str	r2, [sp, #36]	; 0x24
    d944:	e7cf      	b.n	d8e6 <_dtoa_r+0x266>
    d946:	2301      	movs	r3, #1
    d948:	9308      	str	r3, [sp, #32]
    d94a:	e7f4      	b.n	d936 <_dtoa_r+0x2b6>
    d94c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    d950:	464b      	mov	r3, r9
    d952:	f8cd 9004 	str.w	r9, [sp, #4]
    d956:	e7c6      	b.n	d8e6 <_dtoa_r+0x266>
    d958:	3101      	adds	r1, #1
    d95a:	0052      	lsls	r2, r2, #1
    d95c:	6041      	str	r1, [r0, #4]
    d95e:	e7c6      	b.n	d8ee <_dtoa_r+0x26e>
    d960:	636f4361 	.word	0x636f4361
    d964:	3fd287a7 	.word	0x3fd287a7
    d968:	8b60c8b3 	.word	0x8b60c8b3
    d96c:	3fc68a28 	.word	0x3fc68a28
    d970:	509f79fb 	.word	0x509f79fb
    d974:	3fd34413 	.word	0x3fd34413
    d978:	0002d23d 	.word	0x0002d23d
    d97c:	0002d349 	.word	0x0002d349
    d980:	7ff00000 	.word	0x7ff00000
    d984:	0002d345 	.word	0x0002d345
    d988:	0002d33c 	.word	0x0002d33c
    d98c:	0002c95e 	.word	0x0002c95e
    d990:	3ff80000 	.word	0x3ff80000
    d994:	0002a440 	.word	0x0002a440
    d998:	0002d3c5 	.word	0x0002d3c5
    d99c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d99e:	9a00      	ldr	r2, [sp, #0]
    d9a0:	601a      	str	r2, [r3, #0]
    d9a2:	9b01      	ldr	r3, [sp, #4]
    d9a4:	2b0e      	cmp	r3, #14
    d9a6:	f200 80ad 	bhi.w	db04 <_dtoa_r+0x484>
    d9aa:	2d00      	cmp	r5, #0
    d9ac:	f000 80aa 	beq.w	db04 <_dtoa_r+0x484>
    d9b0:	f1ba 0f00 	cmp.w	sl, #0
    d9b4:	dd36      	ble.n	da24 <_dtoa_r+0x3a4>
    d9b6:	f00a 030f 	and.w	r3, sl, #15
    d9ba:	4ac1      	ldr	r2, [pc, #772]	; (dcc0 <_dtoa_r+0x640>)
    d9bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
    d9c0:	ea4f 172a 	mov.w	r7, sl, asr #4
    d9c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d9c8:	ed93 7b00 	vldr	d7, [r3]
    d9cc:	eeb0 8a47 	vmov.f32	s16, s14
    d9d0:	eef0 8a67 	vmov.f32	s17, s15
    d9d4:	d016      	beq.n	da04 <_dtoa_r+0x384>
    d9d6:	4bbb      	ldr	r3, [pc, #748]	; (dcc4 <_dtoa_r+0x644>)
    d9d8:	f007 070f 	and.w	r7, r7, #15
    d9dc:	2503      	movs	r5, #3
    d9de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    d9e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    d9e6:	f7ff f99f 	bl	cd28 <__aeabi_ddiv>
    d9ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d9ee:	4eb5      	ldr	r6, [pc, #724]	; (dcc4 <_dtoa_r+0x644>)
    d9f0:	b957      	cbnz	r7, da08 <_dtoa_r+0x388>
    d9f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    d9f6:	ec53 2b18 	vmov	r2, r3, d8
    d9fa:	f7ff f995 	bl	cd28 <__aeabi_ddiv>
    d9fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
    da02:	e029      	b.n	da58 <_dtoa_r+0x3d8>
    da04:	2502      	movs	r5, #2
    da06:	e7f2      	b.n	d9ee <_dtoa_r+0x36e>
    da08:	07f9      	lsls	r1, r7, #31
    da0a:	d508      	bpl.n	da1e <_dtoa_r+0x39e>
    da0c:	3501      	adds	r5, #1
    da0e:	ec51 0b18 	vmov	r0, r1, d8
    da12:	e9d6 2300 	ldrd	r2, r3, [r6]
    da16:	f7ff f85d 	bl	cad4 <__aeabi_dmul>
    da1a:	ec41 0b18 	vmov	d8, r0, r1
    da1e:	107f      	asrs	r7, r7, #1
    da20:	3608      	adds	r6, #8
    da22:	e7e5      	b.n	d9f0 <_dtoa_r+0x370>
    da24:	f000 80a6 	beq.w	db74 <_dtoa_r+0x4f4>
    da28:	f1ca 0600 	rsb	r6, sl, #0
    da2c:	4ba4      	ldr	r3, [pc, #656]	; (dcc0 <_dtoa_r+0x640>)
    da2e:	4fa5      	ldr	r7, [pc, #660]	; (dcc4 <_dtoa_r+0x644>)
    da30:	2502      	movs	r5, #2
    da32:	f006 020f 	and.w	r2, r6, #15
    da36:	1136      	asrs	r6, r6, #4
    da38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    da3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    da40:	e9d3 2300 	ldrd	r2, r3, [r3]
    da44:	f7ff f846 	bl	cad4 <__aeabi_dmul>
    da48:	2300      	movs	r3, #0
    da4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    da4e:	2e00      	cmp	r6, #0
    da50:	f040 8085 	bne.w	db5e <_dtoa_r+0x4de>
    da54:	2b00      	cmp	r3, #0
    da56:	d1d2      	bne.n	d9fe <_dtoa_r+0x37e>
    da58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    da5a:	2b00      	cmp	r3, #0
    da5c:	f000 808c 	beq.w	db78 <_dtoa_r+0x4f8>
    da60:	2200      	movs	r2, #0
    da62:	4b99      	ldr	r3, [pc, #612]	; (dcc8 <_dtoa_r+0x648>)
    da64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    da68:	4630      	mov	r0, r6
    da6a:	4639      	mov	r1, r7
    da6c:	f7fe fe04 	bl	c678 <__aeabi_dcmplt>
    da70:	2800      	cmp	r0, #0
    da72:	f000 8081 	beq.w	db78 <_dtoa_r+0x4f8>
    da76:	9b01      	ldr	r3, [sp, #4]
    da78:	2b00      	cmp	r3, #0
    da7a:	d07d      	beq.n	db78 <_dtoa_r+0x4f8>
    da7c:	f1b9 0f00 	cmp.w	r9, #0
    da80:	dd3c      	ble.n	dafc <_dtoa_r+0x47c>
    da82:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    da86:	3501      	adds	r5, #1
    da88:	2200      	movs	r2, #0
    da8a:	4630      	mov	r0, r6
    da8c:	9307      	str	r3, [sp, #28]
    da8e:	4639      	mov	r1, r7
    da90:	4b8e      	ldr	r3, [pc, #568]	; (dccc <_dtoa_r+0x64c>)
    da92:	f7ff f81f 	bl	cad4 <__aeabi_dmul>
    da96:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
    da9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    da9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    daa2:	4628      	mov	r0, r5
    daa4:	f7fe fd1e 	bl	c4e4 <__aeabi_i2d>
    daa8:	4632      	mov	r2, r6
    daaa:	463b      	mov	r3, r7
    daac:	f7ff f812 	bl	cad4 <__aeabi_dmul>
    dab0:	4b87      	ldr	r3, [pc, #540]	; (dcd0 <_dtoa_r+0x650>)
    dab2:	2200      	movs	r2, #0
    dab4:	f7fe fbca 	bl	c24c <__adddf3>
    dab8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    dabc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    dac0:	9303      	str	r3, [sp, #12]
    dac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dac4:	2b00      	cmp	r3, #0
    dac6:	d15c      	bne.n	db82 <_dtoa_r+0x502>
    dac8:	2200      	movs	r2, #0
    daca:	4b82      	ldr	r3, [pc, #520]	; (dcd4 <_dtoa_r+0x654>)
    dacc:	4630      	mov	r0, r6
    dace:	4639      	mov	r1, r7
    dad0:	f7fe fbba 	bl	c248 <__aeabi_dsub>
    dad4:	4606      	mov	r6, r0
    dad6:	460f      	mov	r7, r1
    dad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    dadc:	f7fe fdea 	bl	c6b4 <__aeabi_dcmpgt>
    dae0:	2800      	cmp	r0, #0
    dae2:	f040 8294 	bne.w	e00e <_dtoa_r+0x98e>
    dae6:	4630      	mov	r0, r6
    dae8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    daec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    daf0:	4639      	mov	r1, r7
    daf2:	f7fe fdc1 	bl	c678 <__aeabi_dcmplt>
    daf6:	2800      	cmp	r0, #0
    daf8:	f040 8286 	bne.w	e008 <_dtoa_r+0x988>
    dafc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    db00:	e9cd 2302 	strd	r2, r3, [sp, #8]
    db04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    db06:	2b00      	cmp	r3, #0
    db08:	f2c0 8156 	blt.w	ddb8 <_dtoa_r+0x738>
    db0c:	f1ba 0f0e 	cmp.w	sl, #14
    db10:	f300 8152 	bgt.w	ddb8 <_dtoa_r+0x738>
    db14:	4b6a      	ldr	r3, [pc, #424]	; (dcc0 <_dtoa_r+0x640>)
    db16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    db1a:	e9d3 8900 	ldrd	r8, r9, [r3]
    db1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    db20:	2b00      	cmp	r3, #0
    db22:	f280 80e1 	bge.w	dce8 <_dtoa_r+0x668>
    db26:	9b01      	ldr	r3, [sp, #4]
    db28:	2b00      	cmp	r3, #0
    db2a:	f300 80dd 	bgt.w	dce8 <_dtoa_r+0x668>
    db2e:	f040 826b 	bne.w	e008 <_dtoa_r+0x988>
    db32:	2200      	movs	r2, #0
    db34:	4b67      	ldr	r3, [pc, #412]	; (dcd4 <_dtoa_r+0x654>)
    db36:	4640      	mov	r0, r8
    db38:	4649      	mov	r1, r9
    db3a:	f7fe ffcb 	bl	cad4 <__aeabi_dmul>
    db3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    db42:	f7fe fdad 	bl	c6a0 <__aeabi_dcmpge>
    db46:	9e01      	ldr	r6, [sp, #4]
    db48:	4637      	mov	r7, r6
    db4a:	2800      	cmp	r0, #0
    db4c:	f040 8241 	bne.w	dfd2 <_dtoa_r+0x952>
    db50:	9d00      	ldr	r5, [sp, #0]
    db52:	2331      	movs	r3, #49	; 0x31
    db54:	f10a 0a01 	add.w	sl, sl, #1
    db58:	f805 3b01 	strb.w	r3, [r5], #1
    db5c:	e23d      	b.n	dfda <_dtoa_r+0x95a>
    db5e:	07f2      	lsls	r2, r6, #31
    db60:	d505      	bpl.n	db6e <_dtoa_r+0x4ee>
    db62:	3501      	adds	r5, #1
    db64:	e9d7 2300 	ldrd	r2, r3, [r7]
    db68:	f7fe ffb4 	bl	cad4 <__aeabi_dmul>
    db6c:	2301      	movs	r3, #1
    db6e:	1076      	asrs	r6, r6, #1
    db70:	3708      	adds	r7, #8
    db72:	e76c      	b.n	da4e <_dtoa_r+0x3ce>
    db74:	2502      	movs	r5, #2
    db76:	e76f      	b.n	da58 <_dtoa_r+0x3d8>
    db78:	9b01      	ldr	r3, [sp, #4]
    db7a:	f8cd a01c 	str.w	sl, [sp, #28]
    db7e:	930c      	str	r3, [sp, #48]	; 0x30
    db80:	e78d      	b.n	da9e <_dtoa_r+0x41e>
    db82:	9900      	ldr	r1, [sp, #0]
    db84:	980c      	ldr	r0, [sp, #48]	; 0x30
    db86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    db88:	4401      	add	r1, r0
    db8a:	4b4d      	ldr	r3, [pc, #308]	; (dcc0 <_dtoa_r+0x640>)
    db8c:	ed9d 7b02 	vldr	d7, [sp, #8]
    db90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    db94:	9102      	str	r1, [sp, #8]
    db96:	9908      	ldr	r1, [sp, #32]
    db98:	eeb0 8a47 	vmov.f32	s16, s14
    db9c:	eef0 8a67 	vmov.f32	s17, s15
    dba0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    dba4:	2900      	cmp	r1, #0
    dba6:	d045      	beq.n	dc34 <_dtoa_r+0x5b4>
    dba8:	2000      	movs	r0, #0
    dbaa:	494b      	ldr	r1, [pc, #300]	; (dcd8 <_dtoa_r+0x658>)
    dbac:	f7ff f8bc 	bl	cd28 <__aeabi_ddiv>
    dbb0:	ec53 2b18 	vmov	r2, r3, d8
    dbb4:	f7fe fb48 	bl	c248 <__aeabi_dsub>
    dbb8:	9d00      	ldr	r5, [sp, #0]
    dbba:	ec41 0b18 	vmov	d8, r0, r1
    dbbe:	4639      	mov	r1, r7
    dbc0:	4630      	mov	r0, r6
    dbc2:	f7fe fd81 	bl	c6c8 <__aeabi_d2iz>
    dbc6:	900c      	str	r0, [sp, #48]	; 0x30
    dbc8:	f7fe fc8c 	bl	c4e4 <__aeabi_i2d>
    dbcc:	4602      	mov	r2, r0
    dbce:	460b      	mov	r3, r1
    dbd0:	4630      	mov	r0, r6
    dbd2:	4639      	mov	r1, r7
    dbd4:	f7fe fb38 	bl	c248 <__aeabi_dsub>
    dbd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dbda:	4606      	mov	r6, r0
    dbdc:	460f      	mov	r7, r1
    dbde:	3330      	adds	r3, #48	; 0x30
    dbe0:	f805 3b01 	strb.w	r3, [r5], #1
    dbe4:	ec53 2b18 	vmov	r2, r3, d8
    dbe8:	f7fe fd46 	bl	c678 <__aeabi_dcmplt>
    dbec:	2800      	cmp	r0, #0
    dbee:	d164      	bne.n	dcba <_dtoa_r+0x63a>
    dbf0:	4632      	mov	r2, r6
    dbf2:	463b      	mov	r3, r7
    dbf4:	2000      	movs	r0, #0
    dbf6:	4934      	ldr	r1, [pc, #208]	; (dcc8 <_dtoa_r+0x648>)
    dbf8:	f7fe fb26 	bl	c248 <__aeabi_dsub>
    dbfc:	ec53 2b18 	vmov	r2, r3, d8
    dc00:	f7fe fd3a 	bl	c678 <__aeabi_dcmplt>
    dc04:	2800      	cmp	r0, #0
    dc06:	f040 80b7 	bne.w	dd78 <_dtoa_r+0x6f8>
    dc0a:	9b02      	ldr	r3, [sp, #8]
    dc0c:	429d      	cmp	r5, r3
    dc0e:	f43f af75 	beq.w	dafc <_dtoa_r+0x47c>
    dc12:	2200      	movs	r2, #0
    dc14:	4b2d      	ldr	r3, [pc, #180]	; (dccc <_dtoa_r+0x64c>)
    dc16:	ec51 0b18 	vmov	r0, r1, d8
    dc1a:	f7fe ff5b 	bl	cad4 <__aeabi_dmul>
    dc1e:	2200      	movs	r2, #0
    dc20:	4b2a      	ldr	r3, [pc, #168]	; (dccc <_dtoa_r+0x64c>)
    dc22:	ec41 0b18 	vmov	d8, r0, r1
    dc26:	4630      	mov	r0, r6
    dc28:	4639      	mov	r1, r7
    dc2a:	f7fe ff53 	bl	cad4 <__aeabi_dmul>
    dc2e:	4606      	mov	r6, r0
    dc30:	460f      	mov	r7, r1
    dc32:	e7c4      	b.n	dbbe <_dtoa_r+0x53e>
    dc34:	ec51 0b17 	vmov	r0, r1, d7
    dc38:	f7fe ff4c 	bl	cad4 <__aeabi_dmul>
    dc3c:	9b02      	ldr	r3, [sp, #8]
    dc3e:	9d00      	ldr	r5, [sp, #0]
    dc40:	930c      	str	r3, [sp, #48]	; 0x30
    dc42:	ec41 0b18 	vmov	d8, r0, r1
    dc46:	4639      	mov	r1, r7
    dc48:	4630      	mov	r0, r6
    dc4a:	f7fe fd3d 	bl	c6c8 <__aeabi_d2iz>
    dc4e:	9011      	str	r0, [sp, #68]	; 0x44
    dc50:	f7fe fc48 	bl	c4e4 <__aeabi_i2d>
    dc54:	4602      	mov	r2, r0
    dc56:	460b      	mov	r3, r1
    dc58:	4630      	mov	r0, r6
    dc5a:	4639      	mov	r1, r7
    dc5c:	f7fe faf4 	bl	c248 <__aeabi_dsub>
    dc60:	9b11      	ldr	r3, [sp, #68]	; 0x44
    dc62:	4606      	mov	r6, r0
    dc64:	460f      	mov	r7, r1
    dc66:	3330      	adds	r3, #48	; 0x30
    dc68:	2200      	movs	r2, #0
    dc6a:	f805 3b01 	strb.w	r3, [r5], #1
    dc6e:	9b02      	ldr	r3, [sp, #8]
    dc70:	429d      	cmp	r5, r3
    dc72:	d133      	bne.n	dcdc <_dtoa_r+0x65c>
    dc74:	4b18      	ldr	r3, [pc, #96]	; (dcd8 <_dtoa_r+0x658>)
    dc76:	ec51 0b18 	vmov	r0, r1, d8
    dc7a:	f7fe fae7 	bl	c24c <__adddf3>
    dc7e:	4602      	mov	r2, r0
    dc80:	460b      	mov	r3, r1
    dc82:	4630      	mov	r0, r6
    dc84:	4639      	mov	r1, r7
    dc86:	f7fe fd15 	bl	c6b4 <__aeabi_dcmpgt>
    dc8a:	2800      	cmp	r0, #0
    dc8c:	d174      	bne.n	dd78 <_dtoa_r+0x6f8>
    dc8e:	2000      	movs	r0, #0
    dc90:	4911      	ldr	r1, [pc, #68]	; (dcd8 <_dtoa_r+0x658>)
    dc92:	ec53 2b18 	vmov	r2, r3, d8
    dc96:	f7fe fad7 	bl	c248 <__aeabi_dsub>
    dc9a:	4602      	mov	r2, r0
    dc9c:	460b      	mov	r3, r1
    dc9e:	4630      	mov	r0, r6
    dca0:	4639      	mov	r1, r7
    dca2:	f7fe fce9 	bl	c678 <__aeabi_dcmplt>
    dca6:	2800      	cmp	r0, #0
    dca8:	f43f af28 	beq.w	dafc <_dtoa_r+0x47c>
    dcac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    dcae:	1e6b      	subs	r3, r5, #1
    dcb0:	930c      	str	r3, [sp, #48]	; 0x30
    dcb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    dcb6:	2b30      	cmp	r3, #48	; 0x30
    dcb8:	d0f8      	beq.n	dcac <_dtoa_r+0x62c>
    dcba:	f8dd a01c 	ldr.w	sl, [sp, #28]
    dcbe:	e049      	b.n	dd54 <_dtoa_r+0x6d4>
    dcc0:	0002a440 	.word	0x0002a440
    dcc4:	0002a418 	.word	0x0002a418
    dcc8:	3ff00000 	.word	0x3ff00000
    dccc:	40240000 	.word	0x40240000
    dcd0:	401c0000 	.word	0x401c0000
    dcd4:	40140000 	.word	0x40140000
    dcd8:	3fe00000 	.word	0x3fe00000
    dcdc:	4baf      	ldr	r3, [pc, #700]	; (df9c <_dtoa_r+0x91c>)
    dcde:	f7fe fef9 	bl	cad4 <__aeabi_dmul>
    dce2:	4606      	mov	r6, r0
    dce4:	460f      	mov	r7, r1
    dce6:	e7ae      	b.n	dc46 <_dtoa_r+0x5c6>
    dce8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    dcec:	9d00      	ldr	r5, [sp, #0]
    dcee:	4642      	mov	r2, r8
    dcf0:	464b      	mov	r3, r9
    dcf2:	4630      	mov	r0, r6
    dcf4:	4639      	mov	r1, r7
    dcf6:	f7ff f817 	bl	cd28 <__aeabi_ddiv>
    dcfa:	f7fe fce5 	bl	c6c8 <__aeabi_d2iz>
    dcfe:	9002      	str	r0, [sp, #8]
    dd00:	f7fe fbf0 	bl	c4e4 <__aeabi_i2d>
    dd04:	4642      	mov	r2, r8
    dd06:	464b      	mov	r3, r9
    dd08:	f7fe fee4 	bl	cad4 <__aeabi_dmul>
    dd0c:	4602      	mov	r2, r0
    dd0e:	460b      	mov	r3, r1
    dd10:	4630      	mov	r0, r6
    dd12:	4639      	mov	r1, r7
    dd14:	f7fe fa98 	bl	c248 <__aeabi_dsub>
    dd18:	9e02      	ldr	r6, [sp, #8]
    dd1a:	9f01      	ldr	r7, [sp, #4]
    dd1c:	4602      	mov	r2, r0
    dd1e:	3630      	adds	r6, #48	; 0x30
    dd20:	460b      	mov	r3, r1
    dd22:	f805 6b01 	strb.w	r6, [r5], #1
    dd26:	9e00      	ldr	r6, [sp, #0]
    dd28:	1bae      	subs	r6, r5, r6
    dd2a:	42b7      	cmp	r7, r6
    dd2c:	d137      	bne.n	dd9e <_dtoa_r+0x71e>
    dd2e:	f7fe fa8d 	bl	c24c <__adddf3>
    dd32:	4642      	mov	r2, r8
    dd34:	464b      	mov	r3, r9
    dd36:	4606      	mov	r6, r0
    dd38:	460f      	mov	r7, r1
    dd3a:	f7fe fcbb 	bl	c6b4 <__aeabi_dcmpgt>
    dd3e:	b9c8      	cbnz	r0, dd74 <_dtoa_r+0x6f4>
    dd40:	4642      	mov	r2, r8
    dd42:	464b      	mov	r3, r9
    dd44:	4630      	mov	r0, r6
    dd46:	4639      	mov	r1, r7
    dd48:	f7fe fc8c 	bl	c664 <__aeabi_dcmpeq>
    dd4c:	b110      	cbz	r0, dd54 <_dtoa_r+0x6d4>
    dd4e:	9b02      	ldr	r3, [sp, #8]
    dd50:	07d9      	lsls	r1, r3, #31
    dd52:	d40f      	bmi.n	dd74 <_dtoa_r+0x6f4>
    dd54:	4620      	mov	r0, r4
    dd56:	4659      	mov	r1, fp
    dd58:	f014 ff94 	bl	22c84 <_Bfree>
    dd5c:	2300      	movs	r3, #0
    dd5e:	f10a 0001 	add.w	r0, sl, #1
    dd62:	702b      	strb	r3, [r5, #0]
    dd64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dd66:	6018      	str	r0, [r3, #0]
    dd68:	9b21      	ldr	r3, [sp, #132]	; 0x84
    dd6a:	2b00      	cmp	r3, #0
    dd6c:	f43f acdb 	beq.w	d726 <_dtoa_r+0xa6>
    dd70:	601d      	str	r5, [r3, #0]
    dd72:	e4d8      	b.n	d726 <_dtoa_r+0xa6>
    dd74:	f8cd a01c 	str.w	sl, [sp, #28]
    dd78:	462b      	mov	r3, r5
    dd7a:	461d      	mov	r5, r3
    dd7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    dd80:	2a39      	cmp	r2, #57	; 0x39
    dd82:	d108      	bne.n	dd96 <_dtoa_r+0x716>
    dd84:	9a00      	ldr	r2, [sp, #0]
    dd86:	429a      	cmp	r2, r3
    dd88:	d1f7      	bne.n	dd7a <_dtoa_r+0x6fa>
    dd8a:	9a07      	ldr	r2, [sp, #28]
    dd8c:	9900      	ldr	r1, [sp, #0]
    dd8e:	3201      	adds	r2, #1
    dd90:	9207      	str	r2, [sp, #28]
    dd92:	2230      	movs	r2, #48	; 0x30
    dd94:	700a      	strb	r2, [r1, #0]
    dd96:	781a      	ldrb	r2, [r3, #0]
    dd98:	3201      	adds	r2, #1
    dd9a:	701a      	strb	r2, [r3, #0]
    dd9c:	e78d      	b.n	dcba <_dtoa_r+0x63a>
    dd9e:	2200      	movs	r2, #0
    dda0:	4b7e      	ldr	r3, [pc, #504]	; (df9c <_dtoa_r+0x91c>)
    dda2:	f7fe fe97 	bl	cad4 <__aeabi_dmul>
    dda6:	2200      	movs	r2, #0
    dda8:	2300      	movs	r3, #0
    ddaa:	4606      	mov	r6, r0
    ddac:	460f      	mov	r7, r1
    ddae:	f7fe fc59 	bl	c664 <__aeabi_dcmpeq>
    ddb2:	2800      	cmp	r0, #0
    ddb4:	d09b      	beq.n	dcee <_dtoa_r+0x66e>
    ddb6:	e7cd      	b.n	dd54 <_dtoa_r+0x6d4>
    ddb8:	9a08      	ldr	r2, [sp, #32]
    ddba:	2a00      	cmp	r2, #0
    ddbc:	f000 80c3 	beq.w	df46 <_dtoa_r+0x8c6>
    ddc0:	9a05      	ldr	r2, [sp, #20]
    ddc2:	2a01      	cmp	r2, #1
    ddc4:	f300 80a8 	bgt.w	df18 <_dtoa_r+0x898>
    ddc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ddca:	2a00      	cmp	r2, #0
    ddcc:	f000 80a0 	beq.w	df10 <_dtoa_r+0x890>
    ddd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
    ddd4:	9e06      	ldr	r6, [sp, #24]
    ddd6:	4645      	mov	r5, r8
    ddd8:	9a04      	ldr	r2, [sp, #16]
    ddda:	2101      	movs	r1, #1
    dddc:	4620      	mov	r0, r4
    ddde:	4498      	add	r8, r3
    dde0:	441a      	add	r2, r3
    dde2:	9204      	str	r2, [sp, #16]
    dde4:	f014 ffba 	bl	22d5c <__i2b>
    dde8:	4607      	mov	r7, r0
    ddea:	2d00      	cmp	r5, #0
    ddec:	dd0b      	ble.n	de06 <_dtoa_r+0x786>
    ddee:	9b04      	ldr	r3, [sp, #16]
    ddf0:	2b00      	cmp	r3, #0
    ddf2:	dd08      	ble.n	de06 <_dtoa_r+0x786>
    ddf4:	42ab      	cmp	r3, r5
    ddf6:	9a04      	ldr	r2, [sp, #16]
    ddf8:	bfa8      	it	ge
    ddfa:	462b      	movge	r3, r5
    ddfc:	eba8 0803 	sub.w	r8, r8, r3
    de00:	1aed      	subs	r5, r5, r3
    de02:	1ad3      	subs	r3, r2, r3
    de04:	9304      	str	r3, [sp, #16]
    de06:	9b06      	ldr	r3, [sp, #24]
    de08:	b1fb      	cbz	r3, de4a <_dtoa_r+0x7ca>
    de0a:	9b08      	ldr	r3, [sp, #32]
    de0c:	2b00      	cmp	r3, #0
    de0e:	f000 809e 	beq.w	df4e <_dtoa_r+0x8ce>
    de12:	2e00      	cmp	r6, #0
    de14:	dd11      	ble.n	de3a <_dtoa_r+0x7ba>
    de16:	4639      	mov	r1, r7
    de18:	4632      	mov	r2, r6
    de1a:	4620      	mov	r0, r4
    de1c:	f015 f85a 	bl	22ed4 <__pow5mult>
    de20:	465a      	mov	r2, fp
    de22:	4601      	mov	r1, r0
    de24:	4607      	mov	r7, r0
    de26:	4620      	mov	r0, r4
    de28:	f014 ffae 	bl	22d88 <__multiply>
    de2c:	4659      	mov	r1, fp
    de2e:	9007      	str	r0, [sp, #28]
    de30:	4620      	mov	r0, r4
    de32:	f014 ff27 	bl	22c84 <_Bfree>
    de36:	9b07      	ldr	r3, [sp, #28]
    de38:	469b      	mov	fp, r3
    de3a:	9b06      	ldr	r3, [sp, #24]
    de3c:	1b9a      	subs	r2, r3, r6
    de3e:	d004      	beq.n	de4a <_dtoa_r+0x7ca>
    de40:	4659      	mov	r1, fp
    de42:	4620      	mov	r0, r4
    de44:	f015 f846 	bl	22ed4 <__pow5mult>
    de48:	4683      	mov	fp, r0
    de4a:	2101      	movs	r1, #1
    de4c:	4620      	mov	r0, r4
    de4e:	f014 ff85 	bl	22d5c <__i2b>
    de52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    de54:	4606      	mov	r6, r0
    de56:	2b00      	cmp	r3, #0
    de58:	dd7b      	ble.n	df52 <_dtoa_r+0x8d2>
    de5a:	461a      	mov	r2, r3
    de5c:	4601      	mov	r1, r0
    de5e:	4620      	mov	r0, r4
    de60:	f015 f838 	bl	22ed4 <__pow5mult>
    de64:	9b05      	ldr	r3, [sp, #20]
    de66:	4606      	mov	r6, r0
    de68:	2b01      	cmp	r3, #1
    de6a:	dd75      	ble.n	df58 <_dtoa_r+0x8d8>
    de6c:	2300      	movs	r3, #0
    de6e:	9306      	str	r3, [sp, #24]
    de70:	6933      	ldr	r3, [r6, #16]
    de72:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    de76:	6918      	ldr	r0, [r3, #16]
    de78:	f01b feb4 	bl	29be4 <__hi0bits>
    de7c:	f1c0 0020 	rsb	r0, r0, #32
    de80:	9b04      	ldr	r3, [sp, #16]
    de82:	4418      	add	r0, r3
    de84:	f010 001f 	ands.w	r0, r0, #31
    de88:	f000 8085 	beq.w	df96 <_dtoa_r+0x916>
    de8c:	f1c0 0320 	rsb	r3, r0, #32
    de90:	2b04      	cmp	r3, #4
    de92:	dd7e      	ble.n	df92 <_dtoa_r+0x912>
    de94:	f1c0 001c 	rsb	r0, r0, #28
    de98:	9b04      	ldr	r3, [sp, #16]
    de9a:	4480      	add	r8, r0
    de9c:	4405      	add	r5, r0
    de9e:	4403      	add	r3, r0
    dea0:	9304      	str	r3, [sp, #16]
    dea2:	f1b8 0f00 	cmp.w	r8, #0
    dea6:	dd05      	ble.n	deb4 <_dtoa_r+0x834>
    dea8:	4659      	mov	r1, fp
    deaa:	4642      	mov	r2, r8
    deac:	4620      	mov	r0, r4
    deae:	f015 f86b 	bl	22f88 <__lshift>
    deb2:	4683      	mov	fp, r0
    deb4:	9b04      	ldr	r3, [sp, #16]
    deb6:	2b00      	cmp	r3, #0
    deb8:	dd05      	ble.n	dec6 <_dtoa_r+0x846>
    deba:	4631      	mov	r1, r6
    debc:	461a      	mov	r2, r3
    debe:	4620      	mov	r0, r4
    dec0:	f015 f862 	bl	22f88 <__lshift>
    dec4:	4606      	mov	r6, r0
    dec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dec8:	2b00      	cmp	r3, #0
    deca:	d069      	beq.n	dfa0 <_dtoa_r+0x920>
    decc:	4631      	mov	r1, r6
    dece:	4658      	mov	r0, fp
    ded0:	f01b fed8 	bl	29c84 <__mcmp>
    ded4:	2800      	cmp	r0, #0
    ded6:	da63      	bge.n	dfa0 <_dtoa_r+0x920>
    ded8:	2300      	movs	r3, #0
    deda:	4659      	mov	r1, fp
    dedc:	220a      	movs	r2, #10
    dede:	4620      	mov	r0, r4
    dee0:	f014 fef2 	bl	22cc8 <__multadd>
    dee4:	9b08      	ldr	r3, [sp, #32]
    dee6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    deea:	4683      	mov	fp, r0
    deec:	2b00      	cmp	r3, #0
    deee:	f000 818f 	beq.w	e210 <_dtoa_r+0xb90>
    def2:	4639      	mov	r1, r7
    def4:	2300      	movs	r3, #0
    def6:	220a      	movs	r2, #10
    def8:	4620      	mov	r0, r4
    defa:	f014 fee5 	bl	22cc8 <__multadd>
    defe:	f1b9 0f00 	cmp.w	r9, #0
    df02:	4607      	mov	r7, r0
    df04:	f300 808e 	bgt.w	e024 <_dtoa_r+0x9a4>
    df08:	9b05      	ldr	r3, [sp, #20]
    df0a:	2b02      	cmp	r3, #2
    df0c:	dc50      	bgt.n	dfb0 <_dtoa_r+0x930>
    df0e:	e089      	b.n	e024 <_dtoa_r+0x9a4>
    df10:	9b12      	ldr	r3, [sp, #72]	; 0x48
    df12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    df16:	e75d      	b.n	ddd4 <_dtoa_r+0x754>
    df18:	9b01      	ldr	r3, [sp, #4]
    df1a:	1e5e      	subs	r6, r3, #1
    df1c:	9b06      	ldr	r3, [sp, #24]
    df1e:	42b3      	cmp	r3, r6
    df20:	bfb7      	itett	lt
    df22:	9b06      	ldrlt	r3, [sp, #24]
    df24:	1b9e      	subge	r6, r3, r6
    df26:	9606      	strlt	r6, [sp, #24]
    df28:	1af2      	sublt	r2, r6, r3
    df2a:	bfbf      	itttt	lt
    df2c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
    df2e:	2600      	movlt	r6, #0
    df30:	189b      	addlt	r3, r3, r2
    df32:	930d      	strlt	r3, [sp, #52]	; 0x34
    df34:	9b01      	ldr	r3, [sp, #4]
    df36:	2b00      	cmp	r3, #0
    df38:	bfb5      	itete	lt
    df3a:	eba8 0503 	sublt.w	r5, r8, r3
    df3e:	4645      	movge	r5, r8
    df40:	2300      	movlt	r3, #0
    df42:	9b01      	ldrge	r3, [sp, #4]
    df44:	e748      	b.n	ddd8 <_dtoa_r+0x758>
    df46:	9e06      	ldr	r6, [sp, #24]
    df48:	4645      	mov	r5, r8
    df4a:	9f08      	ldr	r7, [sp, #32]
    df4c:	e74d      	b.n	ddea <_dtoa_r+0x76a>
    df4e:	9a06      	ldr	r2, [sp, #24]
    df50:	e776      	b.n	de40 <_dtoa_r+0x7c0>
    df52:	9b05      	ldr	r3, [sp, #20]
    df54:	2b01      	cmp	r3, #1
    df56:	dc18      	bgt.n	df8a <_dtoa_r+0x90a>
    df58:	9b02      	ldr	r3, [sp, #8]
    df5a:	b9b3      	cbnz	r3, df8a <_dtoa_r+0x90a>
    df5c:	9b03      	ldr	r3, [sp, #12]
    df5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    df62:	b9a3      	cbnz	r3, df8e <_dtoa_r+0x90e>
    df64:	9b03      	ldr	r3, [sp, #12]
    df66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    df6a:	0d1b      	lsrs	r3, r3, #20
    df6c:	051b      	lsls	r3, r3, #20
    df6e:	b12b      	cbz	r3, df7c <_dtoa_r+0x8fc>
    df70:	9b04      	ldr	r3, [sp, #16]
    df72:	f108 0801 	add.w	r8, r8, #1
    df76:	3301      	adds	r3, #1
    df78:	9304      	str	r3, [sp, #16]
    df7a:	2301      	movs	r3, #1
    df7c:	9306      	str	r3, [sp, #24]
    df7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    df80:	2b00      	cmp	r3, #0
    df82:	f47f af75 	bne.w	de70 <_dtoa_r+0x7f0>
    df86:	2001      	movs	r0, #1
    df88:	e77a      	b.n	de80 <_dtoa_r+0x800>
    df8a:	2300      	movs	r3, #0
    df8c:	e7f6      	b.n	df7c <_dtoa_r+0x8fc>
    df8e:	9b02      	ldr	r3, [sp, #8]
    df90:	e7f4      	b.n	df7c <_dtoa_r+0x8fc>
    df92:	d086      	beq.n	dea2 <_dtoa_r+0x822>
    df94:	4618      	mov	r0, r3
    df96:	301c      	adds	r0, #28
    df98:	e77e      	b.n	de98 <_dtoa_r+0x818>
    df9a:	bf00      	nop
    df9c:	40240000 	.word	0x40240000
    dfa0:	9b01      	ldr	r3, [sp, #4]
    dfa2:	2b00      	cmp	r3, #0
    dfa4:	dc38      	bgt.n	e018 <_dtoa_r+0x998>
    dfa6:	9b05      	ldr	r3, [sp, #20]
    dfa8:	2b02      	cmp	r3, #2
    dfaa:	dd35      	ble.n	e018 <_dtoa_r+0x998>
    dfac:	f8dd 9004 	ldr.w	r9, [sp, #4]
    dfb0:	f1b9 0f00 	cmp.w	r9, #0
    dfb4:	d10d      	bne.n	dfd2 <_dtoa_r+0x952>
    dfb6:	4631      	mov	r1, r6
    dfb8:	464b      	mov	r3, r9
    dfba:	2205      	movs	r2, #5
    dfbc:	4620      	mov	r0, r4
    dfbe:	f014 fe83 	bl	22cc8 <__multadd>
    dfc2:	4601      	mov	r1, r0
    dfc4:	4606      	mov	r6, r0
    dfc6:	4658      	mov	r0, fp
    dfc8:	f01b fe5c 	bl	29c84 <__mcmp>
    dfcc:	2800      	cmp	r0, #0
    dfce:	f73f adbf 	bgt.w	db50 <_dtoa_r+0x4d0>
    dfd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dfd4:	9d00      	ldr	r5, [sp, #0]
    dfd6:	ea6f 0a03 	mvn.w	sl, r3
    dfda:	f04f 0800 	mov.w	r8, #0
    dfde:	4631      	mov	r1, r6
    dfe0:	4620      	mov	r0, r4
    dfe2:	f014 fe4f 	bl	22c84 <_Bfree>
    dfe6:	2f00      	cmp	r7, #0
    dfe8:	f43f aeb4 	beq.w	dd54 <_dtoa_r+0x6d4>
    dfec:	f1b8 0f00 	cmp.w	r8, #0
    dff0:	d005      	beq.n	dffe <_dtoa_r+0x97e>
    dff2:	45b8      	cmp	r8, r7
    dff4:	d003      	beq.n	dffe <_dtoa_r+0x97e>
    dff6:	4641      	mov	r1, r8
    dff8:	4620      	mov	r0, r4
    dffa:	f014 fe43 	bl	22c84 <_Bfree>
    dffe:	4639      	mov	r1, r7
    e000:	4620      	mov	r0, r4
    e002:	f014 fe3f 	bl	22c84 <_Bfree>
    e006:	e6a5      	b.n	dd54 <_dtoa_r+0x6d4>
    e008:	2600      	movs	r6, #0
    e00a:	4637      	mov	r7, r6
    e00c:	e7e1      	b.n	dfd2 <_dtoa_r+0x952>
    e00e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    e010:	f8dd a01c 	ldr.w	sl, [sp, #28]
    e014:	4637      	mov	r7, r6
    e016:	e59b      	b.n	db50 <_dtoa_r+0x4d0>
    e018:	9b08      	ldr	r3, [sp, #32]
    e01a:	f8dd 9004 	ldr.w	r9, [sp, #4]
    e01e:	2b00      	cmp	r3, #0
    e020:	f000 80fd 	beq.w	e21e <_dtoa_r+0xb9e>
    e024:	2d00      	cmp	r5, #0
    e026:	dd05      	ble.n	e034 <_dtoa_r+0x9b4>
    e028:	4639      	mov	r1, r7
    e02a:	462a      	mov	r2, r5
    e02c:	4620      	mov	r0, r4
    e02e:	f014 ffab 	bl	22f88 <__lshift>
    e032:	4607      	mov	r7, r0
    e034:	9b06      	ldr	r3, [sp, #24]
    e036:	2b00      	cmp	r3, #0
    e038:	d05c      	beq.n	e0f4 <_dtoa_r+0xa74>
    e03a:	6879      	ldr	r1, [r7, #4]
    e03c:	4620      	mov	r0, r4
    e03e:	f014 fde1 	bl	22c04 <_Balloc>
    e042:	4605      	mov	r5, r0
    e044:	b928      	cbnz	r0, e052 <_dtoa_r+0x9d2>
    e046:	4b80      	ldr	r3, [pc, #512]	; (e248 <_dtoa_r+0xbc8>)
    e048:	4602      	mov	r2, r0
    e04a:	f240 21ea 	movw	r1, #746	; 0x2ea
    e04e:	f7ff bb30 	b.w	d6b2 <_dtoa_r+0x32>
    e052:	693a      	ldr	r2, [r7, #16]
    e054:	f107 010c 	add.w	r1, r7, #12
    e058:	300c      	adds	r0, #12
    e05a:	3202      	adds	r2, #2
    e05c:	0092      	lsls	r2, r2, #2
    e05e:	f01b fa08 	bl	29472 <memcpy>
    e062:	2201      	movs	r2, #1
    e064:	4629      	mov	r1, r5
    e066:	4620      	mov	r0, r4
    e068:	f014 ff8e 	bl	22f88 <__lshift>
    e06c:	9b00      	ldr	r3, [sp, #0]
    e06e:	46b8      	mov	r8, r7
    e070:	4607      	mov	r7, r0
    e072:	3301      	adds	r3, #1
    e074:	9301      	str	r3, [sp, #4]
    e076:	9b00      	ldr	r3, [sp, #0]
    e078:	444b      	add	r3, r9
    e07a:	9307      	str	r3, [sp, #28]
    e07c:	9b02      	ldr	r3, [sp, #8]
    e07e:	f003 0301 	and.w	r3, r3, #1
    e082:	9306      	str	r3, [sp, #24]
    e084:	9b01      	ldr	r3, [sp, #4]
    e086:	4631      	mov	r1, r6
    e088:	4658      	mov	r0, fp
    e08a:	3b01      	subs	r3, #1
    e08c:	9302      	str	r3, [sp, #8]
    e08e:	f01b fca3 	bl	299d8 <quorem>
    e092:	4603      	mov	r3, r0
    e094:	4641      	mov	r1, r8
    e096:	9004      	str	r0, [sp, #16]
    e098:	4658      	mov	r0, fp
    e09a:	3330      	adds	r3, #48	; 0x30
    e09c:	9308      	str	r3, [sp, #32]
    e09e:	f01b fdf1 	bl	29c84 <__mcmp>
    e0a2:	463a      	mov	r2, r7
    e0a4:	4681      	mov	r9, r0
    e0a6:	4631      	mov	r1, r6
    e0a8:	4620      	mov	r0, r4
    e0aa:	f014 ffd9 	bl	23060 <__mdiff>
    e0ae:	68c2      	ldr	r2, [r0, #12]
    e0b0:	4605      	mov	r5, r0
    e0b2:	9b08      	ldr	r3, [sp, #32]
    e0b4:	bb02      	cbnz	r2, e0f8 <_dtoa_r+0xa78>
    e0b6:	4601      	mov	r1, r0
    e0b8:	4658      	mov	r0, fp
    e0ba:	f01b fde3 	bl	29c84 <__mcmp>
    e0be:	9b08      	ldr	r3, [sp, #32]
    e0c0:	4602      	mov	r2, r0
    e0c2:	4629      	mov	r1, r5
    e0c4:	4620      	mov	r0, r4
    e0c6:	e9cd 3208 	strd	r3, r2, [sp, #32]
    e0ca:	f014 fddb 	bl	22c84 <_Bfree>
    e0ce:	9b05      	ldr	r3, [sp, #20]
    e0d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e0d2:	9d01      	ldr	r5, [sp, #4]
    e0d4:	ea43 0102 	orr.w	r1, r3, r2
    e0d8:	9b06      	ldr	r3, [sp, #24]
    e0da:	430b      	orrs	r3, r1
    e0dc:	9b08      	ldr	r3, [sp, #32]
    e0de:	d10d      	bne.n	e0fc <_dtoa_r+0xa7c>
    e0e0:	2b39      	cmp	r3, #57	; 0x39
    e0e2:	d029      	beq.n	e138 <_dtoa_r+0xab8>
    e0e4:	f1b9 0f00 	cmp.w	r9, #0
    e0e8:	dd01      	ble.n	e0ee <_dtoa_r+0xa6e>
    e0ea:	9b04      	ldr	r3, [sp, #16]
    e0ec:	3331      	adds	r3, #49	; 0x31
    e0ee:	9a02      	ldr	r2, [sp, #8]
    e0f0:	7013      	strb	r3, [r2, #0]
    e0f2:	e774      	b.n	dfde <_dtoa_r+0x95e>
    e0f4:	4638      	mov	r0, r7
    e0f6:	e7b9      	b.n	e06c <_dtoa_r+0x9ec>
    e0f8:	2201      	movs	r2, #1
    e0fa:	e7e2      	b.n	e0c2 <_dtoa_r+0xa42>
    e0fc:	f1b9 0f00 	cmp.w	r9, #0
    e100:	db06      	blt.n	e110 <_dtoa_r+0xa90>
    e102:	9905      	ldr	r1, [sp, #20]
    e104:	ea41 0909 	orr.w	r9, r1, r9
    e108:	9906      	ldr	r1, [sp, #24]
    e10a:	ea59 0101 	orrs.w	r1, r9, r1
    e10e:	d120      	bne.n	e152 <_dtoa_r+0xad2>
    e110:	2a00      	cmp	r2, #0
    e112:	ddec      	ble.n	e0ee <_dtoa_r+0xa6e>
    e114:	4659      	mov	r1, fp
    e116:	2201      	movs	r2, #1
    e118:	4620      	mov	r0, r4
    e11a:	9301      	str	r3, [sp, #4]
    e11c:	f014 ff34 	bl	22f88 <__lshift>
    e120:	4631      	mov	r1, r6
    e122:	4683      	mov	fp, r0
    e124:	f01b fdae 	bl	29c84 <__mcmp>
    e128:	2800      	cmp	r0, #0
    e12a:	9b01      	ldr	r3, [sp, #4]
    e12c:	dc02      	bgt.n	e134 <_dtoa_r+0xab4>
    e12e:	d1de      	bne.n	e0ee <_dtoa_r+0xa6e>
    e130:	07da      	lsls	r2, r3, #31
    e132:	d5dc      	bpl.n	e0ee <_dtoa_r+0xa6e>
    e134:	2b39      	cmp	r3, #57	; 0x39
    e136:	d1d8      	bne.n	e0ea <_dtoa_r+0xa6a>
    e138:	2339      	movs	r3, #57	; 0x39
    e13a:	9a02      	ldr	r2, [sp, #8]
    e13c:	7013      	strb	r3, [r2, #0]
    e13e:	462b      	mov	r3, r5
    e140:	461d      	mov	r5, r3
    e142:	3b01      	subs	r3, #1
    e144:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    e148:	2a39      	cmp	r2, #57	; 0x39
    e14a:	d050      	beq.n	e1ee <_dtoa_r+0xb6e>
    e14c:	3201      	adds	r2, #1
    e14e:	701a      	strb	r2, [r3, #0]
    e150:	e745      	b.n	dfde <_dtoa_r+0x95e>
    e152:	2a00      	cmp	r2, #0
    e154:	dd03      	ble.n	e15e <_dtoa_r+0xade>
    e156:	2b39      	cmp	r3, #57	; 0x39
    e158:	d0ee      	beq.n	e138 <_dtoa_r+0xab8>
    e15a:	3301      	adds	r3, #1
    e15c:	e7c7      	b.n	e0ee <_dtoa_r+0xa6e>
    e15e:	9a01      	ldr	r2, [sp, #4]
    e160:	9907      	ldr	r1, [sp, #28]
    e162:	f802 3c01 	strb.w	r3, [r2, #-1]
    e166:	428a      	cmp	r2, r1
    e168:	d02a      	beq.n	e1c0 <_dtoa_r+0xb40>
    e16a:	4659      	mov	r1, fp
    e16c:	2300      	movs	r3, #0
    e16e:	220a      	movs	r2, #10
    e170:	4620      	mov	r0, r4
    e172:	f014 fda9 	bl	22cc8 <__multadd>
    e176:	45b8      	cmp	r8, r7
    e178:	4683      	mov	fp, r0
    e17a:	f04f 0300 	mov.w	r3, #0
    e17e:	f04f 020a 	mov.w	r2, #10
    e182:	4641      	mov	r1, r8
    e184:	4620      	mov	r0, r4
    e186:	d107      	bne.n	e198 <_dtoa_r+0xb18>
    e188:	f014 fd9e 	bl	22cc8 <__multadd>
    e18c:	4680      	mov	r8, r0
    e18e:	4607      	mov	r7, r0
    e190:	9b01      	ldr	r3, [sp, #4]
    e192:	3301      	adds	r3, #1
    e194:	9301      	str	r3, [sp, #4]
    e196:	e775      	b.n	e084 <_dtoa_r+0xa04>
    e198:	f014 fd96 	bl	22cc8 <__multadd>
    e19c:	4639      	mov	r1, r7
    e19e:	4680      	mov	r8, r0
    e1a0:	2300      	movs	r3, #0
    e1a2:	220a      	movs	r2, #10
    e1a4:	4620      	mov	r0, r4
    e1a6:	f014 fd8f 	bl	22cc8 <__multadd>
    e1aa:	4607      	mov	r7, r0
    e1ac:	e7f0      	b.n	e190 <_dtoa_r+0xb10>
    e1ae:	f1b9 0f00 	cmp.w	r9, #0
    e1b2:	9a00      	ldr	r2, [sp, #0]
    e1b4:	f04f 0800 	mov.w	r8, #0
    e1b8:	bfcc      	ite	gt
    e1ba:	464d      	movgt	r5, r9
    e1bc:	2501      	movle	r5, #1
    e1be:	4415      	add	r5, r2
    e1c0:	4659      	mov	r1, fp
    e1c2:	2201      	movs	r2, #1
    e1c4:	4620      	mov	r0, r4
    e1c6:	9301      	str	r3, [sp, #4]
    e1c8:	f014 fede 	bl	22f88 <__lshift>
    e1cc:	4631      	mov	r1, r6
    e1ce:	4683      	mov	fp, r0
    e1d0:	f01b fd58 	bl	29c84 <__mcmp>
    e1d4:	2800      	cmp	r0, #0
    e1d6:	dcb2      	bgt.n	e13e <_dtoa_r+0xabe>
    e1d8:	d102      	bne.n	e1e0 <_dtoa_r+0xb60>
    e1da:	9b01      	ldr	r3, [sp, #4]
    e1dc:	07db      	lsls	r3, r3, #31
    e1de:	d4ae      	bmi.n	e13e <_dtoa_r+0xabe>
    e1e0:	462b      	mov	r3, r5
    e1e2:	461d      	mov	r5, r3
    e1e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    e1e8:	2a30      	cmp	r2, #48	; 0x30
    e1ea:	d0fa      	beq.n	e1e2 <_dtoa_r+0xb62>
    e1ec:	e6f7      	b.n	dfde <_dtoa_r+0x95e>
    e1ee:	9a00      	ldr	r2, [sp, #0]
    e1f0:	429a      	cmp	r2, r3
    e1f2:	d1a5      	bne.n	e140 <_dtoa_r+0xac0>
    e1f4:	f10a 0a01 	add.w	sl, sl, #1
    e1f8:	2331      	movs	r3, #49	; 0x31
    e1fa:	e779      	b.n	e0f0 <_dtoa_r+0xa70>
    e1fc:	4b13      	ldr	r3, [pc, #76]	; (e24c <_dtoa_r+0xbcc>)
    e1fe:	f7ff bab2 	b.w	d766 <_dtoa_r+0xe6>
    e202:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e204:	2b00      	cmp	r3, #0
    e206:	f47f aa89 	bne.w	d71c <_dtoa_r+0x9c>
    e20a:	4b11      	ldr	r3, [pc, #68]	; (e250 <_dtoa_r+0xbd0>)
    e20c:	f7ff baab 	b.w	d766 <_dtoa_r+0xe6>
    e210:	f1b9 0f00 	cmp.w	r9, #0
    e214:	dc03      	bgt.n	e21e <_dtoa_r+0xb9e>
    e216:	9b05      	ldr	r3, [sp, #20]
    e218:	2b02      	cmp	r3, #2
    e21a:	f73f aec9 	bgt.w	dfb0 <_dtoa_r+0x930>
    e21e:	9d00      	ldr	r5, [sp, #0]
    e220:	4631      	mov	r1, r6
    e222:	4658      	mov	r0, fp
    e224:	f01b fbd8 	bl	299d8 <quorem>
    e228:	9a00      	ldr	r2, [sp, #0]
    e22a:	f100 0330 	add.w	r3, r0, #48	; 0x30
    e22e:	f805 3b01 	strb.w	r3, [r5], #1
    e232:	1aaa      	subs	r2, r5, r2
    e234:	4591      	cmp	r9, r2
    e236:	ddba      	ble.n	e1ae <_dtoa_r+0xb2e>
    e238:	4659      	mov	r1, fp
    e23a:	2300      	movs	r3, #0
    e23c:	220a      	movs	r2, #10
    e23e:	4620      	mov	r0, r4
    e240:	f014 fd42 	bl	22cc8 <__multadd>
    e244:	4683      	mov	fp, r0
    e246:	e7eb      	b.n	e220 <_dtoa_r+0xba0>
    e248:	0002d3c5 	.word	0x0002d3c5
    e24c:	0002c95d 	.word	0x0002c95d
    e250:	0002d33c 	.word	0x0002d33c

0000e254 <gps_handler>:
		}
	}
}

static void gps_handler(struct device *dev, struct gps_event *evt)
{
    e254:	b538      	push	{r3, r4, r5, lr}
    e256:	460d      	mov	r5, r1
	return z_impl_k_uptime_ticks();
    e258:	f01a ffb6 	bl	291c8 <z_impl_k_uptime_ticks>
	gps_last_active_time = k_uptime_get();
	switch (evt->type) {
    e25c:	782b      	ldrb	r3, [r5, #0]
    e25e:	2b0a      	cmp	r3, #10
    e260:	d87f      	bhi.n	e362 <gps_handler+0x10e>
    e262:	e8df f003 	tbb	[pc, r3]
    e266:	1506      	.short	0x1506
    e268:	7e387e21 	.word	0x7e387e21
    e26c:	7e70695d 	.word	0x7e70695d
    e270:	77          	.byte	0x77
    e271:	00          	.byte	0x00
    e272:	4b3c      	ldr	r3, [pc, #240]	; (e364 <gps_handler+0x110>)
    e274:	483c      	ldr	r0, [pc, #240]	; (e368 <gps_handler+0x114>)
	case GPS_EVT_SEARCH_STARTED:
		LOG_INF("GPS_EVT_SEARCH_STARTED");
    e276:	493d      	ldr	r1, [pc, #244]	; (e36c <gps_handler+0x118>)
    e278:	1ac0      	subs	r0, r0, r3
    e27a:	08c0      	lsrs	r0, r0, #3
    e27c:	0180      	lsls	r0, r0, #6
    e27e:	f040 0003 	orr.w	r0, r0, #3
    e282:	f016 f93d 	bl	24500 <log_string_sync>
		gps_control_set_active(true);
    e286:	2001      	movs	r0, #1
		LOG_INF("GPS_EVT_ERROR\n");
		break;
	default:
		break;
	}
}
    e288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gps_control_set_active(false);
    e28c:	f000 bdd0 	b.w	ee30 <gps_control_set_active>
    e290:	4b34      	ldr	r3, [pc, #208]	; (e364 <gps_handler+0x110>)
    e292:	4835      	ldr	r0, [pc, #212]	; (e368 <gps_handler+0x114>)
		LOG_INF("GPS_EVT_SEARCH_STOPPED");
    e294:	4936      	ldr	r1, [pc, #216]	; (e370 <gps_handler+0x11c>)
    e296:	1ac0      	subs	r0, r0, r3
    e298:	08c0      	lsrs	r0, r0, #3
    e29a:	0180      	lsls	r0, r0, #6
    e29c:	f040 0003 	orr.w	r0, r0, #3
    e2a0:	f016 f92e 	bl	24500 <log_string_sync>
		gps_control_set_active(false);
    e2a4:	2000      	movs	r0, #0
    e2a6:	e7ef      	b.n	e288 <gps_handler+0x34>
    e2a8:	4b2e      	ldr	r3, [pc, #184]	; (e364 <gps_handler+0x110>)
    e2aa:	4c2f      	ldr	r4, [pc, #188]	; (e368 <gps_handler+0x114>)
		LOG_INF("GPS_EVT_SEARCH_TIMEOUT");
    e2ac:	4931      	ldr	r1, [pc, #196]	; (e374 <gps_handler+0x120>)
    e2ae:	1ae4      	subs	r4, r4, r3
    e2b0:	08e4      	lsrs	r4, r4, #3
    e2b2:	01a4      	lsls	r4, r4, #6
    e2b4:	f044 0403 	orr.w	r4, r4, #3
    e2b8:	4620      	mov	r0, r4
    e2ba:	f016 f921 	bl	24500 <log_string_sync>
		gps_control_set_active(false);
    e2be:	2000      	movs	r0, #0
    e2c0:	f000 fdb6 	bl	ee30 <gps_control_set_active>
		LOG_INF("GPS will be attempted again in %d seconds",
    e2c4:	f000 fec0 	bl	f048 <gps_control_get_gps_reporting_interval>
    e2c8:	492b      	ldr	r1, [pc, #172]	; (e378 <gps_handler+0x124>)
    e2ca:	4602      	mov	r2, r0
    e2cc:	4620      	mov	r0, r4
}
    e2ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_INF("GPS will be attempted again in %d seconds",
    e2d2:	f016 b915 	b.w	24500 <log_string_sync>
    e2d6:	4b23      	ldr	r3, [pc, #140]	; (e364 <gps_handler+0x110>)
    e2d8:	4c23      	ldr	r4, [pc, #140]	; (e368 <gps_handler+0x114>)
		LOG_INF("GPS_EVT_PVT_FIX");
    e2da:	4928      	ldr	r1, [pc, #160]	; (e37c <gps_handler+0x128>)
    e2dc:	1ae4      	subs	r4, r4, r3
    e2de:	08e4      	lsrs	r4, r4, #3
    e2e0:	01a4      	lsls	r4, r4, #6
    e2e2:	f044 0403 	orr.w	r4, r4, #3
    e2e6:	4620      	mov	r0, r4
    e2e8:	f016 f90a 	bl	24500 <log_string_sync>
		gps_last_update_time = get_ts();
    e2ec:	f001 f948 	bl	f580 <get_ts>
    e2f0:	4b23      	ldr	r3, [pc, #140]	; (e380 <gps_handler+0x12c>)
		update_position_data(evt->pvt.latitude, evt->pvt.longitude);
    e2f2:	ed95 1b04 	vldr	d1, [r5, #16]
    e2f6:	ed95 0b02 	vldr	d0, [r5, #8]
		gps_last_update_time = get_ts();
    e2fa:	e9c3 0100 	strd	r0, r1, [r3]
		update_position_data(evt->pvt.latitude, evt->pvt.longitude);
    e2fe:	f000 fa69 	bl	e7d4 <update_position_data>
		gps_control_set_active(false);
    e302:	2000      	movs	r0, #0
    e304:	f000 fd94 	bl	ee30 <gps_control_set_active>
		LOG_INF("GPS will be started in %d seconds",
    e308:	f000 fe9e 	bl	f048 <gps_control_get_gps_reporting_interval>
    e30c:	491d      	ldr	r1, [pc, #116]	; (e384 <gps_handler+0x130>)
    e30e:	4602      	mov	r2, r0
    e310:	4620      	mov	r0, r4
    e312:	f016 f8f5 	bl	24500 <log_string_sync>
}
    e316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gps_control_stop(0);
    e31a:	2000      	movs	r0, #0
    e31c:	f000 be76 	b.w	f00c <gps_control_stop>
    e320:	4811      	ldr	r0, [pc, #68]	; (e368 <gps_handler+0x114>)
    e322:	4b10      	ldr	r3, [pc, #64]	; (e364 <gps_handler+0x110>)
		LOG_INF("Position fix with NMEA data");
    e324:	4918      	ldr	r1, [pc, #96]	; (e388 <gps_handler+0x134>)
    e326:	1ac0      	subs	r0, r0, r3
    e328:	08c0      	lsrs	r0, r0, #3
    e32a:	0180      	lsls	r0, r0, #6
		LOG_INF("GPS_EVT_ERROR\n");
    e32c:	f040 0003 	orr.w	r0, r0, #3
}
    e330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_INF("GPS_EVT_ERROR\n");
    e334:	f016 b8e4 	b.w	24500 <log_string_sync>
    e338:	480b      	ldr	r0, [pc, #44]	; (e368 <gps_handler+0x114>)
    e33a:	4b0a      	ldr	r3, [pc, #40]	; (e364 <gps_handler+0x110>)
		LOG_INF("GPS_EVT_OPERATION_BLOCKED");
    e33c:	4913      	ldr	r1, [pc, #76]	; (e38c <gps_handler+0x138>)
    e33e:	1ac0      	subs	r0, r0, r3
    e340:	08c0      	lsrs	r0, r0, #3
    e342:	0180      	lsls	r0, r0, #6
    e344:	e7f2      	b.n	e32c <gps_handler+0xd8>
    e346:	4808      	ldr	r0, [pc, #32]	; (e368 <gps_handler+0x114>)
    e348:	4b06      	ldr	r3, [pc, #24]	; (e364 <gps_handler+0x110>)
		LOG_INF("GPS_EVT_OPERATION_UNBLOCKED");
    e34a:	4911      	ldr	r1, [pc, #68]	; (e390 <gps_handler+0x13c>)
    e34c:	1ac0      	subs	r0, r0, r3
    e34e:	08c0      	lsrs	r0, r0, #3
    e350:	0180      	lsls	r0, r0, #6
    e352:	e7eb      	b.n	e32c <gps_handler+0xd8>
    e354:	4804      	ldr	r0, [pc, #16]	; (e368 <gps_handler+0x114>)
    e356:	4b03      	ldr	r3, [pc, #12]	; (e364 <gps_handler+0x110>)
		LOG_INF("GPS_EVT_ERROR\n");
    e358:	490e      	ldr	r1, [pc, #56]	; (e394 <gps_handler+0x140>)
    e35a:	1ac0      	subs	r0, r0, r3
    e35c:	08c0      	lsrs	r0, r0, #3
    e35e:	0180      	lsls	r0, r0, #6
    e360:	e7e4      	b.n	e32c <gps_handler+0xd8>
}
    e362:	bd38      	pop	{r3, r4, r5, pc}
    e364:	0002a2c4 	.word	0x0002a2c4
    e368:	0002a354 	.word	0x0002a354
    e36c:	0002adac 	.word	0x0002adac
    e370:	0002adc3 	.word	0x0002adc3
    e374:	0002adda 	.word	0x0002adda
    e378:	0002adf1 	.word	0x0002adf1
    e37c:	0002ae1b 	.word	0x0002ae1b
    e380:	20020a20 	.word	0x20020a20
    e384:	0002ae2b 	.word	0x0002ae2b
    e388:	0002ae4d 	.word	0x0002ae4d
    e38c:	0002ae69 	.word	0x0002ae69
    e390:	0002ae83 	.word	0x0002ae83
    e394:	0002ae9f 	.word	0x0002ae9f

0000e398 <modem_rsrp_handler>:
{
	/* RSRP raw values that represent actual signal strength are
	 * 0 through 97 (per "nRF91 AT Commands" v1.1). If the received value
	 * falls outside this range, we should not send the value.
	 */
	if (rsrp_value > 97) {
    e398:	2861      	cmp	r0, #97	; 0x61
{
    e39a:	b510      	push	{r4, lr}
	if (rsrp_value > 97) {
    e39c:	d814      	bhi.n	e3c8 <modem_rsrp_handler+0x30>
		return;
	}

	rsrp.value = rsrp_value;
    e39e:	4b0b      	ldr	r3, [pc, #44]	; (e3cc <modem_rsrp_handler+0x34>)
    e3a0:	8018      	strh	r0, [r3, #0]
 *
 * @return Remaining time (in milliseconds).
 */
static inline s32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
    e3a2:	480b      	ldr	r0, [pc, #44]	; (e3d0 <modem_rsrp_handler+0x38>)
    e3a4:	f01a fed1 	bl	2914a <z_timeout_remaining>
    e3a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    e3ac:	fba0 0103 	umull	r0, r1, r0, r3
    e3b0:	0bc3      	lsrs	r3, r0, #15

	/* Only send the RSRP if transmission is not already scheduled.
	 * Checking CONFIG_HOLD_TIME_RSRP gives the compiler a shortcut.
	 */
	if (CONFIG_HOLD_TIME_RSRP == 0 ||
    e3b2:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
    e3b6:	d107      	bne.n	e3c8 <modem_rsrp_handler+0x30>
	    k_delayed_work_remaining_get(&rsrp_work) == 0) {
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
					       K_NO_WAIT);
	}
}
    e3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
    e3bc:	2200      	movs	r2, #0
    e3be:	2300      	movs	r3, #0
    e3c0:	4904      	ldr	r1, [pc, #16]	; (e3d4 <modem_rsrp_handler+0x3c>)
    e3c2:	4805      	ldr	r0, [pc, #20]	; (e3d8 <modem_rsrp_handler+0x40>)
    e3c4:	f012 baee 	b.w	209a4 <k_delayed_work_submit_to_queue>
}
    e3c8:	bd10      	pop	{r4, pc}
    e3ca:	bf00      	nop
    e3cc:	200207ac 	.word	0x200207ac
    e3d0:	2002246c 	.word	0x2002246c
    e3d4:	20022460 	.word	0x20022460
    e3d8:	20022388 	.word	0x20022388

0000e3dc <modem_rsrp_data_print>:

/**@brief Publish RSRP data to the cloud. */
static void modem_rsrp_data_print(struct k_work *work)
{
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
    e3dc:	2100      	movs	r1, #0
{
    e3de:	b530      	push	{r4, r5, lr}
    e3e0:	b0a1      	sub	sp, #132	; 0x84
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
    e3e2:	227c      	movs	r2, #124	; 0x7c
    e3e4:	a801      	add	r0, sp, #4
    e3e6:	9100      	str	r1, [sp, #0]
    e3e8:	f01b f87d 	bl	294e6 <memset>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e3ec:	4b13      	ldr	r3, [pc, #76]	; (e43c <modem_rsrp_data_print+0x60>)
    e3ee:	e8d3 3faf 	lda	r3, [r3]
	static s32_t rsrp_prev; /* RSRP value last sent to cloud */
	s32_t rsrp_current;
	size_t len;

	if (atomic_get(&http_post_active) == 0){
    e3f2:	bb03      	cbnz	r3, e436 <modem_rsrp_data_print+0x5a>
		/* The RSRP value is copied locally to avoid any race */
		rsrp_current = rsrp.value - rsrp.offset;
    e3f4:	4b12      	ldr	r3, [pc, #72]	; (e440 <modem_rsrp_data_print+0x64>)

		if (rsrp_current == rsrp_prev) {
    e3f6:	4d13      	ldr	r5, [pc, #76]	; (e444 <modem_rsrp_data_print+0x68>)
		rsrp_current = rsrp.value - rsrp.offset;
    e3f8:	881c      	ldrh	r4, [r3, #0]
    e3fa:	885b      	ldrh	r3, [r3, #2]
    e3fc:	1ae4      	subs	r4, r4, r3
		if (rsrp_current == rsrp_prev) {
    e3fe:	682b      	ldr	r3, [r5, #0]
    e400:	42a3      	cmp	r3, r4
    e402:	d018      	beq.n	e436 <modem_rsrp_data_print+0x5a>
			return;
		}

		len = snprintf(buf, CONFIG_MODEM_INFO_BUFFER_SIZE,
    e404:	4623      	mov	r3, r4
    e406:	2180      	movs	r1, #128	; 0x80
    e408:	4a0f      	ldr	r2, [pc, #60]	; (e448 <modem_rsrp_data_print+0x6c>)
    e40a:	4668      	mov	r0, sp
    e40c:	f013 fcc0 	bl	21d90 <sniprintf>
    e410:	4b0e      	ldr	r3, [pc, #56]	; (e44c <modem_rsrp_data_print+0x70>)
    e412:	480f      	ldr	r0, [pc, #60]	; (e450 <modem_rsrp_data_print+0x74>)
				"%d", rsrp_current);

		LOG_INF("RSRP: %d", rsrp_current);
    e414:	4622      	mov	r2, r4
    e416:	1ac0      	subs	r0, r0, r3
    e418:	08c0      	lsrs	r0, r0, #3
    e41a:	0180      	lsls	r0, r0, #6
    e41c:	490d      	ldr	r1, [pc, #52]	; (e454 <modem_rsrp_data_print+0x78>)
    e41e:	f040 0003 	orr.w	r0, r0, #3
    e422:	f016 f86d 	bl	24500 <log_string_sync>

		rsrp_prev = rsrp_current;

		if (CONFIG_HOLD_TIME_RSRP > 0) {
			k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
    e426:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    e42a:	2300      	movs	r3, #0
    e42c:	490a      	ldr	r1, [pc, #40]	; (e458 <modem_rsrp_data_print+0x7c>)
    e42e:	480b      	ldr	r0, [pc, #44]	; (e45c <modem_rsrp_data_print+0x80>)
		rsrp_prev = rsrp_current;
    e430:	602c      	str	r4, [r5, #0]
			k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
    e432:	f012 fab7 	bl	209a4 <k_delayed_work_submit_to_queue>
							K_SECONDS(CONFIG_HOLD_TIME_RSRP));
		}
	}

	
}
    e436:	b021      	add	sp, #132	; 0x84
    e438:	bd30      	pop	{r4, r5, pc}
    e43a:	bf00      	nop
    e43c:	20022458 	.word	0x20022458
    e440:	200207ac 	.word	0x200207ac
    e444:	2002245c 	.word	0x2002245c
    e448:	0002cb65 	.word	0x0002cb65
    e44c:	0002a2c4 	.word	0x0002a2c4
    e450:	0002a354 	.word	0x0002a354
    e454:	0002aeae 	.word	0x0002aeae
    e458:	20022460 	.word	0x20022460
    e45c:	20022388 	.word	0x20022388

0000e460 <error_handler>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e460:	2200      	movs	r2, #0
{
    e462:	b538      	push	{r3, r4, r5, lr}
    e464:	4b14      	ldr	r3, [pc, #80]	; (e4b8 <error_handler+0x58>)
    e466:	e8d3 1fef 	ldaex	r1, [r3]
    e46a:	e8c3 2fe4 	stlex	r4, r2, [r3]
    e46e:	2c00      	cmp	r4, #0
    e470:	d1f9      	bne.n	e466 <error_handler+0x6>
	if (err_type == ERROR_CLOUD) {
    e472:	b9c8      	cbnz	r0, e4a8 <error_handler+0x48>
    e474:	4b11      	ldr	r3, [pc, #68]	; (e4bc <error_handler+0x5c>)
    e476:	4c12      	ldr	r4, [pc, #72]	; (e4c0 <error_handler+0x60>)
	LOG_ERR("LTE link disconnect");
    e478:	4912      	ldr	r1, [pc, #72]	; (e4c4 <error_handler+0x64>)
    e47a:	1ae4      	subs	r4, r4, r3
    e47c:	08e4      	lsrs	r4, r4, #3
    e47e:	01a4      	lsls	r4, r4, #6
    e480:	f044 0501 	orr.w	r5, r4, #1
    e484:	4628      	mov	r0, r5
    e486:	f016 f83b 	bl	24500 <log_string_sync>
	int err = lte_lc_power_off();
    e48a:	f008 f80d 	bl	164a8 <lte_lc_power_off>
	if (err) {
    e48e:	4602      	mov	r2, r0
    e490:	b118      	cbz	r0, e49a <error_handler+0x3a>
		LOG_ERR("lte_lc_power_off failed: %d", err);
    e492:	4628      	mov	r0, r5
    e494:	490c      	ldr	r1, [pc, #48]	; (e4c8 <error_handler+0x68>)
    e496:	f016 f833 	bl	24500 <log_string_sync>
	LOG_ERR("Shutdown modem");
    e49a:	490c      	ldr	r1, [pc, #48]	; (e4cc <error_handler+0x6c>)
    e49c:	f044 0001 	orr.w	r0, r4, #1
    e4a0:	f016 f82e 	bl	24500 <log_string_sync>
	bsdlib_shutdown();
    e4a4:	f019 fe41 	bl	2812a <bsdlib_shutdown>
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    e4a8:	f001 fd24 	bl	fef4 <z_impl_log_panic>
}
    e4ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_reboot(0);
    e4b0:	2000      	movs	r0, #0
    e4b2:	f002 b973 	b.w	1079c <sys_reboot>
    e4b6:	bf00      	nop
    e4b8:	20022458 	.word	0x20022458
    e4bc:	0002a2c4 	.word	0x0002a2c4
    e4c0:	0002a354 	.word	0x0002a354
    e4c4:	0002aeb7 	.word	0x0002aeb7
    e4c8:	0002aecb 	.word	0x0002aecb
    e4cc:	0002aee7 	.word	0x0002aee7

0000e4d0 <k_sys_fatal_error_handler>:
{
    e4d0:	b510      	push	{r4, lr}
    e4d2:	4604      	mov	r4, r0
    e4d4:	f001 fd0e 	bl	fef4 <z_impl_log_panic>
    e4d8:	4806      	ldr	r0, [pc, #24]	; (e4f4 <k_sys_fatal_error_handler+0x24>)
    e4da:	4b07      	ldr	r3, [pc, #28]	; (e4f8 <k_sys_fatal_error_handler+0x28>)
	LOG_ERR("Running main.c error handler");
    e4dc:	4907      	ldr	r1, [pc, #28]	; (e4fc <k_sys_fatal_error_handler+0x2c>)
    e4de:	1a1b      	subs	r3, r3, r0
    e4e0:	08db      	lsrs	r3, r3, #3
    e4e2:	019b      	lsls	r3, r3, #6
    e4e4:	f043 0001 	orr.w	r0, r3, #1
    e4e8:	f016 f80a 	bl	24500 <log_string_sync>
	error_handler(ERROR_SYSTEM_FAULT, reason);
    e4ec:	4621      	mov	r1, r4
    e4ee:	2003      	movs	r0, #3
    e4f0:	f7ff ffb6 	bl	e460 <error_handler>
	CODE_UNREACHABLE;
    e4f4:	0002a2c4 	.word	0x0002a2c4
    e4f8:	0002a354 	.word	0x0002a354
    e4fc:	0002aef6 	.word	0x0002aef6

0000e500 <mac_address_to_str>:
    memcpy(p_mac->mac, mac, sizeof(p_mac->mac));
}

mac_address_str_t
mac_address_to_str(const mac_address_bin_t *p_mac)
{
    e500:	b5f0      	push	{r4, r5, r6, r7, lr}
    e502:	b08d      	sub	sp, #52	; 0x34
    mac_address_str_t mac_str = { 0 };
    e504:	ad07      	add	r5, sp, #28
{
    e506:	4606      	mov	r6, r0
    e508:	460b      	mov	r3, r1
    e50a:	462c      	mov	r4, r5
    mac_address_str_t mac_str = { 0 };
    e50c:	4a16      	ldr	r2, [pc, #88]	; (e568 <mac_address_to_str+0x68>)
    e50e:	f102 0c10 	add.w	ip, r2, #16
    e512:	462f      	mov	r7, r5
    e514:	6810      	ldr	r0, [r2, #0]
    e516:	6851      	ldr	r1, [r2, #4]
    e518:	3208      	adds	r2, #8
    e51a:	c703      	stmia	r7!, {r0, r1}
    e51c:	4562      	cmp	r2, ip
    e51e:	463d      	mov	r5, r7
    e520:	d1f7      	bne.n	e512 <mac_address_to_str+0x12>
    e522:	8812      	ldrh	r2, [r2, #0]
    const uint8_t *   mac     = p_mac->mac;
    snprintf(
    e524:	2112      	movs	r1, #18
    mac_address_str_t mac_str = { 0 };
    e526:	803a      	strh	r2, [r7, #0]
    snprintf(
    e528:	795a      	ldrb	r2, [r3, #5]
    e52a:	4620      	mov	r0, r4
    e52c:	9204      	str	r2, [sp, #16]
    e52e:	791a      	ldrb	r2, [r3, #4]
        mac[1],
        mac[2],
        mac[3],
        mac[4],
        mac[5]);
    return mac_str;
    e530:	ad0b      	add	r5, sp, #44	; 0x2c
    snprintf(
    e532:	9203      	str	r2, [sp, #12]
    e534:	78da      	ldrb	r2, [r3, #3]
    e536:	9202      	str	r2, [sp, #8]
    e538:	789a      	ldrb	r2, [r3, #2]
    e53a:	9201      	str	r2, [sp, #4]
    e53c:	785a      	ldrb	r2, [r3, #1]
    e53e:	9200      	str	r2, [sp, #0]
    e540:	781b      	ldrb	r3, [r3, #0]
    e542:	4a0a      	ldr	r2, [pc, #40]	; (e56c <mac_address_to_str+0x6c>)
    e544:	f013 fc24 	bl	21d90 <sniprintf>
    return mac_str;
    e548:	4623      	mov	r3, r4
    e54a:	4632      	mov	r2, r6
    e54c:	461c      	mov	r4, r3
    e54e:	cc03      	ldmia	r4!, {r0, r1}
    e550:	42ac      	cmp	r4, r5
    e552:	6010      	str	r0, [r2, #0]
    e554:	6051      	str	r1, [r2, #4]
    e556:	4623      	mov	r3, r4
    e558:	f102 0208 	add.w	r2, r2, #8
    e55c:	d1f6      	bne.n	e54c <mac_address_to_str+0x4c>
}
    e55e:	4630      	mov	r0, r6
    return mac_str;
    e560:	8823      	ldrh	r3, [r4, #0]
    e562:	8013      	strh	r3, [r2, #0]
}
    e564:	b00d      	add	sp, #52	; 0x34
    e566:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e568:	0002a3fc 	.word	0x0002a3fc
    e56c:	0002af13 	.word	0x0002af13

0000e570 <main>:
{
    api_send_get_device_id(RE_CA_UART_GET_DEVICE_ID);
}

void main(void)
{
    e570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e574:	4b69      	ldr	r3, [pc, #420]	; (e71c <main+0x1ac>)
    e576:	4c6a      	ldr	r4, [pc, #424]	; (e720 <main+0x1b0>)
	LOG_INF("Ruuvi Node Started");
    e578:	496a      	ldr	r1, [pc, #424]	; (e724 <main+0x1b4>)
    e57a:	1ae4      	subs	r4, r4, r3
    e57c:	08e4      	lsrs	r4, r4, #3
    e57e:	01a4      	lsls	r4, r4, #6
    e580:	f044 0503 	orr.w	r5, r4, #3
    e584:	4628      	mov	r0, r5
    e586:	f015 ffbb 	bl	24500 <log_string_sync>
	LOG_INF("OS %s", CONFIG_KERNEL_BIN_NAME);
    e58a:	4a67      	ldr	r2, [pc, #412]	; (e728 <main+0x1b8>)
    e58c:	4967      	ldr	r1, [pc, #412]	; (e72c <main+0x1bc>)
    e58e:	4628      	mov	r0, r5
    e590:	f015 ffb6 	bl	24500 <log_string_sync>
	if(CONFIG_RUUVI_NODE_APP_VERSION){
		LOG_INF("Version: %s", log_strdup(CONFIG_RUUVI_NODE_APP_VERSION));
    e594:	4866      	ldr	r0, [pc, #408]	; (e730 <main+0x1c0>)
    e596:	f015 ffc5 	bl	24524 <log_strdup>
    e59a:	4966      	ldr	r1, [pc, #408]	; (e734 <main+0x1c4>)
    e59c:	4602      	mov	r2, r0
    e59e:	4628      	mov	r0, r5
    e5a0:	f015 ffae 	bl	24500 <log_string_sync>
	}


	//Used for GPS Work Handler
	k_work_q_start(&application_work_q, application_stack_area,
    e5a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e5a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e5ac:	4962      	ldr	r1, [pc, #392]	; (e738 <main+0x1c8>)
    e5ae:	4863      	ldr	r0, [pc, #396]	; (e73c <main+0x1cc>)
    e5b0:	f012 f9d0 	bl	20954 <k_work_q_start>
		       K_THREAD_STACK_SIZEOF(application_stack_area),
		       CONFIG_APPLICATION_WORKQUEUE_PRIORITY);
	if (IS_ENABLED(CONFIG_WATCHDOG)) {
		watchdog_init_and_start(&application_work_q);
    e5b4:	4861      	ldr	r0, [pc, #388]	; (e73c <main+0x1cc>)
    e5b6:	f001 f8cb 	bl	f750 <watchdog_init_and_start>
	k_delayed_work_init(&rsrp_work, modem_rsrp_data_print);
    e5ba:	4961      	ldr	r1, [pc, #388]	; (e740 <main+0x1d0>)
    e5bc:	4861      	ldr	r0, [pc, #388]	; (e744 <main+0x1d4>)
    e5be:	f01a fd91 	bl	290e4 <k_delayed_work_init>
	led_init();
    e5c2:	f000 fa2d 	bl	ea20 <led_init>
	led_0_on();
    e5c6:	f000 fa6d 	bl	eaa4 <led_0_on>
	led_1_on();
    e5ca:	f000 fa87 	bl	eadc <led_1_on>
	led_2_on();
    e5ce:	f000 faa1 	bl	eb14 <led_2_on>
	LOG_INF("Connected to LTE network.");
    e5d2:	4628      	mov	r0, r5
    e5d4:	495c      	ldr	r1, [pc, #368]	; (e748 <main+0x1d8>)
    e5d6:	f015 ff93 	bl	24500 <log_string_sync>
	led_2_off();
    e5da:	f000 faa9 	bl	eb30 <led_2_off>
	err = modem_info_init();
    e5de:	f008 fbd5 	bl	16d8c <modem_info_init>
	if (err) {
    e5e2:	4602      	mov	r2, r0
    e5e4:	2800      	cmp	r0, #0
    e5e6:	d055      	beq.n	e694 <main+0x124>
		LOG_ERR("Modem info could not be established: %d", err);
    e5e8:	4958      	ldr	r1, [pc, #352]	; (e74c <main+0x1dc>)
    e5ea:	f044 0001 	orr.w	r0, r4, #1
    e5ee:	f015 ff87 	bl	24500 <log_string_sync>
	update_imei_data();
    e5f2:	f000 f8fb 	bl	e7ec <update_imei_data>
	int err = modem_info_string_get(MODEM_INFO_FW_VERSION, modem_fw_buf, sizeof(modem_fw_buf));
    e5f6:	2212      	movs	r2, #18
    e5f8:	200d      	movs	r0, #13
    e5fa:	4955      	ldr	r1, [pc, #340]	; (e750 <main+0x1e0>)
    e5fc:	f008 fa88 	bl	16b10 <modem_info_string_get>
	if (err != MODEM_FW_LEN) {
    e600:	2811      	cmp	r0, #17
	int err = modem_info_string_get(MODEM_INFO_FW_VERSION, modem_fw_buf, sizeof(modem_fw_buf));
    e602:	4602      	mov	r2, r0
	if (err != MODEM_FW_LEN) {
    e604:	d004      	beq.n	e610 <main+0xa0>
		LOG_ERR("modem_info_string_get(MODEM FW), error: %d", err);
    e606:	4953      	ldr	r1, [pc, #332]	; (e754 <main+0x1e4>)
    e608:	f044 0001 	orr.w	r0, r4, #1
    e60c:	f015 ff78 	bl	24500 <log_string_sync>
	LOG_INF("Modem FW Version : %s", log_strdup(modem_fw_buf));
    e610:	484f      	ldr	r0, [pc, #316]	; (e750 <main+0x1e0>)
    e612:	f015 ff87 	bl	24524 <log_strdup>
    e616:	f044 0803 	orr.w	r8, r4, #3
    e61a:	4602      	mov	r2, r0
    e61c:	494e      	ldr	r1, [pc, #312]	; (e758 <main+0x1e8>)
    e61e:	4640      	mov	r0, r8
    e620:	f015 ff6e 	bl	24500 <log_string_sync>
	k_sleep(K_SECONDS(2));
    e624:	2100      	movs	r1, #0
    e626:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    e62a:	f015 fa25 	bl	23a78 <k_sleep>
	update_ts_modem();
    e62e:	f000 ffc5 	bl	f5bc <update_ts_modem>
	k_sleep(K_SECONDS(10));
    e632:	2100      	movs	r1, #0
    e634:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
    e638:	f015 fa1e 	bl	23a78 <k_sleep>
	err = gps_control_init(&application_work_q, gps_handler);
    e63c:	4947      	ldr	r1, [pc, #284]	; (e75c <main+0x1ec>)
    e63e:	483f      	ldr	r0, [pc, #252]	; (e73c <main+0x1cc>)
    e640:	f000 fd08 	bl	f054 <gps_control_init>
	if (err) {
    e644:	4d46      	ldr	r5, [pc, #280]	; (e760 <main+0x1f0>)
    e646:	b360      	cbz	r0, e6a2 <main+0x132>
		LOG_ERR("GPS could not be initialized");
    e648:	4946      	ldr	r1, [pc, #280]	; (e764 <main+0x1f4>)
    e64a:	f044 0001 	orr.w	r0, r4, #1
    e64e:	f015 ff57 	bl	24500 <log_string_sync>
	// Initilise the peripherals
	sensors_init();

	//ruuvi_send_nrf_get_id();

	online_post();
    e652:	f000 f973 	bl	e93c <online_post>

	gps_control_start(0);
    e656:	2000      	movs	r0, #0
    e658:	f000 fcba 	bl	efd0 <gps_control_start>
		flash_led(3, 50);
		if (gps_control_is_active()) {
			k_sleep(K_SECONDS(1));
		}
		else{
			if(((get_ts() - gps_last_update_time) /60) >= CONFIG_RUUVI_GPS_UPDATE_INT){
    e65c:	f240 7807 	movw	r8, #1799	; 0x707
    e660:	f04f 0900 	mov.w	r9, #0
				gps_control_start(0);
    e664:	f04f 0b00 	mov.w	fp, #0
			if(((get_ts() - gps_last_update_time) /60) >= CONFIG_RUUVI_GPS_UPDATE_INT){
    e668:	f8df a110 	ldr.w	sl, [pc, #272]	; e77c <main+0x20c>
		flash_led(3, 50);
    e66c:	2132      	movs	r1, #50	; 0x32
    e66e:	2003      	movs	r0, #3
    e670:	f000 faae 	bl	ebd0 <flash_led>
		if (gps_control_is_active()) {
    e674:	f000 fbd2 	bl	ee1c <gps_control_is_active>
    e678:	4604      	mov	r4, r0
    e67a:	b398      	cbz	r0, e6e4 <main+0x174>
				// Slight delay to allow gps control to become active
				k_sleep(K_SECONDS(1));
    e67c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
			}
			else{
				atomic_set(&http_post_active, 1);
				adv_post();
				k_sleep(K_SECONDS(30));
    e680:	2100      	movs	r1, #0
    e682:	f015 f9f9 	bl	23a78 <k_sleep>
    e686:	e8d5 3fef 	ldaex	r3, [r5]
    e68a:	e8c5 bfe2 	stlex	r2, fp, [r5]
    e68e:	2a00      	cmp	r2, #0
    e690:	d0ec      	beq.n	e66c <main+0xfc>
    e692:	e7f8      	b.n	e686 <main+0x116>
	modem_info_params_init(&modem_param);
    e694:	4834      	ldr	r0, [pc, #208]	; (e768 <main+0x1f8>)
    e696:	f008 fb7f 	bl	16d98 <modem_info_params_init>
	modem_info_rsrp_register(modem_rsrp_handler);
    e69a:	4834      	ldr	r0, [pc, #208]	; (e76c <main+0x1fc>)
    e69c:	f008 fb48 	bl	16d30 <modem_info_rsrp_register>
    e6a0:	e7a7      	b.n	e5f2 <main+0x82>
	bool changing = (enable != gps_control_is_enabled());
    e6a2:	f000 fbb1 	bl	ee08 <gps_control_is_enabled>
	if (changing) {
    e6a6:	b918      	cbnz	r0, e6b0 <main+0x140>
			LOG_INF("Starting GPS");
    e6a8:	4640      	mov	r0, r8
    e6aa:	4931      	ldr	r1, [pc, #196]	; (e770 <main+0x200>)
    e6ac:	f015 ff28 	bl	24500 <log_string_sync>
		led_0_off();
    e6b0:	f000 fa06 	bl	eac0 <led_0_off>
	err = uart_init();
    e6b4:	f000 fb88 	bl	edc8 <uart_init>
	if(err){
    e6b8:	b160      	cbz	r0, e6d4 <main+0x164>
		LOG_ERR("Error: Opening UART device");
    e6ba:	492e      	ldr	r1, [pc, #184]	; (e774 <main+0x204>)
    e6bc:	f044 0001 	orr.w	r0, r4, #1
    e6c0:	f015 ff1e 	bl	24500 <log_string_sync>
    e6c4:	2300      	movs	r3, #0
    e6c6:	e8d5 2fef 	ldaex	r2, [r5]
    e6ca:	e8c5 3fe1 	stlex	r1, r3, [r5]
    e6ce:	2900      	cmp	r1, #0
    e6d0:	d0bf      	beq.n	e652 <main+0xe2>
    e6d2:	e7f8      	b.n	e6c6 <main+0x156>
		LOG_INF("UART Init Sucessful");
    e6d4:	4928      	ldr	r1, [pc, #160]	; (e778 <main+0x208>)
    e6d6:	f044 0003 	orr.w	r0, r4, #3
    e6da:	f015 ff11 	bl	24500 <log_string_sync>
		led_1_off();
    e6de:	f000 fa0b 	bl	eaf8 <led_1_off>
    e6e2:	e7ef      	b.n	e6c4 <main+0x154>
			if(((get_ts() - gps_last_update_time) /60) >= CONFIG_RUUVI_GPS_UPDATE_INT){
    e6e4:	f000 ff4c 	bl	f580 <get_ts>
    e6e8:	e9da 3200 	ldrd	r3, r2, [sl]
    e6ec:	1ac6      	subs	r6, r0, r3
    e6ee:	eb61 0702 	sbc.w	r7, r1, r2
    e6f2:	45b0      	cmp	r8, r6
    e6f4:	eb79 0307 	sbcs.w	r3, r9, r7
    e6f8:	da03      	bge.n	e702 <main+0x192>
				gps_control_start(0);
    e6fa:	4620      	mov	r0, r4
    e6fc:	f000 fc68 	bl	efd0 <gps_control_start>
    e700:	e7bc      	b.n	e67c <main+0x10c>
    e702:	2301      	movs	r3, #1
    e704:	e8d5 2fef 	ldaex	r2, [r5]
    e708:	e8c5 3fe1 	stlex	r1, r3, [r5]
    e70c:	2900      	cmp	r1, #0
    e70e:	d1f9      	bne.n	e704 <main+0x194>
				adv_post();
    e710:	f000 f91c 	bl	e94c <adv_post>
				k_sleep(K_SECONDS(30));
    e714:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    e718:	e7b2      	b.n	e680 <main+0x110>
    e71a:	bf00      	nop
    e71c:	0002a2c4 	.word	0x0002a2c4
    e720:	0002a354 	.word	0x0002a354
    e724:	0002af31 	.word	0x0002af31
    e728:	0002af44 	.word	0x0002af44
    e72c:	0002af4b 	.word	0x0002af4b
    e730:	0002af51 	.word	0x0002af51
    e734:	0002af63 	.word	0x0002af63
    e738:	2002b108 	.word	0x2002b108
    e73c:	20022388 	.word	0x20022388
    e740:	0000e3dd 	.word	0x0000e3dd
    e744:	20022460 	.word	0x20022460
    e748:	0002af6f 	.word	0x0002af6f
    e74c:	0002af89 	.word	0x0002af89
    e750:	200281f2 	.word	0x200281f2
    e754:	0002afb1 	.word	0x0002afb1
    e758:	0002afdc 	.word	0x0002afdc
    e75c:	0000e255 	.word	0x0000e255
    e760:	20022458 	.word	0x20022458
    e764:	0002aff2 	.word	0x0002aff2
    e768:	20020a28 	.word	0x20020a28
    e76c:	0000e399 	.word	0x0000e399
    e770:	0002b00f 	.word	0x0002b00f
    e774:	0002b01c 	.word	0x0002b01c
    e778:	0002b037 	.word	0x0002b037
    e77c:	20020a20 	.word	0x20020a20

0000e780 <update_nrf_mac>:
K_MUTEX_DEFINE(adv_table_mux);

struct adv_report_table adv_reports;
struct adv_report_table adv_reports_buf;

void update_nrf_mac(mac_address_bin_t m){
    e780:	b500      	push	{lr}
    e782:	b089      	sub	sp, #36	; 0x24
    e784:	ab06      	add	r3, sp, #24
    e786:	e883 0003 	stmia.w	r3, {r0, r1}
    nrf_mac = mac_address_to_str(&m);
    e78a:	4619      	mov	r1, r3
    e78c:	4668      	mov	r0, sp
    e78e:	f7ff feb7 	bl	e500 <mac_address_to_str>
    e792:	466b      	mov	r3, sp
    e794:	4a0b      	ldr	r2, [pc, #44]	; (e7c4 <update_nrf_mac+0x44>)
    e796:	a904      	add	r1, sp, #16
    e798:	f853 0b04 	ldr.w	r0, [r3], #4
    e79c:	428b      	cmp	r3, r1
    e79e:	f842 0b04 	str.w	r0, [r2], #4
    e7a2:	d1f9      	bne.n	e798 <update_nrf_mac+0x18>
    e7a4:	881b      	ldrh	r3, [r3, #0]
    e7a6:	4808      	ldr	r0, [pc, #32]	; (e7c8 <update_nrf_mac+0x48>)
    e7a8:	8013      	strh	r3, [r2, #0]
    e7aa:	4b08      	ldr	r3, [pc, #32]	; (e7cc <update_nrf_mac+0x4c>)
    LOG_INF("NRF MAC: %s\n", nrf_mac.str_buf);
    e7ac:	4a05      	ldr	r2, [pc, #20]	; (e7c4 <update_nrf_mac+0x44>)
    e7ae:	1ac0      	subs	r0, r0, r3
    e7b0:	08c0      	lsrs	r0, r0, #3
    e7b2:	0180      	lsls	r0, r0, #6
    e7b4:	4906      	ldr	r1, [pc, #24]	; (e7d0 <update_nrf_mac+0x50>)
    e7b6:	f040 0003 	orr.w	r0, r0, #3
    e7ba:	f015 fea1 	bl	24500 <log_string_sync>
    return;
}
    e7be:	b009      	add	sp, #36	; 0x24
    e7c0:	f85d fb04 	ldr.w	pc, [sp], #4
    e7c4:	20028214 	.word	0x20028214
    e7c8:	0002a2c4 	.word	0x0002a2c4
    e7cc:	0002a2c4 	.word	0x0002a2c4
    e7d0:	0002b056 	.word	0x0002b056

0000e7d4 <update_position_data>:

void update_position_data(double latitude, double longitude){
    latT = latitude;
    e7d4:	4b03      	ldr	r3, [pc, #12]	; (e7e4 <update_position_data+0x10>)
    e7d6:	ed83 0b00 	vstr	d0, [r3]
    longT = longitude;
    e7da:	4b03      	ldr	r3, [pc, #12]	; (e7e8 <update_position_data+0x14>)
    e7dc:	ed83 1b00 	vstr	d1, [r3]
    return;
}
    e7e0:	4770      	bx	lr
    e7e2:	bf00      	nop
    e7e4:	20021a08 	.word	0x20021a08
    e7e8:	20021a10 	.word	0x20021a10

0000e7ec <update_imei_data>:

void update_imei_data(void){
    int err = modem_info_string_get(MODEM_INFO_IMEI, gw_imei_buf, sizeof(gw_imei_buf));
    e7ec:	2210      	movs	r2, #16
void update_imei_data(void){
    e7ee:	b510      	push	{r4, lr}
    int err = modem_info_string_get(MODEM_INFO_IMEI, gw_imei_buf, sizeof(gw_imei_buf));
    e7f0:	2013      	movs	r0, #19
    e7f2:	490f      	ldr	r1, [pc, #60]	; (e830 <update_imei_data+0x44>)
    e7f4:	f008 f98c 	bl	16b10 <modem_info_string_get>
    e7f8:	4c0e      	ldr	r4, [pc, #56]	; (e834 <update_imei_data+0x48>)
    e7fa:	4b0f      	ldr	r3, [pc, #60]	; (e838 <update_imei_data+0x4c>)
	if (err != GW_IMEI_LEN) {
    e7fc:	280f      	cmp	r0, #15
    e7fe:	eba4 0403 	sub.w	r4, r4, r3
    e802:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    int err = modem_info_string_get(MODEM_INFO_IMEI, gw_imei_buf, sizeof(gw_imei_buf));
    e806:	4602      	mov	r2, r0
	if (err != GW_IMEI_LEN) {
    e808:	ea4f 1484 	mov.w	r4, r4, lsl #6
    e80c:	d004      	beq.n	e818 <update_imei_data+0x2c>
		LOG_ERR("modem_info_string_get(IMEI), error: %d", err);
    e80e:	490b      	ldr	r1, [pc, #44]	; (e83c <update_imei_data+0x50>)
    e810:	f044 0001 	orr.w	r0, r4, #1
    e814:	f015 fe74 	bl	24500 <log_string_sync>
	}
	LOG_INF("Device IMEI: %s", log_strdup(gw_imei_buf));
    e818:	4805      	ldr	r0, [pc, #20]	; (e830 <update_imei_data+0x44>)
    e81a:	f015 fe83 	bl	24524 <log_strdup>
    e81e:	f044 0403 	orr.w	r4, r4, #3
    e822:	4602      	mov	r2, r0
    e824:	4906      	ldr	r1, [pc, #24]	; (e840 <update_imei_data+0x54>)
    e826:	4620      	mov	r0, r4
}
    e828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LOG_INF("Device IMEI: %s", log_strdup(gw_imei_buf));
    e82c:	f015 be68 	b.w	24500 <log_string_sync>
    e830:	20028204 	.word	0x20028204
    e834:	0002a2c4 	.word	0x0002a2c4
    e838:	0002a2c4 	.word	0x0002a2c4
    e83c:	0002b063 	.word	0x0002b063
    e840:	0002b08a 	.word	0x0002b08a

0000e844 <adv_post_send_report>:
    // Do something
}*/

void
adv_post_send_report(void *arg)
{
    e844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (NULL == msg)
    e848:	4604      	mov	r4, r0
{
    e84a:	b096      	sub	sp, #88	; 0x58
    if (NULL == msg)
    e84c:	2800      	cmp	r0, #0
    e84e:	d068      	beq.n	e922 <adv_post_send_report+0xde>
    else if (msg->cmd != RE_CA_UART_ADV_RPRT)
    e850:	7803      	ldrb	r3, [r0, #0]
    e852:	2b10      	cmp	r3, #16
    e854:	d165      	bne.n	e922 <adv_post_send_report+0xde>
        time_t now    = get_ts();
    e856:	f000 fe93 	bl	f580 <get_ts>
	int bytes_written = 0;
    e85a:	2600      	movs	r6, #0
        adv->rssi      = report->rssi_db;
    e85c:	f994 3027 	ldrsb.w	r3, [r4, #39]	; 0x27
        adv->timestamp = now;
    e860:	e9cd 0102 	strd	r0, r1, [sp, #8]
		status = snprintf(out + bytes_written,
    e864:	4f30      	ldr	r7, [pc, #192]	; (e928 <adv_post_send_report+0xe4>)
        mac_address_bin_init(&adv->tag_mac, report->mac);
    e866:	1c61      	adds	r1, r4, #1
    e868:	4668      	mov	r0, sp
        adv->rssi      = report->rssi_db;
    e86a:	9304      	str	r3, [sp, #16]
        mac_address_bin_init(&adv->tag_mac, report->mac);
    e86c:	3406      	adds	r4, #6
    e86e:	f015 f909 	bl	23a84 <mac_address_bin_init>
        to_hex_str(adv->data, sizeof(adv->data), report->adv, report->adv_len);
    e872:	f894 5020 	ldrb.w	r5, [r4, #32]
	for (; in_size > 0; in_size--) {
    e876:	b155      	cbz	r5, e88e <adv_post_send_report+0x4a>
		status = snprintf(out + bytes_written,
    e878:	a805      	add	r0, sp, #20
    e87a:	463a      	mov	r2, r7
    e87c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    e880:	f1c6 0141 	rsb	r1, r6, #65	; 0x41
    e884:	4430      	add	r0, r6
    e886:	f013 fa83 	bl	21d90 <sniprintf>
		if (status < 0) {
    e88a:	2800      	cmp	r0, #0
    e88c:	da1b      	bge.n	e8c6 <adv_post_send_report+0x82>
	int bytes_written = 0;
    e88e:	2400      	movs	r4, #0
        if (isxdigit(str[i]) == 0)
    e890:	4e26      	ldr	r6, [pc, #152]	; (e92c <adv_post_send_report+0xe8>)
    e892:	ad05      	add	r5, sp, #20
    for (int i = 0; i < strlen(str); i++)
    e894:	a805      	add	r0, sp, #20
    e896:	f7fe fb4f 	bl	cf38 <strlen>
    e89a:	42a0      	cmp	r0, r4
    e89c:	d817      	bhi.n	e8ce <adv_post_send_report+0x8a>
    for (int i = 0; i < adv_reports.num_of_advs; i++)
    e89e:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
    e8a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e8a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e8a8:	4821      	ldr	r0, [pc, #132]	; (e930 <adv_post_send_report+0xec>)
    e8aa:	f011 fb03 	bl	1feb4 <z_impl_k_mutex_lock>
    gw_metrics.received_advertisements++;
    e8ae:	4a21      	ldr	r2, [pc, #132]	; (e934 <adv_post_send_report+0xf0>)
    e8b0:	4c21      	ldr	r4, [pc, #132]	; (e938 <adv_post_send_report+0xf4>)
    e8b2:	e9d2 3100 	ldrd	r3, r1, [r2]
    e8b6:	3301      	adds	r3, #1
    e8b8:	f141 0100 	adc.w	r1, r1, #0
    bool      found = false;
    e8bc:	462f      	mov	r7, r5
    e8be:	4626      	mov	r6, r4
    gw_metrics.received_advertisements++;
    e8c0:	e9c2 3100 	strd	r3, r1, [r2]
    for (int i = 0; i < adv_reports.num_of_advs; i++)
    e8c4:	e01b      	b.n	e8fe <adv_post_send_report+0xba>
	for (; in_size > 0; in_size--) {
    e8c6:	3d01      	subs	r5, #1
		bytes_written += status;
    e8c8:	4406      	add	r6, r0
	for (; in_size > 0; in_size--) {
    e8ca:	b2ed      	uxtb	r5, r5
    e8cc:	e7d3      	b.n	e876 <adv_post_send_report+0x32>
        if (isxdigit(str[i]) == 0)
    e8ce:	f815 3b01 	ldrb.w	r3, [r5], #1
    e8d2:	5d9b      	ldrb	r3, [r3, r6]
    e8d4:	f013 0f44 	tst.w	r3, #68	; 0x44
    e8d8:	d023      	beq.n	e922 <adv_post_send_report+0xde>
    for (int i = 0; i < strlen(str); i++)
    e8da:	3401      	adds	r4, #1
    e8dc:	e7da      	b.n	e894 <adv_post_send_report+0x50>
        if (memcmp(&p_adv->tag_mac, p_mac, sizeof(*p_mac)) == 0)
    e8de:	f104 0808 	add.w	r8, r4, #8
    e8e2:	2206      	movs	r2, #6
    e8e4:	4641      	mov	r1, r8
    e8e6:	4668      	mov	r0, sp
    e8e8:	f01a fdb5 	bl	29456 <memcmp>
    e8ec:	b928      	cbnz	r0, e8fa <adv_post_send_report+0xb6>
            adv_reports.table[i] = *p_adv;
    e8ee:	2258      	movs	r2, #88	; 0x58
    e8f0:	4669      	mov	r1, sp
    e8f2:	4640      	mov	r0, r8
    e8f4:	f01a fdbd 	bl	29472 <memcpy>
            found                = true;
    e8f8:	2701      	movs	r7, #1
    for (int i = 0; i < adv_reports.num_of_advs; i++)
    e8fa:	3501      	adds	r5, #1
    e8fc:	3458      	adds	r4, #88	; 0x58
    e8fe:	6830      	ldr	r0, [r6, #0]
    e900:	4285      	cmp	r5, r0
    e902:	dbec      	blt.n	e8de <adv_post_send_report+0x9a>
    if (!found)
    e904:	b957      	cbnz	r7, e91c <adv_post_send_report+0xd8>
        if (adv_reports.num_of_advs < MAX_ADVS_TABLE)
    e906:	2809      	cmp	r0, #9
    e908:	dc08      	bgt.n	e91c <adv_post_send_report+0xd8>
            adv_reports.table[adv_reports.num_of_advs++] = *p_adv;
    e90a:	2258      	movs	r2, #88	; 0x58
    e90c:	1c43      	adds	r3, r0, #1
    e90e:	fb02 6000 	mla	r0, r2, r0, r6
    e912:	4669      	mov	r1, sp
    e914:	3008      	adds	r0, #8
    e916:	6033      	str	r3, [r6, #0]
    e918:	f01a fdab 	bl	29472 <memcpy>
	return z_impl_k_mutex_unlock(mutex);
    e91c:	4804      	ldr	r0, [pc, #16]	; (e930 <adv_post_send_report+0xec>)
    e91e:	f011 fb41 	bl	1ffa4 <z_impl_k_mutex_unlock>
        if (ret == 101)
        {
            //LOG_WRN("Adv report table full, adv dropped");
        }
    }
}
    e922:	b016      	add	sp, #88	; 0x58
    e924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e928:	0002af2c 	.word	0x0002af2c
    e92c:	0002d0fe 	.word	0x0002d0fe
    e930:	20020914 	.word	0x20020914
    e934:	20021a00 	.word	0x20021a00
    e938:	20021310 	.word	0x20021310

0000e93c <online_post>:

void
online_post(void){
    http_send_online(gw_imei_buf, nrf_mac.str_buf);
    e93c:	4901      	ldr	r1, [pc, #4]	; (e944 <online_post+0x8>)
    e93e:	4802      	ldr	r0, [pc, #8]	; (e948 <online_post+0xc>)
    e940:	f000 bce4 	b.w	f30c <http_send_online>
    e944:	20028214 	.word	0x20028214
    e948:	20028204 	.word	0x20028204

0000e94c <adv_post>:
}

void
adv_post(void)
{
    e94c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e950:	4b28      	ldr	r3, [pc, #160]	; (e9f4 <adv_post+0xa8>)
    e952:	4c29      	ldr	r4, [pc, #164]	; (e9f8 <adv_post+0xac>)
    e954:	4d29      	ldr	r5, [pc, #164]	; (e9fc <adv_post+0xb0>)
    e956:	1ae4      	subs	r4, r4, r3
    e958:	08e4      	lsrs	r4, r4, #3
    adv_report_t *adv = 0;
    LOG_INF("advertisements in table:");
    e95a:	01a4      	lsls	r4, r4, #6
    e95c:	f044 0403 	orr.w	r4, r4, #3
    e960:	4620      	mov	r0, r4
    e962:	4927      	ldr	r1, [pc, #156]	; (ea00 <adv_post+0xb4>)
{
    e964:	b08b      	sub	sp, #44	; 0x2c
    LOG_INF("advertisements in table:");
    e966:	f015 fdcb 	bl	24500 <log_string_sync>

    for (int i = 0; i < adv_reports.num_of_advs; i++)
    e96a:	2600      	movs	r6, #0
    e96c:	46a8      	mov	r8, r5
    {
        adv                             = &adv_reports.table[i];
        const mac_address_str_t mac_str =  mac_address_to_str(&adv->tag_mac);
        LOG_INF("i: %d, tag: %s, rssi: %d, data: %s, timestamp: %lld",
    e96e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; ea1c <adv_post+0xd0>
    for (int i = 0; i < adv_reports.num_of_advs; i++)
    e972:	f8d8 3000 	ldr.w	r3, [r8]
    e976:	f105 0758 	add.w	r7, r5, #88	; 0x58
    e97a:	429e      	cmp	r6, r3
    e97c:	db23      	blt.n	e9c6 <adv_post+0x7a>
    }

    // for thread safety copy the advertisements to a separate buffer for
    // posting
    k_mutex_lock(&adv_table_mux, K_FOREVER);
    adv_reports_buf         = adv_reports;
    e97e:	4c21      	ldr	r4, [pc, #132]	; (ea04 <adv_post+0xb8>)
	return z_impl_k_mutex_lock(mutex, timeout);
    e980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e988:	481f      	ldr	r0, [pc, #124]	; (ea08 <adv_post+0xbc>)
    e98a:	f011 fa93 	bl	1feb4 <z_impl_k_mutex_lock>
    e98e:	f44f 725e 	mov.w	r2, #888	; 0x378
    e992:	4620      	mov	r0, r4
    e994:	4919      	ldr	r1, [pc, #100]	; (e9fc <adv_post+0xb0>)
    e996:	f01a fd6c 	bl	29472 <memcpy>
    adv_reports.num_of_advs = 0; // clear the table
    e99a:	2300      	movs	r3, #0
    e99c:	f8c8 3000 	str.w	r3, [r8]
	return z_impl_k_mutex_unlock(mutex);
    e9a0:	4819      	ldr	r0, [pc, #100]	; (ea08 <adv_post+0xbc>)
    e9a2:	f011 faff 	bl	1ffa4 <z_impl_k_mutex_unlock>
    k_mutex_unlock(&adv_table_mux);


    if (adv_reports_buf.num_of_advs){
    e9a6:	6823      	ldr	r3, [r4, #0]
    e9a8:	b153      	cbz	r3, e9c0 <adv_post+0x74>
        http_send_advs(&adv_reports_buf, latT, longT, gw_imei_buf, nrf_mac.str_buf);
    e9aa:	4b18      	ldr	r3, [pc, #96]	; (ea0c <adv_post+0xc0>)
    e9ac:	4620      	mov	r0, r4
    e9ae:	ed93 1b00 	vldr	d1, [r3]
    e9b2:	4b17      	ldr	r3, [pc, #92]	; (ea10 <adv_post+0xc4>)
    e9b4:	4a17      	ldr	r2, [pc, #92]	; (ea14 <adv_post+0xc8>)
    e9b6:	ed93 0b00 	vldr	d0, [r3]
    e9ba:	4917      	ldr	r1, [pc, #92]	; (ea18 <adv_post+0xcc>)
    e9bc:	f000 fcf0 	bl	f3a0 <http_send_advs>
    }
}
    e9c0:	b00b      	add	sp, #44	; 0x2c
    e9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        const mac_address_str_t mac_str =  mac_address_to_str(&adv->tag_mac);
    e9c6:	f105 0108 	add.w	r1, r5, #8
    e9ca:	a805      	add	r0, sp, #20
        LOG_INF("i: %d, tag: %s, rssi: %d, data: %s, timestamp: %lld",
    e9cc:	351c      	adds	r5, #28
        const mac_address_str_t mac_str =  mac_address_to_str(&adv->tag_mac);
    e9ce:	f7ff fd97 	bl	e500 <mac_address_to_str>
        LOG_INF("i: %d, tag: %s, rssi: %d, data: %s, timestamp: %lld",
    e9d2:	e957 2312 	ldrd	r2, r3, [r7, #-72]	; 0x48
    e9d6:	9501      	str	r5, [sp, #4]
    e9d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    e9dc:	f857 3c40 	ldr.w	r3, [r7, #-64]
    e9e0:	4632      	mov	r2, r6
    e9e2:	9300      	str	r3, [sp, #0]
    e9e4:	4649      	mov	r1, r9
    e9e6:	4620      	mov	r0, r4
    e9e8:	ab05      	add	r3, sp, #20
    e9ea:	f015 fd89 	bl	24500 <log_string_sync>
    for (int i = 0; i < adv_reports.num_of_advs; i++)
    e9ee:	463d      	mov	r5, r7
    e9f0:	3601      	adds	r6, #1
    e9f2:	e7be      	b.n	e972 <adv_post+0x26>
    e9f4:	0002a2c4 	.word	0x0002a2c4
    e9f8:	0002a2c4 	.word	0x0002a2c4
    e9fc:	20021310 	.word	0x20021310
    ea00:	0002b09a 	.word	0x0002b09a
    ea04:	20021688 	.word	0x20021688
    ea08:	20020914 	.word	0x20020914
    ea0c:	20021a10 	.word	0x20021a10
    ea10:	20021a08 	.word	0x20021a08
    ea14:	20028214 	.word	0x20028214
    ea18:	20028204 	.word	0x20028204
    ea1c:	0002b0b3 	.word	0x0002b0b3

0000ea20 <led_init>:
/*
 * Initializes all LEDs that are present on the board
 */

void led_init(void)
{
    ea20:	b538      	push	{r3, r4, r5, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    ea22:	4c1b      	ldr	r4, [pc, #108]	; (ea90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30>)
#if DT_NODE_HAS_STATUS(LED_0, okay)
	dev_led_0 = device_get_binding(LED0);
    ea24:	4d1b      	ldr	r5, [pc, #108]	; (ea94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x34>)
    ea26:	4620      	mov	r0, r4
    ea28:	f010 ff6c 	bl	1f904 <z_impl_device_get_binding>
	gpio_pin_configure(dev_led_0, PIN0, GPIO_OUTPUT_ACTIVE | FLAGS0);
    ea2c:	2102      	movs	r1, #2
	dev_led_0 = device_get_binding(LED0);
    ea2e:	6028      	str	r0, [r5, #0]
	gpio_pin_configure(dev_led_0, PIN0, GPIO_OUTPUT_ACTIVE | FLAGS0);
    ea30:	f015 f861 	bl	23af6 <gpio_pin_configure.constprop.0>
	gpio_pin_set(dev_led_0, PIN0, 0);
    ea34:	2200      	movs	r2, #0
    ea36:	2102      	movs	r1, #2
    ea38:	6828      	ldr	r0, [r5, #0]
    ea3a:	f015 f84b 	bl	23ad4 <gpio_pin_set>
    ea3e:	4620      	mov	r0, r4
    ea40:	f010 ff60 	bl	1f904 <z_impl_device_get_binding>
#endif

#if DT_NODE_HAS_STATUS(LED_1, okay)
    dev_led_1 = device_get_binding(LED1);
    ea44:	4d14      	ldr	r5, [pc, #80]	; (ea98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x38>)
    gpio_pin_configure(dev_led_1, PIN1, GPIO_OUTPUT_ACTIVE | FLAGS1);
    ea46:	2103      	movs	r1, #3
    dev_led_1 = device_get_binding(LED1);
    ea48:	6028      	str	r0, [r5, #0]
    gpio_pin_configure(dev_led_1, PIN1, GPIO_OUTPUT_ACTIVE | FLAGS1);
    ea4a:	f015 f854 	bl	23af6 <gpio_pin_configure.constprop.0>
	gpio_pin_set(dev_led_1, PIN1, 0);
    ea4e:	2200      	movs	r2, #0
    ea50:	2103      	movs	r1, #3
    ea52:	6828      	ldr	r0, [r5, #0]
    ea54:	f015 f83e 	bl	23ad4 <gpio_pin_set>
    ea58:	4620      	mov	r0, r4
    ea5a:	f010 ff53 	bl	1f904 <z_impl_device_get_binding>
#endif

#if DT_NODE_HAS_STATUS(LED_2, okay)
    dev_led_2 = device_get_binding(LED2);
    ea5e:	4d0f      	ldr	r5, [pc, #60]	; (ea9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c>)
    gpio_pin_configure(dev_led_2, PIN2, GPIO_OUTPUT_ACTIVE | FLAGS2);    
    ea60:	2104      	movs	r1, #4
    dev_led_2 = device_get_binding(LED2);
    ea62:	6028      	str	r0, [r5, #0]
    gpio_pin_configure(dev_led_2, PIN2, GPIO_OUTPUT_ACTIVE | FLAGS2);    
    ea64:	f015 f847 	bl	23af6 <gpio_pin_configure.constprop.0>
    gpio_pin_set(dev_led_2, PIN2, 0);
    ea68:	2200      	movs	r2, #0
    ea6a:	2104      	movs	r1, #4
    ea6c:	6828      	ldr	r0, [r5, #0]
    ea6e:	f015 f831 	bl	23ad4 <gpio_pin_set>
    ea72:	4620      	mov	r0, r4
    ea74:	f010 ff46 	bl	1f904 <z_impl_device_get_binding>
#endif

#if DT_NODE_HAS_STATUS(LED_3, okay)
    dev_led_3 = device_get_binding(LED3);
    ea78:	4c09      	ldr	r4, [pc, #36]	; (eaa0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40>)
    gpio_pin_configure(dev_led_3, PIN3, GPIO_OUTPUT_ACTIVE | FLAGS3);    
    ea7a:	2105      	movs	r1, #5
    dev_led_3 = device_get_binding(LED3);
    ea7c:	6020      	str	r0, [r4, #0]
    gpio_pin_configure(dev_led_3, PIN3, GPIO_OUTPUT_ACTIVE | FLAGS3);    
    ea7e:	f015 f83a 	bl	23af6 <gpio_pin_configure.constprop.0>
    gpio_pin_set(dev_led_3, PIN3, 0);
    ea82:	6820      	ldr	r0, [r4, #0]
    ea84:	2200      	movs	r2, #0
#endif
}
    ea86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    gpio_pin_set(dev_led_3, PIN3, 0);
    ea8a:	2105      	movs	r1, #5
    ea8c:	f015 b822 	b.w	23ad4 <gpio_pin_set>
    ea90:	0002b0f0 	.word	0x0002b0f0
    ea94:	20022480 	.word	0x20022480
    ea98:	20022484 	.word	0x20022484
    ea9c:	20022488 	.word	0x20022488
    eaa0:	2002248c 	.word	0x2002248c

0000eaa4 <led_0_on>:
    gpio_pin_set(dev_led_0, PIN0, led0_state);
}

void led_0_on(void)
{
    led0_state = 1;
    eaa4:	2201      	movs	r2, #1
    eaa6:	4b04      	ldr	r3, [pc, #16]	; (eab8 <led_0_on+0x14>)
    gpio_pin_set(dev_led_0, PIN0, led0_state);
    eaa8:	2102      	movs	r1, #2
    led0_state = 1;
    eaaa:	601a      	str	r2, [r3, #0]
    gpio_pin_set(dev_led_0, PIN0, led0_state);
    eaac:	681a      	ldr	r2, [r3, #0]
    eaae:	4b03      	ldr	r3, [pc, #12]	; (eabc <led_0_on+0x18>)
    eab0:	6818      	ldr	r0, [r3, #0]
    eab2:	f015 b80f 	b.w	23ad4 <gpio_pin_set>
    eab6:	bf00      	nop
    eab8:	20022490 	.word	0x20022490
    eabc:	20022480 	.word	0x20022480

0000eac0 <led_0_off>:
}

void led_0_off(void)
{
    led0_state = 0;
    eac0:	2200      	movs	r2, #0
    eac2:	4b04      	ldr	r3, [pc, #16]	; (ead4 <led_0_off+0x14>)
    gpio_pin_set(dev_led_0, PIN0, led0_state);
    eac4:	2102      	movs	r1, #2
    led0_state = 0;
    eac6:	601a      	str	r2, [r3, #0]
    gpio_pin_set(dev_led_0, PIN0, led0_state);
    eac8:	681a      	ldr	r2, [r3, #0]
    eaca:	4b03      	ldr	r3, [pc, #12]	; (ead8 <led_0_off+0x18>)
    eacc:	6818      	ldr	r0, [r3, #0]
    eace:	f015 b801 	b.w	23ad4 <gpio_pin_set>
    ead2:	bf00      	nop
    ead4:	20022490 	.word	0x20022490
    ead8:	20022480 	.word	0x20022480

0000eadc <led_1_on>:
    gpio_pin_set(dev_led_1, PIN1, led1_state);
}

void led_1_on(void)
{
    led1_state = 1;
    eadc:	2201      	movs	r2, #1
    eade:	4b04      	ldr	r3, [pc, #16]	; (eaf0 <led_1_on+0x14>)
    gpio_pin_set(dev_led_1, PIN1, led1_state);
    eae0:	2103      	movs	r1, #3
    led1_state = 1;
    eae2:	601a      	str	r2, [r3, #0]
    gpio_pin_set(dev_led_1, PIN1, led1_state);
    eae4:	681a      	ldr	r2, [r3, #0]
    eae6:	4b03      	ldr	r3, [pc, #12]	; (eaf4 <led_1_on+0x18>)
    eae8:	6818      	ldr	r0, [r3, #0]
    eaea:	f014 bff3 	b.w	23ad4 <gpio_pin_set>
    eaee:	bf00      	nop
    eaf0:	20022494 	.word	0x20022494
    eaf4:	20022484 	.word	0x20022484

0000eaf8 <led_1_off>:
}

void led_1_off(void)
{
    led1_state = 0;
    eaf8:	2200      	movs	r2, #0
    eafa:	4b04      	ldr	r3, [pc, #16]	; (eb0c <led_1_off+0x14>)
    gpio_pin_set(dev_led_1, PIN1, led1_state);
    eafc:	2103      	movs	r1, #3
    led1_state = 0;
    eafe:	601a      	str	r2, [r3, #0]
    gpio_pin_set(dev_led_1, PIN1, led1_state);
    eb00:	681a      	ldr	r2, [r3, #0]
    eb02:	4b03      	ldr	r3, [pc, #12]	; (eb10 <led_1_off+0x18>)
    eb04:	6818      	ldr	r0, [r3, #0]
    eb06:	f014 bfe5 	b.w	23ad4 <gpio_pin_set>
    eb0a:	bf00      	nop
    eb0c:	20022494 	.word	0x20022494
    eb10:	20022484 	.word	0x20022484

0000eb14 <led_2_on>:
    gpio_pin_set(dev_led_2, PIN2, led2_state);
}

void led_2_on(void)
{
    led2_state = 1;
    eb14:	2201      	movs	r2, #1
    eb16:	4b04      	ldr	r3, [pc, #16]	; (eb28 <led_2_on+0x14>)
    gpio_pin_set(dev_led_2, PIN2, led2_state);
    eb18:	2104      	movs	r1, #4
    led2_state = 1;
    eb1a:	601a      	str	r2, [r3, #0]
    gpio_pin_set(dev_led_2, PIN2, led2_state);
    eb1c:	681a      	ldr	r2, [r3, #0]
    eb1e:	4b03      	ldr	r3, [pc, #12]	; (eb2c <led_2_on+0x18>)
    eb20:	6818      	ldr	r0, [r3, #0]
    eb22:	f014 bfd7 	b.w	23ad4 <gpio_pin_set>
    eb26:	bf00      	nop
    eb28:	20022498 	.word	0x20022498
    eb2c:	20022488 	.word	0x20022488

0000eb30 <led_2_off>:
}

void led_2_off(void)
{
    led2_state = 0;
    eb30:	2200      	movs	r2, #0
    eb32:	4b04      	ldr	r3, [pc, #16]	; (eb44 <led_2_off+0x14>)
    gpio_pin_set(dev_led_2, PIN2, led2_state);
    eb34:	2104      	movs	r1, #4
    led2_state = 0;
    eb36:	601a      	str	r2, [r3, #0]
    gpio_pin_set(dev_led_2, PIN2, led2_state);
    eb38:	681a      	ldr	r2, [r3, #0]
    eb3a:	4b03      	ldr	r3, [pc, #12]	; (eb48 <led_2_off+0x18>)
    eb3c:	6818      	ldr	r0, [r3, #0]
    eb3e:	f014 bfc9 	b.w	23ad4 <gpio_pin_set>
    eb42:	bf00      	nop
    eb44:	20022498 	.word	0x20022498
    eb48:	20022488 	.word	0x20022488

0000eb4c <toggle_led>:
/*
 * Generic call that passes an integer to allow the toggle of each LED.
 * If integer doesn't correlate to an LED nothing happens.
 */
void toggle_led(int led){
    switch(led){
    eb4c:	2803      	cmp	r0, #3
    eb4e:	d82d      	bhi.n	ebac <toggle_led+0x60>
    eb50:	e8df f000 	tbb	[pc, r0]
    eb54:	22180e02 	.word	0x22180e02
    led0_state = !led0_state;
    eb58:	4a15      	ldr	r2, [pc, #84]	; (ebb0 <toggle_led+0x64>)
    gpio_pin_set(dev_led_0, PIN0, led0_state);
    eb5a:	2102      	movs	r1, #2
    led0_state = !led0_state;
    eb5c:	6813      	ldr	r3, [r2, #0]
    eb5e:	fab3 f383 	clz	r3, r3
    eb62:	095b      	lsrs	r3, r3, #5
    eb64:	6013      	str	r3, [r2, #0]
    gpio_pin_set(dev_led_0, PIN0, led0_state);
    eb66:	6812      	ldr	r2, [r2, #0]
    eb68:	4b12      	ldr	r3, [pc, #72]	; (ebb4 <toggle_led+0x68>)
    gpio_pin_set(dev_led_3, PIN3, led3_state);
    eb6a:	6818      	ldr	r0, [r3, #0]
    eb6c:	f014 bfb2 	b.w	23ad4 <gpio_pin_set>
    led1_state = !led1_state;
    eb70:	4a11      	ldr	r2, [pc, #68]	; (ebb8 <toggle_led+0x6c>)
    gpio_pin_set(dev_led_1, PIN1, led1_state);
    eb72:	2103      	movs	r1, #3
    led1_state = !led1_state;
    eb74:	6813      	ldr	r3, [r2, #0]
    eb76:	fab3 f383 	clz	r3, r3
    eb7a:	095b      	lsrs	r3, r3, #5
    eb7c:	6013      	str	r3, [r2, #0]
    gpio_pin_set(dev_led_1, PIN1, led1_state);
    eb7e:	6812      	ldr	r2, [r2, #0]
    eb80:	4b0e      	ldr	r3, [pc, #56]	; (ebbc <toggle_led+0x70>)
    eb82:	e7f2      	b.n	eb6a <toggle_led+0x1e>
    led2_state = !led2_state;
    eb84:	4a0e      	ldr	r2, [pc, #56]	; (ebc0 <toggle_led+0x74>)
    gpio_pin_set(dev_led_2, PIN2, led2_state);
    eb86:	2104      	movs	r1, #4
    led2_state = !led2_state;
    eb88:	6813      	ldr	r3, [r2, #0]
    eb8a:	fab3 f383 	clz	r3, r3
    eb8e:	095b      	lsrs	r3, r3, #5
    eb90:	6013      	str	r3, [r2, #0]
    gpio_pin_set(dev_led_2, PIN2, led2_state);
    eb92:	6812      	ldr	r2, [r2, #0]
    eb94:	4b0b      	ldr	r3, [pc, #44]	; (ebc4 <toggle_led+0x78>)
    eb96:	e7e8      	b.n	eb6a <toggle_led+0x1e>
    led3_state = !led3_state;
    eb98:	4a0b      	ldr	r2, [pc, #44]	; (ebc8 <toggle_led+0x7c>)
    gpio_pin_set(dev_led_3, PIN3, led3_state);
    eb9a:	2105      	movs	r1, #5
    led3_state = !led3_state;
    eb9c:	6813      	ldr	r3, [r2, #0]
    eb9e:	fab3 f383 	clz	r3, r3
    eba2:	095b      	lsrs	r3, r3, #5
    eba4:	6013      	str	r3, [r2, #0]
    gpio_pin_set(dev_led_3, PIN3, led3_state);
    eba6:	6812      	ldr	r2, [r2, #0]
    eba8:	4b08      	ldr	r3, [pc, #32]	; (ebcc <toggle_led+0x80>)
    ebaa:	e7de      	b.n	eb6a <toggle_led+0x1e>
            break;
#endif
        default:
            break;
    }
}
    ebac:	4770      	bx	lr
    ebae:	bf00      	nop
    ebb0:	20022490 	.word	0x20022490
    ebb4:	20022480 	.word	0x20022480
    ebb8:	20022494 	.word	0x20022494
    ebbc:	20022484 	.word	0x20022484
    ebc0:	20022498 	.word	0x20022498
    ebc4:	20022488 	.word	0x20022488
    ebc8:	2002249c 	.word	0x2002249c
    ebcc:	2002248c 	.word	0x2002248c

0000ebd0 <flash_led>:
 * Generic call to flash an LED.
 * If LED is on the state will change to off.
 * Then a toggle will be called to turn the led on. If on it will remain on.
 * After a delay another toggle will be called, turning the led off.
 */
void flash_led(int led, int delay){
    ebd0:	b570      	push	{r4, r5, r6, lr}
    ebd2:	4604      	mov	r4, r0
    ebd4:	460d      	mov	r5, r1
    ebd6:	2803      	cmp	r0, #3
    ebd8:	d806      	bhi.n	ebe8 <flash_led+0x18>
    ebda:	e8df f000 	tbb	[pc, r0]
    ebde:	2022      	.short	0x2022
    ebe0:	021e      	.short	0x021e
    switch(led){
        case 3:
            led3_state = 0;
    ebe2:	4b11      	ldr	r3, [pc, #68]	; (ec28 <flash_led+0x58>)
            break;
        case 1:
            led1_state = 0;
            break;
        case 0:
            led0_state = 0;
    ebe4:	2200      	movs	r2, #0
    ebe6:	601a      	str	r2, [r3, #0]
            break;
    }
    toggle_led(led);
    ebe8:	4620      	mov	r0, r4
    ebea:	f7ff ffaf 	bl	eb4c <toggle_led>
    ebee:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    ebf2:	f240 30e7 	movw	r0, #999	; 0x3e7
    ebf6:	2100      	movs	r1, #0
    k_sleep(K_MSEC(delay));
    ebf8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    ebfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ec00:	2300      	movs	r3, #0
    ec02:	fbc6 0105 	smlal	r0, r1, r6, r5
    ec06:	f7fd fdd7 	bl	c7b8 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    ec0a:	2100      	movs	r1, #0
    ec0c:	f011 fd60 	bl	206d0 <z_impl_k_sleep>
    toggle_led(led);
    ec10:	4620      	mov	r0, r4
}
    ec12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    toggle_led(led);
    ec16:	f7ff bf99 	b.w	eb4c <toggle_led>
            led2_state = 0;
    ec1a:	4b04      	ldr	r3, [pc, #16]	; (ec2c <flash_led+0x5c>)
    ec1c:	e7e2      	b.n	ebe4 <flash_led+0x14>
            led1_state = 0;
    ec1e:	4b04      	ldr	r3, [pc, #16]	; (ec30 <flash_led+0x60>)
    ec20:	e7e0      	b.n	ebe4 <flash_led+0x14>
            led0_state = 0;
    ec22:	4b04      	ldr	r3, [pc, #16]	; (ec34 <flash_led+0x64>)
    ec24:	e7de      	b.n	ebe4 <flash_led+0x14>
    ec26:	bf00      	nop
    ec28:	2002249c 	.word	0x2002249c
    ec2c:	20022498 	.word	0x20022498
    ec30:	20022494 	.word	0x20022494
    ec34:	20022490 	.word	0x20022490

0000ec38 <rx_parse_task>:
/**USER_VARIABLES***/
/*start*/
static terminal_struct_t terminal;
/*end*/

void rx_parse_task(void){
    ec38:	b510      	push	{r4, lr}
    //LOG_INF("RPT started");
    //do{
    if (terminal.size != 0){
    ec3a:	4c33      	ldr	r4, [pc, #204]	; (ed08 <rx_parse_task+0xd0>)
void rx_parse_task(void){
    ec3c:	b08c      	sub	sp, #48	; 0x30
    if (terminal.size != 0){
    ec3e:	6823      	ldr	r3, [r4, #0]
    ec40:	b1d3      	cbz	r3, ec78 <rx_parse_task+0x40>
        //LOG_INF("Start of RPT: %d", terminal.size);
        if(terminal.rx_buffer[RE_CA_UART_STX_INDEX] == RE_CA_UART_STX){
    ec42:	7923      	ldrb	r3, [r4, #4]
    ec44:	2bca      	cmp	r3, #202	; 0xca
    ec46:	d10c      	bne.n	ec62 <rx_parse_task+0x2a>
            re_ca_uart_payload_t uart_payload = { 0 };
    ec48:	2228      	movs	r2, #40	; 0x28
    ec4a:	2100      	movs	r1, #0
    ec4c:	a802      	add	r0, sp, #8
    ec4e:	f01a fc4a 	bl	294e6 <memset>
            switch (terminal.rx_buffer[RE_CA_UART_CMD_INDEX]){
    ec52:	79a3      	ldrb	r3, [r4, #6]
    ec54:	2b18      	cmp	r3, #24
    ec56:	d82b      	bhi.n	ecb0 <rx_parse_task+0x78>
    ec58:	2b0e      	cmp	r3, #14
    ec5a:	d80f      	bhi.n	ec7c <rx_parse_task+0x44>
    ec5c:	3b05      	subs	r3, #5
    ec5e:	2b07      	cmp	r3, #7
    ec60:	d928      	bls.n	ecb4 <rx_parse_task+0x7c>
                case RE_CA_UART_GET_DEVICE_ID:
                    re_ca_uart_decode (terminal.rx_buffer, &uart_payload);
                    break;
            }
        }
        memset(terminal.rx_buffer, 0, RX_BUFFER_MAX_SIZE);
    ec62:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ec66:	2100      	movs	r1, #0
    ec68:	4828      	ldr	r0, [pc, #160]	; (ed0c <rx_parse_task+0xd4>)
    ec6a:	f01a fc3c 	bl	294e6 <memset>
        terminal.size = 0;
    ec6e:	2300      	movs	r3, #0
    ec70:	7023      	strb	r3, [r4, #0]
    ec72:	7063      	strb	r3, [r4, #1]
    ec74:	70a3      	strb	r3, [r4, #2]
    ec76:	70e3      	strb	r3, [r4, #3]
        //LOG_INF("END of RPT");
    }
//}while(1);
    
}
    ec78:	b00c      	add	sp, #48	; 0x30
    ec7a:	bd10      	pop	{r4, pc}
    ec7c:	3b0f      	subs	r3, #15
    ec7e:	2b09      	cmp	r3, #9
    ec80:	d8ef      	bhi.n	ec62 <rx_parse_task+0x2a>
    ec82:	a201      	add	r2, pc, #4	; (adr r2, ec88 <rx_parse_task+0x50>)
    ec84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ec88:	0000ecb5 	.word	0x0000ecb5
    ec8c:	0000ecbf 	.word	0x0000ecbf
    ec90:	0000eccf 	.word	0x0000eccf
    ec94:	0000ec63 	.word	0x0000ec63
    ec98:	0000ec63 	.word	0x0000ec63
    ec9c:	0000ec63 	.word	0x0000ec63
    eca0:	0000ec63 	.word	0x0000ec63
    eca4:	0000ec63 	.word	0x0000ec63
    eca8:	0000ec63 	.word	0x0000ec63
    ecac:	0000ecb5 	.word	0x0000ecb5
            switch (terminal.rx_buffer[RE_CA_UART_CMD_INDEX]){
    ecb0:	2b20      	cmp	r3, #32
    ecb2:	d1d6      	bne.n	ec62 <rx_parse_task+0x2a>
                    re_ca_uart_decode (terminal.rx_buffer, &uart_payload);
    ecb4:	a902      	add	r1, sp, #8
    ecb6:	4815      	ldr	r0, [pc, #84]	; (ed0c <rx_parse_task+0xd4>)
    ecb8:	f014 ff53 	bl	23b62 <re_ca_uart_decode>
                    break;
    ecbc:	e7d1      	b.n	ec62 <rx_parse_task+0x2a>
                    re_ca_uart_decode (terminal.rx_buffer, &uart_payload);
    ecbe:	a902      	add	r1, sp, #8
    ecc0:	4812      	ldr	r0, [pc, #72]	; (ed0c <rx_parse_task+0xd4>)
    ecc2:	f014 ff4e 	bl	23b62 <re_ca_uart_decode>
                    adv_post_send_report((void *)&uart_payload);
    ecc6:	a802      	add	r0, sp, #8
    ecc8:	f7ff fdbc 	bl	e844 <adv_post_send_report>
                    break;
    eccc:	e7c9      	b.n	ec62 <rx_parse_task+0x2a>
                    re_ca_uart_decode (terminal.rx_buffer, &uart_payload);
    ecce:	a902      	add	r1, sp, #8
    ecd0:	480e      	ldr	r0, [pc, #56]	; (ed0c <rx_parse_task+0xd4>)
    ecd2:	f014 ff46 	bl	23b62 <re_ca_uart_decode>
                    mac.mac[0U] = (uart_payload.params.device_id.addr >> 40U) & 0xFFU;
    ecd6:	f8dd 3011 	ldr.w	r3, [sp, #17]
    ecda:	f8dd 2015 	ldr.w	r2, [sp, #21]
                    mac.mac[5U] = (uart_payload.params.device_id.addr >> 0U) & 0xFFU;
    ecde:	f88d 3005 	strb.w	r3, [sp, #5]
                    mac.mac[0U] = (uart_payload.params.device_id.addr >> 40U) & 0xFFU;
    ece2:	0a11      	lsrs	r1, r2, #8
                    mac.mac[1U] = (uart_payload.params.device_id.addr >> 32U) & 0xFFU;
    ece4:	f88d 2001 	strb.w	r2, [sp, #1]
                    mac.mac[2U] = (uart_payload.params.device_id.addr >> 24U) & 0xFFU;
    ece8:	0e1a      	lsrs	r2, r3, #24
    ecea:	f88d 2002 	strb.w	r2, [sp, #2]
                    mac.mac[3U] = (uart_payload.params.device_id.addr >> 16U) & 0xFFU;
    ecee:	0c1a      	lsrs	r2, r3, #16
    ecf0:	f88d 2003 	strb.w	r2, [sp, #3]
                    mac.mac[4U] = (uart_payload.params.device_id.addr >> 8U) & 0xFFU;
    ecf4:	0a1a      	lsrs	r2, r3, #8
                    mac.mac[0U] = (uart_payload.params.device_id.addr >> 40U) & 0xFFU;
    ecf6:	f88d 1000 	strb.w	r1, [sp]
                    mac.mac[4U] = (uart_payload.params.device_id.addr >> 8U) & 0xFFU;
    ecfa:	f88d 2004 	strb.w	r2, [sp, #4]
                    update_nrf_mac(mac);
    ecfe:	e9dd 0100 	ldrd	r0, r1, [sp]
    ed02:	f7ff fd3d 	bl	e780 <update_nrf_mac>
                    break;
    ed06:	e7ac      	b.n	ec62 <rx_parse_task+0x2a>
    ed08:	20028226 	.word	0x20028226
    ed0c:	2002822a 	.word	0x2002822a

0000ed10 <uart_fifo_callback>:

static void uart_fifo_callback(struct device *dev)
{
    ed10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (terminal.size == 0){
    ed12:	4c1f      	ldr	r4, [pc, #124]	; (ed90 <uart_fifo_callback+0x80>)
{
    ed14:	4605      	mov	r5, r0
    if (terminal.size == 0){
    ed16:	6823      	ldr	r3, [r4, #0]
    ed18:	bb53      	cbnz	r3, ed70 <uart_fifo_callback+0x60>
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    ed1a:	6883      	ldr	r3, [r0, #8]
    ed1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ed1e:	bb4b      	cbnz	r3, ed74 <uart_fifo_callback+0x64>
    ed20:	481c      	ldr	r0, [pc, #112]	; (ed94 <uart_fifo_callback+0x84>)
    ed22:	4b1d      	ldr	r3, [pc, #116]	; (ed98 <uart_fifo_callback+0x88>)
        uint8_t data;
        if (!uart_irq_update(dev)) {
            LOG_ERR("Error: uart_irq_update");
    ed24:	491d      	ldr	r1, [pc, #116]	; (ed9c <uart_fifo_callback+0x8c>)
    ed26:	1ac0      	subs	r0, r0, r3
    ed28:	08c0      	lsrs	r0, r0, #3
    ed2a:	0180      	lsls	r0, r0, #6
    ed2c:	f040 0001 	orr.w	r0, r0, #1
    ed30:	f015 fbe6 	bl	24500 <log_string_sync>
	if (api->irq_rx_ready) {
    ed34:	68ab      	ldr	r3, [r5, #8]
    ed36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ed38:	b1d3      	cbz	r3, ed70 <uart_fifo_callback+0x60>
		return api->irq_rx_ready(dev);
    ed3a:	4628      	mov	r0, r5
    ed3c:	4798      	blx	r3
        }
        if (uart_irq_rx_ready(dev)) {
    ed3e:	b1b8      	cbz	r0, ed70 <uart_fifo_callback+0x60>
	if (api->fifo_read) {
    ed40:	68ab      	ldr	r3, [r5, #8]
    ed42:	699b      	ldr	r3, [r3, #24]
    ed44:	b1a3      	cbz	r3, ed70 <uart_fifo_callback+0x60>
		return api->fifo_read(dev, rx_data, size);
    ed46:	2201      	movs	r2, #1
    ed48:	4628      	mov	r0, r5
    ed4a:	f10d 0107 	add.w	r1, sp, #7
    ed4e:	4798      	blx	r3
            int rx_size_it = uart_fifo_read(dev, &data, 1);
            if(rx_size_it > 0){
    ed50:	2800      	cmp	r0, #0
    ed52:	dd0d      	ble.n	ed70 <uart_fifo_callback+0x60>
                rx_size += rx_size_it;
    ed54:	4a12      	ldr	r2, [pc, #72]	; (eda0 <uart_fifo_callback+0x90>)
                if (data != 0x0A){
    ed56:	f89d 5007 	ldrb.w	r5, [sp, #7]
                rx_size += rx_size_it;
    ed5a:	6813      	ldr	r3, [r2, #0]
    ed5c:	4911      	ldr	r1, [pc, #68]	; (eda4 <uart_fifo_callback+0x94>)
    ed5e:	4418      	add	r0, r3
                if (data != 0x0A){
    ed60:	2d0a      	cmp	r5, #10
    ed62:	680b      	ldr	r3, [r1, #0]
                rx_size += rx_size_it;
    ed64:	6010      	str	r0, [r2, #0]
                if (data != 0x0A){
    ed66:	d009      	beq.n	ed7c <uart_fifo_callback+0x6c>
                    terminal.rx_buffer[rx_i] = data;
    ed68:	441c      	add	r4, r3
                    ++rx_i;
    ed6a:	3301      	adds	r3, #1
                    terminal.rx_buffer[rx_i] = data;
    ed6c:	7125      	strb	r5, [r4, #4]
                    ++rx_i;
    ed6e:	600b      	str	r3, [r1, #0]
                    rx_parse_task();
                }
            }
        }
    }
}
    ed70:	b003      	add	sp, #12
    ed72:	bd30      	pop	{r4, r5, pc}
		return api->irq_update(dev);
    ed74:	4798      	blx	r3
        if (!uart_irq_update(dev)) {
    ed76:	2800      	cmp	r0, #0
    ed78:	d1dc      	bne.n	ed34 <uart_fifo_callback+0x24>
    ed7a:	e7d1      	b.n	ed20 <uart_fifo_callback+0x10>
                    terminal.size = rx_size;
    ed7c:	6020      	str	r0, [r4, #0]
                    terminal.rx_buffer[rx_i] = data;
    ed7e:	441c      	add	r4, r3
                    rx_i=0;
    ed80:	2300      	movs	r3, #0
                    terminal.rx_buffer[rx_i] = data;
    ed82:	7125      	strb	r5, [r4, #4]
                    rx_i=0;
    ed84:	600b      	str	r3, [r1, #0]
                    rx_size = 0;
    ed86:	6013      	str	r3, [r2, #0]
                    rx_parse_task();
    ed88:	f7ff ff56 	bl	ec38 <rx_parse_task>
}
    ed8c:	e7f0      	b.n	ed70 <uart_fifo_callback+0x60>
    ed8e:	bf00      	nop
    ed90:	20028226 	.word	0x20028226
    ed94:	0002a36c 	.word	0x0002a36c
    ed98:	0002a2c4 	.word	0x0002a2c4
    ed9c:	0002b0f7 	.word	0x0002b0f7
    eda0:	200224a4 	.word	0x200224a4
    eda4:	200224a0 	.word	0x200224a0

0000eda8 <uart_driver_write>:


void uart_driver_write(uint8_t *data, uint8_t data_length)      
{
    eda8:	b570      	push	{r4, r5, r6, lr}
    edaa:	4604      	mov	r4, r0
    uint8_t i;
    for (i = 0; i < data_length; i++) {
        //printk("%02X", data[i]);
        uart_poll_out(uart_dev, data[i]);
    edac:	4e05      	ldr	r6, [pc, #20]	; (edc4 <uart_driver_write+0x1c>)
    edae:	1845      	adds	r5, r0, r1
    for (i = 0; i < data_length; i++) {
    edb0:	42ac      	cmp	r4, r5
    edb2:	d100      	bne.n	edb6 <uart_driver_write+0xe>
    }
}
    edb4:	bd70      	pop	{r4, r5, r6, pc}
        uart_poll_out(uart_dev, data[i]);
    edb6:	6830      	ldr	r0, [r6, #0]
    edb8:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    edbc:	6883      	ldr	r3, [r0, #8]
    edbe:	685b      	ldr	r3, [r3, #4]
    edc0:	4798      	blx	r3
    for (i = 0; i < data_length; i++) {
    edc2:	e7f5      	b.n	edb0 <uart_driver_write+0x8>
    edc4:	200224a8 	.word	0x200224a8

0000edc8 <uart_init>:

uint8_t uart_init()
{
    edc8:	b510      	push	{r4, lr}
    edca:	480c      	ldr	r0, [pc, #48]	; (edfc <uart_init+0x34>)
    edcc:	f010 fd9a 	bl	1f904 <z_impl_device_get_binding>
	uart_dev = device_get_binding(BLE_UART);
    edd0:	4c0b      	ldr	r4, [pc, #44]	; (ee00 <uart_init+0x38>)
    edd2:	4602      	mov	r2, r0
    edd4:	6020      	str	r0, [r4, #0]
    if (!uart_dev) {
    edd6:	b170      	cbz	r0, edf6 <uart_init+0x2e>
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    edd8:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    edda:	b11b      	cbz	r3, ede4 <uart_init+0x1c>
    eddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    edde:	b10b      	cbz	r3, ede4 <uart_init+0x1c>
		api->irq_callback_set(dev, cb, user_data);
    ede0:	4908      	ldr	r1, [pc, #32]	; (ee04 <uart_init+0x3c>)
    ede2:	4798      	blx	r3
        return 1;
    }
    else{
        uart_irq_callback_set(uart_dev, uart_fifo_callback);
        uart_irq_rx_enable(uart_dev);
    ede4:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable) {
    ede6:	6883      	ldr	r3, [r0, #8]
    ede8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    edea:	b103      	cbz	r3, edee <uart_init+0x26>
		api->irq_rx_enable(dev);
    edec:	4798      	blx	r3
       /* k_thread_create(&rpt_thread, rpt_stack, STACKSIZE,
                                    rx_parse_task, NULL, NULL, NULL,
                                    RPT_PRIORITY, 0, K_NO_WAIT); */
        ruuvi_send_nrf_get_id();
    edee:	f014 fe4e 	bl	23a8e <ruuvi_send_nrf_get_id>
        return 0;
    edf2:	2000      	movs	r0, #0
    } 
}
    edf4:	bd10      	pop	{r4, pc}
        return 1;
    edf6:	2001      	movs	r0, #1
    edf8:	e7fc      	b.n	edf4 <uart_init+0x2c>
    edfa:	bf00      	nop
    edfc:	0002b10e 	.word	0x0002b10e
    ee00:	200224a8 	.word	0x200224a8
    ee04:	0000ed11 	.word	0x0000ed11

0000ee08 <gps_control_is_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ee08:	4b03      	ldr	r3, [pc, #12]	; (ee18 <gps_control_is_enabled+0x10>)
    ee0a:	e8d3 0faf 	lda	r0, [r3]
}

bool gps_control_is_enabled(void)
{
	return atomic_get(&gps_is_enabled);
}
    ee0e:	3800      	subs	r0, #0
    ee10:	bf18      	it	ne
    ee12:	2001      	movne	r0, #1
    ee14:	4770      	bx	lr
    ee16:	bf00      	nop
    ee18:	200224b8 	.word	0x200224b8

0000ee1c <gps_control_is_active>:
    ee1c:	4b03      	ldr	r3, [pc, #12]	; (ee2c <gps_control_is_active+0x10>)
    ee1e:	e8d3 0faf 	lda	r0, [r3]

bool gps_control_is_active(void)
{
	return atomic_get(&gps_is_active);
}
    ee22:	3800      	subs	r0, #0
    ee24:	bf18      	it	ne
    ee26:	2001      	movne	r0, #1
    ee28:	4770      	bx	lr
    ee2a:	bf00      	nop
    ee2c:	200224b4 	.word	0x200224b4

0000ee30 <gps_control_set_active>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ee30:	4b05      	ldr	r3, [pc, #20]	; (ee48 <gps_control_set_active+0x18>)
    ee32:	e8d3 2fef 	ldaex	r2, [r3]
    ee36:	e8c3 0fe1 	stlex	r1, r0, [r3]
    ee3a:	2900      	cmp	r1, #0
    ee3c:	d1f9      	bne.n	ee32 <gps_control_set_active+0x2>

bool gps_control_set_active(bool active)
{
	return atomic_set(&gps_is_active, active ? 1 : 0);
}
    ee3e:	1e10      	subs	r0, r2, #0
    ee40:	bf18      	it	ne
    ee42:	2001      	movne	r0, #1
    ee44:	4770      	bx	lr
    ee46:	bf00      	nop
    ee48:	200224b4 	.word	0x200224b4

0000ee4c <stop>:
	if (gps_dev == NULL) {
    ee4c:	4b16      	ldr	r3, [pc, #88]	; (eea8 <stop+0x5c>)
{
    ee4e:	b510      	push	{r4, lr}
	if (gps_dev == NULL) {
    ee50:	6818      	ldr	r0, [r3, #0]
    ee52:	4c16      	ldr	r4, [pc, #88]	; (eeac <stop+0x60>)
    ee54:	4b16      	ldr	r3, [pc, #88]	; (eeb0 <stop+0x64>)
    ee56:	1ae4      	subs	r4, r4, r3
    ee58:	08e4      	lsrs	r4, r4, #3
    ee5a:	01a4      	lsls	r4, r4, #6
    ee5c:	b930      	cbnz	r0, ee6c <stop+0x20>
		LOG_ERR("GPS controller is not initialized");
    ee5e:	4915      	ldr	r1, [pc, #84]	; (eeb4 <stop+0x68>)
    ee60:	f044 0001 	orr.w	r0, r4, #1
}
    ee64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LOG_INF("GPS operation was stopped");
    ee68:	f015 bb4a 	b.w	24500 <log_string_sync>
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->driver_api;

	if (api->stop == NULL) {
    ee6c:	6883      	ldr	r3, [r0, #8]
    ee6e:	685b      	ldr	r3, [r3, #4]
    ee70:	b14b      	cbz	r3, ee86 <stop+0x3a>
		return -ENOTSUP;
	}

	return api->stop(dev);
    ee72:	4798      	blx	r3
	if (err) {
    ee74:	4602      	mov	r2, r0
    ee76:	b148      	cbz	r0, ee8c <stop+0x40>
		LOG_ERR("Failed to disable GPS, error: %d", err);
    ee78:	f044 0001 	orr.w	r0, r4, #1
    ee7c:	490e      	ldr	r1, [pc, #56]	; (eeb8 <stop+0x6c>)
}
    ee7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Failed to disable GPS, error: %d", err);
    ee82:	f015 bb3d 	b.w	24500 <log_string_sync>
		return -ENOTSUP;
    ee86:	f06f 0285 	mvn.w	r2, #133	; 0x85
    ee8a:	e7f5      	b.n	ee78 <stop+0x2c>
    ee8c:	4b0b      	ldr	r3, [pc, #44]	; (eebc <stop+0x70>)
    ee8e:	e8d3 1fef 	ldaex	r1, [r3]
    ee92:	e8c3 2fec 	stlex	ip, r2, [r3]
    ee96:	f1bc 0f00 	cmp.w	ip, #0
    ee9a:	d1f8      	bne.n	ee8e <stop+0x42>
	gps_control_set_active(false);
    ee9c:	f7ff ffc8 	bl	ee30 <gps_control_set_active>
	LOG_INF("GPS operation was stopped");
    eea0:	4907      	ldr	r1, [pc, #28]	; (eec0 <stop+0x74>)
    eea2:	f044 0003 	orr.w	r0, r4, #3
    eea6:	e7dd      	b.n	ee64 <stop+0x18>
    eea8:	200224b0 	.word	0x200224b0
    eeac:	0002a2f4 	.word	0x0002a2f4
    eeb0:	0002a2c4 	.word	0x0002a2c4
    eeb4:	0002b125 	.word	0x0002b125
    eeb8:	0002b147 	.word	0x0002b147
    eebc:	200224b8 	.word	0x200224b8
    eec0:	0002b168 	.word	0x0002b168

0000eec4 <start>:
{
    eec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    eec6:	b085      	sub	sp, #20
	struct gps_config gps_cfg = {
    eec8:	2210      	movs	r2, #16
    eeca:	2100      	movs	r1, #0
    eecc:	4668      	mov	r0, sp
    eece:	f01a fb0a 	bl	294e6 <memset>
    eed2:	2302      	movs	r3, #2
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
    eed4:	4d30      	ldr	r5, [pc, #192]	; (ef98 <start+0xd4>)
	struct gps_config gps_cfg = {
    eed6:	f88d 3000 	strb.w	r3, [sp]
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
    eeda:	682b      	ldr	r3, [r5, #0]
    eedc:	4c2f      	ldr	r4, [pc, #188]	; (ef9c <start+0xd8>)
    eede:	f503 73b4 	add.w	r3, r3, #360	; 0x168
	struct gps_config gps_cfg = {
    eee2:	9301      	str	r3, [sp, #4]
    eee4:	f44f 73b4 	mov.w	r3, #360	; 0x168
	if (gps_dev == NULL) {
    eee8:	4e2d      	ldr	r6, [pc, #180]	; (efa0 <start+0xdc>)
	struct gps_config gps_cfg = {
    eeea:	9302      	str	r3, [sp, #8]
	if (gps_dev == NULL) {
    eeec:	4b2d      	ldr	r3, [pc, #180]	; (efa4 <start+0xe0>)
    eeee:	6832      	ldr	r2, [r6, #0]
    eef0:	1ae4      	subs	r4, r4, r3
    eef2:	08e4      	lsrs	r4, r4, #3
    eef4:	01a4      	lsls	r4, r4, #6
    eef6:	b932      	cbnz	r2, ef06 <start+0x42>
		LOG_ERR("GPS controller is not initialized properly");
    eef8:	492b      	ldr	r1, [pc, #172]	; (efa8 <start+0xe4>)
    eefa:	f044 0001 	orr.w	r0, r4, #1
    eefe:	f015 faff 	bl	24500 <log_string_sync>
}
    ef02:	b005      	add	sp, #20
    ef04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Enabling PSM");
    ef06:	f044 0703 	orr.w	r7, r4, #3
    ef0a:	4638      	mov	r0, r7
    ef0c:	4927      	ldr	r1, [pc, #156]	; (efac <start+0xe8>)
    ef0e:	f015 faf7 	bl	24500 <log_string_sync>
	err = lte_lc_psm_req(true);
    ef12:	2001      	movs	r0, #1
    ef14:	f007 fae4 	bl	164e0 <lte_lc_psm_req>
	if (err) {
    ef18:	4602      	mov	r2, r0
    ef1a:	b198      	cbz	r0, ef44 <start+0x80>
		LOG_ERR("PSM request failed, error: %d", err);
    ef1c:	4924      	ldr	r1, [pc, #144]	; (efb0 <start+0xec>)
    ef1e:	f044 0001 	orr.w	r0, r4, #1
    ef22:	f015 faed 	bl	24500 <log_string_sync>
	err = gps_start(gps_dev, &gps_cfg);
    ef26:	6830      	ldr	r0, [r6, #0]
	if ((dev == NULL) || (cfg == NULL)) {
    ef28:	b188      	cbz	r0, ef4e <start+0x8a>
	if (api->start == NULL) {
    ef2a:	6883      	ldr	r3, [r0, #8]
    ef2c:	681b      	ldr	r3, [r3, #0]
    ef2e:	b18b      	cbz	r3, ef54 <start+0x90>
	return api->start(dev, cfg);
    ef30:	4669      	mov	r1, sp
    ef32:	4798      	blx	r3
	if (err) {
    ef34:	4602      	mov	r2, r0
    ef36:	b180      	cbz	r0, ef5a <start+0x96>
		LOG_ERR("Failed to enable GPS, error: %d", err);
    ef38:	491e      	ldr	r1, [pc, #120]	; (efb4 <start+0xf0>)
    ef3a:	f044 0001 	orr.w	r0, r4, #1
	LOG_INF("before the GPS is stopped. It's restarted every %d seconds",
    ef3e:	f015 fadf 	bl	24500 <log_string_sync>
    ef42:	e7de      	b.n	ef02 <start+0x3e>
		LOG_INF("PSM enabled");
    ef44:	4638      	mov	r0, r7
    ef46:	491c      	ldr	r1, [pc, #112]	; (efb8 <start+0xf4>)
    ef48:	f015 fada 	bl	24500 <log_string_sync>
    ef4c:	e7eb      	b.n	ef26 <start+0x62>
		return -EINVAL;
    ef4e:	f06f 0215 	mvn.w	r2, #21
    ef52:	e7f1      	b.n	ef38 <start+0x74>
		return -ENOTSUP;
    ef54:	f06f 0285 	mvn.w	r2, #133	; 0x85
    ef58:	e7ee      	b.n	ef38 <start+0x74>
    ef5a:	2001      	movs	r0, #1
    ef5c:	4b17      	ldr	r3, [pc, #92]	; (efbc <start+0xf8>)
    ef5e:	e8d3 2fef 	ldaex	r2, [r3]
    ef62:	e8c3 0fe1 	stlex	r1, r0, [r3]
    ef66:	2900      	cmp	r1, #0
    ef68:	d1f9      	bne.n	ef5e <start+0x9a>
	LOG_INF("GPS started successfully. Searching for satellites ");
    ef6a:	f044 0403 	orr.w	r4, r4, #3
	gps_control_set_active(true);
    ef6e:	f7ff ff5f 	bl	ee30 <gps_control_set_active>
	LOG_INF("GPS started successfully. Searching for satellites ");
    ef72:	4620      	mov	r0, r4
    ef74:	4912      	ldr	r1, [pc, #72]	; (efc0 <start+0xfc>)
    ef76:	f015 fac3 	bl	24500 <log_string_sync>
	LOG_INF("to get position fix. This may take several minutes.");
    ef7a:	4620      	mov	r0, r4
    ef7c:	4911      	ldr	r1, [pc, #68]	; (efc4 <start+0x100>)
    ef7e:	f015 fabf 	bl	24500 <log_string_sync>
	LOG_INF("The device will attempt to get a fix for %d seconds, ",
    ef82:	f44f 72b4 	mov.w	r2, #360	; 0x168
    ef86:	4620      	mov	r0, r4
    ef88:	490f      	ldr	r1, [pc, #60]	; (efc8 <start+0x104>)
    ef8a:	f015 fab9 	bl	24500 <log_string_sync>
	LOG_INF("before the GPS is stopped. It's restarted every %d seconds",
    ef8e:	4620      	mov	r0, r4
    ef90:	682a      	ldr	r2, [r5, #0]
    ef92:	490e      	ldr	r1, [pc, #56]	; (efcc <start+0x108>)
    ef94:	e7d3      	b.n	ef3e <start+0x7a>
    ef96:	bf00      	nop
    ef98:	200224bc 	.word	0x200224bc
    ef9c:	0002a2f4 	.word	0x0002a2f4
    efa0:	200224b0 	.word	0x200224b0
    efa4:	0002a2c4 	.word	0x0002a2c4
    efa8:	0002b182 	.word	0x0002b182
    efac:	0002b1ad 	.word	0x0002b1ad
    efb0:	0002b1ba 	.word	0x0002b1ba
    efb4:	0002b1e4 	.word	0x0002b1e4
    efb8:	0002b1d8 	.word	0x0002b1d8
    efbc:	200224b8 	.word	0x200224b8
    efc0:	0002b204 	.word	0x0002b204
    efc4:	0002b238 	.word	0x0002b238
    efc8:	0002b26c 	.word	0x0002b26c
    efcc:	0002b2a2 	.word	0x0002b2a2

0000efd0 <gps_control_start>:

void gps_control_start(u32_t delay_ms)
{
    efd0:	b5d0      	push	{r4, r6, r7, lr}
    efd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    efd6:	f240 36e7 	movw	r6, #999	; 0x3e7
    efda:	2700      	movs	r7, #0
    efdc:	fbe1 6700 	umlal	r6, r7, r1, r0
	k_delayed_work_submit_to_queue(app_work_q, &start_work,
    efe0:	4b08      	ldr	r3, [pc, #32]	; (f004 <gps_control_start+0x34>)
    efe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    efe6:	681c      	ldr	r4, [r3, #0]
    efe8:	4630      	mov	r0, r6
    efea:	2300      	movs	r3, #0
    efec:	4639      	mov	r1, r7
    efee:	f7fd fbe3 	bl	c7b8 <__aeabi_uldivmod>
    eff2:	2300      	movs	r3, #0
    eff4:	4602      	mov	r2, r0
    eff6:	4904      	ldr	r1, [pc, #16]	; (f008 <gps_control_start+0x38>)
    eff8:	4620      	mov	r0, r4
				       K_MSEC(delay_ms));
}
    effa:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	k_delayed_work_submit_to_queue(app_work_q, &start_work,
    effe:	f011 bcd1 	b.w	209a4 <k_delayed_work_submit_to_queue>
    f002:	bf00      	nop
    f004:	200224ac 	.word	0x200224ac
    f008:	200224c0 	.word	0x200224c0

0000f00c <gps_control_stop>:

void gps_control_stop(u32_t delay_ms)
{
    f00c:	b5d0      	push	{r4, r6, r7, lr}
    f00e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    f012:	f240 36e7 	movw	r6, #999	; 0x3e7
    f016:	2700      	movs	r7, #0
    f018:	fbe1 6700 	umlal	r6, r7, r1, r0
	k_delayed_work_submit_to_queue(app_work_q, &stop_work,
    f01c:	4b08      	ldr	r3, [pc, #32]	; (f040 <gps_control_stop+0x34>)
    f01e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f022:	681c      	ldr	r4, [r3, #0]
    f024:	4630      	mov	r0, r6
    f026:	2300      	movs	r3, #0
    f028:	4639      	mov	r1, r7
    f02a:	f7fd fbc5 	bl	c7b8 <__aeabi_uldivmod>
    f02e:	2300      	movs	r3, #0
    f030:	4602      	mov	r2, r0
    f032:	4904      	ldr	r1, [pc, #16]	; (f044 <gps_control_stop+0x38>)
    f034:	4620      	mov	r0, r4
				       K_MSEC(delay_ms));
}
    f036:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	k_delayed_work_submit_to_queue(app_work_q, &stop_work,
    f03a:	f011 bcb3 	b.w	209a4 <k_delayed_work_submit_to_queue>
    f03e:	bf00      	nop
    f040:	200224ac 	.word	0x200224ac
    f044:	200224e0 	.word	0x200224e0

0000f048 <gps_control_get_gps_reporting_interval>:

int gps_control_get_gps_reporting_interval(void)
{
	return gps_reporting_interval_seconds;
}
    f048:	4b01      	ldr	r3, [pc, #4]	; (f050 <gps_control_get_gps_reporting_interval+0x8>)
    f04a:	6818      	ldr	r0, [r3, #0]
    f04c:	4770      	bx	lr
    f04e:	bf00      	nop
    f050:	200224bc 	.word	0x200224bc

0000f054 <gps_control_init>:

/** @brief Configures and starts the GPS device. */
int gps_control_init(struct k_work_q *work_q, gps_event_handler_t handler)
{
    f054:	b570      	push	{r4, r5, r6, lr}
	int err;
	static bool is_init;

	if (is_init) {
    f056:	4e27      	ldr	r6, [pc, #156]	; (f0f4 <gps_control_init+0xa0>)
{
    f058:	460d      	mov	r5, r1
	if (is_init) {
    f05a:	7833      	ldrb	r3, [r6, #0]
    f05c:	2b00      	cmp	r3, #0
    f05e:	d142      	bne.n	f0e6 <gps_control_init+0x92>
		return -EALREADY;
	}

	if ((work_q == NULL) || (handler == NULL)) {
    f060:	2800      	cmp	r0, #0
    f062:	d043      	beq.n	f0ec <gps_control_init+0x98>
    f064:	2900      	cmp	r1, #0
    f066:	d041      	beq.n	f0ec <gps_control_init+0x98>
		return -EINVAL;
	}

	app_work_q = work_q;
    f068:	4b23      	ldr	r3, [pc, #140]	; (f0f8 <gps_control_init+0xa4>)
    f06a:	6018      	str	r0, [r3, #0]
    f06c:	4823      	ldr	r0, [pc, #140]	; (f0fc <gps_control_init+0xa8>)
    f06e:	f010 fc49 	bl	1f904 <z_impl_device_get_binding>

	gps_dev = device_get_binding(CONFIG_GPS_DEV_NAME);
    f072:	4a23      	ldr	r2, [pc, #140]	; (f100 <gps_control_init+0xac>)
    f074:	4c23      	ldr	r4, [pc, #140]	; (f104 <gps_control_init+0xb0>)
    f076:	6010      	str	r0, [r2, #0]
	if (gps_dev == NULL) {
    f078:	4a23      	ldr	r2, [pc, #140]	; (f108 <gps_control_init+0xb4>)
    f07a:	1aa4      	subs	r4, r4, r2
    f07c:	08e4      	lsrs	r4, r4, #3
    f07e:	01a4      	lsls	r4, r4, #6
    f080:	b968      	cbnz	r0, f09e <gps_control_init+0x4a>
		LOG_ERR("Could not get %s device",
    f082:	481e      	ldr	r0, [pc, #120]	; (f0fc <gps_control_init+0xa8>)
    f084:	f015 fa4e 	bl	24524 <log_strdup>
    f088:	f044 0401 	orr.w	r4, r4, #1
    f08c:	4602      	mov	r2, r0
    f08e:	491f      	ldr	r1, [pc, #124]	; (f10c <gps_control_init+0xb8>)
    f090:	4620      	mov	r0, r4
    f092:	f015 fa35 	bl	24500 <log_string_sync>
			log_strdup(CONFIG_GPS_DEV_NAME));
		return -ENODEV;
    f096:	f06f 0512 	mvn.w	r5, #18
	LOG_INF("GPS initialized");

	is_init = true;

	return err;
}
    f09a:	4628      	mov	r0, r5
    f09c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->driver_api;

	if (api->init == NULL) {
    f09e:	6883      	ldr	r3, [r0, #8]
    f0a0:	68db      	ldr	r3, [r3, #12]
    f0a2:	b153      	cbz	r3, f0ba <gps_control_init+0x66>
		return -ENOTSUP;
	}

	return api->init(dev, handler);
    f0a4:	4629      	mov	r1, r5
    f0a6:	4798      	blx	r3
	if (err) {
    f0a8:	4605      	mov	r5, r0
    f0aa:	b148      	cbz	r0, f0c0 <gps_control_init+0x6c>
		LOG_ERR("Could not initialize GPS, error: %d", err);
    f0ac:	462a      	mov	r2, r5
    f0ae:	4918      	ldr	r1, [pc, #96]	; (f110 <gps_control_init+0xbc>)
    f0b0:	f044 0001 	orr.w	r0, r4, #1
    f0b4:	f015 fa24 	bl	24500 <log_string_sync>
		return err;
    f0b8:	e7ef      	b.n	f09a <gps_control_init+0x46>
		return -ENOTSUP;
    f0ba:	f06f 0585 	mvn.w	r5, #133	; 0x85
    f0be:	e7f5      	b.n	f0ac <gps_control_init+0x58>
	k_delayed_work_init(&start_work, start);
    f0c0:	4914      	ldr	r1, [pc, #80]	; (f114 <gps_control_init+0xc0>)
    f0c2:	4815      	ldr	r0, [pc, #84]	; (f118 <gps_control_init+0xc4>)
    f0c4:	f01a f80e 	bl	290e4 <k_delayed_work_init>
	k_delayed_work_init(&stop_work, stop);
    f0c8:	4914      	ldr	r1, [pc, #80]	; (f11c <gps_control_init+0xc8>)
    f0ca:	4815      	ldr	r0, [pc, #84]	; (f120 <gps_control_init+0xcc>)
    f0cc:	f01a f80a 	bl	290e4 <k_delayed_work_init>
	gps_reporting_interval_seconds =
    f0d0:	221e      	movs	r2, #30
    f0d2:	4b14      	ldr	r3, [pc, #80]	; (f124 <gps_control_init+0xd0>)
	LOG_INF("GPS initialized");
    f0d4:	4914      	ldr	r1, [pc, #80]	; (f128 <gps_control_init+0xd4>)
    f0d6:	f044 0003 	orr.w	r0, r4, #3
	gps_reporting_interval_seconds =
    f0da:	601a      	str	r2, [r3, #0]
	LOG_INF("GPS initialized");
    f0dc:	f015 fa10 	bl	24500 <log_string_sync>
	is_init = true;
    f0e0:	2301      	movs	r3, #1
    f0e2:	7033      	strb	r3, [r6, #0]
	return err;
    f0e4:	e7d9      	b.n	f09a <gps_control_init+0x46>
		return -EALREADY;
    f0e6:	f06f 0577 	mvn.w	r5, #119	; 0x77
    f0ea:	e7d6      	b.n	f09a <gps_control_init+0x46>
		return -EINVAL;
    f0ec:	f06f 0515 	mvn.w	r5, #21
    f0f0:	e7d3      	b.n	f09a <gps_control_init+0x46>
    f0f2:	bf00      	nop
    f0f4:	20028e2b 	.word	0x20028e2b
    f0f8:	200224ac 	.word	0x200224ac
    f0fc:	0002b2dd 	.word	0x0002b2dd
    f100:	200224b0 	.word	0x200224b0
    f104:	0002a2f4 	.word	0x0002a2f4
    f108:	0002a2c4 	.word	0x0002a2c4
    f10c:	0002b2e9 	.word	0x0002b2e9
    f110:	0002b301 	.word	0x0002b301
    f114:	0000eec5 	.word	0x0000eec5
    f118:	200224c0 	.word	0x200224c0
    f11c:	0000ee4d 	.word	0x0000ee4d
    f120:	200224e0 	.word	0x200224e0
    f124:	200224bc 	.word	0x200224bc
    f128:	0002b325 	.word	0x0002b325

0000f12c <close_https_socket>:
    //Remove later
    LOG_INF("Message %d Sent\n", msgcnt);
    return 0;
}

static void close_https_socket(void){
    f12c:	b508      	push	{r3, lr}
    f12e:	480a      	ldr	r0, [pc, #40]	; (f158 <close_https_socket+0x2c>)
    f130:	4b0a      	ldr	r3, [pc, #40]	; (f15c <close_https_socket+0x30>)
    LOG_INF("Finished. Closing HTTPS socket");
    f132:	490b      	ldr	r1, [pc, #44]	; (f160 <close_https_socket+0x34>)
    f134:	1ac0      	subs	r0, r0, r3
    f136:	08c0      	lsrs	r0, r0, #3
    f138:	0180      	lsls	r0, r0, #6
    f13a:	f040 0003 	orr.w	r0, r0, #3
    f13e:	f015 f9df 	bl	24500 <log_string_sync>
    freeaddrinfo(res);
    f142:	4b08      	ldr	r3, [pc, #32]	; (f164 <close_https_socket+0x38>)
	return zsock_getaddrinfo(host, service, hints, res);
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
    f144:	6818      	ldr	r0, [r3, #0]
    f146:	f015 fa26 	bl	24596 <zsock_freeaddrinfo>
	(void)close(fd);
    f14a:	4b07      	ldr	r3, [pc, #28]	; (f168 <close_https_socket+0x3c>)
    f14c:	6818      	ldr	r0, [r3, #0]
	return;
}
    f14e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&sock, K_SYSCALL_ZSOCK_CLOSE);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_close(sock);
    f152:	f015 baa6 	b.w	246a2 <z_impl_zsock_close>
    f156:	bf00      	nop
    f158:	0002a2fc 	.word	0x0002a2fc
    f15c:	0002a2c4 	.word	0x0002a2c4
    f160:	0002b341 	.word	0x0002b341
    f164:	20022508 	.word	0x20022508
    f168:	20022500 	.word	0x20022500

0000f16c <open_https_socket>:

static int open_https_socket(void){
    f16c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f16e:	4b2f      	ldr	r3, [pc, #188]	; (f22c <open_https_socket+0xc0>)
    f170:	4d2f      	ldr	r5, [pc, #188]	; (f230 <open_https_socket+0xc4>)
	return zsock_getaddrinfo(host, service, hints, res);
    f172:	4f30      	ldr	r7, [pc, #192]	; (f234 <open_https_socket+0xc8>)
    f174:	1aed      	subs	r5, r5, r3
    f176:	08ed      	lsrs	r5, r5, #3
    LOG_INF("Opening HTTP Socket");
    f178:	01ad      	lsls	r5, r5, #6
    f17a:	492f      	ldr	r1, [pc, #188]	; (f238 <open_https_socket+0xcc>)
static int open_https_socket(void){
    f17c:	b085      	sub	sp, #20
    LOG_INF("Opening HTTP Socket");
    f17e:	f045 0003 	orr.w	r0, r5, #3
    f182:	f015 f9bd 	bl	24500 <log_string_sync>
    f186:	463b      	mov	r3, r7
    f188:	2100      	movs	r1, #0
    f18a:	4a2c      	ldr	r2, [pc, #176]	; (f23c <open_https_socket+0xd0>)
    f18c:	482c      	ldr	r0, [pc, #176]	; (f240 <open_https_socket+0xd4>)
    f18e:	f015 fa00 	bl	24592 <zsock_getaddrinfo>
    int err;
	err = getaddrinfo(CONFIG_RUUVI_ENDPOINT_HOST, NULL, &hints, &res);
	if (err) {
    f192:	4604      	mov	r4, r0
    f194:	b158      	cbz	r0, f1ae <open_https_socket+0x42>
		LOG_ERR("getaddrinfo errno %d\n", errno);
    f196:	f015 fdbb 	bl	24d10 <__errno>
    f19a:	f045 0501 	orr.w	r5, r5, #1
    f19e:	6802      	ldr	r2, [r0, #0]
    f1a0:	4928      	ldr	r1, [pc, #160]	; (f244 <open_https_socket+0xd8>)
    f1a2:	4628      	mov	r0, r5
    f1a4:	f015 f9ac 	bl	24500 <log_string_sync>
		LOG_ERR("connect() failed, err: %d\n", errno);
		close_https_socket();
		return err;
	}
	return 0;
}
    f1a8:	4620      	mov	r0, r4
    f1aa:	b005      	add	sp, #20
    f1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((struct sockaddr_in *)res->ai_addr)->sin_port = htons(443);
    f1ae:	f64b 3201 	movw	r2, #47873	; 0xbb01
    f1b2:	683b      	ldr	r3, [r7, #0]
    f1b4:	699b      	ldr	r3, [r3, #24]
    f1b6:	805a      	strh	r2, [r3, #2]
	return z_impl_zsock_socket(family, type, proto);
    f1b8:	2101      	movs	r1, #1
    f1ba:	f44f 7281 	mov.w	r2, #258	; 0x102
    f1be:	4608      	mov	r0, r1
    f1c0:	f001 f904 	bl	103cc <z_impl_zsock_socket>
	fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TLS_1_2);
    f1c4:	4e20      	ldr	r6, [pc, #128]	; (f248 <open_https_socket+0xdc>)
	if (fd == -1) {
    f1c6:	1c43      	adds	r3, r0, #1
    f1c8:	4604      	mov	r4, r0
	fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TLS_1_2);
    f1ca:	6030      	str	r0, [r6, #0]
	if (fd == -1) {
    f1cc:	d107      	bne.n	f1de <open_https_socket+0x72>
		LOG_ERR("Failed to open socket!\n");
    f1ce:	491f      	ldr	r1, [pc, #124]	; (f24c <open_https_socket+0xe0>)
    f1d0:	f045 0001 	orr.w	r0, r5, #1
    f1d4:	f015 f994 	bl	24500 <log_string_sync>
		close_https_socket();
    f1d8:	f7ff ffa8 	bl	f12c <close_https_socket>
		return err;
    f1dc:	e7e4      	b.n	f1a8 <open_https_socket+0x3c>
	int verify = OPTIONAL;
    f1de:	2301      	movs	r3, #1
    f1e0:	9303      	str	r3, [sp, #12]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke5(*(uintptr_t *)&sock, *(uintptr_t *)&level, *(uintptr_t *)&optname, *(uintptr_t *)&optval, *(uintptr_t *)&optlen, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
    f1e2:	2304      	movs	r3, #4
    f1e4:	2205      	movs	r2, #5
    f1e6:	9300      	str	r3, [sp, #0]
    f1e8:	f44f 718d 	mov.w	r1, #282	; 0x11a
    f1ec:	ab03      	add	r3, sp, #12
    f1ee:	f015 fc89 	bl	24b04 <z_impl_zsock_setsockopt>
	if (err) {
    f1f2:	4604      	mov	r4, r0
    f1f4:	b148      	cbz	r0, f20a <open_https_socket+0x9e>
		LOG_ERR("setsockopt err: %d\n", errno);
    f1f6:	f015 fd8b 	bl	24d10 <__errno>
    f1fa:	4915      	ldr	r1, [pc, #84]	; (f250 <open_https_socket+0xe4>)
    f1fc:	6802      	ldr	r2, [r0, #0]
    f1fe:	f045 0501 	orr.w	r5, r5, #1
		LOG_ERR("connect() failed, err: %d\n", errno);
    f202:	4628      	mov	r0, r5
    f204:	f015 f97c 	bl	24500 <log_string_sync>
    f208:	e7e6      	b.n	f1d8 <open_https_socket+0x6c>
	err = connect(fd, res->ai_addr, sizeof(struct sockaddr_in));
    f20a:	683b      	ldr	r3, [r7, #0]
    f20c:	6830      	ldr	r0, [r6, #0]
    f20e:	6999      	ldr	r1, [r3, #24]
	return z_impl_zsock_connect(sock, addr, addrlen);
    f210:	2208      	movs	r2, #8
    f212:	f015 fa5f 	bl	246d4 <z_impl_zsock_connect>
	if (err) {
    f216:	4604      	mov	r4, r0
    f218:	2800      	cmp	r0, #0
    f21a:	d0c5      	beq.n	f1a8 <open_https_socket+0x3c>
		LOG_ERR("connect() failed, err: %d\n", errno);
    f21c:	f015 fd78 	bl	24d10 <__errno>
    f220:	f045 0501 	orr.w	r5, r5, #1
    f224:	6802      	ldr	r2, [r0, #0]
    f226:	490b      	ldr	r1, [pc, #44]	; (f254 <open_https_socket+0xe8>)
    f228:	e7eb      	b.n	f202 <open_https_socket+0x96>
    f22a:	bf00      	nop
    f22c:	0002a2c4 	.word	0x0002a2c4
    f230:	0002a2fc 	.word	0x0002a2fc
    f234:	20022508 	.word	0x20022508
    f238:	0002b360 	.word	0x0002b360
    f23c:	20020058 	.word	0x20020058
    f240:	0002b374 	.word	0x0002b374
    f244:	0002b381 	.word	0x0002b381
    f248:	20022500 	.word	0x20022500
    f24c:	0002b397 	.word	0x0002b397
    f250:	0002b3af 	.word	0x0002b3af
    f254:	0002b3c3 	.word	0x0002b3c3

0000f258 <https_post>:

int https_post(char *m, size_t t){
    f258:	b5f0      	push	{r4, r5, r6, r7, lr}
    int bytes;

	int send_data_len = snprintf(send_buf,
    f25a:	4b22      	ldr	r3, [pc, #136]	; (f2e4 <https_post+0x8c>)
int https_post(char *m, size_t t){
    f25c:	b085      	sub	sp, #20
	int send_data_len = snprintf(send_buf,
    f25e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    f262:	9300      	str	r3, [sp, #0]
    f264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    f268:	4b1f      	ldr	r3, [pc, #124]	; (f2e8 <https_post+0x90>)
    f26a:	4a20      	ldr	r2, [pc, #128]	; (f2ec <https_post+0x94>)
    f26c:	4820      	ldr	r0, [pc, #128]	; (f2f0 <https_post+0x98>)
    f26e:	f012 fd8f 	bl	21d90 <sniprintf>
                            mtu_size,
                            POST_TEMPLATE, CONFIG_RUUVI_ENDPOINT_HOST_PATH,
                            CONFIG_RUUVI_ENDPOINT_HOST, t,
                            m);

	size_t off = 0;
    f272:	2400      	movs	r4, #0
	int send_data_len = snprintf(send_buf,
    f274:	4605      	mov	r5, r0
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    f276:	4626      	mov	r6, r4
	do {
		bytes = send(fd, send_buf, send_data_len - off, 0);
    f278:	4f1e      	ldr	r7, [pc, #120]	; (f2f4 <https_post+0x9c>)
    f27a:	6838      	ldr	r0, [r7, #0]
    f27c:	2300      	movs	r3, #0
    f27e:	e9cd 6600 	strd	r6, r6, [sp]
    f282:	491b      	ldr	r1, [pc, #108]	; (f2f0 <https_post+0x98>)
    f284:	1b2a      	subs	r2, r5, r4
    f286:	f015 fa46 	bl	24716 <z_impl_zsock_sendto>
		if (bytes < 0) {
    f28a:	2800      	cmp	r0, #0
    f28c:	da10      	bge.n	f2b0 <https_post+0x58>
    f28e:	4b1a      	ldr	r3, [pc, #104]	; (f2f8 <https_post+0xa0>)
    f290:	4c1a      	ldr	r4, [pc, #104]	; (f2fc <https_post+0xa4>)
    f292:	1ae4      	subs	r4, r4, r3
			LOG_ERR("send() failed, err %d\n", errno);
    f294:	f015 fd3c 	bl	24d10 <__errno>
    f298:	08e4      	lsrs	r4, r4, #3
    f29a:	01a4      	lsls	r4, r4, #6
    f29c:	f044 0401 	orr.w	r4, r4, #1
    f2a0:	6802      	ldr	r2, [r0, #0]
    f2a2:	4917      	ldr	r1, [pc, #92]	; (f300 <https_post+0xa8>)
    f2a4:	4620      	mov	r0, r4
    f2a6:	f015 f92b 	bl	24500 <log_string_sync>
			return 1;
    f2aa:	2001      	movs	r0, #1
    msgcnt++;
    //Remove later
    LOG_INF("Message %d Sent\n", msgcnt);
	memset(send_buf, 0, sizeof(send_buf));
	return 0;
}
    f2ac:	b005      	add	sp, #20
    f2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		off += bytes;
    f2b0:	4404      	add	r4, r0
	}while (off < send_data_len);
    f2b2:	42a5      	cmp	r5, r4
    f2b4:	d8e1      	bhi.n	f27a <https_post+0x22>
    msgcnt++;
    f2b6:	4b13      	ldr	r3, [pc, #76]	; (f304 <https_post+0xac>)
    f2b8:	4810      	ldr	r0, [pc, #64]	; (f2fc <https_post+0xa4>)
    f2ba:	681a      	ldr	r2, [r3, #0]
    LOG_INF("Message %d Sent\n", msgcnt);
    f2bc:	4912      	ldr	r1, [pc, #72]	; (f308 <https_post+0xb0>)
    msgcnt++;
    f2be:	3201      	adds	r2, #1
    f2c0:	601a      	str	r2, [r3, #0]
    f2c2:	4b0d      	ldr	r3, [pc, #52]	; (f2f8 <https_post+0xa0>)
    f2c4:	1ac0      	subs	r0, r0, r3
    f2c6:	08c0      	lsrs	r0, r0, #3
    LOG_INF("Message %d Sent\n", msgcnt);
    f2c8:	0180      	lsls	r0, r0, #6
    f2ca:	f040 0003 	orr.w	r0, r0, #3
    f2ce:	f015 f917 	bl	24500 <log_string_sync>
	memset(send_buf, 0, sizeof(send_buf));
    f2d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    f2d6:	2100      	movs	r1, #0
    f2d8:	4805      	ldr	r0, [pc, #20]	; (f2f0 <https_post+0x98>)
    f2da:	f01a f904 	bl	294e6 <memset>
	return 0;
    f2de:	2000      	movs	r0, #0
    f2e0:	e7e4      	b.n	f2ac <https_post+0x54>
    f2e2:	bf00      	nop
    f2e4:	0002b374 	.word	0x0002b374
    f2e8:	0002b3de 	.word	0x0002b3de
    f2ec:	0002b404 	.word	0x0002b404
    f2f0:	20028e2c 	.word	0x20028e2c
    f2f4:	20022500 	.word	0x20022500
    f2f8:	0002a2c4 	.word	0x0002a2c4
    f2fc:	0002a2fc 	.word	0x0002a2fc
    f300:	0002b497 	.word	0x0002b497
    f304:	20022504 	.word	0x20022504
    f308:	0002b486 	.word	0x0002b486

0000f30c <http_send_online>:
        close_http_socket();
    }
}

void http_send_online(char *imei, char *mac)
{
    f30c:	b570      	push	{r4, r5, r6, lr}
    f30e:	4606      	mov	r6, r0
    f310:	460d      	mov	r5, r1
    cJSON *       root = cJSON_CreateObject();
    f312:	f005 fcb9 	bl	14c88 <cJSON_CreateObject>

    if (root){
    f316:	4604      	mov	r4, r0
    f318:	b328      	cbz	r0, f366 <http_send_online+0x5a>
        cJSON_AddStringToObject(root, "status", "online");
    f31a:	4a19      	ldr	r2, [pc, #100]	; (f380 <http_send_online+0x74>)
    f31c:	4919      	ldr	r1, [pc, #100]	; (f384 <http_send_online+0x78>)
    f31e:	f018 fed9 	bl	280d4 <cJSON_AddStringToObject>
        cJSON_AddStringToObject(root, "gw_imei", imei);
    f322:	4632      	mov	r2, r6
    f324:	4918      	ldr	r1, [pc, #96]	; (f388 <http_send_online+0x7c>)
    f326:	4620      	mov	r0, r4
    f328:	f018 fed4 	bl	280d4 <cJSON_AddStringToObject>
        cJSON_AddStringToObject(root, "gw_mac", mac);
    f32c:	462a      	mov	r2, r5
    f32e:	4620      	mov	r0, r4
    f330:	4916      	ldr	r1, [pc, #88]	; (f38c <http_send_online+0x80>)
    f332:	f018 fecf 	bl	280d4 <cJSON_AddStringToObject>
    }
    else{
        LOG_ERR("%s: can't create root json", __func__);
    }

    char *json_str = cJSON_Print(root);
    f336:	4620      	mov	r0, r4
    f338:	f018 feb1 	bl	2809e <cJSON_Print>
    f33c:	4605      	mov	r5, r0

    cJSON_Delete(root);
    f33e:	4620      	mov	r0, r4
    f340:	f005 fc66 	bl	14c10 <cJSON_Delete>
        err = open_https_socket();
    f344:	f7ff ff12 	bl	f16c <open_https_socket>
    int err = open_socket();
    if(!err){
    f348:	b940      	cbnz	r0, f35c <http_send_online+0x50>
         if(CONFIG_RUUVI_ENDPOINT_HTTPS){
        https_post(json_str, strlen(json_str));
    f34a:	4628      	mov	r0, r5
    f34c:	f7fd fdf4 	bl	cf38 <strlen>
    f350:	4601      	mov	r1, r0
    f352:	4628      	mov	r0, r5
    f354:	f7ff ff80 	bl	f258 <https_post>
        close_https_socket();
    f358:	f7ff fee8 	bl	f12c <close_https_socket>
        else{
            http_post(json_str, strlen(json_str));
        }
        close_socket();
    }
    free(json_str);
    f35c:	4628      	mov	r0, r5
}
    f35e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    free(json_str);
    f362:	f011 bd3f 	b.w	20de4 <free>
    f366:	4b0a      	ldr	r3, [pc, #40]	; (f390 <http_send_online+0x84>)
    f368:	480a      	ldr	r0, [pc, #40]	; (f394 <http_send_online+0x88>)
        LOG_ERR("%s: can't create root json", __func__);
    f36a:	4a0b      	ldr	r2, [pc, #44]	; (f398 <http_send_online+0x8c>)
    f36c:	1ac0      	subs	r0, r0, r3
    f36e:	08c0      	lsrs	r0, r0, #3
    f370:	0180      	lsls	r0, r0, #6
    f372:	490a      	ldr	r1, [pc, #40]	; (f39c <http_send_online+0x90>)
    f374:	f040 0001 	orr.w	r0, r0, #1
    f378:	f015 f8c2 	bl	24500 <log_string_sync>
    f37c:	e7db      	b.n	f336 <http_send_online+0x2a>
    f37e:	bf00      	nop
    f380:	0002b4ae 	.word	0x0002b4ae
    f384:	0002b4b5 	.word	0x0002b4b5
    f388:	0002b4bc 	.word	0x0002b4bc
    f38c:	0002b4c4 	.word	0x0002b4c4
    f390:	0002a2c4 	.word	0x0002a2c4
    f394:	0002a2fc 	.word	0x0002a2fc
    f398:	0002b57c 	.word	0x0002b57c
    f39c:	0002b4cb 	.word	0x0002b4cb

0000f3a0 <http_send_advs>:

void http_send_advs(struct adv_report_table *reports,  double latitude, double longitude,  char *imei, char *mac)
{
    f3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3a4:	ed2d 8b04 	vpush	{d8-d9}
    f3a8:	b089      	sub	sp, #36	; 0x24
    f3aa:	eeb0 9a40 	vmov.f32	s18, s0
    f3ae:	eef0 9a60 	vmov.f32	s19, s1
    f3b2:	eeb0 8a41 	vmov.f32	s16, s2
    f3b6:	eef0 8a61 	vmov.f32	s17, s3
    f3ba:	4617      	mov	r7, r2
    f3bc:	4688      	mov	r8, r1
    f3be:	4606      	mov	r6, r0
    cJSON *tags = 0;
    cJSON *location = cJSON_CreateObject();
    f3c0:	f005 fc62 	bl	14c88 <cJSON_CreateObject>
    time_t now = get_ts();
    f3c4:	f000 f8dc 	bl	f580 <get_ts>
    f3c8:	4682      	mov	sl, r0
    f3ca:	4689      	mov	r9, r1
    adv_report_t *adv;
    cJSON *       root = cJSON_CreateObject();
    f3cc:	f005 fc5c 	bl	14c88 <cJSON_CreateObject>

    if (root){
    f3d0:	4604      	mov	r4, r0
    f3d2:	2800      	cmp	r0, #0
    f3d4:	d07f      	beq.n	f4d6 <http_send_advs+0x136>
        cJSON *gw = cJSON_AddObjectToObject(root, "data");
    f3d6:	495a      	ldr	r1, [pc, #360]	; (f540 <http_send_advs+0x1a0>)
    f3d8:	f018 fe92 	bl	28100 <cJSON_AddObjectToObject>

        if (gw)
    f3dc:	4605      	mov	r5, r0
    f3de:	2800      	cmp	r0, #0
    f3e0:	d062      	beq.n	f4a8 <http_send_advs+0x108>
        {
            location = cJSON_AddObjectToObject(gw, "coordinates");
    f3e2:	4958      	ldr	r1, [pc, #352]	; (f544 <http_send_advs+0x1a4>)
    f3e4:	f018 fe8c 	bl	28100 <cJSON_AddObjectToObject>
            if(location){
    f3e8:	4683      	mov	fp, r0
    f3ea:	2800      	cmp	r0, #0
    f3ec:	d050      	beq.n	f490 <http_send_advs+0xf0>
                cJSON_AddNumberToObject(location, "latitude", latitude);
    f3ee:	eeb0 0a49 	vmov.f32	s0, s18
    f3f2:	eef0 0a69 	vmov.f32	s1, s19
    f3f6:	4954      	ldr	r1, [pc, #336]	; (f548 <http_send_advs+0x1a8>)
    f3f8:	f018 fe57 	bl	280aa <cJSON_AddNumberToObject>
                cJSON_AddNumberToObject(location, "longitude", longitude);
    f3fc:	eeb0 0a48 	vmov.f32	s0, s16
    f400:	eef0 0a68 	vmov.f32	s1, s17
    f404:	4658      	mov	r0, fp
    f406:	4951      	ldr	r1, [pc, #324]	; (f54c <http_send_advs+0x1ac>)
    f408:	f018 fe4f 	bl	280aa <cJSON_AddNumberToObject>
            }
            else
            {
                LOG_ERR("%s: can't create lcoation json", __func__);
            }
            cJSON_AddNumberToObject(gw, "timestamp", now);
    f40c:	4650      	mov	r0, sl
    f40e:	4649      	mov	r1, r9
    f410:	f7fd f8a4 	bl	c55c <__aeabi_l2d>
    f414:	ec41 0b10 	vmov	d0, r0, r1
    f418:	494d      	ldr	r1, [pc, #308]	; (f550 <http_send_advs+0x1b0>)
    f41a:	4628      	mov	r0, r5
    f41c:	f018 fe45 	bl	280aa <cJSON_AddNumberToObject>
            cJSON_AddStringToObject(gw, "gw_imei", imei);
    f420:	4642      	mov	r2, r8
    f422:	494c      	ldr	r1, [pc, #304]	; (f554 <http_send_advs+0x1b4>)
    f424:	4628      	mov	r0, r5
    f426:	f018 fe55 	bl	280d4 <cJSON_AddStringToObject>
            cJSON_AddStringToObject(gw, "gw_mac", mac);
    f42a:	463a      	mov	r2, r7
    f42c:	494a      	ldr	r1, [pc, #296]	; (f558 <http_send_advs+0x1b8>)
    f42e:	4628      	mov	r0, r5
    f430:	f018 fe50 	bl	280d4 <cJSON_AddStringToObject>
            tags = cJSON_AddObjectToObject(gw, "tags");
    f434:	4628      	mov	r0, r5
    f436:	4949      	ldr	r1, [pc, #292]	; (f55c <http_send_advs+0x1bc>)
    f438:	f018 fe62 	bl	28100 <cJSON_AddObjectToObject>
    }
    else{
        LOG_ERR("%s: can't create root json", __func__);
    }

    if (tags)
    f43c:	4680      	mov	r8, r0
    f43e:	2800      	cmp	r0, #0
    f440:	d03d      	beq.n	f4be <http_send_advs+0x11e>
    {
        for (int i = 0; i < reports->num_of_advs; i++)
    f442:	2300      	movs	r3, #0
        {
            adv        = &reports->table[i];
            cJSON *tag = cJSON_CreateObject();
            cJSON_AddNumberToObject(tag, "rssi", adv->rssi);
    f444:	f8df 9134 	ldr.w	r9, [pc, #308]	; f57c <http_send_advs+0x1dc>
            cJSON_AddNumberToObject(tag, "timestamp", adv->timestamp);
    f448:	f8df a104 	ldr.w	sl, [pc, #260]	; f550 <http_send_advs+0x1b0>
            cJSON_AddStringToObject(tag, "data", adv->data);
    f44c:	f8df b0f0 	ldr.w	fp, [pc, #240]	; f540 <http_send_advs+0x1a0>
    f450:	f106 051c 	add.w	r5, r6, #28
        for (int i = 0; i < reports->num_of_advs; i++)
    f454:	6832      	ldr	r2, [r6, #0]
    f456:	429a      	cmp	r2, r3
    f458:	dc47      	bgt.n	f4ea <http_send_advs+0x14a>
    else
    {
        LOG_ERR("%s: can't create tags json", __func__);
    }

    char *json_str = cJSON_Print(root);
    f45a:	4620      	mov	r0, r4
    f45c:	f018 fe1f 	bl	2809e <cJSON_Print>
    f460:	4605      	mov	r5, r0
    //printk("HTTP POST: %s", json_str);
    cJSON_Delete(root);
    f462:	4620      	mov	r0, r4
    f464:	f005 fbd4 	bl	14c10 <cJSON_Delete>
        err = open_https_socket();
    f468:	f7ff fe80 	bl	f16c <open_https_socket>
    int err = open_socket();
    if(!err){
    f46c:	b940      	cbnz	r0, f480 <http_send_advs+0xe0>
       if(CONFIG_RUUVI_ENDPOINT_HTTPS){
        https_post(json_str, strlen(json_str));
    f46e:	4628      	mov	r0, r5
    f470:	f7fd fd62 	bl	cf38 <strlen>
    f474:	4601      	mov	r1, r0
    f476:	4628      	mov	r0, r5
    f478:	f7ff feee 	bl	f258 <https_post>
        close_https_socket();
    f47c:	f7ff fe56 	bl	f12c <close_https_socket>
        else{
            http_post(json_str, strlen(json_str));
        }
        close_socket(); 
    }
    free(json_str);
    f480:	4628      	mov	r0, r5
    f482:	f011 fcaf 	bl	20de4 <free>
}
    f486:	b009      	add	sp, #36	; 0x24
    f488:	ecbd 8b04 	vpop	{d8-d9}
    f48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f490:	4833      	ldr	r0, [pc, #204]	; (f560 <http_send_advs+0x1c0>)
    f492:	4b34      	ldr	r3, [pc, #208]	; (f564 <http_send_advs+0x1c4>)
                LOG_ERR("%s: can't create lcoation json", __func__);
    f494:	4a34      	ldr	r2, [pc, #208]	; (f568 <http_send_advs+0x1c8>)
    f496:	1a1b      	subs	r3, r3, r0
    f498:	08db      	lsrs	r3, r3, #3
    f49a:	019b      	lsls	r3, r3, #6
    f49c:	4933      	ldr	r1, [pc, #204]	; (f56c <http_send_advs+0x1cc>)
    f49e:	f043 0001 	orr.w	r0, r3, #1
    f4a2:	f015 f82d 	bl	24500 <log_string_sync>
    f4a6:	e7b1      	b.n	f40c <http_send_advs+0x6c>
    f4a8:	482e      	ldr	r0, [pc, #184]	; (f564 <http_send_advs+0x1c4>)
    f4aa:	4b2d      	ldr	r3, [pc, #180]	; (f560 <http_send_advs+0x1c0>)
            LOG_ERR("%s: can't create gw json", __func__);
    f4ac:	4a2e      	ldr	r2, [pc, #184]	; (f568 <http_send_advs+0x1c8>)
    f4ae:	1ac0      	subs	r0, r0, r3
    f4b0:	08c0      	lsrs	r0, r0, #3
    f4b2:	0180      	lsls	r0, r0, #6
    f4b4:	492e      	ldr	r1, [pc, #184]	; (f570 <http_send_advs+0x1d0>)
    f4b6:	f040 0001 	orr.w	r0, r0, #1
        LOG_ERR("%s: can't create root json", __func__);
    f4ba:	f015 f821 	bl	24500 <log_string_sync>
    f4be:	4828      	ldr	r0, [pc, #160]	; (f560 <http_send_advs+0x1c0>)
    f4c0:	4b28      	ldr	r3, [pc, #160]	; (f564 <http_send_advs+0x1c4>)
        LOG_ERR("%s: can't create tags json", __func__);
    f4c2:	4a29      	ldr	r2, [pc, #164]	; (f568 <http_send_advs+0x1c8>)
    f4c4:	1a1b      	subs	r3, r3, r0
    f4c6:	08db      	lsrs	r3, r3, #3
    f4c8:	019b      	lsls	r3, r3, #6
    f4ca:	492a      	ldr	r1, [pc, #168]	; (f574 <http_send_advs+0x1d4>)
    f4cc:	f043 0001 	orr.w	r0, r3, #1
    f4d0:	f015 f816 	bl	24500 <log_string_sync>
    f4d4:	e7c1      	b.n	f45a <http_send_advs+0xba>
    f4d6:	4822      	ldr	r0, [pc, #136]	; (f560 <http_send_advs+0x1c0>)
    f4d8:	4b22      	ldr	r3, [pc, #136]	; (f564 <http_send_advs+0x1c4>)
        LOG_ERR("%s: can't create root json", __func__);
    f4da:	4a23      	ldr	r2, [pc, #140]	; (f568 <http_send_advs+0x1c8>)
    f4dc:	1a1b      	subs	r3, r3, r0
    f4de:	08db      	lsrs	r3, r3, #3
    f4e0:	019b      	lsls	r3, r3, #6
    f4e2:	4925      	ldr	r1, [pc, #148]	; (f578 <http_send_advs+0x1d8>)
    f4e4:	f043 0001 	orr.w	r0, r3, #1
    f4e8:	e7e7      	b.n	f4ba <http_send_advs+0x11a>
    f4ea:	9301      	str	r3, [sp, #4]
            cJSON *tag = cJSON_CreateObject();
    f4ec:	f005 fbcc 	bl	14c88 <cJSON_CreateObject>
    f4f0:	4607      	mov	r7, r0
            cJSON_AddNumberToObject(tag, "rssi", adv->rssi);
    f4f2:	f855 0c04 	ldr.w	r0, [r5, #-4]
    f4f6:	f7fc fff5 	bl	c4e4 <__aeabi_i2d>
    f4fa:	ec41 0b10 	vmov	d0, r0, r1
    f4fe:	4649      	mov	r1, r9
    f500:	4638      	mov	r0, r7
    f502:	f018 fdd2 	bl	280aa <cJSON_AddNumberToObject>
            cJSON_AddNumberToObject(tag, "timestamp", adv->timestamp);
    f506:	e955 0103 	ldrd	r0, r1, [r5, #-12]
    f50a:	f7fd f827 	bl	c55c <__aeabi_l2d>
    f50e:	ec41 0b10 	vmov	d0, r0, r1
    f512:	4651      	mov	r1, sl
    f514:	4638      	mov	r0, r7
    f516:	f018 fdc8 	bl	280aa <cJSON_AddNumberToObject>
            cJSON_AddStringToObject(tag, "data", adv->data);
    f51a:	462a      	mov	r2, r5
    f51c:	4659      	mov	r1, fp
    f51e:	4638      	mov	r0, r7
    f520:	f018 fdd8 	bl	280d4 <cJSON_AddStringToObject>
            const mac_address_str_t mac_str = mac_address_to_str(&adv->tag_mac);
    f524:	f1a5 0114 	sub.w	r1, r5, #20
    f528:	a803      	add	r0, sp, #12
    f52a:	f7fe ffe9 	bl	e500 <mac_address_to_str>
            cJSON_AddItemToObject(tags, mac_str.str_buf, tag);
    f52e:	463a      	mov	r2, r7
    f530:	4640      	mov	r0, r8
    f532:	a903      	add	r1, sp, #12
    f534:	f018 fdb6 	bl	280a4 <cJSON_AddItemToObject>
        for (int i = 0; i < reports->num_of_advs; i++)
    f538:	9b01      	ldr	r3, [sp, #4]
    f53a:	3558      	adds	r5, #88	; 0x58
    f53c:	3301      	adds	r3, #1
    f53e:	e789      	b.n	f454 <http_send_advs+0xb4>
    f540:	0002ae64 	.word	0x0002ae64
    f544:	0002b4e6 	.word	0x0002b4e6
    f548:	0002b4f2 	.word	0x0002b4f2
    f54c:	0002b4fb 	.word	0x0002b4fb
    f550:	0002b524 	.word	0x0002b524
    f554:	0002b4bc 	.word	0x0002b4bc
    f558:	0002b4c4 	.word	0x0002b4c4
    f55c:	0002b52e 	.word	0x0002b52e
    f560:	0002a2c4 	.word	0x0002a2c4
    f564:	0002a2fc 	.word	0x0002a2fc
    f568:	0002b58d 	.word	0x0002b58d
    f56c:	0002b505 	.word	0x0002b505
    f570:	0002b533 	.word	0x0002b533
    f574:	0002b551 	.word	0x0002b551
    f578:	0002b4cb 	.word	0x0002b4cb
    f57c:	0002b54c 	.word	0x0002b54c

0000f580 <get_ts>:
LOG_MODULE_REGISTER(time_handler, CONFIG_RUUVI_NODE_LOG_LEVEL);

time_t epoch = 0;
u32_t epoch_tk = 0;

time_t get_ts(void){
    f580:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    f582:	f019 fe21 	bl	291c8 <z_impl_k_uptime_ticks>
		} else {
			return (t * to_hz + off) / from_hz;
    f586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f58a:	460b      	mov	r3, r1
    f58c:	fba0 0102 	umull	r0, r1, r0, r2
    f590:	fb02 1103 	mla	r1, r2, r3, r1
    f594:	0bc3      	lsrs	r3, r0, #15
    f596:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    time_t ts;
    u32_t now;
    now = k_uptime_get_32();
    now = now - epoch_tk;
    f59a:	4906      	ldr	r1, [pc, #24]	; (f5b4 <get_ts+0x34>)
    f59c:	6808      	ldr	r0, [r1, #0]
    f59e:	1a1b      	subs	r3, r3, r0
    now = now / 1000;
    f5a0:	fbb3 f3f2 	udiv	r3, r3, r2
    ts = epoch + now;
    f5a4:	4a04      	ldr	r2, [pc, #16]	; (f5b8 <get_ts+0x38>)
    f5a6:	e9d2 0100 	ldrd	r0, r1, [r2]
    return ts;
}
    f5aa:	18c0      	adds	r0, r0, r3
    f5ac:	f141 0100 	adc.w	r1, r1, #0
    f5b0:	bd08      	pop	{r3, pc}
    f5b2:	bf00      	nop
    f5b4:	2002250c 	.word	0x2002250c
    f5b8:	20021a18 	.word	0x20021a18

0000f5bc <update_ts_modem>:

int update_ts_modem(void){
    f5bc:	b570      	push	{r4, r5, r6, lr}
	int err;
	static char ts_buf[MODEM_TIME_LEN + 1];
	struct tm t;
	int tz;
	char *pch;
	err = modem_info_string_get(MODEM_INFO_DATE_TIME, ts_buf, sizeof(ts_buf));
    f5be:	2215      	movs	r2, #21
    f5c0:	2014      	movs	r0, #20
    f5c2:	493b      	ldr	r1, [pc, #236]	; (f6b0 <update_ts_modem+0xf4>)
int update_ts_modem(void){
    f5c4:	b08a      	sub	sp, #40	; 0x28
	err = modem_info_string_get(MODEM_INFO_DATE_TIME, ts_buf, sizeof(ts_buf));
    f5c6:	f007 faa3 	bl	16b10 <modem_info_string_get>
    f5ca:	4c3a      	ldr	r4, [pc, #232]	; (f6b4 <update_ts_modem+0xf8>)
    f5cc:	4b3a      	ldr	r3, [pc, #232]	; (f6b8 <update_ts_modem+0xfc>)
	if (err != MODEM_TIME_LEN) {
    f5ce:	2814      	cmp	r0, #20
    f5d0:	eba4 0403 	sub.w	r4, r4, r3
    f5d4:	ea4f 04d4 	mov.w	r4, r4, lsr #3
	err = modem_info_string_get(MODEM_INFO_DATE_TIME, ts_buf, sizeof(ts_buf));
    f5d8:	4602      	mov	r2, r0
	if (err != MODEM_TIME_LEN) {
    f5da:	ea4f 1484 	mov.w	r4, r4, lsl #6
    f5de:	d008      	beq.n	f5f2 <update_ts_modem+0x36>
		LOG_ERR("modem_info_string_get(MODEM time), error: %d", err);
    f5e0:	f044 0001 	orr.w	r0, r4, #1
    f5e4:	4935      	ldr	r1, [pc, #212]	; (f6bc <update_ts_modem+0x100>)
    f5e6:	f014 ff8b 	bl	24500 <log_string_sync>
		return -1;
    f5ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	memset(ts_buf, 0, MODEM_TIME_LEN + 1);
	free(msg);
	free(pch);
    LOG_INF("TS updated by Modem");
	return 0;
}
    f5ee:	b00a      	add	sp, #40	; 0x28
    f5f0:	bd70      	pop	{r4, r5, r6, pc}
    f5f2:	f019 fde9 	bl	291c8 <z_impl_k_uptime_ticks>
    f5f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f5fa:	460a      	mov	r2, r1
    f5fc:	fba0 0103 	umull	r0, r1, r0, r3
    f600:	fb03 1102 	mla	r1, r3, r2, r1
	return (u32_t)k_uptime_get();
    f604:	4a2e      	ldr	r2, [pc, #184]	; (f6c0 <update_ts_modem+0x104>)
    f606:	0bc3      	lsrs	r3, r0, #15
    f608:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    char *msg = strdup(ts_buf);
    f60c:	4828      	ldr	r0, [pc, #160]	; (f6b0 <update_ts_modem+0xf4>)
    f60e:	6013      	str	r3, [r2, #0]
    f610:	f012 fc1e 	bl	21e50 <strdup>
	pch = strtok(msg, "/,:+");
    f614:	492b      	ldr	r1, [pc, #172]	; (f6c4 <update_ts_modem+0x108>)
    char *msg = strdup(ts_buf);
    f616:	4606      	mov	r6, r0
	pch = strtok(msg, "/,:+");
    f618:	f012 fc22 	bl	21e60 <strtok>
	t.tm_year = atoi(pch);
    f61c:	f019 ff09 	bl	29432 <atoi>
	t.tm_year = t.tm_year + 2000 -1900;
    f620:	3064      	adds	r0, #100	; 0x64
	pch = strtok(NULL, "/,:+");
    f622:	4928      	ldr	r1, [pc, #160]	; (f6c4 <update_ts_modem+0x108>)
	t.tm_year = t.tm_year + 2000 -1900;
    f624:	9006      	str	r0, [sp, #24]
	pch = strtok(NULL, "/,:+");
    f626:	2000      	movs	r0, #0
    f628:	f012 fc1a 	bl	21e60 <strtok>
	t.tm_mon = atoi(pch);
    f62c:	f019 ff01 	bl	29432 <atoi>
	t.tm_mon = t.tm_mon -1;
    f630:	3801      	subs	r0, #1
	pch = strtok(NULL, "/,:+");
    f632:	4924      	ldr	r1, [pc, #144]	; (f6c4 <update_ts_modem+0x108>)
	t.tm_mon = t.tm_mon -1;
    f634:	9005      	str	r0, [sp, #20]
	pch = strtok(NULL, "/,:+");
    f636:	2000      	movs	r0, #0
    f638:	f012 fc12 	bl	21e60 <strtok>
	t.tm_mday = atoi(pch);
    f63c:	f019 fef9 	bl	29432 <atoi>
	pch = strtok(NULL, "/,:+");
    f640:	4920      	ldr	r1, [pc, #128]	; (f6c4 <update_ts_modem+0x108>)
	t.tm_mday = atoi(pch);
    f642:	9004      	str	r0, [sp, #16]
	pch = strtok(NULL, "/,:+");
    f644:	2000      	movs	r0, #0
    f646:	f012 fc0b 	bl	21e60 <strtok>
	t.tm_hour = atoi(pch);
    f64a:	f019 fef2 	bl	29432 <atoi>
	pch = strtok(NULL, "/,:+");
    f64e:	491d      	ldr	r1, [pc, #116]	; (f6c4 <update_ts_modem+0x108>)
	t.tm_hour = atoi(pch);
    f650:	9003      	str	r0, [sp, #12]
	pch = strtok(NULL, "/,:+");
    f652:	2000      	movs	r0, #0
    f654:	f012 fc04 	bl	21e60 <strtok>
	t.tm_min = atoi(pch);
    f658:	f019 feeb 	bl	29432 <atoi>
	pch = strtok(NULL, "/,:+");
    f65c:	4919      	ldr	r1, [pc, #100]	; (f6c4 <update_ts_modem+0x108>)
	t.tm_min = atoi(pch);
    f65e:	9002      	str	r0, [sp, #8]
	pch = strtok(NULL, "/,:+");
    f660:	2000      	movs	r0, #0
    f662:	f012 fbfd 	bl	21e60 <strtok>
    t.tm_sec = atoi(pch);
    f666:	f019 fee4 	bl	29432 <atoi>
	pch = strtok(NULL, "/,:+");
    f66a:	4916      	ldr	r1, [pc, #88]	; (f6c4 <update_ts_modem+0x108>)
    t.tm_sec = atoi(pch);
    f66c:	9001      	str	r0, [sp, #4]
	pch = strtok(NULL, "/,:+");
    f66e:	2000      	movs	r0, #0
    f670:	f012 fbf6 	bl	21e60 <strtok>
    f674:	4605      	mov	r5, r0
	tz = atoi(pch);
    f676:	f019 fedc 	bl	29432 <atoi>
	t.tm_isdst = -1;
    f67a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	epoch = mktime(&t);
    f67e:	a801      	add	r0, sp, #4
	t.tm_isdst = -1;
    f680:	9309      	str	r3, [sp, #36]	; 0x24
	epoch = mktime(&t);
    f682:	f011 fc8f 	bl	20fa4 <mktime>
    f686:	4b10      	ldr	r3, [pc, #64]	; (f6c8 <update_ts_modem+0x10c>)
	memset(ts_buf, 0, MODEM_TIME_LEN + 1);
    f688:	2215      	movs	r2, #21
	epoch = mktime(&t);
    f68a:	e9c3 0100 	strd	r0, r1, [r3]
	memset(ts_buf, 0, MODEM_TIME_LEN + 1);
    f68e:	2100      	movs	r1, #0
    f690:	4807      	ldr	r0, [pc, #28]	; (f6b0 <update_ts_modem+0xf4>)
    f692:	f019 ff28 	bl	294e6 <memset>
	free(msg);
    f696:	4630      	mov	r0, r6
    f698:	f011 fba4 	bl	20de4 <free>
	free(pch);
    f69c:	4628      	mov	r0, r5
    f69e:	f011 fba1 	bl	20de4 <free>
    LOG_INF("TS updated by Modem");
    f6a2:	f044 0003 	orr.w	r0, r4, #3
    f6a6:	4909      	ldr	r1, [pc, #36]	; (f6cc <update_ts_modem+0x110>)
    f6a8:	f014 ff2a 	bl	24500 <log_string_sync>
	return 0;
    f6ac:	2000      	movs	r0, #0
    f6ae:	e79e      	b.n	f5ee <update_ts_modem+0x32>
    f6b0:	20029e2c 	.word	0x20029e2c
    f6b4:	0002a364 	.word	0x0002a364
    f6b8:	0002a2c4 	.word	0x0002a2c4
    f6bc:	0002b59c 	.word	0x0002b59c
    f6c0:	2002250c 	.word	0x2002250c
    f6c4:	0002b5c9 	.word	0x0002b5c9
    f6c8:	20021a18 	.word	0x20021a18
    f6cc:	0002b5ce 	.word	0x0002b5ce

0000f6d0 <primary_feed_worker>:
static struct wdt_data_storage wdt_data;
static struct k_work_q *second_work_q;

static void primary_feed_worker(struct k_work *work_desc)
{
	k_work_submit_to_queue(second_work_q, &wdt_data.second_workqueue_work);
    f6d0:	4b08      	ldr	r3, [pc, #32]	; (f6f4 <primary_feed_worker+0x24>)
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f6d2:	4909      	ldr	r1, [pc, #36]	; (f6f8 <primary_feed_worker+0x28>)
    f6d4:	6818      	ldr	r0, [r3, #0]
    f6d6:	e8d1 3fef 	ldaex	r3, [r1]
    f6da:	f043 0201 	orr.w	r2, r3, #1
    f6de:	e8c1 2fec 	stlex	ip, r2, [r1]
    f6e2:	f1bc 0f00 	cmp.w	ip, #0
    f6e6:	d1f6      	bne.n	f6d6 <primary_feed_worker+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    f6e8:	07db      	lsls	r3, r3, #31
    f6ea:	d402      	bmi.n	f6f2 <primary_feed_worker+0x22>
		k_queue_append(&work_q->queue, work);
    f6ec:	3908      	subs	r1, #8
    f6ee:	f019 bb79 	b.w	28de4 <k_queue_append>
}
    f6f2:	4770      	bx	lr
    f6f4:	20022510 	.word	0x20022510
    f6f8:	20022544 	.word	0x20022544

0000f6fc <secondary_feed_worker>:
static void secondary_feed_worker(struct k_work *work_desc)
{
    f6fc:	b510      	push	{r4, lr}
	int err = wdt_feed(wdt_data.wdt_drv, wdt_data.wdt_channel_id);
    f6fe:	4c0f      	ldr	r4, [pc, #60]	; (f73c <secondary_feed_worker+0x40>)
    f700:	e9d4 0100 	ldrd	r0, r1, [r4]
static inline int z_impl_wdt_feed(struct device *dev, int channel_id)
{
	const struct wdt_driver_api *api =
		(const struct wdt_driver_api *)dev->driver_api;

	return api->feed(dev, channel_id);
    f704:	6883      	ldr	r3, [r0, #8]
    f706:	68db      	ldr	r3, [r3, #12]
    f708:	4798      	blx	r3

	LOG_DBG("Feeding watchdog");

	if (err) {
    f70a:	b160      	cbz	r0, f726 <secondary_feed_worker+0x2a>
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
	} else {
		k_delayed_work_submit(&wdt_data.system_workqueue_work,
				      K_MSEC(WDT_FEED_WORKER_DELAY_MS));
	}
}
    f70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f710:	4a0b      	ldr	r2, [pc, #44]	; (f740 <secondary_feed_worker+0x44>)
    f712:	4b0c      	ldr	r3, [pc, #48]	; (f744 <secondary_feed_worker+0x48>)
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
    f714:	490c      	ldr	r1, [pc, #48]	; (f748 <secondary_feed_worker+0x4c>)
    f716:	1a9b      	subs	r3, r3, r2
    f718:	08db      	lsrs	r3, r3, #3
    f71a:	019b      	lsls	r3, r3, #6
    f71c:	4602      	mov	r2, r0
    f71e:	f043 0001 	orr.w	r0, r3, #1
    f722:	f014 beed 	b.w	24500 <log_string_sync>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    f726:	f104 0108 	add.w	r1, r4, #8
    f72a:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
    f72e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f732:	2300      	movs	r3, #0
    f734:	4805      	ldr	r0, [pc, #20]	; (f74c <secondary_feed_worker+0x50>)
    f736:	f011 b935 	b.w	209a4 <k_delayed_work_submit_to_queue>
    f73a:	bf00      	nop
    f73c:	20022514 	.word	0x20022514
    f740:	0002a2c4 	.word	0x0002a2c4
    f744:	0002a37c 	.word	0x0002a37c
    f748:	0002b5ef 	.word	0x0002b5ef
    f74c:	200280fc 	.word	0x200280fc

0000f750 <watchdog_init_and_start>:

	return 0;
}

int watchdog_init_and_start(struct k_work_q *work_q)
{
    f750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (work_q == NULL) {
    f752:	2800      	cmp	r0, #0
    f754:	d064      	beq.n	f820 <watchdog_init_and_start+0xd0>
		return -EINVAL;
	}
	second_work_q = work_q;
    f756:	4b34      	ldr	r3, [pc, #208]	; (f828 <watchdog_init_and_start+0xd8>)
    f758:	6018      	str	r0, [r3, #0]
    f75a:	4834      	ldr	r0, [pc, #208]	; (f82c <watchdog_init_and_start+0xdc>)
    f75c:	f010 f8d2 	bl	1f904 <z_impl_device_get_binding>
    f760:	4d33      	ldr	r5, [pc, #204]	; (f830 <watchdog_init_and_start+0xe0>)
    f762:	4a34      	ldr	r2, [pc, #208]	; (f834 <watchdog_init_and_start+0xe4>)
	data->wdt_drv = device_get_binding(DT_LABEL(DT_NODELABEL(wdt)));
    f764:	4e34      	ldr	r6, [pc, #208]	; (f838 <watchdog_init_and_start+0xe8>)
    f766:	1aad      	subs	r5, r5, r2
    f768:	08ed      	lsrs	r5, r5, #3
    f76a:	6030      	str	r0, [r6, #0]
	if (data->wdt_drv == NULL) {
    f76c:	01ad      	lsls	r5, r5, #6
    f76e:	b940      	cbnz	r0, f782 <watchdog_init_and_start+0x32>
		LOG_ERR("Cannot bind watchdog driver");
    f770:	4932      	ldr	r1, [pc, #200]	; (f83c <watchdog_init_and_start+0xec>)
    f772:	f045 0001 	orr.w	r0, r5, #1
    f776:	f014 fec3 	bl	24500 <log_string_sync>
		return err;
    f77a:	f06f 0405 	mvn.w	r4, #5
	return watchdog_enable(&wdt_data);
}
    f77e:	4620      	mov	r0, r4
    f780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return api->install_timeout(dev, cfg);
    f782:	6883      	ldr	r3, [r0, #8]
    f784:	492e      	ldr	r1, [pc, #184]	; (f840 <watchdog_init_and_start+0xf0>)
    f786:	689b      	ldr	r3, [r3, #8]
    f788:	4798      	blx	r3
	if (data->wdt_channel_id < 0) {
    f78a:	2800      	cmp	r0, #0
    f78c:	4602      	mov	r2, r0
	data->wdt_channel_id = wdt_install_timeout(
    f78e:	6070      	str	r0, [r6, #4]
	if (data->wdt_channel_id < 0) {
    f790:	da07      	bge.n	f7a2 <watchdog_init_and_start+0x52>
		LOG_ERR("Cannot install watchdog timer! Error code: %d",
    f792:	492c      	ldr	r1, [pc, #176]	; (f844 <watchdog_init_and_start+0xf4>)
    f794:	f045 0001 	orr.w	r0, r5, #1
    f798:	f014 feb2 	bl	24500 <log_string_sync>
		return -EFAULT;
    f79c:	f06f 040d 	mvn.w	r4, #13
    f7a0:	e7ed      	b.n	f77e <watchdog_init_and_start+0x2e>
	LOG_INF("Watchdog timeout installed. Timeout: %d",
    f7a2:	f045 0703 	orr.w	r7, r5, #3
    f7a6:	4638      	mov	r0, r7
    f7a8:	f242 7210 	movw	r2, #10000	; 0x2710
    f7ac:	4926      	ldr	r1, [pc, #152]	; (f848 <watchdog_init_and_start+0xf8>)
    f7ae:	f014 fea7 	bl	24500 <log_string_sync>
	err = watchdog_start(data);
    f7b2:	6830      	ldr	r0, [r6, #0]
	return api->setup(dev, options);
    f7b4:	6883      	ldr	r3, [r0, #8]
    f7b6:	2102      	movs	r1, #2
    f7b8:	681b      	ldr	r3, [r3, #0]
    f7ba:	4798      	blx	r3
	if (err) {
    f7bc:	4604      	mov	r4, r0
    f7be:	b130      	cbz	r0, f7ce <watchdog_init_and_start+0x7e>
		LOG_ERR("Cannot start watchdog! Error code: %d", err);
    f7c0:	4602      	mov	r2, r0
    f7c2:	4922      	ldr	r1, [pc, #136]	; (f84c <watchdog_init_and_start+0xfc>)
		LOG_ERR("Cannot start watchdog feed worker!"
    f7c4:	f045 0001 	orr.w	r0, r5, #1
		LOG_INF("Watchdog feed enabled. Timeout: %d",
    f7c8:	f014 fe9a 	bl	24500 <log_string_sync>
	if (err) {
    f7cc:	e7d7      	b.n	f77e <watchdog_init_and_start+0x2e>
		LOG_INF("Watchdog started");
    f7ce:	4638      	mov	r0, r7
    f7d0:	491f      	ldr	r1, [pc, #124]	; (f850 <watchdog_init_and_start+0x100>)
    f7d2:	f014 fe95 	bl	24500 <log_string_sync>
	k_delayed_work_init(&data->system_workqueue_work, primary_feed_worker);
    f7d6:	f106 0008 	add.w	r0, r6, #8
    f7da:	491e      	ldr	r1, [pc, #120]	; (f854 <watchdog_init_and_start+0x104>)
    f7dc:	f019 fc82 	bl	290e4 <k_delayed_work_init>
	int err = wdt_feed(data->wdt_drv, data->wdt_channel_id);
    f7e0:	e9d6 0100 	ldrd	r0, r1, [r6]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    f7e4:	4b1c      	ldr	r3, [pc, #112]	; (f858 <watchdog_init_and_start+0x108>)
    f7e6:	62b4      	str	r4, [r6, #40]	; 0x28
    f7e8:	e9c6 340b 	strd	r3, r4, [r6, #44]	; 0x2c
	return api->feed(dev, channel_id);
    f7ec:	6883      	ldr	r3, [r0, #8]
    f7ee:	68db      	ldr	r3, [r3, #12]
    f7f0:	4798      	blx	r3
	if (err) {
    f7f2:	4604      	mov	r4, r0
    f7f4:	b110      	cbz	r0, f7fc <watchdog_init_and_start+0xac>
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
    f7f6:	4602      	mov	r2, r0
    f7f8:	4918      	ldr	r1, [pc, #96]	; (f85c <watchdog_init_and_start+0x10c>)
    f7fa:	e7e3      	b.n	f7c4 <watchdog_init_and_start+0x74>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    f7fc:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    f800:	2300      	movs	r3, #0
    f802:	4817      	ldr	r0, [pc, #92]	; (f860 <watchdog_init_and_start+0x110>)
    f804:	f106 0108 	add.w	r1, r6, #8
    f808:	f011 f8cc 	bl	209a4 <k_delayed_work_submit_to_queue>
	if (err) {
    f80c:	4604      	mov	r4, r0
    f80e:	b110      	cbz	r0, f816 <watchdog_init_and_start+0xc6>
		LOG_ERR("Cannot start watchdog feed worker!"
    f810:	4602      	mov	r2, r0
    f812:	4914      	ldr	r1, [pc, #80]	; (f864 <watchdog_init_and_start+0x114>)
    f814:	e7d6      	b.n	f7c4 <watchdog_init_and_start+0x74>
		LOG_INF("Watchdog feed enabled. Timeout: %d",
    f816:	f241 3288 	movw	r2, #5000	; 0x1388
    f81a:	4638      	mov	r0, r7
    f81c:	4912      	ldr	r1, [pc, #72]	; (f868 <watchdog_init_and_start+0x118>)
    f81e:	e7d3      	b.n	f7c8 <watchdog_init_and_start+0x78>
		return -EINVAL;
    f820:	f06f 0415 	mvn.w	r4, #21
    f824:	e7ab      	b.n	f77e <watchdog_init_and_start+0x2e>
    f826:	bf00      	nop
    f828:	20022510 	.word	0x20022510
    f82c:	0002b614 	.word	0x0002b614
    f830:	0002a37c 	.word	0x0002a37c
    f834:	0002a2c4 	.word	0x0002a2c4
    f838:	20022514 	.word	0x20022514
    f83c:	0002b618 	.word	0x0002b618
    f840:	0002a508 	.word	0x0002a508
    f844:	0002b634 	.word	0x0002b634
    f848:	0002b662 	.word	0x0002b662
    f84c:	0002b68a 	.word	0x0002b68a
    f850:	0002b6b0 	.word	0x0002b6b0
    f854:	0000f6d1 	.word	0x0000f6d1
    f858:	0000f6fd 	.word	0x0000f6fd
    f85c:	0002b5ef 	.word	0x0002b5ef
    f860:	200280fc 	.word	0x200280fc
    f864:	0002b6c1 	.word	0x0002b6c1
    f868:	0002b6f3 	.word	0x0002b6f3

0000f86c <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    f86c:	2803      	cmp	r0, #3
{
    f86e:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    f870:	d906      	bls.n	f880 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (fdtable[fd].obj == NULL) {
		errno = EBADF;
    f872:	f015 fa4d 	bl	24d10 <__errno>
    f876:	2309      	movs	r3, #9
    f878:	6003      	str	r3, [r0, #0]
    f87a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
    f87e:	bd08      	pop	{r3, pc}
	if (fdtable[fd].obj == NULL) {
    f880:	4b03      	ldr	r3, [pc, #12]	; (f890 <_check_fd+0x24>)
    f882:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    f886:	2b00      	cmp	r3, #0
    f888:	d0f3      	beq.n	f872 <_check_fd+0x6>
	return 0;
    f88a:	2000      	movs	r0, #0
    f88c:	e7f7      	b.n	f87e <_check_fd+0x12>
    f88e:	bf00      	nop
    f890:	20022548 	.word	0x20022548

0000f894 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
    f894:	b570      	push	{r4, r5, r6, lr}
    f896:	4604      	mov	r4, r0
    f898:	460d      	mov	r5, r1
    f89a:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    f89c:	f7ff ffe6 	bl	f86c <_check_fd>
    f8a0:	2800      	cmp	r0, #0
    f8a2:	db09      	blt.n	f8b8 <z_get_fd_obj+0x24>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
    f8a4:	4b07      	ldr	r3, [pc, #28]	; (f8c4 <z_get_fd_obj+0x30>)
    f8a6:	b14d      	cbz	r5, f8bc <z_get_fd_obj+0x28>
    f8a8:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    f8ac:	6852      	ldr	r2, [r2, #4]
    f8ae:	42aa      	cmp	r2, r5
    f8b0:	d004      	beq.n	f8bc <z_get_fd_obj+0x28>
		errno = err;
    f8b2:	f015 fa2d 	bl	24d10 <__errno>
    f8b6:	6006      	str	r6, [r0, #0]
		return NULL;
    f8b8:	2000      	movs	r0, #0
    f8ba:	e001      	b.n	f8c0 <z_get_fd_obj+0x2c>
		return NULL;
	}

	return fd_entry->obj;
    f8bc:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
}
    f8c0:	bd70      	pop	{r4, r5, r6, pc}
    f8c2:	bf00      	nop
    f8c4:	20022548 	.word	0x20022548

0000f8c8 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
    f8c8:	b538      	push	{r3, r4, r5, lr}
    f8ca:	4604      	mov	r4, r0
    f8cc:	460d      	mov	r5, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    f8ce:	f7ff ffcd 	bl	f86c <_check_fd>
    f8d2:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
    f8d4:	bfa9      	itett	ge
    f8d6:	4b05      	ldrge	r3, [pc, #20]	; (f8ec <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
    f8d8:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
    f8da:	eb03 02c4 	addge.w	r2, r3, r4, lsl #3
    f8de:	6852      	ldrge	r2, [r2, #4]

	return fd_entry->obj;
    f8e0:	bfa4      	itt	ge
    f8e2:	f853 0034 	ldrge.w	r0, [r3, r4, lsl #3]
	*vtable = fd_entry->vtable;
    f8e6:	602a      	strge	r2, [r5, #0]
}
    f8e8:	bd38      	pop	{r3, r4, r5, pc}
    f8ea:	bf00      	nop
    f8ec:	20022548 	.word	0x20022548

0000f8f0 <z_reserve_fd>:

int z_reserve_fd(void)
{
    f8f0:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    f8f2:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
    f8f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f8f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f8fc:	480c      	ldr	r0, [pc, #48]	; (f930 <z_reserve_fd+0x40>)
    f8fe:	f010 fad9 	bl	1feb4 <z_impl_k_mutex_lock>
		if (fdtable[fd].obj == NULL) {
    f902:	4b0c      	ldr	r3, [pc, #48]	; (f934 <z_reserve_fd+0x44>)
    f904:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    f908:	b16a      	cbz	r2, f926 <z_reserve_fd+0x36>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    f90a:	3401      	adds	r4, #1
    f90c:	2c04      	cmp	r4, #4
    f90e:	d1f9      	bne.n	f904 <z_reserve_fd+0x14>
	errno = ENFILE;
    f910:	f015 f9fe 	bl	24d10 <__errno>
    f914:	2317      	movs	r3, #23
	return -1;
    f916:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = ENFILE;
    f91a:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    f91c:	4804      	ldr	r0, [pc, #16]	; (f930 <z_reserve_fd+0x40>)
    f91e:	f010 fb41 	bl	1ffa4 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    f922:	4620      	mov	r0, r4
    f924:	bd10      	pop	{r4, pc}
		fdtable[fd].obj = FD_OBJ_RESERVED;
    f926:	2201      	movs	r2, #1
    f928:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
    f92c:	e7f6      	b.n	f91c <z_reserve_fd+0x2c>
    f92e:	bf00      	nop
    f930:	20020928 	.word	0x20020928
    f934:	20022548 	.word	0x20022548

0000f938 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = obj;
    f938:	4b03      	ldr	r3, [pc, #12]	; (f948 <z_finalize_fd+0x10>)
    f93a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	fdtable[fd].vtable = vtable;
    f93e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    f942:	6042      	str	r2, [r0, #4]
}
    f944:	4770      	bx	lr
    f946:	bf00      	nop
    f948:	20022548 	.word	0x20022548

0000f94c <z_free_fd>:

void z_free_fd(int fd)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = NULL;
    f94c:	2200      	movs	r2, #0
    f94e:	4b02      	ldr	r3, [pc, #8]	; (f958 <z_free_fd+0xc>)
    f950:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
}
    f954:	4770      	bx	lr
    f956:	bf00      	nop
    f958:	20022548 	.word	0x20022548

0000f95c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    f95c:	680b      	ldr	r3, [r1, #0]
    f95e:	3301      	adds	r3, #1
    f960:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    f962:	4b01      	ldr	r3, [pc, #4]	; (f968 <char_out+0xc>)
    f964:	681b      	ldr	r3, [r3, #0]
    f966:	4718      	bx	r3
    f968:	200200a8 	.word	0x200200a8

0000f96c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    f96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f970:	ed2d 8b02 	vpush	{d8}
    f974:	b083      	sub	sp, #12
    f976:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    f978:	469a      	mov	sl, r3
    f97a:	2c01      	cmp	r4, #1
    f97c:	bfb8      	it	lt
    f97e:	2401      	movlt	r4, #1
    f980:	2b01      	cmp	r3, #1
    f982:	bf0c      	ite	eq
    f984:	2330      	moveq	r3, #48	; 0x30
    f986:	2320      	movne	r3, #32
    f988:	4615      	mov	r5, r2
    f98a:	4606      	mov	r6, r0
    f98c:	ee08 3a10 	vmov	s16, r3
    f990:	2701      	movs	r7, #1
    f992:	f04f 080a 	mov.w	r8, #10
    f996:	2200      	movs	r2, #0
    f998:	f8df b074 	ldr.w	fp, [pc, #116]	; fa10 <_printk_dec_ulong+0xa4>
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    f99c:	fbb5 f9fb 	udiv	r9, r5, fp
    f9a0:	b90a      	cbnz	r2, f9a6 <_printk_dec_ulong+0x3a>
    f9a2:	45ab      	cmp	fp, r5
    f9a4:	d820      	bhi.n	f9e8 <_printk_dec_ulong+0x7c>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    f9a6:	f109 0030 	add.w	r0, r9, #48	; 0x30
    f9aa:	9100      	str	r1, [sp, #0]
    f9ac:	47b0      	blx	r6
			found_largest_digit = 1;
    f9ae:	2201      	movs	r2, #1
			digits++;
    f9b0:	3701      	adds	r7, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
    f9b2:	9900      	ldr	r1, [sp, #0]
		}
		remaining--;
		remainder %= pos;
		pos /= 10;
    f9b4:	230a      	movs	r3, #10
		remaining--;
    f9b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
    f9ba:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
    f9be:	fb0b 5519 	mls	r5, fp, r9, r5
		pos /= 10;
    f9c2:	fbbb fbf3 	udiv	fp, fp, r3
	while (pos >= 10) {
    f9c6:	d1e9      	bne.n	f99c <_printk_dec_ulong+0x30>
	}
	out((int)(remainder + 48), ctx);
    f9c8:	f105 0030 	add.w	r0, r5, #48	; 0x30
    f9cc:	9100      	str	r1, [sp, #0]
    f9ce:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
    f9d0:	f1ba 0f03 	cmp.w	sl, #3
    f9d4:	9900      	ldr	r1, [sp, #0]
    f9d6:	d102      	bne.n	f9de <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
    f9d8:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
    f9da:	2c00      	cmp	r4, #0
    f9dc:	dc11      	bgt.n	fa02 <_printk_dec_ulong+0x96>
			out(' ', ctx);
		}
	}
}
    f9de:	b003      	add	sp, #12
    f9e0:	ecbd 8b02 	vpop	{d8}
    f9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    f9e8:	4544      	cmp	r4, r8
    f9ea:	dbe3      	blt.n	f9b4 <_printk_dec_ulong+0x48>
				&& padding < PAD_SPACE_AFTER) {
    f9ec:	f1ba 0f02 	cmp.w	sl, #2
    f9f0:	d8e0      	bhi.n	f9b4 <_printk_dec_ulong+0x48>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    f9f2:	ee18 0a10 	vmov	r0, s16
    f9f6:	e9cd 1200 	strd	r1, r2, [sp]
			digits++;
    f9fa:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    f9fc:	47b0      	blx	r6
			digits++;
    f9fe:	9a01      	ldr	r2, [sp, #4]
    fa00:	e7d7      	b.n	f9b2 <_printk_dec_ulong+0x46>
			out(' ', ctx);
    fa02:	2020      	movs	r0, #32
    fa04:	9100      	str	r1, [sp, #0]
    fa06:	3c01      	subs	r4, #1
    fa08:	47b0      	blx	r6
    fa0a:	9900      	ldr	r1, [sp, #0]
    fa0c:	e7e5      	b.n	f9da <_printk_dec_ulong+0x6e>
    fa0e:	bf00      	nop
    fa10:	3b9aca00 	.word	0x3b9aca00

0000fa14 <__printk_hook_install>:
	_char_out = fn;
    fa14:	4b01      	ldr	r3, [pc, #4]	; (fa1c <__printk_hook_install+0x8>)
    fa16:	6018      	str	r0, [r3, #0]
}
    fa18:	4770      	bx	lr
    fa1a:	bf00      	nop
    fa1c:	200200a8 	.word	0x200200a8

0000fa20 <z_vprintk>:
{
    fa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    fa24:	2700      	movs	r7, #0
{
    fa26:	4605      	mov	r5, r0
    fa28:	468b      	mov	fp, r1
	int min_width = -1;
    fa2a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    fa2e:	46b8      	mov	r8, r7
{
    fa30:	461c      	mov	r4, r3
    fa32:	b08d      	sub	sp, #52	; 0x34
    fa34:	1e53      	subs	r3, r2, #1
    fa36:	9303      	str	r3, [sp, #12]
			might_format = 0;
    fa38:	2600      	movs	r6, #0
					break;
    fa3a:	e005      	b.n	fa48 <z_vprintk+0x28>
		if (!might_format) {
    fa3c:	b96e      	cbnz	r6, fa5a <z_vprintk+0x3a>
			if (*fmt != '%') {
    fa3e:	2825      	cmp	r0, #37	; 0x25
    fa40:	f000 8171 	beq.w	fd26 <z_vprintk+0x306>
				out((int)*fmt, ctx);
    fa44:	4659      	mov	r1, fp
    fa46:	47a8      	blx	r5
	while (*fmt) {
    fa48:	9b03      	ldr	r3, [sp, #12]
    fa4a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    fa4e:	9303      	str	r3, [sp, #12]
    fa50:	2800      	cmp	r0, #0
    fa52:	d1f3      	bne.n	fa3c <z_vprintk+0x1c>
}
    fa54:	b00d      	add	sp, #52	; 0x34
    fa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    fa5a:	287a      	cmp	r0, #122	; 0x7a
    fa5c:	d80a      	bhi.n	fa74 <z_vprintk+0x54>
    fa5e:	2862      	cmp	r0, #98	; 0x62
    fa60:	d810      	bhi.n	fa84 <z_vprintk+0x64>
    fa62:	2830      	cmp	r0, #48	; 0x30
    fa64:	d054      	beq.n	fb10 <z_vprintk+0xf0>
    fa66:	d845      	bhi.n	faf4 <z_vprintk+0xd4>
    fa68:	2825      	cmp	r0, #37	; 0x25
    fa6a:	f000 815a 	beq.w	fd22 <z_vprintk+0x302>
    fa6e:	282d      	cmp	r0, #45	; 0x2d
    fa70:	f000 815f 	beq.w	fd32 <z_vprintk+0x312>
					out((int)'%', ctx);
    fa74:	4659      	mov	r1, fp
    fa76:	2025      	movs	r0, #37	; 0x25
    fa78:	47a8      	blx	r5
					out((int)*fmt, ctx);
    fa7a:	4659      	mov	r1, fp
    fa7c:	9b03      	ldr	r3, [sp, #12]
    fa7e:	7818      	ldrb	r0, [r3, #0]
    fa80:	47a8      	blx	r5
    fa82:	e7d9      	b.n	fa38 <z_vprintk+0x18>
    fa84:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    fa88:	2b17      	cmp	r3, #23
    fa8a:	d8f3      	bhi.n	fa74 <z_vprintk+0x54>
    fa8c:	a201      	add	r2, pc, #4	; (adr r2, fa94 <z_vprintk+0x74>)
    fa8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fa92:	bf00      	nop
    fa94:	0000fd1b 	.word	0x0000fd1b
    fa98:	0000fb5f 	.word	0x0000fb5f
    fa9c:	0000fa75 	.word	0x0000fa75
    faa0:	0000fa75 	.word	0x0000fa75
    faa4:	0000fa75 	.word	0x0000fa75
    faa8:	0000fb41 	.word	0x0000fb41
    faac:	0000fb5f 	.word	0x0000fb5f
    fab0:	0000fa75 	.word	0x0000fa75
    fab4:	0000fa75 	.word	0x0000fa75
    fab8:	0000fb41 	.word	0x0000fb41
    fabc:	0000fa75 	.word	0x0000fa75
    fac0:	0000fa75 	.word	0x0000fa75
    fac4:	0000fa75 	.word	0x0000fa75
    fac8:	0000fc01 	.word	0x0000fc01
    facc:	0000fa75 	.word	0x0000fa75
    fad0:	0000fa75 	.word	0x0000fa75
    fad4:	0000fceb 	.word	0x0000fceb
    fad8:	0000fa75 	.word	0x0000fa75
    fadc:	0000fbcf 	.word	0x0000fbcf
    fae0:	0000fa75 	.word	0x0000fa75
    fae4:	0000fa75 	.word	0x0000fa75
    fae8:	0000fafd 	.word	0x0000fafd
    faec:	0000fa75 	.word	0x0000fa75
    faf0:	0000fb41 	.word	0x0000fb41
			switch (*fmt) {
    faf4:	2839      	cmp	r0, #57	; 0x39
    faf6:	d91a      	bls.n	fb2e <z_vprintk+0x10e>
    faf8:	2858      	cmp	r0, #88	; 0x58
    fafa:	d1bb      	bne.n	fa74 <z_vprintk+0x54>
				if (*fmt == 'p') {
    fafc:	9b03      	ldr	r3, [sp, #12]
    fafe:	781b      	ldrb	r3, [r3, #0]
    fb00:	2b70      	cmp	r3, #112	; 0x70
    fb02:	f040 8088 	bne.w	fc16 <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
    fb06:	f854 3b04 	ldr.w	r3, [r4], #4
    fb0a:	2200      	movs	r2, #0
    fb0c:	9306      	str	r3, [sp, #24]
    fb0e:	e090      	b.n	fc32 <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
    fb10:	f1b9 0f00 	cmp.w	r9, #0
    fb14:	da0e      	bge.n	fb34 <z_vprintk+0x114>
    fb16:	f1b8 0f00 	cmp.w	r8, #0
    fb1a:	f000 810d 	beq.w	fd38 <z_vprintk+0x318>
					min_width = *fmt - '0';
    fb1e:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    fb22:	f1b8 0f00 	cmp.w	r8, #0
    fb26:	bf08      	it	eq
    fb28:	f04f 0802 	moveq.w	r8, #2
    fb2c:	e78c      	b.n	fa48 <z_vprintk+0x28>
				if (min_width < 0) {
    fb2e:	f1b9 0f00 	cmp.w	r9, #0
    fb32:	dbf4      	blt.n	fb1e <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
    fb34:	230a      	movs	r3, #10
    fb36:	fb03 0909 	mla	r9, r3, r9, r0
    fb3a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    fb3e:	e7f0      	b.n	fb22 <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
    fb40:	2868      	cmp	r0, #104	; 0x68
    fb42:	d103      	bne.n	fb4c <z_vprintk+0x12c>
    fb44:	2f68      	cmp	r7, #104	; 0x68
    fb46:	d106      	bne.n	fb56 <z_vprintk+0x136>
					length_mod = 'H';
    fb48:	2748      	movs	r7, #72	; 0x48
    fb4a:	e77d      	b.n	fa48 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
    fb4c:	286c      	cmp	r0, #108	; 0x6c
    fb4e:	d102      	bne.n	fb56 <z_vprintk+0x136>
    fb50:	2f6c      	cmp	r7, #108	; 0x6c
    fb52:	f000 80f4 	beq.w	fd3e <z_vprintk+0x31e>
				} else if (length_mod == 0) {
    fb56:	2f00      	cmp	r7, #0
    fb58:	d18c      	bne.n	fa74 <z_vprintk+0x54>
    fb5a:	4607      	mov	r7, r0
    fb5c:	e774      	b.n	fa48 <z_vprintk+0x28>
				if (length_mod == 'z') {
    fb5e:	2f7a      	cmp	r7, #122	; 0x7a
    fb60:	d102      	bne.n	fb68 <z_vprintk+0x148>
					d = va_arg(ap, int);
    fb62:	f854 6b04 	ldr.w	r6, [r4], #4
    fb66:	e021      	b.n	fbac <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
    fb68:	2f6c      	cmp	r7, #108	; 0x6c
    fb6a:	d0fa      	beq.n	fb62 <z_vprintk+0x142>
				} else if (length_mod == 'L') {
    fb6c:	2f4c      	cmp	r7, #76	; 0x4c
    fb6e:	d1f8      	bne.n	fb62 <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
    fb70:	3407      	adds	r4, #7
    fb72:	f024 0407 	bic.w	r4, r4, #7
    fb76:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    fb7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
    fb7e:	9b04      	ldr	r3, [sp, #16]
    fb80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fb84:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
    fb88:	9b05      	ldr	r3, [sp, #20]
    fb8a:	9108      	str	r1, [sp, #32]
    fb8c:	f143 0100 	adc.w	r1, r3, #0
    fb90:	9109      	str	r1, [sp, #36]	; 0x24
    fb92:	2100      	movs	r1, #0
    fb94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    fb98:	4299      	cmp	r1, r3
    fb9a:	bf08      	it	eq
    fb9c:	4290      	cmpeq	r0, r2
    fb9e:	d204      	bcs.n	fbaa <z_vprintk+0x18a>
						print_err(out, ctx);
    fba0:	4659      	mov	r1, fp
    fba2:	4628      	mov	r0, r5
    fba4:	f014 f9d4 	bl	23f50 <print_err>
						break;
    fba8:	e746      	b.n	fa38 <z_vprintk+0x18>
					d = lld;
    fbaa:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
    fbac:	2e00      	cmp	r6, #0
    fbae:	da05      	bge.n	fbbc <z_vprintk+0x19c>
					out((int)'-', ctx);
    fbb0:	4659      	mov	r1, fp
    fbb2:	202d      	movs	r0, #45	; 0x2d
    fbb4:	47a8      	blx	r5
					d = -d;
    fbb6:	4276      	negs	r6, r6
					min_width--;
    fbb8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    fbbc:	4643      	mov	r3, r8
    fbbe:	4632      	mov	r2, r6
    fbc0:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    fbc4:	4659      	mov	r1, fp
    fbc6:	4628      	mov	r0, r5
    fbc8:	f7ff fed0 	bl	f96c <_printk_dec_ulong>
				break;
    fbcc:	e734      	b.n	fa38 <z_vprintk+0x18>
				if (length_mod == 'z') {
    fbce:	2f7a      	cmp	r7, #122	; 0x7a
    fbd0:	d102      	bne.n	fbd8 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
    fbd2:	f854 2b04 	ldr.w	r2, [r4], #4
    fbd6:	e00f      	b.n	fbf8 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
    fbd8:	2f6c      	cmp	r7, #108	; 0x6c
    fbda:	d0fa      	beq.n	fbd2 <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
    fbdc:	2f4c      	cmp	r7, #76	; 0x4c
    fbde:	d1f8      	bne.n	fbd2 <z_vprintk+0x1b2>
					if (llu > ~0UL) {
    fbe0:	2100      	movs	r1, #0
    fbe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
    fbe6:	3407      	adds	r4, #7
    fbe8:	f024 0407 	bic.w	r4, r4, #7
    fbec:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    fbf0:	4299      	cmp	r1, r3
    fbf2:	bf08      	it	eq
    fbf4:	4290      	cmpeq	r0, r2
    fbf6:	d3d3      	bcc.n	fba0 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
    fbf8:	4643      	mov	r3, r8
    fbfa:	f8cd 9000 	str.w	r9, [sp]
    fbfe:	e7e1      	b.n	fbc4 <z_vprintk+0x1a4>
				out('0', ctx);
    fc00:	4659      	mov	r1, fp
    fc02:	2030      	movs	r0, #48	; 0x30
    fc04:	47a8      	blx	r5
				out('x', ctx);
    fc06:	4659      	mov	r1, fp
    fc08:	2078      	movs	r0, #120	; 0x78
    fc0a:	47a8      	blx	r5
					min_width = 8;
    fc0c:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    fc10:	f04f 0801 	mov.w	r8, #1
    fc14:	e772      	b.n	fafc <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    fc16:	2f6c      	cmp	r7, #108	; 0x6c
    fc18:	f43f af75 	beq.w	fb06 <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
    fc1c:	2f4c      	cmp	r7, #76	; 0x4c
    fc1e:	f47f af72 	bne.w	fb06 <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
    fc22:	1de3      	adds	r3, r4, #7
    fc24:	f023 0307 	bic.w	r3, r3, #7
    fc28:	461c      	mov	r4, r3
    fc2a:	f854 2b08 	ldr.w	r2, [r4], #8
    fc2e:	9206      	str	r2, [sp, #24]
    fc30:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
    fc32:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    fc34:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
    fc36:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
    fc3a:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
    fc3c:	9107      	str	r1, [sp, #28]
		shift -= 4;
    fc3e:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
    fc42:	9906      	ldr	r1, [sp, #24]
    fc44:	f1ca 0e20 	rsb	lr, sl, #32
    fc48:	f1aa 0c20 	sub.w	ip, sl, #32
    fc4c:	fa21 f00a 	lsr.w	r0, r1, sl
    fc50:	fa02 fe0e 	lsl.w	lr, r2, lr
    fc54:	ea40 000e 	orr.w	r0, r0, lr
    fc58:	fa22 fc0c 	lsr.w	ip, r2, ip
    fc5c:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    fc60:	f010 000f 	ands.w	r0, r0, #15
    fc64:	d107      	bne.n	fc76 <z_vprintk+0x256>
    fc66:	9907      	ldr	r1, [sp, #28]
    fc68:	b911      	cbnz	r1, fc70 <z_vprintk+0x250>
    fc6a:	f1ba 0f00 	cmp.w	sl, #0
    fc6e:	d125      	bne.n	fcbc <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
    fc70:	f04f 0c30 	mov.w	ip, #48	; 0x30
    fc74:	e005      	b.n	fc82 <z_vprintk+0x262>
    fc76:	2809      	cmp	r0, #9
    fc78:	bf8c      	ite	hi
    fc7a:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    fc7e:	f04f 0c30 	movls.w	ip, #48	; 0x30
    fc82:	4460      	add	r0, ip
			out((int)nibble, ctx);
    fc84:	4659      	mov	r1, fp
    fc86:	b240      	sxtb	r0, r0
    fc88:	920a      	str	r2, [sp, #40]	; 0x28
    fc8a:	9307      	str	r3, [sp, #28]
    fc8c:	47a8      	blx	r5
			digits++;
    fc8e:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
    fc90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
    fc92:	3301      	adds	r3, #1
    fc94:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
    fc96:	9b07      	ldr	r3, [sp, #28]
    fc98:	f1ba 0f00 	cmp.w	sl, #0
    fc9c:	d123      	bne.n	fce6 <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
    fc9e:	f1b8 0f03 	cmp.w	r8, #3
    fca2:	f47f aec9 	bne.w	fa38 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
    fca6:	9b04      	ldr	r3, [sp, #16]
    fca8:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
    fcac:	2e00      	cmp	r6, #0
    fcae:	f77f aec3 	ble.w	fa38 <z_vprintk+0x18>
			out(' ', ctx);
    fcb2:	4659      	mov	r1, fp
    fcb4:	2020      	movs	r0, #32
    fcb6:	47a8      	blx	r5
    fcb8:	3e01      	subs	r6, #1
    fcba:	e7f7      	b.n	fcac <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
    fcbc:	1e59      	subs	r1, r3, #1
    fcbe:	4599      	cmp	r9, r3
    fcc0:	910a      	str	r1, [sp, #40]	; 0x28
    fcc2:	db07      	blt.n	fcd4 <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
    fcc4:	f1b8 0f01 	cmp.w	r8, #1
    fcc8:	d106      	bne.n	fcd8 <z_vprintk+0x2b8>
				out('0', ctx);
    fcca:	4659      	mov	r1, fp
    fccc:	2030      	movs	r0, #48	; 0x30
    fcce:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
    fcd0:	47a8      	blx	r5
    fcd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
    fcd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fcd6:	e7b2      	b.n	fc3e <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
    fcd8:	f1b8 0f02 	cmp.w	r8, #2
    fcdc:	d1fa      	bne.n	fcd4 <z_vprintk+0x2b4>
				out(' ', ctx);
    fcde:	4659      	mov	r1, fp
    fce0:	2020      	movs	r0, #32
    fce2:	920b      	str	r2, [sp, #44]	; 0x2c
    fce4:	e7f4      	b.n	fcd0 <z_vprintk+0x2b0>
			found_largest_digit = 1;
    fce6:	9607      	str	r6, [sp, #28]
    fce8:	e7a9      	b.n	fc3e <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
    fcea:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
    fcee:	46b2      	mov	sl, r6
    fcf0:	4653      	mov	r3, sl
    fcf2:	f81a 0b01 	ldrb.w	r0, [sl], #1
    fcf6:	b968      	cbnz	r0, fd14 <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
    fcf8:	f1b8 0f03 	cmp.w	r8, #3
    fcfc:	d121      	bne.n	fd42 <z_vprintk+0x322>
					int remaining = min_width - (s - start);
    fcfe:	1b9e      	subs	r6, r3, r6
    fd00:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
    fd04:	2e00      	cmp	r6, #0
    fd06:	f77f ae97 	ble.w	fa38 <z_vprintk+0x18>
						out(' ', ctx);
    fd0a:	4659      	mov	r1, fp
    fd0c:	2020      	movs	r0, #32
    fd0e:	47a8      	blx	r5
    fd10:	3e01      	subs	r6, #1
    fd12:	e7f7      	b.n	fd04 <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
    fd14:	4659      	mov	r1, fp
    fd16:	47a8      	blx	r5
    fd18:	e7ea      	b.n	fcf0 <z_vprintk+0x2d0>
				out(c, ctx);
    fd1a:	4659      	mov	r1, fp
    fd1c:	f854 0b04 	ldr.w	r0, [r4], #4
    fd20:	e6ae      	b.n	fa80 <z_vprintk+0x60>
				out((int)'%', ctx);
    fd22:	4659      	mov	r1, fp
    fd24:	e6ac      	b.n	fa80 <z_vprintk+0x60>
				length_mod = 0;
    fd26:	4637      	mov	r7, r6
				padding = PAD_NONE;
    fd28:	46b0      	mov	r8, r6
				min_width = -1;
    fd2a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    fd2e:	2601      	movs	r6, #1
    fd30:	e68a      	b.n	fa48 <z_vprintk+0x28>
			switch (*fmt) {
    fd32:	f04f 0803 	mov.w	r8, #3
    fd36:	e687      	b.n	fa48 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
    fd38:	f04f 0801 	mov.w	r8, #1
    fd3c:	e684      	b.n	fa48 <z_vprintk+0x28>
					length_mod = 'L';
    fd3e:	274c      	movs	r7, #76	; 0x4c
    fd40:	e682      	b.n	fa48 <z_vprintk+0x28>
			might_format = 0;
    fd42:	4606      	mov	r6, r0
		++fmt;
    fd44:	e680      	b.n	fa48 <z_vprintk+0x28>
    fd46:	bf00      	nop

0000fd48 <vprintk>:
{
    fd48:	b507      	push	{r0, r1, r2, lr}
    fd4a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    fd4c:	2100      	movs	r1, #0
{
    fd4e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    fd50:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    fd52:	4803      	ldr	r0, [pc, #12]	; (fd60 <vprintk+0x18>)
    fd54:	a901      	add	r1, sp, #4
    fd56:	f7ff fe63 	bl	fa20 <z_vprintk>
}
    fd5a:	b003      	add	sp, #12
    fd5c:	f85d fb04 	ldr.w	pc, [sp], #4
    fd60:	0000f95d 	.word	0x0000f95d

0000fd64 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    fd64:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    fd66:	2500      	movs	r5, #0
{
    fd68:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    fd6a:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    fd6e:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    fd70:	a901      	add	r1, sp, #4
    fd72:	4805      	ldr	r0, [pc, #20]	; (fd88 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    fd74:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    fd76:	f7ff fe53 	bl	fa20 <z_vprintk>

	if (ctx.count < ctx.max) {
    fd7a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    fd7e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    fd80:	bfb8      	it	lt
    fd82:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    fd84:	b005      	add	sp, #20
    fd86:	bd30      	pop	{r4, r5, pc}
    fd88:	00023f6d 	.word	0x00023f6d

0000fd8c <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    fd8c:	f04f 0220 	mov.w	r2, #32
    fd90:	f3ef 8311 	mrs	r3, BASEPRI
    fd94:	f382 8811 	msr	BASEPRI, r2
    fd98:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    fd9c:	2101      	movs	r1, #1
    fd9e:	4a04      	ldr	r2, [pc, #16]	; (fdb0 <nordicsemi_nrf91_init+0x24>)
    fda0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    fda4:	f383 8811 	msr	BASEPRI, r3
    fda8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    fdac:	2000      	movs	r0, #0
    fdae:	4770      	bx	lr
    fdb0:	40039000 	.word	0x40039000

0000fdb4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    fdb4:	b120      	cbz	r0, fdc0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    fdb6:	4b03      	ldr	r3, [pc, #12]	; (fdc4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    fdb8:	0180      	lsls	r0, r0, #6
    fdba:	f043 0301 	orr.w	r3, r3, #1
    fdbe:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    fdc0:	4770      	bx	lr
    fdc2:	bf00      	nop
    fdc4:	0002a410 	.word	0x0002a410

0000fdc8 <log_generic>:
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else  if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		u32_t timestamp = timestamp_func();
    fdc8:	4b12      	ldr	r3, [pc, #72]	; (fe14 <log_generic+0x4c>)
{
    fdca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		u32_t timestamp = timestamp_func();
    fdce:	681b      	ldr	r3, [r3, #0]
{
    fdd0:	4680      	mov	r8, r0
    fdd2:	468a      	mov	sl, r1
    fdd4:	4691      	mov	r9, r2
		u32_t timestamp = timestamp_func();
    fdd6:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
    fdd8:	f04f 0b00 	mov.w	fp, #0
		u32_t timestamp = timestamp_func();
    fddc:	4607      	mov	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    fdde:	4c0e      	ldr	r4, [pc, #56]	; (fe18 <log_generic+0x50>)
    fde0:	4d0e      	ldr	r5, [pc, #56]	; (fe1c <log_generic+0x54>)
    fde2:	1b2d      	subs	r5, r5, r4
    fde4:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
    fde6:	45ab      	cmp	fp, r5
    fde8:	db02      	blt.n	fdf0 <log_generic+0x28>
			args[i] = va_arg(ap, log_arg_t);
		}

		log_n(fmt, args, nargs, src_level);
	}
}
    fdea:	b003      	add	sp, #12
    fdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    fdf0:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend)) {
    fdf2:	795b      	ldrb	r3, [r3, #5]
    fdf4:	b14b      	cbz	r3, fe0a <log_generic+0x42>
	if (backend->api->put_sync_string) {
    fdf6:	6823      	ldr	r3, [r4, #0]
    fdf8:	685e      	ldr	r6, [r3, #4]
    fdfa:	b136      	cbz	r6, fe0a <log_generic+0x42>
		backend->api->put_sync_string(backend, src_level,
    fdfc:	4653      	mov	r3, sl
    fdfe:	463a      	mov	r2, r7
    fe00:	4641      	mov	r1, r8
    fe02:	4620      	mov	r0, r4
    fe04:	f8cd 9000 	str.w	r9, [sp]
    fe08:	47b0      	blx	r6
		for (int i = 0; i < log_backend_count_get(); i++) {
    fe0a:	f10b 0b01 	add.w	fp, fp, #1
    fe0e:	3410      	adds	r4, #16
    fe10:	e7e9      	b.n	fde6 <log_generic+0x1e>
    fe12:	bf00      	nop
    fe14:	200200ac 	.word	0x200200ac
    fe18:	0002a38c 	.word	0x0002a38c
    fe1c:	0002a39c 	.word	0x0002a39c

0000fe20 <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
    fe20:	4b03      	ldr	r3, [pc, #12]	; (fe30 <log_core_init+0x10>)
    fe22:	4a04      	ldr	r2, [pc, #16]	; (fe34 <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
    fe24:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    fe28:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    fe2a:	f000 ba25 	b.w	10278 <log_output_timestamp_freq_set>
    fe2e:	bf00      	nop
    fe30:	200200ac 	.word	0x200200ac
    fe34:	000244f9 	.word	0x000244f9

0000fe38 <log_source_name_get>:
    fe38:	4a04      	ldr	r2, [pc, #16]	; (fe4c <log_source_name_get+0x14>)
    fe3a:	4b05      	ldr	r3, [pc, #20]	; (fe50 <log_source_name_get+0x18>)
    fe3c:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(u32_t domain_id, u32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    fe3e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    fe42:	bf34      	ite	cc
    fe44:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    fe48:	2000      	movcs	r0, #0
}
    fe4a:	4770      	bx	lr
    fe4c:	0002a2c4 	.word	0x0002a2c4
    fe50:	0002a38c 	.word	0x0002a38c

0000fe54 <log_backend_enable>:
			u32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	u32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    fe54:	4b09      	ldr	r3, [pc, #36]	; (fe7c <log_backend_enable+0x28>)

	log_backend_id_set(backend, id);
    fe56:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    fe58:	1ac3      	subs	r3, r0, r3
    fe5a:	111b      	asrs	r3, r3, #4
    fe5c:	3301      	adds	r3, #1
{
    fe5e:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    fe60:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    fe62:	2201      	movs	r2, #1
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);
    fe64:	6843      	ldr	r3, [r0, #4]

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
    fe66:	4c06      	ldr	r4, [pc, #24]	; (fe80 <log_backend_enable+0x2c>)
    fe68:	715a      	strb	r2, [r3, #5]
    fe6a:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    fe6c:	6019      	str	r1, [r3, #0]
    fe6e:	b912      	cbnz	r2, fe76 <log_backend_enable+0x22>
	z_impl_k_sem_give(sem);
    fe70:	4804      	ldr	r0, [pc, #16]	; (fe84 <log_backend_enable+0x30>)
    fe72:	f010 fc53 	bl	2071c <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    fe76:	2301      	movs	r3, #1
    fe78:	7023      	strb	r3, [r4, #0]
}
    fe7a:	bd10      	pop	{r4, pc}
    fe7c:	0002a38c 	.word	0x0002a38c
    fe80:	20029e41 	.word	0x20029e41
    fe84:	200208cc 	.word	0x200208cc

0000fe88 <log_init>:
{
    fe88:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    fe8a:	4b14      	ldr	r3, [pc, #80]	; (fedc <log_init+0x54>)
    fe8c:	4c14      	ldr	r4, [pc, #80]	; (fee0 <log_init+0x58>)
    fe8e:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    fe90:	2b9f      	cmp	r3, #159	; 0x9f
    fe92:	ea4f 1623 	mov.w	r6, r3, asr #4
    fe96:	d906      	bls.n	fea6 <log_init+0x1e>
    fe98:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    fe9c:	4b11      	ldr	r3, [pc, #68]	; (fee4 <log_init+0x5c>)
    fe9e:	4a12      	ldr	r2, [pc, #72]	; (fee8 <log_init+0x60>)
    fea0:	4812      	ldr	r0, [pc, #72]	; (feec <log_init+0x64>)
    fea2:	f010 ff67 	bl	20d74 <__assert_func>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    fea6:	4b12      	ldr	r3, [pc, #72]	; (fef0 <log_init+0x68>)
    fea8:	e8d3 5fef 	ldaex	r5, [r3]
    feac:	1c6a      	adds	r2, r5, #1
    feae:	e8c3 2fe1 	stlex	r1, r2, [r3]
    feb2:	2900      	cmp	r1, #0
    feb4:	d1f8      	bne.n	fea8 <log_init+0x20>
	if (atomic_inc(&initialized) != 0) {
    feb6:	b90d      	cbnz	r5, febc <log_init+0x34>
	for (i = 0; i < log_backend_count_get(); i++) {
    feb8:	42b5      	cmp	r5, r6
    feba:	d100      	bne.n	febe <log_init+0x36>
}
    febc:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    febe:	7b23      	ldrb	r3, [r4, #12]
    fec0:	b143      	cbz	r3, fed4 <log_init+0x4c>
			if (backend->api->init != NULL) {
    fec2:	6823      	ldr	r3, [r4, #0]
    fec4:	695b      	ldr	r3, [r3, #20]
    fec6:	b103      	cbz	r3, feca <log_init+0x42>
				backend->api->init();
    fec8:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    feca:	2204      	movs	r2, #4
    fecc:	2100      	movs	r1, #0
    fece:	4620      	mov	r0, r4
    fed0:	f7ff ffc0 	bl	fe54 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    fed4:	3501      	adds	r5, #1
    fed6:	3410      	adds	r4, #16
    fed8:	e7ee      	b.n	feb8 <log_init+0x30>
    feda:	bf00      	nop
    fedc:	0002a39c 	.word	0x0002a39c
    fee0:	0002a38c 	.word	0x0002a38c
    fee4:	0002b76d 	.word	0x0002b76d
    fee8:	0002b7a4 	.word	0x0002b7a4
    feec:	0002b740 	.word	0x0002b740
    fef0:	20022568 	.word	0x20022568

0000fef4 <z_impl_log_panic>:
{
    fef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    fef6:	4f0c      	ldr	r7, [pc, #48]	; (ff28 <z_impl_log_panic+0x34>)
    fef8:	783d      	ldrb	r5, [r7, #0]
    fefa:	b94d      	cbnz	r5, ff10 <z_impl_log_panic+0x1c>
	log_init();
    fefc:	f7ff ffc4 	bl	fe88 <log_init>
    ff00:	4c0a      	ldr	r4, [pc, #40]	; (ff2c <z_impl_log_panic+0x38>)
    ff02:	4e0b      	ldr	r6, [pc, #44]	; (ff30 <z_impl_log_panic+0x3c>)
    ff04:	1b36      	subs	r6, r6, r4
    ff06:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    ff08:	42b5      	cmp	r5, r6
    ff0a:	db02      	blt.n	ff12 <z_impl_log_panic+0x1e>
	panic_mode = true;
    ff0c:	2301      	movs	r3, #1
    ff0e:	703b      	strb	r3, [r7, #0]
}
    ff10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    ff12:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ff14:	795b      	ldrb	r3, [r3, #5]
    ff16:	b11b      	cbz	r3, ff20 <z_impl_log_panic+0x2c>
	backend->api->panic(backend);
    ff18:	6823      	ldr	r3, [r4, #0]
    ff1a:	4620      	mov	r0, r4
    ff1c:	691b      	ldr	r3, [r3, #16]
    ff1e:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    ff20:	3501      	adds	r5, #1
    ff22:	3410      	adds	r4, #16
    ff24:	e7f0      	b.n	ff08 <z_impl_log_panic+0x14>
    ff26:	bf00      	nop
    ff28:	20029e42 	.word	0x20029e42
    ff2c:	0002a38c 	.word	0x0002a38c
    ff30:	0002a39c 	.word	0x0002a39c

0000ff34 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    ff34:	b40e      	push	{r1, r2, r3}
    ff36:	b503      	push	{r0, r1, lr}
    ff38:	ab03      	add	r3, sp, #12
    ff3a:	f853 2b04 	ldr.w	r2, [r3], #4
    ff3e:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    ff40:	4804      	ldr	r0, [pc, #16]	; (ff54 <print_formatted+0x20>)
	va_start(args, fmt);
    ff42:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    ff44:	f7ff fd6c 	bl	fa20 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    ff48:	2000      	movs	r0, #0
    ff4a:	b002      	add	sp, #8
    ff4c:	f85d eb04 	ldr.w	lr, [sp], #4
    ff50:	b003      	add	sp, #12
    ff52:	4770      	bx	lr
    ff54:	00024527 	.word	0x00024527

0000ff58 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    ff58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    ff5c:	f011 0402 	ands.w	r4, r1, #2
{
    ff60:	b085      	sub	sp, #20
    ff62:	4606      	mov	r6, r0
    ff64:	4690      	mov	r8, r2
    ff66:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    ff6a:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    ff6e:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    ff72:	d007      	beq.n	ff84 <prefix_print+0x2c>
	if (!format) {
    ff74:	f011 0f44 	tst.w	r1, #68	; 0x44
    ff78:	d137      	bne.n	ffea <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    ff7a:	461a      	mov	r2, r3
    ff7c:	4932      	ldr	r1, [pc, #200]	; (10048 <prefix_print+0xf0>)
    ff7e:	f7ff ffd9 	bl	ff34 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    ff82:	4604      	mov	r4, r0
	if (color) {
    ff84:	f1b9 0f00 	cmp.w	r9, #0
    ff88:	d00a      	beq.n	ffa0 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    ff8a:	4b30      	ldr	r3, [pc, #192]	; (1004c <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    ff8c:	4630      	mov	r0, r6
		const char *color = start && (colors[level] != NULL) ?
    ff8e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    ff92:	4b2f      	ldr	r3, [pc, #188]	; (10050 <prefix_print+0xf8>)
    ff94:	492f      	ldr	r1, [pc, #188]	; (10054 <prefix_print+0xfc>)
    ff96:	2a00      	cmp	r2, #0
    ff98:	bf08      	it	eq
    ff9a:	461a      	moveq	r2, r3
    ff9c:	f7ff ffca 	bl	ff34 <print_formatted>
	if (level_on) {
    ffa0:	b13d      	cbz	r5, ffb2 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    ffa2:	4b2d      	ldr	r3, [pc, #180]	; (10058 <prefix_print+0x100>)
    ffa4:	4630      	mov	r0, r6
    ffa6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    ffaa:	492c      	ldr	r1, [pc, #176]	; (1005c <prefix_print+0x104>)
    ffac:	f7ff ffc2 	bl	ff34 <print_formatted>
    ffb0:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    ffb2:	f1b8 0f00 	cmp.w	r8, #0
    ffb6:	d044      	beq.n	10042 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    ffb8:	2301      	movs	r3, #1
    ffba:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    ffbe:	4b28      	ldr	r3, [pc, #160]	; (10060 <prefix_print+0x108>)
    ffc0:	f017 0f10 	tst.w	r7, #16
    ffc4:	4f27      	ldr	r7, [pc, #156]	; (10064 <prefix_print+0x10c>)
    ffc6:	bf18      	it	ne
    ffc8:	461f      	movne	r7, r3
    ffca:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    ffce:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    ffd2:	f7ff ff31 	bl	fe38 <log_source_name_get>
    ffd6:	4639      	mov	r1, r7
    ffd8:	4602      	mov	r2, r0
    ffda:	4630      	mov	r0, r6
    ffdc:	f7ff ffaa 	bl	ff34 <print_formatted>
    ffe0:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    ffe2:	4420      	add	r0, r4
    ffe4:	b005      	add	sp, #20
    ffe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    ffea:	4a1f      	ldr	r2, [pc, #124]	; (10068 <prefix_print+0x110>)
    ffec:	6811      	ldr	r1, [r2, #0]
    ffee:	b331      	cbz	r1, 1003e <prefix_print+0xe6>
		timestamp /= timestamp_div;
    fff0:	4a1e      	ldr	r2, [pc, #120]	; (1006c <prefix_print+0x114>)
    fff2:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    fff6:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    fff8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    fffc:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
   10000:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   10004:	fbb4 f2fe 	udiv	r2, r4, lr
   10008:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   1000c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   10010:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   10014:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   10018:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1001c:	fb01 441b 	mls	r4, r1, fp, r4
   10020:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   10024:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   10028:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   1002c:	e9cd b101 	strd	fp, r1, [sp, #4]
   10030:	fb0a e113 	mls	r1, sl, r3, lr
   10034:	9100      	str	r1, [sp, #0]
   10036:	490e      	ldr	r1, [pc, #56]	; (10070 <prefix_print+0x118>)
   10038:	f7ff ff7c 	bl	ff34 <print_formatted>
   1003c:	e7a1      	b.n	ff82 <prefix_print+0x2a>
		length = 0;
   1003e:	4608      	mov	r0, r1
   10040:	e79f      	b.n	ff82 <prefix_print+0x2a>
	total += print_formatted(log_output,
   10042:	4f08      	ldr	r7, [pc, #32]	; (10064 <prefix_print+0x10c>)
   10044:	e7c1      	b.n	ffca <prefix_print+0x72>
   10046:	bf00      	nop
   10048:	0002b7bb 	.word	0x0002b7bb
   1004c:	0002a518 	.word	0x0002a518
   10050:	0002b7ad 	.word	0x0002b7ad
   10054:	0002b46f 	.word	0x0002b46f
   10058:	0002a52c 	.word	0x0002a52c
   1005c:	0002b7e0 	.word	0x0002b7e0
   10060:	0002b7b7 	.word	0x0002b7b7
   10064:	0002b7b2 	.word	0x0002b7b2
   10068:	2002256c 	.word	0x2002256c
   1006c:	20022570 	.word	0x20022570
   10070:	0002b7c4 	.word	0x0002b7c4

00010074 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
   10074:	b538      	push	{r3, r4, r5, lr}
   10076:	460c      	mov	r4, r1
	if (color) {
   10078:	07e1      	lsls	r1, r4, #31
{
   1007a:	4605      	mov	r5, r0
	if (color) {
   1007c:	d503      	bpl.n	10086 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
   1007e:	4a08      	ldr	r2, [pc, #32]	; (100a0 <postfix_print+0x2c>)
   10080:	4908      	ldr	r1, [pc, #32]	; (100a4 <postfix_print+0x30>)
   10082:	f7ff ff57 	bl	ff34 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   10086:	06e2      	lsls	r2, r4, #27
   10088:	d408      	bmi.n	1009c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1008a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   1008c:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   1008e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   10092:	bf4c      	ite	mi
   10094:	4904      	ldrmi	r1, [pc, #16]	; (100a8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   10096:	4905      	ldrpl	r1, [pc, #20]	; (100ac <postfix_print+0x38>)
   10098:	f7ff bf4c 	b.w	ff34 <print_formatted>
}
   1009c:	bd38      	pop	{r3, r4, r5, pc}
   1009e:	bf00      	nop
   100a0:	0002b7ad 	.word	0x0002b7ad
   100a4:	0002b46f 	.word	0x0002b46f
   100a8:	0002cc6b 	.word	0x0002cc6b
   100ac:	0002cc6a 	.word	0x0002cc6a

000100b0 <hexdump_line_print>:
{
   100b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   100b4:	461d      	mov	r5, r3
   100b6:	9b08      	ldr	r3, [sp, #32]
   100b8:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   100ba:	06da      	lsls	r2, r3, #27
{
   100bc:	4604      	mov	r4, r0
   100be:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   100c0:	d405      	bmi.n	100ce <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   100c2:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   100c4:	bf4c      	ite	mi
   100c6:	492b      	ldrmi	r1, [pc, #172]	; (10174 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   100c8:	492b      	ldrpl	r1, [pc, #172]	; (10178 <hexdump_line_print+0xc8>)
   100ca:	f7ff ff33 	bl	ff34 <print_formatted>
{
   100ce:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   100d2:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 10180 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   100d6:	45a8      	cmp	r8, r5
   100d8:	db2d      	blt.n	10136 <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   100da:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   100dc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 10184 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   100e0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 10188 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   100e4:	f8df a098 	ldr.w	sl, [pc, #152]	; 10180 <hexdump_line_print+0xd0>
		if (i < length) {
   100e8:	42bd      	cmp	r5, r7
   100ea:	d232      	bcs.n	10152 <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   100ec:	4649      	mov	r1, r9
   100ee:	4620      	mov	r0, r4
   100f0:	5d72      	ldrb	r2, [r6, r5]
   100f2:	f7ff ff1f 	bl	ff34 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   100f6:	3501      	adds	r5, #1
   100f8:	2d10      	cmp	r5, #16
   100fa:	d123      	bne.n	10144 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   100fc:	4620      	mov	r0, r4
   100fe:	491f      	ldr	r1, [pc, #124]	; (1017c <hexdump_line_print+0xcc>)
   10100:	f7ff ff18 	bl	ff34 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   10104:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   10106:	f8df 8078 	ldr.w	r8, [pc, #120]	; 10180 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   1010a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1018c <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
   1010e:	f8df a080 	ldr.w	sl, [pc, #128]	; 10190 <hexdump_line_print+0xe0>
		if (i < length) {
   10112:	42af      	cmp	r7, r5
   10114:	d929      	bls.n	1016a <hexdump_line_print+0xba>
			char c = (char)data[i];
   10116:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   10118:	4651      	mov	r1, sl
   1011a:	f812 3009 	ldrb.w	r3, [r2, r9]
   1011e:	4620      	mov	r0, r4
   10120:	f013 0f97 	tst.w	r3, #151	; 0x97
   10124:	bf08      	it	eq
   10126:	222e      	moveq	r2, #46	; 0x2e
   10128:	f7ff ff04 	bl	ff34 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1012c:	3501      	adds	r5, #1
   1012e:	2d10      	cmp	r5, #16
   10130:	d114      	bne.n	1015c <hexdump_line_print+0xac>
}
   10132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   10136:	4649      	mov	r1, r9
   10138:	4620      	mov	r0, r4
   1013a:	f7ff fefb 	bl	ff34 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1013e:	f108 0801 	add.w	r8, r8, #1
   10142:	e7c8      	b.n	100d6 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   10144:	076a      	lsls	r2, r5, #29
   10146:	d1cf      	bne.n	100e8 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   10148:	4651      	mov	r1, sl
   1014a:	4620      	mov	r0, r4
   1014c:	f7ff fef2 	bl	ff34 <print_formatted>
   10150:	e7ca      	b.n	100e8 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   10152:	4641      	mov	r1, r8
   10154:	4620      	mov	r0, r4
   10156:	f7ff feed 	bl	ff34 <print_formatted>
   1015a:	e7cc      	b.n	100f6 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   1015c:	076b      	lsls	r3, r5, #29
   1015e:	d1d8      	bne.n	10112 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   10160:	4641      	mov	r1, r8
   10162:	4620      	mov	r0, r4
   10164:	f7ff fee6 	bl	ff34 <print_formatted>
   10168:	e7d3      	b.n	10112 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   1016a:	4641      	mov	r1, r8
   1016c:	4620      	mov	r0, r4
   1016e:	f7ff fee1 	bl	ff34 <print_formatted>
   10172:	e7db      	b.n	1012c <hexdump_line_print+0x7c>
   10174:	0002cc6b 	.word	0x0002cc6b
   10178:	0002cc6a 	.word	0x0002cc6a
   1017c:	0002b7f0 	.word	0x0002b7f0
   10180:	0002b7ee 	.word	0x0002b7ee
   10184:	0002b7ec 	.word	0x0002b7ec
   10188:	0002b7e6 	.word	0x0002b7e6
   1018c:	0002d0fe 	.word	0x0002d0fe
   10190:	0002b7f2 	.word	0x0002b7f2

00010194 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, u32_t timestamp,
		       const char *fmt, va_list ap, u32_t flags)
{
   10194:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   10198:	f011 0607 	ands.w	r6, r1, #7
{
   1019c:	4605      	mov	r5, r0
   1019e:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   101a2:	461c      	mov	r4, r3
	if (!raw_string) {
   101a4:	d00b      	beq.n	101be <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
   101a6:	f3c1 1389 	ubfx	r3, r1, #6, #10
   101aa:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   101ae:	e9cd 6100 	strd	r6, r1, [sp]
   101b2:	9302      	str	r3, [sp, #8]
   101b4:	4639      	mov	r1, r7
   101b6:	4613      	mov	r3, r2
   101b8:	2201      	movs	r2, #1
   101ba:	f7ff fecd 	bl	ff58 <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
   101be:	4643      	mov	r3, r8
   101c0:	4622      	mov	r2, r4
   101c2:	4629      	mov	r1, r5
   101c4:	480d      	ldr	r0, [pc, #52]	; (101fc <log_output_string+0x68>)
   101c6:	f7ff fc2b 	bl	fa20 <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
   101ca:	b98e      	cbnz	r6, 101f0 <log_output_string+0x5c>
   101cc:	3c01      	subs	r4, #1
	while (*fmt != '\0') {
   101ce:	4633      	mov	r3, r6
   101d0:	f814 6f01 	ldrb.w	r6, [r4, #1]!
   101d4:	2e00      	cmp	r6, #0
   101d6:	d1fa      	bne.n	101ce <log_output_string+0x3a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   101d8:	2b0a      	cmp	r3, #10
   101da:	d103      	bne.n	101e4 <log_output_string+0x50>
			print_formatted(log_output, "\r");
   101dc:	4628      	mov	r0, r5
   101de:	4908      	ldr	r1, [pc, #32]	; (10200 <log_output_string+0x6c>)
   101e0:	f7ff fea8 	bl	ff34 <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
   101e4:	4628      	mov	r0, r5
}
   101e6:	b004      	add	sp, #16
   101e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
   101ec:	f014 b9b4 	b.w	24558 <log_output_flush>
		postfix_print(log_output, flags, level);
   101f0:	4632      	mov	r2, r6
   101f2:	4639      	mov	r1, r7
   101f4:	4628      	mov	r0, r5
   101f6:	f7ff ff3d 	bl	10074 <postfix_print>
   101fa:	e7f3      	b.n	101e4 <log_output_string+0x50>
   101fc:	00024527 	.word	0x00024527
   10200:	0002b7f5 	.word	0x0002b7f5

00010204 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, u32_t timestamp,
			     const char *metadata, const u8_t *data,
			     u32_t length, u32_t flags)
{
   10204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   10208:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1020a:	4698      	mov	r8, r3
   1020c:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   10210:	f3c1 1389 	ubfx	r3, r1, #6, #10
	u8_t level = (u8_t)src_level.level;
   10214:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   10218:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   1021c:	e9cd 9100 	strd	r9, r1, [sp]
   10220:	9302      	str	r3, [sp, #8]
   10222:	4631      	mov	r1, r6
   10224:	4613      	mov	r3, r2
   10226:	2201      	movs	r2, #1
{
   10228:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1022a:	f7ff fe95 	bl	ff58 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
   1022e:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   10230:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
   10232:	4910      	ldr	r1, [pc, #64]	; (10274 <log_output_hexdump+0x70>)
   10234:	4620      	mov	r0, r4
   10236:	f7ff fe7d 	bl	ff34 <print_formatted>

	while (length) {
   1023a:	b955      	cbnz	r5, 10252 <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
   1023c:	4620      	mov	r0, r4
   1023e:	464a      	mov	r2, r9
   10240:	4631      	mov	r1, r6
   10242:	f7ff ff17 	bl	10074 <postfix_print>
	log_output_flush(log_output);
   10246:	4620      	mov	r0, r4
}
   10248:	b004      	add	sp, #16
   1024a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
   1024e:	f014 b983 	b.w	24558 <log_output_flush>
		u32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   10252:	2d10      	cmp	r5, #16
   10254:	46a8      	mov	r8, r5
   10256:	bf28      	it	cs
   10258:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
   1025c:	4639      	mov	r1, r7
   1025e:	4653      	mov	r3, sl
   10260:	4642      	mov	r2, r8
   10262:	4620      	mov	r0, r4
   10264:	9600      	str	r6, [sp, #0]
   10266:	f7ff ff23 	bl	100b0 <hexdump_line_print>
		data += part_len;
   1026a:	4447      	add	r7, r8
		length -= part_len;
   1026c:	eba5 0508 	sub.w	r5, r5, r8
   10270:	e7e3      	b.n	1023a <log_output_hexdump+0x36>
   10272:	bf00      	nop
   10274:	0002b46f 	.word	0x0002b46f

00010278 <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
   10278:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1027a:	2100      	movs	r1, #0
	timestamp_div = 1U;
   1027c:	4a07      	ldr	r2, [pc, #28]	; (1029c <log_output_timestamp_freq_set+0x24>)
{
   1027e:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   10280:	4c07      	ldr	r4, [pc, #28]	; (102a0 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   10282:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   10284:	42a0      	cmp	r0, r4
   10286:	d804      	bhi.n	10292 <log_output_timestamp_freq_set+0x1a>
   10288:	b101      	cbz	r1, 1028c <log_output_timestamp_freq_set+0x14>
   1028a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1028c:	4b05      	ldr	r3, [pc, #20]	; (102a4 <log_output_timestamp_freq_set+0x2c>)
   1028e:	6018      	str	r0, [r3, #0]
}
   10290:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   10292:	2101      	movs	r1, #1
		frequency /= 2U;
   10294:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   10296:	005b      	lsls	r3, r3, #1
   10298:	e7f4      	b.n	10284 <log_output_timestamp_freq_set+0xc>
   1029a:	bf00      	nop
   1029c:	20022570 	.word	0x20022570
   102a0:	000f4240 	.word	0x000f4240
   102a4:	2002256c 	.word	0x2002256c

000102a8 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   102a8:	4801      	ldr	r0, [pc, #4]	; (102b0 <panic+0x8>)
   102aa:	f014 b955 	b.w	24558 <log_output_flush>
   102ae:	bf00      	nop
   102b0:	0002a558 	.word	0x0002a558

000102b4 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
   102b4:	b508      	push	{r3, lr}
   102b6:	4806      	ldr	r0, [pc, #24]	; (102d0 <log_backend_uart_init+0x1c>)
   102b8:	f00f fb24 	bl	1f904 <z_impl_device_get_binding>
	struct device *dev;

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);
   102bc:	b928      	cbnz	r0, 102ca <log_backend_uart_init+0x16>
   102be:	212d      	movs	r1, #45	; 0x2d
   102c0:	4b04      	ldr	r3, [pc, #16]	; (102d4 <log_backend_uart_init+0x20>)
   102c2:	4a05      	ldr	r2, [pc, #20]	; (102d8 <log_backend_uart_init+0x24>)
   102c4:	4805      	ldr	r0, [pc, #20]	; (102dc <log_backend_uart_init+0x28>)
   102c6:	f010 fd55 	bl	20d74 <__assert_func>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
   102ca:	4b05      	ldr	r3, [pc, #20]	; (102e0 <log_backend_uart_init+0x2c>)
   102cc:	6058      	str	r0, [r3, #4]

	log_output_ctx_set(&log_output, dev);
}
   102ce:	bd08      	pop	{r3, pc}
   102d0:	0002b817 	.word	0x0002b817
   102d4:	0002b81e 	.word	0x0002b81e
   102d8:	0002b868 	.word	0x0002b868
   102dc:	0002b822 	.word	0x0002b822
   102e0:	2002257c 	.word	0x2002257c

000102e4 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, u32_t timestamp,
			 const char *metadata, const u8_t *data, u32_t length)
{
   102e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
   102e6:	200f      	movs	r0, #15
   102e8:	9002      	str	r0, [sp, #8]
   102ea:	9807      	ldr	r0, [sp, #28]
   102ec:	9001      	str	r0, [sp, #4]
   102ee:	9806      	ldr	r0, [sp, #24]
   102f0:	9000      	str	r0, [sp, #0]
   102f2:	4803      	ldr	r0, [pc, #12]	; (10300 <sync_hexdump+0x1c>)
   102f4:	f7ff ff86 	bl	10204 <log_output_hexdump>
	u32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output, flag, src_level,
				     timestamp, metadata, data, length);
}
   102f8:	b005      	add	sp, #20
   102fa:	f85d fb04 	ldr.w	pc, [sp], #4
   102fe:	bf00      	nop
   10300:	0002a558 	.word	0x0002a558

00010304 <sync_string>:
{
   10304:	b507      	push	{r0, r1, r2, lr}
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   10306:	200f      	movs	r0, #15
   10308:	9001      	str	r0, [sp, #4]
   1030a:	9804      	ldr	r0, [sp, #16]
   1030c:	9000      	str	r0, [sp, #0]
   1030e:	4803      	ldr	r0, [pc, #12]	; (1031c <sync_string+0x18>)
   10310:	f7ff ff40 	bl	10194 <log_output_string>
}
   10314:	b003      	add	sp, #12
   10316:	f85d fb04 	ldr.w	pc, [sp], #4
   1031a:	bf00      	nop
   1031c:	0002a558 	.word	0x0002a558

00010320 <zsock_accepted_cb>:
#include <syscalls/zsock_shutdown_mrsh.c>
#endif /* CONFIG_USERSPACE */

static void zsock_accepted_cb(struct net_context *new_ctx,
			      struct sockaddr *addr, socklen_t addrlen,
			      int status, void *user_data) {
   10320:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10322:	9d06      	ldr	r5, [sp, #24]
   10324:	4604      	mov	r4, r0
	struct net_context *parent = user_data;

	NET_DBG("parent=%p, ctx=%p, st=%d", parent, new_ctx, status);

	if (status == 0) {
   10326:	b98b      	cbnz	r3, 1034c <zsock_accepted_cb+0x2c>
		/* This just installs a callback, so cannot fail. */
		(void)net_context_recv(new_ctx, zsock_received_cb, K_NO_WAIT,
   10328:	9300      	str	r3, [sp, #0]
   1032a:	2200      	movs	r2, #0
   1032c:	2300      	movs	r3, #0
   1032e:	4908      	ldr	r1, [pc, #32]	; (10350 <zsock_accepted_cb+0x30>)
   10330:	f002 fbda 	bl	12ae8 <net_context_recv>
	z_impl_k_queue_init(queue);
   10334:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   10338:	f018 fd28 	bl	28d8c <z_impl_k_queue_init>
				       NULL);
		k_fifo_init(&new_ctx->recv_q);

		k_fifo_put(&parent->accept_q, new_ctx);
   1033c:	4621      	mov	r1, r4
   1033e:	f105 006c 	add.w	r0, r5, #108	; 0x6c
	}
}
   10342:	b003      	add	sp, #12
   10344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		k_fifo_put(&parent->accept_q, new_ctx);
   10348:	f018 bd4c 	b.w	28de4 <k_queue_append>
}
   1034c:	b003      	add	sp, #12
   1034e:	bd30      	pop	{r4, r5, pc}
   10350:	000245c9 	.word	0x000245c9

00010354 <zsock_socket_internal>:
{
   10354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10356:	4607      	mov	r7, r0
   10358:	460e      	mov	r6, r1
   1035a:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   1035c:	f7ff fac8 	bl	f8f0 <z_reserve_fd>
	if (fd < 0) {
   10360:	1e04      	subs	r4, r0, #0
   10362:	db17      	blt.n	10394 <zsock_socket_internal+0x40>
	if (proto == 0) {
   10364:	b93d      	cbnz	r5, 10376 <zsock_socket_internal+0x22>
		if (family == AF_INET || family == AF_INET6) {
   10366:	1e7b      	subs	r3, r7, #1
   10368:	2b01      	cmp	r3, #1
   1036a:	d804      	bhi.n	10376 <zsock_socket_internal+0x22>
			if (type == SOCK_DGRAM) {
   1036c:	2e02      	cmp	r6, #2
   1036e:	d014      	beq.n	1039a <zsock_socket_internal+0x46>
			} else if (type == SOCK_STREAM) {
   10370:	2e01      	cmp	r6, #1
				proto = IPPROTO_TCP;
   10372:	bf08      	it	eq
   10374:	2506      	moveq	r5, #6
	res = net_context_get(family, type, proto, &ctx);
   10376:	b2f1      	uxtb	r1, r6
   10378:	ab01      	add	r3, sp, #4
   1037a:	b2aa      	uxth	r2, r5
   1037c:	b2b8      	uxth	r0, r7
   1037e:	f002 fad3 	bl	12928 <net_context_get>
	if (res < 0) {
   10382:	1e06      	subs	r6, r0, #0
   10384:	da0b      	bge.n	1039e <zsock_socket_internal+0x4a>
		z_free_fd(fd);
   10386:	4620      	mov	r0, r4
   10388:	f7ff fae0 	bl	f94c <z_free_fd>
		errno = -res;
   1038c:	f014 fcc0 	bl	24d10 <__errno>
   10390:	4276      	negs	r6, r6
   10392:	6006      	str	r6, [r0, #0]
		return -1;
   10394:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10398:	e012      	b.n	103c0 <zsock_socket_internal+0x6c>
				proto = IPPROTO_UDP;
   1039a:	2511      	movs	r5, #17
   1039c:	e7eb      	b.n	10376 <zsock_socket_internal+0x22>
	ctx->user_data = NULL;
   1039e:	2300      	movs	r3, #0
   103a0:	9801      	ldr	r0, [sp, #4]
   103a2:	6003      	str	r3, [r0, #0]
	ctx->socket_data = NULL;
   103a4:	6683      	str	r3, [r0, #104]	; 0x68
   103a6:	306c      	adds	r0, #108	; 0x6c
   103a8:	f018 fcf0 	bl	28d8c <z_impl_k_queue_init>
	if (proto == IPPROTO_TCP) {
   103ac:	2d06      	cmp	r5, #6
   103ae:	d102      	bne.n	103b6 <zsock_socket_internal+0x62>
		net_context_ref(ctx);
   103b0:	9801      	ldr	r0, [sp, #4]
   103b2:	f015 fadc 	bl	2596e <net_context_ref>
	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
   103b6:	4620      	mov	r0, r4
   103b8:	4a03      	ldr	r2, [pc, #12]	; (103c8 <zsock_socket_internal+0x74>)
   103ba:	9901      	ldr	r1, [sp, #4]
   103bc:	f7ff fabc 	bl	f938 <z_finalize_fd>
}
   103c0:	4620      	mov	r0, r4
   103c2:	b003      	add	sp, #12
   103c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103c6:	bf00      	nop
   103c8:	0002a568 	.word	0x0002a568

000103cc <z_impl_zsock_socket>:
{
   103cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   103ce:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   103d0:	4d0e      	ldr	r5, [pc, #56]	; (1040c <z_impl_zsock_socket+0x40>)
   103d2:	4e0f      	ldr	r6, [pc, #60]	; (10410 <z_impl_zsock_socket+0x44>)
   103d4:	42b5      	cmp	r5, r6
   103d6:	d305      	bcc.n	103e4 <z_impl_zsock_socket+0x18>
		return zsock_socket_internal(family, type, proto);
   103d8:	4620      	mov	r0, r4
}
   103da:	b002      	add	sp, #8
   103dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return zsock_socket_internal(family, type, proto);
   103e0:	f7ff bfb8 	b.w	10354 <zsock_socket_internal>
		if (sock_family->family != family &&
   103e4:	682b      	ldr	r3, [r5, #0]
   103e6:	42a3      	cmp	r3, r4
   103e8:	d000      	beq.n	103ec <z_impl_zsock_socket+0x20>
   103ea:	b96b      	cbnz	r3, 10408 <z_impl_zsock_socket+0x3c>
		if (!sock_family->is_supported(family, type, proto)) {
   103ec:	4620      	mov	r0, r4
   103ee:	686b      	ldr	r3, [r5, #4]
   103f0:	e9cd 1200 	strd	r1, r2, [sp]
   103f4:	4798      	blx	r3
   103f6:	e9dd 1200 	ldrd	r1, r2, [sp]
   103fa:	b128      	cbz	r0, 10408 <z_impl_zsock_socket+0x3c>
		return sock_family->handler(family, type, proto);
   103fc:	4620      	mov	r0, r4
   103fe:	68ab      	ldr	r3, [r5, #8]
}
   10400:	b002      	add	sp, #8
   10402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return sock_family->handler(family, type, proto);
   10406:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   10408:	350c      	adds	r5, #12
   1040a:	e7e3      	b.n	103d4 <z_impl_zsock_socket+0x8>
   1040c:	0002a2b8 	.word	0x0002a2b8
   10410:	0002a2c4 	.word	0x0002a2c4

00010414 <zsock_bind_ctx>:
	k_fifo_put(&ctx->recv_q, pkt);
}

int zsock_bind_ctx(struct net_context *ctx, const struct sockaddr *addr,
		   socklen_t addrlen)
{
   10414:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10416:	4605      	mov	r5, r0
	SET_ERRNO(net_context_bind(ctx, addr, addrlen));
   10418:	f015 fadb 	bl	259d2 <net_context_bind>
   1041c:	1e04      	subs	r4, r0, #0
   1041e:	da07      	bge.n	10430 <zsock_bind_ctx+0x1c>
	/* For DGRAM socket, we expect to receive packets after call to
	 * bind(), but for STREAM socket, next expected operation is
	 * listen(), which doesn't work if recv callback is set.
	 */
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   10420:	f014 fc76 	bl	24d10 <__errno>
   10424:	4264      	negs	r4, r4
   10426:	6004      	str	r4, [r0, #0]
   10428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					   ctx->user_data));
	}

	return 0;
}
   1042c:	b003      	add	sp, #12
   1042e:	bd30      	pop	{r4, r5, pc}
static inline
enum net_sock_type net_context_get_type(struct net_context *context)
{
	NET_ASSERT(context);

	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   10430:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   10434:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
   10438:	2b02      	cmp	r3, #2
   1043a:	d109      	bne.n	10450 <zsock_bind_ctx+0x3c>
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   1043c:	682b      	ldr	r3, [r5, #0]
   1043e:	2200      	movs	r2, #0
   10440:	9300      	str	r3, [sp, #0]
   10442:	4628      	mov	r0, r5
   10444:	2300      	movs	r3, #0
   10446:	4903      	ldr	r1, [pc, #12]	; (10454 <zsock_bind_ctx+0x40>)
   10448:	f002 fb4e 	bl	12ae8 <net_context_recv>
   1044c:	1e04      	subs	r4, r0, #0
   1044e:	dbe7      	blt.n	10420 <zsock_bind_ctx+0xc>
	return 0;
   10450:	2000      	movs	r0, #0
   10452:	e7eb      	b.n	1042c <zsock_bind_ctx+0x18>
   10454:	000245c9 	.word	0x000245c9

00010458 <zsock_connect_ctx>:
#include <syscalls/zsock_bind_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_connect_ctx(struct net_context *ctx, const struct sockaddr *addr,
		      socklen_t addrlen)
{
   10458:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb,
					   K_NO_WAIT, ctx->user_data));
		return 0;
	}
#endif
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
   1045c:	2400      	movs	r4, #0
   1045e:	f44f 38c0 	mov.w	r8, #98304	; 0x18000
   10462:	f04f 0900 	mov.w	r9, #0
   10466:	4623      	mov	r3, r4
   10468:	e9cd 8900 	strd	r8, r9, [sp]
   1046c:	9402      	str	r4, [sp, #8]
{
   1046e:	4606      	mov	r6, r0
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
   10470:	f015 fc37 	bl	25ce2 <net_context_connect>
   10474:	1e05      	subs	r5, r0, #0
   10476:	da08      	bge.n	1048a <zsock_connect_ctx+0x32>
			      K_MSEC(CONFIG_NET_SOCKETS_CONNECT_TIMEOUT),
			      NULL));
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   10478:	f014 fc4a 	bl	24d10 <__errno>
   1047c:	426d      	negs	r5, r5
   1047e:	6005      	str	r5, [r0, #0]
   10480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
				   ctx->user_data));

	return 0;
}
   10484:	b004      	add	sp, #16
   10486:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   1048a:	6833      	ldr	r3, [r6, #0]
   1048c:	2200      	movs	r2, #0
   1048e:	9300      	str	r3, [sp, #0]
   10490:	4630      	mov	r0, r6
   10492:	2300      	movs	r3, #0
   10494:	4903      	ldr	r1, [pc, #12]	; (104a4 <zsock_connect_ctx+0x4c>)
   10496:	f002 fb27 	bl	12ae8 <net_context_recv>
   1049a:	1e05      	subs	r5, r0, #0
   1049c:	dbec      	blt.n	10478 <zsock_connect_ctx+0x20>
	return 0;
   1049e:	4620      	mov	r0, r4
   104a0:	e7f0      	b.n	10484 <zsock_connect_ctx+0x2c>
   104a2:	bf00      	nop
   104a4:	000245c9 	.word	0x000245c9

000104a8 <zsock_listen_ctx>:
}
#include <syscalls/zsock_connect_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_listen_ctx(struct net_context *ctx, int backlog)
{
   104a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   104aa:	4605      	mov	r5, r0
	SET_ERRNO(net_context_listen(ctx, backlog));
   104ac:	f015 fb0b 	bl	25ac6 <net_context_listen>
   104b0:	1e04      	subs	r4, r0, #0
   104b2:	da07      	bge.n	104c4 <zsock_listen_ctx+0x1c>
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
   104b4:	f014 fc2c 	bl	24d10 <__errno>
   104b8:	4264      	negs	r4, r4
   104ba:	6004      	str	r4, [r0, #0]
   104bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

	return 0;
}
   104c0:	b003      	add	sp, #12
   104c2:	bd30      	pop	{r4, r5, pc}
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
   104c4:	2200      	movs	r2, #0
   104c6:	2300      	movs	r3, #0
   104c8:	4628      	mov	r0, r5
   104ca:	4904      	ldr	r1, [pc, #16]	; (104dc <zsock_listen_ctx+0x34>)
   104cc:	9500      	str	r5, [sp, #0]
   104ce:	f015 fc79 	bl	25dc4 <net_context_accept>
   104d2:	1e04      	subs	r4, r0, #0
   104d4:	dbee      	blt.n	104b4 <zsock_listen_ctx+0xc>
	return 0;
   104d6:	2000      	movs	r0, #0
   104d8:	e7f2      	b.n	104c0 <zsock_listen_ctx+0x18>
   104da:	bf00      	nop
   104dc:	00010321 	.word	0x00010321

000104e0 <zsock_accept_ctx>:
#include <syscalls/zsock_listen_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_accept_ctx(struct net_context *parent, struct sockaddr *addr,
		     socklen_t *addrlen)
{
   104e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104e4:	4605      	mov	r5, r0
   104e6:	460f      	mov	r7, r1
   104e8:	4616      	mov	r6, r2
	k_timeout_t timeout = K_FOREVER;
	struct net_context *ctx;
	struct net_pkt *last_pkt;
	int fd;

	fd = z_reserve_fd();
   104ea:	f7ff fa01 	bl	f8f0 <z_reserve_fd>
	if (fd < 0) {
   104ee:	1e04      	subs	r4, r0, #0
   104f0:	db36      	blt.n	10560 <zsock_accept_ctx+0x80>
		return -1;
	}

	if (sock_is_nonblock(parent)) {
   104f2:	f04f 0800 	mov.w	r8, #0
   104f6:	6eab      	ldr	r3, [r5, #104]	; 0x68
   104f8:	f083 0102 	eor.w	r1, r3, #2
   104fc:	f3c1 0240 	ubfx	r2, r1, #1, #1
   10500:	4252      	negs	r2, r2
   10502:	eb68 0348 	sbc.w	r3, r8, r8, lsl #1
	return z_impl_k_queue_get(queue, timeout);
   10506:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   1050a:	f00f fd91 	bl	20030 <z_impl_k_queue_get>
		timeout = K_NO_WAIT;
	}

	ctx = k_fifo_get(&parent->accept_q, timeout);
	if (ctx == NULL) {
   1050e:	4605      	mov	r5, r0
   10510:	b938      	cbnz	r0, 10522 <zsock_accept_ctx+0x42>
		z_free_fd(fd);
   10512:	4620      	mov	r0, r4
   10514:	f7ff fa1a 	bl	f94c <z_free_fd>
		errno = EAGAIN;
   10518:	f014 fbfa 	bl	24d10 <__errno>
   1051c:	230b      	movs	r3, #11
			*addrlen = sizeof(struct sockaddr_in);
		} else if (ctx->remote.sa_family == AF_INET6) {
			*addrlen = sizeof(struct sockaddr_in6);
		} else {
			z_free_fd(fd);
			errno = ENOTSUP;
   1051e:	6003      	str	r3, [r0, #0]
			return -1;
   10520:	e01e      	b.n	10560 <zsock_accept_ctx+0x80>
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
   10522:	4641      	mov	r1, r8
   10524:	6f00      	ldr	r0, [r0, #112]	; 0x70
   10526:	f018 fc25 	bl	28d74 <z_queue_node_peek>
	if (last_pkt) {
   1052a:	b170      	cbz	r0, 1054a <zsock_accept_ctx+0x6a>
}

#if defined(CONFIG_NET_SOCKETS)
static inline u8_t net_pkt_eof(struct net_pkt *pkt)
{
	return pkt->sent_or_eof;
   1052c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
		if (net_pkt_eof(last_pkt)) {
   10530:	0799      	lsls	r1, r3, #30
   10532:	d50a      	bpl.n	1054a <zsock_accept_ctx+0x6a>
static inline void sock_set_flag(struct net_context *ctx, uintptr_t mask,
				 uintptr_t flag)
{
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);

	val = (val & ~mask) | flag;
   10534:	6eab      	ldr	r3, [r5, #104]	; 0x68
			z_free_fd(fd);
   10536:	4620      	mov	r0, r4
   10538:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   1053c:	66ab      	str	r3, [r5, #104]	; 0x68
   1053e:	f7ff fa05 	bl	f94c <z_free_fd>
			errno = ECONNABORTED;
   10542:	f014 fbe5 	bl	24d10 <__errno>
   10546:	2371      	movs	r3, #113	; 0x71
   10548:	e7e9      	b.n	1051e <zsock_accept_ctx+0x3e>
	if (net_context_is_closing(ctx)) {
   1054a:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   1054e:	055a      	lsls	r2, r3, #21
   10550:	d509      	bpl.n	10566 <zsock_accept_ctx+0x86>
		errno = ECONNABORTED;
   10552:	f014 fbdd 	bl	24d10 <__errno>
   10556:	2371      	movs	r3, #113	; 0x71
   10558:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   1055a:	4620      	mov	r0, r4
   1055c:	f7ff f9f6 	bl	f94c <z_free_fd>
		return -1;
   10560:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10564:	e01b      	b.n	1059e <zsock_accept_ctx+0xbe>
		context->flags &= ~NET_CONTEXT_ACCEPTING_SOCK;
   10566:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1056a:	f8a5 3086 	strh.w	r3, [r5, #134]	; 0x86
	if (addr != NULL && addrlen != NULL) {
   1056e:	b177      	cbz	r7, 1058e <zsock_accept_ctx+0xae>
   10570:	b16e      	cbz	r6, 1058e <zsock_accept_ctx+0xae>
		int len = MIN(*addrlen, sizeof(ctx->remote));
   10572:	6832      	ldr	r2, [r6, #0]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   10574:	4638      	mov	r0, r7
   10576:	2a18      	cmp	r2, #24
   10578:	bf28      	it	cs
   1057a:	2218      	movcs	r2, #24
   1057c:	f105 0128 	add.w	r1, r5, #40	; 0x28
   10580:	f018 ff77 	bl	29472 <memcpy>
		if (ctx->remote.sa_family == AF_INET) {
   10584:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   10586:	2b01      	cmp	r3, #1
   10588:	d10c      	bne.n	105a4 <zsock_accept_ctx+0xc4>
			*addrlen = sizeof(struct sockaddr_in);
   1058a:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
   1058c:	6033      	str	r3, [r6, #0]
	 * connection, but it must not dispose of the context behind
	 * the application back. Likewise, when application "closes"
	 * context, it's not disposed of immediately - there's yet
	 * closing handshake for stack to perform.
	 */
	net_context_ref(ctx);
   1058e:	4628      	mov	r0, r5
   10590:	f015 f9ed 	bl	2596e <net_context_ref>

	NET_DBG("accept: ctx=%p, fd=%d", ctx, fd);

	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
   10594:	4629      	mov	r1, r5
   10596:	4620      	mov	r0, r4
   10598:	4a08      	ldr	r2, [pc, #32]	; (105bc <zsock_accept_ctx+0xdc>)
   1059a:	f7ff f9cd 	bl	f938 <z_finalize_fd>

	return fd;
}
   1059e:	4620      	mov	r0, r4
   105a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ctx->remote.sa_family == AF_INET6) {
   105a4:	2b02      	cmp	r3, #2
   105a6:	d101      	bne.n	105ac <zsock_accept_ctx+0xcc>
			*addrlen = sizeof(struct sockaddr_in6);
   105a8:	2318      	movs	r3, #24
   105aa:	e7ef      	b.n	1058c <zsock_accept_ctx+0xac>
			z_free_fd(fd);
   105ac:	4620      	mov	r0, r4
   105ae:	f7ff f9cd 	bl	f94c <z_free_fd>
			errno = ENOTSUP;
   105b2:	f014 fbad 	bl	24d10 <__errno>
   105b6:	2386      	movs	r3, #134	; 0x86
   105b8:	e7b1      	b.n	1051e <zsock_accept_ctx+0x3e>
   105ba:	bf00      	nop
   105bc:	0002a568 	.word	0x0002a568

000105c0 <zsock_sendto_ctx>:
#endif /* CONFIG_USERSPACE */

ssize_t zsock_sendto_ctx(struct net_context *ctx, const void *buf, size_t len,
			 int flags,
			 const struct sockaddr *dest_addr, socklen_t addrlen)
{
   105c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   105c4:	4691      	mov	r9, r2
   105c6:	b086      	sub	sp, #24
	k_timeout_t timeout = K_FOREVER;
	int status;

	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   105c8:	065a      	lsls	r2, r3, #25
{
   105ca:	4604      	mov	r4, r0
   105cc:	4688      	mov	r8, r1
	k_timeout_t timeout = K_FOREVER;
   105ce:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   105d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
{
   105d6:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   105da:	d402      	bmi.n	105e2 <zsock_sendto_ctx+0x22>
}

static inline uintptr_t sock_get_flag(struct net_context *ctx, uintptr_t mask)
{
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   105dc:	6e83      	ldr	r3, [r0, #104]	; 0x68
   105de:	079b      	lsls	r3, r3, #30
   105e0:	d501      	bpl.n	105e6 <zsock_sendto_ctx+0x26>
		timeout = K_NO_WAIT;
   105e2:	2600      	movs	r6, #0
   105e4:	2700      	movs	r7, #0
	}

	/* Register the callback before sending in order to receive the response
	 * from the peer.
	 */
	status = net_context_recv(ctx, zsock_received_cb,
   105e6:	6823      	ldr	r3, [r4, #0]
   105e8:	2200      	movs	r2, #0
   105ea:	9300      	str	r3, [sp, #0]
   105ec:	4620      	mov	r0, r4
   105ee:	2300      	movs	r3, #0
   105f0:	4918      	ldr	r1, [pc, #96]	; (10654 <zsock_sendto_ctx+0x94>)
   105f2:	f002 fa79 	bl	12ae8 <net_context_recv>
				  K_NO_WAIT, ctx->user_data);
	if (status < 0) {
   105f6:	1e05      	subs	r5, r0, #0
   105f8:	da09      	bge.n	1060e <zsock_sendto_ctx+0x4e>
		errno = -status;
   105fa:	f014 fb89 	bl	24d10 <__errno>
   105fe:	426d      	negs	r5, r5
   10600:	6005      	str	r5, [r0, #0]
					  ctx->user_data);
	}

	if (status < 0) {
		errno = -status;
		return -1;
   10602:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	}

	return status;
}
   10606:	4620      	mov	r0, r4
   10608:	b006      	add	sp, #24
   1060a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (dest_addr) {
   1060e:	6823      	ldr	r3, [r4, #0]
   10610:	f1ba 0f00 	cmp.w	sl, #0
   10614:	d014      	beq.n	10640 <zsock_sendto_ctx+0x80>
		status = net_context_sendto(ctx, buf, len, dest_addr,
   10616:	9304      	str	r3, [sp, #16]
   10618:	2300      	movs	r3, #0
   1061a:	9301      	str	r3, [sp, #4]
   1061c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1061e:	464a      	mov	r2, r9
   10620:	9300      	str	r3, [sp, #0]
   10622:	4641      	mov	r1, r8
   10624:	4653      	mov	r3, sl
   10626:	4620      	mov	r0, r4
   10628:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1062c:	f015 fc48 	bl	25ec0 <net_context_sendto>
	if (status < 0) {
   10630:	2800      	cmp	r0, #0
		status = net_context_send(ctx, buf, len, NULL, timeout,
   10632:	4604      	mov	r4, r0
	if (status < 0) {
   10634:	dae7      	bge.n	10606 <zsock_sendto_ctx+0x46>
		errno = -status;
   10636:	f014 fb6b 	bl	24d10 <__errno>
   1063a:	4264      	negs	r4, r4
   1063c:	6004      	str	r4, [r0, #0]
   1063e:	e7e0      	b.n	10602 <zsock_sendto_ctx+0x42>
		status = net_context_send(ctx, buf, len, NULL, timeout,
   10640:	9302      	str	r3, [sp, #8]
   10642:	464a      	mov	r2, r9
   10644:	4653      	mov	r3, sl
   10646:	4641      	mov	r1, r8
   10648:	4620      	mov	r0, r4
   1064a:	e9cd 6700 	strd	r6, r7, [sp]
   1064e:	f015 fbe4 	bl	25e1a <net_context_send>
   10652:	e7ed      	b.n	10630 <zsock_sendto_ctx+0x70>
   10654:	000245c9 	.word	0x000245c9

00010658 <sock_ioctl_vmeth>:
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
}

static int sock_ioctl_vmeth(void *obj, unsigned int request, va_list args)
{
	switch (request) {
   10658:	f5b1 7f83 	cmp.w	r1, #262	; 0x106
{
   1065c:	b538      	push	{r3, r4, r5, lr}
   1065e:	4613      	mov	r3, r2
	switch (request) {
   10660:	d805      	bhi.n	1066e <sock_ioctl_vmeth+0x16>
   10662:	29ff      	cmp	r1, #255	; 0xff
   10664:	d80a      	bhi.n	1067c <sock_ioctl_vmeth+0x24>
   10666:	2903      	cmp	r1, #3
   10668:	d01e      	beq.n	106a8 <sock_ioctl_vmeth+0x50>
   1066a:	2904      	cmp	r1, #4
   1066c:	d022      	beq.n	106b4 <sock_ioctl_vmeth+0x5c>

		return zsock_getsockname_ctx(obj, addr, addrlen);
	}

	default:
		errno = EOPNOTSUPP;
   1066e:	f014 fb4f 	bl	24d10 <__errno>
   10672:	235f      	movs	r3, #95	; 0x5f
   10674:	6003      	str	r3, [r0, #0]
		return -1;
   10676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1067a:	e019      	b.n	106b0 <sock_ioctl_vmeth+0x58>
   1067c:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
   10680:	2906      	cmp	r1, #6
   10682:	d8f4      	bhi.n	1066e <sock_ioctl_vmeth+0x16>
   10684:	a201      	add	r2, pc, #4	; (adr r2, 1068c <sock_ioctl_vmeth+0x34>)
   10686:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
   1068a:	bf00      	nop
   1068c:	000106cf 	.word	0x000106cf
   10690:	0001066f 	.word	0x0001066f
   10694:	0001066f 	.word	0x0001066f
   10698:	000106d7 	.word	0x000106d7
   1069c:	00010725 	.word	0x00010725
   106a0:	0001066f 	.word	0x0001066f
   106a4:	00010759 	.word	0x00010759
   106a8:	6e83      	ldr	r3, [r0, #104]	; 0x68
		if (sock_is_nonblock(obj)) {
   106aa:	079d      	lsls	r5, r3, #30
   106ac:	d45a      	bmi.n	10764 <sock_ioctl_vmeth+0x10c>
		return 0;
   106ae:	2300      	movs	r3, #0
	}
}
   106b0:	4618      	mov	r0, r3
   106b2:	bd38      	pop	{r3, r4, r5, pc}
		if (flags & O_NONBLOCK) {
   106b4:	6813      	ldr	r3, [r2, #0]
   106b6:	6e82      	ldr	r2, [r0, #104]	; 0x68
   106b8:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   106bc:	f022 0202 	bic.w	r2, r2, #2
   106c0:	d003      	beq.n	106ca <sock_ioctl_vmeth+0x72>
	val = (val & ~mask) | flag;
   106c2:	f042 0202 	orr.w	r2, r2, #2
	(ctx)->socket_data = UINT_TO_POINTER(val);
   106c6:	6682      	str	r2, [r0, #104]	; 0x68
   106c8:	e7f1      	b.n	106ae <sock_ioctl_vmeth+0x56>
   106ca:	6682      	str	r2, [r0, #104]	; 0x68
}
   106cc:	e7f0      	b.n	106b0 <sock_ioctl_vmeth+0x58>
}
   106ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return zsock_close_ctx(obj);
   106d2:	f013 bfac 	b.w	2462e <zsock_close_ctx>
		return zsock_poll_prepare_ctx(obj, pfd, pev, pev_end);
   106d6:	681a      	ldr	r2, [r3, #0]
	if (pfd->events & ZSOCK_POLLIN) {
   106d8:	8891      	ldrh	r1, [r2, #4]
   106da:	07cc      	lsls	r4, r1, #31
   106dc:	d51a      	bpl.n	10714 <sock_ioctl_vmeth+0xbc>
		pev = va_arg(args, struct k_poll_event **);
   106de:	685a      	ldr	r2, [r3, #4]
		if (*pev == pev_end) {
   106e0:	689b      	ldr	r3, [r3, #8]
   106e2:	6814      	ldr	r4, [r2, #0]
   106e4:	42a3      	cmp	r3, r4
   106e6:	d040      	beq.n	1076a <sock_ioctl_vmeth+0x112>
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
   106e8:	2504      	movs	r5, #4
		(*pev)->obj = &ctx->recv_q;
   106ea:	f100 036c 	add.w	r3, r0, #108	; 0x6c
   106ee:	6123      	str	r3, [r4, #16]
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
   106f0:	6813      	ldr	r3, [r2, #0]
   106f2:	7b5c      	ldrb	r4, [r3, #13]
   106f4:	f365 0403 	bfi	r4, r5, #0, #4
   106f8:	735c      	strb	r4, [r3, #13]
		(*pev)->mode = K_POLL_MODE_NOTIFY_ONLY;
   106fa:	6813      	ldr	r3, [r2, #0]
   106fc:	7b9c      	ldrb	r4, [r3, #14]
   106fe:	f36f 0441 	bfc	r4, #1, #1
   10702:	739c      	strb	r4, [r3, #14]
		(*pev)->state = K_POLL_STATE_NOT_READY;
   10704:	6813      	ldr	r3, [r2, #0]
   10706:	68dc      	ldr	r4, [r3, #12]
   10708:	f36f 3410 	bfc	r4, #12, #5
   1070c:	60dc      	str	r4, [r3, #12]
		(*pev)++;
   1070e:	6813      	ldr	r3, [r2, #0]
   10710:	3314      	adds	r3, #20
   10712:	6013      	str	r3, [r2, #0]
	if (pfd->events & ZSOCK_POLLOUT) {
   10714:	0749      	lsls	r1, r1, #29
   10716:	d402      	bmi.n	1071e <sock_ioctl_vmeth+0xc6>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   10718:	6e83      	ldr	r3, [r0, #104]	; 0x68
	if (sock_is_eof(ctx)) {
   1071a:	07da      	lsls	r2, r3, #31
   1071c:	d5c7      	bpl.n	106ae <sock_ioctl_vmeth+0x56>
		return -EALREADY;
   1071e:	f06f 0377 	mvn.w	r3, #119	; 0x77
   10722:	e7c5      	b.n	106b0 <sock_ioctl_vmeth+0x58>
		pev = va_arg(args, struct k_poll_event **);
   10724:	e9d3 2400 	ldrd	r2, r4, [r3]
	if (pfd->events & ZSOCK_POLLOUT) {
   10728:	8891      	ldrh	r1, [r2, #4]
   1072a:	074b      	lsls	r3, r1, #29
		pfd->revents |= ZSOCK_POLLOUT;
   1072c:	bf42      	ittt	mi
   1072e:	88d3      	ldrhmi	r3, [r2, #6]
   10730:	f043 0304 	orrmi.w	r3, r3, #4
   10734:	80d3      	strhmi	r3, [r2, #6]
	if (pfd->events & ZSOCK_POLLIN) {
   10736:	07cd      	lsls	r5, r1, #31
   10738:	d5b9      	bpl.n	106ae <sock_ioctl_vmeth+0x56>
		if ((*pev)->state != K_POLL_STATE_NOT_READY || sock_is_eof(ctx)) {
   1073a:	6823      	ldr	r3, [r4, #0]
   1073c:	68d9      	ldr	r1, [r3, #12]
   1073e:	f411 3ff8 	tst.w	r1, #126976	; 0x1f000
   10742:	d102      	bne.n	1074a <sock_ioctl_vmeth+0xf2>
   10744:	6e81      	ldr	r1, [r0, #104]	; 0x68
   10746:	07c9      	lsls	r1, r1, #31
   10748:	d503      	bpl.n	10752 <sock_ioctl_vmeth+0xfa>
			pfd->revents |= ZSOCK_POLLIN;
   1074a:	88d1      	ldrh	r1, [r2, #6]
   1074c:	f041 0101 	orr.w	r1, r1, #1
   10750:	80d1      	strh	r1, [r2, #6]
		(*pev)++;
   10752:	3314      	adds	r3, #20
   10754:	6023      	str	r3, [r4, #0]
   10756:	e7aa      	b.n	106ae <sock_ioctl_vmeth+0x56>
		return zsock_getsockname_ctx(obj, addr, addrlen);
   10758:	e9d3 1200 	ldrd	r1, r2, [r3]
}
   1075c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return zsock_getsockname_ctx(obj, addr, addrlen);
   10760:	f014 b9e7 	b.w	24b32 <zsock_getsockname_ctx>
		    return O_NONBLOCK;
   10764:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   10768:	e7a2      	b.n	106b0 <sock_ioctl_vmeth+0x58>
			return -ENOMEM;
   1076a:	f06f 030b 	mvn.w	r3, #11
   1076e:	e79f      	b.n	106b0 <sock_ioctl_vmeth+0x58>

00010770 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   10770:	4b01      	ldr	r3, [pc, #4]	; (10778 <socket_offload_dns_register+0x8>)
   10772:	6018      	str	r0, [r3, #0]
}
   10774:	4770      	bx	lr
   10776:	bf00      	nop
   10778:	20022588 	.word	0x20022588

0001077c <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   1077c:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
   1077e:	4c03      	ldr	r4, [pc, #12]	; (1078c <socket_offload_getaddrinfo+0x10>)
   10780:	6824      	ldr	r4, [r4, #0]
   10782:	6824      	ldr	r4, [r4, #0]
   10784:	46a4      	mov	ip, r4
}
   10786:	f85d 4b04 	ldr.w	r4, [sp], #4
	return dns_offload->getaddrinfo(node, service, hints, res);
   1078a:	4760      	bx	ip
   1078c:	20022588 	.word	0x20022588

00010790 <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
   10790:	4b01      	ldr	r3, [pc, #4]	; (10798 <socket_offload_freeaddrinfo+0x8>)
   10792:	681b      	ldr	r3, [r3, #0]
   10794:	685b      	ldr	r3, [r3, #4]
   10796:	4718      	bx	r3
   10798:	20022588 	.word	0x20022588

0001079c <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   1079c:	b507      	push	{r0, r1, r2, lr}
   1079e:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   107a0:	f04f 0220 	mov.w	r2, #32
   107a4:	f3ef 8311 	mrs	r3, BASEPRI
   107a8:	f382 8811 	msr	BASEPRI, r2
   107ac:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   107b0:	f014 fa5a 	bl	24c68 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   107b4:	9801      	ldr	r0, [sp, #4]
   107b6:	f000 fe85 	bl	114c4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   107ba:	4803      	ldr	r0, [pc, #12]	; (107c8 <sys_reboot+0x2c>)
   107bc:	f013 fbe9 	bl	23f92 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   107c0:	f000 fc04 	bl	10fcc <arch_cpu_idle>
   107c4:	e7fc      	b.n	107c0 <sys_reboot+0x24>
   107c6:	bf00      	nop
   107c8:	0002b884 	.word	0x0002b884

000107cc <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   107cc:	4b0a      	ldr	r3, [pc, #40]	; (107f8 <console_out+0x2c>)
{
   107ce:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   107d0:	b2c6      	uxtb	r6, r0
{
   107d2:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   107d4:	681b      	ldr	r3, [r3, #0]
   107d6:	4630      	mov	r0, r6
   107d8:	4798      	blx	r3

	if (handled_by_debug_server) {
   107da:	2801      	cmp	r0, #1
   107dc:	d00a      	beq.n	107f4 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   107de:	2c0a      	cmp	r4, #10
   107e0:	4d06      	ldr	r5, [pc, #24]	; (107fc <console_out+0x30>)
   107e2:	d103      	bne.n	107ec <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
   107e4:	210d      	movs	r1, #13
   107e6:	6828      	ldr	r0, [r5, #0]
   107e8:	f014 f9cb 	bl	24b82 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
   107ec:	4631      	mov	r1, r6
   107ee:	6828      	ldr	r0, [r5, #0]
   107f0:	f014 f9c7 	bl	24b82 <uart_poll_out>

	return c;
}
   107f4:	4620      	mov	r0, r4
   107f6:	bd70      	pop	{r4, r5, r6, pc}
   107f8:	200200b0 	.word	0x200200b0
   107fc:	2002258c 	.word	0x2002258c

00010800 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   10800:	b508      	push	{r3, lr}
   10802:	4806      	ldr	r0, [pc, #24]	; (1081c <uart_console_init+0x1c>)
   10804:	f00f f87e 	bl	1f904 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   10808:	4b05      	ldr	r3, [pc, #20]	; (10820 <uart_console_init+0x20>)
   1080a:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   1080c:	4805      	ldr	r0, [pc, #20]	; (10824 <uart_console_init+0x24>)
   1080e:	f001 f845 	bl	1189c <__stdout_hook_install>
	__printk_hook_install(console_out);
   10812:	4804      	ldr	r0, [pc, #16]	; (10824 <uart_console_init+0x24>)
   10814:	f7ff f8fe 	bl	fa14 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
   10818:	2000      	movs	r0, #0
   1081a:	bd08      	pop	{r3, pc}
   1081c:	0002b817 	.word	0x0002b817
   10820:	2002258c 	.word	0x2002258c
   10824:	000107cd 	.word	0x000107cd

00010828 <clock_async_start>:
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
   10828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct nrf_clock_control_sub_data *clk_data;
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
	config = get_sub_config(dev, type);
   1082c:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
   1082e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   10832:	b2cf      	uxtb	r7, r1
			((data != NULL) && (data->cb != NULL)));

	/* if node is in the list it means that it is scheduled for
	 * the second time.
	 */
	if ((data != NULL)
   10834:	b14a      	cbz	r2, 1084a <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
   10836:	230c      	movs	r3, #12
   10838:	437b      	muls	r3, r7
   1083a:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
   1083e:	429a      	cmp	r2, r3
   10840:	d053      	beq.n	108ea <clock_async_start+0xc2>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   10842:	b113      	cbz	r3, 1084a <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10844:	681b      	ldr	r3, [r3, #0]
	} while (item);
   10846:	2b00      	cmp	r3, #0
   10848:	d1f9      	bne.n	1083e <clock_async_start+0x16>
   1084a:	f04f 0320 	mov.w	r3, #32
   1084e:	f3ef 8c11 	mrs	ip, BASEPRI
   10852:	f383 8811 	msr	BASEPRI, r3
   10856:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
   1085a:	250c      	movs	r5, #12
   1085c:	437d      	muls	r5, r7
   1085e:	eb0e 0305 	add.w	r3, lr, r5
   10862:	7a1c      	ldrb	r4, [r3, #8]
   10864:	3401      	adds	r4, #1
   10866:	b2e4      	uxtb	r4, r4
   10868:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
   1086a:	f38c 8811 	msr	BASEPRI, ip
   1086e:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(clk_data->ref > 0);
	irq_unlock(key);

	if (data) {
   10872:	b352      	cbz	r2, 108ca <clock_async_start+0xa2>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   10874:	f04f 0803 	mov.w	r8, #3
   10878:	f8df c078 	ldr.w	ip, [pc, #120]	; 108f4 <clock_async_start+0xcc>
   1087c:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
   10880:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
   10884:	f1bc 0f00 	cmp.w	ip, #0
   10888:	d115      	bne.n	108b6 <clock_async_start+0x8e>
	__asm__ volatile(
   1088a:	f04f 0820 	mov.w	r8, #32
   1088e:	f3ef 8911 	mrs	r9, BASEPRI
   10892:	f388 8811 	msr	BASEPRI, r8
   10896:	f3bf 8f6f 	isb	sy
	parent->next = child;
   1089a:	f8c2 c000 	str.w	ip, [r2]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1089e:	f8d3 8004 	ldr.w	r8, [r3, #4]
   108a2:	f1b8 0f00 	cmp.w	r8, #0
   108a6:	d11c      	bne.n	108e2 <clock_async_start+0xba>
	list->tail = node;
   108a8:	605a      	str	r2, [r3, #4]
	list->head = node;
   108aa:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
   108ae:	f389 8811 	msr	BASEPRI, r9
   108b2:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   108b6:	2503      	movs	r5, #3
   108b8:	4b0e      	ldr	r3, [pc, #56]	; (108f4 <clock_async_start+0xcc>)
   108ba:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
   108be:	f1bc 0f00 	cmp.w	ip, #0
   108c2:	d002      	beq.n	108ca <clock_async_start+0xa2>
			data->cb(dev, subsys, data->user_data);
   108c4:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
   108c8:	4798      	blx	r3
		}
	}

	if (ref == 1) {
   108ca:	2c01      	cmp	r4, #1
   108cc:	d107      	bne.n	108de <clock_async_start+0xb6>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			(subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
			anomaly_132_workaround();
		}

		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
   108ce:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   108d2:	78b3      	ldrb	r3, [r6, #2]
   108d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   108d8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   108dc:	601c      	str	r4, [r3, #0]
	}

	return 0;
   108de:	2000      	movs	r0, #0
   108e0:	e005      	b.n	108ee <clock_async_start+0xc6>
	parent->next = child;
   108e2:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
   108e6:	605a      	str	r2, [r3, #4]
}
   108e8:	e7e1      	b.n	108ae <clock_async_start+0x86>
		return -EBUSY;
   108ea:	f06f 000f 	mvn.w	r0, #15
}
   108ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   108f2:	bf00      	nop
   108f4:	40005000 	.word	0x40005000

000108f8 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
   108f8:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   108fa:	2200      	movs	r2, #0
{
   108fc:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   108fe:	2101      	movs	r1, #1
   10900:	2005      	movs	r0, #5
   10902:	f000 f9ef 	bl	10ce4 <z_arm_irq_priority_set>
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_IRQN(0));
   10906:	2005      	movs	r0, #5
   10908:	f000 f9dc 	bl	10cc4 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   1090c:	2202      	movs	r2, #2
   1090e:	4b07      	ldr	r3, [pc, #28]	; (1092c <clk_init+0x34>)
	list->head = NULL;
   10910:	2000      	movs	r0, #0
   10912:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   10916:	2203      	movs	r2, #3
   10918:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
   1091c:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
   1091e:	e9c3 0000 	strd	r0, r0, [r3]
   10922:	68e3      	ldr	r3, [r4, #12]
   10924:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
   10928:	bd10      	pop	{r4, pc}
   1092a:	bf00      	nop
   1092c:	40005000 	.word	0x40005000

00010930 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
   10930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
   10932:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   10934:	4f11      	ldr	r7, [pc, #68]	; (1097c <clkstarted_handle.constprop.0+0x4c>)
static void clkstarted_handle(struct device *dev,
   10936:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   10938:	68fb      	ldr	r3, [r7, #12]
	sub_data->started = true;
   1093a:	fb04 3400 	mla	r4, r4, r0, r3
   1093e:	2301      	movs	r3, #1
   10940:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   10942:	f04f 0320 	mov.w	r3, #32
   10946:	f3ef 8111 	mrs	r1, BASEPRI
   1094a:	f383 8811 	msr	BASEPRI, r3
   1094e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   10952:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   10954:	b12b      	cbz	r3, 10962 <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10956:	6866      	ldr	r6, [r4, #4]
   10958:	681a      	ldr	r2, [r3, #0]
   1095a:	42b3      	cmp	r3, r6
	list->head = node;
   1095c:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1095e:	bf08      	it	eq
   10960:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   10962:	f381 8811 	msr	BASEPRI, r1
   10966:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
   1096a:	b903      	cbnz	r3, 1096e <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
   1096c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
   1096e:	4629      	mov	r1, r5
   10970:	e9d3 6201 	ldrd	r6, r2, [r3, #4]
   10974:	4638      	mov	r0, r7
   10976:	47b0      	blx	r6
   10978:	e7e3      	b.n	10942 <clkstarted_handle.constprop.0+0x12>
   1097a:	bf00      	nop
   1097c:	200207c4 	.word	0x200207c4

00010980 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   10980:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   10982:	4b10      	ldr	r3, [pc, #64]	; (109c4 <nrf_power_clock_isr+0x44>)
   10984:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   10986:	b162      	cbz	r2, 109a2 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
   10988:	4a0f      	ldr	r2, [pc, #60]	; (109c8 <nrf_power_clock_isr+0x48>)
   1098a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   1098e:	07d1      	lsls	r1, r2, #31
   10990:	d507      	bpl.n	109a2 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10992:	2200      	movs	r2, #0
   10994:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   10996:	4b0d      	ldr	r3, [pc, #52]	; (109cc <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   10998:	68db      	ldr	r3, [r3, #12]
   1099a:	7a58      	ldrb	r0, [r3, #9]
   1099c:	b908      	cbnz	r0, 109a2 <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1099e:	f7ff ffc7 	bl	10930 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   109a2:	4b0b      	ldr	r3, [pc, #44]	; (109d0 <nrf_power_clock_isr+0x50>)
   109a4:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   109a6:	b15a      	cbz	r2, 109c0 <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
   109a8:	4a07      	ldr	r2, [pc, #28]	; (109c8 <nrf_power_clock_isr+0x48>)
   109aa:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   109ae:	0792      	lsls	r2, r2, #30
   109b0:	d506      	bpl.n	109c0 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   109b2:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   109b4:	2001      	movs	r0, #1
   109b6:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   109b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   109bc:	f7ff bfb8 	b.w	10930 <clkstarted_handle.constprop.0>
}
   109c0:	bd08      	pop	{r3, pc}
   109c2:	bf00      	nop
   109c4:	40005100 	.word	0x40005100
   109c8:	40005000 	.word	0x40005000
   109cc:	200207c4 	.word	0x200207c4
   109d0:	40005104 	.word	0x40005104

000109d4 <wdt_nrf_install_timeout>:
	return -EPERM;
}

static int wdt_nrf_install_timeout(struct device *dev,
				   const struct wdt_timeout_cfg *cfg)
{
   109d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrfx_err_t err_code;
	nrfx_wdt_channel_id channel_id;

	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   109d6:	7b0b      	ldrb	r3, [r1, #12]
{
   109d8:	4604      	mov	r4, r0
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   109da:	2b02      	cmp	r3, #2
{
   109dc:	460d      	mov	r5, r1
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   109de:	d128      	bne.n	10a32 <wdt_nrf_install_timeout+0x5e>
		return -ENOTSUP;
	}

	if (cfg->window.min != 0U) {
   109e0:	680b      	ldr	r3, [r1, #0]
   109e2:	bb1b      	cbnz	r3, 10a2c <wdt_nrf_install_timeout+0x58>
		return -EINVAL;
	}

	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   109e4:	68c2      	ldr	r2, [r0, #12]
	return dev->driver_data;
   109e6:	684b      	ldr	r3, [r1, #4]
	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   109e8:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   109ec:	b9d9      	cbnz	r1, 10a26 <wdt_nrf_install_timeout+0x52>
		 * in all nRF chips can use reload values (determining
		 * the timeout) from range 0xF-0xFFFFFFFF given in 32768 Hz
		 * clock ticks. This makes the allowed range of 0x1-0x07CFFFFF
		 * in milliseconds. Check if the provided value is within
		 * this range. */
		if ((cfg->window.max == 0U) || (cfg->window.max > 0x07CFFFFF)) {
   109ee:	4914      	ldr	r1, [pc, #80]	; (10a40 <wdt_nrf_install_timeout+0x6c>)
   109f0:	1e58      	subs	r0, r3, #1
   109f2:	4288      	cmp	r0, r1
   109f4:	d81a      	bhi.n	10a2c <wdt_nrf_install_timeout+0x58>
			return -EINVAL;
		}

		/* Save timeout value from first registered watchdog channel. */
		get_dev_data(dev)->m_timeout = cfg->window.max;
   109f6:	6213      	str	r3, [r2, #32]
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
		return -EINVAL;
	}

	err_code = nrfx_wdt_channel_alloc(&get_dev_config(dev)->wdt,
   109f8:	6860      	ldr	r0, [r4, #4]
   109fa:	f10d 0107 	add.w	r1, sp, #7
   109fe:	f00e ff29 	bl	1f854 <nrfx_wdt_channel_alloc>
					  &channel_id);

	if (err_code == NRFX_ERROR_NO_MEM) {
   10a02:	4b10      	ldr	r3, [pc, #64]	; (10a44 <wdt_nrf_install_timeout+0x70>)
   10a04:	4298      	cmp	r0, r3
   10a06:	d017      	beq.n	10a38 <wdt_nrf_install_timeout+0x64>
		return -ENOMEM;
	}

	if (cfg->callback != NULL) {
   10a08:	68ab      	ldr	r3, [r5, #8]
   10a0a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   10a0e:	b113      	cbz	r3, 10a16 <wdt_nrf_install_timeout+0x42>
   10a10:	68e2      	ldr	r2, [r4, #12]
		get_dev_data(dev)->m_callbacks[channel_id] = cfg->callback;
   10a12:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}

	get_dev_data(dev)->m_allocated_channels++;
   10a16:	68e2      	ldr	r2, [r4, #12]
   10a18:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   10a1c:	3301      	adds	r3, #1
   10a1e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return channel_id;
}
   10a22:	b003      	add	sp, #12
   10a24:	bd30      	pop	{r4, r5, pc}
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
   10a26:	6a12      	ldr	r2, [r2, #32]
   10a28:	429a      	cmp	r2, r3
   10a2a:	d0e5      	beq.n	109f8 <wdt_nrf_install_timeout+0x24>
		return -EINVAL;
   10a2c:	f06f 0015 	mvn.w	r0, #21
   10a30:	e7f7      	b.n	10a22 <wdt_nrf_install_timeout+0x4e>
		return -ENOTSUP;
   10a32:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10a36:	e7f4      	b.n	10a22 <wdt_nrf_install_timeout+0x4e>
		return -ENOMEM;
   10a38:	f06f 000b 	mvn.w	r0, #11
   10a3c:	e7f1      	b.n	10a22 <wdt_nrf_install_timeout+0x4e>
   10a3e:	bf00      	nop
   10a40:	07cffffe 	.word	0x07cffffe
   10a44:	0bad0002 	.word	0x0bad0002

00010a48 <wdt_0_init>:
			    &wdt_##idx##z_config,			       \
			    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,  \
			    &wdt_nrfx_driver_api)

#ifdef CONFIG_NRFX_WDT0
WDT_NRFX_WDT_DEVICE(0);
   10a48:	b510      	push	{r4, lr}
   10a4a:	4604      	mov	r4, r0
   10a4c:	2200      	movs	r2, #0
   10a4e:	2101      	movs	r1, #1
   10a50:	2018      	movs	r0, #24
   10a52:	f000 f947 	bl	10ce4 <z_arm_irq_priority_set>
   10a56:	6860      	ldr	r0, [r4, #4]
   10a58:	4a05      	ldr	r2, [pc, #20]	; (10a70 <wdt_0_init+0x28>)
   10a5a:	f100 0108 	add.w	r1, r0, #8
   10a5e:	f00e fec1 	bl	1f7e4 <nrfx_wdt_init>
   10a62:	4b04      	ldr	r3, [pc, #16]	; (10a74 <wdt_0_init+0x2c>)
   10a64:	4298      	cmp	r0, r3
   10a66:	bf14      	ite	ne
   10a68:	f06f 000f 	mvnne.w	r0, #15
   10a6c:	2000      	moveq	r0, #0
   10a6e:	bd10      	pop	{r4, pc}
   10a70:	00010a79 	.word	0x00010a79
   10a74:	0bad0000 	.word	0x0bad0000

00010a78 <wdt_0_event_handler>:
   10a78:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   10a7a:	2400      	movs	r4, #0
   10a7c:	4d0a      	ldr	r5, [pc, #40]	; (10aa8 <wdt_0_event_handler+0x30>)
   10a7e:	68ea      	ldr	r2, [r5, #12]
   10a80:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   10a84:	429c      	cmp	r4, r3
   10a86:	db00      	blt.n	10a8a <wdt_0_event_handler+0x12>
WDT_NRFX_WDT_DEVICE(0);
   10a88:	bd38      	pop	{r3, r4, r5, pc}
		if (nrf_wdt_request_status(get_dev_config(dev)->wdt.p_reg,
   10a8a:	686b      	ldr	r3, [r5, #4]
   10a8c:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE bool nrf_wdt_request_status(NRF_WDT_Type const *  p_reg,
                                              nrf_wdt_rr_register_t rr_register)
{
    return (bool)(((p_reg->REQSTATUS) >> rr_register) & 0x1UL);
   10a8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
   10a92:	40e3      	lsrs	r3, r4
   10a94:	07db      	lsls	r3, r3, #31
   10a96:	d505      	bpl.n	10aa4 <wdt_0_event_handler+0x2c>
			if (get_dev_data(dev)->m_callbacks[i]) {
   10a98:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   10a9c:	b113      	cbz	r3, 10aa4 <wdt_0_event_handler+0x2c>
				get_dev_data(dev)->m_callbacks[i](dev, i);
   10a9e:	4621      	mov	r1, r4
   10aa0:	4628      	mov	r0, r5
   10aa2:	4798      	blx	r3
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   10aa4:	3401      	adds	r4, #1
   10aa6:	e7ea      	b.n	10a7e <wdt_0_event_handler+0x6>
   10aa8:	200207d4 	.word	0x200207d4

00010aac <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
   10aac:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   10aae:	4b08      	ldr	r3, [pc, #32]	; (10ad0 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   10ab0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   10ab4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   10ab8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   10abc:	4290      	cmp	r0, r2
   10abe:	d100      	bne.n	10ac2 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   10ac0:	4770      	bx	lr
   10ac2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   10ac6:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   10ac8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   10acc:	e7f2      	b.n	10ab4 <handle_next_tick_case+0x8>
   10ace:	bf00      	nop
   10ad0:	40015000 	.word	0x40015000

00010ad4 <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10ad4:	2200      	movs	r2, #0
   10ad6:	4b06      	ldr	r3, [pc, #24]	; (10af0 <rtc1_nrf_isr+0x1c>)
   10ad8:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   10ada:	4a06      	ldr	r2, [pc, #24]	; (10af4 <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
   10adc:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
   10ae0:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   10ae2:	1ac0      	subs	r0, r0, r3
   10ae4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   10ae8:	4403      	add	r3, r0
   10aea:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   10aec:	f010 b874 	b.w	20bd8 <z_clock_announce>
   10af0:	40015140 	.word	0x40015140
   10af4:	200225d0 	.word	0x200225d0

00010af8 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
   10af8:	b538      	push	{r3, r4, r5, lr}
   10afa:	4814      	ldr	r0, [pc, #80]	; (10b4c <z_clock_driver_init+0x54>)
   10afc:	f00e ff02 	bl	1f904 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
   10b00:	b300      	cbz	r0, 10b44 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   10b02:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   10b04:	2400      	movs	r4, #0
   10b06:	2101      	movs	r1, #1
   10b08:	681b      	ldr	r3, [r3, #0]
   10b0a:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10b0c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10b10:	4d0f      	ldr	r5, [pc, #60]	; (10b50 <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10b12:	4b10      	ldr	r3, [pc, #64]	; (10b54 <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
   10b14:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10b18:	601c      	str	r4, [r3, #0]
   10b1a:	4b0f      	ldr	r3, [pc, #60]	; (10b58 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   10b1c:	2101      	movs	r1, #1
   10b1e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   10b22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   10b26:	4622      	mov	r2, r4
   10b28:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   10b2c:	2015      	movs	r0, #21
   10b2e:	f000 f8d9 	bl	10ce4 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   10b32:	2015      	movs	r0, #21
   10b34:	f000 f8c6 	bl	10cc4 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   10b38:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   10b3a:	4620      	mov	r0, r4
   10b3c:	4a07      	ldr	r2, [pc, #28]	; (10b5c <z_clock_driver_init+0x64>)
   10b3e:	6013      	str	r3, [r2, #0]
   10b40:	602b      	str	r3, [r5, #0]
}
   10b42:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   10b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10b48:	e7fb      	b.n	10b42 <z_clock_driver_init+0x4a>
   10b4a:	bf00      	nop
   10b4c:	0002b8ad 	.word	0x0002b8ad
   10b50:	40015000 	.word	0x40015000
   10b54:	40015140 	.word	0x40015140
   10b58:	e000e100 	.word	0xe000e100
   10b5c:	40015008 	.word	0x40015008

00010b60 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   10b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   10b62:	4b2c      	ldr	r3, [pc, #176]	; (10c14 <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   10b64:	4c2c      	ldr	r4, [pc, #176]	; (10c18 <z_clock_set_timeout+0xb8>)
   10b66:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
   10b6a:	4b2c      	ldr	r3, [pc, #176]	; (10c1c <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   10b6c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   10b70:	bf08      	it	eq
   10b72:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
   10b74:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   10b76:	1a52      	subs	r2, r2, r1
   10b78:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   10b7c:	0212      	lsls	r2, r2, #8
   10b7e:	d436      	bmi.n	10bee <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   10b80:	3801      	subs	r0, #1
   10b82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   10b86:	42a0      	cmp	r0, r4
   10b88:	bfa8      	it	ge
   10b8a:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   10b8c:	3301      	adds	r3, #1
   10b8e:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   10b90:	42a0      	cmp	r0, r4
   10b92:	bf94      	ite	ls
   10b94:	180c      	addls	r4, r1, r0
   10b96:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   10b98:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10b9c:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
   10b9e:	4b1d      	ldr	r3, [pc, #116]	; (10c14 <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10ba0:	4e1f      	ldr	r6, [pc, #124]	; (10c20 <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
   10ba2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
   10ba6:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
   10baa:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   10bae:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
   10bb2:	1a52      	subs	r2, r2, r1
   10bb4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
   10bb8:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10bba:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
   10bbc:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   10bc0:	461d      	mov	r5, r3
   10bc2:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
   10bc6:	d103      	bne.n	10bd0 <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
   10bc8:	200f      	movs	r0, #15
   10bca:	f018 fa28 	bl	2901e <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10bce:	6037      	str	r7, [r6, #0]
   10bd0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10bd4:	4b13      	ldr	r3, [pc, #76]	; (10c24 <z_clock_set_timeout+0xc4>)
   10bd6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   10bda:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   10bde:	1a23      	subs	r3, r4, r0
   10be0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
   10be4:	2b01      	cmp	r3, #1
   10be6:	d104      	bne.n	10bf2 <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
   10be8:	f7ff ff60 	bl	10aac <handle_next_tick_case>
   10bec:	e00b      	b.n	10c06 <z_clock_set_timeout+0xa6>
		ticks = 0;
   10bee:	2000      	movs	r0, #0
   10bf0:	e7cc      	b.n	10b8c <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   10bf2:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   10bf6:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
   10bfa:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   10bfe:	1a24      	subs	r4, r4, r0
   10c00:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
   10c02:	0223      	lsls	r3, r4, #8
   10c04:	d4f0      	bmi.n	10be8 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
   10c06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   10c0a:	4b02      	ldr	r3, [pc, #8]	; (10c14 <z_clock_set_timeout+0xb4>)
   10c0c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
   10c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10c12:	bf00      	nop
   10c14:	40015000 	.word	0x40015000
   10c18:	007fffff 	.word	0x007fffff
   10c1c:	200225d0 	.word	0x200225d0
   10c20:	40015140 	.word	0x40015140
   10c24:	e000e100 	.word	0xe000e100

00010c28 <z_clock_elapsed>:
	__asm__ volatile(
   10c28:	f04f 0220 	mov.w	r2, #32
   10c2c:	f3ef 8311 	mrs	r3, BASEPRI
   10c30:	f382 8811 	msr	BASEPRI, r2
   10c34:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   10c38:	4a06      	ldr	r2, [pc, #24]	; (10c54 <z_clock_elapsed+0x2c>)
   10c3a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   10c3e:	4a06      	ldr	r2, [pc, #24]	; (10c58 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   10c40:	6812      	ldr	r2, [r2, #0]
   10c42:	1a80      	subs	r0, r0, r2
   10c44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   10c48:	f383 8811 	msr	BASEPRI, r3
   10c4c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   10c50:	4770      	bx	lr
   10c52:	bf00      	nop
   10c54:	40015000 	.word	0x40015000
   10c58:	200225d0 	.word	0x200225d0

00010c5c <z_timer_cycle_get_32>:
	__asm__ volatile(
   10c5c:	f04f 0320 	mov.w	r3, #32
   10c60:	f3ef 8211 	mrs	r2, BASEPRI
   10c64:	f383 8811 	msr	BASEPRI, r3
   10c68:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   10c6c:	4906      	ldr	r1, [pc, #24]	; (10c88 <z_timer_cycle_get_32+0x2c>)
   10c6e:	4b07      	ldr	r3, [pc, #28]	; (10c8c <z_timer_cycle_get_32+0x30>)
   10c70:	6808      	ldr	r0, [r1, #0]
   10c72:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   10c76:	f382 8811 	msr	BASEPRI, r2
   10c7a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   10c7e:	1a1b      	subs	r3, r3, r0
   10c80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   10c84:	4418      	add	r0, r3
   10c86:	4770      	bx	lr
   10c88:	200225d0 	.word	0x200225d0
   10c8c:	40015000 	.word	0x40015000

00010c90 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   10c90:	4a09      	ldr	r2, [pc, #36]	; (10cb8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   10c92:	490a      	ldr	r1, [pc, #40]	; (10cbc <arch_swap+0x2c>)
	_current->arch.basepri = key;
   10c94:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   10c96:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   10c98:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
   10c9a:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10c9c:	4908      	ldr	r1, [pc, #32]	; (10cc0 <arch_swap+0x30>)
   10c9e:	684b      	ldr	r3, [r1, #4]
   10ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   10ca4:	604b      	str	r3, [r1, #4]
   10ca6:	2300      	movs	r3, #0
   10ca8:	f383 8811 	msr	BASEPRI, r3
   10cac:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   10cb0:	6893      	ldr	r3, [r2, #8]
}
   10cb2:	6f18      	ldr	r0, [r3, #112]	; 0x70
   10cb4:	4770      	bx	lr
   10cb6:	bf00      	nop
   10cb8:	200280bc 	.word	0x200280bc
   10cbc:	0002ac10 	.word	0x0002ac10
   10cc0:	e000ed00 	.word	0xe000ed00

00010cc4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   10cc4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   10cc6:	2b00      	cmp	r3, #0
   10cc8:	db08      	blt.n	10cdc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10cca:	2201      	movs	r2, #1
   10ccc:	f000 001f 	and.w	r0, r0, #31
   10cd0:	fa02 f000 	lsl.w	r0, r2, r0
   10cd4:	4a02      	ldr	r2, [pc, #8]	; (10ce0 <arch_irq_enable+0x1c>)
   10cd6:	095b      	lsrs	r3, r3, #5
   10cd8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   10cdc:	4770      	bx	lr
   10cde:	bf00      	nop
   10ce0:	e000e100 	.word	0xe000e100

00010ce4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   10ce4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   10ce6:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   10ce8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10cec:	bfac      	ite	ge
   10cee:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10cf2:	4b06      	ldrlt	r3, [pc, #24]	; (10d0c <z_arm_irq_priority_set+0x28>)
   10cf4:	ea4f 1141 	mov.w	r1, r1, lsl #5
   10cf8:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10cfa:	bfab      	itete	ge
   10cfc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10d00:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10d04:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10d08:	5419      	strblt	r1, [r3, r0]
}
   10d0a:	4770      	bx	lr
   10d0c:	e000ed14 	.word	0xe000ed14

00010d10 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   10d10:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   10d12:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   10d14:	4b04      	ldr	r3, [pc, #16]	; (10d28 <_arch_isr_direct_pm+0x18>)
   10d16:	6a18      	ldr	r0, [r3, #32]
   10d18:	b118      	cbz	r0, 10d22 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   10d1a:	2200      	movs	r2, #0
   10d1c:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   10d1e:	f017 ff07 	bl	28b30 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   10d22:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   10d24:	bd08      	pop	{r3, pc}
   10d26:	bf00      	nop
   10d28:	200280bc 	.word	0x200280bc

00010d2c <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
   10d2c:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
   10d30:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
   10d32:	3a20      	subs	r2, #32
   10d34:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
   10d38:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   10d3a:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
   10d3c:	4908      	ldr	r1, [pc, #32]	; (10d60 <arch_new_thread+0x34>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
   10d3e:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   10d40:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
   10d42:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
   10d46:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   10d48:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
   10d4a:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   10d4c:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
   10d4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   10d52:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
   10d54:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
   10d56:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   10d58:	66c3      	str	r3, [r0, #108]	; 0x6c

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   10d5a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   10d5e:	4770      	bx	lr
   10d60:	00023fef 	.word	0x00023fef

00010d64 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   10d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d66:	461e      	mov	r6, r3
   10d68:	4607      	mov	r7, r0
   10d6a:	460d      	mov	r5, r1
   10d6c:	4614      	mov	r4, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   10d6e:	2300      	movs	r3, #0
   10d70:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   10d74:	f3ef 8314 	mrs	r3, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   10d78:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   10d7c:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   10d80:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   10d84:	f000 fbe2 	bl	1154c <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
   10d88:	4b09      	ldr	r3, [pc, #36]	; (10db0 <arch_switch_to_main_thread+0x4c>)
	start_of_main_stack =
   10d8a:	442c      	add	r4, r5
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
   10d8c:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
   10d90:	609f      	str	r7, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   10d92:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   10d96:	4630      	mov	r0, r6
   10d98:	f384 8809 	msr	PSP, r4
   10d9c:	2100      	movs	r1, #0
   10d9e:	b663      	cpsie	if
   10da0:	f381 8811 	msr	BASEPRI, r1
   10da4:	f3bf 8f6f 	isb	sy
   10da8:	2200      	movs	r2, #0
   10daa:	2300      	movs	r3, #0
   10dac:	f013 f91f 	bl	23fee <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   10db0:	200280bc 	.word	0x200280bc

00010db4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10db8:	4606      	mov	r6, r0

	if (esf != NULL) {
   10dba:	460d      	mov	r5, r1
{
   10dbc:	b087      	sub	sp, #28
	if (esf != NULL) {
   10dbe:	2900      	cmp	r1, #0
   10dc0:	d051      	beq.n	10e66 <z_arm_fatal_error+0xb2>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   10dc2:	4b2c      	ldr	r3, [pc, #176]	; (10e74 <z_arm_fatal_error+0xc0>)
   10dc4:	4c2c      	ldr	r4, [pc, #176]	; (10e78 <z_arm_fatal_error+0xc4>)
   10dc6:	46a8      	mov	r8, r5
   10dc8:	1ae4      	subs	r4, r4, r3
   10dca:	08e4      	lsrs	r4, r4, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   10dcc:	688b      	ldr	r3, [r1, #8]
   10dce:	01a4      	lsls	r4, r4, #6
   10dd0:	f044 0401 	orr.w	r4, r4, #1
   10dd4:	9300      	str	r3, [sp, #0]
   10dd6:	e9d1 2300 	ldrd	r2, r3, [r1]
   10dda:	4620      	mov	r0, r4
   10ddc:	4927      	ldr	r1, [pc, #156]	; (10e7c <z_arm_fatal_error+0xc8>)
   10dde:	f013 fb8f 	bl	24500 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   10de2:	696b      	ldr	r3, [r5, #20]
   10de4:	4620      	mov	r0, r4
   10de6:	9300      	str	r3, [sp, #0]
   10de8:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   10dec:	4924      	ldr	r1, [pc, #144]	; (10e80 <z_arm_fatal_error+0xcc>)
   10dee:	f013 fb87 	bl	24500 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   10df2:	4620      	mov	r0, r4
   10df4:	69ea      	ldr	r2, [r5, #28]
   10df6:	4923      	ldr	r1, [pc, #140]	; (10e84 <z_arm_fatal_error+0xd0>)
   10df8:	f013 fb82 	bl	24500 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   10dfc:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   10dfe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 10e90 <z_arm_fatal_error+0xdc>
   10e02:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   10e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   10e0a:	ed98 7a08 	vldr	s14, [r8, #32]
   10e0e:	edcd 7a05 	vstr	s15, [sp, #20]
   10e12:	1cfb      	adds	r3, r7, #3
   10e14:	9304      	str	r3, [sp, #16]
   10e16:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   10e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   10e1e:	edcd 7a03 	vstr	s15, [sp, #12]
   10e22:	1cbb      	adds	r3, r7, #2
   10e24:	9302      	str	r3, [sp, #8]
   10e26:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   10e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   10e2e:	edcd 7a01 	vstr	s15, [sp, #4]
   10e32:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   10e36:	1c7b      	adds	r3, r7, #1
   10e38:	463a      	mov	r2, r7
   10e3a:	9300      	str	r3, [sp, #0]
   10e3c:	4649      	mov	r1, r9
   10e3e:	ee17 3a90 	vmov	r3, s15
   10e42:	4620      	mov	r0, r4
	for (int i = 0; i < 16; i += 4) {
   10e44:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   10e46:	f013 fb5b 	bl	24500 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   10e4a:	2f10      	cmp	r7, #16
   10e4c:	f108 0810 	add.w	r8, r8, #16
   10e50:	d1d7      	bne.n	10e02 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   10e52:	4620      	mov	r0, r4
   10e54:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   10e56:	490c      	ldr	r1, [pc, #48]	; (10e88 <z_arm_fatal_error+0xd4>)
   10e58:	f013 fb52 	bl	24500 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   10e5c:	4620      	mov	r0, r4
   10e5e:	69aa      	ldr	r2, [r5, #24]
   10e60:	490a      	ldr	r1, [pc, #40]	; (10e8c <z_arm_fatal_error+0xd8>)
   10e62:	f013 fb4d 	bl	24500 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   10e66:	4629      	mov	r1, r5
   10e68:	4630      	mov	r0, r6
}
   10e6a:	b007      	add	sp, #28
   10e6c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_fatal_error(reason, esf);
   10e70:	f00e bd72 	b.w	1f958 <z_fatal_error>
   10e74:	0002a2c4 	.word	0x0002a2c4
   10e78:	0002a344 	.word	0x0002a344
   10e7c:	0002b8e0 	.word	0x0002b8e0
   10e80:	0002b90f 	.word	0x0002b90f
   10e84:	0002b93e 	.word	0x0002b93e
   10e88:	0002b990 	.word	0x0002b990
   10e8c:	0002b99f 	.word	0x0002b99f
   10e90:	0002b94d 	.word	0x0002b94d

00010e94 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   10e94:	4a14      	ldr	r2, [pc, #80]	; (10ee8 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   10e96:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   10e98:	4b14      	ldr	r3, [pc, #80]	; (10eec <z_arm_prep_c+0x58>)
   10e9a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   10e9e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   10ea0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10ea4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   10ea8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   10eac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   10eb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   10eb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   10eb8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   10ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   10ec0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   10ec4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   10ec8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10ecc:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   10ed0:	2300      	movs	r3, #0
   10ed2:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   10ed6:	f00e fdbd 	bl	1fa54 <z_bss_zero>
	z_data_copy();
   10eda:	f00e fdc5 	bl	1fa68 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   10ede:	f000 fb03 	bl	114e8 <z_arm_interrupt_init>
	z_cstart();
   10ee2:	f00e fdff 	bl	1fae4 <z_cstart>
   10ee6:	bf00      	nop
   10ee8:	0000c000 	.word	0x0000c000
   10eec:	e000ed00 	.word	0xe000ed00

00010ef0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   10ef0:	4929      	ldr	r1, [pc, #164]	; (10f98 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   10ef2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   10ef4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   10ef8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   10efa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   10efe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   10f02:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   10f06:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   10f0a:	d004      	beq.n	10f16 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   10f0c:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   10f10:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   10f14:	e007      	b.n	10f26 <out_fp_endif>

00010f16 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   10f16:	f102 0074 	add.w	r0, r2, #116	; 0x74
    vstmia r0, {s16-s31}
   10f1a:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   10f1e:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   10f22:	f050 0004 	orrs.w	r0, r0, #4

00010f26 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   10f26:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   10f2a:	2020      	movs	r0, #32
    msr BASEPRI, r0
   10f2c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   10f30:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   10f34:	4f19      	ldr	r7, [pc, #100]	; (10f9c <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   10f36:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   10f3a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   10f3c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   10f3e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   10f40:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
   10f42:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   10f44:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   10f46:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   10f4a:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   10f4e:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   10f52:	d105      	bne.n	10f60 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   10f54:	2300      	movs	r3, #0
    vmsr fpscr, r3
   10f56:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   10f5a:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   10f5e:	e005      	b.n	10f6c <in_fp_endif>

00010f60 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   10f60:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   10f64:	f102 0074 	add.w	r0, r2, #116	; 0x74
    vldmia r0, {s16-s31}
   10f68:	ec90 8a10 	vldmia	r0, {s16-s31}

00010f6c <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   10f6c:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   10f70:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   10f74:	f383 8814 	msr	CONTROL, r3
    isb
   10f78:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   10f7c:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   10f80:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   10f84:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   10f88:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   10f8c:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   10f8e:	f013 fe70 	bl	24c72 <configure_builtin_stack_guard>
    pop {r2, lr}
   10f92:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   10f96:	4770      	bx	lr
    ldr r1, =_kernel
   10f98:	200280bc 	.word	0x200280bc
    ldr v4, =_SCS_ICSR
   10f9c:	e000ed04 	.word	0xe000ed04

00010fa0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   10fa0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   10fa4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   10fa6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   10faa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   10fae:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   10fb0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   10fb4:	2902      	cmp	r1, #2
    beq _oops
   10fb6:	d0ff      	beq.n	10fb8 <_oops>

00010fb8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   10fb8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   10fba:	f013 fe5e 	bl	24c7a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   10fbe:	bd01      	pop	{r0, pc}

00010fc0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   10fc0:	4901      	ldr	r1, [pc, #4]	; (10fc8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   10fc2:	2210      	movs	r2, #16
	str	r2, [r1]
   10fc4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   10fc6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   10fc8:	e000ed10 	.word	0xe000ed10

00010fcc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   10fcc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   10fce:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   10fd0:	f380 8811 	msr	BASEPRI, r0
	isb
   10fd4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   10fd8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   10fdc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   10fde:	b662      	cpsie	i
	isb
   10fe0:	f3bf 8f6f 	isb	sy

	bx	lr
   10fe4:	4770      	bx	lr
   10fe6:	bf00      	nop

00010fe8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   10fe8:	bf30      	wfi
    b z_SysNmiOnReset
   10fea:	f7ff bffd 	b.w	10fe8 <z_SysNmiOnReset>
   10fee:	bf00      	nop

00010ff0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   10ff0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   10ff2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   10ff4:	4a0b      	ldr	r2, [pc, #44]	; (11024 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   10ff6:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   10ff8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   10ffa:	bf1e      	ittt	ne
	movne	r1, #0
   10ffc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   10ffe:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   11000:	f017 fd96 	blne	28b30 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   11004:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   11006:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1100a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1100e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   11012:	4905      	ldr	r1, [pc, #20]	; (11028 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   11014:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   11016:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   11018:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1101a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1101e:	4903      	ldr	r1, [pc, #12]	; (1102c <_isr_wrapper+0x3c>)
	bx r1
   11020:	4708      	bx	r1
   11022:	0000      	.short	0x0000
	ldr r2, =_kernel
   11024:	200280bc 	.word	0x200280bc
	ldr r1, =_sw_isr_table
   11028:	0002a0b0 	.word	0x0002a0b0
	ldr r1, =z_arm_int_exit
   1102c:	00011075 	.word	0x00011075

00011030 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   11030:	f013 fa60 	bl	244f4 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11034:	2020      	movs	r0, #32
    msr BASEPRI, r0
   11036:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1103a:	4808      	ldr	r0, [pc, #32]	; (1105c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   1103c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   11040:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11042:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11046:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1104a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1104c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1104e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11052:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11056:	f7ff ff1d 	bl	10e94 <z_arm_prep_c>
   1105a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   1105c:	2002ebd8 	.word	0x2002ebd8

00011060 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   11060:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11064:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   11068:	4672      	mov	r2, lr

	push {r0, lr}
   1106a:	b501      	push	{r0, lr}

	bl z_arm_fault
   1106c:	f000 f94a 	bl	11304 <z_arm_fault>

	pop {r0, pc}
   11070:	bd01      	pop	{r0, pc}
   11072:	bf00      	nop

00011074 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   11074:	4b04      	ldr	r3, [pc, #16]	; (11088 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   11076:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   11078:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   1107a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1107c:	d003      	beq.n	11086 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1107e:	4903      	ldr	r1, [pc, #12]	; (1108c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   11080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11084:	600a      	str	r2, [r1, #0]

00011086 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   11086:	4770      	bx	lr
	ldr r3, =_kernel
   11088:	200280bc 	.word	0x200280bc
	ldr r1, =_SCS_ICSR
   1108c:	e000ed04 	.word	0xe000ed04

00011090 <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11094:	4b27      	ldr	r3, [pc, #156]	; (11134 <mem_manage_fault.isra.0+0xa4>)
   11096:	4c28      	ldr	r4, [pc, #160]	; (11138 <mem_manage_fault.isra.0+0xa8>)
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11098:	4d28      	ldr	r5, [pc, #160]	; (1113c <mem_manage_fault.isra.0+0xac>)
   1109a:	1ae4      	subs	r4, r4, r3
   1109c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   1109e:	01a4      	lsls	r4, r4, #6
   110a0:	f044 0801 	orr.w	r8, r4, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   110a4:	4607      	mov	r7, r0
   110a6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   110a8:	4640      	mov	r0, r8
   110aa:	4925      	ldr	r1, [pc, #148]	; (11140 <mem_manage_fault.isra.0+0xb0>)
   110ac:	f013 fa28 	bl	24500 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   110b0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   110b2:	06d3      	lsls	r3, r2, #27
   110b4:	d503      	bpl.n	110be <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   110b6:	4640      	mov	r0, r8
   110b8:	4922      	ldr	r1, [pc, #136]	; (11144 <mem_manage_fault.isra.0+0xb4>)
   110ba:	f013 fa21 	bl	24500 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   110be:	6aab      	ldr	r3, [r5, #40]	; 0x28
   110c0:	071d      	lsls	r5, r3, #28
   110c2:	d504      	bpl.n	110ce <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   110c4:	4920      	ldr	r1, [pc, #128]	; (11148 <mem_manage_fault.isra.0+0xb8>)
   110c6:	f044 0001 	orr.w	r0, r4, #1
   110ca:	f013 fa19 	bl	24500 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   110ce:	4d1b      	ldr	r5, [pc, #108]	; (1113c <mem_manage_fault.isra.0+0xac>)
   110d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   110d2:	0798      	lsls	r0, r3, #30
   110d4:	d512      	bpl.n	110fc <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   110d6:	f044 0801 	orr.w	r8, r4, #1
   110da:	491c      	ldr	r1, [pc, #112]	; (1114c <mem_manage_fault.isra.0+0xbc>)
   110dc:	4640      	mov	r0, r8
   110de:	f013 fa0f 	bl	24500 <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   110e2:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   110e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   110e6:	0619      	lsls	r1, r3, #24
   110e8:	d508      	bpl.n	110fc <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   110ea:	4640      	mov	r0, r8
   110ec:	4918      	ldr	r1, [pc, #96]	; (11150 <mem_manage_fault.isra.0+0xc0>)
   110ee:	f013 fa07 	bl	24500 <log_string_sync>
			if (from_hard_fault) {
   110f2:	b11f      	cbz	r7, 110fc <mem_manage_fault.isra.0+0x6c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   110f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   110f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   110fa:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   110fc:	4d0f      	ldr	r5, [pc, #60]	; (1113c <mem_manage_fault.isra.0+0xac>)
   110fe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11100:	07d2      	lsls	r2, r2, #31
   11102:	d504      	bpl.n	1110e <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   11104:	4913      	ldr	r1, [pc, #76]	; (11154 <mem_manage_fault.isra.0+0xc4>)
   11106:	f044 0001 	orr.w	r0, r4, #1
   1110a:	f013 f9f9 	bl	24500 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1110e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11110:	069b      	lsls	r3, r3, #26
   11112:	d504      	bpl.n	1111e <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   11114:	4910      	ldr	r1, [pc, #64]	; (11158 <mem_manage_fault.isra.0+0xc8>)
   11116:	f044 0001 	orr.w	r0, r4, #1
   1111a:	f013 f9f1 	bl	24500 <log_string_sync>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   1111e:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   11120:	4b06      	ldr	r3, [pc, #24]	; (1113c <mem_manage_fault.isra.0+0xac>)
   11122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11126:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1112a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   1112c:	7030      	strb	r0, [r6, #0]

	return reason;
}
   1112e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11132:	bf00      	nop
   11134:	0002a2c4 	.word	0x0002a2c4
   11138:	0002a344 	.word	0x0002a344
   1113c:	e000ed00 	.word	0xe000ed00
   11140:	0002b9cd 	.word	0x0002b9cd
   11144:	0002b9e3 	.word	0x0002b9e3
   11148:	0002ba16 	.word	0x0002ba16
   1114c:	0002ba29 	.word	0x0002ba29
   11150:	0002ba41 	.word	0x0002ba41
   11154:	0002ba57 	.word	0x0002ba57
   11158:	0002ba76 	.word	0x0002ba76

0001115c <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1115c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11160:	4b29      	ldr	r3, [pc, #164]	; (11208 <bus_fault.isra.0+0xac>)
   11162:	4c2a      	ldr	r4, [pc, #168]	; (1120c <bus_fault.isra.0+0xb0>)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   11164:	4d2a      	ldr	r5, [pc, #168]	; (11210 <bus_fault.isra.0+0xb4>)
   11166:	1ae4      	subs	r4, r4, r3
   11168:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   1116a:	01a4      	lsls	r4, r4, #6
   1116c:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   11170:	4607      	mov	r7, r0
   11172:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   11174:	4640      	mov	r0, r8
   11176:	4927      	ldr	r1, [pc, #156]	; (11214 <bus_fault.isra.0+0xb8>)
   11178:	f013 f9c2 	bl	24500 <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1117c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1117e:	04d1      	lsls	r1, r2, #19
   11180:	d503      	bpl.n	1118a <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   11182:	4640      	mov	r0, r8
   11184:	4924      	ldr	r1, [pc, #144]	; (11218 <bus_fault.isra.0+0xbc>)
   11186:	f013 f9bb 	bl	24500 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1118a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1118c:	051a      	lsls	r2, r3, #20
   1118e:	d504      	bpl.n	1119a <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   11190:	4922      	ldr	r1, [pc, #136]	; (1121c <bus_fault.isra.0+0xc0>)
   11192:	f044 0001 	orr.w	r0, r4, #1
   11196:	f013 f9b3 	bl	24500 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1119a:	4d1d      	ldr	r5, [pc, #116]	; (11210 <bus_fault.isra.0+0xb4>)
   1119c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1119e:	059b      	lsls	r3, r3, #22
   111a0:	d512      	bpl.n	111c8 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   111a2:	f044 0801 	orr.w	r8, r4, #1
   111a6:	4640      	mov	r0, r8
   111a8:	491d      	ldr	r1, [pc, #116]	; (11220 <bus_fault.isra.0+0xc4>)
   111aa:	f013 f9a9 	bl	24500 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   111ae:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   111b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   111b2:	0418      	lsls	r0, r3, #16
   111b4:	d508      	bpl.n	111c8 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   111b6:	4640      	mov	r0, r8
   111b8:	491a      	ldr	r1, [pc, #104]	; (11224 <bus_fault.isra.0+0xc8>)
   111ba:	f013 f9a1 	bl	24500 <log_string_sync>
			if (from_hard_fault) {
   111be:	b11f      	cbz	r7, 111c8 <bus_fault.isra.0+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   111c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   111c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   111c6:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   111c8:	4d11      	ldr	r5, [pc, #68]	; (11210 <bus_fault.isra.0+0xb4>)
   111ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
   111cc:	0559      	lsls	r1, r3, #21
   111ce:	d504      	bpl.n	111da <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   111d0:	4915      	ldr	r1, [pc, #84]	; (11228 <bus_fault.isra.0+0xcc>)
   111d2:	f044 0001 	orr.w	r0, r4, #1
   111d6:	f013 f993 	bl	24500 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   111da:	6aab      	ldr	r3, [r5, #40]	; 0x28
   111dc:	05da      	lsls	r2, r3, #23
   111de:	d50d      	bpl.n	111fc <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   111e0:	4912      	ldr	r1, [pc, #72]	; (1122c <bus_fault.isra.0+0xd0>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   111e2:	f044 0001 	orr.w	r0, r4, #1
   111e6:	f013 f98b 	bl	24500 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   111ea:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   111ec:	4a08      	ldr	r2, [pc, #32]	; (11210 <bus_fault.isra.0+0xb4>)
   111ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
   111f0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   111f4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   111f6:	7030      	strb	r0, [r6, #0]

	return reason;
}
   111f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   111fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   111fe:	049b      	lsls	r3, r3, #18
   11200:	d5f3      	bpl.n	111ea <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   11202:	490b      	ldr	r1, [pc, #44]	; (11230 <bus_fault.isra.0+0xd4>)
   11204:	e7ed      	b.n	111e2 <bus_fault.isra.0+0x86>
   11206:	bf00      	nop
   11208:	0002a2c4 	.word	0x0002a2c4
   1120c:	0002a344 	.word	0x0002a344
   11210:	e000ed00 	.word	0xe000ed00
   11214:	0002baa5 	.word	0x0002baa5
   11218:	0002babb 	.word	0x0002babb
   1121c:	0002ba16 	.word	0x0002ba16
   11220:	0002bacc 	.word	0x0002bacc
   11224:	0002bae5 	.word	0x0002bae5
   11228:	0002bafa 	.word	0x0002bafa
   1122c:	0002bb15 	.word	0x0002bb15
   11230:	0002ba76 	.word	0x0002ba76

00011234 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   11234:	b570      	push	{r4, r5, r6, lr}
   11236:	4b28      	ldr	r3, [pc, #160]	; (112d8 <usage_fault.isra.0+0xa4>)
   11238:	4c28      	ldr	r4, [pc, #160]	; (112dc <usage_fault.isra.0+0xa8>)
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1123a:	4d29      	ldr	r5, [pc, #164]	; (112e0 <usage_fault.isra.0+0xac>)
   1123c:	1ae4      	subs	r4, r4, r3
   1123e:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   11240:	01a4      	lsls	r4, r4, #6
   11242:	f044 0601 	orr.w	r6, r4, #1
   11246:	4630      	mov	r0, r6
   11248:	4926      	ldr	r1, [pc, #152]	; (112e4 <usage_fault.isra.0+0xb0>)
   1124a:	f013 f959 	bl	24500 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1124e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11250:	0193      	lsls	r3, r2, #6
   11252:	d503      	bpl.n	1125c <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   11254:	4630      	mov	r0, r6
   11256:	4924      	ldr	r1, [pc, #144]	; (112e8 <usage_fault.isra.0+0xb4>)
   11258:	f013 f952 	bl	24500 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1125c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1125e:	01dd      	lsls	r5, r3, #7
   11260:	d504      	bpl.n	1126c <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   11262:	4922      	ldr	r1, [pc, #136]	; (112ec <usage_fault.isra.0+0xb8>)
   11264:	f044 0001 	orr.w	r0, r4, #1
   11268:	f013 f94a 	bl	24500 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1126c:	4d1c      	ldr	r5, [pc, #112]	; (112e0 <usage_fault.isra.0+0xac>)
   1126e:	6aae      	ldr	r6, [r5, #40]	; 0x28
   11270:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   11274:	d005      	beq.n	11282 <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   11276:	491e      	ldr	r1, [pc, #120]	; (112f0 <usage_fault.isra.0+0xbc>)
   11278:	f044 0001 	orr.w	r0, r4, #1
   1127c:	f013 f940 	bl	24500 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   11280:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11282:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11284:	0318      	lsls	r0, r3, #12
   11286:	d504      	bpl.n	11292 <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   11288:	491a      	ldr	r1, [pc, #104]	; (112f4 <usage_fault.isra.0+0xc0>)
   1128a:	f044 0001 	orr.w	r0, r4, #1
   1128e:	f013 f937 	bl	24500 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   11292:	4d13      	ldr	r5, [pc, #76]	; (112e0 <usage_fault.isra.0+0xac>)
   11294:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11296:	0351      	lsls	r1, r2, #13
   11298:	d504      	bpl.n	112a4 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1129a:	4917      	ldr	r1, [pc, #92]	; (112f8 <usage_fault.isra.0+0xc4>)
   1129c:	f044 0001 	orr.w	r0, r4, #1
   112a0:	f013 f92e 	bl	24500 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   112a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   112a6:	039a      	lsls	r2, r3, #14
   112a8:	d504      	bpl.n	112b4 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   112aa:	4914      	ldr	r1, [pc, #80]	; (112fc <usage_fault.isra.0+0xc8>)
   112ac:	f044 0001 	orr.w	r0, r4, #1
   112b0:	f013 f926 	bl	24500 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   112b4:	4d0a      	ldr	r5, [pc, #40]	; (112e0 <usage_fault.isra.0+0xac>)
   112b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   112b8:	03db      	lsls	r3, r3, #15
   112ba:	d504      	bpl.n	112c6 <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   112bc:	4910      	ldr	r1, [pc, #64]	; (11300 <usage_fault.isra.0+0xcc>)
   112be:	f044 0001 	orr.w	r0, r4, #1
   112c2:	f013 f91d 	bl	24500 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   112c6:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   112c8:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   112ca:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   112ce:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   112d2:	62ab      	str	r3, [r5, #40]	; 0x28
}
   112d4:	bd70      	pop	{r4, r5, r6, pc}
   112d6:	bf00      	nop
   112d8:	0002a2c4 	.word	0x0002a2c4
   112dc:	0002a344 	.word	0x0002a344
   112e0:	e000ed00 	.word	0xe000ed00
   112e4:	0002bb2d 	.word	0x0002bb2d
   112e8:	0002bb45 	.word	0x0002bb45
   112ec:	0002bb58 	.word	0x0002bb58
   112f0:	0002bb72 	.word	0x0002bb72
   112f4:	0002bb9c 	.word	0x0002bb9c
   112f8:	0002bbba 	.word	0x0002bbba
   112fc:	0002bbdf 	.word	0x0002bbdf
   11300:	0002bbf9 	.word	0x0002bbf9

00011304 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   11304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11308:	4b5a      	ldr	r3, [pc, #360]	; (11474 <z_arm_fault+0x170>)
{
   1130a:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1130c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   11310:	460f      	mov	r7, r1
   11312:	4614      	mov	r4, r2
   11314:	2500      	movs	r5, #0
   11316:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11318:	f3c8 0608 	ubfx	r6, r8, #0, #9
   1131c:	f385 8811 	msr	BASEPRI, r5
   11320:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11324:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   11328:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1132c:	d123      	bne.n	11376 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1132e:	07d0      	lsls	r0, r2, #31
   11330:	d421      	bmi.n	11376 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   11332:	0651      	lsls	r1, r2, #25
   11334:	d403      	bmi.n	1133e <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   11336:	0722      	lsls	r2, r4, #28
   11338:	d40e      	bmi.n	11358 <z_arm_fault+0x54>
			*nested_exc = true;
   1133a:	2501      	movs	r5, #1
   1133c:	e00e      	b.n	1135c <z_arm_fault+0x58>
   1133e:	484e      	ldr	r0, [pc, #312]	; (11478 <z_arm_fault+0x174>)
   11340:	4b4e      	ldr	r3, [pc, #312]	; (1147c <z_arm_fault+0x178>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   11342:	494f      	ldr	r1, [pc, #316]	; (11480 <z_arm_fault+0x17c>)
   11344:	1a1b      	subs	r3, r3, r0
   11346:	08db      	lsrs	r3, r3, #3
   11348:	019b      	lsls	r3, r3, #6
   1134a:	f043 0001 	orr.w	r0, r3, #1
   1134e:	f013 f8d7 	bl	24500 <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   11352:	f014 0504 	ands.w	r5, r4, #4
   11356:	d001      	beq.n	1135c <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   11358:	46b9      	mov	r9, r7
	*nested_exc = false;
   1135a:	2500      	movs	r5, #0
	*recoverable = false;
   1135c:	2300      	movs	r3, #0
   1135e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   11362:	1ef3      	subs	r3, r6, #3
   11364:	2b09      	cmp	r3, #9
   11366:	d86c      	bhi.n	11442 <z_arm_fault+0x13e>
   11368:	e8df f003 	tbb	[pc, r3]
   1136c:	3e5e5a07 	.word	0x3e5e5a07
   11370:	6b6b6b6b 	.word	0x6b6b6b6b
   11374:	626b      	.short	0x626b
		return NULL;
   11376:	46a9      	mov	r9, r5
   11378:	e7f0      	b.n	1135c <z_arm_fault+0x58>
	*recoverable = false;
   1137a:	f04f 0800 	mov.w	r8, #0
   1137e:	4b3e      	ldr	r3, [pc, #248]	; (11478 <z_arm_fault+0x174>)
   11380:	4e3e      	ldr	r6, [pc, #248]	; (1147c <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   11382:	4940      	ldr	r1, [pc, #256]	; (11484 <z_arm_fault+0x180>)
   11384:	1af6      	subs	r6, r6, r3
   11386:	08f6      	lsrs	r6, r6, #3
   11388:	01b6      	lsls	r6, r6, #6
   1138a:	f046 0601 	orr.w	r6, r6, #1
   1138e:	4630      	mov	r0, r6
   11390:	f013 f8b6 	bl	24500 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11394:	4b37      	ldr	r3, [pc, #220]	; (11474 <z_arm_fault+0x170>)
	*recoverable = false;
   11396:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1139a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1139c:	f014 0402 	ands.w	r4, r4, #2
   113a0:	d005      	beq.n	113ae <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   113a2:	4630      	mov	r0, r6
   113a4:	4938      	ldr	r1, [pc, #224]	; (11488 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
   113a6:	f013 f8ab 	bl	24500 <log_string_sync>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   113aa:	2400      	movs	r4, #0
}
   113ac:	e01f      	b.n	113ee <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   113ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   113b0:	005b      	lsls	r3, r3, #1
   113b2:	d51c      	bpl.n	113ee <z_arm_fault+0xea>
		PR_EXC("  Fault escalation (see below)");
   113b4:	4630      	mov	r0, r6
   113b6:	4935      	ldr	r1, [pc, #212]	; (1148c <z_arm_fault+0x188>)
   113b8:	f013 f8a2 	bl	24500 <log_string_sync>
		if (SCB_MMFSR != 0) {
   113bc:	4b34      	ldr	r3, [pc, #208]	; (11490 <z_arm_fault+0x18c>)
   113be:	781b      	ldrb	r3, [r3, #0]
   113c0:	b12b      	cbz	r3, 113ce <z_arm_fault+0xca>
			reason = mem_manage_fault(esf, 1, recoverable);
   113c2:	2001      	movs	r0, #1
   113c4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   113c8:	f7ff fe62 	bl	11090 <mem_manage_fault.isra.0>
   113cc:	e00e      	b.n	113ec <z_arm_fault+0xe8>
		} else if (SCB_BFSR != 0) {
   113ce:	4b31      	ldr	r3, [pc, #196]	; (11494 <z_arm_fault+0x190>)
   113d0:	781b      	ldrb	r3, [r3, #0]
   113d2:	b12b      	cbz	r3, 113e0 <z_arm_fault+0xdc>
			reason = bus_fault(esf, 1, recoverable);
   113d4:	2001      	movs	r0, #1
   113d6:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   113da:	f7ff febf 	bl	1115c <bus_fault.isra.0>
   113de:	e005      	b.n	113ec <z_arm_fault+0xe8>
		} else if (SCB_UFSR != 0) {
   113e0:	4b2d      	ldr	r3, [pc, #180]	; (11498 <z_arm_fault+0x194>)
   113e2:	881b      	ldrh	r3, [r3, #0]
   113e4:	b29b      	uxth	r3, r3
   113e6:	b113      	cbz	r3, 113ee <z_arm_fault+0xea>
			reason = usage_fault(esf);
   113e8:	f7ff ff24 	bl	11234 <usage_fault.isra.0>
   113ec:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   113ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   113f2:	b993      	cbnz	r3, 1141a <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   113f4:	2268      	movs	r2, #104	; 0x68
   113f6:	4649      	mov	r1, r9
   113f8:	a802      	add	r0, sp, #8
   113fa:	f018 f83a 	bl	29472 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   113fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11400:	b39d      	cbz	r5, 1146a <z_arm_fault+0x166>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   11402:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11406:	b922      	cbnz	r2, 11412 <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11408:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1140c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11410:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   11412:	4620      	mov	r0, r4
   11414:	a902      	add	r1, sp, #8
   11416:	f7ff fccd 	bl	10db4 <z_arm_fatal_error>
}
   1141a:	b01d      	add	sp, #116	; 0x74
   1141c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   11420:	2000      	movs	r0, #0
   11422:	f10d 0107 	add.w	r1, sp, #7
   11426:	e7cf      	b.n	113c8 <z_arm_fault+0xc4>
		reason = bus_fault(esf, 0, recoverable);
   11428:	2000      	movs	r0, #0
   1142a:	f10d 0107 	add.w	r1, sp, #7
   1142e:	e7d4      	b.n	113da <z_arm_fault+0xd6>
   11430:	4812      	ldr	r0, [pc, #72]	; (1147c <z_arm_fault+0x178>)
   11432:	4b11      	ldr	r3, [pc, #68]	; (11478 <z_arm_fault+0x174>)
	PR_FAULT_INFO(
   11434:	4919      	ldr	r1, [pc, #100]	; (1149c <z_arm_fault+0x198>)
   11436:	1ac0      	subs	r0, r0, r3
   11438:	08c0      	lsrs	r0, r0, #3
   1143a:	0180      	lsls	r0, r0, #6
   1143c:	f040 0001 	orr.w	r0, r0, #1
   11440:	e7b1      	b.n	113a6 <z_arm_fault+0xa2>
   11442:	4b0d      	ldr	r3, [pc, #52]	; (11478 <z_arm_fault+0x174>)
   11444:	480d      	ldr	r0, [pc, #52]	; (1147c <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** %s %d) *****",
   11446:	4916      	ldr	r1, [pc, #88]	; (114a0 <z_arm_fault+0x19c>)
   11448:	1ac0      	subs	r0, r0, r3
   1144a:	08c0      	lsrs	r0, r0, #3
   1144c:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   11450:	ea4f 1080 	mov.w	r0, r0, lsl #6
   11454:	4a13      	ldr	r2, [pc, #76]	; (114a4 <z_arm_fault+0x1a0>)
   11456:	f1a6 0310 	sub.w	r3, r6, #16
   1145a:	bf08      	it	eq
   1145c:	460a      	moveq	r2, r1
   1145e:	f040 0001 	orr.w	r0, r0, #1
   11462:	4911      	ldr	r1, [pc, #68]	; (114a8 <z_arm_fault+0x1a4>)
   11464:	f013 f84c 	bl	24500 <log_string_sync>
   11468:	e79f      	b.n	113aa <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1146a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1146e:	f023 0301 	bic.w	r3, r3, #1
   11472:	e7cd      	b.n	11410 <z_arm_fault+0x10c>
   11474:	e000ed00 	.word	0xe000ed00
   11478:	0002a2c4 	.word	0x0002a2c4
   1147c:	0002a344 	.word	0x0002a344
   11480:	0002bc52 	.word	0x0002bc52
   11484:	0002bc75 	.word	0x0002bc75
   11488:	0002bc8c 	.word	0x0002bc8c
   1148c:	0002bcad 	.word	0x0002bcad
   11490:	e000ed28 	.word	0xe000ed28
   11494:	e000ed29 	.word	0xe000ed29
   11498:	e000ed2a 	.word	0xe000ed2a
   1149c:	0002bccc 	.word	0x0002bccc
   114a0:	0002bc24 	.word	0x0002bc24
   114a4:	0002bc39 	.word	0x0002bc39
   114a8:	0002bd02 	.word	0x0002bd02

000114ac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   114ac:	4b04      	ldr	r3, [pc, #16]	; (114c0 <z_arm_fault_init+0x14>)
   114ae:	695a      	ldr	r2, [r3, #20]
   114b0:	f042 0210 	orr.w	r2, r2, #16
   114b4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   114b6:	695a      	ldr	r2, [r3, #20]
   114b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   114bc:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   114be:	4770      	bx	lr
   114c0:	e000ed00 	.word	0xe000ed00

000114c4 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   114c4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   114c8:	4905      	ldr	r1, [pc, #20]	; (114e0 <sys_arch_reboot+0x1c>)
   114ca:	4b06      	ldr	r3, [pc, #24]	; (114e4 <sys_arch_reboot+0x20>)
   114cc:	68ca      	ldr	r2, [r1, #12]
   114ce:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   114d2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   114d4:	60cb      	str	r3, [r1, #12]
   114d6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   114da:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   114dc:	e7fd      	b.n	114da <sys_arch_reboot+0x16>
   114de:	bf00      	nop
   114e0:	e000ed00 	.word	0xe000ed00
   114e4:	05fa0004 	.word	0x05fa0004

000114e8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   114e8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   114ea:	2120      	movs	r1, #32
   114ec:	4803      	ldr	r0, [pc, #12]	; (114fc <z_arm_interrupt_init+0x14>)
   114ee:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   114f0:	3301      	adds	r3, #1
   114f2:	2b41      	cmp	r3, #65	; 0x41
   114f4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   114f8:	d1f9      	bne.n	114ee <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   114fa:	4770      	bx	lr
   114fc:	e000e100 	.word	0xe000e100

00011500 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   11500:	b538      	push	{r3, r4, r5, lr}
   11502:	4604      	mov	r4, r0
	__asm__ volatile(
   11504:	f04f 0320 	mov.w	r3, #32
   11508:	f3ef 8511 	mrs	r5, BASEPRI
   1150c:	f383 8811 	msr	BASEPRI, r3
   11510:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   11514:	f00e ff66 	bl	203e4 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   11518:	4b0a      	ldr	r3, [pc, #40]	; (11544 <z_impl_k_thread_abort+0x44>)
   1151a:	689b      	ldr	r3, [r3, #8]
   1151c:	42a3      	cmp	r3, r4
   1151e:	d10b      	bne.n	11538 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   11520:	4b09      	ldr	r3, [pc, #36]	; (11548 <z_impl_k_thread_abort+0x48>)
   11522:	685a      	ldr	r2, [r3, #4]
   11524:	f3c2 0208 	ubfx	r2, r2, #0, #9
   11528:	b912      	cbnz	r2, 11530 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   1152a:	4628      	mov	r0, r5
   1152c:	f7ff fbb0 	bl	10c90 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11530:	685a      	ldr	r2, [r3, #4]
   11532:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   11536:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   11538:	4628      	mov	r0, r5
}
   1153a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   1153e:	f017 bc6f 	b.w	28e20 <z_reschedule_irqlock>
   11542:	bf00      	nop
   11544:	200280bc 	.word	0x200280bc
   11548:	e000ed00 	.word	0xe000ed00

0001154c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1154c:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   1154e:	4b0e      	ldr	r3, [pc, #56]	; (11588 <z_arm_configure_static_mpu_regions+0x3c>)
{
   11550:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   11552:	9302      	str	r3, [sp, #8]
   11554:	4b0d      	ldr	r3, [pc, #52]	; (1158c <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11556:	4c0e      	ldr	r4, [pc, #56]	; (11590 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   11558:	9303      	str	r3, [sp, #12]
   1155a:	4b0e      	ldr	r3, [pc, #56]	; (11594 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1155c:	4a0e      	ldr	r2, [pc, #56]	; (11598 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   1155e:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   11560:	ab02      	add	r3, sp, #8
   11562:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11564:	a801      	add	r0, sp, #4
   11566:	4623      	mov	r3, r4
   11568:	2101      	movs	r1, #1
   1156a:	f000 f937 	bl	117dc <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   1156e:	2300      	movs	r3, #0
   11570:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   11572:	4b0a      	ldr	r3, [pc, #40]	; (1159c <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11574:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11576:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11578:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   1157a:	9305      	str	r3, [sp, #20]
   1157c:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1157e:	f000 f937 	bl	117f0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   11582:	b008      	add	sp, #32
   11584:	bd10      	pop	{r4, pc}
   11586:	bf00      	nop
   11588:	20020000 	.word	0x20020000
   1158c:	00000000 	.word	0x00000000
   11590:	20040000 	.word	0x20040000
   11594:	00010006 	.word	0x00010006
   11598:	20020000 	.word	0x20020000
   1159c:	20020a20 	.word	0x20020a20

000115a0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   115a0:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   115a2:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   115a4:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   115a6:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   115aa:	f004 031f 	and.w	r3, r4, #31
   115ae:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   115b0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   115b2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   115b4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   115b8:	4904      	ldr	r1, [pc, #16]	; (115cc <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   115ba:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   115be:	f043 0301 	orr.w	r3, r3, #1
   115c2:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   115c4:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   115c6:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   115c8:	bd10      	pop	{r4, pc}
   115ca:	bf00      	nop
   115cc:	e000ed90 	.word	0xe000ed90

000115d0 <region_allocate_and_init>:

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   115d0:	280f      	cmp	r0, #15
{
   115d2:	b510      	push	{r4, lr}
   115d4:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1)) {
   115d6:	d90e      	bls.n	115f6 <region_allocate_and_init+0x26>
   115d8:	4808      	ldr	r0, [pc, #32]	; (115fc <region_allocate_and_init+0x2c>)
   115da:	4b09      	ldr	r3, [pc, #36]	; (11600 <region_allocate_and_init+0x30>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   115dc:	4622      	mov	r2, r4
   115de:	1a1b      	subs	r3, r3, r0
   115e0:	08db      	lsrs	r3, r3, #3
   115e2:	019b      	lsls	r3, r3, #6
   115e4:	4907      	ldr	r1, [pc, #28]	; (11604 <region_allocate_and_init+0x34>)
   115e6:	f043 0001 	orr.w	r0, r3, #1
   115ea:	f012 ff89 	bl	24500 <log_string_sync>
		return -EINVAL;
   115ee:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   115f2:	4620      	mov	r0, r4
   115f4:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   115f6:	f7ff ffd3 	bl	115a0 <region_init>
	return index;
   115fa:	e7fa      	b.n	115f2 <region_allocate_and_init+0x22>
   115fc:	0002a2c4 	.word	0x0002a2c4
   11600:	0002a32c 	.word	0x0002a32c
   11604:	0002bd19 	.word	0x0002bd19

00011608 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   11608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1160c:	4680      	mov	r8, r0
   1160e:	4689      	mov	r9, r1
   11610:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11612:	2700      	movs	r7, #0
	MPU->RNR = index;
   11614:	4d50      	ldr	r5, [pc, #320]	; (11758 <mpu_configure_regions_and_partition.constprop.0+0x150>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   11616:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   11618:	454f      	cmp	r7, r9
   1161a:	da33      	bge.n	11684 <mpu_configure_regions_and_partition.constprop.0+0x7c>
		if (regions[i]->size == 0U) {
   1161c:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   11620:	f8d3 a004 	ldr.w	sl, [r3, #4]
   11624:	f1ba 0f00 	cmp.w	sl, #0
   11628:	d04c      	beq.n	116c4 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
   1162a:	f1ba 0f1f 	cmp.w	sl, #31
   1162e:	d91c      	bls.n	1166a <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
   11630:	f01a 0f1f 	tst.w	sl, #31
   11634:	d119      	bne.n	1166a <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
   11636:	f8d3 b000 	ldr.w	fp, [r3]
		&&
   1163a:	f01b 0f1f 	tst.w	fp, #31
   1163e:	d114      	bne.n	1166a <mpu_configure_regions_and_partition.constprop.0+0x62>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11640:	4658      	mov	r0, fp
   11642:	f013 fb3e 	bl	24cc2 <arm_cmse_mpu_region_get>
   11646:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11648:	eb0a 000b 	add.w	r0, sl, fp
   1164c:	3801      	subs	r0, #1
   1164e:	f013 fb38 	bl	24cc2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11652:	4286      	cmp	r6, r0
   11654:	d01a      	beq.n	1168c <mpu_configure_regions_and_partition.constprop.0+0x84>
	return -EINVAL;
   11656:	f06f 0615 	mvn.w	r6, #21
   1165a:	4840      	ldr	r0, [pc, #256]	; (1175c <mpu_configure_regions_and_partition.constprop.0+0x154>)
   1165c:	4b40      	ldr	r3, [pc, #256]	; (11760 <mpu_configure_regions_and_partition.constprop.0+0x158>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   1165e:	4632      	mov	r2, r6
   11660:	1ac0      	subs	r0, r0, r3
   11662:	08c0      	lsrs	r0, r0, #3
   11664:	493f      	ldr	r1, [pc, #252]	; (11764 <mpu_configure_regions_and_partition.constprop.0+0x15c>)
   11666:	0180      	lsls	r0, r0, #6
   11668:	e006      	b.n	11678 <mpu_configure_regions_and_partition.constprop.0+0x70>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1166a:	463a      	mov	r2, r7
   1166c:	483b      	ldr	r0, [pc, #236]	; (1175c <mpu_configure_regions_and_partition.constprop.0+0x154>)
   1166e:	4b3c      	ldr	r3, [pc, #240]	; (11760 <mpu_configure_regions_and_partition.constprop.0+0x158>)
   11670:	493d      	ldr	r1, [pc, #244]	; (11768 <mpu_configure_regions_and_partition.constprop.0+0x160>)
   11672:	1ac0      	subs	r0, r0, r3
   11674:	08c0      	lsrs	r0, r0, #3
   11676:	0180      	lsls	r0, r0, #6
			LOG_ERR("Invalid underlying region index %u",
   11678:	f040 0001 	orr.w	r0, r0, #1
   1167c:	f012 ff40 	bl	24500 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   11680:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   11684:	4620      	mov	r0, r4
   11686:	b005      	add	sp, #20
   11688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   1168c:	f116 0f16 	cmn.w	r6, #22
   11690:	d0e3      	beq.n	1165a <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   11692:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   11694:	42b3      	cmp	r3, r6
   11696:	dbe0      	blt.n	1165a <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   11698:	60ae      	str	r6, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1169a:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   1169c:	60ae      	str	r6, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1169e:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   116a0:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   116a4:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   116a8:	f043 0b1f 	orr.w	fp, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   116ac:	e9d1 3200 	ldrd	r3, r2, [r1]
   116b0:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   116b2:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   116b4:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   116b8:	d116      	bne.n	116e8 <mpu_configure_regions_and_partition.constprop.0+0xe0>
   116ba:	45d3      	cmp	fp, sl
   116bc:	d104      	bne.n	116c8 <mpu_configure_regions_and_partition.constprop.0+0xc0>
			mpu_configure_region(u_reg_index, regions[i]);
   116be:	b2f0      	uxtb	r0, r6
   116c0:	f013 fae6 	bl	24c90 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   116c4:	3701      	adds	r7, #1
   116c6:	e7a7      	b.n	11618 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   116c8:	60ae      	str	r6, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   116ca:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   116cc:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   116d0:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   116d4:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   116d6:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   116d8:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   116da:	f013 fad9 	bl	24c90 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   116de:	f110 0f16 	cmn.w	r0, #22
   116e2:	d0cd      	beq.n	11680 <mpu_configure_regions_and_partition.constprop.0+0x78>
			reg_index++;
   116e4:	1c44      	adds	r4, r0, #1
   116e6:	e7ed      	b.n	116c4 <mpu_configure_regions_and_partition.constprop.0+0xbc>
	MPU->RNR = index;
   116e8:	60ae      	str	r6, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   116ea:	692a      	ldr	r2, [r5, #16]
   116ec:	3b01      	subs	r3, #1
   116ee:	f023 031f 	bic.w	r3, r3, #31
   116f2:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   116f6:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   116f8:	45d3      	cmp	fp, sl
   116fa:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   116fc:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   116fe:	d0ec      	beq.n	116da <mpu_configure_regions_and_partition.constprop.0+0xd2>
				mpu_configure_region(reg_index, regions[i]);
   11700:	f013 fac6 	bl	24c90 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11704:	f110 0f16 	cmn.w	r0, #22
   11708:	d0ba      	beq.n	11680 <mpu_configure_regions_and_partition.constprop.0+0x78>
	MPU->RNR = index;
   1170a:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   1170c:	68ea      	ldr	r2, [r5, #12]
   1170e:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   11712:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   11716:	f362 0304 	bfi	r3, r2, #0, #5
   1171a:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1171e:	692b      	ldr	r3, [r5, #16]
   11720:	f89d 2008 	ldrb.w	r2, [sp, #8]
   11724:	085b      	lsrs	r3, r3, #1
   11726:	f363 1247 	bfi	r2, r3, #5, #3
   1172a:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   1172e:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
   11732:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
   11734:	e9d2 3200 	ldrd	r3, r2, [r2]
   11738:	4413      	add	r3, r2
   1173a:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   1173c:	f023 031f 	bic.w	r3, r3, #31
   11740:	445b      	add	r3, fp
   11742:	eba3 030a 	sub.w	r3, r3, sl
   11746:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   1174a:	4669      	mov	r1, sp
   1174c:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   1174e:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   11750:	f7ff ff3e 	bl	115d0 <region_allocate_and_init>
   11754:	e7c3      	b.n	116de <mpu_configure_regions_and_partition.constprop.0+0xd6>
   11756:	bf00      	nop
   11758:	e000ed90 	.word	0xe000ed90
   1175c:	0002a32c 	.word	0x0002a32c
   11760:	0002a2c4 	.word	0x0002a2c4
   11764:	0002bd62 	.word	0x0002bd62
   11768:	0002bd3f 	.word	0x0002bd3f

0001176c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1176c:	2205      	movs	r2, #5
   1176e:	4b03      	ldr	r3, [pc, #12]	; (1177c <arm_core_mpu_enable+0x10>)
   11770:	605a      	str	r2, [r3, #4]
   11772:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11776:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1177a:	4770      	bx	lr
   1177c:	e000ed90 	.word	0xe000ed90

00011780 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   11780:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11784:	2200      	movs	r2, #0
   11786:	4b01      	ldr	r3, [pc, #4]	; (1178c <arm_core_mpu_disable+0xc>)
   11788:	605a      	str	r2, [r3, #4]
}
   1178a:	4770      	bx	lr
   1178c:	e000ed90 	.word	0xe000ed90

00011790 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   11790:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11792:	4c0e      	ldr	r4, [pc, #56]	; (117cc <arm_mpu_init+0x3c>)
   11794:	6825      	ldr	r5, [r4, #0]
   11796:	2d10      	cmp	r5, #16
   11798:	d814      	bhi.n	117c4 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1179a:	f7ff fff1 	bl	11780 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1179e:	2000      	movs	r0, #0
	MPU->MAIR0 =
   117a0:	4b0b      	ldr	r3, [pc, #44]	; (117d0 <arm_mpu_init+0x40>)
   117a2:	4a0c      	ldr	r2, [pc, #48]	; (117d4 <arm_mpu_init+0x44>)
   117a4:	631a      	str	r2, [r3, #48]	; 0x30
   117a6:	4285      	cmp	r5, r0
   117a8:	d105      	bne.n	117b6 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   117aa:	4b0b      	ldr	r3, [pc, #44]	; (117d8 <arm_mpu_init+0x48>)
   117ac:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   117ae:	f7ff ffdd 	bl	1176c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   117b2:	2000      	movs	r0, #0
}
   117b4:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   117b6:	6861      	ldr	r1, [r4, #4]
   117b8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   117bc:	f7ff fef0 	bl	115a0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   117c0:	3001      	adds	r0, #1
   117c2:	e7f0      	b.n	117a6 <arm_mpu_init+0x16>
		return -1;
   117c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   117c8:	e7f4      	b.n	117b4 <arm_mpu_init+0x24>
   117ca:	bf00      	nop
   117cc:	0002a5e0 	.word	0x0002a5e0
   117d0:	e000ed90 	.word	0xe000ed90
   117d4:	0044ffaa 	.word	0x0044ffaa
   117d8:	20029e44 	.word	0x20029e44

000117dc <arm_core_mpu_configure_static_mpu_regions>:
{
   117dc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   117de:	4c03      	ldr	r4, [pc, #12]	; (117ec <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   117e0:	7822      	ldrb	r2, [r4, #0]
   117e2:	f7ff ff11 	bl	11608 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   117e6:	7020      	strb	r0, [r4, #0]
}
   117e8:	bd10      	pop	{r4, pc}
   117ea:	bf00      	nop
   117ec:	20029e44 	.word	0x20029e44

000117f0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   117f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117f4:	4d26      	ldr	r5, [pc, #152]	; (11890 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   117f6:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   117f8:	4606      	mov	r6, r0
   117fa:	f04f 0800 	mov.w	r8, #0
   117fe:	46ab      	mov	fp, r5
	MPU->RNR = index;
   11800:	4f24      	ldr	r7, [pc, #144]	; (11894 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11802:	45d0      	cmp	r8, sl
   11804:	da1b      	bge.n	1183e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   11806:	f8d6 9004 	ldr.w	r9, [r6, #4]
   1180a:	f1b9 0f00 	cmp.w	r9, #0
   1180e:	d039      	beq.n	11884 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   11810:	6831      	ldr	r1, [r6, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11812:	4608      	mov	r0, r1
   11814:	9101      	str	r1, [sp, #4]
   11816:	f013 fa54 	bl	24cc2 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1181a:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1181c:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1181e:	eb09 0001 	add.w	r0, r9, r1
   11822:	3801      	subs	r0, #1
   11824:	f013 fa4d 	bl	24cc2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11828:	4284      	cmp	r4, r0
   1182a:	f04f 0214 	mov.w	r2, #20
   1182e:	4b1a      	ldr	r3, [pc, #104]	; (11898 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   11830:	d008      	beq.n	11844 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   11832:	f06f 0315 	mvn.w	r3, #21
   11836:	fb02 f808 	mul.w	r8, r2, r8
   1183a:	f84b 3008 	str.w	r3, [fp, r8]
}
   1183e:	b003      	add	sp, #12
   11840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   11844:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   11848:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1184a:	d0f8      	beq.n	1183e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1184c:	7819      	ldrb	r1, [r3, #0]
   1184e:	42a1      	cmp	r1, r4
   11850:	ddf5      	ble.n	1183e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   11852:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   11856:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   11858:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   1185a:	68fc      	ldr	r4, [r7, #12]
   1185c:	f100 0108 	add.w	r1, r0, #8
   11860:	7b00      	ldrb	r0, [r0, #12]
   11862:	f364 0004 	bfi	r0, r4, #0, #5
   11866:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   11868:	6938      	ldr	r0, [r7, #16]
   1186a:	790c      	ldrb	r4, [r1, #4]
   1186c:	0840      	lsrs	r0, r0, #1
   1186e:	f360 1447 	bfi	r4, r0, #5, #3
   11872:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   11874:	68f9      	ldr	r1, [r7, #12]
   11876:	f021 011f 	bic.w	r1, r1, #31
   1187a:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1187c:	6939      	ldr	r1, [r7, #16]
   1187e:	f021 011f 	bic.w	r1, r1, #31
   11882:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11884:	f108 0801 	add.w	r8, r8, #1
   11888:	3514      	adds	r5, #20
   1188a:	360c      	adds	r6, #12
   1188c:	e7b9      	b.n	11802 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1188e:	bf00      	nop
   11890:	200225d4 	.word	0x200225d4
   11894:	e000ed90 	.word	0xe000ed90
   11898:	20029e44 	.word	0x20029e44

0001189c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1189c:	4b01      	ldr	r3, [pc, #4]	; (118a4 <__stdout_hook_install+0x8>)
   1189e:	6018      	str	r0, [r3, #0]
}
   118a0:	4770      	bx	lr
   118a2:	bf00      	nop
   118a4:	200200b8 	.word	0x200200b8

000118a8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   118a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   118aa:	4606      	mov	r6, r0
   118ac:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   118ae:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   118b0:	4f06      	ldr	r7, [pc, #24]	; (118cc <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   118b2:	42ac      	cmp	r4, r5
   118b4:	da08      	bge.n	118c8 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   118b6:	683b      	ldr	r3, [r7, #0]
   118b8:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   118ba:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   118bc:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   118be:	f104 0401 	add.w	r4, r4, #1
   118c2:	d001      	beq.n	118c8 <z_impl_zephyr_read_stdin+0x20>
   118c4:	280d      	cmp	r0, #13
   118c6:	d1f4      	bne.n	118b2 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   118c8:	4620      	mov	r0, r4
   118ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   118cc:	200200b4 	.word	0x200200b4

000118d0 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   118d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   118d2:	460d      	mov	r5, r1
   118d4:	4f09      	ldr	r7, [pc, #36]	; (118fc <z_impl_zephyr_write_stdout+0x2c>)
   118d6:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   118d8:	f1c0 0401 	rsb	r4, r0, #1
   118dc:	19a3      	adds	r3, r4, r6
   118de:	429d      	cmp	r5, r3
   118e0:	dc01      	bgt.n	118e6 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   118e2:	4628      	mov	r0, r5
   118e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   118e6:	7873      	ldrb	r3, [r6, #1]
   118e8:	2b0a      	cmp	r3, #10
   118ea:	d102      	bne.n	118f2 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   118ec:	200d      	movs	r0, #13
   118ee:	683b      	ldr	r3, [r7, #0]
   118f0:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   118f2:	683b      	ldr	r3, [r7, #0]
   118f4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   118f8:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   118fa:	e7ef      	b.n	118dc <z_impl_zephyr_write_stdout+0xc>
   118fc:	200200b8 	.word	0x200200b8

00011900 <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   11900:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   11902:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   11904:	4801      	ldr	r0, [pc, #4]	; (1190c <_exit+0xc>)
   11906:	f7ff ffe3 	bl	118d0 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   1190a:	e7fe      	b.n	1190a <_exit+0xa>
   1190c:	0002bd85 	.word	0x0002bd85

00011910 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   11910:	b510      	push	{r4, lr}
   11912:	4604      	mov	r4, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   11914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1191c:	480a      	ldr	r0, [pc, #40]	; (11948 <_sbrk+0x38>)
   1191e:	f012 fb57 	bl	23fd0 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11922:	490a      	ldr	r1, [pc, #40]	; (1194c <_sbrk+0x3c>)
   11924:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   11926:	18e0      	adds	r0, r4, r3
   11928:	4c09      	ldr	r4, [pc, #36]	; (11950 <_sbrk+0x40>)
   1192a:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   1192e:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   11932:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   11934:	bf2e      	itee	cs
   11936:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1193a:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   1193c:	6008      	strcc	r0, [r1, #0]
	}

	sys_sem_give(&heap_sem);
   1193e:	4802      	ldr	r0, [pc, #8]	; (11948 <_sbrk+0x38>)
   11940:	f012 fb41 	bl	23fc6 <sys_sem_give>

	return ret;
}
   11944:	4620      	mov	r0, r4
   11946:	bd10      	pop	{r4, pc}
   11948:	200208fc 	.word	0x200208fc
   1194c:	200225e8 	.word	0x200225e8
   11950:	20032638 	.word	0x20032638

00011954 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   11954:	2128      	movs	r1, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   11956:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
   11958:	4a04      	ldr	r2, [pc, #16]	; (1196c <net_buf_id+0x18>)
   1195a:	fb01 2303 	mla	r3, r1, r3, r2
   1195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11960:	1ac0      	subs	r0, r0, r3
}
   11962:	4b03      	ldr	r3, [pc, #12]	; (11970 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   11964:	10c0      	asrs	r0, r0, #3
}
   11966:	4358      	muls	r0, r3
   11968:	4770      	bx	lr
   1196a:	bf00      	nop
   1196c:	2002098c 	.word	0x2002098c
   11970:	aaaaaaab 	.word	0xaaaaaaab

00011974 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   11974:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   11976:	2428      	movs	r4, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   11978:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1197a:	4a09      	ldr	r2, [pc, #36]	; (119a0 <fixed_data_alloc+0x2c>)
   1197c:	fb04 2303 	mla	r3, r4, r3, r2
   11980:	6a1b      	ldr	r3, [r3, #32]

	*size = MIN(fixed->data_size, *size);
   11982:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   11984:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   11986:	6823      	ldr	r3, [r4, #0]
   11988:	429a      	cmp	r2, r3
   1198a:	bf94      	ite	ls
   1198c:	600a      	strls	r2, [r1, #0]
   1198e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   11990:	f7ff ffe0 	bl	11954 <net_buf_id>
   11994:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   11998:	fb02 3000 	mla	r0, r2, r0, r3
   1199c:	bd10      	pop	{r4, pc}
   1199e:	bf00      	nop
   119a0:	2002098c 	.word	0x2002098c

000119a4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   119a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   119a8:	4605      	mov	r5, r0
   119aa:	9101      	str	r1, [sp, #4]
	u64_t end = z_timeout_end_calc(timeout);
   119ac:	4610      	mov	r0, r2
   119ae:	4619      	mov	r1, r3
{
   119b0:	4616      	mov	r6, r2
   119b2:	461f      	mov	r7, r3
	u64_t end = z_timeout_end_calc(timeout);
   119b4:	f017 fc0a 	bl	291cc <z_timeout_end_calc>
   119b8:	4680      	mov	r8, r0
   119ba:	4689      	mov	r9, r1
   119bc:	f04f 0320 	mov.w	r3, #32
   119c0:	f3ef 8a11 	mrs	sl, BASEPRI
   119c4:	f383 8811 	msr	BASEPRI, r3
   119c8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   119cc:	8b6b      	ldrh	r3, [r5, #26]
   119ce:	2b00      	cmp	r3, #0
   119d0:	d054      	beq.n	11a7c <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   119d2:	8b2a      	ldrh	r2, [r5, #24]
   119d4:	429a      	cmp	r2, r3
   119d6:	d93d      	bls.n	11a54 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   119d8:	2200      	movs	r2, #0
   119da:	2300      	movs	r3, #0
   119dc:	4628      	mov	r0, r5
   119de:	f00e fb27 	bl	20030 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   119e2:	4604      	mov	r4, r0
   119e4:	2800      	cmp	r0, #0
   119e6:	d035      	beq.n	11a54 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   119e8:	f38a 8811 	msr	BASEPRI, sl
   119ec:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   119f0:	9b01      	ldr	r3, [sp, #4]
   119f2:	2b00      	cmp	r3, #0
   119f4:	d052      	beq.n	11a9c <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   119f6:	ea56 0307 	orrs.w	r3, r6, r7
   119fa:	d010      	beq.n	11a1e <net_buf_alloc_len+0x7a>
   119fc:	1c7b      	adds	r3, r7, #1
   119fe:	bf08      	it	eq
   11a00:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   11a04:	d00b      	beq.n	11a1e <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			s64_t remaining = end - z_tick_get();
   11a06:	f00f f93b 	bl	20c80 <z_tick_get>
   11a0a:	ebb8 0600 	subs.w	r6, r8, r0
   11a0e:	eb69 0701 	sbc.w	r7, r9, r1
   11a12:	2e00      	cmp	r6, #0
   11a14:	f177 0300 	sbcs.w	r3, r7, #0
   11a18:	bfbc      	itt	lt
   11a1a:	2600      	movlt	r6, #0
   11a1c:	2700      	movlt	r7, #0
	return pool->alloc->cb->alloc(buf, size, timeout);
   11a1e:	2228      	movs	r2, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   11a20:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   11a22:	f8df 8090 	ldr.w	r8, [pc, #144]	; 11ab4 <net_buf_alloc_len+0x110>
   11a26:	4620      	mov	r0, r4
   11a28:	fb02 8303 	mla	r3, r2, r3, r8
   11a2c:	6a1b      	ldr	r3, [r3, #32]
   11a2e:	4632      	mov	r2, r6
   11a30:	681b      	ldr	r3, [r3, #0]
   11a32:	a901      	add	r1, sp, #4
   11a34:	681d      	ldr	r5, [r3, #0]
   11a36:	463b      	mov	r3, r7
   11a38:	47a8      	blx	r5
   11a3a:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   11a3c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   11a3e:	bb70      	cbnz	r0, 11a9e <net_buf_alloc_len+0xfa>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   11a40:	79a0      	ldrb	r0, [r4, #6]
   11a42:	4621      	mov	r1, r4
   11a44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   11a48:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   11a4c:	f017 f9cf 	bl	28dee <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   11a50:	462c      	mov	r4, r5
}
   11a52:	e01f      	b.n	11a94 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   11a54:	8b68      	ldrh	r0, [r5, #26]
   11a56:	1e43      	subs	r3, r0, #1
   11a58:	836b      	strh	r3, [r5, #26]
   11a5a:	f38a 8811 	msr	BASEPRI, sl
   11a5e:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   11a62:	2318      	movs	r3, #24
   11a64:	8b2c      	ldrh	r4, [r5, #24]
   11a66:	1a24      	subs	r4, r4, r0
   11a68:	6a68      	ldr	r0, [r5, #36]	; 0x24
   11a6a:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   11a6e:	4811      	ldr	r0, [pc, #68]	; (11ab4 <net_buf_alloc_len+0x110>)
   11a70:	4b11      	ldr	r3, [pc, #68]	; (11ab8 <net_buf_alloc_len+0x114>)
   11a72:	1a2d      	subs	r5, r5, r0
   11a74:	10ed      	asrs	r5, r5, #3
   11a76:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   11a78:	71a5      	strb	r5, [r4, #6]
		goto success;
   11a7a:	e7b9      	b.n	119f0 <net_buf_alloc_len+0x4c>
   11a7c:	f38a 8811 	msr	BASEPRI, sl
   11a80:	f3bf 8f6f 	isb	sy
   11a84:	4632      	mov	r2, r6
   11a86:	463b      	mov	r3, r7
   11a88:	4628      	mov	r0, r5
   11a8a:	f00e fad1 	bl	20030 <z_impl_k_queue_get>
	if (!buf) {
   11a8e:	4604      	mov	r4, r0
   11a90:	2800      	cmp	r0, #0
   11a92:	d1ad      	bne.n	119f0 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   11a94:	4620      	mov	r0, r4
   11a96:	b002      	add	sp, #8
   11a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   11a9c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   11a9e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   11aa0:	2201      	movs	r2, #1
	buf->frags = NULL;
   11aa2:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   11aa4:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   11aa6:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   11aa8:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   11aaa:	6923      	ldr	r3, [r4, #16]
   11aac:	81e2      	strh	r2, [r4, #14]
   11aae:	60a3      	str	r3, [r4, #8]
	return buf;
   11ab0:	e7f0      	b.n	11a94 <net_buf_alloc_len+0xf0>
   11ab2:	bf00      	nop
   11ab4:	2002098c 	.word	0x2002098c
   11ab8:	cccccccd 	.word	0xcccccccd

00011abc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   11abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ac0:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   11ac2:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   11ac4:	2728      	movs	r7, #40	; 0x28
   11ac6:	4d16      	ldr	r5, [pc, #88]	; (11b20 <net_buf_unref+0x64>)
	while (buf) {
   11ac8:	b90c      	cbnz	r4, 11ace <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   11aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   11ace:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   11ad0:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   11ad4:	3b01      	subs	r3, #1
   11ad6:	b2db      	uxtb	r3, r3
   11ad8:	7123      	strb	r3, [r4, #4]
   11ada:	2b00      	cmp	r3, #0
   11adc:	d1f5      	bne.n	11aca <net_buf_unref+0xe>
		if (buf->__buf) {
   11ade:	6921      	ldr	r1, [r4, #16]
   11ae0:	b159      	cbz	r1, 11afa <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   11ae2:	7963      	ldrb	r3, [r4, #5]
   11ae4:	079b      	lsls	r3, r3, #30
   11ae6:	d407      	bmi.n	11af8 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   11ae8:	79a3      	ldrb	r3, [r4, #6]
   11aea:	4620      	mov	r0, r4
   11aec:	fb07 5303 	mla	r3, r7, r3, r5
   11af0:	6a1b      	ldr	r3, [r3, #32]
   11af2:	681b      	ldr	r3, [r3, #0]
   11af4:	689b      	ldr	r3, [r3, #8]
   11af6:	4798      	blx	r3
			buf->__buf = NULL;
   11af8:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   11afa:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   11afc:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   11afe:	fb07 5300 	mla	r3, r7, r0, r5
   11b02:	69db      	ldr	r3, [r3, #28]
		buf->frags = NULL;
   11b04:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   11b06:	b11b      	cbz	r3, 11b10 <net_buf_unref+0x54>
			pool->destroy(buf);
   11b08:	4620      	mov	r0, r4
   11b0a:	4798      	blx	r3
{
   11b0c:	4644      	mov	r4, r8
   11b0e:	e7db      	b.n	11ac8 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   11b10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   11b14:	4621      	mov	r1, r4
   11b16:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   11b1a:	f017 f968 	bl	28dee <k_queue_prepend>
}
   11b1e:	e7f5      	b.n	11b0c <net_buf_unref+0x50>
   11b20:	2002098c 	.word	0x2002098c

00011b24 <k_delayed_work_submit>:
{
   11b24:	4601      	mov	r1, r0
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11b26:	4801      	ldr	r0, [pc, #4]	; (11b2c <k_delayed_work_submit+0x8>)
   11b28:	f00e bf3c 	b.w	209a4 <k_delayed_work_submit_to_queue>
   11b2c:	200280fc 	.word	0x200280fc

00011b30 <address_lifetime_timeout>:
{
   11b30:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t current_time = k_uptime_get_32();
   11b34:	f013 fa5e 	bl	24ff4 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   11b38:	4b3e      	ldr	r3, [pc, #248]	; (11c34 <address_lifetime_timeout+0x104>)
	u32_t current_time = k_uptime_get_32();
   11b3a:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   11b3c:	681c      	ldr	r4, [r3, #0]
   11b3e:	b3b4      	cbz	r4, 11bae <address_lifetime_timeout+0x7e>
   11b40:	f1b4 0514 	subs.w	r5, r4, #20
   11b44:	d035      	beq.n	11bb2 <address_lifetime_timeout+0x82>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11b46:	6824      	ldr	r4, [r4, #0]
   11b48:	b104      	cbz	r4, 11b4c <address_lifetime_timeout+0x1c>
   11b4a:	3c14      	subs	r4, #20
   11b4c:	f04f 0900 	mov.w	r9, #0
   11b50:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   11b54:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
		*next_wakeup = NET_TIMEOUT_MAX_VALUE;
   11b58:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 11c38 <address_lifetime_timeout+0x108>
	sys_slist_find_and_remove(&active_address_lifetime_timers,
   11b5c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 11c34 <address_lifetime_timeout+0x104>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   11b60:	bb4d      	cbnz	r5, 11bb6 <address_lifetime_timeout+0x86>
	if (found) {
   11b62:	f1b9 0f00 	cmp.w	r9, #0
   11b66:	d061      	beq.n	11c2c <address_lifetime_timeout+0xfc>
			return (u32_t)((t * to_hz + off) / from_hz);
   11b68:	2300      	movs	r3, #0
   11b6a:	4a33      	ldr	r2, [pc, #204]	; (11c38 <address_lifetime_timeout+0x108>)
   11b6c:	42bb      	cmp	r3, r7
   11b6e:	bf08      	it	eq
   11b70:	42b2      	cmpeq	r2, r6
   11b72:	bf38      	it	cc
   11b74:	4616      	movcc	r6, r2
   11b76:	f240 34e7 	movw	r4, #999	; 0x3e7
   11b7a:	bf38      	it	cc
   11b7c:	461f      	movcc	r7, r3
   11b7e:	03f0      	lsls	r0, r6, #15
   11b80:	1900      	adds	r0, r0, r4
   11b82:	f04f 0400 	mov.w	r4, #0
   11b86:	ea4f 31c7 	mov.w	r1, r7, lsl #15
   11b8a:	ea41 4156 	orr.w	r1, r1, r6, lsr #17
   11b8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11b92:	f04f 0300 	mov.w	r3, #0
   11b96:	eb44 0101 	adc.w	r1, r4, r1
   11b9a:	f7fa fe0d 	bl	c7b8 <__aeabi_uldivmod>
		k_delayed_work_submit(&address_lifetime_timer,
   11b9e:	4623      	mov	r3, r4
   11ba0:	4602      	mov	r2, r0
   11ba2:	4826      	ldr	r0, [pc, #152]	; (11c3c <address_lifetime_timeout+0x10c>)
}
   11ba4:	b001      	add	sp, #4
   11ba6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		k_delayed_work_submit(&address_lifetime_timer,
   11baa:	f7ff bfbb 	b.w	11b24 <k_delayed_work_submit>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   11bae:	4625      	mov	r5, r4
   11bb0:	e7cc      	b.n	11b4c <address_lifetime_timeout+0x1c>
   11bb2:	462c      	mov	r4, r5
   11bb4:	e7ca      	b.n	11b4c <address_lifetime_timeout+0x1c>
	if (counter > 0) {
   11bb6:	6a29      	ldr	r1, [r5, #32]
   11bb8:	b9d9      	cbnz	r1, 11bf2 <address_lifetime_timeout+0xc2>
	if ((s32_t)((start + (u32_t)timeout) - current_time) > 0) {
   11bba:	69ab      	ldr	r3, [r5, #24]
   11bbc:	69ea      	ldr	r2, [r5, #28]
   11bbe:	eba3 0308 	sub.w	r3, r3, r8
   11bc2:	4413      	add	r3, r2
   11bc4:	2b00      	cmp	r3, #0
   11bc6:	dc2e      	bgt.n	11c26 <address_lifetime_timeout+0xf6>
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   11bc8:	2302      	movs	r3, #2
	ifaddr->lifetime.timer_timeout = 0;
   11bca:	61e9      	str	r1, [r5, #28]
	sys_slist_find_and_remove(&active_address_lifetime_timers,
   11bcc:	4650      	mov	r0, sl
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   11bce:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	sys_slist_find_and_remove(&active_address_lifetime_timers,
   11bd2:	f105 0114 	add.w	r1, r5, #20
   11bd6:	f013 f9a7 	bl	24f28 <sys_slist_find_and_remove>
		if (current == next) {
   11bda:	42a5      	cmp	r5, r4
   11bdc:	d0c1      	beq.n	11b62 <address_lifetime_timeout+0x32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   11bde:	b304      	cbz	r4, 11c22 <address_lifetime_timeout+0xf2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   11be0:	f114 0314 	adds.w	r3, r4, #20
   11be4:	d002      	beq.n	11bec <address_lifetime_timeout+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11be6:	6963      	ldr	r3, [r4, #20]
   11be8:	b103      	cbz	r3, 11bec <address_lifetime_timeout+0xbc>
   11bea:	3b14      	subs	r3, #20
   11bec:	4625      	mov	r5, r4
   11bee:	461c      	mov	r4, r3
   11bf0:	e7b6      	b.n	11b60 <address_lifetime_timeout+0x30>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   11bf2:	45d8      	cmp	r8, fp
   11bf4:	d105      	bne.n	11c02 <address_lifetime_timeout+0xd2>
		ifaddr->lifetime.timer_start = k_uptime_get_32();
   11bf6:	f013 f9fd 	bl	24ff4 <k_uptime_get_32>
		ifaddr->lifetime.wrap_counter--;
   11bfa:	6a2b      	ldr	r3, [r5, #32]
		ifaddr->lifetime.timer_start = k_uptime_get_32();
   11bfc:	61a8      	str	r0, [r5, #24]
		ifaddr->lifetime.wrap_counter--;
   11bfe:	3b01      	subs	r3, #1
   11c00:	622b      	str	r3, [r5, #32]
	if (ifaddr->lifetime.wrap_counter > 0) {
   11c02:	6a2b      	ldr	r3, [r5, #32]
   11c04:	2b00      	cmp	r3, #0
   11c06:	dc0a      	bgt.n	11c1e <address_lifetime_timeout+0xee>
		*next_wakeup = ifaddr->lifetime.timer_timeout;
   11c08:	69ea      	ldr	r2, [r5, #28]
			if (next_timeout < timeout_update) {
   11c0a:	2300      	movs	r3, #0
   11c0c:	42bb      	cmp	r3, r7
   11c0e:	bf08      	it	eq
   11c10:	42b2      	cmpeq	r2, r6
   11c12:	bf3e      	ittt	cc
   11c14:	4616      	movcc	r6, r2
   11c16:	461f      	movcc	r7, r3
				found = true;
   11c18:	f04f 0901 	movcc.w	r9, #1
   11c1c:	e7dd      	b.n	11bda <address_lifetime_timeout+0xaa>
		*next_wakeup = NET_TIMEOUT_MAX_VALUE;
   11c1e:	465a      	mov	r2, fp
   11c20:	e7f3      	b.n	11c0a <address_lifetime_timeout+0xda>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
   11c22:	4623      	mov	r3, r4
   11c24:	e7e2      	b.n	11bec <address_lifetime_timeout+0xbc>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   11c26:	45d8      	cmp	r8, fp
   11c28:	d1ee      	bne.n	11c08 <address_lifetime_timeout+0xd8>
   11c2a:	e7e4      	b.n	11bf6 <address_lifetime_timeout+0xc6>
}
   11c2c:	b001      	add	sp, #4
   11c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c32:	bf00      	nop
   11c34:	200225ec 	.word	0x200225ec
   11c38:	7fffff9b 	.word	0x7fffff9b
   11c3c:	20022614 	.word	0x20022614

00011c40 <iface_router_run_timer>:
{
   11c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c44:	4605      	mov	r5, r0
	if (k_delayed_work_remaining_get(&router_timer)) {
   11c46:	481c      	ldr	r0, [pc, #112]	; (11cb8 <iface_router_run_timer+0x78>)
   11c48:	f013 f9e4 	bl	25014 <k_delayed_work_remaining_get>
   11c4c:	b110      	cbz	r0, 11c54 <iface_router_run_timer+0x14>
		k_delayed_work_cancel(&router_timer);
   11c4e:	481a      	ldr	r0, [pc, #104]	; (11cb8 <iface_router_run_timer+0x78>)
   11c50:	f017 fa50 	bl	290f4 <k_delayed_work_cancel>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   11c54:	4b19      	ldr	r3, [pc, #100]	; (11cbc <iface_router_run_timer+0x7c>)
   11c56:	681c      	ldr	r4, [r3, #0]
   11c58:	b35c      	cbz	r4, 11cb2 <iface_router_run_timer+0x72>
   11c5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			(MSEC_PER_SEC * router->lifetime) - current_time;
   11c5e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   11c62:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   11c64:	b9b4      	cbnz	r4, 11c94 <iface_router_run_timer+0x54>
	if (new_timer != UINT_MAX) {
   11c66:	1c4b      	adds	r3, r1, #1
   11c68:	d023      	beq.n	11cb2 <iface_router_run_timer+0x72>
   11c6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11c6e:	f240 36e7 	movw	r6, #999	; 0x3e7
   11c72:	2700      	movs	r7, #0
   11c74:	fbe0 6701 	umlal	r6, r7, r0, r1
   11c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11c7c:	2300      	movs	r3, #0
   11c7e:	4630      	mov	r0, r6
   11c80:	4639      	mov	r1, r7
   11c82:	f7fa fd99 	bl	c7b8 <__aeabi_uldivmod>
		k_delayed_work_submit(&router_timer, K_MSEC(new_timer));
   11c86:	4623      	mov	r3, r4
}
   11c88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11c8c:	4602      	mov	r2, r0
		k_delayed_work_submit(&router_timer, K_MSEC(new_timer));
   11c8e:	480a      	ldr	r0, [pc, #40]	; (11cb8 <iface_router_run_timer+0x78>)
   11c90:	f7ff bf48 	b.w	11b24 <k_delayed_work_submit>
		u32_t current_timer = router->life_start +
   11c94:	69e0      	ldr	r0, [r4, #28]
			(MSEC_PER_SEC * router->lifetime) - current_time;
   11c96:	8c22      	ldrh	r2, [r4, #32]
		u32_t current_timer = router->life_start +
   11c98:	1b40      	subs	r0, r0, r5
   11c9a:	fb06 0202 	mla	r2, r6, r2, r0
		new_timer = MIN(current_timer, new_timer);
   11c9e:	4291      	cmp	r1, r2
   11ca0:	bf28      	it	cs
   11ca2:	4611      	movcs	r1, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   11ca4:	b11b      	cbz	r3, 11cae <iface_router_run_timer+0x6e>
   11ca6:	681a      	ldr	r2, [r3, #0]
   11ca8:	461c      	mov	r4, r3
   11caa:	4613      	mov	r3, r2
   11cac:	e7da      	b.n	11c64 <iface_router_run_timer+0x24>
   11cae:	461a      	mov	r2, r3
   11cb0:	e7fa      	b.n	11ca8 <iface_router_run_timer+0x68>
}
   11cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11cb6:	bf00      	nop
   11cb8:	20022798 	.word	0x20022798
   11cbc:	20022604 	.word	0x20022604

00011cc0 <net_if_ipv6_get_best_match.isra.0>:
	}

	return false;
}

static struct in6_addr *net_if_ipv6_get_best_match(struct net_if *iface,
   11cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cc4:	4689      	mov	r9, r1
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
	struct in6_addr *src = NULL;
	u8_t len;
	int i;

	if (!ipv6) {
   11cc6:	2800      	cmp	r0, #0
   11cc8:	d048      	beq.n	11d5c <net_if_ipv6_get_best_match.isra.0+0x9c>
	struct in6_addr *src = NULL;
   11cca:	2500      	movs	r5, #0
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   11ccc:	f04f 0c30 	mov.w	ip, #48	; 0x30
		return NULL;
	}

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   11cd0:	462e      	mov	r6, r5
	    addr->address.family == AF_INET6 &&
   11cd2:	f248 0afe 	movw	sl, #33022	; 0x80fe
   11cd6:	1d04      	adds	r4, r0, #4
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   11cd8:	fb0c 0106 	mla	r1, ip, r6, r0
   11cdc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   11cde:	4f20      	ldr	r7, [pc, #128]	; (11d60 <net_if_ipv6_get_best_match.isra.0+0xa0>)
   11ce0:	f023 437d 	bic.w	r3, r3, #4244635648	; 0xfd000000
   11ce4:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
   11ce8:	42bb      	cmp	r3, r7
   11cea:	d123      	bne.n	11d34 <net_if_ipv6_get_best_match.isra.0+0x74>
   11cec:	f834 3c04 	ldrh.w	r3, [r4, #-4]
   11cf0:	2b02      	cmp	r3, #2
   11cf2:	d11f      	bne.n	11d34 <net_if_ipv6_get_best_match.isra.0+0x74>
	    addr->address.family == AF_INET6 &&
   11cf4:	888b      	ldrh	r3, [r1, #4]
   11cf6:	4553      	cmp	r3, sl
   11cf8:	d01c      	beq.n	11d34 <net_if_ipv6_get_best_match.isra.0+0x74>
	u8_t len = 0U;
   11cfa:	2300      	movs	r3, #0
   11cfc:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   11d00:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
		if (src[j] == dst[j]) {
   11d04:	f818 ef01 	ldrb.w	lr, [r8, #1]!
   11d08:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   11d0c:	f103 0708 	add.w	r7, r3, #8
   11d10:	458e      	cmp	lr, r1
   11d12:	d116      	bne.n	11d42 <net_if_ipv6_get_best_match.isra.0+0x82>
			len += 8U;
   11d14:	b2fb      	uxtb	r3, r7
	for (j = 0U; j < addr_len; j++) {
   11d16:	2b80      	cmp	r3, #128	; 0x80
   11d18:	d1f4      	bne.n	11d04 <net_if_ipv6_get_best_match.isra.0+0x44>
		if (!is_proper_ipv6_address(&ipv6->unicast[i])) {
			continue;
		}

		len = get_diff_ipv6(dst, &ipv6->unicast[i].address.in6_addr);
		if (len >= *best_so_far) {
   11d1a:	7811      	ldrb	r1, [r2, #0]
   11d1c:	4299      	cmp	r1, r3
   11d1e:	d809      	bhi.n	11d34 <net_if_ipv6_get_best_match.isra.0+0x74>
			/* Mesh local address can only be selected for the same
			 * subnet.
			 */
			if (ipv6->unicast[i].is_mesh_local && len < 64) {
   11d20:	fb0c 0106 	mla	r1, ip, r6, r0
   11d24:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
   11d28:	0749      	lsls	r1, r1, #29
   11d2a:	d501      	bpl.n	11d30 <net_if_ipv6_get_best_match.isra.0+0x70>
   11d2c:	2b3f      	cmp	r3, #63	; 0x3f
   11d2e:	d901      	bls.n	11d34 <net_if_ipv6_get_best_match.isra.0+0x74>
				continue;
			}

			*best_so_far = len;
   11d30:	4625      	mov	r5, r4
   11d32:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   11d34:	3430      	adds	r4, #48	; 0x30
   11d36:	b116      	cbz	r6, 11d3e <net_if_ipv6_get_best_match.isra.0+0x7e>
			src = &ipv6->unicast[i].address.in6_addr;
		}
	}

	return src;
}
   11d38:	4628      	mov	r0, r5
   11d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d3e:	2601      	movs	r6, #1
   11d40:	e7ca      	b.n	11cd8 <net_if_ipv6_get_best_match.isra.0+0x18>
			xor = src[j] ^ dst[j];
   11d42:	ea8e 0101 	eor.w	r1, lr, r1
			for (k = 0U; k < 8; k++) {
   11d46:	b2ff      	uxtb	r7, r7
				if (!(xor & 0x80)) {
   11d48:	f011 0f80 	tst.w	r1, #128	; 0x80
   11d4c:	d1e5      	bne.n	11d1a <net_if_ipv6_get_best_match.isra.0+0x5a>
					len++;
   11d4e:	3301      	adds	r3, #1
   11d50:	b2db      	uxtb	r3, r3
					xor <<= 1;
   11d52:	0049      	lsls	r1, r1, #1
			for (k = 0U; k < 8; k++) {
   11d54:	42bb      	cmp	r3, r7
					xor <<= 1;
   11d56:	b2c9      	uxtb	r1, r1
			for (k = 0U; k < 8; k++) {
   11d58:	d1f6      	bne.n	11d48 <net_if_ipv6_get_best_match.isra.0+0x88>
   11d5a:	e7de      	b.n	11d1a <net_if_ipv6_get_best_match.isra.0+0x5a>
		return NULL;
   11d5c:	4605      	mov	r5, r0
   11d5e:	e7eb      	b.n	11d38 <net_if_ipv6_get_best_match.isra.0+0x78>
   11d60:	02000100 	.word	0x02000100

00011d64 <net_if_ipv6_start_dad>:
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   11d64:	2300      	movs	r3, #0
{
   11d66:	b510      	push	{r4, lr}
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   11d68:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
{
   11d6c:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11d6e:	6803      	ldr	r3, [r0, #0]
   11d70:	330c      	adds	r3, #12
   11d72:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_is_up(iface)) {
   11d76:	07db      	lsls	r3, r3, #31
   11d78:	d519      	bpl.n	11dae <net_if_ipv6_start_dad+0x4a>
		ifaddr->dad_count = 1U;
   11d7a:	2301      	movs	r3, #1
   11d7c:	f881 302e 	strb.w	r3, [r1, #46]	; 0x2e
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   11d80:	f015 fbb9 	bl	274f6 <net_ipv6_start_dad>
   11d84:	b998      	cbnz	r0, 11dae <net_if_ipv6_start_dad+0x4a>
			ifaddr->dad_start = k_uptime_get_32();
   11d86:	f013 f935 	bl	24ff4 <k_uptime_get_32>
			sys_slist_append(&active_dad_timers, &ifaddr->dad_node);
   11d8a:	f104 0124 	add.w	r1, r4, #36	; 0x24
			ifaddr->dad_start = k_uptime_get_32();
   11d8e:	62a0      	str	r0, [r4, #40]	; 0x28
			sys_slist_append(&active_dad_timers, &ifaddr->dad_node);
   11d90:	4807      	ldr	r0, [pc, #28]	; (11db0 <net_if_ipv6_start_dad+0x4c>)
   11d92:	f013 f8bf 	bl	24f14 <sys_slist_append>
			if (!k_delayed_work_remaining_get(&dad_timer)) {
   11d96:	4807      	ldr	r0, [pc, #28]	; (11db4 <net_if_ipv6_start_dad+0x50>)
   11d98:	f013 f93c 	bl	25014 <k_delayed_work_remaining_get>
   11d9c:	b938      	cbnz	r0, 11dae <net_if_ipv6_start_dad+0x4a>
}
   11d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				k_delayed_work_submit(&dad_timer,
   11da2:	f640 42cd 	movw	r2, #3277	; 0xccd
   11da6:	2300      	movs	r3, #0
   11da8:	4802      	ldr	r0, [pc, #8]	; (11db4 <net_if_ipv6_start_dad+0x50>)
   11daa:	f7ff bebb 	b.w	11b24 <k_delayed_work_submit>
}
   11dae:	bd10      	pop	{r4, pc}
   11db0:	200225f4 	.word	0x200225f4
   11db4:	20022634 	.word	0x20022634

00011db8 <iface_router_expired>:
{
   11db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t current_time = k_uptime_get_32();
   11dba:	f013 f91b 	bl	24ff4 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   11dbe:	4a18      	ldr	r2, [pc, #96]	; (11e20 <iface_router_expired+0x68>)
   11dc0:	6813      	ldr	r3, [r2, #0]
   11dc2:	b91b      	cbnz	r3, 11dcc <iface_router_expired+0x14>
}
   11dc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	iface_router_run_timer(current_time);
   11dc8:	f7ff bf3a 	b.w	11c40 <iface_router_run_timer>
   11dcc:	2100      	movs	r1, #0
			    (MSEC_PER_SEC * router->lifetime) -
   11dce:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	parent->next = child;
   11dd2:	468c      	mov	ip, r1
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11dd4:	681c      	ldr	r4, [r3, #0]
   11dd6:	69de      	ldr	r6, [r3, #28]
   11dd8:	8c1d      	ldrh	r5, [r3, #32]
   11dda:	1a36      	subs	r6, r6, r0
   11ddc:	fb0e 6505 	mla	r5, lr, r5, r6
		if ((s32_t)(router->life_start +
   11de0:	2d00      	cmp	r5, #0
   11de2:	461f      	mov	r7, r3
   11de4:	dc0f      	bgt.n	11e06 <iface_router_expired+0x4e>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   11de6:	681d      	ldr	r5, [r3, #0]
   11de8:	b999      	cbnz	r1, 11e12 <iface_router_expired+0x5a>
   11dea:	6856      	ldr	r6, [r2, #4]
	list->head = node;
   11dec:	6015      	str	r5, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   11dee:	429e      	cmp	r6, r3
   11df0:	d100      	bne.n	11df4 <iface_router_expired+0x3c>
	list->tail = node;
   11df2:	6055      	str	r5, [r2, #4]
		router->is_used = false;
   11df4:	460f      	mov	r7, r1
   11df6:	f893 5022 	ldrb.w	r5, [r3, #34]	; 0x22
	parent->next = child;
   11dfa:	f8c3 c000 	str.w	ip, [r3]
   11dfe:	f36c 0500 	bfi	r5, ip, #0, #1
   11e02:	f883 5022 	strb.w	r5, [r3, #34]	; 0x22
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   11e06:	2c00      	cmp	r4, #0
   11e08:	d0dc      	beq.n	11dc4 <iface_router_expired+0xc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11e0a:	4623      	mov	r3, r4
   11e0c:	4639      	mov	r1, r7
   11e0e:	6824      	ldr	r4, [r4, #0]
   11e10:	e7e1      	b.n	11dd6 <iface_router_expired+0x1e>
	parent->next = child;
   11e12:	600d      	str	r5, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   11e14:	6855      	ldr	r5, [r2, #4]
   11e16:	429d      	cmp	r5, r3
	list->tail = node;
   11e18:	bf08      	it	eq
   11e1a:	6051      	streq	r1, [r2, #4]
}
   11e1c:	e7ea      	b.n	11df4 <iface_router_expired+0x3c>
   11e1e:	bf00      	nop
   11e20:	20022604 	.word	0x20022604

00011e24 <net_if_queue_tx>:
{
   11e24:	b510      	push	{r4, lr}
	u8_t tc = net_tx_priority2tc(prio);
   11e26:	2000      	movs	r0, #0
{
   11e28:	460c      	mov	r4, r1
	u8_t tc = net_tx_priority2tc(prio);
   11e2a:	f000 ffe5 	bl	12df8 <net_tx_priority2tc>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   11e2e:	2300      	movs	r3, #0
   11e30:	4a04      	ldr	r2, [pc, #16]	; (11e44 <net_if_queue_tx+0x20>)
	if (!net_tc_submit_to_tx_queue(tc, pkt)) {
   11e32:	4621      	mov	r1, r4
   11e34:	e9c4 2301 	strd	r2, r3, [r4, #4]
   11e38:	6023      	str	r3, [r4, #0]
   11e3a:	b2c0      	uxtb	r0, r0
}
   11e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!net_tc_submit_to_tx_queue(tc, pkt)) {
   11e40:	f000 bfc6 	b.w	12dd0 <net_tc_submit_to_tx_queue>
   11e44:	000125f1 	.word	0x000125f1

00011e48 <net_if_get_default>:
}
   11e48:	4b02      	ldr	r3, [pc, #8]	; (11e54 <net_if_get_default+0xc>)
	if (__net_if_start == __net_if_end) {
   11e4a:	4803      	ldr	r0, [pc, #12]	; (11e58 <net_if_get_default+0x10>)
}
   11e4c:	4298      	cmp	r0, r3
   11e4e:	bf08      	it	eq
   11e50:	2000      	moveq	r0, #0
   11e52:	4770      	bx	lr
   11e54:	20020a00 	.word	0x20020a00
   11e58:	200209e0 	.word	0x200209e0

00011e5c <net_if_config_ipv6_get>:
	if (iface->config.ip.ipv6) {
   11e5c:	6843      	ldr	r3, [r0, #4]
   11e5e:	b15b      	cbz	r3, 11e78 <net_if_config_ipv6_get+0x1c>
		if (ipv6) {
   11e60:	b909      	cbnz	r1, 11e66 <net_if_config_ipv6_get+0xa>
		return 0;
   11e62:	2000      	movs	r0, #0
   11e64:	4770      	bx	lr
			*ipv6 = iface->config.ip.ipv6;
   11e66:	600b      	str	r3, [r1, #0]
   11e68:	e7fb      	b.n	11e62 <net_if_config_ipv6_get+0x6>
		iface->config.ip.ipv6 = &ipv6_addresses[i].ipv6;
   11e6a:	6042      	str	r2, [r0, #4]
		ipv6_addresses[i].iface = iface;
   11e6c:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
		if (ipv6) {
   11e70:	2900      	cmp	r1, #0
   11e72:	d0f6      	beq.n	11e62 <net_if_config_ipv6_get+0x6>
			*ipv6 = &ipv6_addresses[i].ipv6;
   11e74:	600a      	str	r2, [r1, #0]
   11e76:	e7f4      	b.n	11e62 <net_if_config_ipv6_get+0x6>
		if (ipv6_addresses[i].iface) {
   11e78:	4a03      	ldr	r2, [pc, #12]	; (11e88 <net_if_config_ipv6_get+0x2c>)
   11e7a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   11e7e:	2b00      	cmp	r3, #0
   11e80:	d0f3      	beq.n	11e6a <net_if_config_ipv6_get+0xe>
	return -ESRCH;
   11e82:	f06f 0002 	mvn.w	r0, #2
}
   11e86:	4770      	bx	lr
   11e88:	20022654 	.word	0x20022654

00011e8c <net_if_start_rs>:
{
   11e8c:	b510      	push	{r4, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   11e8e:	6844      	ldr	r4, [r0, #4]
	if (!ipv6) {
   11e90:	b1bc      	cbz	r4, 11ec2 <net_if_start_rs+0x36>
	if (!net_ipv6_start_rs(iface)) {
   11e92:	f015 fc27 	bl	276e4 <net_ipv6_start_rs>
   11e96:	b9a0      	cbnz	r0, 11ec2 <net_if_start_rs+0x36>
		ipv6->rs_start = k_uptime_get_32();
   11e98:	f013 f8ac 	bl	24ff4 <k_uptime_get_32>
		sys_slist_append(&active_rs_timers, &ipv6->rs_node);
   11e9c:	f504 7182 	add.w	r1, r4, #260	; 0x104
		ipv6->rs_start = k_uptime_get_32();
   11ea0:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		sys_slist_append(&active_rs_timers, &ipv6->rs_node);
   11ea4:	4807      	ldr	r0, [pc, #28]	; (11ec4 <net_if_start_rs+0x38>)
   11ea6:	f013 f835 	bl	24f14 <sys_slist_append>
		if (!k_delayed_work_remaining_get(&rs_timer)) {
   11eaa:	4807      	ldr	r0, [pc, #28]	; (11ec8 <net_if_start_rs+0x3c>)
   11eac:	f013 f8b2 	bl	25014 <k_delayed_work_remaining_get>
   11eb0:	b938      	cbnz	r0, 11ec2 <net_if_start_rs+0x36>
}
   11eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_delayed_work_submit(&rs_timer, K_MSEC(RS_TIMEOUT));
   11eb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11eba:	2300      	movs	r3, #0
   11ebc:	4802      	ldr	r0, [pc, #8]	; (11ec8 <net_if_start_rs+0x3c>)
   11ebe:	f7ff be31 	b.w	11b24 <k_delayed_work_submit>
}
   11ec2:	bd10      	pop	{r4, pc}
   11ec4:	2002260c 	.word	0x2002260c
   11ec8:	200227dc 	.word	0x200227dc

00011ecc <rs_timeout>:
{
   11ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t current_time = k_uptime_get_32();
   11ed0:	f013 f890 	bl	24ff4 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
   11ed4:	4d2d      	ldr	r5, [pc, #180]	; (11f8c <rs_timeout+0xc0>)
	u32_t current_time = k_uptime_get_32();
   11ed6:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
   11ed8:	682a      	ldr	r2, [r5, #0]
   11eda:	2a00      	cmp	r2, #0
   11edc:	d054      	beq.n	11f88 <rs_timeout+0xbc>
   11ede:	f5b2 7382 	subs.w	r3, r2, #260	; 0x104
   11ee2:	d051      	beq.n	11f88 <rs_timeout+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11ee4:	6814      	ldr	r4, [r2, #0]
   11ee6:	b10c      	cbz	r4, 11eec <rs_timeout+0x20>
   11ee8:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
	parent->next = child;
   11eec:	2700      	movs	r7, #0
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
   11eee:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 11f98 <rs_timeout+0xcc>
		if ((s32_t)(ipv6->rs_start + RS_TIMEOUT - current_time) > 0) {
   11ef2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   11ef6:	1b92      	subs	r2, r2, r6
   11ef8:	f502 717a 	add.w	r1, r2, #1000	; 0x3e8
   11efc:	2900      	cmp	r1, #0
   11efe:	dc25      	bgt.n	11f4c <rs_timeout+0x80>
Z_GENLIST_REMOVE(slist, snode)
   11f00:	6869      	ldr	r1, [r5, #4]
		sys_slist_remove(&active_rs_timers, NULL, &ipv6->rs_node);
   11f02:	f503 7282 	add.w	r2, r3, #260	; 0x104
   11f06:	4291      	cmp	r1, r2
		ipv6->rs_count++;
   11f08:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
   11f0c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   11f10:	f102 0201 	add.w	r2, r2, #1
	list->head = node;
   11f14:	6028      	str	r0, [r5, #0]
	list->tail = node;
   11f16:	bf08      	it	eq
   11f18:	6068      	streq	r0, [r5, #4]
   11f1a:	b2d2      	uxtb	r2, r2
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
   11f1c:	481c      	ldr	r0, [pc, #112]	; (11f90 <rs_timeout+0xc4>)
	parent->next = child;
   11f1e:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
		ipv6->rs_count++;
   11f22:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
   11f26:	4540      	cmp	r0, r8
   11f28:	d10b      	bne.n	11f42 <rs_timeout+0x76>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
   11f2a:	b36c      	cbz	r4, 11f88 <rs_timeout+0xbc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   11f2c:	f514 7282 	adds.w	r2, r4, #260	; 0x104
   11f30:	d004      	beq.n	11f3c <rs_timeout+0x70>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11f32:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   11f36:	b10a      	cbz	r2, 11f3c <rs_timeout+0x70>
   11f38:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
{
   11f3c:	4623      	mov	r3, r4
   11f3e:	4614      	mov	r4, r2
   11f40:	e7d7      	b.n	11ef2 <rs_timeout+0x26>
			if (iface->config.ip.ipv6 == ipv6) {
   11f42:	6841      	ldr	r1, [r0, #4]
   11f44:	4299      	cmp	r1, r3
   11f46:	d01a      	beq.n	11f7e <rs_timeout+0xb2>
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
   11f48:	3020      	adds	r0, #32
   11f4a:	e7ec      	b.n	11f26 <rs_timeout+0x5a>
				      K_MSEC(ipv6->rs_start +
   11f4c:	f512 7f7a 	cmn.w	r2, #1000	; 0x3e8
   11f50:	bf08      	it	eq
   11f52:	2100      	moveq	r1, #0
   11f54:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11f58:	f240 34e7 	movw	r4, #999	; 0x3e7
   11f5c:	2500      	movs	r5, #0
   11f5e:	fbe0 4501 	umlal	r4, r5, r0, r1
   11f62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11f66:	2300      	movs	r3, #0
   11f68:	4620      	mov	r0, r4
   11f6a:	4629      	mov	r1, r5
   11f6c:	f7fa fc24 	bl	c7b8 <__aeabi_uldivmod>
}
   11f70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11f74:	4602      	mov	r2, r0
		k_delayed_work_submit(&rs_timer,
   11f76:	2300      	movs	r3, #0
   11f78:	4806      	ldr	r0, [pc, #24]	; (11f94 <rs_timeout+0xc8>)
   11f7a:	f7ff bdd3 	b.w	11b24 <k_delayed_work_submit>
			if (ipv6->rs_count < RS_COUNT) {
   11f7e:	2a02      	cmp	r2, #2
   11f80:	d8d3      	bhi.n	11f2a <rs_timeout+0x5e>
				net_if_start_rs(iface);
   11f82:	f7ff ff83 	bl	11e8c <net_if_start_rs>
   11f86:	e7d0      	b.n	11f2a <rs_timeout+0x5e>
}
   11f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f8c:	2002260c 	.word	0x2002260c
   11f90:	200209e0 	.word	0x200209e0
   11f94:	200227dc 	.word	0x200227dc
   11f98:	20020a00 	.word	0x20020a00

00011f9c <net_if_stop_rs>:
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   11f9c:	6841      	ldr	r1, [r0, #4]
	if (!ipv6) {
   11f9e:	b121      	cbz	r1, 11faa <net_if_stop_rs+0xe>
	sys_slist_find_and_remove(&active_rs_timers, &ipv6->rs_node);
   11fa0:	4802      	ldr	r0, [pc, #8]	; (11fac <net_if_stop_rs+0x10>)
   11fa2:	f501 7182 	add.w	r1, r1, #260	; 0x104
   11fa6:	f012 bfbf 	b.w	24f28 <sys_slist_find_and_remove>
}
   11faa:	4770      	bx	lr
   11fac:	2002260c 	.word	0x2002260c

00011fb0 <net_if_ipv6_addr_lookup>:
{
   11fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11fb4:	4606      	mov	r6, r0
   11fb6:	460f      	mov	r7, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   11fb8:	4d17      	ldr	r5, [pc, #92]	; (12018 <net_if_ipv6_addr_lookup+0x68>)
   11fba:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1201c <net_if_ipv6_addr_lookup+0x6c>
   11fbe:	4545      	cmp	r5, r8
   11fc0:	d101      	bne.n	11fc6 <net_if_ipv6_addr_lookup+0x16>
	return NULL;
   11fc2:	2000      	movs	r0, #0
   11fc4:	e023      	b.n	1200e <net_if_ipv6_addr_lookup+0x5e>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   11fc6:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
   11fc8:	b90c      	cbnz	r4, 11fce <net_if_ipv6_addr_lookup+0x1e>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   11fca:	3520      	adds	r5, #32
   11fcc:	e7f7      	b.n	11fbe <net_if_ipv6_addr_lookup+0xe>
			if (!ipv6->unicast[i].is_used ||
   11fce:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   11fd2:	079a      	lsls	r2, r3, #30
   11fd4:	d508      	bpl.n	11fe8 <net_if_ipv6_addr_lookup+0x38>
   11fd6:	8823      	ldrh	r3, [r4, #0]
   11fd8:	2b02      	cmp	r3, #2
   11fda:	d105      	bne.n	11fe8 <net_if_ipv6_addr_lookup+0x38>
			if (net_ipv6_is_prefix(
   11fdc:	2280      	movs	r2, #128	; 0x80
   11fde:	4630      	mov	r0, r6
   11fe0:	1d21      	adds	r1, r4, #4
   11fe2:	f012 ffda 	bl	24f9a <net_ipv6_is_prefix>
   11fe6:	b9a0      	cbnz	r0, 12012 <net_if_ipv6_addr_lookup+0x62>
			if (!ipv6->unicast[i].is_used ||
   11fe8:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
   11fec:	079b      	lsls	r3, r3, #30
   11fee:	d5ec      	bpl.n	11fca <net_if_ipv6_addr_lookup+0x1a>
   11ff0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   11ff2:	2b02      	cmp	r3, #2
   11ff4:	d1e9      	bne.n	11fca <net_if_ipv6_addr_lookup+0x1a>
			if (net_ipv6_is_prefix(
   11ff6:	2280      	movs	r2, #128	; 0x80
   11ff8:	4630      	mov	r0, r6
   11ffa:	f104 0134 	add.w	r1, r4, #52	; 0x34
   11ffe:	f012 ffcc 	bl	24f9a <net_ipv6_is_prefix>
   12002:	2800      	cmp	r0, #0
   12004:	d0e1      	beq.n	11fca <net_if_ipv6_addr_lookup+0x1a>
   12006:	2030      	movs	r0, #48	; 0x30
				if (ret) {
   12008:	b107      	cbz	r7, 1200c <net_if_ipv6_addr_lookup+0x5c>
					*ret = iface;
   1200a:	603d      	str	r5, [r7, #0]
				return &ipv6->unicast[i];
   1200c:	4420      	add	r0, r4
}
   1200e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (net_ipv6_is_prefix(
   12012:	2000      	movs	r0, #0
   12014:	e7f8      	b.n	12008 <net_if_ipv6_addr_lookup+0x58>
   12016:	bf00      	nop
   12018:	200209e0 	.word	0x200209e0
   1201c:	20020a00 	.word	0x20020a00

00012020 <dad_timeout>:
{
   12020:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t current_time = k_uptime_get_32();
   12024:	f012 ffe6 	bl	24ff4 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
   12028:	4e28      	ldr	r6, [pc, #160]	; (120cc <dad_timeout+0xac>)
	u32_t current_time = k_uptime_get_32();
   1202a:	4607      	mov	r7, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
   1202c:	6833      	ldr	r3, [r6, #0]
   1202e:	b353      	cbz	r3, 12086 <dad_timeout+0x66>
   12030:	f1b3 0524 	subs.w	r5, r3, #36	; 0x24
   12034:	d027      	beq.n	12086 <dad_timeout+0x66>
   12036:	681c      	ldr	r4, [r3, #0]
   12038:	b104      	cbz	r4, 1203c <dad_timeout+0x1c>
   1203a:	3c24      	subs	r4, #36	; 0x24
	parent->next = child;
   1203c:	f04f 0800 	mov.w	r8, #0
		ifaddr->addr_state = NET_ADDR_PREFERRED;
   12040:	f04f 0901 	mov.w	r9, #1
			    DAD_TIMEOUT - current_time) > 0) {
   12044:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12046:	1bdb      	subs	r3, r3, r7
   12048:	f103 0164 	add.w	r1, r3, #100	; 0x64
		if ((s32_t)(ifaddr->dad_start +
   1204c:	2900      	cmp	r1, #0
   1204e:	dc1d      	bgt.n	1208c <dad_timeout+0x6c>
Z_GENLIST_REMOVE(slist, snode)
   12050:	462b      	mov	r3, r5
   12052:	6872      	ldr	r2, [r6, #4]
   12054:	f853 1f24 	ldr.w	r1, [r3, #36]!
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
   12058:	f105 0a04 	add.w	sl, r5, #4
   1205c:	429a      	cmp	r2, r3
	list->tail = node;
   1205e:	bf08      	it	eq
   12060:	6071      	streq	r1, [r6, #4]
	list->head = node;
   12062:	6031      	str	r1, [r6, #0]
   12064:	4650      	mov	r0, sl
	parent->next = child;
   12066:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
		ifaddr->addr_state = NET_ADDR_PREFERRED;
   1206a:	f885 902d 	strb.w	r9, [r5, #45]	; 0x2d
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
   1206e:	a901      	add	r1, sp, #4
		iface = NULL;
   12070:	f8cd 8004 	str.w	r8, [sp, #4]
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
   12074:	f7ff ff9c 	bl	11fb0 <net_if_ipv6_addr_lookup>
		if (tmp == ifaddr) {
   12078:	4285      	cmp	r5, r0
   1207a:	d103      	bne.n	12084 <dad_timeout+0x64>
			net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   1207c:	4651      	mov	r1, sl
   1207e:	9801      	ldr	r0, [sp, #4]
   12080:	f014 ff18 	bl	26eb4 <net_ipv6_nbr_rm>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
   12084:	b9cc      	cbnz	r4, 120ba <dad_timeout+0x9a>
}
   12086:	b002      	add	sp, #8
   12088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				      K_MSEC(ifaddr->dad_start +
   1208c:	3364      	adds	r3, #100	; 0x64
   1208e:	bf08      	it	eq
   12090:	2100      	moveq	r1, #0
   12092:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   12096:	f240 34e7 	movw	r4, #999	; 0x3e7
   1209a:	2500      	movs	r5, #0
   1209c:	fbe0 4501 	umlal	r4, r5, r0, r1
   120a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   120a4:	2300      	movs	r3, #0
   120a6:	4620      	mov	r0, r4
   120a8:	4629      	mov	r1, r5
   120aa:	f7fa fb85 	bl	c7b8 <__aeabi_uldivmod>
		k_delayed_work_submit(&dad_timer,
   120ae:	2300      	movs	r3, #0
   120b0:	4602      	mov	r2, r0
   120b2:	4807      	ldr	r0, [pc, #28]	; (120d0 <dad_timeout+0xb0>)
   120b4:	f7ff fd36 	bl	11b24 <k_delayed_work_submit>
}
   120b8:	e7e5      	b.n	12086 <dad_timeout+0x66>
Z_GENLIST_PEEK_NEXT(slist, snode)
   120ba:	f114 0324 	adds.w	r3, r4, #36	; 0x24
   120be:	d002      	beq.n	120c6 <dad_timeout+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   120c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
   120c2:	b103      	cbz	r3, 120c6 <dad_timeout+0xa6>
   120c4:	3b24      	subs	r3, #36	; 0x24
{
   120c6:	4625      	mov	r5, r4
   120c8:	461c      	mov	r4, r3
   120ca:	e7bb      	b.n	12044 <dad_timeout+0x24>
   120cc:	200225f4 	.word	0x200225f4
   120d0:	20022634 	.word	0x20022634

000120d4 <net_if_ipv6_addr_rm>:
{
   120d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   120d8:	6844      	ldr	r4, [r0, #4]
{
   120da:	4607      	mov	r7, r0
   120dc:	460d      	mov	r5, r1
	if (!ipv6) {
   120de:	2c00      	cmp	r4, #0
   120e0:	d057      	beq.n	12192 <net_if_ipv6_addr_rm+0xbe>
		if (!ipv6->unicast[i].is_used) {
   120e2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   120e6:	0798      	lsls	r0, r3, #30
   120e8:	d407      	bmi.n	120fa <net_if_ipv6_addr_rm+0x26>
   120ea:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
   120ee:	079a      	lsls	r2, r3, #30
   120f0:	d40a      	bmi.n	12108 <net_if_ipv6_addr_rm+0x34>
	return false;
   120f2:	2000      	movs	r0, #0
}
   120f4:	b004      	add	sp, #16
   120f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
   120fa:	1d20      	adds	r0, r4, #4
   120fc:	f012 ff72 	bl	24fe4 <net_ipv6_addr_cmp>
   12100:	2800      	cmp	r0, #0
   12102:	d0f2      	beq.n	120ea <net_if_ipv6_addr_rm+0x16>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   12104:	2600      	movs	r6, #0
   12106:	e007      	b.n	12118 <net_if_ipv6_addr_rm+0x44>
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
   12108:	4629      	mov	r1, r5
   1210a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1210e:	f012 ff69 	bl	24fe4 <net_ipv6_addr_cmp>
   12112:	2800      	cmp	r0, #0
   12114:	d0ed      	beq.n	120f2 <net_if_ipv6_addr_rm+0x1e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   12116:	2601      	movs	r6, #1
		if (!ipv6->unicast[i].is_infinite) {
   12118:	2130      	movs	r1, #48	; 0x30
   1211a:	4371      	muls	r1, r6
   1211c:	1863      	adds	r3, r4, r1
   1211e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   12122:	07db      	lsls	r3, r3, #31
   12124:	d40c      	bmi.n	12140 <net_if_ipv6_addr_rm+0x6c>
			sys_slist_find_and_remove(
   12126:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1219c <net_if_ipv6_addr_rm+0xc8>
   1212a:	3114      	adds	r1, #20
   1212c:	4640      	mov	r0, r8
   1212e:	4421      	add	r1, r4
   12130:	f012 fefa 	bl	24f28 <sys_slist_find_and_remove>
			if (sys_slist_is_empty(
   12134:	f8d8 3000 	ldr.w	r3, [r8]
   12138:	b913      	cbnz	r3, 12140 <net_if_ipv6_addr_rm+0x6c>
				k_delayed_work_cancel(&address_lifetime_timer);
   1213a:	4817      	ldr	r0, [pc, #92]	; (12198 <net_if_ipv6_addr_rm+0xc4>)
   1213c:	f016 ffda 	bl	290f4 <k_delayed_work_cancel>
		ipv6->unicast[i].is_used = false;
   12140:	2030      	movs	r0, #48	; 0x30
   12142:	fb00 4406 	mla	r4, r0, r6, r4
   12146:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   1214a:	f36f 0341 	bfc	r3, #1, #1
   1214e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 */
static inline
void net_ipv6_addr_create_solicited_node(const struct in6_addr *src,
					 struct in6_addr *dst)
{
	dst->s6_addr[0]   = 0xFF;
   12152:	f240 23ff 	movw	r3, #767	; 0x2ff
   12156:	9300      	str	r3, [sp, #0]
	dst->s6_addr[1]   = 0x02;
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   12158:	2300      	movs	r3, #0
   1215a:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1215e:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   12162:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0U;
   12166:	f44f 7380 	mov.w	r3, #256	; 0x100
   1216a:	f8ad 300a 	strh.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
	dst->s6_addr[12]  = 0xFF;
   1216e:	23ff      	movs	r3, #255	; 0xff
   12170:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   12174:	7b6b      	ldrb	r3, [r5, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   12176:	7bea      	ldrb	r2, [r5, #15]
	dst->s6_addr[13]  = src->s6_addr[13];
   12178:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1217c:	7bab      	ldrb	r3, [r5, #14]
   1217e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12182:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
   12186:	4669      	mov	r1, sp
   12188:	4638      	mov	r0, r7
   1218a:	f013 f900 	bl	2538e <net_if_ipv6_maddr_rm>
		return true;
   1218e:	2001      	movs	r0, #1
   12190:	e7b0      	b.n	120f4 <net_if_ipv6_addr_rm+0x20>
		return false;
   12192:	4620      	mov	r0, r4
   12194:	e7ae      	b.n	120f4 <net_if_ipv6_addr_rm+0x20>
   12196:	bf00      	nop
   12198:	20022614 	.word	0x20022614
   1219c:	200225ec 	.word	0x200225ec

000121a0 <net_if_ipv6_dad_failed>:
{
   121a0:	b513      	push	{r0, r1, r4, lr}
   121a2:	460c      	mov	r4, r1
   121a4:	9001      	str	r0, [sp, #4]
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   121a6:	a901      	add	r1, sp, #4
   121a8:	4620      	mov	r0, r4
   121aa:	f7ff ff01 	bl	11fb0 <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   121ae:	b140      	cbz	r0, 121c2 <net_if_ipv6_dad_failed+0x22>
	sys_slist_find_and_remove(&active_dad_timers, &ifaddr->dad_node);
   121b0:	f100 0124 	add.w	r1, r0, #36	; 0x24
   121b4:	4804      	ldr	r0, [pc, #16]	; (121c8 <net_if_ipv6_dad_failed+0x28>)
   121b6:	f012 feb7 	bl	24f28 <sys_slist_find_and_remove>
	net_if_ipv6_addr_rm(iface, addr);
   121ba:	4621      	mov	r1, r4
   121bc:	9801      	ldr	r0, [sp, #4]
   121be:	f7ff ff89 	bl	120d4 <net_if_ipv6_addr_rm>
}
   121c2:	b002      	add	sp, #8
   121c4:	bd10      	pop	{r4, pc}
   121c6:	bf00      	nop
   121c8:	200225f4 	.word	0x200225f4

000121cc <prefix_lifetime_timeout>:
{
   121cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t current_time = k_uptime_get_32();
   121d0:	f012 ff10 	bl	24ff4 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
   121d4:	4b38      	ldr	r3, [pc, #224]	; (122b8 <prefix_lifetime_timeout+0xec>)
	u32_t current_time = k_uptime_get_32();
   121d6:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
   121d8:	681c      	ldr	r4, [r3, #0]
   121da:	2c00      	cmp	r4, #0
   121dc:	d050      	beq.n	12280 <prefix_lifetime_timeout+0xb4>
   121de:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   121e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   121e6:	f04f 0a00 	mov.w	sl, #0
   121ea:	6825      	ldr	r5, [r4, #0]
   121ec:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 122bc <prefix_lifetime_timeout+0xf0>
			  ifprefix->lifetime.wrap_counter,
   121f0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
	if (counter > 0) {
   121f4:	2b00      	cmp	r3, #0
   121f6:	d148      	bne.n	1228a <prefix_lifetime_timeout+0xbe>
	if ((s32_t)((start + (u32_t)timeout) - current_time) > 0) {
   121f8:	6861      	ldr	r1, [r4, #4]
   121fa:	eba1 0108 	sub.w	r1, r1, r8
   121fe:	4411      	add	r1, r2
   12200:	2900      	cmp	r1, #0
   12202:	dc56      	bgt.n	122b2 <prefix_lifetime_timeout+0xe6>
	ifprefix->is_used = false;
   12204:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
   12208:	6a20      	ldr	r0, [r4, #32]
	ifprefix->is_used = false;
   1220a:	f363 0241 	bfi	r2, r3, #1, #1
   1220e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
   12212:	a901      	add	r1, sp, #4
   12214:	f7ff fe22 	bl	11e5c <net_if_config_ipv6_get>
   12218:	2800      	cmp	r0, #0
   1221a:	db07      	blt.n	1222c <prefix_lifetime_timeout+0x60>
	remove_prefix_addresses(ifprefix->iface, ipv6, &ifprefix->prefix,
   1221c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   12220:	9901      	ldr	r1, [sp, #4]
   12222:	6a20      	ldr	r0, [r4, #32]
   12224:	f104 0210 	add.w	r2, r4, #16
   12228:	f013 f8d3 	bl	253d2 <remove_prefix_addresses>
		if (current == next) {
   1222c:	42a5      	cmp	r5, r4
   1222e:	d004      	beq.n	1223a <prefix_lifetime_timeout+0x6e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
   12230:	2d00      	cmp	r5, #0
   12232:	d03c      	beq.n	122ae <prefix_lifetime_timeout+0xe2>
   12234:	682b      	ldr	r3, [r5, #0]
   12236:	462c      	mov	r4, r5
   12238:	bb2d      	cbnz	r5, 12286 <prefix_lifetime_timeout+0xba>
	if (found) {
   1223a:	f1ba 0f00 	cmp.w	sl, #0
   1223e:	d01f      	beq.n	12280 <prefix_lifetime_timeout+0xb4>
   12240:	2300      	movs	r3, #0
   12242:	4a1e      	ldr	r2, [pc, #120]	; (122bc <prefix_lifetime_timeout+0xf0>)
   12244:	42bb      	cmp	r3, r7
   12246:	bf08      	it	eq
   12248:	42b2      	cmpeq	r2, r6
   1224a:	bf38      	it	cc
   1224c:	4616      	movcc	r6, r2
   1224e:	f240 34e7 	movw	r4, #999	; 0x3e7
   12252:	bf38      	it	cc
   12254:	461f      	movcc	r7, r3
   12256:	03f0      	lsls	r0, r6, #15
   12258:	1900      	adds	r0, r0, r4
   1225a:	f04f 0400 	mov.w	r4, #0
   1225e:	ea4f 31c7 	mov.w	r1, r7, lsl #15
   12262:	ea41 4156 	orr.w	r1, r1, r6, lsr #17
   12266:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1226a:	f04f 0300 	mov.w	r3, #0
   1226e:	eb44 0101 	adc.w	r1, r4, r1
   12272:	f7fa faa1 	bl	c7b8 <__aeabi_uldivmod>
		k_delayed_work_submit(&prefix_lifetime_timer,
   12276:	4623      	mov	r3, r4
   12278:	4602      	mov	r2, r0
   1227a:	4811      	ldr	r0, [pc, #68]	; (122c0 <prefix_lifetime_timeout+0xf4>)
   1227c:	f7ff fc52 	bl	11b24 <k_delayed_work_submit>
}
   12280:	b002      	add	sp, #8
   12282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12286:	461d      	mov	r5, r3
   12288:	e7b2      	b.n	121f0 <prefix_lifetime_timeout+0x24>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   1228a:	45c8      	cmp	r8, r9
   1228c:	d101      	bne.n	12292 <prefix_lifetime_timeout+0xc6>
		ifprefix->lifetime.wrap_counter--;
   1228e:	3b01      	subs	r3, #1
   12290:	60e3      	str	r3, [r4, #12]
	if (ifprefix->lifetime.wrap_counter > 0) {
   12292:	68e3      	ldr	r3, [r4, #12]
   12294:	2b00      	cmp	r3, #0
   12296:	bfc8      	it	gt
   12298:	464a      	movgt	r2, r9
			if (next_timeout < timeout_update) {
   1229a:	2300      	movs	r3, #0
   1229c:	42bb      	cmp	r3, r7
   1229e:	bf08      	it	eq
   122a0:	42b2      	cmpeq	r2, r6
   122a2:	bf3e      	ittt	cc
   122a4:	4616      	movcc	r6, r2
   122a6:	461f      	movcc	r7, r3
				found = true;
   122a8:	f04f 0a01 	movcc.w	sl, #1
   122ac:	e7be      	b.n	1222c <prefix_lifetime_timeout+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
   122ae:	462b      	mov	r3, r5
   122b0:	e7c1      	b.n	12236 <prefix_lifetime_timeout+0x6a>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
   122b2:	45c8      	cmp	r8, r9
   122b4:	d1f1      	bne.n	1229a <prefix_lifetime_timeout+0xce>
   122b6:	e7ea      	b.n	1228e <prefix_lifetime_timeout+0xc2>
   122b8:	200225fc 	.word	0x200225fc
   122bc:	7fffff9b 	.word	0x7fffff9b
   122c0:	20022778 	.word	0x20022778

000122c4 <net_if_ipv6_maddr_lookup>:
{
   122c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122c8:	4682      	mov	sl, r0
   122ca:	460e      	mov	r6, r1
			if (!ipv6->mcast[i].is_used ||
   122cc:	f04f 0b18 	mov.w	fp, #24
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   122d0:	4d19      	ldr	r5, [pc, #100]	; (12338 <net_if_ipv6_maddr_lookup+0x74>)
   122d2:	4b1a      	ldr	r3, [pc, #104]	; (1233c <net_if_ipv6_maddr_lookup+0x78>)
   122d4:	429d      	cmp	r5, r3
   122d6:	d101      	bne.n	122dc <net_if_ipv6_maddr_lookup+0x18>
	return NULL;
   122d8:	2000      	movs	r0, #0
   122da:	e024      	b.n	12326 <net_if_ipv6_maddr_lookup+0x62>
		if (ret && *ret && iface != *ret) {
   122dc:	b12e      	cbz	r6, 122ea <net_if_ipv6_maddr_lookup+0x26>
   122de:	6832      	ldr	r2, [r6, #0]
   122e0:	b11a      	cbz	r2, 122ea <net_if_ipv6_maddr_lookup+0x26>
   122e2:	42aa      	cmp	r2, r5
   122e4:	d001      	beq.n	122ea <net_if_ipv6_maddr_lookup+0x26>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   122e6:	3520      	adds	r5, #32
   122e8:	e7f4      	b.n	122d4 <net_if_ipv6_maddr_lookup+0x10>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   122ea:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
   122ec:	2c00      	cmp	r4, #0
   122ee:	d0fa      	beq.n	122e6 <net_if_ipv6_maddr_lookup+0x22>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   122f0:	2700      	movs	r7, #0
   122f2:	f104 0864 	add.w	r8, r4, #100	; 0x64
			if (!ipv6->mcast[i].is_used ||
   122f6:	fb0b f907 	mul.w	r9, fp, r7
   122fa:	eb04 0209 	add.w	r2, r4, r9
   122fe:	f892 2074 	ldrb.w	r2, [r2, #116]	; 0x74
   12302:	07d2      	lsls	r2, r2, #31
   12304:	d511      	bpl.n	1232a <net_if_ipv6_maddr_lookup+0x66>
   12306:	f838 2c04 	ldrh.w	r2, [r8, #-4]
   1230a:	2a02      	cmp	r2, #2
   1230c:	d10d      	bne.n	1232a <net_if_ipv6_maddr_lookup+0x66>
			if (net_ipv6_is_prefix(
   1230e:	2280      	movs	r2, #128	; 0x80
   12310:	4641      	mov	r1, r8
   12312:	4650      	mov	r0, sl
   12314:	f012 fe41 	bl	24f9a <net_ipv6_is_prefix>
   12318:	4b08      	ldr	r3, [pc, #32]	; (1233c <net_if_ipv6_maddr_lookup+0x78>)
   1231a:	b130      	cbz	r0, 1232a <net_if_ipv6_maddr_lookup+0x66>
				if (ret) {
   1231c:	b106      	cbz	r6, 12320 <net_if_ipv6_maddr_lookup+0x5c>
					*ret = iface;
   1231e:	6035      	str	r5, [r6, #0]
				return &ipv6->mcast[i];
   12320:	f109 0060 	add.w	r0, r9, #96	; 0x60
   12324:	4420      	add	r0, r4
}
   12326:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1232a:	3701      	adds	r7, #1
   1232c:	2f03      	cmp	r7, #3
   1232e:	f108 0818 	add.w	r8, r8, #24
   12332:	d1e0      	bne.n	122f6 <net_if_ipv6_maddr_lookup+0x32>
   12334:	e7d7      	b.n	122e6 <net_if_ipv6_maddr_lookup+0x22>
   12336:	bf00      	nop
   12338:	200209e0 	.word	0x200209e0
   1233c:	20020a00 	.word	0x20020a00

00012340 <net_if_mcast_monitor>:
{
   12340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   12342:	4b0a      	ldr	r3, [pc, #40]	; (1236c <net_if_mcast_monitor+0x2c>)
{
   12344:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   12346:	681b      	ldr	r3, [r3, #0]
{
   12348:	460e      	mov	r6, r1
   1234a:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1234c:	b163      	cbz	r3, 12368 <net_if_mcast_monitor+0x28>
   1234e:	681c      	ldr	r4, [r3, #0]
		if (iface == mon->iface) {
   12350:	6858      	ldr	r0, [r3, #4]
   12352:	42a8      	cmp	r0, r5
   12354:	d104      	bne.n	12360 <net_if_mcast_monitor+0x20>
			mon->cb(iface, addr, is_joined);
   12356:	463a      	mov	r2, r7
   12358:	4631      	mov	r1, r6
   1235a:	4628      	mov	r0, r5
   1235c:	689b      	ldr	r3, [r3, #8]
   1235e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   12360:	b114      	cbz	r4, 12368 <net_if_mcast_monitor+0x28>
   12362:	4623      	mov	r3, r4
   12364:	6824      	ldr	r4, [r4, #0]
   12366:	e7f3      	b.n	12350 <net_if_mcast_monitor+0x10>
}
   12368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1236a:	bf00      	nop
   1236c:	20022770 	.word	0x20022770

00012370 <net_if_ipv6_addr_onlink>:
{
   12370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12374:	4606      	mov	r6, r0
   12376:	460f      	mov	r7, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   12378:	4d17      	ldr	r5, [pc, #92]	; (123d8 <net_if_ipv6_addr_onlink+0x68>)
   1237a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 123dc <net_if_ipv6_addr_onlink+0x6c>
   1237e:	4545      	cmp	r5, r8
   12380:	d101      	bne.n	12386 <net_if_ipv6_addr_onlink+0x16>
	return false;
   12382:	2000      	movs	r0, #0
   12384:	e023      	b.n	123ce <net_if_ipv6_addr_onlink+0x5e>
		if (iface && *iface && *iface != tmp) {
   12386:	b11e      	cbz	r6, 12390 <net_if_ipv6_addr_onlink+0x20>
   12388:	6833      	ldr	r3, [r6, #0]
   1238a:	b10b      	cbz	r3, 12390 <net_if_ipv6_addr_onlink+0x20>
   1238c:	42ab      	cmp	r3, r5
   1238e:	d111      	bne.n	123b4 <net_if_ipv6_addr_onlink+0x44>
		struct net_if_ipv6 *ipv6 = tmp->config.ip.ipv6;
   12390:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
   12392:	b17c      	cbz	r4, 123b4 <net_if_ipv6_addr_onlink+0x44>
			if (ipv6->prefix[i].is_used &&
   12394:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   12398:	079a      	lsls	r2, r3, #30
   1239a:	d40d      	bmi.n	123b8 <net_if_ipv6_addr_onlink+0x48>
   1239c:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   123a0:	079b      	lsls	r3, r3, #30
   123a2:	d507      	bpl.n	123b4 <net_if_ipv6_addr_onlink+0x44>
			    net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
   123a4:	4639      	mov	r1, r7
   123a6:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   123aa:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   123ae:	f012 fdf4 	bl	24f9a <net_ipv6_is_prefix>
			if (ipv6->prefix[i].is_used &&
   123b2:	b950      	cbnz	r0, 123ca <net_if_ipv6_addr_onlink+0x5a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   123b4:	3520      	adds	r5, #32
   123b6:	e7e2      	b.n	1237e <net_if_ipv6_addr_onlink+0xe>
			    net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
   123b8:	4639      	mov	r1, r7
   123ba:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
   123be:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   123c2:	f012 fdea 	bl	24f9a <net_ipv6_is_prefix>
			if (ipv6->prefix[i].is_used &&
   123c6:	2800      	cmp	r0, #0
   123c8:	d0e8      	beq.n	1239c <net_if_ipv6_addr_onlink+0x2c>
				if (iface) {
   123ca:	b916      	cbnz	r6, 123d2 <net_if_ipv6_addr_onlink+0x62>
				return true;
   123cc:	2001      	movs	r0, #1
}
   123ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					*iface = tmp;
   123d2:	6035      	str	r5, [r6, #0]
   123d4:	e7fa      	b.n	123cc <net_if_ipv6_addr_onlink+0x5c>
   123d6:	bf00      	nop
   123d8:	200209e0 	.word	0x200209e0
   123dc:	20020a00 	.word	0x20020a00

000123e0 <net_if_ipv6_prefix_unset_timer>:
	if (!prefix->is_used) {
   123e0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
{
   123e4:	4601      	mov	r1, r0
	if (!prefix->is_used) {
   123e6:	079b      	lsls	r3, r3, #30
   123e8:	d505      	bpl.n	123f6 <net_if_ipv6_prefix_unset_timer+0x16>
	ifprefix->lifetime.timer_timeout = 0;
   123ea:	2300      	movs	r3, #0
	ifprefix->lifetime.wrap_counter = 0;
   123ec:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_slist_find_and_remove(&active_prefix_lifetime_timers,
   123f0:	4801      	ldr	r0, [pc, #4]	; (123f8 <net_if_ipv6_prefix_unset_timer+0x18>)
   123f2:	f012 bd99 	b.w	24f28 <sys_slist_find_and_remove>
}
   123f6:	4770      	bx	lr
   123f8:	200225fc 	.word	0x200225fc

000123fc <net_if_ipv6_router_lookup>:
{
   123fc:	b510      	push	{r4, lr}
		if (!routers[i].is_used ||
   123fe:	4c0a      	ldr	r4, [pc, #40]	; (12428 <net_if_ipv6_router_lookup+0x2c>)
   12400:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   12404:	07db      	lsls	r3, r3, #31
   12406:	d50a      	bpl.n	1241e <net_if_ipv6_router_lookup+0x22>
   12408:	88a3      	ldrh	r3, [r4, #4]
   1240a:	2b02      	cmp	r3, #2
   1240c:	d107      	bne.n	1241e <net_if_ipv6_router_lookup+0x22>
		    routers[i].address.family != family ||
   1240e:	69a3      	ldr	r3, [r4, #24]
   12410:	4298      	cmp	r0, r3
   12412:	d104      	bne.n	1241e <net_if_ipv6_router_lookup+0x22>
		     net_ipv6_addr_cmp(net_if_router_ipv6(&routers[i]),
   12414:	f104 0008 	add.w	r0, r4, #8
   12418:	f012 fde4 	bl	24fe4 <net_ipv6_addr_cmp>
		if ((IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6 &&
   1241c:	b908      	cbnz	r0, 12422 <net_if_ipv6_router_lookup+0x26>
	return NULL;
   1241e:	2000      	movs	r0, #0
}
   12420:	bd10      	pop	{r4, pc}
			return &routers[i];
   12422:	4620      	mov	r0, r4
	return iface_router_lookup(iface, AF_INET6, addr);
   12424:	e7fc      	b.n	12420 <net_if_ipv6_router_lookup+0x24>
   12426:	bf00      	nop
   12428:	200227b8 	.word	0x200227b8

0001242c <net_if_ipv6_router_find_default>:
		    !routers[i].is_default ||
   1242c:	4b0b      	ldr	r3, [pc, #44]	; (1245c <net_if_ipv6_router_find_default+0x30>)
{
   1242e:	b530      	push	{r4, r5, lr}
		    !routers[i].is_default ||
   12430:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		    routers[i].address.family != family) {
   12434:	889d      	ldrh	r5, [r3, #4]
		    !routers[i].is_default ||
   12436:	f3c2 0140 	ubfx	r1, r2, #1, #1
		if (!routers[i].is_used ||
   1243a:	f012 0201 	ands.w	r2, r2, #1
		if (iface && iface != routers[i].iface) {
   1243e:	699c      	ldr	r4, [r3, #24]
		if (!routers[i].is_used ||
   12440:	d008      	beq.n	12454 <net_if_ipv6_router_find_default+0x28>
   12442:	b139      	cbz	r1, 12454 <net_if_ipv6_router_find_default+0x28>
		    !routers[i].is_default ||
   12444:	2d02      	cmp	r5, #2
   12446:	d105      	bne.n	12454 <net_if_ipv6_router_find_default+0x28>
		if (iface && iface != routers[i].iface) {
   12448:	b130      	cbz	r0, 12458 <net_if_ipv6_router_find_default+0x2c>
		return &routers[i];
   1244a:	42a0      	cmp	r0, r4
   1244c:	bf0c      	ite	eq
   1244e:	4618      	moveq	r0, r3
   12450:	2000      	movne	r0, #0
}
   12452:	bd30      	pop	{r4, r5, pc}
	return NULL;
   12454:	2000      	movs	r0, #0
   12456:	e7fc      	b.n	12452 <net_if_ipv6_router_find_default+0x26>
		return &routers[i];
   12458:	4618      	mov	r0, r3
   1245a:	e7fa      	b.n	12452 <net_if_ipv6_router_find_default+0x26>
   1245c:	200227b8 	.word	0x200227b8

00012460 <net_if_ipv6_router_add>:
{
   12460:	b538      	push	{r3, r4, r5, lr}
		if (routers[i].is_used) {
   12462:	4c19      	ldr	r4, [pc, #100]	; (124c8 <net_if_ipv6_router_add+0x68>)
{
   12464:	460d      	mov	r5, r1
		if (routers[i].is_used) {
   12466:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1246a:	07d9      	lsls	r1, r3, #31
   1246c:	d42a      	bmi.n	124c4 <net_if_ipv6_router_add+0x64>
		routers[i].address.family = family;
   1246e:	2102      	movs	r1, #2
		routers[i].iface = iface;
   12470:	61a0      	str	r0, [r4, #24]
		routers[i].address.family = family;
   12472:	80a1      	strh	r1, [r4, #4]
		if (lifetime) {
   12474:	f043 0301 	orr.w	r3, r3, #1
   12478:	b1e2      	cbz	r2, 124b4 <net_if_ipv6_router_add+0x54>
			routers[i].is_default = true;
   1247a:	f023 0306 	bic.w	r3, r3, #6
   1247e:	430b      	orrs	r3, r1
   12480:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			routers[i].lifetime = lifetime;
   12484:	8422      	strh	r2, [r4, #32]
			routers[i].life_start = k_uptime_get_32();
   12486:	f012 fdb5 	bl	24ff4 <k_uptime_get_32>
			sys_slist_append(&active_router_timers,
   1248a:	4621      	mov	r1, r4
			routers[i].life_start = k_uptime_get_32();
   1248c:	61e0      	str	r0, [r4, #28]
			sys_slist_append(&active_router_timers,
   1248e:	480f      	ldr	r0, [pc, #60]	; (124cc <net_if_ipv6_router_add+0x6c>)
   12490:	f012 fd40 	bl	24f14 <sys_slist_append>
			iface_router_run_timer(routers[i].life_start);
   12494:	69e0      	ldr	r0, [r4, #28]
   12496:	f7ff fbd3 	bl	11c40 <iface_router_run_timer>
   1249a:	4c0d      	ldr	r4, [pc, #52]	; (124d0 <net_if_ipv6_router_add+0x70>)
   1249c:	462b      	mov	r3, r5
   1249e:	3510      	adds	r5, #16
   124a0:	4622      	mov	r2, r4
   124a2:	6818      	ldr	r0, [r3, #0]
   124a4:	6859      	ldr	r1, [r3, #4]
   124a6:	3308      	adds	r3, #8
   124a8:	c203      	stmia	r2!, {r0, r1}
   124aa:	42ab      	cmp	r3, r5
   124ac:	4614      	mov	r4, r2
   124ae:	d1f7      	bne.n	124a0 <net_if_ipv6_router_add+0x40>
		return &routers[i];
   124b0:	4805      	ldr	r0, [pc, #20]	; (124c8 <net_if_ipv6_router_add+0x68>)
}
   124b2:	bd38      	pop	{r3, r4, r5, pc}
			routers[i].is_default = false;
   124b4:	f023 0306 	bic.w	r3, r3, #6
   124b8:	f043 0304 	orr.w	r3, r3, #4
			routers[i].lifetime = 0;
   124bc:	8422      	strh	r2, [r4, #32]
			routers[i].is_default = false;
   124be:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   124c2:	e7ea      	b.n	1249a <net_if_ipv6_router_add+0x3a>
	return NULL;
   124c4:	2000      	movs	r0, #0
	return iface_router_add(iface, AF_INET6, addr, false, lifetime);
   124c6:	e7f4      	b.n	124b2 <net_if_ipv6_router_add+0x52>
   124c8:	200227b8 	.word	0x200227b8
   124cc:	20022604 	.word	0x20022604
   124d0:	200227c0 	.word	0x200227c0

000124d4 <net_if_ipv6_router_rm>:
	if (!router->is_used) {
   124d4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
{
   124d8:	b510      	push	{r4, lr}
	if (!router->is_used) {
   124da:	f013 0301 	ands.w	r3, r3, #1
{
   124de:	4604      	mov	r4, r0
	if (!router->is_used) {
   124e0:	d010      	beq.n	12504 <net_if_ipv6_router_rm+0x30>
	if (sys_slist_find_and_remove(&active_router_timers, &router->node)) {
   124e2:	4601      	mov	r1, r0
   124e4:	4808      	ldr	r0, [pc, #32]	; (12508 <net_if_ipv6_router_rm+0x34>)
   124e6:	f012 fd1f 	bl	24f28 <sys_slist_find_and_remove>
   124ea:	b118      	cbz	r0, 124f4 <net_if_ipv6_router_rm+0x20>
		iface_router_run_timer(k_uptime_get_32());
   124ec:	f012 fd82 	bl	24ff4 <k_uptime_get_32>
   124f0:	f7ff fba6 	bl	11c40 <iface_router_run_timer>
	return true;
   124f4:	2001      	movs	r0, #1
	router->is_used = false;
   124f6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   124fa:	f36f 0300 	bfc	r3, #0, #1
   124fe:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
   12502:	bd10      	pop	{r4, pc}
		return false;
   12504:	4618      	mov	r0, r3
   12506:	e7fc      	b.n	12502 <net_if_ipv6_router_rm+0x2e>
   12508:	20022604 	.word	0x20022604

0001250c <net_if_ipv6_select_src_addr>:
{
	struct in6_addr *src = NULL;
	u8_t best_match = 0U;
	struct net_if *iface;

	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
   1250c:	f248 03fe 	movw	r3, #33022	; 0x80fe
{
   12510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8_t best_match = 0U;
   12512:	2400      	movs	r4, #0
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
   12514:	880a      	ldrh	r2, [r1, #0]
{
   12516:	460d      	mov	r5, r1
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
   12518:	429a      	cmp	r2, r3
	u8_t best_match = 0U;
   1251a:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
   1251e:	d002      	beq.n	12526 <net_if_ipv6_select_src_addr+0x1a>
   12520:	780b      	ldrb	r3, [r1, #0]
   12522:	2bff      	cmp	r3, #255	; 0xff
   12524:	d114      	bne.n	12550 <net_if_ipv6_select_src_addr+0x44>
   12526:	4d17      	ldr	r5, [pc, #92]	; (12584 <net_if_ipv6_select_src_addr+0x78>)
							 &best_match);
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
   12528:	4e17      	ldr	r6, [pc, #92]	; (12588 <net_if_ipv6_select_src_addr+0x7c>)
		for (iface = __net_if_start;
   1252a:	b318      	cbz	r0, 12574 <net_if_ipv6_select_src_addr+0x68>
				break;
			}
		}

		if (dst_iface) {
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1252c:	2101      	movs	r1, #1
   1252e:	f013 f879 	bl	25624 <net_if_ipv6_get_ll>
   12532:	e016      	b.n	12562 <net_if_ipv6_select_src_addr+0x56>
			addr = net_if_ipv6_get_best_match(iface, dst,
   12534:	6870      	ldr	r0, [r6, #4]
   12536:	4629      	mov	r1, r5
   12538:	f10d 0207 	add.w	r2, sp, #7
   1253c:	f7ff fbc0 	bl	11cc0 <net_if_ipv6_get_best_match.isra.0>
			if (addr) {
   12540:	2800      	cmp	r0, #0
   12542:	bf18      	it	ne
   12544:	4604      	movne	r4, r0
		     iface++) {
   12546:	3620      	adds	r6, #32
		     !dst_iface && iface != __net_if_end;
   12548:	42be      	cmp	r6, r7
   1254a:	d1f3      	bne.n	12534 <net_if_ipv6_select_src_addr+0x28>
		}
	}

	if (!src) {
   1254c:	b9bc      	cbnz	r4, 1257e <net_if_ipv6_select_src_addr+0x72>
   1254e:	e013      	b.n	12578 <net_if_ipv6_select_src_addr+0x6c>
		for (iface = __net_if_start;
   12550:	4e0c      	ldr	r6, [pc, #48]	; (12584 <net_if_ipv6_select_src_addr+0x78>)
		     !dst_iface && iface != __net_if_end;
   12552:	4f0d      	ldr	r7, [pc, #52]	; (12588 <net_if_ipv6_select_src_addr+0x7c>)
		for (iface = __net_if_start;
   12554:	2800      	cmp	r0, #0
   12556:	d0f7      	beq.n	12548 <net_if_ipv6_select_src_addr+0x3c>
			src = net_if_ipv6_get_best_match(dst_iface, dst,
   12558:	6840      	ldr	r0, [r0, #4]
   1255a:	f10d 0207 	add.w	r2, sp, #7
   1255e:	f7ff fbaf 	bl	11cc0 <net_if_ipv6_get_best_match.isra.0>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   12562:	4604      	mov	r4, r0
   12564:	e7f2      	b.n	1254c <net_if_ipv6_select_src_addr+0x40>
			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   12566:	2101      	movs	r1, #1
   12568:	4628      	mov	r0, r5
   1256a:	f013 f85b 	bl	25624 <net_if_ipv6_get_ll>
			if (addr) {
   1256e:	4604      	mov	r4, r0
   12570:	b928      	cbnz	r0, 1257e <net_if_ipv6_select_src_addr+0x72>
		     iface++) {
   12572:	3520      	adds	r5, #32
		     !dst_iface && iface != __net_if_end;
   12574:	42b5      	cmp	r5, r6
   12576:	d1f6      	bne.n	12566 <net_if_ipv6_select_src_addr+0x5a>
		return net_ipv6_unspecified_address();
   12578:	f000 f944 	bl	12804 <net_ipv6_unspecified_address>
   1257c:	4604      	mov	r4, r0
	}

	return src;
}
   1257e:	4620      	mov	r0, r4
   12580:	b003      	add	sp, #12
   12582:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12584:	200209e0 	.word	0x200209e0
   12588:	20020a00 	.word	0x20020a00

0001258c <net_if_ipv6_select_src_iface>:

struct net_if *net_if_ipv6_select_src_iface(const struct in6_addr *dst)
{
   1258c:	b513      	push	{r0, r1, r4, lr}
   1258e:	4601      	mov	r1, r0
	const struct in6_addr *src;
	struct net_if *iface;

	src = net_if_ipv6_select_src_addr(NULL, dst);
   12590:	2000      	movs	r0, #0
   12592:	f7ff ffbb 	bl	1250c <net_if_ipv6_select_src_addr>
   12596:	4604      	mov	r4, r0
	if (src == net_ipv6_unspecified_address()) {
   12598:	f000 f934 	bl	12804 <net_ipv6_unspecified_address>
   1259c:	4284      	cmp	r4, r0
   1259e:	d106      	bne.n	125ae <net_if_ipv6_select_src_iface+0x22>
	if (__net_if_start == __net_if_end) {
   125a0:	4807      	ldr	r0, [pc, #28]	; (125c0 <net_if_ipv6_select_src_iface+0x34>)
		return NULL;
   125a2:	4b08      	ldr	r3, [pc, #32]	; (125c4 <net_if_ipv6_select_src_iface+0x38>)
   125a4:	4298      	cmp	r0, r3
   125a6:	bf08      	it	eq
   125a8:	2000      	moveq	r0, #0
	if (!net_if_ipv6_addr_lookup(src, &iface)) {
		return net_if_get_default();
	}

	return iface;
}
   125aa:	b002      	add	sp, #8
   125ac:	bd10      	pop	{r4, pc}
	if (!net_if_ipv6_addr_lookup(src, &iface)) {
   125ae:	4620      	mov	r0, r4
   125b0:	a901      	add	r1, sp, #4
   125b2:	f7ff fcfd 	bl	11fb0 <net_if_ipv6_addr_lookup>
   125b6:	2800      	cmp	r0, #0
   125b8:	d0f2      	beq.n	125a0 <net_if_ipv6_select_src_iface+0x14>
	return iface;
   125ba:	9801      	ldr	r0, [sp, #4]
   125bc:	e7f5      	b.n	125aa <net_if_ipv6_select_src_iface+0x1e>
   125be:	bf00      	nop
   125c0:	200209e0 	.word	0x200209e0
   125c4:	20020a00 	.word	0x20020a00

000125c8 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   125c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   125ca:	4b08      	ldr	r3, [pc, #32]	; (125ec <net_if_call_link_cb+0x24>)
{
   125cc:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   125ce:	681b      	ldr	r3, [r3, #0]
{
   125d0:	460e      	mov	r6, r1
   125d2:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   125d4:	b14b      	cbz	r3, 125ea <net_if_call_link_cb+0x22>
   125d6:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
   125d8:	463a      	mov	r2, r7
   125da:	4631      	mov	r1, r6
   125dc:	4628      	mov	r0, r5
   125de:	685b      	ldr	r3, [r3, #4]
   125e0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   125e2:	b114      	cbz	r4, 125ea <net_if_call_link_cb+0x22>
   125e4:	4623      	mov	r3, r4
   125e6:	6824      	ldr	r4, [r4, #0]
   125e8:	e7f6      	b.n	125d8 <net_if_call_link_cb+0x10>
	}
}
   125ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   125ec:	20022768 	.word	0x20022768

000125f0 <process_tx_packet>:
	struct net_linkaddr ll_dst = {
   125f0:	2300      	movs	r3, #0
{
   125f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   125f4:	b085      	sub	sp, #20
	struct net_linkaddr ll_dst = {
   125f6:	e9cd 3300 	strd	r3, r3, [sp]
Z_GENLIST_IS_EMPTY(slist)
   125fa:	4b1f      	ldr	r3, [pc, #124]	; (12678 <process_tx_packet+0x88>)
{
   125fc:	4604      	mov	r4, r0
	if (!sys_slist_is_empty(&link_callbacks)) {
   125fe:	681b      	ldr	r3, [r3, #0]
	iface = net_pkt_iface(pkt);
   12600:	6a06      	ldr	r6, [r0, #32]
	if (!sys_slist_is_empty(&link_callbacks)) {
   12602:	b1ab      	cbz	r3, 12630 <process_tx_packet+0x40>
		if (net_linkaddr_set(&ll_dst_storage,
   12604:	6b01      	ldr	r1, [r0, #48]	; 0x30
   12606:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1260a:	b189      	cbz	r1, 12630 <process_tx_packet+0x40>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1260c:	2d06      	cmp	r5, #6
   1260e:	d80f      	bhi.n	12630 <process_tx_packet+0x40>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
   12610:	f10d 070a 	add.w	r7, sp, #10
   12614:	2306      	movs	r3, #6
   12616:	462a      	mov	r2, r5
   12618:	4638      	mov	r0, r7
	lladdr_store->len = new_len;
   1261a:	f88d 5009 	strb.w	r5, [sp, #9]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1261e:	f016 ff35 	bl	2948c <__memcpy_chk>
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
   12622:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
			ll_dst.addr = ll_dst_storage.addr;
   12626:	9700      	str	r7, [sp, #0]
			ll_dst.len = ll_dst_storage.len;
   12628:	f88d 5004 	strb.w	r5, [sp, #4]
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
   1262c:	f88d 3005 	strb.w	r3, [sp, #5]
	context = net_pkt_context(pkt);
   12630:	69e7      	ldr	r7, [r4, #28]
   12632:	6833      	ldr	r3, [r6, #0]
   12634:	330c      	adds	r3, #12
   12636:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1263a:	07db      	lsls	r3, r3, #31
   1263c:	d519      	bpl.n	12672 <process_tx_packet+0x82>
		status = net_if_l2(iface)->send(iface, pkt);
   1263e:	4630      	mov	r0, r6
   12640:	f012 fc8d 	bl	24f5e <net_if_l2>
   12644:	4621      	mov	r1, r4
   12646:	6843      	ldr	r3, [r0, #4]
   12648:	4630      	mov	r0, r6
   1264a:	4798      	blx	r3
	if (status < 0) {
   1264c:	1e05      	subs	r5, r0, #0
   1264e:	da02      	bge.n	12656 <process_tx_packet+0x66>
		net_pkt_unref(pkt);
   12650:	4620      	mov	r0, r4
   12652:	f013 fd2a 	bl	260aa <net_pkt_unref>
	if (context) {
   12656:	b11f      	cbz	r7, 12660 <process_tx_packet+0x70>
		net_context_send_cb(context, status);
   12658:	4629      	mov	r1, r5
   1265a:	4638      	mov	r0, r7
   1265c:	f012 fc84 	bl	24f68 <net_context_send_cb>
	if (ll_dst.addr) {
   12660:	9b00      	ldr	r3, [sp, #0]
   12662:	b123      	cbz	r3, 1266e <process_tx_packet+0x7e>
		net_if_call_link_cb(iface, &ll_dst, status);
   12664:	462a      	mov	r2, r5
   12666:	4669      	mov	r1, sp
   12668:	4630      	mov	r0, r6
   1266a:	f7ff ffad 	bl	125c8 <net_if_call_link_cb>
}
   1266e:	b005      	add	sp, #20
   12670:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = -ENETDOWN;
   12672:	f06f 0572 	mvn.w	r5, #114	; 0x72
   12676:	e7eb      	b.n	12650 <process_tx_packet+0x60>
   12678:	20022768 	.word	0x20022768

0001267c <net_if_get_by_index>:
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
}

struct net_if *net_if_get_by_index(int index)
{
	if (index <= 0) {
   1267c:	2800      	cmp	r0, #0
   1267e:	dd08      	ble.n	12692 <net_if_get_by_index+0x16>
		return NULL;
	}

	if (&__net_if_start[index - 1] >= __net_if_end) {
   12680:	1e43      	subs	r3, r0, #1
   12682:	4805      	ldr	r0, [pc, #20]	; (12698 <net_if_get_by_index+0x1c>)
   12684:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		return NULL;
   12688:	4b04      	ldr	r3, [pc, #16]	; (1269c <net_if_get_by_index+0x20>)
   1268a:	4298      	cmp	r0, r3
   1268c:	bf28      	it	cs
   1268e:	2000      	movcs	r0, #0
   12690:	4770      	bx	lr
   12692:	2000      	movs	r0, #0
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index - 1];
}
   12694:	4770      	bx	lr
   12696:	bf00      	nop
   12698:	200209e0 	.word	0x200209e0
   1269c:	20020a00 	.word	0x20020a00

000126a0 <net_if_get_by_iface>:

int net_if_get_by_iface(struct net_if *iface)
{
	if (!(iface >= __net_if_start && iface < __net_if_end)) {
   126a0:	4b06      	ldr	r3, [pc, #24]	; (126bc <net_if_get_by_iface+0x1c>)
   126a2:	4298      	cmp	r0, r3
   126a4:	d306      	bcc.n	126b4 <net_if_get_by_iface+0x14>
   126a6:	4a06      	ldr	r2, [pc, #24]	; (126c0 <net_if_get_by_iface+0x20>)
   126a8:	4290      	cmp	r0, r2
   126aa:	d203      	bcs.n	126b4 <net_if_get_by_iface+0x14>
		return -1;
	}

	return (iface - __net_if_start) + 1;
   126ac:	1ac0      	subs	r0, r0, r3
   126ae:	1140      	asrs	r0, r0, #5
   126b0:	3001      	adds	r0, #1
   126b2:	4770      	bx	lr
		return -1;
   126b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   126b8:	4770      	bx	lr
   126ba:	bf00      	nop
   126bc:	200209e0 	.word	0x200209e0
   126c0:	20020a00 	.word	0x20020a00

000126c4 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   126c4:	b570      	push	{r4, r5, r6, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   126c6:	4c1f      	ldr	r4, [pc, #124]	; (12744 <net_if_init+0x80>)
	net_tc_tx_init();
   126c8:	f000 fb9e 	bl	12e08 <net_tc_tx_init>
	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   126cc:	4625      	mov	r5, r4
   126ce:	4e1e      	ldr	r6, [pc, #120]	; (12748 <net_if_init+0x84>)
   126d0:	42b4      	cmp	r4, r6
   126d2:	d12d      	bne.n	12730 <net_if_init+0x6c>
	     iface++, if_count++) {
		init_iface(iface);
	}

	if (iface == __net_if_start) {
   126d4:	42ac      	cmp	r4, r5
   126d6:	d02a      	beq.n	1272e <net_if_init+0x6a>
	list->head = NULL;
   126d8:	2400      	movs	r4, #0
	k_delayed_work_init(&dad_timer, dad_timeout);
   126da:	491c      	ldr	r1, [pc, #112]	; (1274c <net_if_init+0x88>)
   126dc:	481c      	ldr	r0, [pc, #112]	; (12750 <net_if_init+0x8c>)
   126de:	f016 fd01 	bl	290e4 <k_delayed_work_init>
   126e2:	4b1c      	ldr	r3, [pc, #112]	; (12754 <net_if_init+0x90>)
	k_delayed_work_init(&rs_timer, rs_timeout);
   126e4:	491c      	ldr	r1, [pc, #112]	; (12758 <net_if_init+0x94>)
   126e6:	481d      	ldr	r0, [pc, #116]	; (1275c <net_if_init+0x98>)
	list->tail = NULL;
   126e8:	e9c3 4400 	strd	r4, r4, [r3]
   126ec:	f016 fcfa 	bl	290e4 <k_delayed_work_init>
	list->head = NULL;
   126f0:	4b1b      	ldr	r3, [pc, #108]	; (12760 <net_if_init+0x9c>)
	k_delayed_work_init(&address_lifetime_timer, address_lifetime_timeout);
   126f2:	491c      	ldr	r1, [pc, #112]	; (12764 <net_if_init+0xa0>)
   126f4:	481c      	ldr	r0, [pc, #112]	; (12768 <net_if_init+0xa4>)
	list->tail = NULL;
   126f6:	e9c3 4400 	strd	r4, r4, [r3]
   126fa:	f016 fcf3 	bl	290e4 <k_delayed_work_init>
	k_delayed_work_init(&prefix_lifetime_timer, prefix_lifetime_timeout);
   126fe:	491b      	ldr	r1, [pc, #108]	; (1276c <net_if_init+0xa8>)
   12700:	481b      	ldr	r0, [pc, #108]	; (12770 <net_if_init+0xac>)
   12702:	f016 fcef 	bl	290e4 <k_delayed_work_init>
		ipv6_addresses[i].ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   12706:	2340      	movs	r3, #64	; 0x40
   12708:	4d1a      	ldr	r5, [pc, #104]	; (12774 <net_if_init+0xb0>)
   1270a:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
		ipv6_addresses[i].ipv6.base_reachable_time = REACHABLE_TIME;
   1270e:	f247 5330 	movw	r3, #30000	; 0x7530
 * @param ipv6 IPv6 address configuration
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if_ipv6 *ipv6)
{
#if defined(CONFIG_NET_NATIVE_IPV6)
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
   12712:	4628      	mov	r0, r5
   12714:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
   12718:	f012 ffb2 	bl	25680 <net_if_ipv6_calc_reachable_time>
	k_delayed_work_init(&router_timer, iface_router_expired);
   1271c:	4916      	ldr	r1, [pc, #88]	; (12778 <net_if_init+0xb4>)
   1271e:	f8c5 00fc 	str.w	r0, [r5, #252]	; 0xfc
   12722:	4816      	ldr	r0, [pc, #88]	; (1277c <net_if_init+0xb8>)
   12724:	f016 fcde 	bl	290e4 <k_delayed_work_init>
	list->head = NULL;
   12728:	4b15      	ldr	r3, [pc, #84]	; (12780 <net_if_init+0xbc>)
	list->tail = NULL;
   1272a:	e9c3 4400 	strd	r4, r4, [r3]
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   1272e:	bd70      	pop	{r4, r5, r6, pc}
	return iface->if_dev->dev;
   12730:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   12732:	681b      	ldr	r3, [r3, #0]
   12734:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   12736:	b11b      	cbz	r3, 12740 <net_if_init+0x7c>
   12738:	681b      	ldr	r3, [r3, #0]
   1273a:	b10b      	cbz	r3, 12740 <net_if_init+0x7c>
	api->init(iface);
   1273c:	4620      	mov	r0, r4
   1273e:	4798      	blx	r3
	     iface++, if_count++) {
   12740:	3420      	adds	r4, #32
   12742:	e7c5      	b.n	126d0 <net_if_init+0xc>
   12744:	200209e0 	.word	0x200209e0
   12748:	20020a00 	.word	0x20020a00
   1274c:	00012021 	.word	0x00012021
   12750:	20022634 	.word	0x20022634
   12754:	200225f4 	.word	0x200225f4
   12758:	00011ecd 	.word	0x00011ecd
   1275c:	200227dc 	.word	0x200227dc
   12760:	2002260c 	.word	0x2002260c
   12764:	00011b31 	.word	0x00011b31
   12768:	20022614 	.word	0x20022614
   1276c:	000121cd 	.word	0x000121cd
   12770:	20022778 	.word	0x20022778
   12774:	20022654 	.word	0x20022654
   12778:	00011db9 	.word	0x00011db9
   1277c:	20022798 	.word	0x20022798
   12780:	20022604 	.word	0x20022604

00012784 <net_if_post_init>:

void net_if_post_init(void)
{
   12784:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   12786:	4c08      	ldr	r4, [pc, #32]	; (127a8 <net_if_post_init+0x24>)
   12788:	4d08      	ldr	r5, [pc, #32]	; (127ac <net_if_post_init+0x28>)
   1278a:	42ac      	cmp	r4, r5
   1278c:	d100      	bne.n	12790 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1278e:	bd38      	pop	{r3, r4, r5, pc}
   12790:	6823      	ldr	r3, [r4, #0]
   12792:	330c      	adds	r3, #12
   12794:	e8d3 3faf 	lda	r3, [r3]
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   12798:	071b      	lsls	r3, r3, #28
   1279a:	d402      	bmi.n	127a2 <net_if_post_init+0x1e>
			net_if_up(iface);
   1279c:	4620      	mov	r0, r4
   1279e:	f012 ffd5 	bl	2574c <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   127a2:	3420      	adds	r4, #32
   127a4:	e7f1      	b.n	1278a <net_if_post_init+0x6>
   127a6:	bf00      	nop
   127a8:	200209e0 	.word	0x200209e0
   127ac:	20020a00 	.word	0x20020a00

000127b0 <net_sprint_ll_addr_buf>:

char *net_sprint_ll_addr_buf(const u8_t *ll, u8_t ll_len,
			     char *buf, int buflen)
{
	u8_t i, len, blen;
	char *ptr = buf;
   127b0:	3902      	subs	r1, #2
   127b2:	b2c9      	uxtb	r1, r1
   127b4:	2906      	cmp	r1, #6
{
   127b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127ba:	4616      	mov	r6, r2
   127bc:	bf8c      	ite	hi
   127be:	2206      	movhi	r2, #6
   127c0:	4a0f      	ldrls	r2, [pc, #60]	; (12800 <net_sprint_ll_addr_buf+0x50>)
   127c2:	4605      	mov	r5, r0
   127c4:	bf98      	it	ls
   127c6:	5c52      	ldrbls	r2, [r2, r1]
		break;
	}

	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
		*ptr++ = ':';
   127c8:	f04f 083a 	mov.w	r8, #58	; 0x3a
   127cc:	1887      	adds	r7, r0, r2
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
   127ce:	4630      	mov	r0, r6
   127d0:	b2dc      	uxtb	r4, r3
   127d2:	b15c      	cbz	r4, 127ec <net_sprint_ll_addr_buf+0x3c>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   127d4:	f815 1b01 	ldrb.w	r1, [r5], #1
   127d8:	2301      	movs	r3, #1
   127da:	2241      	movs	r2, #65	; 0x41
   127dc:	f013 f81c 	bl	25818 <net_byte_to_hex>
		blen -= 3U;
   127e0:	3c03      	subs	r4, #3
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
   127e2:	42bd      	cmp	r5, r7
		*ptr++ = ':';
   127e4:	f800 8b01 	strb.w	r8, [r0], #1
		blen -= 3U;
   127e8:	b2e4      	uxtb	r4, r4
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
   127ea:	d1f2      	bne.n	127d2 <net_sprint_ll_addr_buf+0x22>
	}

	if (!(ptr - buf)) {
   127ec:	2200      	movs	r2, #0
   127ee:	42b0      	cmp	r0, r6
		return NULL;
	}

	*(ptr - 1) = '\0';
   127f0:	bf16      	itet	ne
   127f2:	f800 2c01 	strbne.w	r2, [r0, #-1]
		return NULL;
   127f6:	4610      	moveq	r0, r2
	return buf;
   127f8:	4630      	movne	r0, r6
}
   127fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   127fe:	bf00      	nop
   12800:	0002bda2 	.word	0x0002bda2

00012804 <net_ipv6_unspecified_address>:
const struct in6_addr in6addr_loopback = IN6ADDR_LOOPBACK_INIT;

const struct in6_addr *net_ipv6_unspecified_address(void)
{
	return &in6addr_any;
}
   12804:	4800      	ldr	r0, [pc, #0]	; (12808 <net_ipv6_unspecified_address+0x4>)
   12806:	4770      	bx	lr
   12808:	0002a614 	.word	0x0002a614

0001280c <check_used_port>:
#if defined(CONFIG_NET_UDP) || defined(CONFIG_NET_TCP)
static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   1280c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12810:	460e      	mov	r6, r1
   12812:	4615      	mov	r5, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   12814:	4607      	mov	r7, r0
   12816:	4c11      	ldr	r4, [pc, #68]	; (1285c <check_used_port+0x50>)
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
		    local_addr->sa_family == AF_INET6) {
			if (net_ipv6_addr_cmp(
				    net_sin6_ptr(&contexts[i].local)->
							     sin6_addr,
				    &((struct sockaddr_in6 *)
   12818:	f102 0804 	add.w	r8, r2, #4
   1281c:	f504 7952 	add.w	r9, r4, #840	; 0x348
	return context->flags & NET_CONTEXT_IN_USE;
   12820:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
		if (!net_context_is_used(&contexts[i])) {
   12824:	07db      	lsls	r3, r3, #31
   12826:	d405      	bmi.n	12834 <check_used_port+0x28>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   12828:	348c      	adds	r4, #140	; 0x8c
   1282a:	45a1      	cmp	r9, r4
   1282c:	d1f8      	bne.n	12820 <check_used_port+0x14>
				return -EEXIST;
			}
		}
	}

	return 0;
   1282e:	2000      	movs	r0, #0
}
   12830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   12834:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
   12838:	42bb      	cmp	r3, r7
   1283a:	d1f5      	bne.n	12828 <check_used_port+0x1c>
   1283c:	8be3      	ldrh	r3, [r4, #30]
   1283e:	42b3      	cmp	r3, r6
   12840:	d1f2      	bne.n	12828 <check_used_port+0x1c>
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
   12842:	882b      	ldrh	r3, [r5, #0]
   12844:	2b02      	cmp	r3, #2
   12846:	d1ef      	bne.n	12828 <check_used_port+0x1c>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   12848:	2210      	movs	r2, #16
   1284a:	4641      	mov	r1, r8
   1284c:	6a20      	ldr	r0, [r4, #32]
   1284e:	f016 fe02 	bl	29456 <memcmp>
			if (net_ipv6_addr_cmp(
   12852:	2800      	cmp	r0, #0
   12854:	d1e8      	bne.n	12828 <check_used_port+0x1c>
				return -EEXIST;
   12856:	f06f 0010 	mvn.w	r0, #16
   1285a:	e7e9      	b.n	12830 <check_used_port+0x24>
   1285c:	200227fc 	.word	0x200227fc

00012860 <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   12860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12862:	4605      	mov	r5, r0
   12864:	460e      	mov	r6, r1
	u16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
   12866:	4f08      	ldr	r7, [pc, #32]	; (12888 <find_available_port+0x28>)
   12868:	f001 fb98 	bl	13f9c <sys_rand32_get>
   1286c:	ea40 0407 	orr.w	r4, r0, r7
   12870:	ba64      	rev16	r4, r4
   12872:	b2a4      	uxth	r4, r4
		if (local_port <= 1023U) {
			/* 0 - 1023 ports are reserved */
			continue;
		}
	} while (check_used_port(net_context_get_ip_proto(context),
   12874:	4632      	mov	r2, r6
   12876:	4621      	mov	r1, r4
   12878:	f895 0084 	ldrb.w	r0, [r5, #132]	; 0x84
   1287c:	f7ff ffc6 	bl	1280c <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   12880:	3011      	adds	r0, #17
   12882:	d0f1      	beq.n	12868 <find_available_port+0x8>

	return htons(local_port);
}
   12884:	4620      	mov	r0, r4
   12886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12888:	ffff8000 	.word	0xffff8000

0001288c <net_context_packet_received>:
enum net_verdict net_context_packet_received(struct net_conn *conn,
					     struct net_pkt *pkt,
					     union net_ip_header *ip_hdr,
					     union net_proto_header *proto_hdr,
					     void *user_data)
{
   1288c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12890:	4698      	mov	r8, r3
   12892:	460d      	mov	r5, r1
   12894:	4617      	mov	r7, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   12896:	2300      	movs	r3, #0
   12898:	4c22      	ldr	r4, [pc, #136]	; (12924 <net_context_packet_received+0x98>)
   1289a:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
		if (!net_context_is_used(&contexts[i])) {
   1289e:	07d2      	lsls	r2, r2, #31
   128a0:	d502      	bpl.n	128a8 <net_context_packet_received+0x1c>
		if (contexts[i].conn_handler == conn_handler) {
   128a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   128a4:	4290      	cmp	r0, r2
   128a6:	d012      	beq.n	128ce <net_context_packet_received+0x42>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   128a8:	3301      	adds	r3, #1
   128aa:	2b06      	cmp	r3, #6
   128ac:	f104 048c 	add.w	r4, r4, #140	; 0x8c
   128b0:	d1f3      	bne.n	1289a <net_context_packet_received+0xe>
	enum net_verdict verdict = NET_DROP;

	NET_ASSERT(context);
	NET_ASSERT(net_pkt_iface(pkt));

	k_mutex_lock(&context->lock, K_FOREVER);
   128b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   128b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   128ba:	2008      	movs	r0, #8
   128bc:	f013 f855 	bl	2596a <k_mutex_lock.constprop.0>
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   128c0:	6a28      	ldr	r0, [r5, #32]
   128c2:	f7ff feed 	bl	126a0 <net_if_get_by_iface>
   128c6:	2300      	movs	r3, #0
   128c8:	f883 3088 	strb.w	r3, [r3, #136]	; 0x88
   128cc:	deff      	udf	#255	; 0xff
   128ce:	f104 0908 	add.w	r9, r4, #8
   128d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   128d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   128da:	4648      	mov	r0, r9
   128dc:	f013 f845 	bl	2596a <k_mutex_lock.constprop.0>
   128e0:	6a28      	ldr	r0, [r5, #32]
   128e2:	f7ff fedd 	bl	126a0 <net_if_get_by_iface>
	net_pkt_set_context(pkt, context);

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */
	if (!context->recv_cb) {
   128e6:	f8d4 a044 	ldr.w	sl, [r4, #68]	; 0x44
   128ea:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
	pkt->context = ctx;
   128ee:	61ec      	str	r4, [r5, #28]
   128f0:	f1ba 0f00 	cmp.w	sl, #0
   128f4:	d013      	beq.n	1291e <net_context_packet_received+0x92>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
		net_stats_update_tcp_recv(net_pkt_iface(pkt),
					  net_pkt_remaining_data(pkt));
	}

	context->recv_cb(context, pkt, ip_hdr, proto_hdr, 0, user_data);
   128f6:	2600      	movs	r6, #0
   128f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   128fa:	463a      	mov	r2, r7
   128fc:	9301      	str	r3, [sp, #4]
   128fe:	4629      	mov	r1, r5
   12900:	4643      	mov	r3, r8
   12902:	4620      	mov	r0, r4
   12904:	9600      	str	r6, [sp, #0]
   12906:	47d0      	blx	sl
	z_impl_k_sem_give(sem);
   12908:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1290c:	f00d ff06 	bl	2071c <z_impl_k_sem_give>
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	verdict = NET_OK;

unlock:
	k_mutex_unlock(&context->lock);
   12910:	4648      	mov	r0, r9
   12912:	f013 f828 	bl	25966 <k_mutex_unlock>

	return verdict;
}
   12916:	4630      	mov	r0, r6
   12918:	b002      	add	sp, #8
   1291a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	enum net_verdict verdict = NET_DROP;
   1291e:	2602      	movs	r6, #2
   12920:	e7f6      	b.n	12910 <net_context_packet_received+0x84>
   12922:	bf00      	nop
   12924:	200227fc 	.word	0x200227fc

00012928 <net_context_get>:
{
   12928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (!IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1292c:	2801      	cmp	r0, #1
{
   1292e:	4606      	mov	r6, r0
   12930:	4689      	mov	r9, r1
   12932:	4692      	mov	sl, r2
   12934:	9301      	str	r3, [sp, #4]
		if (!IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   12936:	f000 809f 	beq.w	12a78 <net_context_get+0x150>
		if (!IS_ENABLED(CONFIG_NET_SOCKETS_CAN) && family == AF_CAN) {
   1293a:	2804      	cmp	r0, #4
   1293c:	f000 809c 	beq.w	12a78 <net_context_get+0x150>
		if (type == SOCK_RAW) {
   12940:	2903      	cmp	r1, #3
   12942:	d006      	beq.n	12952 <net_context_get+0x2a>
			if (family == AF_PACKET || family == AF_CAN) {
   12944:	1ec3      	subs	r3, r0, #3
   12946:	2b01      	cmp	r3, #1
   12948:	f240 809c 	bls.w	12a84 <net_context_get+0x15c>
			if (type == SOCK_STREAM) {
   1294c:	2901      	cmp	r1, #1
   1294e:	f000 8099 	beq.w	12a84 <net_context_get+0x15c>
			if (ip_proto == IPPROTO_TCP) {
   12952:	f1ba 0f06 	cmp.w	sl, #6
   12956:	f000 8098 	beq.w	12a8a <net_context_get+0x162>
		if (family != AF_INET && family != AF_INET6 &&
   1295a:	1e73      	subs	r3, r6, #1
   1295c:	2b03      	cmp	r3, #3
   1295e:	f200 808e 	bhi.w	12a7e <net_context_get+0x156>
		if (type != SOCK_DGRAM && type != SOCK_STREAM &&
   12962:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   12966:	2b02      	cmp	r3, #2
   12968:	f200 808c 	bhi.w	12a84 <net_context_get+0x15c>
		if (type != SOCK_RAW && ip_proto != IPPROTO_UDP &&
   1296c:	f1b9 0f03 	cmp.w	r9, #3
   12970:	d003      	beq.n	1297a <net_context_get+0x52>
   12972:	f1ba 0f11 	cmp.w	sl, #17
   12976:	f040 8088 	bne.w	12a8a <net_context_get+0x162>
		if (!context) {
   1297a:	9b01      	ldr	r3, [sp, #4]
   1297c:	2b00      	cmp	r3, #0
   1297e:	f000 8087 	beq.w	12a90 <net_context_get+0x168>
	return z_impl_k_sem_take(sem, timeout);
   12982:	4c45      	ldr	r4, [pc, #276]	; (12a98 <net_context_get+0x170>)
   12984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1298c:	4843      	ldr	r0, [pc, #268]	; (12a9c <net_context_get+0x174>)
   1298e:	f00d feeb 	bl	20768 <z_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   12992:	f04f 0b00 	mov.w	fp, #0
   12996:	46a0      	mov	r8, r4
   12998:	228c      	movs	r2, #140	; 0x8c
	return context->flags & NET_CONTEXT_IN_USE;
   1299a:	f894 5086 	ldrb.w	r5, [r4, #134]	; 0x86
   1299e:	fb02 f70b 	mul.w	r7, r2, fp
		if (net_context_is_used(&contexts[i])) {
   129a2:	f015 0501 	ands.w	r5, r5, #1
   129a6:	d00f      	beq.n	129c8 <net_context_get+0xa0>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   129a8:	f10b 0b01 	add.w	fp, fp, #1
   129ac:	f1bb 0f06 	cmp.w	fp, #6
   129b0:	f104 048c 	add.w	r4, r4, #140	; 0x8c
   129b4:	d1f1      	bne.n	1299a <net_context_get+0x72>
	int i, ret = -ENOENT;
   129b6:	f06f 0401 	mvn.w	r4, #1
	z_impl_k_sem_give(sem);
   129ba:	4838      	ldr	r0, [pc, #224]	; (12a9c <net_context_get+0x174>)
   129bc:	f00d feae 	bl	2071c <z_impl_k_sem_give>
}
   129c0:	4620      	mov	r0, r4
   129c2:	b003      	add	sp, #12
   129c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   129c8:	228c      	movs	r2, #140	; 0x8c
   129ca:	4629      	mov	r1, r5
   129cc:	4620      	mov	r0, r4
   129ce:	f016 fd8a 	bl	294e6 <memset>
		if (!net_if_is_ip_offloaded(net_if_get_default())
   129d2:	f7ff fa39 	bl	11e48 <net_if_get_default>
		contexts[i].iface = -1;
   129d6:	21ff      	movs	r1, #255	; 0xff
   129d8:	eb08 0207 	add.w	r2, r8, r7
   129dc:	f882 1088 	strb.w	r1, [r2, #136]	; 0x88
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   129e0:	2101      	movs	r1, #1
		contexts[i].flags = 0U;
   129e2:	f8a2 5086 	strh.w	r5, [r2, #134]	; 0x86
   129e6:	3204      	adds	r2, #4
   129e8:	e8d2 0fef 	ldaex	r0, [r2]
   129ec:	e8c2 1fe3 	stlex	r3, r1, [r2]
   129f0:	2b00      	cmp	r3, #0
   129f2:	d1f9      	bne.n	129e8 <net_context_get+0xc0>
		flag = family << 3;
   129f4:	00f1      	lsls	r1, r6, #3
	context->flags |= flag;
   129f6:	b2c9      	uxtb	r1, r1
	context->flags |= flag;
   129f8:	ea41 1989 	orr.w	r9, r1, r9, lsl #6
   129fc:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
			(void)memset(&contexts[i].remote, 0,
   12a00:	f107 0028 	add.w	r0, r7, #40	; 0x28
   12a04:	ea49 0901 	orr.w	r9, r9, r1
   12a08:	2218      	movs	r2, #24
   12a0a:	f8a4 9086 	strh.w	r9, [r4, #134]	; 0x86
   12a0e:	4629      	mov	r1, r5
	context->proto = proto;
   12a10:	f8a4 a084 	strh.w	sl, [r4, #132]	; 0x84
   12a14:	4440      	add	r0, r8
   12a16:	f016 fd66 	bl	294e6 <memset>
			(void)memset(&contexts[i].local, 0,
   12a1a:	f107 021c 	add.w	r2, r7, #28
   12a1e:	eb08 0902 	add.w	r9, r8, r2
		if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   12a22:	2e02      	cmp	r6, #2
   12a24:	f848 5002 	str.w	r5, [r8, r2]
   12a28:	e9c9 5501 	strd	r5, r5, [r9, #4]
   12a2c:	d019      	beq.n	12a62 <net_context_get+0x13a>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   12a2e:	f107 0050 	add.w	r0, r7, #80	; 0x50
	return z_impl_k_sem_init(sem, initial_count, limit);
   12a32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12a36:	2101      	movs	r1, #1
   12a38:	4440      	add	r0, r8
   12a3a:	f016 fada 	bl	28ff2 <z_impl_k_sem_init>
		k_mutex_init(&contexts[i].lock);
   12a3e:	f107 0008 	add.w	r0, r7, #8
	return z_impl_k_mutex_init(mutex);
   12a42:	4440      	add	r0, r8
   12a44:	f016 f92f 	bl	28ca6 <z_impl_k_mutex_init>
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   12a48:	228c      	movs	r2, #140	; 0x8c
   12a4a:	fb02 880b 	mla	r8, r2, fp, r8
   12a4e:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   12a52:	f043 0301 	orr.w	r3, r3, #1
   12a56:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
		*context = &contexts[i];
   12a5a:	9b01      	ldr	r3, [sp, #4]
   12a5c:	601c      	str	r4, [r3, #0]
		ret = 0;
   12a5e:	2400      	movs	r4, #0
		break;
   12a60:	e7ab      	b.n	129ba <net_context_get+0x92>
			addr6->sin6_port = find_available_port(&contexts[i],
   12a62:	4649      	mov	r1, r9
   12a64:	4620      	mov	r0, r4
   12a66:	f7ff fefb 	bl	12860 <find_available_port>
   12a6a:	f8a9 0002 	strh.w	r0, [r9, #2]
			if (!addr6->sin6_port) {
   12a6e:	2800      	cmp	r0, #0
   12a70:	d1dd      	bne.n	12a2e <net_context_get+0x106>
				ret = -EADDRINUSE;
   12a72:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   12a76:	e7a0      	b.n	129ba <net_context_get+0x92>
			return -EPFNOSUPPORT;
   12a78:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   12a7c:	e7a0      	b.n	129c0 <net_context_get+0x98>
			return -EAFNOSUPPORT;
   12a7e:	f06f 0469 	mvn.w	r4, #105	; 0x69
   12a82:	e79d      	b.n	129c0 <net_context_get+0x98>
				return -EPROTOTYPE;
   12a84:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   12a88:	e79a      	b.n	129c0 <net_context_get+0x98>
				return -EPROTONOSUPPORT;
   12a8a:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   12a8e:	e797      	b.n	129c0 <net_context_get+0x98>
			return -EINVAL;
   12a90:	f06f 0415 	mvn.w	r4, #21
   12a94:	e794      	b.n	129c0 <net_context_get+0x98>
   12a96:	bf00      	nop
   12a98:	200227fc 	.word	0x200227fc
   12a9c:	20022b44 	.word	0x20022b44

00012aa0 <net_context_put>:
{
   12aa0:	b570      	push	{r4, r5, r6, lr}
	if (!PART_OF_ARRAY(contexts, context)) {
   12aa2:	4604      	mov	r4, r0
   12aa4:	b1d8      	cbz	r0, 12ade <net_context_put+0x3e>
   12aa6:	4b0f      	ldr	r3, [pc, #60]	; (12ae4 <net_context_put+0x44>)
   12aa8:	4298      	cmp	r0, r3
   12aaa:	d318      	bcc.n	12ade <net_context_put+0x3e>
   12aac:	f503 7352 	add.w	r3, r3, #840	; 0x348
   12ab0:	4298      	cmp	r0, r3
   12ab2:	d214      	bcs.n	12ade <net_context_put+0x3e>
	context->connect_cb = NULL;
   12ab4:	2500      	movs	r5, #0
	k_mutex_lock(&context->lock, K_FOREVER);
   12ab6:	f100 0608 	add.w	r6, r0, #8
   12aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12ac2:	4630      	mov	r0, r6
   12ac4:	f012 ff51 	bl	2596a <k_mutex_lock.constprop.0>
	net_context_unref(context);
   12ac8:	4620      	mov	r0, r4
	context->send_cb = NULL;
   12aca:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
	context->connect_cb = NULL;
   12ace:	64e5      	str	r5, [r4, #76]	; 0x4c
	net_context_unref(context);
   12ad0:	f012 ff57 	bl	25982 <net_context_unref>
	k_mutex_unlock(&context->lock);
   12ad4:	4630      	mov	r0, r6
   12ad6:	f012 ff46 	bl	25966 <k_mutex_unlock>
	return ret;
   12ada:	4628      	mov	r0, r5
}
   12adc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   12ade:	f06f 0015 	mvn.w	r0, #21
   12ae2:	e7fb      	b.n	12adc <net_context_put+0x3c>
   12ae4:	200227fc 	.word	0x200227fc

00012ae8 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     k_timeout_t timeout,
		     void *user_data)
{
   12ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12aec:	461f      	mov	r7, r3
	return context->flags & NET_CONTEXT_IN_USE;
   12aee:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
   12af2:	4604      	mov	r4, r0
	int ret;
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   12af4:	07db      	lsls	r3, r3, #31
{
   12af6:	4689      	mov	r9, r1
   12af8:	4616      	mov	r6, r2
   12afa:	b091      	sub	sp, #68	; 0x44
	if (!net_context_is_used(context)) {
   12afc:	f140 808a 	bpl.w	12c14 <net_context_recv+0x12c>
		return -EBADF;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
   12b00:	f100 0808 	add.w	r8, r0, #8
   12b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12b0c:	4640      	mov	r0, r8
   12b0e:	f012 ff2c 	bl	2596a <k_mutex_lock.constprop.0>
			net_context_get_iface(context),
			context, cb, timeout, user_data);
		goto unlock;
	}

	if (IS_ENABLED(CONFIG_NET_UDP) &&
   12b12:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
   12b16:	2b11      	cmp	r3, #17
   12b18:	d179      	bne.n	12c0e <net_context_recv+0x126>
	struct sockaddr local_addr = {
   12b1a:	2218      	movs	r2, #24
   12b1c:	2100      	movs	r1, #0
   12b1e:	a80a      	add	r0, sp, #40	; 0x28
   12b20:	f016 fce1 	bl	294e6 <memset>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   12b24:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	if (context->conn_handler) {
   12b28:	6c20      	ldr	r0, [r4, #64]	; 0x40
   12b2a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	struct sockaddr local_addr = {
   12b2e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	if (context->conn_handler) {
   12b32:	b118      	cbz	r0, 12b3c <net_context_recv+0x54>
		net_conn_unregister(context->conn_handler);
   12b34:	f001 f8ea 	bl	13d0c <net_conn_unregister>
		context->conn_handler = NULL;
   12b38:	2300      	movs	r3, #0
   12b3a:	6423      	str	r3, [r4, #64]	; 0x40
	ret = bind_default(context);
   12b3c:	4620      	mov	r0, r4
   12b3e:	f012 ff95 	bl	25a6c <bind_default>
	if (ret) {
   12b42:	4605      	mov	r5, r0
   12b44:	2800      	cmp	r0, #0
   12b46:	d142      	bne.n	12bce <net_context_recv+0xe6>
   12b48:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   12b4c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12b50:	2b02      	cmp	r3, #2
   12b52:	d15a      	bne.n	12c0a <net_context_recv+0x122>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   12b54:	6a23      	ldr	r3, [r4, #32]
   12b56:	b18b      	cbz	r3, 12b7c <net_context_recv+0x94>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   12b58:	ad06      	add	r5, sp, #24
   12b5a:	462a      	mov	r2, r5
   12b5c:	f103 0e10 	add.w	lr, r3, #16
   12b60:	46ac      	mov	ip, r5
   12b62:	6818      	ldr	r0, [r3, #0]
   12b64:	6859      	ldr	r1, [r3, #4]
   12b66:	3308      	adds	r3, #8
   12b68:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   12b6c:	4573      	cmp	r3, lr
   12b6e:	4665      	mov	r5, ip
   12b70:	d1f6      	bne.n	12b60 <net_context_recv+0x78>
   12b72:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   12b74:	ad0b      	add	r5, sp, #44	; 0x2c
   12b76:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   12b7a:	ab0a      	add	r3, sp, #40	; 0x28
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   12b7c:	8be5      	ldrh	r5, [r4, #30]
		net_sin6(&local_addr)->sin6_port =
   12b7e:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
				ntohs(net_sin(&context->remote)->sin_port),
   12b82:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
	ret = net_conn_register(net_context_get_ip_proto(context),
   12b86:	ba6d      	rev16	r5, r5
   12b88:	b2ad      	uxth	r5, r5
				net_context_get_family(context),
   12b8a:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
	ret = net_conn_register(net_context_get_ip_proto(context),
   12b8e:	f104 0e40 	add.w	lr, r4, #64	; 0x40
   12b92:	9501      	str	r5, [sp, #4]
				ntohs(net_sin(&context->remote)->sin_port),
   12b94:	ea4f 250c 	mov.w	r5, ip, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   12b98:	9918      	ldr	r1, [sp, #96]	; 0x60
   12b9a:	f8cd e010 	str.w	lr, [sp, #16]
				ntohs(net_sin(&context->remote)->sin_port),
   12b9e:	ea45 251c 	orr.w	r5, r5, ip, lsr #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   12ba2:	f8df e078 	ldr.w	lr, [pc, #120]	; 12c1c <net_context_recv+0x134>
	context->recv_cb = cb;
   12ba6:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ret = net_conn_register(net_context_get_ip_proto(context),
   12baa:	b2ad      	uxth	r5, r5
   12bac:	f3c2 09c2 	ubfx	r9, r2, #3, #3
   12bb0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
   12bb4:	9103      	str	r1, [sp, #12]
   12bb6:	9500      	str	r5, [sp, #0]
   12bb8:	4649      	mov	r1, r9
   12bba:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
   12bbe:	bf18      	it	ne
   12bc0:	f104 0228 	addne.w	r2, r4, #40	; 0x28
   12bc4:	f8cd e008 	str.w	lr, [sp, #8]
   12bc8:	f000 ffbe 	bl	13b48 <net_conn_register>
   12bcc:	4605      	mov	r5, r0
		} else {
			ret = -EPROTOTYPE;
		}
	}

	if (ret < 0) {
   12bce:	2d00      	cmp	r5, #0
   12bd0:	db14      	blt.n	12bfc <net_context_recv+0x114>
		goto unlock;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   12bd2:	ea56 0307 	orrs.w	r3, r6, r7
   12bd6:	d011      	beq.n	12bfc <net_context_recv+0x114>
	sem->count = 0U;
   12bd8:	2300      	movs	r3, #0
		 * net_context_packet_received() callback will release the
		 * semaphore when data has been received.
		 */
		k_sem_reset(&context->recv_data_wait);

		k_mutex_unlock(&context->lock);
   12bda:	4640      	mov	r0, r8
   12bdc:	65a3      	str	r3, [r4, #88]	; 0x58
   12bde:	f012 fec2 	bl	25966 <k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   12be2:	4632      	mov	r2, r6
   12be4:	463b      	mov	r3, r7
   12be6:	f104 0050 	add.w	r0, r4, #80	; 0x50
   12bea:	f00d fdbd 	bl	20768 <z_impl_k_sem_take>

		ret = k_sem_take(&context->recv_data_wait, timeout);

		k_mutex_lock(&context->lock, K_FOREVER);
   12bee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12bf6:	4640      	mov	r0, r8
   12bf8:	f012 feb7 	bl	2596a <k_mutex_lock.constprop.0>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

unlock:
	k_mutex_unlock(&context->lock);
   12bfc:	4640      	mov	r0, r8
   12bfe:	f012 feb2 	bl	25966 <k_mutex_unlock>

	return ret;
}
   12c02:	4628      	mov	r0, r5
   12c04:	b011      	add	sp, #68	; 0x44
   12c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct sockaddr *laddr = NULL;
   12c0a:	4603      	mov	r3, r0
   12c0c:	e7b9      	b.n	12b82 <net_context_recv+0x9a>
			ret = -EPROTOTYPE;
   12c0e:	f06f 056a 	mvn.w	r5, #106	; 0x6a
   12c12:	e7f3      	b.n	12bfc <net_context_recv+0x114>
		return -EBADF;
   12c14:	f06f 0508 	mvn.w	r5, #8
   12c18:	e7f3      	b.n	12c02 <net_context_recv+0x11a>
   12c1a:	bf00      	nop
   12c1c:	0001288d 	.word	0x0001288d

00012c20 <net_context_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   12c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12c24:	2101      	movs	r1, #1
   12c26:	4801      	ldr	r0, [pc, #4]	; (12c2c <net_context_init+0xc>)
   12c28:	f016 b9e3 	b.w	28ff2 <z_impl_k_sem_init>
   12c2c:	20022b44 	.word	0x20022b44

00012c30 <net_pkt_alloc_buffer>:
int net_pkt_alloc_buffer(struct net_pkt *pkt,
			 size_t size,
			 enum net_ip_protocol proto,
			 k_timeout_t timeout)
#endif
{
   12c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c34:	4680      	mov	r8, r0
   12c36:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
   12c3a:	468a      	mov	sl, r1
	u64_t end = z_timeout_end_calc(timeout);
   12c3c:	4620      	mov	r0, r4
   12c3e:	4629      	mov	r1, r5
{
   12c40:	4616      	mov	r6, r2
	u64_t end = z_timeout_end_calc(timeout);
   12c42:	f016 fac3 	bl	291cc <z_timeout_end_calc>
   12c46:	4681      	mov	r9, r0
   12c48:	468b      	mov	fp, r1
	struct net_buf_pool *pool = NULL;
	size_t alloc_len = 0;
	size_t hdr_len = 0;
	struct net_buf *buf;

	if (!size && proto == 0 && net_pkt_family(pkt) == AF_UNSPEC) {
   12c4a:	f1ba 0f00 	cmp.w	sl, #0
   12c4e:	d107      	bne.n	12c60 <net_pkt_alloc_buffer+0x30>
   12c50:	b936      	cbnz	r6, 12c60 <net_pkt_alloc_buffer+0x30>
	return pkt->family;
   12c52:	f898 303b 	ldrb.w	r3, [r8, #59]	; 0x3b
   12c56:	f013 0f0e 	tst.w	r3, #14
   12c5a:	f3c3 0042 	ubfx	r0, r3, #1, #3
   12c5e:	d05c      	beq.n	12d1a <net_pkt_alloc_buffer+0xea>
		return 0;
	}

	if (k_is_in_isr()) {
   12c60:	f016 f9d7 	bl	29012 <k_is_in_isr>
   12c64:	b108      	cbz	r0, 12c6a <net_pkt_alloc_buffer+0x3a>
		timeout = K_NO_WAIT;
   12c66:	2400      	movs	r4, #0
   12c68:	2500      	movs	r5, #0
	}

	/* Verifying existing buffer and take into account free space there */
	alloc_len = pkt_get_size(pkt) - net_pkt_get_len(pkt);
   12c6a:	f8d8 0010 	ldr.w	r0, [r8, #16]
	size_t size = 0;
   12c6e:	2100      	movs	r1, #0
	struct net_buf *buf = pkt->buffer;
   12c70:	4607      	mov	r7, r0
	while (buf) {
   12c72:	2f00      	cmp	r7, #0
   12c74:	d154      	bne.n	12d20 <net_pkt_alloc_buffer+0xf0>
}
#endif /* CONFIG_NET_PKT_TXTIME */

static inline size_t net_pkt_get_len(struct net_pkt *pkt)
{
	return net_buf_frags_len(pkt->frags);
   12c76:	f013 f957 	bl	25f28 <net_buf_frags_len>
	if (!alloc_len) {
   12c7a:	f898 c03b 	ldrb.w	ip, [r8, #59]	; 0x3b
   12c7e:	4288      	cmp	r0, r1
   12c80:	f3cc 0c42 	ubfx	ip, ip, #1, #3
   12c84:	d156      	bne.n	12d34 <net_pkt_alloc_buffer+0x104>
		/* In case of no free space, it will account for header
		 * space estimation
		 */
		hdr_len = pkt_estimate_headers_length(pkt,
   12c86:	fa1f f38c 	uxth.w	r3, ip
	if (family == AF_UNSPEC) {
   12c8a:	f1bc 0f00 	cmp.w	ip, #0
   12c8e:	d051      	beq.n	12d34 <net_pkt_alloc_buffer+0x104>
	size_t hdr_len = 0;
   12c90:	2b02      	cmp	r3, #2
   12c92:	bf0c      	ite	eq
   12c94:	2228      	moveq	r2, #40	; 0x28
   12c96:	2200      	movne	r2, #0
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   12c98:	2e11      	cmp	r6, #17
   12c9a:	d145      	bne.n	12d28 <net_pkt_alloc_buffer+0xf8>
		hdr_len += NET_UDPH_LEN;
   12c9c:	3208      	adds	r2, #8
	if (net_pkt_iface(pkt)) {
   12c9e:	f8d8 3020 	ldr.w	r3, [r8, #32]
						      net_pkt_family(pkt),
						      proto);
	}

	/* Calculate the maximum that can be allocated depending on size */
	alloc_len = pkt_buffer_length(pkt, size + hdr_len, proto, alloc_len);
   12ca2:	4492      	add	sl, r2
	if (net_pkt_iface(pkt)) {
   12ca4:	b10b      	cbz	r3, 12caa <net_pkt_alloc_buffer+0x7a>
	return iface->if_dev->mtu;
   12ca6:	681b      	ldr	r3, [r3, #0]
		max_len = net_if_get_mtu(net_pkt_iface(pkt));
   12ca8:	8b1b      	ldrh	r3, [r3, #24]
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   12caa:	f1bc 0f02 	cmp.w	ip, #2
   12cae:	d143      	bne.n	12d38 <net_pkt_alloc_buffer+0x108>
		max_len = MAX(max_len, NET_IPV6_MTU);
   12cb0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   12cb4:	bf38      	it	cc
   12cb6:	f44f 63a0 	movcc.w	r3, #1280	; 0x500
	max_len -= existing;
   12cba:	1a46      	subs	r6, r0, r1
   12cbc:	441e      	add	r6, r3
	if (pkt->context) {
		pool = get_data_pool(pkt->context);
	}

	if (!pool) {
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
   12cbe:	f8d8 000c 	ldr.w	r0, [r8, #12]
   12cc2:	4b37      	ldr	r3, [pc, #220]	; (12da0 <net_pkt_alloc_buffer+0x170>)
   12cc4:	4937      	ldr	r1, [pc, #220]	; (12da4 <net_pkt_alloc_buffer+0x174>)
   12cc6:	4a38      	ldr	r2, [pc, #224]	; (12da8 <net_pkt_alloc_buffer+0x178>)
	return MIN(size, max_len);
   12cc8:	4556      	cmp	r6, sl
   12cca:	bf28      	it	cs
   12ccc:	4656      	movcs	r6, sl
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
   12cce:	4288      	cmp	r0, r1
   12cd0:	bf0c      	ite	eq
   12cd2:	4692      	moveq	sl, r2
   12cd4:	469a      	movne	sl, r3
	}

	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   12cd6:	ea54 0305 	orrs.w	r3, r4, r5
   12cda:	d010      	beq.n	12cfe <net_pkt_alloc_buffer+0xce>
   12cdc:	1c69      	adds	r1, r5, #1
   12cde:	bf08      	it	eq
   12ce0:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   12ce4:	d00b      	beq.n	12cfe <net_pkt_alloc_buffer+0xce>
	    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
		s64_t remaining = end - z_tick_get();
   12ce6:	f00d ffcb 	bl	20c80 <z_tick_get>
   12cea:	ebb9 0400 	subs.w	r4, r9, r0
   12cee:	eb6b 0501 	sbc.w	r5, fp, r1
   12cf2:	2c00      	cmp	r4, #0
   12cf4:	f175 0300 	sbcs.w	r3, r5, #0
   12cf8:	bfbc      	itt	lt
   12cfa:	2400      	movlt	r4, #0
   12cfc:	2500      	movlt	r5, #0
	u64_t end = z_timeout_end_calc(timeout);
   12cfe:	4620      	mov	r0, r4
   12d00:	4629      	mov	r1, r5
   12d02:	f016 fa63 	bl	291cc <z_timeout_end_calc>
   12d06:	468b      	mov	fp, r1
   12d08:	4681      	mov	r9, r0
	struct net_buf *current = NULL;
   12d0a:	2100      	movs	r1, #0
	while (size) {
   12d0c:	b9b6      	cbnz	r6, 12d3c <net_pkt_alloc_buffer+0x10c>
	buf = pkt_alloc_buffer(pool, alloc_len, timeout, caller, line);
#else
	buf = pkt_alloc_buffer(pool, alloc_len, timeout);
#endif

	if (!buf) {
   12d0e:	b1ff      	cbz	r7, 12d50 <net_pkt_alloc_buffer+0x120>
		NET_ERR("Data buffer (%zd) allocation failed.", alloc_len);
#endif
		return -ENOMEM;
	}

	net_pkt_append_buffer(pkt, buf);
   12d10:	4640      	mov	r0, r8
   12d12:	4639      	mov	r1, r7
   12d14:	f013 fa72 	bl	261fc <net_pkt_append_buffer>

	return 0;
   12d18:	2000      	movs	r0, #0
}
   12d1a:	b003      	add	sp, #12
   12d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		size += buf->size;
   12d20:	89fb      	ldrh	r3, [r7, #14]
		buf = buf->frags;
   12d22:	683f      	ldr	r7, [r7, #0]
		size += buf->size;
   12d24:	4419      	add	r1, r3
		buf = buf->frags;
   12d26:	e7a4      	b.n	12c72 <net_pkt_alloc_buffer+0x42>
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
   12d28:	2e01      	cmp	r6, #1
   12d2a:	d001      	beq.n	12d30 <net_pkt_alloc_buffer+0x100>
   12d2c:	2e3a      	cmp	r6, #58	; 0x3a
   12d2e:	d1b6      	bne.n	12c9e <net_pkt_alloc_buffer+0x6e>
		hdr_len += NET_ICMPH_LEN;
   12d30:	3204      	adds	r2, #4
   12d32:	e7b4      	b.n	12c9e <net_pkt_alloc_buffer+0x6e>
	size_t hdr_len = 0;
   12d34:	463a      	mov	r2, r7
   12d36:	e7b2      	b.n	12c9e <net_pkt_alloc_buffer+0x6e>
			max_len = size;
   12d38:	4653      	mov	r3, sl
   12d3a:	e7be      	b.n	12cba <net_pkt_alloc_buffer+0x8a>
		new = net_buf_alloc_fixed(pool, timeout);
   12d3c:	462b      	mov	r3, r5
   12d3e:	4622      	mov	r2, r4
   12d40:	4650      	mov	r0, sl
   12d42:	9101      	str	r1, [sp, #4]
   12d44:	f011 ffe7 	bl	24d16 <net_buf_alloc_fixed>
		if (!new) {
   12d48:	9901      	ldr	r1, [sp, #4]
   12d4a:	4603      	mov	r3, r0
   12d4c:	b918      	cbnz	r0, 12d56 <net_pkt_alloc_buffer+0x126>
	if (first) {
   12d4e:	bb1f      	cbnz	r7, 12d98 <net_pkt_alloc_buffer+0x168>
		return -ENOMEM;
   12d50:	f06f 000b 	mvn.w	r0, #11
   12d54:	e7e1      	b.n	12d1a <net_pkt_alloc_buffer+0xea>
		if (!first && !current) {
   12d56:	b907      	cbnz	r7, 12d5a <net_pkt_alloc_buffer+0x12a>
   12d58:	b1e1      	cbz	r1, 12d94 <net_pkt_alloc_buffer+0x164>
			current->frags = new;
   12d5a:	600b      	str	r3, [r1, #0]
		if (current->size > size) {
   12d5c:	89da      	ldrh	r2, [r3, #14]
   12d5e:	42b2      	cmp	r2, r6
			current->size = size;
   12d60:	bf88      	it	hi
   12d62:	81de      	strhhi	r6, [r3, #14]
		size -= current->size;
   12d64:	89da      	ldrh	r2, [r3, #14]
   12d66:	1ab6      	subs	r6, r6, r2
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   12d68:	ea54 0205 	orrs.w	r2, r4, r5
   12d6c:	d010      	beq.n	12d90 <net_pkt_alloc_buffer+0x160>
   12d6e:	1c6a      	adds	r2, r5, #1
   12d70:	bf08      	it	eq
   12d72:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   12d76:	d00b      	beq.n	12d90 <net_pkt_alloc_buffer+0x160>
   12d78:	9301      	str	r3, [sp, #4]
			s64_t remaining = end - z_tick_get();
   12d7a:	f00d ff81 	bl	20c80 <z_tick_get>
   12d7e:	ebb9 0400 	subs.w	r4, r9, r0
   12d82:	eb6b 0501 	sbc.w	r5, fp, r1
			if (remaining <= 0) {
   12d86:	2c01      	cmp	r4, #1
   12d88:	f175 0300 	sbcs.w	r3, r5, #0
   12d8c:	9b01      	ldr	r3, [sp, #4]
   12d8e:	dbbe      	blt.n	12d0e <net_pkt_alloc_buffer+0xde>
   12d90:	4619      	mov	r1, r3
   12d92:	e7bb      	b.n	12d0c <net_pkt_alloc_buffer+0xdc>
   12d94:	4607      	mov	r7, r0
   12d96:	e7e1      	b.n	12d5c <net_pkt_alloc_buffer+0x12c>
		net_buf_unref(first);
   12d98:	4638      	mov	r0, r7
   12d9a:	f7fe fe8f 	bl	11abc <net_buf_unref>
	if (!buf) {
   12d9e:	e7d7      	b.n	12d50 <net_pkt_alloc_buffer+0x120>
   12da0:	2002098c 	.word	0x2002098c
   12da4:	20020880 	.word	0x20020880
   12da8:	200209b4 	.word	0x200209b4

00012dac <net_pkt_alloc_with_buffer>:
					  size_t size,
					  sa_family_t family,
					  enum net_ip_protocol proto,
					  k_timeout_t timeout)
#endif
{
   12dac:	b530      	push	{r4, r5, lr}
   12dae:	b085      	sub	sp, #20
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
				     proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
   12db0:	9300      	str	r3, [sp, #0]
   12db2:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   12db6:	4613      	mov	r3, r2
   12db8:	e9cd 4502 	strd	r4, r5, [sp, #8]
   12dbc:	460a      	mov	r2, r1
   12dbe:	4601      	mov	r1, r0
   12dc0:	4802      	ldr	r0, [pc, #8]	; (12dcc <net_pkt_alloc_with_buffer+0x20>)
   12dc2:	f013 fa2c 	bl	2621e <pkt_alloc_with_buffer>
				     proto, timeout);
#endif
}
   12dc6:	b005      	add	sp, #20
   12dc8:	bd30      	pop	{r4, r5, pc}
   12dca:	bf00      	nop
   12dcc:	20020880 	.word	0x20020880

00012dd0 <net_tc_submit_to_tx_queue>:

static struct net_traffic_class tx_classes[NET_TC_TX_COUNT];
static struct net_traffic_class rx_classes[NET_TC_RX_COUNT];

bool net_tc_submit_to_tx_queue(u8_t tc, struct net_pkt *pkt)
{
   12dd0:	b508      	push	{r3, lr}
   12dd2:	460b      	mov	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12dd4:	3308      	adds	r3, #8
   12dd6:	e8d3 3faf 	lda	r3, [r3]
	if (k_work_pending(net_pkt_work(pkt))) {
   12dda:	07db      	lsls	r3, r3, #31
   12ddc:	d407      	bmi.n	12dee <net_tc_submit_to_tx_queue+0x1e>
		return false;
	}

	k_work_submit_to_queue(&tx_classes[tc].work_q, net_pkt_work(pkt));
   12dde:	22d8      	movs	r2, #216	; 0xd8
   12de0:	4b04      	ldr	r3, [pc, #16]	; (12df4 <net_tc_submit_to_tx_queue+0x24>)
   12de2:	fb00 3002 	mla	r0, r0, r2, r3
   12de6:	f013 fbdc 	bl	265a2 <k_work_submit_to_queue>

	return true;
   12dea:	2001      	movs	r0, #1
}
   12dec:	bd08      	pop	{r3, pc}
		return false;
   12dee:	2000      	movs	r0, #0
   12df0:	e7fc      	b.n	12dec <net_tc_submit_to_tx_queue+0x1c>
   12df2:	bf00      	nop
   12df4:	20022c34 	.word	0x20022c34

00012df8 <net_tx_priority2tc>:

int net_tx_priority2tc(enum net_priority prio)
{
	if (prio > NET_PRIORITY_NC) {
		/* Use default value suggested in 802.1Q */
		prio = NET_PRIORITY_BE;
   12df8:	2807      	cmp	r0, #7
   12dfa:	bf88      	it	hi
   12dfc:	2000      	movhi	r0, #0
	}

	return tx_prio2tc_map[prio];
}
   12dfe:	4b01      	ldr	r3, [pc, #4]	; (12e04 <net_tx_priority2tc+0xc>)
   12e00:	5c18      	ldrb	r0, [r3, r0]
   12e02:	4770      	bx	lr
   12e04:	0002bdbb 	.word	0x0002bdbb

00012e08 <net_tc_tx_init>:

	for (i = 0; i < NET_TC_TX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = tx_tc2thread(i);
		tx_classes[i].tc = thread_priority;
   12e08:	2307      	movs	r3, #7
{
   12e0a:	b510      	push	{r4, lr}
		tx_classes[i].tc = thread_priority;
   12e0c:	4c08      	ldr	r4, [pc, #32]	; (12e30 <net_tc_tx_init+0x28>)
			"prio %d (%d)", i,
			&tx_classes[i].work_q.queue,
			K_THREAD_STACK_SIZEOF(tx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&tx_classes[i].work_q,
   12e0e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
		tx_classes[i].tc = thread_priority;
   12e12:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		k_work_q_start(&tx_classes[i].work_q,
   12e16:	4620      	mov	r0, r4
   12e18:	f06f 0308 	mvn.w	r3, #8
   12e1c:	4905      	ldr	r1, [pc, #20]	; (12e34 <net_tc_tx_init+0x2c>)
   12e1e:	f00d fd99 	bl	20954 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   12e22:	4905      	ldr	r1, [pc, #20]	; (12e38 <net_tc_tx_init+0x30>)
   12e24:	f104 0018 	add.w	r0, r4, #24
			       tx_stack[i],
			       K_THREAD_STACK_SIZEOF(tx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&tx_classes[i].work_q.thread, "tx_workq");
	}
}
   12e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12e2c:	f016 b8f9 	b.w	29022 <z_impl_k_thread_name_set>
   12e30:	20022c34 	.word	0x20022c34
   12e34:	2002b908 	.word	0x2002b908
   12e38:	0002bda9 	.word	0x0002bda9

00012e3c <net_tc_rx_init>:

	for (i = 0; i < NET_TC_RX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = rx_tc2thread(i);
		rx_classes[i].tc = thread_priority;
   12e3c:	2307      	movs	r3, #7
{
   12e3e:	b510      	push	{r4, lr}
		rx_classes[i].tc = thread_priority;
   12e40:	4c08      	ldr	r4, [pc, #32]	; (12e64 <net_tc_rx_init+0x28>)
			"prio %d (%d)", i,
			&rx_classes[i].work_q.queue,
			K_THREAD_STACK_SIZEOF(rx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&rx_classes[i].work_q,
   12e42:	f240 52dc 	movw	r2, #1500	; 0x5dc
		rx_classes[i].tc = thread_priority;
   12e46:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		k_work_q_start(&rx_classes[i].work_q,
   12e4a:	4620      	mov	r0, r4
   12e4c:	f06f 0308 	mvn.w	r3, #8
   12e50:	4905      	ldr	r1, [pc, #20]	; (12e68 <net_tc_rx_init+0x2c>)
   12e52:	f00d fd7f 	bl	20954 <k_work_q_start>
   12e56:	4905      	ldr	r1, [pc, #20]	; (12e6c <net_tc_rx_init+0x30>)
   12e58:	f104 0018 	add.w	r0, r4, #24
			       rx_stack[i],
			       K_THREAD_STACK_SIZEOF(rx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&rx_classes[i].work_q.thread, "rx_workq");
	}
}
   12e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12e60:	f016 b8df 	b.w	29022 <z_impl_k_thread_name_set>
   12e64:	20022b5c 	.word	0x20022b5c
   12e68:	2002bdb8 	.word	0x2002bdb8
   12e6c:	0002bdb2 	.word	0x0002bdb2

00012e70 <net_icmpv6_register_handler>:
Z_GENLIST_PREPEND(slist, snode)
   12e70:	4b03      	ldr	r3, [pc, #12]	; (12e80 <net_icmpv6_register_handler+0x10>)
   12e72:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   12e74:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
   12e76:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12e78:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   12e7a:	b902      	cbnz	r2, 12e7e <net_icmpv6_register_handler+0xe>
	list->tail = node;
   12e7c:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   12e7e:	4770      	bx	lr
   12e80:	20022d0c 	.word	0x20022d0c

00012e84 <net_icmpv6_input>:
}

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  struct net_ipv6_hdr *ip_hdr)
{
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   12e84:	2200      	movs	r2, #0
   12e86:	2304      	movs	r3, #4
{
   12e88:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12e8a:	460e      	mov	r6, r1
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv6_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   12e8c:	4669      	mov	r1, sp
{
   12e8e:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   12e90:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   12e94:	f013 fb5f 	bl	26556 <net_pkt_get_data>
	if (!icmp_hdr) {
   12e98:	4604      	mov	r4, r0
   12e9a:	b910      	cbnz	r0, 12ea2 <net_icmpv6_input+0x1e>
		NET_DBG("DROP: NULL ICMPv6 header");
		return NET_DROP;
   12e9c:	2002      	movs	r0, #2
	}
drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
   12e9e:	b002      	add	sp, #8
   12ea0:	bd70      	pop	{r4, r5, r6, pc}
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   12ea2:	213a      	movs	r1, #58	; 0x3a
   12ea4:	4628      	mov	r0, r5
   12ea6:	f012 fcd6 	bl	25856 <net_calc_chksum>
	if (net_calc_chksum_icmpv6(pkt) != 0U) {
   12eaa:	2800      	cmp	r0, #0
   12eac:	d1f6      	bne.n	12e9c <net_icmpv6_input+0x18>
 * Packet needs to be set to overwrite mode.
 */
static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
					   struct net_pkt_data_access *access)
{
	return net_pkt_skip(pkt, access->size);
   12eae:	4628      	mov	r0, r5
   12eb0:	9901      	ldr	r1, [sp, #4]
   12eb2:	f013 f9f4 	bl	2629e <net_pkt_skip>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   12eb6:	4b0b      	ldr	r3, [pc, #44]	; (12ee4 <net_icmpv6_input+0x60>)
   12eb8:	681b      	ldr	r3, [r3, #0]
   12eba:	2b00      	cmp	r3, #0
   12ebc:	d0ee      	beq.n	12e9c <net_icmpv6_input+0x18>
		if (cb->type == icmp_hdr->type &&
   12ebe:	7821      	ldrb	r1, [r4, #0]
   12ec0:	7a1a      	ldrb	r2, [r3, #8]
   12ec2:	428a      	cmp	r2, r1
   12ec4:	d10a      	bne.n	12edc <net_icmpv6_input+0x58>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
   12ec6:	7a5a      	ldrb	r2, [r3, #9]
		if (cb->type == icmp_hdr->type &&
   12ec8:	7860      	ldrb	r0, [r4, #1]
   12eca:	4290      	cmp	r0, r2
   12ecc:	d000      	beq.n	12ed0 <net_icmpv6_input+0x4c>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
   12ece:	b92a      	cbnz	r2, 12edc <net_icmpv6_input+0x58>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
   12ed0:	4622      	mov	r2, r4
   12ed2:	4631      	mov	r1, r6
   12ed4:	4628      	mov	r0, r5
   12ed6:	685b      	ldr	r3, [r3, #4]
   12ed8:	4798      	blx	r3
   12eda:	e7e0      	b.n	12e9e <net_icmpv6_input+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12edc:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   12ede:	2b00      	cmp	r3, #0
   12ee0:	d1ee      	bne.n	12ec0 <net_icmpv6_input+0x3c>
   12ee2:	e7db      	b.n	12e9c <net_icmpv6_input+0x18>
   12ee4:	20022d0c 	.word	0x20022d0c

00012ee8 <net_icmpv6_init>:
	.handler = icmpv6_handle_echo_request,
};

void net_icmpv6_init(void)
{
	net_icmpv6_register_handler(&echo_request_handler);
   12ee8:	4801      	ldr	r0, [pc, #4]	; (12ef0 <net_icmpv6_init+0x8>)
   12eea:	f7ff bfc1 	b.w	12e70 <net_icmpv6_register_handler>
   12eee:	bf00      	nop
   12ef0:	200200bc 	.word	0x200200bc

00012ef4 <net_nbr_link>:
	return NULL;
}

int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 const struct net_linkaddr *lladdr)
{
   12ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   12ef8:	7843      	ldrb	r3, [r0, #1]
{
   12efa:	4606      	mov	r6, r0
	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   12efc:	2bff      	cmp	r3, #255	; 0xff
{
   12efe:	4689      	mov	r9, r1
   12f00:	4614      	mov	r4, r2
	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   12f02:	d149      	bne.n	12f98 <net_nbr_link+0xa4>
   12f04:	f8df a09c 	ldr.w	sl, [pc, #156]	; 12fa4 <net_nbr_link+0xb0>
	int i, avail = -1;
   12f08:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   12f0c:	2700      	movs	r7, #0
   12f0e:	46d0      	mov	r8, sl
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   12f10:	1c6a      	adds	r2, r5, #1
   12f12:	f89a 3008 	ldrb.w	r3, [sl, #8]
   12f16:	d115      	bne.n	12f44 <net_nbr_link+0x50>
   12f18:	2b00      	cmp	r3, #0
   12f1a:	d03b      	beq.n	12f94 <net_nbr_link+0xa0>
			avail = i;
		}

		if (net_neighbor_lladdr[i].ref &&
		    !memcmp(lladdr->addr,
   12f1c:	7922      	ldrb	r2, [r4, #4]
   12f1e:	6820      	ldr	r0, [r4, #0]
   12f20:	f10a 0102 	add.w	r1, sl, #2
   12f24:	f016 fa97 	bl	29456 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   12f28:	b970      	cbnz	r0, 12f48 <net_nbr_link+0x54>
			    net_neighbor_lladdr[i].lladdr.addr,
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   12f2a:	eb07 03c7 	add.w	r3, r7, r7, lsl #3
   12f2e:	4498      	add	r8, r3
   12f30:	f898 3008 	ldrb.w	r3, [r8, #8]
   12f34:	3301      	adds	r3, #1
   12f36:	f888 3008 	strb.w	r3, [r8, #8]

			nbr->idx = i;
   12f3a:	7077      	strb	r7, [r6, #1]
			nbr->iface = iface;
   12f3c:	f8c6 9008 	str.w	r9, [r6, #8]
	net_neighbor_lladdr[avail].lladdr.type = lladdr->type;

	nbr->iface = iface;

	return 0;
}
   12f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (net_neighbor_lladdr[i].ref &&
   12f44:	2b00      	cmp	r3, #0
   12f46:	d1e9      	bne.n	12f1c <net_nbr_link+0x28>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   12f48:	3701      	adds	r7, #1
   12f4a:	2f08      	cmp	r7, #8
   12f4c:	f10a 0a09 	add.w	sl, sl, #9
   12f50:	d1de      	bne.n	12f10 <net_nbr_link+0x1c>
	if (avail < 0) {
   12f52:	1c6b      	adds	r3, r5, #1
   12f54:	d023      	beq.n	12f9e <net_nbr_link+0xaa>
	net_neighbor_lladdr[avail].ref++;
   12f56:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   12f5a:	eb08 0300 	add.w	r3, r8, r0
   12f5e:	7a1a      	ldrb	r2, [r3, #8]
   12f60:	00ef      	lsls	r7, r5, #3
   12f62:	3201      	adds	r2, #1
   12f64:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   12f66:	7075      	strb	r5, [r6, #1]
	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   12f68:	6821      	ldr	r1, [r4, #0]
   12f6a:	7922      	ldrb	r2, [r4, #4]
	if (!lladdr_store || !new_addr) {
   12f6c:	b131      	cbz	r1, 12f7c <net_nbr_link+0x88>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   12f6e:	2a06      	cmp	r2, #6
   12f70:	d804      	bhi.n	12f7c <net_nbr_link+0x88>
	memcpy(lladdr_store->addr, new_addr, new_len);
   12f72:	3002      	adds	r0, #2
	lladdr_store->len = new_len;
   12f74:	705a      	strb	r2, [r3, #1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12f76:	4440      	add	r0, r8
   12f78:	f016 fa7b 	bl	29472 <memcpy>
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   12f7c:	7922      	ldrb	r2, [r4, #4]
   12f7e:	443d      	add	r5, r7
   12f80:	eb08 0305 	add.w	r3, r8, r5
   12f84:	705a      	strb	r2, [r3, #1]
	net_neighbor_lladdr[avail].lladdr.type = lladdr->type;
   12f86:	7963      	ldrb	r3, [r4, #5]
	return 0;
   12f88:	2000      	movs	r0, #0
	net_neighbor_lladdr[avail].lladdr.type = lladdr->type;
   12f8a:	f808 3005 	strb.w	r3, [r8, r5]
	nbr->iface = iface;
   12f8e:	f8c6 9008 	str.w	r9, [r6, #8]
	return 0;
   12f92:	e7d5      	b.n	12f40 <net_nbr_link+0x4c>
   12f94:	463d      	mov	r5, r7
   12f96:	e7d7      	b.n	12f48 <net_nbr_link+0x54>
		return -EALREADY;
   12f98:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12f9c:	e7d0      	b.n	12f40 <net_nbr_link+0x4c>
		return -ENOENT;
   12f9e:	f06f 0001 	mvn.w	r0, #1
   12fa2:	e7cd      	b.n	12f40 <net_nbr_link+0x4c>
   12fa4:	20029e45 	.word	0x20029e45

00012fa8 <net_nbr_unlink>:

int net_nbr_unlink(struct net_nbr *nbr, struct net_linkaddr *lladdr)
{
   12fa8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(lladdr);

	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   12faa:	7841      	ldrb	r1, [r0, #1]
   12fac:	29ff      	cmp	r1, #255	; 0xff
   12fae:	d015      	beq.n	12fdc <net_nbr_unlink+0x34>
	}

	NET_ASSERT(nbr->idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
	NET_ASSERT(net_neighbor_lladdr[nbr->idx].ref > 0);

	net_neighbor_lladdr[nbr->idx].ref--;
   12fb0:	4c0c      	ldr	r4, [pc, #48]	; (12fe4 <net_nbr_unlink+0x3c>)
   12fb2:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
   12fb6:	4422      	add	r2, r4
   12fb8:	7a13      	ldrb	r3, [r2, #8]
   12fba:	3b01      	subs	r3, #1
   12fbc:	b2db      	uxtb	r3, r3
   12fbe:	7213      	strb	r3, [r2, #8]

	if (!net_neighbor_lladdr[nbr->idx].ref) {
   12fc0:	b933      	cbnz	r3, 12fd0 <net_nbr_unlink+0x28>
		(void)memset(net_neighbor_lladdr[nbr->idx].lladdr.addr, 0,
   12fc2:	2209      	movs	r2, #9
   12fc4:	2502      	movs	r5, #2
   12fc6:	fb12 5201 	smlabb	r2, r2, r1, r5
   12fca:	18a1      	adds	r1, r4, r2
__ssp_bos_icheck3(memset, void *, int)
   12fcc:	50a3      	str	r3, [r4, r2]
   12fce:	808b      	strh	r3, [r1, #4]
			     sizeof(net_neighbor_lladdr[nbr->idx].lladdr.addr));
	}

	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   12fd0:	23ff      	movs	r3, #255	; 0xff
   12fd2:	7043      	strb	r3, [r0, #1]
	nbr->iface = NULL;
   12fd4:	2300      	movs	r3, #0
   12fd6:	6083      	str	r3, [r0, #8]

	return 0;
   12fd8:	4618      	mov	r0, r3
}
   12fda:	bd30      	pop	{r4, r5, pc}
		return -EALREADY;
   12fdc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12fe0:	e7fb      	b.n	12fda <net_nbr_unlink+0x32>
   12fe2:	bf00      	nop
   12fe4:	20029e45 	.word	0x20029e45

00012fe8 <net_nbr_get_lladdr>:
	NET_ASSERT(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
		   "idx %d >= max %d", idx,
		   CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
}
   12fe8:	4b02      	ldr	r3, [pc, #8]	; (12ff4 <net_nbr_get_lladdr+0xc>)
	return &net_neighbor_lladdr[idx].lladdr;
   12fea:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   12fee:	4418      	add	r0, r3
   12ff0:	4770      	bx	lr
   12ff2:	bf00      	nop
   12ff4:	20029e45 	.word	0x20029e45

00012ff8 <nbr_lookup.isra.0>:
}
#else
#define nbr_print(...)
#endif

static struct net_nbr *nbr_lookup(struct net_nbr_table *table,
   12ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ffc:	4605      	mov	r5, r0
   12ffe:	4688      	mov	r8, r1
				  struct net_if *iface,
				  const struct in6_addr *addr)
{
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   13000:	2600      	movs	r6, #0
   13002:	4c0d      	ldr	r4, [pc, #52]	; (13038 <nbr_lookup.isra.0+0x40>)
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   13004:	7823      	ldrb	r3, [r4, #0]
   13006:	4627      	mov	r7, r4
   13008:	b943      	cbnz	r3, 1301c <nbr_lookup.isra.0+0x24>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1300a:	3601      	adds	r6, #1
   1300c:	2e08      	cmp	r6, #8
   1300e:	f104 0454 	add.w	r4, r4, #84	; 0x54
   13012:	d1f7      	bne.n	13004 <nbr_lookup.isra.0+0xc>
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
			return nbr;
		}
	}

	return NULL;
   13014:	2700      	movs	r7, #0
}
   13016:	4638      	mov	r0, r7
   13018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (iface && nbr->iface != iface) {
   1301c:	b115      	cbz	r5, 13024 <nbr_lookup.isra.0+0x2c>
   1301e:	68a3      	ldr	r3, [r4, #8]
   13020:	429d      	cmp	r5, r3
   13022:	d1f2      	bne.n	1300a <nbr_lookup.isra.0+0x12>
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
   13024:	68e0      	ldr	r0, [r4, #12]
   13026:	2210      	movs	r2, #16
   13028:	4641      	mov	r1, r8
   1302a:	3004      	adds	r0, #4
   1302c:	f016 fa13 	bl	29456 <memcmp>
   13030:	2800      	cmp	r0, #0
   13032:	d1ea      	bne.n	1300a <nbr_lookup.isra.0+0x12>
   13034:	e7ef      	b.n	13016 <nbr_lookup.isra.0+0x1e>
   13036:	bf00      	nop
   13038:	200200e0 	.word	0x200200e0

0001303c <dbg_update_neighbor_lladdr.isra.0>:
		log_strdup(net_sprint_ipv6_addr(addr)));

	return nbr;
}

static void dbg_update_neighbor_lladdr(const struct net_linkaddr *new_lladdr,
   1303c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   1303e:	2318      	movs	r3, #24
   13040:	7841      	ldrb	r1, [r0, #1]
   13042:	4a06      	ldr	r2, [pc, #24]	; (1305c <dbg_update_neighbor_lladdr.isra.0+0x20>)
   13044:	3002      	adds	r0, #2
   13046:	f7ff fbb3 	bl	127b0 <net_sprint_ll_addr_buf>
				       const struct net_linkaddr_storage *old_lladdr,
				       const struct in6_addr *addr)
{
	char out[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	snprintk(out, sizeof(out), "%s",
   1304a:	2118      	movs	r1, #24
   1304c:	4603      	mov	r3, r0
   1304e:	4a04      	ldr	r2, [pc, #16]	; (13060 <dbg_update_neighbor_lladdr.isra.0+0x24>)
   13050:	4668      	mov	r0, sp
   13052:	f010 ffab 	bl	23fac <snprintk>
	NET_DBG("Updating neighbor %s lladdr %s (was %s)",
		log_strdup(net_sprint_ipv6_addr(addr)),
		log_strdup(net_sprint_ll_addr(new_lladdr->addr,
					      new_lladdr->len)),
		log_strdup(out));
}
   13056:	b007      	add	sp, #28
   13058:	f85d fb04 	ldr.w	pc, [sp], #4
   1305c:	20029e8d 	.word	0x20029e8d
   13060:	0002b46f 	.word	0x0002b46f

00013064 <ipv6_nd_restart_reachable_timer>:
}
#endif /* CONFIG_NET_IPV6_NBR_CACHE */

#if defined(CONFIG_NET_IPV6_ND)
static void ipv6_nd_restart_reachable_timer(struct net_nbr *nbr, s64_t time)
{
   13064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13068:	4614      	mov	r4, r2
   1306a:	461d      	mov	r5, r3
	s64_t remaining;

	if (nbr) {
   1306c:	4606      	mov	r6, r0
   1306e:	b130      	cbz	r0, 1307e <ipv6_nd_restart_reachable_timer+0x1a>
		net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
   13070:	68c7      	ldr	r7, [r0, #12]
   13072:	f013 fe65 	bl	26d40 <k_uptime_get>
		net_ipv6_nbr_data(nbr)->reachable_timeout = time;
   13076:	68f3      	ldr	r3, [r6, #12]
		net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
   13078:	e9c7 0106 	strd	r0, r1, [r7, #24]
		net_ipv6_nbr_data(nbr)->reachable_timeout = time;
   1307c:	621c      	str	r4, [r3, #32]
	}

	remaining = k_delayed_work_remaining_get(&ipv6_nd_reachable_timer);
   1307e:	4814      	ldr	r0, [pc, #80]	; (130d0 <ipv6_nd_restart_reachable_timer+0x6c>)
   13080:	f013 fe6c 	bl	26d5c <k_delayed_work_remaining_get>
   13084:	17c3      	asrs	r3, r0, #31
	if (!remaining || remaining > time) {
   13086:	b118      	cbz	r0, 13090 <ipv6_nd_restart_reachable_timer+0x2c>
   13088:	4284      	cmp	r4, r0
   1308a:	eb75 0303 	sbcs.w	r3, r5, r3
   1308e:	da1c      	bge.n	130ca <ipv6_nd_restart_reachable_timer+0x66>
		k_delayed_work_submit(&ipv6_nd_reachable_timer, K_MSEC(time));
   13090:	2c00      	cmp	r4, #0
   13092:	f175 0300 	sbcs.w	r3, r5, #0
   13096:	4626      	mov	r6, r4
   13098:	bfb8      	it	lt
   1309a:	2600      	movlt	r6, #0
   1309c:	f240 34e7 	movw	r4, #999	; 0x3e7
 * @return The converted time value
 */
static TIME_CONSTEXPR inline u32_t k_ms_to_ticks_ceil32(u32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
   130a0:	2500      	movs	r5, #0
			return (u32_t)((t * to_hz + off) / from_hz);
   130a2:	03f0      	lsls	r0, r6, #15
   130a4:	1900      	adds	r0, r0, r4
   130a6:	ea4f 4156 	mov.w	r1, r6, lsr #17
   130aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   130ae:	f04f 0300 	mov.w	r3, #0
   130b2:	eb45 0101 	adc.w	r1, r5, r1
   130b6:	f7f9 fb7f 	bl	c7b8 <__aeabi_uldivmod>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   130ba:	462b      	mov	r3, r5
	}
}
   130bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   130c0:	4602      	mov	r2, r0
   130c2:	4903      	ldr	r1, [pc, #12]	; (130d0 <ipv6_nd_restart_reachable_timer+0x6c>)
   130c4:	4803      	ldr	r0, [pc, #12]	; (130d4 <ipv6_nd_restart_reachable_timer+0x70>)
   130c6:	f00d bc6d 	b.w	209a4 <k_delayed_work_submit_to_queue>
   130ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   130ce:	bf00      	nop
   130d0:	20022d14 	.word	0x20022d14
   130d4:	200280fc 	.word	0x200280fc

000130d8 <ipv6_nbr_set_state>:
{
   130d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   130da:	68c3      	ldr	r3, [r0, #12]
{
   130dc:	4604      	mov	r4, r0
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   130de:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   130e2:	428a      	cmp	r2, r1
   130e4:	d00d      	beq.n	13102 <ipv6_nbr_set_state+0x2a>
   130e6:	2a05      	cmp	r2, #5
   130e8:	d00b      	beq.n	13102 <ipv6_nbr_set_state+0x2a>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   130ea:	2902      	cmp	r1, #2
	net_ipv6_nbr_data(nbr)->state = new_state;
   130ec:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   130f0:	d107      	bne.n	13102 <ipv6_nbr_set_state+0x2a>
		if (stale_counter + 1 != UINT32_MAX) {
   130f2:	4917      	ldr	r1, [pc, #92]	; (13150 <ipv6_nbr_set_state+0x78>)
   130f4:	680a      	ldr	r2, [r1, #0]
   130f6:	460d      	mov	r5, r1
   130f8:	1c90      	adds	r0, r2, #2
   130fa:	d003      	beq.n	13104 <ipv6_nbr_set_state+0x2c>
			net_ipv6_nbr_data(nbr)->stale_counter = stale_counter++;
   130fc:	1c50      	adds	r0, r2, #1
   130fe:	6008      	str	r0, [r1, #0]
   13100:	639a      	str	r2, [r3, #56]	; 0x38
}
   13102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   13104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1310c:	4811      	ldr	r0, [pc, #68]	; (13154 <ipv6_nbr_set_state+0x7c>)
   1310e:	f00d fb2b 	bl	20768 <z_impl_k_sem_take>
			stale_counter = 0U;
   13112:	2300      	movs	r3, #0
				if (!n || !n->ref) {
   13114:	2754      	movs	r7, #84	; 0x54
			stale_counter = 0U;
   13116:	461a      	mov	r2, r3
			for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   13118:	4619      	mov	r1, r3
				if (!n || !n->ref) {
   1311a:	4e0f      	ldr	r6, [pc, #60]	; (13158 <ipv6_nbr_set_state+0x80>)
			stale_counter = 0U;
   1311c:	602b      	str	r3, [r5, #0]
				if (!n || !n->ref) {
   1311e:	fb07 f001 	mul.w	r0, r7, r1
   13122:	5d80      	ldrb	r0, [r0, r6]
   13124:	b148      	cbz	r0, 1313a <ipv6_nbr_set_state+0x62>
				data = net_ipv6_nbr_data(nbr);
   13126:	68e0      	ldr	r0, [r4, #12]
				if (!data) {
   13128:	b138      	cbz	r0, 1313a <ipv6_nbr_set_state+0x62>
				if (data->state != NET_IPV6_NBR_STATE_STALE) {
   1312a:	f890 c030 	ldrb.w	ip, [r0, #48]	; 0x30
   1312e:	f1bc 0f02 	cmp.w	ip, #2
				data->stale_counter = stale_counter++;
   13132:	bf02      	ittt	eq
   13134:	2301      	moveq	r3, #1
   13136:	6382      	streq	r2, [r0, #56]	; 0x38
   13138:	3201      	addeq	r2, #1
			for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1313a:	3101      	adds	r1, #1
   1313c:	2908      	cmp	r1, #8
   1313e:	d1ee      	bne.n	1311e <ipv6_nbr_set_state+0x46>
   13140:	b103      	cbz	r3, 13144 <ipv6_nbr_set_state+0x6c>
   13142:	602a      	str	r2, [r5, #0]
	z_impl_k_sem_give(sem);
   13144:	4803      	ldr	r0, [pc, #12]	; (13154 <ipv6_nbr_set_state+0x7c>)
}
   13146:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1314a:	f00d bae7 	b.w	2071c <z_impl_k_sem_give>
   1314e:	bf00      	nop
   13150:	20022d6c 	.word	0x20022d6c
   13154:	20022d54 	.word	0x20022d54
   13158:	200200e0 	.word	0x200200e0

0001315c <ipv6_ns_reply_timeout>:
{
   1315c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	s64_t current = k_uptime_get();
   13160:	f013 fdee 	bl	26d40 <k_uptime_get>
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
   13164:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   13168:	2700      	movs	r7, #0
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
   1316a:	1a24      	subs	r4, r4, r0
   1316c:	4d25      	ldr	r5, [pc, #148]	; (13204 <ipv6_ns_reply_timeout+0xa8>)
   1316e:	eb67 0a01 	sbc.w	sl, r7, r1
		if (!nbr || !nbr->ref) {
   13172:	782b      	ldrb	r3, [r5, #0]
   13174:	b363      	cbz	r3, 131d0 <ipv6_ns_reply_timeout+0x74>
		data = net_ipv6_nbr_data(nbr);
   13176:	68ee      	ldr	r6, [r5, #12]
		if (!data) {
   13178:	b356      	cbz	r6, 131d0 <ipv6_ns_reply_timeout+0x74>
		if (!data->send_ns) {
   1317a:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	; 0x28
   1317e:	ea52 0103 	orrs.w	r1, r2, r3
   13182:	d025      	beq.n	131d0 <ipv6_ns_reply_timeout+0x74>
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
   13184:	eb14 0802 	adds.w	r8, r4, r2
   13188:	eb4a 0903 	adc.w	r9, sl, r3
		if (remaining > 0) {
   1318c:	f1b8 0f01 	cmp.w	r8, #1
   13190:	f179 0300 	sbcs.w	r3, r9, #0
   13194:	db23      	blt.n	131de <ipv6_ns_reply_timeout+0x82>
			if (!k_delayed_work_remaining_get(
   13196:	481c      	ldr	r0, [pc, #112]	; (13208 <ipv6_ns_reply_timeout+0xac>)
   13198:	f013 fde0 	bl	26d5c <k_delayed_work_remaining_get>
   1319c:	4606      	mov	r6, r0
   1319e:	b9b8      	cbnz	r0, 131d0 <ipv6_ns_reply_timeout+0x74>
   131a0:	f240 3ce7 	movw	ip, #999	; 0x3e7
   131a4:	ea4f 30c8 	mov.w	r0, r8, lsl #15
   131a8:	eb10 000c 	adds.w	r0, r0, ip
   131ac:	f04f 0c00 	mov.w	ip, #0
   131b0:	ea4f 4158 	mov.w	r1, r8, lsr #17
   131b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   131b8:	f04f 0300 	mov.w	r3, #0
   131bc:	eb41 010c 	adc.w	r1, r1, ip
   131c0:	f7f9 fafa 	bl	c7b8 <__aeabi_uldivmod>
   131c4:	4633      	mov	r3, r6
   131c6:	4602      	mov	r2, r0
   131c8:	490f      	ldr	r1, [pc, #60]	; (13208 <ipv6_ns_reply_timeout+0xac>)
   131ca:	4810      	ldr	r0, [pc, #64]	; (1320c <ipv6_ns_reply_timeout+0xb0>)
   131cc:	f00d fbea 	bl	209a4 <k_delayed_work_submit_to_queue>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   131d0:	3701      	adds	r7, #1
   131d2:	2f08      	cmp	r7, #8
   131d4:	f105 0554 	add.w	r5, r5, #84	; 0x54
   131d8:	d1cb      	bne.n	13172 <ipv6_ns_reply_timeout+0x16>
}
   131da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		data->send_ns = 0;
   131de:	2200      	movs	r2, #0
   131e0:	2300      	movs	r3, #0
		if (!data->pending) {
   131e2:	6830      	ldr	r0, [r6, #0]
		data->send_ns = 0;
   131e4:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
		if (!data->pending) {
   131e8:	2800      	cmp	r0, #0
   131ea:	d0f1      	beq.n	131d0 <ipv6_ns_reply_timeout+0x74>
		net_pkt_unref(data->pending);
   131ec:	f012 ff5d 	bl	260aa <net_pkt_unref>
		net_pkt_unref(data->pending);
   131f0:	6830      	ldr	r0, [r6, #0]
   131f2:	f012 ff5a 	bl	260aa <net_pkt_unref>
		data->pending = NULL;
   131f6:	2300      	movs	r3, #0
		net_nbr_unref(nbr);
   131f8:	4628      	mov	r0, r5
		data->pending = NULL;
   131fa:	6033      	str	r3, [r6, #0]
		net_nbr_unref(nbr);
   131fc:	f013 fb12 	bl	26824 <net_nbr_unref>
   13200:	e7e6      	b.n	131d0 <ipv6_ns_reply_timeout+0x74>
   13202:	bf00      	nop
   13204:	200200e0 	.word	0x200200e0
   13208:	20022d34 	.word	0x20022d34
   1320c:	200280fc 	.word	0x200280fc

00013210 <add_nbr>:
{
   13210:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13214:	4605      	mov	r5, r0
   13216:	460e      	mov	r6, r1
   13218:	4617      	mov	r7, r2
   1321a:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1321c:	f7ff feec 	bl	12ff8 <nbr_lookup.isra.0>
	if (nbr) {
   13220:	4604      	mov	r4, r0
   13222:	2800      	cmp	r0, #0
   13224:	d143      	bne.n	132ae <add_nbr+0x9e>
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   13226:	4825      	ldr	r0, [pc, #148]	; (132bc <add_nbr+0xac>)
   13228:	f013 fb05 	bl	26836 <net_nbr_get>
	if (!nbr) {
   1322c:	4604      	mov	r4, r0
   1322e:	2800      	cmp	r0, #0
   13230:	d136      	bne.n	132a0 <add_nbr+0x90>
	return z_impl_k_sem_take(sem, timeout);
   13232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1323a:	4821      	ldr	r0, [pc, #132]	; (132c0 <add_nbr+0xb0>)
   1323c:	f00d fa94 	bl	20768 <z_impl_k_sem_take>
	u32_t oldest = UINT32_MAX;
   13240:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13244:	4a1f      	ldr	r2, [pc, #124]	; (132c4 <add_nbr+0xb4>)
	int nbr_idx = -1;
   13246:	460b      	mov	r3, r1
   13248:	4694      	mov	ip, r2
		if (!nbr || !nbr->ref) {
   1324a:	7810      	ldrb	r0, [r2, #0]
   1324c:	b188      	cbz	r0, 13272 <add_nbr+0x62>
		data = net_ipv6_nbr_data(nbr);
   1324e:	68d0      	ldr	r0, [r2, #12]
		if (!data || data->is_router ||
   13250:	b178      	cbz	r0, 13272 <add_nbr+0x62>
   13252:	f890 e035 	ldrb.w	lr, [r0, #53]	; 0x35
   13256:	f1be 0f00 	cmp.w	lr, #0
   1325a:	d10a      	bne.n	13272 <add_nbr+0x62>
   1325c:	f890 e030 	ldrb.w	lr, [r0, #48]	; 0x30
   13260:	f1be 0f02 	cmp.w	lr, #2
   13264:	d105      	bne.n	13272 <add_nbr+0x62>
		if (nbr_idx == -1) {
   13266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1326a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1326c:	d023      	beq.n	132b6 <add_nbr+0xa6>
		if (oldest == MIN(oldest, data->stale_counter)) {
   1326e:	4288      	cmp	r0, r1
   13270:	d321      	bcc.n	132b6 <add_nbr+0xa6>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   13272:	3401      	adds	r4, #1
   13274:	2c08      	cmp	r4, #8
   13276:	f102 0254 	add.w	r2, r2, #84	; 0x54
   1327a:	d1e6      	bne.n	1324a <add_nbr+0x3a>
	if (nbr_idx != -1) {
   1327c:	1c5a      	adds	r2, r3, #1
   1327e:	d007      	beq.n	13290 <add_nbr+0x80>
				&net_ipv6_nbr_data(nbr)->addr);
   13280:	2254      	movs	r2, #84	; 0x54
   13282:	fb02 c303 	mla	r3, r2, r3, ip
		net_ipv6_nbr_rm(nbr->iface,
   13286:	68d9      	ldr	r1, [r3, #12]
   13288:	6898      	ldr	r0, [r3, #8]
   1328a:	3104      	adds	r1, #4
   1328c:	f013 fe12 	bl	26eb4 <net_ipv6_nbr_rm>
	z_impl_k_sem_give(sem);
   13290:	480b      	ldr	r0, [pc, #44]	; (132c0 <add_nbr+0xb0>)
   13292:	f00d fa43 	bl	2071c <z_impl_k_sem_give>
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   13296:	4809      	ldr	r0, [pc, #36]	; (132bc <add_nbr+0xac>)
   13298:	f013 facd 	bl	26836 <net_nbr_get>
	if (!nbr) {
   1329c:	4604      	mov	r4, r0
   1329e:	b130      	cbz	r0, 132ae <add_nbr+0x9e>
	nbr_init(nbr, iface, addr, is_router, state);
   132a0:	463b      	mov	r3, r7
   132a2:	4632      	mov	r2, r6
   132a4:	4629      	mov	r1, r5
   132a6:	f8cd 8000 	str.w	r8, [sp]
   132aa:	f013 fdd0 	bl	26e4e <nbr_init>
}
   132ae:	4620      	mov	r0, r4
   132b0:	b002      	add	sp, #8
   132b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   132b6:	4601      	mov	r1, r0
   132b8:	4623      	mov	r3, r4
   132ba:	e7da      	b.n	13272 <add_nbr+0x62>
   132bc:	200200d4 	.word	0x200200d4
   132c0:	20022d54 	.word	0x20022d54
   132c4:	200200e0 	.word	0x200200e0

000132c8 <net_ipv6_send_ns>:
		     struct net_pkt *pending,
		     const struct in6_addr *src,
		     const struct in6_addr *dst,
		     const struct in6_addr *tgt,
		     bool is_my_address)
{
   132c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132cc:	460d      	mov	r5, r1
   132ce:	4692      	mov	sl, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
   132d0:	2100      	movs	r1, #0
   132d2:	2214      	movs	r2, #20
{
   132d4:	b08d      	sub	sp, #52	; 0x34
   132d6:	4607      	mov	r7, r0
	struct net_icmpv6_ns_hdr *ns_hdr;
	struct in6_addr node_dst;
	struct net_nbr *nbr;
	u8_t llao_len;

	if (!dst) {
   132d8:	469b      	mov	fp, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
   132da:	e9cd 1202 	strd	r1, r2, [sp, #8]
{
   132de:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   132e2:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
	if (!dst) {
   132e6:	b9eb      	cbnz	r3, 13324 <net_ipv6_send_ns+0x5c>
	dst->s6_addr[0]   = 0xFF;
   132e8:	f240 23ff 	movw	r3, #767	; 0x2ff
   132ec:	9304      	str	r3, [sp, #16]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   132ee:	f8ad b014 	strh.w	fp, [sp, #20]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   132f2:	f8ad b016 	strh.w	fp, [sp, #22]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   132f6:	f8ad b018 	strh.w	fp, [sp, #24]
	dst->s6_addr[10]  = 0U;
   132fa:	f44f 7380 	mov.w	r3, #256	; 0x100
   132fe:	f8ad 301a 	strh.w	r3, [sp, #26]
	dst->s6_addr[12]  = 0xFF;
   13302:	23ff      	movs	r3, #255	; 0xff
   13304:	f88d 301c 	strb.w	r3, [sp, #28]
	dst->s6_addr[13]  = src->s6_addr[13];
   13308:	f899 300d 	ldrb.w	r3, [r9, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1330c:	f899 200f 	ldrb.w	r2, [r9, #15]
	dst->s6_addr[13]  = src->s6_addr[13];
   13310:	f88d 301d 	strb.w	r3, [sp, #29]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   13314:	f899 300e 	ldrb.w	r3, [r9, #14]
   13318:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1331c:	f8ad 301e 	strh.w	r3, [sp, #30]
		net_ipv6_addr_create_solicited_node(tgt, &node_dst);
		dst = &node_dst;
   13320:	f10d 0b10 	add.w	fp, sp, #16
	}

	llao_len = get_llao_len(iface);

	if (is_my_address) {
   13324:	f1b8 0f00 	cmp.w	r8, #0
   13328:	d075      	beq.n	13416 <net_ipv6_send_ns+0x14e>
		src = net_ipv6_unspecified_address();
   1332a:	f7ff fa6b 	bl	12804 <net_ipv6_unspecified_address>
		llao_len = 0U;
   1332e:	2600      	movs	r6, #0
		src = net_ipv6_unspecified_address();
   13330:	4682      	mov	sl, r0

			goto drop;
		}
	}

	pkt = net_pkt_alloc_with_buffer(iface,
   13332:	f640 42cd 	movw	r2, #3277	; 0xccd
   13336:	2300      	movs	r3, #0
   13338:	4638      	mov	r0, r7
   1333a:	e9cd 2300 	strd	r2, r3, [sp]
   1333e:	f106 0114 	add.w	r1, r6, #20
   13342:	233a      	movs	r3, #58	; 0x3a
   13344:	2202      	movs	r2, #2
   13346:	f7ff fd31 	bl	12dac <net_pkt_alloc_with_buffer>
					sizeof(struct net_icmpv6_ns_hdr) +
					llao_len,
					AF_INET6, IPPROTO_ICMPV6,
					ND_NET_BUF_TIMEOUT);
	if (!pkt) {
   1334a:	4604      	mov	r4, r0
   1334c:	2800      	cmp	r0, #0
   1334e:	f000 80a9 	beq.w	134a4 <net_ipv6_send_ns+0x1dc>
	pkt->ipv6_hop_limit = hop_limit;
   13352:	23ff      	movs	r3, #255	; 0xff
		goto drop;
	}

	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_ND_HOP_LIMIT);

	if (net_ipv6_create(pkt, src, dst) ||
   13354:	465a      	mov	r2, fp
   13356:	4651      	mov	r1, sl
   13358:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   1335c:	f013 fa92 	bl	26884 <net_ipv6_create>
   13360:	4602      	mov	r2, r0
   13362:	2800      	cmp	r0, #0
   13364:	d148      	bne.n	133f8 <net_ipv6_send_ns+0x130>
	    net_icmpv6_create(pkt, NET_ICMPV6_NS, 0)) {
   13366:	2187      	movs	r1, #135	; 0x87
   13368:	4620      	mov	r0, r4
   1336a:	f013 f947 	bl	265fc <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
   1336e:	4682      	mov	sl, r0
   13370:	2800      	cmp	r0, #0
   13372:	d141      	bne.n	133f8 <net_ipv6_send_ns+0x130>
		goto drop;
	}

	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
   13374:	4620      	mov	r0, r4
   13376:	a902      	add	r1, sp, #8
   13378:	f013 f8ed 	bl	26556 <net_pkt_get_data>
	if (!ns_hdr) {
   1337c:	4603      	mov	r3, r0
   1337e:	b3d8      	cbz	r0, 133f8 <net_ipv6_send_ns+0x130>
		goto drop;
	}

	ns_hdr->reserved = 0U;
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   13380:	f10d 0e20 	add.w	lr, sp, #32
   13384:	464a      	mov	r2, r9
   13386:	46f4      	mov	ip, lr
	ns_hdr->reserved = 0U;
   13388:	f880 a000 	strb.w	sl, [r0]
   1338c:	f880 a001 	strb.w	sl, [r0, #1]
   13390:	f880 a002 	strb.w	sl, [r0, #2]
   13394:	f880 a003 	strb.w	sl, [r0, #3]
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   13398:	f109 0a10 	add.w	sl, r9, #16
   1339c:	46f1      	mov	r9, lr
   1339e:	6810      	ldr	r0, [r2, #0]
   133a0:	6851      	ldr	r1, [r2, #4]
   133a2:	3208      	adds	r2, #8
   133a4:	e8a9 0003 	stmia.w	r9!, {r0, r1}
   133a8:	4552      	cmp	r2, sl
   133aa:	46ce      	mov	lr, r9
   133ac:	d1f6      	bne.n	1339c <net_ipv6_send_ns+0xd4>
   133ae:	3304      	adds	r3, #4
   133b0:	469a      	mov	sl, r3
   133b2:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   133b6:	4662      	mov	r2, ip
   133b8:	ca03      	ldmia	r2!, {r0, r1}
   133ba:	4572      	cmp	r2, lr
   133bc:	6018      	str	r0, [r3, #0]
   133be:	6059      	str	r1, [r3, #4]
   133c0:	4694      	mov	ip, r2
   133c2:	f103 0308 	add.w	r3, r3, #8
   133c6:	d1f6      	bne.n	133b6 <net_ipv6_send_ns+0xee>

	if (net_pkt_set_data(pkt, &ns_access)) {
   133c8:	4620      	mov	r0, r4
   133ca:	a902      	add	r1, sp, #8
   133cc:	f013 f8e4 	bl	26598 <net_pkt_set_data>
   133d0:	4681      	mov	r9, r0
   133d2:	b988      	cbnz	r0, 133f8 <net_ipv6_send_ns+0x130>
		goto drop;
	}

	if (!is_my_address) {
   133d4:	f1b8 0f00 	cmp.w	r8, #0
   133d8:	d02f      	beq.n	1343a <net_ipv6_send_ns+0x172>
			      llao_len, NET_ICMPV6_ND_OPT_SLLAO)) {
			goto drop;
		}
	}

	net_pkt_cursor_init(pkt);
   133da:	4620      	mov	r0, r4
   133dc:	f012 fed5 	bl	2618a <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   133e0:	213a      	movs	r1, #58	; 0x3a
   133e2:	4620      	mov	r0, r4
   133e4:	f013 fab1 	bl	2694a <net_ipv6_finalize>

	nbr = add_nbr(iface, &ns_hdr->tgt, false,
   133e8:	2300      	movs	r3, #0
   133ea:	4651      	mov	r1, sl
   133ec:	461a      	mov	r2, r3
   133ee:	4638      	mov	r0, r7
   133f0:	f7ff ff0e 	bl	13210 <add_nbr>
		      NET_IPV6_NBR_STATE_INCOMPLETE);
	if (!nbr) {
   133f4:	4606      	mov	r6, r0
   133f6:	bb50      	cbnz	r0, 1344e <net_ipv6_send_ns+0x186>
	net_stats_update_ipv6_nd_sent(iface);

	return 0;

drop:
	if (pending) {
   133f8:	2d00      	cmp	r5, #0
   133fa:	d04a      	beq.n	13492 <net_ipv6_send_ns+0x1ca>
   133fc:	f06f 0968 	mvn.w	r9, #104	; 0x68
		net_pkt_unref(pending);
   13400:	4628      	mov	r0, r5
   13402:	f012 fe52 	bl	260aa <net_pkt_unref>
	}

	if (pkt) {
   13406:	b114      	cbz	r4, 1340e <net_ipv6_send_ns+0x146>
		net_pkt_unref(pkt);
   13408:	4620      	mov	r0, r4
   1340a:	f012 fe4e 	bl	260aa <net_pkt_unref>
	}

	net_stats_update_ipv6_nd_drop(iface);

	return ret;
}
   1340e:	4648      	mov	r0, r9
   13410:	b00d      	add	sp, #52	; 0x34
   13412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t total_len = net_if_get_link_addr(iface)->len +
   13416:	683b      	ldr	r3, [r7, #0]
   13418:	7d1e      	ldrb	r6, [r3, #20]
		if (!src) {
   1341a:	f1ba 0f00 	cmp.w	sl, #0
   1341e:	d104      	bne.n	1342a <net_ipv6_send_ns+0x162>
			src = net_if_ipv6_select_src_addr(iface, tgt);
   13420:	4649      	mov	r1, r9
   13422:	4638      	mov	r0, r7
   13424:	f7ff f872 	bl	1250c <net_if_ipv6_select_src_addr>
   13428:	4682      	mov	sl, r0
		if (net_ipv6_is_addr_unspecified(src)) {
   1342a:	4650      	mov	r0, sl
   1342c:	f013 fc58 	bl	26ce0 <net_ipv6_is_addr_unspecified>
   13430:	bb90      	cbnz	r0, 13498 <net_ipv6_send_ns+0x1d0>
	return ROUND_UP(total_len, 8U);
   13432:	3609      	adds	r6, #9
   13434:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
   13438:	e77b      	b.n	13332 <net_ipv6_send_ns+0x6a>
	return &iface->if_dev->link_addr;
   1343a:	6839      	ldr	r1, [r7, #0]
		if (!set_llao(pkt, net_if_get_link_addr(iface),
   1343c:	2301      	movs	r3, #1
   1343e:	4632      	mov	r2, r6
   13440:	4620      	mov	r0, r4
   13442:	3110      	adds	r1, #16
   13444:	f013 fc96 	bl	26d74 <set_llao>
   13448:	2800      	cmp	r0, #0
   1344a:	d1c6      	bne.n	133da <net_ipv6_send_ns+0x112>
   1344c:	e7d4      	b.n	133f8 <net_ipv6_send_ns+0x130>
	if (pending) {
   1344e:	b1bd      	cbz	r5, 13480 <net_ipv6_send_ns+0x1b8>
		if (!net_ipv6_nbr_data(nbr)->pending) {
   13450:	68c7      	ldr	r7, [r0, #12]
   13452:	683b      	ldr	r3, [r7, #0]
   13454:	2b00      	cmp	r3, #0
   13456:	d1d1      	bne.n	133fc <net_ipv6_send_ns+0x134>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   13458:	4628      	mov	r0, r5
   1345a:	f012 fe0d 	bl	26078 <net_pkt_ref>
   1345e:	6038      	str	r0, [r7, #0]
		net_ipv6_nbr_data(nbr)->send_ns = k_uptime_get();
   13460:	68f7      	ldr	r7, [r6, #12]
   13462:	f013 fc6d 	bl	26d40 <k_uptime_get>
   13466:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		if (!k_delayed_work_remaining_get(&ipv6_ns_reply_timer)) {
   1346a:	4810      	ldr	r0, [pc, #64]	; (134ac <net_ipv6_send_ns+0x1e4>)
   1346c:	f013 fc76 	bl	26d5c <k_delayed_work_remaining_get>
   13470:	b930      	cbnz	r0, 13480 <net_ipv6_send_ns+0x1b8>
   13472:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13476:	2300      	movs	r3, #0
   13478:	490c      	ldr	r1, [pc, #48]	; (134ac <net_ipv6_send_ns+0x1e4>)
   1347a:	480d      	ldr	r0, [pc, #52]	; (134b0 <net_ipv6_send_ns+0x1e8>)
   1347c:	f00d fa92 	bl	209a4 <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   13480:	4620      	mov	r0, r4
   13482:	f011 fcaa 	bl	24dda <net_send_data>
   13486:	2800      	cmp	r0, #0
   13488:	dac1      	bge.n	1340e <net_ipv6_send_ns+0x146>
		if (pending) {
   1348a:	b115      	cbz	r5, 13492 <net_ipv6_send_ns+0x1ca>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1348c:	68f0      	ldr	r0, [r6, #12]
   1348e:	f013 fc35 	bl	26cfc <nbr_clear_ns_pending>
	if (pending) {
   13492:	f06f 0968 	mvn.w	r9, #104	; 0x68
   13496:	e7b7      	b.n	13408 <net_ipv6_send_ns+0x140>
			ret = -EINVAL;
   13498:	f06f 0915 	mvn.w	r9, #21
	if (pending) {
   1349c:	2d00      	cmp	r5, #0
   1349e:	d0b6      	beq.n	1340e <net_ipv6_send_ns+0x146>
   134a0:	2400      	movs	r4, #0
   134a2:	e7ad      	b.n	13400 <net_ipv6_send_ns+0x138>
		ret = -ENOMEM;
   134a4:	f06f 090b 	mvn.w	r9, #11
   134a8:	e7f8      	b.n	1349c <net_ipv6_send_ns+0x1d4>
   134aa:	bf00      	nop
   134ac:	20022d34 	.word	0x20022d34
   134b0:	200280fc 	.word	0x200280fc

000134b4 <handle_ra_input>:
#endif

static enum net_verdict handle_ra_input(struct net_pkt *pkt,
					struct net_ipv6_hdr *ip_hdr,
					struct net_icmp_hdr *icmp_hdr)
{
   134b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
   134b8:	2300      	movs	r3, #0
{
   134ba:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
   134bc:	220c      	movs	r2, #12
{
   134be:	b099      	sub	sp, #100	; 0x64
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
   134c0:	e9cd 3206 	strd	r3, r2, [sp, #24]
					      struct net_icmpv6_ra_hdr);
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   134c4:	aa04      	add	r2, sp, #16
   134c6:	9208      	str	r2, [sp, #32]
   134c8:	2202      	movs	r2, #2
{
   134ca:	4604      	mov	r4, r0
   134cc:	468a      	mov	sl, r1
	u16_t length = net_pkt_get_len(pkt);
   134ce:	6906      	ldr	r6, [r0, #16]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   134d0:	9209      	str	r2, [sp, #36]	; 0x24
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;

	while (buf) {
   134d2:	b956      	cbnz	r6, 134ea <handle_ra_input+0x36>
	struct net_icmpv6_ra_hdr *ra_hdr;
	struct net_if_router *router;
	u32_t mtu, reachable_time, retrans_timer;
	u16_t router_lifetime;

	ra_hdr = (struct net_icmpv6_ra_hdr *)net_pkt_get_data(pkt, &ra_access);
   134d4:	4620      	mov	r0, r4
   134d6:	a906      	add	r1, sp, #24
	u16_t length = net_pkt_get_len(pkt);
   134d8:	b29f      	uxth	r7, r3
	ra_hdr = (struct net_icmpv6_ra_hdr *)net_pkt_get_data(pkt, &ra_access);
   134da:	f013 f83c 	bl	26556 <net_pkt_get_data>
	if (!ra_hdr) {
   134de:	4605      	mov	r5, r0
   134e0:	b938      	cbnz	r0, 134f2 <handle_ra_input+0x3e>
	return NET_OK;

drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));

	return NET_DROP;
   134e2:	2002      	movs	r0, #2
}
   134e4:	b019      	add	sp, #100	; 0x64
   134e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bytes += buf->len;
   134ea:	89b2      	ldrh	r2, [r6, #12]
		buf = buf->frags;
   134ec:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
   134ee:	4413      	add	r3, r2
		buf = buf->frags;
   134f0:	e7ef      	b.n	134d2 <handle_ra_input+0x1e>
	if (((length < (sizeof(struct net_ipv6_hdr) +
   134f2:	2f39      	cmp	r7, #57	; 0x39
   134f4:	d909      	bls.n	1350a <handle_ra_input+0x56>
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   134f6:	f89a 3007 	ldrb.w	r3, [sl, #7]
   134fa:	2bff      	cmp	r3, #255	; 0xff
   134fc:	d105      	bne.n	1350a <handle_ra_input+0x56>
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   134fe:	f248 03fe 	movw	r3, #33022	; 0x80fe
   13502:	f8ba 2008 	ldrh.w	r2, [sl, #8]
   13506:	429a      	cmp	r2, r3
   13508:	d003      	beq.n	13512 <handle_ra_input+0x5e>
	     !net_ipv6_is_ll_addr(&ip_hdr->src)) &&
   1350a:	f898 3001 	ldrb.w	r3, [r8, #1]
   1350e:	2b00      	cmp	r3, #0
   13510:	d1e7      	bne.n	134e2 <handle_ra_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   13512:	9907      	ldr	r1, [sp, #28]
   13514:	4620      	mov	r0, r4
   13516:	f012 fec2 	bl	2629e <net_pkt_skip>
	router_lifetime = ntohs(ra_hdr->router_lifetime);
   1351a:	886b      	ldrh	r3, [r5, #2]
   1351c:	f8d5 8008 	ldr.w	r8, [r5, #8]
   13520:	9302      	str	r3, [sp, #8]
	if (ra_hdr->cur_hop_limit) {
   13522:	7829      	ldrb	r1, [r5, #0]
   13524:	686b      	ldr	r3, [r5, #4]
   13526:	fa98 f888 	rev.w	r8, r8
   1352a:	ba1b      	rev	r3, r3
   1352c:	b121      	cbz	r1, 13538 <handle_ra_input+0x84>
		net_ipv6_set_hop_limit(net_pkt_iface(pkt),
   1352e:	6a22      	ldr	r2, [r4, #32]
   13530:	6852      	ldr	r2, [r2, #4]
	if (!iface->config.ip.ipv6) {
   13532:	b10a      	cbz	r2, 13538 <handle_ra_input+0x84>
	iface->config.ip.ipv6->hop_limit = hop_limit;
   13534:	f882 110d 	strb.w	r1, [r2, #269]	; 0x10d
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   13538:	4aaf      	ldr	r2, [pc, #700]	; (137f8 <handle_ra_input+0x344>)
   1353a:	1e59      	subs	r1, r3, #1
   1353c:	4291      	cmp	r1, r2
   1353e:	d20d      	bcs.n	1355c <handle_ra_input+0xa8>
	    (net_if_ipv6_get_reachable_time(net_pkt_iface(pkt)) !=
   13540:	6a22      	ldr	r2, [r4, #32]
   13542:	6857      	ldr	r7, [r2, #4]
	if (!iface->config.ip.ipv6) {
   13544:	b12f      	cbz	r7, 13552 <handle_ra_input+0x9e>
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   13546:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
   1354a:	429a      	cmp	r2, r3
   1354c:	d006      	beq.n	1355c <handle_ra_input+0xa8>
	iface->config.ip.ipv6->base_reachable_time = reachable_time;
   1354e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
   13552:	4638      	mov	r0, r7
   13554:	f012 f894 	bl	25680 <net_if_ipv6_calc_reachable_time>
   13558:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	if (retrans_timer) {
   1355c:	f1b8 0f00 	cmp.w	r8, #0
   13560:	d005      	beq.n	1356e <handle_ra_input+0xba>
		net_if_ipv6_set_retrans_timer(net_pkt_iface(pkt),
   13562:	6a23      	ldr	r3, [r4, #32]
   13564:	685b      	ldr	r3, [r3, #4]
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
#if defined(CONFIG_NET_NATIVE_IPV6)
	if (!iface->config.ip.ipv6) {
   13566:	b113      	cbz	r3, 1356e <handle_ra_input+0xba>
   13568:	68aa      	ldr	r2, [r5, #8]
		return;
	}

	iface->config.ip.ipv6->retrans_timer = retrans_timer;
   1356a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	pkt->ipv6_ext_opt_len = len;
   1356e:	230c      	movs	r3, #12
   13570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
					net_pkt_get_data(pkt, &nd_access);
   13574:	4620      	mov	r0, r4
   13576:	a908      	add	r1, sp, #32
   13578:	f012 ffed 	bl	26556 <net_pkt_get_data>
   1357c:	4605      	mov	r5, r0
	while (nd_opt_hdr) {
   1357e:	bb68      	cbnz	r0, 135dc <handle_ra_input+0x128>
	router_lifetime = ntohs(ra_hdr->router_lifetime);
   13580:	9b02      	ldr	r3, [sp, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt), &ip_hdr->src);
   13582:	f10a 0108 	add.w	r1, sl, #8
	router_lifetime = ntohs(ra_hdr->router_lifetime);
   13586:	021a      	lsls	r2, r3, #8
   13588:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
   1358c:	b292      	uxth	r2, r2
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt), &ip_hdr->src);
   1358e:	6a20      	ldr	r0, [r4, #32]
	router_lifetime = ntohs(ra_hdr->router_lifetime);
   13590:	9203      	str	r2, [sp, #12]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt), &ip_hdr->src);
   13592:	9102      	str	r1, [sp, #8]
   13594:	f7fe ff32 	bl	123fc <net_if_ipv6_router_lookup>
	if (router) {
   13598:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1359c:	4603      	mov	r3, r0
   1359e:	2800      	cmp	r0, #0
   135a0:	f000 816a 	beq.w	13878 <handle_ra_input+0x3c4>
		if (!router_lifetime) {
   135a4:	2a00      	cmp	r2, #0
   135a6:	f040 815d 	bne.w	13864 <handle_ra_input+0x3b0>
			net_if_ipv6_router_rm(router);
   135aa:	f7fe ff93 	bl	124d4 <net_if_ipv6_router_rm>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   135ae:	b16e      	cbz	r6, 135cc <handle_ra_input+0x118>
   135b0:	68f3      	ldr	r3, [r6, #12]
   135b2:	6818      	ldr	r0, [r3, #0]
   135b4:	b150      	cbz	r0, 135cc <handle_ra_input+0x118>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   135b6:	f011 fc10 	bl	24dda <net_send_data>
   135ba:	2800      	cmp	r0, #0
   135bc:	da03      	bge.n	135c6 <handle_ra_input+0x112>
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   135be:	68f3      	ldr	r3, [r6, #12]
   135c0:	6818      	ldr	r0, [r3, #0]
   135c2:	f012 fd72 	bl	260aa <net_pkt_unref>
		nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   135c6:	68f0      	ldr	r0, [r6, #12]
   135c8:	f013 fb98 	bl	26cfc <nbr_clear_ns_pending>
	net_if_stop_rs(net_pkt_iface(pkt));
   135cc:	6a20      	ldr	r0, [r4, #32]
   135ce:	f7fe fce5 	bl	11f9c <net_if_stop_rs>
	net_pkt_unref(pkt);
   135d2:	4620      	mov	r0, r4
   135d4:	f012 fd69 	bl	260aa <net_pkt_unref>
	return NET_OK;
   135d8:	2000      	movs	r0, #0
   135da:	e783      	b.n	134e4 <handle_ra_input+0x30>
	return net_pkt_skip(pkt, access->size);
   135dc:	4620      	mov	r0, r4
   135de:	9909      	ldr	r1, [sp, #36]	; 0x24
   135e0:	f012 fe5d 	bl	2629e <net_pkt_skip>
		switch (nd_opt_hdr->type) {
   135e4:	782f      	ldrb	r7, [r5, #0]
   135e6:	2f03      	cmp	r7, #3
   135e8:	d03a      	beq.n	13660 <handle_ra_input+0x1ac>
   135ea:	2f05      	cmp	r7, #5
   135ec:	d01f      	beq.n	1362e <handle_ra_input+0x17a>
   135ee:	2f01      	cmp	r7, #1
   135f0:	7869      	ldrb	r1, [r5, #1]
   135f2:	f040 812c 	bne.w	1384e <handle_ra_input+0x39a>
	if (!read_llao(pkt, len, &llstorage)) {
   135f6:	4620      	mov	r0, r4
   135f8:	aa10      	add	r2, sp, #64	; 0x40
   135fa:	f013 fbef 	bl	26ddc <read_llao>
   135fe:	2800      	cmp	r0, #0
   13600:	f43f af6f 	beq.w	134e2 <handle_ra_input+0x2e>
	lladdr.len = llstorage.len;
   13604:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
   13608:	6a20      	ldr	r0, [r4, #32]
	lladdr.len = llstorage.len;
   1360a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	lladdr.addr = llstorage.addr;
   1360e:	f10d 0342 	add.w	r3, sp, #66	; 0x42
   13612:	930c      	str	r3, [sp, #48]	; 0x30
	return pkt->frags->data;
   13614:	6923      	ldr	r3, [r4, #16]
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
   13616:	aa0c      	add	r2, sp, #48	; 0x30
				&NET_IPV6_HDR(pkt)->src,
   13618:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
   1361a:	2302      	movs	r3, #2
   1361c:	3108      	adds	r1, #8
   1361e:	9300      	str	r3, [sp, #0]
   13620:	463b      	mov	r3, r7
   13622:	f013 fe20 	bl	27266 <net_ipv6_nbr_add>
			if (!nbr) {
   13626:	4606      	mov	r6, r0
   13628:	2800      	cmp	r0, #0
   1362a:	d1a3      	bne.n	13574 <handle_ra_input+0xc0>
   1362c:	e759      	b.n	134e2 <handle_ra_input+0x2e>
			if (net_pkt_skip(pkt, 2) ||
   1362e:	2102      	movs	r1, #2
   13630:	4620      	mov	r0, r4
   13632:	f012 fe34 	bl	2629e <net_pkt_skip>
   13636:	2800      	cmp	r0, #0
   13638:	f47f af53 	bne.w	134e2 <handle_ra_input+0x2e>
			    net_pkt_read_be32(pkt, &mtu)) {
   1363c:	4620      	mov	r0, r4
   1363e:	a905      	add	r1, sp, #20
   13640:	f012 fe4c 	bl	262dc <net_pkt_read_be32>
			if (net_pkt_skip(pkt, 2) ||
   13644:	2800      	cmp	r0, #0
   13646:	f47f af4c 	bne.w	134e2 <handle_ra_input+0x2e>
			if (mtu < MIN_IPV6_MTU || mtu > MAX_IPV6_MTU) {
   1364a:	9b05      	ldr	r3, [sp, #20]
   1364c:	f5a3 62a0 	sub.w	r2, r3, #1280	; 0x500
   13650:	f5b2 4f7b 	cmp.w	r2, #64256	; 0xfb00
   13654:	f4bf af45 	bcs.w	134e2 <handle_ra_input+0x2e>
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   13658:	6a22      	ldr	r2, [r4, #32]
	iface->if_dev->mtu = mtu;
   1365a:	6812      	ldr	r2, [r2, #0]
   1365c:	8313      	strh	r3, [r2, #24]
}
   1365e:	e789      	b.n	13574 <handle_ra_input+0xc0>
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
   13660:	ab10      	add	r3, sp, #64	; 0x40
   13662:	930a      	str	r3, [sp, #40]	; 0x28
   13664:	231e      	movs	r3, #30
				net_pkt_get_data(pkt, &rapfx_access);
   13666:	4620      	mov	r0, r4
   13668:	a90a      	add	r1, sp, #40	; 0x28
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
   1366a:	930b      	str	r3, [sp, #44]	; 0x2c
				net_pkt_get_data(pkt, &rapfx_access);
   1366c:	f012 ff73 	bl	26556 <net_pkt_get_data>
	if (!pfx_info) {
   13670:	4605      	mov	r5, r0
   13672:	2800      	cmp	r0, #0
   13674:	f43f af35 	beq.w	134e2 <handle_ra_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   13678:	4620      	mov	r0, r4
   1367a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1367c:	f012 fe0f 	bl	2629e <net_pkt_skip>
	valid_lifetime = ntohl(pfx_info->valid_lifetime);
   13680:	f8d5 7002 	ldr.w	r7, [r5, #2]
   13684:	f8d5 3006 	ldr.w	r3, [r5, #6]
   13688:	ba3f      	rev	r7, r7
	preferred_lifetime = ntohl(pfx_info->preferred_lifetime);
   1368a:	ba1b      	rev	r3, r3
	if (valid_lifetime >= preferred_lifetime &&
   1368c:	429f      	cmp	r7, r3
   1368e:	f4ff af71 	bcc.w	13574 <handle_ra_input+0xc0>
   13692:	f248 03fe 	movw	r3, #33022	; 0x80fe
   13696:	89ea      	ldrh	r2, [r5, #14]
   13698:	429a      	cmp	r2, r3
   1369a:	f43f af6b 	beq.w	13574 <handle_ra_input+0xc0>
		if (pfx_info->flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   1369e:	f995 3001 	ldrsb.w	r3, [r5, #1]
   136a2:	2b00      	cmp	r3, #0
   136a4:	da25      	bge.n	136f2 <handle_ra_input+0x23e>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   136a6:	46a8      	mov	r8, r5
   136a8:	f818 2b0e 	ldrb.w	r2, [r8], #14
   136ac:	6a20      	ldr	r0, [r4, #32]
   136ae:	4641      	mov	r1, r8
   136b0:	f011 ff48 	bl	25544 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   136b4:	b940      	cbnz	r0, 136c8 <handle_ra_input+0x214>
		if (!prefix_info->valid_lifetime) {
   136b6:	f8d5 3002 	ldr.w	r3, [r5, #2]
   136ba:	b1d3      	cbz	r3, 136f2 <handle_ra_input+0x23e>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   136bc:	4641      	mov	r1, r8
   136be:	782a      	ldrb	r2, [r5, #0]
   136c0:	6a20      	ldr	r0, [r4, #32]
   136c2:	f011 febf 	bl	25444 <net_if_ipv6_prefix_add>
		if (prefix) {
   136c6:	b1a0      	cbz	r0, 136f2 <handle_ra_input+0x23e>
	switch (prefix_info->valid_lifetime) {
   136c8:	f8d5 1002 	ldr.w	r1, [r5, #2]
   136cc:	b151      	cbz	r1, 136e4 <handle_ra_input+0x230>
   136ce:	1c4a      	adds	r2, r1, #1
   136d0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   136d4:	d05a      	beq.n	1378c <handle_ra_input+0x2d8>
	prefix->is_infinite = is_infinite;
   136d6:	f36f 0300 	bfc	r3, #0, #1
   136da:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
		net_if_ipv6_prefix_set_timer(prefix,
   136de:	f7f9 fc8b 	bl	cff8 <net_if_ipv6_prefix_set_timer>
		break;
   136e2:	e006      	b.n	136f2 <handle_ra_input+0x23e>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   136e4:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   136e8:	f100 0110 	add.w	r1, r0, #16
   136ec:	6a20      	ldr	r0, [r4, #32]
   136ee:	f011 ff4e 	bl	2558e <net_if_ipv6_prefix_rm>
		if ((pfx_info->flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   136f2:	786b      	ldrb	r3, [r5, #1]
   136f4:	065b      	lsls	r3, r3, #25
   136f6:	f57f af3d 	bpl.w	13574 <handle_ra_input+0xc0>
   136fa:	2f00      	cmp	r7, #0
   136fc:	f43f af3a 	beq.w	13574 <handle_ra_input+0xc0>
		    valid_lifetime &&
   13700:	782b      	ldrb	r3, [r5, #0]
   13702:	2b40      	cmp	r3, #64	; 0x40
   13704:	f47f af36 	bne.w	13574 <handle_ra_input+0xc0>
	struct in6_addr addr = { };
   13708:	2300      	movs	r3, #0
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   1370a:	f248 01fe 	movw	r1, #33022	; 0x80fe
	net_ipv6_addr_create_iid(&addr,
   1370e:	6a22      	ldr	r2, [r4, #32]
	struct in6_addr addr = { };
   13710:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
	net_ipv6_addr_create_iid(&addr,
   13714:	6812      	ldr	r2, [r2, #0]
	struct in6_addr addr = { };
   13716:	930f      	str	r3, [sp, #60]	; 0x3c
   13718:	910c      	str	r1, [sp, #48]	; 0x30
	addr->s6_addr[1] = 0x80;
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1371a:	930d      	str	r3, [sp, #52]	; 0x34

	switch (lladdr->len) {
   1371c:	7d13      	ldrb	r3, [r2, #20]
   1371e:	2b06      	cmp	r3, #6
   13720:	d039      	beq.n	13796 <handle_ra_input+0x2e2>
   13722:	2b08      	cmp	r3, #8
   13724:	d055      	beq.n	137d2 <handle_ra_input+0x31e>
   13726:	2b02      	cmp	r3, #2
   13728:	d113      	bne.n	13752 <handle_ra_input+0x29e>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154 ||
   1372a:	7d53      	ldrb	r3, [r2, #21]
   1372c:	2b01      	cmp	r3, #1
   1372e:	d001      	beq.n	13734 <handle_ra_input+0x280>
   13730:	2b06      	cmp	r3, #6
   13732:	d10e      	bne.n	13752 <handle_ra_input+0x29e>
		    lladdr->type == NET_LINK_CANBUS) {
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   13734:	2300      	movs	r3, #0
   13736:	930e      	str	r3, [sp, #56]	; 0x38
			addr->s6_addr[11] = 0xff;
   13738:	23ff      	movs	r3, #255	; 0xff
   1373a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
			addr->s6_addr[12] = 0xfe;
   1373e:	23fe      	movs	r3, #254	; 0xfe
   13740:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
			addr->s6_addr[13] = 0U;
			addr->s6_addr[14] = lladdr->addr[0];
   13744:	6913      	ldr	r3, [r2, #16]
   13746:	781a      	ldrb	r2, [r3, #0]
   13748:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
			addr->s6_addr[15] = lladdr->addr[1];
   1374c:	785b      	ldrb	r3, [r3, #1]
   1374e:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   13752:	462a      	mov	r2, r5
   13754:	f852 0f0e 	ldr.w	r0, [r2, #14]!
   13758:	ab0c      	add	r3, sp, #48	; 0x30
   1375a:	6851      	ldr	r1, [r2, #4]
   1375c:	c303      	stmia	r3!, {r0, r1}
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   1375e:	2100      	movs	r1, #0
   13760:	a80c      	add	r0, sp, #48	; 0x30
   13762:	f7fe fc25 	bl	11fb0 <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   13766:	f8d5 b002 	ldr.w	fp, [r5, #2]
   1376a:	4607      	mov	r7, r0
   1376c:	2800      	cmp	r0, #0
   1376e:	d063      	beq.n	13838 <handle_ra_input+0x384>
   13770:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   13774:	2b01      	cmp	r3, #1
   13776:	d15f      	bne.n	13838 <handle_ra_input+0x384>
		if (prefix_info->valid_lifetime ==
   13778:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1377c:	d12f      	bne.n	137de <handle_ra_input+0x32a>
	ifaddr->is_infinite = is_infinite;
   1377e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   13782:	f043 0301 	orr.w	r3, r3, #1
   13786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
   1378a:	e6f3      	b.n	13574 <handle_ra_input+0xc0>
	prefix->is_infinite = is_infinite;
   1378c:	f043 0301 	orr.w	r3, r3, #1
   13790:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
}
   13794:	e7ad      	b.n	136f2 <handle_ra_input+0x23e>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   13796:	6913      	ldr	r3, [r2, #16]
   13798:	7899      	ldrb	r1, [r3, #2]
   1379a:	8818      	ldrh	r0, [r3, #0]
   1379c:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
		addr->s6_addr[11] = 0xff;
   137a0:	21ff      	movs	r1, #255	; 0xff
   137a2:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
		addr->s6_addr[12] = 0xfe;
   137a6:	21fe      	movs	r1, #254	; 0xfe
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   137a8:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
		addr->s6_addr[12] = 0xfe;
   137ac:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   137b0:	f833 1f03 	ldrh.w	r1, [r3, #3]!
   137b4:	f8ad 103d 	strh.w	r1, [sp, #61]	; 0x3d
   137b8:	789b      	ldrb	r3, [r3, #2]
   137ba:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
		if (lladdr->type == NET_LINK_BLUETOOTH) {
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   137be:	7d53      	ldrb	r3, [r2, #21]
   137c0:	2b03      	cmp	r3, #3
   137c2:	d1c6      	bne.n	13752 <handle_ra_input+0x29e>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
		addr->s6_addr[8] ^= 0x02;
   137c4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   137c8:	f083 0302 	eor.w	r3, r3, #2
   137cc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		break;
   137d0:	e7bf      	b.n	13752 <handle_ra_input+0x29e>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   137d2:	6912      	ldr	r2, [r2, #16]
   137d4:	ab0e      	add	r3, sp, #56	; 0x38
   137d6:	6810      	ldr	r0, [r2, #0]
   137d8:	6851      	ldr	r1, [r2, #4]
   137da:	c303      	stmia	r3!, {r0, r1}
   137dc:	e7f2      	b.n	137c4 <handle_ra_input+0x310>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   137de:	f5bb 5fe1 	cmp.w	fp, #7200	; 0x1c20
   137e2:	d90b      	bls.n	137fc <handle_ra_input+0x348>
			net_if_ipv6_addr_update_lifetime(
   137e4:	f8d5 1002 	ldr.w	r1, [r5, #2]
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   137e8:	4638      	mov	r0, r7
   137ea:	f7f9 fbad 	bl	cf48 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   137ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   137f2:	f36f 0300 	bfc	r3, #0, #1
   137f6:	e7c6      	b.n	13786 <handle_ra_input+0x2d2>
   137f8:	0036ee80 	.word	0x0036ee80
	if (ifaddr->lifetime.timer_timeout == 0) {
   137fc:	69c0      	ldr	r0, [r0, #28]
   137fe:	b1b0      	cbz	r0, 1382e <handle_ra_input+0x37a>
	remaining = (u64_t)ifaddr->lifetime.timer_timeout +
   13800:	4680      	mov	r8, r0
   13802:	4a1f      	ldr	r2, [pc, #124]	; (13880 <handle_ra_input+0x3cc>)
   13804:	6a3b      	ldr	r3, [r7, #32]
   13806:	ea4f 79e0 	mov.w	r9, r0, asr #31
   1380a:	fbc2 8903 	smlal	r8, r9, r2, r3
	return (u32_t)k_uptime_get();
   1380e:	f013 fa97 	bl	26d40 <k_uptime_get>
	return (u32_t)abs((s32_t)time1 - (s32_t)time2);
   13812:	69bb      	ldr	r3, [r7, #24]
   13814:	1ac0      	subs	r0, r0, r3
   13816:	f015 fe08 	bl	2942a <abs>
	return (u32_t)(remaining / MSEC_PER_SEC);
   1381a:	ebb8 0000 	subs.w	r0, r8, r0
   1381e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13822:	f04f 0300 	mov.w	r3, #0
   13826:	f169 0100 	sbc.w	r1, r9, #0
   1382a:	f7f8 ffc5 	bl	c7b8 <__aeabi_uldivmod>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   1382e:	4558      	cmp	r0, fp
   13830:	d3d8      	bcc.n	137e4 <handle_ra_input+0x330>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   13832:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   13836:	e7d7      	b.n	137e8 <handle_ra_input+0x334>
		if (prefix_info->valid_lifetime ==
   13838:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   1383c:	bf0c      	ite	eq
   1383e:	2300      	moveq	r3, #0
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   13840:	465b      	movne	r3, fp
   13842:	2201      	movs	r2, #1
   13844:	6a20      	ldr	r0, [r4, #32]
   13846:	a90c      	add	r1, sp, #48	; 0x30
   13848:	f011 fc17 	bl	2507a <net_if_ipv6_addr_add>
   1384c:	e692      	b.n	13574 <handle_ra_input+0xc0>
			if (net_pkt_skip(pkt, nd_opt_hdr->len * 8U - 2)) {
   1384e:	f06f 0301 	mvn.w	r3, #1
   13852:	4620      	mov	r0, r4
   13854:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   13858:	f012 fd21 	bl	2629e <net_pkt_skip>
   1385c:	2800      	cmp	r0, #0
   1385e:	f43f ae89 	beq.w	13574 <handle_ra_input+0xc0>
   13862:	e63e      	b.n	134e2 <handle_ra_input+0x2e>
			if (nbr) {
   13864:	b11e      	cbz	r6, 1386e <handle_ra_input+0x3ba>
				net_ipv6_nbr_data(nbr)->is_router = true;
   13866:	2001      	movs	r0, #1
   13868:	68f1      	ldr	r1, [r6, #12]
   1386a:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
			net_if_ipv6_router_update_lifetime(
   1386e:	4611      	mov	r1, r2
   13870:	4618      	mov	r0, r3
   13872:	f011 fecc 	bl	2560e <net_if_ipv6_router_update_lifetime>
   13876:	e69a      	b.n	135ae <handle_ra_input+0xfa>
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   13878:	6a20      	ldr	r0, [r4, #32]
   1387a:	f7fe fdf1 	bl	12460 <net_if_ipv6_router_add>
   1387e:	e696      	b.n	135ae <handle_ra_input+0xfa>
   13880:	7fffff9b 	.word	0x7fffff9b

00013884 <ipv6_nd_reachable_timeout>:
{
   13884:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	s64_t current = k_uptime_get();
   13888:	f013 fa5a 	bl	26d40 <k_uptime_get>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1388c:	2500      	movs	r5, #0
	s64_t current = k_uptime_get();
   1388e:	4606      	mov	r6, r0
   13890:	468a      	mov	sl, r1
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
   13892:	462f      	mov	r7, r5
   13894:	4c35      	ldr	r4, [pc, #212]	; (1396c <ipv6_nd_reachable_timeout+0xe8>)
		if (!nbr || !nbr->ref) {
   13896:	7823      	ldrb	r3, [r4, #0]
   13898:	2b00      	cmp	r3, #0
   1389a:	d03c      	beq.n	13916 <ipv6_nd_reachable_timeout+0x92>
		data = net_ipv6_nbr_data(nbr);
   1389c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
		if (!data) {
   138a0:	f1bc 0f00 	cmp.w	ip, #0
   138a4:	d037      	beq.n	13916 <ipv6_nd_reachable_timeout+0x92>
		if (!data->reachable) {
   138a6:	e9dc 2306 	ldrd	r2, r3, [ip, #24]
   138aa:	ea52 0103 	orrs.w	r1, r2, r3
   138ae:	d032      	beq.n	13916 <ipv6_nd_reachable_timeout+0x92>
		remaining = data->reachable + data->reachable_timeout - current;
   138b0:	f8dc 0020 	ldr.w	r0, [ip, #32]
   138b4:	ebb2 0806 	subs.w	r8, r2, r6
   138b8:	eb63 090a 	sbc.w	r9, r3, sl
   138bc:	eb18 0200 	adds.w	r2, r8, r0
   138c0:	eb49 73e0 	adc.w	r3, r9, r0, asr #31
		if (remaining > 0) {
   138c4:	2a01      	cmp	r2, #1
   138c6:	f173 0100 	sbcs.w	r1, r3, #0
   138ca:	db03      	blt.n	138d4 <ipv6_nd_reachable_timeout+0x50>
			ipv6_nd_restart_reachable_timer(NULL, remaining);
   138cc:	2000      	movs	r0, #0
				ipv6_nd_restart_reachable_timer(nbr,
   138ce:	f7ff fbc9 	bl	13064 <ipv6_nd_restart_reachable_timer>
   138d2:	e020      	b.n	13916 <ipv6_nd_reachable_timeout+0x92>
		data->reachable = 0;
   138d4:	2300      	movs	r3, #0
   138d6:	2200      	movs	r2, #0
   138d8:	e9cc 2306 	strd	r2, r3, [ip, #24]
		switch (data->state) {
   138dc:	f89c 3030 	ldrb.w	r3, [ip, #48]	; 0x30
   138e0:	2b04      	cmp	r3, #4
   138e2:	d818      	bhi.n	13916 <ipv6_nd_reachable_timeout+0x92>
   138e4:	e8df f003 	tbb	[pc, r3]
   138e8:	27231f03 	.word	0x27231f03
   138ec:	2c          	.byte	0x2c
   138ed:	00          	.byte	0x00
			if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   138ee:	f89c 3034 	ldrb.w	r3, [ip, #52]	; 0x34
   138f2:	68a0      	ldr	r0, [r4, #8]
   138f4:	2b02      	cmp	r3, #2
   138f6:	f10c 0104 	add.w	r1, ip, #4
   138fa:	d902      	bls.n	13902 <ipv6_nd_reachable_timeout+0x7e>
				net_ipv6_nbr_rm(nbr->iface, &data->addr);
   138fc:	f013 fada 	bl	26eb4 <net_ipv6_nbr_rm>
   13900:	e009      	b.n	13916 <ipv6_nd_reachable_timeout+0x92>
				data->ns_count++;
   13902:	3301      	adds	r3, #1
   13904:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
   13908:	2300      	movs	r3, #0
   1390a:	e9cd 1700 	strd	r1, r7, [sp]
   1390e:	461a      	mov	r2, r3
   13910:	4619      	mov	r1, r3
   13912:	f7ff fcd9 	bl	132c8 <net_ipv6_send_ns>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   13916:	3501      	adds	r5, #1
   13918:	2d08      	cmp	r5, #8
   1391a:	f104 0454 	add.w	r4, r4, #84	; 0x54
   1391e:	d1ba      	bne.n	13896 <ipv6_nd_reachable_timeout+0x12>
}
   13920:	b002      	add	sp, #8
   13922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			data->state = NET_IPV6_NBR_STATE_STALE;
   13926:	2302      	movs	r3, #2
   13928:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
			NET_DBG("nbr %p moving %s state to STALE (%d)",
   1392c:	e7f3      	b.n	13916 <ipv6_nd_reachable_timeout+0x92>
			net_ipv6_nbr_rm(nbr->iface, &data->addr);
   1392e:	68a0      	ldr	r0, [r4, #8]
   13930:	f10c 0104 	add.w	r1, ip, #4
   13934:	e7e2      	b.n	138fc <ipv6_nd_reachable_timeout+0x78>
			data->state = NET_IPV6_NBR_STATE_PROBE;
   13936:	2304      	movs	r3, #4
			data->ns_count = 0U;
   13938:	f88c 7034 	strb.w	r7, [ip, #52]	; 0x34
			data->state = NET_IPV6_NBR_STATE_PROBE;
   1393c:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
			if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   13940:	f89c 3034 	ldrb.w	r3, [ip, #52]	; 0x34
   13944:	68a0      	ldr	r0, [r4, #8]
   13946:	2b02      	cmp	r3, #2
   13948:	f10c 0104 	add.w	r1, ip, #4
   1394c:	d8d6      	bhi.n	138fc <ipv6_nd_reachable_timeout+0x78>
				data->ns_count++;
   1394e:	3301      	adds	r3, #1
   13950:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
   13954:	2300      	movs	r3, #0
   13956:	e9cd 1700 	strd	r1, r7, [sp]
   1395a:	461a      	mov	r2, r3
   1395c:	4619      	mov	r1, r3
   1395e:	f7ff fcb3 	bl	132c8 <net_ipv6_send_ns>
				ipv6_nd_restart_reachable_timer(nbr,
   13962:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13966:	2300      	movs	r3, #0
   13968:	4620      	mov	r0, r4
   1396a:	e7b0      	b.n	138ce <ipv6_nd_reachable_timeout+0x4a>
   1396c:	200200e0 	.word	0x200200e0

00013970 <net_ipv6_nbr_init>:
	.handler = handle_ra_input,
};
#endif /* CONFIG_NET_IPV6_ND */

void net_ipv6_nbr_init(void)
{
   13970:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   13972:	480c      	ldr	r0, [pc, #48]	; (139a4 <net_ipv6_nbr_init+0x34>)
   13974:	f7ff fa7c 	bl	12e70 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   13978:	480b      	ldr	r0, [pc, #44]	; (139a8 <net_ipv6_nbr_init+0x38>)
   1397a:	f7ff fa79 	bl	12e70 <net_icmpv6_register_handler>
	k_delayed_work_init(&ipv6_ns_reply_timer, ipv6_ns_reply_timeout);
   1397e:	490b      	ldr	r1, [pc, #44]	; (139ac <net_ipv6_nbr_init+0x3c>)
   13980:	480b      	ldr	r0, [pc, #44]	; (139b0 <net_ipv6_nbr_init+0x40>)
   13982:	f015 fbaf 	bl	290e4 <k_delayed_work_init>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   13986:	480b      	ldr	r0, [pc, #44]	; (139b4 <net_ipv6_nbr_init+0x44>)
   13988:	f7ff fa72 	bl	12e70 <net_icmpv6_register_handler>
	k_delayed_work_init(&ipv6_nd_reachable_timer,
   1398c:	490a      	ldr	r1, [pc, #40]	; (139b8 <net_ipv6_nbr_init+0x48>)
   1398e:	480b      	ldr	r0, [pc, #44]	; (139bc <net_ipv6_nbr_init+0x4c>)
   13990:	f015 fba8 	bl	290e4 <k_delayed_work_init>
			    ipv6_nd_reachable_timeout);
	k_sem_init(&nbr_lock, 1, UINT_MAX);
#endif
}
   13994:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   13998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1399c:	2101      	movs	r1, #1
   1399e:	4808      	ldr	r0, [pc, #32]	; (139c0 <net_ipv6_nbr_init+0x50>)
   139a0:	f015 bb27 	b.w	28ff2 <z_impl_k_sem_init>
   139a4:	20020380 	.word	0x20020380
   139a8:	200200c8 	.word	0x200200c8
   139ac:	0001315d 	.word	0x0001315d
   139b0:	20022d34 	.word	0x20022d34
   139b4:	2002038c 	.word	0x2002038c
   139b8:	00013885 	.word	0x00013885
   139bc:	20022d14 	.word	0x20022d14
   139c0:	20022d54 	.word	0x20022d54

000139c4 <net_ipv6_mld_init>:
	.handler = handle_mld_query,
};

void net_ipv6_mld_init(void)
{
	net_icmpv6_register_handler(&mld_query_input_handler);
   139c4:	4801      	ldr	r0, [pc, #4]	; (139cc <net_ipv6_mld_init+0x8>)
   139c6:	f7ff ba53 	b.w	12e70 <net_icmpv6_register_handler>
   139ca:	bf00      	nop
   139cc:	20020398 	.word	0x20020398

000139d0 <sys_slist_find_and_remove.constprop.0>:
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   139d0:	2100      	movs	r1, #0
   139d2:	4a0d      	ldr	r2, [pc, #52]	; (13a08 <sys_slist_find_and_remove.constprop.0+0x38>)
   139d4:	6813      	ldr	r3, [r2, #0]
   139d6:	b90b      	cbnz	r3, 139dc <sys_slist_find_and_remove.constprop.0+0xc>
   139d8:	4618      	mov	r0, r3
   139da:	4770      	bx	lr
   139dc:	4283      	cmp	r3, r0
   139de:	d110      	bne.n	13a02 <sys_slist_find_and_remove.constprop.0+0x32>
Z_GENLIST_REMOVE(slist, snode)
   139e0:	6803      	ldr	r3, [r0, #0]
   139e2:	b941      	cbnz	r1, 139f6 <sys_slist_find_and_remove.constprop.0+0x26>
   139e4:	6851      	ldr	r1, [r2, #4]
	list->head = node;
   139e6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   139e8:	4288      	cmp	r0, r1
   139ea:	d100      	bne.n	139ee <sys_slist_find_and_remove.constprop.0+0x1e>
	list->tail = node;
   139ec:	6053      	str	r3, [r2, #4]
	parent->next = child;
   139ee:	2300      	movs	r3, #0
   139f0:	6003      	str	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   139f2:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   139f4:	4770      	bx	lr
	parent->next = child;
   139f6:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   139f8:	6853      	ldr	r3, [r2, #4]
   139fa:	4298      	cmp	r0, r3
	list->tail = node;
   139fc:	bf08      	it	eq
   139fe:	6051      	streq	r1, [r2, #4]
}
   13a00:	e7f5      	b.n	139ee <sys_slist_find_and_remove.constprop.0+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13a02:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13a04:	681b      	ldr	r3, [r3, #0]
   13a06:	e7e6      	b.n	139d6 <sys_slist_find_and_remove.constprop.0+0x6>
   13a08:	20022d70 	.word	0x20022d70

00013a0c <net_route_get_nbr>:
{
	int i;

	NET_ASSERT(route);

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   13a0c:	4a09      	ldr	r2, [pc, #36]	; (13a34 <net_route_get_nbr+0x28>)
   13a0e:	2300      	movs	r3, #0
   13a10:	4611      	mov	r1, r2
{
   13a12:	b510      	push	{r4, lr}
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   13a14:	7814      	ldrb	r4, [r2, #0]
   13a16:	b114      	cbz	r4, 13a1e <net_route_get_nbr+0x12>
			continue;
		}

		if (nbr->data == (u8_t *)route) {
   13a18:	68d4      	ldr	r4, [r2, #12]
   13a1a:	4284      	cmp	r4, r0
   13a1c:	d006      	beq.n	13a2c <net_route_get_nbr+0x20>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   13a1e:	3301      	adds	r3, #1
   13a20:	2b08      	cmp	r3, #8
   13a22:	f102 0238 	add.w	r2, r2, #56	; 0x38
   13a26:	d1f5      	bne.n	13a14 <net_route_get_nbr+0x8>

			return nbr;
		}
	}

	return NULL;
   13a28:	2000      	movs	r0, #0
}
   13a2a:	bd10      	pop	{r4, pc}
	return &net_route_entries_pool[idx].nbr;
   13a2c:	2038      	movs	r0, #56	; 0x38
   13a2e:	fb00 1003 	mla	r0, r0, r3, r1
   13a32:	e7fa      	b.n	13a2a <net_route_get_nbr+0x1e>
   13a34:	200203a4 	.word	0x200203a4

00013a38 <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   13a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0U;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   13a3c:	2700      	movs	r7, #0
{
   13a3e:	4680      	mov	r8, r0
   13a40:	4689      	mov	r9, r1
	u8_t longest_match = 0U;
   13a42:	46bb      	mov	fp, r7
	struct net_route_entry *route, *found = NULL;
   13a44:	463d      	mov	r5, r7
   13a46:	4e24      	ldr	r6, [pc, #144]	; (13ad8 <net_route_lookup+0xa0>)
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   13a48:	7832      	ldrb	r2, [r6, #0]
   13a4a:	b372      	cbz	r2, 13aaa <net_route_lookup+0x72>
			continue;
		}

		if (iface && nbr->iface != iface) {
   13a4c:	f1b8 0f00 	cmp.w	r8, #0
   13a50:	d002      	beq.n	13a58 <net_route_lookup+0x20>
   13a52:	68b2      	ldr	r2, [r6, #8]
   13a54:	4542      	cmp	r2, r8
   13a56:	d128      	bne.n	13aaa <net_route_lookup+0x72>
			continue;
		}

		route = net_route_data(nbr);
   13a58:	f8d6 a00c 	ldr.w	sl, [r6, #12]

		if (route->prefix_len >= longest_match &&
   13a5c:	f89a 4020 	ldrb.w	r4, [sl, #32]
   13a60:	455c      	cmp	r4, fp
   13a62:	d322      	bcc.n	13aaa <net_route_lookup+0x72>
	if (length > 128) {
   13a64:	2c80      	cmp	r4, #128	; 0x80
   13a66:	d820      	bhi.n	13aaa <net_route_lookup+0x72>
		    net_ipv6_is_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   13a68:	f10a 0110 	add.w	r1, sl, #16
	if (memcmp(addr1, addr2, bytes)) {
   13a6c:	08e2      	lsrs	r2, r4, #3
   13a6e:	4648      	mov	r0, r9
   13a70:	e9cd 1200 	strd	r1, r2, [sp]
   13a74:	f015 fcef 	bl	29456 <memcmp>
   13a78:	23ff      	movs	r3, #255	; 0xff
   13a7a:	b9b0      	cbnz	r0, 13aaa <net_route_lookup+0x72>
	u8_t bits = 128 - length;
   13a7c:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   13a80:	f014 0407 	ands.w	r4, r4, #7
   13a84:	d00e      	beq.n	13aa4 <net_route_lookup+0x6c>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   13a86:	9a01      	ldr	r2, [sp, #4]
   13a88:	9900      	ldr	r1, [sp, #0]
   13a8a:	f819 0002 	ldrb.w	r0, [r9, r2]
   13a8e:	5c8a      	ldrb	r2, [r1, r2]
   13a90:	4050      	eors	r0, r2
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   13a92:	f1c4 0208 	rsb	r2, r4, #8
   13a96:	fa03 f202 	lsl.w	r2, r3, r2
   13a9a:	405a      	eors	r2, r3
   13a9c:	fa02 f404 	lsl.w	r4, r2, r4
		if (route->prefix_len >= longest_match &&
   13aa0:	4220      	tst	r0, r4
   13aa2:	d102      	bne.n	13aaa <net_route_lookup+0x72>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   13aa4:	4655      	mov	r5, sl
   13aa6:	f89a b020 	ldrb.w	fp, [sl, #32]
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   13aaa:	3701      	adds	r7, #1
   13aac:	2f08      	cmp	r7, #8
   13aae:	d004      	beq.n	13aba <net_route_lookup+0x82>
   13ab0:	f01b 0f80 	tst.w	fp, #128	; 0x80
   13ab4:	f106 0638 	add.w	r6, r6, #56	; 0x38
   13ab8:	d0c6      	beq.n	13a48 <net_route_lookup+0x10>
		}
	}

	if (found) {
   13aba:	b14d      	cbz	r5, 13ad0 <net_route_lookup+0x98>
	sys_slist_find_and_remove(&routes, &route->node);
   13abc:	4628      	mov	r0, r5
   13abe:	f7ff ff87 	bl	139d0 <sys_slist_find_and_remove.constprop.0>
Z_GENLIST_PREPEND(slist, snode)
   13ac2:	4b06      	ldr	r3, [pc, #24]	; (13adc <net_route_lookup+0xa4>)
   13ac4:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   13ac6:	602a      	str	r2, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   13ac8:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   13aca:	601d      	str	r5, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   13acc:	b902      	cbnz	r2, 13ad0 <net_route_lookup+0x98>
	list->tail = node;
   13ace:	605d      	str	r5, [r3, #4]

		update_route_access(found);
	}

	return found;
}
   13ad0:	4628      	mov	r0, r5
   13ad2:	b003      	add	sp, #12
   13ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ad8:	200203a4 	.word	0x200203a4
   13adc:	20022d70 	.word	0x20022d70

00013ae0 <net_route_del_by_nexthop>:

	return 0;
}

int net_route_del_by_nexthop(struct net_if *iface, struct in6_addr *nexthop)
{
   13ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, ret;

	NET_ASSERT(iface);
	NET_ASSERT(nexthop);

	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
   13ae4:	f013 f9f6 	bl	26ed4 <net_ipv6_nbr_lookup>
	int count = 0, status = 0;
   13ae8:	2600      	movs	r6, #0
	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
   13aea:	4607      	mov	r7, r0
	int count = 0, status = 0;
   13aec:	4634      	mov	r4, r6
   13aee:	4d0d      	ldr	r5, [pc, #52]	; (13b24 <net_route_del_by_nexthop+0x44>)
   13af0:	f505 78e0 	add.w	r8, r5, #448	; 0x1c0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);
		struct net_route_entry *route = net_route_data(nbr);
   13af4:	68e8      	ldr	r0, [r5, #12]

		if (!route) {
   13af6:	b140      	cbz	r0, 13b0a <net_route_del_by_nexthop+0x2a>
			continue;
		}

		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
   13af8:	6843      	ldr	r3, [r0, #4]
   13afa:	b133      	cbz	r3, 13b0a <net_route_del_by_nexthop+0x2a>
					     node) {
			if (nexthop_route->nbr == nbr_nexthop) {
   13afc:	685a      	ldr	r2, [r3, #4]
   13afe:	42ba      	cmp	r2, r7
   13b00:	d10c      	bne.n	13b1c <net_route_del_by_nexthop+0x3c>
				/* This route contains this nexthop */
				ret = net_route_del(route);
   13b02:	f013 ffa8 	bl	27a56 <net_route_del>
				if (!ret) {
   13b06:	b958      	cbnz	r0, 13b20 <net_route_del_by_nexthop+0x40>
					count++;
   13b08:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   13b0a:	3538      	adds	r5, #56	; 0x38
   13b0c:	45a8      	cmp	r8, r5
   13b0e:	d1f1      	bne.n	13af4 <net_route_del_by_nexthop+0x14>
				break;
			}
		}
	}

	if (count) {
   13b10:	b90c      	cbnz	r4, 13b16 <net_route_del_by_nexthop+0x36>
		return count;
	} else if (status < 0) {
   13b12:	ea06 74e6 	and.w	r4, r6, r6, asr #31
		return status;
	}

	return 0;
}
   13b16:	4620      	mov	r0, r4
   13b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13b1c:	681b      	ldr	r3, [r3, #0]
	return node->next;
   13b1e:	e7ec      	b.n	13afa <net_route_del_by_nexthop+0x1a>
   13b20:	4606      	mov	r6, r0
   13b22:	e7f2      	b.n	13b0a <net_route_del_by_nexthop+0x2a>
   13b24:	200203a4 	.word	0x200203a4

00013b28 <conn_set_unused>:

	sys_slist_prepend(&conn_used, &conn->node);
}

static void conn_set_unused(struct net_conn *conn)
{
   13b28:	b510      	push	{r4, lr}
   13b2a:	4604      	mov	r4, r0
   13b2c:	2240      	movs	r2, #64	; 0x40
   13b2e:	2100      	movs	r1, #0
   13b30:	f015 fcd9 	bl	294e6 <memset>
Z_GENLIST_PREPEND(slist, snode)
   13b34:	4b03      	ldr	r3, [pc, #12]	; (13b44 <conn_set_unused+0x1c>)
   13b36:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   13b38:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   13b3a:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   13b3c:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   13b3e:	b902      	cbnz	r2, 13b42 <conn_set_unused+0x1a>
	list->tail = node;
   13b40:	605c      	str	r4, [r3, #4]
	(void)memset(conn, 0, sizeof(*conn));

	sys_slist_prepend(&conn_unused, &conn->node);
}
   13b42:	bd10      	pop	{r4, pc}
   13b44:	20022d78 	.word	0x20022d78

00013b48 <net_conn_register>:
		      u16_t remote_port,
		      u16_t local_port,
		      net_conn_cb_t cb,
		      void *user_data,
		      struct net_conn_handle **handle)
{
   13b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b4c:	ed2d 8b02 	vpush	{d8}
   13b50:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   13b52:	4a6c      	ldr	r2, [pc, #432]	; (13d04 <net_conn_register+0x1bc>)
{
   13b54:	b083      	sub	sp, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   13b56:	6814      	ldr	r4, [r2, #0]
{
   13b58:	4680      	mov	r8, r0
   13b5a:	4689      	mov	r9, r1
   13b5c:	469a      	mov	sl, r3
   13b5e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
   13b62:	f8bd 703c 	ldrh.w	r7, [sp, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   13b66:	b18c      	cbz	r4, 13b8c <net_conn_register+0x44>
   13b68:	ba72      	rev16	r2, r6
   13b6a:	b293      	uxth	r3, r2
   13b6c:	ba7a      	rev16	r2, r7
   13b6e:	9300      	str	r3, [sp, #0]
   13b70:	b293      	uxth	r3, r2
   13b72:	9301      	str	r3, [sp, #4]
					    &net_sin6(local_addr)->sin6_addr,
   13b74:	f10a 0304 	add.w	r3, sl, #4
   13b78:	ee08 3a10 	vmov	s16, r3
					    &net_sin6(remote_addr)->sin6_addr,
   13b7c:	f105 0b04 	add.w	fp, r5, #4
		if (conn->proto != proto) {
   13b80:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   13b82:	4542      	cmp	r2, r8
   13b84:	d009      	beq.n	13b9a <net_conn_register+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13b86:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   13b88:	2c00      	cmp	r4, #0
   13b8a:	d1f9      	bne.n	13b80 <net_conn_register+0x38>
	node = sys_slist_peek_head(&conn_unused);
   13b8c:	4a5e      	ldr	r2, [pc, #376]	; (13d08 <net_conn_register+0x1c0>)
   13b8e:	6811      	ldr	r1, [r2, #0]
	if (!node) {
   13b90:	2900      	cmp	r1, #0
   13b92:	d148      	bne.n	13c26 <net_conn_register+0xde>
		return -EALREADY;
	}

	conn = conn_get_unused();
	if (!conn) {
		return -ENOENT;
   13b94:	f06f 0001 	mvn.w	r0, #1
   13b98:	e040      	b.n	13c1c <net_conn_register+0xd4>
		if (conn->family != family) {
   13b9a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
   13b9e:	454a      	cmp	r2, r9
   13ba0:	d1f1      	bne.n	13b86 <net_conn_register+0x3e>
		if (remote_addr) {
   13ba2:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
   13ba6:	f002 0202 	and.w	r2, r2, #2
   13baa:	b1c5      	cbz	r5, 13bde <net_conn_register+0x96>
			if (!(conn->flags & NET_CONN_REMOTE_ADDR_SET)) {
   13bac:	2a00      	cmp	r2, #0
   13bae:	d0ea      	beq.n	13b86 <net_conn_register+0x3e>
			if (IS_ENABLED(CONFIG_NET_IPV6) &&
   13bb0:	882a      	ldrh	r2, [r5, #0]
   13bb2:	2a02      	cmp	r2, #2
   13bb4:	d1e7      	bne.n	13b86 <net_conn_register+0x3e>
			    remote_addr->sa_family == AF_INET6 &&
   13bb6:	88a2      	ldrh	r2, [r4, #4]
   13bb8:	2a02      	cmp	r2, #2
   13bba:	d1e4      	bne.n	13b86 <net_conn_register+0x3e>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   13bbc:	2210      	movs	r2, #16
   13bbe:	4658      	mov	r0, fp
   13bc0:	f104 0108 	add.w	r1, r4, #8
   13bc4:	f015 fc47 	bl	29456 <memcmp>
				if (!net_ipv6_addr_cmp(
   13bc8:	2800      	cmp	r0, #0
   13bca:	d1dc      	bne.n	13b86 <net_conn_register+0x3e>
		if (local_addr) {
   13bcc:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
   13bd0:	f002 0204 	and.w	r2, r2, #4
   13bd4:	f1ba 0f00 	cmp.w	sl, #0
   13bd8:	d104      	bne.n	13be4 <net_conn_register+0x9c>
		} else if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
   13bda:	b1aa      	cbz	r2, 13c08 <net_conn_register+0xc0>
   13bdc:	e7d3      	b.n	13b86 <net_conn_register+0x3e>
		} else if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
   13bde:	2a00      	cmp	r2, #0
   13be0:	d0f4      	beq.n	13bcc <net_conn_register+0x84>
   13be2:	e7d0      	b.n	13b86 <net_conn_register+0x3e>
			if (!(conn->flags & NET_CONN_LOCAL_ADDR_SET)) {
   13be4:	2a00      	cmp	r2, #0
   13be6:	d0ce      	beq.n	13b86 <net_conn_register+0x3e>
			if (IS_ENABLED(CONFIG_NET_IPV6) &&
   13be8:	f8ba 2000 	ldrh.w	r2, [sl]
   13bec:	2a02      	cmp	r2, #2
   13bee:	d1ca      	bne.n	13b86 <net_conn_register+0x3e>
			    local_addr->sa_family == AF_INET6 &&
   13bf0:	8ba2      	ldrh	r2, [r4, #28]
   13bf2:	2a02      	cmp	r2, #2
   13bf4:	d1c7      	bne.n	13b86 <net_conn_register+0x3e>
   13bf6:	2210      	movs	r2, #16
   13bf8:	ee18 0a10 	vmov	r0, s16
   13bfc:	f104 0120 	add.w	r1, r4, #32
   13c00:	f015 fc29 	bl	29456 <memcmp>
				if (!net_ipv6_addr_cmp(
   13c04:	2800      	cmp	r0, #0
   13c06:	d1be      	bne.n	13b86 <net_conn_register+0x3e>
		if (net_sin(&conn->remote_addr)->sin_port !=
   13c08:	88e2      	ldrh	r2, [r4, #6]
   13c0a:	9b00      	ldr	r3, [sp, #0]
   13c0c:	429a      	cmp	r2, r3
   13c0e:	d1ba      	bne.n	13b86 <net_conn_register+0x3e>
		if (net_sin(&conn->local_addr)->sin_port !=
   13c10:	8be2      	ldrh	r2, [r4, #30]
   13c12:	9b01      	ldr	r3, [sp, #4]
   13c14:	429a      	cmp	r2, r3
   13c16:	d1b6      	bne.n	13b86 <net_conn_register+0x3e>
		return -EALREADY;
   13c18:	f06f 0077 	mvn.w	r0, #119	; 0x77

	return 0;
error:
	conn_set_unused(conn);
	return -EINVAL;
}
   13c1c:	b003      	add	sp, #12
   13c1e:	ecbd 8b02 	vpop	{d8}
   13c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_REMOVE(slist, snode)
   13c26:	6850      	ldr	r0, [r2, #4]
   13c28:	680c      	ldr	r4, [r1, #0]
   13c2a:	4281      	cmp	r1, r0
	list->head = node;
   13c2c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   13c2e:	bf08      	it	eq
   13c30:	6054      	streq	r4, [r2, #4]
	parent->next = child;
   13c32:	2200      	movs	r2, #0
   13c34:	600a      	str	r2, [r1, #0]
	if (remote_addr) {
   13c36:	2d00      	cmp	r5, #0
   13c38:	d059      	beq.n	13cee <net_conn_register+0x1a6>
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
   13c3a:	882a      	ldrh	r2, [r5, #0]
   13c3c:	2a02      	cmp	r2, #2
   13c3e:	d158      	bne.n	13cf2 <net_conn_register+0x1aa>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13c40:	462a      	mov	r2, r5
   13c42:	1d08      	adds	r0, r1, #4
   13c44:	f105 0418 	add.w	r4, r5, #24
   13c48:	f852 cb04 	ldr.w	ip, [r2], #4
   13c4c:	42a2      	cmp	r2, r4
   13c4e:	f840 cb04 	str.w	ip, [r0], #4
   13c52:	d1f9      	bne.n	13c48 <net_conn_register+0x100>
			if (!net_ipv6_is_addr_unspecified(
   13c54:	1d28      	adds	r0, r5, #4
   13c56:	f013 ffae 	bl	27bb6 <net_ipv6_is_addr_unspecified>
				flags |= NET_CONN_REMOTE_ADDR_SPEC;
   13c5a:	2800      	cmp	r0, #0
		flags |= NET_CONN_REMOTE_ADDR_SET;
   13c5c:	bf14      	ite	ne
   13c5e:	2402      	movne	r4, #2
   13c60:	2422      	moveq	r4, #34	; 0x22
	if (local_addr) {
   13c62:	f1ba 0f00 	cmp.w	sl, #0
   13c66:	d01d      	beq.n	13ca4 <net_conn_register+0x15c>
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
   13c68:	f8ba 2000 	ldrh.w	r2, [sl]
   13c6c:	2a02      	cmp	r2, #2
   13c6e:	d140      	bne.n	13cf2 <net_conn_register+0x1aa>
   13c70:	4652      	mov	r2, sl
   13c72:	f101 001c 	add.w	r0, r1, #28
   13c76:	f10a 0c18 	add.w	ip, sl, #24
   13c7a:	f852 eb04 	ldr.w	lr, [r2], #4
   13c7e:	4562      	cmp	r2, ip
   13c80:	f840 eb04 	str.w	lr, [r0], #4
   13c84:	d1f9      	bne.n	13c7a <net_conn_register+0x132>
			if (!net_ipv6_is_addr_unspecified(
   13c86:	f10a 0004 	add.w	r0, sl, #4
   13c8a:	f013 ff94 	bl	27bb6 <net_ipv6_is_addr_unspecified>
   13c8e:	b908      	cbnz	r0, 13c94 <net_conn_register+0x14c>
				flags |= NET_CONN_LOCAL_ADDR_SPEC;
   13c90:	f044 0440 	orr.w	r4, r4, #64	; 0x40
		flags |= NET_CONN_LOCAL_ADDR_SET;
   13c94:	f044 0404 	orr.w	r4, r4, #4
	if (remote_addr && local_addr) {
   13c98:	b125      	cbz	r5, 13ca4 <net_conn_register+0x15c>
		if (remote_addr->sa_family != local_addr->sa_family) {
   13c9a:	882a      	ldrh	r2, [r5, #0]
   13c9c:	f8ba 3000 	ldrh.w	r3, [sl]
   13ca0:	429a      	cmp	r2, r3
   13ca2:	d126      	bne.n	13cf2 <net_conn_register+0x1aa>
	if (remote_port) {
   13ca4:	b11e      	cbz	r6, 13cae <net_conn_register+0x166>
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
   13ca6:	ba76      	rev16	r6, r6
		flags |= NET_CONN_REMOTE_PORT_SPEC;
   13ca8:	f044 0408 	orr.w	r4, r4, #8
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
   13cac:	80ce      	strh	r6, [r1, #6]
	if (local_port) {
   13cae:	b11f      	cbz	r7, 13cb8 <net_conn_register+0x170>
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
   13cb0:	ba7f      	rev16	r7, r7
		flags |= NET_CONN_LOCAL_PORT_SPEC;
   13cb2:	f044 0410 	orr.w	r4, r4, #16
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
   13cb6:	83cf      	strh	r7, [r1, #30]
	conn->cb = cb;
   13cb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	conn->flags = flags;
   13cba:	f881 403f 	strb.w	r4, [r1, #63]	; 0x3f
	conn->cb = cb;
   13cbe:	634b      	str	r3, [r1, #52]	; 0x34
	conn->user_data = user_data;
   13cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
	conn->proto = proto;
   13cc2:	f8a1 803c 	strh.w	r8, [r1, #60]	; 0x3c
	conn->user_data = user_data;
   13cc6:	638b      	str	r3, [r1, #56]	; 0x38
	if (handle) {
   13cc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
	conn->family = family;
   13cca:	f881 903e 	strb.w	r9, [r1, #62]	; 0x3e
	if (handle) {
   13cce:	b103      	cbz	r3, 13cd2 <net_conn_register+0x18a>
		*handle = (struct net_conn_handle *)conn;
   13cd0:	6019      	str	r1, [r3, #0]
	conn->flags |= NET_CONN_IN_USE;
   13cd2:	f891 303f 	ldrb.w	r3, [r1, #63]	; 0x3f
   13cd6:	f043 0301 	orr.w	r3, r3, #1
   13cda:	f881 303f 	strb.w	r3, [r1, #63]	; 0x3f
Z_GENLIST_PREPEND(slist, snode)
   13cde:	4b09      	ldr	r3, [pc, #36]	; (13d04 <net_conn_register+0x1bc>)
   13ce0:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   13ce2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   13ce4:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   13ce6:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   13ce8:	b948      	cbnz	r0, 13cfe <net_conn_register+0x1b6>
	list->tail = node;
   13cea:	6059      	str	r1, [r3, #4]
}
   13cec:	e796      	b.n	13c1c <net_conn_register+0xd4>
	u8_t flags = 0U;
   13cee:	462c      	mov	r4, r5
   13cf0:	e7b7      	b.n	13c62 <net_conn_register+0x11a>
	conn_set_unused(conn);
   13cf2:	4608      	mov	r0, r1
   13cf4:	f7ff ff18 	bl	13b28 <conn_set_unused>
	return -EINVAL;
   13cf8:	f06f 0015 	mvn.w	r0, #21
   13cfc:	e78e      	b.n	13c1c <net_conn_register+0xd4>
	return 0;
   13cfe:	2000      	movs	r0, #0
   13d00:	e78c      	b.n	13c1c <net_conn_register+0xd4>
   13d02:	bf00      	nop
   13d04:	20022d80 	.word	0x20022d80
   13d08:	20022d78 	.word	0x20022d78

00013d0c <net_conn_unregister>:

int net_conn_unregister(struct net_conn_handle *handle)
{
   13d0c:	b508      	push	{r3, lr}
	struct net_conn *conn = (struct net_conn *)handle;

	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   13d0e:	4b16      	ldr	r3, [pc, #88]	; (13d68 <net_conn_unregister+0x5c>)
   13d10:	4298      	cmp	r0, r3
   13d12:	d323      	bcc.n	13d5c <net_conn_unregister+0x50>
   13d14:	f503 7380 	add.w	r3, r3, #256	; 0x100
   13d18:	4298      	cmp	r0, r3
   13d1a:	d81f      	bhi.n	13d5c <net_conn_unregister+0x50>
		return -EINVAL;
	}

	if (!(conn->flags & NET_CONN_IN_USE)) {
   13d1c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   13d20:	07db      	lsls	r3, r3, #31
   13d22:	d51e      	bpl.n	13d62 <net_conn_unregister+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13d24:	2100      	movs	r1, #0
   13d26:	4b11      	ldr	r3, [pc, #68]	; (13d6c <net_conn_unregister+0x60>)
   13d28:	681a      	ldr	r2, [r3, #0]
   13d2a:	b152      	cbz	r2, 13d42 <net_conn_unregister+0x36>
   13d2c:	4290      	cmp	r0, r2
   13d2e:	d112      	bne.n	13d56 <net_conn_unregister+0x4a>
Z_GENLIST_REMOVE(slist, snode)
   13d30:	6802      	ldr	r2, [r0, #0]
   13d32:	b951      	cbnz	r1, 13d4a <net_conn_unregister+0x3e>
   13d34:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   13d36:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   13d38:	4288      	cmp	r0, r1
   13d3a:	d100      	bne.n	13d3e <net_conn_unregister+0x32>
	list->tail = node;
   13d3c:	605a      	str	r2, [r3, #4]
	parent->next = child;
   13d3e:	2300      	movs	r3, #0
   13d40:	6003      	str	r3, [r0, #0]

	NET_DBG("Connection handler %p removed", conn);

	sys_slist_find_and_remove(&conn_used, &conn->node);

	conn_set_unused(conn);
   13d42:	f7ff fef1 	bl	13b28 <conn_set_unused>

	return 0;
   13d46:	2000      	movs	r0, #0
}
   13d48:	bd08      	pop	{r3, pc}
   13d4a:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   13d4c:	685a      	ldr	r2, [r3, #4]
   13d4e:	4290      	cmp	r0, r2
	list->tail = node;
   13d50:	bf08      	it	eq
   13d52:	6059      	streq	r1, [r3, #4]
}
   13d54:	e7f3      	b.n	13d3e <net_conn_unregister+0x32>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13d56:	4611      	mov	r1, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13d58:	6812      	ldr	r2, [r2, #0]
   13d5a:	e7e6      	b.n	13d2a <net_conn_unregister+0x1e>
		return -EINVAL;
   13d5c:	f06f 0015 	mvn.w	r0, #21
   13d60:	e7f2      	b.n	13d48 <net_conn_unregister+0x3c>
		return -ENOENT;
   13d62:	f06f 0001 	mvn.w	r0, #1
   13d66:	e7ef      	b.n	13d48 <net_conn_unregister+0x3c>
   13d68:	20022d88 	.word	0x20022d88
   13d6c:	20022d80 	.word	0x20022d80

00013d70 <net_conn_input>:

enum net_verdict net_conn_input(struct net_pkt *pkt,
				union net_ip_header *ip_hdr,
				u8_t proto,
				union net_proto_header *proto_hdr)
{
   13d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d74:	ed2d 8b02 	vpush	{d8}
	s16_t best_rank = -1;
	struct net_conn *conn;
	u16_t src_port;
	u16_t dst_port;

	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   13d78:	2a11      	cmp	r2, #17
{
   13d7a:	4605      	mov	r5, r0
   13d7c:	460e      	mov	r6, r1
   13d7e:	469a      	mov	sl, r3
   13d80:	b087      	sub	sp, #28
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   13d82:	f040 80b8 	bne.w	13ef6 <net_conn_input+0x186>
		src_port = proto_hdr->udp->src_port;
   13d86:	681b      	ldr	r3, [r3, #0]
   13d88:	881a      	ldrh	r2, [r3, #0]
   13d8a:	9204      	str	r2, [sp, #16]
		dst_port = proto_hdr->udp->dst_port;
   13d8c:	f8b3 b002 	ldrh.w	fp, [r3, #2]
	return pkt->family;
   13d90:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   13d94:	f3c3 0342 	ubfx	r3, r3, #1, #3
   13d98:	2b02      	cmp	r3, #2
   13d9a:	d054      	beq.n	13e46 <net_conn_input+0xd6>
	bool is_mcast_pkt = false, mcast_pkt_delivered = false;
   13d9c:	f04f 0800 	mov.w	r8, #0
		if (net_ipv6_is_addr_mcast(&ip_hdr->ipv6->dst)) {
			is_mcast_pkt = true;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   13da0:	4b70      	ldr	r3, [pc, #448]	; (13f64 <net_conn_input+0x1f4>)
   13da2:	681c      	ldr	r4, [r3, #0]
   13da4:	2c00      	cmp	r4, #0
   13da6:	f000 80cc 	beq.w	13f42 <net_conn_input+0x1d2>
   13daa:	f04f 0900 	mov.w	r9, #0
   13dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13db2:	464f      	mov	r7, r9
   13db4:	9303      	str	r3, [sp, #12]
		if (conn->proto != proto) {
   13db6:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   13db8:	2b11      	cmp	r3, #17
   13dba:	f040 8081 	bne.w	13ec0 <net_conn_input+0x150>
			continue;
		}

		if (conn->family != AF_UNSPEC &&
   13dbe:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
   13dc2:	b12a      	cbz	r2, 13dd0 <net_conn_input+0x60>
   13dc4:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   13dc8:	f3c3 0342 	ubfx	r3, r3, #1, #3
   13dcc:	4293      	cmp	r3, r2
   13dce:	d177      	bne.n	13ec0 <net_conn_input+0x150>
			continue;
		}

		if (IS_ENABLED(CONFIG_NET_UDP) ||
		    IS_ENABLED(CONFIG_NET_TCP)) {
			if (net_sin(&conn->remote_addr)->sin_port) {
   13dd0:	88e3      	ldrh	r3, [r4, #6]
   13dd2:	b113      	cbz	r3, 13dda <net_conn_input+0x6a>
				if (net_sin(&conn->remote_addr)->sin_port !=
   13dd4:	9a04      	ldr	r2, [sp, #16]
   13dd6:	4293      	cmp	r3, r2
   13dd8:	d172      	bne.n	13ec0 <net_conn_input+0x150>
				    src_port) {
					continue;
				}
			}

			if (net_sin(&conn->local_addr)->sin_port) {
   13dda:	8be3      	ldrh	r3, [r4, #30]
   13ddc:	b10b      	cbz	r3, 13de2 <net_conn_input+0x72>
				if (net_sin(&conn->local_addr)->sin_port !=
   13dde:	455b      	cmp	r3, fp
   13de0:	d16e      	bne.n	13ec0 <net_conn_input+0x150>
				    dst_port) {
					continue;
				}
			}

			if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
   13de2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   13de6:	0799      	lsls	r1, r3, #30
   13de8:	d450      	bmi.n	13e8c <net_conn_input+0x11c>
						   true)) {
					continue;
				}
			}

			if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
   13dea:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   13dee:	075a      	lsls	r2, r3, #29
   13df0:	d518      	bpl.n	13e24 <net_conn_input+0xb4>
   13df2:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	if (addr->sa_family != net_pkt_family(pkt)) {
   13df6:	8ba1      	ldrh	r1, [r4, #28]
   13df8:	f3c3 0242 	ubfx	r2, r3, #1, #3
   13dfc:	4291      	cmp	r1, r2
   13dfe:	d15f      	bne.n	13ec0 <net_conn_input+0x150>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   13e00:	2a02      	cmp	r2, #2
   13e02:	d10f      	bne.n	13e24 <net_conn_input+0xb4>
			    &net_sin6(addr)->sin6_addr)) {
   13e04:	f104 0320 	add.w	r3, r4, #32
		if (!net_ipv6_is_addr_unspecified(
   13e08:	4618      	mov	r0, r3
   13e0a:	9305      	str	r3, [sp, #20]
   13e0c:	f013 fed3 	bl	27bb6 <net_ipv6_is_addr_unspecified>
   13e10:	b940      	cbnz	r0, 13e24 <net_conn_input+0xb4>
			addr6 = &ip_hdr->ipv6->dst;
   13e12:	6831      	ldr	r1, [r6, #0]
   13e14:	9b05      	ldr	r3, [sp, #20]
   13e16:	2210      	movs	r2, #16
   13e18:	4618      	mov	r0, r3
   13e1a:	3118      	adds	r1, #24
   13e1c:	f015 fb1b 	bl	29456 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   13e20:	2800      	cmp	r0, #0
   13e22:	d14d      	bne.n	13ec0 <net_conn_input+0x150>

			/* If we have an existing best_match, and that one
			 * specifies a remote port, then we've matched to a
			 * LISTENING connection that should not override.
			 */
			if (best_match != NULL &&
   13e24:	f1b9 0f00 	cmp.w	r9, #0
   13e28:	d157      	bne.n	13eda <net_conn_input+0x16a>
			    best_match->flags & NET_CONN_REMOTE_PORT_SPEC) {
				continue;
			}

			if (best_rank < NET_CONN_RANK(conn->flags)) {
   13e2a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   13e2e:	9a03      	ldr	r2, [sp, #12]
   13e30:	f003 0378 	and.w	r3, r3, #120	; 0x78
   13e34:	429a      	cmp	r2, r3
   13e36:	da43      	bge.n	13ec0 <net_conn_input+0x150>
				struct net_pkt *mcast_pkt;

				if (!is_mcast_pkt) {
   13e38:	f1b8 0f00 	cmp.w	r8, #0
   13e3c:	d152      	bne.n	13ee4 <net_conn_input+0x174>
					best_rank = NET_CONN_RANK(conn->flags);
   13e3e:	b21b      	sxth	r3, r3
					best_match = conn;

					continue;
   13e40:	46a1      	mov	r9, r4
					best_rank = NET_CONN_RANK(conn->flags);
   13e42:	9303      	str	r3, [sp, #12]
					continue;
   13e44:	e03c      	b.n	13ec0 <net_conn_input+0x150>
		if (net_ipv6_addr_cmp(&ip_hdr->ipv6->src,
   13e46:	6808      	ldr	r0, [r1, #0]
   13e48:	2210      	movs	r2, #16
   13e4a:	f100 0118 	add.w	r1, r0, #24
   13e4e:	3008      	adds	r0, #8
   13e50:	f015 fb01 	bl	29456 <memcmp>
   13e54:	b990      	cbnz	r0, 13e7c <net_conn_input+0x10c>
	if (!conn_are_end_points_valid(pkt, ip_hdr, src_port, dst_port)) {
   13e56:	9b04      	ldr	r3, [sp, #16]
   13e58:	455b      	cmp	r3, fp
   13e5a:	d04c      	beq.n	13ef6 <net_conn_input+0x186>
   13e5c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   13e60:	f3c3 0342 	ubfx	r3, r3, #1, #3
   13e64:	2b02      	cmp	r3, #2
   13e66:	d199      	bne.n	13d9c <net_conn_input+0x2c>
		if (net_ipv6_is_addr_mcast(&ip_hdr->ipv6->dst)) {
   13e68:	6833      	ldr	r3, [r6, #0]
   13e6a:	f893 8018 	ldrb.w	r8, [r3, #24]
   13e6e:	f1a8 00ff 	sub.w	r0, r8, #255	; 0xff
   13e72:	f1d0 0800 	rsbs	r8, r0, #0
   13e76:	eb48 0800 	adc.w	r8, r8, r0
   13e7a:	e791      	b.n	13da0 <net_conn_input+0x30>
		    net_ipv6_is_my_addr(&ip_hdr->ipv6->src)) {
   13e7c:	6830      	ldr	r0, [r6, #0]
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   13e7e:	2100      	movs	r1, #0
   13e80:	3008      	adds	r0, #8
   13e82:	f7fe f895 	bl	11fb0 <net_if_ipv6_addr_lookup>
				      &ip_hdr->ipv6->dst) ||
   13e86:	2800      	cmp	r0, #0
   13e88:	d1e5      	bne.n	13e56 <net_conn_input+0xe6>
   13e8a:	e7e7      	b.n	13e5c <net_conn_input+0xec>
   13e8c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	if (addr->sa_family != net_pkt_family(pkt)) {
   13e90:	88a1      	ldrh	r1, [r4, #4]
   13e92:	f3c3 0242 	ubfx	r2, r3, #1, #3
   13e96:	4291      	cmp	r1, r2
   13e98:	d112      	bne.n	13ec0 <net_conn_input+0x150>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   13e9a:	2a02      	cmp	r2, #2
   13e9c:	d1a5      	bne.n	13dea <net_conn_input+0x7a>
			    &net_sin6(addr)->sin6_addr)) {
   13e9e:	f104 0308 	add.w	r3, r4, #8
		if (!net_ipv6_is_addr_unspecified(
   13ea2:	4618      	mov	r0, r3
   13ea4:	9305      	str	r3, [sp, #20]
   13ea6:	f013 fe86 	bl	27bb6 <net_ipv6_is_addr_unspecified>
   13eaa:	2800      	cmp	r0, #0
   13eac:	d19d      	bne.n	13dea <net_conn_input+0x7a>
			addr6 = &ip_hdr->ipv6->src;
   13eae:	6831      	ldr	r1, [r6, #0]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   13eb0:	9b05      	ldr	r3, [sp, #20]
   13eb2:	2210      	movs	r2, #16
   13eb4:	4618      	mov	r0, r3
   13eb6:	3108      	adds	r1, #8
   13eb8:	f015 facd 	bl	29456 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   13ebc:	2800      	cmp	r0, #0
   13ebe:	d094      	beq.n	13dea <net_conn_input+0x7a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13ec0:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   13ec2:	2c00      	cmp	r4, #0
   13ec4:	f47f af77 	bne.w	13db6 <net_conn_input+0x46>
			best_rank = 0;
			best_match = conn;
		}
	}

	if (is_mcast_pkt && mcast_pkt_delivered) {
   13ec8:	f1b8 0f00 	cmp.w	r8, #0
   13ecc:	d029      	beq.n	13f22 <net_conn_input+0x1b2>
   13ece:	b347      	cbz	r7, 13f22 <net_conn_input+0x1b2>
		/* As one or more multicast packets have already been delivered
		 * in the loop above, we shall not call the callback again here
		 */

		net_pkt_unref(pkt);
   13ed0:	4628      	mov	r0, r5
   13ed2:	f012 f8ea 	bl	260aa <net_pkt_unref>
			goto drop;
		}

		net_stats_update_per_proto_recv(pkt_iface, proto);

		return NET_OK;
   13ed6:	2000      	movs	r0, #0
   13ed8:	e00e      	b.n	13ef8 <net_conn_input+0x188>
			if (best_match != NULL &&
   13eda:	f899 303f 	ldrb.w	r3, [r9, #63]	; 0x3f
   13ede:	071b      	lsls	r3, r3, #28
   13ee0:	d4ee      	bmi.n	13ec0 <net_conn_input+0x150>
   13ee2:	e7a2      	b.n	13e2a <net_conn_input+0xba>
				mcast_pkt = net_pkt_clone(pkt, CLONE_TIMEOUT);
   13ee4:	f640 42cd 	movw	r2, #3277	; 0xccd
   13ee8:	2300      	movs	r3, #0
   13eea:	4628      	mov	r0, r5
   13eec:	f012 fa86 	bl	263fc <net_pkt_clone>
				if (!mcast_pkt) {
   13ef0:	ee08 0a10 	vmov	s16, r0
   13ef4:	b928      	cbnz	r0, 13f02 <net_conn_input+0x192>
	}

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
   13ef6:	2002      	movs	r0, #2
}
   13ef8:	b007      	add	sp, #28
   13efa:	ecbd 8b02 	vpop	{d8}
   13efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (conn->cb(conn, mcast_pkt, ip_hdr,
   13f02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13f04:	4601      	mov	r1, r0
   13f06:	9300      	str	r3, [sp, #0]
   13f08:	4632      	mov	r2, r6
   13f0a:	4653      	mov	r3, sl
   13f0c:	4620      	mov	r0, r4
   13f0e:	6b67      	ldr	r7, [r4, #52]	; 0x34
   13f10:	47b8      	blx	r7
   13f12:	2802      	cmp	r0, #2
   13f14:	d103      	bne.n	13f1e <net_conn_input+0x1ae>
					net_pkt_unref(mcast_pkt);
   13f16:	ee18 0a10 	vmov	r0, s16
   13f1a:	f012 f8c6 	bl	260aa <net_pkt_unref>
				mcast_pkt_delivered = true;
   13f1e:	4647      	mov	r7, r8
   13f20:	e7ce      	b.n	13ec0 <net_conn_input+0x150>
	if (conn) {
   13f22:	f1b9 0f00 	cmp.w	r9, #0
   13f26:	d00c      	beq.n	13f42 <net_conn_input+0x1d2>
		if (conn->cb(conn, pkt, ip_hdr, proto_hdr,
   13f28:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   13f2c:	4632      	mov	r2, r6
   13f2e:	9300      	str	r3, [sp, #0]
   13f30:	4629      	mov	r1, r5
   13f32:	4653      	mov	r3, sl
   13f34:	4648      	mov	r0, r9
   13f36:	f8d9 4034 	ldr.w	r4, [r9, #52]	; 0x34
   13f3a:	47a0      	blx	r4
   13f3c:	2802      	cmp	r0, #2
   13f3e:	d1ca      	bne.n	13ed6 <net_conn_input+0x166>
   13f40:	e7d9      	b.n	13ef6 <net_conn_input+0x186>
   13f42:	f895 003b 	ldrb.w	r0, [r5, #59]	; 0x3b
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   13f46:	f3c0 0442 	ubfx	r4, r0, #1, #3
   13f4a:	2c02      	cmp	r4, #2
   13f4c:	d1d3      	bne.n	13ef6 <net_conn_input+0x186>
	    net_pkt_family(pkt) == AF_INET6 && is_mcast_pkt) {
   13f4e:	f1b8 0f00 	cmp.w	r8, #0
   13f52:	d1d0      	bne.n	13ef6 <net_conn_input+0x186>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   13f54:	4643      	mov	r3, r8
   13f56:	2204      	movs	r2, #4
   13f58:	2101      	movs	r1, #1
   13f5a:	4628      	mov	r0, r5
   13f5c:	f012 fbb9 	bl	266d2 <net_icmpv6_send_error>
   13f60:	e7c9      	b.n	13ef6 <net_conn_input+0x186>
   13f62:	bf00      	nop
   13f64:	20022d80 	.word	0x20022d80

00013f68 <net_conn_init>:
	list->head = NULL;
   13f68:	2200      	movs	r2, #0
   13f6a:	4b09      	ldr	r3, [pc, #36]	; (13f90 <net_conn_init+0x28>)
	list->tail = NULL;
   13f6c:	e9c3 2200 	strd	r2, r2, [r3]
	parent->next = child;
   13f70:	4b08      	ldr	r3, [pc, #32]	; (13f94 <net_conn_init+0x2c>)
   13f72:	4619      	mov	r1, r3
   13f74:	601a      	str	r2, [r3, #0]
   13f76:	f103 0240 	add.w	r2, r3, #64	; 0x40
   13f7a:	f841 2f80 	str.w	r2, [r1, #128]!
   13f7e:	461a      	mov	r2, r3
   13f80:	f842 1fc0 	str.w	r1, [r2, #192]!
   13f84:	4904      	ldr	r1, [pc, #16]	; (13f98 <net_conn_init+0x30>)
   13f86:	641b      	str	r3, [r3, #64]	; 0x40
	int i;

	sys_slist_init(&conn_unused);
	sys_slist_init(&conn_used);

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   13f88:	e9c1 2300 	strd	r2, r3, [r1]
		sys_slist_prepend(&conn_unused, &conns[i].node);
	}
}
   13f8c:	4770      	bx	lr
   13f8e:	bf00      	nop
   13f90:	20022d80 	.word	0x20022d80
   13f94:	20022d88 	.word	0x20022d88
   13f98:	20022d78 	.word	0x20022d78

00013f9c <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
   13f9c:	b513      	push	{r0, r1, r4, lr}
	struct device *dev = entropy_driver;
   13f9e:	4c0a      	ldr	r4, [pc, #40]	; (13fc8 <sys_rand32_get+0x2c>)
   13fa0:	6820      	ldr	r0, [r4, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   13fa2:	b918      	cbnz	r0, 13fac <sys_rand32_get+0x10>
   13fa4:	4809      	ldr	r0, [pc, #36]	; (13fcc <sys_rand32_get+0x30>)
   13fa6:	f00b fcad 	bl	1f904 <z_impl_device_get_binding>
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		__ASSERT((dev != NULL),
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
   13faa:	6020      	str	r0, [r4, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   13fac:	2204      	movs	r2, #4
   13fae:	6883      	ldr	r3, [r0, #8]
   13fb0:	eb0d 0102 	add.w	r1, sp, r2
   13fb4:	681b      	ldr	r3, [r3, #0]
   13fb6:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   13fb8:	2800      	cmp	r0, #0
   13fba:	da02      	bge.n	13fc2 <sys_rand32_get+0x26>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   13fbc:	f7fc fe4e 	bl	10c5c <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   13fc0:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   13fc2:	9801      	ldr	r0, [sp, #4]
   13fc4:	b002      	add	sp, #8
   13fc6:	bd10      	pop	{r4, pc}
   13fc8:	20022e88 	.word	0x20022e88
   13fcc:	0002bdc3 	.word	0x0002bdc3

00013fd0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
   13fd0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   13fd2:	4b09      	ldr	r3, [pc, #36]	; (13ff8 <gpio_nrfx_init+0x28>)
   13fd4:	781a      	ldrb	r2, [r3, #0]
   13fd6:	b96a      	cbnz	r2, 13ff4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   13fd8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   13fda:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   13fdc:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   13fde:	2105      	movs	r1, #5
   13fe0:	f7fc fe80 	bl	10ce4 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   13fe4:	2031      	movs	r0, #49	; 0x31
   13fe6:	f7fc fe6d 	bl	10cc4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   13fea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   13fee:	4b03      	ldr	r3, [pc, #12]	; (13ffc <gpio_nrfx_init+0x2c>)
   13ff0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   13ff4:	2000      	movs	r0, #0
   13ff6:	bd08      	pop	{r3, pc}
   13ff8:	20029ea5 	.word	0x20029ea5
   13ffc:	40031000 	.word	0x40031000

00014000 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14000:	4b29      	ldr	r3, [pc, #164]	; (140a8 <gpio_nrfx_config+0xa8>)
{
   14002:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14004:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14006:	4829      	ldr	r0, [pc, #164]	; (140ac <gpio_nrfx_config+0xac>)
   14008:	4013      	ands	r3, r2
   1400a:	4283      	cmp	r3, r0
   1400c:	d03d      	beq.n	1408a <gpio_nrfx_config+0x8a>
   1400e:	d80d      	bhi.n	1402c <gpio_nrfx_config+0x2c>
   14010:	2b06      	cmp	r3, #6
   14012:	d015      	beq.n	14040 <gpio_nrfx_config+0x40>
   14014:	d805      	bhi.n	14022 <gpio_nrfx_config+0x22>
   14016:	b19b      	cbz	r3, 14040 <gpio_nrfx_config+0x40>
   14018:	2b02      	cmp	r3, #2
   1401a:	d038      	beq.n	1408e <gpio_nrfx_config+0x8e>
   1401c:	f06f 0015 	mvn.w	r0, #21
   14020:	e032      	b.n	14088 <gpio_nrfx_config+0x88>
   14022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14026:	d1f9      	bne.n	1401c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   14028:	2301      	movs	r3, #1
   1402a:	e009      	b.n	14040 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1402c:	4820      	ldr	r0, [pc, #128]	; (140b0 <gpio_nrfx_config+0xb0>)
   1402e:	4283      	cmp	r3, r0
   14030:	d02f      	beq.n	14092 <gpio_nrfx_config+0x92>
   14032:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   14036:	d02e      	beq.n	14096 <gpio_nrfx_config+0x96>
   14038:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1403c:	d1ee      	bne.n	1401c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1403e:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   14040:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   14042:	bf4c      	ite	mi
   14044:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   14046:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1404a:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1404e:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   14050:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   14054:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   14058:	d506      	bpl.n	14068 <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1405a:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1405e:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   14060:	d01b      	beq.n	1409a <gpio_nrfx_config+0x9a>
			nrf_gpio_port_out_set(reg, BIT(pin));
   14062:	2201      	movs	r2, #1
   14064:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   14066:	60ba      	str	r2, [r7, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   14068:	7a32      	ldrb	r2, [r6, #8]
   1406a:	f001 011f 	and.w	r1, r1, #31
   1406e:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   14072:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   14076:	2000      	movs	r0, #0
   14078:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1407c:	4a0d      	ldr	r2, [pc, #52]	; (140b4 <gpio_nrfx_config+0xb4>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1407e:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14082:	3180      	adds	r1, #128	; 0x80
   14084:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   14088:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1408a:	2307      	movs	r3, #7
   1408c:	e7d8      	b.n	14040 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1408e:	2304      	movs	r3, #4
   14090:	e7d6      	b.n	14040 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   14092:	2305      	movs	r3, #5
   14094:	e7d4      	b.n	14040 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   14096:	2303      	movs	r3, #3
   14098:	e7d2      	b.n	14040 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1409a:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1409c:	bf42      	ittt	mi
   1409e:	2201      	movmi	r2, #1
   140a0:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   140a2:	60fa      	strmi	r2, [r7, #12]
}
   140a4:	e7e0      	b.n	14068 <gpio_nrfx_config+0x68>
   140a6:	bf00      	nop
   140a8:	00f00006 	.word	0x00f00006
   140ac:	00100006 	.word	0x00100006
   140b0:	00400002 	.word	0x00400002
   140b4:	40842500 	.word	0x40842500

000140b8 <gpiote_pin_int_cfg>:
{
   140b8:	b570      	push	{r4, r5, r6, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   140ba:	6843      	ldr	r3, [r0, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   140bc:	4c4c      	ldr	r4, [pc, #304]	; (141f0 <gpiote_pin_int_cfg+0x138>)
   140be:	7a1a      	ldrb	r2, [r3, #8]
   140c0:	f001 031f 	and.w	r3, r1, #31
   140c4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   140c8:	2200      	movs	r2, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   140ca:	68c6      	ldr	r6, [r0, #12]
   140cc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   140d0:	b2c0      	uxtb	r0, r0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   140d2:	f502 75a2 	add.w	r5, r2, #324	; 0x144
   140d6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   140da:	f3c5 2504 	ubfx	r5, r5, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   140de:	42ab      	cmp	r3, r5
   140e0:	d16c      	bne.n	141bc <gpiote_pin_int_cfg+0x104>
		    && (intenset & BIT(i))) {
   140e2:	fa20 f502 	lsr.w	r5, r0, r2
   140e6:	07ed      	lsls	r5, r5, #31
   140e8:	d568      	bpl.n	141bc <gpiote_pin_int_cfg+0x104>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   140ea:	0090      	lsls	r0, r2, #2
   140ec:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   140f0:	f500 3044 	add.w	r0, r0, #200704	; 0x31000
   140f4:	f8d0 5510 	ldr.w	r5, [r0, #1296]	; 0x510
   140f8:	f025 0501 	bic.w	r5, r5, #1
   140fc:	f8c0 5510 	str.w	r5, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   14100:	2001      	movs	r0, #1
   14102:	fa00 f202 	lsl.w	r2, r0, r2
    p_reg->INTENCLR = mask;
   14106:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1410a:	4d3a      	ldr	r5, [pc, #232]	; (141f4 <gpiote_pin_int_cfg+0x13c>)
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   1410c:	68f0      	ldr	r0, [r6, #12]
   1410e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   14112:	f8d5 2200 	ldr.w	r2, [r5, #512]	; 0x200
   14116:	40c8      	lsrs	r0, r1
   14118:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
   1411c:	f010 0001 	ands.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   14120:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
   14124:	d049      	beq.n	141ba <gpiote_pin_int_cfg+0x102>
   14126:	6930      	ldr	r0, [r6, #16]
   14128:	40c8      	lsrs	r0, r1
   1412a:	f010 0001 	ands.w	r0, r0, #1
   1412e:	d044      	beq.n	141ba <gpiote_pin_int_cfg+0x102>
		if (data->trig_edge & BIT(pin)) {
   14130:	69b0      	ldr	r0, [r6, #24]
   14132:	40c8      	lsrs	r0, r1
   14134:	f010 0001 	ands.w	r0, r0, #1
   14138:	d04a      	beq.n	141d0 <gpiote_pin_int_cfg+0x118>
			if (data->double_edge & BIT(pin)) {
   1413a:	69f2      	ldr	r2, [r6, #28]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1413c:	2500      	movs	r5, #0
			if (data->double_edge & BIT(pin)) {
   1413e:	40ca      	lsrs	r2, r1
   14140:	07d2      	lsls	r2, r2, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   14142:	bf4f      	iteee	mi
   14144:	2203      	movmi	r2, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   14146:	6972      	ldrpl	r2, [r6, #20]
   14148:	40ca      	lsrpl	r2, r1
   1414a:	f002 0201 	andpl.w	r2, r2, #1
   1414e:	bf5c      	itt	pl
   14150:	f1c2 0202 	rsbpl	r2, r2, #2
   14154:	b2d2      	uxtbpl	r2, r2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   14156:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   1415a:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   1415e:	f010 0003 	ands.w	r0, r0, #3
   14162:	d12f      	bne.n	141c4 <gpiote_pin_int_cfg+0x10c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14164:	00a9      	lsls	r1, r5, #2
   14166:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1416a:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   1416e:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14172:	021b      	lsls	r3, r3, #8
   14174:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14178:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   1417c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14180:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
			nrf_gpiote_event_t evt =
   14184:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14188:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
   1418c:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1418e:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   14192:	b29b      	uxth	r3, r3
   14194:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14198:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1419c:	4332      	orrs	r2, r6
   1419e:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   141a2:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   141a4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
   141a8:	f043 0301 	orr.w	r3, r3, #1
   141ac:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   141b0:	2301      	movs	r3, #1
   141b2:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   141b6:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   141ba:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   141bc:	3201      	adds	r2, #1
   141be:	2a08      	cmp	r2, #8
   141c0:	d187      	bne.n	140d2 <gpiote_pin_int_cfg+0x1a>
   141c2:	e7a2      	b.n	1410a <gpiote_pin_int_cfg+0x52>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   141c4:	3501      	adds	r5, #1
   141c6:	2d08      	cmp	r5, #8
   141c8:	d1c5      	bne.n	14156 <gpiote_pin_int_cfg+0x9e>
	return -ENODEV;
   141ca:	f06f 0012 	mvn.w	r0, #18
   141ce:	e7f4      	b.n	141ba <gpiote_pin_int_cfg+0x102>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   141d0:	6972      	ldr	r2, [r6, #20]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   141d2:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   141d6:	40ca      	lsrs	r2, r1
   141d8:	f002 0201 	and.w	r2, r2, #1
   141dc:	f1c2 0203 	rsb	r2, r2, #3
   141e0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   141e4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   141e8:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
}
   141ec:	e7e5      	b.n	141ba <gpiote_pin_int_cfg+0x102>
   141ee:	bf00      	nop
   141f0:	40031000 	.word	0x40031000
   141f4:	40842500 	.word	0x40842500

000141f8 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   141f8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   141fc:	b470      	push	{r4, r5, r6}
	struct gpio_nrfx_data *data = get_port_data(port);
   141fe:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14200:	d10f      	bne.n	14222 <gpio_nrfx_pin_interrupt_configure+0x2a>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   14202:	6845      	ldr	r5, [r0, #4]
   14204:	7a2e      	ldrb	r6, [r5, #8]
   14206:	f001 051f 	and.w	r5, r1, #31
   1420a:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1420e:	4e1d      	ldr	r6, [pc, #116]	; (14284 <gpio_nrfx_pin_interrupt_configure+0x8c>)
   14210:	3580      	adds	r5, #128	; 0x80
   14212:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14216:	07ed      	lsls	r5, r5, #31
   14218:	d507      	bpl.n	1422a <gpio_nrfx_pin_interrupt_configure+0x32>
}
   1421a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1421e:	bc70      	pop	{r4, r5, r6}
   14220:	4770      	bx	lr
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14222:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   14226:	68e5      	ldr	r5, [r4, #12]
   14228:	d026      	beq.n	14278 <gpio_nrfx_pin_interrupt_configure+0x80>
   1422a:	2501      	movs	r5, #1
   1422c:	68e6      	ldr	r6, [r4, #12]
   1422e:	408d      	lsls	r5, r1
   14230:	4335      	orrs	r5, r6
   14232:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14234:	2501      	movs	r5, #1
   14236:	6926      	ldr	r6, [r4, #16]
   14238:	408d      	lsls	r5, r1
   1423a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1423e:	bf14      	ite	ne
   14240:	432e      	orrne	r6, r5
   14242:	43ae      	biceq	r6, r5
   14244:	6126      	str	r6, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   14246:	69a6      	ldr	r6, [r4, #24]
   14248:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1424c:	69e2      	ldr	r2, [r4, #28]
   1424e:	bf0c      	ite	eq
   14250:	432e      	orreq	r6, r5
   14252:	43ae      	bicne	r6, r5
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   14254:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   14258:	bf0c      	ite	eq
   1425a:	432a      	orreq	r2, r5
   1425c:	43aa      	bicne	r2, r5
   1425e:	61e2      	str	r2, [r4, #28]
   14260:	6962      	ldr	r2, [r4, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14262:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   14266:	bf0c      	ite	eq
   14268:	4315      	orreq	r5, r2
   1426a:	ea22 0505 	bicne.w	r5, r2, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1426e:	61a6      	str	r6, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14270:	6165      	str	r5, [r4, #20]
}
   14272:	bc70      	pop	{r4, r5, r6}
	return gpiote_pin_int_cfg(port, pin);
   14274:	f7ff bf20 	b.w	140b8 <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14278:	2601      	movs	r6, #1
   1427a:	408e      	lsls	r6, r1
   1427c:	ea25 0506 	bic.w	r5, r5, r6
   14280:	e7d7      	b.n	14232 <gpio_nrfx_pin_interrupt_configure+0x3a>
   14282:	bf00      	nop
   14284:	40842500 	.word	0x40842500

00014288 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14288:	494a      	ldr	r1, [pc, #296]	; (143b4 <gpiote_event_handler+0x12c>)
{
   1428a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1428e:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   14290:	2d00      	cmp	r5, #0
   14292:	d05d      	beq.n	14350 <gpiote_event_handler+0xc8>
	struct gpio_nrfx_data *data = get_port_data(port);
   14294:	4b48      	ldr	r3, [pc, #288]	; (143b8 <gpiote_event_handler+0x130>)
	u32_t pin = 0U;
   14296:	2600      	movs	r6, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   14298:	68da      	ldr	r2, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1429a:	f8d3 c004 	ldr.w	ip, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1429e:	e9d2 0303 	ldrd	r0, r3, [r2, #12]
   142a2:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   142a4:	e9d2 0406 	ldrd	r0, r4, [r2, #24]
   142a8:	4320      	orrs	r0, r4
   142aa:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   142ae:	f8dc 0004 	ldr.w	r0, [ip, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   142b2:	6952      	ldr	r2, [r2, #20]
    return p_reg->IN;
   142b4:	6904      	ldr	r4, [r0, #16]
	u32_t bit = 1U << pin;
   142b6:	2001      	movs	r0, #1
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   142b8:	4054      	eors	r4, r2
   142ba:	f8df e108 	ldr.w	lr, [pc, #264]	; 143c4 <gpiote_event_handler+0x13c>
	u32_t out = pin_states & level_pins;
   142be:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   142c2:	bb83      	cbnz	r3, 14326 <gpiote_event_handler+0x9e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   142c4:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   142c6:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   142c8:	2001      	movs	r0, #1
   142ca:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   142cc:	493b      	ldr	r1, [pc, #236]	; (143bc <gpiote_event_handler+0x134>)
   142ce:	4e3c      	ldr	r6, [pc, #240]	; (143c0 <gpiote_event_handler+0x138>)
   142d0:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   142d4:	fa00 fc03 	lsl.w	ip, r0, r3
   142d8:	ea1c 0f02 	tst.w	ip, r2
   142dc:	d00d      	beq.n	142fa <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   142de:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   142e2:	b152      	cbz	r2, 142fa <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   142e4:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   142e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   142ec:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   142f0:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   142f4:	fa00 f202 	lsl.w	r2, r0, r2
   142f8:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   142fa:	3301      	adds	r3, #1
   142fc:	2b08      	cmp	r3, #8
   142fe:	d1e7      	bne.n	142d0 <gpiote_event_handler+0x48>
	if (fired_triggers[0]) {
   14300:	bb44      	cbnz	r4, 14354 <gpiote_event_handler+0xcc>
	if (port_event) {
   14302:	b175      	cbz	r5, 14322 <gpiote_event_handler+0x9a>
	u32_t bit = 1U << pin;
   14304:	2401      	movs	r4, #1
	u32_t pin = 0U;
   14306:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   14308:	4b2b      	ldr	r3, [pc, #172]	; (143b8 <gpiote_event_handler+0x130>)
   1430a:	4f2e      	ldr	r7, [pc, #184]	; (143c4 <gpiote_event_handler+0x13c>)
   1430c:	68d8      	ldr	r0, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1430e:	685e      	ldr	r6, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   14310:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   14314:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
   14316:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
   1431a:	430a      	orrs	r2, r1
   1431c:	ea23 0302 	bic.w	r3, r3, r2
	while (level_pins) {
   14320:	bb63      	cbnz	r3, 1437c <gpiote_event_handler+0xf4>
}
   14322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   14326:	4203      	tst	r3, r0
   14328:	d00f      	beq.n	1434a <gpiote_event_handler+0xc2>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1432a:	f89c 7008 	ldrb.w	r7, [ip, #8]
   1432e:	f006 021f 	and.w	r2, r6, #31
   14332:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
   14336:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1433a:	f8d2 7200 	ldr.w	r7, [r2, #512]	; 0x200
			level_pins &= ~bit;
   1433e:	ea23 0300 	bic.w	r3, r3, r0
   14342:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   14346:	f8c2 7200 	str.w	r7, [r2, #512]	; 0x200
		++pin;
   1434a:	3601      	adds	r6, #1
		bit <<= 1;
   1434c:	0040      	lsls	r0, r0, #1
   1434e:	e7b8      	b.n	142c2 <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   14350:	462c      	mov	r4, r5
   14352:	e7b8      	b.n	142c6 <gpiote_event_handler+0x3e>
	struct gpio_nrfx_data *data = get_port_data(port);
   14354:	4818      	ldr	r0, [pc, #96]	; (143b8 <gpiote_event_handler+0x130>)
   14356:	68c7      	ldr	r7, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14358:	6879      	ldr	r1, [r7, #4]
   1435a:	2900      	cmp	r1, #0
   1435c:	d0d1      	beq.n	14302 <gpiote_event_handler+0x7a>
			cb->handler(port, cb, cb->pin_mask & pins);
   1435e:	4680      	mov	r8, r0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14360:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   14362:	688a      	ldr	r2, [r1, #8]
   14364:	693b      	ldr	r3, [r7, #16]
   14366:	4022      	ands	r2, r4
   14368:	421a      	tst	r2, r3
   1436a:	d002      	beq.n	14372 <gpiote_event_handler+0xea>
			cb->handler(port, cb, cb->pin_mask & pins);
   1436c:	4640      	mov	r0, r8
   1436e:	684b      	ldr	r3, [r1, #4]
   14370:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14372:	2e00      	cmp	r6, #0
   14374:	d0c5      	beq.n	14302 <gpiote_event_handler+0x7a>
   14376:	4631      	mov	r1, r6
   14378:	6836      	ldr	r6, [r6, #0]
   1437a:	e7f2      	b.n	14362 <gpiote_event_handler+0xda>
		if (level_pins & bit) {
   1437c:	421c      	tst	r4, r3
   1437e:	d016      	beq.n	143ae <gpiote_event_handler+0x126>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14380:	7a32      	ldrb	r2, [r6, #8]
   14382:	f005 011f 	and.w	r1, r5, #31
   14386:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1438a:	6942      	ldr	r2, [r0, #20]
   1438c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   14390:	f8d1 c200 	ldr.w	ip, [r1, #512]	; 0x200
   14394:	40ea      	lsrs	r2, r5
   14396:	f002 0201 	and.w	r2, r2, #1
   1439a:	f1c2 0203 	rsb	r2, r2, #3
   1439e:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   143a2:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   143a6:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
			level_pins &= ~bit;
   143aa:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
   143ae:	3501      	adds	r5, #1
		bit <<= 1;
   143b0:	0064      	lsls	r4, r4, #1
   143b2:	e7b5      	b.n	14320 <gpiote_event_handler+0x98>
   143b4:	4003117c 	.word	0x4003117c
   143b8:	20020824 	.word	0x20020824
   143bc:	40031000 	.word	0x40031000
   143c0:	40031100 	.word	0x40031100
   143c4:	40842500 	.word	0x40842500

000143c8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   143c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   143ca:	794b      	ldrb	r3, [r1, #5]
   143cc:	2b01      	cmp	r3, #1
   143ce:	d029      	beq.n	14424 <uarte_nrfx_configure+0x5c>
   143d0:	2b03      	cmp	r3, #3
   143d2:	d124      	bne.n	1441e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   143d4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   143d6:	798b      	ldrb	r3, [r1, #6]
   143d8:	2b03      	cmp	r3, #3
   143da:	d120      	bne.n	1441e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   143dc:	79cc      	ldrb	r4, [r1, #7]
   143de:	b124      	cbz	r4, 143ea <uarte_nrfx_configure+0x22>
   143e0:	2c01      	cmp	r4, #1
   143e2:	d11c      	bne.n	1441e <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   143e4:	6843      	ldr	r3, [r0, #4]
   143e6:	791b      	ldrb	r3, [r3, #4]
   143e8:	b1cb      	cbz	r3, 1441e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   143ea:	790a      	ldrb	r2, [r1, #4]
   143ec:	b112      	cbz	r2, 143f4 <uarte_nrfx_configure+0x2c>
   143ee:	2a02      	cmp	r2, #2
   143f0:	d115      	bne.n	1441e <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   143f2:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   143f4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   143f6:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   143f8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   143fc:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   143fe:	d064      	beq.n	144ca <uarte_nrfx_configure+0x102>
   14400:	d82d      	bhi.n	1445e <uarte_nrfx_configure+0x96>
   14402:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14406:	d063      	beq.n	144d0 <uarte_nrfx_configure+0x108>
   14408:	d816      	bhi.n	14438 <uarte_nrfx_configure+0x70>
   1440a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1440e:	d061      	beq.n	144d4 <uarte_nrfx_configure+0x10c>
   14410:	d80a      	bhi.n	14428 <uarte_nrfx_configure+0x60>
   14412:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   14416:	d060      	beq.n	144da <uarte_nrfx_configure+0x112>
   14418:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1441c:	d060      	beq.n	144e0 <uarte_nrfx_configure+0x118>
   1441e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14422:	e051      	b.n	144c8 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   14424:	2600      	movs	r6, #0
   14426:	e7d6      	b.n	143d6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   14428:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1442c:	d05b      	beq.n	144e6 <uarte_nrfx_configure+0x11e>
   1442e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   14432:	d1f4      	bne.n	1441e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   14434:	4b36      	ldr	r3, [pc, #216]	; (14510 <uarte_nrfx_configure+0x148>)
   14436:	e03c      	b.n	144b2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14438:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1443c:	d056      	beq.n	144ec <uarte_nrfx_configure+0x124>
   1443e:	d807      	bhi.n	14450 <uarte_nrfx_configure+0x88>
   14440:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   14444:	d054      	beq.n	144f0 <uarte_nrfx_configure+0x128>
   14446:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1444a:	d1e8      	bne.n	1441e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1444c:	4b31      	ldr	r3, [pc, #196]	; (14514 <uarte_nrfx_configure+0x14c>)
   1444e:	e030      	b.n	144b2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14450:	f647 2712 	movw	r7, #31250	; 0x7a12
   14454:	42bb      	cmp	r3, r7
   14456:	d1e2      	bne.n	1441e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   14458:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1445c:	e029      	b.n	144b2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1445e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   14462:	d047      	beq.n	144f4 <uarte_nrfx_configure+0x12c>
   14464:	d813      	bhi.n	1448e <uarte_nrfx_configure+0xc6>
   14466:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1446a:	d046      	beq.n	144fa <uarte_nrfx_configure+0x132>
   1446c:	d809      	bhi.n	14482 <uarte_nrfx_configure+0xba>
   1446e:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   14472:	42bb      	cmp	r3, r7
   14474:	d043      	beq.n	144fe <uarte_nrfx_configure+0x136>
   14476:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1447a:	d1d0      	bne.n	1441e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1447c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   14480:	e017      	b.n	144b2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14482:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   14486:	d1ca      	bne.n	1441e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   14488:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1448c:	e011      	b.n	144b2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1448e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   14492:	d037      	beq.n	14504 <uarte_nrfx_configure+0x13c>
   14494:	d808      	bhi.n	144a8 <uarte_nrfx_configure+0xe0>
   14496:	4f20      	ldr	r7, [pc, #128]	; (14518 <uarte_nrfx_configure+0x150>)
   14498:	42bb      	cmp	r3, r7
   1449a:	d036      	beq.n	1450a <uarte_nrfx_configure+0x142>
   1449c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   144a0:	d1bd      	bne.n	1441e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   144a2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   144a6:	e004      	b.n	144b2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   144a8:	4f1c      	ldr	r7, [pc, #112]	; (1451c <uarte_nrfx_configure+0x154>)
   144aa:	42bb      	cmp	r3, r7
   144ac:	d1b7      	bne.n	1441e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   144ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   144b2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   144b6:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   144b8:	68c3      	ldr	r3, [r0, #12]
   144ba:	4322      	orrs	r2, r4
   144bc:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   144be:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   144c2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   144c6:	2000      	movs	r0, #0
}
   144c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   144ca:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   144ce:	e7f0      	b.n	144b2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   144d0:	4b13      	ldr	r3, [pc, #76]	; (14520 <uarte_nrfx_configure+0x158>)
   144d2:	e7ee      	b.n	144b2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   144d4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   144d8:	e7eb      	b.n	144b2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   144da:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   144de:	e7e8      	b.n	144b2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   144e0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   144e4:	e7e5      	b.n	144b2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   144e6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   144ea:	e7e2      	b.n	144b2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   144ec:	4b0d      	ldr	r3, [pc, #52]	; (14524 <uarte_nrfx_configure+0x15c>)
   144ee:	e7e0      	b.n	144b2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   144f0:	4b0d      	ldr	r3, [pc, #52]	; (14528 <uarte_nrfx_configure+0x160>)
   144f2:	e7de      	b.n	144b2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   144f4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   144f8:	e7db      	b.n	144b2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   144fa:	4b0c      	ldr	r3, [pc, #48]	; (1452c <uarte_nrfx_configure+0x164>)
   144fc:	e7d9      	b.n	144b2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   144fe:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   14502:	e7d6      	b.n	144b2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   14504:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   14508:	e7d3      	b.n	144b2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1450a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1450e:	e7d0      	b.n	144b2 <uarte_nrfx_configure+0xea>
   14510:	0013b000 	.word	0x0013b000
   14514:	004ea000 	.word	0x004ea000
   14518:	0003d090 	.word	0x0003d090
   1451c:	000f4240 	.word	0x000f4240
   14520:	00275000 	.word	0x00275000
   14524:	0075c000 	.word	0x0075c000
   14528:	003af000 	.word	0x003af000
   1452c:	013a9000 	.word	0x013a9000

00014530 <uarte_instance_init.constprop.0>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14530:	2201      	movs	r2, #1
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   14532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14534:	2703      	movs	r7, #3
   14536:	460d      	mov	r5, r1
	return config->uarte_regs;
   14538:	6843      	ldr	r3, [r0, #4]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   1453a:	6809      	ldr	r1, [r1, #0]
	return config->uarte_regs;
   1453c:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   1453e:	4b26      	ldr	r3, [pc, #152]	; (145d8 <uarte_instance_init.constprop.0+0xa8>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14540:	408a      	lsls	r2, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14542:	68c6      	ldr	r6, [r0, #12]
    p_reg->OUTSET = set_mask;
   14544:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14546:	f101 0280 	add.w	r2, r1, #128	; 0x80
   1454a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1454e:	686a      	ldr	r2, [r5, #4]
   14550:	1c57      	adds	r7, r2, #1
   14552:	bf1e      	ittt	ne
   14554:	f04f 0c00 	movne.w	ip, #0
   14558:	f102 0780 	addne.w	r7, r2, #128	; 0x80
   1455c:	f843 c027 	strne.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   14560:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   14564:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
   14566:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   1456a:	1c4a      	adds	r2, r1, #1
   1456c:	d015      	beq.n	1459a <uarte_instance_init.constprop.0+0x6a>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1456e:	68ea      	ldr	r2, [r5, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   14570:	1c57      	adds	r7, r2, #1
   14572:	d012      	beq.n	1459a <uarte_instance_init.constprop.0+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14574:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14576:	f04f 0c03 	mov.w	ip, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1457a:	4097      	lsls	r7, r2
    p_reg->OUTSET = set_mask;
   1457c:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1457e:	f102 0780 	add.w	r7, r2, #128	; 0x80
   14582:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
   14586:	f04f 0c00 	mov.w	ip, #0
   1458a:	f101 0780 	add.w	r7, r1, #128	; 0x80
   1458e:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   14592:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   14596:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1459a:	4631      	mov	r1, r6
   1459c:	f7ff ff14 	bl	143c8 <uarte_nrfx_configure>
	if (err) {
   145a0:	b9c8      	cbnz	r0, 145d6 <uarte_instance_init.constprop.0+0xa6>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   145a2:	2308      	movs	r3, #8
   145a4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   145a8:	686b      	ldr	r3, [r5, #4]
   145aa:	3301      	adds	r3, #1
   145ac:	d009      	beq.n	145c2 <uarte_instance_init.constprop.0+0x92>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   145ae:	f106 0310 	add.w	r3, r6, #16
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   145b2:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   145b6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   145ba:	2301      	movs	r3, #1
   145bc:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   145c0:	6023      	str	r3, [r4, #0]
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   145c2:	68b3      	ldr	r3, [r6, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   145c4:	689b      	ldr	r3, [r3, #8]
   145c6:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   145ca:	2300      	movs	r3, #0
   145cc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   145d0:	2301      	movs	r3, #1
   145d2:	60a3      	str	r3, [r4, #8]
   145d4:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   145d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145d8:	40842500 	.word	0x40842500

000145dc <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   145dc:	b530      	push	{r4, r5, lr}
   145de:	b085      	sub	sp, #20
   145e0:	466c      	mov	r4, sp
   145e2:	4605      	mov	r5, r0
   145e4:	4b08      	ldr	r3, [pc, #32]	; (14608 <uarte_1_init+0x2c>)
   145e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   145e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   145ec:	2200      	movs	r2, #0
   145ee:	2101      	movs	r1, #1
   145f0:	2009      	movs	r0, #9
   145f2:	f7fc fb77 	bl	10ce4 <z_arm_irq_priority_set>
   145f6:	2009      	movs	r0, #9
   145f8:	f7fc fb64 	bl	10cc4 <arch_irq_enable>
   145fc:	4621      	mov	r1, r4
   145fe:	4628      	mov	r0, r5
   14600:	f7ff ff96 	bl	14530 <uarte_instance_init.constprop.0>
   14604:	b005      	add	sp, #20
   14606:	bd30      	pop	{r4, r5, pc}
   14608:	0002a3a0 	.word	0x0002a3a0

0001460c <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   1460c:	b530      	push	{r4, r5, lr}
   1460e:	b085      	sub	sp, #20
   14610:	466c      	mov	r4, sp
   14612:	4605      	mov	r5, r0
   14614:	4b08      	ldr	r3, [pc, #32]	; (14638 <uarte_0_init+0x2c>)
   14616:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1461c:	2200      	movs	r2, #0
   1461e:	2101      	movs	r1, #1
   14620:	2008      	movs	r0, #8
   14622:	f7fc fb5f 	bl	10ce4 <z_arm_irq_priority_set>
   14626:	2008      	movs	r0, #8
   14628:	f7fc fb4c 	bl	10cc4 <arch_irq_enable>
   1462c:	4621      	mov	r1, r4
   1462e:	4628      	mov	r0, r5
   14630:	f7ff ff7e 	bl	14530 <uarte_instance_init.constprop.0>
   14634:	b005      	add	sp, #20
   14636:	bd30      	pop	{r4, r5, pc}
   14638:	0002a3b0 	.word	0x0002a3b0

0001463c <print_string_ptr>:
{
   1463c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14640:	4605      	mov	r5, r0
    if (output_buffer == NULL)
   14642:	460f      	mov	r7, r1
{
   14644:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   14646:	b919      	cbnz	r1, 14650 <print_string_ptr+0x14>
        return false;
   14648:	2000      	movs	r0, #0
}
   1464a:	b005      	add	sp, #20
   1464c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   14650:	4b4e      	ldr	r3, [pc, #312]	; (1478c <print_string_ptr+0x150>)
   14652:	881a      	ldrh	r2, [r3, #0]
   14654:	789b      	ldrb	r3, [r3, #2]
   14656:	f8ad 200c 	strh.w	r2, [sp, #12]
   1465a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   1465e:	b340      	cbz	r0, 146b2 <print_string_ptr+0x76>
   14660:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   14662:	f04f 0b00 	mov.w	fp, #0
   14666:	2001      	movs	r0, #1
   14668:	4c49      	ldr	r4, [pc, #292]	; (14790 <print_string_ptr+0x154>)
   1466a:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   1466c:	f811 3b01 	ldrb.w	r3, [r1], #1
   14670:	bb6b      	cbnz	r3, 146ce <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   14672:	ebaa 0a05 	sub.w	sl, sl, r5
   14676:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   14678:	4638      	mov	r0, r7
   1467a:	f10a 0103 	add.w	r1, sl, #3
   1467e:	f013 fccd 	bl	2801c <ensure>
    if (output == NULL)
   14682:	4606      	mov	r6, r0
   14684:	2800      	cmp	r0, #0
   14686:	d0df      	beq.n	14648 <print_string_ptr+0xc>
    if (escape_characters == 0)
   14688:	2322      	movs	r3, #34	; 0x22
   1468a:	1c44      	adds	r4, r0, #1
   1468c:	f10a 0901 	add.w	r9, sl, #1
   14690:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   14694:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   14696:	f1bb 0f00 	cmp.w	fp, #0
   1469a:	d12e      	bne.n	146fa <print_string_ptr+0xbe>
   1469c:	4652      	mov	r2, sl
   1469e:	4629      	mov	r1, r5
   146a0:	4620      	mov	r0, r4
   146a2:	f014 fee6 	bl	29472 <memcpy>
        output[output_length + 1] = '\"';
   146a6:	2322      	movs	r3, #34	; 0x22
   146a8:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   146ac:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   146b0:	e00b      	b.n	146ca <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   146b2:	2103      	movs	r1, #3
   146b4:	4638      	mov	r0, r7
   146b6:	f013 fcb1 	bl	2801c <ensure>
        if (output == NULL)
   146ba:	2800      	cmp	r0, #0
   146bc:	d0c4      	beq.n	14648 <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   146be:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   146c2:	a903      	add	r1, sp, #12
   146c4:	1ad2      	subs	r2, r2, r3
   146c6:	f015 f8ea 	bl	2989e <strncpy>
    return true;
   146ca:	2001      	movs	r0, #1
   146cc:	e7bd      	b.n	1464a <print_string_ptr+0xe>
        switch (*input_pointer)
   146ce:	2b22      	cmp	r3, #34	; 0x22
   146d0:	d80b      	bhi.n	146ea <print_string_ptr+0xae>
   146d2:	2b07      	cmp	r3, #7
   146d4:	d90c      	bls.n	146f0 <print_string_ptr+0xb4>
   146d6:	f1a3 0208 	sub.w	r2, r3, #8
   146da:	b2d2      	uxtb	r2, r2
   146dc:	fa00 f202 	lsl.w	r2, r0, r2
   146e0:	4222      	tst	r2, r4
   146e2:	d005      	beq.n	146f0 <print_string_ptr+0xb4>
                escape_characters++;
   146e4:	f10b 0b01 	add.w	fp, fp, #1
                break;
   146e8:	e7bf      	b.n	1466a <print_string_ptr+0x2e>
        switch (*input_pointer)
   146ea:	2b5c      	cmp	r3, #92	; 0x5c
   146ec:	d1bd      	bne.n	1466a <print_string_ptr+0x2e>
   146ee:	e7f9      	b.n	146e4 <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   146f0:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   146f2:	bf98      	it	ls
   146f4:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   146f8:	e7b7      	b.n	1466a <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   146fa:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   146fe:	f04f 0b74 	mov.w	fp, #116	; 0x74
   14702:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   14704:	4a23      	ldr	r2, [pc, #140]	; (14794 <print_string_ptr+0x158>)
   14706:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   14708:	9901      	ldr	r1, [sp, #4]
   1470a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1470e:	9101      	str	r1, [sp, #4]
   14710:	b92b      	cbnz	r3, 1471e <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   14712:	2222      	movs	r2, #34	; 0x22
   14714:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   14718:	f806 3008 	strb.w	r3, [r6, r8]
   1471c:	e7d5      	b.n	146ca <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   1471e:	2b1f      	cmp	r3, #31
   14720:	d907      	bls.n	14732 <print_string_ptr+0xf6>
   14722:	2b22      	cmp	r3, #34	; 0x22
   14724:	d005      	beq.n	14732 <print_string_ptr+0xf6>
   14726:	2b5c      	cmp	r3, #92	; 0x5c
   14728:	d003      	beq.n	14732 <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   1472a:	4620      	mov	r0, r4
   1472c:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   1472e:	1c44      	adds	r4, r0, #1
   14730:	e7ea      	b.n	14708 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   14732:	4620      	mov	r0, r4
            switch (*input_pointer)
   14734:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   14736:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   1473a:	781b      	ldrb	r3, [r3, #0]
   1473c:	2b0d      	cmp	r3, #13
   1473e:	d80a      	bhi.n	14756 <print_string_ptr+0x11a>
   14740:	2b07      	cmp	r3, #7
   14742:	d919      	bls.n	14778 <print_string_ptr+0x13c>
   14744:	f1a3 0108 	sub.w	r1, r3, #8
   14748:	2905      	cmp	r1, #5
   1474a:	d815      	bhi.n	14778 <print_string_ptr+0x13c>
   1474c:	e8df f001 	tbb	[pc, r1]
   14750:	140d1109 	.word	0x140d1109
   14754:	0f0b      	.short	0x0f0b
   14756:	2b22      	cmp	r3, #34	; 0x22
   14758:	d001      	beq.n	1475e <print_string_ptr+0x122>
   1475a:	2b5c      	cmp	r3, #92	; 0x5c
   1475c:	d10c      	bne.n	14778 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   1475e:	7063      	strb	r3, [r4, #1]
                    break;
   14760:	e7e5      	b.n	1472e <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   14762:	2362      	movs	r3, #98	; 0x62
   14764:	e7fb      	b.n	1475e <print_string_ptr+0x122>
                    *output_pointer = 'f';
   14766:	2366      	movs	r3, #102	; 0x66
   14768:	e7f9      	b.n	1475e <print_string_ptr+0x122>
                    *output_pointer = 'n';
   1476a:	236e      	movs	r3, #110	; 0x6e
   1476c:	e7f7      	b.n	1475e <print_string_ptr+0x122>
                    *output_pointer = 'r';
   1476e:	2372      	movs	r3, #114	; 0x72
   14770:	e7f5      	b.n	1475e <print_string_ptr+0x122>
                    *output_pointer = 't';
   14772:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   14776:	e7da      	b.n	1472e <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   14778:	6839      	ldr	r1, [r7, #0]
   1477a:	687d      	ldr	r5, [r7, #4]
   1477c:	1a41      	subs	r1, r0, r1
   1477e:	1a69      	subs	r1, r5, r1
   14780:	f00d fb06 	bl	21d90 <sniprintf>
                    output_pointer += 4;
   14784:	4a03      	ldr	r2, [pc, #12]	; (14794 <print_string_ptr+0x158>)
   14786:	1d60      	adds	r0, r4, #5
                    break;
   14788:	e7d1      	b.n	1472e <print_string_ptr+0xf2>
   1478a:	bf00      	nop
   1478c:	0002bde7 	.word	0x0002bde7
   14790:	04000037 	.word	0x04000037
   14794:	0002bde1 	.word	0x0002bde1

00014798 <print_value>:
{
   14798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1479c:	460c      	mov	r4, r1
    if ((item == NULL) || (output_buffer == NULL))
   1479e:	4606      	mov	r6, r0
{
   147a0:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   147a2:	b908      	cbnz	r0, 147a8 <print_value+0x10>
    switch ((item->type) & 0xFF)
   147a4:	2500      	movs	r5, #0
   147a6:	e06f      	b.n	14888 <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   147a8:	2900      	cmp	r1, #0
   147aa:	d0fb      	beq.n	147a4 <print_value+0xc>
    switch ((item->type) & 0xFF)
   147ac:	7b05      	ldrb	r5, [r0, #12]
   147ae:	2d10      	cmp	r5, #16
   147b0:	f000 80cc 	beq.w	1494c <print_value+0x1b4>
   147b4:	dc18      	bgt.n	147e8 <print_value+0x50>
   147b6:	1e6b      	subs	r3, r5, #1
   147b8:	2b07      	cmp	r3, #7
   147ba:	d8f3      	bhi.n	147a4 <print_value+0xc>
   147bc:	2b07      	cmp	r3, #7
   147be:	d8f1      	bhi.n	147a4 <print_value+0xc>
   147c0:	a201      	add	r2, pc, #4	; (adr r2, 147c8 <print_value+0x30>)
   147c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   147c6:	bf00      	nop
   147c8:	00014865 	.word	0x00014865
   147cc:	00014891 	.word	0x00014891
   147d0:	000147a5 	.word	0x000147a5
   147d4:	0001483d 	.word	0x0001483d
   147d8:	000147a5 	.word	0x000147a5
   147dc:	000147a5 	.word	0x000147a5
   147e0:	000147a5 	.word	0x000147a5
   147e4:	00014895 	.word	0x00014895
   147e8:	2d40      	cmp	r5, #64	; 0x40
   147ea:	f000 80dd 	beq.w	149a8 <print_value+0x210>
   147ee:	2d80      	cmp	r5, #128	; 0x80
   147f0:	f000 8098 	beq.w	14924 <print_value+0x18c>
   147f4:	2d20      	cmp	r5, #32
   147f6:	d1d5      	bne.n	147a4 <print_value+0xc>
            return print_array(item, output_buffer);
   147f8:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   147fa:	2101      	movs	r1, #1
   147fc:	4620      	mov	r0, r4
   147fe:	f013 fc0d 	bl	2801c <ensure>
    if (output_pointer == NULL)
   14802:	2800      	cmp	r0, #0
   14804:	d0ce      	beq.n	147a4 <print_value+0xc>
    *output_pointer = '[';
   14806:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   14808:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   1480a:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   1480e:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   14810:	68a3      	ldr	r3, [r4, #8]
   14812:	3301      	adds	r3, #1
   14814:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   14816:	68e3      	ldr	r3, [r4, #12]
   14818:	3301      	adds	r3, #1
   1481a:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   1481c:	2e00      	cmp	r6, #0
   1481e:	f040 809a 	bne.w	14956 <print_value+0x1be>
    output_pointer = ensure(output_buffer, 2);
   14822:	2102      	movs	r1, #2
   14824:	4620      	mov	r0, r4
   14826:	f013 fbf9 	bl	2801c <ensure>
    if (output_pointer == NULL)
   1482a:	2800      	cmp	r0, #0
   1482c:	d0ba      	beq.n	147a4 <print_value+0xc>
    *output_pointer++ = ']';
   1482e:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   14830:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   14832:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   14834:	68e3      	ldr	r3, [r4, #12]
   14836:	3b01      	subs	r3, #1
   14838:	60e3      	str	r3, [r4, #12]
   1483a:	e011      	b.n	14860 <print_value+0xc8>
            const char buff[] = "null";
   1483c:	4ba8      	ldr	r3, [pc, #672]	; (14ae0 <print_value+0x348>)
            const char buff[] = "true";
   1483e:	6818      	ldr	r0, [r3, #0]
   14840:	791b      	ldrb	r3, [r3, #4]
   14842:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   14844:	2105      	movs	r1, #5
   14846:	4620      	mov	r0, r4
            const char buff[] = "true";
   14848:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   1484c:	f013 fbe6 	bl	2801c <ensure>
            if (output == NULL)
   14850:	4605      	mov	r5, r0
   14852:	b1c8      	cbz	r0, 14888 <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   14854:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   14858:	a907      	add	r1, sp, #28
   1485a:	1ad2      	subs	r2, r2, r3
   1485c:	f015 f81f 	bl	2989e <strncpy>
    return true;
   14860:	2501      	movs	r5, #1
   14862:	e011      	b.n	14888 <print_value+0xf0>
            const char buff[] = "false";
   14864:	4b9f      	ldr	r3, [pc, #636]	; (14ae4 <print_value+0x34c>)
            output = ensure(output_buffer, sizeof(buff));
   14866:	2106      	movs	r1, #6
            const char buff[] = "false";
   14868:	6818      	ldr	r0, [r3, #0]
   1486a:	889b      	ldrh	r3, [r3, #4]
   1486c:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   1486e:	4620      	mov	r0, r4
            const char buff[] = "false";
   14870:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   14874:	f013 fbd2 	bl	2801c <ensure>
            if (output == NULL)
   14878:	2800      	cmp	r0, #0
   1487a:	d093      	beq.n	147a4 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   1487c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   14880:	a907      	add	r1, sp, #28
   14882:	1ad2      	subs	r2, r2, r3
   14884:	f015 f80b 	bl	2989e <strncpy>
}
   14888:	4628      	mov	r0, r5
   1488a:	b00f      	add	sp, #60	; 0x3c
   1488c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   14890:	4b95      	ldr	r3, [pc, #596]	; (14ae8 <print_value+0x350>)
   14892:	e7d4      	b.n	1483e <print_value+0xa6>
    if ((d * 0) != 0)
   14894:	2200      	movs	r2, #0
    double d = item->valuedouble;
   14896:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   1489a:	2300      	movs	r3, #0
   1489c:	4640      	mov	r0, r8
   1489e:	4649      	mov	r1, r9
   148a0:	f7f8 f918 	bl	cad4 <__aeabi_dmul>
   148a4:	2200      	movs	r2, #0
   148a6:	2300      	movs	r3, #0
   148a8:	f7f7 fedc 	bl	c664 <__aeabi_dcmpeq>
   148ac:	ae07      	add	r6, sp, #28
   148ae:	b9b8      	cbnz	r0, 148e0 <print_value+0x148>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   148b0:	4630      	mov	r0, r6
   148b2:	498b      	ldr	r1, [pc, #556]	; (14ae0 <print_value+0x348>)
   148b4:	f014 ffc4 	bl	29840 <strcpy>
   148b8:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   148ba:	4620      	mov	r0, r4
   148bc:	1c69      	adds	r1, r5, #1
   148be:	f013 fbad 	bl	2801c <ensure>
    if (output_pointer == NULL)
   148c2:	2800      	cmp	r0, #0
   148c4:	f43f af6e 	beq.w	147a4 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   148c8:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   148ca:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   148cc:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   148ce:	3301      	adds	r3, #1
   148d0:	429d      	cmp	r5, r3
   148d2:	d1fa      	bne.n	148ca <print_value+0x132>
    output_pointer[i] = '\0';
   148d4:	2300      	movs	r3, #0
   148d6:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   148d8:	68a0      	ldr	r0, [r4, #8]
   148da:	4428      	add	r0, r5
   148dc:	60a0      	str	r0, [r4, #8]
    return true;
   148de:	e7bf      	b.n	14860 <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   148e0:	211a      	movs	r1, #26
   148e2:	4a82      	ldr	r2, [pc, #520]	; (14aec <print_value+0x354>)
   148e4:	4630      	mov	r0, r6
   148e6:	e9cd 8900 	strd	r8, r9, [sp]
   148ea:	f00d fa51 	bl	21d90 <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   148ee:	4980      	ldr	r1, [pc, #512]	; (14af0 <print_value+0x358>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   148f0:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   148f2:	aa04      	add	r2, sp, #16
   148f4:	4630      	mov	r0, r6
   148f6:	f00d fa7f 	bl	21df8 <siscanf>
   148fa:	2801      	cmp	r0, #1
   148fc:	d106      	bne.n	1490c <print_value+0x174>
   148fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   14902:	4640      	mov	r0, r8
   14904:	4649      	mov	r1, r9
   14906:	f7f7 fead 	bl	c664 <__aeabi_dcmpeq>
   1490a:	b938      	cbnz	r0, 1491c <print_value+0x184>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   1490c:	211a      	movs	r1, #26
   1490e:	4630      	mov	r0, r6
   14910:	e9cd 8900 	strd	r8, r9, [sp]
   14914:	4a77      	ldr	r2, [pc, #476]	; (14af4 <print_value+0x35c>)
   14916:	f00d fa3b 	bl	21d90 <sniprintf>
   1491a:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   1491c:	2d19      	cmp	r5, #25
   1491e:	f73f af41 	bgt.w	147a4 <print_value+0xc>
   14922:	e7ca      	b.n	148ba <print_value+0x122>
            if (item->valuestring == NULL)
   14924:	6900      	ldr	r0, [r0, #16]
   14926:	2800      	cmp	r0, #0
   14928:	f43f af3c 	beq.w	147a4 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   1492c:	f7f8 fb04 	bl	cf38 <strlen>
   14930:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   14932:	4611      	mov	r1, r2
   14934:	4620      	mov	r0, r4
   14936:	9203      	str	r2, [sp, #12]
   14938:	f013 fb70 	bl	2801c <ensure>
            if (output == NULL)
   1493c:	2800      	cmp	r0, #0
   1493e:	f43f af31 	beq.w	147a4 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14942:	9a03      	ldr	r2, [sp, #12]
   14944:	6931      	ldr	r1, [r6, #16]
   14946:	f014 fd94 	bl	29472 <memcpy>
   1494a:	e789      	b.n	14860 <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   1494c:	6900      	ldr	r0, [r0, #16]
   1494e:	f7ff fe75 	bl	1463c <print_string_ptr>
   14952:	4605      	mov	r5, r0
            return print_string(item, output_buffer);
   14954:	e798      	b.n	14888 <print_value+0xf0>
        if (!print_value(current_element, output_buffer))
   14956:	4621      	mov	r1, r4
   14958:	4630      	mov	r0, r6
   1495a:	f7ff ff1d 	bl	14798 <print_value>
   1495e:	2800      	cmp	r0, #0
   14960:	f43f af20 	beq.w	147a4 <print_value+0xc>
        update_offset(output_buffer);
   14964:	4620      	mov	r0, r4
   14966:	f013 fb30 	bl	27fca <update_offset>
        if (current_element->next)
   1496a:	6833      	ldr	r3, [r6, #0]
   1496c:	b1bb      	cbz	r3, 1499e <print_value+0x206>
            length = (size_t) (output_buffer->format ? 2 : 1);
   1496e:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   14970:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   14972:	2b00      	cmp	r3, #0
   14974:	bf14      	ite	ne
   14976:	f04f 0902 	movne.w	r9, #2
   1497a:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   1497e:	f109 0101 	add.w	r1, r9, #1
   14982:	f013 fb4b 	bl	2801c <ensure>
            if (output_pointer == NULL)
   14986:	2800      	cmp	r0, #0
   14988:	f43f af0c 	beq.w	147a4 <print_value+0xc>
            *output_pointer++ = ',';
   1498c:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   1498e:	6963      	ldr	r3, [r4, #20]
   14990:	b93b      	cbnz	r3, 149a2 <print_value+0x20a>
            *output_pointer++ = ',';
   14992:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   14994:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   14998:	68a3      	ldr	r3, [r4, #8]
   1499a:	444b      	add	r3, r9
   1499c:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   1499e:	6836      	ldr	r6, [r6, #0]
   149a0:	e73c      	b.n	1481c <print_value+0x84>
                *output_pointer++ = ' ';
   149a2:	1c83      	adds	r3, r0, #2
   149a4:	7045      	strb	r5, [r0, #1]
   149a6:	e7f5      	b.n	14994 <print_value+0x1fc>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   149a8:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   149aa:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   149ac:	2b00      	cmp	r3, #0
   149ae:	bf14      	ite	ne
   149b0:	2702      	movne	r7, #2
   149b2:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   149b4:	4620      	mov	r0, r4
   149b6:	1c79      	adds	r1, r7, #1
   149b8:	f013 fb30 	bl	2801c <ensure>
    if (output_pointer == NULL)
   149bc:	2800      	cmp	r0, #0
   149be:	f43f aef1 	beq.w	147a4 <print_value+0xc>
    *output_pointer++ = '{';
   149c2:	237b      	movs	r3, #123	; 0x7b
   149c4:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   149c6:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   149c8:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   149ca:	3201      	adds	r2, #1
   149cc:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   149ce:	b10b      	cbz	r3, 149d4 <print_value+0x23c>
        *output_pointer++ = '\n';
   149d0:	230a      	movs	r3, #10
   149d2:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   149d4:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   149d6:	2609      	movs	r6, #9
    output_buffer->offset += length;
   149d8:	443b      	add	r3, r7
        *output_pointer++ = ':';
   149da:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   149dc:	60a3      	str	r3, [r4, #8]
    while (current_item)
   149de:	6963      	ldr	r3, [r4, #20]
   149e0:	b995      	cbnz	r5, 14a08 <print_value+0x270>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   149e2:	2b00      	cmp	r3, #0
   149e4:	d06f      	beq.n	14ac6 <print_value+0x32e>
   149e6:	68e1      	ldr	r1, [r4, #12]
   149e8:	3101      	adds	r1, #1
   149ea:	4620      	mov	r0, r4
   149ec:	f013 fb16 	bl	2801c <ensure>
    if (output_pointer == NULL)
   149f0:	2800      	cmp	r0, #0
   149f2:	f43f aed7 	beq.w	147a4 <print_value+0xc>
    if (output_buffer->format)
   149f6:	6963      	ldr	r3, [r4, #20]
   149f8:	2b00      	cmp	r3, #0
   149fa:	d16e      	bne.n	14ada <print_value+0x342>
   149fc:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   149fe:	227d      	movs	r2, #125	; 0x7d
   14a00:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   14a02:	2200      	movs	r2, #0
   14a04:	705a      	strb	r2, [r3, #1]
   14a06:	e715      	b.n	14834 <print_value+0x9c>
        if (output_buffer->format)
   14a08:	b173      	cbz	r3, 14a28 <print_value+0x290>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   14a0a:	4620      	mov	r0, r4
   14a0c:	68e1      	ldr	r1, [r4, #12]
   14a0e:	f013 fb05 	bl	2801c <ensure>
            if (output_pointer == NULL)
   14a12:	2800      	cmp	r0, #0
   14a14:	f43f aec6 	beq.w	147a4 <print_value+0xc>
   14a18:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   14a1a:	68e1      	ldr	r1, [r4, #12]
   14a1c:	1a13      	subs	r3, r2, r0
   14a1e:	428b      	cmp	r3, r1
   14a20:	d34e      	bcc.n	14ac0 <print_value+0x328>
            output_buffer->offset += output_buffer->depth;
   14a22:	68a3      	ldr	r3, [r4, #8]
   14a24:	440b      	add	r3, r1
   14a26:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   14a28:	4621      	mov	r1, r4
   14a2a:	6a28      	ldr	r0, [r5, #32]
   14a2c:	f7ff fe06 	bl	1463c <print_string_ptr>
   14a30:	2800      	cmp	r0, #0
   14a32:	f43f aeb7 	beq.w	147a4 <print_value+0xc>
        update_offset(output_buffer);
   14a36:	4620      	mov	r0, r4
   14a38:	f013 fac7 	bl	27fca <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   14a3c:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   14a3e:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   14a40:	2b00      	cmp	r3, #0
   14a42:	bf14      	ite	ne
   14a44:	f04f 0802 	movne.w	r8, #2
   14a48:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   14a4c:	4641      	mov	r1, r8
   14a4e:	f013 fae5 	bl	2801c <ensure>
        if (output_pointer == NULL)
   14a52:	2800      	cmp	r0, #0
   14a54:	f43f aea6 	beq.w	147a4 <print_value+0xc>
        *output_pointer++ = ':';
   14a58:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   14a5a:	6963      	ldr	r3, [r4, #20]
   14a5c:	b103      	cbz	r3, 14a60 <print_value+0x2c8>
            *output_pointer++ = '\t';
   14a5e:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   14a60:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   14a62:	4621      	mov	r1, r4
        output_buffer->offset += length;
   14a64:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   14a66:	4628      	mov	r0, r5
        output_buffer->offset += length;
   14a68:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   14a6a:	f7ff fe95 	bl	14798 <print_value>
   14a6e:	2800      	cmp	r0, #0
   14a70:	f43f ae98 	beq.w	147a4 <print_value+0xc>
        update_offset(output_buffer);
   14a74:	4620      	mov	r0, r4
   14a76:	f013 faa8 	bl	27fca <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   14a7a:	682b      	ldr	r3, [r5, #0]
   14a7c:	6962      	ldr	r2, [r4, #20]
   14a7e:	3b00      	subs	r3, #0
   14a80:	bf18      	it	ne
   14a82:	2301      	movne	r3, #1
   14a84:	2a00      	cmp	r2, #0
   14a86:	bf0c      	ite	eq
   14a88:	4698      	moveq	r8, r3
   14a8a:	f103 0801 	addne.w	r8, r3, #1
        output_pointer = ensure(output_buffer, length + 1);
   14a8e:	4620      	mov	r0, r4
   14a90:	f108 0101 	add.w	r1, r8, #1
   14a94:	f013 fac2 	bl	2801c <ensure>
        if (output_pointer == NULL)
   14a98:	2800      	cmp	r0, #0
   14a9a:	f43f ae83 	beq.w	147a4 <print_value+0xc>
        if (current_item->next)
   14a9e:	682b      	ldr	r3, [r5, #0]
   14aa0:	b113      	cbz	r3, 14aa8 <print_value+0x310>
            *output_pointer++ = ',';
   14aa2:	232c      	movs	r3, #44	; 0x2c
   14aa4:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   14aa8:	6963      	ldr	r3, [r4, #20]
   14aaa:	b113      	cbz	r3, 14ab2 <print_value+0x31a>
            *output_pointer++ = '\n';
   14aac:	230a      	movs	r3, #10
   14aae:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   14ab2:	2300      	movs	r3, #0
   14ab4:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   14ab6:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   14ab8:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   14aba:	4443      	add	r3, r8
   14abc:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   14abe:	e78e      	b.n	149de <print_value+0x246>
                *output_pointer++ = '\t';
   14ac0:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   14ac4:	e7a9      	b.n	14a1a <print_value+0x282>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   14ac6:	2102      	movs	r1, #2
   14ac8:	e78f      	b.n	149ea <print_value+0x252>
            *output_pointer++ = '\t';
   14aca:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   14ace:	68e2      	ldr	r2, [r4, #12]
   14ad0:	1a19      	subs	r1, r3, r0
   14ad2:	3a01      	subs	r2, #1
   14ad4:	4291      	cmp	r1, r2
   14ad6:	d3f8      	bcc.n	14aca <print_value+0x332>
   14ad8:	e791      	b.n	149fe <print_value+0x266>
   14ada:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   14adc:	2509      	movs	r5, #9
   14ade:	e7f6      	b.n	14ace <print_value+0x336>
   14ae0:	0002bdea 	.word	0x0002bdea
   14ae4:	0002be01 	.word	0x0002be01
   14ae8:	0002be07 	.word	0x0002be07
   14aec:	0002bdef 	.word	0x0002bdef
   14af0:	0002bdf6 	.word	0x0002bdf6
   14af4:	0002bdfa 	.word	0x0002bdfa

00014af8 <cJSON_strdup.isra.0.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   14af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   14afa:	4605      	mov	r5, r0
   14afc:	b180      	cbz	r0, 14b20 <cJSON_strdup.isra.0.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   14afe:	f7f8 fa1b 	bl	cf38 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   14b02:	4b08      	ldr	r3, [pc, #32]	; (14b24 <cJSON_strdup.isra.0.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   14b04:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   14b06:	4610      	mov	r0, r2
   14b08:	681b      	ldr	r3, [r3, #0]
   14b0a:	9201      	str	r2, [sp, #4]
   14b0c:	4798      	blx	r3
    if (copy == NULL)
   14b0e:	4604      	mov	r4, r0
   14b10:	b118      	cbz	r0, 14b1a <cJSON_strdup.isra.0.constprop.0+0x22>
   14b12:	4629      	mov	r1, r5
   14b14:	9a01      	ldr	r2, [sp, #4]
   14b16:	f014 fcac 	bl	29472 <memcpy>
}
   14b1a:	4620      	mov	r0, r4
   14b1c:	b003      	add	sp, #12
   14b1e:	bd30      	pop	{r4, r5, pc}
        return NULL;
   14b20:	4604      	mov	r4, r0
   14b22:	e7fa      	b.n	14b1a <cJSON_strdup.isra.0.constprop.0+0x22>
   14b24:	200205ac 	.word	0x200205ac

00014b28 <add_item_to_object.constprop.0>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   14b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14b2a:	460d      	mov	r5, r1
   14b2c:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL))
   14b2e:	4607      	mov	r7, r0
   14b30:	b1f0      	cbz	r0, 14b70 <add_item_to_object.constprop.0+0x48>
   14b32:	b1e9      	cbz	r1, 14b70 <add_item_to_object.constprop.0+0x48>
   14b34:	b1e2      	cbz	r2, 14b70 <add_item_to_object.constprop.0+0x48>
    if (constant_key)
   14b36:	b193      	cbz	r3, 14b5e <add_item_to_object.constprop.0+0x36>
        new_type = item->type | cJSON_StringIsConst;
   14b38:	68d6      	ldr	r6, [r2, #12]
   14b3a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   14b3e:	68e3      	ldr	r3, [r4, #12]
   14b40:	059b      	lsls	r3, r3, #22
   14b42:	d404      	bmi.n	14b4e <add_item_to_object.constprop.0+0x26>
   14b44:	6a20      	ldr	r0, [r4, #32]
   14b46:	b110      	cbz	r0, 14b4e <add_item_to_object.constprop.0+0x26>
        hooks->deallocate(item->string);
   14b48:	4b0a      	ldr	r3, [pc, #40]	; (14b74 <add_item_to_object.constprop.0+0x4c>)
   14b4a:	685b      	ldr	r3, [r3, #4]
   14b4c:	4798      	blx	r3
    return add_item_to_array(object, item);
   14b4e:	4621      	mov	r1, r4
   14b50:	4638      	mov	r0, r7
    item->string = new_key;
   14b52:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   14b54:	60e6      	str	r6, [r4, #12]
}
   14b56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   14b5a:	f013 ba43 	b.w	27fe4 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   14b5e:	4608      	mov	r0, r1
   14b60:	f7ff ffca 	bl	14af8 <cJSON_strdup.isra.0.constprop.0>
        if (new_key == NULL)
   14b64:	4605      	mov	r5, r0
   14b66:	b118      	cbz	r0, 14b70 <add_item_to_object.constprop.0+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   14b68:	68e6      	ldr	r6, [r4, #12]
   14b6a:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   14b6e:	e7e6      	b.n	14b3e <add_item_to_object.constprop.0+0x16>
}
   14b70:	2000      	movs	r0, #0
   14b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14b74:	200205ac 	.word	0x200205ac

00014b78 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   14b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   14b7a:	4d24      	ldr	r5, [pc, #144]	; (14c0c <print.constprop.0+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   14b7c:	b08b      	sub	sp, #44	; 0x2c
   14b7e:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   14b80:	2224      	movs	r2, #36	; 0x24
   14b82:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   14b84:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   14b86:	a801      	add	r0, sp, #4
   14b88:	f014 fcad 	bl	294e6 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   14b8c:	682b      	ldr	r3, [r5, #0]
   14b8e:	f44f 7080 	mov.w	r0, #256	; 0x100
   14b92:	4798      	blx	r3
    buffer->length = default_buffer_size;
   14b94:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   14b98:	4603      	mov	r3, r0
    buffer->format = format;
   14b9a:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   14b9c:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   14b9e:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   14ba0:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   14ba2:	462f      	mov	r7, r5
   14ba4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   14ba8:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   14bac:	b17b      	cbz	r3, 14bce <print.constprop.0+0x56>
    if (!print_value(item, buffer))
   14bae:	4620      	mov	r0, r4
   14bb0:	a901      	add	r1, sp, #4
   14bb2:	f7ff fdf1 	bl	14798 <print_value>
   14bb6:	b150      	cbz	r0, 14bce <print.constprop.0+0x56>
    update_offset(buffer);
   14bb8:	a801      	add	r0, sp, #4
   14bba:	f013 fa06 	bl	27fca <update_offset>
    if (hooks->reallocate != NULL)
   14bbe:	68ae      	ldr	r6, [r5, #8]
   14bc0:	9903      	ldr	r1, [sp, #12]
   14bc2:	b15e      	cbz	r6, 14bdc <print.constprop.0+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   14bc4:	9801      	ldr	r0, [sp, #4]
   14bc6:	3101      	adds	r1, #1
   14bc8:	47b0      	blx	r6
        if (printed == NULL) {
   14bca:	4604      	mov	r4, r0
   14bcc:	b9d0      	cbnz	r0, 14c04 <print.constprop.0+0x8c>
    if (buffer->buffer != NULL)
   14bce:	9c01      	ldr	r4, [sp, #4]
   14bd0:	b1c4      	cbz	r4, 14c04 <print.constprop.0+0x8c>
        hooks->deallocate(buffer->buffer);
   14bd2:	4620      	mov	r0, r4
   14bd4:	687b      	ldr	r3, [r7, #4]
   14bd6:	4798      	blx	r3
    return NULL;
   14bd8:	2400      	movs	r4, #0
   14bda:	e013      	b.n	14c04 <print.constprop.0+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   14bdc:	682b      	ldr	r3, [r5, #0]
   14bde:	1c48      	adds	r0, r1, #1
   14be0:	4798      	blx	r3
        if (printed == NULL)
   14be2:	4604      	mov	r4, r0
   14be4:	2800      	cmp	r0, #0
   14be6:	d0f2      	beq.n	14bce <print.constprop.0+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   14be8:	9a03      	ldr	r2, [sp, #12]
   14bea:	9b02      	ldr	r3, [sp, #8]
   14bec:	3201      	adds	r2, #1
   14bee:	429a      	cmp	r2, r3
   14bf0:	bf28      	it	cs
   14bf2:	461a      	movcs	r2, r3
   14bf4:	9901      	ldr	r1, [sp, #4]
   14bf6:	f014 fc3c 	bl	29472 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   14bfa:	9b03      	ldr	r3, [sp, #12]
   14bfc:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   14bfe:	686b      	ldr	r3, [r5, #4]
   14c00:	9801      	ldr	r0, [sp, #4]
   14c02:	4798      	blx	r3
}
   14c04:	4620      	mov	r0, r4
   14c06:	b00b      	add	sp, #44	; 0x2c
   14c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14c0a:	bf00      	nop
   14c0c:	200205ac 	.word	0x200205ac

00014c10 <cJSON_Delete>:
{
   14c10:	b570      	push	{r4, r5, r6, lr}
   14c12:	4604      	mov	r4, r0
   14c14:	4d0f      	ldr	r5, [pc, #60]	; (14c54 <cJSON_Delete+0x44>)
    while (item != NULL)
   14c16:	b904      	cbnz	r4, 14c1a <cJSON_Delete+0xa>
}
   14c18:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   14c1a:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   14c1c:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   14c1e:	05d9      	lsls	r1, r3, #23
   14c20:	d403      	bmi.n	14c2a <cJSON_Delete+0x1a>
   14c22:	68a0      	ldr	r0, [r4, #8]
   14c24:	b968      	cbnz	r0, 14c42 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   14c26:	6920      	ldr	r0, [r4, #16]
   14c28:	b988      	cbnz	r0, 14c4e <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   14c2a:	68e3      	ldr	r3, [r4, #12]
   14c2c:	059b      	lsls	r3, r3, #22
   14c2e:	d403      	bmi.n	14c38 <cJSON_Delete+0x28>
   14c30:	6a20      	ldr	r0, [r4, #32]
   14c32:	b108      	cbz	r0, 14c38 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   14c34:	686b      	ldr	r3, [r5, #4]
   14c36:	4798      	blx	r3
        global_hooks.deallocate(item);
   14c38:	4620      	mov	r0, r4
   14c3a:	686b      	ldr	r3, [r5, #4]
   14c3c:	4798      	blx	r3
        item = next;
   14c3e:	4634      	mov	r4, r6
   14c40:	e7e9      	b.n	14c16 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   14c42:	f7ff ffe5 	bl	14c10 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   14c46:	68e3      	ldr	r3, [r4, #12]
   14c48:	05da      	lsls	r2, r3, #23
   14c4a:	d5ec      	bpl.n	14c26 <cJSON_Delete+0x16>
   14c4c:	e7ed      	b.n	14c2a <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   14c4e:	686b      	ldr	r3, [r5, #4]
   14c50:	4798      	blx	r3
   14c52:	e7ea      	b.n	14c2a <cJSON_Delete+0x1a>
   14c54:	200205ac 	.word	0x200205ac

00014c58 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   14c58:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   14c5a:	4b0a      	ldr	r3, [pc, #40]	; (14c84 <cJSON_CreateString+0x2c>)
{
   14c5c:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   14c5e:	6818      	ldr	r0, [r3, #0]
   14c60:	f013 f9d0 	bl	28004 <cJSON_New_Item.isra.0>
    if(item)
   14c64:	4604      	mov	r4, r0
   14c66:	b158      	cbz	r0, 14c80 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   14c68:	2310      	movs	r3, #16
   14c6a:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   14c6c:	4628      	mov	r0, r5
   14c6e:	f7ff ff43 	bl	14af8 <cJSON_strdup.isra.0.constprop.0>
   14c72:	4605      	mov	r5, r0
   14c74:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   14c76:	b918      	cbnz	r0, 14c80 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   14c78:	4620      	mov	r0, r4
   14c7a:	f7ff ffc9 	bl	14c10 <cJSON_Delete>
            return NULL;
   14c7e:	462c      	mov	r4, r5
        }
    }

    return item;
}
   14c80:	4620      	mov	r0, r4
   14c82:	bd38      	pop	{r3, r4, r5, pc}
   14c84:	200205ac 	.word	0x200205ac

00014c88 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   14c88:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   14c8a:	4b04      	ldr	r3, [pc, #16]	; (14c9c <cJSON_CreateObject+0x14>)
   14c8c:	6818      	ldr	r0, [r3, #0]
   14c8e:	f013 f9b9 	bl	28004 <cJSON_New_Item.isra.0>
    if (item)
   14c92:	b108      	cbz	r0, 14c98 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   14c94:	2340      	movs	r3, #64	; 0x40
   14c96:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   14c98:	bd08      	pop	{r3, pc}
   14c9a:	bf00      	nop
   14c9c:	200205ac 	.word	0x200205ac

00014ca0 <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(struct device *unused)
{
   14ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   14ca2:	2200      	movs	r2, #0
   14ca4:	202a      	movs	r0, #42	; 0x2a
   14ca6:	4611      	mov	r1, r2
   14ca8:	f7fc f81c 	bl	10ce4 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   14cac:	4a06      	ldr	r2, [pc, #24]	; (14cc8 <_bsdlib_init+0x28>)
   14cae:	ab01      	add	r3, sp, #4
   14cb0:	ca07      	ldmia	r2, {r0, r1, r2}
   14cb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   14cb6:	4618      	mov	r0, r3
   14cb8:	f008 fd28 	bl	1d70c <bsd_init>
   14cbc:	4b03      	ldr	r3, [pc, #12]	; (14ccc <_bsdlib_init+0x2c>)
   14cbe:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   14cc0:	2000      	movs	r0, #0
   14cc2:	b005      	add	sp, #20
   14cc4:	f85d fb04 	ldr.w	pc, [sp], #4
   14cc8:	0002a3c0 	.word	0x0002a3c0
   14ccc:	20022eac 	.word	0x20022eac

00014cd0 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   14cd0:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   14cd2:	4c0d      	ldr	r4, [pc, #52]	; (14d08 <thread_monitor_entry_get+0x38>)
{
   14cd4:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   14cd6:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   14cd8:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   14cda:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   14cdc:	4b0b      	ldr	r3, [pc, #44]	; (14d0c <thread_monitor_entry_get+0x3c>)
   14cde:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   14ce0:	6801      	ldr	r1, [r0, #0]
   14ce2:	4291      	cmp	r1, r2
   14ce4:	d00e      	beq.n	14d04 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   14ce6:	b151      	cbz	r1, 14cfe <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   14ce8:	6841      	ldr	r1, [r0, #4]
   14cea:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   14cec:	42b1      	cmp	r1, r6
   14cee:	bfc4      	itt	gt
   14cf0:	4604      	movgt	r4, r0
   14cf2:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   14cf4:	3d01      	subs	r5, #1
   14cf6:	f100 0008 	add.w	r0, r0, #8
   14cfa:	d1f1      	bne.n	14ce0 <thread_monitor_entry_get+0x10>
   14cfc:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   14cfe:	3b01      	subs	r3, #1
	new_entry->id = id;
   14d00:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   14d02:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   14d04:	bd70      	pop	{r4, r5, r6, pc}
   14d06:	bf00      	nop
   14d08:	20022ebc 	.word	0x20022ebc
   14d0c:	20022eb0 	.word	0x20022eb0

00014d10 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   14d10:	4668      	mov	r0, sp
   14d12:	f020 0107 	bic.w	r1, r0, #7
   14d16:	468d      	mov	sp, r1
   14d18:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14d1a:	4b0d      	ldr	r3, [pc, #52]	; (14d50 <rpc_proxy_irq_handler+0x40>)
   14d1c:	e8d3 2fef 	ldaex	r2, [r3]
   14d20:	3201      	adds	r2, #1
   14d22:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14d26:	2900      	cmp	r1, #0
   14d28:	d1f8      	bne.n	14d1c <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   14d2a:	f003 fb69 	bl	18400 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   14d2e:	4b09      	ldr	r3, [pc, #36]	; (14d54 <rpc_proxy_irq_handler+0x44>)
   14d30:	681c      	ldr	r4, [r3, #0]
   14d32:	b93c      	cbnz	r4, 14d44 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   14d34:	f7fb ffec 	bl	10d10 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   14d38:	f7fc f99c 	bl	11074 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   14d3c:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   14d40:	4685      	mov	sp, r0
   14d42:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   14d44:	1d20      	adds	r0, r4, #4
   14d46:	f00b fce9 	bl	2071c <z_impl_k_sem_give>
   14d4a:	6824      	ldr	r4, [r4, #0]
	return node->next;
   14d4c:	e7f1      	b.n	14d32 <rpc_proxy_irq_handler+0x22>
   14d4e:	bf00      	nop
   14d50:	20022eb0 	.word	0x20022eb0
   14d54:	20022eb4 	.word	0x20022eb4

00014d58 <bsd_os_timedwait>:
{
   14d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d5c:	460c      	mov	r4, r1
   14d5e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   14d60:	f014 fa32 	bl	291c8 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   14d64:	6823      	ldr	r3, [r4, #0]
   14d66:	4680      	mov	r8, r0
   14d68:	2b00      	cmp	r3, #0
   14d6a:	468a      	mov	sl, r1
   14d6c:	d103      	bne.n	14d76 <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   14d6e:	f00b fc63 	bl	20638 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   14d72:	203c      	movs	r0, #60	; 0x3c
   14d74:	e091      	b.n	14e9a <bsd_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   14d76:	bfbc      	itt	lt
   14d78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   14d7c:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   14d7e:	2201      	movs	r2, #1
   14d80:	2100      	movs	r1, #0
   14d82:	a802      	add	r0, sp, #8
   14d84:	f014 f935 	bl	28ff2 <z_impl_k_sem_init>
   14d88:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   14d8a:	f04f 0320 	mov.w	r3, #32
   14d8e:	f3ef 8b11 	mrs	fp, BASEPRI
   14d92:	f383 8811 	msr	BASEPRI, r3
   14d96:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   14d9a:	f00b fcb9 	bl	20710 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   14d9e:	f7ff ff97 	bl	14cd0 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   14da2:	4946      	ldr	r1, [pc, #280]	; (14ebc <bsd_os_timedwait+0x164>)
   14da4:	6843      	ldr	r3, [r0, #4]
   14da6:	680a      	ldr	r2, [r1, #0]
   14da8:	4689      	mov	r9, r1
   14daa:	4293      	cmp	r3, r2
   14dac:	f04f 0300 	mov.w	r3, #0
   14db0:	d108      	bne.n	14dc4 <bsd_os_timedwait+0x6c>
	parent->next = child;
   14db2:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   14db4:	4b42      	ldr	r3, [pc, #264]	; (14ec0 <bsd_os_timedwait+0x168>)
   14db6:	685a      	ldr	r2, [r3, #4]
   14db8:	2a00      	cmp	r2, #0
   14dba:	d171      	bne.n	14ea0 <bsd_os_timedwait+0x148>
	list->head = node;
   14dbc:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   14dc0:	2301      	movs	r3, #1
}
   14dc2:	e000      	b.n	14dc6 <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   14dc4:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   14dc6:	f38b 8811 	msr	BASEPRI, fp
   14dca:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   14dce:	2b00      	cmp	r3, #0
   14dd0:	d062      	beq.n	14e98 <bsd_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   14dd2:	6820      	ldr	r0, [r4, #0]
   14dd4:	1c42      	adds	r2, r0, #1
   14dd6:	d066      	beq.n	14ea6 <bsd_os_timedwait+0x14e>
   14dd8:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   14ddc:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   14de0:	f240 30e7 	movw	r0, #999	; 0x3e7
   14de4:	2100      	movs	r1, #0
   14de6:	2300      	movs	r3, #0
   14de8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14dec:	fbce 010c 	smlal	r0, r1, lr, ip
   14df0:	f7f7 fce2 	bl	c7b8 <__aeabi_uldivmod>
   14df4:	2300      	movs	r3, #0
	return z_impl_k_sem_take(sem, timeout);
   14df6:	4602      	mov	r2, r0
   14df8:	a802      	add	r0, sp, #8
   14dfa:	f00b fcb5 	bl	20768 <z_impl_k_sem_take>
	__asm__ volatile(
   14dfe:	f04f 0320 	mov.w	r3, #32
   14e02:	f3ef 8b11 	mrs	fp, BASEPRI
   14e06:	f383 8811 	msr	BASEPRI, r3
   14e0a:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14e0e:	2000      	movs	r0, #0
   14e10:	4b2b      	ldr	r3, [pc, #172]	; (14ec0 <bsd_os_timedwait+0x168>)
   14e12:	681a      	ldr	r2, [r3, #0]
   14e14:	b15a      	cbz	r2, 14e2e <bsd_os_timedwait+0xd6>
   14e16:	42aa      	cmp	r2, r5
   14e18:	d14d      	bne.n	14eb6 <bsd_os_timedwait+0x15e>
Z_GENLIST_REMOVE(slist, snode)
   14e1a:	9d01      	ldr	r5, [sp, #4]
   14e1c:	2800      	cmp	r0, #0
   14e1e:	d144      	bne.n	14eaa <bsd_os_timedwait+0x152>
   14e20:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   14e22:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   14e24:	4291      	cmp	r1, r2
   14e26:	d100      	bne.n	14e2a <bsd_os_timedwait+0xd2>
	list->tail = node;
   14e28:	605d      	str	r5, [r3, #4]
	parent->next = child;
   14e2a:	2300      	movs	r3, #0
   14e2c:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   14e2e:	f00b fc6f 	bl	20710 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   14e32:	f7ff ff4d 	bl	14cd0 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   14e36:	f8d9 3000 	ldr.w	r3, [r9]
   14e3a:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   14e3c:	f38b 8811 	msr	BASEPRI, fp
   14e40:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   14e44:	6825      	ldr	r5, [r4, #0]
   14e46:	1c6b      	adds	r3, r5, #1
   14e48:	d026      	beq.n	14e98 <bsd_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   14e4a:	f014 f9bd 	bl	291c8 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   14e4e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   14e52:	468e      	mov	lr, r1
   14e54:	fba8 890c 	umull	r8, r9, r8, ip
   14e58:	fba0 010c 	umull	r0, r1, r0, ip
   14e5c:	fb0c 990a 	mla	r9, ip, sl, r9
   14e60:	fb0c 110e 	mla	r1, ip, lr, r1
   14e64:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   14e68:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   14e6c:	1952      	adds	r2, r2, r5
   14e6e:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   14e72:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   14e76:	0bc5      	lsrs	r5, r0, #15
   14e78:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   14e7c:	1b56      	subs	r6, r2, r5
   14e7e:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   14e82:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   14e86:	2e00      	cmp	r6, #0
   14e88:	f177 0300 	sbcs.w	r3, r7, #0
   14e8c:	bfb8      	it	lt
   14e8e:	2600      	movlt	r6, #0
   14e90:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   14e92:	2e00      	cmp	r6, #0
   14e94:	f43f af6d 	beq.w	14d72 <bsd_os_timedwait+0x1a>
	return 0;
   14e98:	2000      	movs	r0, #0
}
   14e9a:	b009      	add	sp, #36	; 0x24
   14e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ea0:	6015      	str	r5, [r2, #0]
	list->tail = node;
   14ea2:	605d      	str	r5, [r3, #4]
   14ea4:	e78c      	b.n	14dc0 <bsd_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   14ea6:	4603      	mov	r3, r0
   14ea8:	e7a5      	b.n	14df6 <bsd_os_timedwait+0x9e>
	parent->next = child;
   14eaa:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   14eac:	6859      	ldr	r1, [r3, #4]
   14eae:	4291      	cmp	r1, r2
	list->tail = node;
   14eb0:	bf08      	it	eq
   14eb2:	6058      	streq	r0, [r3, #4]
}
   14eb4:	e7b9      	b.n	14e2a <bsd_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14eb6:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14eb8:	6812      	ldr	r2, [r2, #0]
   14eba:	e7ab      	b.n	14e14 <bsd_os_timedwait+0xbc>
   14ebc:	20022eb0 	.word	0x20022eb0
   14ec0:	20022eb4 	.word	0x20022eb4

00014ec4 <bsd_os_errno_set>:
	switch (err_code) {
   14ec4:	283c      	cmp	r0, #60	; 0x3c
{
   14ec6:	b508      	push	{r3, lr}
	switch (err_code) {
   14ec8:	f300 8090 	bgt.w	14fec <bsd_os_errno_set+0x128>
   14ecc:	2800      	cmp	r0, #0
   14ece:	dc0e      	bgt.n	14eee <bsd_os_errno_set+0x2a>
   14ed0:	4ab0      	ldr	r2, [pc, #704]	; (15194 <bsd_os_errno_set+0x2d0>)
   14ed2:	4bb1      	ldr	r3, [pc, #708]	; (15198 <bsd_os_errno_set+0x2d4>)
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   14ed4:	49b1      	ldr	r1, [pc, #708]	; (1519c <bsd_os_errno_set+0x2d8>)
   14ed6:	1a9b      	subs	r3, r3, r2
   14ed8:	08db      	lsrs	r3, r3, #3
   14eda:	019b      	lsls	r3, r3, #6
   14edc:	4602      	mov	r2, r0
   14ede:	f043 0001 	orr.w	r0, r3, #1
   14ee2:	f00f fb0d 	bl	24500 <log_string_sync>
		errno = 0xBAADBAAD;
   14ee6:	f00f ff13 	bl	24d10 <__errno>
   14eea:	4bad      	ldr	r3, [pc, #692]	; (151a0 <bsd_os_errno_set+0x2dc>)
   14eec:	e0bf      	b.n	1506e <bsd_os_errno_set+0x1aa>
   14eee:	1e43      	subs	r3, r0, #1
   14ef0:	2b3b      	cmp	r3, #59	; 0x3b
   14ef2:	d8ed      	bhi.n	14ed0 <bsd_os_errno_set+0xc>
   14ef4:	a201      	add	r2, pc, #4	; (adr r2, 14efc <bsd_os_errno_set+0x38>)
   14ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14efa:	bf00      	nop
   14efc:	00015069 	.word	0x00015069
   14f00:	00015073 	.word	0x00015073
   14f04:	00014ed1 	.word	0x00014ed1
   14f08:	00014ed1 	.word	0x00014ed1
   14f0c:	0001507b 	.word	0x0001507b
   14f10:	00014ed1 	.word	0x00014ed1
   14f14:	00014ed1 	.word	0x00014ed1
   14f18:	00015083 	.word	0x00015083
   14f1c:	0001508b 	.word	0x0001508b
   14f20:	00014ed1 	.word	0x00014ed1
   14f24:	00014ed1 	.word	0x00014ed1
   14f28:	00015093 	.word	0x00015093
   14f2c:	0001509b 	.word	0x0001509b
   14f30:	000150a3 	.word	0x000150a3
   14f34:	00014ed1 	.word	0x00014ed1
   14f38:	00014ed1 	.word	0x00014ed1
   14f3c:	00014ed1 	.word	0x00014ed1
   14f40:	00014ed1 	.word	0x00014ed1
   14f44:	00014ed1 	.word	0x00014ed1
   14f48:	00014ed1 	.word	0x00014ed1
   14f4c:	00014ed1 	.word	0x00014ed1
   14f50:	000150ab 	.word	0x000150ab
   14f54:	00014ed1 	.word	0x00014ed1
   14f58:	000150b3 	.word	0x000150b3
   14f5c:	00014ed1 	.word	0x00014ed1
   14f60:	00014ed1 	.word	0x00014ed1
   14f64:	00014ed1 	.word	0x00014ed1
   14f68:	00014ed1 	.word	0x00014ed1
   14f6c:	00014ed1 	.word	0x00014ed1
   14f70:	00014ed1 	.word	0x00014ed1
   14f74:	00014ed1 	.word	0x00014ed1
   14f78:	00014ed1 	.word	0x00014ed1
   14f7c:	00014ed1 	.word	0x00014ed1
   14f80:	00014ed1 	.word	0x00014ed1
   14f84:	000150bb 	.word	0x000150bb
   14f88:	00014ed1 	.word	0x00014ed1
   14f8c:	000150c3 	.word	0x000150c3
   14f90:	00014ed1 	.word	0x00014ed1
   14f94:	00014ed1 	.word	0x00014ed1
   14f98:	0001518b 	.word	0x0001518b
   14f9c:	000150cb 	.word	0x000150cb
   14fa0:	000150d3 	.word	0x000150d3
   14fa4:	000150db 	.word	0x000150db
   14fa8:	000150e3 	.word	0x000150e3
   14fac:	000150eb 	.word	0x000150eb
   14fb0:	00014ed1 	.word	0x00014ed1
   14fb4:	000150f3 	.word	0x000150f3
   14fb8:	000150fb 	.word	0x000150fb
   14fbc:	00014ed1 	.word	0x00014ed1
   14fc0:	00015103 	.word	0x00015103
   14fc4:	0001510b 	.word	0x0001510b
   14fc8:	00015113 	.word	0x00015113
   14fcc:	00014ed1 	.word	0x00014ed1
   14fd0:	0001511b 	.word	0x0001511b
   14fd4:	00014ed1 	.word	0x00014ed1
   14fd8:	00015123 	.word	0x00015123
   14fdc:	0001512b 	.word	0x0001512b
   14fe0:	00014ed1 	.word	0x00014ed1
   14fe4:	00014ed1 	.word	0x00014ed1
   14fe8:	00015133 	.word	0x00015133
	switch (err_code) {
   14fec:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   14ff0:	2b18      	cmp	r3, #24
   14ff2:	f63f af6d 	bhi.w	14ed0 <bsd_os_errno_set+0xc>
   14ff6:	2b18      	cmp	r3, #24
   14ff8:	f63f af6a 	bhi.w	14ed0 <bsd_os_errno_set+0xc>
   14ffc:	a201      	add	r2, pc, #4	; (adr r2, 15004 <bsd_os_errno_set+0x140>)
   14ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15002:	bf00      	nop
   15004:	0001513b 	.word	0x0001513b
   15008:	00014ed1 	.word	0x00014ed1
   1500c:	00014ed1 	.word	0x00014ed1
   15010:	00014ed1 	.word	0x00014ed1
   15014:	00014ed1 	.word	0x00014ed1
   15018:	00014ed1 	.word	0x00014ed1
   1501c:	00014ed1 	.word	0x00014ed1
   15020:	00015143 	.word	0x00015143
   15024:	00014ed1 	.word	0x00014ed1
   15028:	00015153 	.word	0x00015153
   1502c:	0001514b 	.word	0x0001514b
   15030:	00014ed1 	.word	0x00014ed1
   15034:	00014ed1 	.word	0x00014ed1
   15038:	00014ed1 	.word	0x00014ed1
   1503c:	00014ed1 	.word	0x00014ed1
   15040:	00014ed1 	.word	0x00014ed1
   15044:	00014ed1 	.word	0x00014ed1
   15048:	00014ed1 	.word	0x00014ed1
   1504c:	00014ed1 	.word	0x00014ed1
   15050:	00014ed1 	.word	0x00014ed1
   15054:	0001515b 	.word	0x0001515b
   15058:	00015163 	.word	0x00015163
   1505c:	0001516d 	.word	0x0001516d
   15060:	00015177 	.word	0x00015177
   15064:	00015181 	.word	0x00015181
		errno = EPERM;
   15068:	f00f fe52 	bl	24d10 <__errno>
   1506c:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   1506e:	6003      	str	r3, [r0, #0]
}
   15070:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   15072:	f00f fe4d 	bl	24d10 <__errno>
   15076:	2302      	movs	r3, #2
   15078:	e7f9      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EIO;
   1507a:	f00f fe49 	bl	24d10 <__errno>
   1507e:	2305      	movs	r3, #5
   15080:	e7f5      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = ENOEXEC;
   15082:	f00f fe45 	bl	24d10 <__errno>
   15086:	2308      	movs	r3, #8
   15088:	e7f1      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EBADF;
   1508a:	f00f fe41 	bl	24d10 <__errno>
   1508e:	2309      	movs	r3, #9
   15090:	e7ed      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = ENOMEM;
   15092:	f00f fe3d 	bl	24d10 <__errno>
   15096:	230c      	movs	r3, #12
   15098:	e7e9      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EACCES;
   1509a:	f00f fe39 	bl	24d10 <__errno>
   1509e:	230d      	movs	r3, #13
   150a0:	e7e5      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EFAULT;
   150a2:	f00f fe35 	bl	24d10 <__errno>
   150a6:	230e      	movs	r3, #14
   150a8:	e7e1      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EINVAL;
   150aa:	f00f fe31 	bl	24d10 <__errno>
   150ae:	2316      	movs	r3, #22
   150b0:	e7dd      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EMFILE;
   150b2:	f00f fe2d 	bl	24d10 <__errno>
   150b6:	2318      	movs	r3, #24
   150b8:	e7d9      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EAGAIN;
   150ba:	f00f fe29 	bl	24d10 <__errno>
   150be:	230b      	movs	r3, #11
   150c0:	e7d5      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EDOM;
   150c2:	f00f fe25 	bl	24d10 <__errno>
   150c6:	2321      	movs	r3, #33	; 0x21
   150c8:	e7d1      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EPROTOTYPE;
   150ca:	f00f fe21 	bl	24d10 <__errno>
   150ce:	236b      	movs	r3, #107	; 0x6b
   150d0:	e7cd      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = ENOPROTOOPT;
   150d2:	f00f fe1d 	bl	24d10 <__errno>
   150d6:	236d      	movs	r3, #109	; 0x6d
   150d8:	e7c9      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EPROTONOSUPPORT;
   150da:	f00f fe19 	bl	24d10 <__errno>
   150de:	237b      	movs	r3, #123	; 0x7b
   150e0:	e7c5      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = ESOCKTNOSUPPORT;
   150e2:	f00f fe15 	bl	24d10 <__errno>
   150e6:	237c      	movs	r3, #124	; 0x7c
   150e8:	e7c1      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EOPNOTSUPP;
   150ea:	f00f fe11 	bl	24d10 <__errno>
   150ee:	235f      	movs	r3, #95	; 0x5f
   150f0:	e7bd      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EAFNOSUPPORT;
   150f2:	f00f fe0d 	bl	24d10 <__errno>
   150f6:	236a      	movs	r3, #106	; 0x6a
   150f8:	e7b9      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EADDRINUSE;
   150fa:	f00f fe09 	bl	24d10 <__errno>
   150fe:	2370      	movs	r3, #112	; 0x70
   15100:	e7b5      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = ENETDOWN;
   15102:	f00f fe05 	bl	24d10 <__errno>
   15106:	2373      	movs	r3, #115	; 0x73
   15108:	e7b1      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = ENETUNREACH;
   1510a:	f00f fe01 	bl	24d10 <__errno>
   1510e:	2372      	movs	r3, #114	; 0x72
   15110:	e7ad      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = ENETRESET;
   15112:	f00f fdfd 	bl	24d10 <__errno>
   15116:	237e      	movs	r3, #126	; 0x7e
   15118:	e7a9      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = ECONNRESET;
   1511a:	f00f fdf9 	bl	24d10 <__errno>
   1511e:	2368      	movs	r3, #104	; 0x68
   15120:	e7a5      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EISCONN;
   15122:	f00f fdf5 	bl	24d10 <__errno>
   15126:	237f      	movs	r3, #127	; 0x7f
   15128:	e7a1      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = ENOTCONN;
   1512a:	f00f fdf1 	bl	24d10 <__errno>
   1512e:	2380      	movs	r3, #128	; 0x80
   15130:	e79d      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = ETIMEDOUT;
   15132:	f00f fded 	bl	24d10 <__errno>
   15136:	2374      	movs	r3, #116	; 0x74
   15138:	e799      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = ENOBUFS;
   1513a:	f00f fde9 	bl	24d10 <__errno>
   1513e:	2369      	movs	r3, #105	; 0x69
   15140:	e795      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EHOSTDOWN;
   15142:	f00f fde5 	bl	24d10 <__errno>
   15146:	2375      	movs	r3, #117	; 0x75
   15148:	e791      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EINPROGRESS;
   1514a:	f00f fde1 	bl	24d10 <__errno>
   1514e:	2377      	movs	r3, #119	; 0x77
   15150:	e78d      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EALREADY;
   15152:	f00f fddd 	bl	24d10 <__errno>
   15156:	2378      	movs	r3, #120	; 0x78
   15158:	e789      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = ECANCELED;
   1515a:	f00f fdd9 	bl	24d10 <__errno>
   1515e:	238c      	movs	r3, #140	; 0x8c
   15160:	e785      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = ENOKEY;
   15162:	f00f fdd5 	bl	24d10 <__errno>
   15166:	f240 73d1 	movw	r3, #2001	; 0x7d1
   1516a:	e780      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EKEYEXPIRED;
   1516c:	f00f fdd0 	bl	24d10 <__errno>
   15170:	f240 73d2 	movw	r3, #2002	; 0x7d2
   15174:	e77b      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EKEYREVOKED;
   15176:	f00f fdcb 	bl	24d10 <__errno>
   1517a:	f240 73d3 	movw	r3, #2003	; 0x7d3
   1517e:	e776      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EKEYREJECTED;
   15180:	f00f fdc6 	bl	24d10 <__errno>
   15184:	f240 73d4 	movw	r3, #2004	; 0x7d4
   15188:	e771      	b.n	1506e <bsd_os_errno_set+0x1aa>
		errno = EMSGSIZE;
   1518a:	f00f fdc1 	bl	24d10 <__errno>
   1518e:	237a      	movs	r3, #122	; 0x7a
   15190:	e76d      	b.n	1506e <bsd_os_errno_set+0x1aa>
   15192:	bf00      	nop
   15194:	0002a2c4 	.word	0x0002a2c4
   15198:	0002a2e4 	.word	0x0002a2e4
   1519c:	0002be0c 	.word	0x0002be0c
   151a0:	baadbaad 	.word	0xbaadbaad

000151a4 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   151a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   151a8:	4b01      	ldr	r3, [pc, #4]	; (151b0 <bsd_os_application_irq_set+0xc>)
   151aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   151ae:	4770      	bx	lr
   151b0:	e000e100 	.word	0xe000e100

000151b4 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   151b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   151b8:	4b01      	ldr	r3, [pc, #4]	; (151c0 <bsd_os_application_irq_clear+0xc>)
   151ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   151be:	4770      	bx	lr
   151c0:	e000e100 	.word	0xe000e100

000151c4 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   151c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   151c8:	4b01      	ldr	r3, [pc, #4]	; (151d0 <bsd_os_trace_irq_set+0xc>)
   151ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   151ce:	4770      	bx	lr
   151d0:	e000e100 	.word	0xe000e100

000151d4 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   151d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   151d8:	4b01      	ldr	r3, [pc, #4]	; (151e0 <bsd_os_trace_irq_clear+0xc>)
   151da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   151de:	4770      	bx	lr
   151e0:	e000e100 	.word	0xe000e100

000151e4 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   151e4:	b508      	push	{r3, lr}
	list->head = NULL;
   151e6:	2300      	movs	r3, #0
   151e8:	4a07      	ldr	r2, [pc, #28]	; (15208 <bsd_os_init+0x24>)
	list->tail = NULL;
   151ea:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   151ee:	4a07      	ldr	r2, [pc, #28]	; (1520c <bsd_os_init+0x28>)
   151f0:	e8d2 1fef 	ldaex	r1, [r2]
   151f4:	e8c2 3fe0 	stlex	r0, r3, [r2]
   151f8:	2800      	cmp	r0, #0
   151fa:	d1f9      	bne.n	151f0 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   151fc:	f012 ffc3 	bl	28186 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   15200:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   15204:	f012 bfb4 	b.w	28170 <trace_task_create>
   15208:	20022eb4 	.word	0x20022eb4
   1520c:	20022eb0 	.word	0x20022eb0

00015210 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   15210:	f240 2302 	movw	r3, #514	; 0x202
   15214:	4298      	cmp	r0, r3
   15216:	d05c      	beq.n	152d2 <z_to_nrf_optname+0xc2>
   15218:	dc07      	bgt.n	1522a <z_to_nrf_optname+0x1a>
   1521a:	2801      	cmp	r0, #1
   1521c:	d043      	beq.n	152a6 <z_to_nrf_optname+0x96>
   1521e:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   15222:	d035      	beq.n	15290 <z_to_nrf_optname+0x80>
   15224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		retval = -1;
		break;
	}

	return retval;
}
   15228:	4770      	bx	lr
	switch (z_in_level) {
   1522a:	f240 2303 	movw	r3, #515	; 0x203
   1522e:	4298      	cmp	r0, r3
   15230:	d1f8      	bne.n	15224 <z_to_nrf_optname+0x14>
		switch (z_in_optname) {
   15232:	3901      	subs	r1, #1
   15234:	2913      	cmp	r1, #19
   15236:	d8f5      	bhi.n	15224 <z_to_nrf_optname+0x14>
   15238:	a301      	add	r3, pc, #4	; (adr r3, 15240 <z_to_nrf_optname+0x30>)
   1523a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1523e:	bf00      	nop
   15240:	000152df 	.word	0x000152df
   15244:	000152c3 	.word	0x000152c3
   15248:	000152a3 	.word	0x000152a3
   1524c:	000152b3 	.word	0x000152b3
   15250:	000152c7 	.word	0x000152c7
   15254:	000152cb 	.word	0x000152cb
   15258:	000152cf 	.word	0x000152cf
   1525c:	00015225 	.word	0x00015225
   15260:	00015225 	.word	0x00015225
   15264:	00015225 	.word	0x00015225
   15268:	00015225 	.word	0x00015225
   1526c:	00015225 	.word	0x00015225
   15270:	00015225 	.word	0x00015225
   15274:	00015225 	.word	0x00015225
   15278:	00015225 	.word	0x00015225
   1527c:	00015225 	.word	0x00015225
   15280:	00015225 	.word	0x00015225
   15284:	00015225 	.word	0x00015225
   15288:	00015225 	.word	0x00015225
   1528c:	000152b9 	.word	0x000152b9
		switch (z_in_optname) {
   15290:	3901      	subs	r1, #1
   15292:	2906      	cmp	r1, #6
   15294:	d8c6      	bhi.n	15224 <z_to_nrf_optname+0x14>
   15296:	e8df f001 	tbb	[pc, r1]
   1529a:	1614      	.short	0x1614
   1529c:	220c1a18 	.word	0x220c1a18
   152a0:	04          	.byte	0x04
   152a1:	00          	.byte	0x00
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   152a2:	2303      	movs	r3, #3
   152a4:	e006      	b.n	152b4 <z_to_nrf_optname+0xa4>
		switch (z_in_optname) {
   152a6:	2914      	cmp	r1, #20
   152a8:	d006      	beq.n	152b8 <z_to_nrf_optname+0xa8>
   152aa:	2919      	cmp	r1, #25
   152ac:	d006      	beq.n	152bc <z_to_nrf_optname+0xac>
   152ae:	2904      	cmp	r1, #4
   152b0:	d1b8      	bne.n	15224 <z_to_nrf_optname+0x14>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   152b2:	2304      	movs	r3, #4
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   152b4:	6013      	str	r3, [r2, #0]
   152b6:	e002      	b.n	152be <z_to_nrf_optname+0xae>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   152b8:	2314      	movs	r3, #20
   152ba:	e7fb      	b.n	152b4 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   152bc:	6011      	str	r1, [r2, #0]
	int retval = 0;
   152be:	2000      	movs	r0, #0
			break;
   152c0:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   152c2:	2302      	movs	r3, #2
   152c4:	e7f6      	b.n	152b4 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   152c6:	2305      	movs	r3, #5
   152c8:	e7f4      	b.n	152b4 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   152ca:	2306      	movs	r3, #6
   152cc:	e7f2      	b.n	152b4 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   152ce:	2307      	movs	r3, #7
   152d0:	e7f0      	b.n	152b4 <z_to_nrf_optname+0xa4>
		switch (z_in_optname) {
   152d2:	2902      	cmp	r1, #2
   152d4:	d0f5      	beq.n	152c2 <z_to_nrf_optname+0xb2>
   152d6:	2903      	cmp	r1, #3
   152d8:	d0e3      	beq.n	152a2 <z_to_nrf_optname+0x92>
   152da:	2901      	cmp	r1, #1
   152dc:	d1a2      	bne.n	15224 <z_to_nrf_optname+0x14>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   152de:	2301      	movs	r3, #1
   152e0:	e7e8      	b.n	152b4 <z_to_nrf_optname+0xa4>
   152e2:	bf00      	nop

000152e4 <nrf91_socket_offload_ioctl>:
	return retval;
}

static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
   152e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152e8:	f5a1 7380 	sub.w	r3, r1, #256	; 0x100
   152ec:	b091      	sub	sp, #68	; 0x44
	int sd = OBJ_TO_SD(obj);
   152ee:	3801      	subs	r0, #1

	switch (request) {
   152f0:	2b05      	cmp	r3, #5
   152f2:	d879      	bhi.n	153e8 <nrf91_socket_offload_ioctl+0x104>
   152f4:	e8df f003 	tbb	[pc, r3]
   152f8:	94787809 	.word	0x94787809
   152fc:	0d03      	.short	0x0d03
	int sd = OBJ_TO_SD(obj);
   152fe:	f06f 045e 	mvn.w	r4, #94	; 0x5e
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   15302:	4620      	mov	r0, r4
   15304:	b011      	add	sp, #68	; 0x44
   15306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return nrf_close(sd);
   1530a:	f008 fc41 	bl	1db90 <nrf_close>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1530e:	4604      	mov	r4, r0
		break;
   15310:	e7f7      	b.n	15302 <nrf91_socket_offload_ioctl+0x1e>
	for (int i = 0; i < nfds; i++) {
   15312:	f04f 0800 	mov.w	r8, #0
		nfds = va_arg(args, int);
   15316:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   1531a:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   1531c:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   15320:	4668      	mov	r0, sp
   15322:	2240      	movs	r2, #64	; 0x40
   15324:	f014 f8df 	bl	294e6 <memset>
	for (int i = 0; i < nfds; i++) {
   15328:	466e      	mov	r6, sp
   1532a:	4655      	mov	r5, sl
   1532c:	4657      	mov	r7, sl
	int retval = 0;
   1532e:	4644      	mov	r4, r8
		tmp[i].events = 0;
   15330:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   15332:	493d      	ldr	r1, [pc, #244]	; (15428 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   15334:	45c1      	cmp	r9, r8
   15336:	dc32      	bgt.n	1539e <nrf91_socket_offload_ioctl+0xba>
	if (retval > 0) {
   15338:	2c00      	cmp	r4, #0
   1533a:	dce2      	bgt.n	15302 <nrf91_socket_offload_ioctl+0x1e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1533c:	465a      	mov	r2, fp
   1533e:	4649      	mov	r1, r9
   15340:	4668      	mov	r0, sp
   15342:	f008 fd0b 	bl	1dd5c <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   15346:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   15348:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   1534a:	4599      	cmp	r9, r3
   1534c:	ddd9      	ble.n	15302 <nrf91_socket_offload_ioctl+0x1e>
		if (fds[i].fd < 0) {
   1534e:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   15352:	2a00      	cmp	r2, #0
   15354:	db20      	blt.n	15398 <nrf91_socket_offload_ioctl+0xb4>
		if (tmp[i].revents & NRF_POLLIN) {
   15356:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   1535a:	88d2      	ldrh	r2, [r2, #6]
   1535c:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   1535e:	bf42      	ittt	mi
   15360:	88e9      	ldrhmi	r1, [r5, #6]
   15362:	f041 0101 	orrmi.w	r1, r1, #1
   15366:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   15368:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   1536a:	bf42      	ittt	mi
   1536c:	88e9      	ldrhmi	r1, [r5, #6]
   1536e:	f041 0104 	orrmi.w	r1, r1, #4
   15372:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   15374:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   15376:	bf42      	ittt	mi
   15378:	88e9      	ldrhmi	r1, [r5, #6]
   1537a:	f041 0108 	orrmi.w	r1, r1, #8
   1537e:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   15380:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   15382:	bf42      	ittt	mi
   15384:	88e9      	ldrhmi	r1, [r5, #6]
   15386:	f041 0120 	orrmi.w	r1, r1, #32
   1538a:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   1538c:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   1538e:	bf42      	ittt	mi
   15390:	88ea      	ldrhmi	r2, [r5, #6]
   15392:	f042 0210 	orrmi.w	r2, r2, #16
   15396:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   15398:	3301      	adds	r3, #1
   1539a:	3508      	adds	r5, #8
   1539c:	e7d5      	b.n	1534a <nrf91_socket_offload_ioctl+0x66>
		if (fds[i].fd < 0) {
   1539e:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   153a0:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   153a2:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   153a4:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   153a6:	da05      	bge.n	153b4 <nrf91_socket_offload_ioctl+0xd0>
			tmp[i].fd = fds[i].fd;
   153a8:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   153aa:	f108 0801 	add.w	r8, r8, #1
   153ae:	3608      	adds	r6, #8
   153b0:	3708      	adds	r7, #8
   153b2:	e7bf      	b.n	15334 <nrf91_socket_offload_ioctl+0x50>
			obj = z_get_fd_obj(fds[i].fd,
   153b4:	2286      	movs	r2, #134	; 0x86
   153b6:	f7fa fa6d 	bl	f894 <z_get_fd_obj>
			if (obj != NULL) {
   153ba:	2300      	movs	r3, #0
   153bc:	491a      	ldr	r1, [pc, #104]	; (15428 <nrf91_socket_offload_ioctl+0x144>)
   153be:	b178      	cbz	r0, 153e0 <nrf91_socket_offload_ioctl+0xfc>
				tmp[i].fd = OBJ_TO_SD(obj);
   153c0:	3801      	subs	r0, #1
   153c2:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   153c4:	88b8      	ldrh	r0, [r7, #4]
   153c6:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   153c8:	bf42      	ittt	mi
   153ca:	88b2      	ldrhmi	r2, [r6, #4]
   153cc:	f042 0201 	orrmi.w	r2, r2, #1
   153d0:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   153d2:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   153d4:	bf42      	ittt	mi
   153d6:	88b2      	ldrhmi	r2, [r6, #4]
   153d8:	f042 0202 	orrmi.w	r2, r2, #2
   153dc:	80b2      	strhmi	r2, [r6, #4]
   153de:	e7e4      	b.n	153aa <nrf91_socket_offload_ioctl+0xc6>
				fds[i].revents = POLLNVAL;
   153e0:	2220      	movs	r2, #32
				retval++;
   153e2:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   153e4:	80fa      	strh	r2, [r7, #6]
				retval++;
   153e6:	e7ed      	b.n	153c4 <nrf91_socket_offload_ioctl+0xe0>
	switch (cmd) {
   153e8:	2903      	cmp	r1, #3
   153ea:	d00a      	beq.n	15402 <nrf91_socket_offload_ioctl+0x11e>
   153ec:	2904      	cmp	r1, #4
   153ee:	d110      	bne.n	15412 <nrf91_socket_offload_ioctl+0x12e>
		flags = va_arg(args, int);
   153f0:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   153f2:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   153f6:	d10c      	bne.n	15412 <nrf91_socket_offload_ioctl+0x12e>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   153f8:	2101      	movs	r1, #1
   153fa:	1392      	asrs	r2, r2, #14
   153fc:	f008 fcb0 	bl	1dd60 <nrf_fcntl>
   15400:	e785      	b.n	1530e <nrf91_socket_offload_ioctl+0x2a>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   15402:	2200      	movs	r2, #0
   15404:	2102      	movs	r1, #2
   15406:	f008 fcab 	bl	1dd60 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1540a:	0380      	lsls	r0, r0, #14
   1540c:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   15410:	e777      	b.n	15302 <nrf91_socket_offload_ioctl+0x1e>
	errno = EINVAL;
   15412:	f00f fc7d 	bl	24d10 <__errno>
   15416:	2316      	movs	r3, #22
	return retval;
   15418:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = EINVAL;
   1541c:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   1541e:	e770      	b.n	15302 <nrf91_socket_offload_ioctl+0x1e>
		return -EXDEV;
   15420:	f06f 0411 	mvn.w	r4, #17
   15424:	e76d      	b.n	15302 <nrf91_socket_offload_ioctl+0x1e>
   15426:	bf00      	nop
   15428:	0002a6e8 	.word	0x0002a6e8

0001542c <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   1542c:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   1542e:	4b03      	ldr	r3, [pc, #12]	; (1543c <nrf91_socket_iface_init+0x10>)
   15430:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   15432:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   15434:	4802      	ldr	r0, [pc, #8]	; (15440 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   15436:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   15438:	f7fb b99a 	b.w	10770 <socket_offload_dns_register>
   1543c:	20022f0c 	.word	0x20022f0c
   15440:	0002a6e0 	.word	0x0002a6e0

00015444 <nrf91_socket_offload_accept>:
{
   15444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15448:	b08a      	sub	sp, #40	; 0x28
   1544a:	4607      	mov	r7, r0
   1544c:	460c      	mov	r4, r1
   1544e:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   15450:	f7fa fa4e 	bl	f8f0 <z_reserve_fd>
   15454:	4606      	mov	r6, r0
	if (fd < 0) {
   15456:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   15458:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
	if (fd < 0) {
   1545c:	da05      	bge.n	1546a <nrf91_socket_offload_accept+0x26>
	return -1;
   1545e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
   15462:	4630      	mov	r0, r6
   15464:	b00a      	add	sp, #40	; 0x28
   15466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   1546a:	b31c      	cbz	r4, 154b4 <nrf91_socket_offload_accept+0x70>
   1546c:	b32d      	cbz	r5, 154ba <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1546e:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   15470:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   15472:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   15474:	bf0c      	ite	eq
   15476:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   15478:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1547a:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1547c:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1547e:	4639      	mov	r1, r7
   15480:	f008 fc08 	bl	1dc94 <nrf_accept>
	if (new_sd < 0) {
   15484:	f1b0 0800 	subs.w	r8, r0, #0
   15488:	dbe9      	blt.n	1545e <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   1548a:	b164      	cbz	r4, 154a6 <nrf91_socket_offload_accept+0x62>
   1548c:	b15d      	cbz	r5, 154a6 <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1548e:	687b      	ldr	r3, [r7, #4]
   15490:	2b02      	cmp	r3, #2
   15492:	d115      	bne.n	154c0 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   15494:	2308      	movs	r3, #8
   15496:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   15498:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1549c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1549e:	2301      	movs	r3, #1
   154a0:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   154a2:	9b04      	ldr	r3, [sp, #16]
   154a4:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   154a6:	4630      	mov	r0, r6
   154a8:	4a0c      	ldr	r2, [pc, #48]	; (154dc <nrf91_socket_offload_accept+0x98>)
   154aa:	f108 0101 	add.w	r1, r8, #1
   154ae:	f7fa fa43 	bl	f938 <z_finalize_fd>
	return fd;
   154b2:	e7d6      	b.n	15462 <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   154b4:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   154b6:	4627      	mov	r7, r4
   154b8:	e7e1      	b.n	1547e <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   154ba:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   154bc:	462f      	mov	r7, r5
   154be:	e7de      	b.n	1547e <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   154c0:	2b0a      	cmp	r3, #10
   154c2:	d106      	bne.n	154d2 <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   154c4:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   154c6:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   154c8:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   154ca:	a901      	add	r1, sp, #4
   154cc:	f012 ff4f 	bl	2836e <nrf_to_z_ipv6>
   154d0:	e7e9      	b.n	154a6 <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   154d2:	4630      	mov	r0, r6
   154d4:	f7fa fa3a 	bl	f94c <z_free_fd>
   154d8:	e7c1      	b.n	1545e <nrf91_socket_offload_accept+0x1a>
   154da:	bf00      	nop
   154dc:	0002a6e8 	.word	0x0002a6e8

000154e0 <nrf91_socket_offload_sendmsg>:
{
   154e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   154e4:	4607      	mov	r7, r0
   154e6:	4690      	mov	r8, r2
	if (msg == NULL) {
   154e8:	460c      	mov	r4, r1
   154ea:	b319      	cbz	r1, 15534 <nrf91_socket_offload_sendmsg+0x54>
	for (i = 0; i < msg->msg_iovlen; i++) {
   154ec:	2300      	movs	r3, #0
	ssize_t len = 0;
   154ee:	461a      	mov	r2, r3
   154f0:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   154f2:	4283      	cmp	r3, r0
   154f4:	d128      	bne.n	15548 <nrf91_socket_offload_sendmsg+0x68>
	if (len <= sizeof(buf)) {
   154f6:	2a80      	cmp	r2, #128	; 0x80
   154f8:	d857      	bhi.n	155aa <nrf91_socket_offload_sendmsg+0xca>
		for (i = 0; i < msg->msg_iovlen; i++) {
   154fa:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   154fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15504:	482a      	ldr	r0, [pc, #168]	; (155b0 <nrf91_socket_offload_sendmsg+0xd0>)
   15506:	f00a fcd5 	bl	1feb4 <z_impl_k_mutex_lock>
		len = 0;
   1550a:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1550c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 155b4 <nrf91_socket_offload_sendmsg+0xd4>
		for (i = 0; i < msg->msg_iovlen; i++) {
   15510:	68e3      	ldr	r3, [r4, #12]
   15512:	42ab      	cmp	r3, r5
   15514:	d81f      	bhi.n	15556 <nrf91_socket_offload_sendmsg+0x76>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   15516:	6863      	ldr	r3, [r4, #4]
   15518:	4632      	mov	r2, r6
   1551a:	9301      	str	r3, [sp, #4]
   1551c:	6823      	ldr	r3, [r4, #0]
   1551e:	4638      	mov	r0, r7
   15520:	9300      	str	r3, [sp, #0]
   15522:	4924      	ldr	r1, [pc, #144]	; (155b4 <nrf91_socket_offload_sendmsg+0xd4>)
   15524:	4643      	mov	r3, r8
   15526:	f013 f873 	bl	28610 <nrf91_socket_offload_sendto>
   1552a:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   1552c:	4820      	ldr	r0, [pc, #128]	; (155b0 <nrf91_socket_offload_sendmsg+0xd0>)
   1552e:	f00a fd39 	bl	1ffa4 <z_impl_k_mutex_unlock>
		return ret;
   15532:	e005      	b.n	15540 <nrf91_socket_offload_sendmsg+0x60>
		errno = EINVAL;
   15534:	f00f fbec 	bl	24d10 <__errno>
   15538:	2316      	movs	r3, #22
		return -1;
   1553a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		errno = EINVAL;
   1553e:	6003      	str	r3, [r0, #0]
}
   15540:	4628      	mov	r0, r5
   15542:	b002      	add	sp, #8
   15544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   15548:	68a1      	ldr	r1, [r4, #8]
   1554a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1554e:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   15550:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   15552:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   15554:	e7cd      	b.n	154f2 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   15556:	68a1      	ldr	r1, [r4, #8]
   15558:	eb09 0006 	add.w	r0, r9, r6
   1555c:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   15560:	685a      	ldr	r2, [r3, #4]
   15562:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   15566:	f013 ff84 	bl	29472 <memcpy>
			len += msg->msg_iov[i].iov_len;
   1556a:	68a3      	ldr	r3, [r4, #8]
   1556c:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   15570:	4453      	add	r3, sl
   15572:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   15574:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   15576:	441e      	add	r6, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   15578:	e7ca      	b.n	15510 <nrf91_socket_offload_sendmsg+0x30>
		if (msg->msg_iov[i].iov_len == 0) {
   1557a:	68a1      	ldr	r1, [r4, #8]
   1557c:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
   15580:	685a      	ldr	r2, [r3, #4]
   15582:	b162      	cbz	r2, 1559e <nrf91_socket_offload_sendmsg+0xbe>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   15584:	6863      	ldr	r3, [r4, #4]
   15586:	4638      	mov	r0, r7
   15588:	9301      	str	r3, [sp, #4]
   1558a:	6823      	ldr	r3, [r4, #0]
   1558c:	9300      	str	r3, [sp, #0]
   1558e:	f851 1036 	ldr.w	r1, [r1, r6, lsl #3]
   15592:	4643      	mov	r3, r8
   15594:	f013 f83c 	bl	28610 <nrf91_socket_offload_sendto>
		if (ret < 0) {
   15598:	1e05      	subs	r5, r0, #0
   1559a:	dbd1      	blt.n	15540 <nrf91_socket_offload_sendmsg+0x60>
		len += ret;
   1559c:	44a9      	add	r9, r5
	for (i = 0; i < msg->msg_iovlen; i++) {
   1559e:	3601      	adds	r6, #1
   155a0:	68e3      	ldr	r3, [r4, #12]
   155a2:	42b3      	cmp	r3, r6
   155a4:	d8e9      	bhi.n	1557a <nrf91_socket_offload_sendmsg+0x9a>
   155a6:	464d      	mov	r5, r9
   155a8:	e7ca      	b.n	15540 <nrf91_socket_offload_sendmsg+0x60>
   155aa:	2600      	movs	r6, #0
	len = 0;
   155ac:	46b1      	mov	r9, r6
   155ae:	e7f7      	b.n	155a0 <nrf91_socket_offload_sendmsg+0xc0>
   155b0:	2002093c 	.word	0x2002093c
   155b4:	20029ee6 	.word	0x20029ee6

000155b8 <nrf91_socket_create>:
{
   155b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   155ba:	4606      	mov	r6, r0
   155bc:	460d      	mov	r5, r1
   155be:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   155c0:	f7fa f996 	bl	f8f0 <z_reserve_fd>
	if (fd < 0) {
   155c4:	1e04      	subs	r4, r0, #0
   155c6:	db0d      	blt.n	155e4 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   155c8:	b2b0      	uxth	r0, r6
   155ca:	f012 fdf3 	bl	281b4 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   155ce:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   155d2:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   155d4:	d109      	bne.n	155ea <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   155d6:	f00f fb9b 	bl	24d10 <__errno>
   155da:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   155dc:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   155de:	4620      	mov	r0, r4
   155e0:	f7fa f9b4 	bl	f94c <z_free_fd>
		return -1;
   155e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   155e8:	e01b      	b.n	15622 <nrf91_socket_create+0x6a>
	switch (socktype) {
   155ea:	2d03      	cmp	r5, #3
   155ec:	d003      	beq.n	155f6 <nrf91_socket_create+0x3e>
   155ee:	2d04      	cmp	r5, #4
   155f0:	bf08      	it	eq
   155f2:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   155f6:	4638      	mov	r0, r7
   155f8:	f012 fdf8 	bl	281ec <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   155fc:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   15600:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   15602:	d103      	bne.n	1560c <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   15604:	f00f fb84 	bl	24d10 <__errno>
   15608:	237b      	movs	r3, #123	; 0x7b
   1560a:	e7e7      	b.n	155dc <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   1560c:	4629      	mov	r1, r5
   1560e:	4630      	mov	r0, r6
   15610:	f008 faac 	bl	1db6c <nrf_socket>
	if (sd < 0) {
   15614:	1e01      	subs	r1, r0, #0
   15616:	dbe2      	blt.n	155de <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   15618:	4620      	mov	r0, r4
   1561a:	4a03      	ldr	r2, [pc, #12]	; (15628 <nrf91_socket_create+0x70>)
   1561c:	3101      	adds	r1, #1
   1561e:	f7fa f98b 	bl	f938 <z_finalize_fd>
}
   15622:	4620      	mov	r0, r4
   15624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15626:	bf00      	nop
   15628:	0002a6e8 	.word	0x0002a6e8

0001562c <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   1562c:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   1562e:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   15630:	b118      	cbz	r0, 1563a <callback_worker+0xe>
		data->callback(data->data);
   15632:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   15636:	300c      	adds	r0, #12
   15638:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   1563a:	4803      	ldr	r0, [pc, #12]	; (15648 <callback_worker+0x1c>)
   1563c:	a901      	add	r1, sp, #4
   1563e:	f00a fb3d 	bl	1fcbc <k_mem_slab_free>
}
   15642:	b003      	add	sp, #12
   15644:	f85d fb04 	ldr.w	pc, [sp], #4
   15648:	2002089c 	.word	0x2002089c

0001564c <open_socket>:
{
   1564c:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   1564e:	f240 2201 	movw	r2, #513	; 0x201
   15652:	2102      	movs	r1, #2
   15654:	2066      	movs	r0, #102	; 0x66
   15656:	f7fa feb9 	bl	103cc <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   1565a:	4b05      	ldr	r3, [pc, #20]	; (15670 <open_socket+0x24>)
   1565c:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   1565e:	3001      	adds	r0, #1
   15660:	d104      	bne.n	1566c <open_socket+0x20>
		return -errno;
   15662:	f00f fb55 	bl	24d10 <__errno>
   15666:	6800      	ldr	r0, [r0, #0]
   15668:	4240      	negs	r0, r0
}
   1566a:	bd08      	pop	{r3, pc}
	return 0;
   1566c:	2000      	movs	r0, #0
   1566e:	e7fc      	b.n	1566a <open_socket+0x1e>
   15670:	20022f10 	.word	0x20022f10

00015674 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   15674:	b5f0      	push	{r4, r5, r6, r7, lr}
   15676:	b085      	sub	sp, #20
   15678:	4604      	mov	r4, r0
   1567a:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   1567c:	f7f7 fc5c 	bl	cf38 <strlen>
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   15680:	4b20      	ldr	r3, [pc, #128]	; (15704 <at_write+0x90>)
	int bytes_to_send = strlen(cmd);
   15682:	4607      	mov	r7, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   15684:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   15686:	2300      	movs	r3, #0
   15688:	463a      	mov	r2, r7
   1568a:	e9cd 3300 	strd	r3, r3, [sp]
   1568e:	4621      	mov	r1, r4
   15690:	f00f f841 	bl	24716 <z_impl_zsock_sendto>

	if (bytes_sent == -1) {
   15694:	1c43      	adds	r3, r0, #1
   15696:	4606      	mov	r6, r0
   15698:	d11c      	bne.n	156d4 <at_write+0x60>
   1569a:	4b1b      	ldr	r3, [pc, #108]	; (15708 <at_write+0x94>)
   1569c:	4c1b      	ldr	r4, [pc, #108]	; (1570c <at_write+0x98>)
   1569e:	1ae4      	subs	r4, r4, r3
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   156a0:	f00f fb36 	bl	24d10 <__errno>
   156a4:	08e4      	lsrs	r4, r4, #3
   156a6:	01a4      	lsls	r4, r4, #6
   156a8:	f044 0401 	orr.w	r4, r4, #1
   156ac:	6802      	ldr	r2, [r0, #0]
   156ae:	4918      	ldr	r1, [pc, #96]	; (15710 <at_write+0x9c>)
   156b0:	4620      	mov	r0, r4
   156b2:	f00e ff25 	bl	24500 <log_string_sync>
		ret.code  = -errno;
   156b6:	f00f fb2b 	bl	24d10 <__errno>
   156ba:	6803      	ldr	r3, [r0, #0]
   156bc:	425b      	negs	r3, r3
   156be:	9302      	str	r3, [sp, #8]
		ret.state = AT_CMD_ERROR;
   156c0:	2301      	movs	r3, #1
   156c2:	f88d 300c 	strb.w	r3, [sp, #12]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   156c6:	b115      	cbz	r5, 156ce <at_write+0x5a>
		*state = ret.state;
   156c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   156cc:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
   156ce:	9802      	ldr	r0, [sp, #8]
   156d0:	b005      	add	sp, #20
   156d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   156d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   156d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   156dc:	480d      	ldr	r0, [pc, #52]	; (15714 <at_write+0xa0>)
   156de:	a902      	add	r1, sp, #8
   156e0:	f00a fb8a 	bl	1fdf8 <z_impl_k_msgq_get>
		if (bytes_sent != bytes_to_send) {
   156e4:	42b7      	cmp	r7, r6
   156e6:	d0ee      	beq.n	156c6 <at_write+0x52>
   156e8:	4807      	ldr	r0, [pc, #28]	; (15708 <at_write+0x94>)
   156ea:	4c08      	ldr	r4, [pc, #32]	; (1570c <at_write+0x98>)
			LOG_ERR("Bytes sent (%d) was not the "
   156ec:	463b      	mov	r3, r7
   156ee:	1a24      	subs	r4, r4, r0
   156f0:	08e4      	lsrs	r4, r4, #3
   156f2:	01a4      	lsls	r4, r4, #6
   156f4:	4632      	mov	r2, r6
   156f6:	4908      	ldr	r1, [pc, #32]	; (15718 <at_write+0xa4>)
   156f8:	f044 0001 	orr.w	r0, r4, #1
   156fc:	f00e ff00 	bl	24500 <log_string_sync>
   15700:	e7e1      	b.n	156c6 <at_write+0x52>
   15702:	bf00      	nop
   15704:	20022f10 	.word	0x20022f10
   15708:	0002a2c4 	.word	0x0002a2c4
   1570c:	0002a2cc 	.word	0x0002a2cc
   15710:	0002be45 	.word	0x0002be45
   15714:	20020964 	.word	0x20020964
   15718:	0002be68 	.word	0x0002be68

0001571c <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   1571c:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   1571e:	4d16      	ldr	r5, [pc, #88]	; (15778 <at_cmd_driver_init+0x5c>)
{
   15720:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   15722:	782b      	ldrb	r3, [r5, #0]
   15724:	bb2b      	cbnz	r3, 15772 <at_cmd_driver_init+0x56>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   15726:	f7ff ff91 	bl	1564c <open_socket>
	if (err) {
   1572a:	4604      	mov	r4, r0
   1572c:	b168      	cbz	r0, 1574a <at_cmd_driver_init+0x2e>
   1572e:	4813      	ldr	r0, [pc, #76]	; (1577c <at_cmd_driver_init+0x60>)
   15730:	4b13      	ldr	r3, [pc, #76]	; (15780 <at_cmd_driver_init+0x64>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   15732:	4622      	mov	r2, r4
   15734:	1ac0      	subs	r0, r0, r3
   15736:	08c0      	lsrs	r0, r0, #3
   15738:	0180      	lsls	r0, r0, #6
   1573a:	4912      	ldr	r1, [pc, #72]	; (15784 <at_cmd_driver_init+0x68>)
   1573c:	f040 0001 	orr.w	r0, r0, #1
   15740:	f00e fede 	bl	24500 <log_string_sync>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   15744:	4620      	mov	r0, r4
   15746:	b009      	add	sp, #36	; 0x24
   15748:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1574a:	2200      	movs	r2, #0
   1574c:	2300      	movs	r3, #0
   1574e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   15752:	230a      	movs	r3, #10
   15754:	e9cd 0000 	strd	r0, r0, [sp]
   15758:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1575c:	9004      	str	r0, [sp, #16]
   1575e:	4b0a      	ldr	r3, [pc, #40]	; (15788 <at_cmd_driver_init+0x6c>)
   15760:	f44f 6280 	mov.w	r2, #1024	; 0x400
   15764:	4909      	ldr	r1, [pc, #36]	; (1578c <at_cmd_driver_init+0x70>)
   15766:	480a      	ldr	r0, [pc, #40]	; (15790 <at_cmd_driver_init+0x74>)
   15768:	f00b f866 	bl	20838 <z_impl_k_thread_create>
	initialized = true;
   1576c:	2301      	movs	r3, #1
   1576e:	702b      	strb	r3, [r5, #0]
	return 0;
   15770:	e7e8      	b.n	15744 <at_cmd_driver_init+0x28>
		return 0;
   15772:	2400      	movs	r4, #0
   15774:	e7e6      	b.n	15744 <at_cmd_driver_init+0x28>
   15776:	bf00      	nop
   15778:	20029f66 	.word	0x20029f66
   1577c:	0002a2cc 	.word	0x0002a2cc
   15780:	0002a2c4 	.word	0x0002a2c4
   15784:	0002be9a 	.word	0x0002be9a
   15788:	00015795 	.word	0x00015795
   1578c:	2002c398 	.word	0x2002c398
   15790:	20022f24 	.word	0x20022f24

00015794 <socket_thread_fn>:
{
   15794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bytes_read = recv(common_socket_fd, item->data,
   15798:	4f7d      	ldr	r7, [pc, #500]	; (15990 <socket_thread_fn+0x1fc>)
   1579a:	4e7e      	ldr	r6, [pc, #504]	; (15994 <socket_thread_fn+0x200>)
   1579c:	46b9      	mov	r9, r7
   1579e:	4b7e      	ldr	r3, [pc, #504]	; (15998 <socket_thread_fn+0x204>)
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   157a0:	f8df 823c 	ldr.w	r8, [pc, #572]	; 159e0 <socket_thread_fn+0x24c>
   157a4:	1af6      	subs	r6, r6, r3
{
   157a6:	b087      	sub	sp, #28
   157a8:	08f6      	lsrs	r6, r6, #3
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   157aa:	a903      	add	r1, sp, #12
   157ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   157b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   157b4:	4640      	mov	r0, r8
   157b6:	f00a fa4f 	bl	1fc58 <k_mem_slab_alloc>
		ret.code  = 0;
   157ba:	2300      	movs	r3, #0
		item->callback = NULL;
   157bc:	9903      	ldr	r1, [sp, #12]
		bytes_read = recv(common_socket_fd, item->data,
   157be:	6838      	ldr	r0, [r7, #0]
		ret.code  = 0;
   157c0:	9304      	str	r3, [sp, #16]
		ret.state = AT_CMD_OK;
   157c2:	f88d 3014 	strb.w	r3, [sp, #20]
		item->callback = NULL;
   157c6:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   157ca:	f640 228c 	movw	r2, #2700	; 0xa8c
   157ce:	e9cd 3300 	strd	r3, r3, [sp]
   157d2:	310c      	adds	r1, #12
   157d4:	f00f f965 	bl	24aa2 <z_impl_zsock_recvfrom>
		if (bytes_read < 0) {
   157d8:	1e02      	subs	r2, r0, #0
   157da:	da46      	bge.n	1586a <socket_thread_fn+0xd6>
			LOG_ERR("AT socket recv failed with err %d",
   157dc:	01b4      	lsls	r4, r6, #6
   157de:	f044 0001 	orr.w	r0, r4, #1
   157e2:	496e      	ldr	r1, [pc, #440]	; (1599c <socket_thread_fn+0x208>)
   157e4:	f00e fe8c 	bl	24500 <log_string_sync>
			if ((close(common_socket_fd) == 0) &&
   157e8:	6838      	ldr	r0, [r7, #0]
	return z_impl_zsock_close(sock);
   157ea:	f00e ff5a 	bl	246a2 <z_impl_zsock_close>
   157ee:	bb60      	cbnz	r0, 1584a <socket_thread_fn+0xb6>
			    (open_socket() == 0)) {
   157f0:	f7ff ff2c 	bl	1564c <open_socket>
			if ((close(common_socket_fd) == 0) &&
   157f4:	bb48      	cbnz	r0, 1584a <socket_thread_fn+0xb6>
				LOG_INF("AT socket recovered");
   157f6:	496a      	ldr	r1, [pc, #424]	; (159a0 <socket_thread_fn+0x20c>)
   157f8:	f044 0003 	orr.w	r0, r4, #3
   157fc:	f00e fe80 	bl	24500 <log_string_sync>
				ret.state = AT_CMD_ERROR;
   15800:	2301      	movs	r3, #1
   15802:	f88d 3014 	strb.w	r3, [sp, #20]
				ret.code  = -errno;
   15806:	f00f fa83 	bl	24d10 <__errno>
   1580a:	6803      	ldr	r3, [r0, #0]
   1580c:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   1580e:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   15810:	9903      	ldr	r1, [sp, #12]
   15812:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   15816:	2b00      	cmp	r3, #0
   15818:	f040 8090 	bne.w	1593c <socket_thread_fn+0x1a8>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   1581c:	4640      	mov	r0, r8
   1581e:	a903      	add	r1, sp, #12
   15820:	f00a fa4c 	bl	1fcbc <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   15824:	4b5f      	ldr	r3, [pc, #380]	; (159a4 <socket_thread_fn+0x210>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   15826:	689b      	ldr	r3, [r3, #8]
   15828:	2b00      	cmp	r3, #0
   1582a:	d1be      	bne.n	157aa <socket_thread_fn+0x16>
   1582c:	f89d 2014 	ldrb.w	r2, [sp, #20]
   15830:	2a04      	cmp	r2, #4
   15832:	d0ba      	beq.n	157aa <socket_thread_fn+0x16>
			current_cmd_handler = NULL;
   15834:	4a5c      	ldr	r2, [pc, #368]	; (159a8 <socket_thread_fn+0x214>)
   15836:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
   15838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1583c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15840:	a904      	add	r1, sp, #16
   15842:	485a      	ldr	r0, [pc, #360]	; (159ac <socket_thread_fn+0x218>)
   15844:	f00a fa84 	bl	1fd50 <z_impl_k_msgq_put>
	for (;;) {
   15848:	e7af      	b.n	157aa <socket_thread_fn+0x16>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   1584a:	f00f fa61 	bl	24d10 <__errno>
   1584e:	f044 0401 	orr.w	r4, r4, #1
   15852:	6802      	ldr	r2, [r0, #0]
   15854:	4956      	ldr	r1, [pc, #344]	; (159b0 <socket_thread_fn+0x21c>)
   15856:	4620      	mov	r0, r4
   15858:	f00e fe52 	bl	24500 <log_string_sync>
			close(common_socket_fd);
   1585c:	f8d9 0000 	ldr.w	r0, [r9]
   15860:	f00e ff1f 	bl	246a2 <z_impl_zsock_close>
}
   15864:	b007      	add	sp, #28
   15866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (item->data[bytes_read - 1] != '\0') {
   1586a:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1586e:	4452      	add	r2, sl
   15870:	f892 b00b 	ldrb.w	fp, [r2, #11]
   15874:	f1bb 0f00 	cmp.w	fp, #0
   15878:	d008      	beq.n	1588c <socket_thread_fn+0xf8>
			LOG_ERR("AT message too large for reception buffer or "
   1587a:	01b0      	lsls	r0, r6, #6
   1587c:	494d      	ldr	r1, [pc, #308]	; (159b4 <socket_thread_fn+0x220>)
   1587e:	f040 0001 	orr.w	r0, r0, #1
   15882:	f00e fe3d 	bl	24500 <log_string_sync>
			ret.code  = -ENOBUFS;
   15886:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1588a:	e7c0      	b.n	1580e <socket_thread_fn+0x7a>
	ret->state = AT_CMD_NOTIFICATION;
   1588c:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   1588e:	f10a 050c 	add.w	r5, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   15892:	4628      	mov	r0, r5
   15894:	4948      	ldr	r1, [pc, #288]	; (159b8 <socket_thread_fn+0x224>)
	ret->state = AT_CMD_NOTIFICATION;
   15896:	f88d 3014 	strb.w	r3, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   1589a:	f014 f813 	bl	298c4 <strstr>
		if (tmpstr) {
   1589e:	4604      	mov	r4, r0
   158a0:	b1e8      	cbz	r0, 158de <socket_thread_fn+0x14a>
			ret->state = AT_CMD_OK;
   158a2:	f88d b014 	strb.w	fp, [sp, #20]
			ret->code  = 0;
   158a6:	f8cd b010 	str.w	fp, [sp, #16]
		buf[new_len++] = '\0';
   158aa:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   158ac:	1b62      	subs	r2, r4, r5
		buf[new_len++] = '\0';
   158ae:	3201      	adds	r2, #1
   158b0:	7023      	strb	r3, [r4, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   158b2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   158b6:	2b04      	cmp	r3, #4
   158b8:	d056      	beq.n	15968 <socket_thread_fn+0x1d4>
			if ((response_buf_len > 0) &&
   158ba:	4d40      	ldr	r5, [pc, #256]	; (159bc <socket_thread_fn+0x228>)
   158bc:	682b      	ldr	r3, [r5, #0]
   158be:	2b00      	cmp	r3, #0
   158c0:	d05b      	beq.n	1597a <socket_thread_fn+0x1e6>
			    (response_buf != NULL)) {
   158c2:	4c3f      	ldr	r4, [pc, #252]	; (159c0 <socket_thread_fn+0x22c>)
   158c4:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   158c6:	2800      	cmp	r0, #0
   158c8:	d057      	beq.n	1597a <socket_thread_fn+0x1e6>
				if (response_buf_len >= payload_len) {
   158ca:	4293      	cmp	r3, r2
   158cc:	d32c      	bcc.n	15928 <socket_thread_fn+0x194>
   158ce:	9903      	ldr	r1, [sp, #12]
   158d0:	310c      	adds	r1, #12
   158d2:	f013 fdce 	bl	29472 <memcpy>
				response_buf_len = 0;
   158d6:	2300      	movs	r3, #0
   158d8:	602b      	str	r3, [r5, #0]
				response_buf     = NULL;
   158da:	6023      	str	r3, [r4, #0]
				goto next;
   158dc:	e798      	b.n	15810 <socket_thread_fn+0x7c>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   158de:	4628      	mov	r0, r5
   158e0:	4938      	ldr	r1, [pc, #224]	; (159c4 <socket_thread_fn+0x230>)
   158e2:	f013 ffef 	bl	298c4 <strstr>
		if (tmpstr) {
   158e6:	4604      	mov	r4, r0
   158e8:	b140      	cbz	r0, 158fc <socket_thread_fn+0x168>
			ret->state = AT_CMD_ERROR_CMS;
   158ea:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   158ec:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   158f0:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   158f4:	f013 fd9d 	bl	29432 <atoi>
   158f8:	9004      	str	r0, [sp, #16]
			break;
   158fa:	e7d6      	b.n	158aa <socket_thread_fn+0x116>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   158fc:	4628      	mov	r0, r5
   158fe:	4932      	ldr	r1, [pc, #200]	; (159c8 <socket_thread_fn+0x234>)
   15900:	f013 ffe0 	bl	298c4 <strstr>
		if (tmpstr) {
   15904:	4604      	mov	r4, r0
   15906:	b108      	cbz	r0, 1590c <socket_thread_fn+0x178>
			ret->state = AT_CMD_ERROR_CME;
   15908:	2303      	movs	r3, #3
   1590a:	e7ef      	b.n	158ec <socket_thread_fn+0x158>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   1590c:	4628      	mov	r0, r5
   1590e:	492f      	ldr	r1, [pc, #188]	; (159cc <socket_thread_fn+0x238>)
   15910:	f013 ffd8 	bl	298c4 <strstr>
		if (tmpstr) {
   15914:	4604      	mov	r4, r0
   15916:	2800      	cmp	r0, #0
   15918:	d034      	beq.n	15984 <socket_thread_fn+0x1f0>
			ret->state = AT_CMD_ERROR;
   1591a:	2301      	movs	r3, #1
   1591c:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   15920:	f06f 0307 	mvn.w	r3, #7
   15924:	9304      	str	r3, [sp, #16]
			break;
   15926:	e7c0      	b.n	158aa <socket_thread_fn+0x116>
					LOG_ERR("Response buffer not large "
   15928:	01b0      	lsls	r0, r6, #6
   1592a:	4929      	ldr	r1, [pc, #164]	; (159d0 <socket_thread_fn+0x23c>)
   1592c:	f040 0001 	orr.w	r0, r0, #1
   15930:	f00e fde6 	bl	24500 <log_string_sync>
					ret.code  = -EMSGSIZE;
   15934:	f06f 0379 	mvn.w	r3, #121	; 0x79
   15938:	9304      	str	r3, [sp, #16]
   1593a:	e7cc      	b.n	158d6 <socket_thread_fn+0x142>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1593c:	4b25      	ldr	r3, [pc, #148]	; (159d4 <socket_thread_fn+0x240>)
   1593e:	2200      	movs	r2, #0
   15940:	604b      	str	r3, [r1, #4]
   15942:	460b      	mov	r3, r1
   15944:	600a      	str	r2, [r1, #0]
   15946:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1594a:	e8d3 2fef 	ldaex	r2, [r3]
   1594e:	f042 0001 	orr.w	r0, r2, #1
   15952:	e8c3 0fe4 	stlex	r4, r0, [r3]
   15956:	2c00      	cmp	r4, #0
   15958:	d1f7      	bne.n	1594a <socket_thread_fn+0x1b6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1595a:	07d3      	lsls	r3, r2, #31
   1595c:	f53f af62 	bmi.w	15824 <socket_thread_fn+0x90>
		k_queue_append(&work_q->queue, work);
   15960:	481d      	ldr	r0, [pc, #116]	; (159d8 <socket_thread_fn+0x244>)
   15962:	f013 fa3f 	bl	28de4 <k_queue_append>
   15966:	e75d      	b.n	15824 <socket_thread_fn+0x90>
		if (payload_len == 0) {
   15968:	2a00      	cmp	r2, #0
   1596a:	f43f af51 	beq.w	15810 <socket_thread_fn+0x7c>
			item->callback = notification_handler;
   1596e:	4b1b      	ldr	r3, [pc, #108]	; (159dc <socket_thread_fn+0x248>)
			item->callback = current_cmd_handler;
   15970:	681a      	ldr	r2, [r3, #0]
   15972:	9b03      	ldr	r3, [sp, #12]
   15974:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   15978:	e74a      	b.n	15810 <socket_thread_fn+0x7c>
		if (payload_len == 0) {
   1597a:	2a00      	cmp	r2, #0
   1597c:	f43f af48 	beq.w	15810 <socket_thread_fn+0x7c>
			item->callback = current_cmd_handler;
   15980:	4b09      	ldr	r3, [pc, #36]	; (159a8 <socket_thread_fn+0x214>)
   15982:	e7f5      	b.n	15970 <socket_thread_fn+0x1dc>
		new_len = strlen(buf) + 1;
   15984:	4628      	mov	r0, r5
   15986:	f7f7 fad7 	bl	cf38 <strlen>
   1598a:	1c42      	adds	r2, r0, #1
   1598c:	e791      	b.n	158b2 <socket_thread_fn+0x11e>
   1598e:	bf00      	nop
   15990:	20022f10 	.word	0x20022f10
   15994:	0002a2cc 	.word	0x0002a2cc
   15998:	0002a2c4 	.word	0x0002a2c4
   1599c:	0002bebc 	.word	0x0002bebc
   159a0:	0002bede 	.word	0x0002bede
   159a4:	200208e4 	.word	0x200208e4
   159a8:	20022f14 	.word	0x20022f14
   159ac:	20020964 	.word	0x20020964
   159b0:	0002bef2 	.word	0x0002bef2
   159b4:	0002bf29 	.word	0x0002bf29
   159b8:	0002bf74 	.word	0x0002bf74
   159bc:	20022f20 	.word	0x20022f20
   159c0:	20022f1c 	.word	0x20022f1c
   159c4:	0002bf77 	.word	0x0002bf77
   159c8:	0002bf83 	.word	0x0002bf83
   159cc:	0002bf8f 	.word	0x0002bf8f
   159d0:	0002bf95 	.word	0x0002bf95
   159d4:	0001562d 	.word	0x0001562d
   159d8:	200280fc 	.word	0x200280fc
   159dc:	20022f18 	.word	0x20022f18
   159e0:	2002089c 	.word	0x2002089c

000159e4 <at_cmd_write>:
{
   159e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   159e6:	4604      	mov	r4, r0
   159e8:	460e      	mov	r6, r1
   159ea:	4615      	mov	r5, r2
   159ec:	9301      	str	r3, [sp, #4]
	return z_impl_k_sem_take(sem, timeout);
   159ee:	4f0b      	ldr	r7, [pc, #44]	; (15a1c <at_cmd_write+0x38>)
   159f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   159f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   159f8:	4638      	mov	r0, r7
   159fa:	f00a feb5 	bl	20768 <z_impl_k_sem_take>
	response_buf     = buf;
   159fe:	4b08      	ldr	r3, [pc, #32]	; (15a20 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   15a00:	4620      	mov	r0, r4
	response_buf     = buf;
   15a02:	601e      	str	r6, [r3, #0]
	response_buf_len = buf_len;
   15a04:	4b07      	ldr	r3, [pc, #28]	; (15a24 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   15a06:	9901      	ldr	r1, [sp, #4]
	response_buf_len = buf_len;
   15a08:	601d      	str	r5, [r3, #0]
	int return_code = at_write(cmd, state);
   15a0a:	f7ff fe33 	bl	15674 <at_write>
   15a0e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   15a10:	4638      	mov	r0, r7
   15a12:	f00a fe83 	bl	2071c <z_impl_k_sem_give>
}
   15a16:	4620      	mov	r0, r4
   15a18:	b003      	add	sp, #12
   15a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a1c:	200208e4 	.word	0x200208e4
   15a20:	20022f1c 	.word	0x20022f1c
   15a24:	20022f20 	.word	0x20022f20

00015a28 <at_cmd_set_notification_handler>:
{
   15a28:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   15a2a:	4c0e      	ldr	r4, [pc, #56]	; (15a64 <at_cmd_set_notification_handler+0x3c>)
{
   15a2c:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   15a2e:	6822      	ldr	r2, [r4, #0]
   15a30:	b15a      	cbz	r2, 15a4a <at_cmd_set_notification_handler+0x22>
   15a32:	4282      	cmp	r2, r0
   15a34:	d009      	beq.n	15a4a <at_cmd_set_notification_handler+0x22>
   15a36:	480c      	ldr	r0, [pc, #48]	; (15a68 <at_cmd_set_notification_handler+0x40>)
   15a38:	4b0c      	ldr	r3, [pc, #48]	; (15a6c <at_cmd_set_notification_handler+0x44>)
		LOG_WRN("Forgetting prior notification handler %p",
   15a3a:	490d      	ldr	r1, [pc, #52]	; (15a70 <at_cmd_set_notification_handler+0x48>)
   15a3c:	1a1b      	subs	r3, r3, r0
   15a3e:	08db      	lsrs	r3, r3, #3
   15a40:	019b      	lsls	r3, r3, #6
   15a42:	f043 0002 	orr.w	r0, r3, #2
   15a46:	f00e fd5b 	bl	24500 <log_string_sync>
	return z_impl_k_sem_take(sem, timeout);
   15a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15a52:	4808      	ldr	r0, [pc, #32]	; (15a74 <at_cmd_set_notification_handler+0x4c>)
   15a54:	f00a fe88 	bl	20768 <z_impl_k_sem_take>
	notification_handler = handler;
   15a58:	6025      	str	r5, [r4, #0]
	z_impl_k_sem_give(sem);
   15a5a:	4806      	ldr	r0, [pc, #24]	; (15a74 <at_cmd_set_notification_handler+0x4c>)
}
   15a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15a60:	f00a be5c 	b.w	2071c <z_impl_k_sem_give>
   15a64:	20022f18 	.word	0x20022f18
   15a68:	0002a2c4 	.word	0x0002a2c4
   15a6c:	0002a2cc 	.word	0x0002a2cc
   15a70:	0002bfb6 	.word	0x0002bfb6
   15a74:	200208e4 	.word	0x200208e4

00015a78 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   15a78:	4b0b      	ldr	r3, [pc, #44]	; (15aa8 <find_node+0x30>)
{
   15a7a:	b570      	push	{r4, r5, r6, lr}
   15a7c:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   15a7e:	6818      	ldr	r0, [r3, #0]
   15a80:	b150      	cbz	r0, 15a98 <find_node+0x20>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15a82:	2500      	movs	r5, #0
   15a84:	4603      	mov	r3, r0
   15a86:	6800      	ldr	r0, [r0, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   15a88:	685e      	ldr	r6, [r3, #4]
   15a8a:	428e      	cmp	r6, r1
   15a8c:	d105      	bne.n	15a9a <find_node+0x22>
   15a8e:	689e      	ldr	r6, [r3, #8]
   15a90:	4296      	cmp	r6, r2
   15a92:	d102      	bne.n	15a9a <find_node+0x22>
			*prev_out = prev;
			return curr;
   15a94:	4618      	mov	r0, r3
			*prev_out = prev;
   15a96:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   15a98:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   15a9a:	2800      	cmp	r0, #0
   15a9c:	d0fc      	beq.n	15a98 <find_node+0x20>
   15a9e:	461d      	mov	r5, r3
   15aa0:	4603      	mov	r3, r0
   15aa2:	6800      	ldr	r0, [r0, #0]
   15aa4:	e7f0      	b.n	15a88 <find_node+0x10>
   15aa6:	bf00      	nop
   15aa8:	20022fdc 	.word	0x20022fdc

00015aac <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   15aac:	4a0c      	ldr	r2, [pc, #48]	; (15ae0 <module_init+0x34>)
{
   15aae:	b508      	push	{r3, lr}
	if (initialized) {
   15ab0:	7813      	ldrb	r3, [r2, #0]
   15ab2:	b15b      	cbz	r3, 15acc <module_init+0x20>
   15ab4:	480b      	ldr	r0, [pc, #44]	; (15ae4 <module_init+0x38>)
   15ab6:	4b0c      	ldr	r3, [pc, #48]	; (15ae8 <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   15ab8:	490c      	ldr	r1, [pc, #48]	; (15aec <module_init+0x40>)
   15aba:	1ac0      	subs	r0, r0, r3
   15abc:	08c0      	lsrs	r0, r0, #3
   15abe:	0180      	lsls	r0, r0, #6
   15ac0:	f040 0002 	orr.w	r0, r0, #2
   15ac4:	f00e fd1c 	bl	24500 <log_string_sync>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   15ac8:	2000      	movs	r0, #0
   15aca:	bd08      	pop	{r3, pc}
	initialized = true;
   15acc:	2101      	movs	r1, #1
   15ace:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   15ad0:	4a07      	ldr	r2, [pc, #28]	; (15af0 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   15ad2:	4808      	ldr	r0, [pc, #32]	; (15af4 <module_init+0x48>)
	list->tail = NULL;
   15ad4:	e9c2 3300 	strd	r3, r3, [r2]
   15ad8:	f7ff ffa6 	bl	15a28 <at_cmd_set_notification_handler>
	return 0;
   15adc:	e7f4      	b.n	15ac8 <module_init+0x1c>
   15ade:	bf00      	nop
   15ae0:	20029f67 	.word	0x20029f67
   15ae4:	0002a2dc 	.word	0x0002a2dc
   15ae8:	0002a2c4 	.word	0x0002a2c4
   15aec:	0002bfe6 	.word	0x0002bfe6
   15af0:	20022fdc 	.word	0x20022fdc
   15af4:	00015b05 	.word	0x00015b05

00015af8 <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
   15af8:	4801      	ldr	r0, [pc, #4]	; (15b00 <k_mutex_unlock.constprop.0+0x8>)
   15afa:	f00a ba53 	b.w	1ffa4 <z_impl_k_mutex_unlock>
   15afe:	bf00      	nop
   15b00:	20020950 	.word	0x20020950

00015b04 <notif_dispatch>:
{
   15b04:	b538      	push	{r3, r4, r5, lr}
   15b06:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   15b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15b10:	4809      	ldr	r0, [pc, #36]	; (15b38 <notif_dispatch+0x34>)
   15b12:	f00a f9cf 	bl	1feb4 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   15b16:	4b09      	ldr	r3, [pc, #36]	; (15b3c <notif_dispatch+0x38>)
   15b18:	681b      	ldr	r3, [r3, #0]
   15b1a:	b91b      	cbnz	r3, 15b24 <notif_dispatch+0x20>
}
   15b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   15b20:	f7ff bfea 	b.w	15af8 <k_mutex_unlock.constprop.0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15b24:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   15b26:	4629      	mov	r1, r5
   15b28:	689a      	ldr	r2, [r3, #8]
   15b2a:	6858      	ldr	r0, [r3, #4]
   15b2c:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   15b2e:	2c00      	cmp	r4, #0
   15b30:	d0f4      	beq.n	15b1c <notif_dispatch+0x18>
   15b32:	4623      	mov	r3, r4
   15b34:	6824      	ldr	r4, [r4, #0]
   15b36:	e7f6      	b.n	15b26 <notif_dispatch+0x22>
   15b38:	20020950 	.word	0x20020950
   15b3c:	20022fdc 	.word	0x20022fdc

00015b40 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   15b40:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15b42:	4606      	mov	r6, r0
	if (handler == NULL) {
   15b44:	460d      	mov	r5, r1
   15b46:	b979      	cbnz	r1, 15b68 <at_notif_register_handler+0x28>
   15b48:	481d      	ldr	r0, [pc, #116]	; (15bc0 <at_notif_register_handler+0x80>)
   15b4a:	4c1e      	ldr	r4, [pc, #120]	; (15bc4 <at_notif_register_handler+0x84>)
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   15b4c:	460b      	mov	r3, r1
   15b4e:	1a24      	subs	r4, r4, r0
   15b50:	08e4      	lsrs	r4, r4, #3
   15b52:	01a4      	lsls	r4, r4, #6
   15b54:	f044 0001 	orr.w	r0, r4, #1
   15b58:	4632      	mov	r2, r6
   15b5a:	491b      	ldr	r1, [pc, #108]	; (15bc8 <at_notif_register_handler+0x88>)
   15b5c:	f00e fcd0 	bl	24500 <log_string_sync>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   15b60:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   15b64:	b002      	add	sp, #8
   15b66:	bd70      	pop	{r4, r5, r6, pc}
   15b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15b70:	4816      	ldr	r0, [pc, #88]	; (15bcc <at_notif_register_handler+0x8c>)
   15b72:	f00a f99f 	bl	1feb4 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   15b76:	462a      	mov	r2, r5
   15b78:	4631      	mov	r1, r6
   15b7a:	a801      	add	r0, sp, #4
   15b7c:	f7ff ff7c 	bl	15a78 <find_node>
   15b80:	4604      	mov	r4, r0
   15b82:	b118      	cbz	r0, 15b8c <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   15b84:	f7ff ffb8 	bl	15af8 <k_mutex_unlock.constprop.0>
		return 0;
   15b88:	2000      	movs	r0, #0
   15b8a:	e7eb      	b.n	15b64 <at_notif_register_handler+0x24>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   15b8c:	200c      	movs	r0, #12
   15b8e:	f00a f8bf 	bl	1fd10 <k_malloc>
   15b92:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   15b94:	b920      	cbnz	r0, 15ba0 <at_notif_register_handler+0x60>
		k_mutex_unlock(&list_mtx);
   15b96:	f7ff ffaf 	bl	15af8 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   15b9a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15b9e:	e7e1      	b.n	15b64 <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   15ba0:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   15ba2:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   15ba4:	4a0a      	ldr	r2, [pc, #40]	; (15bd0 <at_notif_register_handler+0x90>)
   15ba6:	6044      	str	r4, [r0, #4]
   15ba8:	6084      	str	r4, [r0, #8]
	parent->next = child;
   15baa:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   15bac:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   15bae:	e9c3 6501 	strd	r6, r5, [r3, #4]
   15bb2:	b911      	cbnz	r1, 15bba <at_notif_register_handler+0x7a>
	list->head = node;
   15bb4:	e9c2 3300 	strd	r3, r3, [r2]
}
   15bb8:	e7e4      	b.n	15b84 <at_notif_register_handler+0x44>
	parent->next = child;
   15bba:	600b      	str	r3, [r1, #0]
	list->tail = node;
   15bbc:	6053      	str	r3, [r2, #4]
}
   15bbe:	e7e1      	b.n	15b84 <at_notif_register_handler+0x44>
   15bc0:	0002a2c4 	.word	0x0002a2c4
   15bc4:	0002a2dc 	.word	0x0002a2dc
   15bc8:	0002c009 	.word	0x0002c009
   15bcc:	20020950 	.word	0x20020950
   15bd0:	20022fdc 	.word	0x20022fdc

00015bd4 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   15bd4:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   15bd6:	4d05      	ldr	r5, [pc, #20]	; (15bec <write_uart_string+0x18>)
   15bd8:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   15bda:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   15bde:	b901      	cbnz	r1, 15be2 <write_uart_string+0xe>
	}
}
   15be0:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   15be2:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
   15be4:	6883      	ldr	r3, [r0, #8]
   15be6:	685b      	ldr	r3, [r3, #4]
   15be8:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   15bea:	e7f6      	b.n	15bda <write_uart_string+0x6>
   15bec:	200230c4 	.word	0x200230c4

00015bf0 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   15bf0:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   15bf2:	4921      	ldr	r1, [pc, #132]	; (15c78 <cmd_send+0x88>)
{
   15bf4:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   15bf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   15bfa:	4608      	mov	r0, r1
   15bfc:	f10d 030b 	add.w	r3, sp, #11
   15c00:	f7ff fef0 	bl	159e4 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   15c04:	1e02      	subs	r2, r0, #0
   15c06:	da0e      	bge.n	15c26 <cmd_send+0x36>
   15c08:	481c      	ldr	r0, [pc, #112]	; (15c7c <cmd_send+0x8c>)
   15c0a:	4b1d      	ldr	r3, [pc, #116]	; (15c80 <cmd_send+0x90>)
		LOG_ERR("Error while processing AT command: %d", err);
   15c0c:	491d      	ldr	r1, [pc, #116]	; (15c84 <cmd_send+0x94>)
   15c0e:	1a1b      	subs	r3, r3, r0
   15c10:	08db      	lsrs	r3, r3, #3
   15c12:	019b      	lsls	r3, r3, #6
   15c14:	f043 0001 	orr.w	r0, r3, #1
   15c18:	f00e fc72 	bl	24500 <log_string_sync>
		state = AT_CMD_ERROR;
   15c1c:	2301      	movs	r3, #1
   15c1e:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   15c22:	4819      	ldr	r0, [pc, #100]	; (15c88 <cmd_send+0x98>)
   15c24:	e012      	b.n	15c4c <cmd_send+0x5c>
	switch (state) {
   15c26:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15c2a:	2b03      	cmp	r3, #3
   15c2c:	d810      	bhi.n	15c50 <cmd_send+0x60>
   15c2e:	a101      	add	r1, pc, #4	; (adr r1, 15c34 <cmd_send+0x44>)
   15c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   15c34:	00015c45 	.word	0x00015c45
   15c38:	00015c23 	.word	0x00015c23
   15c3c:	00015c5f 	.word	0x00015c5f
   15c40:	00015c71 	.word	0x00015c71
		write_uart_string(at_buf);
   15c44:	480c      	ldr	r0, [pc, #48]	; (15c78 <cmd_send+0x88>)
   15c46:	f7ff ffc5 	bl	15bd4 <write_uart_string>
		write_uart_string(OK_STR);
   15c4a:	4810      	ldr	r0, [pc, #64]	; (15c8c <cmd_send+0x9c>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   15c4c:	f7ff ffc2 	bl	15bd4 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   15c50:	4b0f      	ldr	r3, [pc, #60]	; (15c90 <cmd_send+0xa0>)
   15c52:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   15c54:	f012 fdbb 	bl	287ce <z_impl_uart_irq_rx_enable>
}
   15c58:	b00b      	add	sp, #44	; 0x2c
   15c5a:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   15c5e:	4b0d      	ldr	r3, [pc, #52]	; (15c94 <cmd_send+0xa4>)
   15c60:	9200      	str	r2, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   15c62:	2219      	movs	r2, #25
   15c64:	2100      	movs	r1, #0
   15c66:	a803      	add	r0, sp, #12
   15c68:	f013 fd7e 	bl	29768 <__sprintf_chk>
		write_uart_string(str);
   15c6c:	a803      	add	r0, sp, #12
   15c6e:	e7ed      	b.n	15c4c <cmd_send+0x5c>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   15c70:	4b09      	ldr	r3, [pc, #36]	; (15c98 <cmd_send+0xa8>)
   15c72:	9200      	str	r2, [sp, #0]
   15c74:	e7f5      	b.n	15c62 <cmd_send+0x72>
   15c76:	bf00      	nop
   15c78:	20029f68 	.word	0x20029f68
   15c7c:	0002a2c4 	.word	0x0002a2c4
   15c80:	0002a2d4 	.word	0x0002a2d4
   15c84:	0002c043 	.word	0x0002c043
   15c88:	0002c06e 	.word	0x0002c06e
   15c8c:	0002c069 	.word	0x0002c069
   15c90:	200230c4 	.word	0x200230c4
   15c94:	0002c076 	.word	0x0002c076
   15c98:	0002c087 	.word	0x0002c087

00015c9c <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(struct device *dev)
{
   15c9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15ca0:	4604      	mov	r4, r0
	if (api->irq_update) {
   15ca2:	6883      	ldr	r3, [r0, #8]
   15ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   15ca6:	b103      	cbz	r3, 15caa <isr+0xe>
		return api->irq_update(dev);
   15ca8:	4798      	blx	r3
	if (api->irq_rx_ready) {
   15caa:	68a3      	ldr	r3, [r4, #8]
   15cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15cae:	b1bb      	cbz	r3, 15ce0 <isr+0x44>
		return api->irq_rx_ready(dev);
   15cb0:	4620      	mov	r0, r4
   15cb2:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   15cb4:	b1a0      	cbz	r0, 15ce0 <isr+0x44>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15cb6:	f8df 8130 	ldr.w	r8, [pc, #304]	; 15de8 <isr+0x14c>
   15cba:	4e40      	ldr	r6, [pc, #256]	; (15dbc <isr+0x120>)
   15cbc:	4647      	mov	r7, r8
   15cbe:	4b40      	ldr	r3, [pc, #256]	; (15dc0 <isr+0x124>)
		if (at_cmd_len > 0) {
   15cc0:	4d40      	ldr	r5, [pc, #256]	; (15dc4 <isr+0x128>)
   15cc2:	1af6      	subs	r6, r6, r3
   15cc4:	08f6      	lsrs	r6, r6, #3
   15cc6:	e8d8 3faf 	lda	r3, [r8]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   15cca:	07db      	lsls	r3, r3, #31
   15ccc:	d408      	bmi.n	15ce0 <isr+0x44>
	if (api->fifo_read) {
   15cce:	68a3      	ldr	r3, [r4, #8]
   15cd0:	699b      	ldr	r3, [r3, #24]
   15cd2:	b12b      	cbz	r3, 15ce0 <isr+0x44>
		return api->fifo_read(dev, rx_data, size);
   15cd4:	2201      	movs	r2, #1
   15cd6:	4620      	mov	r0, r4
   15cd8:	f10d 0107 	add.w	r1, sp, #7
   15cdc:	4798      	blx	r3
   15cde:	b910      	cbnz	r0, 15ce6 <isr+0x4a>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   15ce0:	b002      	add	sp, #8
   15ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uart_rx_handler(character);
   15ce6:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   15cea:	2a08      	cmp	r2, #8
   15cec:	d001      	beq.n	15cf2 <isr+0x56>
   15cee:	2a7f      	cmp	r2, #127	; 0x7f
   15cf0:	d105      	bne.n	15cfe <isr+0x62>
		if (at_cmd_len > 0) {
   15cf2:	682b      	ldr	r3, [r5, #0]
   15cf4:	2b00      	cmp	r3, #0
   15cf6:	d0e6      	beq.n	15cc6 <isr+0x2a>
			at_cmd_len--;
   15cf8:	3b01      	subs	r3, #1
   15cfa:	602b      	str	r3, [r5, #0]
   15cfc:	e7e3      	b.n	15cc6 <isr+0x2a>
	if (!inside_quotes) {
   15cfe:	4932      	ldr	r1, [pc, #200]	; (15dc8 <isr+0x12c>)
   15d00:	780b      	ldrb	r3, [r1, #0]
   15d02:	b993      	cbnz	r3, 15d2a <isr+0x8e>
		switch (character) {
   15d04:	2a0a      	cmp	r2, #10
   15d06:	d01e      	beq.n	15d46 <isr+0xaa>
   15d08:	2a0d      	cmp	r2, #13
   15d0a:	d00a      	beq.n	15d22 <isr+0x86>
   15d0c:	b96a      	cbnz	r2, 15d2a <isr+0x8e>
			if (term_mode == MODE_NULL_TERM) {
   15d0e:	4b2f      	ldr	r3, [pc, #188]	; (15dcc <isr+0x130>)
   15d10:	781b      	ldrb	r3, [r3, #0]
   15d12:	b3a3      	cbz	r3, 15d7e <isr+0xe2>
			LOG_WRN("Ignored null; would terminate string early.");
   15d14:	01b0      	lsls	r0, r6, #6
   15d16:	492e      	ldr	r1, [pc, #184]	; (15dd0 <isr+0x134>)
   15d18:	f040 0002 	orr.w	r0, r0, #2
   15d1c:	f00e fbf0 	bl	24500 <log_string_sync>
			return;
   15d20:	e7d1      	b.n	15cc6 <isr+0x2a>
			if (term_mode == MODE_CR) {
   15d22:	482a      	ldr	r0, [pc, #168]	; (15dcc <isr+0x130>)
   15d24:	7800      	ldrb	r0, [r0, #0]
   15d26:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   15d28:	d029      	beq.n	15d7e <isr+0xe2>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   15d2a:	f8d5 c000 	ldr.w	ip, [r5]
   15d2e:	f10c 0001 	add.w	r0, ip, #1
   15d32:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   15d36:	d317      	bcc.n	15d68 <isr+0xcc>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   15d38:	01b0      	lsls	r0, r6, #6
   15d3a:	4926      	ldr	r1, [pc, #152]	; (15dd4 <isr+0x138>)
   15d3c:	f040 0001 	orr.w	r0, r0, #1
   15d40:	f00e fbde 	bl	24500 <log_string_sync>
		return;
   15d44:	e7bf      	b.n	15cc6 <isr+0x2a>
			if (term_mode == MODE_LF) {
   15d46:	4821      	ldr	r0, [pc, #132]	; (15dcc <isr+0x130>)
   15d48:	7800      	ldrb	r0, [r0, #0]
   15d4a:	2802      	cmp	r0, #2
   15d4c:	d017      	beq.n	15d7e <isr+0xe2>
			if (term_mode == MODE_CR_LF &&
   15d4e:	2803      	cmp	r0, #3
   15d50:	d1eb      	bne.n	15d2a <isr+0x8e>
   15d52:	f8d5 c000 	ldr.w	ip, [r5]
   15d56:	f1bc 0f00 	cmp.w	ip, #0
   15d5a:	d0e6      	beq.n	15d2a <isr+0x8e>
			    at_buf[at_cmd_len - 1] == '\r') {
   15d5c:	481e      	ldr	r0, [pc, #120]	; (15dd8 <isr+0x13c>)
   15d5e:	4460      	add	r0, ip
			    at_cmd_len > 0 &&
   15d60:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   15d64:	280d      	cmp	r0, #13
   15d66:	e7df      	b.n	15d28 <isr+0x8c>
	at_buf[at_cmd_len] = character;
   15d68:	f8df e06c 	ldr.w	lr, [pc, #108]	; 15dd8 <isr+0x13c>
	if (character == '"') {
   15d6c:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   15d6e:	f80e 200c 	strb.w	r2, [lr, ip]
	at_cmd_len++;
   15d72:	6028      	str	r0, [r5, #0]
	if (character == '"') {
   15d74:	d1a7      	bne.n	15cc6 <isr+0x2a>
	if (!inside_quotes) {
   15d76:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   15d7a:	700b      	strb	r3, [r1, #0]
   15d7c:	e7a3      	b.n	15cc6 <isr+0x2a>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   15d7e:	2300      	movs	r3, #0
   15d80:	4a15      	ldr	r2, [pc, #84]	; (15dd8 <isr+0x13c>)
   15d82:	6828      	ldr	r0, [r5, #0]
	inside_quotes = false;
   15d84:	700b      	strb	r3, [r1, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   15d86:	5413      	strb	r3, [r2, r0]
	at_cmd_len = 0;
   15d88:	602b      	str	r3, [r5, #0]
	if (at_buf[0]) {
   15d8a:	7813      	ldrb	r3, [r2, #0]
   15d8c:	2b00      	cmp	r3, #0
   15d8e:	d09a      	beq.n	15cc6 <isr+0x2a>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   15d90:	4b12      	ldr	r3, [pc, #72]	; (15ddc <isr+0x140>)
   15d92:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   15d94:	6883      	ldr	r3, [r0, #8]
   15d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15d98:	b103      	cbz	r3, 15d9c <isr+0x100>
		api->irq_rx_disable(dev);
   15d9a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15d9c:	e8d7 3fef 	ldaex	r3, [r7]
   15da0:	f043 0201 	orr.w	r2, r3, #1
   15da4:	e8c7 2fe1 	stlex	r1, r2, [r7]
   15da8:	2900      	cmp	r1, #0
   15daa:	d1f7      	bne.n	15d9c <isr+0x100>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   15dac:	07da      	lsls	r2, r3, #31
   15dae:	d48a      	bmi.n	15cc6 <isr+0x2a>
		k_queue_append(&work_q->queue, work);
   15db0:	490b      	ldr	r1, [pc, #44]	; (15de0 <isr+0x144>)
   15db2:	480c      	ldr	r0, [pc, #48]	; (15de4 <isr+0x148>)
   15db4:	f013 f816 	bl	28de4 <k_queue_append>
   15db8:	e785      	b.n	15cc6 <isr+0x2a>
   15dba:	bf00      	nop
   15dbc:	0002a2d4 	.word	0x0002a2d4
   15dc0:	0002a2c4 	.word	0x0002a2c4
   15dc4:	20022fe4 	.word	0x20022fe4
   15dc8:	2002af68 	.word	0x2002af68
   15dcc:	2002af69 	.word	0x2002af69
   15dd0:	0002c098 	.word	0x0002c098
   15dd4:	0002c0c4 	.word	0x0002c0c4
   15dd8:	20029f68 	.word	0x20029f68
   15ddc:	200230c4 	.word	0x200230c4
   15de0:	200230b8 	.word	0x200230b8
   15de4:	20022fe8 	.word	0x20022fe8
   15de8:	200230c0 	.word	0x200230c0

00015dec <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(struct device *arg)
{
   15dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   15df0:	2201      	movs	r2, #1
   15df2:	4b47      	ldr	r3, [pc, #284]	; (15f10 <at_host_init+0x124>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   15df4:	2000      	movs	r0, #0
   15df6:	4947      	ldr	r1, [pc, #284]	; (15f14 <at_host_init+0x128>)
		term_mode = mode;
   15df8:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   15dfa:	f7ff fea1 	bl	15b40 <at_notif_register_handler>
	if (err != 0) {
   15dfe:	4c46      	ldr	r4, [pc, #280]	; (15f18 <at_host_init+0x12c>)
   15e00:	4b46      	ldr	r3, [pc, #280]	; (15f1c <at_host_init+0x130>)
   15e02:	4606      	mov	r6, r0
   15e04:	1ae4      	subs	r4, r4, r3
   15e06:	08e4      	lsrs	r4, r4, #3
   15e08:	b150      	cbz	r0, 15e20 <at_host_init+0x34>
		LOG_ERR("Can't register handler err=%d", err);
   15e0a:	01a0      	lsls	r0, r4, #6
   15e0c:	4632      	mov	r2, r6
   15e0e:	4944      	ldr	r1, [pc, #272]	; (15f20 <at_host_init+0x134>)
   15e10:	f040 0001 	orr.w	r0, r0, #1
   15e14:	f00e fb74 	bl	24500 <log_string_sync>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   15e18:	4630      	mov	r0, r6
   15e1a:	b004      	add	sp, #16
   15e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15e20:	4840      	ldr	r0, [pc, #256]	; (15f24 <at_host_init+0x138>)
   15e22:	f009 fd6f 	bl	1f904 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   15e26:	4d40      	ldr	r5, [pc, #256]	; (15f28 <at_host_init+0x13c>)
   15e28:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   15e2a:	b988      	cbnz	r0, 15e50 <at_host_init+0x64>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   15e2c:	01a0      	lsls	r0, r4, #6
   15e2e:	4a3d      	ldr	r2, [pc, #244]	; (15f24 <at_host_init+0x138>)
   15e30:	493e      	ldr	r1, [pc, #248]	; (15f2c <at_host_init+0x140>)
   15e32:	f040 0001 	orr.w	r0, r0, #1
   15e36:	f00e fb63 	bl	24500 <log_string_sync>
		return -EINVAL;
   15e3a:	f06f 0215 	mvn.w	r2, #21
		LOG_ERR("UART could not be initialized: %d", err);
   15e3e:	01a0      	lsls	r0, r4, #6
   15e40:	493b      	ldr	r1, [pc, #236]	; (15f30 <at_host_init+0x144>)
   15e42:	f040 0001 	orr.w	r0, r0, #1
   15e46:	f00e fb5b 	bl	24500 <log_string_sync>
		return -EFAULT;
   15e4a:	f06f 060d 	mvn.w	r6, #13
   15e4e:	e7e3      	b.n	15e18 <at_host_init+0x2c>
	return z_impl_k_uptime_ticks();
   15e50:	f013 f9ba 	bl	291c8 <z_impl_k_uptime_ticks>
   15e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15e58:	460a      	mov	r2, r1
   15e5a:	fba0 0103 	umull	r0, r1, r0, r3
   15e5e:	fb03 1102 	mla	r1, r3, r2, r1
   15e62:	0bc7      	lsrs	r7, r0, #15
   15e64:	ea4f 1884 	mov.w	r8, r4, lsl #6
			LOG_INF("UART check failed: %d. "
   15e68:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 15f4c <at_host_init+0x160>
   15e6c:	ea47 4741 	orr.w	r7, r7, r1, lsl #17
   15e70:	f048 0903 	orr.w	r9, r8, #3
		err = uart_err_check(uart_dev);
   15e74:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   15e76:	6883      	ldr	r3, [r0, #8]
   15e78:	689b      	ldr	r3, [r3, #8]
   15e7a:	b383      	cbz	r3, 15ede <at_host_init+0xf2>
		return api->err_check(dev);
   15e7c:	4798      	blx	r3
		if (err) {
   15e7e:	9001      	str	r0, [sp, #4]
   15e80:	b368      	cbz	r0, 15ede <at_host_init+0xf2>
   15e82:	f013 f9a1 	bl	291c8 <z_impl_k_uptime_ticks>
   15e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15e8a:	468c      	mov	ip, r1
   15e8c:	fba0 0103 	umull	r0, r1, r0, r3
   15e90:	fb03 110c 	mla	r1, r3, ip, r1
   15e94:	0bc3      	lsrs	r3, r0, #15
   15e96:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   15e9a:	1bdb      	subs	r3, r3, r7
   15e9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   15ea0:	9a01      	ldr	r2, [sp, #4]
   15ea2:	d907      	bls.n	15eb4 <at_host_init+0xc8>
				LOG_ERR("UART check failed: %d. "
   15ea4:	4923      	ldr	r1, [pc, #140]	; (15f34 <at_host_init+0x148>)
   15ea6:	f048 0001 	orr.w	r0, r8, #1
   15eaa:	f00e fb29 	bl	24500 <log_string_sync>
				return -EIO;
   15eae:	f06f 0204 	mvn.w	r2, #4
   15eb2:	e7c4      	b.n	15e3e <at_host_init+0x52>
			LOG_INF("UART check failed: %d. "
   15eb4:	4651      	mov	r1, sl
   15eb6:	4648      	mov	r0, r9
   15eb8:	f00e fb22 	bl	24500 <log_string_sync>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   15ebc:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   15ebe:	6883      	ldr	r3, [r0, #8]
   15ec0:	699b      	ldr	r3, [r3, #24]
   15ec2:	b92b      	cbnz	r3, 15ed0 <at_host_init+0xe4>
	return z_impl_k_sleep(timeout);
   15ec4:	2100      	movs	r1, #0
   15ec6:	f44f 70a4 	mov.w	r0, #328	; 0x148
   15eca:	f00a fc01 	bl	206d0 <z_impl_k_sleep>
	} while (err);
   15ece:	e7d1      	b.n	15e74 <at_host_init+0x88>
		return api->fifo_read(dev, rx_data, size);
   15ed0:	2201      	movs	r2, #1
   15ed2:	f10d 010f 	add.w	r1, sp, #15
   15ed6:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   15ed8:	2800      	cmp	r0, #0
   15eda:	d1ef      	bne.n	15ebc <at_host_init+0xd0>
   15edc:	e7f2      	b.n	15ec4 <at_host_init+0xd8>
	uart_irq_callback_set(uart_dev, isr);
   15ede:	682a      	ldr	r2, [r5, #0]
	const struct uart_driver_api *api =
   15ee0:	6893      	ldr	r3, [r2, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   15ee2:	b123      	cbz	r3, 15eee <at_host_init+0x102>
   15ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   15ee6:	b113      	cbz	r3, 15eee <at_host_init+0x102>
		api->irq_callback_set(dev, cb, user_data);
   15ee8:	4610      	mov	r0, r2
   15eea:	4913      	ldr	r1, [pc, #76]	; (15f38 <at_host_init+0x14c>)
   15eec:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   15eee:	2200      	movs	r2, #0
   15ef0:	4b12      	ldr	r3, [pc, #72]	; (15f3c <at_host_init+0x150>)
   15ef2:	4913      	ldr	r1, [pc, #76]	; (15f40 <at_host_init+0x154>)
   15ef4:	601a      	str	r2, [r3, #0]
   15ef6:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   15efa:	4812      	ldr	r0, [pc, #72]	; (15f44 <at_host_init+0x158>)
   15efc:	230a      	movs	r3, #10
   15efe:	f44f 7240 	mov.w	r2, #768	; 0x300
   15f02:	4911      	ldr	r1, [pc, #68]	; (15f48 <at_host_init+0x15c>)
   15f04:	f00a fd26 	bl	20954 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   15f08:	6828      	ldr	r0, [r5, #0]
   15f0a:	f012 fc60 	bl	287ce <z_impl_uart_irq_rx_enable>
	return err;
   15f0e:	e783      	b.n	15e18 <at_host_init+0x2c>
   15f10:	2002af69 	.word	0x2002af69
   15f14:	000287d9 	.word	0x000287d9
   15f18:	0002a2d4 	.word	0x0002a2d4
   15f1c:	0002a2c4 	.word	0x0002a2c4
   15f20:	0002c0e4 	.word	0x0002c0e4
   15f24:	0002b817 	.word	0x0002b817
   15f28:	200230c4 	.word	0x200230c4
   15f2c:	0002c102 	.word	0x0002c102
   15f30:	0002c17d 	.word	0x0002c17d
   15f34:	0002c112 	.word	0x0002c112
   15f38:	00015c9d 	.word	0x00015c9d
   15f3c:	200230b8 	.word	0x200230b8
   15f40:	00015bf1 	.word	0x00015bf1
   15f44:	20022fe8 	.word	0x20022fe8
   15f48:	2002c798 	.word	0x2002c798
   15f4c:	0002c148 	.word	0x0002c148

00015f50 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   15f50:	4b06      	ldr	r3, [pc, #24]	; (15f6c <is_valid_notification_char+0x1c>)
   15f52:	5cc3      	ldrb	r3, [r0, r3]
   15f54:	f003 0303 	and.w	r3, r3, #3
   15f58:	2b02      	cmp	r3, #2
   15f5a:	bf08      	it	eq
   15f5c:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   15f5e:	3841      	subs	r0, #65	; 0x41
   15f60:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   15f62:	2819      	cmp	r0, #25
   15f64:	bf8c      	ite	hi
   15f66:	2000      	movhi	r0, #0
   15f68:	2001      	movls	r0, #1
   15f6a:	4770      	bx	lr
   15f6c:	0002d0fe 	.word	0x0002d0fe

00015f70 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   15f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   15f74:	6805      	ldr	r5, [r0, #0]
{
   15f76:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   15f78:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   15f7a:	782b      	ldrb	r3, [r5, #0]
{
   15f7c:	4680      	mov	r8, r0
   15f7e:	460f      	mov	r7, r1
   15f80:	4616      	mov	r6, r2
   15f82:	2b00      	cmp	r3, #0
   15f84:	f000 80c8 	beq.w	16118 <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   15f88:	4b65      	ldr	r3, [pc, #404]	; (16120 <at_parse_process_element+0x1b0>)
   15f8a:	781c      	ldrb	r4, [r3, #0]
   15f8c:	2c06      	cmp	r4, #6
   15f8e:	d110      	bne.n	15fb2 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   15f90:	1c6b      	adds	r3, r5, #1
   15f92:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   15f94:	9a00      	ldr	r2, [sp, #0]
   15f96:	7810      	ldrb	r0, [r2, #0]
   15f98:	f7ff ffda 	bl	15f50 <is_valid_notification_char>
   15f9c:	b930      	cbnz	r0, 15fac <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   15f9e:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   15fa0:	462a      	mov	r2, r5
   15fa2:	4639      	mov	r1, r7
   15fa4:	4630      	mov	r0, r6
   15fa6:	f012 fcd0 	bl	2894a <at_params_string_put>
   15faa:	e01b      	b.n	15fe4 <at_parse_process_element+0x74>
			tmpstr++;
   15fac:	3201      	adds	r2, #1
   15fae:	9200      	str	r2, [sp, #0]
   15fb0:	e7f0      	b.n	15f94 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   15fb2:	2c07      	cmp	r4, #7
   15fb4:	d124      	bne.n	16000 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   15fb6:	4668      	mov	r0, sp
   15fb8:	f012 fc1a 	bl	287f0 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   15fbc:	9a00      	ldr	r2, [sp, #0]
   15fbe:	7810      	ldrb	r0, [r2, #0]
   15fc0:	f7ff ffc6 	bl	15f50 <is_valid_notification_char>
   15fc4:	b9a8      	cbnz	r0, 15ff2 <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   15fc6:	1b53      	subs	r3, r2, r5
   15fc8:	4639      	mov	r1, r7
   15fca:	462a      	mov	r2, r5
   15fcc:	4630      	mov	r0, r6
   15fce:	f012 fcbc 	bl	2894a <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   15fd2:	9b00      	ldr	r3, [sp, #0]
   15fd4:	781a      	ldrb	r2, [r3, #0]
   15fd6:	2a3d      	cmp	r2, #61	; 0x3d
   15fd8:	d10e      	bne.n	15ff8 <at_parse_process_element+0x88>
   15fda:	785a      	ldrb	r2, [r3, #1]
   15fdc:	2a3f      	cmp	r2, #63	; 0x3f
   15fde:	d101      	bne.n	15fe4 <at_parse_process_element+0x74>
			tmpstr += 2;
   15fe0:	3302      	adds	r3, #2
			tmpstr++;
   15fe2:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   15fe4:	2000      	movs	r0, #0
	*str = tmpstr;
   15fe6:	9b00      	ldr	r3, [sp, #0]
   15fe8:	f8c8 3000 	str.w	r3, [r8]
}
   15fec:	b023      	add	sp, #140	; 0x8c
   15fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   15ff2:	3201      	adds	r2, #1
   15ff4:	9200      	str	r2, [sp, #0]
   15ff6:	e7e1      	b.n	15fbc <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   15ff8:	2a3f      	cmp	r2, #63	; 0x3f
   15ffa:	d1f3      	bne.n	15fe4 <at_parse_process_element+0x74>
			tmpstr++;
   15ffc:	3301      	adds	r3, #1
   15ffe:	e7f0      	b.n	15fe2 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   16000:	2c08      	cmp	r4, #8
   16002:	d103      	bne.n	1600c <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   16004:	4610      	mov	r0, r2
   16006:	f012 fc7b 	bl	28900 <at_params_empty_put>
   1600a:	e7eb      	b.n	15fe4 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   1600c:	2c02      	cmp	r4, #2
   1600e:	d111      	bne.n	16034 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   16010:	9a00      	ldr	r2, [sp, #0]
   16012:	7811      	ldrb	r1, [r2, #0]
   16014:	4608      	mov	r0, r1
   16016:	f012 fbe2 	bl	287de <is_lfcr>
   1601a:	b918      	cbnz	r0, 16024 <at_parse_process_element+0xb4>
   1601c:	b111      	cbz	r1, 16024 <at_parse_process_element+0xb4>
			tmpstr++;
   1601e:	3201      	adds	r2, #1
   16020:	9200      	str	r2, [sp, #0]
   16022:	e7f5      	b.n	16010 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   16024:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   16026:	462a      	mov	r2, r5
   16028:	4639      	mov	r1, r7
   1602a:	4630      	mov	r0, r6
   1602c:	f012 fc8d 	bl	2894a <at_params_string_put>
		tmpstr++;
   16030:	9b00      	ldr	r3, [sp, #0]
   16032:	e7e3      	b.n	15ffc <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   16034:	2c03      	cmp	r4, #3
   16036:	d109      	bne.n	1604c <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   16038:	9b00      	ldr	r3, [sp, #0]
   1603a:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   1603c:	2a22      	cmp	r2, #34	; 0x22
   1603e:	d003      	beq.n	16048 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16040:	b112      	cbz	r2, 16048 <at_parse_process_element+0xd8>
			tmpstr++;
   16042:	3301      	adds	r3, #1
   16044:	9300      	str	r3, [sp, #0]
   16046:	e7f7      	b.n	16038 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   16048:	1b5b      	subs	r3, r3, r5
   1604a:	e7ec      	b.n	16026 <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   1604c:	2c01      	cmp	r4, #1
   1604e:	d13c      	bne.n	160ca <at_parse_process_element+0x15a>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   16050:	4628      	mov	r0, r5
   16052:	220a      	movs	r2, #10
   16054:	a901      	add	r1, sp, #4
   16056:	f00c f83d 	bl	220d4 <strtoul>
		tmpstr = next;
   1605a:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1605c:	4d31      	ldr	r5, [pc, #196]	; (16124 <at_parse_process_element+0x1b4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   1605e:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   16060:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   16062:	9800      	ldr	r0, [sp, #0]
   16064:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   16066:	2b29      	cmp	r3, #41	; 0x29
   16068:	d028      	beq.n	160bc <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1606a:	b33b      	cbz	r3, 160bc <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1606c:	3b2c      	subs	r3, #44	; 0x2c
   1606e:	b2db      	uxtb	r3, r3
   16070:	3001      	adds	r0, #1
   16072:	2b11      	cmp	r3, #17
				tmparray[i++] =
   16074:	9000      	str	r0, [sp, #0]
   16076:	d803      	bhi.n	16080 <at_parse_process_element+0x110>
   16078:	fa25 f303 	lsr.w	r3, r5, r3
   1607c:	07db      	lsls	r3, r3, #31
   1607e:	d408      	bmi.n	16092 <at_parse_process_element+0x122>
				tmpstr++;
   16080:	46a1      	mov	r9, r4
   16082:	e004      	b.n	1608e <at_parse_process_element+0x11e>
					tmpstr = next;
   16084:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   16086:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   1608a:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1608c:	d015      	beq.n	160ba <at_parse_process_element+0x14a>
				tmpstr++;
   1608e:	464c      	mov	r4, r9
   16090:	e7e7      	b.n	16062 <at_parse_process_element+0xf2>
					(u32_t)strtoul(++tmpstr, &next, 10);
   16092:	220a      	movs	r2, #10
   16094:	a901      	add	r1, sp, #4
   16096:	f00c f81d 	bl	220d4 <strtoul>
				tmparray[i++] =
   1609a:	ab22      	add	r3, sp, #136	; 0x88
   1609c:	f104 0901 	add.w	r9, r4, #1
   160a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   160a4:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   160a8:	9800      	ldr	r0, [sp, #0]
   160aa:	f7f6 ff45 	bl	cf38 <strlen>
   160ae:	4604      	mov	r4, r0
   160b0:	9801      	ldr	r0, [sp, #4]
   160b2:	f7f6 ff41 	bl	cf38 <strlen>
   160b6:	4284      	cmp	r4, r0
   160b8:	d1e4      	bne.n	16084 <at_parse_process_element+0x114>
   160ba:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   160bc:	4639      	mov	r1, r7
   160be:	4630      	mov	r0, r6
   160c0:	00a3      	lsls	r3, r4, #2
   160c2:	aa02      	add	r2, sp, #8
   160c4:	f012 fc64 	bl	28990 <at_params_array_put>
   160c8:	e7b2      	b.n	16030 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   160ca:	2c04      	cmp	r4, #4
   160cc:	d115      	bne.n	160fa <at_parse_process_element+0x18a>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   160ce:	220a      	movs	r2, #10
   160d0:	4628      	mov	r0, r5
   160d2:	a902      	add	r1, sp, #8
   160d4:	f00b fffe 	bl	220d4 <strtoul>
		tmpstr = next;
   160d8:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   160da:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   160de:	4602      	mov	r2, r0
		tmpstr = next;
   160e0:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   160e2:	da05      	bge.n	160f0 <at_parse_process_element+0x180>
			at_params_short_put(list, index, (u16_t)value);
   160e4:	b282      	uxth	r2, r0
   160e6:	4639      	mov	r1, r7
   160e8:	4630      	mov	r0, r6
   160ea:	f012 fbf6 	bl	288da <at_params_short_put>
   160ee:	e779      	b.n	15fe4 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   160f0:	4639      	mov	r1, r7
   160f2:	4630      	mov	r0, r6
   160f4:	f012 fc16 	bl	28924 <at_params_int_put>
   160f8:	e774      	b.n	15fe4 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   160fa:	2c05      	cmp	r4, #5
   160fc:	f47f af72 	bne.w	15fe4 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   16100:	4909      	ldr	r1, [pc, #36]	; (16128 <at_parse_process_element+0x1b8>)
   16102:	9b00      	ldr	r3, [sp, #0]
   16104:	781a      	ldrb	r2, [r3, #0]
   16106:	5c52      	ldrb	r2, [r2, r1]
   16108:	f012 0f44 	tst.w	r2, #68	; 0x44
   1610c:	d101      	bne.n	16112 <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   1610e:	1b5b      	subs	r3, r3, r5
   16110:	e746      	b.n	15fa0 <at_parse_process_element+0x30>
			tmpstr++;
   16112:	3301      	adds	r3, #1
   16114:	9300      	str	r3, [sp, #0]
   16116:	e7f4      	b.n	16102 <at_parse_process_element+0x192>
		return -1;
   16118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1611c:	e766      	b.n	15fec <at_parse_process_element+0x7c>
   1611e:	bf00      	nop
   16120:	2002af6a 	.word	0x2002af6a
   16124:	00024001 	.word	0x00024001
   16128:	0002d0fe 	.word	0x0002d0fe

0001612c <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1612c:	b510      	push	{r4, lr}
   1612e:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   16130:	f7f6 ff02 	bl	cf38 <strlen>
   16134:	2801      	cmp	r0, #1
   16136:	d922      	bls.n	1617e <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   16138:	7821      	ldrb	r1, [r4, #0]
   1613a:	4b13      	ldr	r3, [pc, #76]	; (16188 <is_command+0x5c>)
   1613c:	5cca      	ldrb	r2, [r1, r3]
   1613e:	f002 0203 	and.w	r2, r2, #3
   16142:	2a02      	cmp	r2, #2
   16144:	bf08      	it	eq
   16146:	3920      	subeq	r1, #32
   16148:	2941      	cmp	r1, #65	; 0x41
   1614a:	461a      	mov	r2, r3
   1614c:	d117      	bne.n	1617e <is_command+0x52>
   1614e:	7863      	ldrb	r3, [r4, #1]
   16150:	5cd2      	ldrb	r2, [r2, r3]
   16152:	f002 0203 	and.w	r2, r2, #3
   16156:	2a02      	cmp	r2, #2
   16158:	bf08      	it	eq
   1615a:	3b20      	subeq	r3, #32
   1615c:	2b54      	cmp	r3, #84	; 0x54
   1615e:	d10e      	bne.n	1617e <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   16160:	78a2      	ldrb	r2, [r4, #2]
   16162:	2a25      	cmp	r2, #37	; 0x25
   16164:	d00d      	beq.n	16182 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   16166:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1616a:	2b23      	cmp	r3, #35	; 0x23
   1616c:	d009      	beq.n	16182 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1616e:	4610      	mov	r0, r2
   16170:	f012 fb35 	bl	287de <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   16174:	b910      	cbnz	r0, 1617c <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16176:	fab2 f082 	clz	r0, r2
   1617a:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1617c:	bd10      	pop	{r4, pc}
		return false;
   1617e:	2000      	movs	r0, #0
   16180:	e7fc      	b.n	1617c <is_command+0x50>
		return true;
   16182:	2001      	movs	r0, #1
   16184:	e7fa      	b.n	1617c <is_command+0x50>
   16186:	bf00      	nop
   16188:	0002d0fe 	.word	0x0002d0fe

0001618c <at_parse_detect_type>:
{
   1618c:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   1618e:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   16190:	2900      	cmp	r1, #0
{
   16192:	4605      	mov	r5, r0
   16194:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   16196:	d141      	bne.n	1621c <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   16198:	2a2b      	cmp	r2, #43	; 0x2b
   1619a:	4e29      	ldr	r6, [pc, #164]	; (16240 <at_parse_detect_type+0xb4>)
   1619c:	d001      	beq.n	161a2 <at_parse_detect_type+0x16>
   1619e:	2a25      	cmp	r2, #37	; 0x25
   161a0:	d104      	bne.n	161ac <at_parse_detect_type+0x20>
	state = new_state;
   161a2:	2306      	movs	r3, #6
   161a4:	7033      	strb	r3, [r6, #0]
	return 0;
   161a6:	2000      	movs	r0, #0
	*str = tmpstr;
   161a8:	602c      	str	r4, [r5, #0]
}
   161aa:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   161ac:	4620      	mov	r0, r4
   161ae:	f7ff ffbd 	bl	1612c <is_command>
   161b2:	b388      	cbz	r0, 16218 <at_parse_detect_type+0x8c>
	state = new_state;
   161b4:	2307      	movs	r3, #7
   161b6:	e7f5      	b.n	161a4 <at_parse_detect_type+0x18>
	if (chr == '"') {
   161b8:	2a22      	cmp	r2, #34	; 0x22
   161ba:	d006      	beq.n	161ca <at_parse_detect_type+0x3e>
	if (chr == '(') {
   161bc:	2a28      	cmp	r2, #40	; 0x28
   161be:	d109      	bne.n	161d4 <at_parse_detect_type+0x48>
   161c0:	2201      	movs	r2, #1
   161c2:	4b1f      	ldr	r3, [pc, #124]	; (16240 <at_parse_detect_type+0xb4>)
		tmpstr++;
   161c4:	4414      	add	r4, r2
	state = new_state;
   161c6:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   161c8:	e7ed      	b.n	161a6 <at_parse_detect_type+0x1a>
	state = new_state;
   161ca:	2203      	movs	r2, #3
   161cc:	4b1c      	ldr	r3, [pc, #112]	; (16240 <at_parse_detect_type+0xb4>)
		tmpstr++;
   161ce:	3401      	adds	r4, #1
	state = new_state;
   161d0:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   161d2:	e7e8      	b.n	161a6 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   161d4:	4610      	mov	r0, r2
   161d6:	f012 fb02 	bl	287de <is_lfcr>
   161da:	b170      	cbz	r0, 161fa <at_parse_detect_type+0x6e>
   161dc:	4918      	ldr	r1, [pc, #96]	; (16240 <at_parse_detect_type+0xb4>)
   161de:	7808      	ldrb	r0, [r1, #0]
   161e0:	2804      	cmp	r0, #4
   161e2:	d108      	bne.n	161f6 <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   161e4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   161e8:	f012 faf9 	bl	287de <is_lfcr>
   161ec:	2800      	cmp	r0, #0
   161ee:	d1f9      	bne.n	161e4 <at_parse_detect_type+0x58>
	state = new_state;
   161f0:	2305      	movs	r3, #5
   161f2:	700b      	strb	r3, [r1, #0]
}
   161f4:	e7d7      	b.n	161a6 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   161f6:	2808      	cmp	r0, #8
   161f8:	d0d5      	beq.n	161a6 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   161fa:	3a2c      	subs	r2, #44	; 0x2c
   161fc:	b2d2      	uxtb	r2, r2
   161fe:	2a11      	cmp	r2, #17
   16200:	d807      	bhi.n	16212 <at_parse_detect_type+0x86>
   16202:	4b10      	ldr	r3, [pc, #64]	; (16244 <at_parse_detect_type+0xb8>)
   16204:	fa23 f202 	lsr.w	r2, r3, r2
   16208:	07d3      	lsls	r3, r2, #31
   1620a:	d502      	bpl.n	16212 <at_parse_detect_type+0x86>
	state = new_state;
   1620c:	2208      	movs	r2, #8
   1620e:	4b0c      	ldr	r3, [pc, #48]	; (16240 <at_parse_detect_type+0xb4>)
   16210:	e013      	b.n	1623a <at_parse_detect_type+0xae>
		return -1;
   16212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16216:	e7c8      	b.n	161aa <at_parse_detect_type+0x1e>
	state = new_state;
   16218:	2302      	movs	r3, #2
   1621a:	e7c3      	b.n	161a4 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1621c:	dd03      	ble.n	16226 <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1621e:	2a2b      	cmp	r2, #43	; 0x2b
   16220:	d0f7      	beq.n	16212 <at_parse_detect_type+0x86>
   16222:	2a25      	cmp	r2, #37	; 0x25
   16224:	d0f5      	beq.n	16212 <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   16226:	4b08      	ldr	r3, [pc, #32]	; (16248 <at_parse_detect_type+0xbc>)
   16228:	5cd3      	ldrb	r3, [r2, r3]
   1622a:	0759      	lsls	r1, r3, #29
   1622c:	d403      	bmi.n	16236 <at_parse_detect_type+0xaa>
   1622e:	2a2d      	cmp	r2, #45	; 0x2d
   16230:	d001      	beq.n	16236 <at_parse_detect_type+0xaa>
   16232:	2a2b      	cmp	r2, #43	; 0x2b
   16234:	d1c0      	bne.n	161b8 <at_parse_detect_type+0x2c>
	state = new_state;
   16236:	2204      	movs	r2, #4
   16238:	4b01      	ldr	r3, [pc, #4]	; (16240 <at_parse_detect_type+0xb4>)
   1623a:	701a      	strb	r2, [r3, #0]
}
   1623c:	e7b3      	b.n	161a6 <at_parse_detect_type+0x1a>
   1623e:	bf00      	nop
   16240:	2002af6a 	.word	0x2002af6a
   16244:	00024001 	.word	0x00024001
   16248:	0002d0fe 	.word	0x0002d0fe

0001624c <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   1624c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16250:	4688      	mov	r8, r1
   16252:	4616      	mov	r6, r2
   16254:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   16256:	4604      	mov	r4, r0
   16258:	2800      	cmp	r0, #0
   1625a:	d07e      	beq.n	1635a <at_parser_max_params_from_str+0x10e>
   1625c:	2a00      	cmp	r2, #0
   1625e:	d07c      	beq.n	1635a <at_parser_max_params_from_str+0x10e>
   16260:	6853      	ldr	r3, [r2, #4]
   16262:	2b00      	cmp	r3, #0
   16264:	d079      	beq.n	1635a <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   16266:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   16268:	4610      	mov	r0, r2
   1626a:	f012 fb0a 	bl	28882 <at_params_list_clear>
	const char *str = *at_params_str;
   1626e:	9401      	str	r4, [sp, #4]
	int index = 0;
   16270:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   16272:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   16274:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 16364 <at_parser_max_params_from_str+0x118>
	max_params_count = MIN(max_params_count, list->param_count);
   16278:	429f      	cmp	r7, r3
   1627a:	bf28      	it	cs
   1627c:	461f      	movcs	r7, r3
	state = IDLE;
   1627e:	4b38      	ldr	r3, [pc, #224]	; (16360 <at_parser_max_params_from_str+0x114>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   16280:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 16368 <at_parser_max_params_from_str+0x11c>
   16284:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   16286:	9b01      	ldr	r3, [sp, #4]
   16288:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1628a:	2a00      	cmp	r2, #0
   1628c:	d04b      	beq.n	16326 <at_parser_max_params_from_str+0xda>
   1628e:	42a7      	cmp	r7, r4
   16290:	d949      	bls.n	16326 <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   16292:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   16296:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   16298:	0711      	lsls	r1, r2, #28
			str++;
   1629a:	bf48      	it	mi
   1629c:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   1629e:	4621      	mov	r1, r4
			str++;
   162a0:	bf48      	it	mi
   162a2:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   162a4:	f7ff ff72 	bl	1618c <at_parse_detect_type>
   162a8:	1c42      	adds	r2, r0, #1
   162aa:	d03c      	beq.n	16326 <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   162ac:	4632      	mov	r2, r6
   162ae:	4621      	mov	r1, r4
   162b0:	a801      	add	r0, sp, #4
   162b2:	f7ff fe5d 	bl	15f70 <at_parse_process_element>
   162b6:	1c43      	adds	r3, r0, #1
   162b8:	d035      	beq.n	16326 <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   162ba:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   162bc:	781a      	ldrb	r2, [r3, #0]
   162be:	3a2c      	subs	r2, #44	; 0x2c
   162c0:	b2d2      	uxtb	r2, r2
   162c2:	2a11      	cmp	r2, #17
   162c4:	d81a      	bhi.n	162fc <at_parser_max_params_from_str+0xb0>
   162c6:	fa2a f202 	lsr.w	r2, sl, r2
   162ca:	07d1      	lsls	r1, r2, #31
   162cc:	d516      	bpl.n	162fc <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   162ce:	7858      	ldrb	r0, [r3, #1]
   162d0:	f012 fa85 	bl	287de <is_lfcr>
   162d4:	b178      	cbz	r0, 162f6 <at_parser_max_params_from_str+0xaa>
				index++;
   162d6:	3401      	adds	r4, #1
				if (index == max_params) {
   162d8:	42bc      	cmp	r4, r7
   162da:	d039      	beq.n	16350 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   162dc:	4621      	mov	r1, r4
   162de:	a801      	add	r0, sp, #4
   162e0:	f7ff ff54 	bl	1618c <at_parse_detect_type>
   162e4:	1c42      	adds	r2, r0, #1
   162e6:	d01e      	beq.n	16326 <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   162e8:	4632      	mov	r2, r6
   162ea:	4621      	mov	r1, r4
   162ec:	a801      	add	r0, sp, #4
   162ee:	f7ff fe3f 	bl	15f70 <at_parse_process_element>
   162f2:	1c43      	adds	r3, r0, #1
   162f4:	d017      	beq.n	16326 <at_parser_max_params_from_str+0xda>
			str++;
   162f6:	9b01      	ldr	r3, [sp, #4]
   162f8:	3301      	adds	r3, #1
   162fa:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   162fc:	9a01      	ldr	r2, [sp, #4]
   162fe:	7810      	ldrb	r0, [r2, #0]
   16300:	f012 fa6d 	bl	287de <is_lfcr>
   16304:	b1f8      	cbz	r0, 16346 <at_parser_max_params_from_str+0xfa>
   16306:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   16308:	7811      	ldrb	r1, [r2, #0]
   1630a:	4693      	mov	fp, r2
   1630c:	4608      	mov	r0, r1
   1630e:	3201      	adds	r2, #1
   16310:	f012 fa65 	bl	287de <is_lfcr>
   16314:	2800      	cmp	r0, #0
   16316:	d1f7      	bne.n	16308 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16318:	b119      	cbz	r1, 16322 <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1631a:	292b      	cmp	r1, #43	; 0x2b
   1631c:	d001      	beq.n	16322 <at_parser_max_params_from_str+0xd6>
   1631e:	2925      	cmp	r1, #37	; 0x25
   16320:	d111      	bne.n	16346 <at_parser_max_params_from_str+0xfa>
				str += i;
   16322:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   16326:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   16328:	b9a5      	cbnz	r5, 16354 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1632a:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   1632c:	2a00      	cmp	r2, #0
   1632e:	bf0c      	ite	eq
   16330:	2000      	moveq	r0, #0
   16332:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   16336:	f1b8 0f00 	cmp.w	r8, #0
   1633a:	d001      	beq.n	16340 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   1633c:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   16340:	b003      	add	sp, #12
   16342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   16346:	3401      	adds	r4, #1
			oversized = true;
   16348:	42bc      	cmp	r4, r7
   1634a:	bf08      	it	eq
   1634c:	2501      	moveq	r5, #1
   1634e:	e79a      	b.n	16286 <at_parser_max_params_from_str+0x3a>
					oversized = true;
   16350:	4605      	mov	r5, r0
   16352:	e7e8      	b.n	16326 <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   16354:	f06f 0006 	mvn.w	r0, #6
   16358:	e7ed      	b.n	16336 <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   1635a:	f06f 0015 	mvn.w	r0, #21
   1635e:	e7ef      	b.n	16340 <at_parser_max_params_from_str+0xf4>
   16360:	2002af6a 	.word	0x2002af6a
   16364:	0002d0fe 	.word	0x0002d0fe
   16368:	00024001 	.word	0x00024001

0001636c <parse_psm_cfg>:
	char timer_str[9] = {0};
   1636c:	2300      	movs	r3, #0
{
   1636e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16372:	b086      	sub	sp, #24
	char timer_str[9] = {0};
   16374:	e9cd 3303 	strd	r3, r3, [sp, #12]
   16378:	f88d 3014 	strb.w	r3, [sp, #20]
	char unit_str[4] = {0};
   1637c:	9301      	str	r3, [sp, #4]
	size_t timer_str_len = sizeof(timer_str) - 1;
   1637e:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   16380:	2900      	cmp	r1, #0
	size_t timer_str_len = sizeof(timer_str) - 1;
   16382:	9302      	str	r3, [sp, #8]
{
   16384:	4616      	mov	r6, r2
	err = at_params_string_get(at_params,
   16386:	bf14      	ite	ne
   16388:	2108      	movne	r1, #8
   1638a:	2109      	moveq	r1, #9
   1638c:	446b      	add	r3, sp
   1638e:	aa03      	add	r2, sp, #12
{
   16390:	4607      	mov	r7, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   16392:	bf14      	ite	ne
   16394:	f04f 0807 	movne.w	r8, #7
   16398:	f04f 0808 	moveq.w	r8, #8
	err = at_params_string_get(at_params,
   1639c:	f012 fb40 	bl	28a20 <at_params_string_get>
	if (err) {
   163a0:	4604      	mov	r4, r0
   163a2:	b170      	cbz	r0, 163c2 <parse_psm_cfg+0x56>
   163a4:	4832      	ldr	r0, [pc, #200]	; (16470 <parse_psm_cfg+0x104>)
   163a6:	4b33      	ldr	r3, [pc, #204]	; (16474 <parse_psm_cfg+0x108>)
		LOG_ERR("Could not get TAU, error: %d", err);
   163a8:	4622      	mov	r2, r4
   163aa:	1ac0      	subs	r0, r0, r3
   163ac:	08c0      	lsrs	r0, r0, #3
   163ae:	0180      	lsls	r0, r0, #6
   163b0:	4931      	ldr	r1, [pc, #196]	; (16478 <parse_psm_cfg+0x10c>)
   163b2:	f040 0001 	orr.w	r0, r0, #1
   163b6:	f00e f8a3 	bl	24500 <log_string_sync>
}
   163ba:	4620      	mov	r0, r4
   163bc:	b006      	add	sp, #24
   163be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   163c2:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   163c4:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   163c6:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   163ca:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   163cc:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   163ce:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   163d0:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   163d4:	f00b fe7e 	bl	220d4 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   163d8:	2807      	cmp	r0, #7
   163da:	d90c      	bls.n	163f6 <parse_psm_cfg+0x8a>
   163dc:	4824      	ldr	r0, [pc, #144]	; (16470 <parse_psm_cfg+0x104>)
   163de:	4b25      	ldr	r3, [pc, #148]	; (16474 <parse_psm_cfg+0x108>)
		LOG_ERR("Unable to parse periodic TAU string");
   163e0:	4926      	ldr	r1, [pc, #152]	; (1647c <parse_psm_cfg+0x110>)
   163e2:	1ac0      	subs	r0, r0, r3
   163e4:	08c0      	lsrs	r0, r0, #3
   163e6:	0180      	lsls	r0, r0, #6
		LOG_ERR("Unable to parse active time string");
   163e8:	f040 0001 	orr.w	r0, r0, #1
   163ec:	f00e f888 	bl	24500 <log_string_sync>
		return err;
   163f0:	f06f 0415 	mvn.w	r4, #21
   163f4:	e7e1      	b.n	163ba <parse_psm_cfg+0x4e>
	timer_unit = t3412_lookup[lut_idx];
   163f6:	4b22      	ldr	r3, [pc, #136]	; (16480 <parse_psm_cfg+0x114>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   163f8:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   163fa:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   163fe:	4621      	mov	r1, r4
   16400:	f10d 000f 	add.w	r0, sp, #15
   16404:	f00b fe66 	bl	220d4 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   16408:	b1f5      	cbz	r5, 16448 <parse_psm_cfg+0xdc>
   1640a:	4345      	muls	r5, r0
	err = at_params_string_get(at_params,
   1640c:	4641      	mov	r1, r8
   1640e:	4638      	mov	r0, r7
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   16410:	6035      	str	r5, [r6, #0]
	err = at_params_string_get(at_params,
   16412:	ab02      	add	r3, sp, #8
   16414:	aa03      	add	r2, sp, #12
   16416:	f012 fb03 	bl	28a20 <at_params_string_get>
	if (err) {
   1641a:	4604      	mov	r4, r0
   1641c:	2800      	cmp	r0, #0
   1641e:	d1c1      	bne.n	163a4 <parse_psm_cfg+0x38>
	memcpy(unit_str, timer_str, unit_str_len);
   16420:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   16422:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   16424:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   16428:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   1642a:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   1642c:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   1642e:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   16432:	f00b fe4f 	bl	220d4 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   16436:	2807      	cmp	r0, #7
   16438:	d909      	bls.n	1644e <parse_psm_cfg+0xe2>
   1643a:	480d      	ldr	r0, [pc, #52]	; (16470 <parse_psm_cfg+0x104>)
   1643c:	4b0d      	ldr	r3, [pc, #52]	; (16474 <parse_psm_cfg+0x108>)
		LOG_ERR("Unable to parse active time string");
   1643e:	4911      	ldr	r1, [pc, #68]	; (16484 <parse_psm_cfg+0x118>)
   16440:	1ac0      	subs	r0, r0, r3
   16442:	08c0      	lsrs	r0, r0, #3
   16444:	0180      	lsls	r0, r0, #6
   16446:	e7cf      	b.n	163e8 <parse_psm_cfg+0x7c>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   16448:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1644c:	e7de      	b.n	1640c <parse_psm_cfg+0xa0>
	timer_unit = t3324_lookup[lut_idx];
   1644e:	4b0e      	ldr	r3, [pc, #56]	; (16488 <parse_psm_cfg+0x11c>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   16450:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   16452:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   16456:	4621      	mov	r1, r4
   16458:	f10d 000f 	add.w	r0, sp, #15
   1645c:	f00b fe3a 	bl	220d4 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   16460:	b115      	cbz	r5, 16468 <parse_psm_cfg+0xfc>
   16462:	4368      	muls	r0, r5
   16464:	6070      	str	r0, [r6, #4]
	return 0;
   16466:	e7a8      	b.n	163ba <parse_psm_cfg+0x4e>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   16468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1646c:	e7fa      	b.n	16464 <parse_psm_cfg+0xf8>
   1646e:	bf00      	nop
   16470:	0002a30c 	.word	0x0002a30c
   16474:	0002a2c4 	.word	0x0002a2c4
   16478:	0002c1a7 	.word	0x0002c1a7
   1647c:	0002c1c4 	.word	0x0002c1c4
   16480:	0002a75c 	.word	0x0002a75c
   16484:	0002c1e8 	.word	0x0002c1e8
   16488:	0002a73c 	.word	0x0002a73c

0001648c <lte_lc_offline>:
{
   1648c:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   1648e:	2300      	movs	r3, #0
   16490:	4804      	ldr	r0, [pc, #16]	; (164a4 <lte_lc_offline+0x18>)
   16492:	461a      	mov	r2, r3
   16494:	4619      	mov	r1, r3
   16496:	f7ff faa5 	bl	159e4 <at_cmd_write>
   1649a:	2800      	cmp	r0, #0
}
   1649c:	bf18      	it	ne
   1649e:	f06f 0004 	mvnne.w	r0, #4
   164a2:	bd08      	pop	{r3, pc}
   164a4:	0002c9a6 	.word	0x0002c9a6

000164a8 <lte_lc_power_off>:
{
   164a8:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   164aa:	2300      	movs	r3, #0
   164ac:	4804      	ldr	r0, [pc, #16]	; (164c0 <lte_lc_power_off+0x18>)
   164ae:	461a      	mov	r2, r3
   164b0:	4619      	mov	r1, r3
   164b2:	f7ff fa97 	bl	159e4 <at_cmd_write>
   164b6:	2800      	cmp	r0, #0
}
   164b8:	bf18      	it	ne
   164ba:	f06f 0004 	mvnne.w	r0, #4
   164be:	bd08      	pop	{r3, pc}
   164c0:	0002c9b0 	.word	0x0002c9b0

000164c4 <lte_lc_normal>:
{
   164c4:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   164c6:	2300      	movs	r3, #0
   164c8:	4804      	ldr	r0, [pc, #16]	; (164dc <lte_lc_normal+0x18>)
   164ca:	461a      	mov	r2, r3
   164cc:	4619      	mov	r1, r3
   164ce:	f7ff fa89 	bl	159e4 <at_cmd_write>
   164d2:	2800      	cmp	r0, #0
}
   164d4:	bf18      	it	ne
   164d6:	f06f 0004 	mvnne.w	r0, #4
   164da:	bd08      	pop	{r3, pc}
   164dc:	0002c99c 	.word	0x0002c99c

000164e0 <lte_lc_psm_req>:
{
   164e0:	b500      	push	{lr}
	if (enable) {
   164e2:	4603      	mov	r3, r0
{
   164e4:	b08d      	sub	sp, #52	; 0x34
	if (enable) {
   164e6:	b1a0      	cbz	r0, 16512 <lte_lc_psm_req+0x32>
		snprintf(psm_req, sizeof(psm_req),
   164e8:	4b0c      	ldr	r3, [pc, #48]	; (1651c <lte_lc_psm_req+0x3c>)
   164ea:	2128      	movs	r1, #40	; 0x28
   164ec:	4a0c      	ldr	r2, [pc, #48]	; (16520 <lte_lc_psm_req+0x40>)
   164ee:	9300      	str	r3, [sp, #0]
   164f0:	a802      	add	r0, sp, #8
   164f2:	4b0c      	ldr	r3, [pc, #48]	; (16524 <lte_lc_psm_req+0x44>)
   164f4:	f00b fc4c 	bl	21d90 <sniprintf>
		err = at_cmd_write(psm_req, NULL, 0, NULL);
   164f8:	2300      	movs	r3, #0
   164fa:	461a      	mov	r2, r3
   164fc:	4619      	mov	r1, r3
   164fe:	a802      	add	r0, sp, #8
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   16500:	f7ff fa70 	bl	159e4 <at_cmd_write>
		return -EIO;
   16504:	2800      	cmp	r0, #0
}
   16506:	bf18      	it	ne
   16508:	f06f 0004 	mvnne.w	r0, #4
   1650c:	b00d      	add	sp, #52	; 0x34
   1650e:	f85d fb04 	ldr.w	pc, [sp], #4
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   16512:	4602      	mov	r2, r0
   16514:	4601      	mov	r1, r0
   16516:	4804      	ldr	r0, [pc, #16]	; (16528 <lte_lc_psm_req+0x48>)
   16518:	e7f2      	b.n	16500 <lte_lc_psm_req+0x20>
   1651a:	bf00      	nop
   1651c:	200207b0 	.word	0x200207b0
   16520:	0002c20b 	.word	0x0002c20b
   16524:	200207b9 	.word	0x200207b9
   16528:	0002c9ba 	.word	0x0002c9ba

0001652c <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   1652c:	b510      	push	{r4, lr}
   1652e:	b08e      	sub	sp, #56	; 0x38
	int err, len;
	char cmd[50];

	switch (mode) {
   16530:	2800      	cmp	r0, #0
   16532:	d03d      	beq.n	165b0 <lte_lc_system_mode_set+0x84>
   16534:	1e43      	subs	r3, r0, #1
   16536:	2b04      	cmp	r3, #4
   16538:	d90e      	bls.n	16558 <lte_lc_system_mode_set+0x2c>
   1653a:	4b1e      	ldr	r3, [pc, #120]	; (165b4 <lte_lc_system_mode_set+0x88>)
   1653c:	481e      	ldr	r0, [pc, #120]	; (165b8 <lte_lc_system_mode_set+0x8c>)
	case LTE_LC_SYSTEM_MODE_NBIOT:
	case LTE_LC_SYSTEM_MODE_NBIOT_GPS:
	case LTE_LC_SYSTEM_MODE_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested");
   1653e:	491f      	ldr	r1, [pc, #124]	; (165bc <lte_lc_system_mode_set+0x90>)
   16540:	1ac0      	subs	r0, r0, r3
   16542:	08c0      	lsrs	r0, r0, #3
   16544:	0180      	lsls	r0, r0, #6
   16546:	f040 0001 	orr.w	r0, r0, #1
   1654a:	f00d ffd9 	bl	24500 <log_string_sync>
		return -EINVAL;
   1654e:	f06f 0415 	mvn.w	r4, #21
	if (err) {
		LOG_ERR("Could not send AT command, error: %d", err);
	}

	return err;
}
   16552:	4620      	mov	r0, r4
   16554:	b00e      	add	sp, #56	; 0x38
   16556:	bd10      	pop	{r4, pc}
	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   16558:	4b19      	ldr	r3, [pc, #100]	; (165c0 <lte_lc_system_mode_set+0x94>)
   1655a:	2132      	movs	r1, #50	; 0x32
   1655c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   16560:	4a18      	ldr	r2, [pc, #96]	; (165c4 <lte_lc_system_mode_set+0x98>)
   16562:	a801      	add	r0, sp, #4
   16564:	f00d fd22 	bl	23fac <snprintk>
	if (len < 0) {
   16568:	2800      	cmp	r0, #0
   1656a:	da0c      	bge.n	16586 <lte_lc_system_mode_set+0x5a>
   1656c:	4b11      	ldr	r3, [pc, #68]	; (165b4 <lte_lc_system_mode_set+0x88>)
   1656e:	4812      	ldr	r0, [pc, #72]	; (165b8 <lte_lc_system_mode_set+0x8c>)
		LOG_ERR("Could not construct system mode command");
   16570:	4915      	ldr	r1, [pc, #84]	; (165c8 <lte_lc_system_mode_set+0x9c>)
   16572:	1ac0      	subs	r0, r0, r3
   16574:	08c0      	lsrs	r0, r0, #3
   16576:	0180      	lsls	r0, r0, #6
   16578:	f040 0001 	orr.w	r0, r0, #1
   1657c:	f00d ffc0 	bl	24500 <log_string_sync>
		return -EFAULT;
   16580:	f06f 040d 	mvn.w	r4, #13
   16584:	e7e5      	b.n	16552 <lte_lc_system_mode_set+0x26>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   16586:	2300      	movs	r3, #0
   16588:	a801      	add	r0, sp, #4
   1658a:	461a      	mov	r2, r3
   1658c:	4619      	mov	r1, r3
   1658e:	f7ff fa29 	bl	159e4 <at_cmd_write>
	if (err) {
   16592:	4604      	mov	r4, r0
   16594:	2800      	cmp	r0, #0
   16596:	d0dc      	beq.n	16552 <lte_lc_system_mode_set+0x26>
   16598:	4b06      	ldr	r3, [pc, #24]	; (165b4 <lte_lc_system_mode_set+0x88>)
   1659a:	4807      	ldr	r0, [pc, #28]	; (165b8 <lte_lc_system_mode_set+0x8c>)
		LOG_ERR("Could not send AT command, error: %d", err);
   1659c:	4622      	mov	r2, r4
   1659e:	1ac0      	subs	r0, r0, r3
   165a0:	08c0      	lsrs	r0, r0, #3
   165a2:	0180      	lsls	r0, r0, #6
   165a4:	4909      	ldr	r1, [pc, #36]	; (165cc <lte_lc_system_mode_set+0xa0>)
   165a6:	f040 0001 	orr.w	r0, r0, #1
   165aa:	f00d ffa9 	bl	24500 <log_string_sync>
   165ae:	e7d0      	b.n	16552 <lte_lc_system_mode_set+0x26>
	switch (mode) {
   165b0:	4604      	mov	r4, r0
   165b2:	e7ce      	b.n	16552 <lte_lc_system_mode_set+0x26>
   165b4:	0002a2c4 	.word	0x0002a2c4
   165b8:	0002a30c 	.word	0x0002a30c
   165bc:	0002c3d0 	.word	0x0002c3d0
   165c0:	0002a724 	.word	0x0002a724
   165c4:	0002c3ee 	.word	0x0002c3ee
   165c8:	0002c401 	.word	0x0002c401
   165cc:	0002c429 	.word	0x0002c429

000165d0 <w_lte_lc_init>:
{
   165d0:	b570      	push	{r4, r5, r6, lr}
	if (is_initialized) {
   165d2:	4e2f      	ldr	r6, [pc, #188]	; (16690 <w_lte_lc_init+0xc0>)
{
   165d4:	b08e      	sub	sp, #56	; 0x38
	if (is_initialized) {
   165d6:	7830      	ldrb	r0, [r6, #0]
   165d8:	2800      	cmp	r0, #0
   165da:	d152      	bne.n	16682 <w_lte_lc_init+0xb2>
	err = at_notif_register_handler(NULL, at_handler);
   165dc:	492d      	ldr	r1, [pc, #180]	; (16694 <w_lte_lc_init+0xc4>)
   165de:	f7ff faaf 	bl	15b40 <at_notif_register_handler>
	if (err) {
   165e2:	4604      	mov	r4, r0
   165e4:	b168      	cbz	r0, 16602 <w_lte_lc_init+0x32>
		LOG_ERR("Can't register AT handler, error: %d", err);
   165e6:	4622      	mov	r2, r4
   165e8:	482b      	ldr	r0, [pc, #172]	; (16698 <w_lte_lc_init+0xc8>)
   165ea:	4b2c      	ldr	r3, [pc, #176]	; (1669c <w_lte_lc_init+0xcc>)
   165ec:	492c      	ldr	r1, [pc, #176]	; (166a0 <w_lte_lc_init+0xd0>)
   165ee:	1ac0      	subs	r0, r0, r3
   165f0:	08c0      	lsrs	r0, r0, #3
   165f2:	0180      	lsls	r0, r0, #6
		LOG_ERR("Could not set system mode, error: %d", err);
   165f4:	f040 0001 	orr.w	r0, r0, #1
   165f8:	f00d ff82 	bl	24500 <log_string_sync>
}
   165fc:	4620      	mov	r0, r4
   165fe:	b00e      	add	sp, #56	; 0x38
   16600:	bd70      	pop	{r4, r5, r6, pc}
	err = lte_lc_system_mode_set(sys_mode_preferred);
   16602:	2004      	movs	r0, #4
   16604:	f7ff ff92 	bl	1652c <lte_lc_system_mode_set>
	if (err) {
   16608:	4604      	mov	r4, r0
   1660a:	b138      	cbz	r0, 1661c <w_lte_lc_init+0x4c>
   1660c:	4822      	ldr	r0, [pc, #136]	; (16698 <w_lte_lc_init+0xc8>)
   1660e:	4b23      	ldr	r3, [pc, #140]	; (1669c <w_lte_lc_init+0xcc>)
		LOG_ERR("Could not set system mode, error: %d", err);
   16610:	4622      	mov	r2, r4
   16612:	1ac0      	subs	r0, r0, r3
   16614:	08c0      	lsrs	r0, r0, #3
   16616:	4923      	ldr	r1, [pc, #140]	; (166a4 <w_lte_lc_init+0xd4>)
   16618:	0180      	lsls	r0, r0, #6
   1661a:	e7eb      	b.n	165f4 <w_lte_lc_init+0x24>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   1661c:	4603      	mov	r3, r0
   1661e:	4602      	mov	r2, r0
   16620:	4601      	mov	r1, r0
   16622:	4821      	ldr	r0, [pc, #132]	; (166a8 <w_lte_lc_init+0xd8>)
   16624:	f7ff f9de 	bl	159e4 <at_cmd_write>
   16628:	4604      	mov	r4, r0
   1662a:	bb68      	cbnz	r0, 16688 <w_lte_lc_init+0xb8>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   1662c:	4603      	mov	r3, r0
   1662e:	4602      	mov	r2, r0
   16630:	4601      	mov	r1, r0
   16632:	481e      	ldr	r0, [pc, #120]	; (166ac <w_lte_lc_init+0xdc>)
   16634:	f7ff f9d6 	bl	159e4 <at_cmd_write>
	if (err) {
   16638:	b300      	cbz	r0, 1667c <w_lte_lc_init+0xac>
   1663a:	4b18      	ldr	r3, [pc, #96]	; (1669c <w_lte_lc_init+0xcc>)
   1663c:	4d16      	ldr	r5, [pc, #88]	; (16698 <w_lte_lc_init+0xc8>)
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   1663e:	4a1b      	ldr	r2, [pc, #108]	; (166ac <w_lte_lc_init+0xdc>)
   16640:	1aed      	subs	r5, r5, r3
   16642:	08ed      	lsrs	r5, r5, #3
   16644:	01ad      	lsls	r5, r5, #6
   16646:	f045 0502 	orr.w	r5, r5, #2
   1664a:	4603      	mov	r3, r0
   1664c:	4918      	ldr	r1, [pc, #96]	; (166b0 <w_lte_lc_init+0xe0>)
   1664e:	4628      	mov	r0, r5
   16650:	f00d ff56 	bl	24500 <log_string_sync>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   16654:	4628      	mov	r0, r5
   16656:	4a15      	ldr	r2, [pc, #84]	; (166ac <w_lte_lc_init+0xdc>)
   16658:	4916      	ldr	r1, [pc, #88]	; (166b4 <w_lte_lc_init+0xe4>)
   1665a:	f00d ff51 	bl	24500 <log_string_sync>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   1665e:	4623      	mov	r3, r4
   16660:	2232      	movs	r2, #50	; 0x32
   16662:	4815      	ldr	r0, [pc, #84]	; (166b8 <w_lte_lc_init+0xe8>)
   16664:	a901      	add	r1, sp, #4
   16666:	f7ff f9bd 	bl	159e4 <at_cmd_write>
		if (err == 0) {
   1666a:	b938      	cbnz	r0, 1667c <w_lte_lc_init+0xac>
			LOG_WRN("Current modem firmware version: %s",
   1666c:	a801      	add	r0, sp, #4
   1666e:	f00d ff59 	bl	24524 <log_strdup>
   16672:	4912      	ldr	r1, [pc, #72]	; (166bc <w_lte_lc_init+0xec>)
   16674:	4602      	mov	r2, r0
   16676:	4628      	mov	r0, r5
   16678:	f00d ff42 	bl	24500 <log_string_sync>
	is_initialized = true;
   1667c:	2301      	movs	r3, #1
   1667e:	7033      	strb	r3, [r6, #0]
	return 0;
   16680:	e7bc      	b.n	165fc <w_lte_lc_init+0x2c>
		return -EALREADY;
   16682:	f06f 0477 	mvn.w	r4, #119	; 0x77
   16686:	e7b9      	b.n	165fc <w_lte_lc_init+0x2c>
		return -EIO;
   16688:	f06f 0404 	mvn.w	r4, #4
   1668c:	e7b6      	b.n	165fc <w_lte_lc_init+0x2c>
   1668e:	bf00      	nop
   16690:	2002af6b 	.word	0x2002af6b
   16694:	0000d111 	.word	0x0000d111
   16698:	0002a30c 	.word	0x0002a30c
   1669c:	0002a2c4 	.word	0x0002a2c4
   166a0:	0002c44e 	.word	0x0002c44e
   166a4:	0002c473 	.word	0x0002c473
   166a8:	0002c986 	.word	0x0002c986
   166ac:	0002c991 	.word	0x0002c991
   166b0:	0002c498 	.word	0x0002c498
   166b4:	0002c4ca 	.word	0x0002c4ca
   166b8:	0002c4f5 	.word	0x0002c4f5
   166bc:	0002c4fd 	.word	0x0002c4fd

000166c0 <w_lte_lc_connect>:
{
   166c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!is_initialized) {
   166c2:	4b21      	ldr	r3, [pc, #132]	; (16748 <w_lte_lc_connect+0x88>)
{
   166c4:	4605      	mov	r5, r0
   166c6:	4c21      	ldr	r4, [pc, #132]	; (1674c <w_lte_lc_connect+0x8c>)
   166c8:	4821      	ldr	r0, [pc, #132]	; (16750 <w_lte_lc_connect+0x90>)
	if (!is_initialized) {
   166ca:	781b      	ldrb	r3, [r3, #0]
   166cc:	1a24      	subs	r4, r4, r0
   166ce:	08e4      	lsrs	r4, r4, #3
   166d0:	b943      	cbnz	r3, 166e4 <w_lte_lc_connect+0x24>
		LOG_ERR("The LTE link controller is not initialized");
   166d2:	01a4      	lsls	r4, r4, #6
   166d4:	f044 0001 	orr.w	r0, r4, #1
   166d8:	491e      	ldr	r1, [pc, #120]	; (16754 <w_lte_lc_connect+0x94>)
   166da:	f00d ff11 	bl	24500 <log_string_sync>
		return -EPERM;
   166de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   166e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   166e4:	2201      	movs	r2, #1
   166e6:	2100      	movs	r1, #0
   166e8:	481b      	ldr	r0, [pc, #108]	; (16758 <w_lte_lc_connect+0x98>)
   166ea:	f012 fc82 	bl	28ff2 <z_impl_k_sem_init>
   166ee:	2702      	movs	r7, #2
	enum lte_lc_system_mode current_network_mode = sys_mode_preferred;
   166f0:	2004      	movs	r0, #4
			LOG_INF("Network connection attempt timed out");
   166f2:	01a4      	lsls	r4, r4, #6
	return z_impl_k_sem_take(sem, timeout);
   166f4:	4e18      	ldr	r6, [pc, #96]	; (16758 <w_lte_lc_connect+0x98>)
   166f6:	f044 0403 	orr.w	r4, r4, #3
		err = lte_lc_system_mode_set(current_network_mode);
   166fa:	f7ff ff17 	bl	1652c <lte_lc_system_mode_set>
		if (err) {
   166fe:	2800      	cmp	r0, #0
   16700:	d1ef      	bne.n	166e2 <w_lte_lc_connect+0x22>
		err = lte_lc_normal();
   16702:	f7ff fedf 	bl	164c4 <lte_lc_normal>
		if (err || !blocking) {
   16706:	2800      	cmp	r0, #0
   16708:	d1eb      	bne.n	166e2 <w_lte_lc_connect+0x22>
   1670a:	2d00      	cmp	r5, #0
   1670c:	d0e9      	beq.n	166e2 <w_lte_lc_connect+0x22>
   1670e:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   16712:	2300      	movs	r3, #0
   16714:	4630      	mov	r0, r6
   16716:	f00a f827 	bl	20768 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   1671a:	f110 0f0b 	cmn.w	r0, #11
   1671e:	d1e0      	bne.n	166e2 <w_lte_lc_connect+0x22>
			LOG_INF("Network connection attempt timed out");
   16720:	4620      	mov	r0, r4
   16722:	490e      	ldr	r1, [pc, #56]	; (1675c <w_lte_lc_connect+0x9c>)
   16724:	f00d feec 	bl	24500 <log_string_sync>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   16728:	2f01      	cmp	r7, #1
   1672a:	d00a      	beq.n	16742 <w_lte_lc_connect+0x82>
				err = lte_lc_offline();
   1672c:	f7ff feae 	bl	1648c <lte_lc_offline>
				if (err) {
   16730:	2800      	cmp	r0, #0
   16732:	d1d6      	bne.n	166e2 <w_lte_lc_connect+0x22>
				LOG_INF("Using fallback network mode");
   16734:	4620      	mov	r0, r4
   16736:	490a      	ldr	r1, [pc, #40]	; (16760 <w_lte_lc_connect+0xa0>)
   16738:	f00d fee2 	bl	24500 <log_string_sync>
	} while (retry);
   1673c:	2701      	movs	r7, #1
				current_network_mode = sys_mode_fallback;
   1673e:	2005      	movs	r0, #5
   16740:	e7db      	b.n	166fa <w_lte_lc_connect+0x3a>
				err = -ETIMEDOUT;
   16742:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} while (retry);
   16746:	e7cc      	b.n	166e2 <w_lte_lc_connect+0x22>
   16748:	2002af6b 	.word	0x2002af6b
   1674c:	0002a30c 	.word	0x0002a30c
   16750:	0002a2c4 	.word	0x0002a2c4
   16754:	0002c520 	.word	0x0002c520
   16758:	200230cc 	.word	0x200230cc
   1675c:	0002c54b 	.word	0x0002c54b
   16760:	0002c570 	.word	0x0002c570

00016764 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   16764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   16768:	2400      	movs	r4, #0
{
   1676a:	b090      	sub	sp, #64	; 0x40
   1676c:	4606      	mov	r6, r0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   1676e:	221a      	movs	r2, #26
   16770:	4621      	mov	r1, r4
   16772:	a809      	add	r0, sp, #36	; 0x24
	struct at_param_list resp_list = {0};
   16774:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   16778:	9408      	str	r4, [sp, #32]
   1677a:	f012 feb4 	bl	294e6 <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   1677e:	230d      	movs	r3, #13
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   16780:	e9cd 4404 	strd	r4, r4, [sp, #16]
   16784:	9406      	str	r4, [sp, #24]
   16786:	f88d 401c 	strb.w	r4, [sp, #28]
	size_t response_prefix_len = sizeof(response_prefix);
   1678a:	9300      	str	r3, [sp, #0]

	if (mode == NULL) {
   1678c:	2e00      	cmp	r6, #0
   1678e:	f000 80a6 	beq.w	168de <lte_lc_system_mode_get+0x17a>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   16792:	4623      	mov	r3, r4
   16794:	221e      	movs	r2, #30
   16796:	4853      	ldr	r0, [pc, #332]	; (168e4 <lte_lc_system_mode_get+0x180>)
   16798:	a908      	add	r1, sp, #32
   1679a:	f7ff f923 	bl	159e4 <at_cmd_write>
			   NULL);
	if (err) {
   1679e:	4604      	mov	r4, r0
   167a0:	b168      	cbz	r0, 167be <lte_lc_system_mode_get+0x5a>
   167a2:	4851      	ldr	r0, [pc, #324]	; (168e8 <lte_lc_system_mode_get+0x184>)
   167a4:	4b51      	ldr	r3, [pc, #324]	; (168ec <lte_lc_system_mode_get+0x188>)
		LOG_ERR("Could not send AT command");
   167a6:	4952      	ldr	r1, [pc, #328]	; (168f0 <lte_lc_system_mode_get+0x18c>)
   167a8:	1ac0      	subs	r0, r0, r3
   167aa:	08c0      	lsrs	r0, r0, #3
   167ac:	0180      	lsls	r0, r0, #6
   167ae:	f040 0001 	orr.w	r0, r0, #1
   167b2:	f00d fea5 	bl	24500 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   167b6:	4620      	mov	r0, r4
   167b8:	b010      	add	sp, #64	; 0x40
   167ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   167be:	2105      	movs	r1, #5
   167c0:	a802      	add	r0, sp, #8
   167c2:	f012 f84b 	bl	2885c <at_params_list_init>
	if (err) {
   167c6:	4604      	mov	r4, r0
   167c8:	b158      	cbz	r0, 167e2 <lte_lc_system_mode_get+0x7e>
   167ca:	4b48      	ldr	r3, [pc, #288]	; (168ec <lte_lc_system_mode_get+0x188>)
   167cc:	4846      	ldr	r0, [pc, #280]	; (168e8 <lte_lc_system_mode_get+0x184>)
		LOG_ERR("Could init AT params list, error: %d", err);
   167ce:	4622      	mov	r2, r4
   167d0:	1ac0      	subs	r0, r0, r3
   167d2:	08c0      	lsrs	r0, r0, #3
   167d4:	0180      	lsls	r0, r0, #6
   167d6:	4947      	ldr	r1, [pc, #284]	; (168f4 <lte_lc_system_mode_get+0x190>)
   167d8:	f040 0001 	orr.w	r0, r0, #1
   167dc:	f00d fe90 	bl	24500 <log_string_sync>
		return err;
   167e0:	e7e9      	b.n	167b6 <lte_lc_system_mode_get+0x52>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   167e2:	4601      	mov	r1, r0
   167e4:	2305      	movs	r3, #5
   167e6:	aa02      	add	r2, sp, #8
   167e8:	a808      	add	r0, sp, #32
   167ea:	f7ff fd2f 	bl	1624c <at_parser_max_params_from_str>
	if (err) {
   167ee:	4604      	mov	r4, r0
   167f0:	b158      	cbz	r0, 1680a <lte_lc_system_mode_get+0xa6>
		LOG_ERR("Could not parse AT response, error: %d", err);
   167f2:	4622      	mov	r2, r4
   167f4:	483c      	ldr	r0, [pc, #240]	; (168e8 <lte_lc_system_mode_get+0x184>)
   167f6:	4b3d      	ldr	r3, [pc, #244]	; (168ec <lte_lc_system_mode_get+0x188>)
   167f8:	493f      	ldr	r1, [pc, #252]	; (168f8 <lte_lc_system_mode_get+0x194>)
   167fa:	1ac0      	subs	r0, r0, r3
   167fc:	08c0      	lsrs	r0, r0, #3
   167fe:	0180      	lsls	r0, r0, #6
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   16800:	f040 0001 	orr.w	r0, r0, #1
   16804:	f00d fe7c 	bl	24500 <log_string_sync>
			goto clean_exit;
   16808:	e026      	b.n	16858 <lte_lc_system_mode_get+0xf4>
	err = at_params_string_get(&resp_list,
   1680a:	4601      	mov	r1, r0
   1680c:	466b      	mov	r3, sp
   1680e:	aa04      	add	r2, sp, #16
   16810:	a802      	add	r0, sp, #8
   16812:	f012 f905 	bl	28a20 <at_params_string_get>
	if (err) {
   16816:	4605      	mov	r5, r0
   16818:	b160      	cbz	r0, 16834 <lte_lc_system_mode_get+0xd0>
   1681a:	4833      	ldr	r0, [pc, #204]	; (168e8 <lte_lc_system_mode_get+0x184>)
   1681c:	4b33      	ldr	r3, [pc, #204]	; (168ec <lte_lc_system_mode_get+0x188>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   1681e:	462a      	mov	r2, r5
   16820:	1ac0      	subs	r0, r0, r3
   16822:	08c0      	lsrs	r0, r0, #3
   16824:	0180      	lsls	r0, r0, #6
   16826:	4935      	ldr	r1, [pc, #212]	; (168fc <lte_lc_system_mode_get+0x198>)
   16828:	f040 0001 	orr.w	r0, r0, #1
   1682c:	f00d fe68 	bl	24500 <log_string_sync>
		break;
   16830:	462c      	mov	r4, r5
   16832:	e011      	b.n	16858 <lte_lc_system_mode_get+0xf4>
	if (!response_is_valid(response_prefix, response_prefix_len,
   16834:	4a32      	ldr	r2, [pc, #200]	; (16900 <lte_lc_system_mode_get+0x19c>)
   16836:	9900      	ldr	r1, [sp, #0]
   16838:	a804      	add	r0, sp, #16
   1683a:	f012 f929 	bl	28a90 <response_is_valid>
   1683e:	b978      	cbnz	r0, 16860 <lte_lc_system_mode_get+0xfc>
   16840:	4b2a      	ldr	r3, [pc, #168]	; (168ec <lte_lc_system_mode_get+0x188>)
   16842:	4829      	ldr	r0, [pc, #164]	; (168e8 <lte_lc_system_mode_get+0x184>)
		LOG_ERR("Invalid XSYSTEMMODE response");
   16844:	492f      	ldr	r1, [pc, #188]	; (16904 <lte_lc_system_mode_get+0x1a0>)
   16846:	1ac0      	subs	r0, r0, r3
   16848:	08c0      	lsrs	r0, r0, #3
   1684a:	0180      	lsls	r0, r0, #6
   1684c:	f040 0001 	orr.w	r0, r0, #1
   16850:	f00d fe56 	bl	24500 <log_string_sync>
		err = -EIO;
   16854:	f06f 0404 	mvn.w	r4, #4
	at_params_list_free(&resp_list);
   16858:	a802      	add	r0, sp, #8
   1685a:	f012 f830 	bl	288be <at_params_list_free>
	return err;
   1685e:	e7aa      	b.n	167b6 <lte_lc_system_mode_get+0x52>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   16860:	2701      	movs	r7, #1
		bitmask = param ? bitmask | BIT(i) : bitmask;
   16862:	46b8      	mov	r8, r7
		err = at_params_int_get(&resp_list, i, &param);
   16864:	4639      	mov	r1, r7
   16866:	aa01      	add	r2, sp, #4
   16868:	a802      	add	r0, sp, #8
   1686a:	f012 f8c6 	bl	289fa <at_params_int_get>
		if (err) {
   1686e:	4604      	mov	r4, r0
   16870:	b138      	cbz	r0, 16882 <lte_lc_system_mode_get+0x11e>
   16872:	481d      	ldr	r0, [pc, #116]	; (168e8 <lte_lc_system_mode_get+0x184>)
   16874:	4b1d      	ldr	r3, [pc, #116]	; (168ec <lte_lc_system_mode_get+0x188>)
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   16876:	4622      	mov	r2, r4
   16878:	1ac0      	subs	r0, r0, r3
   1687a:	08c0      	lsrs	r0, r0, #3
   1687c:	4922      	ldr	r1, [pc, #136]	; (16908 <lte_lc_system_mode_get+0x1a4>)
   1687e:	0180      	lsls	r0, r0, #6
   16880:	e7be      	b.n	16800 <lte_lc_system_mode_get+0x9c>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   16882:	9b01      	ldr	r3, [sp, #4]
   16884:	b113      	cbz	r3, 1688c <lte_lc_system_mode_get+0x128>
   16886:	fa08 f307 	lsl.w	r3, r8, r7
   1688a:	431d      	orrs	r5, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   1688c:	3701      	adds	r7, #1
   1688e:	2f05      	cmp	r7, #5
   16890:	d1e8      	bne.n	16864 <lte_lc_system_mode_get+0x100>
	switch (bitmask) {
   16892:	2d0c      	cmp	r5, #12
   16894:	d816      	bhi.n	168c4 <lte_lc_system_mode_get+0x160>
   16896:	e8df f005 	tbb	[pc, r5]
   1689a:	1507      	.short	0x1507
   1689c:	150d150a 	.word	0x150d150a
   168a0:	150f1515 	.word	0x150f1515
   168a4:	1511      	.short	0x1511
   168a6:	13          	.byte	0x13
   168a7:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   168a8:	2300      	movs	r3, #0
   168aa:	7033      	strb	r3, [r6, #0]
   168ac:	e7c0      	b.n	16830 <lte_lc_system_mode_get+0xcc>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   168ae:	2301      	movs	r3, #1
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   168b0:	7033      	strb	r3, [r6, #0]
		break;
   168b2:	e7d1      	b.n	16858 <lte_lc_system_mode_get+0xf4>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   168b4:	2302      	movs	r3, #2
   168b6:	e7fb      	b.n	168b0 <lte_lc_system_mode_get+0x14c>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   168b8:	2303      	movs	r3, #3
   168ba:	e7f9      	b.n	168b0 <lte_lc_system_mode_get+0x14c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   168bc:	2304      	movs	r3, #4
   168be:	e7f7      	b.n	168b0 <lte_lc_system_mode_get+0x14c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   168c0:	2305      	movs	r3, #5
   168c2:	e7f5      	b.n	168b0 <lte_lc_system_mode_get+0x14c>
   168c4:	4b09      	ldr	r3, [pc, #36]	; (168ec <lte_lc_system_mode_get+0x188>)
   168c6:	4808      	ldr	r0, [pc, #32]	; (168e8 <lte_lc_system_mode_get+0x184>)
		LOG_ERR("Invalid system mode, assuming parsing error");
   168c8:	4910      	ldr	r1, [pc, #64]	; (1690c <lte_lc_system_mode_get+0x1a8>)
   168ca:	1ac0      	subs	r0, r0, r3
   168cc:	08c0      	lsrs	r0, r0, #3
   168ce:	0180      	lsls	r0, r0, #6
   168d0:	f040 0001 	orr.w	r0, r0, #1
   168d4:	f00d fe14 	bl	24500 <log_string_sync>
		err = -EFAULT;
   168d8:	f06f 040d 	mvn.w	r4, #13
		break;
   168dc:	e7bc      	b.n	16858 <lte_lc_system_mode_get+0xf4>
		return -EINVAL;
   168de:	f06f 0415 	mvn.w	r4, #21
   168e2:	e768      	b.n	167b6 <lte_lc_system_mode_get+0x52>
   168e4:	0002c58c 	.word	0x0002c58c
   168e8:	0002a30c 	.word	0x0002a30c
   168ec:	0002a2c4 	.word	0x0002a2c4
   168f0:	0002c59c 	.word	0x0002c59c
   168f4:	0002c5b6 	.word	0x0002c5b6
   168f8:	0002c5db 	.word	0x0002c5db
   168fc:	0002c31e 	.word	0x0002c31e
   16900:	0002c602 	.word	0x0002c602
   16904:	0002c60f 	.word	0x0002c60f
   16908:	0002c62c 	.word	0x0002c62c
   1690c:	0002c654 	.word	0x0002c654

00016910 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   16910:	b530      	push	{r4, r5, lr}
	int err, resp_mode;
	struct at_param_list resp_list = {0};
   16912:	2400      	movs	r4, #0
{
   16914:	b08d      	sub	sp, #52	; 0x34
   16916:	4605      	mov	r5, r0
	char response[AT_CFUN_RESPONSE_MAX_LEN] = {0};
   16918:	2210      	movs	r2, #16
   1691a:	4621      	mov	r1, r4
   1691c:	a808      	add	r0, sp, #32
	struct at_param_list resp_list = {0};
   1691e:	e9cd 4405 	strd	r4, r4, [sp, #20]
	char response[AT_CFUN_RESPONSE_MAX_LEN] = {0};
   16922:	9407      	str	r4, [sp, #28]
   16924:	f012 fddf 	bl	294e6 <memset>
	char response_prefix[sizeof(AT_CFUN_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   16928:	2306      	movs	r3, #6
	char response_prefix[sizeof(AT_CFUN_RESPONSE_PREFIX)] = {0};
   1692a:	9403      	str	r4, [sp, #12]
   1692c:	f8ad 4010 	strh.w	r4, [sp, #16]
	size_t response_prefix_len = sizeof(response_prefix);
   16930:	9302      	str	r3, [sp, #8]

	if (mode == NULL) {
   16932:	2d00      	cmp	r5, #0
   16934:	d072      	beq.n	16a1c <lte_lc_func_mode_get+0x10c>
		return -EINVAL;
	}

	err = at_cmd_write(AT_CFUN_READ, response, sizeof(response), NULL);
   16936:	4623      	mov	r3, r4
   16938:	2214      	movs	r2, #20
   1693a:	483a      	ldr	r0, [pc, #232]	; (16a24 <lte_lc_func_mode_get+0x114>)
   1693c:	a907      	add	r1, sp, #28
   1693e:	f7ff f851 	bl	159e4 <at_cmd_write>
	if (err) {
   16942:	4604      	mov	r4, r0
   16944:	b160      	cbz	r0, 16960 <lte_lc_func_mode_get+0x50>
   16946:	4838      	ldr	r0, [pc, #224]	; (16a28 <lte_lc_func_mode_get+0x118>)
   16948:	4b38      	ldr	r3, [pc, #224]	; (16a2c <lte_lc_func_mode_get+0x11c>)
		LOG_ERR("Could not send AT command");
   1694a:	4939      	ldr	r1, [pc, #228]	; (16a30 <lte_lc_func_mode_get+0x120>)
   1694c:	1ac0      	subs	r0, r0, r3
   1694e:	08c0      	lsrs	r0, r0, #3
   16950:	0180      	lsls	r0, r0, #6
   16952:	f040 0001 	orr.w	r0, r0, #1
   16956:	f00d fdd3 	bl	24500 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1695a:	4620      	mov	r0, r4
   1695c:	b00d      	add	sp, #52	; 0x34
   1695e:	bd30      	pop	{r4, r5, pc}
	err = at_params_list_init(&resp_list, AT_CFUN_PARAMS_COUNT);
   16960:	2102      	movs	r1, #2
   16962:	a805      	add	r0, sp, #20
   16964:	f011 ff7a 	bl	2885c <at_params_list_init>
	if (err) {
   16968:	4604      	mov	r4, r0
   1696a:	b158      	cbz	r0, 16984 <lte_lc_func_mode_get+0x74>
   1696c:	4b2f      	ldr	r3, [pc, #188]	; (16a2c <lte_lc_func_mode_get+0x11c>)
   1696e:	482e      	ldr	r0, [pc, #184]	; (16a28 <lte_lc_func_mode_get+0x118>)
		LOG_ERR("Could init AT params list, error: %d", err);
   16970:	4622      	mov	r2, r4
   16972:	1ac0      	subs	r0, r0, r3
   16974:	08c0      	lsrs	r0, r0, #3
   16976:	0180      	lsls	r0, r0, #6
   16978:	492e      	ldr	r1, [pc, #184]	; (16a34 <lte_lc_func_mode_get+0x124>)
   1697a:	f040 0001 	orr.w	r0, r0, #1
   1697e:	f00d fdbf 	bl	24500 <log_string_sync>
		return err;
   16982:	e7ea      	b.n	1695a <lte_lc_func_mode_get+0x4a>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   16984:	4601      	mov	r1, r0
   16986:	2302      	movs	r3, #2
   16988:	aa05      	add	r2, sp, #20
   1698a:	a807      	add	r0, sp, #28
   1698c:	f7ff fc5e 	bl	1624c <at_parser_max_params_from_str>
	if (err) {
   16990:	4604      	mov	r4, r0
   16992:	b170      	cbz	r0, 169b2 <lte_lc_func_mode_get+0xa2>
		LOG_ERR("Could not parse AT response, error: %d", err);
   16994:	4622      	mov	r2, r4
   16996:	4824      	ldr	r0, [pc, #144]	; (16a28 <lte_lc_func_mode_get+0x118>)
   16998:	4b24      	ldr	r3, [pc, #144]	; (16a2c <lte_lc_func_mode_get+0x11c>)
   1699a:	4927      	ldr	r1, [pc, #156]	; (16a38 <lte_lc_func_mode_get+0x128>)
   1699c:	1ac0      	subs	r0, r0, r3
   1699e:	08c0      	lsrs	r0, r0, #3
   169a0:	0180      	lsls	r0, r0, #6
		LOG_ERR("Could not get response prefix, error: %d", err);
   169a2:	f040 0001 	orr.w	r0, r0, #1
   169a6:	f00d fdab 	bl	24500 <log_string_sync>
	at_params_list_free(&resp_list);
   169aa:	a805      	add	r0, sp, #20
   169ac:	f011 ff87 	bl	288be <at_params_list_free>
	return err;
   169b0:	e7d3      	b.n	1695a <lte_lc_func_mode_get+0x4a>
	err = at_params_string_get(&resp_list,
   169b2:	4601      	mov	r1, r0
   169b4:	ab02      	add	r3, sp, #8
   169b6:	aa03      	add	r2, sp, #12
   169b8:	a805      	add	r0, sp, #20
   169ba:	f012 f831 	bl	28a20 <at_params_string_get>
	if (err) {
   169be:	4604      	mov	r4, r0
   169c0:	b138      	cbz	r0, 169d2 <lte_lc_func_mode_get+0xc2>
   169c2:	4819      	ldr	r0, [pc, #100]	; (16a28 <lte_lc_func_mode_get+0x118>)
   169c4:	4b19      	ldr	r3, [pc, #100]	; (16a2c <lte_lc_func_mode_get+0x11c>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   169c6:	4622      	mov	r2, r4
   169c8:	1ac0      	subs	r0, r0, r3
   169ca:	08c0      	lsrs	r0, r0, #3
   169cc:	491b      	ldr	r1, [pc, #108]	; (16a3c <lte_lc_func_mode_get+0x12c>)
   169ce:	0180      	lsls	r0, r0, #6
   169d0:	e7e7      	b.n	169a2 <lte_lc_func_mode_get+0x92>
	if (!response_is_valid(response_prefix, response_prefix_len,
   169d2:	4a1b      	ldr	r2, [pc, #108]	; (16a40 <lte_lc_func_mode_get+0x130>)
   169d4:	9902      	ldr	r1, [sp, #8]
   169d6:	a803      	add	r0, sp, #12
   169d8:	f012 f85a 	bl	28a90 <response_is_valid>
   169dc:	b960      	cbnz	r0, 169f8 <lte_lc_func_mode_get+0xe8>
   169de:	4b13      	ldr	r3, [pc, #76]	; (16a2c <lte_lc_func_mode_get+0x11c>)
   169e0:	4811      	ldr	r0, [pc, #68]	; (16a28 <lte_lc_func_mode_get+0x118>)
		LOG_ERR("Invalid CFUN response");
   169e2:	4918      	ldr	r1, [pc, #96]	; (16a44 <lte_lc_func_mode_get+0x134>)
   169e4:	1ac0      	subs	r0, r0, r3
   169e6:	08c0      	lsrs	r0, r0, #3
   169e8:	0180      	lsls	r0, r0, #6
   169ea:	f040 0001 	orr.w	r0, r0, #1
   169ee:	f00d fd87 	bl	24500 <log_string_sync>
		err = -EIO;
   169f2:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   169f6:	e7d8      	b.n	169aa <lte_lc_func_mode_get+0x9a>
	err = at_params_int_get(&resp_list, AT_CFUN_MODE_INDEX, &resp_mode);
   169f8:	2101      	movs	r1, #1
   169fa:	aa01      	add	r2, sp, #4
   169fc:	a805      	add	r0, sp, #20
   169fe:	f011 fffc 	bl	289fa <at_params_int_get>
	if (err) {
   16a02:	4604      	mov	r4, r0
   16a04:	b138      	cbz	r0, 16a16 <lte_lc_func_mode_get+0x106>
   16a06:	4808      	ldr	r0, [pc, #32]	; (16a28 <lte_lc_func_mode_get+0x118>)
   16a08:	4b08      	ldr	r3, [pc, #32]	; (16a2c <lte_lc_func_mode_get+0x11c>)
		LOG_ERR("Could not parse mode parameter, err: %d", err);
   16a0a:	4622      	mov	r2, r4
   16a0c:	1ac0      	subs	r0, r0, r3
   16a0e:	08c0      	lsrs	r0, r0, #3
   16a10:	490d      	ldr	r1, [pc, #52]	; (16a48 <lte_lc_func_mode_get+0x138>)
   16a12:	0180      	lsls	r0, r0, #6
   16a14:	e7c5      	b.n	169a2 <lte_lc_func_mode_get+0x92>
	*mode = resp_mode;
   16a16:	9b01      	ldr	r3, [sp, #4]
   16a18:	702b      	strb	r3, [r5, #0]
   16a1a:	e7c6      	b.n	169aa <lte_lc_func_mode_get+0x9a>
		return -EINVAL;
   16a1c:	f06f 0415 	mvn.w	r4, #21
   16a20:	e79b      	b.n	1695a <lte_lc_func_mode_get+0x4a>
   16a22:	bf00      	nop
   16a24:	0002c912 	.word	0x0002c912
   16a28:	0002a30c 	.word	0x0002a30c
   16a2c:	0002a2c4 	.word	0x0002a2c4
   16a30:	0002c59c 	.word	0x0002c59c
   16a34:	0002c5b6 	.word	0x0002c5b6
   16a38:	0002c5db 	.word	0x0002c5db
   16a3c:	0002c31e 	.word	0x0002c31e
   16a40:	0002c91b 	.word	0x0002c91b
   16a44:	0002c921 	.word	0x0002c921
   16a48:	0002c62c 	.word	0x0002c62c

00016a4c <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   16a4c:	b510      	push	{r4, lr}
   16a4e:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	u32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   16a50:	4a09      	ldr	r2, [pc, #36]	; (16a78 <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   16a52:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   16a54:	7823      	ldrb	r3, [r4, #0]
   16a56:	2100      	movs	r1, #0
   16a58:	f7ff fbf8 	bl	1624c <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   16a5c:	f110 0f0b 	cmn.w	r0, #11
   16a60:	d000      	beq.n	16a64 <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   16a62:	b940      	cbnz	r0, 16a76 <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   16a64:	4804      	ldr	r0, [pc, #16]	; (16a78 <modem_info_parse.isra.0+0x2c>)
   16a66:	f011 fffe 	bl	28a66 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   16a6a:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   16a6c:	4298      	cmp	r0, r3
   16a6e:	bf94      	ite	ls
   16a70:	2000      	movls	r0, #0
   16a72:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   16a76:	bd10      	pop	{r4, pc}
   16a78:	200230f4 	.word	0x200230f4

00016a7c <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(void *context, const char *response)
{
   16a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   16a7e:	460c      	mov	r4, r1
	ARG_UNUSED(context);

	u16_t param_value;
	int err;

	if (!is_cesq_notification(response, strlen(response))) {
   16a80:	4608      	mov	r0, r1
   16a82:	f7f6 fa59 	bl	cf38 <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   16a86:	4620      	mov	r0, r4
   16a88:	4919      	ldr	r1, [pc, #100]	; (16af0 <modem_info_rsrp_subscribe_handler+0x74>)
   16a8a:	f012 ff1b 	bl	298c4 <strstr>
	if (!is_cesq_notification(response, strlen(response))) {
   16a8e:	b1b0      	cbz	r0, 16abe <modem_info_rsrp_subscribe_handler+0x42>
		return;
	}

	const struct modem_info_data rsrp_notify_data = {
   16a90:	4b18      	ldr	r3, [pc, #96]	; (16af4 <modem_info_rsrp_subscribe_handler+0x78>)
   16a92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   16a96:	ab04      	add	r3, sp, #16
   16a98:	e903 0007 	stmdb	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_SHORT,
	};

	err = modem_info_parse(&rsrp_notify_data, response);
   16a9c:	4621      	mov	r1, r4
   16a9e:	f10d 000d 	add.w	r0, sp, #13
   16aa2:	f7ff ffd3 	bl	16a4c <modem_info_parse.isra.0>
	if (err != 0) {
   16aa6:	b160      	cbz	r0, 16ac2 <modem_info_rsrp_subscribe_handler+0x46>
   16aa8:	4a13      	ldr	r2, [pc, #76]	; (16af8 <modem_info_rsrp_subscribe_handler+0x7c>)
   16aaa:	4b14      	ldr	r3, [pc, #80]	; (16afc <modem_info_rsrp_subscribe_handler+0x80>)
		LOG_ERR("modem_info_parse failed to parse "
   16aac:	4914      	ldr	r1, [pc, #80]	; (16b00 <modem_info_rsrp_subscribe_handler+0x84>)
   16aae:	1a9b      	subs	r3, r3, r2
   16ab0:	4602      	mov	r2, r0
   16ab2:	08db      	lsrs	r3, r3, #3
   16ab4:	019b      	lsls	r3, r3, #6

	err = at_params_short_get(&m_param_list,
				  rsrp_notify_data.param_index,
				  &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   16ab6:	f043 0001 	orr.w	r0, r3, #1
   16aba:	f00d fd21 	bl	24500 <log_string_sync>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   16abe:	b004      	add	sp, #16
   16ac0:	bd10      	pop	{r4, pc}
	err = at_params_short_get(&m_param_list,
   16ac2:	f89d 100c 	ldrb.w	r1, [sp, #12]
   16ac6:	480f      	ldr	r0, [pc, #60]	; (16b04 <modem_info_rsrp_subscribe_handler+0x88>)
   16ac8:	f10d 0202 	add.w	r2, sp, #2
   16acc:	f011 ff83 	bl	289d6 <at_params_short_get>
	if (err != 0) {
   16ad0:	b138      	cbz	r0, 16ae2 <modem_info_rsrp_subscribe_handler+0x66>
   16ad2:	4a09      	ldr	r2, [pc, #36]	; (16af8 <modem_info_rsrp_subscribe_handler+0x7c>)
   16ad4:	4b09      	ldr	r3, [pc, #36]	; (16afc <modem_info_rsrp_subscribe_handler+0x80>)
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   16ad6:	490c      	ldr	r1, [pc, #48]	; (16b08 <modem_info_rsrp_subscribe_handler+0x8c>)
   16ad8:	1a9b      	subs	r3, r3, r2
   16ada:	08db      	lsrs	r3, r3, #3
   16adc:	4602      	mov	r2, r0
   16ade:	019b      	lsls	r3, r3, #6
   16ae0:	e7e9      	b.n	16ab6 <modem_info_rsrp_subscribe_handler+0x3a>
	modem_info_rsrp_cb(param_value);
   16ae2:	4b0a      	ldr	r3, [pc, #40]	; (16b0c <modem_info_rsrp_subscribe_handler+0x90>)
   16ae4:	f89d 0002 	ldrb.w	r0, [sp, #2]
   16ae8:	681b      	ldr	r3, [r3, #0]
   16aea:	4798      	blx	r3
   16aec:	e7e7      	b.n	16abe <modem_info_rsrp_subscribe_handler+0x42>
   16aee:	bf00      	nop
   16af0:	0002cb0b 	.word	0x0002cb0b
   16af4:	0002a3cc 	.word	0x0002a3cc
   16af8:	0002a2c4 	.word	0x0002a2c4
   16afc:	0002a314 	.word	0x0002a314
   16b00:	0002cb11 	.word	0x0002cb11
   16b04:	200230f4 	.word	0x200230f4
   16b08:	0002cb48 	.word	0x0002cb48
   16b0c:	200230fc 	.word	0x200230fc

00016b10 <modem_info_string_get>:
{
   16b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   16b14:	2500      	movs	r5, #0
{
   16b16:	460e      	mov	r6, r1
   16b18:	b0a5      	sub	sp, #148	; 0x94
   16b1a:	4680      	mov	r8, r0
   16b1c:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   16b1e:	4629      	mov	r1, r5
   16b20:	227c      	movs	r2, #124	; 0x7c
   16b22:	a805      	add	r0, sp, #20
   16b24:	9504      	str	r5, [sp, #16]
   16b26:	f012 fcde 	bl	294e6 <memset>
	size_t len = 0;
   16b2a:	9503      	str	r5, [sp, #12]
	if ((buf == NULL) || (buf_size == 0)) {
   16b2c:	2e00      	cmp	r6, #0
   16b2e:	f000 80e2 	beq.w	16cf6 <modem_info_string_get+0x1e6>
   16b32:	f1b9 0f00 	cmp.w	r9, #0
   16b36:	f000 80de 	beq.w	16cf6 <modem_info_string_get+0x1e6>
	err = at_cmd_write(modem_data[info]->cmd,
   16b3a:	4b73      	ldr	r3, [pc, #460]	; (16d08 <modem_info_string_get+0x1f8>)
   16b3c:	2280      	movs	r2, #128	; 0x80
   16b3e:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   16b42:	a904      	add	r1, sp, #16
   16b44:	462b      	mov	r3, r5
   16b46:	f8da 0000 	ldr.w	r0, [sl]
   16b4a:	f7fe ff4b 	bl	159e4 <at_cmd_write>
	if (info == MODEM_INFO_SUP_BAND) {
   16b4e:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   16b52:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   16b54:	d10c      	bne.n	16b70 <modem_info_string_get+0x60>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   16b56:	f10d 0119 	add.w	r1, sp, #25
   16b5a:	4630      	mov	r0, r6
   16b5c:	f012 fe70 	bl	29840 <strcpy>
		return strlen(buf);
   16b60:	4630      	mov	r0, r6
   16b62:	f7f6 f9e9 	bl	cf38 <strlen>
   16b66:	4602      	mov	r2, r0
}
   16b68:	4610      	mov	r0, r2
   16b6a:	b025      	add	sp, #148	; 0x94
   16b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   16b70:	f1b8 0f09 	cmp.w	r8, #9
   16b74:	d038      	beq.n	16be8 <modem_info_string_get+0xd8>
	if (err != 0) {
   16b76:	2c00      	cmp	r4, #0
   16b78:	f040 80c0 	bne.w	16cfc <modem_info_string_get+0x1ec>
	size_t ip_str_len = 0;
   16b7c:	4627      	mov	r7, r4
		err = at_params_string_get(&m_param_list,
   16b7e:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 16d2c <modem_info_string_get+0x21c>
	size_t cmd_rsp_idx = 0;
   16b82:	9400      	str	r4, [sp, #0]
	if (info == MODEM_INFO_IP_ADDRESS) {
   16b84:	9a00      	ldr	r2, [sp, #0]
   16b86:	ab04      	add	r3, sp, #16
   16b88:	f1b8 0f09 	cmp.w	r8, #9
   16b8c:	4413      	add	r3, r2
   16b8e:	d10f      	bne.n	16bb0 <modem_info_string_get+0xa0>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   16b90:	4618      	mov	r0, r3
   16b92:	495e      	ldr	r1, [pc, #376]	; (16d0c <modem_info_string_get+0x1fc>)
   16b94:	9301      	str	r3, [sp, #4]
   16b96:	f012 fe95 	bl	298c4 <strstr>
		if (ip_str_end == NULL) {
   16b9a:	2800      	cmp	r0, #0
   16b9c:	f000 80b1 	beq.w	16d02 <modem_info_string_get+0x1f2>
		recv_buf[++ip_str_len] = 0;
   16ba0:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   16ba2:	9b01      	ldr	r3, [sp, #4]
		recv_buf[++ip_str_len] = 0;
   16ba4:	aa24      	add	r2, sp, #144	; 0x90
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   16ba6:	1ac0      	subs	r0, r0, r3
		recv_buf[++ip_str_len] = 0;
   16ba8:	1c47      	adds	r7, r0, #1
   16baa:	443a      	add	r2, r7
   16bac:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   16bb0:	4619      	mov	r1, r3
   16bb2:	f10a 0009 	add.w	r0, sl, #9
   16bb6:	f7ff ff49 	bl	16a4c <modem_info_parse.isra.0>
	if (err) {
   16bba:	4602      	mov	r2, r0
   16bbc:	b1b8      	cbz	r0, 16bee <modem_info_string_get+0xde>
   16bbe:	4854      	ldr	r0, [pc, #336]	; (16d10 <modem_info_string_get+0x200>)
   16bc0:	4b54      	ldr	r3, [pc, #336]	; (16d14 <modem_info_string_get+0x204>)
		LOG_ERR("Unable to parse data: %d", err);
   16bc2:	4955      	ldr	r1, [pc, #340]	; (16d18 <modem_info_string_get+0x208>)
   16bc4:	1ac0      	subs	r0, r0, r3
   16bc6:	08c0      	lsrs	r0, r0, #3
   16bc8:	0180      	lsls	r0, r0, #6
   16bca:	9200      	str	r2, [sp, #0]
			LOG_ERR("Unable to obtain short: %d", err);
   16bcc:	f040 0001 	orr.w	r0, r0, #1
   16bd0:	f00d fc96 	bl	24500 <log_string_sync>
			return err;
   16bd4:	9a00      	ldr	r2, [sp, #0]
   16bd6:	e7c7      	b.n	16b68 <modem_info_string_get+0x58>
			++ip_str_end;
   16bd8:	3001      	adds	r0, #1
			++ip_cnt;
   16bda:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   16bdc:	4639      	mov	r1, r7
   16bde:	f012 fe71 	bl	298c4 <strstr>
   16be2:	2800      	cmp	r0, #0
   16be4:	d1f8      	bne.n	16bd8 <modem_info_string_get+0xc8>
   16be6:	e7c6      	b.n	16b76 <modem_info_string_get+0x66>
   16be8:	4f48      	ldr	r7, [pc, #288]	; (16d0c <modem_info_string_get+0x1fc>)
	char *ip_str_end = recv_buf;
   16bea:	a804      	add	r0, sp, #16
   16bec:	e7f6      	b.n	16bdc <modem_info_string_get+0xcc>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   16bee:	f89a 300a 	ldrb.w	r3, [sl, #10]
   16bf2:	2b01      	cmp	r3, #1
   16bf4:	d11c      	bne.n	16c30 <modem_info_string_get+0x120>
		err = at_params_short_get(&m_param_list,
   16bf6:	f10d 020a 	add.w	r2, sp, #10
   16bfa:	4658      	mov	r0, fp
   16bfc:	f89a 1008 	ldrb.w	r1, [sl, #8]
   16c00:	f011 fee9 	bl	289d6 <at_params_short_get>
		if (err) {
   16c04:	4602      	mov	r2, r0
   16c06:	b138      	cbz	r0, 16c18 <modem_info_string_get+0x108>
   16c08:	4841      	ldr	r0, [pc, #260]	; (16d10 <modem_info_string_get+0x200>)
   16c0a:	4b42      	ldr	r3, [pc, #264]	; (16d14 <modem_info_string_get+0x204>)
			LOG_ERR("Unable to obtain short: %d", err);
   16c0c:	4943      	ldr	r1, [pc, #268]	; (16d1c <modem_info_string_get+0x20c>)
   16c0e:	1ac0      	subs	r0, r0, r3
   16c10:	08c0      	lsrs	r0, r0, #3
   16c12:	0180      	lsls	r0, r0, #6
   16c14:	9200      	str	r2, [sp, #0]
   16c16:	e7d9      	b.n	16bcc <modem_info_string_get+0xbc>
		err = snprintf(buf, buf_size, "%d", param_value);
   16c18:	4649      	mov	r1, r9
   16c1a:	4630      	mov	r0, r6
   16c1c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   16c20:	4a3f      	ldr	r2, [pc, #252]	; (16d20 <modem_info_string_get+0x210>)
   16c22:	f00b f8b5 	bl	21d90 <sniprintf>
		if ((err <= 0) || (err > buf_size)) {
   16c26:	4548      	cmp	r0, r9
   16c28:	d915      	bls.n	16c56 <modem_info_string_get+0x146>
			return -EMSGSIZE;
   16c2a:	f06f 0279 	mvn.w	r2, #121	; 0x79
   16c2e:	e79b      	b.n	16b68 <modem_info_string_get+0x58>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   16c30:	2b03      	cmp	r3, #3
   16c32:	d110      	bne.n	16c56 <modem_info_string_get+0x146>
		len = buf_size - out_buf_len;
   16c34:	eba9 0304 	sub.w	r3, r9, r4
   16c38:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   16c3a:	1932      	adds	r2, r6, r4
   16c3c:	4658      	mov	r0, fp
   16c3e:	f89a 1008 	ldrb.w	r1, [sl, #8]
   16c42:	ab03      	add	r3, sp, #12
   16c44:	f011 feec 	bl	28a20 <at_params_string_get>
		if (err != 0) {
   16c48:	4602      	mov	r2, r0
   16c4a:	2800      	cmp	r0, #0
   16c4c:	d18c      	bne.n	16b68 <modem_info_string_get+0x58>
		} else if (len >= buf_size) {
   16c4e:	9b03      	ldr	r3, [sp, #12]
   16c50:	454b      	cmp	r3, r9
   16c52:	d2ea      	bcs.n	16c2a <modem_info_string_get+0x11a>
		buf[len] = 0;
   16c54:	54f0      	strb	r0, [r6, r3]
	if (info == MODEM_INFO_ICCID) {
   16c56:	f1b8 0f0e 	cmp.w	r8, #14
   16c5a:	d121      	bne.n	16ca0 <modem_info_string_get+0x190>
   16c5c:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   16c5e:	4630      	mov	r0, r6
   16c60:	f7f6 f96a 	bl	cf38 <strlen>
   16c64:	1ca3      	adds	r3, r4, #2
   16c66:	1ba4      	subs	r4, r4, r6
   16c68:	42a0      	cmp	r0, r4
   16c6a:	d80f      	bhi.n	16c8c <modem_info_string_get+0x17c>
		if ((len == ICCID_LEN) &&
   16c6c:	9b03      	ldr	r3, [sp, #12]
   16c6e:	2b14      	cmp	r3, #20
   16c70:	d106      	bne.n	16c80 <modem_info_string_get+0x170>
   16c72:	7cf3      	ldrb	r3, [r6, #19]
   16c74:	2b46      	cmp	r3, #70	; 0x46
   16c76:	d103      	bne.n	16c80 <modem_info_string_get+0x170>
			buf[len - 1] = '\0';
   16c78:	2300      	movs	r3, #0
   16c7a:	74f3      	strb	r3, [r6, #19]
			--len;
   16c7c:	2313      	movs	r3, #19
   16c7e:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   16c80:	9a03      	ldr	r2, [sp, #12]
   16c82:	2a00      	cmp	r2, #0
   16c84:	bf08      	it	eq
   16c86:	f06f 0285 	mvneq.w	r2, #133	; 0x85
   16c8a:	e76d      	b.n	16b68 <modem_info_string_get+0x58>
		current_char = buf[i];
   16c8c:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   16c90:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   16c94:	461c      	mov	r4, r3
		buf[i] = next_char;
   16c96:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   16c9a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   16c9e:	e7de      	b.n	16c5e <modem_info_string_get+0x14e>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   16ca0:	f1b8 0f09 	cmp.w	r8, #9
   16ca4:	d1ec      	bne.n	16c80 <modem_info_string_get+0x170>
   16ca6:	2d00      	cmp	r5, #0
   16ca8:	ddea      	ble.n	16c80 <modem_info_string_get+0x170>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   16caa:	1933      	adds	r3, r6, r4
   16cac:	4618      	mov	r0, r3
   16cae:	491d      	ldr	r1, [pc, #116]	; (16d24 <modem_info_string_get+0x214>)
   16cb0:	9301      	str	r3, [sp, #4]
   16cb2:	f012 fe07 	bl	298c4 <strstr>
		if (ip_v6_str) {
   16cb6:	b130      	cbz	r0, 16cc6 <modem_info_string_get+0x1b6>
			*ip_v6_str = 0;
   16cb8:	2200      	movs	r2, #0
			len = strlen(&buf[out_buf_len]);
   16cba:	9b01      	ldr	r3, [sp, #4]
			*ip_v6_str = 0;
   16cbc:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   16cbe:	4618      	mov	r0, r3
   16cc0:	f7f6 f93a 	bl	cf38 <strlen>
   16cc4:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   16cc6:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   16cc8:	2d01      	cmp	r5, #1
		out_buf_len += len;
   16cca:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   16ccc:	d00e      	beq.n	16cec <modem_info_string_get+0x1dc>
			err = snprintf(&buf[out_buf_len],
   16cce:	eba9 0104 	sub.w	r1, r9, r4
   16cd2:	4a15      	ldr	r2, [pc, #84]	; (16d28 <modem_info_string_get+0x218>)
   16cd4:	1930      	adds	r0, r6, r4
   16cd6:	9100      	str	r1, [sp, #0]
   16cd8:	f00b f85a 	bl	21d90 <sniprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   16cdc:	2800      	cmp	r0, #0
   16cde:	dda4      	ble.n	16c2a <modem_info_string_get+0x11a>
   16ce0:	9900      	ldr	r1, [sp, #0]
   16ce2:	4281      	cmp	r1, r0
   16ce4:	d3a1      	bcc.n	16c2a <modem_info_string_get+0x11a>
			cmd_rsp_idx = ip_str_len + 1;
   16ce6:	1c7b      	adds	r3, r7, #1
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   16ce8:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   16cea:	9300      	str	r3, [sp, #0]
		if (--ip_cnt) {
   16cec:	3d01      	subs	r5, #1
   16cee:	f47f af49 	bne.w	16b84 <modem_info_string_get+0x74>
			len = out_buf_len;
   16cf2:	9403      	str	r4, [sp, #12]
   16cf4:	e7c4      	b.n	16c80 <modem_info_string_get+0x170>
		return -EINVAL;
   16cf6:	f06f 0215 	mvn.w	r2, #21
   16cfa:	e735      	b.n	16b68 <modem_info_string_get+0x58>
		return -EIO;
   16cfc:	f06f 0204 	mvn.w	r2, #4
   16d00:	e732      	b.n	16b68 <modem_info_string_get+0x58>
			return -EFAULT;
   16d02:	f06f 020d 	mvn.w	r2, #13
   16d06:	e72f      	b.n	16b68 <modem_info_string_get+0x58>
   16d08:	0002a848 	.word	0x0002a848
   16d0c:	0002cc6a 	.word	0x0002cc6a
   16d10:	0002a314 	.word	0x0002a314
   16d14:	0002a2c4 	.word	0x0002a2c4
   16d18:	0002cb68 	.word	0x0002cb68
   16d1c:	0002cb81 	.word	0x0002cb81
   16d20:	0002cb65 	.word	0x0002cb65
   16d24:	0002b7ee 	.word	0x0002b7ee
   16d28:	0002b29f 	.word	0x0002b29f
   16d2c:	200230f4 	.word	0x200230f4

00016d30 <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
	modem_info_rsrp_cb = cb;
   16d30:	4b10      	ldr	r3, [pc, #64]	; (16d74 <modem_info_rsrp_register+0x44>)
{
   16d32:	b510      	push	{r4, lr}

	int rc = at_notif_register_handler(NULL,
   16d34:	4910      	ldr	r1, [pc, #64]	; (16d78 <modem_info_rsrp_register+0x48>)
	modem_info_rsrp_cb = cb;
   16d36:	6018      	str	r0, [r3, #0]
	int rc = at_notif_register_handler(NULL,
   16d38:	2000      	movs	r0, #0
   16d3a:	f7fe ff01 	bl	15b40 <at_notif_register_handler>
		modem_info_rsrp_subscribe_handler);
	if (rc != 0) {
   16d3e:	4604      	mov	r4, r0
   16d40:	b160      	cbz	r0, 16d5c <modem_info_rsrp_register+0x2c>
   16d42:	480e      	ldr	r0, [pc, #56]	; (16d7c <modem_info_rsrp_register+0x4c>)
   16d44:	4b0e      	ldr	r3, [pc, #56]	; (16d80 <modem_info_rsrp_register+0x50>)
		LOG_ERR("Can't register handler rc=%d", rc);
   16d46:	4622      	mov	r2, r4
   16d48:	1ac0      	subs	r0, r0, r3
   16d4a:	08c0      	lsrs	r0, r0, #3
   16d4c:	0180      	lsls	r0, r0, #6
   16d4e:	490d      	ldr	r1, [pc, #52]	; (16d84 <modem_info_rsrp_register+0x54>)
   16d50:	f040 0001 	orr.w	r0, r0, #1
   16d54:	f00d fbd4 	bl	24500 <log_string_sync>
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
		return -EIO;
	}

	return 0;
}
   16d58:	4620      	mov	r0, r4
   16d5a:	bd10      	pop	{r4, pc}
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   16d5c:	4603      	mov	r3, r0
   16d5e:	4602      	mov	r2, r0
   16d60:	4601      	mov	r1, r0
   16d62:	4809      	ldr	r0, [pc, #36]	; (16d88 <modem_info_rsrp_register+0x58>)
   16d64:	f7fe fe3e 	bl	159e4 <at_cmd_write>
   16d68:	1e04      	subs	r4, r0, #0
		return -EIO;
   16d6a:	bf18      	it	ne
   16d6c:	f06f 0404 	mvnne.w	r4, #4
   16d70:	e7f2      	b.n	16d58 <modem_info_rsrp_register+0x28>
   16d72:	bf00      	nop
   16d74:	200230fc 	.word	0x200230fc
   16d78:	00016a7d 	.word	0x00016a7d
   16d7c:	0002a314 	.word	0x0002a314
   16d80:	0002a2c4 	.word	0x0002a2c4
   16d84:	0002cb9c 	.word	0x0002cb9c
   16d88:	0002cbb9 	.word	0x0002cbb9

00016d8c <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   16d8c:	210a      	movs	r1, #10
   16d8e:	4801      	ldr	r0, [pc, #4]	; (16d94 <modem_info_init+0x8>)
   16d90:	f011 bd64 	b.w	2885c <at_params_list_init>
   16d94:	200230f4 	.word	0x200230f4

00016d98 <modem_info_params_init>:

LOG_MODULE_REGISTER(modem_info_params);

int modem_info_params_init(struct modem_param_info *modem)
{
	if (modem == NULL) {
   16d98:	2800      	cmp	r0, #0
   16d9a:	d046      	beq.n	16e2a <modem_info_params_init+0x92>
		return -EINVAL;
	}

	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   16d9c:	2301      	movs	r3, #1
   16d9e:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   16da2:	2302      	movs	r3, #2
   16da4:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   16da8:	2303      	movs	r3, #3
   16daa:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   16dae:	2305      	movs	r3, #5
   16db0:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   16db4:	2306      	movs	r3, #6
   16db6:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   16dba:	2307      	movs	r3, #7
   16dbc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   16dc0:	2308      	movs	r3, #8
   16dc2:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   16dc6:	2309      	movs	r3, #9
   16dc8:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   16dcc:	2304      	movs	r3, #4
   16dce:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   16dd2:	230f      	movs	r3, #15
   16dd4:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   16dd8:	2310      	movs	r3, #16
   16dda:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   16dde:	2311      	movs	r3, #17
   16de0:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   16de4:	2314      	movs	r3, #20
   16de6:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   16dea:	2315      	movs	r3, #21
   16dec:	f880 361c 	strb.w	r3, [r0, #1564]	; 0x61c

	modem->sim.uicc.type			= MODEM_INFO_UICC;
   16df0:	230a      	movs	r3, #10
   16df2:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   16df6:	230e      	movs	r3, #14
   16df8:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   16dfc:	2312      	movs	r3, #18
   16dfe:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784

	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   16e02:	230d      	movs	r3, #13
   16e04:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   16e08:	230b      	movs	r3, #11
   16e0a:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.imei.type			= MODEM_INFO_IMEI;
   16e0e:	2313      	movs	r3, #19
   16e10:	f880 38d4 	strb.w	r3, [r0, #2260]	; 0x8d4
	modem->device.board			= CONFIG_BOARD;
   16e14:	4b06      	ldr	r3, [pc, #24]	; (16e30 <modem_info_params_init+0x98>)
   16e16:	f8c0 38d8 	str.w	r3, [r0, #2264]	; 0x8d8
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   16e1a:	4b06      	ldr	r3, [pc, #24]	; (16e34 <modem_info_params_init+0x9c>)
   16e1c:	f8c0 38dc 	str.w	r3, [r0, #2268]	; 0x8dc
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   16e20:	4b05      	ldr	r3, [pc, #20]	; (16e38 <modem_info_params_init+0xa0>)
   16e22:	f8c0 38e0 	str.w	r3, [r0, #2272]	; 0x8e0

	return 0;
   16e26:	2000      	movs	r0, #0
   16e28:	4770      	bx	lr
		return -EINVAL;
   16e2a:	f06f 0015 	mvn.w	r0, #21
}
   16e2e:	4770      	bx	lr
   16e30:	0002cbc3 	.word	0x0002cbc3
   16e34:	0002cbd5 	.word	0x0002cbd5
   16e38:	0002cbdc 	.word	0x0002cbdc

00016e3c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   16e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16e40:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   16e42:	4c21      	ldr	r4, [pc, #132]	; (16ec8 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   16e44:	4e21      	ldr	r6, [pc, #132]	; (16ecc <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16e46:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   16e4a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 16ed4 <check_ext_api_requests+0x98>
{
   16e4e:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16e50:	45a8      	cmp	r8, r5
   16e52:	d803      	bhi.n	16e5c <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   16e54:	2000      	movs	r0, #0
   16e56:	b005      	add	sp, #20
   16e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   16e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16e5e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   16e62:	681f      	ldr	r7, [r3, #0]
   16e64:	ab01      	add	r3, sp, #4
   16e66:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   16e6a:	220c      	movs	r2, #12
   16e6c:	4619      	mov	r1, r3
   16e6e:	4638      	mov	r0, r7
   16e70:	f012 faf1 	bl	29456 <memcmp>
   16e74:	b990      	cbnz	r0, 16e9c <check_ext_api_requests+0x60>
   16e76:	b18f      	cbz	r7, 16e9c <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   16e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   16e7a:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   16e7c:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   16e7e:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   16e80:	4291      	cmp	r1, r2
   16e82:	d10b      	bne.n	16e9c <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   16e84:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   16e86:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   16e88:	4291      	cmp	r1, r2
   16e8a:	d807      	bhi.n	16e9c <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   16e8c:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   16e8e:	4291      	cmp	r1, r2
   16e90:	d904      	bls.n	16e9c <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   16e92:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   16e94:	695b      	ldr	r3, [r3, #20]
   16e96:	ea32 0303 	bics.w	r3, r2, r3
   16e9a:	d00a      	beq.n	16eb2 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   16e9c:	6a27      	ldr	r7, [r4, #32]
   16e9e:	b167      	cbz	r7, 16eba <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   16ea0:	480b      	ldr	r0, [pc, #44]	; (16ed0 <check_ext_api_requests+0x94>)
   16ea2:	f00d f876 	bl	23f92 <printk>
			k_panic();
   16ea6:	4040      	eors	r0, r0
   16ea8:	f380 8811 	msr	BASEPRI, r0
   16eac:	f04f 0004 	mov.w	r0, #4
   16eb0:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   16eb2:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16eb4:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   16eb6:	441c      	add	r4, r3
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16eb8:	e7ca      	b.n	16e50 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   16eba:	4648      	mov	r0, r9
   16ebc:	f00d f869 	bl	23f92 <printk>
			*ext_api_req->ext_api = NULL;
   16ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16ec2:	601f      	str	r7, [r3, #0]
   16ec4:	e7f5      	b.n	16eb2 <check_ext_api_requests+0x76>
   16ec6:	bf00      	nop
   16ec8:	0000c23c 	.word	0x0000c23c
   16ecc:	0002a3d8 	.word	0x0002a3d8
   16ed0:	0002cc11 	.word	0x0002cc11
   16ed4:	0002cc3a 	.word	0x0002cc3a

00016ed8 <agps_write>:
	notify_event(dev, &evt);
}

static int agps_write(struct device *dev, enum gps_agps_type type, void *data,
		      size_t data_len)
{
   16ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   16eda:	460c      	mov	r4, r1
   16edc:	4611      	mov	r1, r2
   16ede:	461a      	mov	r2, r3
	int err;
	struct gps_drv_data *drv_data = dev->driver_data;
	nrf_gnss_agps_data_type_t data_type = type_lookup_gps2socket[type];
   16ee0:	4b13      	ldr	r3, [pc, #76]	; (16f30 <agps_write+0x58>)
	struct gps_drv_data *drv_data = dev->driver_data;
   16ee2:	68c0      	ldr	r0, [r0, #12]
	nrf_gnss_agps_data_type_t data_type = type_lookup_gps2socket[type];
   16ee4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   16ee8:	f8ad 300e 	strh.w	r3, [sp, #14]

	err = nrf_sendto(drv_data->socket, data, data_len, 0, &data_type,
   16eec:	2302      	movs	r3, #2
   16eee:	9301      	str	r3, [sp, #4]
   16ef0:	f10d 030e 	add.w	r3, sp, #14
   16ef4:	9300      	str	r3, [sp, #0]
   16ef6:	6a00      	ldr	r0, [r0, #32]
   16ef8:	2300      	movs	r3, #0
   16efa:	f006 fe57 	bl	1dbac <nrf_sendto>
			 sizeof(data_type));
	if (err < 0) {
   16efe:	2800      	cmp	r0, #0
   16f00:	da13      	bge.n	16f2a <agps_write+0x52>
   16f02:	4b0c      	ldr	r3, [pc, #48]	; (16f34 <agps_write+0x5c>)
   16f04:	4c0c      	ldr	r4, [pc, #48]	; (16f38 <agps_write+0x60>)
   16f06:	1ae4      	subs	r4, r4, r3
		LOG_ERR("Failed to send A-GPS data to modem, errno: %d", errno);
   16f08:	f00d ff02 	bl	24d10 <__errno>
   16f0c:	08e4      	lsrs	r4, r4, #3
   16f0e:	01a4      	lsls	r4, r4, #6
   16f10:	f044 0401 	orr.w	r4, r4, #1
   16f14:	6802      	ldr	r2, [r0, #0]
   16f16:	4909      	ldr	r1, [pc, #36]	; (16f3c <agps_write+0x64>)
   16f18:	4620      	mov	r0, r4
   16f1a:	f00d faf1 	bl	24500 <log_string_sync>
		return -errno;
   16f1e:	f00d fef7 	bl	24d10 <__errno>
   16f22:	6800      	ldr	r0, [r0, #0]
   16f24:	4240      	negs	r0, r0
	}

	LOG_DBG("Sent A-GPS data to modem, type: %d", type);

	return 0;
}
   16f26:	b004      	add	sp, #16
   16f28:	bd10      	pop	{r4, pc}
	return 0;
   16f2a:	2000      	movs	r0, #0
   16f2c:	e7fb      	b.n	16f26 <agps_write+0x4e>
   16f2e:	bf00      	nop
   16f30:	0002ad98 	.word	0x0002ad98
   16f34:	0002a2c4 	.word	0x0002a2c4
   16f38:	0002a33c 	.word	0x0002a33c
   16f3c:	0002cc6d 	.word	0x0002cc6d

00016f40 <init>:

static int init(struct device *dev, gps_event_handler_t handler)
{
   16f40:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct gps_drv_data *drv_data = dev->driver_data;
   16f42:	68c4      	ldr	r4, [r0, #12]
{
   16f44:	4606      	mov	r6, r0
	int err;

	if (drv_data->is_init) {
   16f46:	69a5      	ldr	r5, [r4, #24]
{
   16f48:	b089      	sub	sp, #36	; 0x24
	if (drv_data->is_init) {
   16f4a:	b175      	cbz	r5, 16f6a <init+0x2a>
   16f4c:	4b33      	ldr	r3, [pc, #204]	; (1701c <init+0xdc>)
   16f4e:	4834      	ldr	r0, [pc, #208]	; (17020 <init+0xe0>)
		LOG_WRN("GPS is already initialized");
   16f50:	4934      	ldr	r1, [pc, #208]	; (17024 <init+0xe4>)
   16f52:	1ac0      	subs	r0, r0, r3
   16f54:	08c0      	lsrs	r0, r0, #3
   16f56:	0180      	lsls	r0, r0, #6
   16f58:	f040 0002 	orr.w	r0, r0, #2
   16f5c:	f00d fad0 	bl	24500 <log_string_sync>

		return -EALREADY;
   16f60:	f06f 0577 	mvn.w	r5, #119	; 0x77
	}

	drv_data->is_init = true;

	return 0;
}
   16f64:	4628      	mov	r0, r5
   16f66:	b009      	add	sp, #36	; 0x24
   16f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (handler == NULL) {
   16f6a:	b961      	cbnz	r1, 16f86 <init+0x46>
   16f6c:	4b2b      	ldr	r3, [pc, #172]	; (1701c <init+0xdc>)
   16f6e:	482c      	ldr	r0, [pc, #176]	; (17020 <init+0xe0>)
		LOG_ERR("No event handler provided");
   16f70:	492d      	ldr	r1, [pc, #180]	; (17028 <init+0xe8>)
   16f72:	1ac0      	subs	r0, r0, r3
   16f74:	08c0      	lsrs	r0, r0, #3
   16f76:	0180      	lsls	r0, r0, #6
   16f78:	f040 0001 	orr.w	r0, r0, #1
   16f7c:	f00d fac0 	bl	24500 <log_string_sync>
		return -EINVAL;
   16f80:	f06f 0515 	mvn.w	r5, #21
   16f84:	e7ee      	b.n	16f64 <init+0x24>
	if (drv_data->socket < 0) {
   16f86:	6a23      	ldr	r3, [r4, #32]
	drv_data->handler = handler;
   16f88:	6061      	str	r1, [r4, #4]
	if (drv_data->socket < 0) {
   16f8a:	2b00      	cmp	r3, #0
   16f8c:	da16      	bge.n	16fbc <init+0x7c>
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   16f8e:	f44f 7201 	mov.w	r2, #516	; 0x204
   16f92:	2102      	movs	r1, #2
   16f94:	2001      	movs	r0, #1
   16f96:	f006 fde9 	bl	1db6c <nrf_socket>
		if (drv_data->socket >= 0) {
   16f9a:	2800      	cmp	r0, #0
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   16f9c:	6220      	str	r0, [r4, #32]
		if (drv_data->socket >= 0) {
   16f9e:	da0d      	bge.n	16fbc <init+0x7c>
   16fa0:	4a1e      	ldr	r2, [pc, #120]	; (1701c <init+0xdc>)
   16fa2:	4b1f      	ldr	r3, [pc, #124]	; (17020 <init+0xe0>)
			LOG_ERR("Could not initialize socket, error: %d)",
   16fa4:	4921      	ldr	r1, [pc, #132]	; (1702c <init+0xec>)
   16fa6:	1a9b      	subs	r3, r3, r2
   16fa8:	08db      	lsrs	r3, r3, #3
   16faa:	019b      	lsls	r3, r3, #6
   16fac:	4602      	mov	r2, r0
   16fae:	f043 0001 	orr.w	r0, r3, #1
   16fb2:	f00d faa5 	bl	24500 <log_string_sync>
			return -EIO;
   16fb6:	f06f 0504 	mvn.w	r5, #4
   16fba:	e7d3      	b.n	16f64 <init+0x24>
	k_delayed_work_init(&drv_data->start_work, start_work_fn);
   16fbc:	f604 00fc 	addw	r0, r4, #2300	; 0x8fc
   16fc0:	491b      	ldr	r1, [pc, #108]	; (17030 <init+0xf0>)
   16fc2:	f012 f88f 	bl	290e4 <k_delayed_work_init>
	k_delayed_work_init(&drv_data->stop_work, stop_work_fn);
   16fc6:	f604 101c 	addw	r0, r4, #2332	; 0x91c
   16fca:	491a      	ldr	r1, [pc, #104]	; (17034 <init+0xf4>)
   16fcc:	f012 f88a 	bl	290e4 <k_delayed_work_init>
	k_delayed_work_init(&drv_data->timeout_work, timeout_work_fn);
   16fd0:	4919      	ldr	r1, [pc, #100]	; (17038 <init+0xf8>)
   16fd2:	f604 103c 	addw	r0, r4, #2364	; 0x93c
   16fd6:	f012 f885 	bl	290e4 <k_delayed_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16fda:	2201      	movs	r2, #1
   16fdc:	2100      	movs	r1, #0
   16fde:	f604 00e4 	addw	r0, r4, #2276	; 0x8e4
   16fe2:	f012 f806 	bl	28ff2 <z_impl_k_sem_init>
	struct gps_drv_data *drv_data = dev->driver_data;
   16fe6:	68f7      	ldr	r7, [r6, #12]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16fe8:	2200      	movs	r2, #0
   16fea:	2300      	movs	r3, #0
   16fec:	e9cd 2306 	strd	r2, r3, [sp, #24]
   16ff0:	2300      	movs	r3, #0
   16ff2:	220a      	movs	r2, #10
   16ff4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   16ff8:	e9cd 2303 	strd	r2, r3, [sp, #12]
   16ffc:	9600      	str	r6, [sp, #0]
   16ffe:	4b0f      	ldr	r3, [pc, #60]	; (1703c <init+0xfc>)
   17000:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17004:	f107 0128 	add.w	r1, r7, #40	; 0x28
   17008:	f607 0028 	addw	r0, r7, #2088	; 0x828
   1700c:	f009 fc14 	bl	20838 <z_impl_k_thread_create>
	drv_data->is_init = true;
   17010:	2301      	movs	r3, #1
	drv_data->thread_id = k_thread_create(
   17012:	f8c7 08e0 	str.w	r0, [r7, #2272]	; 0x8e0
	drv_data->is_init = true;
   17016:	61a3      	str	r3, [r4, #24]
	return 0;
   17018:	e7a4      	b.n	16f64 <init+0x24>
   1701a:	bf00      	nop
   1701c:	0002a2c4 	.word	0x0002a2c4
   17020:	0002a33c 	.word	0x0002a33c
   17024:	0002cc9b 	.word	0x0002cc9b
   17028:	0002ccb6 	.word	0x0002ccb6
   1702c:	0002ccd0 	.word	0x0002ccd0
   17030:	00028aff 	.word	0x00028aff
   17034:	00028ad9 	.word	0x00028ad9
   17038:	00017359 	.word	0x00017359
   1703c:	00017099 	.word	0x00017099

00017040 <stop_gps.isra.0>:
static int stop_gps(struct device *dev, bool is_timeout)
   17040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	nrf_gnss_delete_mask_t delete_mask = 0;
   17042:	2200      	movs	r2, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17044:	f100 031c 	add.w	r3, r0, #28
   17048:	9203      	str	r2, [sp, #12]
   1704a:	e8d3 1fef 	ldaex	r1, [r3]
   1704e:	e8c3 2fec 	stlex	ip, r2, [r3]
   17052:	f1bc 0f00 	cmp.w	ip, #0
   17056:	d1f8      	bne.n	1704a <stop_gps.isra.0+0xa>
	retval = nrf_setsockopt(drv_data->socket,
   17058:	2304      	movs	r3, #4
   1705a:	9300      	str	r3, [sp, #0]
   1705c:	2208      	movs	r2, #8
   1705e:	f44f 7101 	mov.w	r1, #516	; 0x204
   17062:	6a00      	ldr	r0, [r0, #32]
   17064:	ab03      	add	r3, sp, #12
   17066:	f006 fe3d 	bl	1dce4 <nrf_setsockopt>
	if (retval != 0) {
   1706a:	b158      	cbz	r0, 17084 <stop_gps.isra.0+0x44>
   1706c:	4b07      	ldr	r3, [pc, #28]	; (1708c <stop_gps.isra.0+0x4c>)
   1706e:	4808      	ldr	r0, [pc, #32]	; (17090 <stop_gps.isra.0+0x50>)
		LOG_ERR("Failed to stop GPS");
   17070:	4908      	ldr	r1, [pc, #32]	; (17094 <stop_gps.isra.0+0x54>)
   17072:	1ac0      	subs	r0, r0, r3
   17074:	08c0      	lsrs	r0, r0, #3
   17076:	0180      	lsls	r0, r0, #6
   17078:	f040 0001 	orr.w	r0, r0, #1
   1707c:	f00d fa40 	bl	24500 <log_string_sync>
		return -EIO;
   17080:	f06f 0004 	mvn.w	r0, #4
}
   17084:	b005      	add	sp, #20
   17086:	f85d fb04 	ldr.w	pc, [sp], #4
   1708a:	bf00      	nop
   1708c:	0002a2c4 	.word	0x0002a2c4
   17090:	0002a33c 	.word	0x0002a33c
   17094:	0002ccf8 	.word	0x0002ccf8

00017098 <gps_thread>:
{
   17098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool has_fix = false;
   1709c:	2600      	movs	r6, #0
	bool operation_blocked = false;
   1709e:	46b1      	mov	r9, r6
{
   170a0:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
	struct gps_drv_data *drv_data = dev->driver_data;
   170a4:	68c7      	ldr	r7, [r0, #12]
{
   170a6:	4604      	mov	r4, r0
	struct gps_event evt = {
   170a8:	22c0      	movs	r2, #192	; 0xc0
   170aa:	2100      	movs	r1, #0
   170ac:	a802      	add	r0, sp, #8
   170ae:	f012 fa1a 	bl	294e6 <memset>
   170b2:	4d75      	ldr	r5, [pc, #468]	; (17288 <gps_thread+0x1f0>)
   170b4:	4b75      	ldr	r3, [pc, #468]	; (1728c <gps_thread+0x1f4>)
			LOG_ERR("recv() returned error: %d", len);
   170b6:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 17290 <gps_thread+0x1f8>
   170ba:	1aed      	subs	r5, r5, r3
   170bc:	08ed      	lsrs	r5, r5, #3
   170be:	01ad      	lsls	r5, r5, #6
   170c0:	f045 0501 	orr.w	r5, r5, #1
	return z_impl_k_sem_take(sem, timeout);
   170c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   170c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   170cc:	f607 00e4 	addw	r0, r7, #2276	; 0x8e4
   170d0:	f009 fb4a 	bl	20768 <z_impl_k_sem_take>
	notify_event(dev, &evt);
   170d4:	a902      	add	r1, sp, #8
   170d6:	4620      	mov	r0, r4
   170d8:	f011 fcf9 	bl	28ace <notify_event>
		nrf_gnss_data_frame_t raw_gps_data = {0};
   170dc:	22d8      	movs	r2, #216	; 0xd8
   170de:	2100      	movs	r1, #0
   170e0:	a862      	add	r0, sp, #392	; 0x188
   170e2:	f012 fa00 	bl	294e6 <memset>
		struct gps_event evt = {0};
   170e6:	22c0      	movs	r2, #192	; 0xc0
   170e8:	2100      	movs	r1, #0
   170ea:	a832      	add	r0, sp, #200	; 0xc8
   170ec:	f012 f9fb 	bl	294e6 <memset>
		len = nrf_recv(drv_data->socket, &raw_gps_data,
   170f0:	22d8      	movs	r2, #216	; 0xd8
   170f2:	2300      	movs	r3, #0
   170f4:	6a38      	ldr	r0, [r7, #32]
   170f6:	a962      	add	r1, sp, #392	; 0x188
   170f8:	f006 fd90 	bl	1dc1c <nrf_recv>
		if (len <= 0) {
   170fc:	1e02      	subs	r2, r0, #0
   170fe:	dc0a      	bgt.n	17116 <gps_thread+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17100:	f107 031c 	add.w	r3, r7, #28
   17104:	e8d3 3faf 	lda	r3, [r3]
			if (!atomic_get(&drv_data->is_active)) {
   17108:	2b00      	cmp	r3, #0
   1710a:	d0db      	beq.n	170c4 <gps_thread+0x2c>
			LOG_ERR("recv() returned error: %d", len);
   1710c:	4641      	mov	r1, r8
   1710e:	4628      	mov	r0, r5
   17110:	f00d f9f6 	bl	24500 <log_string_sync>
			continue;
   17114:	e7e2      	b.n	170dc <gps_thread+0x44>
		switch (raw_gps_data.data_id) {
   17116:	f89d a188 	ldrb.w	sl, [sp, #392]	; 0x188
   1711a:	f1ba 0f02 	cmp.w	sl, #2
   1711e:	f000 8089 	beq.w	17234 <gps_thread+0x19c>
   17122:	f1ba 0f03 	cmp.w	sl, #3
   17126:	f000 8099 	beq.w	1725c <gps_thread+0x1c4>
   1712a:	f1ba 0f01 	cmp.w	sl, #1
   1712e:	d1d5      	bne.n	170dc <gps_thread+0x44>
			if (has_no_time_window(&raw_gps_data.pvt) ||
   17130:	f89d 31cc 	ldrb.w	r3, [sp, #460]	; 0x1cc
   17134:	f013 0f18 	tst.w	r3, #24
   17138:	d00d      	beq.n	17156 <gps_thread+0xbe>
				if (operation_blocked) {
   1713a:	f1b9 0f00 	cmp.w	r9, #0
   1713e:	f040 80a0 	bne.w	17282 <gps_thread+0x1ea>
				evt.type = GPS_EVT_OPERATION_BLOCKED;
   17142:	2307      	movs	r3, #7
				notify_event(dev, &evt);
   17144:	4620      	mov	r0, r4
   17146:	a932      	add	r1, sp, #200	; 0xc8
			has_fix = false;
   17148:	464e      	mov	r6, r9
				evt.type = GPS_EVT_OPERATION_BLOCKED;
   1714a:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
				operation_blocked = true;
   1714e:	46d1      	mov	r9, sl
				notify_event(dev, &evt);
   17150:	f011 fcbd 	bl	28ace <notify_event>
				continue;
   17154:	e7c2      	b.n	170dc <gps_thread+0x44>
			} else if (operation_blocked) {
   17156:	f1b9 0f00 	cmp.w	r9, #0
   1715a:	d006      	beq.n	1716a <gps_thread+0xd2>
				evt.type = GPS_EVT_OPERATION_UNBLOCKED;
   1715c:	2308      	movs	r3, #8
				notify_event(dev, &evt);
   1715e:	4620      	mov	r0, r4
   17160:	a932      	add	r1, sp, #200	; 0xc8
				evt.type = GPS_EVT_OPERATION_UNBLOCKED;
   17162:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
				notify_event(dev, &evt);
   17166:	f011 fcb2 	bl	28ace <notify_event>
	dest->latitude = src->latitude;
   1716a:	e9dd 2364 	ldrd	r2, r3, [sp, #400]	; 0x190
	for (size_t i = 0;
   1716e:	2100      	movs	r1, #0
	dest->latitude = src->latitude;
   17170:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
	dest->longitude = src->longitude;
   17174:	e9dd 2366 	ldrd	r2, r3, [sp, #408]	; 0x198
   17178:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
	dest->altitude = src->altitude;
   1717c:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
	dest->datetime.year = src->datetime.year;
   1717e:	9a6c      	ldr	r2, [sp, #432]	; 0x1b0
	dest->altitude = src->altitude;
   17180:	9338      	str	r3, [sp, #224]	; 0xe0
	dest->accuracy = src->accuracy;
   17182:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
	dest->datetime.year = src->datetime.year;
   17184:	9241      	str	r2, [sp, #260]	; 0x104
	dest->accuracy = src->accuracy;
   17186:	9339      	str	r3, [sp, #228]	; 0xe4
	dest->speed = src->speed;
   17188:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
	dest->datetime.hour = src->datetime.hour;
   1718a:	f8bd 21b4 	ldrh.w	r2, [sp, #436]	; 0x1b4
	dest->speed = src->speed;
   1718e:	933a      	str	r3, [sp, #232]	; 0xe8
	dest->heading = src->heading;
   17190:	9b6b      	ldr	r3, [sp, #428]	; 0x1ac
	dest->datetime.hour = src->datetime.hour;
   17192:	f8ad 2108 	strh.w	r2, [sp, #264]	; 0x108
	dest->heading = src->heading;
   17196:	933b      	str	r3, [sp, #236]	; 0xec
	dest->datetime.seconds = src->datetime.seconds;
   17198:	f89d 31b6 	ldrb.w	r3, [sp, #438]	; 0x1b6
   1719c:	aa32      	add	r2, sp, #200	; 0xc8
   1719e:	f88d 310a 	strb.w	r3, [sp, #266]	; 0x10a
	dest->datetime.ms = src->datetime.ms;
   171a2:	f8bd 31b8 	ldrh.w	r3, [sp, #440]	; 0x1b8
   171a6:	f8ad 310c 	strh.w	r3, [sp, #268]	; 0x10c
	dest->pdop = src->pdop;
   171aa:	9b6f      	ldr	r3, [sp, #444]	; 0x1bc
   171ac:	933c      	str	r3, [sp, #240]	; 0xf0
	dest->hdop = src->hdop;
   171ae:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
   171b0:	933d      	str	r3, [sp, #244]	; 0xf4
	dest->vdop = src->vdop;
   171b2:	9b71      	ldr	r3, [sp, #452]	; 0x1c4
   171b4:	933e      	str	r3, [sp, #248]	; 0xf8
	dest->tdop = src->tdop;
   171b6:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
   171b8:	933f      	str	r3, [sp, #252]	; 0xfc
	     i < MIN(NRF_GNSS_MAX_SATELLITES, GPS_PVT_MAX_SV_COUNT); i++) {
   171ba:	ab62      	add	r3, sp, #392	; 0x188
		dest->sv[i].sv = src->sv[i].sv;
   171bc:	f8b3 0046 	ldrh.w	r0, [r3, #70]	; 0x46
	     i < MIN(NRF_GNSS_MAX_SATELLITES, GPS_PVT_MAX_SV_COUNT); i++) {
   171c0:	3101      	adds	r1, #1
		dest->sv[i].sv = src->sv[i].sv;
   171c2:	f8a2 0046 	strh.w	r0, [r2, #70]	; 0x46
		dest->sv[i].cn0 = src->sv[i].cn0;
   171c6:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
	for (size_t i = 0;
   171ca:	290c      	cmp	r1, #12
		dest->sv[i].cn0 = src->sv[i].cn0;
   171cc:	f8a2 0048 	strh.w	r0, [r2, #72]	; 0x48
		dest->sv[i].elevation = src->sv[i].elevation;
   171d0:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
   171d4:	f102 020a 	add.w	r2, r2, #10
   171d8:	f8a2 0040 	strh.w	r0, [r2, #64]	; 0x40
		dest->sv[i].azimuth = src->sv[i].azimuth;
   171dc:	f8b3 004e 	ldrh.w	r0, [r3, #78]	; 0x4e
   171e0:	f103 030c 	add.w	r3, r3, #12
   171e4:	f8a2 0042 	strh.w	r0, [r2, #66]	; 0x42
		dest->sv[i].signal = src->sv[i].signal;
   171e8:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
   171ec:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
	for (size_t i = 0;
   171f0:	d1e4      	bne.n	171bc <gps_thread+0x124>
		== NRF_GNSS_PVT_FLAG_FIX_VALID_BIT);
   171f2:	f89d 61cc 	ldrb.w	r6, [sp, #460]	; 0x1cc
			if (is_fix(&raw_gps_data.pvt)) {
   171f6:	f016 0601 	ands.w	r6, r6, #1
   171fa:	d017      	beq.n	1722c <gps_thread+0x194>
				evt.type = GPS_EVT_PVT_FIX;
   171fc:	2304      	movs	r3, #4
   171fe:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
	return z_impl_k_uptime_ticks();
   17202:	f011 ffe1 	bl	291c8 <z_impl_k_uptime_ticks>
	struct gps_drv_data *drv_data = dev->driver_data;
   17206:	68e0      	ldr	r0, [r4, #12]
	switch (drv_data->current_cfg.nav_mode) {
   17208:	7a03      	ldrb	r3, [r0, #8]
   1720a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   1720e:	d106      	bne.n	1721e <gps_thread+0x186>
		k_delayed_work_cancel(&drv_data->timeout_work);
   17210:	f600 103c 	addw	r0, r0, #2364	; 0x93c
   17214:	f011 ff6e 	bl	290f4 <k_delayed_work_cancel>
		stop_gps(dev, false);
   17218:	68e0      	ldr	r0, [r4, #12]
   1721a:	f7ff ff11 	bl	17040 <stop_gps.isra.0>
			notify_event(dev, &evt);
   1721e:	4620      	mov	r0, r4
   17220:	a932      	add	r1, sp, #200	; 0xc8
   17222:	f011 fc54 	bl	28ace <notify_event>
			print_satellite_stats(&raw_gps_data);
   17226:	f04f 0900 	mov.w	r9, #0
   1722a:	e757      	b.n	170dc <gps_thread+0x44>
				evt.type = GPS_EVT_PVT;
   1722c:	2303      	movs	r3, #3
   1722e:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
   17232:	e7f4      	b.n	1721e <gps_thread+0x186>
			if (operation_blocked) {
   17234:	f1b9 0f00 	cmp.w	r9, #0
   17238:	f47f af50 	bne.w	170dc <gps_thread+0x44>
			memcpy(evt.nmea.buf, raw_gps_data.nmea, len);
   1723c:	23b8      	movs	r3, #184	; 0xb8
   1723e:	a964      	add	r1, sp, #400	; 0x190
   17240:	a834      	add	r0, sp, #208	; 0xd0
   17242:	9201      	str	r2, [sp, #4]
   17244:	f012 f922 	bl	2948c <__memcpy_chk>
			evt.nmea.len = len - 1;
   17248:	9a01      	ldr	r2, [sp, #4]
				evt.type = GPS_EVT_NMEA_FIX;
   1724a:	2e00      	cmp	r6, #0
			evt.nmea.len = len - 1;
   1724c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
				evt.type = GPS_EVT_NMEA_FIX;
   17250:	bf0c      	ite	eq
   17252:	2305      	moveq	r3, #5
   17254:	2306      	movne	r3, #6
			evt.nmea.len = len - 1;
   17256:	f88d 2123 	strb.w	r2, [sp, #291]	; 0x123
			if (has_fix) {
   1725a:	e7e8      	b.n	1722e <gps_thread+0x196>
			evt.type = GPS_EVT_AGPS_DATA_NEEDED;
   1725c:	2309      	movs	r3, #9
   1725e:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
			evt.agps_request.sv_mask_ephe =
   17262:	9b64      	ldr	r3, [sp, #400]	; 0x190
			evt.agps_request.utc =
   17264:	f89d 20d8 	ldrb.w	r2, [sp, #216]	; 0xd8
			evt.agps_request.sv_mask_ephe =
   17268:	9334      	str	r3, [sp, #208]	; 0xd0
			evt.agps_request.sv_mask_alm =
   1726a:	9b65      	ldr	r3, [sp, #404]	; 0x194
			evt.agps_request.utc =
   1726c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
			evt.agps_request.sv_mask_alm =
   17270:	9335      	str	r3, [sp, #212]	; 0xd4
			evt.agps_request.utc =
   17272:	9b66      	ldr	r3, [sp, #408]	; 0x198
			notify_event(dev, &evt);
   17274:	a932      	add	r1, sp, #200	; 0xc8
			evt.agps_request.utc =
   17276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1727a:	4313      	orrs	r3, r2
   1727c:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
			notify_event(dev, &evt);
   17280:	e729      	b.n	170d6 <gps_thread+0x3e>
			has_fix = false;
   17282:	2600      	movs	r6, #0
   17284:	e72a      	b.n	170dc <gps_thread+0x44>
   17286:	bf00      	nop
   17288:	0002a33c 	.word	0x0002a33c
   1728c:	0002a2c4 	.word	0x0002a2c4
   17290:	0002cd0b 	.word	0x0002cd0b

00017294 <stop>:
{
   17294:	b538      	push	{r3, r4, r5, lr}
	struct gps_drv_data *drv_data = dev->driver_data;
   17296:	68c5      	ldr	r5, [r0, #12]
{
   17298:	4604      	mov	r4, r0
	k_delayed_work_cancel(&drv_data->timeout_work);
   1729a:	f605 103c 	addw	r0, r5, #2364	; 0x93c
   1729e:	f011 ff29 	bl	290f4 <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->start_work);
   172a2:	f605 00fc 	addw	r0, r5, #2300	; 0x8fc
   172a6:	f011 ff25 	bl	290f4 <k_delayed_work_cancel>
   172aa:	f105 031c 	add.w	r3, r5, #28
   172ae:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&drv_data->is_active) == 0) {
   172b2:	b943      	cbnz	r3, 172c6 <stop+0x32>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   172b4:	2200      	movs	r2, #0
   172b6:	2300      	movs	r3, #0
   172b8:	4806      	ldr	r0, [pc, #24]	; (172d4 <stop+0x40>)
   172ba:	f605 111c 	addw	r1, r5, #2332	; 0x91c
   172be:	f009 fb71 	bl	209a4 <k_delayed_work_submit_to_queue>
	return 0;
   172c2:	2000      	movs	r0, #0
}
   172c4:	bd38      	pop	{r3, r4, r5, pc}
	err = stop_gps(dev, false);
   172c6:	68e0      	ldr	r0, [r4, #12]
   172c8:	f7ff feba 	bl	17040 <stop_gps.isra.0>
	if (err) {
   172cc:	2800      	cmp	r0, #0
   172ce:	d0f1      	beq.n	172b4 <stop+0x20>
   172d0:	e7f8      	b.n	172c4 <stop+0x30>
   172d2:	bf00      	nop
   172d4:	200280fc 	.word	0x200280fc

000172d8 <setup>:
	drv_data->socket = -1;
   172d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct gps_drv_data *drv_data = dev->driver_data;
   172dc:	68c2      	ldr	r2, [r0, #12]
{
   172de:	b510      	push	{r4, lr}
	drv_data->socket = -1;
   172e0:	6213      	str	r3, [r2, #32]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   172e2:	2300      	movs	r3, #0
	drv_data->dev = dev;
   172e4:	f842 0b1c 	str.w	r0, [r2], #28
   172e8:	e8d2 1fef 	ldaex	r1, [r2]
   172ec:	e8c2 3fe0 	stlex	r0, r3, [r2]
   172f0:	2800      	cmp	r0, #0
   172f2:	d1f9      	bne.n	172e8 <setup+0x10>
	err = at_cmd_write(CONFIG_NRF9160_GPS_MAGPIO_STRING,
   172f4:	461a      	mov	r2, r3
   172f6:	4619      	mov	r1, r3
   172f8:	4811      	ldr	r0, [pc, #68]	; (17340 <setup+0x68>)
   172fa:	f7fe fb73 	bl	159e4 <at_cmd_write>
	if (err) {
   172fe:	4604      	mov	r4, r0
   17300:	b160      	cbz	r0, 1731c <setup+0x44>
		LOG_ERR("Could not configure MAGPIO, error: %d", err);
   17302:	4622      	mov	r2, r4
   17304:	480f      	ldr	r0, [pc, #60]	; (17344 <setup+0x6c>)
   17306:	4b10      	ldr	r3, [pc, #64]	; (17348 <setup+0x70>)
   17308:	4910      	ldr	r1, [pc, #64]	; (1734c <setup+0x74>)
   1730a:	1ac0      	subs	r0, r0, r3
   1730c:	08c0      	lsrs	r0, r0, #3
   1730e:	0180      	lsls	r0, r0, #6
		LOG_ERR("Could not configure COEX0, error: %d", err);
   17310:	f040 0001 	orr.w	r0, r0, #1
   17314:	f00d f8f4 	bl	24500 <log_string_sync>
}
   17318:	4620      	mov	r0, r4
   1731a:	bd10      	pop	{r4, pc}
	err = at_cmd_write(CONFIG_NRF9160_GPS_COEX0_STRING,
   1731c:	4603      	mov	r3, r0
   1731e:	4602      	mov	r2, r0
   17320:	4601      	mov	r1, r0
   17322:	480b      	ldr	r0, [pc, #44]	; (17350 <setup+0x78>)
   17324:	f7fe fb5e 	bl	159e4 <at_cmd_write>
	if (err) {
   17328:	4604      	mov	r4, r0
   1732a:	2800      	cmp	r0, #0
   1732c:	d0f4      	beq.n	17318 <setup+0x40>
   1732e:	4805      	ldr	r0, [pc, #20]	; (17344 <setup+0x6c>)
   17330:	4b05      	ldr	r3, [pc, #20]	; (17348 <setup+0x70>)
		LOG_ERR("Could not configure COEX0, error: %d", err);
   17332:	4622      	mov	r2, r4
   17334:	1ac0      	subs	r0, r0, r3
   17336:	08c0      	lsrs	r0, r0, #3
   17338:	4906      	ldr	r1, [pc, #24]	; (17354 <setup+0x7c>)
   1733a:	0180      	lsls	r0, r0, #6
   1733c:	e7e8      	b.n	17310 <setup+0x38>
   1733e:	bf00      	nop
   17340:	0002cd25 	.word	0x0002cd25
   17344:	0002a33c 	.word	0x0002a33c
   17348:	0002a2c4 	.word	0x0002a2c4
   1734c:	0002cd44 	.word	0x0002cd44
   17350:	0002cd6a 	.word	0x0002cd6a
   17354:	0002cd82 	.word	0x0002cd82

00017358 <timeout_work_fn>:
{
   17358:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1735c:	b0b0      	sub	sp, #192	; 0xc0
	struct device *dev = drv_data->dev;
   1735e:	f6a0 153c 	subw	r5, r0, #2364	; 0x93c
	struct gps_event evt = {
   17362:	22c0      	movs	r2, #192	; 0xc0
   17364:	2100      	movs	r1, #0
{
   17366:	4604      	mov	r4, r0
	struct gps_event evt = {
   17368:	4668      	mov	r0, sp
	struct device *dev = drv_data->dev;
   1736a:	682e      	ldr	r6, [r5, #0]
	struct gps_event evt = {
   1736c:	f012 f8bb 	bl	294e6 <memset>
   17370:	2302      	movs	r3, #2
	stop_gps(dev, true);
   17372:	68f0      	ldr	r0, [r6, #12]
	struct gps_event evt = {
   17374:	f88d 3000 	strb.w	r3, [sp]
	stop_gps(dev, true);
   17378:	f7ff fe62 	bl	17040 <stop_gps.isra.0>
	if (drv_data->current_cfg.nav_mode == GPS_NAV_MODE_PERIODIC) {
   1737c:	7a2b      	ldrb	r3, [r5, #8]
   1737e:	2b02      	cmp	r3, #2
   17380:	d11b      	bne.n	173ba <timeout_work_fn+0x62>
		u32_t start_delay = drv_data->current_cfg.interval -
   17382:	e9d5 1303 	ldrd	r1, r3, [r5, #12]
   17386:	1acb      	subs	r3, r1, r3
				      K_SECONDS(start_delay));
   17388:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
			return (u32_t)((t * to_hz + off) / from_hz);
   1738c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   17390:	f240 38e7 	movw	r8, #999	; 0x3e7
   17394:	f04f 0900 	mov.w	r9, #0
   17398:	4359      	muls	r1, r3
   1739a:	fbe0 8901 	umlal	r8, r9, r0, r1
   1739e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   173a2:	2300      	movs	r3, #0
   173a4:	4640      	mov	r0, r8
   173a6:	4649      	mov	r1, r9
   173a8:	f7f5 fa06 	bl	c7b8 <__aeabi_uldivmod>
   173ac:	2300      	movs	r3, #0
   173ae:	4602      	mov	r2, r0
   173b0:	f1a4 0140 	sub.w	r1, r4, #64	; 0x40
   173b4:	4804      	ldr	r0, [pc, #16]	; (173c8 <timeout_work_fn+0x70>)
   173b6:	f009 faf5 	bl	209a4 <k_delayed_work_submit_to_queue>
	notify_event(dev, &evt);
   173ba:	4669      	mov	r1, sp
   173bc:	4630      	mov	r0, r6
   173be:	f011 fb86 	bl	28ace <notify_event>
}
   173c2:	b030      	add	sp, #192	; 0xc0
   173c4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   173c8:	200280fc 	.word	0x200280fc

000173cc <start>:
	struct nrf9160_gps_config gps_cfg = { 0 };
   173cc:	2210      	movs	r2, #16
{
   173ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct gps_drv_data *drv_data = dev->driver_data;
   173d2:	68c6      	ldr	r6, [r0, #12]
{
   173d4:	b089      	sub	sp, #36	; 0x24
   173d6:	460c      	mov	r4, r1
	struct nrf9160_gps_config gps_cfg = { 0 };
   173d8:	eb0d 0002 	add.w	r0, sp, r2
   173dc:	2100      	movs	r1, #0
   173de:	f012 f882 	bl	294e6 <memset>
	if (atomic_get(&drv_data->is_active)) {
   173e2:	f106 071c 	add.w	r7, r6, #28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   173e6:	e8d7 3faf 	lda	r3, [r7]
   173ea:	b17b      	cbz	r3, 1740c <start+0x40>
   173ec:	4bb2      	ldr	r3, [pc, #712]	; (176b8 <start+0x2ec>)
   173ee:	48b3      	ldr	r0, [pc, #716]	; (176bc <start+0x2f0>)
		LOG_WRN("GPS is already active");
   173f0:	49b3      	ldr	r1, [pc, #716]	; (176c0 <start+0x2f4>)
   173f2:	1ac0      	subs	r0, r0, r3
   173f4:	08c0      	lsrs	r0, r0, #3
   173f6:	0180      	lsls	r0, r0, #6
   173f8:	f040 0002 	orr.w	r0, r0, #2
   173fc:	f00d f880 	bl	24500 <log_string_sync>
		return -EALREADY;
   17400:	f06f 0577 	mvn.w	r5, #119	; 0x77
}
   17404:	4628      	mov	r0, r5
   17406:	b009      	add	sp, #36	; 0x24
   17408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (cfg_src->nav_mode) {
   1740c:	7822      	ldrb	r2, [r4, #0]
   1740e:	2a01      	cmp	r2, #1
   17410:	d017      	beq.n	17442 <start+0x76>
   17412:	2a02      	cmp	r2, #2
   17414:	d019      	beq.n	1744a <start+0x7e>
   17416:	2a00      	cmp	r2, #0
   17418:	d140      	bne.n	1749c <start+0xd0>
		cfg_dst->retry = cfg_src->timeout < 0 ? 0 : cfg_src->timeout;
   1741a:	68a3      	ldr	r3, [r4, #8]
		cfg_dst->interval = 0;
   1741c:	f8ad 2012 	strh.w	r2, [sp, #18]
		cfg_dst->retry = cfg_src->timeout < 0 ? 0 : cfg_src->timeout;
   17420:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   17424:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (cfg_src->delete_agps_data) {
   17428:	7b23      	ldrb	r3, [r4, #12]
   1742a:	b10b      	cbz	r3, 17430 <start+0x64>
		cfg_dst->delete_mask = 0xFF;
   1742c:	23ff      	movs	r3, #255	; 0xff
   1742e:	9306      	str	r3, [sp, #24]
	*nmea_mask |= NRF_GNSS_NMEA_GGA_MASK;
   17430:	2301      	movs	r3, #1
   17432:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (cfg_src->power_mode == GPS_POWER_MODE_PERFORMANCE) {
   17436:	7863      	ldrb	r3, [r4, #1]
   17438:	2b01      	cmp	r3, #1
   1743a:	d13a      	bne.n	174b2 <start+0xe6>
		cfg_dst->power_mode = NRF_GNSS_PSM_DUTY_CYCLING_POWER;
   1743c:	f88d 301c 	strb.w	r3, [sp, #28]
	if (err) {
   17440:	e039      	b.n	174b6 <start+0xea>
		cfg_dst->retry = 0;
   17442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   17446:	9304      	str	r3, [sp, #16]
		break;
   17448:	e7ee      	b.n	17428 <start+0x5c>
		if (cfg_src->interval < 10) {
   1744a:	6863      	ldr	r3, [r4, #4]
   1744c:	2b09      	cmp	r3, #9
   1744e:	d816      	bhi.n	1747e <start+0xb2>
   17450:	489a      	ldr	r0, [pc, #616]	; (176bc <start+0x2f0>)
   17452:	4b99      	ldr	r3, [pc, #612]	; (176b8 <start+0x2ec>)
			LOG_ERR("Minimum periodic interval is 10 sec");
   17454:	499b      	ldr	r1, [pc, #620]	; (176c4 <start+0x2f8>)
   17456:	1ac0      	subs	r0, r0, r3
   17458:	08c0      	lsrs	r0, r0, #3
   1745a:	0180      	lsls	r0, r0, #6
			LOG_ERR("Interval must be longer than timeout");
   1745c:	f040 0001 	orr.w	r0, r0, #1
   17460:	f00d f84e 	bl	24500 <log_string_sync>
   17464:	4b94      	ldr	r3, [pc, #592]	; (176b8 <start+0x2ec>)
   17466:	4895      	ldr	r0, [pc, #596]	; (176bc <start+0x2f0>)
		LOG_ERR("Invalid GPS configuration");
   17468:	4997      	ldr	r1, [pc, #604]	; (176c8 <start+0x2fc>)
   1746a:	1ac0      	subs	r0, r0, r3
   1746c:	08c0      	lsrs	r0, r0, #3
   1746e:	0180      	lsls	r0, r0, #6
   17470:	f040 0001 	orr.w	r0, r0, #1
   17474:	f00d f844 	bl	24500 <log_string_sync>
		return err;
   17478:	f06f 0515 	mvn.w	r5, #21
   1747c:	e7c2      	b.n	17404 <start+0x38>
		if (cfg_src->timeout >= cfg_src->interval) {
   1747e:	68a2      	ldr	r2, [r4, #8]
   17480:	4293      	cmp	r3, r2
   17482:	d806      	bhi.n	17492 <start+0xc6>
   17484:	488d      	ldr	r0, [pc, #564]	; (176bc <start+0x2f0>)
   17486:	4b8c      	ldr	r3, [pc, #560]	; (176b8 <start+0x2ec>)
			LOG_ERR("Interval must be longer than timeout");
   17488:	4990      	ldr	r1, [pc, #576]	; (176cc <start+0x300>)
   1748a:	1ac0      	subs	r0, r0, r3
   1748c:	08c0      	lsrs	r0, r0, #3
   1748e:	0180      	lsls	r0, r0, #6
   17490:	e7e4      	b.n	1745c <start+0x90>
		cfg_dst->retry = cfg_src->timeout;
   17492:	f8ad 2010 	strh.w	r2, [sp, #16]
		cfg_dst->interval = cfg_src->interval;
   17496:	f8ad 3012 	strh.w	r3, [sp, #18]
		break;
   1749a:	e7c5      	b.n	17428 <start+0x5c>
   1749c:	4b86      	ldr	r3, [pc, #536]	; (176b8 <start+0x2ec>)
   1749e:	4887      	ldr	r0, [pc, #540]	; (176bc <start+0x2f0>)
		LOG_ERR("Invalid operation mode (%d), GPS will not start",
   174a0:	498b      	ldr	r1, [pc, #556]	; (176d0 <start+0x304>)
   174a2:	1ac0      	subs	r0, r0, r3
   174a4:	08c0      	lsrs	r0, r0, #3
   174a6:	0180      	lsls	r0, r0, #6
   174a8:	f040 0001 	orr.w	r0, r0, #1
   174ac:	f00d f828 	bl	24500 <log_string_sync>
	if (err) {
   174b0:	e7d8      	b.n	17464 <start+0x98>
	} else if (cfg_src->power_mode == GPS_POWER_MODE_SAVE) {
   174b2:	2b02      	cmp	r3, #2
   174b4:	d0c2      	beq.n	1743c <start+0x70>
	if (cfg != &drv_data->current_cfg) {
   174b6:	f106 0308 	add.w	r3, r6, #8
   174ba:	42a3      	cmp	r3, r4
   174bc:	d008      	beq.n	174d0 <start+0x104>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   174be:	4622      	mov	r2, r4
   174c0:	f104 0110 	add.w	r1, r4, #16
   174c4:	f852 0b04 	ldr.w	r0, [r2], #4
   174c8:	428a      	cmp	r2, r1
   174ca:	f843 0b04 	str.w	r0, [r3], #4
   174ce:	d1f9      	bne.n	174c4 <start+0xf8>
	err = lte_lc_system_mode_get(&system_mode);
   174d0:	f10d 000e 	add.w	r0, sp, #14
   174d4:	f7ff f946 	bl	16764 <lte_lc_system_mode_get>
	if (err) {
   174d8:	b1a8      	cbz	r0, 17506 <start+0x13a>
   174da:	4a77      	ldr	r2, [pc, #476]	; (176b8 <start+0x2ec>)
   174dc:	4b77      	ldr	r3, [pc, #476]	; (176bc <start+0x2f0>)
		LOG_ERR("Could not get modem system mode, error: %d", err);
   174de:	497d      	ldr	r1, [pc, #500]	; (176d4 <start+0x308>)
   174e0:	1a9b      	subs	r3, r3, r2
   174e2:	4602      	mov	r2, r0
   174e4:	08db      	lsrs	r3, r3, #3
   174e6:	019b      	lsls	r3, r3, #6
		LOG_ERR("Could not get modem's functional mode, error: %d",
   174e8:	f043 0001 	orr.w	r0, r3, #1
   174ec:	f00d f808 	bl	24500 <log_string_sync>
   174f0:	4872      	ldr	r0, [pc, #456]	; (176bc <start+0x2f0>)
   174f2:	4b71      	ldr	r3, [pc, #452]	; (176b8 <start+0x2ec>)
		LOG_ERR("Failed to enable GPS");
   174f4:	4978      	ldr	r1, [pc, #480]	; (176d8 <start+0x30c>)
   174f6:	1ac0      	subs	r0, r0, r3
   174f8:	08c0      	lsrs	r0, r0, #3
   174fa:	0180      	lsls	r0, r0, #6
		LOG_ERR("Failed to start GPS");
   174fc:	f040 0001 	orr.w	r0, r0, #1
   17500:	f00c fffe 	bl	24500 <log_string_sync>
   17504:	e04a      	b.n	1759c <start+0x1d0>
	    (system_mode != LTE_LC_SYSTEM_MODE_LTEM_GPS) &&
   17506:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((system_mode != LTE_LC_SYSTEM_MODE_GPS) &&
   1750a:	1eda      	subs	r2, r3, #3
   1750c:	2a02      	cmp	r2, #2
   1750e:	d912      	bls.n	17536 <start+0x16a>
		if (system_mode == LTE_LC_SYSTEM_MODE_LTEM) {
   17510:	2b01      	cmp	r3, #1
   17512:	d00e      	beq.n	17532 <start+0x166>
			new_mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   17514:	2b02      	cmp	r3, #2
   17516:	bf14      	ite	ne
   17518:	2003      	movne	r0, #3
   1751a:	2005      	moveq	r0, #5
		err = lte_lc_system_mode_set(new_mode);
   1751c:	f7ff f806 	bl	1652c <lte_lc_system_mode_set>
		if (err) {
   17520:	b148      	cbz	r0, 17536 <start+0x16a>
   17522:	4a65      	ldr	r2, [pc, #404]	; (176b8 <start+0x2ec>)
   17524:	4b65      	ldr	r3, [pc, #404]	; (176bc <start+0x2f0>)
			LOG_ERR("Could not enable GPS mode, error: %d", err);
   17526:	496d      	ldr	r1, [pc, #436]	; (176dc <start+0x310>)
   17528:	1a9b      	subs	r3, r3, r2
   1752a:	08db      	lsrs	r3, r3, #3
   1752c:	4602      	mov	r2, r0
   1752e:	019b      	lsls	r3, r3, #6
   17530:	e7da      	b.n	174e8 <start+0x11c>
			new_mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   17532:	2004      	movs	r0, #4
   17534:	e7f2      	b.n	1751c <start+0x150>
	err = lte_lc_func_mode_get(&functional_mode);
   17536:	f10d 000f 	add.w	r0, sp, #15
   1753a:	f7ff f9e9 	bl	16910 <lte_lc_func_mode_get>
	if (err) {
   1753e:	b138      	cbz	r0, 17550 <start+0x184>
   17540:	4a5d      	ldr	r2, [pc, #372]	; (176b8 <start+0x2ec>)
   17542:	4b5e      	ldr	r3, [pc, #376]	; (176bc <start+0x2f0>)
		LOG_ERR("Could not get modem's functional mode, error: %d",
   17544:	4966      	ldr	r1, [pc, #408]	; (176e0 <start+0x314>)
   17546:	1a9b      	subs	r3, r3, r2
   17548:	08db      	lsrs	r3, r3, #3
   1754a:	4602      	mov	r2, r0
   1754c:	019b      	lsls	r3, r3, #6
   1754e:	e7cb      	b.n	174e8 <start+0x11c>
	if (functional_mode != LTE_LC_FUNC_MODE_NORMAL) {
   17550:	f89d 800f 	ldrb.w	r8, [sp, #15]
   17554:	f1b8 0f01 	cmp.w	r8, #1
   17558:	d00a      	beq.n	17570 <start+0x1a4>
   1755a:	4b57      	ldr	r3, [pc, #348]	; (176b8 <start+0x2ec>)
   1755c:	4857      	ldr	r0, [pc, #348]	; (176bc <start+0x2f0>)
		LOG_ERR("GPS is not supported in current functional mode");
   1755e:	4961      	ldr	r1, [pc, #388]	; (176e4 <start+0x318>)
   17560:	1ac0      	subs	r0, r0, r3
   17562:	08c0      	lsrs	r0, r0, #3
   17564:	0180      	lsls	r0, r0, #6
   17566:	f040 0001 	orr.w	r0, r0, #1
   1756a:	f00c ffc9 	bl	24500 <log_string_sync>
		return -EIO;
   1756e:	e7bf      	b.n	174f0 <start+0x124>
	retval = nrf_setsockopt(drv_data->socket,
   17570:	2502      	movs	r5, #2
   17572:	9500      	str	r5, [sp, #0]
   17574:	462a      	mov	r2, r5
   17576:	f44f 7101 	mov.w	r1, #516	; 0x204
   1757a:	6a30      	ldr	r0, [r6, #32]
   1757c:	ab04      	add	r3, sp, #16
   1757e:	f006 fbb1 	bl	1dce4 <nrf_setsockopt>
	if (retval != 0) {
   17582:	b170      	cbz	r0, 175a2 <start+0x1d6>
   17584:	484d      	ldr	r0, [pc, #308]	; (176bc <start+0x2f0>)
   17586:	4b4c      	ldr	r3, [pc, #304]	; (176b8 <start+0x2ec>)
		LOG_ERR("Failed to set fix retry value: %d", gps_cfg.retry);
   17588:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1758c:	1ac0      	subs	r0, r0, r3
   1758e:	08c0      	lsrs	r0, r0, #3
   17590:	0180      	lsls	r0, r0, #6
   17592:	4955      	ldr	r1, [pc, #340]	; (176e8 <start+0x31c>)
   17594:	f040 0001 	orr.w	r0, r0, #1
   17598:	f00c ffb2 	bl	24500 <log_string_sync>
		return -EIO;
   1759c:	f06f 0504 	mvn.w	r5, #4
   175a0:	e730      	b.n	17404 <start+0x38>
	retval = nrf_setsockopt(drv_data->socket,
   175a2:	9500      	str	r5, [sp, #0]
   175a4:	4642      	mov	r2, r8
   175a6:	f44f 7101 	mov.w	r1, #516	; 0x204
   175aa:	6a30      	ldr	r0, [r6, #32]
   175ac:	f10d 0312 	add.w	r3, sp, #18
   175b0:	f006 fb98 	bl	1dce4 <nrf_setsockopt>
	if (retval != 0) {
   175b4:	b130      	cbz	r0, 175c4 <start+0x1f8>
   175b6:	4841      	ldr	r0, [pc, #260]	; (176bc <start+0x2f0>)
   175b8:	4b3f      	ldr	r3, [pc, #252]	; (176b8 <start+0x2ec>)
		LOG_ERR("Failed to set fix interval value");
   175ba:	494c      	ldr	r1, [pc, #304]	; (176ec <start+0x320>)
   175bc:	1ac0      	subs	r0, r0, r3
   175be:	08c0      	lsrs	r0, r0, #3
   175c0:	0180      	lsls	r0, r0, #6
   175c2:	e79b      	b.n	174fc <start+0x130>
	retval = nrf_setsockopt(drv_data->socket,
   175c4:	9500      	str	r5, [sp, #0]
   175c6:	2204      	movs	r2, #4
   175c8:	f44f 7101 	mov.w	r1, #516	; 0x204
   175cc:	6a30      	ldr	r0, [r6, #32]
   175ce:	ab05      	add	r3, sp, #20
   175d0:	f006 fb88 	bl	1dce4 <nrf_setsockopt>
	if (retval != 0) {
   175d4:	b130      	cbz	r0, 175e4 <start+0x218>
   175d6:	4839      	ldr	r0, [pc, #228]	; (176bc <start+0x2f0>)
   175d8:	4b37      	ldr	r3, [pc, #220]	; (176b8 <start+0x2ec>)
		LOG_ERR("Failed to set nmea mask");
   175da:	4945      	ldr	r1, [pc, #276]	; (176f0 <start+0x324>)
   175dc:	1ac0      	subs	r0, r0, r3
   175de:	08c0      	lsrs	r0, r0, #3
   175e0:	0180      	lsls	r0, r0, #6
   175e2:	e78b      	b.n	174fc <start+0x130>
	if (gps_cfg.power_mode != NRF_GNSS_PSM_DISABLED) {
   175e4:	f89d 301c 	ldrb.w	r3, [sp, #28]
   175e8:	b183      	cbz	r3, 1760c <start+0x240>
		retval = nrf_setsockopt(drv_data->socket,
   175ea:	f8cd 8000 	str.w	r8, [sp]
   175ee:	2209      	movs	r2, #9
   175f0:	f44f 7101 	mov.w	r1, #516	; 0x204
   175f4:	6a30      	ldr	r0, [r6, #32]
   175f6:	ab07      	add	r3, sp, #28
   175f8:	f006 fb74 	bl	1dce4 <nrf_setsockopt>
		if (retval != 0) {
   175fc:	b130      	cbz	r0, 1760c <start+0x240>
   175fe:	482f      	ldr	r0, [pc, #188]	; (176bc <start+0x2f0>)
   17600:	4b2d      	ldr	r3, [pc, #180]	; (176b8 <start+0x2ec>)
			LOG_ERR("Failed to set GPS power mode");
   17602:	493c      	ldr	r1, [pc, #240]	; (176f4 <start+0x328>)
   17604:	1ac0      	subs	r0, r0, r3
   17606:	08c0      	lsrs	r0, r0, #3
   17608:	0180      	lsls	r0, r0, #6
   1760a:	e777      	b.n	174fc <start+0x130>
	retval = nrf_setsockopt(drv_data->socket,
   1760c:	2304      	movs	r3, #4
   1760e:	9300      	str	r3, [sp, #0]
   17610:	2207      	movs	r2, #7
   17612:	f44f 7101 	mov.w	r1, #516	; 0x204
   17616:	6a30      	ldr	r0, [r6, #32]
   17618:	ab06      	add	r3, sp, #24
   1761a:	f006 fb63 	bl	1dce4 <nrf_setsockopt>
	if (retval != 0) {
   1761e:	4605      	mov	r5, r0
   17620:	b130      	cbz	r0, 17630 <start+0x264>
   17622:	4826      	ldr	r0, [pc, #152]	; (176bc <start+0x2f0>)
   17624:	4b24      	ldr	r3, [pc, #144]	; (176b8 <start+0x2ec>)
		LOG_ERR("Failed to start GPS");
   17626:	4934      	ldr	r1, [pc, #208]	; (176f8 <start+0x32c>)
   17628:	1ac0      	subs	r0, r0, r3
   1762a:	08c0      	lsrs	r0, r0, #3
   1762c:	0180      	lsls	r0, r0, #6
   1762e:	e765      	b.n	174fc <start+0x130>
	if (gps_cfg.retry > 0) {
   17630:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   17634:	b1bb      	cbz	r3, 17666 <start+0x29a>
				      K_SECONDS(cfg->timeout));
   17636:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   1763a:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1763e:	f240 30e7 	movw	r0, #999	; 0x3e7
   17642:	2100      	movs	r1, #0
   17644:	68a3      	ldr	r3, [r4, #8]
   17646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1764a:	fb0c fc03 	mul.w	ip, ip, r3
   1764e:	2300      	movs	r3, #0
   17650:	fbee 010c 	umlal	r0, r1, lr, ip
   17654:	f7f5 f8b0 	bl	c7b8 <__aeabi_uldivmod>
   17658:	462b      	mov	r3, r5
   1765a:	4602      	mov	r2, r0
   1765c:	f606 113c 	addw	r1, r6, #2364	; 0x93c
   17660:	4826      	ldr	r0, [pc, #152]	; (176fc <start+0x330>)
   17662:	f009 f99f 	bl	209a4 <k_delayed_work_submit_to_queue>
	if (cfg->nav_mode == GPS_NAV_MODE_PERIODIC) {
   17666:	7823      	ldrb	r3, [r4, #0]
   17668:	2b02      	cmp	r3, #2
   1766a:	d119      	bne.n	176a0 <start+0x2d4>
				      K_SECONDS(cfg->interval));
   1766c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   17670:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   17674:	f240 38e7 	movw	r8, #999	; 0x3e7
   17678:	f04f 0900 	mov.w	r9, #0
   1767c:	6863      	ldr	r3, [r4, #4]
   1767e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17682:	4359      	muls	r1, r3
   17684:	fbe0 8901 	umlal	r8, r9, r0, r1
   17688:	2300      	movs	r3, #0
   1768a:	4640      	mov	r0, r8
   1768c:	4649      	mov	r1, r9
   1768e:	f7f5 f893 	bl	c7b8 <__aeabi_uldivmod>
   17692:	2300      	movs	r3, #0
   17694:	4602      	mov	r2, r0
   17696:	f606 01fc 	addw	r1, r6, #2300	; 0x8fc
   1769a:	4818      	ldr	r0, [pc, #96]	; (176fc <start+0x330>)
   1769c:	f009 f982 	bl	209a4 <k_delayed_work_submit_to_queue>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   176a0:	2301      	movs	r3, #1
   176a2:	e8d7 2fef 	ldaex	r2, [r7]
   176a6:	e8c7 3fe1 	stlex	r1, r3, [r7]
   176aa:	2900      	cmp	r1, #0
   176ac:	d1f9      	bne.n	176a2 <start+0x2d6>
	z_impl_k_sem_give(sem);
   176ae:	f606 00e4 	addw	r0, r6, #2276	; 0x8e4
   176b2:	f009 f833 	bl	2071c <z_impl_k_sem_give>
}
   176b6:	e6a5      	b.n	17404 <start+0x38>
   176b8:	0002a2c4 	.word	0x0002a2c4
   176bc:	0002a33c 	.word	0x0002a33c
   176c0:	0002cda7 	.word	0x0002cda7
   176c4:	0002cdbd 	.word	0x0002cdbd
   176c8:	0002ce36 	.word	0x0002ce36
   176cc:	0002cde1 	.word	0x0002cde1
   176d0:	0002ce06 	.word	0x0002ce06
   176d4:	0002ce50 	.word	0x0002ce50
   176d8:	0002cf01 	.word	0x0002cf01
   176dc:	0002ce7b 	.word	0x0002ce7b
   176e0:	0002cea0 	.word	0x0002cea0
   176e4:	0002ced1 	.word	0x0002ced1
   176e8:	0002cf16 	.word	0x0002cf16
   176ec:	0002cf38 	.word	0x0002cf38
   176f0:	0002cf59 	.word	0x0002cf59
   176f4:	0002cf71 	.word	0x0002cf71
   176f8:	0002cf8e 	.word	0x0002cf8e
   176fc:	200280fc 	.word	0x200280fc

00017700 <packet_free_cb>:
   17700:	b510      	push	{r4, lr}
   17702:	4604      	mov	r4, r0
   17704:	6800      	ldr	r0, [r0, #0]
   17706:	f004 fcd9 	bl	1c0bc <rpc_logobj_client_data_free>
   1770a:	68a0      	ldr	r0, [r4, #8]
   1770c:	b118      	cbz	r0, 17716 <packet_free_cb+0x16>
   1770e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17712:	f007 ba8d 	b.w	1ec30 <nrf_free>
   17716:	bd10      	pop	{r4, pc}

00017718 <logobj_event_handler>:
   17718:	b530      	push	{r4, r5, lr}
   1771a:	4b3b      	ldr	r3, [pc, #236]	; (17808 <logobj_event_handler+0xf0>)
   1771c:	b085      	sub	sp, #20
   1771e:	681d      	ldr	r5, [r3, #0]
   17720:	2d00      	cmp	r5, #0
   17722:	d04c      	beq.n	177be <logobj_event_handler+0xa6>
   17724:	f248 0302 	movw	r3, #32770	; 0x8002
   17728:	4299      	cmp	r1, r3
   1772a:	d053      	beq.n	177d4 <logobj_event_handler+0xbc>
   1772c:	d91c      	bls.n	17768 <logobj_event_handler+0x50>
   1772e:	f248 0303 	movw	r3, #32771	; 0x8003
   17732:	4299      	cmp	r1, r3
   17734:	d05a      	beq.n	177ec <logobj_event_handler+0xd4>
   17736:	f249 0301 	movw	r3, #36865	; 0x9001
   1773a:	4299      	cmp	r1, r3
   1773c:	d147      	bne.n	177ce <logobj_event_handler+0xb6>
   1773e:	2400      	movs	r4, #0
   17740:	6843      	ldr	r3, [r0, #4]
   17742:	6802      	ldr	r2, [r0, #0]
   17744:	e9cd 4402 	strd	r4, r4, [sp, #8]
   17748:	e9cd 2300 	strd	r2, r3, [sp]
   1774c:	69e8      	ldr	r0, [r5, #28]
   1774e:	4669      	mov	r1, sp
   17750:	6803      	ldr	r3, [r0, #0]
   17752:	685b      	ldr	r3, [r3, #4]
   17754:	4798      	blx	r3
   17756:	3001      	adds	r0, #1
   17758:	d04e      	beq.n	177f8 <logobj_event_handler+0xe0>
   1775a:	4620      	mov	r0, r4
   1775c:	682b      	ldr	r3, [r5, #0]
   1775e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17762:	602b      	str	r3, [r5, #0]
   17764:	b005      	add	sp, #20
   17766:	bd30      	pop	{r4, r5, pc}
   17768:	f248 0301 	movw	r3, #32769	; 0x8001
   1776c:	4299      	cmp	r1, r3
   1776e:	d12e      	bne.n	177ce <logobj_event_handler+0xb6>
   17770:	68c3      	ldr	r3, [r0, #12]
   17772:	2b00      	cmp	r3, #0
   17774:	d135      	bne.n	177e2 <logobj_event_handler+0xca>
   17776:	6828      	ldr	r0, [r5, #0]
   17778:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1777c:	d03e      	beq.n	177fc <logobj_event_handler+0xe4>
   1777e:	682b      	ldr	r3, [r5, #0]
   17780:	b29b      	uxth	r3, r3
   17782:	2b01      	cmp	r3, #1
   17784:	d105      	bne.n	17792 <logobj_event_handler+0x7a>
   17786:	682b      	ldr	r3, [r5, #0]
   17788:	0c1b      	lsrs	r3, r3, #16
   1778a:	041b      	lsls	r3, r3, #16
   1778c:	f043 0302 	orr.w	r3, r3, #2
   17790:	602b      	str	r3, [r5, #0]
   17792:	4b1e      	ldr	r3, [pc, #120]	; (1780c <logobj_event_handler+0xf4>)
   17794:	781a      	ldrb	r2, [r3, #0]
   17796:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1779a:	2a00      	cmp	r2, #0
   1779c:	d031      	beq.n	17802 <logobj_event_handler+0xea>
   1779e:	4a1c      	ldr	r2, [pc, #112]	; (17810 <logobj_event_handler+0xf8>)
   177a0:	7811      	ldrb	r1, [r2, #0]
   177a2:	b909      	cbnz	r1, 177a8 <logobj_event_handler+0x90>
   177a4:	2101      	movs	r1, #1
   177a6:	7011      	strb	r1, [r2, #0]
   177a8:	2000      	movs	r0, #0
   177aa:	7018      	strb	r0, [r3, #0]
   177ac:	682b      	ldr	r3, [r5, #0]
   177ae:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   177b2:	602b      	str	r3, [r5, #0]
   177b4:	682b      	ldr	r3, [r5, #0]
   177b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   177ba:	602b      	str	r3, [r5, #0]
   177bc:	e7d2      	b.n	17764 <logobj_event_handler+0x4c>
   177be:	6800      	ldr	r0, [r0, #0]
   177c0:	2800      	cmp	r0, #0
   177c2:	d0cf      	beq.n	17764 <logobj_event_handler+0x4c>
   177c4:	f004 fc7a 	bl	1c0bc <rpc_logobj_client_data_free>
   177c8:	4628      	mov	r0, r5
   177ca:	b005      	add	sp, #20
   177cc:	bd30      	pop	{r4, r5, pc}
   177ce:	2000      	movs	r0, #0
   177d0:	b005      	add	sp, #20
   177d2:	bd30      	pop	{r4, r5, pc}
   177d4:	682b      	ldr	r3, [r5, #0]
   177d6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   177da:	d00b      	beq.n	177f4 <logobj_event_handler+0xdc>
   177dc:	68c0      	ldr	r0, [r0, #12]
   177de:	2800      	cmp	r0, #0
   177e0:	d0e4      	beq.n	177ac <logobj_event_handler+0x94>
   177e2:	230e      	movs	r3, #14
   177e4:	2000      	movs	r0, #0
   177e6:	606b      	str	r3, [r5, #4]
   177e8:	b005      	add	sp, #20
   177ea:	bd30      	pop	{r4, r5, pc}
   177ec:	68c3      	ldr	r3, [r0, #12]
   177ee:	2b01      	cmp	r3, #1
   177f0:	d1a5      	bne.n	1773e <logobj_event_handler+0x26>
   177f2:	e7f6      	b.n	177e2 <logobj_event_handler+0xca>
   177f4:	4618      	mov	r0, r3
   177f6:	e7b5      	b.n	17764 <logobj_event_handler+0x4c>
   177f8:	2002      	movs	r0, #2
   177fa:	e7b3      	b.n	17764 <logobj_event_handler+0x4c>
   177fc:	230e      	movs	r3, #14
   177fe:	606b      	str	r3, [r5, #4]
   17800:	e7b0      	b.n	17764 <logobj_event_handler+0x4c>
   17802:	4a03      	ldr	r2, [pc, #12]	; (17810 <logobj_event_handler+0xf8>)
   17804:	7011      	strb	r1, [r2, #0]
   17806:	e7cf      	b.n	177a8 <logobj_event_handler+0x90>
   17808:	20023104 	.word	0x20023104
   1780c:	2002af6d 	.word	0x2002af6d
   17810:	2002af6e 	.word	0x2002af6e

00017814 <logobj_interface_init>:
   17814:	2300      	movs	r3, #0
   17816:	b510      	push	{r4, lr}
   17818:	4808      	ldr	r0, [pc, #32]	; (1783c <logobj_interface_init+0x28>)
   1781a:	4c09      	ldr	r4, [pc, #36]	; (17840 <logobj_interface_init+0x2c>)
   1781c:	4909      	ldr	r1, [pc, #36]	; (17844 <logobj_interface_init+0x30>)
   1781e:	4a0a      	ldr	r2, [pc, #40]	; (17848 <logobj_interface_init+0x34>)
   17820:	7023      	strb	r3, [r4, #0]
   17822:	6003      	str	r3, [r0, #0]
   17824:	700b      	strb	r3, [r1, #0]
   17826:	6013      	str	r3, [r2, #0]
   17828:	f004 fc0c 	bl	1c044 <rpc_logobj_client_init>
   1782c:	b918      	cbnz	r0, 17836 <logobj_interface_init+0x22>
   1782e:	2201      	movs	r2, #1
   17830:	4b06      	ldr	r3, [pc, #24]	; (1784c <logobj_interface_init+0x38>)
   17832:	701a      	strb	r2, [r3, #0]
   17834:	bd10      	pop	{r4, pc}
   17836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1783a:	bd10      	pop	{r4, pc}
   1783c:	20023104 	.word	0x20023104
   17840:	2002af6e 	.word	0x2002af6e
   17844:	2002af6d 	.word	0x2002af6d
   17848:	20023100 	.word	0x20023100
   1784c:	2002af6f 	.word	0x2002af6f

00017850 <logobj_interface_open>:
   17850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17854:	2400      	movs	r4, #0
   17856:	4b5b      	ldr	r3, [pc, #364]	; (179c4 <logobj_interface_open+0x174>)
   17858:	b084      	sub	sp, #16
   1785a:	781b      	ldrb	r3, [r3, #0]
   1785c:	9401      	str	r4, [sp, #4]
   1785e:	2b00      	cmp	r3, #0
   17860:	f000 809f 	beq.w	179a2 <logobj_interface_open+0x152>
   17864:	2866      	cmp	r0, #102	; 0x66
   17866:	4680      	mov	r8, r0
   17868:	f040 808f 	bne.w	1798a <logobj_interface_open+0x13a>
   1786c:	2902      	cmp	r1, #2
   1786e:	4689      	mov	r9, r1
   17870:	f040 808b 	bne.w	1798a <logobj_interface_open+0x13a>
   17874:	f240 2305 	movw	r3, #517	; 0x205
   17878:	429a      	cmp	r2, r3
   1787a:	4692      	mov	sl, r2
   1787c:	f040 8085 	bne.w	1798a <logobj_interface_open+0x13a>
   17880:	4f51      	ldr	r7, [pc, #324]	; (179c8 <logobj_interface_open+0x178>)
   17882:	683d      	ldr	r5, [r7, #0]
   17884:	2d00      	cmp	r5, #0
   17886:	f040 8086 	bne.w	17996 <logobj_interface_open+0x146>
   1788a:	4a50      	ldr	r2, [pc, #320]	; (179cc <logobj_interface_open+0x17c>)
   1788c:	a801      	add	r0, sp, #4
   1788e:	f007 fcf7 	bl	1f280 <interface_socket_allocate>
   17892:	9b01      	ldr	r3, [sp, #4]
   17894:	4606      	mov	r6, r0
   17896:	2b00      	cmp	r3, #0
   17898:	f000 808d 	beq.w	179b6 <logobj_interface_open+0x166>
   1789c:	4629      	mov	r1, r5
   1789e:	2204      	movs	r2, #4
   178a0:	484b      	ldr	r0, [pc, #300]	; (179d0 <logobj_interface_open+0x180>)
   178a2:	603b      	str	r3, [r7, #0]
   178a4:	f011 fe1f 	bl	294e6 <memset>
   178a8:	9c01      	ldr	r4, [sp, #4]
   178aa:	4629      	mov	r1, r5
   178ac:	e9c4 8903 	strd	r8, r9, [r4, #12]
   178b0:	f8c4 a014 	str.w	sl, [r4, #20]
   178b4:	a802      	add	r0, sp, #8
   178b6:	f004 fbcb 	bl	1c050 <rpc_logobj_client_request_alloc>
   178ba:	2800      	cmp	r0, #0
   178bc:	d142      	bne.n	17944 <logobj_interface_open+0xf4>
   178be:	2201      	movs	r2, #1
   178c0:	2104      	movs	r1, #4
   178c2:	9b02      	ldr	r3, [sp, #8]
   178c4:	4d43      	ldr	r5, [pc, #268]	; (179d4 <logobj_interface_open+0x184>)
   178c6:	7358      	strb	r0, [r3, #13]
   178c8:	7398      	strb	r0, [r3, #14]
   178ca:	73d8      	strb	r0, [r3, #15]
   178cc:	7258      	strb	r0, [r3, #9]
   178ce:	7298      	strb	r0, [r3, #10]
   178d0:	72d8      	strb	r0, [r3, #11]
   178d2:	7219      	strb	r1, [r3, #8]
   178d4:	702a      	strb	r2, [r5, #0]
   178d6:	731a      	strb	r2, [r3, #12]
   178d8:	6822      	ldr	r2, [r4, #0]
   178da:	4618      	mov	r0, r3
   178dc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   178e0:	6022      	str	r2, [r4, #0]
   178e2:	f247 0101 	movw	r1, #28673	; 0x7001
   178e6:	f004 fbcb 	bl	1c080 <rpc_logobj_client_request_send>
   178ea:	bb68      	cbnz	r0, 17948 <logobj_interface_open+0xf8>
   178ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
   178ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   178f2:	2900      	cmp	r1, #0
   178f4:	bf08      	it	eq
   178f6:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   178fa:	ab04      	add	r3, sp, #16
   178fc:	f843 1d04 	str.w	r1, [r3, #-4]!
   17900:	4630      	mov	r0, r6
   17902:	4611      	mov	r1, r2
   17904:	f007 fd6e 	bl	1f3e4 <interface_socket_wait>
   17908:	4604      	mov	r4, r0
   1790a:	b310      	cbz	r0, 17952 <logobj_interface_open+0x102>
   1790c:	9a01      	ldr	r2, [sp, #4]
   1790e:	2e00      	cmp	r6, #0
   17910:	6813      	ldr	r3, [r2, #0]
   17912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17916:	6013      	str	r3, [r2, #0]
   17918:	9a01      	ldr	r2, [sp, #4]
   1791a:	6813      	ldr	r3, [r2, #0]
   1791c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   17920:	6013      	str	r3, [r2, #0]
   17922:	9a01      	ldr	r2, [sp, #4]
   17924:	6813      	ldr	r3, [r2, #0]
   17926:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1792a:	6013      	str	r3, [r2, #0]
   1792c:	da3f      	bge.n	179ae <logobj_interface_open+0x15e>
   1792e:	2300      	movs	r3, #0
   17930:	4620      	mov	r0, r4
   17932:	603b      	str	r3, [r7, #0]
   17934:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   17938:	f7fd fac4 	bl	14ec4 <bsd_os_errno_set>
   1793c:	4630      	mov	r0, r6
   1793e:	b004      	add	sp, #16
   17940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17944:	240c      	movs	r4, #12
   17946:	e7e1      	b.n	1790c <logobj_interface_open+0xbc>
   17948:	9802      	ldr	r0, [sp, #8]
   1794a:	f004 fbaf 	bl	1c0ac <rpc_logobj_client_message_free>
   1794e:	2405      	movs	r4, #5
   17950:	e7dc      	b.n	1790c <logobj_interface_open+0xbc>
   17952:	4630      	mov	r0, r6
   17954:	f007 fdc6 	bl	1f4e4 <interface_socket_from_handle_get>
   17958:	b120      	cbz	r0, 17964 <logobj_interface_open+0x114>
   1795a:	6844      	ldr	r4, [r0, #4]
   1795c:	b114      	cbz	r4, 17964 <logobj_interface_open+0x114>
   1795e:	2300      	movs	r3, #0
   17960:	6043      	str	r3, [r0, #4]
   17962:	e7d3      	b.n	1790c <logobj_interface_open+0xbc>
   17964:	4630      	mov	r0, r6
   17966:	9a01      	ldr	r2, [sp, #4]
   17968:	6813      	ldr	r3, [r2, #0]
   1796a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1796e:	6013      	str	r3, [r2, #0]
   17970:	9a01      	ldr	r2, [sp, #4]
   17972:	6813      	ldr	r3, [r2, #0]
   17974:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   17978:	6013      	str	r3, [r2, #0]
   1797a:	9a01      	ldr	r2, [sp, #4]
   1797c:	6813      	ldr	r3, [r2, #0]
   1797e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   17982:	6013      	str	r3, [r2, #0]
   17984:	b004      	add	sp, #16
   17986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1798a:	2016      	movs	r0, #22
   1798c:	f7fd fa9a 	bl	14ec4 <bsd_os_errno_set>
   17990:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   17994:	e7d2      	b.n	1793c <logobj_interface_open+0xec>
   17996:	2001      	movs	r0, #1
   17998:	f7fd fa94 	bl	14ec4 <bsd_os_errno_set>
   1799c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   179a0:	e7cc      	b.n	1793c <logobj_interface_open+0xec>
   179a2:	2005      	movs	r0, #5
   179a4:	f7fd fa8e 	bl	14ec4 <bsd_os_errno_set>
   179a8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   179ac:	e7c6      	b.n	1793c <logobj_interface_open+0xec>
   179ae:	4630      	mov	r0, r6
   179b0:	f007 fcca 	bl	1f348 <interface_socket_free>
   179b4:	e7bb      	b.n	1792e <logobj_interface_open+0xde>
   179b6:	2018      	movs	r0, #24
   179b8:	f7fd fa84 	bl	14ec4 <bsd_os_errno_set>
   179bc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   179c0:	e7bc      	b.n	1793c <logobj_interface_open+0xec>
   179c2:	bf00      	nop
   179c4:	2002af6f 	.word	0x2002af6f
   179c8:	20023104 	.word	0x20023104
   179cc:	00017701 	.word	0x00017701
   179d0:	20023100 	.word	0x20023100
   179d4:	2002af6d 	.word	0x2002af6d

000179d8 <logobj_interface_read>:
   179d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   179dc:	b087      	sub	sp, #28
   179de:	2900      	cmp	r1, #0
   179e0:	d06b      	beq.n	17aba <logobj_interface_read+0xe2>
   179e2:	2a00      	cmp	r2, #0
   179e4:	4617      	mov	r7, r2
   179e6:	dd68      	ble.n	17aba <logobj_interface_read+0xe2>
   179e8:	461d      	mov	r5, r3
   179ea:	4680      	mov	r8, r0
   179ec:	460e      	mov	r6, r1
   179ee:	f007 fd79 	bl	1f4e4 <interface_socket_from_handle_get>
   179f2:	4604      	mov	r4, r0
   179f4:	2800      	cmp	r0, #0
   179f6:	d066      	beq.n	17ac6 <logobj_interface_read+0xee>
   179f8:	bb4d      	cbnz	r5, 17a4e <logobj_interface_read+0x76>
   179fa:	69e0      	ldr	r0, [r4, #28]
   179fc:	07aa      	lsls	r2, r5, #30
   179fe:	6803      	ldr	r3, [r0, #0]
   17a00:	68db      	ldr	r3, [r3, #12]
   17a02:	d52d      	bpl.n	17a60 <logobj_interface_read+0x88>
   17a04:	4798      	blx	r3
   17a06:	3001      	adds	r0, #1
   17a08:	d047      	beq.n	17a9a <logobj_interface_read+0xc2>
   17a0a:	6823      	ldr	r3, [r4, #0]
   17a0c:	69e0      	ldr	r0, [r4, #28]
   17a0e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   17a12:	d044      	beq.n	17a9e <logobj_interface_read+0xc6>
   17a14:	2100      	movs	r1, #0
   17a16:	6823      	ldr	r3, [r4, #0]
   17a18:	462a      	mov	r2, r5
   17a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   17a1e:	6023      	str	r3, [r4, #0]
   17a20:	e9cd 1104 	strd	r1, r1, [sp, #16]
   17a24:	e9cd 6702 	strd	r6, r7, [sp, #8]
   17a28:	6803      	ldr	r3, [r0, #0]
   17a2a:	a902      	add	r1, sp, #8
   17a2c:	689b      	ldr	r3, [r3, #8]
   17a2e:	4798      	blx	r3
   17a30:	4605      	mov	r5, r0
   17a32:	69e0      	ldr	r0, [r4, #28]
   17a34:	6803      	ldr	r3, [r0, #0]
   17a36:	68db      	ldr	r3, [r3, #12]
   17a38:	4798      	blx	r3
   17a3a:	3001      	adds	r0, #1
   17a3c:	d003      	beq.n	17a46 <logobj_interface_read+0x6e>
   17a3e:	6823      	ldr	r3, [r4, #0]
   17a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17a44:	6023      	str	r3, [r4, #0]
   17a46:	4628      	mov	r0, r5
   17a48:	b007      	add	sp, #28
   17a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17a4e:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   17a52:	d1d2      	bne.n	179fa <logobj_interface_read+0x22>
   17a54:	202d      	movs	r0, #45	; 0x2d
   17a56:	f7fd fa35 	bl	14ec4 <bsd_os_errno_set>
   17a5a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17a5e:	e7f2      	b.n	17a46 <logobj_interface_read+0x6e>
   17a60:	6822      	ldr	r2, [r4, #0]
   17a62:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   17a66:	d1cd      	bne.n	17a04 <logobj_interface_read+0x2c>
   17a68:	4798      	blx	r3
   17a6a:	1c43      	adds	r3, r0, #1
   17a6c:	d1cd      	bne.n	17a0a <logobj_interface_read+0x32>
   17a6e:	6a22      	ldr	r2, [r4, #32]
   17a70:	ab06      	add	r3, sp, #24
   17a72:	2a00      	cmp	r2, #0
   17a74:	bf18      	it	ne
   17a76:	4610      	movne	r0, r2
   17a78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17a7c:	f843 0d14 	str.w	r0, [r3, #-20]!
   17a80:	4611      	mov	r1, r2
   17a82:	4640      	mov	r0, r8
   17a84:	f007 fcae 	bl	1f3e4 <interface_socket_wait>
   17a88:	b158      	cbz	r0, 17aa2 <logobj_interface_read+0xca>
   17a8a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17a8e:	f7fd fa19 	bl	14ec4 <bsd_os_errno_set>
   17a92:	4628      	mov	r0, r5
   17a94:	b007      	add	sp, #28
   17a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17a9a:	2023      	movs	r0, #35	; 0x23
   17a9c:	e7f5      	b.n	17a8a <logobj_interface_read+0xb2>
   17a9e:	461d      	mov	r5, r3
   17aa0:	e7c8      	b.n	17a34 <logobj_interface_read+0x5c>
   17aa2:	4640      	mov	r0, r8
   17aa4:	f007 fd1e 	bl	1f4e4 <interface_socket_from_handle_get>
   17aa8:	4603      	mov	r3, r0
   17aaa:	2800      	cmp	r0, #0
   17aac:	d0ad      	beq.n	17a0a <logobj_interface_read+0x32>
   17aae:	6840      	ldr	r0, [r0, #4]
   17ab0:	2800      	cmp	r0, #0
   17ab2:	d0aa      	beq.n	17a0a <logobj_interface_read+0x32>
   17ab4:	f8c3 9004 	str.w	r9, [r3, #4]
   17ab8:	e7e7      	b.n	17a8a <logobj_interface_read+0xb2>
   17aba:	2016      	movs	r0, #22
   17abc:	f7fd fa02 	bl	14ec4 <bsd_os_errno_set>
   17ac0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17ac4:	e7bf      	b.n	17a46 <logobj_interface_read+0x6e>
   17ac6:	2009      	movs	r0, #9
   17ac8:	f7fd f9fc 	bl	14ec4 <bsd_os_errno_set>
   17acc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17ad0:	e7b9      	b.n	17a46 <logobj_interface_read+0x6e>
   17ad2:	bf00      	nop

00017ad4 <logobj_interface_write>:
   17ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ad8:	b082      	sub	sp, #8
   17ada:	2900      	cmp	r1, #0
   17adc:	d06b      	beq.n	17bb6 <logobj_interface_write+0xe2>
   17ade:	2a04      	cmp	r2, #4
   17ae0:	d169      	bne.n	17bb6 <logobj_interface_write+0xe2>
   17ae2:	461f      	mov	r7, r3
   17ae4:	4606      	mov	r6, r0
   17ae6:	460d      	mov	r5, r1
   17ae8:	f007 fcfc 	bl	1f4e4 <interface_socket_from_handle_get>
   17aec:	4604      	mov	r4, r0
   17aee:	2800      	cmp	r0, #0
   17af0:	d074      	beq.n	17bdc <logobj_interface_write+0x108>
   17af2:	b1e7      	cbz	r7, 17b2e <logobj_interface_write+0x5a>
   17af4:	07b8      	lsls	r0, r7, #30
   17af6:	d56b      	bpl.n	17bd0 <logobj_interface_write+0xfc>
   17af8:	6823      	ldr	r3, [r4, #0]
   17afa:	039b      	lsls	r3, r3, #14
   17afc:	d564      	bpl.n	17bc8 <logobj_interface_write+0xf4>
   17afe:	2700      	movs	r7, #0
   17b00:	6823      	ldr	r3, [r4, #0]
   17b02:	2100      	movs	r1, #0
   17b04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   17b08:	6023      	str	r3, [r4, #0]
   17b0a:	4668      	mov	r0, sp
   17b0c:	f8d5 8000 	ldr.w	r8, [r5]
   17b10:	f004 fa9e 	bl	1c050 <rpc_logobj_client_request_alloc>
   17b14:	b198      	cbz	r0, 17b3e <logobj_interface_write+0x6a>
   17b16:	200c      	movs	r0, #12
   17b18:	6823      	ldr	r3, [r4, #0]
   17b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17b1e:	6023      	str	r3, [r4, #0]
   17b20:	f7fd f9d0 	bl	14ec4 <bsd_os_errno_set>
   17b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17b28:	b002      	add	sp, #8
   17b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17b2e:	6803      	ldr	r3, [r0, #0]
   17b30:	00d9      	lsls	r1, r3, #3
   17b32:	d4e1      	bmi.n	17af8 <logobj_interface_write+0x24>
   17b34:	6803      	ldr	r3, [r0, #0]
   17b36:	039a      	lsls	r2, r3, #14
   17b38:	d548      	bpl.n	17bcc <logobj_interface_write+0xf8>
   17b3a:	2701      	movs	r7, #1
   17b3c:	e7e0      	b.n	17b00 <logobj_interface_write+0x2c>
   17b3e:	2504      	movs	r5, #4
   17b40:	9b00      	ldr	r3, [sp, #0]
   17b42:	f247 0103 	movw	r1, #28675	; 0x7003
   17b46:	f8c3 800c 	str.w	r8, [r3, #12]
   17b4a:	7258      	strb	r0, [r3, #9]
   17b4c:	7298      	strb	r0, [r3, #10]
   17b4e:	72d8      	strb	r0, [r3, #11]
   17b50:	721d      	strb	r5, [r3, #8]
   17b52:	4618      	mov	r0, r3
   17b54:	f004 fa94 	bl	1c080 <rpc_logobj_client_request_send>
   17b58:	4680      	mov	r8, r0
   17b5a:	bb18      	cbnz	r0, 17ba4 <logobj_interface_write+0xd0>
   17b5c:	b1d7      	cbz	r7, 17b94 <logobj_interface_write+0xc0>
   17b5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   17b60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17b64:	2900      	cmp	r1, #0
   17b66:	bf08      	it	eq
   17b68:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   17b6c:	ab02      	add	r3, sp, #8
   17b6e:	f843 1d04 	str.w	r1, [r3, #-4]!
   17b72:	4630      	mov	r0, r6
   17b74:	4611      	mov	r1, r2
   17b76:	f007 fc35 	bl	1f3e4 <interface_socket_wait>
   17b7a:	b120      	cbz	r0, 17b86 <logobj_interface_write+0xb2>
   17b7c:	6823      	ldr	r3, [r4, #0]
   17b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17b82:	6023      	str	r3, [r4, #0]
   17b84:	e7cc      	b.n	17b20 <logobj_interface_write+0x4c>
   17b86:	4630      	mov	r0, r6
   17b88:	f007 fcac 	bl	1f4e4 <interface_socket_from_handle_get>
   17b8c:	4603      	mov	r3, r0
   17b8e:	b108      	cbz	r0, 17b94 <logobj_interface_write+0xc0>
   17b90:	6840      	ldr	r0, [r0, #4]
   17b92:	b9b0      	cbnz	r0, 17bc2 <logobj_interface_write+0xee>
   17b94:	4628      	mov	r0, r5
   17b96:	6823      	ldr	r3, [r4, #0]
   17b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17b9c:	6023      	str	r3, [r4, #0]
   17b9e:	b002      	add	sp, #8
   17ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17ba4:	9800      	ldr	r0, [sp, #0]
   17ba6:	f004 fa81 	bl	1c0ac <rpc_logobj_client_message_free>
   17baa:	6823      	ldr	r3, [r4, #0]
   17bac:	2005      	movs	r0, #5
   17bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17bb2:	6023      	str	r3, [r4, #0]
   17bb4:	e7b4      	b.n	17b20 <logobj_interface_write+0x4c>
   17bb6:	2016      	movs	r0, #22
   17bb8:	f7fd f984 	bl	14ec4 <bsd_os_errno_set>
   17bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17bc0:	e7b2      	b.n	17b28 <logobj_interface_write+0x54>
   17bc2:	f8c3 8004 	str.w	r8, [r3, #4]
   17bc6:	e7d9      	b.n	17b7c <logobj_interface_write+0xa8>
   17bc8:	2073      	movs	r0, #115	; 0x73
   17bca:	e7a9      	b.n	17b20 <logobj_interface_write+0x4c>
   17bcc:	2009      	movs	r0, #9
   17bce:	e7a7      	b.n	17b20 <logobj_interface_write+0x4c>
   17bd0:	202d      	movs	r0, #45	; 0x2d
   17bd2:	f7fd f977 	bl	14ec4 <bsd_os_errno_set>
   17bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17bda:	e7a5      	b.n	17b28 <logobj_interface_write+0x54>
   17bdc:	2009      	movs	r0, #9
   17bde:	f7fd f971 	bl	14ec4 <bsd_os_errno_set>
   17be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17be6:	e79f      	b.n	17b28 <logobj_interface_write+0x54>

00017be8 <logobj_interface_setopt>:
   17be8:	b5f0      	push	{r4, r5, r6, r7, lr}
   17bea:	2901      	cmp	r1, #1
   17bec:	b085      	sub	sp, #20
   17bee:	d06d      	beq.n	17ccc <logobj_interface_setopt+0xe4>
   17bf0:	461e      	mov	r6, r3
   17bf2:	f240 2305 	movw	r3, #517	; 0x205
   17bf6:	4299      	cmp	r1, r3
   17bf8:	f040 80a0 	bne.w	17d3c <logobj_interface_setopt+0x154>
   17bfc:	4607      	mov	r7, r0
   17bfe:	4615      	mov	r5, r2
   17c00:	f007 fc70 	bl	1f4e4 <interface_socket_from_handle_get>
   17c04:	4604      	mov	r4, r0
   17c06:	2800      	cmp	r0, #0
   17c08:	f000 80c3 	beq.w	17d92 <logobj_interface_setopt+0x1aa>
   17c0c:	2d01      	cmp	r5, #1
   17c0e:	d019      	beq.n	17c44 <logobj_interface_setopt+0x5c>
   17c10:	2d02      	cmp	r5, #2
   17c12:	d010      	beq.n	17c36 <logobj_interface_setopt+0x4e>
   17c14:	252a      	movs	r5, #42	; 0x2a
   17c16:	6803      	ldr	r3, [r0, #0]
   17c18:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   17c1c:	6023      	str	r3, [r4, #0]
   17c1e:	6823      	ldr	r3, [r4, #0]
   17c20:	4628      	mov	r0, r5
   17c22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   17c26:	6023      	str	r3, [r4, #0]
   17c28:	f7fd f94c 	bl	14ec4 <bsd_os_errno_set>
   17c2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17c30:	4628      	mov	r0, r5
   17c32:	b005      	add	sp, #20
   17c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c36:	b116      	cbz	r6, 17c3e <logobj_interface_setopt+0x56>
   17c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17c3a:	2b01      	cmp	r3, #1
   17c3c:	d04e      	beq.n	17cdc <logobj_interface_setopt+0xf4>
   17c3e:	6823      	ldr	r3, [r4, #0]
   17c40:	2516      	movs	r5, #22
   17c42:	e7e9      	b.n	17c18 <logobj_interface_setopt+0x30>
   17c44:	2e00      	cmp	r6, #0
   17c46:	d0fa      	beq.n	17c3e <logobj_interface_setopt+0x56>
   17c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17c4a:	2b04      	cmp	r3, #4
   17c4c:	d1f7      	bne.n	17c3e <logobj_interface_setopt+0x56>
   17c4e:	2100      	movs	r1, #0
   17c50:	a803      	add	r0, sp, #12
   17c52:	f004 f9fd 	bl	1c050 <rpc_logobj_client_request_alloc>
   17c56:	4605      	mov	r5, r0
   17c58:	2800      	cmp	r0, #0
   17c5a:	d175      	bne.n	17d48 <logobj_interface_setopt+0x160>
   17c5c:	9803      	ldr	r0, [sp, #12]
   17c5e:	2208      	movs	r2, #8
   17c60:	4629      	mov	r1, r5
   17c62:	300c      	adds	r0, #12
   17c64:	f011 fc3f 	bl	294e6 <memset>
   17c68:	9803      	ldr	r0, [sp, #12]
   17c6a:	4631      	mov	r1, r6
   17c6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17c6e:	300c      	adds	r0, #12
   17c70:	f011 fbff 	bl	29472 <memcpy>
   17c74:	2308      	movs	r3, #8
   17c76:	9803      	ldr	r0, [sp, #12]
   17c78:	f247 0102 	movw	r1, #28674	; 0x7002
   17c7c:	7203      	strb	r3, [r0, #8]
   17c7e:	7245      	strb	r5, [r0, #9]
   17c80:	7285      	strb	r5, [r0, #10]
   17c82:	72c5      	strb	r5, [r0, #11]
   17c84:	6823      	ldr	r3, [r4, #0]
   17c86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   17c8a:	6023      	str	r3, [r4, #0]
   17c8c:	f004 f9f8 	bl	1c080 <rpc_logobj_client_request_send>
   17c90:	2800      	cmp	r0, #0
   17c92:	d178      	bne.n	17d86 <logobj_interface_setopt+0x19e>
   17c94:	6a61      	ldr	r1, [r4, #36]	; 0x24
   17c96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   17c9a:	2900      	cmp	r1, #0
   17c9c:	bf08      	it	eq
   17c9e:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   17ca2:	ab04      	add	r3, sp, #16
   17ca4:	f843 1d08 	str.w	r1, [r3, #-8]!
   17ca8:	4638      	mov	r0, r7
   17caa:	4611      	mov	r1, r2
   17cac:	f007 fb9a 	bl	1f3e4 <interface_socket_wait>
   17cb0:	4605      	mov	r5, r0
   17cb2:	2800      	cmp	r0, #0
   17cb4:	d140      	bne.n	17d38 <logobj_interface_setopt+0x150>
   17cb6:	4638      	mov	r0, r7
   17cb8:	f007 fc14 	bl	1f4e4 <interface_socket_from_handle_get>
   17cbc:	2800      	cmp	r0, #0
   17cbe:	d04e      	beq.n	17d5e <logobj_interface_setopt+0x176>
   17cc0:	6843      	ldr	r3, [r0, #4]
   17cc2:	2b00      	cmp	r3, #0
   17cc4:	d04b      	beq.n	17d5e <logobj_interface_setopt+0x176>
   17cc6:	6045      	str	r5, [r0, #4]
   17cc8:	461d      	mov	r5, r3
   17cca:	e035      	b.n	17d38 <logobj_interface_setopt+0x150>
   17ccc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   17cce:	9400      	str	r4, [sp, #0]
   17cd0:	f007 fc30 	bl	1f534 <interface_socket_setopt>
   17cd4:	4605      	mov	r5, r0
   17cd6:	4628      	mov	r0, r5
   17cd8:	b005      	add	sp, #20
   17cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17cdc:	2100      	movs	r1, #0
   17cde:	a802      	add	r0, sp, #8
   17ce0:	7835      	ldrb	r5, [r6, #0]
   17ce2:	f004 f9b5 	bl	1c050 <rpc_logobj_client_request_alloc>
   17ce6:	bb78      	cbnz	r0, 17d48 <logobj_interface_setopt+0x160>
   17ce8:	2d01      	cmp	r5, #1
   17cea:	bf08      	it	eq
   17cec:	4b2c      	ldreq	r3, [pc, #176]	; (17da0 <logobj_interface_setopt+0x1b8>)
   17cee:	f04f 0204 	mov.w	r2, #4
   17cf2:	bf08      	it	eq
   17cf4:	701d      	strbeq	r5, [r3, #0]
   17cf6:	2300      	movs	r3, #0
   17cf8:	9802      	ldr	r0, [sp, #8]
   17cfa:	f247 0101 	movw	r1, #28673	; 0x7001
   17cfe:	7243      	strb	r3, [r0, #9]
   17d00:	60c5      	str	r5, [r0, #12]
   17d02:	7283      	strb	r3, [r0, #10]
   17d04:	72c3      	strb	r3, [r0, #11]
   17d06:	7202      	strb	r2, [r0, #8]
   17d08:	6823      	ldr	r3, [r4, #0]
   17d0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   17d0e:	6023      	str	r3, [r4, #0]
   17d10:	f004 f9b6 	bl	1c080 <rpc_logobj_client_request_send>
   17d14:	4606      	mov	r6, r0
   17d16:	bb80      	cbnz	r0, 17d7a <logobj_interface_setopt+0x192>
   17d18:	6a61      	ldr	r1, [r4, #36]	; 0x24
   17d1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   17d1e:	2900      	cmp	r1, #0
   17d20:	bf08      	it	eq
   17d22:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   17d26:	ab04      	add	r3, sp, #16
   17d28:	f843 1d04 	str.w	r1, [r3, #-4]!
   17d2c:	4638      	mov	r0, r7
   17d2e:	4611      	mov	r1, r2
   17d30:	f007 fb58 	bl	1f3e4 <interface_socket_wait>
   17d34:	4605      	mov	r5, r0
   17d36:	b150      	cbz	r0, 17d4e <logobj_interface_setopt+0x166>
   17d38:	6823      	ldr	r3, [r4, #0]
   17d3a:	e76d      	b.n	17c18 <logobj_interface_setopt+0x30>
   17d3c:	202a      	movs	r0, #42	; 0x2a
   17d3e:	f7fd f8c1 	bl	14ec4 <bsd_os_errno_set>
   17d42:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17d46:	e773      	b.n	17c30 <logobj_interface_setopt+0x48>
   17d48:	6823      	ldr	r3, [r4, #0]
   17d4a:	250c      	movs	r5, #12
   17d4c:	e764      	b.n	17c18 <logobj_interface_setopt+0x30>
   17d4e:	4638      	mov	r0, r7
   17d50:	f007 fbc8 	bl	1f4e4 <interface_socket_from_handle_get>
   17d54:	b140      	cbz	r0, 17d68 <logobj_interface_setopt+0x180>
   17d56:	6845      	ldr	r5, [r0, #4]
   17d58:	b135      	cbz	r5, 17d68 <logobj_interface_setopt+0x180>
   17d5a:	6046      	str	r6, [r0, #4]
   17d5c:	e7ec      	b.n	17d38 <logobj_interface_setopt+0x150>
   17d5e:	4631      	mov	r1, r6
   17d60:	2204      	movs	r2, #4
   17d62:	4810      	ldr	r0, [pc, #64]	; (17da4 <logobj_interface_setopt+0x1bc>)
   17d64:	f011 fb85 	bl	29472 <memcpy>
   17d68:	6823      	ldr	r3, [r4, #0]
   17d6a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   17d6e:	6023      	str	r3, [r4, #0]
   17d70:	6823      	ldr	r3, [r4, #0]
   17d72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   17d76:	6023      	str	r3, [r4, #0]
   17d78:	e75a      	b.n	17c30 <logobj_interface_setopt+0x48>
   17d7a:	9802      	ldr	r0, [sp, #8]
   17d7c:	f004 f996 	bl	1c0ac <rpc_logobj_client_message_free>
   17d80:	2505      	movs	r5, #5
   17d82:	6823      	ldr	r3, [r4, #0]
   17d84:	e748      	b.n	17c18 <logobj_interface_setopt+0x30>
   17d86:	9803      	ldr	r0, [sp, #12]
   17d88:	f004 f990 	bl	1c0ac <rpc_logobj_client_message_free>
   17d8c:	2505      	movs	r5, #5
   17d8e:	6823      	ldr	r3, [r4, #0]
   17d90:	e742      	b.n	17c18 <logobj_interface_setopt+0x30>
   17d92:	2009      	movs	r0, #9
   17d94:	f7fd f896 	bl	14ec4 <bsd_os_errno_set>
   17d98:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17d9c:	e748      	b.n	17c30 <logobj_interface_setopt+0x48>
   17d9e:	bf00      	nop
   17da0:	2002af6d 	.word	0x2002af6d
   17da4:	20023100 	.word	0x20023100

00017da8 <logobj_interface_getopt>:
   17da8:	b5f0      	push	{r4, r5, r6, r7, lr}
   17daa:	2901      	cmp	r1, #1
   17dac:	b083      	sub	sp, #12
   17dae:	9e08      	ldr	r6, [sp, #32]
   17db0:	d030      	beq.n	17e14 <logobj_interface_getopt+0x6c>
   17db2:	461f      	mov	r7, r3
   17db4:	f240 2305 	movw	r3, #517	; 0x205
   17db8:	4299      	cmp	r1, r3
   17dba:	d134      	bne.n	17e26 <logobj_interface_getopt+0x7e>
   17dbc:	4615      	mov	r5, r2
   17dbe:	f007 fb91 	bl	1f4e4 <interface_socket_from_handle_get>
   17dc2:	2800      	cmp	r0, #0
   17dc4:	d037      	beq.n	17e36 <logobj_interface_getopt+0x8e>
   17dc6:	2d01      	cmp	r5, #1
   17dc8:	d015      	beq.n	17df6 <logobj_interface_getopt+0x4e>
   17dca:	2d02      	cmp	r5, #2
   17dcc:	d10b      	bne.n	17de6 <logobj_interface_getopt+0x3e>
   17dce:	b387      	cbz	r7, 17e32 <logobj_interface_getopt+0x8a>
   17dd0:	6833      	ldr	r3, [r6, #0]
   17dd2:	b373      	cbz	r3, 17e32 <logobj_interface_getopt+0x8a>
   17dd4:	2300      	movs	r3, #0
   17dd6:	2201      	movs	r2, #1
   17dd8:	4618      	mov	r0, r3
   17dda:	491a      	ldr	r1, [pc, #104]	; (17e44 <logobj_interface_getopt+0x9c>)
   17ddc:	7809      	ldrb	r1, [r1, #0]
   17dde:	7039      	strb	r1, [r7, #0]
   17de0:	6032      	str	r2, [r6, #0]
   17de2:	b003      	add	sp, #12
   17de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17de6:	2009      	movs	r0, #9
   17de8:	f7fd f86c 	bl	14ec4 <bsd_os_errno_set>
   17dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17df0:	4618      	mov	r0, r3
   17df2:	b003      	add	sp, #12
   17df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17df6:	b1e7      	cbz	r7, 17e32 <logobj_interface_getopt+0x8a>
   17df8:	6833      	ldr	r3, [r6, #0]
   17dfa:	2b03      	cmp	r3, #3
   17dfc:	d919      	bls.n	17e32 <logobj_interface_getopt+0x8a>
   17dfe:	4638      	mov	r0, r7
   17e00:	2204      	movs	r2, #4
   17e02:	4911      	ldr	r1, [pc, #68]	; (17e48 <logobj_interface_getopt+0xa0>)
   17e04:	f011 fb35 	bl	29472 <memcpy>
   17e08:	2300      	movs	r3, #0
   17e0a:	2204      	movs	r2, #4
   17e0c:	4618      	mov	r0, r3
   17e0e:	6032      	str	r2, [r6, #0]
   17e10:	b003      	add	sp, #12
   17e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17e14:	9600      	str	r6, [sp, #0]
   17e16:	f007 fbd3 	bl	1f5c0 <interface_socket_getopt>
   17e1a:	4603      	mov	r3, r0
   17e1c:	2800      	cmp	r0, #0
   17e1e:	d1e3      	bne.n	17de8 <logobj_interface_getopt+0x40>
   17e20:	4618      	mov	r0, r3
   17e22:	b003      	add	sp, #12
   17e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17e26:	202a      	movs	r0, #42	; 0x2a
   17e28:	f7fd f84c 	bl	14ec4 <bsd_os_errno_set>
   17e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17e30:	e7de      	b.n	17df0 <logobj_interface_getopt+0x48>
   17e32:	2016      	movs	r0, #22
   17e34:	e7d8      	b.n	17de8 <logobj_interface_getopt+0x40>
   17e36:	2009      	movs	r0, #9
   17e38:	f7fd f844 	bl	14ec4 <bsd_os_errno_set>
   17e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17e40:	e7d6      	b.n	17df0 <logobj_interface_getopt+0x48>
   17e42:	bf00      	nop
   17e44:	2002af6e 	.word	0x2002af6e
   17e48:	20023100 	.word	0x20023100

00017e4c <logobj_interface_close>:
   17e4c:	b510      	push	{r4, lr}
   17e4e:	4604      	mov	r4, r0
   17e50:	f007 fb48 	bl	1f4e4 <interface_socket_from_handle_get>
   17e54:	b138      	cbz	r0, 17e66 <logobj_interface_close+0x1a>
   17e56:	4620      	mov	r0, r4
   17e58:	f007 fa76 	bl	1f348 <interface_socket_free>
   17e5c:	2300      	movs	r3, #0
   17e5e:	4a05      	ldr	r2, [pc, #20]	; (17e74 <logobj_interface_close+0x28>)
   17e60:	4618      	mov	r0, r3
   17e62:	6013      	str	r3, [r2, #0]
   17e64:	bd10      	pop	{r4, pc}
   17e66:	2009      	movs	r0, #9
   17e68:	f7fd f82c 	bl	14ec4 <bsd_os_errno_set>
   17e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17e70:	bd10      	pop	{r4, pc}
   17e72:	bf00      	nop
   17e74:	20023104 	.word	0x20023104

00017e78 <rpc_transport_send>:
   17e78:	f000 beda 	b.w	18c30 <rpc_transport_ipc_send>

00017e7c <rpc_transport_rpc_alloc>:
   17e7c:	f000 bf5a 	b.w	18d34 <rpc_transport_ipc_tx_rpc_data_alloc>

00017e80 <rpc_transport_data_alloc>:
   17e80:	f000 bfc0 	b.w	18e04 <rpc_transport_ipc_tx_data_alloc>

00017e84 <rpc_transport_rpc_free>:
   17e84:	f000 bdae 	b.w	189e4 <rpc_transport_ipc_msg_free>

00017e88 <rpc_transport_data_free>:
   17e88:	f000 ba64 	b.w	18354 <rpc_transport_ipc_data_free>

00017e8c <ipc_trace_init>:
   17e8c:	4b01      	ldr	r3, [pc, #4]	; (17e94 <ipc_trace_init+0x8>)
   17e8e:	6018      	str	r0, [r3, #0]
   17e90:	4770      	bx	lr
   17e92:	bf00      	nop
   17e94:	20023114 	.word	0x20023114

00017e98 <bsd_os_trace_irq_handler>:
   17e98:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e9a:	4b6e      	ldr	r3, [pc, #440]	; (18054 <bsd_os_trace_irq_handler+0x1bc>)
   17e9c:	b083      	sub	sp, #12
   17e9e:	781b      	ldrb	r3, [r3, #0]
   17ea0:	2b00      	cmp	r3, #0
   17ea2:	f000 80d3 	beq.w	1804c <bsd_os_trace_irq_handler+0x1b4>
   17ea6:	4b6c      	ldr	r3, [pc, #432]	; (18058 <bsd_os_trace_irq_handler+0x1c0>)
   17ea8:	681c      	ldr	r4, [r3, #0]
   17eaa:	b124      	cbz	r4, 17eb6 <bsd_os_trace_irq_handler+0x1e>
   17eac:	68a3      	ldr	r3, [r4, #8]
   17eae:	6862      	ldr	r2, [r4, #4]
   17eb0:	4293      	cmp	r3, r2
   17eb2:	f040 808c 	bne.w	17fce <bsd_os_trace_irq_handler+0x136>
   17eb6:	4b69      	ldr	r3, [pc, #420]	; (1805c <bsd_os_trace_irq_handler+0x1c4>)
   17eb8:	681c      	ldr	r4, [r3, #0]
   17eba:	b11c      	cbz	r4, 17ec4 <bsd_os_trace_irq_handler+0x2c>
   17ebc:	68a3      	ldr	r3, [r4, #8]
   17ebe:	6862      	ldr	r2, [r4, #4]
   17ec0:	4293      	cmp	r3, r2
   17ec2:	d146      	bne.n	17f52 <bsd_os_trace_irq_handler+0xba>
   17ec4:	4b66      	ldr	r3, [pc, #408]	; (18060 <bsd_os_trace_irq_handler+0x1c8>)
   17ec6:	681c      	ldr	r4, [r3, #0]
   17ec8:	b11c      	cbz	r4, 17ed2 <bsd_os_trace_irq_handler+0x3a>
   17eca:	68a3      	ldr	r3, [r4, #8]
   17ecc:	6862      	ldr	r2, [r4, #4]
   17ece:	4293      	cmp	r3, r2
   17ed0:	d101      	bne.n	17ed6 <bsd_os_trace_irq_handler+0x3e>
   17ed2:	b003      	add	sp, #12
   17ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17ed6:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   17eda:	f8ad 2000 	strh.w	r2, [sp]
   17ede:	7822      	ldrb	r2, [r4, #0]
   17ee0:	466e      	mov	r6, sp
   17ee2:	f88d 2004 	strb.w	r2, [sp, #4]
   17ee6:	6862      	ldr	r2, [r4, #4]
   17ee8:	2105      	movs	r1, #5
   17eea:	4293      	cmp	r3, r2
   17eec:	bf2a      	itet	cs
   17eee:	6927      	ldrcs	r7, [r4, #16]
   17ef0:	1ad7      	subcc	r7, r2, r3
   17ef2:	1aff      	subcs	r7, r7, r3
   17ef4:	4293      	cmp	r3, r2
   17ef6:	bf94      	ite	ls
   17ef8:	2500      	movls	r5, #0
   17efa:	68e5      	ldrhi	r5, [r4, #12]
   17efc:	b2bf      	uxth	r7, r7
   17efe:	bf88      	it	hi
   17f00:	1b52      	subhi	r2, r2, r5
   17f02:	4630      	mov	r0, r6
   17f04:	bf88      	it	hi
   17f06:	b295      	uxthhi	r5, r2
   17f08:	f8ad 7002 	strh.w	r7, [sp, #2]
   17f0c:	f010 f946 	bl	2819c <bsd_os_trace_put>
   17f10:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   17f14:	68a0      	ldr	r0, [r4, #8]
   17f16:	f010 f941 	bl	2819c <bsd_os_trace_put>
   17f1a:	68a3      	ldr	r3, [r4, #8]
   17f1c:	6922      	ldr	r2, [r4, #16]
   17f1e:	441f      	add	r7, r3
   17f20:	4297      	cmp	r7, r2
   17f22:	bf08      	it	eq
   17f24:	68e3      	ldreq	r3, [r4, #12]
   17f26:	60a7      	str	r7, [r4, #8]
   17f28:	bf08      	it	eq
   17f2a:	60a3      	streq	r3, [r4, #8]
   17f2c:	2d00      	cmp	r5, #0
   17f2e:	d0d0      	beq.n	17ed2 <bsd_os_trace_irq_handler+0x3a>
   17f30:	2105      	movs	r1, #5
   17f32:	4630      	mov	r0, r6
   17f34:	f8ad 5002 	strh.w	r5, [sp, #2]
   17f38:	f010 f930 	bl	2819c <bsd_os_trace_put>
   17f3c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   17f40:	68e0      	ldr	r0, [r4, #12]
   17f42:	f010 f92b 	bl	2819c <bsd_os_trace_put>
   17f46:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   17f4a:	68e3      	ldr	r3, [r4, #12]
   17f4c:	4413      	add	r3, r2
   17f4e:	60a3      	str	r3, [r4, #8]
   17f50:	e7bf      	b.n	17ed2 <bsd_os_trace_irq_handler+0x3a>
   17f52:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   17f56:	f8ad 2000 	strh.w	r2, [sp]
   17f5a:	7822      	ldrb	r2, [r4, #0]
   17f5c:	466e      	mov	r6, sp
   17f5e:	f88d 2004 	strb.w	r2, [sp, #4]
   17f62:	6862      	ldr	r2, [r4, #4]
   17f64:	2105      	movs	r1, #5
   17f66:	4293      	cmp	r3, r2
   17f68:	bf2a      	itet	cs
   17f6a:	6927      	ldrcs	r7, [r4, #16]
   17f6c:	1ad7      	subcc	r7, r2, r3
   17f6e:	1aff      	subcs	r7, r7, r3
   17f70:	4293      	cmp	r3, r2
   17f72:	bf94      	ite	ls
   17f74:	2500      	movls	r5, #0
   17f76:	68e5      	ldrhi	r5, [r4, #12]
   17f78:	b2bf      	uxth	r7, r7
   17f7a:	bf88      	it	hi
   17f7c:	1b52      	subhi	r2, r2, r5
   17f7e:	4630      	mov	r0, r6
   17f80:	bf88      	it	hi
   17f82:	b295      	uxthhi	r5, r2
   17f84:	f8ad 7002 	strh.w	r7, [sp, #2]
   17f88:	f010 f908 	bl	2819c <bsd_os_trace_put>
   17f8c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   17f90:	68a0      	ldr	r0, [r4, #8]
   17f92:	f010 f903 	bl	2819c <bsd_os_trace_put>
   17f96:	68a3      	ldr	r3, [r4, #8]
   17f98:	6922      	ldr	r2, [r4, #16]
   17f9a:	441f      	add	r7, r3
   17f9c:	4297      	cmp	r7, r2
   17f9e:	bf08      	it	eq
   17fa0:	68e3      	ldreq	r3, [r4, #12]
   17fa2:	60a7      	str	r7, [r4, #8]
   17fa4:	bf08      	it	eq
   17fa6:	60a3      	streq	r3, [r4, #8]
   17fa8:	2d00      	cmp	r5, #0
   17faa:	d08b      	beq.n	17ec4 <bsd_os_trace_irq_handler+0x2c>
   17fac:	2105      	movs	r1, #5
   17fae:	4630      	mov	r0, r6
   17fb0:	f8ad 5002 	strh.w	r5, [sp, #2]
   17fb4:	f010 f8f2 	bl	2819c <bsd_os_trace_put>
   17fb8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   17fbc:	68e0      	ldr	r0, [r4, #12]
   17fbe:	f010 f8ed 	bl	2819c <bsd_os_trace_put>
   17fc2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   17fc6:	68e3      	ldr	r3, [r4, #12]
   17fc8:	4413      	add	r3, r2
   17fca:	60a3      	str	r3, [r4, #8]
   17fcc:	e77a      	b.n	17ec4 <bsd_os_trace_irq_handler+0x2c>
   17fce:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   17fd2:	f8ad 2000 	strh.w	r2, [sp]
   17fd6:	7822      	ldrb	r2, [r4, #0]
   17fd8:	466e      	mov	r6, sp
   17fda:	f88d 2004 	strb.w	r2, [sp, #4]
   17fde:	6862      	ldr	r2, [r4, #4]
   17fe0:	2105      	movs	r1, #5
   17fe2:	4293      	cmp	r3, r2
   17fe4:	bf2a      	itet	cs
   17fe6:	6927      	ldrcs	r7, [r4, #16]
   17fe8:	1ad7      	subcc	r7, r2, r3
   17fea:	1aff      	subcs	r7, r7, r3
   17fec:	4293      	cmp	r3, r2
   17fee:	bf94      	ite	ls
   17ff0:	2500      	movls	r5, #0
   17ff2:	68e5      	ldrhi	r5, [r4, #12]
   17ff4:	b2bf      	uxth	r7, r7
   17ff6:	bf88      	it	hi
   17ff8:	1b52      	subhi	r2, r2, r5
   17ffa:	4630      	mov	r0, r6
   17ffc:	bf88      	it	hi
   17ffe:	b295      	uxthhi	r5, r2
   18000:	f8ad 7002 	strh.w	r7, [sp, #2]
   18004:	f010 f8ca 	bl	2819c <bsd_os_trace_put>
   18008:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1800c:	68a0      	ldr	r0, [r4, #8]
   1800e:	f010 f8c5 	bl	2819c <bsd_os_trace_put>
   18012:	68a3      	ldr	r3, [r4, #8]
   18014:	6922      	ldr	r2, [r4, #16]
   18016:	441f      	add	r7, r3
   18018:	4297      	cmp	r7, r2
   1801a:	bf08      	it	eq
   1801c:	68e3      	ldreq	r3, [r4, #12]
   1801e:	60a7      	str	r7, [r4, #8]
   18020:	bf08      	it	eq
   18022:	60a3      	streq	r3, [r4, #8]
   18024:	2d00      	cmp	r5, #0
   18026:	f43f af46 	beq.w	17eb6 <bsd_os_trace_irq_handler+0x1e>
   1802a:	2105      	movs	r1, #5
   1802c:	4630      	mov	r0, r6
   1802e:	f8ad 5002 	strh.w	r5, [sp, #2]
   18032:	f010 f8b3 	bl	2819c <bsd_os_trace_put>
   18036:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1803a:	68e0      	ldr	r0, [r4, #12]
   1803c:	f010 f8ae 	bl	2819c <bsd_os_trace_put>
   18040:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   18044:	68e3      	ldr	r3, [r4, #12]
   18046:	4413      	add	r3, r2
   18048:	60a3      	str	r3, [r4, #8]
   1804a:	e734      	b.n	17eb6 <bsd_os_trace_irq_handler+0x1e>
   1804c:	f7fd f8c2 	bl	151d4 <bsd_os_trace_irq_clear>
   18050:	e729      	b.n	17ea6 <bsd_os_trace_irq_handler+0xe>
   18052:	bf00      	nop
   18054:	2002af70 	.word	0x2002af70
   18058:	20023110 	.word	0x20023110
   1805c:	20023108 	.word	0x20023108
   18060:	2002310c 	.word	0x2002310c

00018064 <ipc_trace_handle>:
   18064:	2200      	movs	r2, #0
   18066:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1806a:	4bb2      	ldr	r3, [pc, #712]	; (18334 <ipc_trace_handle+0x2d0>)
   1806c:	b083      	sub	sp, #12
   1806e:	681b      	ldr	r3, [r3, #0]
   18070:	6919      	ldr	r1, [r3, #16]
   18072:	695c      	ldr	r4, [r3, #20]
   18074:	7c18      	ldrb	r0, [r3, #16]
   18076:	741a      	strb	r2, [r3, #16]
   18078:	7c58      	ldrb	r0, [r3, #17]
   1807a:	745a      	strb	r2, [r3, #17]
   1807c:	7c98      	ldrb	r0, [r3, #18]
   1807e:	749a      	strb	r2, [r3, #18]
   18080:	7cd8      	ldrb	r0, [r3, #19]
   18082:	74da      	strb	r2, [r3, #19]
   18084:	7d18      	ldrb	r0, [r3, #20]
   18086:	751a      	strb	r2, [r3, #20]
   18088:	7d58      	ldrb	r0, [r3, #21]
   1808a:	755a      	strb	r2, [r3, #21]
   1808c:	7d98      	ldrb	r0, [r3, #22]
   1808e:	759a      	strb	r2, [r3, #22]
   18090:	7dd8      	ldrb	r0, [r3, #23]
   18092:	75da      	strb	r2, [r3, #23]
   18094:	b1a9      	cbz	r1, 180c2 <ipc_trace_handle+0x5e>
   18096:	3901      	subs	r1, #1
   18098:	2903      	cmp	r1, #3
   1809a:	d812      	bhi.n	180c2 <ipc_trace_handle+0x5e>
   1809c:	e8df f001 	tbb	[pc, r1]
   180a0:	1402a97c 	.word	0x1402a97c
   180a4:	2501      	movs	r5, #1
   180a6:	2003      	movs	r0, #3
   180a8:	2200      	movs	r2, #0
   180aa:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   180ae:	4ca2      	ldr	r4, [pc, #648]	; (18338 <ipc_trace_handle+0x2d4>)
   180b0:	7025      	strb	r5, [r4, #0]
   180b2:	7a1c      	ldrb	r4, [r3, #8]
   180b4:	7218      	strb	r0, [r3, #8]
   180b6:	7a58      	ldrb	r0, [r3, #9]
   180b8:	725a      	strb	r2, [r3, #9]
   180ba:	7a98      	ldrb	r0, [r3, #10]
   180bc:	729a      	strb	r2, [r3, #10]
   180be:	7ada      	ldrb	r2, [r3, #11]
   180c0:	72d9      	strb	r1, [r3, #11]
   180c2:	b003      	add	sp, #12
   180c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180c8:	2104      	movs	r1, #4
   180ca:	2200      	movs	r2, #0
   180cc:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   180d0:	7a1c      	ldrb	r4, [r3, #8]
   180d2:	7219      	strb	r1, [r3, #8]
   180d4:	7a59      	ldrb	r1, [r3, #9]
   180d6:	725a      	strb	r2, [r3, #9]
   180d8:	4997      	ldr	r1, [pc, #604]	; (18338 <ipc_trace_handle+0x2d4>)
   180da:	7a9c      	ldrb	r4, [r3, #10]
   180dc:	729a      	strb	r2, [r3, #10]
   180de:	7adc      	ldrb	r4, [r3, #11]
   180e0:	72d8      	strb	r0, [r3, #11]
   180e2:	700a      	strb	r2, [r1, #0]
   180e4:	780b      	ldrb	r3, [r1, #0]
   180e6:	2b00      	cmp	r3, #0
   180e8:	f000 809f 	beq.w	1822a <ipc_trace_handle+0x1c6>
   180ec:	4b93      	ldr	r3, [pc, #588]	; (1833c <ipc_trace_handle+0x2d8>)
   180ee:	681c      	ldr	r4, [r3, #0]
   180f0:	b124      	cbz	r4, 180fc <ipc_trace_handle+0x98>
   180f2:	68a3      	ldr	r3, [r4, #8]
   180f4:	6862      	ldr	r2, [r4, #4]
   180f6:	4293      	cmp	r3, r2
   180f8:	f040 80d9 	bne.w	182ae <ipc_trace_handle+0x24a>
   180fc:	4b90      	ldr	r3, [pc, #576]	; (18340 <ipc_trace_handle+0x2dc>)
   180fe:	681c      	ldr	r4, [r3, #0]
   18100:	b124      	cbz	r4, 1810c <ipc_trace_handle+0xa8>
   18102:	68a3      	ldr	r3, [r4, #8]
   18104:	6862      	ldr	r2, [r4, #4]
   18106:	4293      	cmp	r3, r2
   18108:	f040 8092 	bne.w	18230 <ipc_trace_handle+0x1cc>
   1810c:	4b8d      	ldr	r3, [pc, #564]	; (18344 <ipc_trace_handle+0x2e0>)
   1810e:	681c      	ldr	r4, [r3, #0]
   18110:	2c00      	cmp	r4, #0
   18112:	d0d6      	beq.n	180c2 <ipc_trace_handle+0x5e>
   18114:	68a3      	ldr	r3, [r4, #8]
   18116:	6862      	ldr	r2, [r4, #4]
   18118:	4293      	cmp	r3, r2
   1811a:	d0d2      	beq.n	180c2 <ipc_trace_handle+0x5e>
   1811c:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   18120:	f8ad 2000 	strh.w	r2, [sp]
   18124:	7822      	ldrb	r2, [r4, #0]
   18126:	466e      	mov	r6, sp
   18128:	f88d 2004 	strb.w	r2, [sp, #4]
   1812c:	6862      	ldr	r2, [r4, #4]
   1812e:	2105      	movs	r1, #5
   18130:	4293      	cmp	r3, r2
   18132:	bf2a      	itet	cs
   18134:	6927      	ldrcs	r7, [r4, #16]
   18136:	1ad7      	subcc	r7, r2, r3
   18138:	1aff      	subcs	r7, r7, r3
   1813a:	4293      	cmp	r3, r2
   1813c:	bf94      	ite	ls
   1813e:	2500      	movls	r5, #0
   18140:	68e5      	ldrhi	r5, [r4, #12]
   18142:	b2bf      	uxth	r7, r7
   18144:	bf88      	it	hi
   18146:	1b52      	subhi	r2, r2, r5
   18148:	4630      	mov	r0, r6
   1814a:	bf88      	it	hi
   1814c:	b295      	uxthhi	r5, r2
   1814e:	f8ad 7002 	strh.w	r7, [sp, #2]
   18152:	f010 f823 	bl	2819c <bsd_os_trace_put>
   18156:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1815a:	68a0      	ldr	r0, [r4, #8]
   1815c:	f010 f81e 	bl	2819c <bsd_os_trace_put>
   18160:	68a3      	ldr	r3, [r4, #8]
   18162:	6922      	ldr	r2, [r4, #16]
   18164:	441f      	add	r7, r3
   18166:	4297      	cmp	r7, r2
   18168:	bf08      	it	eq
   1816a:	68e3      	ldreq	r3, [r4, #12]
   1816c:	60a7      	str	r7, [r4, #8]
   1816e:	bf08      	it	eq
   18170:	60a3      	streq	r3, [r4, #8]
   18172:	2d00      	cmp	r5, #0
   18174:	d0a5      	beq.n	180c2 <ipc_trace_handle+0x5e>
   18176:	2105      	movs	r1, #5
   18178:	4630      	mov	r0, r6
   1817a:	f8ad 5002 	strh.w	r5, [sp, #2]
   1817e:	f010 f80d 	bl	2819c <bsd_os_trace_put>
   18182:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18186:	68e0      	ldr	r0, [r4, #12]
   18188:	f010 f808 	bl	2819c <bsd_os_trace_put>
   1818c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   18190:	68e3      	ldr	r3, [r4, #12]
   18192:	4413      	add	r3, r2
   18194:	60a3      	str	r3, [r4, #8]
   18196:	e794      	b.n	180c2 <ipc_trace_handle+0x5e>
   18198:	4a67      	ldr	r2, [pc, #412]	; (18338 <ipc_trace_handle+0x2d4>)
   1819a:	7811      	ldrb	r1, [r2, #0]
   1819c:	b109      	cbz	r1, 181a2 <ipc_trace_handle+0x13e>
   1819e:	2100      	movs	r1, #0
   181a0:	7011      	strb	r1, [r2, #0]
   181a2:	68a5      	ldr	r5, [r4, #8]
   181a4:	2d00      	cmp	r5, #0
   181a6:	d03b      	beq.n	18220 <ipc_trace_handle+0x1bc>
   181a8:	f04f 0c00 	mov.w	ip, #0
   181ac:	f8df a190 	ldr.w	sl, [pc, #400]	; 18340 <ipc_trace_handle+0x2dc>
   181b0:	f8df b188 	ldr.w	fp, [pc, #392]	; 1833c <ipc_trace_handle+0x2d8>
   181b4:	4963      	ldr	r1, [pc, #396]	; (18344 <ipc_trace_handle+0x2e0>)
   181b6:	46e1      	mov	r9, ip
   181b8:	4666      	mov	r6, ip
   181ba:	4662      	mov	r2, ip
   181bc:	f8d1 e000 	ldr.w	lr, [r1]
   181c0:	f8da 8000 	ldr.w	r8, [sl]
   181c4:	f8db 7000 	ldr.w	r7, [fp]
   181c8:	e008      	b.n	181dc <ipc_trace_handle+0x178>
   181ca:	2963      	cmp	r1, #99	; 0x63
   181cc:	d016      	beq.n	181fc <ipc_trace_handle+0x198>
   181ce:	2961      	cmp	r1, #97	; 0x61
   181d0:	bf04      	itt	eq
   181d2:	4607      	moveq	r7, r0
   181d4:	2601      	moveq	r6, #1
   181d6:	3201      	adds	r2, #1
   181d8:	42aa      	cmp	r2, r5
   181da:	d013      	beq.n	18204 <ipc_trace_handle+0x1a0>
   181dc:	1c91      	adds	r1, r2, #2
   181de:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   181e2:	6848      	ldr	r0, [r1, #4]
   181e4:	7801      	ldrb	r1, [r0, #0]
   181e6:	2962      	cmp	r1, #98	; 0x62
   181e8:	d1ef      	bne.n	181ca <ipc_trace_handle+0x166>
   181ea:	4680      	mov	r8, r0
   181ec:	f04f 0901 	mov.w	r9, #1
   181f0:	e7f1      	b.n	181d6 <ipc_trace_handle+0x172>
   181f2:	f7fc ffe7 	bl	151c4 <bsd_os_trace_irq_set>
   181f6:	b003      	add	sp, #12
   181f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181fc:	4686      	mov	lr, r0
   181fe:	f04f 0c01 	mov.w	ip, #1
   18202:	e7e8      	b.n	181d6 <ipc_trace_handle+0x172>
   18204:	2e00      	cmp	r6, #0
   18206:	f040 8091 	bne.w	1832c <ipc_trace_handle+0x2c8>
   1820a:	f1b9 0f00 	cmp.w	r9, #0
   1820e:	d001      	beq.n	18214 <ipc_trace_handle+0x1b0>
   18210:	f8ca 8000 	str.w	r8, [sl]
   18214:	f1bc 0f00 	cmp.w	ip, #0
   18218:	d002      	beq.n	18220 <ipc_trace_handle+0x1bc>
   1821a:	4a4a      	ldr	r2, [pc, #296]	; (18344 <ipc_trace_handle+0x2e0>)
   1821c:	f8c2 e000 	str.w	lr, [r2]
   18220:	2001      	movs	r0, #1
   18222:	2200      	movs	r2, #0
   18224:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   18228:	e743      	b.n	180b2 <ipc_trace_handle+0x4e>
   1822a:	f7fc ffd3 	bl	151d4 <bsd_os_trace_irq_clear>
   1822e:	e75d      	b.n	180ec <ipc_trace_handle+0x88>
   18230:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   18234:	f8ad 2000 	strh.w	r2, [sp]
   18238:	7822      	ldrb	r2, [r4, #0]
   1823a:	466e      	mov	r6, sp
   1823c:	f88d 2004 	strb.w	r2, [sp, #4]
   18240:	6862      	ldr	r2, [r4, #4]
   18242:	2105      	movs	r1, #5
   18244:	4293      	cmp	r3, r2
   18246:	bf2a      	itet	cs
   18248:	6927      	ldrcs	r7, [r4, #16]
   1824a:	1ad7      	subcc	r7, r2, r3
   1824c:	1aff      	subcs	r7, r7, r3
   1824e:	4293      	cmp	r3, r2
   18250:	bf94      	ite	ls
   18252:	2500      	movls	r5, #0
   18254:	68e5      	ldrhi	r5, [r4, #12]
   18256:	b2bf      	uxth	r7, r7
   18258:	bf88      	it	hi
   1825a:	1b52      	subhi	r2, r2, r5
   1825c:	4630      	mov	r0, r6
   1825e:	bf88      	it	hi
   18260:	b295      	uxthhi	r5, r2
   18262:	f8ad 7002 	strh.w	r7, [sp, #2]
   18266:	f00f ff99 	bl	2819c <bsd_os_trace_put>
   1826a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1826e:	68a0      	ldr	r0, [r4, #8]
   18270:	f00f ff94 	bl	2819c <bsd_os_trace_put>
   18274:	68a3      	ldr	r3, [r4, #8]
   18276:	6922      	ldr	r2, [r4, #16]
   18278:	441f      	add	r7, r3
   1827a:	4297      	cmp	r7, r2
   1827c:	bf08      	it	eq
   1827e:	68e3      	ldreq	r3, [r4, #12]
   18280:	60a7      	str	r7, [r4, #8]
   18282:	bf08      	it	eq
   18284:	60a3      	streq	r3, [r4, #8]
   18286:	2d00      	cmp	r5, #0
   18288:	f43f af40 	beq.w	1810c <ipc_trace_handle+0xa8>
   1828c:	2105      	movs	r1, #5
   1828e:	4630      	mov	r0, r6
   18290:	f8ad 5002 	strh.w	r5, [sp, #2]
   18294:	f00f ff82 	bl	2819c <bsd_os_trace_put>
   18298:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1829c:	68e0      	ldr	r0, [r4, #12]
   1829e:	f00f ff7d 	bl	2819c <bsd_os_trace_put>
   182a2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   182a6:	68e3      	ldr	r3, [r4, #12]
   182a8:	4413      	add	r3, r2
   182aa:	60a3      	str	r3, [r4, #8]
   182ac:	e72e      	b.n	1810c <ipc_trace_handle+0xa8>
   182ae:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   182b2:	f8ad 2000 	strh.w	r2, [sp]
   182b6:	7822      	ldrb	r2, [r4, #0]
   182b8:	466e      	mov	r6, sp
   182ba:	f88d 2004 	strb.w	r2, [sp, #4]
   182be:	6862      	ldr	r2, [r4, #4]
   182c0:	2105      	movs	r1, #5
   182c2:	4293      	cmp	r3, r2
   182c4:	bf2a      	itet	cs
   182c6:	6927      	ldrcs	r7, [r4, #16]
   182c8:	1ad7      	subcc	r7, r2, r3
   182ca:	1aff      	subcs	r7, r7, r3
   182cc:	4293      	cmp	r3, r2
   182ce:	bf94      	ite	ls
   182d0:	2500      	movls	r5, #0
   182d2:	68e5      	ldrhi	r5, [r4, #12]
   182d4:	b2bf      	uxth	r7, r7
   182d6:	bf88      	it	hi
   182d8:	1b52      	subhi	r2, r2, r5
   182da:	4630      	mov	r0, r6
   182dc:	bf88      	it	hi
   182de:	b295      	uxthhi	r5, r2
   182e0:	f8ad 7002 	strh.w	r7, [sp, #2]
   182e4:	f00f ff5a 	bl	2819c <bsd_os_trace_put>
   182e8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   182ec:	68a0      	ldr	r0, [r4, #8]
   182ee:	f00f ff55 	bl	2819c <bsd_os_trace_put>
   182f2:	68a3      	ldr	r3, [r4, #8]
   182f4:	6922      	ldr	r2, [r4, #16]
   182f6:	441f      	add	r7, r3
   182f8:	4297      	cmp	r7, r2
   182fa:	bf08      	it	eq
   182fc:	68e3      	ldreq	r3, [r4, #12]
   182fe:	60a7      	str	r7, [r4, #8]
   18300:	bf08      	it	eq
   18302:	60a3      	streq	r3, [r4, #8]
   18304:	2d00      	cmp	r5, #0
   18306:	f43f aef9 	beq.w	180fc <ipc_trace_handle+0x98>
   1830a:	2105      	movs	r1, #5
   1830c:	4630      	mov	r0, r6
   1830e:	f8ad 5002 	strh.w	r5, [sp, #2]
   18312:	f00f ff43 	bl	2819c <bsd_os_trace_put>
   18316:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1831a:	68e0      	ldr	r0, [r4, #12]
   1831c:	f00f ff3e 	bl	2819c <bsd_os_trace_put>
   18320:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   18324:	68e3      	ldr	r3, [r4, #12]
   18326:	4413      	add	r3, r2
   18328:	60a3      	str	r3, [r4, #8]
   1832a:	e6e7      	b.n	180fc <ipc_trace_handle+0x98>
   1832c:	f8cb 7000 	str.w	r7, [fp]
   18330:	e76b      	b.n	1820a <ipc_trace_handle+0x1a6>
   18332:	bf00      	nop
   18334:	20023114 	.word	0x20023114
   18338:	2002af70 	.word	0x2002af70
   1833c:	20023110 	.word	0x20023110
   18340:	20023108 	.word	0x20023108
   18344:	2002310c 	.word	0x2002310c

00018348 <rpc_trace_coredump_in_progress>:
   18348:	4b01      	ldr	r3, [pc, #4]	; (18350 <rpc_trace_coredump_in_progress+0x8>)
   1834a:	7818      	ldrb	r0, [r3, #0]
   1834c:	4770      	bx	lr
   1834e:	bf00      	nop
   18350:	2002af70 	.word	0x2002af70

00018354 <rpc_transport_ipc_data_free>:
   18354:	b510      	push	{r4, lr}
   18356:	4b0e      	ldr	r3, [pc, #56]	; (18390 <rpc_transport_ipc_data_free+0x3c>)
   18358:	4604      	mov	r4, r0
   1835a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1835e:	4413      	add	r3, r2
   18360:	4298      	cmp	r0, r3
   18362:	d20d      	bcs.n	18380 <rpc_transport_ipc_data_free+0x2c>
   18364:	4282      	cmp	r2, r0
   18366:	d80b      	bhi.n	18380 <rpc_transport_ipc_data_free+0x2c>
   18368:	f000 fd1c 	bl	18da4 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   1836c:	b158      	cbz	r0, 18386 <rpc_transport_ipc_data_free+0x32>
   1836e:	4a09      	ldr	r2, [pc, #36]	; (18394 <rpc_transport_ipc_data_free+0x40>)
   18370:	6084      	str	r4, [r0, #8]
   18372:	6002      	str	r2, [r0, #0]
   18374:	f7ff fd80 	bl	17e78 <rpc_transport_send>
   18378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1837c:	f7fc bf12 	b.w	151a4 <bsd_os_application_irq_set>
   18380:	4620      	mov	r0, r4
   18382:	f006 fc6b 	bl	1ec5c <nrf_shared_free>
   18386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1838a:	f7fc bf0b 	b.w	151a4 <bsd_os_application_irq_set>
   1838e:	bf00      	nop
   18390:	20023118 	.word	0x20023118
   18394:	00020001 	.word	0x00020001

00018398 <rpc_transport_ipc_init>:
   18398:	b188      	cbz	r0, 183be <rpc_transport_ipc_init+0x26>
   1839a:	b510      	push	{r4, lr}
   1839c:	b082      	sub	sp, #8
   1839e:	aa01      	add	r2, sp, #4
   183a0:	4669      	mov	r1, sp
   183a2:	4604      	mov	r4, r0
   183a4:	f000 fb5a 	bl	18a5c <rpc_transport_ipc_tx_init>
   183a8:	4602      	mov	r2, r0
   183aa:	b148      	cbz	r0, 183c0 <rpc_transport_ipc_init+0x28>
   183ac:	4b12      	ldr	r3, [pc, #72]	; (183f8 <rpc_transport_ipc_init+0x60>)
   183ae:	3428      	adds	r4, #40	; 0x28
   183b0:	e894 0003 	ldmia.w	r4, {r0, r1}
   183b4:	e883 0003 	stmia.w	r3, {r0, r1}
   183b8:	4610      	mov	r0, r2
   183ba:	b002      	add	sp, #8
   183bc:	bd10      	pop	{r4, pc}
   183be:	e7fe      	b.n	183be <rpc_transport_ipc_init+0x26>
   183c0:	e9dd 1200 	ldrd	r1, r2, [sp]
   183c4:	4620      	mov	r0, r4
   183c6:	f000 f9fb 	bl	187c0 <rpc_transport_ipc_rx_init>
   183ca:	4602      	mov	r2, r0
   183cc:	4b0a      	ldr	r3, [pc, #40]	; (183f8 <rpc_transport_ipc_init+0x60>)
   183ce:	f104 0128 	add.w	r1, r4, #40	; 0x28
   183d2:	c903      	ldmia	r1, {r0, r1}
   183d4:	e883 0003 	stmia.w	r3, {r0, r1}
   183d8:	2a00      	cmp	r2, #0
   183da:	d1ed      	bne.n	183b8 <rpc_transport_ipc_init+0x20>
   183dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   183e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   183e2:	4906      	ldr	r1, [pc, #24]	; (183fc <rpc_transport_ipc_init+0x64>)
   183e4:	015b      	lsls	r3, r3, #5
   183e6:	b2db      	uxtb	r3, r3
   183e8:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   183ec:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   183f0:	6048      	str	r0, [r1, #4]
   183f2:	4610      	mov	r0, r2
   183f4:	b002      	add	sp, #8
   183f6:	bd10      	pop	{r4, pc}
   183f8:	20023118 	.word	0x20023118
   183fc:	e000e100 	.word	0xe000e100

00018400 <bsd_os_application_irq_handler>:
   18400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18404:	f7fc fed6 	bl	151b4 <bsd_os_application_irq_clear>
   18408:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 184e0 <bsd_os_application_irq_handler+0xe0>
   1840c:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 184e4 <bsd_os_application_irq_handler+0xe4>
   18410:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 184e8 <bsd_os_application_irq_handler+0xe8>
   18414:	f108 0908 	add.w	r9, r8, #8
   18418:	f858 7b04 	ldr.w	r7, [r8], #4
   1841c:	6839      	ldr	r1, [r7, #0]
   1841e:	b361      	cbz	r1, 1847a <bsd_os_application_irq_handler+0x7a>
   18420:	2400      	movs	r4, #0
   18422:	e002      	b.n	1842a <bsd_os_application_irq_handler+0x2a>
   18424:	3401      	adds	r4, #1
   18426:	428c      	cmp	r4, r1
   18428:	d227      	bcs.n	1847a <bsd_os_application_irq_handler+0x7a>
   1842a:	00e6      	lsls	r6, r4, #3
   1842c:	19bd      	adds	r5, r7, r6
   1842e:	68aa      	ldr	r2, [r5, #8]
   18430:	2a00      	cmp	r2, #0
   18432:	d0f7      	beq.n	18424 <bsd_os_application_irq_handler+0x24>
   18434:	686a      	ldr	r2, [r5, #4]
   18436:	b2d2      	uxtb	r2, r2
   18438:	2a01      	cmp	r2, #1
   1843a:	d1f3      	bne.n	18424 <bsd_os_application_irq_handler+0x24>
   1843c:	6868      	ldr	r0, [r5, #4]
   1843e:	f8bb 2000 	ldrh.w	r2, [fp]
   18442:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   18446:	d1ed      	bne.n	18424 <bsd_os_application_irq_handler+0x24>
   18448:	68a8      	ldr	r0, [r5, #8]
   1844a:	6841      	ldr	r1, [r0, #4]
   1844c:	b2c9      	uxtb	r1, r1
   1844e:	2902      	cmp	r1, #2
   18450:	d02c      	beq.n	184ac <bsd_os_application_irq_handler+0xac>
   18452:	2901      	cmp	r1, #1
   18454:	d015      	beq.n	18482 <bsd_os_application_irq_handler+0x82>
   18456:	3604      	adds	r6, #4
   18458:	59b9      	ldr	r1, [r7, r6]
   1845a:	3201      	adds	r2, #1
   1845c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   18460:	f041 0103 	orr.w	r1, r1, #3
   18464:	51b9      	str	r1, [r7, r6]
   18466:	f8ab 2000 	strh.w	r2, [fp]
   1846a:	f7fc fe9b 	bl	151a4 <bsd_os_application_irq_set>
   1846e:	f858 7c04 	ldr.w	r7, [r8, #-4]
   18472:	3401      	adds	r4, #1
   18474:	6839      	ldr	r1, [r7, #0]
   18476:	428c      	cmp	r4, r1
   18478:	d3d7      	bcc.n	1842a <bsd_os_application_irq_handler+0x2a>
   1847a:	45c1      	cmp	r9, r8
   1847c:	d1cc      	bne.n	18418 <bsd_os_application_irq_handler+0x18>
   1847e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18482:	6801      	ldr	r1, [r0, #0]
   18484:	0c09      	lsrs	r1, r1, #16
   18486:	f002 fdbb 	bl	1b000 <rpc_handle_ctrl_message>
   1848a:	2801      	cmp	r0, #1
   1848c:	d014      	beq.n	184b8 <bsd_os_application_irq_handler+0xb8>
   1848e:	d310      	bcc.n	184b2 <bsd_os_application_irq_handler+0xb2>
   18490:	2802      	cmp	r0, #2
   18492:	d007      	beq.n	184a4 <bsd_os_application_irq_handler+0xa4>
   18494:	2203      	movs	r2, #3
   18496:	4b11      	ldr	r3, [pc, #68]	; (184dc <bsd_os_application_irq_handler+0xdc>)
   18498:	4610      	mov	r0, r2
   1849a:	f8ca 2000 	str.w	r2, [sl]
   1849e:	601a      	str	r2, [r3, #0]
   184a0:	f005 f962 	bl	1d768 <rpc_transport_ipc_fault_handler>
   184a4:	f858 7c04 	ldr.w	r7, [r8, #-4]
   184a8:	6839      	ldr	r1, [r7, #0]
   184aa:	e7bb      	b.n	18424 <bsd_os_application_irq_handler+0x24>
   184ac:	f002 fdc0 	bl	1b030 <rpc_handle_data_message>
   184b0:	e7eb      	b.n	1848a <bsd_os_application_irq_handler+0x8a>
   184b2:	f8bb 2000 	ldrh.w	r2, [fp]
   184b6:	e7ce      	b.n	18456 <bsd_os_application_irq_handler+0x56>
   184b8:	686a      	ldr	r2, [r5, #4]
   184ba:	f8bb 1000 	ldrh.w	r1, [fp]
   184be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   184c2:	f042 0202 	orr.w	r2, r2, #2
   184c6:	606a      	str	r2, [r5, #4]
   184c8:	1c4a      	adds	r2, r1, #1
   184ca:	f8ab 2000 	strh.w	r2, [fp]
   184ce:	f7fc fe69 	bl	151a4 <bsd_os_application_irq_set>
   184d2:	f858 7c04 	ldr.w	r7, [r8, #-4]
   184d6:	6839      	ldr	r1, [r7, #0]
   184d8:	e7a4      	b.n	18424 <bsd_os_application_irq_handler+0x24>
   184da:	bf00      	nop
   184dc:	20023120 	.word	0x20023120
   184e0:	20023128 	.word	0x20023128
   184e4:	200281e8 	.word	0x200281e8
   184e8:	20023130 	.word	0x20023130

000184ec <IPC_IRQHandler>:
   184ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   184ee:	f44f 6680 	mov.w	r6, #1024	; 0x400
   184f2:	4d9f      	ldr	r5, [pc, #636]	; (18770 <IPC_IRQHandler+0x284>)
   184f4:	4c9f      	ldr	r4, [pc, #636]	; (18774 <IPC_IRQHandler+0x288>)
   184f6:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   184fa:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   184fe:	b095      	sub	sp, #84	; 0x54
   18500:	0618      	lsls	r0, r3, #24
   18502:	d50b      	bpl.n	1851c <IPC_IRQHandler+0x30>
   18504:	f7ff fdae 	bl	18064 <ipc_trace_handle>
   18508:	f7ff ff1e 	bl	18348 <rpc_trace_coredump_in_progress>
   1850c:	2800      	cmp	r0, #0
   1850e:	d158      	bne.n	185c2 <IPC_IRQHandler+0xd6>
   18510:	4b99      	ldr	r3, [pc, #612]	; (18778 <IPC_IRQHandler+0x28c>)
   18512:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   18516:	681b      	ldr	r3, [r3, #0]
   18518:	9301      	str	r3, [sp, #4]
   1851a:	9b01      	ldr	r3, [sp, #4]
   1851c:	4c95      	ldr	r4, [pc, #596]	; (18774 <IPC_IRQHandler+0x288>)
   1851e:	f8d4 530c 	ldr.w	r5, [r4, #780]	; 0x30c
   18522:	f015 0501 	ands.w	r5, r5, #1
   18526:	d11e      	bne.n	18566 <IPC_IRQHandler+0x7a>
   18528:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1852c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
   18530:	d14c      	bne.n	185cc <IPC_IRQHandler+0xe0>
   18532:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
   18536:	0751      	lsls	r1, r2, #29
   18538:	d50e      	bpl.n	18558 <IPC_IRQHandler+0x6c>
   1853a:	4a90      	ldr	r2, [pc, #576]	; (1877c <IPC_IRQHandler+0x290>)
   1853c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   18540:	6812      	ldr	r2, [r2, #0]
   18542:	4b8f      	ldr	r3, [pc, #572]	; (18780 <IPC_IRQHandler+0x294>)
   18544:	9206      	str	r2, [sp, #24]
   18546:	9a06      	ldr	r2, [sp, #24]
   18548:	681a      	ldr	r2, [r3, #0]
   1854a:	2a02      	cmp	r2, #2
   1854c:	f000 80f2 	beq.w	18734 <IPC_IRQHandler+0x248>
   18550:	681a      	ldr	r2, [r3, #0]
   18552:	2a01      	cmp	r2, #1
   18554:	f000 80d3 	beq.w	186fe <IPC_IRQHandler+0x212>
   18558:	4b86      	ldr	r3, [pc, #536]	; (18774 <IPC_IRQHandler+0x288>)
   1855a:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1855e:	06d2      	lsls	r2, r2, #27
   18560:	d423      	bmi.n	185aa <IPC_IRQHandler+0xbe>
   18562:	b015      	add	sp, #84	; 0x54
   18564:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18566:	2100      	movs	r1, #0
   18568:	f248 0202 	movw	r2, #32770	; 0x8002
   1856c:	4b85      	ldr	r3, [pc, #532]	; (18784 <IPC_IRQHandler+0x298>)
   1856e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18572:	681b      	ldr	r3, [r3, #0]
   18574:	9302      	str	r3, [sp, #8]
   18576:	9b02      	ldr	r3, [sp, #8]
   18578:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
   1857c:	4293      	cmp	r3, r2
   1857e:	f000 80e2 	beq.w	18746 <IPC_IRQHandler+0x25a>
   18582:	f200 80a0 	bhi.w	186c6 <IPC_IRQHandler+0x1da>
   18586:	2b00      	cmp	r3, #0
   18588:	f000 80d7 	beq.w	1873a <IPC_IRQHandler+0x24e>
   1858c:	2b02      	cmp	r3, #2
   1858e:	f240 80ab 	bls.w	186e8 <IPC_IRQHandler+0x1fc>
   18592:	f248 0201 	movw	r2, #32769	; 0x8001
   18596:	4293      	cmp	r3, r2
   18598:	f040 80cf 	bne.w	1873a <IPC_IRQHandler+0x24e>
   1859c:	2003      	movs	r0, #3
   1859e:	2207      	movs	r2, #7
   185a0:	4977      	ldr	r1, [pc, #476]	; (18780 <IPC_IRQHandler+0x294>)
   185a2:	4b79      	ldr	r3, [pc, #484]	; (18788 <IPC_IRQHandler+0x29c>)
   185a4:	6008      	str	r0, [r1, #0]
   185a6:	601a      	str	r2, [r3, #0]
   185a8:	e7db      	b.n	18562 <IPC_IRQHandler+0x76>
   185aa:	2100      	movs	r1, #0
   185ac:	4a77      	ldr	r2, [pc, #476]	; (1878c <IPC_IRQHandler+0x2a0>)
   185ae:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   185b2:	6813      	ldr	r3, [r2, #0]
   185b4:	9307      	str	r3, [sp, #28]
   185b6:	9b07      	ldr	r3, [sp, #28]
   185b8:	b015      	add	sp, #84	; 0x54
   185ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   185be:	f7fc bdf1 	b.w	151a4 <bsd_os_application_irq_set>
   185c2:	23e0      	movs	r3, #224	; 0xe0
   185c4:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   185c8:	606e      	str	r6, [r5, #4]
   185ca:	e7ca      	b.n	18562 <IPC_IRQHandler+0x76>
   185cc:	4b70      	ldr	r3, [pc, #448]	; (18790 <IPC_IRQHandler+0x2a4>)
   185ce:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
   185d2:	681b      	ldr	r3, [r3, #0]
   185d4:	9305      	str	r3, [sp, #20]
   185d6:	9b05      	ldr	r3, [sp, #20]
   185d8:	f000 fc1e 	bl	18e18 <rpc_transport_ipc_tx_suspend>
   185dc:	2010      	movs	r0, #16
   185de:	2201      	movs	r2, #1
   185e0:	210a      	movs	r1, #10
   185e2:	4b6c      	ldr	r3, [pc, #432]	; (18794 <IPC_IRQHandler+0x2a8>)
   185e4:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
   185e8:	681b      	ldr	r3, [r3, #0]
   185ea:	9303      	str	r3, [sp, #12]
   185ec:	4b6a      	ldr	r3, [pc, #424]	; (18798 <IPC_IRQHandler+0x2ac>)
   185ee:	9e03      	ldr	r6, [sp, #12]
   185f0:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   185f4:	6818      	ldr	r0, [r3, #0]
   185f6:	4b69      	ldr	r3, [pc, #420]	; (1879c <IPC_IRQHandler+0x2b0>)
   185f8:	9004      	str	r0, [sp, #16]
   185fa:	9804      	ldr	r0, [sp, #16]
   185fc:	9508      	str	r5, [sp, #32]
   185fe:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
   18602:	f8d3 0610 	ldr.w	r0, [r3, #1552]	; 0x610
   18606:	9008      	str	r0, [sp, #32]
   18608:	9808      	ldr	r0, [sp, #32]
   1860a:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   1860e:	9109      	str	r1, [sp, #36]	; 0x24
   18610:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18612:	b12b      	cbz	r3, 18620 <IPC_IRQHandler+0x134>
   18614:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18616:	3b01      	subs	r3, #1
   18618:	9309      	str	r3, [sp, #36]	; 0x24
   1861a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1861c:	2b00      	cmp	r3, #0
   1861e:	d1f9      	bne.n	18614 <IPC_IRQHandler+0x128>
   18620:	2200      	movs	r2, #0
   18622:	f04f 0c01 	mov.w	ip, #1
   18626:	2704      	movs	r7, #4
   18628:	2610      	movs	r6, #16
   1862a:	495c      	ldr	r1, [pc, #368]	; (1879c <IPC_IRQHandler+0x2b0>)
   1862c:	4b51      	ldr	r3, [pc, #324]	; (18774 <IPC_IRQHandler+0x288>)
   1862e:	f8c1 2614 	str.w	r2, [r1, #1556]	; 0x614
   18632:	f501 3115 	add.w	r1, r1, #152576	; 0x25400
   18636:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   1863a:	2540      	movs	r5, #64	; 0x40
   1863c:	f501 71c8 	add.w	r1, r1, #400	; 0x190
   18640:	6809      	ldr	r1, [r1, #0]
   18642:	2480      	movs	r4, #128	; 0x80
   18644:	910a      	str	r1, [sp, #40]	; 0x28
   18646:	4956      	ldr	r1, [pc, #344]	; (187a0 <IPC_IRQHandler+0x2b4>)
   18648:	980a      	ldr	r0, [sp, #40]	; 0x28
   1864a:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   1864e:	6809      	ldr	r1, [r1, #0]
   18650:	910b      	str	r1, [sp, #44]	; 0x2c
   18652:	4950      	ldr	r1, [pc, #320]	; (18794 <IPC_IRQHandler+0x2a8>)
   18654:	980b      	ldr	r0, [sp, #44]	; 0x2c
   18656:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   1865a:	6809      	ldr	r1, [r1, #0]
   1865c:	2005      	movs	r0, #5
   1865e:	910c      	str	r1, [sp, #48]	; 0x30
   18660:	4950      	ldr	r1, [pc, #320]	; (187a4 <IPC_IRQHandler+0x2b8>)
   18662:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
   18666:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   1866a:	6809      	ldr	r1, [r1, #0]
   1866c:	910d      	str	r1, [sp, #52]	; 0x34
   1866e:	494e      	ldr	r1, [pc, #312]	; (187a8 <IPC_IRQHandler+0x2bc>)
   18670:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
   18674:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   18678:	6809      	ldr	r1, [r1, #0]
   1867a:	910e      	str	r1, [sp, #56]	; 0x38
   1867c:	4946      	ldr	r1, [pc, #280]	; (18798 <IPC_IRQHandler+0x2ac>)
   1867e:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   18682:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   18686:	f8d1 c000 	ldr.w	ip, [r1]
   1868a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   1868e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
   18692:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   18696:	680f      	ldr	r7, [r1, #0]
   18698:	9710      	str	r7, [sp, #64]	; 0x40
   1869a:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1869c:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   186a0:	680e      	ldr	r6, [r1, #0]
   186a2:	9611      	str	r6, [sp, #68]	; 0x44
   186a4:	9e11      	ldr	r6, [sp, #68]	; 0x44
   186a6:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   186aa:	680d      	ldr	r5, [r1, #0]
   186ac:	9512      	str	r5, [sp, #72]	; 0x48
   186ae:	9d12      	ldr	r5, [sp, #72]	; 0x48
   186b0:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
   186b4:	680c      	ldr	r4, [r1, #0]
   186b6:	4b32      	ldr	r3, [pc, #200]	; (18780 <IPC_IRQHandler+0x294>)
   186b8:	9413      	str	r4, [sp, #76]	; 0x4c
   186ba:	493c      	ldr	r1, [pc, #240]	; (187ac <IPC_IRQHandler+0x2c0>)
   186bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   186be:	800a      	strh	r2, [r1, #0]
   186c0:	6018      	str	r0, [r3, #0]
   186c2:	b015      	add	sp, #84	; 0x54
   186c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   186c6:	4a3a      	ldr	r2, [pc, #232]	; (187b0 <IPC_IRQHandler+0x2c4>)
   186c8:	4293      	cmp	r3, r2
   186ca:	d82a      	bhi.n	18722 <IPC_IRQHandler+0x236>
   186cc:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   186d0:	d82a      	bhi.n	18728 <IPC_IRQHandler+0x23c>
   186d2:	f248 0203 	movw	r2, #32771	; 0x8003
   186d6:	4293      	cmp	r3, r2
   186d8:	d12f      	bne.n	1873a <IPC_IRQHandler+0x24e>
   186da:	2003      	movs	r0, #3
   186dc:	2204      	movs	r2, #4
   186de:	4928      	ldr	r1, [pc, #160]	; (18780 <IPC_IRQHandler+0x294>)
   186e0:	4b29      	ldr	r3, [pc, #164]	; (18788 <IPC_IRQHandler+0x29c>)
   186e2:	6008      	str	r0, [r1, #0]
   186e4:	601a      	str	r2, [r3, #0]
   186e6:	e73c      	b.n	18562 <IPC_IRQHandler+0x76>
   186e8:	2303      	movs	r3, #3
   186ea:	4618      	mov	r0, r3
   186ec:	4924      	ldr	r1, [pc, #144]	; (18780 <IPC_IRQHandler+0x294>)
   186ee:	4a26      	ldr	r2, [pc, #152]	; (18788 <IPC_IRQHandler+0x29c>)
   186f0:	600b      	str	r3, [r1, #0]
   186f2:	6013      	str	r3, [r2, #0]
   186f4:	b015      	add	sp, #84	; 0x54
   186f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   186fa:	f005 b835 	b.w	1d768 <rpc_transport_ipc_fault_handler>
   186fe:	4a2d      	ldr	r2, [pc, #180]	; (187b4 <IPC_IRQHandler+0x2c8>)
   18700:	482d      	ldr	r0, [pc, #180]	; (187b8 <IPC_IRQHandler+0x2cc>)
   18702:	6811      	ldr	r1, [r2, #0]
   18704:	688a      	ldr	r2, [r1, #8]
   18706:	6002      	str	r2, [r0, #0]
   18708:	6849      	ldr	r1, [r1, #4]
   1870a:	6041      	str	r1, [r0, #4]
   1870c:	b312      	cbz	r2, 18754 <IPC_IRQHandler+0x268>
   1870e:	b309      	cbz	r1, 18754 <IPC_IRQHandler+0x268>
   18710:	6812      	ldr	r2, [r2, #0]
   18712:	2a10      	cmp	r2, #16
   18714:	d824      	bhi.n	18760 <IPC_IRQHandler+0x274>
   18716:	680a      	ldr	r2, [r1, #0]
   18718:	2a10      	cmp	r2, #16
   1871a:	d821      	bhi.n	18760 <IPC_IRQHandler+0x274>
   1871c:	2202      	movs	r2, #2
   1871e:	601a      	str	r2, [r3, #0]
   18720:	e71a      	b.n	18558 <IPC_IRQHandler+0x6c>
   18722:	4a26      	ldr	r2, [pc, #152]	; (187bc <IPC_IRQHandler+0x2d0>)
   18724:	4293      	cmp	r3, r2
   18726:	d108      	bne.n	1873a <IPC_IRQHandler+0x24e>
   18728:	2003      	movs	r0, #3
   1872a:	4915      	ldr	r1, [pc, #84]	; (18780 <IPC_IRQHandler+0x294>)
   1872c:	4a16      	ldr	r2, [pc, #88]	; (18788 <IPC_IRQHandler+0x29c>)
   1872e:	6008      	str	r0, [r1, #0]
   18730:	6013      	str	r3, [r2, #0]
   18732:	e716      	b.n	18562 <IPC_IRQHandler+0x76>
   18734:	f7fc fd36 	bl	151a4 <bsd_os_application_irq_set>
   18738:	e70e      	b.n	18558 <IPC_IRQHandler+0x6c>
   1873a:	2303      	movs	r3, #3
   1873c:	4910      	ldr	r1, [pc, #64]	; (18780 <IPC_IRQHandler+0x294>)
   1873e:	4a12      	ldr	r2, [pc, #72]	; (18788 <IPC_IRQHandler+0x29c>)
   18740:	600b      	str	r3, [r1, #0]
   18742:	6013      	str	r3, [r2, #0]
   18744:	e70d      	b.n	18562 <IPC_IRQHandler+0x76>
   18746:	2003      	movs	r0, #3
   18748:	2206      	movs	r2, #6
   1874a:	490d      	ldr	r1, [pc, #52]	; (18780 <IPC_IRQHandler+0x294>)
   1874c:	4b0e      	ldr	r3, [pc, #56]	; (18788 <IPC_IRQHandler+0x29c>)
   1874e:	6008      	str	r0, [r1, #0]
   18750:	601a      	str	r2, [r3, #0]
   18752:	e706      	b.n	18562 <IPC_IRQHandler+0x76>
   18754:	2003      	movs	r0, #3
   18756:	2110      	movs	r1, #16
   18758:	4a0b      	ldr	r2, [pc, #44]	; (18788 <IPC_IRQHandler+0x29c>)
   1875a:	6018      	str	r0, [r3, #0]
   1875c:	6011      	str	r1, [r2, #0]
   1875e:	e6fb      	b.n	18558 <IPC_IRQHandler+0x6c>
   18760:	2003      	movs	r0, #3
   18762:	f24c 0106 	movw	r1, #49158	; 0xc006
   18766:	4a08      	ldr	r2, [pc, #32]	; (18788 <IPC_IRQHandler+0x29c>)
   18768:	6018      	str	r0, [r3, #0]
   1876a:	6011      	str	r1, [r2, #0]
   1876c:	e6f4      	b.n	18558 <IPC_IRQHandler+0x6c>
   1876e:	bf00      	nop
   18770:	e000e100 	.word	0xe000e100
   18774:	4002a000 	.word	0x4002a000
   18778:	4002a11c 	.word	0x4002a11c
   1877c:	4002a108 	.word	0x4002a108
   18780:	20023130 	.word	0x20023130
   18784:	4002a100 	.word	0x4002a100
   18788:	20023120 	.word	0x20023120
   1878c:	4002a110 	.word	0x4002a110
   18790:	4002a118 	.word	0x4002a118
   18794:	4002a5a0 	.word	0x4002a5a0
   18798:	4002a308 	.word	0x4002a308
   1879c:	40005000 	.word	0x40005000
   187a0:	4002a598 	.word	0x4002a598
   187a4:	4002a5a8 	.word	0x4002a5a8
   187a8:	4002a5ac 	.word	0x4002a5ac
   187ac:	200281e8 	.word	0x200281e8
   187b0:	04400004 	.word	0x04400004
   187b4:	20023134 	.word	0x20023134
   187b8:	20023128 	.word	0x20023128
   187bc:	05500001 	.word	0x05500001

000187c0 <rpc_transport_ipc_rx_init>:
   187c0:	2800      	cmp	r0, #0
   187c2:	f000 80f7 	beq.w	189b4 <rpc_transport_ipc_rx_init+0x1f4>
   187c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187ca:	6805      	ldr	r5, [r0, #0]
   187cc:	b095      	sub	sp, #84	; 0x54
   187ce:	2d00      	cmp	r5, #0
   187d0:	f000 80e6 	beq.w	189a0 <rpc_transport_ipc_rx_init+0x1e0>
   187d4:	6883      	ldr	r3, [r0, #8]
   187d6:	2b00      	cmp	r3, #0
   187d8:	f000 80e2 	beq.w	189a0 <rpc_transport_ipc_rx_init+0x1e0>
   187dc:	6906      	ldr	r6, [r0, #16]
   187de:	2e00      	cmp	r6, #0
   187e0:	f000 80de 	beq.w	189a0 <rpc_transport_ipc_rx_init+0x1e0>
   187e4:	6a84      	ldr	r4, [r0, #40]	; 0x28
   187e6:	2c00      	cmp	r4, #0
   187e8:	f000 80da 	beq.w	189a0 <rpc_transport_ipc_rx_init+0x1e0>
   187ec:	6844      	ldr	r4, [r0, #4]
   187ee:	2c1b      	cmp	r4, #27
   187f0:	f240 80db 	bls.w	189aa <rpc_transport_ipc_rx_init+0x1ea>
   187f4:	68c4      	ldr	r4, [r0, #12]
   187f6:	2c0b      	cmp	r4, #11
   187f8:	f240 80d7 	bls.w	189aa <rpc_transport_ipc_rx_init+0x1ea>
   187fc:	f8d0 c014 	ldr.w	ip, [r0, #20]
   18800:	f1bc 0f17 	cmp.w	ip, #23
   18804:	f240 80d1 	bls.w	189aa <rpc_transport_ipc_rx_init+0x1ea>
   18808:	2700      	movs	r7, #0
   1880a:	4604      	mov	r4, r0
   1880c:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 189d4 <rpc_transport_ipc_rx_init+0x214>
   18810:	6b80      	ldr	r0, [r0, #56]	; 0x38
   18812:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 189d8 <rpc_transport_ipc_rx_init+0x218>
   18816:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 189dc <rpc_transport_ipc_rx_init+0x21c>
   1881a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 189e0 <rpc_transport_ipc_rx_init+0x220>
   1881e:	e9cd 1200 	strd	r1, r2, [sp]
   18822:	f8ca 0000 	str.w	r0, [sl]
   18826:	4662      	mov	r2, ip
   18828:	4639      	mov	r1, r7
   1882a:	4630      	mov	r0, r6
   1882c:	f8cb 3000 	str.w	r3, [fp]
   18830:	f8c8 7000 	str.w	r7, [r8]
   18834:	f8c9 7000 	str.w	r7, [r9]
   18838:	f010 fe55 	bl	294e6 <memset>
   1883c:	69e3      	ldr	r3, [r4, #28]
   1883e:	4630      	mov	r0, r6
   18840:	6033      	str	r3, [r6, #0]
   18842:	69a3      	ldr	r3, [r4, #24]
   18844:	6073      	str	r3, [r6, #4]
   18846:	f7ff fb21 	bl	17e8c <ipc_trace_init>
   1884a:	2201      	movs	r2, #1
   1884c:	f04f 0c04 	mov.w	ip, #4
   18850:	4b5a      	ldr	r3, [pc, #360]	; (189bc <rpc_transport_ipc_rx_init+0x1fc>)
   18852:	495b      	ldr	r1, [pc, #364]	; (189c0 <rpc_transport_ipc_rx_init+0x200>)
   18854:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   18858:	6809      	ldr	r1, [r1, #0]
   1885a:	2080      	movs	r0, #128	; 0x80
   1885c:	9104      	str	r1, [sp, #16]
   1885e:	4959      	ldr	r1, [pc, #356]	; (189c4 <rpc_transport_ipc_rx_init+0x204>)
   18860:	f8dd e010 	ldr.w	lr, [sp, #16]
   18864:	f8c3 7614 	str.w	r7, [r3, #1556]	; 0x614
   18868:	6809      	ldr	r1, [r1, #0]
   1886a:	702f      	strb	r7, [r5, #0]
   1886c:	9103      	str	r1, [sp, #12]
   1886e:	706f      	strb	r7, [r5, #1]
   18870:	70ef      	strb	r7, [r5, #3]
   18872:	70aa      	strb	r2, [r5, #2]
   18874:	9903      	ldr	r1, [sp, #12]
   18876:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   18878:	f8db e000 	ldr.w	lr, [fp]
   1887c:	6069      	str	r1, [r5, #4]
   1887e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   18880:	9c01      	ldr	r4, [sp, #4]
   18882:	60a9      	str	r1, [r5, #8]
   18884:	60ec      	str	r4, [r5, #12]
   18886:	9c00      	ldr	r4, [sp, #0]
   18888:	494f      	ldr	r1, [pc, #316]	; (189c8 <rpc_transport_ipc_rx_init+0x208>)
   1888a:	61ae      	str	r6, [r5, #24]
   1888c:	f8c5 e014 	str.w	lr, [r5, #20]
   18890:	612c      	str	r4, [r5, #16]
   18892:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   18896:	680c      	ldr	r4, [r1, #0]
   18898:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   1889c:	9405      	str	r4, [sp, #20]
   1889e:	9c05      	ldr	r4, [sp, #20]
   188a0:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   188a4:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   188a8:	f44f 6680 	mov.w	r6, #1024	; 0x400
   188ac:	9406      	str	r4, [sp, #24]
   188ae:	9c06      	ldr	r4, [sp, #24]
   188b0:	2410      	movs	r4, #16
   188b2:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   188b6:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   188ba:	4d44      	ldr	r5, [pc, #272]	; (189cc <rpc_transport_ipc_rx_init+0x20c>)
   188bc:	9407      	str	r4, [sp, #28]
   188be:	9c07      	ldr	r4, [sp, #28]
   188c0:	2440      	movs	r4, #64	; 0x40
   188c2:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   188c6:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   188ca:	9408      	str	r4, [sp, #32]
   188cc:	9c08      	ldr	r4, [sp, #32]
   188ce:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   188d2:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   188d6:	9009      	str	r0, [sp, #36]	; 0x24
   188d8:	9809      	ldr	r0, [sp, #36]	; 0x24
   188da:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
   188de:	6808      	ldr	r0, [r1, #0]
   188e0:	900a      	str	r0, [sp, #40]	; 0x28
   188e2:	980a      	ldr	r0, [sp, #40]	; 0x28
   188e4:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
   188e8:	6888      	ldr	r0, [r1, #8]
   188ea:	900b      	str	r0, [sp, #44]	; 0x2c
   188ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
   188ee:	f8c3 7110 	str.w	r7, [r3, #272]	; 0x110
   188f2:	6908      	ldr	r0, [r1, #16]
   188f4:	900c      	str	r0, [sp, #48]	; 0x30
   188f6:	980c      	ldr	r0, [sp, #48]	; 0x30
   188f8:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
   188fc:	6988      	ldr	r0, [r1, #24]
   188fe:	900d      	str	r0, [sp, #52]	; 0x34
   18900:	980d      	ldr	r0, [sp, #52]	; 0x34
   18902:	f8c3 711c 	str.w	r7, [r3, #284]	; 0x11c
   18906:	69c8      	ldr	r0, [r1, #28]
   18908:	f501 7101 	add.w	r1, r1, #516	; 0x204
   1890c:	900e      	str	r0, [sp, #56]	; 0x38
   1890e:	980e      	ldr	r0, [sp, #56]	; 0x38
   18910:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   18914:	4310      	orrs	r0, r2
   18916:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   1891a:	680c      	ldr	r4, [r1, #0]
   1891c:	482c      	ldr	r0, [pc, #176]	; (189d0 <rpc_transport_ipc_rx_init+0x210>)
   1891e:	940f      	str	r4, [sp, #60]	; 0x3c
   18920:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   18922:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   18926:	ea44 040c 	orr.w	r4, r4, ip
   1892a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1892e:	680c      	ldr	r4, [r1, #0]
   18930:	9410      	str	r4, [sp, #64]	; 0x40
   18932:	9c10      	ldr	r4, [sp, #64]	; 0x40
   18934:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   18938:	f044 0410 	orr.w	r4, r4, #16
   1893c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   18940:	680c      	ldr	r4, [r1, #0]
   18942:	9411      	str	r4, [sp, #68]	; 0x44
   18944:	9c11      	ldr	r4, [sp, #68]	; 0x44
   18946:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1894a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   1894e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   18952:	680c      	ldr	r4, [r1, #0]
   18954:	9412      	str	r4, [sp, #72]	; 0x48
   18956:	9c12      	ldr	r4, [sp, #72]	; 0x48
   18958:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1895c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   18960:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   18964:	f8da 3000 	ldr.w	r3, [sl]
   18968:	6809      	ldr	r1, [r1, #0]
   1896a:	015b      	lsls	r3, r3, #5
   1896c:	9113      	str	r1, [sp, #76]	; 0x4c
   1896e:	b2db      	uxtb	r3, r3
   18970:	9913      	ldr	r1, [sp, #76]	; 0x4c
   18972:	f8c8 2000 	str.w	r2, [r8]
   18976:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   1897a:	f8c0 6184 	str.w	r6, [r0, #388]	; 0x184
   1897e:	6046      	str	r6, [r0, #4]
   18980:	9702      	str	r7, [sp, #8]
   18982:	f8c5 7610 	str.w	r7, [r5, #1552]	; 0x610
   18986:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   1898a:	9302      	str	r3, [sp, #8]
   1898c:	9b02      	ldr	r3, [sp, #8]
   1898e:	f8d8 3000 	ldr.w	r3, [r8]
   18992:	2b01      	cmp	r3, #1
   18994:	d0fb      	beq.n	1898e <rpc_transport_ipc_rx_init+0x1ce>
   18996:	f8d9 0000 	ldr.w	r0, [r9]
   1899a:	b015      	add	sp, #84	; 0x54
   1899c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189a0:	f24c 000e 	movw	r0, #49166	; 0xc00e
   189a4:	b015      	add	sp, #84	; 0x54
   189a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189aa:	f24c 0009 	movw	r0, #49161	; 0xc009
   189ae:	b015      	add	sp, #84	; 0x54
   189b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189b4:	f24c 000e 	movw	r0, #49166	; 0xc00e
   189b8:	4770      	bx	lr
   189ba:	bf00      	nop
   189bc:	4002a000 	.word	0x4002a000
   189c0:	4002a610 	.word	0x4002a610
   189c4:	4002a614 	.word	0x4002a614
   189c8:	4002a590 	.word	0x4002a590
   189cc:	40005000 	.word	0x40005000
   189d0:	e000e100 	.word	0xe000e100
   189d4:	20023124 	.word	0x20023124
   189d8:	20023130 	.word	0x20023130
   189dc:	20023134 	.word	0x20023134
   189e0:	20023120 	.word	0x20023120

000189e4 <rpc_transport_ipc_msg_free>:
   189e4:	b470      	push	{r4, r5, r6}
   189e6:	4e17      	ldr	r6, [pc, #92]	; (18a44 <rpc_transport_ipc_msg_free+0x60>)
   189e8:	6831      	ldr	r1, [r6, #0]
   189ea:	680d      	ldr	r5, [r1, #0]
   189ec:	b1ad      	cbz	r5, 18a1a <rpc_transport_ipc_msg_free+0x36>
   189ee:	688b      	ldr	r3, [r1, #8]
   189f0:	4283      	cmp	r3, r0
   189f2:	d024      	beq.n	18a3e <rpc_transport_ipc_msg_free+0x5a>
   189f4:	2300      	movs	r3, #0
   189f6:	3301      	adds	r3, #1
   189f8:	00da      	lsls	r2, r3, #3
   189fa:	429d      	cmp	r5, r3
   189fc:	eb01 0402 	add.w	r4, r1, r2
   18a00:	d00b      	beq.n	18a1a <rpc_transport_ipc_msg_free+0x36>
   18a02:	68a4      	ldr	r4, [r4, #8]
   18a04:	42a0      	cmp	r0, r4
   18a06:	d1f6      	bne.n	189f6 <rpc_transport_ipc_msg_free+0x12>
   18a08:	3204      	adds	r2, #4
   18a0a:	588b      	ldr	r3, [r1, r2]
   18a0c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   18a10:	f043 0303 	orr.w	r3, r3, #3
   18a14:	508b      	str	r3, [r1, r2]
   18a16:	bc70      	pop	{r4, r5, r6}
   18a18:	4770      	bx	lr
   18a1a:	6871      	ldr	r1, [r6, #4]
   18a1c:	680d      	ldr	r5, [r1, #0]
   18a1e:	2d00      	cmp	r5, #0
   18a20:	d0f9      	beq.n	18a16 <rpc_transport_ipc_msg_free+0x32>
   18a22:	688b      	ldr	r3, [r1, #8]
   18a24:	4283      	cmp	r3, r0
   18a26:	d00a      	beq.n	18a3e <rpc_transport_ipc_msg_free+0x5a>
   18a28:	2300      	movs	r3, #0
   18a2a:	3301      	adds	r3, #1
   18a2c:	00da      	lsls	r2, r3, #3
   18a2e:	429d      	cmp	r5, r3
   18a30:	eb01 0402 	add.w	r4, r1, r2
   18a34:	d0ef      	beq.n	18a16 <rpc_transport_ipc_msg_free+0x32>
   18a36:	68a4      	ldr	r4, [r4, #8]
   18a38:	42a0      	cmp	r0, r4
   18a3a:	d1f6      	bne.n	18a2a <rpc_transport_ipc_msg_free+0x46>
   18a3c:	e7e4      	b.n	18a08 <rpc_transport_ipc_msg_free+0x24>
   18a3e:	2204      	movs	r2, #4
   18a40:	e7e3      	b.n	18a0a <rpc_transport_ipc_msg_free+0x26>
   18a42:	bf00      	nop
   18a44:	20023128 	.word	0x20023128

00018a48 <rpc_transport_ipc_shutdown_done>:
   18a48:	4b03      	ldr	r3, [pc, #12]	; (18a58 <rpc_transport_ipc_shutdown_done+0x10>)
   18a4a:	6818      	ldr	r0, [r3, #0]
   18a4c:	f1a0 0005 	sub.w	r0, r0, #5
   18a50:	fab0 f080 	clz	r0, r0
   18a54:	0940      	lsrs	r0, r0, #5
   18a56:	4770      	bx	lr
   18a58:	20023130 	.word	0x20023130

00018a5c <rpc_transport_ipc_tx_init>:
   18a5c:	2800      	cmp	r0, #0
   18a5e:	f000 80b8 	beq.w	18bd2 <rpc_transport_ipc_tx_init+0x176>
   18a62:	2900      	cmp	r1, #0
   18a64:	f000 80b5 	beq.w	18bd2 <rpc_transport_ipc_tx_init+0x176>
   18a68:	2a00      	cmp	r2, #0
   18a6a:	f000 80b2 	beq.w	18bd2 <rpc_transport_ipc_tx_init+0x176>
   18a6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a72:	6a04      	ldr	r4, [r0, #32]
   18a74:	b085      	sub	sp, #20
   18a76:	2c00      	cmp	r4, #0
   18a78:	f000 80a6 	beq.w	18bc8 <rpc_transport_ipc_tx_init+0x16c>
   18a7c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   18a7e:	2800      	cmp	r0, #0
   18a80:	f000 80a2 	beq.w	18bc8 <rpc_transport_ipc_tx_init+0x16c>
   18a84:	f642 4587 	movw	r5, #11399	; 0x2c87
   18a88:	f04f 0a00 	mov.w	sl, #0
   18a8c:	4e55      	ldr	r6, [pc, #340]	; (18be4 <rpc_transport_ipc_tx_init+0x188>)
   18a8e:	42a8      	cmp	r0, r5
   18a90:	f886 a000 	strb.w	sl, [r6]
   18a94:	f240 80a0 	bls.w	18bd8 <rpc_transport_ipc_tx_init+0x17c>
   18a98:	2708      	movs	r7, #8
   18a9a:	f8df 9180 	ldr.w	r9, [pc, #384]	; 18c1c <rpc_transport_ipc_tx_init+0x1c0>
   18a9e:	4620      	mov	r0, r4
   18aa0:	4616      	mov	r6, r2
   18aa2:	460d      	mov	r5, r1
   18aa4:	2244      	movs	r2, #68	; 0x44
   18aa6:	4651      	mov	r1, sl
   18aa8:	f8c9 4000 	str.w	r4, [r9]
   18aac:	f010 fd1b 	bl	294e6 <memset>
   18ab0:	f8d9 2000 	ldr.w	r2, [r9]
   18ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   18ab8:	f8df 8164 	ldr.w	r8, [pc, #356]	; 18c20 <rpc_transport_ipc_tx_init+0x1c4>
   18abc:	f882 a001 	strb.w	sl, [r2, #1]
   18ac0:	f882 a002 	strb.w	sl, [r2, #2]
   18ac4:	f882 a003 	strb.w	sl, [r2, #3]
   18ac8:	7017      	strb	r7, [r2, #0]
   18aca:	4618      	mov	r0, r3
   18acc:	2244      	movs	r2, #68	; 0x44
   18ace:	4651      	mov	r1, sl
   18ad0:	f8c8 3000 	str.w	r3, [r8]
   18ad4:	f010 fd07 	bl	294e6 <memset>
   18ad8:	f8d8 2000 	ldr.w	r2, [r8]
   18adc:	f104 0388 	add.w	r3, r4, #136	; 0x88
   18ae0:	f8df b140 	ldr.w	fp, [pc, #320]	; 18c24 <rpc_transport_ipc_tx_init+0x1c8>
   18ae4:	7017      	strb	r7, [r2, #0]
   18ae6:	f882 a001 	strb.w	sl, [r2, #1]
   18aea:	f882 a002 	strb.w	sl, [r2, #2]
   18aee:	f882 a003 	strb.w	sl, [r2, #3]
   18af2:	4618      	mov	r0, r3
   18af4:	f44f 7200 	mov.w	r2, #512	; 0x200
   18af8:	4651      	mov	r1, sl
   18afa:	f8cb 3000 	str.w	r3, [fp]
   18afe:	f010 fcf2 	bl	294e6 <memset>
   18b02:	4b39      	ldr	r3, [pc, #228]	; (18be8 <rpc_transport_ipc_tx_init+0x18c>)
   18b04:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   18b08:	f8c3 c000 	str.w	ip, [r3]
   18b0c:	4651      	mov	r1, sl
   18b0e:	4660      	mov	r0, ip
   18b10:	f44f 7200 	mov.w	r2, #512	; 0x200
   18b14:	f010 fce7 	bl	294e6 <memset>
   18b18:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   18b1c:	2106      	movs	r1, #6
   18b1e:	f04f 0e01 	mov.w	lr, #1
   18b22:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   18b26:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   18b2a:	4b30      	ldr	r3, [pc, #192]	; (18bec <rpc_transport_ipc_tx_init+0x190>)
   18b2c:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   18b30:	605c      	str	r4, [r3, #4]
   18b32:	4c2f      	ldr	r4, [pc, #188]	; (18bf0 <rpc_transport_ipc_tx_init+0x194>)
   18b34:	f8c3 c008 	str.w	ip, [r3, #8]
   18b38:	8199      	strh	r1, [r3, #12]
   18b3a:	f8a3 e000 	strh.w	lr, [r3]
   18b3e:	4619      	mov	r1, r3
   18b40:	611c      	str	r4, [r3, #16]
   18b42:	4b2c      	ldr	r3, [pc, #176]	; (18bf4 <rpc_transport_ipc_tx_init+0x198>)
   18b44:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 18c28 <rpc_transport_ipc_tx_init+0x1cc>
   18b48:	6120      	str	r0, [r4, #16]
   18b4a:	482b      	ldr	r0, [pc, #172]	; (18bf8 <rpc_transport_ipc_tx_init+0x19c>)
   18b4c:	6063      	str	r3, [r4, #4]
   18b4e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   18b52:	60a0      	str	r0, [r4, #8]
   18b54:	f8c4 c000 	str.w	ip, [r4]
   18b58:	4828      	ldr	r0, [pc, #160]	; (18bfc <rpc_transport_ipc_tx_init+0x1a0>)
   18b5a:	60e3      	str	r3, [r4, #12]
   18b5c:	6162      	str	r2, [r4, #20]
   18b5e:	f005 ff43 	bl	1e9e8 <nrf_mem_register>
   18b62:	2800      	cmp	r0, #0
   18b64:	d132      	bne.n	18bcc <rpc_transport_ipc_tx_init+0x170>
   18b66:	f04f 0c02 	mov.w	ip, #2
   18b6a:	2420      	movs	r4, #32
   18b6c:	f8d9 1000 	ldr.w	r1, [r9]
   18b70:	f8db 2000 	ldr.w	r2, [fp]
   18b74:	6029      	str	r1, [r5, #0]
   18b76:	4b1c      	ldr	r3, [pc, #112]	; (18be8 <rpc_transport_ipc_tx_init+0x18c>)
   18b78:	f8d8 1000 	ldr.w	r1, [r8]
   18b7c:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 18c2c <rpc_transport_ipc_tx_init+0x1d0>
   18b80:	4d1f      	ldr	r5, [pc, #124]	; (18c00 <rpc_transport_ipc_tx_init+0x1a4>)
   18b82:	6031      	str	r1, [r6, #0]
   18b84:	f8ce 2000 	str.w	r2, [lr]
   18b88:	681b      	ldr	r3, [r3, #0]
   18b8a:	491e      	ldr	r1, [pc, #120]	; (18c04 <rpc_transport_ipc_tx_init+0x1a8>)
   18b8c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   18b90:	602a      	str	r2, [r5, #0]
   18b92:	4e1d      	ldr	r6, [pc, #116]	; (18c08 <rpc_transport_ipc_tx_init+0x1ac>)
   18b94:	4a1d      	ldr	r2, [pc, #116]	; (18c0c <rpc_transport_ipc_tx_init+0x1b0>)
   18b96:	4d1e      	ldr	r5, [pc, #120]	; (18c10 <rpc_transport_ipc_tx_init+0x1b4>)
   18b98:	600b      	str	r3, [r1, #0]
   18b9a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   18b9e:	491d      	ldr	r1, [pc, #116]	; (18c14 <rpc_transport_ipc_tx_init+0x1b8>)
   18ba0:	6033      	str	r3, [r6, #0]
   18ba2:	8028      	strh	r0, [r5, #0]
   18ba4:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   18ba8:	6809      	ldr	r1, [r1, #0]
   18baa:	4b1b      	ldr	r3, [pc, #108]	; (18c18 <rpc_transport_ipc_tx_init+0x1bc>)
   18bac:	9103      	str	r1, [sp, #12]
   18bae:	9903      	ldr	r1, [sp, #12]
   18bb0:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   18bb4:	6819      	ldr	r1, [r3, #0]
   18bb6:	443b      	add	r3, r7
   18bb8:	9102      	str	r1, [sp, #8]
   18bba:	9902      	ldr	r1, [sp, #8]
   18bbc:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   18bc0:	681b      	ldr	r3, [r3, #0]
   18bc2:	9301      	str	r3, [sp, #4]
   18bc4:	9b01      	ldr	r3, [sp, #4]
   18bc6:	e001      	b.n	18bcc <rpc_transport_ipc_tx_init+0x170>
   18bc8:	f24c 0007 	movw	r0, #49159	; 0xc007
   18bcc:	b005      	add	sp, #20
   18bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bd2:	f24c 000e 	movw	r0, #49166	; 0xc00e
   18bd6:	4770      	bx	lr
   18bd8:	f24c 0004 	movw	r0, #49156	; 0xc004
   18bdc:	b005      	add	sp, #20
   18bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18be2:	bf00      	nop
   18be4:	2002af71 	.word	0x2002af71
   18be8:	20023160 	.word	0x20023160
   18bec:	2002314c 	.word	0x2002314c
   18bf0:	20023170 	.word	0x20023170
   18bf4:	00040080 	.word	0x00040080
   18bf8:	00040100 	.word	0x00040100
   18bfc:	20023138 	.word	0x20023138
   18c00:	20023144 	.word	0x20023144
   18c04:	20023140 	.word	0x20023140
   18c08:	2002313c 	.word	0x2002313c
   18c0c:	4002a000 	.word	0x4002a000
   18c10:	200281ea 	.word	0x200281ea
   18c14:	4002a514 	.word	0x4002a514
   18c18:	4002a51c 	.word	0x4002a51c
   18c1c:	2002316c 	.word	0x2002316c
   18c20:	20023164 	.word	0x20023164
   18c24:	20023168 	.word	0x20023168
   18c28:	00080040 	.word	0x00080040
   18c2c:	20023148 	.word	0x20023148

00018c30 <rpc_transport_ipc_send>:
   18c30:	2800      	cmp	r0, #0
   18c32:	d061      	beq.n	18cf8 <rpc_transport_ipc_send+0xc8>
   18c34:	b4f0      	push	{r4, r5, r6, r7}
   18c36:	4b34      	ldr	r3, [pc, #208]	; (18d08 <rpc_transport_ipc_send+0xd8>)
   18c38:	b082      	sub	sp, #8
   18c3a:	681a      	ldr	r2, [r3, #0]
   18c3c:	4b33      	ldr	r3, [pc, #204]	; (18d0c <rpc_transport_ipc_send+0xdc>)
   18c3e:	4282      	cmp	r2, r0
   18c40:	d81e      	bhi.n	18c80 <rpc_transport_ipc_send+0x50>
   18c42:	681b      	ldr	r3, [r3, #0]
   18c44:	4932      	ldr	r1, [pc, #200]	; (18d10 <rpc_transport_ipc_send+0xe0>)
   18c46:	4283      	cmp	r3, r0
   18c48:	6809      	ldr	r1, [r1, #0]
   18c4a:	d803      	bhi.n	18c54 <rpc_transport_ipc_send+0x24>
   18c4c:	4c31      	ldr	r4, [pc, #196]	; (18d14 <rpc_transport_ipc_send+0xe4>)
   18c4e:	6824      	ldr	r4, [r4, #0]
   18c50:	4284      	cmp	r4, r0
   18c52:	d849      	bhi.n	18ce8 <rpc_transport_ipc_send+0xb8>
   18c54:	4281      	cmp	r1, r0
   18c56:	d90e      	bls.n	18c76 <rpc_transport_ipc_send+0x46>
   18c58:	4b2f      	ldr	r3, [pc, #188]	; (18d18 <rpc_transport_ipc_send+0xe8>)
   18c5a:	781b      	ldrb	r3, [r3, #0]
   18c5c:	2b00      	cmp	r3, #0
   18c5e:	d14e      	bne.n	18cfe <rpc_transport_ipc_send+0xce>
   18c60:	1a83      	subs	r3, r0, r2
   18c62:	492e      	ldr	r1, [pc, #184]	; (18d1c <rpc_transport_ipc_send+0xec>)
   18c64:	099f      	lsrs	r7, r3, #6
   18c66:	069b      	lsls	r3, r3, #26
   18c68:	680a      	ldr	r2, [r1, #0]
   18c6a:	4d2d      	ldr	r5, [pc, #180]	; (18d20 <rpc_transport_ipc_send+0xf0>)
   18c6c:	f04f 0403 	mov.w	r4, #3
   18c70:	f04f 0602 	mov.w	r6, #2
   18c74:	d014      	beq.n	18ca0 <rpc_transport_ipc_send+0x70>
   18c76:	f24c 0010 	movw	r0, #49168	; 0xc010
   18c7a:	b002      	add	sp, #8
   18c7c:	bcf0      	pop	{r4, r5, r6, r7}
   18c7e:	4770      	bx	lr
   18c80:	681b      	ldr	r3, [r3, #0]
   18c82:	4298      	cmp	r0, r3
   18c84:	d3f7      	bcc.n	18c76 <rpc_transport_ipc_send+0x46>
   18c86:	4a23      	ldr	r2, [pc, #140]	; (18d14 <rpc_transport_ipc_send+0xe4>)
   18c88:	6812      	ldr	r2, [r2, #0]
   18c8a:	4290      	cmp	r0, r2
   18c8c:	d2f3      	bcs.n	18c76 <rpc_transport_ipc_send+0x46>
   18c8e:	2401      	movs	r4, #1
   18c90:	1ac3      	subs	r3, r0, r3
   18c92:	4a24      	ldr	r2, [pc, #144]	; (18d24 <rpc_transport_ipc_send+0xf4>)
   18c94:	099f      	lsrs	r7, r3, #6
   18c96:	069b      	lsls	r3, r3, #26
   18c98:	4626      	mov	r6, r4
   18c9a:	6812      	ldr	r2, [r2, #0]
   18c9c:	4d22      	ldr	r5, [pc, #136]	; (18d28 <rpc_transport_ipc_send+0xf8>)
   18c9e:	d1ea      	bne.n	18c76 <rpc_transport_ipc_send+0x46>
   18ca0:	6841      	ldr	r1, [r0, #4]
   18ca2:	b2c9      	uxtb	r1, r1
   18ca4:	428e      	cmp	r6, r1
   18ca6:	d122      	bne.n	18cee <rpc_transport_ipc_send+0xbe>
   18ca8:	2020      	movs	r0, #32
   18caa:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   18cae:	491f      	ldr	r1, [pc, #124]	; (18d2c <rpc_transport_ipc_send+0xfc>)
   18cb0:	685a      	ldr	r2, [r3, #4]
   18cb2:	880e      	ldrh	r6, [r1, #0]
   18cb4:	b292      	uxth	r2, r2
   18cb6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   18cba:	605a      	str	r2, [r3, #4]
   18cbc:	685a      	ldr	r2, [r3, #4]
   18cbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   18cc2:	f042 0201 	orr.w	r2, r2, #1
   18cc6:	605a      	str	r2, [r3, #4]
   18cc8:	bf00      	nop
   18cca:	3801      	subs	r0, #1
   18ccc:	d1fc      	bne.n	18cc8 <rpc_transport_ipc_send+0x98>
   18cce:	2201      	movs	r2, #1
   18cd0:	4b17      	ldr	r3, [pc, #92]	; (18d30 <rpc_transport_ipc_send+0x100>)
   18cd2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   18cd6:	682a      	ldr	r2, [r5, #0]
   18cd8:	880b      	ldrh	r3, [r1, #0]
   18cda:	9201      	str	r2, [sp, #4]
   18cdc:	9a01      	ldr	r2, [sp, #4]
   18cde:	3301      	adds	r3, #1
   18ce0:	800b      	strh	r3, [r1, #0]
   18ce2:	b002      	add	sp, #8
   18ce4:	bcf0      	pop	{r4, r5, r6, r7}
   18ce6:	4770      	bx	lr
   18ce8:	4281      	cmp	r1, r0
   18cea:	d9d0      	bls.n	18c8e <rpc_transport_ipc_send+0x5e>
   18cec:	e7b4      	b.n	18c58 <rpc_transport_ipc_send+0x28>
   18cee:	f24c 0007 	movw	r0, #49159	; 0xc007
   18cf2:	b002      	add	sp, #8
   18cf4:	bcf0      	pop	{r4, r5, r6, r7}
   18cf6:	4770      	bx	lr
   18cf8:	f24c 000e 	movw	r0, #49166	; 0xc00e
   18cfc:	4770      	bx	lr
   18cfe:	f24c 000f 	movw	r0, #49167	; 0xc00f
   18d02:	b002      	add	sp, #8
   18d04:	bcf0      	pop	{r4, r5, r6, r7}
   18d06:	4770      	bx	lr
   18d08:	20023148 	.word	0x20023148
   18d0c:	20023140 	.word	0x20023140
   18d10:	20023144 	.word	0x20023144
   18d14:	2002313c 	.word	0x2002313c
   18d18:	2002af71 	.word	0x2002af71
   18d1c:	2002316c 	.word	0x2002316c
   18d20:	4002a00c 	.word	0x4002a00c
   18d24:	20023164 	.word	0x20023164
   18d28:	4002a004 	.word	0x4002a004
   18d2c:	200281ea 	.word	0x200281ea
   18d30:	4002a000 	.word	0x4002a000

00018d34 <rpc_transport_ipc_tx_rpc_data_alloc>:
   18d34:	4b18      	ldr	r3, [pc, #96]	; (18d98 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   18d36:	781b      	ldrb	r3, [r3, #0]
   18d38:	bb63      	cbnz	r3, 18d94 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   18d3a:	b4f0      	push	{r4, r5, r6, r7}
   18d3c:	4a17      	ldr	r2, [pc, #92]	; (18d9c <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   18d3e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   18d42:	6814      	ldr	r4, [r2, #0]
   18d44:	4b16      	ldr	r3, [pc, #88]	; (18da0 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   18d46:	6825      	ldr	r5, [r4, #0]
   18d48:	681e      	ldr	r6, [r3, #0]
   18d4a:	b1a5      	cbz	r5, 18d76 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   18d4c:	4607      	mov	r7, r0
   18d4e:	00c1      	lsls	r1, r0, #3
   18d50:	1863      	adds	r3, r4, r1
   18d52:	685a      	ldr	r2, [r3, #4]
   18d54:	b2d2      	uxtb	r2, r2
   18d56:	2a03      	cmp	r2, #3
   18d58:	d104      	bne.n	18d64 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   18d5a:	609f      	str	r7, [r3, #8]
   18d5c:	685a      	ldr	r2, [r3, #4]
   18d5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   18d62:	605a      	str	r2, [r3, #4]
   18d64:	685a      	ldr	r2, [r3, #4]
   18d66:	f012 0fff 	tst.w	r2, #255	; 0xff
   18d6a:	d101      	bne.n	18d70 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   18d6c:	689b      	ldr	r3, [r3, #8]
   18d6e:	b12b      	cbz	r3, 18d7c <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   18d70:	3001      	adds	r0, #1
   18d72:	42a8      	cmp	r0, r5
   18d74:	d1eb      	bne.n	18d4e <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   18d76:	2000      	movs	r0, #0
   18d78:	bcf0      	pop	{r4, r5, r6, r7}
   18d7a:	4770      	bx	lr
   18d7c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   18d80:	4421      	add	r1, r4
   18d82:	6088      	str	r0, [r1, #8]
   18d84:	6843      	ldr	r3, [r0, #4]
   18d86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   18d8a:	f043 0302 	orr.w	r3, r3, #2
   18d8e:	6043      	str	r3, [r0, #4]
   18d90:	bcf0      	pop	{r4, r5, r6, r7}
   18d92:	4770      	bx	lr
   18d94:	2000      	movs	r0, #0
   18d96:	4770      	bx	lr
   18d98:	2002af71 	.word	0x2002af71
   18d9c:	2002316c 	.word	0x2002316c
   18da0:	20023168 	.word	0x20023168

00018da4 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   18da4:	b4f0      	push	{r4, r5, r6, r7}
   18da6:	4a15      	ldr	r2, [pc, #84]	; (18dfc <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   18da8:	4b15      	ldr	r3, [pc, #84]	; (18e00 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   18daa:	6814      	ldr	r4, [r2, #0]
   18dac:	681e      	ldr	r6, [r3, #0]
   18dae:	6825      	ldr	r5, [r4, #0]
   18db0:	b1ad      	cbz	r5, 18dde <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   18db2:	2000      	movs	r0, #0
   18db4:	4607      	mov	r7, r0
   18db6:	00c1      	lsls	r1, r0, #3
   18db8:	1863      	adds	r3, r4, r1
   18dba:	685a      	ldr	r2, [r3, #4]
   18dbc:	b2d2      	uxtb	r2, r2
   18dbe:	2a03      	cmp	r2, #3
   18dc0:	d104      	bne.n	18dcc <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   18dc2:	609f      	str	r7, [r3, #8]
   18dc4:	685a      	ldr	r2, [r3, #4]
   18dc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   18dca:	605a      	str	r2, [r3, #4]
   18dcc:	685a      	ldr	r2, [r3, #4]
   18dce:	f012 0fff 	tst.w	r2, #255	; 0xff
   18dd2:	d101      	bne.n	18dd8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   18dd4:	689b      	ldr	r3, [r3, #8]
   18dd6:	b12b      	cbz	r3, 18de4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   18dd8:	3001      	adds	r0, #1
   18dda:	4285      	cmp	r5, r0
   18ddc:	d1eb      	bne.n	18db6 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   18dde:	2000      	movs	r0, #0
   18de0:	bcf0      	pop	{r4, r5, r6, r7}
   18de2:	4770      	bx	lr
   18de4:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   18de8:	4421      	add	r1, r4
   18dea:	6088      	str	r0, [r1, #8]
   18dec:	6843      	ldr	r3, [r0, #4]
   18dee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   18df2:	f043 0301 	orr.w	r3, r3, #1
   18df6:	6043      	str	r3, [r0, #4]
   18df8:	bcf0      	pop	{r4, r5, r6, r7}
   18dfa:	4770      	bx	lr
   18dfc:	20023164 	.word	0x20023164
   18e00:	20023160 	.word	0x20023160

00018e04 <rpc_transport_ipc_tx_data_alloc>:
   18e04:	4b03      	ldr	r3, [pc, #12]	; (18e14 <rpc_transport_ipc_tx_data_alloc+0x10>)
   18e06:	781b      	ldrb	r3, [r3, #0]
   18e08:	b90b      	cbnz	r3, 18e0e <rpc_transport_ipc_tx_data_alloc+0xa>
   18e0a:	f005 bf1d 	b.w	1ec48 <nrf_shared_malloc>
   18e0e:	2000      	movs	r0, #0
   18e10:	4770      	bx	lr
   18e12:	bf00      	nop
   18e14:	2002af71 	.word	0x2002af71

00018e18 <rpc_transport_ipc_tx_suspend>:
   18e18:	2201      	movs	r2, #1
   18e1a:	4b01      	ldr	r3, [pc, #4]	; (18e20 <rpc_transport_ipc_tx_suspend+0x8>)
   18e1c:	701a      	strb	r2, [r3, #0]
   18e1e:	4770      	bx	lr
   18e20:	2002af71 	.word	0x2002af71

00018e24 <rpc_transport_ipc_request_shutdown>:
   18e24:	b4f0      	push	{r4, r5, r6, r7}
   18e26:	4a16      	ldr	r2, [pc, #88]	; (18e80 <rpc_transport_ipc_request_shutdown+0x5c>)
   18e28:	4b16      	ldr	r3, [pc, #88]	; (18e84 <rpc_transport_ipc_request_shutdown+0x60>)
   18e2a:	6814      	ldr	r4, [r2, #0]
   18e2c:	681e      	ldr	r6, [r3, #0]
   18e2e:	6825      	ldr	r5, [r4, #0]
   18e30:	b1ad      	cbz	r5, 18e5e <rpc_transport_ipc_request_shutdown+0x3a>
   18e32:	2200      	movs	r2, #0
   18e34:	4617      	mov	r7, r2
   18e36:	00d0      	lsls	r0, r2, #3
   18e38:	1823      	adds	r3, r4, r0
   18e3a:	6859      	ldr	r1, [r3, #4]
   18e3c:	b2c9      	uxtb	r1, r1
   18e3e:	2903      	cmp	r1, #3
   18e40:	d104      	bne.n	18e4c <rpc_transport_ipc_request_shutdown+0x28>
   18e42:	609f      	str	r7, [r3, #8]
   18e44:	6859      	ldr	r1, [r3, #4]
   18e46:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   18e4a:	6059      	str	r1, [r3, #4]
   18e4c:	6859      	ldr	r1, [r3, #4]
   18e4e:	f011 0fff 	tst.w	r1, #255	; 0xff
   18e52:	d101      	bne.n	18e58 <rpc_transport_ipc_request_shutdown+0x34>
   18e54:	689b      	ldr	r3, [r3, #8]
   18e56:	b123      	cbz	r3, 18e62 <rpc_transport_ipc_request_shutdown+0x3e>
   18e58:	3201      	adds	r2, #1
   18e5a:	42aa      	cmp	r2, r5
   18e5c:	d1eb      	bne.n	18e36 <rpc_transport_ipc_request_shutdown+0x12>
   18e5e:	bcf0      	pop	{r4, r5, r6, r7}
   18e60:	4770      	bx	lr
   18e62:	0192      	lsls	r2, r2, #6
   18e64:	4404      	add	r4, r0
   18e66:	18b0      	adds	r0, r6, r2
   18e68:	60a0      	str	r0, [r4, #8]
   18e6a:	6843      	ldr	r3, [r0, #4]
   18e6c:	4906      	ldr	r1, [pc, #24]	; (18e88 <rpc_transport_ipc_request_shutdown+0x64>)
   18e6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   18e72:	f043 0301 	orr.w	r3, r3, #1
   18e76:	6043      	str	r3, [r0, #4]
   18e78:	50b1      	str	r1, [r6, r2]
   18e7a:	bcf0      	pop	{r4, r5, r6, r7}
   18e7c:	f7ff bed8 	b.w	18c30 <rpc_transport_ipc_send>
   18e80:	20023164 	.word	0x20023164
   18e84:	20023160 	.word	0x20023160
   18e88:	00030001 	.word	0x00030001

00018e8c <secure_client_socket>:
   18e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18e90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   18e94:	460c      	mov	r4, r1
   18e96:	680b      	ldr	r3, [r1, #0]
   18e98:	4f46      	ldr	r7, [pc, #280]	; (18fb4 <secure_client_socket+0x128>)
   18e9a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   18e9e:	600b      	str	r3, [r1, #0]
   18ea0:	680b      	ldr	r3, [r1, #0]
   18ea2:	00c6      	lsls	r6, r0, #3
   18ea4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   18ea8:	600b      	str	r3, [r1, #0]
   18eaa:	eb07 0a06 	add.w	sl, r7, r6
   18eae:	b084      	sub	sp, #16
   18eb0:	f8da 3004 	ldr.w	r3, [sl, #4]
   18eb4:	6989      	ldr	r1, [r1, #24]
   18eb6:	f247 0281 	movw	r2, #28801	; 0x7081
   18eba:	4605      	mov	r5, r0
   18ebc:	f8d4 8000 	ldr.w	r8, [r4]
   18ec0:	e9cd cc02 	strd	ip, ip, [sp, #8]
   18ec4:	f000 fcfc 	bl	198c0 <ip_interface_request_create>
   18ec8:	2800      	cmp	r0, #0
   18eca:	d06d      	beq.n	18fa8 <secure_client_socket+0x11c>
   18ecc:	f8da 2004 	ldr.w	r2, [sl, #4]
   18ed0:	4681      	mov	r9, r0
   18ed2:	2a00      	cmp	r2, #0
   18ed4:	d15d      	bne.n	18f92 <secure_client_socket+0x106>
   18ed6:	4b38      	ldr	r3, [pc, #224]	; (18fb8 <secure_client_socket+0x12c>)
   18ed8:	1971      	adds	r1, r6, r5
   18eda:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   18ede:	2224      	movs	r2, #36	; 0x24
   18ee0:	f109 0014 	add.w	r0, r9, #20
   18ee4:	f010 fac5 	bl	29472 <memcpy>
   18ee8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   18eec:	4649      	mov	r1, r9
   18eee:	3324      	adds	r3, #36	; 0x24
   18ef0:	f8c9 3008 	str.w	r3, [r9, #8]
   18ef4:	6822      	ldr	r2, [r4, #0]
   18ef6:	4643      	mov	r3, r8
   18ef8:	0c12      	lsrs	r2, r2, #16
   18efa:	0412      	lsls	r2, r2, #16
   18efc:	f042 020a 	orr.w	r2, r2, #10
   18f00:	6022      	str	r2, [r4, #0]
   18f02:	4620      	mov	r0, r4
   18f04:	f247 0281 	movw	r2, #28801	; 0x7081
   18f08:	f000 fcfa 	bl	19900 <ip_interface_request_send>
   18f0c:	4603      	mov	r3, r0
   18f0e:	b968      	cbnz	r0, 18f2c <secure_client_socket+0xa0>
   18f10:	6823      	ldr	r3, [r4, #0]
   18f12:	00db      	lsls	r3, r3, #3
   18f14:	d40e      	bmi.n	18f34 <secure_client_socket+0xa8>
   18f16:	ab03      	add	r3, sp, #12
   18f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18f1c:	210b      	movs	r1, #11
   18f1e:	4628      	mov	r0, r5
   18f20:	f000 fd02 	bl	19928 <ip_interface_wait>
   18f24:	4603      	mov	r3, r0
   18f26:	b150      	cbz	r0, 18f3e <secure_client_socket+0xb2>
   18f28:	f8c4 8000 	str.w	r8, [r4]
   18f2c:	4618      	mov	r0, r3
   18f2e:	b004      	add	sp, #16
   18f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18f34:	2373      	movs	r3, #115	; 0x73
   18f36:	4618      	mov	r0, r3
   18f38:	b004      	add	sp, #16
   18f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18f3e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   18f42:	ab02      	add	r3, sp, #8
   18f44:	4611      	mov	r1, r2
   18f46:	4628      	mov	r0, r5
   18f48:	f000 fcee 	bl	19928 <ip_interface_wait>
   18f4c:	4603      	mov	r3, r0
   18f4e:	bb30      	cbnz	r0, 18f9e <secure_client_socket+0x112>
   18f50:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   18f54:	b138      	cbz	r0, 18f66 <secure_client_socket+0xda>
   18f56:	9301      	str	r3, [sp, #4]
   18f58:	f005 fe6a 	bl	1ec30 <nrf_free>
   18f5c:	9b01      	ldr	r3, [sp, #4]
   18f5e:	443e      	add	r6, r7
   18f60:	6073      	str	r3, [r6, #4]
   18f62:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   18f66:	4618      	mov	r0, r3
   18f68:	6822      	ldr	r2, [r4, #0]
   18f6a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   18f6e:	6022      	str	r2, [r4, #0]
   18f70:	6822      	ldr	r2, [r4, #0]
   18f72:	0c12      	lsrs	r2, r2, #16
   18f74:	0412      	lsls	r2, r2, #16
   18f76:	f042 020c 	orr.w	r2, r2, #12
   18f7a:	6022      	str	r2, [r4, #0]
   18f7c:	6822      	ldr	r2, [r4, #0]
   18f7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   18f82:	6022      	str	r2, [r4, #0]
   18f84:	6822      	ldr	r2, [r4, #0]
   18f86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   18f8a:	6022      	str	r2, [r4, #0]
   18f8c:	b004      	add	sp, #16
   18f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18f92:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   18f96:	6800      	ldr	r0, [r0, #0]
   18f98:	f010 fa6b 	bl	29472 <memcpy>
   18f9c:	e79b      	b.n	18ed6 <secure_client_socket+0x4a>
   18f9e:	2b73      	cmp	r3, #115	; 0x73
   18fa0:	d0c4      	beq.n	18f2c <secure_client_socket+0xa0>
   18fa2:	f8c4 8000 	str.w	r8, [r4]
   18fa6:	e7c1      	b.n	18f2c <secure_client_socket+0xa0>
   18fa8:	230c      	movs	r3, #12
   18faa:	4618      	mov	r0, r3
   18fac:	b004      	add	sp, #16
   18fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18fb2:	bf00      	nop
   18fb4:	200232cc 	.word	0x200232cc
   18fb8:	20023188 	.word	0x20023188

00018fbc <tls_interface_init>:
   18fbc:	2000      	movs	r0, #0
   18fbe:	4770      	bx	lr

00018fc0 <tls_interface_open>:
   18fc0:	b538      	push	{r3, r4, r5, lr}
   18fc2:	1e4b      	subs	r3, r1, #1
   18fc4:	2b01      	cmp	r3, #1
   18fc6:	d808      	bhi.n	18fda <tls_interface_open+0x1a>
   18fc8:	4614      	mov	r4, r2
   18fca:	b162      	cbz	r2, 18fe6 <tls_interface_open+0x26>
   18fcc:	2901      	cmp	r1, #1
   18fce:	d02d      	beq.n	1902c <tls_interface_open+0x6c>
   18fd0:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   18fd4:	bf08      	it	eq
   18fd6:	2202      	moveq	r2, #2
   18fd8:	d00d      	beq.n	18ff6 <tls_interface_open+0x36>
   18fda:	2029      	movs	r0, #41	; 0x29
   18fdc:	f7fb ff72 	bl	14ec4 <bsd_os_errno_set>
   18fe0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18fe4:	e020      	b.n	19028 <tls_interface_open+0x68>
   18fe6:	2901      	cmp	r1, #1
   18fe8:	bf0b      	itete	eq
   18fea:	2201      	moveq	r2, #1
   18fec:	2202      	movne	r2, #2
   18fee:	f44f 7482 	moveq.w	r4, #260	; 0x104
   18ff2:	f44f 7487 	movne.w	r4, #270	; 0x10e
   18ff6:	f000 fcc9 	bl	1998c <ip_interface_open>
   18ffa:	1e05      	subs	r5, r0, #0
   18ffc:	db1b      	blt.n	19036 <tls_interface_open+0x76>
   18ffe:	4b0f      	ldr	r3, [pc, #60]	; (1903c <tls_interface_open+0x7c>)
   19000:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   19004:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   19008:	2224      	movs	r2, #36	; 0x24
   1900a:	490d      	ldr	r1, [pc, #52]	; (19040 <tls_interface_open+0x80>)
   1900c:	f010 fa31 	bl	29472 <memcpy>
   19010:	4628      	mov	r0, r5
   19012:	f006 fa67 	bl	1f4e4 <interface_socket_from_handle_get>
   19016:	6803      	ldr	r3, [r0, #0]
   19018:	6144      	str	r4, [r0, #20]
   1901a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1901e:	6003      	str	r3, [r0, #0]
   19020:	6803      	ldr	r3, [r0, #0]
   19022:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   19026:	6003      	str	r3, [r0, #0]
   19028:	4628      	mov	r0, r5
   1902a:	bd38      	pop	{r3, r4, r5, pc}
   1902c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   19030:	d1d3      	bne.n	18fda <tls_interface_open+0x1a>
   19032:	460a      	mov	r2, r1
   19034:	e7df      	b.n	18ff6 <tls_interface_open+0x36>
   19036:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1903a:	e7f5      	b.n	19028 <tls_interface_open+0x68>
   1903c:	20023188 	.word	0x20023188
   19040:	0002a8f0 	.word	0x0002a8f0

00019044 <tls_interface_close>:
   19044:	b538      	push	{r3, r4, r5, lr}
   19046:	4604      	mov	r4, r0
   19048:	f006 fa4c 	bl	1f4e4 <interface_socket_from_handle_get>
   1904c:	b180      	cbz	r0, 19070 <tls_interface_close+0x2c>
   1904e:	4d0b      	ldr	r5, [pc, #44]	; (1907c <tls_interface_close+0x38>)
   19050:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   19054:	b138      	cbz	r0, 19066 <tls_interface_close+0x22>
   19056:	f005 fdeb 	bl	1ec30 <nrf_free>
   1905a:	2300      	movs	r3, #0
   1905c:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   19060:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   19064:	6053      	str	r3, [r2, #4]
   19066:	4620      	mov	r0, r4
   19068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1906c:	f000 bd54 	b.w	19b18 <ip_interface_close>
   19070:	2009      	movs	r0, #9
   19072:	f7fb ff27 	bl	14ec4 <bsd_os_errno_set>
   19076:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1907a:	bd38      	pop	{r3, r4, r5, pc}
   1907c:	200232cc 	.word	0x200232cc

00019080 <tls_interface_sendto>:
   19080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19084:	460d      	mov	r5, r1
   19086:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1908a:	4616      	mov	r6, r2
   1908c:	461f      	mov	r7, r3
   1908e:	4604      	mov	r4, r0
   19090:	f006 fa28 	bl	1f4e4 <interface_socket_from_handle_get>
   19094:	2800      	cmp	r0, #0
   19096:	d03b      	beq.n	19110 <tls_interface_sendto+0x90>
   19098:	6803      	ldr	r3, [r0, #0]
   1909a:	b29b      	uxth	r3, r3
   1909c:	2b0c      	cmp	r3, #12
   1909e:	d039      	beq.n	19114 <tls_interface_sendto+0x94>
   190a0:	6803      	ldr	r3, [r0, #0]
   190a2:	b29b      	uxth	r3, r3
   190a4:	2b0b      	cmp	r3, #11
   190a6:	d111      	bne.n	190cc <tls_interface_sendto+0x4c>
   190a8:	4b20      	ldr	r3, [pc, #128]	; (1912c <tls_interface_sendto+0xac>)
   190aa:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   190ae:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   190b2:	2b02      	cmp	r3, #2
   190b4:	d038      	beq.n	19128 <tls_interface_sendto+0xa8>
   190b6:	6903      	ldr	r3, [r0, #16]
   190b8:	2b01      	cmp	r3, #1
   190ba:	bf14      	ite	ne
   190bc:	2039      	movne	r0, #57	; 0x39
   190be:	202a      	moveq	r0, #42	; 0x2a
   190c0:	f7fb ff00 	bl	14ec4 <bsd_os_errno_set>
   190c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   190c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   190cc:	6903      	ldr	r3, [r0, #16]
   190ce:	2b01      	cmp	r3, #1
   190d0:	d00b      	beq.n	190ea <tls_interface_sendto+0x6a>
   190d2:	2b02      	cmp	r3, #2
   190d4:	d001      	beq.n	190da <tls_interface_sendto+0x5a>
   190d6:	2039      	movs	r0, #57	; 0x39
   190d8:	e7f2      	b.n	190c0 <tls_interface_sendto+0x40>
   190da:	6803      	ldr	r3, [r0, #0]
   190dc:	b29b      	uxth	r3, r3
   190de:	2b02      	cmp	r3, #2
   190e0:	d007      	beq.n	190f2 <tls_interface_sendto+0x72>
   190e2:	6803      	ldr	r3, [r0, #0]
   190e4:	b29b      	uxth	r3, r3
   190e6:	2b04      	cmp	r3, #4
   190e8:	d003      	beq.n	190f2 <tls_interface_sendto+0x72>
   190ea:	6803      	ldr	r3, [r0, #0]
   190ec:	b29b      	uxth	r3, r3
   190ee:	2b05      	cmp	r3, #5
   190f0:	d1f1      	bne.n	190d6 <tls_interface_sendto+0x56>
   190f2:	4b0e      	ldr	r3, [pc, #56]	; (1912c <tls_interface_sendto+0xac>)
   190f4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   190f8:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   190fc:	2b02      	cmp	r3, #2
   190fe:	d1ea      	bne.n	190d6 <tls_interface_sendto+0x56>
   19100:	4601      	mov	r1, r0
   19102:	4620      	mov	r0, r4
   19104:	f7ff fec2 	bl	18e8c <secure_client_socket>
   19108:	2800      	cmp	r0, #0
   1910a:	d003      	beq.n	19114 <tls_interface_sendto+0x94>
   1910c:	dcd8      	bgt.n	190c0 <tls_interface_sendto+0x40>
   1910e:	e7d9      	b.n	190c4 <tls_interface_sendto+0x44>
   19110:	2009      	movs	r0, #9
   19112:	e7d5      	b.n	190c0 <tls_interface_sendto+0x40>
   19114:	e9cd 8908 	strd	r8, r9, [sp, #32]
   19118:	463b      	mov	r3, r7
   1911a:	4632      	mov	r2, r6
   1911c:	4629      	mov	r1, r5
   1911e:	4620      	mov	r0, r4
   19120:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19124:	f000 bd6a 	b.w	19bfc <ip_interface_sendto>
   19128:	2023      	movs	r0, #35	; 0x23
   1912a:	e7c9      	b.n	190c0 <tls_interface_sendto+0x40>
   1912c:	20023188 	.word	0x20023188

00019130 <tls_interface_recvfrom>:
   19130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19134:	460d      	mov	r5, r1
   19136:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1913a:	4616      	mov	r6, r2
   1913c:	461f      	mov	r7, r3
   1913e:	4604      	mov	r4, r0
   19140:	f006 f9d0 	bl	1f4e4 <interface_socket_from_handle_get>
   19144:	2800      	cmp	r0, #0
   19146:	d038      	beq.n	191ba <tls_interface_recvfrom+0x8a>
   19148:	6803      	ldr	r3, [r0, #0]
   1914a:	b29b      	uxth	r3, r3
   1914c:	2b0c      	cmp	r3, #12
   1914e:	d00f      	beq.n	19170 <tls_interface_recvfrom+0x40>
   19150:	6803      	ldr	r3, [r0, #0]
   19152:	b29b      	uxth	r3, r3
   19154:	2b0d      	cmp	r3, #13
   19156:	d00b      	beq.n	19170 <tls_interface_recvfrom+0x40>
   19158:	6903      	ldr	r3, [r0, #16]
   1915a:	2b01      	cmp	r3, #1
   1915c:	d01a      	beq.n	19194 <tls_interface_recvfrom+0x64>
   1915e:	2b02      	cmp	r3, #2
   19160:	d010      	beq.n	19184 <tls_interface_recvfrom+0x54>
   19162:	2023      	movs	r0, #35	; 0x23
   19164:	f7fb feae 	bl	14ec4 <bsd_os_errno_set>
   19168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1916c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19170:	e9cd 8908 	strd	r8, r9, [sp, #32]
   19174:	463b      	mov	r3, r7
   19176:	4632      	mov	r2, r6
   19178:	4629      	mov	r1, r5
   1917a:	4620      	mov	r0, r4
   1917c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19180:	f000 bea2 	b.w	19ec8 <ip_interface_recvfrom>
   19184:	6803      	ldr	r3, [r0, #0]
   19186:	b29b      	uxth	r3, r3
   19188:	2b02      	cmp	r3, #2
   1918a:	d007      	beq.n	1919c <tls_interface_recvfrom+0x6c>
   1918c:	6803      	ldr	r3, [r0, #0]
   1918e:	b29b      	uxth	r3, r3
   19190:	2b04      	cmp	r3, #4
   19192:	d003      	beq.n	1919c <tls_interface_recvfrom+0x6c>
   19194:	6803      	ldr	r3, [r0, #0]
   19196:	b29b      	uxth	r3, r3
   19198:	2b05      	cmp	r3, #5
   1919a:	d1e2      	bne.n	19162 <tls_interface_recvfrom+0x32>
   1919c:	4b08      	ldr	r3, [pc, #32]	; (191c0 <tls_interface_recvfrom+0x90>)
   1919e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   191a2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   191a6:	2b02      	cmp	r3, #2
   191a8:	d1db      	bne.n	19162 <tls_interface_recvfrom+0x32>
   191aa:	4601      	mov	r1, r0
   191ac:	4620      	mov	r0, r4
   191ae:	f7ff fe6d 	bl	18e8c <secure_client_socket>
   191b2:	2800      	cmp	r0, #0
   191b4:	d0dc      	beq.n	19170 <tls_interface_recvfrom+0x40>
   191b6:	dcd5      	bgt.n	19164 <tls_interface_recvfrom+0x34>
   191b8:	e7d6      	b.n	19168 <tls_interface_recvfrom+0x38>
   191ba:	2009      	movs	r0, #9
   191bc:	e7d2      	b.n	19164 <tls_interface_recvfrom+0x34>
   191be:	bf00      	nop
   191c0:	20023188 	.word	0x20023188

000191c4 <tls_interface_bind>:
   191c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   191c8:	b082      	sub	sp, #8
   191ca:	460e      	mov	r6, r1
   191cc:	4617      	mov	r7, r2
   191ce:	4605      	mov	r5, r0
   191d0:	f006 f988 	bl	1f4e4 <interface_socket_from_handle_get>
   191d4:	2800      	cmp	r0, #0
   191d6:	d069      	beq.n	192ac <tls_interface_bind+0xe8>
   191d8:	6803      	ldr	r3, [r0, #0]
   191da:	4604      	mov	r4, r0
   191dc:	b29b      	uxth	r3, r3
   191de:	2b02      	cmp	r3, #2
   191e0:	d158      	bne.n	19294 <tls_interface_bind+0xd0>
   191e2:	463a      	mov	r2, r7
   191e4:	4631      	mov	r1, r6
   191e6:	4628      	mov	r0, r5
   191e8:	f001 f858 	bl	1a29c <ip_interface_bind>
   191ec:	2800      	cmp	r0, #0
   191ee:	d148      	bne.n	19282 <tls_interface_bind+0xbe>
   191f0:	00ee      	lsls	r6, r5, #3
   191f2:	4f2f      	ldr	r7, [pc, #188]	; (192b0 <tls_interface_bind+0xec>)
   191f4:	1973      	adds	r3, r6, r5
   191f6:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   191fa:	2b01      	cmp	r3, #1
   191fc:	d002      	beq.n	19204 <tls_interface_bind+0x40>
   191fe:	b002      	add	sp, #8
   19200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19204:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   19208:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 192b4 <tls_interface_bind+0xf0>
   1920c:	f247 0281 	movw	r2, #28801	; 0x7081
   19210:	eb0a 0906 	add.w	r9, sl, r6
   19214:	f8d9 3004 	ldr.w	r3, [r9, #4]
   19218:	69a1      	ldr	r1, [r4, #24]
   1921a:	4628      	mov	r0, r5
   1921c:	f8cd c004 	str.w	ip, [sp, #4]
   19220:	f000 fb4e 	bl	198c0 <ip_interface_request_create>
   19224:	4680      	mov	r8, r0
   19226:	2800      	cmp	r0, #0
   19228:	d03e      	beq.n	192a8 <tls_interface_bind+0xe4>
   1922a:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1922e:	bbaa      	cbnz	r2, 1929c <tls_interface_bind+0xd8>
   19230:	1971      	adds	r1, r6, r5
   19232:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   19236:	2224      	movs	r2, #36	; 0x24
   19238:	f108 0014 	add.w	r0, r8, #20
   1923c:	f010 f919 	bl	29472 <memcpy>
   19240:	f8d8 3008 	ldr.w	r3, [r8, #8]
   19244:	4641      	mov	r1, r8
   19246:	3324      	adds	r3, #36	; 0x24
   19248:	f8c8 3008 	str.w	r3, [r8, #8]
   1924c:	6822      	ldr	r2, [r4, #0]
   1924e:	2304      	movs	r3, #4
   19250:	0c12      	lsrs	r2, r2, #16
   19252:	0412      	lsls	r2, r2, #16
   19254:	f042 020a 	orr.w	r2, r2, #10
   19258:	6022      	str	r2, [r4, #0]
   1925a:	4620      	mov	r0, r4
   1925c:	f247 0281 	movw	r2, #28801	; 0x7081
   19260:	f000 fb4e 	bl	19900 <ip_interface_request_send>
   19264:	b968      	cbnz	r0, 19282 <tls_interface_bind+0xbe>
   19266:	6823      	ldr	r3, [r4, #0]
   19268:	00db      	lsls	r3, r3, #3
   1926a:	d415      	bmi.n	19298 <tls_interface_bind+0xd4>
   1926c:	4628      	mov	r0, r5
   1926e:	ab01      	add	r3, sp, #4
   19270:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19274:	210b      	movs	r1, #11
   19276:	f000 fb57 	bl	19928 <ip_interface_wait>
   1927a:	2800      	cmp	r0, #0
   1927c:	d0bf      	beq.n	191fe <tls_interface_bind+0x3a>
   1927e:	2304      	movs	r3, #4
   19280:	6023      	str	r3, [r4, #0]
   19282:	2800      	cmp	r0, #0
   19284:	ddbb      	ble.n	191fe <tls_interface_bind+0x3a>
   19286:	f7fb fe1d 	bl	14ec4 <bsd_os_errno_set>
   1928a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1928e:	b002      	add	sp, #8
   19290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19294:	202d      	movs	r0, #45	; 0x2d
   19296:	e7f6      	b.n	19286 <tls_interface_bind+0xc2>
   19298:	2073      	movs	r0, #115	; 0x73
   1929a:	e7f4      	b.n	19286 <tls_interface_bind+0xc2>
   1929c:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   192a0:	6800      	ldr	r0, [r0, #0]
   192a2:	f010 f8e6 	bl	29472 <memcpy>
   192a6:	e7c3      	b.n	19230 <tls_interface_bind+0x6c>
   192a8:	200c      	movs	r0, #12
   192aa:	e7ec      	b.n	19286 <tls_interface_bind+0xc2>
   192ac:	2009      	movs	r0, #9
   192ae:	e7ea      	b.n	19286 <tls_interface_bind+0xc2>
   192b0:	20023188 	.word	0x20023188
   192b4:	200232cc 	.word	0x200232cc

000192b8 <tls_interface_connect>:
   192b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   192ba:	460e      	mov	r6, r1
   192bc:	4617      	mov	r7, r2
   192be:	4604      	mov	r4, r0
   192c0:	f006 f910 	bl	1f4e4 <interface_socket_from_handle_get>
   192c4:	b1e8      	cbz	r0, 19302 <tls_interface_connect+0x4a>
   192c6:	4b13      	ldr	r3, [pc, #76]	; (19314 <tls_interface_connect+0x5c>)
   192c8:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   192cc:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   192d0:	2b02      	cmp	r3, #2
   192d2:	d11c      	bne.n	1930e <tls_interface_connect+0x56>
   192d4:	6803      	ldr	r3, [r0, #0]
   192d6:	4605      	mov	r5, r0
   192d8:	b29b      	uxth	r3, r3
   192da:	2b02      	cmp	r3, #2
   192dc:	d003      	beq.n	192e6 <tls_interface_connect+0x2e>
   192de:	6803      	ldr	r3, [r0, #0]
   192e0:	b29b      	uxth	r3, r3
   192e2:	2b04      	cmp	r3, #4
   192e4:	d113      	bne.n	1930e <tls_interface_connect+0x56>
   192e6:	463a      	mov	r2, r7
   192e8:	4631      	mov	r1, r6
   192ea:	4620      	mov	r0, r4
   192ec:	f000 ff14 	bl	1a118 <ip_interface_connect>
   192f0:	b110      	cbz	r0, 192f8 <tls_interface_connect+0x40>
   192f2:	2800      	cmp	r0, #0
   192f4:	dc06      	bgt.n	19304 <tls_interface_connect+0x4c>
   192f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   192f8:	4629      	mov	r1, r5
   192fa:	4620      	mov	r0, r4
   192fc:	f7ff fdc6 	bl	18e8c <secure_client_socket>
   19300:	e7f7      	b.n	192f2 <tls_interface_connect+0x3a>
   19302:	2009      	movs	r0, #9
   19304:	f7fb fdde 	bl	14ec4 <bsd_os_errno_set>
   19308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1930c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1930e:	202d      	movs	r0, #45	; 0x2d
   19310:	e7f8      	b.n	19304 <tls_interface_connect+0x4c>
   19312:	bf00      	nop
   19314:	20023188 	.word	0x20023188

00019318 <tls_interface_listen>:
   19318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1931c:	b085      	sub	sp, #20
   1931e:	9101      	str	r1, [sp, #4]
   19320:	4605      	mov	r5, r0
   19322:	f006 f8df 	bl	1f4e4 <interface_socket_from_handle_get>
   19326:	2800      	cmp	r0, #0
   19328:	d07c      	beq.n	19424 <tls_interface_listen+0x10c>
   1932a:	6903      	ldr	r3, [r0, #16]
   1932c:	4604      	mov	r4, r0
   1932e:	2b01      	cmp	r3, #1
   19330:	d176      	bne.n	19420 <tls_interface_listen+0x108>
   19332:	6803      	ldr	r3, [r0, #0]
   19334:	b29b      	uxth	r3, r3
   19336:	2b04      	cmp	r3, #4
   19338:	d062      	beq.n	19400 <tls_interface_listen+0xe8>
   1933a:	6823      	ldr	r3, [r4, #0]
   1933c:	b29b      	uxth	r3, r3
   1933e:	2b0b      	cmp	r3, #11
   19340:	d16e      	bne.n	19420 <tls_interface_listen+0x108>
   19342:	00ee      	lsls	r6, r5, #3
   19344:	4f38      	ldr	r7, [pc, #224]	; (19428 <tls_interface_listen+0x110>)
   19346:	1973      	adds	r3, r6, r5
   19348:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   1934c:	2b01      	cmp	r3, #1
   1934e:	d167      	bne.n	19420 <tls_interface_listen+0x108>
   19350:	2201      	movs	r2, #1
   19352:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   19356:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 1942c <tls_interface_listen+0x114>
   1935a:	1973      	adds	r3, r6, r5
   1935c:	00ee      	lsls	r6, r5, #3
   1935e:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   19362:	eb09 0806 	add.w	r8, r9, r6
   19366:	69a1      	ldr	r1, [r4, #24]
   19368:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1936c:	f247 0281 	movw	r2, #28801	; 0x7081
   19370:	4628      	mov	r0, r5
   19372:	f8d4 a000 	ldr.w	sl, [r4]
   19376:	f8cd c00c 	str.w	ip, [sp, #12]
   1937a:	f000 faa1 	bl	198c0 <ip_interface_request_create>
   1937e:	4683      	mov	fp, r0
   19380:	2800      	cmp	r0, #0
   19382:	d04b      	beq.n	1941c <tls_interface_listen+0x104>
   19384:	f8d8 2004 	ldr.w	r2, [r8, #4]
   19388:	2a00      	cmp	r2, #0
   1938a:	d141      	bne.n	19410 <tls_interface_listen+0xf8>
   1938c:	1971      	adds	r1, r6, r5
   1938e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   19392:	2224      	movs	r2, #36	; 0x24
   19394:	f10b 0014 	add.w	r0, fp, #20
   19398:	f010 f86b 	bl	29472 <memcpy>
   1939c:	f8db 2008 	ldr.w	r2, [fp, #8]
   193a0:	4659      	mov	r1, fp
   193a2:	3224      	adds	r2, #36	; 0x24
   193a4:	f8cb 2008 	str.w	r2, [fp, #8]
   193a8:	6822      	ldr	r2, [r4, #0]
   193aa:	4653      	mov	r3, sl
   193ac:	0c12      	lsrs	r2, r2, #16
   193ae:	0412      	lsls	r2, r2, #16
   193b0:	f042 020a 	orr.w	r2, r2, #10
   193b4:	6022      	str	r2, [r4, #0]
   193b6:	4620      	mov	r0, r4
   193b8:	f247 0281 	movw	r2, #28801	; 0x7081
   193bc:	f000 faa0 	bl	19900 <ip_interface_request_send>
   193c0:	b960      	cbnz	r0, 193dc <tls_interface_listen+0xc4>
   193c2:	6823      	ldr	r3, [r4, #0]
   193c4:	00db      	lsls	r3, r3, #3
   193c6:	d40e      	bmi.n	193e6 <tls_interface_listen+0xce>
   193c8:	ab03      	add	r3, sp, #12
   193ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   193ce:	210b      	movs	r1, #11
   193d0:	4628      	mov	r0, r5
   193d2:	f000 faa9 	bl	19928 <ip_interface_wait>
   193d6:	b170      	cbz	r0, 193f6 <tls_interface_listen+0xde>
   193d8:	f8c4 a000 	str.w	sl, [r4]
   193dc:	2800      	cmp	r0, #0
   193de:	dc03      	bgt.n	193e8 <tls_interface_listen+0xd0>
   193e0:	b005      	add	sp, #20
   193e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193e6:	2073      	movs	r0, #115	; 0x73
   193e8:	f7fb fd6c 	bl	14ec4 <bsd_os_errno_set>
   193ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   193f0:	b005      	add	sp, #20
   193f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193f6:	9901      	ldr	r1, [sp, #4]
   193f8:	4628      	mov	r0, r5
   193fa:	f000 fff1 	bl	1a3e0 <ip_interface_listen>
   193fe:	e7ed      	b.n	193dc <tls_interface_listen+0xc4>
   19400:	00ee      	lsls	r6, r5, #3
   19402:	4f09      	ldr	r7, [pc, #36]	; (19428 <tls_interface_listen+0x110>)
   19404:	1973      	adds	r3, r6, r5
   19406:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   1940a:	2b02      	cmp	r3, #2
   1940c:	d195      	bne.n	1933a <tls_interface_listen+0x22>
   1940e:	e79f      	b.n	19350 <tls_interface_listen+0x38>
   19410:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   19414:	6800      	ldr	r0, [r0, #0]
   19416:	f010 f82c 	bl	29472 <memcpy>
   1941a:	e7b7      	b.n	1938c <tls_interface_listen+0x74>
   1941c:	200c      	movs	r0, #12
   1941e:	e7e3      	b.n	193e8 <tls_interface_listen+0xd0>
   19420:	202d      	movs	r0, #45	; 0x2d
   19422:	e7e1      	b.n	193e8 <tls_interface_listen+0xd0>
   19424:	2009      	movs	r0, #9
   19426:	e7df      	b.n	193e8 <tls_interface_listen+0xd0>
   19428:	20023188 	.word	0x20023188
   1942c:	200232cc 	.word	0x200232cc

00019430 <tls_interface_accept>:
   19430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19434:	b082      	sub	sp, #8
   19436:	460e      	mov	r6, r1
   19438:	4617      	mov	r7, r2
   1943a:	4698      	mov	r8, r3
   1943c:	4605      	mov	r5, r0
   1943e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19442:	f006 f84f 	bl	1f4e4 <interface_socket_from_handle_get>
   19446:	9401      	str	r4, [sp, #4]
   19448:	2800      	cmp	r0, #0
   1944a:	d03c      	beq.n	194c6 <tls_interface_accept+0x96>
   1944c:	6800      	ldr	r0, [r0, #0]
   1944e:	b280      	uxth	r0, r0
   19450:	2806      	cmp	r0, #6
   19452:	d138      	bne.n	194c6 <tls_interface_accept+0x96>
   19454:	4643      	mov	r3, r8
   19456:	463a      	mov	r2, r7
   19458:	4631      	mov	r1, r6
   1945a:	4628      	mov	r0, r5
   1945c:	f001 f838 	bl	1a4d0 <ip_interface_accept>
   19460:	4604      	mov	r4, r0
   19462:	b128      	cbz	r0, 19470 <tls_interface_accept+0x40>
   19464:	2c00      	cmp	r4, #0
   19466:	dc2f      	bgt.n	194c8 <tls_interface_accept+0x98>
   19468:	4620      	mov	r0, r4
   1946a:	b002      	add	sp, #8
   1946c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19470:	4628      	mov	r0, r5
   19472:	f006 f837 	bl	1f4e4 <interface_socket_from_handle_get>
   19476:	6803      	ldr	r3, [r0, #0]
   19478:	4f18      	ldr	r7, [pc, #96]	; (194dc <tls_interface_accept+0xac>)
   1947a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1947e:	6003      	str	r3, [r0, #0]
   19480:	6803      	ldr	r3, [r0, #0]
   19482:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   19486:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1948a:	4606      	mov	r6, r0
   1948c:	6003      	str	r3, [r0, #0]
   1948e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   19492:	2224      	movs	r2, #36	; 0x24
   19494:	4638      	mov	r0, r7
   19496:	f00f ffec 	bl	29472 <memcpy>
   1949a:	2302      	movs	r3, #2
   1949c:	703b      	strb	r3, [r7, #0]
   1949e:	6833      	ldr	r3, [r6, #0]
   194a0:	4620      	mov	r0, r4
   194a2:	0c1b      	lsrs	r3, r3, #16
   194a4:	041b      	lsls	r3, r3, #16
   194a6:	f043 030b 	orr.w	r3, r3, #11
   194aa:	6033      	str	r3, [r6, #0]
   194ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   194b0:	ab01      	add	r3, sp, #4
   194b2:	210c      	movs	r1, #12
   194b4:	f000 fa38 	bl	19928 <ip_interface_wait>
   194b8:	4604      	mov	r4, r0
   194ba:	2800      	cmp	r0, #0
   194bc:	d0d4      	beq.n	19468 <tls_interface_accept+0x38>
   194be:	2000      	movs	r0, #0
   194c0:	f000 fb2a 	bl	19b18 <ip_interface_close>
   194c4:	e7ce      	b.n	19464 <tls_interface_accept+0x34>
   194c6:	2409      	movs	r4, #9
   194c8:	4620      	mov	r0, r4
   194ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   194ce:	f7fb fcf9 	bl	14ec4 <bsd_os_errno_set>
   194d2:	4620      	mov	r0, r4
   194d4:	b002      	add	sp, #8
   194d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   194da:	bf00      	nop
   194dc:	20023188 	.word	0x20023188

000194e0 <tls_interface_setopt>:
   194e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194e4:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   194e8:	9e06      	ldr	r6, [sp, #24]
   194ea:	d11e      	bne.n	1952a <tls_interface_setopt+0x4a>
   194ec:	461f      	mov	r7, r3
   194ee:	4605      	mov	r5, r0
   194f0:	2b00      	cmp	r3, #0
   194f2:	f000 808c 	beq.w	1960e <tls_interface_setopt+0x12e>
   194f6:	4690      	mov	r8, r2
   194f8:	f005 fff4 	bl	1f4e4 <interface_socket_from_handle_get>
   194fc:	2800      	cmp	r0, #0
   194fe:	d07b      	beq.n	195f8 <tls_interface_setopt+0x118>
   19500:	6804      	ldr	r4, [r0, #0]
   19502:	b2a4      	uxth	r4, r4
   19504:	2c02      	cmp	r4, #2
   19506:	d007      	beq.n	19518 <tls_interface_setopt+0x38>
   19508:	6803      	ldr	r3, [r0, #0]
   1950a:	b29b      	uxth	r3, r3
   1950c:	2b04      	cmp	r3, #4
   1950e:	d003      	beq.n	19518 <tls_interface_setopt+0x38>
   19510:	6803      	ldr	r3, [r0, #0]
   19512:	b29b      	uxth	r3, r3
   19514:	2b05      	cmp	r3, #5
   19516:	d16f      	bne.n	195f8 <tls_interface_setopt+0x118>
   19518:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   1951c:	2a04      	cmp	r2, #4
   1951e:	d87c      	bhi.n	1961a <tls_interface_setopt+0x13a>
   19520:	e8df f002 	tbb	[pc, r2]
   19524:	41324e24 	.word	0x41324e24
   19528:	07          	.byte	0x07
   19529:	00          	.byte	0x00
   1952a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1952e:	f001 b911 	b.w	1a754 <ip_interface_setopt>
   19532:	4c3b      	ldr	r4, [pc, #236]	; (19620 <tls_interface_setopt+0x140>)
   19534:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   19538:	b138      	cbz	r0, 1954a <tls_interface_setopt+0x6a>
   1953a:	f005 fb79 	bl	1ec30 <nrf_free>
   1953e:	2200      	movs	r2, #0
   19540:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   19544:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   19548:	605a      	str	r2, [r3, #4]
   1954a:	4630      	mov	r0, r6
   1954c:	b34e      	cbz	r6, 195a2 <tls_interface_setopt+0xc2>
   1954e:	f005 fb65 	bl	1ec1c <nrf_malloc>
   19552:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   19556:	2800      	cmp	r0, #0
   19558:	d057      	beq.n	1960a <tls_interface_setopt+0x12a>
   1955a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1955e:	4632      	mov	r2, r6
   19560:	4639      	mov	r1, r7
   19562:	6066      	str	r6, [r4, #4]
   19564:	f00f ff85 	bl	29472 <memcpy>
   19568:	2000      	movs	r0, #0
   1956a:	e01a      	b.n	195a2 <tls_interface_setopt+0xc2>
   1956c:	2e04      	cmp	r6, #4
   1956e:	d14a      	bne.n	19606 <tls_interface_setopt+0x126>
   19570:	6838      	ldr	r0, [r7, #0]
   19572:	2800      	cmp	r0, #0
   19574:	d039      	beq.n	195ea <tls_interface_setopt+0x10a>
   19576:	2801      	cmp	r0, #1
   19578:	d145      	bne.n	19606 <tls_interface_setopt+0x126>
   1957a:	4a2a      	ldr	r2, [pc, #168]	; (19624 <tls_interface_setopt+0x144>)
   1957c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   19580:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   19584:	2000      	movs	r0, #0
   19586:	e00c      	b.n	195a2 <tls_interface_setopt+0xc2>
   19588:	2e01      	cmp	r6, #1
   1958a:	d13c      	bne.n	19606 <tls_interface_setopt+0x126>
   1958c:	783a      	ldrb	r2, [r7, #0]
   1958e:	2000      	movs	r0, #0
   19590:	3200      	adds	r2, #0
   19592:	bf18      	it	ne
   19594:	2201      	movne	r2, #1
   19596:	4b23      	ldr	r3, [pc, #140]	; (19624 <tls_interface_setopt+0x144>)
   19598:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1959c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   195a0:	7062      	strb	r2, [r4, #1]
   195a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   195a6:	2e04      	cmp	r6, #4
   195a8:	d12d      	bne.n	19606 <tls_interface_setopt+0x126>
   195aa:	683a      	ldr	r2, [r7, #0]
   195ac:	2a02      	cmp	r2, #2
   195ae:	d82a      	bhi.n	19606 <tls_interface_setopt+0x126>
   195b0:	4b1c      	ldr	r3, [pc, #112]	; (19624 <tls_interface_setopt+0x144>)
   195b2:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   195b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   195ba:	70a2      	strb	r2, [r4, #2]
   195bc:	2000      	movs	r0, #0
   195be:	e7f0      	b.n	195a2 <tls_interface_setopt+0xc2>
   195c0:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   195c4:	d01f      	beq.n	19606 <tls_interface_setopt+0x126>
   195c6:	f016 0403 	ands.w	r4, r6, #3
   195ca:	d11c      	bne.n	19606 <tls_interface_setopt+0x126>
   195cc:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   195d0:	00ad      	lsls	r5, r5, #2
   195d2:	4b14      	ldr	r3, [pc, #80]	; (19624 <tls_interface_setopt+0x144>)
   195d4:	1d28      	adds	r0, r5, #4
   195d6:	4418      	add	r0, r3
   195d8:	442b      	add	r3, r5
   195da:	4632      	mov	r2, r6
   195dc:	4639      	mov	r1, r7
   195de:	f883 c003 	strb.w	ip, [r3, #3]
   195e2:	f00f ff46 	bl	29472 <memcpy>
   195e6:	4620      	mov	r0, r4
   195e8:	e7db      	b.n	195a2 <tls_interface_setopt+0xc2>
   195ea:	2102      	movs	r1, #2
   195ec:	4a0d      	ldr	r2, [pc, #52]	; (19624 <tls_interface_setopt+0x144>)
   195ee:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   195f2:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   195f6:	e7d4      	b.n	195a2 <tls_interface_setopt+0xc2>
   195f8:	2009      	movs	r0, #9
   195fa:	f7fb fc63 	bl	14ec4 <bsd_os_errno_set>
   195fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19606:	2016      	movs	r0, #22
   19608:	e7f7      	b.n	195fa <tls_interface_setopt+0x11a>
   1960a:	200c      	movs	r0, #12
   1960c:	e7f5      	b.n	195fa <tls_interface_setopt+0x11a>
   1960e:	200e      	movs	r0, #14
   19610:	f7fb fc58 	bl	14ec4 <bsd_os_errno_set>
   19614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19618:	e7c3      	b.n	195a2 <tls_interface_setopt+0xc2>
   1961a:	202a      	movs	r0, #42	; 0x2a
   1961c:	e7ed      	b.n	195fa <tls_interface_setopt+0x11a>
   1961e:	bf00      	nop
   19620:	200232cc 	.word	0x200232cc
   19624:	20023188 	.word	0x20023188

00019628 <tls_interface_getopt>:
   19628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1962c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   19630:	9f06      	ldr	r7, [sp, #24]
   19632:	d112      	bne.n	1965a <tls_interface_getopt+0x32>
   19634:	461d      	mov	r5, r3
   19636:	b16b      	cbz	r3, 19654 <tls_interface_getopt+0x2c>
   19638:	b167      	cbz	r7, 19654 <tls_interface_getopt+0x2c>
   1963a:	4606      	mov	r6, r0
   1963c:	4614      	mov	r4, r2
   1963e:	f005 ff51 	bl	1f4e4 <interface_socket_from_handle_get>
   19642:	2800      	cmp	r0, #0
   19644:	d04f      	beq.n	196e6 <tls_interface_getopt+0xbe>
   19646:	3c01      	subs	r4, #1
   19648:	2c03      	cmp	r4, #3
   1964a:	d852      	bhi.n	196f2 <tls_interface_getopt+0xca>
   1964c:	e8df f004 	tbb	[pc, r4]
   19650:	09152139 	.word	0x09152139
   19654:	200e      	movs	r0, #14
   19656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1965a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1965e:	f001 b935 	b.w	1a8cc <ip_interface_getopt>
   19662:	683b      	ldr	r3, [r7, #0]
   19664:	2b04      	cmp	r3, #4
   19666:	d13c      	bne.n	196e2 <tls_interface_getopt+0xba>
   19668:	4b23      	ldr	r3, [pc, #140]	; (196f8 <tls_interface_getopt+0xd0>)
   1966a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1966e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   19672:	78b3      	ldrb	r3, [r6, #2]
   19674:	2000      	movs	r0, #0
   19676:	602b      	str	r3, [r5, #0]
   19678:	e7ed      	b.n	19656 <tls_interface_getopt+0x2e>
   1967a:	683b      	ldr	r3, [r7, #0]
   1967c:	2b01      	cmp	r3, #1
   1967e:	d130      	bne.n	196e2 <tls_interface_getopt+0xba>
   19680:	4b1d      	ldr	r3, [pc, #116]	; (196f8 <tls_interface_getopt+0xd0>)
   19682:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   19686:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1968a:	7873      	ldrb	r3, [r6, #1]
   1968c:	2000      	movs	r0, #0
   1968e:	702b      	strb	r3, [r5, #0]
   19690:	e7e1      	b.n	19656 <tls_interface_getopt+0x2e>
   19692:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   19696:	4918      	ldr	r1, [pc, #96]	; (196f8 <tls_interface_getopt+0xd0>)
   19698:	683b      	ldr	r3, [r7, #0]
   1969a:	00b6      	lsls	r6, r6, #2
   1969c:	198a      	adds	r2, r1, r6
   1969e:	f013 0403 	ands.w	r4, r3, #3
   196a2:	78d0      	ldrb	r0, [r2, #3]
   196a4:	d121      	bne.n	196ea <tls_interface_getopt+0xc2>
   196a6:	089b      	lsrs	r3, r3, #2
   196a8:	4283      	cmp	r3, r0
   196aa:	bf28      	it	cs
   196ac:	4603      	movcs	r3, r0
   196ae:	009a      	lsls	r2, r3, #2
   196b0:	b1db      	cbz	r3, 196ea <tls_interface_getopt+0xc2>
   196b2:	3604      	adds	r6, #4
   196b4:	4431      	add	r1, r6
   196b6:	603a      	str	r2, [r7, #0]
   196b8:	4628      	mov	r0, r5
   196ba:	f00f feda 	bl	29472 <memcpy>
   196be:	4620      	mov	r0, r4
   196c0:	e7c9      	b.n	19656 <tls_interface_getopt+0x2e>
   196c2:	683b      	ldr	r3, [r7, #0]
   196c4:	2b04      	cmp	r3, #4
   196c6:	d10c      	bne.n	196e2 <tls_interface_getopt+0xba>
   196c8:	4b0b      	ldr	r3, [pc, #44]	; (196f8 <tls_interface_getopt+0xd0>)
   196ca:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   196ce:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   196d2:	2000      	movs	r0, #0
   196d4:	f1a3 0301 	sub.w	r3, r3, #1
   196d8:	fab3 f383 	clz	r3, r3
   196dc:	095b      	lsrs	r3, r3, #5
   196de:	602b      	str	r3, [r5, #0]
   196e0:	e7b9      	b.n	19656 <tls_interface_getopt+0x2e>
   196e2:	2016      	movs	r0, #22
   196e4:	e7b7      	b.n	19656 <tls_interface_getopt+0x2e>
   196e6:	2009      	movs	r0, #9
   196e8:	e7b5      	b.n	19656 <tls_interface_getopt+0x2e>
   196ea:	2800      	cmp	r0, #0
   196ec:	d1f9      	bne.n	196e2 <tls_interface_getopt+0xba>
   196ee:	6038      	str	r0, [r7, #0]
   196f0:	e7b1      	b.n	19656 <tls_interface_getopt+0x2e>
   196f2:	202a      	movs	r0, #42	; 0x2a
   196f4:	e7af      	b.n	19656 <tls_interface_getopt+0x2e>
   196f6:	bf00      	nop
   196f8:	20023188 	.word	0x20023188

000196fc <tls_rpc_ip_event_handler>:
   196fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   196fe:	f248 0581 	movw	r5, #32897	; 0x8081
   19702:	42ab      	cmp	r3, r5
   19704:	460c      	mov	r4, r1
   19706:	d062      	beq.n	197ce <tls_rpc_ip_event_handler+0xd2>
   19708:	f249 0182 	movw	r1, #36994	; 0x9082
   1970c:	428b      	cmp	r3, r1
   1970e:	4606      	mov	r6, r0
   19710:	d02e      	beq.n	19770 <tls_rpc_ip_event_handler+0x74>
   19712:	f248 0102 	movw	r1, #32770	; 0x8002
   19716:	428b      	cmp	r3, r1
   19718:	d001      	beq.n	1971e <tls_rpc_ip_event_handler+0x22>
   1971a:	2001      	movs	r0, #1
   1971c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1971e:	2c00      	cmp	r4, #0
   19720:	d0fb      	beq.n	1971a <tls_rpc_ip_event_handler+0x1e>
   19722:	6963      	ldr	r3, [r4, #20]
   19724:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   19728:	d002      	beq.n	19730 <tls_rpc_ip_event_handler+0x34>
   1972a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1972e:	d1f4      	bne.n	1971a <tls_rpc_ip_event_handler+0x1e>
   19730:	6823      	ldr	r3, [r4, #0]
   19732:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   19736:	6023      	str	r3, [r4, #0]
   19738:	6955      	ldr	r5, [r2, #20]
   1973a:	2d00      	cmp	r5, #0
   1973c:	d156      	bne.n	197ec <tls_rpc_ip_event_handler+0xf0>
   1973e:	6823      	ldr	r3, [r4, #0]
   19740:	0c1b      	lsrs	r3, r3, #16
   19742:	041b      	lsls	r3, r3, #16
   19744:	f043 0305 	orr.w	r3, r3, #5
   19748:	6023      	str	r3, [r4, #0]
   1974a:	6823      	ldr	r3, [r4, #0]
   1974c:	00da      	lsls	r2, r3, #3
   1974e:	d50d      	bpl.n	1976c <tls_rpc_ip_event_handler+0x70>
   19750:	4b2b      	ldr	r3, [pc, #172]	; (19800 <tls_rpc_ip_event_handler+0x104>)
   19752:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   19756:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1975a:	2b02      	cmp	r3, #2
   1975c:	d106      	bne.n	1976c <tls_rpc_ip_event_handler+0x70>
   1975e:	4630      	mov	r0, r6
   19760:	4621      	mov	r1, r4
   19762:	f7ff fb93 	bl	18e8c <secure_client_socket>
   19766:	b108      	cbz	r0, 1976c <tls_rpc_ip_event_handler+0x70>
   19768:	2873      	cmp	r0, #115	; 0x73
   1976a:	d142      	bne.n	197f2 <tls_rpc_ip_event_handler+0xf6>
   1976c:	2000      	movs	r0, #0
   1976e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19770:	2c00      	cmp	r4, #0
   19772:	d0fb      	beq.n	1976c <tls_rpc_ip_event_handler+0x70>
   19774:	6823      	ldr	r3, [r4, #0]
   19776:	b29b      	uxth	r3, r3
   19778:	2b0b      	cmp	r3, #11
   1977a:	d1f7      	bne.n	1976c <tls_rpc_ip_event_handler+0x70>
   1977c:	6915      	ldr	r5, [r2, #16]
   1977e:	2d00      	cmp	r5, #0
   19780:	d134      	bne.n	197ec <tls_rpc_ip_event_handler+0xf0>
   19782:	6823      	ldr	r3, [r4, #0]
   19784:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   19788:	6023      	str	r3, [r4, #0]
   1978a:	6823      	ldr	r3, [r4, #0]
   1978c:	00db      	lsls	r3, r3, #3
   1978e:	d5ed      	bpl.n	1976c <tls_rpc_ip_event_handler+0x70>
   19790:	4f1c      	ldr	r7, [pc, #112]	; (19804 <tls_rpc_ip_event_handler+0x108>)
   19792:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   19796:	b130      	cbz	r0, 197a6 <tls_rpc_ip_event_handler+0xaa>
   19798:	f005 fa4a 	bl	1ec30 <nrf_free>
   1979c:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   197a0:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   197a4:	605d      	str	r5, [r3, #4]
   197a6:	6823      	ldr	r3, [r4, #0]
   197a8:	2000      	movs	r0, #0
   197aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   197ae:	6023      	str	r3, [r4, #0]
   197b0:	6823      	ldr	r3, [r4, #0]
   197b2:	0c1b      	lsrs	r3, r3, #16
   197b4:	041b      	lsls	r3, r3, #16
   197b6:	f043 030c 	orr.w	r3, r3, #12
   197ba:	6023      	str	r3, [r4, #0]
   197bc:	6823      	ldr	r3, [r4, #0]
   197be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   197c2:	6023      	str	r3, [r4, #0]
   197c4:	6823      	ldr	r3, [r4, #0]
   197c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   197ca:	6023      	str	r3, [r4, #0]
   197cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   197ce:	2900      	cmp	r1, #0
   197d0:	d0cc      	beq.n	1976c <tls_rpc_ip_event_handler+0x70>
   197d2:	680b      	ldr	r3, [r1, #0]
   197d4:	b29b      	uxth	r3, r3
   197d6:	2b0a      	cmp	r3, #10
   197d8:	d1c8      	bne.n	1976c <tls_rpc_ip_event_handler+0x70>
   197da:	6950      	ldr	r0, [r2, #20]
   197dc:	b938      	cbnz	r0, 197ee <tls_rpc_ip_event_handler+0xf2>
   197de:	680b      	ldr	r3, [r1, #0]
   197e0:	0c1b      	lsrs	r3, r3, #16
   197e2:	041b      	lsls	r3, r3, #16
   197e4:	f043 030b 	orr.w	r3, r3, #11
   197e8:	600b      	str	r3, [r1, #0]
   197ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   197ec:	4628      	mov	r0, r5
   197ee:	f000 f85d 	bl	198ac <rpc_error_to_nrf_bsd_error>
   197f2:	6060      	str	r0, [r4, #4]
   197f4:	6823      	ldr	r3, [r4, #0]
   197f6:	2000      	movs	r0, #0
   197f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   197fc:	6023      	str	r3, [r4, #0]
   197fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19800:	20023188 	.word	0x20023188
   19804:	200232cc 	.word	0x200232cc

00019808 <ip_client_event_handler>:
   19808:	f850 1b08 	ldr.w	r1, [r0], #8
   1980c:	0c09      	lsrs	r1, r1, #16
   1980e:	f001 b971 	b.w	1aaf4 <rpc_ip_event_handler>
   19812:	bf00      	nop

00019814 <rpc_ip_client_init>:
   19814:	4801      	ldr	r0, [pc, #4]	; (1981c <rpc_ip_client_init+0x8>)
   19816:	f001 bc5f 	b.w	1b0d8 <rpc_client_register>
   1981a:	bf00      	nop
   1981c:	0002a914 	.word	0x0002a914

00019820 <rpc_ip_client_request_alloc>:
   19820:	2300      	movs	r3, #0
   19822:	b510      	push	{r4, lr}
   19824:	b082      	sub	sp, #8
   19826:	9301      	str	r3, [sp, #4]
   19828:	b158      	cbz	r0, 19842 <rpc_ip_client_request_alloc+0x22>
   1982a:	4604      	mov	r4, r0
   1982c:	aa01      	add	r2, sp, #4
   1982e:	2004      	movs	r0, #4
   19830:	f001 fccc 	bl	1b1cc <rpc_message_alloc>
   19834:	b918      	cbnz	r0, 1983e <rpc_ip_client_request_alloc+0x1e>
   19836:	9b01      	ldr	r3, [sp, #4]
   19838:	b10b      	cbz	r3, 1983e <rpc_ip_client_request_alloc+0x1e>
   1983a:	3308      	adds	r3, #8
   1983c:	6023      	str	r3, [r4, #0]
   1983e:	b002      	add	sp, #8
   19840:	bd10      	pop	{r4, pc}
   19842:	2007      	movs	r0, #7
   19844:	b002      	add	sp, #8
   19846:	bd10      	pop	{r4, pc}

00019848 <rpc_ip_client_request_send>:
   19848:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1984c:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   19850:	d10b      	bne.n	1986a <rpc_ip_client_request_send+0x22>
   19852:	b160      	cbz	r0, 1986e <rpc_ip_client_request_send+0x26>
   19854:	4603      	mov	r3, r0
   19856:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1985a:	2004      	movs	r0, #4
   1985c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   19860:	f843 1d08 	str.w	r1, [r3, #-8]!
   19864:	4619      	mov	r1, r3
   19866:	f001 bca1 	b.w	1b1ac <rpc_message_send>
   1986a:	200f      	movs	r0, #15
   1986c:	4770      	bx	lr
   1986e:	2007      	movs	r0, #7
   19870:	4770      	bx	lr
   19872:	bf00      	nop

00019874 <rpc_ip_client_message_free>:
   19874:	b120      	cbz	r0, 19880 <rpc_ip_client_message_free+0xc>
   19876:	f1a0 0108 	sub.w	r1, r0, #8
   1987a:	2004      	movs	r0, #4
   1987c:	f001 bcd2 	b.w	1b224 <rpc_message_free>
   19880:	2007      	movs	r0, #7
   19882:	4770      	bx	lr

00019884 <rpc_ip_client_data_free>:
   19884:	b118      	cbz	r0, 1988e <rpc_ip_client_data_free+0xa>
   19886:	4601      	mov	r1, r0
   19888:	2004      	movs	r0, #4
   1988a:	f001 bcd7 	b.w	1b23c <rpc_message_data_free>
   1988e:	2007      	movs	r0, #7
   19890:	4770      	bx	lr
   19892:	bf00      	nop

00019894 <ip_recvd_packet_free_cb>:
   19894:	b510      	push	{r4, lr}
   19896:	4604      	mov	r4, r0
   19898:	6800      	ldr	r0, [r0, #0]
   1989a:	f7ff fff3 	bl	19884 <rpc_ip_client_data_free>
   1989e:	68a0      	ldr	r0, [r4, #8]
   198a0:	b118      	cbz	r0, 198aa <ip_recvd_packet_free_cb+0x16>
   198a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   198a6:	f005 b9c3 	b.w	1ec30 <nrf_free>
   198aa:	bd10      	pop	{r4, pc}

000198ac <rpc_error_to_nrf_bsd_error>:
   198ac:	2810      	cmp	r0, #16
   198ae:	bf9a      	itte	ls
   198b0:	4b02      	ldrls	r3, [pc, #8]	; (198bc <rpc_error_to_nrf_bsd_error+0x10>)
   198b2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   198b6:	202d      	movhi	r0, #45	; 0x2d
   198b8:	4770      	bx	lr
   198ba:	bf00      	nop
   198bc:	0002a924 	.word	0x0002a924

000198c0 <ip_interface_request_create>:
   198c0:	b570      	push	{r4, r5, r6, lr}
   198c2:	2500      	movs	r5, #0
   198c4:	b082      	sub	sp, #8
   198c6:	ac02      	add	r4, sp, #8
   198c8:	f844 5d04 	str.w	r5, [r4, #-4]!
   198cc:	4606      	mov	r6, r0
   198ce:	460d      	mov	r5, r1
   198d0:	4620      	mov	r0, r4
   198d2:	4619      	mov	r1, r3
   198d4:	4614      	mov	r4, r2
   198d6:	f7ff ffa3 	bl	19820 <rpc_ip_client_request_alloc>
   198da:	b960      	cbnz	r0, 198f6 <ip_interface_request_create+0x36>
   198dc:	9b01      	ldr	r3, [sp, #4]
   198de:	2208      	movs	r2, #8
   198e0:	7258      	strb	r0, [r3, #9]
   198e2:	7298      	strb	r0, [r3, #10]
   198e4:	72d8      	strb	r0, [r3, #11]
   198e6:	4618      	mov	r0, r3
   198e8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   198ec:	60dc      	str	r4, [r3, #12]
   198ee:	611d      	str	r5, [r3, #16]
   198f0:	721a      	strb	r2, [r3, #8]
   198f2:	b002      	add	sp, #8
   198f4:	bd70      	pop	{r4, r5, r6, pc}
   198f6:	9b01      	ldr	r3, [sp, #4]
   198f8:	4618      	mov	r0, r3
   198fa:	b002      	add	sp, #8
   198fc:	bd70      	pop	{r4, r5, r6, pc}
   198fe:	bf00      	nop

00019900 <ip_interface_request_send>:
   19900:	b570      	push	{r4, r5, r6, lr}
   19902:	460c      	mov	r4, r1
   19904:	4605      	mov	r5, r0
   19906:	4611      	mov	r1, r2
   19908:	4620      	mov	r0, r4
   1990a:	461e      	mov	r6, r3
   1990c:	f7ff ff9c 	bl	19848 <rpc_ip_client_request_send>
   19910:	b900      	cbnz	r0, 19914 <ip_interface_request_send+0x14>
   19912:	bd70      	pop	{r4, r5, r6, pc}
   19914:	6820      	ldr	r0, [r4, #0]
   19916:	b108      	cbz	r0, 1991c <ip_interface_request_send+0x1c>
   19918:	f7ff ffb4 	bl	19884 <rpc_ip_client_data_free>
   1991c:	4620      	mov	r0, r4
   1991e:	f7ff ffa9 	bl	19874 <rpc_ip_client_message_free>
   19922:	602e      	str	r6, [r5, #0]
   19924:	2023      	movs	r0, #35	; 0x23
   19926:	bd70      	pop	{r4, r5, r6, pc}

00019928 <ip_interface_wait>:
   19928:	b538      	push	{r3, r4, r5, lr}
   1992a:	4605      	mov	r5, r0
   1992c:	f005 fd5a 	bl	1f3e4 <interface_socket_wait>
   19930:	4604      	mov	r4, r0
   19932:	b108      	cbz	r0, 19938 <ip_interface_wait+0x10>
   19934:	4620      	mov	r0, r4
   19936:	bd38      	pop	{r3, r4, r5, pc}
   19938:	4628      	mov	r0, r5
   1993a:	f005 fdd3 	bl	1f4e4 <interface_socket_from_handle_get>
   1993e:	2800      	cmp	r0, #0
   19940:	d0f8      	beq.n	19934 <ip_interface_wait+0xc>
   19942:	6844      	ldr	r4, [r0, #4]
   19944:	2c00      	cmp	r4, #0
   19946:	d0f5      	beq.n	19934 <ip_interface_wait+0xc>
   19948:	2300      	movs	r3, #0
   1994a:	6043      	str	r3, [r0, #4]
   1994c:	4620      	mov	r0, r4
   1994e:	bd38      	pop	{r3, r4, r5, pc}

00019950 <ip_interface_init>:
   19950:	b538      	push	{r3, r4, r5, lr}
   19952:	2300      	movs	r3, #0
   19954:	4d09      	ldr	r5, [pc, #36]	; (1997c <ip_interface_init+0x2c>)
   19956:	4c0a      	ldr	r4, [pc, #40]	; (19980 <ip_interface_init+0x30>)
   19958:	4619      	mov	r1, r3
   1995a:	2224      	movs	r2, #36	; 0x24
   1995c:	4809      	ldr	r0, [pc, #36]	; (19984 <ip_interface_init+0x34>)
   1995e:	602b      	str	r3, [r5, #0]
   19960:	6023      	str	r3, [r4, #0]
   19962:	f00f fdc0 	bl	294e6 <memset>
   19966:	f7ff ff55 	bl	19814 <rpc_ip_client_init>
   1996a:	b918      	cbnz	r0, 19974 <ip_interface_init+0x24>
   1996c:	2201      	movs	r2, #1
   1996e:	4b06      	ldr	r3, [pc, #24]	; (19988 <ip_interface_init+0x38>)
   19970:	701a      	strb	r2, [r3, #0]
   19972:	bd38      	pop	{r3, r4, r5, pc}
   19974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19978:	bd38      	pop	{r3, r4, r5, pc}
   1997a:	bf00      	nop
   1997c:	2002331c 	.word	0x2002331c
   19980:	20023318 	.word	0x20023318
   19984:	20023320 	.word	0x20023320
   19988:	2002af72 	.word	0x2002af72

0001998c <ip_interface_open>:
   1998c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19990:	2500      	movs	r5, #0
   19992:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   19996:	4c5e      	ldr	r4, [pc, #376]	; (19b10 <ip_interface_open+0x184>)
   19998:	4606      	mov	r6, r0
   1999a:	7820      	ldrb	r0, [r4, #0]
   1999c:	b084      	sub	sp, #16
   1999e:	e9cd 5701 	strd	r5, r7, [sp, #4]
   199a2:	2800      	cmp	r0, #0
   199a4:	f000 80b0 	beq.w	19b08 <ip_interface_open+0x17c>
   199a8:	4690      	mov	r8, r2
   199aa:	f026 0208 	bic.w	r2, r6, #8
   199ae:	2a02      	cmp	r2, #2
   199b0:	460c      	mov	r4, r1
   199b2:	d002      	beq.n	199ba <ip_interface_open+0x2e>
   199b4:	2e05      	cmp	r6, #5
   199b6:	f040 808d 	bne.w	19ad4 <ip_interface_open+0x148>
   199ba:	1e63      	subs	r3, r4, #1
   199bc:	2b02      	cmp	r3, #2
   199be:	f200 809d 	bhi.w	19afc <ip_interface_open+0x170>
   199c2:	f1b8 0f00 	cmp.w	r8, #0
   199c6:	d159      	bne.n	19a7c <ip_interface_open+0xf0>
   199c8:	2c01      	cmp	r4, #1
   199ca:	d06f      	beq.n	19aac <ip_interface_open+0x120>
   199cc:	2c03      	cmp	r4, #3
   199ce:	bf18      	it	ne
   199d0:	f04f 0802 	movne.w	r8, #2
   199d4:	4a4f      	ldr	r2, [pc, #316]	; (19b14 <ip_interface_open+0x188>)
   199d6:	4621      	mov	r1, r4
   199d8:	a801      	add	r0, sp, #4
   199da:	f005 fc51 	bl	1f280 <interface_socket_allocate>
   199de:	9b01      	ldr	r3, [sp, #4]
   199e0:	4607      	mov	r7, r0
   199e2:	2b00      	cmp	r3, #0
   199e4:	d060      	beq.n	19aa8 <ip_interface_open+0x11c>
   199e6:	2100      	movs	r1, #0
   199e8:	a804      	add	r0, sp, #16
   199ea:	f840 1d04 	str.w	r1, [r0, #-4]!
   199ee:	e9c3 6403 	strd	r6, r4, [r3, #12]
   199f2:	f8c3 8014 	str.w	r8, [r3, #20]
   199f6:	f7ff ff13 	bl	19820 <rpc_ip_client_request_alloc>
   199fa:	2800      	cmp	r0, #0
   199fc:	d151      	bne.n	19aa2 <ip_interface_open+0x116>
   199fe:	f247 0201 	movw	r2, #28673	; 0x7001
   19a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19a06:	2108      	movs	r1, #8
   19a08:	9d03      	ldr	r5, [sp, #12]
   19a0a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   19a0e:	60ea      	str	r2, [r5, #12]
   19a10:	7268      	strb	r0, [r5, #9]
   19a12:	72a8      	strb	r0, [r5, #10]
   19a14:	72e8      	strb	r0, [r5, #11]
   19a16:	7229      	strb	r1, [r5, #8]
   19a18:	742b      	strb	r3, [r5, #16]
   19a1a:	746b      	strb	r3, [r5, #17]
   19a1c:	74ab      	strb	r3, [r5, #18]
   19a1e:	74eb      	strb	r3, [r5, #19]
   19a20:	68ab      	ldr	r3, [r5, #8]
   19a22:	2e05      	cmp	r6, #5
   19a24:	f103 030c 	add.w	r3, r3, #12
   19a28:	60ab      	str	r3, [r5, #8]
   19a2a:	d003      	beq.n	19a34 <ip_interface_open+0xa8>
   19a2c:	2e0a      	cmp	r6, #10
   19a2e:	bf14      	ite	ne
   19a30:	2601      	movne	r6, #1
   19a32:	2602      	moveq	r6, #2
   19a34:	616e      	str	r6, [r5, #20]
   19a36:	f8c5 801c 	str.w	r8, [r5, #28]
   19a3a:	61ac      	str	r4, [r5, #24]
   19a3c:	f247 0101 	movw	r1, #28673	; 0x7001
   19a40:	4628      	mov	r0, r5
   19a42:	f8dd 8004 	ldr.w	r8, [sp, #4]
   19a46:	f7ff feff 	bl	19848 <rpc_ip_client_request_send>
   19a4a:	4606      	mov	r6, r0
   19a4c:	b380      	cbz	r0, 19ab0 <ip_interface_open+0x124>
   19a4e:	6828      	ldr	r0, [r5, #0]
   19a50:	b108      	cbz	r0, 19a56 <ip_interface_open+0xca>
   19a52:	f7ff ff17 	bl	19884 <rpc_ip_client_data_free>
   19a56:	4628      	mov	r0, r5
   19a58:	f7ff ff0c 	bl	19874 <rpc_ip_client_message_free>
   19a5c:	2301      	movs	r3, #1
   19a5e:	2523      	movs	r5, #35	; 0x23
   19a60:	f8c8 3000 	str.w	r3, [r8]
   19a64:	4638      	mov	r0, r7
   19a66:	f005 fc6f 	bl	1f348 <interface_socket_free>
   19a6a:	4628      	mov	r0, r5
   19a6c:	f7fb fa2a 	bl	14ec4 <bsd_os_errno_set>
   19a70:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   19a74:	4638      	mov	r0, r7
   19a76:	b004      	add	sp, #16
   19a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19a7c:	2c01      	cmp	r4, #1
   19a7e:	d00a      	beq.n	19a96 <ip_interface_open+0x10a>
   19a80:	2c02      	cmp	r4, #2
   19a82:	d10b      	bne.n	19a9c <ip_interface_open+0x110>
   19a84:	f1b8 0f02 	cmp.w	r8, #2
   19a88:	d0a4      	beq.n	199d4 <ip_interface_open+0x48>
   19a8a:	2029      	movs	r0, #41	; 0x29
   19a8c:	f7fb fa1a 	bl	14ec4 <bsd_os_errno_set>
   19a90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   19a94:	e7ee      	b.n	19a74 <ip_interface_open+0xe8>
   19a96:	f1b8 0f01 	cmp.w	r8, #1
   19a9a:	d1f6      	bne.n	19a8a <ip_interface_open+0xfe>
   19a9c:	f04f 0802 	mov.w	r8, #2
   19aa0:	e798      	b.n	199d4 <ip_interface_open+0x48>
   19aa2:	9d03      	ldr	r5, [sp, #12]
   19aa4:	2d00      	cmp	r5, #0
   19aa6:	d1bb      	bne.n	19a20 <ip_interface_open+0x94>
   19aa8:	2569      	movs	r5, #105	; 0x69
   19aaa:	e7db      	b.n	19a64 <ip_interface_open+0xd8>
   19aac:	46a0      	mov	r8, r4
   19aae:	e791      	b.n	199d4 <ip_interface_open+0x48>
   19ab0:	ab02      	add	r3, sp, #8
   19ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19ab6:	2102      	movs	r1, #2
   19ab8:	4638      	mov	r0, r7
   19aba:	f005 fc93 	bl	1f3e4 <interface_socket_wait>
   19abe:	4605      	mov	r5, r0
   19ac0:	2800      	cmp	r0, #0
   19ac2:	d1cf      	bne.n	19a64 <ip_interface_open+0xd8>
   19ac4:	4638      	mov	r0, r7
   19ac6:	f005 fd0d 	bl	1f4e4 <interface_socket_from_handle_get>
   19aca:	b138      	cbz	r0, 19adc <ip_interface_open+0x150>
   19acc:	6845      	ldr	r5, [r0, #4]
   19ace:	b12d      	cbz	r5, 19adc <ip_interface_open+0x150>
   19ad0:	6046      	str	r6, [r0, #4]
   19ad2:	e7c7      	b.n	19a64 <ip_interface_open+0xd8>
   19ad4:	202f      	movs	r0, #47	; 0x2f
   19ad6:	f7fb f9f5 	bl	14ec4 <bsd_os_errno_set>
   19ada:	e7cb      	b.n	19a74 <ip_interface_open+0xe8>
   19adc:	3c02      	subs	r4, #2
   19ade:	2c01      	cmp	r4, #1
   19ae0:	d8c8      	bhi.n	19a74 <ip_interface_open+0xe8>
   19ae2:	4638      	mov	r0, r7
   19ae4:	9b01      	ldr	r3, [sp, #4]
   19ae6:	681a      	ldr	r2, [r3, #0]
   19ae8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   19aec:	601a      	str	r2, [r3, #0]
   19aee:	681a      	ldr	r2, [r3, #0]
   19af0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   19af4:	601a      	str	r2, [r3, #0]
   19af6:	b004      	add	sp, #16
   19af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19afc:	2016      	movs	r0, #22
   19afe:	f7fb f9e1 	bl	14ec4 <bsd_os_errno_set>
   19b02:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   19b06:	e7b5      	b.n	19a74 <ip_interface_open+0xe8>
   19b08:	2005      	movs	r0, #5
   19b0a:	f7fb f9db 	bl	14ec4 <bsd_os_errno_set>
   19b0e:	e7b1      	b.n	19a74 <ip_interface_open+0xe8>
   19b10:	2002af72 	.word	0x2002af72
   19b14:	00019895 	.word	0x00019895

00019b18 <ip_interface_close>:
   19b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b20:	b082      	sub	sp, #8
   19b22:	4606      	mov	r6, r0
   19b24:	9300      	str	r3, [sp, #0]
   19b26:	f005 fcdd 	bl	1f4e4 <interface_socket_from_handle_get>
   19b2a:	2800      	cmp	r0, #0
   19b2c:	d062      	beq.n	19bf4 <ip_interface_close+0xdc>
   19b2e:	4604      	mov	r4, r0
   19b30:	2100      	movs	r1, #0
   19b32:	a802      	add	r0, sp, #8
   19b34:	6827      	ldr	r7, [r4, #0]
   19b36:	f840 1d04 	str.w	r1, [r0, #-4]!
   19b3a:	f8d4 8018 	ldr.w	r8, [r4, #24]
   19b3e:	f7ff fe6f 	bl	19820 <rpc_ip_client_request_alloc>
   19b42:	2800      	cmp	r0, #0
   19b44:	d139      	bne.n	19bba <ip_interface_close+0xa2>
   19b46:	f247 0309 	movw	r3, #28681	; 0x7009
   19b4a:	2208      	movs	r2, #8
   19b4c:	9d01      	ldr	r5, [sp, #4]
   19b4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   19b52:	60eb      	str	r3, [r5, #12]
   19b54:	f8c5 8010 	str.w	r8, [r5, #16]
   19b58:	7268      	strb	r0, [r5, #9]
   19b5a:	72a8      	strb	r0, [r5, #10]
   19b5c:	72e8      	strb	r0, [r5, #11]
   19b5e:	722a      	strb	r2, [r5, #8]
   19b60:	6823      	ldr	r3, [r4, #0]
   19b62:	f247 0109 	movw	r1, #28681	; 0x7009
   19b66:	0c1b      	lsrs	r3, r3, #16
   19b68:	041b      	lsls	r3, r3, #16
   19b6a:	f043 030d 	orr.w	r3, r3, #13
   19b6e:	6023      	str	r3, [r4, #0]
   19b70:	6823      	ldr	r3, [r4, #0]
   19b72:	4628      	mov	r0, r5
   19b74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   19b78:	6023      	str	r3, [r4, #0]
   19b7a:	6823      	ldr	r3, [r4, #0]
   19b7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   19b80:	6023      	str	r3, [r4, #0]
   19b82:	f7ff fe61 	bl	19848 <rpc_ip_client_request_send>
   19b86:	bb38      	cbnz	r0, 19bd8 <ip_interface_close+0xc0>
   19b88:	466b      	mov	r3, sp
   19b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19b8e:	210e      	movs	r1, #14
   19b90:	4630      	mov	r0, r6
   19b92:	f005 fc27 	bl	1f3e4 <interface_socket_wait>
   19b96:	4604      	mov	r4, r0
   19b98:	b1a0      	cbz	r0, 19bc4 <ip_interface_close+0xac>
   19b9a:	4c17      	ldr	r4, [pc, #92]	; (19bf8 <ip_interface_close+0xe0>)
   19b9c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   19ba0:	b120      	cbz	r0, 19bac <ip_interface_close+0x94>
   19ba2:	f7ff fe67 	bl	19874 <rpc_ip_client_message_free>
   19ba6:	2300      	movs	r3, #0
   19ba8:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   19bac:	4630      	mov	r0, r6
   19bae:	f005 fbcb 	bl	1f348 <interface_socket_free>
   19bb2:	2000      	movs	r0, #0
   19bb4:	b002      	add	sp, #8
   19bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19bba:	9d01      	ldr	r5, [sp, #4]
   19bbc:	200c      	movs	r0, #12
   19bbe:	2d00      	cmp	r5, #0
   19bc0:	d1ce      	bne.n	19b60 <ip_interface_close+0x48>
   19bc2:	e012      	b.n	19bea <ip_interface_close+0xd2>
   19bc4:	4630      	mov	r0, r6
   19bc6:	f005 fc8d 	bl	1f4e4 <interface_socket_from_handle_get>
   19bca:	2800      	cmp	r0, #0
   19bcc:	d0e5      	beq.n	19b9a <ip_interface_close+0x82>
   19bce:	6843      	ldr	r3, [r0, #4]
   19bd0:	2b00      	cmp	r3, #0
   19bd2:	d0e2      	beq.n	19b9a <ip_interface_close+0x82>
   19bd4:	6044      	str	r4, [r0, #4]
   19bd6:	e7e0      	b.n	19b9a <ip_interface_close+0x82>
   19bd8:	6828      	ldr	r0, [r5, #0]
   19bda:	b108      	cbz	r0, 19be0 <ip_interface_close+0xc8>
   19bdc:	f7ff fe52 	bl	19884 <rpc_ip_client_data_free>
   19be0:	4628      	mov	r0, r5
   19be2:	f7ff fe47 	bl	19874 <rpc_ip_client_message_free>
   19be6:	2023      	movs	r0, #35	; 0x23
   19be8:	6027      	str	r7, [r4, #0]
   19bea:	f7fb f96b 	bl	14ec4 <bsd_os_errno_set>
   19bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19bf2:	e7df      	b.n	19bb4 <ip_interface_close+0x9c>
   19bf4:	2009      	movs	r0, #9
   19bf6:	e7f8      	b.n	19bea <ip_interface_close+0xd2>
   19bf8:	20023320 	.word	0x20023320

00019bfc <ip_interface_sendto>:
   19bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c00:	2400      	movs	r4, #0
   19c02:	b089      	sub	sp, #36	; 0x24
   19c04:	9102      	str	r1, [sp, #8]
   19c06:	4615      	mov	r5, r2
   19c08:	4699      	mov	r9, r3
   19c0a:	9406      	str	r4, [sp, #24]
   19c0c:	4607      	mov	r7, r0
   19c0e:	9e12      	ldr	r6, [sp, #72]	; 0x48
   19c10:	f005 fc68 	bl	1f4e4 <interface_socket_from_handle_get>
   19c14:	2800      	cmp	r0, #0
   19c16:	f000 814c 	beq.w	19eb2 <ip_interface_sendto+0x2b6>
   19c1a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   19c1e:	f300 8139 	bgt.w	19e94 <ip_interface_sendto+0x298>
   19c22:	6903      	ldr	r3, [r0, #16]
   19c24:	4604      	mov	r4, r0
   19c26:	2b01      	cmp	r3, #1
   19c28:	f000 80ea 	beq.w	19e00 <ip_interface_sendto+0x204>
   19c2c:	6822      	ldr	r2, [r4, #0]
   19c2e:	0391      	lsls	r1, r2, #14
   19c30:	d56a      	bpl.n	19d08 <ip_interface_sendto+0x10c>
   19c32:	f1b9 0f00 	cmp.w	r9, #0
   19c36:	f000 80f3 	beq.w	19e20 <ip_interface_sendto+0x224>
   19c3a:	f019 0f02 	tst.w	r9, #2
   19c3e:	f000 8133 	beq.w	19ea8 <ip_interface_sendto+0x2ac>
   19c42:	2300      	movs	r3, #0
   19c44:	9303      	str	r3, [sp, #12]
   19c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19c48:	f247 0806 	movw	r8, #28678	; 0x7006
   19c4c:	2b00      	cmp	r3, #0
   19c4e:	bf08      	it	eq
   19c50:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   19c54:	f04f 0b0c 	mov.w	fp, #12
   19c58:	4a9a      	ldr	r2, [pc, #616]	; (19ec4 <ip_interface_sendto+0x2c8>)
   19c5a:	9307      	str	r3, [sp, #28]
   19c5c:	043b      	lsls	r3, r7, #16
   19c5e:	9200      	str	r2, [sp, #0]
   19c60:	9304      	str	r3, [sp, #16]
   19c62:	4629      	mov	r1, r5
   19c64:	a806      	add	r0, sp, #24
   19c66:	f7ff fddb 	bl	19820 <rpc_ip_client_request_alloc>
   19c6a:	2804      	cmp	r0, #4
   19c6c:	f000 8098 	beq.w	19da0 <ip_interface_sendto+0x1a4>
   19c70:	2800      	cmp	r0, #0
   19c72:	f040 8123 	bne.w	19ebc <ip_interface_sendto+0x2c0>
   19c76:	9b06      	ldr	r3, [sp, #24]
   19c78:	f883 b008 	strb.w	fp, [r3, #8]
   19c7c:	7258      	strb	r0, [r3, #9]
   19c7e:	7298      	strb	r0, [r3, #10]
   19c80:	72d8      	strb	r0, [r3, #11]
   19c82:	2e00      	cmp	r6, #0
   19c84:	d053      	beq.n	19d2e <ip_interface_sendto+0x132>
   19c86:	68e2      	ldr	r2, [r4, #12]
   19c88:	6871      	ldr	r1, [r6, #4]
   19c8a:	428a      	cmp	r2, r1
   19c8c:	f040 809a 	bne.w	19dc4 <ip_interface_sendto+0x1c8>
   19c90:	7831      	ldrb	r1, [r6, #0]
   19c92:	9813      	ldr	r0, [sp, #76]	; 0x4c
   19c94:	4288      	cmp	r0, r1
   19c96:	d10a      	bne.n	19cae <ip_interface_sendto+0xb2>
   19c98:	2a02      	cmp	r2, #2
   19c9a:	f103 001c 	add.w	r0, r3, #28
   19c9e:	f000 80e7 	beq.w	19e70 <ip_interface_sendto+0x274>
   19ca2:	2a0a      	cmp	r2, #10
   19ca4:	d103      	bne.n	19cae <ip_interface_sendto+0xb2>
   19ca6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   19ca8:	2a24      	cmp	r2, #36	; 0x24
   19caa:	f000 80ce 	beq.w	19e4a <ip_interface_sendto+0x24e>
   19cae:	f04f 0a16 	mov.w	sl, #22
   19cb2:	6818      	ldr	r0, [r3, #0]
   19cb4:	b110      	cbz	r0, 19cbc <ip_interface_sendto+0xc0>
   19cb6:	f7ff fde5 	bl	19884 <rpc_ip_client_data_free>
   19cba:	9b06      	ldr	r3, [sp, #24]
   19cbc:	4618      	mov	r0, r3
   19cbe:	f7ff fdd9 	bl	19874 <rpc_ip_client_message_free>
   19cc2:	6823      	ldr	r3, [r4, #0]
   19cc4:	0318      	lsls	r0, r3, #12
   19cc6:	d40b      	bmi.n	19ce0 <ip_interface_sendto+0xe4>
   19cc8:	6823      	ldr	r3, [r4, #0]
   19cca:	b29b      	uxth	r3, r3
   19ccc:	2b0d      	cmp	r3, #13
   19cce:	d007      	beq.n	19ce0 <ip_interface_sendto+0xe4>
   19cd0:	6823      	ldr	r3, [r4, #0]
   19cd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19cd6:	6023      	str	r3, [r4, #0]
   19cd8:	6823      	ldr	r3, [r4, #0]
   19cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19cde:	6023      	str	r3, [r4, #0]
   19ce0:	f1ba 0f00 	cmp.w	sl, #0
   19ce4:	f040 8093 	bne.w	19e0e <ip_interface_sendto+0x212>
   19ce8:	6823      	ldr	r3, [r4, #0]
   19cea:	0119      	lsls	r1, r3, #4
   19cec:	d56d      	bpl.n	19dca <ip_interface_sendto+0x1ce>
   19cee:	6823      	ldr	r3, [r4, #0]
   19cf0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   19cf4:	6023      	str	r3, [r4, #0]
   19cf6:	9b00      	ldr	r3, [sp, #0]
   19cf8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   19cfc:	2800      	cmp	r0, #0
   19cfe:	d168      	bne.n	19dd2 <ip_interface_sendto+0x1d6>
   19d00:	4628      	mov	r0, r5
   19d02:	b009      	add	sp, #36	; 0x24
   19d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d08:	6822      	ldr	r2, [r4, #0]
   19d0a:	0092      	lsls	r2, r2, #2
   19d0c:	d406      	bmi.n	19d1c <ip_interface_sendto+0x120>
   19d0e:	2b01      	cmp	r3, #1
   19d10:	f000 8095 	beq.w	19e3e <ip_interface_sendto+0x242>
   19d14:	6823      	ldr	r3, [r4, #0]
   19d16:	031b      	lsls	r3, r3, #12
   19d18:	f140 80b7 	bpl.w	19e8a <ip_interface_sendto+0x28e>
   19d1c:	6823      	ldr	r3, [r4, #0]
   19d1e:	031e      	lsls	r6, r3, #12
   19d20:	f140 80bd 	bpl.w	19e9e <ip_interface_sendto+0x2a2>
   19d24:	4b67      	ldr	r3, [pc, #412]	; (19ec4 <ip_interface_sendto+0x2c8>)
   19d26:	f8d4 a008 	ldr.w	sl, [r4, #8]
   19d2a:	9300      	str	r3, [sp, #0]
   19d2c:	e7d8      	b.n	19ce0 <ip_interface_sendto+0xe4>
   19d2e:	4642      	mov	r2, r8
   19d30:	f8c3 9014 	str.w	r9, [r3, #20]
   19d34:	69a1      	ldr	r1, [r4, #24]
   19d36:	9804      	ldr	r0, [sp, #16]
   19d38:	6119      	str	r1, [r3, #16]
   19d3a:	9902      	ldr	r1, [sp, #8]
   19d3c:	4302      	orrs	r2, r0
   19d3e:	60da      	str	r2, [r3, #12]
   19d40:	605d      	str	r5, [r3, #4]
   19d42:	b119      	cbz	r1, 19d4c <ip_interface_sendto+0x150>
   19d44:	6818      	ldr	r0, [r3, #0]
   19d46:	462a      	mov	r2, r5
   19d48:	f00f fb93 	bl	29472 <memcpy>
   19d4c:	6823      	ldr	r3, [r4, #0]
   19d4e:	4641      	mov	r1, r8
   19d50:	9305      	str	r3, [sp, #20]
   19d52:	6823      	ldr	r3, [r4, #0]
   19d54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   19d58:	6023      	str	r3, [r4, #0]
   19d5a:	6823      	ldr	r3, [r4, #0]
   19d5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   19d60:	6023      	str	r3, [r4, #0]
   19d62:	9b06      	ldr	r3, [sp, #24]
   19d64:	4618      	mov	r0, r3
   19d66:	9301      	str	r3, [sp, #4]
   19d68:	f7ff fd6e 	bl	19848 <rpc_ip_client_request_send>
   19d6c:	9b01      	ldr	r3, [sp, #4]
   19d6e:	4682      	mov	sl, r0
   19d70:	2800      	cmp	r0, #0
   19d72:	d138      	bne.n	19de6 <ip_interface_sendto+0x1ea>
   19d74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   19d78:	ab07      	add	r3, sp, #28
   19d7a:	4611      	mov	r1, r2
   19d7c:	4638      	mov	r0, r7
   19d7e:	f005 fb31 	bl	1f3e4 <interface_socket_wait>
   19d82:	4603      	mov	r3, r0
   19d84:	b198      	cbz	r0, 19dae <ip_interface_sendto+0x1b2>
   19d86:	6822      	ldr	r2, [r4, #0]
   19d88:	0312      	lsls	r2, r2, #12
   19d8a:	d455      	bmi.n	19e38 <ip_interface_sendto+0x23c>
   19d8c:	2b3c      	cmp	r3, #60	; 0x3c
   19d8e:	d017      	beq.n	19dc0 <ip_interface_sendto+0x1c4>
   19d90:	2b0c      	cmp	r3, #12
   19d92:	d115      	bne.n	19dc0 <ip_interface_sendto+0x1c4>
   19d94:	9b00      	ldr	r3, [sp, #0]
   19d96:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   19d9a:	b108      	cbz	r0, 19da0 <ip_interface_sendto+0x1a4>
   19d9c:	f7ff fd6a 	bl	19874 <rpc_ip_client_message_free>
   19da0:	9b03      	ldr	r3, [sp, #12]
   19da2:	2b00      	cmp	r3, #0
   19da4:	f47f af5d 	bne.w	19c62 <ip_interface_sendto+0x66>
   19da8:	f04f 0a23 	mov.w	sl, #35	; 0x23
   19dac:	e789      	b.n	19cc2 <ip_interface_sendto+0xc6>
   19dae:	9001      	str	r0, [sp, #4]
   19db0:	4638      	mov	r0, r7
   19db2:	f005 fb97 	bl	1f4e4 <interface_socket_from_handle_get>
   19db6:	9b01      	ldr	r3, [sp, #4]
   19db8:	b110      	cbz	r0, 19dc0 <ip_interface_sendto+0x1c4>
   19dba:	6843      	ldr	r3, [r0, #4]
   19dbc:	2b00      	cmp	r3, #0
   19dbe:	d136      	bne.n	19e2e <ip_interface_sendto+0x232>
   19dc0:	469a      	mov	sl, r3
   19dc2:	e77e      	b.n	19cc2 <ip_interface_sendto+0xc6>
   19dc4:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   19dc8:	e773      	b.n	19cb2 <ip_interface_sendto+0xb6>
   19dca:	9b00      	ldr	r3, [sp, #0]
   19dcc:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   19dd0:	6985      	ldr	r5, [r0, #24]
   19dd2:	f7ff fd4f 	bl	19874 <rpc_ip_client_message_free>
   19dd6:	2300      	movs	r3, #0
   19dd8:	4628      	mov	r0, r5
   19dda:	9a00      	ldr	r2, [sp, #0]
   19ddc:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   19de0:	b009      	add	sp, #36	; 0x24
   19de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19de6:	6818      	ldr	r0, [r3, #0]
   19de8:	469a      	mov	sl, r3
   19dea:	b108      	cbz	r0, 19df0 <ip_interface_sendto+0x1f4>
   19dec:	f7ff fd4a 	bl	19884 <rpc_ip_client_data_free>
   19df0:	4650      	mov	r0, sl
   19df2:	f7ff fd3f 	bl	19874 <rpc_ip_client_message_free>
   19df6:	9b05      	ldr	r3, [sp, #20]
   19df8:	f04f 0a23 	mov.w	sl, #35	; 0x23
   19dfc:	6023      	str	r3, [r4, #0]
   19dfe:	e760      	b.n	19cc2 <ip_interface_sendto+0xc6>
   19e00:	2e00      	cmp	r6, #0
   19e02:	f43f af13 	beq.w	19c2c <ip_interface_sendto+0x30>
   19e06:	f04f 0a38 	mov.w	sl, #56	; 0x38
   19e0a:	4b2e      	ldr	r3, [pc, #184]	; (19ec4 <ip_interface_sendto+0x2c8>)
   19e0c:	9300      	str	r3, [sp, #0]
   19e0e:	4650      	mov	r0, sl
   19e10:	f7fb f858 	bl	14ec4 <bsd_os_errno_set>
   19e14:	9b00      	ldr	r3, [sp, #0]
   19e16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19e1a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   19e1e:	e76d      	b.n	19cfc <ip_interface_sendto+0x100>
   19e20:	6823      	ldr	r3, [r4, #0]
   19e22:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   19e26:	f3c3 7300 	ubfx	r3, r3, #28, #1
   19e2a:	9303      	str	r3, [sp, #12]
   19e2c:	e70b      	b.n	19c46 <ip_interface_sendto+0x4a>
   19e2e:	f8c0 a004 	str.w	sl, [r0, #4]
   19e32:	6822      	ldr	r2, [r4, #0]
   19e34:	0312      	lsls	r2, r2, #12
   19e36:	d5a9      	bpl.n	19d8c <ip_interface_sendto+0x190>
   19e38:	f8d4 a008 	ldr.w	sl, [r4, #8]
   19e3c:	e741      	b.n	19cc2 <ip_interface_sendto+0xc6>
   19e3e:	6823      	ldr	r3, [r4, #0]
   19e40:	b29b      	uxth	r3, r3
   19e42:	2b05      	cmp	r3, #5
   19e44:	f47f af6a 	bne.w	19d1c <ip_interface_sendto+0x120>
   19e48:	e764      	b.n	19d14 <ip_interface_sendto+0x118>
   19e4a:	2210      	movs	r2, #16
   19e4c:	8931      	ldrh	r1, [r6, #8]
   19e4e:	835a      	strh	r2, [r3, #26]
   19e50:	8319      	strh	r1, [r3, #24]
   19e52:	18b1      	adds	r1, r6, r2
   19e54:	f00f fb0d 	bl	29472 <memcpy>
   19e58:	f247 0207 	movw	r2, #28679	; 0x7007
   19e5c:	9b06      	ldr	r3, [sp, #24]
   19e5e:	4690      	mov	r8, r2
   19e60:	6899      	ldr	r1, [r3, #8]
   19e62:	8b58      	ldrh	r0, [r3, #26]
   19e64:	3104      	adds	r1, #4
   19e66:	4401      	add	r1, r0
   19e68:	f8c3 9014 	str.w	r9, [r3, #20]
   19e6c:	6099      	str	r1, [r3, #8]
   19e6e:	e761      	b.n	19d34 <ip_interface_sendto+0x138>
   19e70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   19e72:	2a10      	cmp	r2, #16
   19e74:	f47f af1b 	bne.w	19cae <ip_interface_sendto+0xb2>
   19e78:	2204      	movs	r2, #4
   19e7a:	8931      	ldrh	r1, [r6, #8]
   19e7c:	835a      	strh	r2, [r3, #26]
   19e7e:	8319      	strh	r1, [r3, #24]
   19e80:	f106 010c 	add.w	r1, r6, #12
   19e84:	f00f faf5 	bl	29472 <memcpy>
   19e88:	e7e6      	b.n	19e58 <ip_interface_sendto+0x25c>
   19e8a:	4b0e      	ldr	r3, [pc, #56]	; (19ec4 <ip_interface_sendto+0x2c8>)
   19e8c:	f04f 0a23 	mov.w	sl, #35	; 0x23
   19e90:	9300      	str	r3, [sp, #0]
   19e92:	e7bc      	b.n	19e0e <ip_interface_sendto+0x212>
   19e94:	4b0b      	ldr	r3, [pc, #44]	; (19ec4 <ip_interface_sendto+0x2c8>)
   19e96:	f04f 0a28 	mov.w	sl, #40	; 0x28
   19e9a:	9300      	str	r3, [sp, #0]
   19e9c:	e7b7      	b.n	19e0e <ip_interface_sendto+0x212>
   19e9e:	4b09      	ldr	r3, [pc, #36]	; (19ec4 <ip_interface_sendto+0x2c8>)
   19ea0:	f04f 0a39 	mov.w	sl, #57	; 0x39
   19ea4:	9300      	str	r3, [sp, #0]
   19ea6:	e7b2      	b.n	19e0e <ip_interface_sendto+0x212>
   19ea8:	4b06      	ldr	r3, [pc, #24]	; (19ec4 <ip_interface_sendto+0x2c8>)
   19eaa:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   19eae:	9300      	str	r3, [sp, #0]
   19eb0:	e7ad      	b.n	19e0e <ip_interface_sendto+0x212>
   19eb2:	4b04      	ldr	r3, [pc, #16]	; (19ec4 <ip_interface_sendto+0x2c8>)
   19eb4:	f04f 0a09 	mov.w	sl, #9
   19eb8:	9300      	str	r3, [sp, #0]
   19eba:	e7a8      	b.n	19e0e <ip_interface_sendto+0x212>
   19ebc:	f04f 0a0c 	mov.w	sl, #12
   19ec0:	e6ff      	b.n	19cc2 <ip_interface_sendto+0xc6>
   19ec2:	bf00      	nop
   19ec4:	20023320 	.word	0x20023320

00019ec8 <ip_interface_recvfrom>:
   19ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ecc:	b087      	sub	sp, #28
   19ece:	2a00      	cmp	r2, #0
   19ed0:	f000 8112 	beq.w	1a0f8 <ip_interface_recvfrom+0x230>
   19ed4:	4680      	mov	r8, r0
   19ed6:	468b      	mov	fp, r1
   19ed8:	469a      	mov	sl, r3
   19eda:	4691      	mov	r9, r2
   19edc:	b11b      	cbz	r3, 19ee6 <ip_interface_recvfrom+0x1e>
   19ede:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   19ee2:	f000 8107 	beq.w	1a0f4 <ip_interface_recvfrom+0x22c>
   19ee6:	4640      	mov	r0, r8
   19ee8:	f005 fafc 	bl	1f4e4 <interface_socket_from_handle_get>
   19eec:	4604      	mov	r4, r0
   19eee:	2800      	cmp	r0, #0
   19ef0:	f000 8104 	beq.w	1a0fc <ip_interface_recvfrom+0x234>
   19ef4:	6803      	ldr	r3, [r0, #0]
   19ef6:	02db      	lsls	r3, r3, #11
   19ef8:	d562      	bpl.n	19fc0 <ip_interface_recvfrom+0xf8>
   19efa:	f01a 0f02 	tst.w	sl, #2
   19efe:	bf18      	it	ne
   19f00:	2600      	movne	r6, #0
   19f02:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19f06:	bf08      	it	eq
   19f08:	6806      	ldreq	r6, [r0, #0]
   19f0a:	f00a 0310 	and.w	r3, sl, #16
   19f0e:	bf04      	itt	eq
   19f10:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   19f14:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   19f18:	9301      	str	r3, [sp, #4]
   19f1a:	6823      	ldr	r3, [r4, #0]
   19f1c:	03df      	lsls	r7, r3, #15
   19f1e:	d567      	bpl.n	19ff0 <ip_interface_recvfrom+0x128>
   19f20:	6823      	ldr	r3, [r4, #0]
   19f22:	69e0      	ldr	r0, [r4, #28]
   19f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   19f28:	6023      	str	r3, [r4, #0]
   19f2a:	6803      	ldr	r3, [r0, #0]
   19f2c:	68db      	ldr	r3, [r3, #12]
   19f2e:	4798      	blx	r3
   19f30:	4605      	mov	r5, r0
   19f32:	3001      	adds	r0, #1
   19f34:	d07d      	beq.n	1a032 <ip_interface_recvfrom+0x16a>
   19f36:	45a9      	cmp	r9, r5
   19f38:	dd03      	ble.n	19f42 <ip_interface_recvfrom+0x7a>
   19f3a:	6923      	ldr	r3, [r4, #16]
   19f3c:	2b01      	cmp	r3, #1
   19f3e:	f000 80a3 	beq.w	1a088 <ip_interface_recvfrom+0x1c0>
   19f42:	f04f 0800 	mov.w	r8, #0
   19f46:	af02      	add	r7, sp, #8
   19f48:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19f4a:	b103      	cbz	r3, 19f4e <ip_interface_recvfrom+0x86>
   19f4c:	681b      	ldr	r3, [r3, #0]
   19f4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   19f50:	e9cd b902 	strd	fp, r9, [sp, #8]
   19f54:	e9cd 2304 	strd	r2, r3, [sp, #16]
   19f58:	69e0      	ldr	r0, [r4, #28]
   19f5a:	4639      	mov	r1, r7
   19f5c:	6803      	ldr	r3, [r0, #0]
   19f5e:	4652      	mov	r2, sl
   19f60:	689b      	ldr	r3, [r3, #8]
   19f62:	4798      	blx	r3
   19f64:	4605      	mov	r5, r0
   19f66:	69e0      	ldr	r0, [r4, #28]
   19f68:	1c6b      	adds	r3, r5, #1
   19f6a:	6803      	ldr	r3, [r0, #0]
   19f6c:	bf18      	it	ne
   19f6e:	2701      	movne	r7, #1
   19f70:	68db      	ldr	r3, [r3, #12]
   19f72:	bf0a      	itet	eq
   19f74:	2700      	moveq	r7, #0
   19f76:	2600      	movne	r6, #0
   19f78:	2623      	moveq	r6, #35	; 0x23
   19f7a:	4798      	blx	r3
   19f7c:	3001      	adds	r0, #1
   19f7e:	d132      	bne.n	19fe6 <ip_interface_recvfrom+0x11e>
   19f80:	f1b8 0f00 	cmp.w	r8, #0
   19f84:	f000 80b0 	beq.w	1a0e8 <ip_interface_recvfrom+0x220>
   19f88:	2f00      	cmp	r7, #0
   19f8a:	f000 80a1 	beq.w	1a0d0 <ip_interface_recvfrom+0x208>
   19f8e:	6823      	ldr	r3, [r4, #0]
   19f90:	0318      	lsls	r0, r3, #12
   19f92:	d506      	bpl.n	19fa2 <ip_interface_recvfrom+0xda>
   19f94:	6823      	ldr	r3, [r4, #0]
   19f96:	b29b      	uxth	r3, r3
   19f98:	2b0d      	cmp	r3, #13
   19f9a:	d002      	beq.n	19fa2 <ip_interface_recvfrom+0xda>
   19f9c:	6923      	ldr	r3, [r4, #16]
   19f9e:	2b01      	cmp	r3, #1
   19fa0:	d021      	beq.n	19fe6 <ip_interface_recvfrom+0x11e>
   19fa2:	6823      	ldr	r3, [r4, #0]
   19fa4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   19fa8:	6823      	ldr	r3, [r4, #0]
   19faa:	f040 80a9 	bne.w	1a100 <ip_interface_recvfrom+0x238>
   19fae:	0319      	lsls	r1, r3, #12
   19fb0:	d473      	bmi.n	1a09a <ip_interface_recvfrom+0x1d2>
   19fb2:	2e00      	cmp	r6, #0
   19fb4:	f040 8086 	bne.w	1a0c4 <ip_interface_recvfrom+0x1fc>
   19fb8:	4628      	mov	r0, r5
   19fba:	b007      	add	sp, #28
   19fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fc0:	6803      	ldr	r3, [r0, #0]
   19fc2:	b29b      	uxth	r3, r3
   19fc4:	2b06      	cmp	r3, #6
   19fc6:	d071      	beq.n	1a0ac <ip_interface_recvfrom+0x1e4>
   19fc8:	6803      	ldr	r3, [r0, #0]
   19fca:	b29b      	uxth	r3, r3
   19fcc:	2b07      	cmp	r3, #7
   19fce:	bf0c      	ite	eq
   19fd0:	2609      	moveq	r6, #9
   19fd2:	2639      	movne	r6, #57	; 0x39
   19fd4:	69e0      	ldr	r0, [r4, #28]
   19fd6:	6803      	ldr	r3, [r0, #0]
   19fd8:	68db      	ldr	r3, [r3, #12]
   19fda:	4798      	blx	r3
   19fdc:	1c43      	adds	r3, r0, #1
   19fde:	4605      	mov	r5, r0
   19fe0:	d0df      	beq.n	19fa2 <ip_interface_recvfrom+0xda>
   19fe2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19fe6:	6823      	ldr	r3, [r4, #0]
   19fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19fec:	6023      	str	r3, [r4, #0]
   19fee:	e7e0      	b.n	19fb2 <ip_interface_recvfrom+0xea>
   19ff0:	2e00      	cmp	r6, #0
   19ff2:	d07d      	beq.n	1a0f0 <ip_interface_recvfrom+0x228>
   19ff4:	6a26      	ldr	r6, [r4, #32]
   19ff6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19ffa:	2e00      	cmp	r6, #0
   19ffc:	bf08      	it	eq
   19ffe:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   1a002:	af02      	add	r7, sp, #8
   1a004:	463b      	mov	r3, r7
   1a006:	4611      	mov	r1, r2
   1a008:	4640      	mov	r0, r8
   1a00a:	9602      	str	r6, [sp, #8]
   1a00c:	f005 f9ea 	bl	1f3e4 <interface_socket_wait>
   1a010:	4606      	mov	r6, r0
   1a012:	b350      	cbz	r0, 1a06a <ip_interface_recvfrom+0x1a2>
   1a014:	6823      	ldr	r3, [r4, #0]
   1a016:	031a      	lsls	r2, r3, #12
   1a018:	d532      	bpl.n	1a080 <ip_interface_recvfrom+0x1b8>
   1a01a:	6823      	ldr	r3, [r4, #0]
   1a01c:	b29b      	uxth	r3, r3
   1a01e:	2b0d      	cmp	r3, #13
   1a020:	d02e      	beq.n	1a080 <ip_interface_recvfrom+0x1b8>
   1a022:	6923      	ldr	r3, [r4, #16]
   1a024:	f1a3 0801 	sub.w	r8, r3, #1
   1a028:	fab8 f888 	clz	r8, r8
   1a02c:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1a030:	e78a      	b.n	19f48 <ip_interface_recvfrom+0x80>
   1a032:	6823      	ldr	r3, [r4, #0]
   1a034:	031a      	lsls	r2, r3, #12
   1a036:	d5db      	bpl.n	19ff0 <ip_interface_recvfrom+0x128>
   1a038:	6823      	ldr	r3, [r4, #0]
   1a03a:	b29b      	uxth	r3, r3
   1a03c:	2b0d      	cmp	r3, #13
   1a03e:	d0d7      	beq.n	19ff0 <ip_interface_recvfrom+0x128>
   1a040:	6923      	ldr	r3, [r4, #16]
   1a042:	69e0      	ldr	r0, [r4, #28]
   1a044:	2b01      	cmp	r3, #1
   1a046:	d033      	beq.n	1a0b0 <ip_interface_recvfrom+0x1e8>
   1a048:	2639      	movs	r6, #57	; 0x39
   1a04a:	6823      	ldr	r3, [r4, #0]
   1a04c:	0c1b      	lsrs	r3, r3, #16
   1a04e:	041b      	lsls	r3, r3, #16
   1a050:	f043 030d 	orr.w	r3, r3, #13
   1a054:	6023      	str	r3, [r4, #0]
   1a056:	6823      	ldr	r3, [r4, #0]
   1a058:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1a05c:	6023      	str	r3, [r4, #0]
   1a05e:	6803      	ldr	r3, [r0, #0]
   1a060:	68db      	ldr	r3, [r3, #12]
   1a062:	4798      	blx	r3
   1a064:	3001      	adds	r0, #1
   1a066:	d1be      	bne.n	19fe6 <ip_interface_recvfrom+0x11e>
   1a068:	e79b      	b.n	19fa2 <ip_interface_recvfrom+0xda>
   1a06a:	4640      	mov	r0, r8
   1a06c:	f005 fa3a 	bl	1f4e4 <interface_socket_from_handle_get>
   1a070:	b140      	cbz	r0, 1a084 <ip_interface_recvfrom+0x1bc>
   1a072:	6846      	ldr	r6, [r0, #4]
   1a074:	b136      	cbz	r6, 1a084 <ip_interface_recvfrom+0x1bc>
   1a076:	2300      	movs	r3, #0
   1a078:	6043      	str	r3, [r0, #4]
   1a07a:	6823      	ldr	r3, [r4, #0]
   1a07c:	031a      	lsls	r2, r3, #12
   1a07e:	d4cc      	bmi.n	1a01a <ip_interface_recvfrom+0x152>
   1a080:	69e0      	ldr	r0, [r4, #28]
   1a082:	e7ec      	b.n	1a05e <ip_interface_recvfrom+0x196>
   1a084:	2601      	movs	r6, #1
   1a086:	e748      	b.n	19f1a <ip_interface_recvfrom+0x52>
   1a088:	9b01      	ldr	r3, [sp, #4]
   1a08a:	b11b      	cbz	r3, 1a094 <ip_interface_recvfrom+0x1cc>
   1a08c:	6823      	ldr	r3, [r4, #0]
   1a08e:	00d9      	lsls	r1, r3, #3
   1a090:	d5b0      	bpl.n	19ff4 <ip_interface_recvfrom+0x12c>
   1a092:	e756      	b.n	19f42 <ip_interface_recvfrom+0x7a>
   1a094:	4698      	mov	r8, r3
   1a096:	af02      	add	r7, sp, #8
   1a098:	e756      	b.n	19f48 <ip_interface_recvfrom+0x80>
   1a09a:	6823      	ldr	r3, [r4, #0]
   1a09c:	b29b      	uxth	r3, r3
   1a09e:	2b0d      	cmp	r3, #13
   1a0a0:	d187      	bne.n	19fb2 <ip_interface_recvfrom+0xea>
   1a0a2:	68a3      	ldr	r3, [r4, #8]
   1a0a4:	2b00      	cmp	r3, #0
   1a0a6:	d084      	beq.n	19fb2 <ip_interface_recvfrom+0xea>
   1a0a8:	68a6      	ldr	r6, [r4, #8]
   1a0aa:	e782      	b.n	19fb2 <ip_interface_recvfrom+0xea>
   1a0ac:	2609      	movs	r6, #9
   1a0ae:	e791      	b.n	19fd4 <ip_interface_recvfrom+0x10c>
   1a0b0:	6803      	ldr	r3, [r0, #0]
   1a0b2:	68db      	ldr	r3, [r3, #12]
   1a0b4:	4798      	blx	r3
   1a0b6:	3001      	adds	r0, #1
   1a0b8:	d00a      	beq.n	1a0d0 <ip_interface_recvfrom+0x208>
   1a0ba:	2623      	movs	r6, #35	; 0x23
   1a0bc:	6823      	ldr	r3, [r4, #0]
   1a0be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1a0c2:	6023      	str	r3, [r4, #0]
   1a0c4:	4630      	mov	r0, r6
   1a0c6:	f7fa fefd 	bl	14ec4 <bsd_os_errno_set>
   1a0ca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a0ce:	e773      	b.n	19fb8 <ip_interface_recvfrom+0xf0>
   1a0d0:	6823      	ldr	r3, [r4, #0]
   1a0d2:	2500      	movs	r5, #0
   1a0d4:	0c1b      	lsrs	r3, r3, #16
   1a0d6:	041b      	lsls	r3, r3, #16
   1a0d8:	f043 030d 	orr.w	r3, r3, #13
   1a0dc:	6023      	str	r3, [r4, #0]
   1a0de:	6823      	ldr	r3, [r4, #0]
   1a0e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1a0e4:	6023      	str	r3, [r4, #0]
   1a0e6:	e767      	b.n	19fb8 <ip_interface_recvfrom+0xf0>
   1a0e8:	2f00      	cmp	r7, #0
   1a0ea:	f47f af50 	bne.w	19f8e <ip_interface_recvfrom+0xc6>
   1a0ee:	e758      	b.n	19fa2 <ip_interface_recvfrom+0xda>
   1a0f0:	2623      	movs	r6, #35	; 0x23
   1a0f2:	e7c5      	b.n	1a080 <ip_interface_recvfrom+0x1b8>
   1a0f4:	262d      	movs	r6, #45	; 0x2d
   1a0f6:	e7e5      	b.n	1a0c4 <ip_interface_recvfrom+0x1fc>
   1a0f8:	2616      	movs	r6, #22
   1a0fa:	e7e3      	b.n	1a0c4 <ip_interface_recvfrom+0x1fc>
   1a0fc:	2609      	movs	r6, #9
   1a0fe:	e7e1      	b.n	1a0c4 <ip_interface_recvfrom+0x1fc>
   1a100:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   1a104:	6023      	str	r3, [r4, #0]
   1a106:	6823      	ldr	r3, [r4, #0]
   1a108:	2669      	movs	r6, #105	; 0x69
   1a10a:	0c1b      	lsrs	r3, r3, #16
   1a10c:	041b      	lsls	r3, r3, #16
   1a10e:	f043 030d 	orr.w	r3, r3, #13
   1a112:	6023      	str	r3, [r4, #0]
   1a114:	e7d6      	b.n	1a0c4 <ip_interface_recvfrom+0x1fc>
   1a116:	bf00      	nop

0001a118 <ip_interface_connect>:
   1a118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a11c:	b082      	sub	sp, #8
   1a11e:	2900      	cmp	r1, #0
   1a120:	d04b      	beq.n	1a1ba <ip_interface_connect+0xa2>
   1a122:	4617      	mov	r7, r2
   1a124:	2a00      	cmp	r2, #0
   1a126:	d048      	beq.n	1a1ba <ip_interface_connect+0xa2>
   1a128:	4680      	mov	r8, r0
   1a12a:	4689      	mov	r9, r1
   1a12c:	f005 f9da 	bl	1f4e4 <interface_socket_from_handle_get>
   1a130:	4605      	mov	r5, r0
   1a132:	2800      	cmp	r0, #0
   1a134:	f000 80af 	beq.w	1a296 <ip_interface_connect+0x17e>
   1a138:	6803      	ldr	r3, [r0, #0]
   1a13a:	b29b      	uxth	r3, r3
   1a13c:	2b02      	cmp	r3, #2
   1a13e:	d004      	beq.n	1a14a <ip_interface_connect+0x32>
   1a140:	6803      	ldr	r3, [r0, #0]
   1a142:	b29b      	uxth	r3, r3
   1a144:	2b04      	cmp	r3, #4
   1a146:	f040 809d 	bne.w	1a284 <ip_interface_connect+0x16c>
   1a14a:	6829      	ldr	r1, [r5, #0]
   1a14c:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   1a150:	f040 8089 	bne.w	1a266 <ip_interface_connect+0x14e>
   1a154:	ae02      	add	r6, sp, #8
   1a156:	f8d5 a018 	ldr.w	sl, [r5, #24]
   1a15a:	f846 1d04 	str.w	r1, [r6, #-4]!
   1a15e:	4630      	mov	r0, r6
   1a160:	f7ff fb5e 	bl	19820 <rpc_ip_client_request_alloc>
   1a164:	bb98      	cbnz	r0, 1a1ce <ip_interface_connect+0xb6>
   1a166:	2108      	movs	r1, #8
   1a168:	ea4f 4208 	mov.w	r2, r8, lsl #16
   1a16c:	9c01      	ldr	r4, [sp, #4]
   1a16e:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   1a172:	f043 0302 	orr.w	r3, r3, #2
   1a176:	60e3      	str	r3, [r4, #12]
   1a178:	f8c4 a010 	str.w	sl, [r4, #16]
   1a17c:	7260      	strb	r0, [r4, #9]
   1a17e:	72a0      	strb	r0, [r4, #10]
   1a180:	72e0      	strb	r0, [r4, #11]
   1a182:	7221      	strb	r1, [r4, #8]
   1a184:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   1a188:	f042 0202 	orr.w	r2, r2, #2
   1a18c:	60e2      	str	r2, [r4, #12]
   1a18e:	68a3      	ldr	r3, [r4, #8]
   1a190:	69aa      	ldr	r2, [r5, #24]
   1a192:	3304      	adds	r3, #4
   1a194:	6122      	str	r2, [r4, #16]
   1a196:	60a3      	str	r3, [r4, #8]
   1a198:	68eb      	ldr	r3, [r5, #12]
   1a19a:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1a19e:	4293      	cmp	r3, r2
   1a1a0:	d11b      	bne.n	1a1da <ip_interface_connect+0xc2>
   1a1a2:	f899 2000 	ldrb.w	r2, [r9]
   1a1a6:	4297      	cmp	r7, r2
   1a1a8:	d107      	bne.n	1a1ba <ip_interface_connect+0xa2>
   1a1aa:	2b02      	cmp	r3, #2
   1a1ac:	f104 0018 	add.w	r0, r4, #24
   1a1b0:	d015      	beq.n	1a1de <ip_interface_connect+0xc6>
   1a1b2:	2b0a      	cmp	r3, #10
   1a1b4:	d101      	bne.n	1a1ba <ip_interface_connect+0xa2>
   1a1b6:	2f24      	cmp	r7, #36	; 0x24
   1a1b8:	d01d      	beq.n	1a1f6 <ip_interface_connect+0xde>
   1a1ba:	2416      	movs	r4, #22
   1a1bc:	4620      	mov	r0, r4
   1a1be:	f7fa fe81 	bl	14ec4 <bsd_os_errno_set>
   1a1c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a1c6:	4620      	mov	r0, r4
   1a1c8:	b002      	add	sp, #8
   1a1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a1ce:	9c01      	ldr	r4, [sp, #4]
   1a1d0:	2c00      	cmp	r4, #0
   1a1d2:	d05e      	beq.n	1a292 <ip_interface_connect+0x17a>
   1a1d4:	ea4f 4208 	mov.w	r2, r8, lsl #16
   1a1d8:	e7d4      	b.n	1a184 <ip_interface_connect+0x6c>
   1a1da:	242f      	movs	r4, #47	; 0x2f
   1a1dc:	e7ee      	b.n	1a1bc <ip_interface_connect+0xa4>
   1a1de:	2f10      	cmp	r7, #16
   1a1e0:	d1eb      	bne.n	1a1ba <ip_interface_connect+0xa2>
   1a1e2:	2204      	movs	r2, #4
   1a1e4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1a1e8:	f109 010c 	add.w	r1, r9, #12
   1a1ec:	82e2      	strh	r2, [r4, #22]
   1a1ee:	82a3      	strh	r3, [r4, #20]
   1a1f0:	f00f f93f 	bl	29472 <memcpy>
   1a1f4:	e008      	b.n	1a208 <ip_interface_connect+0xf0>
   1a1f6:	2210      	movs	r2, #16
   1a1f8:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1a1fc:	eb09 0102 	add.w	r1, r9, r2
   1a200:	82e2      	strh	r2, [r4, #22]
   1a202:	82a3      	strh	r3, [r4, #20]
   1a204:	f00f f935 	bl	29472 <memcpy>
   1a208:	68a3      	ldr	r3, [r4, #8]
   1a20a:	8ae2      	ldrh	r2, [r4, #22]
   1a20c:	f247 0102 	movw	r1, #28674	; 0x7002
   1a210:	4413      	add	r3, r2
   1a212:	60a3      	str	r3, [r4, #8]
   1a214:	682f      	ldr	r7, [r5, #0]
   1a216:	682b      	ldr	r3, [r5, #0]
   1a218:	4620      	mov	r0, r4
   1a21a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1a21e:	602b      	str	r3, [r5, #0]
   1a220:	f7ff fb12 	bl	19848 <rpc_ip_client_request_send>
   1a224:	b9a8      	cbnz	r0, 1a252 <ip_interface_connect+0x13a>
   1a226:	682b      	ldr	r3, [r5, #0]
   1a228:	00db      	lsls	r3, r3, #3
   1a22a:	d429      	bmi.n	1a280 <ip_interface_connect+0x168>
   1a22c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1a22e:	4633      	mov	r3, r6
   1a230:	2c00      	cmp	r4, #0
   1a232:	bf08      	it	eq
   1a234:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
   1a238:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a23c:	2105      	movs	r1, #5
   1a23e:	4640      	mov	r0, r8
   1a240:	9401      	str	r4, [sp, #4]
   1a242:	f005 f8cf 	bl	1f3e4 <interface_socket_wait>
   1a246:	4604      	mov	r4, r0
   1a248:	b178      	cbz	r0, 1a26a <ip_interface_connect+0x152>
   1a24a:	2c73      	cmp	r4, #115	; 0x73
   1a24c:	d0b6      	beq.n	1a1bc <ip_interface_connect+0xa4>
   1a24e:	602f      	str	r7, [r5, #0]
   1a250:	e7b4      	b.n	1a1bc <ip_interface_connect+0xa4>
   1a252:	6820      	ldr	r0, [r4, #0]
   1a254:	b108      	cbz	r0, 1a25a <ip_interface_connect+0x142>
   1a256:	f7ff fb15 	bl	19884 <rpc_ip_client_data_free>
   1a25a:	4620      	mov	r0, r4
   1a25c:	f7ff fb0a 	bl	19874 <rpc_ip_client_message_free>
   1a260:	2423      	movs	r4, #35	; 0x23
   1a262:	602f      	str	r7, [r5, #0]
   1a264:	e7aa      	b.n	1a1bc <ip_interface_connect+0xa4>
   1a266:	2472      	movs	r4, #114	; 0x72
   1a268:	e7a8      	b.n	1a1bc <ip_interface_connect+0xa4>
   1a26a:	4640      	mov	r0, r8
   1a26c:	f005 f93a 	bl	1f4e4 <interface_socket_from_handle_get>
   1a270:	2800      	cmp	r0, #0
   1a272:	d0a8      	beq.n	1a1c6 <ip_interface_connect+0xae>
   1a274:	6843      	ldr	r3, [r0, #4]
   1a276:	2b00      	cmp	r3, #0
   1a278:	d0a5      	beq.n	1a1c6 <ip_interface_connect+0xae>
   1a27a:	6044      	str	r4, [r0, #4]
   1a27c:	461c      	mov	r4, r3
   1a27e:	e7e4      	b.n	1a24a <ip_interface_connect+0x132>
   1a280:	2473      	movs	r4, #115	; 0x73
   1a282:	e79b      	b.n	1a1bc <ip_interface_connect+0xa4>
   1a284:	6803      	ldr	r3, [r0, #0]
   1a286:	b29b      	uxth	r3, r3
   1a288:	2b05      	cmp	r3, #5
   1a28a:	bf14      	ite	ne
   1a28c:	2409      	movne	r4, #9
   1a28e:	2438      	moveq	r4, #56	; 0x38
   1a290:	e794      	b.n	1a1bc <ip_interface_connect+0xa4>
   1a292:	240c      	movs	r4, #12
   1a294:	e792      	b.n	1a1bc <ip_interface_connect+0xa4>
   1a296:	2409      	movs	r4, #9
   1a298:	e790      	b.n	1a1bc <ip_interface_connect+0xa4>
   1a29a:	bf00      	nop

0001a29c <ip_interface_bind>:
   1a29c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a2a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a2a4:	b083      	sub	sp, #12
   1a2a6:	9300      	str	r3, [sp, #0]
   1a2a8:	b3b1      	cbz	r1, 1a318 <ip_interface_bind+0x7c>
   1a2aa:	4616      	mov	r6, r2
   1a2ac:	b3a2      	cbz	r2, 1a318 <ip_interface_bind+0x7c>
   1a2ae:	4607      	mov	r7, r0
   1a2b0:	4688      	mov	r8, r1
   1a2b2:	f005 f917 	bl	1f4e4 <interface_socket_from_handle_get>
   1a2b6:	4605      	mov	r5, r0
   1a2b8:	2800      	cmp	r0, #0
   1a2ba:	d04a      	beq.n	1a352 <ip_interface_bind+0xb6>
   1a2bc:	6803      	ldr	r3, [r0, #0]
   1a2be:	b29b      	uxth	r3, r3
   1a2c0:	2b02      	cmp	r3, #2
   1a2c2:	d146      	bne.n	1a352 <ip_interface_bind+0xb6>
   1a2c4:	2100      	movs	r1, #0
   1a2c6:	a802      	add	r0, sp, #8
   1a2c8:	f840 1d04 	str.w	r1, [r0, #-4]!
   1a2cc:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1a2d0:	f7ff faa6 	bl	19820 <rpc_ip_client_request_alloc>
   1a2d4:	bb50      	cbnz	r0, 1a32c <ip_interface_bind+0x90>
   1a2d6:	f247 0305 	movw	r3, #28677	; 0x7005
   1a2da:	2208      	movs	r2, #8
   1a2dc:	9c01      	ldr	r4, [sp, #4]
   1a2de:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1a2e2:	60e3      	str	r3, [r4, #12]
   1a2e4:	f8c4 9010 	str.w	r9, [r4, #16]
   1a2e8:	7260      	strb	r0, [r4, #9]
   1a2ea:	72a0      	strb	r0, [r4, #10]
   1a2ec:	72e0      	strb	r0, [r4, #11]
   1a2ee:	7222      	strb	r2, [r4, #8]
   1a2f0:	68a3      	ldr	r3, [r4, #8]
   1a2f2:	3304      	adds	r3, #4
   1a2f4:	60a3      	str	r3, [r4, #8]
   1a2f6:	68eb      	ldr	r3, [r5, #12]
   1a2f8:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1a2fc:	4293      	cmp	r3, r2
   1a2fe:	d11a      	bne.n	1a336 <ip_interface_bind+0x9a>
   1a300:	f898 2000 	ldrb.w	r2, [r8]
   1a304:	4296      	cmp	r6, r2
   1a306:	d107      	bne.n	1a318 <ip_interface_bind+0x7c>
   1a308:	2b02      	cmp	r3, #2
   1a30a:	f104 0018 	add.w	r0, r4, #24
   1a30e:	d014      	beq.n	1a33a <ip_interface_bind+0x9e>
   1a310:	2b0a      	cmp	r3, #10
   1a312:	d101      	bne.n	1a318 <ip_interface_bind+0x7c>
   1a314:	2e24      	cmp	r6, #36	; 0x24
   1a316:	d01e      	beq.n	1a356 <ip_interface_bind+0xba>
   1a318:	2416      	movs	r4, #22
   1a31a:	4620      	mov	r0, r4
   1a31c:	f7fa fdd2 	bl	14ec4 <bsd_os_errno_set>
   1a320:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a324:	4620      	mov	r0, r4
   1a326:	b003      	add	sp, #12
   1a328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a32c:	9c01      	ldr	r4, [sp, #4]
   1a32e:	2c00      	cmp	r4, #0
   1a330:	d1de      	bne.n	1a2f0 <ip_interface_bind+0x54>
   1a332:	240c      	movs	r4, #12
   1a334:	e7f1      	b.n	1a31a <ip_interface_bind+0x7e>
   1a336:	242f      	movs	r4, #47	; 0x2f
   1a338:	e7ef      	b.n	1a31a <ip_interface_bind+0x7e>
   1a33a:	2e10      	cmp	r6, #16
   1a33c:	d1ec      	bne.n	1a318 <ip_interface_bind+0x7c>
   1a33e:	2204      	movs	r2, #4
   1a340:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1a344:	f108 010c 	add.w	r1, r8, #12
   1a348:	82e2      	strh	r2, [r4, #22]
   1a34a:	82a3      	strh	r3, [r4, #20]
   1a34c:	f00f f891 	bl	29472 <memcpy>
   1a350:	e00a      	b.n	1a368 <ip_interface_bind+0xcc>
   1a352:	2409      	movs	r4, #9
   1a354:	e7e1      	b.n	1a31a <ip_interface_bind+0x7e>
   1a356:	2210      	movs	r2, #16
   1a358:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1a35c:	eb08 0102 	add.w	r1, r8, r2
   1a360:	82e2      	strh	r2, [r4, #22]
   1a362:	82a3      	strh	r3, [r4, #20]
   1a364:	f00f f885 	bl	29472 <memcpy>
   1a368:	68a3      	ldr	r3, [r4, #8]
   1a36a:	8ae2      	ldrh	r2, [r4, #22]
   1a36c:	f247 0105 	movw	r1, #28677	; 0x7005
   1a370:	4413      	add	r3, r2
   1a372:	60a3      	str	r3, [r4, #8]
   1a374:	682b      	ldr	r3, [r5, #0]
   1a376:	4620      	mov	r0, r4
   1a378:	0c1b      	lsrs	r3, r3, #16
   1a37a:	041b      	lsls	r3, r3, #16
   1a37c:	f043 0303 	orr.w	r3, r3, #3
   1a380:	602b      	str	r3, [r5, #0]
   1a382:	682e      	ldr	r6, [r5, #0]
   1a384:	f7ff fa60 	bl	19848 <rpc_ip_client_request_send>
   1a388:	4680      	mov	r8, r0
   1a38a:	b978      	cbnz	r0, 1a3ac <ip_interface_bind+0x110>
   1a38c:	466b      	mov	r3, sp
   1a38e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a392:	2104      	movs	r1, #4
   1a394:	4638      	mov	r0, r7
   1a396:	f005 f825 	bl	1f3e4 <interface_socket_wait>
   1a39a:	4604      	mov	r4, r0
   1a39c:	b1a0      	cbz	r0, 1a3c8 <ip_interface_bind+0x12c>
   1a39e:	682b      	ldr	r3, [r5, #0]
   1a3a0:	0c1b      	lsrs	r3, r3, #16
   1a3a2:	041b      	lsls	r3, r3, #16
   1a3a4:	f043 0302 	orr.w	r3, r3, #2
   1a3a8:	602b      	str	r3, [r5, #0]
   1a3aa:	e7b6      	b.n	1a31a <ip_interface_bind+0x7e>
   1a3ac:	6820      	ldr	r0, [r4, #0]
   1a3ae:	b108      	cbz	r0, 1a3b4 <ip_interface_bind+0x118>
   1a3b0:	f7ff fa68 	bl	19884 <rpc_ip_client_data_free>
   1a3b4:	0c36      	lsrs	r6, r6, #16
   1a3b6:	0436      	lsls	r6, r6, #16
   1a3b8:	4620      	mov	r0, r4
   1a3ba:	f046 0602 	orr.w	r6, r6, #2
   1a3be:	f7ff fa59 	bl	19874 <rpc_ip_client_message_free>
   1a3c2:	2423      	movs	r4, #35	; 0x23
   1a3c4:	602e      	str	r6, [r5, #0]
   1a3c6:	e7a8      	b.n	1a31a <ip_interface_bind+0x7e>
   1a3c8:	4638      	mov	r0, r7
   1a3ca:	f005 f88b 	bl	1f4e4 <interface_socket_from_handle_get>
   1a3ce:	2800      	cmp	r0, #0
   1a3d0:	d0a8      	beq.n	1a324 <ip_interface_bind+0x88>
   1a3d2:	6844      	ldr	r4, [r0, #4]
   1a3d4:	2c00      	cmp	r4, #0
   1a3d6:	d0a5      	beq.n	1a324 <ip_interface_bind+0x88>
   1a3d8:	f8c0 8004 	str.w	r8, [r0, #4]
   1a3dc:	e7df      	b.n	1a39e <ip_interface_bind+0x102>
   1a3de:	bf00      	nop

0001a3e0 <ip_interface_listen>:
   1a3e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a3e8:	b082      	sub	sp, #8
   1a3ea:	4606      	mov	r6, r0
   1a3ec:	9300      	str	r3, [sp, #0]
   1a3ee:	f005 f879 	bl	1f4e4 <interface_socket_from_handle_get>
   1a3f2:	2800      	cmp	r0, #0
   1a3f4:	d066      	beq.n	1a4c4 <ip_interface_listen+0xe4>
   1a3f6:	6803      	ldr	r3, [r0, #0]
   1a3f8:	4605      	mov	r5, r0
   1a3fa:	b29b      	uxth	r3, r3
   1a3fc:	2b04      	cmp	r3, #4
   1a3fe:	d161      	bne.n	1a4c4 <ip_interface_listen+0xe4>
   1a400:	2100      	movs	r1, #0
   1a402:	4a32      	ldr	r2, [pc, #200]	; (1a4cc <ip_interface_listen+0xec>)
   1a404:	4630      	mov	r0, r6
   1a406:	f004 ffb5 	bl	1f374 <interface_socket_packet_handler_update>
   1a40a:	4601      	mov	r1, r0
   1a40c:	2800      	cmp	r0, #0
   1a40e:	d15b      	bne.n	1a4c8 <ip_interface_listen+0xe8>
   1a410:	a802      	add	r0, sp, #8
   1a412:	f840 1d04 	str.w	r1, [r0, #-4]!
   1a416:	69af      	ldr	r7, [r5, #24]
   1a418:	f7ff fa02 	bl	19820 <rpc_ip_client_request_alloc>
   1a41c:	bba0      	cbnz	r0, 1a488 <ip_interface_listen+0xa8>
   1a41e:	f247 0308 	movw	r3, #28680	; 0x7008
   1a422:	2208      	movs	r2, #8
   1a424:	9c01      	ldr	r4, [sp, #4]
   1a426:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1a42a:	60e3      	str	r3, [r4, #12]
   1a42c:	6127      	str	r7, [r4, #16]
   1a42e:	7260      	strb	r0, [r4, #9]
   1a430:	72a0      	strb	r0, [r4, #10]
   1a432:	72e0      	strb	r0, [r4, #11]
   1a434:	7222      	strb	r2, [r4, #8]
   1a436:	68a3      	ldr	r3, [r4, #8]
   1a438:	f247 0108 	movw	r1, #28680	; 0x7008
   1a43c:	3304      	adds	r3, #4
   1a43e:	60a3      	str	r3, [r4, #8]
   1a440:	682b      	ldr	r3, [r5, #0]
   1a442:	4620      	mov	r0, r4
   1a444:	0c1b      	lsrs	r3, r3, #16
   1a446:	041b      	lsls	r3, r3, #16
   1a448:	f043 0306 	orr.w	r3, r3, #6
   1a44c:	602b      	str	r3, [r5, #0]
   1a44e:	682f      	ldr	r7, [r5, #0]
   1a450:	f7ff f9fa 	bl	19848 <rpc_ip_client_request_send>
   1a454:	4680      	mov	r8, r0
   1a456:	b9e0      	cbnz	r0, 1a492 <ip_interface_listen+0xb2>
   1a458:	466b      	mov	r3, sp
   1a45a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a45e:	2107      	movs	r1, #7
   1a460:	4630      	mov	r0, r6
   1a462:	f004 ffbf 	bl	1f3e4 <interface_socket_wait>
   1a466:	4604      	mov	r4, r0
   1a468:	b308      	cbz	r0, 1a4ae <ip_interface_listen+0xce>
   1a46a:	682b      	ldr	r3, [r5, #0]
   1a46c:	0c1b      	lsrs	r3, r3, #16
   1a46e:	041b      	lsls	r3, r3, #16
   1a470:	f043 0304 	orr.w	r3, r3, #4
   1a474:	602b      	str	r3, [r5, #0]
   1a476:	4620      	mov	r0, r4
   1a478:	f7fa fd24 	bl	14ec4 <bsd_os_errno_set>
   1a47c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a480:	4620      	mov	r0, r4
   1a482:	b002      	add	sp, #8
   1a484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a488:	9c01      	ldr	r4, [sp, #4]
   1a48a:	2c00      	cmp	r4, #0
   1a48c:	d1d3      	bne.n	1a436 <ip_interface_listen+0x56>
   1a48e:	240c      	movs	r4, #12
   1a490:	e7f1      	b.n	1a476 <ip_interface_listen+0x96>
   1a492:	6820      	ldr	r0, [r4, #0]
   1a494:	b108      	cbz	r0, 1a49a <ip_interface_listen+0xba>
   1a496:	f7ff f9f5 	bl	19884 <rpc_ip_client_data_free>
   1a49a:	0c3f      	lsrs	r7, r7, #16
   1a49c:	043f      	lsls	r7, r7, #16
   1a49e:	4620      	mov	r0, r4
   1a4a0:	f047 0704 	orr.w	r7, r7, #4
   1a4a4:	f7ff f9e6 	bl	19874 <rpc_ip_client_message_free>
   1a4a8:	2423      	movs	r4, #35	; 0x23
   1a4aa:	602f      	str	r7, [r5, #0]
   1a4ac:	e7e3      	b.n	1a476 <ip_interface_listen+0x96>
   1a4ae:	4630      	mov	r0, r6
   1a4b0:	f005 f818 	bl	1f4e4 <interface_socket_from_handle_get>
   1a4b4:	2800      	cmp	r0, #0
   1a4b6:	d0e3      	beq.n	1a480 <ip_interface_listen+0xa0>
   1a4b8:	6844      	ldr	r4, [r0, #4]
   1a4ba:	2c00      	cmp	r4, #0
   1a4bc:	d0e0      	beq.n	1a480 <ip_interface_listen+0xa0>
   1a4be:	f8c0 8004 	str.w	r8, [r0, #4]
   1a4c2:	e7d2      	b.n	1a46a <ip_interface_listen+0x8a>
   1a4c4:	2409      	movs	r4, #9
   1a4c6:	e7d6      	b.n	1a476 <ip_interface_listen+0x96>
   1a4c8:	2423      	movs	r4, #35	; 0x23
   1a4ca:	e7d4      	b.n	1a476 <ip_interface_listen+0x96>
   1a4cc:	00019895 	.word	0x00019895

0001a4d0 <ip_interface_accept>:
   1a4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a4d8:	2500      	movs	r5, #0
   1a4da:	b087      	sub	sp, #28
   1a4dc:	460f      	mov	r7, r1
   1a4de:	4690      	mov	r8, r2
   1a4e0:	e9cd 5303 	strd	r5, r3, [sp, #12]
   1a4e4:	4606      	mov	r6, r0
   1a4e6:	f004 fffd 	bl	1f4e4 <interface_socket_from_handle_get>
   1a4ea:	4604      	mov	r4, r0
   1a4ec:	2800      	cmp	r0, #0
   1a4ee:	f000 8123 	beq.w	1a738 <ip_interface_accept+0x268>
   1a4f2:	6803      	ldr	r3, [r0, #0]
   1a4f4:	b29b      	uxth	r3, r3
   1a4f6:	2b07      	cmp	r3, #7
   1a4f8:	d10a      	bne.n	1a510 <ip_interface_accept+0x40>
   1a4fa:	6803      	ldr	r3, [r0, #0]
   1a4fc:	6805      	ldr	r5, [r0, #0]
   1a4fe:	00db      	lsls	r3, r3, #3
   1a500:	d416      	bmi.n	1a530 <ip_interface_accept+0x60>
   1a502:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1a506:	d019      	beq.n	1a53c <ip_interface_accept+0x6c>
   1a508:	6805      	ldr	r5, [r0, #0]
   1a50a:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1a50e:	d124      	bne.n	1a55a <ip_interface_accept+0x8a>
   1a510:	f04f 0909 	mov.w	r9, #9
   1a514:	9b03      	ldr	r3, [sp, #12]
   1a516:	b113      	cbz	r3, 1a51e <ip_interface_accept+0x4e>
   1a518:	4628      	mov	r0, r5
   1a51a:	f004 ff15 	bl	1f348 <interface_socket_free>
   1a51e:	4648      	mov	r0, r9
   1a520:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1a524:	f7fa fcce 	bl	14ec4 <bsd_os_errno_set>
   1a528:	4648      	mov	r0, r9
   1a52a:	b007      	add	sp, #28
   1a52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a530:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1a534:	d170      	bne.n	1a618 <ip_interface_accept+0x148>
   1a536:	f04f 0923 	mov.w	r9, #35	; 0x23
   1a53a:	e7eb      	b.n	1a514 <ip_interface_accept+0x44>
   1a53c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a540:	ab04      	add	r3, sp, #16
   1a542:	4611      	mov	r1, r2
   1a544:	4630      	mov	r0, r6
   1a546:	f004 ff4d 	bl	1f3e4 <interface_socket_wait>
   1a54a:	4681      	mov	r9, r0
   1a54c:	2800      	cmp	r0, #0
   1a54e:	f000 8082 	beq.w	1a656 <ip_interface_accept+0x186>
   1a552:	6825      	ldr	r5, [r4, #0]
   1a554:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1a558:	d0dc      	beq.n	1a514 <ip_interface_accept+0x44>
   1a55a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a55e:	2300      	movs	r3, #0
   1a560:	e9cd 0300 	strd	r0, r3, [sp]
   1a564:	4a78      	ldr	r2, [pc, #480]	; (1a748 <ip_interface_accept+0x278>)
   1a566:	6921      	ldr	r1, [r4, #16]
   1a568:	a803      	add	r0, sp, #12
   1a56a:	f004 fe89 	bl	1f280 <interface_socket_allocate>
   1a56e:	9b03      	ldr	r3, [sp, #12]
   1a570:	4605      	mov	r5, r0
   1a572:	2b00      	cmp	r3, #0
   1a574:	f000 80e4 	beq.w	1a740 <ip_interface_accept+0x270>
   1a578:	2100      	movs	r1, #0
   1a57a:	6962      	ldr	r2, [r4, #20]
   1a57c:	a806      	add	r0, sp, #24
   1a57e:	615a      	str	r2, [r3, #20]
   1a580:	68e2      	ldr	r2, [r4, #12]
   1a582:	f840 1d04 	str.w	r1, [r0, #-4]!
   1a586:	60da      	str	r2, [r3, #12]
   1a588:	6922      	ldr	r2, [r4, #16]
   1a58a:	611a      	str	r2, [r3, #16]
   1a58c:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1a590:	f7ff f946 	bl	19820 <rpc_ip_client_request_alloc>
   1a594:	2800      	cmp	r0, #0
   1a596:	d146      	bne.n	1a626 <ip_interface_accept+0x156>
   1a598:	f247 030c 	movw	r3, #28684	; 0x700c
   1a59c:	2108      	movs	r1, #8
   1a59e:	f8dd b014 	ldr.w	fp, [sp, #20]
   1a5a2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1a5a6:	f8cb 300c 	str.w	r3, [fp, #12]
   1a5aa:	f8cb 9010 	str.w	r9, [fp, #16]
   1a5ae:	f88b 0009 	strb.w	r0, [fp, #9]
   1a5b2:	f88b 000a 	strb.w	r0, [fp, #10]
   1a5b6:	f88b 000b 	strb.w	r0, [fp, #11]
   1a5ba:	f88b 1008 	strb.w	r1, [fp, #8]
   1a5be:	6823      	ldr	r3, [r4, #0]
   1a5c0:	f247 010c 	movw	r1, #28684	; 0x700c
   1a5c4:	0c1b      	lsrs	r3, r3, #16
   1a5c6:	041b      	lsls	r3, r3, #16
   1a5c8:	f043 0308 	orr.w	r3, r3, #8
   1a5cc:	6023      	str	r3, [r4, #0]
   1a5ce:	4658      	mov	r0, fp
   1a5d0:	f8d4 9000 	ldr.w	r9, [r4]
   1a5d4:	f7ff f938 	bl	19848 <rpc_ip_client_request_send>
   1a5d8:	4682      	mov	sl, r0
   1a5da:	bb60      	cbnz	r0, 1a636 <ip_interface_accept+0x166>
   1a5dc:	6822      	ldr	r2, [r4, #0]
   1a5de:	9900      	ldr	r1, [sp, #0]
   1a5e0:	ab04      	add	r3, sp, #16
   1a5e2:	400a      	ands	r2, r1
   1a5e4:	6022      	str	r2, [r4, #0]
   1a5e6:	2109      	movs	r1, #9
   1a5e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a5ec:	4630      	mov	r0, r6
   1a5ee:	f004 fef9 	bl	1f3e4 <interface_socket_wait>
   1a5f2:	4681      	mov	r9, r0
   1a5f4:	2800      	cmp	r0, #0
   1a5f6:	f000 808d 	beq.w	1a714 <ip_interface_accept+0x244>
   1a5fa:	6823      	ldr	r3, [r4, #0]
   1a5fc:	9a01      	ldr	r2, [sp, #4]
   1a5fe:	431a      	orrs	r2, r3
   1a600:	6022      	str	r2, [r4, #0]
   1a602:	6823      	ldr	r3, [r4, #0]
   1a604:	0c1b      	lsrs	r3, r3, #16
   1a606:	041b      	lsls	r3, r3, #16
   1a608:	f043 0307 	orr.w	r3, r3, #7
   1a60c:	6023      	str	r3, [r4, #0]
   1a60e:	6823      	ldr	r3, [r4, #0]
   1a610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1a614:	6023      	str	r3, [r4, #0]
   1a616:	e77d      	b.n	1a514 <ip_interface_accept+0x44>
   1a618:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   1a61c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a620:	e9cd 2300 	strd	r2, r3, [sp]
   1a624:	e79e      	b.n	1a564 <ip_interface_accept+0x94>
   1a626:	f8dd b014 	ldr.w	fp, [sp, #20]
   1a62a:	f04f 090c 	mov.w	r9, #12
   1a62e:	f1bb 0f00 	cmp.w	fp, #0
   1a632:	d1c4      	bne.n	1a5be <ip_interface_accept+0xee>
   1a634:	e76e      	b.n	1a514 <ip_interface_accept+0x44>
   1a636:	f8db 0000 	ldr.w	r0, [fp]
   1a63a:	b108      	cbz	r0, 1a640 <ip_interface_accept+0x170>
   1a63c:	f7ff f922 	bl	19884 <rpc_ip_client_data_free>
   1a640:	ea4f 4919 	mov.w	r9, r9, lsr #16
   1a644:	4658      	mov	r0, fp
   1a646:	ea4f 4909 	mov.w	r9, r9, lsl #16
   1a64a:	f7ff f913 	bl	19874 <rpc_ip_client_message_free>
   1a64e:	f049 0307 	orr.w	r3, r9, #7
   1a652:	6023      	str	r3, [r4, #0]
   1a654:	e76f      	b.n	1a536 <ip_interface_accept+0x66>
   1a656:	4630      	mov	r0, r6
   1a658:	f004 ff44 	bl	1f4e4 <interface_socket_from_handle_get>
   1a65c:	b130      	cbz	r0, 1a66c <ip_interface_accept+0x19c>
   1a65e:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1a662:	f1b9 0f00 	cmp.w	r9, #0
   1a666:	d001      	beq.n	1a66c <ip_interface_accept+0x19c>
   1a668:	6045      	str	r5, [r0, #4]
   1a66a:	e772      	b.n	1a552 <ip_interface_accept+0x82>
   1a66c:	6823      	ldr	r3, [r4, #0]
   1a66e:	03d9      	lsls	r1, r3, #15
   1a670:	f53f af73 	bmi.w	1a55a <ip_interface_accept+0x8a>
   1a674:	4d35      	ldr	r5, [pc, #212]	; (1a74c <ip_interface_accept+0x27c>)
   1a676:	9903      	ldr	r1, [sp, #12]
   1a678:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1a67c:	699b      	ldr	r3, [r3, #24]
   1a67e:	618b      	str	r3, [r1, #24]
   1a680:	b147      	cbz	r7, 1a694 <ip_interface_accept+0x1c4>
   1a682:	68cb      	ldr	r3, [r1, #12]
   1a684:	2b0a      	cmp	r3, #10
   1a686:	d028      	beq.n	1a6da <ip_interface_accept+0x20a>
   1a688:	2b02      	cmp	r3, #2
   1a68a:	d103      	bne.n	1a694 <ip_interface_accept+0x1c4>
   1a68c:	f8d8 2000 	ldr.w	r2, [r8]
   1a690:	2a10      	cmp	r2, #16
   1a692:	d036      	beq.n	1a702 <ip_interface_accept+0x232>
   1a694:	680a      	ldr	r2, [r1, #0]
   1a696:	482e      	ldr	r0, [pc, #184]	; (1a750 <ip_interface_accept+0x280>)
   1a698:	4002      	ands	r2, r0
   1a69a:	f042 0205 	orr.w	r2, r2, #5
   1a69e:	600a      	str	r2, [r1, #0]
   1a6a0:	9a03      	ldr	r2, [sp, #12]
   1a6a2:	6811      	ldr	r1, [r2, #0]
   1a6a4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   1a6a8:	6011      	str	r1, [r2, #0]
   1a6aa:	6811      	ldr	r1, [r2, #0]
   1a6ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1a6b0:	6011      	str	r1, [r2, #0]
   1a6b2:	6823      	ldr	r3, [r4, #0]
   1a6b4:	4003      	ands	r3, r0
   1a6b6:	f043 0307 	orr.w	r3, r3, #7
   1a6ba:	6023      	str	r3, [r4, #0]
   1a6bc:	6823      	ldr	r3, [r4, #0]
   1a6be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1a6c2:	6023      	str	r3, [r4, #0]
   1a6c4:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1a6c8:	f7ff f8d4 	bl	19874 <rpc_ip_client_message_free>
   1a6cc:	2300      	movs	r3, #0
   1a6ce:	4648      	mov	r0, r9
   1a6d0:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   1a6d4:	b007      	add	sp, #28
   1a6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6da:	f8d8 2000 	ldr.w	r2, [r8]
   1a6de:	2a24      	cmp	r2, #36	; 0x24
   1a6e0:	d1d8      	bne.n	1a694 <ip_interface_accept+0x1c4>
   1a6e2:	703a      	strb	r2, [r7, #0]
   1a6e4:	2210      	movs	r2, #16
   1a6e6:	607b      	str	r3, [r7, #4]
   1a6e8:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1a6ec:	f107 0010 	add.w	r0, r7, #16
   1a6f0:	8b9b      	ldrh	r3, [r3, #28]
   1a6f2:	813b      	strh	r3, [r7, #8]
   1a6f4:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   1a6f8:	3120      	adds	r1, #32
   1a6fa:	f00e feba 	bl	29472 <memcpy>
   1a6fe:	9903      	ldr	r1, [sp, #12]
   1a700:	e7c8      	b.n	1a694 <ip_interface_accept+0x1c4>
   1a702:	703a      	strb	r2, [r7, #0]
   1a704:	607b      	str	r3, [r7, #4]
   1a706:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1a70a:	f107 000c 	add.w	r0, r7, #12
   1a70e:	8b9b      	ldrh	r3, [r3, #28]
   1a710:	2204      	movs	r2, #4
   1a712:	e7ee      	b.n	1a6f2 <ip_interface_accept+0x222>
   1a714:	4630      	mov	r0, r6
   1a716:	f004 fee5 	bl	1f4e4 <interface_socket_from_handle_get>
   1a71a:	b138      	cbz	r0, 1a72c <ip_interface_accept+0x25c>
   1a71c:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1a720:	f1b9 0f00 	cmp.w	r9, #0
   1a724:	d002      	beq.n	1a72c <ip_interface_accept+0x25c>
   1a726:	f8c0 a004 	str.w	sl, [r0, #4]
   1a72a:	e766      	b.n	1a5fa <ip_interface_accept+0x12a>
   1a72c:	6823      	ldr	r3, [r4, #0]
   1a72e:	9a01      	ldr	r2, [sp, #4]
   1a730:	46a9      	mov	r9, r5
   1a732:	4313      	orrs	r3, r2
   1a734:	6023      	str	r3, [r4, #0]
   1a736:	e79d      	b.n	1a674 <ip_interface_accept+0x1a4>
   1a738:	4605      	mov	r5, r0
   1a73a:	f04f 0909 	mov.w	r9, #9
   1a73e:	e6e9      	b.n	1a514 <ip_interface_accept+0x44>
   1a740:	f04f 090c 	mov.w	r9, #12
   1a744:	e6eb      	b.n	1a51e <ip_interface_accept+0x4e>
   1a746:	bf00      	nop
   1a748:	00019895 	.word	0x00019895
   1a74c:	20023320 	.word	0x20023320
   1a750:	ffff0000 	.word	0xffff0000

0001a754 <ip_interface_setopt>:
   1a754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a758:	2901      	cmp	r1, #1
   1a75a:	b086      	sub	sp, #24
   1a75c:	f040 809d 	bne.w	1a89a <ip_interface_setopt+0x146>
   1a760:	460e      	mov	r6, r1
   1a762:	4690      	mov	r8, r2
   1a764:	461d      	mov	r5, r3
   1a766:	4607      	mov	r7, r0
   1a768:	f004 febc 	bl	1f4e4 <interface_socket_from_handle_get>
   1a76c:	4604      	mov	r4, r0
   1a76e:	2800      	cmp	r0, #0
   1a770:	f000 80a6 	beq.w	1a8c0 <ip_interface_setopt+0x16c>
   1a774:	f1b8 0f19 	cmp.w	r8, #25
   1a778:	d16f      	bne.n	1a85a <ip_interface_setopt+0x106>
   1a77a:	2d00      	cmp	r5, #0
   1a77c:	f000 8093 	beq.w	1a8a6 <ip_interface_setopt+0x152>
   1a780:	4628      	mov	r0, r5
   1a782:	f7f2 fbd9 	bl	cf38 <strlen>
   1a786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a788:	4298      	cmp	r0, r3
   1a78a:	f040 808c 	bne.w	1a8a6 <ip_interface_setopt+0x152>
   1a78e:	6823      	ldr	r3, [r4, #0]
   1a790:	b29b      	uxth	r3, r3
   1a792:	2b02      	cmp	r3, #2
   1a794:	d174      	bne.n	1a880 <ip_interface_setopt+0x12c>
   1a796:	4629      	mov	r1, r5
   1a798:	68e0      	ldr	r0, [r4, #12]
   1a79a:	f002 fbd9 	bl	1cf50 <pdn_interface_pdn_id_get>
   1a79e:	9003      	str	r0, [sp, #12]
   1a7a0:	3001      	adds	r0, #1
   1a7a2:	bf08      	it	eq
   1a7a4:	2516      	moveq	r5, #22
   1a7a6:	d04f      	beq.n	1a848 <ip_interface_setopt+0xf4>
   1a7a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a7ac:	9304      	str	r3, [sp, #16]
   1a7ae:	6823      	ldr	r3, [r4, #0]
   1a7b0:	025b      	lsls	r3, r3, #9
   1a7b2:	d448      	bmi.n	1a846 <ip_interface_setopt+0xf2>
   1a7b4:	6823      	ldr	r3, [r4, #0]
   1a7b6:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   1a7ba:	d144      	bne.n	1a846 <ip_interface_setopt+0xf2>
   1a7bc:	6826      	ldr	r6, [r4, #0]
   1a7be:	6822      	ldr	r2, [r4, #0]
   1a7c0:	a806      	add	r0, sp, #24
   1a7c2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   1a7c6:	6022      	str	r2, [r4, #0]
   1a7c8:	2104      	movs	r1, #4
   1a7ca:	f840 3d04 	str.w	r3, [r0, #-4]!
   1a7ce:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1a7d2:	f7ff f825 	bl	19820 <rpc_ip_client_request_alloc>
   1a7d6:	2800      	cmp	r0, #0
   1a7d8:	d14c      	bne.n	1a874 <ip_interface_setopt+0x120>
   1a7da:	f247 0203 	movw	r2, #28675	; 0x7003
   1a7de:	2300      	movs	r3, #0
   1a7e0:	2108      	movs	r1, #8
   1a7e2:	9d05      	ldr	r5, [sp, #20]
   1a7e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   1a7e8:	60ea      	str	r2, [r5, #12]
   1a7ea:	f8c5 8010 	str.w	r8, [r5, #16]
   1a7ee:	7229      	strb	r1, [r5, #8]
   1a7f0:	726b      	strb	r3, [r5, #9]
   1a7f2:	72ab      	strb	r3, [r5, #10]
   1a7f4:	72eb      	strb	r3, [r5, #11]
   1a7f6:	f04f 0c08 	mov.w	ip, #8
   1a7fa:	2300      	movs	r3, #0
   1a7fc:	2010      	movs	r0, #16
   1a7fe:	2130      	movs	r1, #48	; 0x30
   1a800:	68aa      	ldr	r2, [r5, #8]
   1a802:	756b      	strb	r3, [r5, #21]
   1a804:	4462      	add	r2, ip
   1a806:	60aa      	str	r2, [r5, #8]
   1a808:	75ab      	strb	r3, [r5, #22]
   1a80a:	75eb      	strb	r3, [r5, #23]
   1a80c:	76ab      	strb	r3, [r5, #26]
   1a80e:	76eb      	strb	r3, [r5, #27]
   1a810:	f885 c014 	strb.w	ip, [r5, #20]
   1a814:	7628      	strb	r0, [r5, #24]
   1a816:	7669      	strb	r1, [r5, #25]
   1a818:	2204      	movs	r2, #4
   1a81a:	a903      	add	r1, sp, #12
   1a81c:	6828      	ldr	r0, [r5, #0]
   1a81e:	f00e fe28 	bl	29472 <memcpy>
   1a822:	f247 0103 	movw	r1, #28675	; 0x7003
   1a826:	4628      	mov	r0, r5
   1a828:	f7ff f80e 	bl	19848 <rpc_ip_client_request_send>
   1a82c:	4680      	mov	r8, r0
   1a82e:	bb48      	cbnz	r0, 1a884 <ip_interface_setopt+0x130>
   1a830:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1a834:	ab04      	add	r3, sp, #16
   1a836:	4611      	mov	r1, r2
   1a838:	4638      	mov	r0, r7
   1a83a:	f004 fdd3 	bl	1f3e4 <interface_socket_wait>
   1a83e:	4605      	mov	r5, r0
   1a840:	b398      	cbz	r0, 1a8aa <ip_interface_setopt+0x156>
   1a842:	6026      	str	r6, [r4, #0]
   1a844:	e000      	b.n	1a848 <ip_interface_setopt+0xf4>
   1a846:	2523      	movs	r5, #35	; 0x23
   1a848:	4628      	mov	r0, r5
   1a84a:	f7fa fb3b 	bl	14ec4 <bsd_os_errno_set>
   1a84e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a852:	4628      	mov	r0, r5
   1a854:	b006      	add	sp, #24
   1a856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a85a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a85c:	4642      	mov	r2, r8
   1a85e:	9300      	str	r3, [sp, #0]
   1a860:	4631      	mov	r1, r6
   1a862:	462b      	mov	r3, r5
   1a864:	4638      	mov	r0, r7
   1a866:	f004 fe65 	bl	1f534 <interface_socket_setopt>
   1a86a:	4605      	mov	r5, r0
   1a86c:	4628      	mov	r0, r5
   1a86e:	b006      	add	sp, #24
   1a870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a874:	9d05      	ldr	r5, [sp, #20]
   1a876:	2d00      	cmp	r5, #0
   1a878:	d1bd      	bne.n	1a7f6 <ip_interface_setopt+0xa2>
   1a87a:	6026      	str	r6, [r4, #0]
   1a87c:	250c      	movs	r5, #12
   1a87e:	e7e3      	b.n	1a848 <ip_interface_setopt+0xf4>
   1a880:	2509      	movs	r5, #9
   1a882:	e7e1      	b.n	1a848 <ip_interface_setopt+0xf4>
   1a884:	6828      	ldr	r0, [r5, #0]
   1a886:	b108      	cbz	r0, 1a88c <ip_interface_setopt+0x138>
   1a888:	f7fe fffc 	bl	19884 <rpc_ip_client_data_free>
   1a88c:	4628      	mov	r0, r5
   1a88e:	f7fe fff1 	bl	19874 <rpc_ip_client_message_free>
   1a892:	2523      	movs	r5, #35	; 0x23
   1a894:	6026      	str	r6, [r4, #0]
   1a896:	6026      	str	r6, [r4, #0]
   1a898:	e7d6      	b.n	1a848 <ip_interface_setopt+0xf4>
   1a89a:	202a      	movs	r0, #42	; 0x2a
   1a89c:	f7fa fb12 	bl	14ec4 <bsd_os_errno_set>
   1a8a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a8a4:	e7d5      	b.n	1a852 <ip_interface_setopt+0xfe>
   1a8a6:	250e      	movs	r5, #14
   1a8a8:	e7ce      	b.n	1a848 <ip_interface_setopt+0xf4>
   1a8aa:	4638      	mov	r0, r7
   1a8ac:	f004 fe1a 	bl	1f4e4 <interface_socket_from_handle_get>
   1a8b0:	b120      	cbz	r0, 1a8bc <ip_interface_setopt+0x168>
   1a8b2:	6845      	ldr	r5, [r0, #4]
   1a8b4:	b115      	cbz	r5, 1a8bc <ip_interface_setopt+0x168>
   1a8b6:	f8c0 8004 	str.w	r8, [r0, #4]
   1a8ba:	e7c2      	b.n	1a842 <ip_interface_setopt+0xee>
   1a8bc:	6026      	str	r6, [r4, #0]
   1a8be:	e7c8      	b.n	1a852 <ip_interface_setopt+0xfe>
   1a8c0:	2009      	movs	r0, #9
   1a8c2:	f7fa faff 	bl	14ec4 <bsd_os_errno_set>
   1a8c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a8ca:	e7c2      	b.n	1a852 <ip_interface_setopt+0xfe>

0001a8cc <ip_interface_getopt>:
   1a8cc:	f004 be78 	b.w	1f5c0 <interface_socket_getopt>

0001a8d0 <ip_interface_getaddrinfo>:
   1a8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8d4:	f04f 0c00 	mov.w	ip, #0
   1a8d8:	2401      	movs	r4, #1
   1a8da:	4e72      	ldr	r6, [pc, #456]	; (1aaa4 <ip_interface_getaddrinfo+0x1d4>)
   1a8dc:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 1aab0 <ip_interface_getaddrinfo+0x1e0>
   1a8e0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 1aab4 <ip_interface_getaddrinfo+0x1e4>
   1a8e4:	b085      	sub	sp, #20
   1a8e6:	4607      	mov	r7, r0
   1a8e8:	4615      	mov	r5, r2
   1a8ea:	9301      	str	r3, [sp, #4]
   1a8ec:	f8a6 c000 	strh.w	ip, [r6]
   1a8f0:	f8ca 4000 	str.w	r4, [sl]
   1a8f4:	f8c9 4000 	str.w	r4, [r9]
   1a8f8:	b171      	cbz	r1, 1a918 <ip_interface_getaddrinfo+0x48>
   1a8fa:	4608      	mov	r0, r1
   1a8fc:	220a      	movs	r2, #10
   1a8fe:	4661      	mov	r1, ip
   1a900:	f007 fb64 	bl	21fcc <strtol>
   1a904:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1a908:	1e42      	subs	r2, r0, #1
   1a90a:	429a      	cmp	r2, r3
   1a90c:	f200 8083 	bhi.w	1aa16 <ip_interface_getaddrinfo+0x146>
   1a910:	0203      	lsls	r3, r0, #8
   1a912:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   1a916:	8030      	strh	r0, [r6, #0]
   1a918:	f8df 819c 	ldr.w	r8, [pc, #412]	; 1aab8 <ip_interface_getaddrinfo+0x1e8>
   1a91c:	f8d8 3000 	ldr.w	r3, [r8]
   1a920:	2b00      	cmp	r3, #0
   1a922:	d174      	bne.n	1aa0e <ip_interface_getaddrinfo+0x13e>
   1a924:	4a60      	ldr	r2, [pc, #384]	; (1aaa8 <ip_interface_getaddrinfo+0x1d8>)
   1a926:	6013      	str	r3, [r2, #0]
   1a928:	4a60      	ldr	r2, [pc, #384]	; (1aaac <ip_interface_getaddrinfo+0x1dc>)
   1a92a:	6013      	str	r3, [r2, #0]
   1a92c:	2f00      	cmp	r7, #0
   1a92e:	d062      	beq.n	1a9f6 <ip_interface_getaddrinfo+0x126>
   1a930:	4638      	mov	r0, r7
   1a932:	f7f2 fb01 	bl	cf38 <strlen>
   1a936:	4683      	mov	fp, r0
   1a938:	b125      	cbz	r5, 1a944 <ip_interface_getaddrinfo+0x74>
   1a93a:	69ea      	ldr	r2, [r5, #28]
   1a93c:	b112      	cbz	r2, 1a944 <ip_interface_getaddrinfo+0x74>
   1a93e:	6851      	ldr	r1, [r2, #4]
   1a940:	2966      	cmp	r1, #102	; 0x66
   1a942:	d06c      	beq.n	1aa1e <ip_interface_getaddrinfo+0x14e>
   1a944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a948:	2100      	movs	r1, #0
   1a94a:	ae04      	add	r6, sp, #16
   1a94c:	f846 1d04 	str.w	r1, [r6, #-4]!
   1a950:	4630      	mov	r0, r6
   1a952:	4659      	mov	r1, fp
   1a954:	9200      	str	r2, [sp, #0]
   1a956:	f7fe ff63 	bl	19820 <rpc_ip_client_request_alloc>
   1a95a:	9a00      	ldr	r2, [sp, #0]
   1a95c:	2800      	cmp	r0, #0
   1a95e:	d14c      	bne.n	1a9fa <ip_interface_getaddrinfo+0x12a>
   1a960:	f247 010d 	movw	r1, #28685	; 0x700d
   1a964:	f04f 0c08 	mov.w	ip, #8
   1a968:	9c03      	ldr	r4, [sp, #12]
   1a96a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1a96e:	60e1      	str	r1, [r4, #12]
   1a970:	6122      	str	r2, [r4, #16]
   1a972:	7260      	strb	r0, [r4, #9]
   1a974:	72a0      	strb	r0, [r4, #10]
   1a976:	72e0      	strb	r0, [r4, #11]
   1a978:	f884 c008 	strb.w	ip, [r4, #8]
   1a97c:	2d00      	cmp	r5, #0
   1a97e:	d076      	beq.n	1aa6e <ip_interface_getaddrinfo+0x19e>
   1a980:	686a      	ldr	r2, [r5, #4]
   1a982:	f022 0108 	bic.w	r1, r2, #8
   1a986:	2902      	cmp	r1, #2
   1a988:	d05c      	beq.n	1aa44 <ip_interface_getaddrinfo+0x174>
   1a98a:	2a05      	cmp	r2, #5
   1a98c:	d178      	bne.n	1aa80 <ip_interface_getaddrinfo+0x1b0>
   1a98e:	68a9      	ldr	r1, [r5, #8]
   1a990:	2902      	cmp	r1, #2
   1a992:	f8c9 1000 	str.w	r1, [r9]
   1a996:	d061      	beq.n	1aa5c <ip_interface_getaddrinfo+0x18c>
   1a998:	61a2      	str	r2, [r4, #24]
   1a99a:	68ea      	ldr	r2, [r5, #12]
   1a99c:	6222      	str	r2, [r4, #32]
   1a99e:	68aa      	ldr	r2, [r5, #8]
   1a9a0:	61e2      	str	r2, [r4, #28]
   1a9a2:	682a      	ldr	r2, [r5, #0]
   1a9a4:	6162      	str	r2, [r4, #20]
   1a9a6:	68a2      	ldr	r2, [r4, #8]
   1a9a8:	3210      	adds	r2, #16
   1a9aa:	60a2      	str	r2, [r4, #8]
   1a9ac:	b12f      	cbz	r7, 1a9ba <ip_interface_getaddrinfo+0xea>
   1a9ae:	6820      	ldr	r0, [r4, #0]
   1a9b0:	b118      	cbz	r0, 1a9ba <ip_interface_getaddrinfo+0xea>
   1a9b2:	465a      	mov	r2, fp
   1a9b4:	4639      	mov	r1, r7
   1a9b6:	f00e fd5c 	bl	29472 <memcpy>
   1a9ba:	2301      	movs	r3, #1
   1a9bc:	f247 010d 	movw	r1, #28685	; 0x700d
   1a9c0:	4620      	mov	r0, r4
   1a9c2:	f8c8 3000 	str.w	r3, [r8]
   1a9c6:	f7fe ff3f 	bl	19848 <rpc_ip_client_request_send>
   1a9ca:	2800      	cmp	r0, #0
   1a9cc:	d156      	bne.n	1aa7c <ip_interface_getaddrinfo+0x1ac>
   1a9ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a9d2:	9303      	str	r3, [sp, #12]
   1a9d4:	4631      	mov	r1, r6
   1a9d6:	4620      	mov	r0, r4
   1a9d8:	f7fa f9be 	bl	14d58 <bsd_os_timedwait>
   1a9dc:	f8d8 3000 	ldr.w	r3, [r8]
   1a9e0:	2b01      	cmp	r3, #1
   1a9e2:	d0f7      	beq.n	1a9d4 <ip_interface_getaddrinfo+0x104>
   1a9e4:	4b31      	ldr	r3, [pc, #196]	; (1aaac <ip_interface_getaddrinfo+0x1dc>)
   1a9e6:	6818      	ldr	r0, [r3, #0]
   1a9e8:	2800      	cmp	r0, #0
   1a9ea:	d13b      	bne.n	1aa64 <ip_interface_getaddrinfo+0x194>
   1a9ec:	4b2e      	ldr	r3, [pc, #184]	; (1aaa8 <ip_interface_getaddrinfo+0x1d8>)
   1a9ee:	9a01      	ldr	r2, [sp, #4]
   1a9f0:	681b      	ldr	r3, [r3, #0]
   1a9f2:	6013      	str	r3, [r2, #0]
   1a9f4:	e00c      	b.n	1aa10 <ip_interface_getaddrinfo+0x140>
   1a9f6:	46bb      	mov	fp, r7
   1a9f8:	e79e      	b.n	1a938 <ip_interface_getaddrinfo+0x68>
   1a9fa:	9c03      	ldr	r4, [sp, #12]
   1a9fc:	2c00      	cmp	r4, #0
   1a9fe:	d1bd      	bne.n	1a97c <ip_interface_getaddrinfo+0xac>
   1aa00:	200c      	movs	r0, #12
   1aa02:	2300      	movs	r3, #0
   1aa04:	f8c8 3000 	str.w	r3, [r8]
   1aa08:	b005      	add	sp, #20
   1aa0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa0e:	2073      	movs	r0, #115	; 0x73
   1aa10:	b005      	add	sp, #20
   1aa12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa16:	2016      	movs	r0, #22
   1aa18:	b005      	add	sp, #20
   1aa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa1e:	6891      	ldr	r1, [r2, #8]
   1aa20:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1aa24:	d18e      	bne.n	1a944 <ip_interface_getaddrinfo+0x74>
   1aa26:	f240 2102 	movw	r1, #514	; 0x202
   1aa2a:	68d0      	ldr	r0, [r2, #12]
   1aa2c:	4288      	cmp	r0, r1
   1aa2e:	d189      	bne.n	1a944 <ip_interface_getaddrinfo+0x74>
   1aa30:	6991      	ldr	r1, [r2, #24]
   1aa32:	2900      	cmp	r1, #0
   1aa34:	d086      	beq.n	1a944 <ip_interface_getaddrinfo+0x74>
   1aa36:	6868      	ldr	r0, [r5, #4]
   1aa38:	f002 fa8a 	bl	1cf50 <pdn_interface_pdn_id_get>
   1aa3c:	1c43      	adds	r3, r0, #1
   1aa3e:	d081      	beq.n	1a944 <ip_interface_getaddrinfo+0x74>
   1aa40:	4602      	mov	r2, r0
   1aa42:	e781      	b.n	1a948 <ip_interface_getaddrinfo+0x78>
   1aa44:	68a9      	ldr	r1, [r5, #8]
   1aa46:	2902      	cmp	r1, #2
   1aa48:	f8c9 1000 	str.w	r1, [r9]
   1aa4c:	d006      	beq.n	1aa5c <ip_interface_getaddrinfo+0x18c>
   1aa4e:	2a05      	cmp	r2, #5
   1aa50:	d0a2      	beq.n	1a998 <ip_interface_getaddrinfo+0xc8>
   1aa52:	2a0a      	cmp	r2, #10
   1aa54:	bf14      	ite	ne
   1aa56:	2201      	movne	r2, #1
   1aa58:	2202      	moveq	r2, #2
   1aa5a:	e79d      	b.n	1a998 <ip_interface_getaddrinfo+0xc8>
   1aa5c:	2102      	movs	r1, #2
   1aa5e:	f8ca 1000 	str.w	r1, [sl]
   1aa62:	e7f4      	b.n	1aa4e <ip_interface_getaddrinfo+0x17e>
   1aa64:	4b11      	ldr	r3, [pc, #68]	; (1aaac <ip_interface_getaddrinfo+0x1dc>)
   1aa66:	6818      	ldr	r0, [r3, #0]
   1aa68:	2800      	cmp	r0, #0
   1aa6a:	d0d1      	beq.n	1aa10 <ip_interface_getaddrinfo+0x140>
   1aa6c:	e7c9      	b.n	1aa02 <ip_interface_getaddrinfo+0x132>
   1aa6e:	4629      	mov	r1, r5
   1aa70:	2210      	movs	r2, #16
   1aa72:	f104 0014 	add.w	r0, r4, #20
   1aa76:	f00e fd36 	bl	294e6 <memset>
   1aa7a:	e794      	b.n	1a9a6 <ip_interface_getaddrinfo+0xd6>
   1aa7c:	2023      	movs	r0, #35	; 0x23
   1aa7e:	e7c0      	b.n	1aa02 <ip_interface_getaddrinfo+0x132>
   1aa80:	202f      	movs	r0, #47	; 0x2f
   1aa82:	f7fa fa1f 	bl	14ec4 <bsd_os_errno_set>
   1aa86:	68a2      	ldr	r2, [r4, #8]
   1aa88:	3210      	adds	r2, #16
   1aa8a:	60a2      	str	r2, [r4, #8]
   1aa8c:	b917      	cbnz	r7, 1aa94 <ip_interface_getaddrinfo+0x1c4>
   1aa8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aa92:	e7b6      	b.n	1aa02 <ip_interface_getaddrinfo+0x132>
   1aa94:	6820      	ldr	r0, [r4, #0]
   1aa96:	2800      	cmp	r0, #0
   1aa98:	d0f9      	beq.n	1aa8e <ip_interface_getaddrinfo+0x1be>
   1aa9a:	465a      	mov	r2, fp
   1aa9c:	4639      	mov	r1, r7
   1aa9e:	f00e fce8 	bl	29472 <memcpy>
   1aaa2:	e7f4      	b.n	1aa8e <ip_interface_getaddrinfo+0x1be>
   1aaa4:	200281ec 	.word	0x200281ec
   1aaa8:	2002331c 	.word	0x2002331c
   1aaac:	20023314 	.word	0x20023314
   1aab0:	2002330c 	.word	0x2002330c
   1aab4:	20023310 	.word	0x20023310
   1aab8:	20023318 	.word	0x20023318

0001aabc <ip_interface_freeaddrinfo>:
   1aabc:	b538      	push	{r3, r4, r5, lr}
   1aabe:	4d0b      	ldr	r5, [pc, #44]	; (1aaec <ip_interface_freeaddrinfo+0x30>)
   1aac0:	682b      	ldr	r3, [r5, #0]
   1aac2:	2b02      	cmp	r3, #2
   1aac4:	d000      	beq.n	1aac8 <ip_interface_freeaddrinfo+0xc>
   1aac6:	bd38      	pop	{r3, r4, r5, pc}
   1aac8:	b150      	cbz	r0, 1aae0 <ip_interface_freeaddrinfo+0x24>
   1aaca:	4604      	mov	r4, r0
   1aacc:	6940      	ldr	r0, [r0, #20]
   1aace:	f004 f8af 	bl	1ec30 <nrf_free>
   1aad2:	69a0      	ldr	r0, [r4, #24]
   1aad4:	b108      	cbz	r0, 1aada <ip_interface_freeaddrinfo+0x1e>
   1aad6:	f004 f8ab 	bl	1ec30 <nrf_free>
   1aada:	4620      	mov	r0, r4
   1aadc:	f004 f8a8 	bl	1ec30 <nrf_free>
   1aae0:	2300      	movs	r3, #0
   1aae2:	4a03      	ldr	r2, [pc, #12]	; (1aaf0 <ip_interface_freeaddrinfo+0x34>)
   1aae4:	602b      	str	r3, [r5, #0]
   1aae6:	6013      	str	r3, [r2, #0]
   1aae8:	bd38      	pop	{r3, r4, r5, pc}
   1aaea:	bf00      	nop
   1aaec:	20023318 	.word	0x20023318
   1aaf0:	20023314 	.word	0x20023314

0001aaf4 <rpc_ip_event_handler>:
   1aaf4:	f248 030d 	movw	r3, #32781	; 0x800d
   1aaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aafc:	4299      	cmp	r1, r3
   1aafe:	b089      	sub	sp, #36	; 0x24
   1ab00:	4604      	mov	r4, r0
   1ab02:	d062      	beq.n	1abca <rpc_ip_event_handler+0xd6>
   1ab04:	f248 030f 	movw	r3, #32783	; 0x800f
   1ab08:	4299      	cmp	r1, r3
   1ab0a:	460d      	mov	r5, r1
   1ab0c:	d04b      	beq.n	1aba6 <rpc_ip_event_handler+0xb2>
   1ab0e:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1ab12:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1ab16:	68c0      	ldr	r0, [r0, #12]
   1ab18:	d07b      	beq.n	1ac12 <rpc_ip_event_handler+0x11e>
   1ab1a:	0c07      	lsrs	r7, r0, #16
   1ab1c:	4638      	mov	r0, r7
   1ab1e:	f004 fce1 	bl	1f4e4 <interface_socket_from_handle_get>
   1ab22:	4606      	mov	r6, r0
   1ab24:	2800      	cmp	r0, #0
   1ab26:	d05f      	beq.n	1abe8 <rpc_ip_event_handler+0xf4>
   1ab28:	4601      	mov	r1, r0
   1ab2a:	462b      	mov	r3, r5
   1ab2c:	4622      	mov	r2, r4
   1ab2e:	4638      	mov	r0, r7
   1ab30:	f7fe fde4 	bl	196fc <tls_rpc_ip_event_handler>
   1ab34:	2800      	cmp	r0, #0
   1ab36:	d053      	beq.n	1abe0 <rpc_ip_event_handler+0xec>
   1ab38:	f248 0307 	movw	r3, #32775	; 0x8007
   1ab3c:	429d      	cmp	r5, r3
   1ab3e:	d97d      	bls.n	1ac3c <rpc_ip_event_handler+0x148>
   1ab40:	f248 030c 	movw	r3, #32780	; 0x800c
   1ab44:	429d      	cmp	r5, r3
   1ab46:	d068      	beq.n	1ac1a <rpc_ip_event_handler+0x126>
   1ab48:	f240 8137 	bls.w	1adba <rpc_ip_event_handler+0x2c6>
   1ab4c:	f249 0302 	movw	r3, #36866	; 0x9002
   1ab50:	429d      	cmp	r5, r3
   1ab52:	f000 819f 	beq.w	1ae94 <rpc_ip_event_handler+0x3a0>
   1ab56:	f249 0303 	movw	r3, #36867	; 0x9003
   1ab5a:	429d      	cmp	r5, r3
   1ab5c:	f000 81b2 	beq.w	1aec4 <rpc_ip_event_handler+0x3d0>
   1ab60:	f249 0301 	movw	r3, #36865	; 0x9001
   1ab64:	429d      	cmp	r5, r3
   1ab66:	d13f      	bne.n	1abe8 <rpc_ip_event_handler+0xf4>
   1ab68:	6835      	ldr	r5, [r6, #0]
   1ab6a:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   1ab6e:	f000 81d3 	beq.w	1af18 <rpc_ip_event_handler+0x424>
   1ab72:	68a3      	ldr	r3, [r4, #8]
   1ab74:	2b04      	cmp	r3, #4
   1ab76:	f200 8207 	bhi.w	1af88 <rpc_ip_event_handler+0x494>
   1ab7a:	2500      	movs	r5, #0
   1ab7c:	462f      	mov	r7, r5
   1ab7e:	6821      	ldr	r1, [r4, #0]
   1ab80:	6862      	ldr	r2, [r4, #4]
   1ab82:	e9cd 7506 	strd	r7, r5, [sp, #24]
   1ab86:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1ab8a:	69f0      	ldr	r0, [r6, #28]
   1ab8c:	a904      	add	r1, sp, #16
   1ab8e:	6803      	ldr	r3, [r0, #0]
   1ab90:	685b      	ldr	r3, [r3, #4]
   1ab92:	4798      	blx	r3
   1ab94:	3001      	adds	r0, #1
   1ab96:	f000 81de 	beq.w	1af56 <rpc_ip_event_handler+0x462>
   1ab9a:	6833      	ldr	r3, [r6, #0]
   1ab9c:	2000      	movs	r0, #0
   1ab9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1aba2:	6033      	str	r3, [r6, #0]
   1aba4:	e00e      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1aba6:	6943      	ldr	r3, [r0, #20]
   1aba8:	2001      	movs	r0, #1
   1abaa:	2b10      	cmp	r3, #16
   1abac:	49bc      	ldr	r1, [pc, #752]	; (1aea0 <rpc_ip_event_handler+0x3ac>)
   1abae:	bf88      	it	hi
   1abb0:	222d      	movhi	r2, #45	; 0x2d
   1abb2:	7008      	strb	r0, [r1, #0]
   1abb4:	f04f 0000 	mov.w	r0, #0
   1abb8:	bf9c      	itt	ls
   1abba:	4aba      	ldrls	r2, [pc, #744]	; (1aea4 <rpc_ip_event_handler+0x3b0>)
   1abbc:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   1abc0:	4bb9      	ldr	r3, [pc, #740]	; (1aea8 <rpc_ip_event_handler+0x3b4>)
   1abc2:	601a      	str	r2, [r3, #0]
   1abc4:	b009      	add	sp, #36	; 0x24
   1abc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abca:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 1aebc <rpc_ip_event_handler+0x3c8>
   1abce:	6807      	ldr	r7, [r0, #0]
   1abd0:	f8da 2000 	ldr.w	r2, [sl]
   1abd4:	2a01      	cmp	r2, #1
   1abd6:	d00b      	beq.n	1abf0 <rpc_ip_event_handler+0xfc>
   1abd8:	b117      	cbz	r7, 1abe0 <rpc_ip_event_handler+0xec>
   1abda:	4638      	mov	r0, r7
   1abdc:	f7fe fe52 	bl	19884 <rpc_ip_client_data_free>
   1abe0:	2000      	movs	r0, #0
   1abe2:	b009      	add	sp, #36	; 0x24
   1abe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abe8:	6820      	ldr	r0, [r4, #0]
   1abea:	2800      	cmp	r0, #0
   1abec:	d1f6      	bne.n	1abdc <rpc_ip_event_handler+0xe8>
   1abee:	e7f7      	b.n	1abe0 <rpc_ip_event_handler+0xec>
   1abf0:	6942      	ldr	r2, [r0, #20]
   1abf2:	2a00      	cmp	r2, #0
   1abf4:	d046      	beq.n	1ac84 <rpc_ip_event_handler+0x190>
   1abf6:	2a10      	cmp	r2, #16
   1abf8:	bf8e      	itee	hi
   1abfa:	222d      	movhi	r2, #45	; 0x2d
   1abfc:	49a9      	ldrls	r1, [pc, #676]	; (1aea4 <rpc_ip_event_handler+0x3b0>)
   1abfe:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   1ac02:	49aa      	ldr	r1, [pc, #680]	; (1aeac <rpc_ip_event_handler+0x3b8>)
   1ac04:	600a      	str	r2, [r1, #0]
   1ac06:	2202      	movs	r2, #2
   1ac08:	f8ca 2000 	str.w	r2, [sl]
   1ac0c:	2f00      	cmp	r7, #0
   1ac0e:	d1e4      	bne.n	1abda <rpc_ip_event_handler+0xe6>
   1ac10:	e7e6      	b.n	1abe0 <rpc_ip_event_handler+0xec>
   1ac12:	f004 fc15 	bl	1f440 <interface_from_internal_id_search>
   1ac16:	4607      	mov	r7, r0
   1ac18:	e780      	b.n	1ab1c <rpc_ip_event_handler+0x28>
   1ac1a:	6833      	ldr	r3, [r6, #0]
   1ac1c:	b29b      	uxth	r3, r3
   1ac1e:	2b08      	cmp	r3, #8
   1ac20:	d1de      	bne.n	1abe0 <rpc_ip_event_handler+0xec>
   1ac22:	6963      	ldr	r3, [r4, #20]
   1ac24:	2b00      	cmp	r3, #0
   1ac26:	f000 8198 	beq.w	1af5a <rpc_ip_event_handler+0x466>
   1ac2a:	2b10      	cmp	r3, #16
   1ac2c:	f200 8169 	bhi.w	1af02 <rpc_ip_event_handler+0x40e>
   1ac30:	4a9c      	ldr	r2, [pc, #624]	; (1aea4 <rpc_ip_event_handler+0x3b0>)
   1ac32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1ac36:	6073      	str	r3, [r6, #4]
   1ac38:	2000      	movs	r0, #0
   1ac3a:	e7c3      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1ac3c:	f248 0306 	movw	r3, #32774	; 0x8006
   1ac40:	429d      	cmp	r5, r3
   1ac42:	f080 80fc 	bcs.w	1ae3e <rpc_ip_event_handler+0x34a>
   1ac46:	f248 0302 	movw	r3, #32770	; 0x8002
   1ac4a:	429d      	cmp	r5, r3
   1ac4c:	f000 80df 	beq.w	1ae0e <rpc_ip_event_handler+0x31a>
   1ac50:	f240 80cc 	bls.w	1adec <rpc_ip_event_handler+0x2f8>
   1ac54:	f248 0303 	movw	r3, #32771	; 0x8003
   1ac58:	429d      	cmp	r5, r3
   1ac5a:	f000 810f 	beq.w	1ae7c <rpc_ip_event_handler+0x388>
   1ac5e:	f248 0305 	movw	r3, #32773	; 0x8005
   1ac62:	429d      	cmp	r5, r3
   1ac64:	d1c0      	bne.n	1abe8 <rpc_ip_event_handler+0xf4>
   1ac66:	6833      	ldr	r3, [r6, #0]
   1ac68:	b29b      	uxth	r3, r3
   1ac6a:	2b03      	cmp	r3, #3
   1ac6c:	d1b8      	bne.n	1abe0 <rpc_ip_event_handler+0xec>
   1ac6e:	6963      	ldr	r3, [r4, #20]
   1ac70:	2b00      	cmp	r3, #0
   1ac72:	d1da      	bne.n	1ac2a <rpc_ip_event_handler+0x136>
   1ac74:	6833      	ldr	r3, [r6, #0]
   1ac76:	2000      	movs	r0, #0
   1ac78:	0c1b      	lsrs	r3, r3, #16
   1ac7a:	041b      	lsls	r3, r3, #16
   1ac7c:	f043 0304 	orr.w	r3, r3, #4
   1ac80:	6033      	str	r3, [r6, #0]
   1ac82:	e79f      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1ac84:	6985      	ldr	r5, [r0, #24]
   1ac86:	016b      	lsls	r3, r5, #5
   1ac88:	4618      	mov	r0, r3
   1ac8a:	9303      	str	r3, [sp, #12]
   1ac8c:	f003 ffc6 	bl	1ec1c <nrf_malloc>
   1ac90:	9002      	str	r0, [sp, #8]
   1ac92:	2800      	cmp	r0, #0
   1ac94:	f000 808a 	beq.w	1adac <rpc_ip_event_handler+0x2b8>
   1ac98:	00ee      	lsls	r6, r5, #3
   1ac9a:	1970      	adds	r0, r6, r5
   1ac9c:	0080      	lsls	r0, r0, #2
   1ac9e:	f003 ffbd 	bl	1ec1c <nrf_malloc>
   1aca2:	2800      	cmp	r0, #0
   1aca4:	f000 8084 	beq.w	1adb0 <rpc_ip_event_handler+0x2bc>
   1aca8:	2d00      	cmp	r5, #0
   1acaa:	f000 8084 	beq.w	1adb6 <rpc_ip_event_handler+0x2c2>
   1acae:	2204      	movs	r2, #4
   1acb0:	3610      	adds	r6, #16
   1acb2:	1983      	adds	r3, r0, r6
   1acb4:	9301      	str	r3, [sp, #4]
   1acb6:	9b02      	ldr	r3, [sp, #8]
   1acb8:	f8df b204 	ldr.w	fp, [pc, #516]	; 1aec0 <rpc_ip_event_handler+0x3cc>
   1acbc:	f100 0810 	add.w	r8, r0, #16
   1acc0:	f103 0520 	add.w	r5, r3, #32
   1acc4:	58bb      	ldr	r3, [r7, r2]
   1acc6:	18b9      	adds	r1, r7, r2
   1acc8:	f845 3c20 	str.w	r3, [r5, #-32]
   1accc:	684b      	ldr	r3, [r1, #4]
   1acce:	f8db 0000 	ldr.w	r0, [fp]
   1acd2:	2b02      	cmp	r3, #2
   1acd4:	bf14      	ite	ne
   1acd6:	2602      	movne	r6, #2
   1acd8:	260a      	moveq	r6, #10
   1acda:	4b75      	ldr	r3, [pc, #468]	; (1aeb0 <rpc_ip_event_handler+0x3bc>)
   1acdc:	e945 6007 	strd	r6, r0, [r5, #-28]
   1ace0:	681b      	ldr	r3, [r3, #0]
   1ace2:	f102 0614 	add.w	r6, r2, #20
   1ace6:	f845 3c14 	str.w	r3, [r5, #-20]
   1acea:	8a08      	ldrh	r0, [r1, #16]
   1acec:	f1a8 0310 	sub.w	r3, r8, #16
   1acf0:	f845 0c10 	str.w	r0, [r5, #-16]
   1acf4:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   1acf8:	f845 3c0c 	str.w	r3, [r5, #-12]
   1acfc:	4b6d      	ldr	r3, [pc, #436]	; (1aeb4 <rpc_ip_event_handler+0x3c0>)
   1acfe:	2804      	cmp	r0, #4
   1ad00:	eb07 0106 	add.w	r1, r7, r6
   1ad04:	881b      	ldrh	r3, [r3, #0]
   1ad06:	d042      	beq.n	1ad8e <rpc_ip_event_handler+0x29a>
   1ad08:	220a      	movs	r2, #10
   1ad0a:	f848 2c0c 	str.w	r2, [r8, #-12]
   1ad0e:	f04f 0224 	mov.w	r2, #36	; 0x24
   1ad12:	f828 3c08 	strh.w	r3, [r8, #-8]
   1ad16:	f808 2c10 	strb.w	r2, [r8, #-16]
   1ad1a:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1ad1e:	4640      	mov	r0, r8
   1ad20:	f00e fba7 	bl	29472 <memcpy>
   1ad24:	f855 3c10 	ldr.w	r3, [r5, #-16]
   1ad28:	f109 0001 	add.w	r0, r9, #1
   1ad2c:	441e      	add	r6, r3
   1ad2e:	f003 ff75 	bl	1ec1c <nrf_malloc>
   1ad32:	19b9      	adds	r1, r7, r6
   1ad34:	eb09 0206 	add.w	r2, r9, r6
   1ad38:	f845 0c08 	str.w	r0, [r5, #-8]
   1ad3c:	b1e8      	cbz	r0, 1ad7a <rpc_ip_event_handler+0x286>
   1ad3e:	464a      	mov	r2, r9
   1ad40:	f00e fb97 	bl	29472 <memcpy>
   1ad44:	2100      	movs	r1, #0
   1ad46:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1ad4a:	f108 0808 	add.w	r8, r8, #8
   1ad4e:	f803 1009 	strb.w	r1, [r3, r9]
   1ad52:	9b01      	ldr	r3, [sp, #4]
   1ad54:	f845 5c04 	str.w	r5, [r5, #-4]
   1ad58:	4598      	cmp	r8, r3
   1ad5a:	eb09 0206 	add.w	r2, r9, r6
   1ad5e:	f105 0520 	add.w	r5, r5, #32
   1ad62:	d1af      	bne.n	1acc4 <rpc_ip_event_handler+0x1d0>
   1ad64:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   1ad68:	2100      	movs	r1, #0
   1ad6a:	4403      	add	r3, r0
   1ad6c:	f843 1c04 	str.w	r1, [r3, #-4]
   1ad70:	4603      	mov	r3, r0
   1ad72:	4a51      	ldr	r2, [pc, #324]	; (1aeb8 <rpc_ip_event_handler+0x3c4>)
   1ad74:	6827      	ldr	r7, [r4, #0]
   1ad76:	6013      	str	r3, [r2, #0]
   1ad78:	e745      	b.n	1ac06 <rpc_ip_event_handler+0x112>
   1ad7a:	9b01      	ldr	r3, [sp, #4]
   1ad7c:	f108 0808 	add.w	r8, r8, #8
   1ad80:	4543      	cmp	r3, r8
   1ad82:	f845 5c04 	str.w	r5, [r5, #-4]
   1ad86:	f105 0520 	add.w	r5, r5, #32
   1ad8a:	d19b      	bne.n	1acc4 <rpc_ip_event_handler+0x1d0>
   1ad8c:	e7ea      	b.n	1ad64 <rpc_ip_event_handler+0x270>
   1ad8e:	2210      	movs	r2, #16
   1ad90:	2002      	movs	r0, #2
   1ad92:	f828 3c08 	strh.w	r3, [r8, #-8]
   1ad96:	f848 0c0c 	str.w	r0, [r8, #-12]
   1ad9a:	f808 2c10 	strb.w	r2, [r8, #-16]
   1ad9e:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1ada2:	f1a8 0004 	sub.w	r0, r8, #4
   1ada6:	f00e fb64 	bl	29472 <memcpy>
   1adaa:	e7bb      	b.n	1ad24 <rpc_ip_event_handler+0x230>
   1adac:	f003 ff40 	bl	1ec30 <nrf_free>
   1adb0:	210c      	movs	r1, #12
   1adb2:	4a3e      	ldr	r2, [pc, #248]	; (1aeac <rpc_ip_event_handler+0x3b8>)
   1adb4:	6011      	str	r1, [r2, #0]
   1adb6:	9b02      	ldr	r3, [sp, #8]
   1adb8:	e7db      	b.n	1ad72 <rpc_ip_event_handler+0x27e>
   1adba:	f248 0308 	movw	r3, #32776	; 0x8008
   1adbe:	429d      	cmp	r5, r3
   1adc0:	d04d      	beq.n	1ae5e <rpc_ip_event_handler+0x36a>
   1adc2:	f248 0309 	movw	r3, #32777	; 0x8009
   1adc6:	429d      	cmp	r5, r3
   1adc8:	f47f af0e 	bne.w	1abe8 <rpc_ip_event_handler+0xf4>
   1adcc:	6833      	ldr	r3, [r6, #0]
   1adce:	b29b      	uxth	r3, r3
   1add0:	2b0d      	cmp	r3, #13
   1add2:	f47f af05 	bne.w	1abe0 <rpc_ip_event_handler+0xec>
   1add6:	6960      	ldr	r0, [r4, #20]
   1add8:	2800      	cmp	r0, #0
   1adda:	f000 80c9 	beq.w	1af70 <rpc_ip_event_handler+0x47c>
   1adde:	2810      	cmp	r0, #16
   1ade0:	f200 808f 	bhi.w	1af02 <rpc_ip_event_handler+0x40e>
   1ade4:	4b2f      	ldr	r3, [pc, #188]	; (1aea4 <rpc_ip_event_handler+0x3b0>)
   1ade6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1adea:	e724      	b.n	1ac36 <rpc_ip_event_handler+0x142>
   1adec:	f248 0301 	movw	r3, #32769	; 0x8001
   1adf0:	429d      	cmp	r5, r3
   1adf2:	f47f aef9 	bne.w	1abe8 <rpc_ip_event_handler+0xf4>
   1adf6:	6833      	ldr	r3, [r6, #0]
   1adf8:	2b01      	cmp	r3, #1
   1adfa:	f47f aef1 	bne.w	1abe0 <rpc_ip_event_handler+0xec>
   1adfe:	6960      	ldr	r0, [r4, #20]
   1ae00:	2800      	cmp	r0, #0
   1ae02:	d1ec      	bne.n	1adde <rpc_ip_event_handler+0x2ea>
   1ae04:	2302      	movs	r3, #2
   1ae06:	6033      	str	r3, [r6, #0]
   1ae08:	69a3      	ldr	r3, [r4, #24]
   1ae0a:	61b3      	str	r3, [r6, #24]
   1ae0c:	e6da      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1ae0e:	6833      	ldr	r3, [r6, #0]
   1ae10:	0099      	lsls	r1, r3, #2
   1ae12:	f57f aee5 	bpl.w	1abe0 <rpc_ip_event_handler+0xec>
   1ae16:	6833      	ldr	r3, [r6, #0]
   1ae18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1ae1c:	6033      	str	r3, [r6, #0]
   1ae1e:	6960      	ldr	r0, [r4, #20]
   1ae20:	2800      	cmp	r0, #0
   1ae22:	d07e      	beq.n	1af22 <rpc_ip_event_handler+0x42e>
   1ae24:	2810      	cmp	r0, #16
   1ae26:	f200 8094 	bhi.w	1af52 <rpc_ip_event_handler+0x45e>
   1ae2a:	4b1e      	ldr	r3, [pc, #120]	; (1aea4 <rpc_ip_event_handler+0x3b0>)
   1ae2c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1ae30:	6073      	str	r3, [r6, #4]
   1ae32:	6833      	ldr	r3, [r6, #0]
   1ae34:	2000      	movs	r0, #0
   1ae36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1ae3a:	6033      	str	r3, [r6, #0]
   1ae3c:	e6c2      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1ae3e:	6833      	ldr	r3, [r6, #0]
   1ae40:	029a      	lsls	r2, r3, #10
   1ae42:	f57f aecd 	bpl.w	1abe0 <rpc_ip_event_handler+0xec>
   1ae46:	6963      	ldr	r3, [r4, #20]
   1ae48:	2b00      	cmp	r3, #0
   1ae4a:	d079      	beq.n	1af40 <rpc_ip_event_handler+0x44c>
   1ae4c:	2b6b      	cmp	r3, #107	; 0x6b
   1ae4e:	f000 8096 	beq.w	1af7e <rpc_ip_event_handler+0x48a>
   1ae52:	2b10      	cmp	r3, #16
   1ae54:	d87d      	bhi.n	1af52 <rpc_ip_event_handler+0x45e>
   1ae56:	4a13      	ldr	r2, [pc, #76]	; (1aea4 <rpc_ip_event_handler+0x3b0>)
   1ae58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1ae5c:	e7e8      	b.n	1ae30 <rpc_ip_event_handler+0x33c>
   1ae5e:	6833      	ldr	r3, [r6, #0]
   1ae60:	b29b      	uxth	r3, r3
   1ae62:	2b06      	cmp	r3, #6
   1ae64:	f47f aebc 	bne.w	1abe0 <rpc_ip_event_handler+0xec>
   1ae68:	6960      	ldr	r0, [r4, #20]
   1ae6a:	2800      	cmp	r0, #0
   1ae6c:	d1b7      	bne.n	1adde <rpc_ip_event_handler+0x2ea>
   1ae6e:	6833      	ldr	r3, [r6, #0]
   1ae70:	0c1b      	lsrs	r3, r3, #16
   1ae72:	041b      	lsls	r3, r3, #16
   1ae74:	f043 0307 	orr.w	r3, r3, #7
   1ae78:	6033      	str	r3, [r6, #0]
   1ae7a:	e6a3      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1ae7c:	6833      	ldr	r3, [r6, #0]
   1ae7e:	025b      	lsls	r3, r3, #9
   1ae80:	f57f aeae 	bpl.w	1abe0 <rpc_ip_event_handler+0xec>
   1ae84:	6960      	ldr	r0, [r4, #20]
   1ae86:	2800      	cmp	r0, #0
   1ae88:	d1a9      	bne.n	1adde <rpc_ip_event_handler+0x2ea>
   1ae8a:	6833      	ldr	r3, [r6, #0]
   1ae8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1ae90:	6033      	str	r3, [r6, #0]
   1ae92:	e697      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1ae94:	6833      	ldr	r3, [r6, #0]
   1ae96:	b29b      	uxth	r3, r3
   1ae98:	2b07      	cmp	r3, #7
   1ae9a:	f47f aea1 	bne.w	1abe0 <rpc_ip_event_handler+0xec>
   1ae9e:	e67c      	b.n	1ab9a <rpc_ip_event_handler+0xa6>
   1aea0:	2002af73 	.word	0x2002af73
   1aea4:	0002a924 	.word	0x0002a924
   1aea8:	20023344 	.word	0x20023344
   1aeac:	20023314 	.word	0x20023314
   1aeb0:	2002330c 	.word	0x2002330c
   1aeb4:	200281ec 	.word	0x200281ec
   1aeb8:	2002331c 	.word	0x2002331c
   1aebc:	20023318 	.word	0x20023318
   1aec0:	20023310 	.word	0x20023310
   1aec4:	6833      	ldr	r3, [r6, #0]
   1aec6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1aeca:	6033      	str	r3, [r6, #0]
   1aecc:	6833      	ldr	r3, [r6, #0]
   1aece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1aed2:	6033      	str	r3, [r6, #0]
   1aed4:	6833      	ldr	r3, [r6, #0]
   1aed6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1aeda:	6033      	str	r3, [r6, #0]
   1aedc:	6833      	ldr	r3, [r6, #0]
   1aede:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1aee2:	6033      	str	r3, [r6, #0]
   1aee4:	6923      	ldr	r3, [r4, #16]
   1aee6:	2b6c      	cmp	r3, #108	; 0x6c
   1aee8:	d00d      	beq.n	1af06 <rpc_ip_event_handler+0x412>
   1aeea:	2b10      	cmp	r3, #16
   1aeec:	bf8c      	ite	hi
   1aeee:	232d      	movhi	r3, #45	; 0x2d
   1aef0:	4a41      	ldrls	r2, [pc, #260]	; (1aff8 <rpc_ip_event_handler+0x504>)
   1aef2:	f04f 0000 	mov.w	r0, #0
   1aef6:	bf98      	it	ls
   1aef8:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1aefc:	6073      	str	r3, [r6, #4]
   1aefe:	60b3      	str	r3, [r6, #8]
   1af00:	e660      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1af02:	232d      	movs	r3, #45	; 0x2d
   1af04:	e697      	b.n	1ac36 <rpc_ip_event_handler+0x142>
   1af06:	2239      	movs	r2, #57	; 0x39
   1af08:	6833      	ldr	r3, [r6, #0]
   1af0a:	2000      	movs	r0, #0
   1af0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1af10:	6033      	str	r3, [r6, #0]
   1af12:	6072      	str	r2, [r6, #4]
   1af14:	60b2      	str	r2, [r6, #8]
   1af16:	e655      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1af18:	6820      	ldr	r0, [r4, #0]
   1af1a:	f7fe fcb3 	bl	19884 <rpc_ip_client_data_free>
   1af1e:	4628      	mov	r0, r5
   1af20:	e650      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1af22:	6833      	ldr	r3, [r6, #0]
   1af24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1af28:	6033      	str	r3, [r6, #0]
   1af2a:	6833      	ldr	r3, [r6, #0]
   1af2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1af30:	6033      	str	r3, [r6, #0]
   1af32:	6833      	ldr	r3, [r6, #0]
   1af34:	0c1b      	lsrs	r3, r3, #16
   1af36:	041b      	lsls	r3, r3, #16
   1af38:	f043 0305 	orr.w	r3, r3, #5
   1af3c:	6033      	str	r3, [r6, #0]
   1af3e:	e641      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1af40:	6833      	ldr	r3, [r6, #0]
   1af42:	4a2e      	ldr	r2, [pc, #184]	; (1affc <rpc_ip_event_handler+0x508>)
   1af44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1af48:	6033      	str	r3, [r6, #0]
   1af4a:	2001      	movs	r0, #1
   1af4c:	f842 4027 	str.w	r4, [r2, r7, lsl #2]
   1af50:	e638      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1af52:	232d      	movs	r3, #45	; 0x2d
   1af54:	e76c      	b.n	1ae30 <rpc_ip_event_handler+0x33c>
   1af56:	2002      	movs	r0, #2
   1af58:	e634      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1af5a:	4b28      	ldr	r3, [pc, #160]	; (1affc <rpc_ip_event_handler+0x508>)
   1af5c:	2001      	movs	r0, #1
   1af5e:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1af62:	6833      	ldr	r3, [r6, #0]
   1af64:	0c1b      	lsrs	r3, r3, #16
   1af66:	041b      	lsls	r3, r3, #16
   1af68:	f043 0309 	orr.w	r3, r3, #9
   1af6c:	6033      	str	r3, [r6, #0]
   1af6e:	e629      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1af70:	6833      	ldr	r3, [r6, #0]
   1af72:	0c1b      	lsrs	r3, r3, #16
   1af74:	041b      	lsls	r3, r3, #16
   1af76:	f043 030e 	orr.w	r3, r3, #14
   1af7a:	6033      	str	r3, [r6, #0]
   1af7c:	e622      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1af7e:	6933      	ldr	r3, [r6, #16]
   1af80:	2b01      	cmp	r3, #1
   1af82:	d005      	beq.n	1af90 <rpc_ip_event_handler+0x49c>
   1af84:	230c      	movs	r3, #12
   1af86:	e753      	b.n	1ae30 <rpc_ip_event_handler+0x33c>
   1af88:	8a65      	ldrh	r5, [r4, #18]
   1af8a:	b94d      	cbnz	r5, 1afa0 <rpc_ip_event_handler+0x4ac>
   1af8c:	462f      	mov	r7, r5
   1af8e:	e5f6      	b.n	1ab7e <rpc_ip_event_handler+0x8a>
   1af90:	220c      	movs	r2, #12
   1af92:	6833      	ldr	r3, [r6, #0]
   1af94:	2000      	movs	r0, #0
   1af96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   1af9a:	6033      	str	r3, [r6, #0]
   1af9c:	6072      	str	r2, [r6, #4]
   1af9e:	e611      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1afa0:	2024      	movs	r0, #36	; 0x24
   1afa2:	f003 fe3b 	bl	1ec1c <nrf_malloc>
   1afa6:	4607      	mov	r7, r0
   1afa8:	2800      	cmp	r0, #0
   1afaa:	d0d4      	beq.n	1af56 <rpc_ip_event_handler+0x462>
   1afac:	8a62      	ldrh	r2, [r4, #18]
   1afae:	2a10      	cmp	r2, #16
   1afb0:	d015      	beq.n	1afde <rpc_ip_event_handler+0x4ea>
   1afb2:	2a04      	cmp	r2, #4
   1afb4:	d007      	beq.n	1afc6 <rpc_ip_event_handler+0x4d2>
   1afb6:	6820      	ldr	r0, [r4, #0]
   1afb8:	f7fe fc64 	bl	19884 <rpc_ip_client_data_free>
   1afbc:	4638      	mov	r0, r7
   1afbe:	f003 fe37 	bl	1ec30 <nrf_free>
   1afc2:	2000      	movs	r0, #0
   1afc4:	e5fe      	b.n	1abc4 <rpc_ip_event_handler+0xd0>
   1afc6:	2302      	movs	r3, #2
   1afc8:	2510      	movs	r5, #16
   1afca:	6043      	str	r3, [r0, #4]
   1afcc:	7005      	strb	r5, [r0, #0]
   1afce:	8a23      	ldrh	r3, [r4, #16]
   1afd0:	f104 0114 	add.w	r1, r4, #20
   1afd4:	8103      	strh	r3, [r0, #8]
   1afd6:	300c      	adds	r0, #12
   1afd8:	f00e fa4b 	bl	29472 <memcpy>
   1afdc:	e5cf      	b.n	1ab7e <rpc_ip_event_handler+0x8a>
   1afde:	230a      	movs	r3, #10
   1afe0:	2524      	movs	r5, #36	; 0x24
   1afe2:	6043      	str	r3, [r0, #4]
   1afe4:	7005      	strb	r5, [r0, #0]
   1afe6:	8a23      	ldrh	r3, [r4, #16]
   1afe8:	f104 0114 	add.w	r1, r4, #20
   1afec:	8103      	strh	r3, [r0, #8]
   1afee:	3010      	adds	r0, #16
   1aff0:	f00e fa3f 	bl	29472 <memcpy>
   1aff4:	e5c3      	b.n	1ab7e <rpc_ip_event_handler+0x8a>
   1aff6:	bf00      	nop
   1aff8:	0002a924 	.word	0x0002a924
   1affc:	20023320 	.word	0x20023320

0001b000 <rpc_handle_ctrl_message>:
   1b000:	2902      	cmp	r1, #2
   1b002:	b510      	push	{r4, lr}
   1b004:	4604      	mov	r4, r0
   1b006:	d00c      	beq.n	1b022 <rpc_handle_ctrl_message+0x22>
   1b008:	2904      	cmp	r1, #4
   1b00a:	d008      	beq.n	1b01e <rpc_handle_ctrl_message+0x1e>
   1b00c:	2901      	cmp	r1, #1
   1b00e:	d006      	beq.n	1b01e <rpc_handle_ctrl_message+0x1e>
   1b010:	6880      	ldr	r0, [r0, #8]
   1b012:	b108      	cbz	r0, 1b018 <rpc_handle_ctrl_message+0x18>
   1b014:	f7fc ff38 	bl	17e88 <rpc_transport_data_free>
   1b018:	4620      	mov	r0, r4
   1b01a:	f7fc ff33 	bl	17e84 <rpc_transport_rpc_free>
   1b01e:	2000      	movs	r0, #0
   1b020:	bd10      	pop	{r4, pc}
   1b022:	6880      	ldr	r0, [r0, #8]
   1b024:	2800      	cmp	r0, #0
   1b026:	d0fa      	beq.n	1b01e <rpc_handle_ctrl_message+0x1e>
   1b028:	f7fc ff2e 	bl	17e88 <rpc_transport_data_free>
   1b02c:	2000      	movs	r0, #0
   1b02e:	bd10      	pop	{r4, pc}

0001b030 <rpc_handle_data_message>:
   1b030:	4b23      	ldr	r3, [pc, #140]	; (1b0c0 <rpc_handle_data_message+0x90>)
   1b032:	6802      	ldr	r2, [r0, #0]
   1b034:	8819      	ldrh	r1, [r3, #0]
   1b036:	b292      	uxth	r2, r2
   1b038:	4291      	cmp	r1, r2
   1b03a:	d027      	beq.n	1b08c <rpc_handle_data_message+0x5c>
   1b03c:	8a19      	ldrh	r1, [r3, #16]
   1b03e:	4291      	cmp	r1, r2
   1b040:	d02a      	beq.n	1b098 <rpc_handle_data_message+0x68>
   1b042:	8c19      	ldrh	r1, [r3, #32]
   1b044:	4291      	cmp	r1, r2
   1b046:	d02b      	beq.n	1b0a0 <rpc_handle_data_message+0x70>
   1b048:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   1b04a:	4291      	cmp	r1, r2
   1b04c:	d02a      	beq.n	1b0a4 <rpc_handle_data_message+0x74>
   1b04e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   1b052:	4291      	cmp	r1, r2
   1b054:	d028      	beq.n	1b0a8 <rpc_handle_data_message+0x78>
   1b056:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   1b05a:	4291      	cmp	r1, r2
   1b05c:	d026      	beq.n	1b0ac <rpc_handle_data_message+0x7c>
   1b05e:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   1b062:	4291      	cmp	r1, r2
   1b064:	d026      	beq.n	1b0b4 <rpc_handle_data_message+0x84>
   1b066:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   1b06a:	4291      	cmp	r1, r2
   1b06c:	d024      	beq.n	1b0b8 <rpc_handle_data_message+0x88>
   1b06e:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   1b072:	4291      	cmp	r1, r2
   1b074:	d01c      	beq.n	1b0b0 <rpc_handle_data_message+0x80>
   1b076:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   1b07a:	4291      	cmp	r1, r2
   1b07c:	d01e      	beq.n	1b0bc <rpc_handle_data_message+0x8c>
   1b07e:	6880      	ldr	r0, [r0, #8]
   1b080:	b160      	cbz	r0, 1b09c <rpc_handle_data_message+0x6c>
   1b082:	b510      	push	{r4, lr}
   1b084:	f7fc ff00 	bl	17e88 <rpc_transport_data_free>
   1b088:	2000      	movs	r0, #0
   1b08a:	bd10      	pop	{r4, pc}
   1b08c:	2200      	movs	r2, #0
   1b08e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1b092:	685a      	ldr	r2, [r3, #4]
   1b094:	68d9      	ldr	r1, [r3, #12]
   1b096:	4710      	bx	r2
   1b098:	2201      	movs	r2, #1
   1b09a:	e7f8      	b.n	1b08e <rpc_handle_data_message+0x5e>
   1b09c:	2000      	movs	r0, #0
   1b09e:	4770      	bx	lr
   1b0a0:	2202      	movs	r2, #2
   1b0a2:	e7f4      	b.n	1b08e <rpc_handle_data_message+0x5e>
   1b0a4:	2203      	movs	r2, #3
   1b0a6:	e7f2      	b.n	1b08e <rpc_handle_data_message+0x5e>
   1b0a8:	2204      	movs	r2, #4
   1b0aa:	e7f0      	b.n	1b08e <rpc_handle_data_message+0x5e>
   1b0ac:	2205      	movs	r2, #5
   1b0ae:	e7ee      	b.n	1b08e <rpc_handle_data_message+0x5e>
   1b0b0:	2208      	movs	r2, #8
   1b0b2:	e7ec      	b.n	1b08e <rpc_handle_data_message+0x5e>
   1b0b4:	2206      	movs	r2, #6
   1b0b6:	e7ea      	b.n	1b08e <rpc_handle_data_message+0x5e>
   1b0b8:	2207      	movs	r2, #7
   1b0ba:	e7e8      	b.n	1b08e <rpc_handle_data_message+0x5e>
   1b0bc:	2209      	movs	r2, #9
   1b0be:	e7e6      	b.n	1b08e <rpc_handle_data_message+0x5e>
   1b0c0:	20023348 	.word	0x20023348

0001b0c4 <rpc_framework_init>:
   1b0c4:	b508      	push	{r3, lr}
   1b0c6:	22a0      	movs	r2, #160	; 0xa0
   1b0c8:	2100      	movs	r1, #0
   1b0ca:	4802      	ldr	r0, [pc, #8]	; (1b0d4 <rpc_framework_init+0x10>)
   1b0cc:	f00e fa0b 	bl	294e6 <memset>
   1b0d0:	2000      	movs	r0, #0
   1b0d2:	bd08      	pop	{r3, pc}
   1b0d4:	20023348 	.word	0x20023348

0001b0d8 <rpc_client_register>:
   1b0d8:	8803      	ldrh	r3, [r0, #0]
   1b0da:	2b00      	cmp	r3, #0
   1b0dc:	d045      	beq.n	1b16a <rpc_client_register+0x92>
   1b0de:	6842      	ldr	r2, [r0, #4]
   1b0e0:	4601      	mov	r1, r0
   1b0e2:	2a00      	cmp	r2, #0
   1b0e4:	d050      	beq.n	1b188 <rpc_client_register+0xb0>
   1b0e6:	4a30      	ldr	r2, [pc, #192]	; (1b1a8 <rpc_client_register+0xd0>)
   1b0e8:	8810      	ldrh	r0, [r2, #0]
   1b0ea:	4283      	cmp	r3, r0
   1b0ec:	d03d      	beq.n	1b16a <rpc_client_register+0x92>
   1b0ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b0f2:	8a14      	ldrh	r4, [r2, #16]
   1b0f4:	42a3      	cmp	r3, r4
   1b0f6:	d035      	beq.n	1b164 <rpc_client_register+0x8c>
   1b0f8:	8c15      	ldrh	r5, [r2, #32]
   1b0fa:	42ab      	cmp	r3, r5
   1b0fc:	d032      	beq.n	1b164 <rpc_client_register+0x8c>
   1b0fe:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   1b100:	42b3      	cmp	r3, r6
   1b102:	d02f      	beq.n	1b164 <rpc_client_register+0x8c>
   1b104:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   1b108:	42bb      	cmp	r3, r7
   1b10a:	d02b      	beq.n	1b164 <rpc_client_register+0x8c>
   1b10c:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   1b110:	4563      	cmp	r3, ip
   1b112:	d027      	beq.n	1b164 <rpc_client_register+0x8c>
   1b114:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   1b118:	4573      	cmp	r3, lr
   1b11a:	d023      	beq.n	1b164 <rpc_client_register+0x8c>
   1b11c:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   1b120:	4543      	cmp	r3, r8
   1b122:	d01f      	beq.n	1b164 <rpc_client_register+0x8c>
   1b124:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   1b128:	454b      	cmp	r3, r9
   1b12a:	d01b      	beq.n	1b164 <rpc_client_register+0x8c>
   1b12c:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   1b130:	4553      	cmp	r3, sl
   1b132:	d017      	beq.n	1b164 <rpc_client_register+0x8c>
   1b134:	b1e0      	cbz	r0, 1b170 <rpc_client_register+0x98>
   1b136:	b35c      	cbz	r4, 1b190 <rpc_client_register+0xb8>
   1b138:	b365      	cbz	r5, 1b194 <rpc_client_register+0xbc>
   1b13a:	b36e      	cbz	r6, 1b198 <rpc_client_register+0xc0>
   1b13c:	b377      	cbz	r7, 1b19c <rpc_client_register+0xc4>
   1b13e:	f1bc 0f00 	cmp.w	ip, #0
   1b142:	d02d      	beq.n	1b1a0 <rpc_client_register+0xc8>
   1b144:	f1be 0f00 	cmp.w	lr, #0
   1b148:	d020      	beq.n	1b18c <rpc_client_register+0xb4>
   1b14a:	f1b8 0f00 	cmp.w	r8, #0
   1b14e:	d029      	beq.n	1b1a4 <rpc_client_register+0xcc>
   1b150:	f1b9 0f00 	cmp.w	r9, #0
   1b154:	d00b      	beq.n	1b16e <rpc_client_register+0x96>
   1b156:	2009      	movs	r0, #9
   1b158:	f1ba 0f00 	cmp.w	sl, #0
   1b15c:	d008      	beq.n	1b170 <rpc_client_register+0x98>
   1b15e:	2004      	movs	r0, #4
   1b160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b164:	2007      	movs	r0, #7
   1b166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b16a:	2007      	movs	r0, #7
   1b16c:	4770      	bx	lr
   1b16e:	2008      	movs	r0, #8
   1b170:	0100      	lsls	r0, r0, #4
   1b172:	5213      	strh	r3, [r2, r0]
   1b174:	684b      	ldr	r3, [r1, #4]
   1b176:	4402      	add	r2, r0
   1b178:	6053      	str	r3, [r2, #4]
   1b17a:	688b      	ldr	r3, [r1, #8]
   1b17c:	2000      	movs	r0, #0
   1b17e:	6093      	str	r3, [r2, #8]
   1b180:	68cb      	ldr	r3, [r1, #12]
   1b182:	60d3      	str	r3, [r2, #12]
   1b184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b188:	200e      	movs	r0, #14
   1b18a:	4770      	bx	lr
   1b18c:	2006      	movs	r0, #6
   1b18e:	e7ef      	b.n	1b170 <rpc_client_register+0x98>
   1b190:	2001      	movs	r0, #1
   1b192:	e7ed      	b.n	1b170 <rpc_client_register+0x98>
   1b194:	2002      	movs	r0, #2
   1b196:	e7eb      	b.n	1b170 <rpc_client_register+0x98>
   1b198:	2003      	movs	r0, #3
   1b19a:	e7e9      	b.n	1b170 <rpc_client_register+0x98>
   1b19c:	2004      	movs	r0, #4
   1b19e:	e7e7      	b.n	1b170 <rpc_client_register+0x98>
   1b1a0:	2005      	movs	r0, #5
   1b1a2:	e7e5      	b.n	1b170 <rpc_client_register+0x98>
   1b1a4:	2007      	movs	r0, #7
   1b1a6:	e7e3      	b.n	1b170 <rpc_client_register+0x98>
   1b1a8:	20023348 	.word	0x20023348

0001b1ac <rpc_message_send>:
   1b1ac:	b150      	cbz	r0, 1b1c4 <rpc_message_send+0x18>
   1b1ae:	b159      	cbz	r1, 1b1c8 <rpc_message_send+0x1c>
   1b1b0:	684b      	ldr	r3, [r1, #4]
   1b1b2:	8008      	strh	r0, [r1, #0]
   1b1b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1b1b8:	f043 0302 	orr.w	r3, r3, #2
   1b1bc:	604b      	str	r3, [r1, #4]
   1b1be:	4608      	mov	r0, r1
   1b1c0:	f7fc be5a 	b.w	17e78 <rpc_transport_send>
   1b1c4:	2007      	movs	r0, #7
   1b1c6:	4770      	bx	lr
   1b1c8:	200e      	movs	r0, #14
   1b1ca:	4770      	bx	lr

0001b1cc <rpc_message_alloc>:
   1b1cc:	b342      	cbz	r2, 1b220 <rpc_message_alloc+0x54>
   1b1ce:	b328      	cbz	r0, 1b21c <rpc_message_alloc+0x50>
   1b1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b1d2:	2300      	movs	r3, #0
   1b1d4:	4616      	mov	r6, r2
   1b1d6:	460c      	mov	r4, r1
   1b1d8:	4605      	mov	r5, r0
   1b1da:	6013      	str	r3, [r2, #0]
   1b1dc:	b171      	cbz	r1, 1b1fc <rpc_message_alloc+0x30>
   1b1de:	4608      	mov	r0, r1
   1b1e0:	f7fc fe4e 	bl	17e80 <rpc_transport_data_alloc>
   1b1e4:	4607      	mov	r7, r0
   1b1e6:	b1b8      	cbz	r0, 1b218 <rpc_message_alloc+0x4c>
   1b1e8:	f7fc fe48 	bl	17e7c <rpc_transport_rpc_alloc>
   1b1ec:	4603      	mov	r3, r0
   1b1ee:	b180      	cbz	r0, 1b212 <rpc_message_alloc+0x46>
   1b1f0:	2000      	movs	r0, #0
   1b1f2:	60dc      	str	r4, [r3, #12]
   1b1f4:	609f      	str	r7, [r3, #8]
   1b1f6:	801d      	strh	r5, [r3, #0]
   1b1f8:	6033      	str	r3, [r6, #0]
   1b1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b1fc:	f7fc fe3e 	bl	17e7c <rpc_transport_rpc_alloc>
   1b200:	4603      	mov	r3, r0
   1b202:	b148      	cbz	r0, 1b218 <rpc_message_alloc+0x4c>
   1b204:	4627      	mov	r7, r4
   1b206:	60dc      	str	r4, [r3, #12]
   1b208:	609f      	str	r7, [r3, #8]
   1b20a:	801d      	strh	r5, [r3, #0]
   1b20c:	2000      	movs	r0, #0
   1b20e:	6033      	str	r3, [r6, #0]
   1b210:	e7f3      	b.n	1b1fa <rpc_message_alloc+0x2e>
   1b212:	4638      	mov	r0, r7
   1b214:	f7fc fe38 	bl	17e88 <rpc_transport_data_free>
   1b218:	2004      	movs	r0, #4
   1b21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b21c:	2007      	movs	r0, #7
   1b21e:	4770      	bx	lr
   1b220:	200e      	movs	r0, #14
   1b222:	4770      	bx	lr

0001b224 <rpc_message_free>:
   1b224:	b130      	cbz	r0, 1b234 <rpc_message_free+0x10>
   1b226:	b139      	cbz	r1, 1b238 <rpc_message_free+0x14>
   1b228:	b508      	push	{r3, lr}
   1b22a:	4608      	mov	r0, r1
   1b22c:	f7fc fe2a 	bl	17e84 <rpc_transport_rpc_free>
   1b230:	2000      	movs	r0, #0
   1b232:	bd08      	pop	{r3, pc}
   1b234:	2007      	movs	r0, #7
   1b236:	4770      	bx	lr
   1b238:	200e      	movs	r0, #14
   1b23a:	4770      	bx	lr

0001b23c <rpc_message_data_free>:
   1b23c:	b130      	cbz	r0, 1b24c <rpc_message_data_free+0x10>
   1b23e:	b139      	cbz	r1, 1b250 <rpc_message_data_free+0x14>
   1b240:	b508      	push	{r3, lr}
   1b242:	4608      	mov	r0, r1
   1b244:	f7fc fe20 	bl	17e88 <rpc_transport_data_free>
   1b248:	2000      	movs	r0, #0
   1b24a:	bd08      	pop	{r3, pc}
   1b24c:	2007      	movs	r0, #7
   1b24e:	4770      	bx	lr
   1b250:	200e      	movs	r0, #14
   1b252:	4770      	bx	lr

0001b254 <packet_free_cb>:
   1b254:	b510      	push	{r4, lr}
   1b256:	4604      	mov	r4, r0
   1b258:	b118      	cbz	r0, 1b262 <packet_free_cb+0xe>
   1b25a:	6800      	ldr	r0, [r0, #0]
   1b25c:	b108      	cbz	r0, 1b262 <packet_free_cb+0xe>
   1b25e:	f002 fef9 	bl	1e054 <rpc_gnss_client_data_free>
   1b262:	68a0      	ldr	r0, [r4, #8]
   1b264:	b118      	cbz	r0, 1b26e <packet_free_cb+0x1a>
   1b266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b26a:	f003 bce1 	b.w	1ec30 <nrf_free>
   1b26e:	bd10      	pop	{r4, pc}

0001b270 <rpc_gnss_event_handler>:
   1b270:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b272:	4b64      	ldr	r3, [pc, #400]	; (1b404 <rpc_gnss_event_handler+0x194>)
   1b274:	4606      	mov	r6, r0
   1b276:	6800      	ldr	r0, [r0, #0]
   1b278:	881b      	ldrh	r3, [r3, #0]
   1b27a:	6802      	ldr	r2, [r0, #0]
   1b27c:	b085      	sub	sp, #20
   1b27e:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1b282:	460d      	mov	r5, r1
   1b284:	d037      	beq.n	1b2f6 <rpc_gnss_event_handler+0x86>
   1b286:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   1b28a:	33ff      	adds	r3, #255	; 0xff
   1b28c:	b29b      	uxth	r3, r3
   1b28e:	2b02      	cmp	r3, #2
   1b290:	d811      	bhi.n	1b2b6 <rpc_gnss_event_handler+0x46>
   1b292:	4c5d      	ldr	r4, [pc, #372]	; (1b408 <rpc_gnss_event_handler+0x198>)
   1b294:	6823      	ldr	r3, [r4, #0]
   1b296:	075a      	lsls	r2, r3, #29
   1b298:	d410      	bmi.n	1b2bc <rpc_gnss_event_handler+0x4c>
   1b29a:	6823      	ldr	r3, [r4, #0]
   1b29c:	079b      	lsls	r3, r3, #30
   1b29e:	d503      	bpl.n	1b2a8 <rpc_gnss_event_handler+0x38>
   1b2a0:	f244 0303 	movw	r3, #16387	; 0x4003
   1b2a4:	429d      	cmp	r5, r3
   1b2a6:	d009      	beq.n	1b2bc <rpc_gnss_event_handler+0x4c>
   1b2a8:	6830      	ldr	r0, [r6, #0]
   1b2aa:	b120      	cbz	r0, 1b2b6 <rpc_gnss_event_handler+0x46>
   1b2ac:	f002 fed2 	bl	1e054 <rpc_gnss_client_data_free>
   1b2b0:	2200      	movs	r2, #0
   1b2b2:	4b56      	ldr	r3, [pc, #344]	; (1b40c <rpc_gnss_event_handler+0x19c>)
   1b2b4:	601a      	str	r2, [r3, #0]
   1b2b6:	2000      	movs	r0, #0
   1b2b8:	b005      	add	sp, #20
   1b2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b2bc:	2002      	movs	r0, #2
   1b2be:	f003 fcad 	bl	1ec1c <nrf_malloc>
   1b2c2:	4607      	mov	r7, r0
   1b2c4:	2800      	cmp	r0, #0
   1b2c6:	f000 8094 	beq.w	1b3f2 <rpc_gnss_event_handler+0x182>
   1b2ca:	2302      	movs	r3, #2
   1b2cc:	8005      	strh	r5, [r0, #0]
   1b2ce:	6831      	ldr	r1, [r6, #0]
   1b2d0:	6872      	ldr	r2, [r6, #4]
   1b2d2:	484f      	ldr	r0, [pc, #316]	; (1b410 <rpc_gnss_event_handler+0x1a0>)
   1b2d4:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   1b2d8:	6800      	ldr	r0, [r0, #0]
   1b2da:	9303      	str	r3, [sp, #12]
   1b2dc:	6803      	ldr	r3, [r0, #0]
   1b2de:	4669      	mov	r1, sp
   1b2e0:	685b      	ldr	r3, [r3, #4]
   1b2e2:	4798      	blx	r3
   1b2e4:	3001      	adds	r0, #1
   1b2e6:	d071      	beq.n	1b3cc <rpc_gnss_event_handler+0x15c>
   1b2e8:	2000      	movs	r0, #0
   1b2ea:	6823      	ldr	r3, [r4, #0]
   1b2ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1b2f0:	6023      	str	r3, [r4, #0]
   1b2f2:	b005      	add	sp, #20
   1b2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b2f6:	4c44      	ldr	r4, [pc, #272]	; (1b408 <rpc_gnss_event_handler+0x198>)
   1b2f8:	4f44      	ldr	r7, [pc, #272]	; (1b40c <rpc_gnss_event_handler+0x19c>)
   1b2fa:	6823      	ldr	r3, [r4, #0]
   1b2fc:	6038      	str	r0, [r7, #0]
   1b2fe:	01d9      	lsls	r1, r3, #7
   1b300:	d523      	bpl.n	1b34a <rpc_gnss_event_handler+0xda>
   1b302:	f242 1302 	movw	r3, #8450	; 0x2102
   1b306:	429d      	cmp	r5, r3
   1b308:	d11f      	bne.n	1b34a <rpc_gnss_event_handler+0xda>
   1b30a:	6843      	ldr	r3, [r0, #4]
   1b30c:	b91b      	cbnz	r3, 1b316 <rpc_gnss_event_handler+0xa6>
   1b30e:	6823      	ldr	r3, [r4, #0]
   1b310:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1b314:	6023      	str	r3, [r4, #0]
   1b316:	6823      	ldr	r3, [r4, #0]
   1b318:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1b31c:	6023      	str	r3, [r4, #0]
   1b31e:	6823      	ldr	r3, [r4, #0]
   1b320:	025a      	lsls	r2, r3, #9
   1b322:	d430      	bmi.n	1b386 <rpc_gnss_event_handler+0x116>
   1b324:	f242 0305 	movw	r3, #8197	; 0x2005
   1b328:	429d      	cmp	r5, r3
   1b32a:	d12c      	bne.n	1b386 <rpc_gnss_event_handler+0x116>
   1b32c:	6823      	ldr	r3, [r4, #0]
   1b32e:	0299      	lsls	r1, r3, #10
   1b330:	d529      	bpl.n	1b386 <rpc_gnss_event_handler+0x116>
   1b332:	6843      	ldr	r3, [r0, #4]
   1b334:	2b00      	cmp	r3, #0
   1b336:	d157      	bne.n	1b3e8 <rpc_gnss_event_handler+0x178>
   1b338:	6823      	ldr	r3, [r4, #0]
   1b33a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1b33e:	6023      	str	r3, [r4, #0]
   1b340:	6823      	ldr	r3, [r4, #0]
   1b342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b346:	6023      	str	r3, [r4, #0]
   1b348:	e01d      	b.n	1b386 <rpc_gnss_event_handler+0x116>
   1b34a:	6823      	ldr	r3, [r4, #0]
   1b34c:	025b      	lsls	r3, r3, #9
   1b34e:	d50e      	bpl.n	1b36e <rpc_gnss_event_handler+0xfe>
   1b350:	f242 1303 	movw	r3, #8451	; 0x2103
   1b354:	429d      	cmp	r5, r3
   1b356:	d10a      	bne.n	1b36e <rpc_gnss_event_handler+0xfe>
   1b358:	6843      	ldr	r3, [r0, #4]
   1b35a:	b91b      	cbnz	r3, 1b364 <rpc_gnss_event_handler+0xf4>
   1b35c:	6823      	ldr	r3, [r4, #0]
   1b35e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1b362:	6023      	str	r3, [r4, #0]
   1b364:	6823      	ldr	r3, [r4, #0]
   1b366:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1b36a:	6023      	str	r3, [r4, #0]
   1b36c:	e00b      	b.n	1b386 <rpc_gnss_event_handler+0x116>
   1b36e:	f242 0301 	movw	r3, #8193	; 0x2001
   1b372:	429d      	cmp	r5, r3
   1b374:	d10c      	bne.n	1b390 <rpc_gnss_event_handler+0x120>
   1b376:	6843      	ldr	r3, [r0, #4]
   1b378:	b92b      	cbnz	r3, 1b386 <rpc_gnss_event_handler+0x116>
   1b37a:	6823      	ldr	r3, [r4, #0]
   1b37c:	0c1b      	lsrs	r3, r3, #16
   1b37e:	041b      	lsls	r3, r3, #16
   1b380:	f043 0302 	orr.w	r3, r3, #2
   1b384:	6023      	str	r3, [r4, #0]
   1b386:	f002 fe65 	bl	1e054 <rpc_gnss_client_data_free>
   1b38a:	2300      	movs	r3, #0
   1b38c:	603b      	str	r3, [r7, #0]
   1b38e:	e77a      	b.n	1b286 <rpc_gnss_event_handler+0x16>
   1b390:	f242 0304 	movw	r3, #8196	; 0x2004
   1b394:	429d      	cmp	r5, r3
   1b396:	d1c5      	bne.n	1b324 <rpc_gnss_event_handler+0xb4>
   1b398:	6843      	ldr	r3, [r0, #4]
   1b39a:	b993      	cbnz	r3, 1b3c2 <rpc_gnss_event_handler+0x152>
   1b39c:	6823      	ldr	r3, [r4, #0]
   1b39e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1b3a2:	6023      	str	r3, [r4, #0]
   1b3a4:	6823      	ldr	r3, [r4, #0]
   1b3a6:	b29b      	uxth	r3, r3
   1b3a8:	2b03      	cmp	r3, #3
   1b3aa:	6823      	ldr	r3, [r4, #0]
   1b3ac:	d016      	beq.n	1b3dc <rpc_gnss_event_handler+0x16c>
   1b3ae:	b29b      	uxth	r3, r3
   1b3b0:	2b04      	cmp	r3, #4
   1b3b2:	d1d7      	bne.n	1b364 <rpc_gnss_event_handler+0xf4>
   1b3b4:	6823      	ldr	r3, [r4, #0]
   1b3b6:	0c1b      	lsrs	r3, r3, #16
   1b3b8:	041b      	lsls	r3, r3, #16
   1b3ba:	f043 0302 	orr.w	r3, r3, #2
   1b3be:	6023      	str	r3, [r4, #0]
   1b3c0:	e7d0      	b.n	1b364 <rpc_gnss_event_handler+0xf4>
   1b3c2:	6823      	ldr	r3, [r4, #0]
   1b3c4:	b29b      	uxth	r3, r3
   1b3c6:	2b03      	cmp	r3, #3
   1b3c8:	d1cc      	bne.n	1b364 <rpc_gnss_event_handler+0xf4>
   1b3ca:	e7f3      	b.n	1b3b4 <rpc_gnss_event_handler+0x144>
   1b3cc:	4638      	mov	r0, r7
   1b3ce:	f003 fc2f 	bl	1ec30 <nrf_free>
   1b3d2:	6830      	ldr	r0, [r6, #0]
   1b3d4:	2800      	cmp	r0, #0
   1b3d6:	f47f af69 	bne.w	1b2ac <rpc_gnss_event_handler+0x3c>
   1b3da:	e76c      	b.n	1b2b6 <rpc_gnss_event_handler+0x46>
   1b3dc:	0c1b      	lsrs	r3, r3, #16
   1b3de:	041b      	lsls	r3, r3, #16
   1b3e0:	f043 0304 	orr.w	r3, r3, #4
   1b3e4:	6023      	str	r3, [r4, #0]
   1b3e6:	e7bd      	b.n	1b364 <rpc_gnss_event_handler+0xf4>
   1b3e8:	6823      	ldr	r3, [r4, #0]
   1b3ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1b3ee:	6023      	str	r3, [r4, #0]
   1b3f0:	e7c9      	b.n	1b386 <rpc_gnss_event_handler+0x116>
   1b3f2:	6830      	ldr	r0, [r6, #0]
   1b3f4:	2800      	cmp	r0, #0
   1b3f6:	f43f af5e 	beq.w	1b2b6 <rpc_gnss_event_handler+0x46>
   1b3fa:	f002 fe2b 	bl	1e054 <rpc_gnss_client_data_free>
   1b3fe:	4b03      	ldr	r3, [pc, #12]	; (1b40c <rpc_gnss_event_handler+0x19c>)
   1b400:	601f      	str	r7, [r3, #0]
   1b402:	e758      	b.n	1b2b6 <rpc_gnss_event_handler+0x46>
   1b404:	200281ee 	.word	0x200281ee
   1b408:	200233e8 	.word	0x200233e8
   1b40c:	200233ec 	.word	0x200233ec
   1b410:	200233f0 	.word	0x200233f0

0001b414 <gnss_interface_write>:
   1b414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b418:	4a74      	ldr	r2, [pc, #464]	; (1b5ec <gnss_interface_write+0x1d8>)
   1b41a:	b09f      	sub	sp, #124	; 0x7c
   1b41c:	4290      	cmp	r0, r2
   1b41e:	9d26      	ldr	r5, [sp, #152]	; 0x98
   1b420:	f040 80d7 	bne.w	1b5d2 <gnss_interface_write+0x1be>
   1b424:	2900      	cmp	r1, #0
   1b426:	f000 80c6 	beq.w	1b5b6 <gnss_interface_write+0x1a2>
   1b42a:	2d00      	cmp	r5, #0
   1b42c:	f000 80c3 	beq.w	1b5b6 <gnss_interface_write+0x1a2>
   1b430:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1b432:	2a02      	cmp	r2, #2
   1b434:	f040 80bf 	bne.w	1b5b6 <gnss_interface_write+0x1a2>
   1b438:	4c6d      	ldr	r4, [pc, #436]	; (1b5f0 <gnss_interface_write+0x1dc>)
   1b43a:	6822      	ldr	r2, [r4, #0]
   1b43c:	b292      	uxth	r2, r2
   1b43e:	2a02      	cmp	r2, #2
   1b440:	d004      	beq.n	1b44c <gnss_interface_write+0x38>
   1b442:	6822      	ldr	r2, [r4, #0]
   1b444:	b292      	uxth	r2, r2
   1b446:	2a04      	cmp	r2, #4
   1b448:	f040 80bd 	bne.w	1b5c6 <gnss_interface_write+0x1b2>
   1b44c:	2b00      	cmp	r3, #0
   1b44e:	f040 80c6 	bne.w	1b5de <gnss_interface_write+0x1ca>
   1b452:	6822      	ldr	r2, [r4, #0]
   1b454:	0390      	lsls	r0, r2, #14
   1b456:	d512      	bpl.n	1b47e <gnss_interface_write+0x6a>
   1b458:	6822      	ldr	r2, [r4, #0]
   1b45a:	882b      	ldrh	r3, [r5, #0]
   1b45c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   1b460:	6022      	str	r2, [r4, #0]
   1b462:	6822      	ldr	r2, [r4, #0]
   1b464:	3b01      	subs	r3, #1
   1b466:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   1b46a:	6022      	str	r2, [r4, #0]
   1b46c:	2b07      	cmp	r3, #7
   1b46e:	f200 80a2 	bhi.w	1b5b6 <gnss_interface_write+0x1a2>
   1b472:	e8df f003 	tbb	[pc, r3]
   1b476:	7d82      	.short	0x7d82
   1b478:	646e7378 	.word	0x646e7378
   1b47c:	0869      	.short	0x0869
   1b47e:	2000      	movs	r0, #0
   1b480:	b01f      	add	sp, #124	; 0x7c
   1b482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b486:	4608      	mov	r0, r1
   1b488:	a902      	add	r1, sp, #8
   1b48a:	f002 fd97 	bl	1dfbc <rpc_gnss_serialize_integrity>
   1b48e:	2172      	movs	r1, #114	; 0x72
   1b490:	4668      	mov	r0, sp
   1b492:	f002 fdad 	bl	1dff0 <rpc_gnss_client_request_alloc>
   1b496:	4605      	mov	r5, r0
   1b498:	9800      	ldr	r0, [sp, #0]
   1b49a:	2d00      	cmp	r5, #0
   1b49c:	d172      	bne.n	1b584 <gnss_interface_write+0x170>
   1b49e:	2800      	cmp	r0, #0
   1b4a0:	d077      	beq.n	1b592 <gnss_interface_write+0x17e>
   1b4a2:	f241 0605 	movw	r6, #4101	; 0x1005
   1b4a6:	f04f 0c49 	mov.w	ip, #73	; 0x49
   1b4aa:	2272      	movs	r2, #114	; 0x72
   1b4ac:	f04f 0e76 	mov.w	lr, #118	; 0x76
   1b4b0:	f04f 0943 	mov.w	r9, #67	; 0x43
   1b4b4:	f04f 0854 	mov.w	r8, #84	; 0x54
   1b4b8:	4f4e      	ldr	r7, [pc, #312]	; (1b5f4 <gnss_interface_write+0x1e0>)
   1b4ba:	a91e      	add	r1, sp, #120	; 0x78
   1b4bc:	883b      	ldrh	r3, [r7, #0]
   1b4be:	f880 c00f 	strb.w	ip, [r0, #15]
   1b4c2:	3301      	adds	r3, #1
   1b4c4:	b29b      	uxth	r3, r3
   1b4c6:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   1b4ca:	f841 cd74 	str.w	ip, [r1, #-116]!
   1b4ce:	7145      	strb	r5, [r0, #5]
   1b4d0:	7185      	strb	r5, [r0, #6]
   1b4d2:	71c5      	strb	r5, [r0, #7]
   1b4d4:	7205      	strb	r5, [r0, #8]
   1b4d6:	7245      	strb	r5, [r0, #9]
   1b4d8:	7285      	strb	r5, [r0, #10]
   1b4da:	72c5      	strb	r5, [r0, #11]
   1b4dc:	7102      	strb	r2, [r0, #4]
   1b4de:	f880 900c 	strb.w	r9, [r0, #12]
   1b4e2:	f880 800d 	strb.w	r8, [r0, #13]
   1b4e6:	f880 e00e 	strb.w	lr, [r0, #14]
   1b4ea:	6800      	ldr	r0, [r0, #0]
   1b4ec:	803b      	strh	r3, [r7, #0]
   1b4ee:	f00d ffc0 	bl	29472 <memcpy>
   1b4f2:	4b41      	ldr	r3, [pc, #260]	; (1b5f8 <gnss_interface_write+0x1e4>)
   1b4f4:	4631      	mov	r1, r6
   1b4f6:	9800      	ldr	r0, [sp, #0]
   1b4f8:	601d      	str	r5, [r3, #0]
   1b4fa:	f002 fd8d 	bl	1e018 <rpc_gnss_client_request_send>
   1b4fe:	2800      	cmp	r0, #0
   1b500:	d14e      	bne.n	1b5a0 <gnss_interface_write+0x18c>
   1b502:	6823      	ldr	r3, [r4, #0]
   1b504:	0299      	lsls	r1, r3, #10
   1b506:	d50b      	bpl.n	1b520 <gnss_interface_write+0x10c>
   1b508:	4e3c      	ldr	r6, [pc, #240]	; (1b5fc <gnss_interface_write+0x1e8>)
   1b50a:	4d38      	ldr	r5, [pc, #224]	; (1b5ec <gnss_interface_write+0x1d8>)
   1b50c:	e000      	b.n	1b510 <gnss_interface_write+0xfc>
   1b50e:	b978      	cbnz	r0, 1b530 <gnss_interface_write+0x11c>
   1b510:	4631      	mov	r1, r6
   1b512:	4628      	mov	r0, r5
   1b514:	f7f9 fc20 	bl	14d58 <bsd_os_timedwait>
   1b518:	6823      	ldr	r3, [r4, #0]
   1b51a:	029a      	lsls	r2, r3, #10
   1b51c:	d4f7      	bmi.n	1b50e <gnss_interface_write+0xfa>
   1b51e:	b938      	cbnz	r0, 1b530 <gnss_interface_write+0x11c>
   1b520:	6823      	ldr	r3, [r4, #0]
   1b522:	039b      	lsls	r3, r3, #14
   1b524:	d4ab      	bmi.n	1b47e <gnss_interface_write+0x6a>
   1b526:	2005      	movs	r0, #5
   1b528:	6823      	ldr	r3, [r4, #0]
   1b52a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b52e:	6023      	str	r3, [r4, #0]
   1b530:	f7f9 fcc8 	bl	14ec4 <bsd_os_errno_set>
   1b534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b538:	b01f      	add	sp, #124	; 0x7c
   1b53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b53e:	4608      	mov	r0, r1
   1b540:	a902      	add	r1, sp, #8
   1b542:	f002 fcf3 	bl	1df2c <rpc_gnss_serialize_time_and_sv_tow>
   1b546:	e7a2      	b.n	1b48e <gnss_interface_write+0x7a>
   1b548:	4608      	mov	r0, r1
   1b54a:	a902      	add	r1, sp, #8
   1b54c:	f002 fd16 	bl	1df7c <rpc_gnss_serialize_location>
   1b550:	e79d      	b.n	1b48e <gnss_interface_write+0x7a>
   1b552:	4608      	mov	r0, r1
   1b554:	a902      	add	r1, sp, #8
   1b556:	f002 fccf 	bl	1def8 <rpc_gnss_serialize_nequick>
   1b55a:	e798      	b.n	1b48e <gnss_interface_write+0x7a>
   1b55c:	4608      	mov	r0, r1
   1b55e:	a902      	add	r1, sp, #8
   1b560:	f002 fca6 	bl	1deb0 <rpc_gnss_serialize_klob>
   1b564:	e793      	b.n	1b48e <gnss_interface_write+0x7a>
   1b566:	4608      	mov	r0, r1
   1b568:	a902      	add	r1, sp, #8
   1b56a:	f002 fc6f 	bl	1de4c <rpc_gnss_serialize_alm>
   1b56e:	e78e      	b.n	1b48e <gnss_interface_write+0x7a>
   1b570:	4608      	mov	r0, r1
   1b572:	a902      	add	r1, sp, #8
   1b574:	f002 fc18 	bl	1dda8 <rpc_gnss_serialize_ephe>
   1b578:	e789      	b.n	1b48e <gnss_interface_write+0x7a>
   1b57a:	4608      	mov	r0, r1
   1b57c:	a902      	add	r1, sp, #8
   1b57e:	f002 fbf1 	bl	1dd64 <rpc_gnss_serialize_utc>
   1b582:	e784      	b.n	1b48e <gnss_interface_write+0x7a>
   1b584:	b128      	cbz	r0, 1b592 <gnss_interface_write+0x17e>
   1b586:	6803      	ldr	r3, [r0, #0]
   1b588:	b11b      	cbz	r3, 1b592 <gnss_interface_write+0x17e>
   1b58a:	4618      	mov	r0, r3
   1b58c:	f002 fd62 	bl	1e054 <rpc_gnss_client_data_free>
   1b590:	9800      	ldr	r0, [sp, #0]
   1b592:	f002 fd57 	bl	1e044 <rpc_gnss_client_message_free>
   1b596:	2023      	movs	r0, #35	; 0x23
   1b598:	f7f9 fc94 	bl	14ec4 <bsd_os_errno_set>
   1b59c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b5a0:	6823      	ldr	r3, [r4, #0]
   1b5a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1b5a6:	6023      	str	r3, [r4, #0]
   1b5a8:	6823      	ldr	r3, [r4, #0]
   1b5aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b5ae:	6023      	str	r3, [r4, #0]
   1b5b0:	b01f      	add	sp, #124	; 0x7c
   1b5b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b5b6:	2016      	movs	r0, #22
   1b5b8:	f7f9 fc84 	bl	14ec4 <bsd_os_errno_set>
   1b5bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b5c0:	b01f      	add	sp, #124	; 0x7c
   1b5c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b5c6:	2039      	movs	r0, #57	; 0x39
   1b5c8:	f7f9 fc7c 	bl	14ec4 <bsd_os_errno_set>
   1b5cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b5d0:	e756      	b.n	1b480 <gnss_interface_write+0x6c>
   1b5d2:	2009      	movs	r0, #9
   1b5d4:	f7f9 fc76 	bl	14ec4 <bsd_os_errno_set>
   1b5d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b5dc:	e750      	b.n	1b480 <gnss_interface_write+0x6c>
   1b5de:	202d      	movs	r0, #45	; 0x2d
   1b5e0:	f7f9 fc70 	bl	14ec4 <bsd_os_errno_set>
   1b5e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b5e8:	e74a      	b.n	1b480 <gnss_interface_write+0x6c>
   1b5ea:	bf00      	nop
   1b5ec:	49765443 	.word	0x49765443
   1b5f0:	200233e8 	.word	0x200233e8
   1b5f4:	200281ee 	.word	0x200281ee
   1b5f8:	200233ec 	.word	0x200233ec
   1b5fc:	200205bc 	.word	0x200205bc

0001b600 <gnss_interface_read>:
   1b600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b604:	4c50      	ldr	r4, [pc, #320]	; (1b748 <gnss_interface_read+0x148>)
   1b606:	b0b7      	sub	sp, #220	; 0xdc
   1b608:	42a0      	cmp	r0, r4
   1b60a:	f040 81fe 	bne.w	1ba0a <gnss_interface_read+0x40a>
   1b60e:	4688      	mov	r8, r1
   1b610:	2900      	cmp	r1, #0
   1b612:	f000 81f4 	beq.w	1b9fe <gnss_interface_read+0x3fe>
   1b616:	2ad7      	cmp	r2, #215	; 0xd7
   1b618:	f240 81f1 	bls.w	1b9fe <gnss_interface_read+0x3fe>
   1b61c:	4d4b      	ldr	r5, [pc, #300]	; (1b74c <gnss_interface_read+0x14c>)
   1b61e:	4699      	mov	r9, r3
   1b620:	682b      	ldr	r3, [r5, #0]
   1b622:	b29b      	uxth	r3, r3
   1b624:	2b04      	cmp	r3, #4
   1b626:	d004      	beq.n	1b632 <gnss_interface_read+0x32>
   1b628:	682b      	ldr	r3, [r5, #0]
   1b62a:	b29b      	uxth	r3, r3
   1b62c:	2b02      	cmp	r3, #2
   1b62e:	f040 81e0 	bne.w	1b9f2 <gnss_interface_read+0x3f2>
   1b632:	f1b9 0f00 	cmp.w	r9, #0
   1b636:	d158      	bne.n	1b6ea <gnss_interface_read+0xea>
   1b638:	2102      	movs	r1, #2
   1b63a:	20b6      	movs	r0, #182	; 0xb6
   1b63c:	2400      	movs	r4, #0
   1b63e:	682b      	ldr	r3, [r5, #0]
   1b640:	f10d 020e 	add.w	r2, sp, #14
   1b644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1b648:	602b      	str	r3, [r5, #0]
   1b64a:	f8df a108 	ldr.w	sl, [pc, #264]	; 1b754 <gnss_interface_read+0x154>
   1b64e:	ab08      	add	r3, sp, #32
   1b650:	4f3f      	ldr	r7, [pc, #252]	; (1b750 <gnss_interface_read+0x150>)
   1b652:	4e3d      	ldr	r6, [pc, #244]	; (1b748 <gnss_interface_read+0x148>)
   1b654:	9005      	str	r0, [sp, #20]
   1b656:	9107      	str	r1, [sp, #28]
   1b658:	9304      	str	r3, [sp, #16]
   1b65a:	9206      	str	r2, [sp, #24]
   1b65c:	ea09 0b01 	and.w	fp, r9, r1
   1b660:	f8da 0000 	ldr.w	r0, [sl]
   1b664:	464a      	mov	r2, r9
   1b666:	6803      	ldr	r3, [r0, #0]
   1b668:	a904      	add	r1, sp, #16
   1b66a:	689b      	ldr	r3, [r3, #8]
   1b66c:	4798      	blx	r3
   1b66e:	2800      	cmp	r0, #0
   1b670:	da11      	bge.n	1b696 <gnss_interface_read+0x96>
   1b672:	f1bb 0f00 	cmp.w	fp, #0
   1b676:	d141      	bne.n	1b6fc <gnss_interface_read+0xfc>
   1b678:	682b      	ldr	r3, [r5, #0]
   1b67a:	03d8      	lsls	r0, r3, #15
   1b67c:	d4f0      	bmi.n	1b660 <gnss_interface_read+0x60>
   1b67e:	b10c      	cbz	r4, 1b684 <gnss_interface_read+0x84>
   1b680:	e7ee      	b.n	1b660 <gnss_interface_read+0x60>
   1b682:	b930      	cbnz	r0, 1b692 <gnss_interface_read+0x92>
   1b684:	4639      	mov	r1, r7
   1b686:	4630      	mov	r0, r6
   1b688:	f7f9 fb66 	bl	14d58 <bsd_os_timedwait>
   1b68c:	682b      	ldr	r3, [r5, #0]
   1b68e:	03d9      	lsls	r1, r3, #15
   1b690:	d5f7      	bpl.n	1b682 <gnss_interface_read+0x82>
   1b692:	4604      	mov	r4, r0
   1b694:	e7e4      	b.n	1b660 <gnss_interface_read+0x60>
   1b696:	f244 0202 	movw	r2, #16386	; 0x4002
   1b69a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1b69e:	4293      	cmp	r3, r2
   1b6a0:	d042      	beq.n	1b728 <gnss_interface_read+0x128>
   1b6a2:	f244 0201 	movw	r2, #16385	; 0x4001
   1b6a6:	4293      	cmp	r3, r2
   1b6a8:	d056      	beq.n	1b758 <gnss_interface_read+0x158>
   1b6aa:	f244 0203 	movw	r2, #16387	; 0x4003
   1b6ae:	4293      	cmp	r3, r2
   1b6b0:	f040 81a5 	bne.w	1b9fe <gnss_interface_read+0x3fe>
   1b6b4:	2203      	movs	r2, #3
   1b6b6:	2414      	movs	r4, #20
   1b6b8:	9b08      	ldr	r3, [sp, #32]
   1b6ba:	f888 2000 	strb.w	r2, [r8]
   1b6be:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b6c0:	f8c8 3008 	str.w	r3, [r8, #8]
   1b6c4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1b6c8:	e9c8 2303 	strd	r2, r3, [r8, #12]
   1b6cc:	f8da 0000 	ldr.w	r0, [sl]
   1b6d0:	6803      	ldr	r3, [r0, #0]
   1b6d2:	68db      	ldr	r3, [r3, #12]
   1b6d4:	4798      	blx	r3
   1b6d6:	2800      	cmp	r0, #0
   1b6d8:	dd03      	ble.n	1b6e2 <gnss_interface_read+0xe2>
   1b6da:	682b      	ldr	r3, [r5, #0]
   1b6dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1b6e0:	602b      	str	r3, [r5, #0]
   1b6e2:	4620      	mov	r0, r4
   1b6e4:	b037      	add	sp, #220	; 0xdc
   1b6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6ea:	f019 0f2a 	tst.w	r9, #42	; 0x2a
   1b6ee:	d1a3      	bne.n	1b638 <gnss_interface_read+0x38>
   1b6f0:	202d      	movs	r0, #45	; 0x2d
   1b6f2:	f7f9 fbe7 	bl	14ec4 <bsd_os_errno_set>
   1b6f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1b6fa:	e7f2      	b.n	1b6e2 <gnss_interface_read+0xe2>
   1b6fc:	1c42      	adds	r2, r0, #1
   1b6fe:	4603      	mov	r3, r0
   1b700:	d1c9      	bne.n	1b696 <gnss_interface_read+0x96>
   1b702:	b93c      	cbnz	r4, 1b714 <gnss_interface_read+0x114>
   1b704:	461c      	mov	r4, r3
   1b706:	2023      	movs	r0, #35	; 0x23
   1b708:	f7f9 fbdc 	bl	14ec4 <bsd_os_errno_set>
   1b70c:	4620      	mov	r0, r4
   1b70e:	b037      	add	sp, #220	; 0xdc
   1b710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b714:	9001      	str	r0, [sp, #4]
   1b716:	4620      	mov	r0, r4
   1b718:	f7f9 fbd4 	bl	14ec4 <bsd_os_errno_set>
   1b71c:	9b01      	ldr	r3, [sp, #4]
   1b71e:	461c      	mov	r4, r3
   1b720:	4620      	mov	r0, r4
   1b722:	b037      	add	sp, #220	; 0xdc
   1b724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b728:	a808      	add	r0, sp, #32
   1b72a:	f7f1 fc05 	bl	cf38 <strlen>
   1b72e:	2302      	movs	r3, #2
   1b730:	1c44      	adds	r4, r0, #1
   1b732:	b2a4      	uxth	r4, r4
   1b734:	f808 3b08 	strb.w	r3, [r8], #8
   1b738:	4622      	mov	r2, r4
   1b73a:	a908      	add	r1, sp, #32
   1b73c:	4640      	mov	r0, r8
   1b73e:	f00d fe98 	bl	29472 <memcpy>
   1b742:	3408      	adds	r4, #8
   1b744:	e7c2      	b.n	1b6cc <gnss_interface_read+0xcc>
   1b746:	bf00      	nop
   1b748:	49765443 	.word	0x49765443
   1b74c:	200233e8 	.word	0x200233e8
   1b750:	200205bc 	.word	0x200205bc
   1b754:	200233f0 	.word	0x200233f0
   1b758:	2401      	movs	r4, #1
   1b75a:	a809      	add	r0, sp, #36	; 0x24
   1b75c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1b75e:	e9c8 0102 	strd	r0, r1, [r8, #8]
   1b762:	e9c8 2304 	strd	r2, r3, [r8, #16]
   1b766:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b76a:	f888 4000 	strb.w	r4, [r8]
   1b76e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b770:	f8c8 1018 	str.w	r1, [r8, #24]
   1b774:	9910      	ldr	r1, [sp, #64]	; 0x40
   1b776:	f8c8 201c 	str.w	r2, [r8, #28]
   1b77a:	f8c8 3020 	str.w	r3, [r8, #32]
   1b77e:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   1b782:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   1b786:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   1b78a:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   1b78e:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   1b792:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   1b796:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   1b79a:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   1b79e:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   1b7a2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1b7a6:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   1b7aa:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   1b7ae:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   1b7b2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1b7b6:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   1b7ba:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   1b7be:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   1b7c2:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1b7c6:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   1b7ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1b7cc:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   1b7d0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   1b7d4:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   1b7d8:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1b7dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1b7de:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1b7e2:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   1b7e6:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   1b7ea:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   1b7ee:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1b7f2:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   1b7f6:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   1b7fa:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   1b7fe:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   1b802:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   1b806:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   1b80a:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   1b80e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1b812:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   1b816:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   1b81a:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   1b81e:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   1b822:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   1b826:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   1b82a:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   1b82e:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   1b832:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   1b836:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   1b83a:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   1b83e:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   1b842:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   1b846:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   1b84a:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   1b84e:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   1b852:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   1b856:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   1b85a:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   1b85e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1b860:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   1b864:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1b868:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   1b86c:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1b870:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   1b874:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   1b878:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1b87c:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   1b880:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   1b884:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   1b888:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   1b88c:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   1b890:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   1b894:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   1b898:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   1b89c:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   1b8a0:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   1b8a4:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   1b8a8:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   1b8ac:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   1b8b0:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   1b8b4:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   1b8b8:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   1b8bc:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   1b8c0:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   1b8c4:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   1b8c8:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   1b8cc:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   1b8d0:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   1b8d4:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   1b8d8:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   1b8dc:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   1b8e0:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   1b8e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1b8e6:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   1b8ea:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   1b8ee:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1b8f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1b8f4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1b8f8:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   1b8fc:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   1b900:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   1b904:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1b908:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   1b90c:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   1b910:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   1b914:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   1b918:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   1b91c:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   1b920:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   1b924:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   1b928:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   1b92c:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   1b930:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   1b934:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   1b938:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   1b93c:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   1b940:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   1b944:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   1b948:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   1b94c:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   1b950:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   1b954:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   1b958:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   1b95c:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   1b960:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   1b964:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   1b968:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   1b96c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   1b970:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   1b974:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   1b978:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   1b97a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1b97e:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   1b982:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   1b986:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1b98a:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1b98e:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   1b992:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   1b996:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   1b99a:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   1b99e:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   1b9a2:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   1b9a6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   1b9aa:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   1b9ae:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   1b9b2:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   1b9b6:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   1b9ba:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   1b9be:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   1b9c2:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   1b9c6:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   1b9ca:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   1b9ce:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   1b9d2:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   1b9d6:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   1b9da:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   1b9de:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   1b9e2:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   1b9e6:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   1b9ea:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   1b9ee:	24d8      	movs	r4, #216	; 0xd8
   1b9f0:	e66c      	b.n	1b6cc <gnss_interface_read+0xcc>
   1b9f2:	2039      	movs	r0, #57	; 0x39
   1b9f4:	f7f9 fa66 	bl	14ec4 <bsd_os_errno_set>
   1b9f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1b9fc:	e671      	b.n	1b6e2 <gnss_interface_read+0xe2>
   1b9fe:	2016      	movs	r0, #22
   1ba00:	f7f9 fa60 	bl	14ec4 <bsd_os_errno_set>
   1ba04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ba08:	e66b      	b.n	1b6e2 <gnss_interface_read+0xe2>
   1ba0a:	2009      	movs	r0, #9
   1ba0c:	f7f9 fa5a 	bl	14ec4 <bsd_os_errno_set>
   1ba10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ba14:	e665      	b.n	1b6e2 <gnss_interface_read+0xe2>
   1ba16:	bf00      	nop

0001ba18 <gnss_interface_setopt>:
   1ba18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ba1c:	4db3      	ldr	r5, [pc, #716]	; (1bcec <gnss_interface_setopt+0x2d4>)
   1ba1e:	b086      	sub	sp, #24
   1ba20:	682c      	ldr	r4, [r5, #0]
   1ba22:	b2a4      	uxth	r4, r4
   1ba24:	2c02      	cmp	r4, #2
   1ba26:	d00d      	beq.n	1ba44 <gnss_interface_setopt+0x2c>
   1ba28:	2a08      	cmp	r2, #8
   1ba2a:	d00b      	beq.n	1ba44 <gnss_interface_setopt+0x2c>
   1ba2c:	f1a2 040a 	sub.w	r4, r2, #10
   1ba30:	2c01      	cmp	r4, #1
   1ba32:	d907      	bls.n	1ba44 <gnss_interface_setopt+0x2c>
   1ba34:	200e      	movs	r0, #14
   1ba36:	f7f9 fa45 	bl	14ec4 <bsd_os_errno_set>
   1ba3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ba3e:	b006      	add	sp, #24
   1ba40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ba44:	682c      	ldr	r4, [r5, #0]
   1ba46:	0264      	lsls	r4, r4, #9
   1ba48:	f100 8149 	bmi.w	1bcde <gnss_interface_setopt+0x2c6>
   1ba4c:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1ba50:	f040 8139 	bne.w	1bcc6 <gnss_interface_setopt+0x2ae>
   1ba54:	49a6      	ldr	r1, [pc, #664]	; (1bcf0 <gnss_interface_setopt+0x2d8>)
   1ba56:	4288      	cmp	r0, r1
   1ba58:	f040 813b 	bne.w	1bcd2 <gnss_interface_setopt+0x2ba>
   1ba5c:	f1a2 010a 	sub.w	r1, r2, #10
   1ba60:	2901      	cmp	r1, #1
   1ba62:	d902      	bls.n	1ba6a <gnss_interface_setopt+0x52>
   1ba64:	2b00      	cmp	r3, #0
   1ba66:	f000 8112 	beq.w	1bc8e <gnss_interface_setopt+0x276>
   1ba6a:	3a01      	subs	r2, #1
   1ba6c:	2a0a      	cmp	r2, #10
   1ba6e:	f200 810e 	bhi.w	1bc8e <gnss_interface_setopt+0x276>
   1ba72:	e8df f012 	tbh	[pc, r2, lsl #1]
   1ba76:	007f      	.short	0x007f
   1ba78:	0098008c 	.word	0x0098008c
   1ba7c:	00ae00a2 	.word	0x00ae00a2
   1ba80:	00c500b9 	.word	0x00c500b9
   1ba84:	00f300dd 	.word	0x00f300dd
   1ba88:	000b00ff 	.word	0x000b00ff
   1ba8c:	682b      	ldr	r3, [r5, #0]
   1ba8e:	b29b      	uxth	r3, r3
   1ba90:	2b04      	cmp	r3, #4
   1ba92:	d1cf      	bne.n	1ba34 <gnss_interface_setopt+0x1c>
   1ba94:	2203      	movs	r2, #3
   1ba96:	f241 0604 	movw	r6, #4100	; 0x1004
   1ba9a:	2300      	movs	r3, #0
   1ba9c:	4637      	mov	r7, r6
   1ba9e:	f88d 2008 	strb.w	r2, [sp, #8]
   1baa2:	f88d 3009 	strb.w	r3, [sp, #9]
   1baa6:	f88d 300a 	strb.w	r3, [sp, #10]
   1baaa:	f88d 300b 	strb.w	r3, [sp, #11]
   1baae:	f88d 300c 	strb.w	r3, [sp, #12]
   1bab2:	682b      	ldr	r3, [r5, #0]
   1bab4:	2112      	movs	r1, #18
   1bab6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1baba:	4668      	mov	r0, sp
   1babc:	602b      	str	r3, [r5, #0]
   1babe:	f002 fa97 	bl	1dff0 <rpc_gnss_client_request_alloc>
   1bac2:	4604      	mov	r4, r0
   1bac4:	9800      	ldr	r0, [sp, #0]
   1bac6:	2c00      	cmp	r4, #0
   1bac8:	f040 80e7 	bne.w	1bc9a <gnss_interface_setopt+0x282>
   1bacc:	2800      	cmp	r0, #0
   1bace:	f000 80eb 	beq.w	1bca8 <gnss_interface_setopt+0x290>
   1bad2:	2212      	movs	r2, #18
   1bad4:	f04f 0876 	mov.w	r8, #118	; 0x76
   1bad8:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1badc:	f04f 0a43 	mov.w	sl, #67	; 0x43
   1bae0:	f04f 0954 	mov.w	r9, #84	; 0x54
   1bae4:	f8df c210 	ldr.w	ip, [pc, #528]	; 1bcf8 <gnss_interface_setopt+0x2e0>
   1bae8:	a906      	add	r1, sp, #24
   1baea:	f8bc 3000 	ldrh.w	r3, [ip]
   1baee:	f880 800e 	strb.w	r8, [r0, #14]
   1baf2:	3301      	adds	r3, #1
   1baf4:	b29b      	uxth	r3, r3
   1baf6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   1bafa:	f841 6d14 	str.w	r6, [r1, #-20]!
   1bafe:	7144      	strb	r4, [r0, #5]
   1bb00:	7184      	strb	r4, [r0, #6]
   1bb02:	71c4      	strb	r4, [r0, #7]
   1bb04:	7204      	strb	r4, [r0, #8]
   1bb06:	7244      	strb	r4, [r0, #9]
   1bb08:	7284      	strb	r4, [r0, #10]
   1bb0a:	72c4      	strb	r4, [r0, #11]
   1bb0c:	7102      	strb	r2, [r0, #4]
   1bb0e:	f880 a00c 	strb.w	sl, [r0, #12]
   1bb12:	f880 900d 	strb.w	r9, [r0, #13]
   1bb16:	f880 e00f 	strb.w	lr, [r0, #15]
   1bb1a:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 1bcfc <gnss_interface_setopt+0x2e4>
   1bb1e:	6800      	ldr	r0, [r0, #0]
   1bb20:	f8ac 3000 	strh.w	r3, [ip]
   1bb24:	f00d fca5 	bl	29472 <memcpy>
   1bb28:	4639      	mov	r1, r7
   1bb2a:	9800      	ldr	r0, [sp, #0]
   1bb2c:	f8c8 4000 	str.w	r4, [r8]
   1bb30:	f002 fa72 	bl	1e018 <rpc_gnss_client_request_send>
   1bb34:	2800      	cmp	r0, #0
   1bb36:	f040 80bc 	bne.w	1bcb2 <gnss_interface_setopt+0x29a>
   1bb3a:	4f6e      	ldr	r7, [pc, #440]	; (1bcf4 <gnss_interface_setopt+0x2dc>)
   1bb3c:	4e6c      	ldr	r6, [pc, #432]	; (1bcf0 <gnss_interface_setopt+0x2d8>)
   1bb3e:	4639      	mov	r1, r7
   1bb40:	4630      	mov	r0, r6
   1bb42:	f7f9 f909 	bl	14d58 <bsd_os_timedwait>
   1bb46:	682c      	ldr	r4, [r5, #0]
   1bb48:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   1bb4c:	d1f7      	bne.n	1bb3e <gnss_interface_setopt+0x126>
   1bb4e:	f8d8 0000 	ldr.w	r0, [r8]
   1bb52:	b118      	cbz	r0, 1bb5c <gnss_interface_setopt+0x144>
   1bb54:	f002 fa7e 	bl	1e054 <rpc_gnss_client_data_free>
   1bb58:	f8c8 4000 	str.w	r4, [r8]
   1bb5c:	682b      	ldr	r3, [r5, #0]
   1bb5e:	021b      	lsls	r3, r3, #8
   1bb60:	f140 808f 	bpl.w	1bc82 <gnss_interface_setopt+0x26a>
   1bb64:	2000      	movs	r0, #0
   1bb66:	682b      	ldr	r3, [r5, #0]
   1bb68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1bb6c:	602b      	str	r3, [r5, #0]
   1bb6e:	b006      	add	sp, #24
   1bb70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bb74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bb76:	2a02      	cmp	r2, #2
   1bb78:	f040 8089 	bne.w	1bc8e <gnss_interface_setopt+0x276>
   1bb7c:	2208      	movs	r2, #8
   1bb7e:	f241 1603 	movw	r6, #4355	; 0x1103
   1bb82:	881b      	ldrh	r3, [r3, #0]
   1bb84:	9202      	str	r2, [sp, #8]
   1bb86:	f8ad 300f 	strh.w	r3, [sp, #15]
   1bb8a:	4637      	mov	r7, r6
   1bb8c:	e791      	b.n	1bab2 <gnss_interface_setopt+0x9a>
   1bb8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bb90:	2a02      	cmp	r2, #2
   1bb92:	d17c      	bne.n	1bc8e <gnss_interface_setopt+0x276>
   1bb94:	2210      	movs	r2, #16
   1bb96:	f241 1603 	movw	r6, #4355	; 0x1103
   1bb9a:	881b      	ldrh	r3, [r3, #0]
   1bb9c:	9202      	str	r2, [sp, #8]
   1bb9e:	f8ad 3011 	strh.w	r3, [sp, #17]
   1bba2:	4637      	mov	r7, r6
   1bba4:	e785      	b.n	1bab2 <gnss_interface_setopt+0x9a>
   1bba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bba8:	2a01      	cmp	r2, #1
   1bbaa:	d170      	bne.n	1bc8e <gnss_interface_setopt+0x276>
   1bbac:	781b      	ldrb	r3, [r3, #0]
   1bbae:	2b01      	cmp	r3, #1
   1bbb0:	d16d      	bne.n	1bc8e <gnss_interface_setopt+0x276>
   1bbb2:	f241 1603 	movw	r6, #4355	; 0x1103
   1bbb6:	4637      	mov	r7, r6
   1bbb8:	e77b      	b.n	1bab2 <gnss_interface_setopt+0x9a>
   1bbba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bbbc:	2a02      	cmp	r2, #2
   1bbbe:	d166      	bne.n	1bc8e <gnss_interface_setopt+0x276>
   1bbc0:	2220      	movs	r2, #32
   1bbc2:	f241 1603 	movw	r6, #4355	; 0x1103
   1bbc6:	881b      	ldrh	r3, [r3, #0]
   1bbc8:	9202      	str	r2, [sp, #8]
   1bbca:	f8ad 3013 	strh.w	r3, [sp, #19]
   1bbce:	4637      	mov	r7, r6
   1bbd0:	e76f      	b.n	1bab2 <gnss_interface_setopt+0x9a>
   1bbd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bbd4:	2a01      	cmp	r2, #1
   1bbd6:	d15a      	bne.n	1bc8e <gnss_interface_setopt+0x276>
   1bbd8:	f241 1603 	movw	r6, #4355	; 0x1103
   1bbdc:	781b      	ldrb	r3, [r3, #0]
   1bbde:	9202      	str	r2, [sp, #8]
   1bbe0:	f88d 300c 	strb.w	r3, [sp, #12]
   1bbe4:	4637      	mov	r7, r6
   1bbe6:	e764      	b.n	1bab2 <gnss_interface_setopt+0x9a>
   1bbe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bbea:	2a01      	cmp	r2, #1
   1bbec:	d14f      	bne.n	1bc8e <gnss_interface_setopt+0x276>
   1bbee:	2202      	movs	r2, #2
   1bbf0:	f241 1603 	movw	r6, #4355	; 0x1103
   1bbf4:	781b      	ldrb	r3, [r3, #0]
   1bbf6:	9202      	str	r2, [sp, #8]
   1bbf8:	f88d 300d 	strb.w	r3, [sp, #13]
   1bbfc:	4637      	mov	r7, r6
   1bbfe:	e758      	b.n	1bab2 <gnss_interface_setopt+0x9a>
   1bc00:	682a      	ldr	r2, [r5, #0]
   1bc02:	b292      	uxth	r2, r2
   1bc04:	2a02      	cmp	r2, #2
   1bc06:	f47f af15 	bne.w	1ba34 <gnss_interface_setopt+0x1c>
   1bc0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bc0c:	2a04      	cmp	r2, #4
   1bc0e:	d13e      	bne.n	1bc8e <gnss_interface_setopt+0x276>
   1bc10:	2101      	movs	r1, #1
   1bc12:	f241 0604 	movw	r6, #4100	; 0x1004
   1bc16:	682a      	ldr	r2, [r5, #0]
   1bc18:	6818      	ldr	r0, [r3, #0]
   1bc1a:	0c13      	lsrs	r3, r2, #16
   1bc1c:	041b      	lsls	r3, r3, #16
   1bc1e:	f043 0303 	orr.w	r3, r3, #3
   1bc22:	f8cd 0009 	str.w	r0, [sp, #9]
   1bc26:	602b      	str	r3, [r5, #0]
   1bc28:	f88d 1008 	strb.w	r1, [sp, #8]
   1bc2c:	4637      	mov	r7, r6
   1bc2e:	e740      	b.n	1bab2 <gnss_interface_setopt+0x9a>
   1bc30:	682a      	ldr	r2, [r5, #0]
   1bc32:	b292      	uxth	r2, r2
   1bc34:	2a04      	cmp	r2, #4
   1bc36:	d004      	beq.n	1bc42 <gnss_interface_setopt+0x22a>
   1bc38:	682a      	ldr	r2, [r5, #0]
   1bc3a:	b292      	uxth	r2, r2
   1bc3c:	2a02      	cmp	r2, #2
   1bc3e:	f47f aef9 	bne.w	1ba34 <gnss_interface_setopt+0x1c>
   1bc42:	2200      	movs	r2, #0
   1bc44:	f88d 2008 	strb.w	r2, [sp, #8]
   1bc48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bc4a:	2a04      	cmp	r2, #4
   1bc4c:	d11f      	bne.n	1bc8e <gnss_interface_setopt+0x276>
   1bc4e:	f241 0604 	movw	r6, #4100	; 0x1004
   1bc52:	681b      	ldr	r3, [r3, #0]
   1bc54:	4637      	mov	r7, r6
   1bc56:	f8cd 3009 	str.w	r3, [sp, #9]
   1bc5a:	e72a      	b.n	1bab2 <gnss_interface_setopt+0x9a>
   1bc5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bc5e:	2a01      	cmp	r2, #1
   1bc60:	d115      	bne.n	1bc8e <gnss_interface_setopt+0x276>
   1bc62:	2240      	movs	r2, #64	; 0x40
   1bc64:	f241 1603 	movw	r6, #4355	; 0x1103
   1bc68:	781b      	ldrb	r3, [r3, #0]
   1bc6a:	9202      	str	r2, [sp, #8]
   1bc6c:	f88d 3015 	strb.w	r3, [sp, #21]
   1bc70:	4637      	mov	r7, r6
   1bc72:	e71e      	b.n	1bab2 <gnss_interface_setopt+0x9a>
   1bc74:	682b      	ldr	r3, [r5, #0]
   1bc76:	b29b      	uxth	r3, r3
   1bc78:	2b04      	cmp	r3, #4
   1bc7a:	f47f aedb 	bne.w	1ba34 <gnss_interface_setopt+0x1c>
   1bc7e:	2202      	movs	r2, #2
   1bc80:	e709      	b.n	1ba96 <gnss_interface_setopt+0x7e>
   1bc82:	200e      	movs	r0, #14
   1bc84:	f7f9 f91e 	bl	14ec4 <bsd_os_errno_set>
   1bc88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bc8c:	e76b      	b.n	1bb66 <gnss_interface_setopt+0x14e>
   1bc8e:	2016      	movs	r0, #22
   1bc90:	f7f9 f918 	bl	14ec4 <bsd_os_errno_set>
   1bc94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bc98:	e6d1      	b.n	1ba3e <gnss_interface_setopt+0x26>
   1bc9a:	b128      	cbz	r0, 1bca8 <gnss_interface_setopt+0x290>
   1bc9c:	6803      	ldr	r3, [r0, #0]
   1bc9e:	b11b      	cbz	r3, 1bca8 <gnss_interface_setopt+0x290>
   1bca0:	4618      	mov	r0, r3
   1bca2:	f002 f9d7 	bl	1e054 <rpc_gnss_client_data_free>
   1bca6:	9800      	ldr	r0, [sp, #0]
   1bca8:	f002 f9cc 	bl	1e044 <rpc_gnss_client_message_free>
   1bcac:	2023      	movs	r0, #35	; 0x23
   1bcae:	f7f9 f909 	bl	14ec4 <bsd_os_errno_set>
   1bcb2:	682b      	ldr	r3, [r5, #0]
   1bcb4:	200e      	movs	r0, #14
   1bcb6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1bcba:	602b      	str	r3, [r5, #0]
   1bcbc:	f7f9 f902 	bl	14ec4 <bsd_os_errno_set>
   1bcc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bcc4:	e6bb      	b.n	1ba3e <gnss_interface_setopt+0x26>
   1bcc6:	202a      	movs	r0, #42	; 0x2a
   1bcc8:	f7f9 f8fc 	bl	14ec4 <bsd_os_errno_set>
   1bccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bcd0:	e6b5      	b.n	1ba3e <gnss_interface_setopt+0x26>
   1bcd2:	2009      	movs	r0, #9
   1bcd4:	f7f9 f8f6 	bl	14ec4 <bsd_os_errno_set>
   1bcd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bcdc:	e6af      	b.n	1ba3e <gnss_interface_setopt+0x26>
   1bcde:	2073      	movs	r0, #115	; 0x73
   1bce0:	f7f9 f8f0 	bl	14ec4 <bsd_os_errno_set>
   1bce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bce8:	e6a9      	b.n	1ba3e <gnss_interface_setopt+0x26>
   1bcea:	bf00      	nop
   1bcec:	200233e8 	.word	0x200233e8
   1bcf0:	49765443 	.word	0x49765443
   1bcf4:	200205bc 	.word	0x200205bc
   1bcf8:	200281ee 	.word	0x200281ee
   1bcfc:	200233ec 	.word	0x200233ec

0001bd00 <gnss_interface_getopt>:
   1bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd04:	4c81      	ldr	r4, [pc, #516]	; (1bf0c <gnss_interface_getopt+0x20c>)
   1bd06:	b087      	sub	sp, #28
   1bd08:	6825      	ldr	r5, [r4, #0]
   1bd0a:	4698      	mov	r8, r3
   1bd0c:	b2ad      	uxth	r5, r5
   1bd0e:	2d02      	cmp	r5, #2
   1bd10:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bd12:	f040 80dd 	bne.w	1bed0 <gnss_interface_getopt+0x1d0>
   1bd16:	6825      	ldr	r5, [r4, #0]
   1bd18:	03ee      	lsls	r6, r5, #15
   1bd1a:	f100 80eb 	bmi.w	1bef4 <gnss_interface_getopt+0x1f4>
   1bd1e:	6825      	ldr	r5, [r4, #0]
   1bd20:	01ed      	lsls	r5, r5, #7
   1bd22:	f100 80ed 	bmi.w	1bf00 <gnss_interface_getopt+0x200>
   1bd26:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1bd2a:	f040 80d7 	bne.w	1bedc <gnss_interface_getopt+0x1dc>
   1bd2e:	4978      	ldr	r1, [pc, #480]	; (1bf10 <gnss_interface_getopt+0x210>)
   1bd30:	4288      	cmp	r0, r1
   1bd32:	f040 80d9 	bne.w	1bee8 <gnss_interface_getopt+0x1e8>
   1bd36:	f1b8 0f00 	cmp.w	r8, #0
   1bd3a:	d00b      	beq.n	1bd54 <gnss_interface_getopt+0x54>
   1bd3c:	b153      	cbz	r3, 1bd54 <gnss_interface_getopt+0x54>
   1bd3e:	1e57      	subs	r7, r2, #1
   1bd40:	2f05      	cmp	r7, #5
   1bd42:	d807      	bhi.n	1bd54 <gnss_interface_getopt+0x54>
   1bd44:	e8df f007 	tbb	[pc, r7]
   1bd48:	0f030f0f 	.word	0x0f030f0f
   1bd4c:	0303      	.short	0x0303
   1bd4e:	681b      	ldr	r3, [r3, #0]
   1bd50:	2b01      	cmp	r3, #1
   1bd52:	d00b      	beq.n	1bd6c <gnss_interface_getopt+0x6c>
   1bd54:	2016      	movs	r0, #22
   1bd56:	f7f9 f8b5 	bl	14ec4 <bsd_os_errno_set>
   1bd5a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1bd5e:	4628      	mov	r0, r5
   1bd60:	b007      	add	sp, #28
   1bd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd66:	681b      	ldr	r3, [r3, #0]
   1bd68:	2b02      	cmp	r3, #2
   1bd6a:	d1f3      	bne.n	1bd54 <gnss_interface_getopt+0x54>
   1bd6c:	6823      	ldr	r3, [r4, #0]
   1bd6e:	2212      	movs	r2, #18
   1bd70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1bd74:	2100      	movs	r1, #0
   1bd76:	a801      	add	r0, sp, #4
   1bd78:	6023      	str	r3, [r4, #0]
   1bd7a:	f00d fbb4 	bl	294e6 <memset>
   1bd7e:	2112      	movs	r1, #18
   1bd80:	4668      	mov	r0, sp
   1bd82:	f002 f935 	bl	1dff0 <rpc_gnss_client_request_alloc>
   1bd86:	4605      	mov	r5, r0
   1bd88:	9800      	ldr	r0, [sp, #0]
   1bd8a:	2d00      	cmp	r5, #0
   1bd8c:	f040 808a 	bne.w	1bea4 <gnss_interface_getopt+0x1a4>
   1bd90:	2800      	cmp	r0, #0
   1bd92:	f000 808e 	beq.w	1beb2 <gnss_interface_getopt+0x1b2>
   1bd96:	f241 1602 	movw	r6, #4354	; 0x1102
   1bd9a:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1bd9e:	2212      	movs	r2, #18
   1bda0:	f04f 0976 	mov.w	r9, #118	; 0x76
   1bda4:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1bda8:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1bdac:	f8df c168 	ldr.w	ip, [pc, #360]	; 1bf18 <gnss_interface_getopt+0x218>
   1bdb0:	f880 e00f 	strb.w	lr, [r0, #15]
   1bdb4:	f8bc 3000 	ldrh.w	r3, [ip]
   1bdb8:	f880 900e 	strb.w	r9, [r0, #14]
   1bdbc:	3301      	adds	r3, #1
   1bdbe:	b29b      	uxth	r3, r3
   1bdc0:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   1bdc4:	f8cd e004 	str.w	lr, [sp, #4]
   1bdc8:	7145      	strb	r5, [r0, #5]
   1bdca:	7185      	strb	r5, [r0, #6]
   1bdcc:	71c5      	strb	r5, [r0, #7]
   1bdce:	7205      	strb	r5, [r0, #8]
   1bdd0:	7245      	strb	r5, [r0, #9]
   1bdd2:	7285      	strb	r5, [r0, #10]
   1bdd4:	72c5      	strb	r5, [r0, #11]
   1bdd6:	a901      	add	r1, sp, #4
   1bdd8:	7102      	strb	r2, [r0, #4]
   1bdda:	f880 b00c 	strb.w	fp, [r0, #12]
   1bdde:	f880 a00d 	strb.w	sl, [r0, #13]
   1bde2:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1bf1c <gnss_interface_getopt+0x21c>
   1bde6:	6800      	ldr	r0, [r0, #0]
   1bde8:	f8ac 3000 	strh.w	r3, [ip]
   1bdec:	f00d fb41 	bl	29472 <memcpy>
   1bdf0:	4631      	mov	r1, r6
   1bdf2:	9800      	ldr	r0, [sp, #0]
   1bdf4:	f8c9 5000 	str.w	r5, [r9]
   1bdf8:	f002 f90e 	bl	1e018 <rpc_gnss_client_request_send>
   1bdfc:	2800      	cmp	r0, #0
   1bdfe:	d15d      	bne.n	1bebc <gnss_interface_getopt+0x1bc>
   1be00:	4e44      	ldr	r6, [pc, #272]	; (1bf14 <gnss_interface_getopt+0x214>)
   1be02:	4d43      	ldr	r5, [pc, #268]	; (1bf10 <gnss_interface_getopt+0x210>)
   1be04:	4631      	mov	r1, r6
   1be06:	4628      	mov	r0, r5
   1be08:	f7f8 ffa6 	bl	14d58 <bsd_os_timedwait>
   1be0c:	6823      	ldr	r3, [r4, #0]
   1be0e:	01db      	lsls	r3, r3, #7
   1be10:	d4f8      	bmi.n	1be04 <gnss_interface_getopt+0x104>
   1be12:	f8d9 0000 	ldr.w	r0, [r9]
   1be16:	b1d8      	cbz	r0, 1be50 <gnss_interface_getopt+0x150>
   1be18:	6825      	ldr	r5, [r4, #0]
   1be1a:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1be1e:	d00f      	beq.n	1be40 <gnss_interface_getopt+0x140>
   1be20:	2f05      	cmp	r7, #5
   1be22:	d837      	bhi.n	1be94 <gnss_interface_getopt+0x194>
   1be24:	e8df f007 	tbb	[pc, r7]
   1be28:	2b26201a 	.word	0x2b26201a
   1be2c:	0331      	.short	0x0331
   1be2e:	2500      	movs	r5, #0
   1be30:	7b43      	ldrb	r3, [r0, #13]
   1be32:	f888 3000 	strb.w	r3, [r8]
   1be36:	f002 f90d 	bl	1e054 <rpc_gnss_client_data_free>
   1be3a:	2300      	movs	r3, #0
   1be3c:	f8c9 3000 	str.w	r3, [r9]
   1be40:	6823      	ldr	r3, [r4, #0]
   1be42:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1be46:	6023      	str	r3, [r4, #0]
   1be48:	4628      	mov	r0, r5
   1be4a:	b007      	add	sp, #28
   1be4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be50:	6823      	ldr	r3, [r4, #0]
   1be52:	4605      	mov	r5, r0
   1be54:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1be58:	6023      	str	r3, [r4, #0]
   1be5a:	e7f5      	b.n	1be48 <gnss_interface_getopt+0x148>
   1be5c:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   1be60:	2500      	movs	r5, #0
   1be62:	f8a8 3000 	strh.w	r3, [r8]
   1be66:	e7e6      	b.n	1be36 <gnss_interface_getopt+0x136>
   1be68:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   1be6c:	2500      	movs	r5, #0
   1be6e:	f8a8 3000 	strh.w	r3, [r8]
   1be72:	e7e0      	b.n	1be36 <gnss_interface_getopt+0x136>
   1be74:	7b83      	ldrb	r3, [r0, #14]
   1be76:	2500      	movs	r5, #0
   1be78:	f888 3000 	strb.w	r3, [r8]
   1be7c:	e7db      	b.n	1be36 <gnss_interface_getopt+0x136>
   1be7e:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1be82:	2500      	movs	r5, #0
   1be84:	f8a8 3000 	strh.w	r3, [r8]
   1be88:	e7d5      	b.n	1be36 <gnss_interface_getopt+0x136>
   1be8a:	7b03      	ldrb	r3, [r0, #12]
   1be8c:	2500      	movs	r5, #0
   1be8e:	f888 3000 	strb.w	r3, [r8]
   1be92:	e7d0      	b.n	1be36 <gnss_interface_getopt+0x136>
   1be94:	2016      	movs	r0, #22
   1be96:	f7f9 f815 	bl	14ec4 <bsd_os_errno_set>
   1be9a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1be9e:	f8d9 0000 	ldr.w	r0, [r9]
   1bea2:	e7c8      	b.n	1be36 <gnss_interface_getopt+0x136>
   1bea4:	b128      	cbz	r0, 1beb2 <gnss_interface_getopt+0x1b2>
   1bea6:	6803      	ldr	r3, [r0, #0]
   1bea8:	b11b      	cbz	r3, 1beb2 <gnss_interface_getopt+0x1b2>
   1beaa:	4618      	mov	r0, r3
   1beac:	f002 f8d2 	bl	1e054 <rpc_gnss_client_data_free>
   1beb0:	9800      	ldr	r0, [sp, #0]
   1beb2:	f002 f8c7 	bl	1e044 <rpc_gnss_client_message_free>
   1beb6:	2023      	movs	r0, #35	; 0x23
   1beb8:	f7f9 f804 	bl	14ec4 <bsd_os_errno_set>
   1bebc:	6823      	ldr	r3, [r4, #0]
   1bebe:	200e      	movs	r0, #14
   1bec0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1bec4:	6023      	str	r3, [r4, #0]
   1bec6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1beca:	f7f8 fffb 	bl	14ec4 <bsd_os_errno_set>
   1bece:	e746      	b.n	1bd5e <gnss_interface_getopt+0x5e>
   1bed0:	200e      	movs	r0, #14
   1bed2:	f7f8 fff7 	bl	14ec4 <bsd_os_errno_set>
   1bed6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1beda:	e740      	b.n	1bd5e <gnss_interface_getopt+0x5e>
   1bedc:	202a      	movs	r0, #42	; 0x2a
   1bede:	f7f8 fff1 	bl	14ec4 <bsd_os_errno_set>
   1bee2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1bee6:	e73a      	b.n	1bd5e <gnss_interface_getopt+0x5e>
   1bee8:	2009      	movs	r0, #9
   1beea:	f7f8 ffeb 	bl	14ec4 <bsd_os_errno_set>
   1beee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1bef2:	e734      	b.n	1bd5e <gnss_interface_getopt+0x5e>
   1bef4:	2005      	movs	r0, #5
   1bef6:	f7f8 ffe5 	bl	14ec4 <bsd_os_errno_set>
   1befa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1befe:	e72e      	b.n	1bd5e <gnss_interface_getopt+0x5e>
   1bf00:	2073      	movs	r0, #115	; 0x73
   1bf02:	f7f8 ffdf 	bl	14ec4 <bsd_os_errno_set>
   1bf06:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1bf0a:	e728      	b.n	1bd5e <gnss_interface_getopt+0x5e>
   1bf0c:	200233e8 	.word	0x200233e8
   1bf10:	49765443 	.word	0x49765443
   1bf14:	200205bc 	.word	0x200205bc
   1bf18:	200281ee 	.word	0x200281ee
   1bf1c:	200233ec 	.word	0x200233ec

0001bf20 <gnss_interface_init>:
   1bf20:	2100      	movs	r1, #0
   1bf22:	b538      	push	{r3, r4, r5, lr}
   1bf24:	4c09      	ldr	r4, [pc, #36]	; (1bf4c <gnss_interface_init+0x2c>)
   1bf26:	4d0a      	ldr	r5, [pc, #40]	; (1bf50 <gnss_interface_init+0x30>)
   1bf28:	6822      	ldr	r2, [r4, #0]
   1bf2a:	480a      	ldr	r0, [pc, #40]	; (1bf54 <gnss_interface_init+0x34>)
   1bf2c:	4b0a      	ldr	r3, [pc, #40]	; (1bf58 <gnss_interface_init+0x38>)
   1bf2e:	402a      	ands	r2, r5
   1bf30:	6022      	str	r2, [r4, #0]
   1bf32:	8001      	strh	r1, [r0, #0]
   1bf34:	6019      	str	r1, [r3, #0]
   1bf36:	f002 f855 	bl	1dfe4 <rpc_gnss_client_init>
   1bf3a:	b928      	cbnz	r0, 1bf48 <gnss_interface_init+0x28>
   1bf3c:	6823      	ldr	r3, [r4, #0]
   1bf3e:	402b      	ands	r3, r5
   1bf40:	f043 0301 	orr.w	r3, r3, #1
   1bf44:	6023      	str	r3, [r4, #0]
   1bf46:	bd38      	pop	{r3, r4, r5, pc}
   1bf48:	2003      	movs	r0, #3
   1bf4a:	bd38      	pop	{r3, r4, r5, pc}
   1bf4c:	200233e8 	.word	0x200233e8
   1bf50:	ffff0000 	.word	0xffff0000
   1bf54:	200281ee 	.word	0x200281ee
   1bf58:	200233ec 	.word	0x200233ec

0001bf5c <gnss_interface_open>:
   1bf5c:	2902      	cmp	r1, #2
   1bf5e:	b510      	push	{r4, lr}
   1bf60:	d121      	bne.n	1bfa6 <gnss_interface_open+0x4a>
   1bf62:	4c17      	ldr	r4, [pc, #92]	; (1bfc0 <gnss_interface_open+0x64>)
   1bf64:	6823      	ldr	r3, [r4, #0]
   1bf66:	b29b      	uxth	r3, r3
   1bf68:	2b01      	cmp	r3, #1
   1bf6a:	d116      	bne.n	1bf9a <gnss_interface_open+0x3e>
   1bf6c:	6823      	ldr	r3, [r4, #0]
   1bf6e:	4608      	mov	r0, r1
   1bf70:	0c1b      	lsrs	r3, r3, #16
   1bf72:	041b      	lsls	r3, r3, #16
   1bf74:	f043 0302 	orr.w	r3, r3, #2
   1bf78:	2200      	movs	r2, #0
   1bf7a:	4912      	ldr	r1, [pc, #72]	; (1bfc4 <gnss_interface_open+0x68>)
   1bf7c:	6023      	str	r3, [r4, #0]
   1bf7e:	f002 f953 	bl	1e228 <packet_handler_create>
   1bf82:	4a11      	ldr	r2, [pc, #68]	; (1bfc8 <gnss_interface_open+0x6c>)
   1bf84:	6010      	str	r0, [r2, #0]
   1bf86:	b1a0      	cbz	r0, 1bfb2 <gnss_interface_open+0x56>
   1bf88:	6823      	ldr	r3, [r4, #0]
   1bf8a:	6802      	ldr	r2, [r0, #0]
   1bf8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1bf90:	6812      	ldr	r2, [r2, #0]
   1bf92:	6023      	str	r3, [r4, #0]
   1bf94:	4790      	blx	r2
   1bf96:	480d      	ldr	r0, [pc, #52]	; (1bfcc <gnss_interface_open+0x70>)
   1bf98:	bd10      	pop	{r4, pc}
   1bf9a:	2005      	movs	r0, #5
   1bf9c:	f7f8 ff92 	bl	14ec4 <bsd_os_errno_set>
   1bfa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bfa4:	bd10      	pop	{r4, pc}
   1bfa6:	2029      	movs	r0, #41	; 0x29
   1bfa8:	f7f8 ff8c 	bl	14ec4 <bsd_os_errno_set>
   1bfac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bfb0:	bd10      	pop	{r4, pc}
   1bfb2:	200e      	movs	r0, #14
   1bfb4:	f7f8 ff86 	bl	14ec4 <bsd_os_errno_set>
   1bfb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bfbc:	bd10      	pop	{r4, pc}
   1bfbe:	bf00      	nop
   1bfc0:	200233e8 	.word	0x200233e8
   1bfc4:	0001b255 	.word	0x0001b255
   1bfc8:	200233f0 	.word	0x200233f0
   1bfcc:	49765443 	.word	0x49765443

0001bfd0 <gnss_interface_close>:
   1bfd0:	b530      	push	{r4, r5, lr}
   1bfd2:	4b15      	ldr	r3, [pc, #84]	; (1c028 <gnss_interface_close+0x58>)
   1bfd4:	b085      	sub	sp, #20
   1bfd6:	4298      	cmp	r0, r3
   1bfd8:	d11f      	bne.n	1c01a <gnss_interface_close+0x4a>
   1bfda:	4c14      	ldr	r4, [pc, #80]	; (1c02c <gnss_interface_close+0x5c>)
   1bfdc:	6822      	ldr	r2, [r4, #0]
   1bfde:	b292      	uxth	r2, r2
   1bfe0:	2a04      	cmp	r2, #4
   1bfe2:	d00f      	beq.n	1c004 <gnss_interface_close+0x34>
   1bfe4:	4d12      	ldr	r5, [pc, #72]	; (1c030 <gnss_interface_close+0x60>)
   1bfe6:	6828      	ldr	r0, [r5, #0]
   1bfe8:	b118      	cbz	r0, 1bff2 <gnss_interface_close+0x22>
   1bfea:	f002 f93d 	bl	1e268 <packet_handler_delete>
   1bfee:	2300      	movs	r3, #0
   1bff0:	602b      	str	r3, [r5, #0]
   1bff2:	2000      	movs	r0, #0
   1bff4:	6823      	ldr	r3, [r4, #0]
   1bff6:	0c1b      	lsrs	r3, r3, #16
   1bff8:	041b      	lsls	r3, r3, #16
   1bffa:	f043 0301 	orr.w	r3, r3, #1
   1bffe:	6023      	str	r3, [r4, #0]
   1c000:	b005      	add	sp, #20
   1c002:	bd30      	pop	{r4, r5, pc}
   1c004:	2100      	movs	r1, #0
   1c006:	ab04      	add	r3, sp, #16
   1c008:	f843 1d04 	str.w	r1, [r3, #-4]!
   1c00c:	9200      	str	r2, [sp, #0]
   1c00e:	f44f 7101 	mov.w	r1, #516	; 0x204
   1c012:	2208      	movs	r2, #8
   1c014:	f001 fe66 	bl	1dce4 <nrf_setsockopt>
   1c018:	e7e4      	b.n	1bfe4 <gnss_interface_close+0x14>
   1c01a:	2009      	movs	r0, #9
   1c01c:	f7f8 ff52 	bl	14ec4 <bsd_os_errno_set>
   1c020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c024:	e7ec      	b.n	1c000 <gnss_interface_close+0x30>
   1c026:	bf00      	nop
   1c028:	49765443 	.word	0x49765443
   1c02c:	200233e8 	.word	0x200233e8
   1c030:	200233f0 	.word	0x200233f0

0001c034 <rpc_logobj_client_evt_handler>:
   1c034:	b120      	cbz	r0, 1c040 <rpc_logobj_client_evt_handler+0xc>
   1c036:	f850 1b08 	ldr.w	r1, [r0], #8
   1c03a:	0c09      	lsrs	r1, r1, #16
   1c03c:	f7fb bb6c 	b.w	17718 <logobj_event_handler>
   1c040:	4770      	bx	lr
   1c042:	bf00      	nop

0001c044 <rpc_logobj_client_init>:
   1c044:	4801      	ldr	r0, [pc, #4]	; (1c04c <rpc_logobj_client_init+0x8>)
   1c046:	f7ff b847 	b.w	1b0d8 <rpc_client_register>
   1c04a:	bf00      	nop
   1c04c:	0002a968 	.word	0x0002a968

0001c050 <rpc_logobj_client_request_alloc>:
   1c050:	2300      	movs	r3, #0
   1c052:	b510      	push	{r4, lr}
   1c054:	b082      	sub	sp, #8
   1c056:	9301      	str	r3, [sp, #4]
   1c058:	b961      	cbnz	r1, 1c074 <rpc_logobj_client_request_alloc+0x24>
   1c05a:	b170      	cbz	r0, 1c07a <rpc_logobj_client_request_alloc+0x2a>
   1c05c:	4604      	mov	r4, r0
   1c05e:	aa01      	add	r2, sp, #4
   1c060:	2009      	movs	r0, #9
   1c062:	f7ff f8b3 	bl	1b1cc <rpc_message_alloc>
   1c066:	b918      	cbnz	r0, 1c070 <rpc_logobj_client_request_alloc+0x20>
   1c068:	9b01      	ldr	r3, [sp, #4]
   1c06a:	b10b      	cbz	r3, 1c070 <rpc_logobj_client_request_alloc+0x20>
   1c06c:	3308      	adds	r3, #8
   1c06e:	6023      	str	r3, [r4, #0]
   1c070:	b002      	add	sp, #8
   1c072:	bd10      	pop	{r4, pc}
   1c074:	200f      	movs	r0, #15
   1c076:	b002      	add	sp, #8
   1c078:	bd10      	pop	{r4, pc}
   1c07a:	200e      	movs	r0, #14
   1c07c:	b002      	add	sp, #8
   1c07e:	bd10      	pop	{r4, pc}

0001c080 <rpc_logobj_client_request_send>:
   1c080:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1c084:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1c088:	d10b      	bne.n	1c0a2 <rpc_logobj_client_request_send+0x22>
   1c08a:	b160      	cbz	r0, 1c0a6 <rpc_logobj_client_request_send+0x26>
   1c08c:	4603      	mov	r3, r0
   1c08e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1c092:	2009      	movs	r0, #9
   1c094:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1c098:	f843 1d08 	str.w	r1, [r3, #-8]!
   1c09c:	4619      	mov	r1, r3
   1c09e:	f7ff b885 	b.w	1b1ac <rpc_message_send>
   1c0a2:	200f      	movs	r0, #15
   1c0a4:	4770      	bx	lr
   1c0a6:	200e      	movs	r0, #14
   1c0a8:	4770      	bx	lr
   1c0aa:	bf00      	nop

0001c0ac <rpc_logobj_client_message_free>:
   1c0ac:	b120      	cbz	r0, 1c0b8 <rpc_logobj_client_message_free+0xc>
   1c0ae:	f1a0 0108 	sub.w	r1, r0, #8
   1c0b2:	2009      	movs	r0, #9
   1c0b4:	f7ff b8b6 	b.w	1b224 <rpc_message_free>
   1c0b8:	200e      	movs	r0, #14
   1c0ba:	4770      	bx	lr

0001c0bc <rpc_logobj_client_data_free>:
   1c0bc:	b118      	cbz	r0, 1c0c6 <rpc_logobj_client_data_free+0xa>
   1c0be:	4601      	mov	r1, r0
   1c0c0:	2009      	movs	r0, #9
   1c0c2:	f7ff b8bb 	b.w	1b23c <rpc_message_data_free>
   1c0c6:	200e      	movs	r0, #14
   1c0c8:	4770      	bx	lr
   1c0ca:	bf00      	nop

0001c0cc <dfu_client_event_handler>:
   1c0cc:	f850 1b08 	ldr.w	r1, [r0], #8
   1c0d0:	0c09      	lsrs	r1, r1, #16
   1c0d2:	f002 bdcf 	b.w	1ec74 <rpc_dfu_event_handler>
   1c0d6:	bf00      	nop

0001c0d8 <rpc_dfu_client_init>:
   1c0d8:	4801      	ldr	r0, [pc, #4]	; (1c0e0 <rpc_dfu_client_init+0x8>)
   1c0da:	f7fe bffd 	b.w	1b0d8 <rpc_client_register>
   1c0de:	bf00      	nop
   1c0e0:	0002a978 	.word	0x0002a978

0001c0e4 <rpc_dfu_client_request_alloc>:
   1c0e4:	2300      	movs	r3, #0
   1c0e6:	b510      	push	{r4, lr}
   1c0e8:	b082      	sub	sp, #8
   1c0ea:	9301      	str	r3, [sp, #4]
   1c0ec:	b158      	cbz	r0, 1c106 <rpc_dfu_client_request_alloc+0x22>
   1c0ee:	4604      	mov	r4, r0
   1c0f0:	aa01      	add	r2, sp, #4
   1c0f2:	2006      	movs	r0, #6
   1c0f4:	f7ff f86a 	bl	1b1cc <rpc_message_alloc>
   1c0f8:	b918      	cbnz	r0, 1c102 <rpc_dfu_client_request_alloc+0x1e>
   1c0fa:	9b01      	ldr	r3, [sp, #4]
   1c0fc:	b10b      	cbz	r3, 1c102 <rpc_dfu_client_request_alloc+0x1e>
   1c0fe:	3308      	adds	r3, #8
   1c100:	6023      	str	r3, [r4, #0]
   1c102:	b002      	add	sp, #8
   1c104:	bd10      	pop	{r4, pc}
   1c106:	2007      	movs	r0, #7
   1c108:	b002      	add	sp, #8
   1c10a:	bd10      	pop	{r4, pc}

0001c10c <rpc_dfu_client_request_send>:
   1c10c:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   1c110:	d10b      	bne.n	1c12a <rpc_dfu_client_request_send+0x1e>
   1c112:	b160      	cbz	r0, 1c12e <rpc_dfu_client_request_send+0x22>
   1c114:	4603      	mov	r3, r0
   1c116:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1c11a:	2006      	movs	r0, #6
   1c11c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1c120:	f843 1d08 	str.w	r1, [r3, #-8]!
   1c124:	4619      	mov	r1, r3
   1c126:	f7ff b841 	b.w	1b1ac <rpc_message_send>
   1c12a:	200f      	movs	r0, #15
   1c12c:	4770      	bx	lr
   1c12e:	2007      	movs	r0, #7
   1c130:	4770      	bx	lr
   1c132:	bf00      	nop

0001c134 <rpc_dfu_client_message_free>:
   1c134:	b120      	cbz	r0, 1c140 <rpc_dfu_client_message_free+0xc>
   1c136:	f1a0 0108 	sub.w	r1, r0, #8
   1c13a:	2006      	movs	r0, #6
   1c13c:	f7ff b872 	b.w	1b224 <rpc_message_free>
   1c140:	2007      	movs	r0, #7
   1c142:	4770      	bx	lr

0001c144 <rpc_dfu_client_data_free>:
   1c144:	b118      	cbz	r0, 1c14e <rpc_dfu_client_data_free+0xa>
   1c146:	4601      	mov	r1, r0
   1c148:	2006      	movs	r0, #6
   1c14a:	f7ff b877 	b.w	1b23c <rpc_message_data_free>
   1c14e:	2007      	movs	r0, #7
   1c150:	4770      	bx	lr
   1c152:	bf00      	nop

0001c154 <packet_free_cb>:
   1c154:	6800      	ldr	r0, [r0, #0]
   1c156:	f003 bb27 	b.w	1f7a8 <rpc_at_client_data_free>
   1c15a:	bf00      	nop

0001c15c <at_interface_write>:
   1c15c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c160:	b083      	sub	sp, #12
   1c162:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1c164:	2c00      	cmp	r4, #0
   1c166:	d166      	bne.n	1c236 <at_interface_write+0xda>
   1c168:	4688      	mov	r8, r1
   1c16a:	4615      	mov	r5, r2
   1c16c:	461e      	mov	r6, r3
   1c16e:	4607      	mov	r7, r0
   1c170:	f003 f9b8 	bl	1f4e4 <interface_socket_from_handle_get>
   1c174:	4604      	mov	r4, r0
   1c176:	2e00      	cmp	r6, #0
   1c178:	d137      	bne.n	1c1ea <at_interface_write+0x8e>
   1c17a:	2800      	cmp	r0, #0
   1c17c:	d061      	beq.n	1c242 <at_interface_write+0xe6>
   1c17e:	6803      	ldr	r3, [r0, #0]
   1c180:	039b      	lsls	r3, r3, #14
   1c182:	d55e      	bpl.n	1c242 <at_interface_write+0xe6>
   1c184:	6803      	ldr	r3, [r0, #0]
   1c186:	4629      	mov	r1, r5
   1c188:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1c18c:	6003      	str	r3, [r0, #0]
   1c18e:	6803      	ldr	r3, [r0, #0]
   1c190:	4668      	mov	r0, sp
   1c192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1c196:	6023      	str	r3, [r4, #0]
   1c198:	f003 fadc 	bl	1f754 <rpc_at_client_request_alloc>
   1c19c:	4606      	mov	r6, r0
   1c19e:	4638      	mov	r0, r7
   1c1a0:	f003 f9a0 	bl	1f4e4 <interface_socket_from_handle_get>
   1c1a4:	4681      	mov	r9, r0
   1c1a6:	2e00      	cmp	r6, #0
   1c1a8:	d13f      	bne.n	1c22a <at_interface_write+0xce>
   1c1aa:	2304      	movs	r3, #4
   1c1ac:	9800      	ldr	r0, [sp, #0]
   1c1ae:	7203      	strb	r3, [r0, #8]
   1c1b0:	7246      	strb	r6, [r0, #9]
   1c1b2:	7286      	strb	r6, [r0, #10]
   1c1b4:	72c6      	strb	r6, [r0, #11]
   1c1b6:	60c7      	str	r7, [r0, #12]
   1c1b8:	b9fd      	cbnz	r5, 1c1fa <at_interface_write+0x9e>
   1c1ba:	2101      	movs	r1, #1
   1c1bc:	f003 fade 	bl	1f77c <rpc_at_client_request_send>
   1c1c0:	bb50      	cbnz	r0, 1c218 <at_interface_write+0xbc>
   1c1c2:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   1c1c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1c1ca:	2900      	cmp	r1, #0
   1c1cc:	bf08      	it	eq
   1c1ce:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   1c1d2:	ab02      	add	r3, sp, #8
   1c1d4:	f843 1d04 	str.w	r1, [r3, #-4]!
   1c1d8:	4638      	mov	r0, r7
   1c1da:	4611      	mov	r1, r2
   1c1dc:	f003 f902 	bl	1f3e4 <interface_socket_wait>
   1c1e0:	b9f0      	cbnz	r0, 1c220 <at_interface_write+0xc4>
   1c1e2:	4628      	mov	r0, r5
   1c1e4:	b003      	add	sp, #12
   1c1e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c1ea:	b360      	cbz	r0, 1c246 <at_interface_write+0xea>
   1c1ec:	6803      	ldr	r3, [r0, #0]
   1c1ee:	202d      	movs	r0, #45	; 0x2d
   1c1f0:	f7f8 fe68 	bl	14ec4 <bsd_os_errno_set>
   1c1f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c1f8:	e7f4      	b.n	1c1e4 <at_interface_write+0x88>
   1c1fa:	4641      	mov	r1, r8
   1c1fc:	6800      	ldr	r0, [r0, #0]
   1c1fe:	462a      	mov	r2, r5
   1c200:	f00d f937 	bl	29472 <memcpy>
   1c204:	2101      	movs	r1, #1
   1c206:	9800      	ldr	r0, [sp, #0]
   1c208:	f003 fab8 	bl	1f77c <rpc_at_client_request_send>
   1c20c:	2800      	cmp	r0, #0
   1c20e:	d0d8      	beq.n	1c1c2 <at_interface_write+0x66>
   1c210:	9b00      	ldr	r3, [sp, #0]
   1c212:	6818      	ldr	r0, [r3, #0]
   1c214:	f003 fac8 	bl	1f7a8 <rpc_at_client_data_free>
   1c218:	9800      	ldr	r0, [sp, #0]
   1c21a:	f003 fabd 	bl	1f798 <rpc_at_client_message_free>
   1c21e:	2023      	movs	r0, #35	; 0x23
   1c220:	6823      	ldr	r3, [r4, #0]
   1c222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1c226:	6023      	str	r3, [r4, #0]
   1c228:	e7e2      	b.n	1c1f0 <at_interface_write+0x94>
   1c22a:	6823      	ldr	r3, [r4, #0]
   1c22c:	200c      	movs	r0, #12
   1c22e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1c232:	6023      	str	r3, [r4, #0]
   1c234:	e7dc      	b.n	1c1f0 <at_interface_write+0x94>
   1c236:	2038      	movs	r0, #56	; 0x38
   1c238:	f7f8 fe44 	bl	14ec4 <bsd_os_errno_set>
   1c23c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c240:	e7d0      	b.n	1c1e4 <at_interface_write+0x88>
   1c242:	2016      	movs	r0, #22
   1c244:	e7d4      	b.n	1c1f0 <at_interface_write+0x94>
   1c246:	202d      	movs	r0, #45	; 0x2d
   1c248:	e7d2      	b.n	1c1f0 <at_interface_write+0x94>
   1c24a:	bf00      	nop

0001c24c <at_interface_init>:
   1c24c:	b508      	push	{r3, lr}
   1c24e:	f003 fa7b 	bl	1f748 <rpc_at_client_init>
   1c252:	b910      	cbnz	r0, 1c25a <at_interface_init+0xe>
   1c254:	2201      	movs	r2, #1
   1c256:	4b01      	ldr	r3, [pc, #4]	; (1c25c <at_interface_init+0x10>)
   1c258:	701a      	strb	r2, [r3, #0]
   1c25a:	bd08      	pop	{r3, pc}
   1c25c:	2002af74 	.word	0x2002af74

0001c260 <at_interface_open>:
   1c260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c264:	2600      	movs	r6, #0
   1c266:	4b2e      	ldr	r3, [pc, #184]	; (1c320 <at_interface_open+0xc0>)
   1c268:	b084      	sub	sp, #16
   1c26a:	781b      	ldrb	r3, [r3, #0]
   1c26c:	9601      	str	r6, [sp, #4]
   1c26e:	2b00      	cmp	r3, #0
   1c270:	d050      	beq.n	1c314 <at_interface_open+0xb4>
   1c272:	2902      	cmp	r1, #2
   1c274:	460d      	mov	r5, r1
   1c276:	d147      	bne.n	1c308 <at_interface_open+0xa8>
   1c278:	4680      	mov	r8, r0
   1c27a:	4617      	mov	r7, r2
   1c27c:	a801      	add	r0, sp, #4
   1c27e:	4a29      	ldr	r2, [pc, #164]	; (1c324 <at_interface_open+0xc4>)
   1c280:	f002 fffe 	bl	1f280 <interface_socket_allocate>
   1c284:	9b01      	ldr	r3, [sp, #4]
   1c286:	4604      	mov	r4, r0
   1c288:	b35b      	cbz	r3, 1c2e2 <at_interface_open+0x82>
   1c28a:	615f      	str	r7, [r3, #20]
   1c28c:	4631      	mov	r1, r6
   1c28e:	e9c3 8503 	strd	r8, r5, [r3, #12]
   1c292:	a802      	add	r0, sp, #8
   1c294:	f003 fa5e 	bl	1f754 <rpc_at_client_request_alloc>
   1c298:	4606      	mov	r6, r0
   1c29a:	4620      	mov	r0, r4
   1c29c:	f003 f922 	bl	1f4e4 <interface_socket_from_handle_get>
   1c2a0:	4607      	mov	r7, r0
   1c2a2:	bb16      	cbnz	r6, 1c2ea <at_interface_open+0x8a>
   1c2a4:	2304      	movs	r3, #4
   1c2a6:	9802      	ldr	r0, [sp, #8]
   1c2a8:	2105      	movs	r1, #5
   1c2aa:	7203      	strb	r3, [r0, #8]
   1c2ac:	7246      	strb	r6, [r0, #9]
   1c2ae:	7286      	strb	r6, [r0, #10]
   1c2b0:	72c6      	strb	r6, [r0, #11]
   1c2b2:	60c4      	str	r4, [r0, #12]
   1c2b4:	f003 fa62 	bl	1f77c <rpc_at_client_request_send>
   1c2b8:	bb08      	cbnz	r0, 1c2fe <at_interface_open+0x9e>
   1c2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c2bc:	ab04      	add	r3, sp, #16
   1c2be:	2a00      	cmp	r2, #0
   1c2c0:	bf08      	it	eq
   1c2c2:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1c2c6:	4629      	mov	r1, r5
   1c2c8:	f843 2d04 	str.w	r2, [r3, #-4]!
   1c2cc:	4620      	mov	r0, r4
   1c2ce:	462a      	mov	r2, r5
   1c2d0:	f003 f888 	bl	1f3e4 <interface_socket_wait>
   1c2d4:	4605      	mov	r5, r0
   1c2d6:	b948      	cbnz	r0, 1c2ec <at_interface_open+0x8c>
   1c2d8:	9a01      	ldr	r2, [sp, #4]
   1c2da:	6813      	ldr	r3, [r2, #0]
   1c2dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1c2e0:	6013      	str	r3, [r2, #0]
   1c2e2:	4620      	mov	r0, r4
   1c2e4:	b004      	add	sp, #16
   1c2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c2ea:	250c      	movs	r5, #12
   1c2ec:	4620      	mov	r0, r4
   1c2ee:	f003 f82b 	bl	1f348 <interface_socket_free>
   1c2f2:	4628      	mov	r0, r5
   1c2f4:	f7f8 fde6 	bl	14ec4 <bsd_os_errno_set>
   1c2f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c2fc:	e7f1      	b.n	1c2e2 <at_interface_open+0x82>
   1c2fe:	9802      	ldr	r0, [sp, #8]
   1c300:	f003 fa4a 	bl	1f798 <rpc_at_client_message_free>
   1c304:	2523      	movs	r5, #35	; 0x23
   1c306:	e7f1      	b.n	1c2ec <at_interface_open+0x8c>
   1c308:	2029      	movs	r0, #41	; 0x29
   1c30a:	f7f8 fddb 	bl	14ec4 <bsd_os_errno_set>
   1c30e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c312:	e7e6      	b.n	1c2e2 <at_interface_open+0x82>
   1c314:	2005      	movs	r0, #5
   1c316:	f7f8 fdd5 	bl	14ec4 <bsd_os_errno_set>
   1c31a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c31e:	e7e0      	b.n	1c2e2 <at_interface_open+0x82>
   1c320:	2002af74 	.word	0x2002af74
   1c324:	0001c155 	.word	0x0001c155

0001c328 <at_interface_close>:
   1c328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c32c:	b082      	sub	sp, #8
   1c32e:	4606      	mov	r6, r0
   1c330:	f003 f8d8 	bl	1f4e4 <interface_socket_from_handle_get>
   1c334:	2800      	cmp	r0, #0
   1c336:	d044      	beq.n	1c3c2 <at_interface_close+0x9a>
   1c338:	230d      	movs	r3, #13
   1c33a:	6807      	ldr	r7, [r0, #0]
   1c33c:	6003      	str	r3, [r0, #0]
   1c33e:	6803      	ldr	r3, [r0, #0]
   1c340:	4604      	mov	r4, r0
   1c342:	039b      	lsls	r3, r3, #14
   1c344:	d42b      	bmi.n	1c39e <at_interface_close+0x76>
   1c346:	2100      	movs	r1, #0
   1c348:	4668      	mov	r0, sp
   1c34a:	f003 fa03 	bl	1f754 <rpc_at_client_request_alloc>
   1c34e:	4605      	mov	r5, r0
   1c350:	4630      	mov	r0, r6
   1c352:	f003 f8c7 	bl	1f4e4 <interface_socket_from_handle_get>
   1c356:	4680      	mov	r8, r0
   1c358:	bb8d      	cbnz	r5, 1c3be <at_interface_close+0x96>
   1c35a:	2304      	movs	r3, #4
   1c35c:	9800      	ldr	r0, [sp, #0]
   1c35e:	2106      	movs	r1, #6
   1c360:	7203      	strb	r3, [r0, #8]
   1c362:	7245      	strb	r5, [r0, #9]
   1c364:	7285      	strb	r5, [r0, #10]
   1c366:	72c5      	strb	r5, [r0, #11]
   1c368:	60c6      	str	r6, [r0, #12]
   1c36a:	f003 fa07 	bl	1f77c <rpc_at_client_request_send>
   1c36e:	b9d8      	cbnz	r0, 1c3a8 <at_interface_close+0x80>
   1c370:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   1c374:	220e      	movs	r2, #14
   1c376:	2900      	cmp	r1, #0
   1c378:	bf08      	it	eq
   1c37a:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   1c37e:	ab02      	add	r3, sp, #8
   1c380:	f843 1d04 	str.w	r1, [r3, #-4]!
   1c384:	4630      	mov	r0, r6
   1c386:	4611      	mov	r1, r2
   1c388:	f003 f82c 	bl	1f3e4 <interface_socket_wait>
   1c38c:	4605      	mov	r5, r0
   1c38e:	b978      	cbnz	r0, 1c3b0 <at_interface_close+0x88>
   1c390:	4630      	mov	r0, r6
   1c392:	f002 ffd9 	bl	1f348 <interface_socket_free>
   1c396:	4628      	mov	r0, r5
   1c398:	b002      	add	sp, #8
   1c39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c39e:	6803      	ldr	r3, [r0, #0]
   1c3a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1c3a4:	6003      	str	r3, [r0, #0]
   1c3a6:	e7ce      	b.n	1c346 <at_interface_close+0x1e>
   1c3a8:	9800      	ldr	r0, [sp, #0]
   1c3aa:	f003 f9f5 	bl	1f798 <rpc_at_client_message_free>
   1c3ae:	2523      	movs	r5, #35	; 0x23
   1c3b0:	6027      	str	r7, [r4, #0]
   1c3b2:	4628      	mov	r0, r5
   1c3b4:	f7f8 fd86 	bl	14ec4 <bsd_os_errno_set>
   1c3b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1c3bc:	e7eb      	b.n	1c396 <at_interface_close+0x6e>
   1c3be:	250c      	movs	r5, #12
   1c3c0:	e7f6      	b.n	1c3b0 <at_interface_close+0x88>
   1c3c2:	2516      	movs	r5, #22
   1c3c4:	e7f5      	b.n	1c3b2 <at_interface_close+0x8a>
   1c3c6:	bf00      	nop

0001c3c8 <at_interface_read>:
   1c3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c3cc:	b086      	sub	sp, #24
   1c3ce:	4688      	mov	r8, r1
   1c3d0:	4615      	mov	r5, r2
   1c3d2:	461e      	mov	r6, r3
   1c3d4:	4607      	mov	r7, r0
   1c3d6:	f003 f885 	bl	1f4e4 <interface_socket_from_handle_get>
   1c3da:	2800      	cmp	r0, #0
   1c3dc:	d045      	beq.n	1c46a <at_interface_read+0xa2>
   1c3de:	2300      	movs	r3, #0
   1c3e0:	4604      	mov	r4, r0
   1c3e2:	e9cd 8502 	strd	r8, r5, [sp, #8]
   1c3e6:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1c3ea:	bb3e      	cbnz	r6, 1c43c <at_interface_read+0x74>
   1c3ec:	f016 0502 	ands.w	r5, r6, #2
   1c3f0:	d00f      	beq.n	1c412 <at_interface_read+0x4a>
   1c3f2:	e02a      	b.n	1c44a <at_interface_read+0x82>
   1c3f4:	b9dd      	cbnz	r5, 1c42e <at_interface_read+0x66>
   1c3f6:	6a25      	ldr	r5, [r4, #32]
   1c3f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c3fc:	2d00      	cmp	r5, #0
   1c3fe:	bf08      	it	eq
   1c400:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   1c404:	4611      	mov	r1, r2
   1c406:	ab01      	add	r3, sp, #4
   1c408:	4638      	mov	r0, r7
   1c40a:	9501      	str	r5, [sp, #4]
   1c40c:	f002 ffea 	bl	1f3e4 <interface_socket_wait>
   1c410:	4605      	mov	r5, r0
   1c412:	6823      	ldr	r3, [r4, #0]
   1c414:	69e0      	ldr	r0, [r4, #28]
   1c416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1c41a:	6023      	str	r3, [r4, #0]
   1c41c:	6803      	ldr	r3, [r0, #0]
   1c41e:	4632      	mov	r2, r6
   1c420:	689b      	ldr	r3, [r3, #8]
   1c422:	a902      	add	r1, sp, #8
   1c424:	4798      	blx	r3
   1c426:	f1b0 0800 	subs.w	r8, r0, #0
   1c42a:	dbe3      	blt.n	1c3f4 <at_interface_read+0x2c>
   1c42c:	b115      	cbz	r5, 1c434 <at_interface_read+0x6c>
   1c42e:	4628      	mov	r0, r5
   1c430:	f7f8 fd48 	bl	14ec4 <bsd_os_errno_set>
   1c434:	4640      	mov	r0, r8
   1c436:	b006      	add	sp, #24
   1c438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c43c:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   1c440:	d1d4      	bne.n	1c3ec <at_interface_read+0x24>
   1c442:	252d      	movs	r5, #45	; 0x2d
   1c444:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1c448:	e7f1      	b.n	1c42e <at_interface_read+0x66>
   1c44a:	6823      	ldr	r3, [r4, #0]
   1c44c:	69e0      	ldr	r0, [r4, #28]
   1c44e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1c452:	6023      	str	r3, [r4, #0]
   1c454:	6803      	ldr	r3, [r0, #0]
   1c456:	4632      	mov	r2, r6
   1c458:	689b      	ldr	r3, [r3, #8]
   1c45a:	a902      	add	r1, sp, #8
   1c45c:	4798      	blx	r3
   1c45e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1c462:	4680      	mov	r8, r0
   1c464:	d1e6      	bne.n	1c434 <at_interface_read+0x6c>
   1c466:	2523      	movs	r5, #35	; 0x23
   1c468:	e7e1      	b.n	1c42e <at_interface_read+0x66>
   1c46a:	2516      	movs	r5, #22
   1c46c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1c470:	e7dd      	b.n	1c42e <at_interface_read+0x66>
   1c472:	bf00      	nop

0001c474 <at_interface_getopt>:
   1c474:	f003 b8a4 	b.w	1f5c0 <interface_socket_getopt>

0001c478 <at_interface_setopt>:
   1c478:	f003 b85c 	b.w	1f534 <interface_socket_setopt>

0001c47c <rpc_at_event_handler>:
   1c47c:	b570      	push	{r4, r5, r6, lr}
   1c47e:	4606      	mov	r6, r0
   1c480:	b084      	sub	sp, #16
   1c482:	68c0      	ldr	r0, [r0, #12]
   1c484:	460d      	mov	r5, r1
   1c486:	f003 f82d 	bl	1f4e4 <interface_socket_from_handle_get>
   1c48a:	4604      	mov	r4, r0
   1c48c:	b348      	cbz	r0, 1c4e2 <rpc_at_event_handler+0x66>
   1c48e:	6803      	ldr	r3, [r0, #0]
   1c490:	b29b      	uxth	r3, r3
   1c492:	2b01      	cmp	r3, #1
   1c494:	d01f      	beq.n	1c4d6 <rpc_at_event_handler+0x5a>
   1c496:	6803      	ldr	r3, [r0, #0]
   1c498:	b29b      	uxth	r3, r3
   1c49a:	2b0d      	cmp	r3, #13
   1c49c:	d029      	beq.n	1c4f2 <rpc_at_event_handler+0x76>
   1c49e:	6803      	ldr	r3, [r0, #0]
   1c4a0:	b29b      	uxth	r3, r3
   1c4a2:	2b02      	cmp	r3, #2
   1c4a4:	d02d      	beq.n	1c502 <rpc_at_event_handler+0x86>
   1c4a6:	3d03      	subs	r5, #3
   1c4a8:	2d01      	cmp	r5, #1
   1c4aa:	d817      	bhi.n	1c4dc <rpc_at_event_handler+0x60>
   1c4ac:	2500      	movs	r5, #0
   1c4ae:	6873      	ldr	r3, [r6, #4]
   1c4b0:	6832      	ldr	r2, [r6, #0]
   1c4b2:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1c4b6:	e9cd 2300 	strd	r2, r3, [sp]
   1c4ba:	69e0      	ldr	r0, [r4, #28]
   1c4bc:	4669      	mov	r1, sp
   1c4be:	6803      	ldr	r3, [r0, #0]
   1c4c0:	685b      	ldr	r3, [r3, #4]
   1c4c2:	4798      	blx	r3
   1c4c4:	3001      	adds	r0, #1
   1c4c6:	d019      	beq.n	1c4fc <rpc_at_event_handler+0x80>
   1c4c8:	4628      	mov	r0, r5
   1c4ca:	6823      	ldr	r3, [r4, #0]
   1c4cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1c4d0:	6023      	str	r3, [r4, #0]
   1c4d2:	b004      	add	sp, #16
   1c4d4:	bd70      	pop	{r4, r5, r6, pc}
   1c4d6:	2d02      	cmp	r5, #2
   1c4d8:	d1e5      	bne.n	1c4a6 <rpc_at_event_handler+0x2a>
   1c4da:	6005      	str	r5, [r0, #0]
   1c4dc:	2000      	movs	r0, #0
   1c4de:	b004      	add	sp, #16
   1c4e0:	bd70      	pop	{r4, r5, r6, pc}
   1c4e2:	6830      	ldr	r0, [r6, #0]
   1c4e4:	2800      	cmp	r0, #0
   1c4e6:	d0f9      	beq.n	1c4dc <rpc_at_event_handler+0x60>
   1c4e8:	f003 f95e 	bl	1f7a8 <rpc_at_client_data_free>
   1c4ec:	4620      	mov	r0, r4
   1c4ee:	b004      	add	sp, #16
   1c4f0:	bd70      	pop	{r4, r5, r6, pc}
   1c4f2:	2d02      	cmp	r5, #2
   1c4f4:	d1d7      	bne.n	1c4a6 <rpc_at_event_handler+0x2a>
   1c4f6:	230e      	movs	r3, #14
   1c4f8:	6003      	str	r3, [r0, #0]
   1c4fa:	e7ef      	b.n	1c4dc <rpc_at_event_handler+0x60>
   1c4fc:	2002      	movs	r0, #2
   1c4fe:	b004      	add	sp, #16
   1c500:	bd70      	pop	{r4, r5, r6, pc}
   1c502:	6803      	ldr	r3, [r0, #0]
   1c504:	029b      	lsls	r3, r3, #10
   1c506:	d5ce      	bpl.n	1c4a6 <rpc_at_event_handler+0x2a>
   1c508:	2d02      	cmp	r5, #2
   1c50a:	d1cc      	bne.n	1c4a6 <rpc_at_event_handler+0x2a>
   1c50c:	6803      	ldr	r3, [r0, #0]
   1c50e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1c512:	6003      	str	r3, [r0, #0]
   1c514:	6803      	ldr	r3, [r0, #0]
   1c516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1c51a:	6003      	str	r3, [r0, #0]
   1c51c:	e7de      	b.n	1c4dc <rpc_at_event_handler+0x60>
   1c51e:	bf00      	nop

0001c520 <ok_rsp_parser>:
   1c520:	2000      	movs	r0, #0
   1c522:	4770      	bx	lr

0001c524 <pdn_state_get_parser>:
   1c524:	2200      	movs	r2, #0
   1c526:	b570      	push	{r4, r5, r6, lr}
   1c528:	780b      	ldrb	r3, [r1, #0]
   1c52a:	b084      	sub	sp, #16
   1c52c:	460e      	mov	r6, r1
   1c52e:	e9cd 2200 	strd	r2, r2, [sp]
   1c532:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1c536:	b323      	cbz	r3, 1c582 <pdn_state_get_parser+0x5e>
   1c538:	460c      	mov	r4, r1
   1c53a:	2b20      	cmp	r3, #32
   1c53c:	460d      	mov	r5, r1
   1c53e:	d01b      	beq.n	1c578 <pdn_state_get_parser+0x54>
   1c540:	700b      	strb	r3, [r1, #0]
   1c542:	3201      	adds	r2, #1
   1c544:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1c548:	18b1      	adds	r1, r6, r2
   1c54a:	460d      	mov	r5, r1
   1c54c:	2b00      	cmp	r3, #0
   1c54e:	d1f4      	bne.n	1c53a <pdn_state_get_parser+0x16>
   1c550:	2200      	movs	r2, #0
   1c552:	4b0d      	ldr	r3, [pc, #52]	; (1c588 <pdn_state_get_parser+0x64>)
   1c554:	702a      	strb	r2, [r5, #0]
   1c556:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1c55a:	4a0c      	ldr	r2, [pc, #48]	; (1c58c <pdn_state_get_parser+0x68>)
   1c55c:	681b      	ldr	r3, [r3, #0]
   1c55e:	2110      	movs	r1, #16
   1c560:	4668      	mov	r0, sp
   1c562:	f005 fc15 	bl	21d90 <sniprintf>
   1c566:	4669      	mov	r1, sp
   1c568:	4630      	mov	r0, r6
   1c56a:	f00d f9ab 	bl	298c4 <strstr>
   1c56e:	3000      	adds	r0, #0
   1c570:	bf18      	it	ne
   1c572:	2001      	movne	r0, #1
   1c574:	b004      	add	sp, #16
   1c576:	bd70      	pop	{r4, r5, r6, pc}
   1c578:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1c57c:	2b00      	cmp	r3, #0
   1c57e:	d1dc      	bne.n	1c53a <pdn_state_get_parser+0x16>
   1c580:	e7e6      	b.n	1c550 <pdn_state_get_parser+0x2c>
   1c582:	460d      	mov	r5, r1
   1c584:	e7e4      	b.n	1c550 <pdn_state_get_parser+0x2c>
   1c586:	bf00      	nop
   1c588:	200234f8 	.word	0x200234f8
   1c58c:	0002aa30 	.word	0x0002aa30

0001c590 <pdn_id_get_parser>:
   1c590:	b570      	push	{r4, r5, r6, lr}
   1c592:	780b      	ldrb	r3, [r1, #0]
   1c594:	4606      	mov	r6, r0
   1c596:	b313      	cbz	r3, 1c5de <pdn_id_get_parser+0x4e>
   1c598:	4608      	mov	r0, r1
   1c59a:	2400      	movs	r4, #0
   1c59c:	460a      	mov	r2, r1
   1c59e:	2b20      	cmp	r3, #32
   1c5a0:	4615      	mov	r5, r2
   1c5a2:	d017      	beq.n	1c5d4 <pdn_id_get_parser+0x44>
   1c5a4:	7013      	strb	r3, [r2, #0]
   1c5a6:	3401      	adds	r4, #1
   1c5a8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1c5ac:	190a      	adds	r2, r1, r4
   1c5ae:	4615      	mov	r5, r2
   1c5b0:	2b00      	cmp	r3, #0
   1c5b2:	d1f4      	bne.n	1c59e <pdn_id_get_parser+0xe>
   1c5b4:	2300      	movs	r3, #0
   1c5b6:	4608      	mov	r0, r1
   1c5b8:	702b      	strb	r3, [r5, #0]
   1c5ba:	213a      	movs	r1, #58	; 0x3a
   1c5bc:	f00d f933 	bl	29826 <strchr>
   1c5c0:	b130      	cbz	r0, 1c5d0 <pdn_id_get_parser+0x40>
   1c5c2:	3001      	adds	r0, #1
   1c5c4:	f00c ff35 	bl	29432 <atoi>
   1c5c8:	4b06      	ldr	r3, [pc, #24]	; (1c5e4 <pdn_id_get_parser+0x54>)
   1c5ca:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1c5ce:	6058      	str	r0, [r3, #4]
   1c5d0:	2000      	movs	r0, #0
   1c5d2:	bd70      	pop	{r4, r5, r6, pc}
   1c5d4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1c5d8:	2b00      	cmp	r3, #0
   1c5da:	d1e0      	bne.n	1c59e <pdn_id_get_parser+0xe>
   1c5dc:	e7ea      	b.n	1c5b4 <pdn_id_get_parser+0x24>
   1c5de:	460d      	mov	r5, r1
   1c5e0:	e7e8      	b.n	1c5b4 <pdn_id_get_parser+0x24>
   1c5e2:	bf00      	nop
   1c5e4:	200234f8 	.word	0x200234f8

0001c5e8 <context_create_parser>:
   1c5e8:	b570      	push	{r4, r5, r6, lr}
   1c5ea:	780b      	ldrb	r3, [r1, #0]
   1c5ec:	4606      	mov	r6, r0
   1c5ee:	b313      	cbz	r3, 1c636 <context_create_parser+0x4e>
   1c5f0:	4608      	mov	r0, r1
   1c5f2:	2400      	movs	r4, #0
   1c5f4:	460a      	mov	r2, r1
   1c5f6:	2b20      	cmp	r3, #32
   1c5f8:	4615      	mov	r5, r2
   1c5fa:	d017      	beq.n	1c62c <context_create_parser+0x44>
   1c5fc:	7013      	strb	r3, [r2, #0]
   1c5fe:	3401      	adds	r4, #1
   1c600:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1c604:	190a      	adds	r2, r1, r4
   1c606:	4615      	mov	r5, r2
   1c608:	2b00      	cmp	r3, #0
   1c60a:	d1f4      	bne.n	1c5f6 <context_create_parser+0xe>
   1c60c:	2300      	movs	r3, #0
   1c60e:	4608      	mov	r0, r1
   1c610:	702b      	strb	r3, [r5, #0]
   1c612:	213a      	movs	r1, #58	; 0x3a
   1c614:	f00d f907 	bl	29826 <strchr>
   1c618:	b130      	cbz	r0, 1c628 <context_create_parser+0x40>
   1c61a:	4b08      	ldr	r3, [pc, #32]	; (1c63c <context_create_parser+0x54>)
   1c61c:	3001      	adds	r0, #1
   1c61e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   1c622:	f00c ff06 	bl	29432 <atoi>
   1c626:	6020      	str	r0, [r4, #0]
   1c628:	2000      	movs	r0, #0
   1c62a:	bd70      	pop	{r4, r5, r6, pc}
   1c62c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1c630:	2b00      	cmp	r3, #0
   1c632:	d1e0      	bne.n	1c5f6 <context_create_parser+0xe>
   1c634:	e7ea      	b.n	1c60c <context_create_parser+0x24>
   1c636:	460d      	mov	r5, r1
   1c638:	e7e8      	b.n	1c60c <context_create_parser+0x24>
   1c63a:	bf00      	nop
   1c63c:	200234f8 	.word	0x200234f8

0001c640 <pdn_interface_init>:
   1c640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c644:	b510      	push	{r4, lr}
   1c646:	4c0b      	ldr	r4, [pc, #44]	; (1c674 <pdn_interface_init+0x34>)
   1c648:	2228      	movs	r2, #40	; 0x28
   1c64a:	2100      	movs	r1, #0
   1c64c:	480a      	ldr	r0, [pc, #40]	; (1c678 <pdn_interface_init+0x38>)
   1c64e:	6023      	str	r3, [r4, #0]
   1c650:	f00c ff49 	bl	294e6 <memset>
   1c654:	f240 2201 	movw	r2, #513	; 0x201
   1c658:	2102      	movs	r1, #2
   1c65a:	2066      	movs	r0, #102	; 0x66
   1c65c:	f7ff fe00 	bl	1c260 <at_interface_open>
   1c660:	2800      	cmp	r0, #0
   1c662:	6020      	str	r0, [r4, #0]
   1c664:	db04      	blt.n	1c670 <pdn_interface_init+0x30>
   1c666:	2201      	movs	r2, #1
   1c668:	4b04      	ldr	r3, [pc, #16]	; (1c67c <pdn_interface_init+0x3c>)
   1c66a:	2000      	movs	r0, #0
   1c66c:	701a      	strb	r2, [r3, #0]
   1c66e:	bd10      	pop	{r4, pc}
   1c670:	2003      	movs	r0, #3
   1c672:	bd10      	pop	{r4, pc}
   1c674:	200233f4 	.word	0x200233f4
   1c678:	200234f8 	.word	0x200234f8
   1c67c:	2002af75 	.word	0x2002af75

0001c680 <pdn_interface_open>:
   1c680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c684:	4b66      	ldr	r3, [pc, #408]	; (1c820 <pdn_interface_open+0x1a0>)
   1c686:	b083      	sub	sp, #12
   1c688:	781b      	ldrb	r3, [r3, #0]
   1c68a:	2b00      	cmp	r3, #0
   1c68c:	f000 80c2 	beq.w	1c814 <pdn_interface_open+0x194>
   1c690:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1c694:	f040 80ad 	bne.w	1c7f2 <pdn_interface_open+0x172>
   1c698:	4c62      	ldr	r4, [pc, #392]	; (1c824 <pdn_interface_open+0x1a4>)
   1c69a:	6825      	ldr	r5, [r4, #0]
   1c69c:	b34d      	cbz	r5, 1c6f2 <pdn_interface_open+0x72>
   1c69e:	6863      	ldr	r3, [r4, #4]
   1c6a0:	2b00      	cmp	r3, #0
   1c6a2:	f000 8098 	beq.w	1c7d6 <pdn_interface_open+0x156>
   1c6a6:	68a3      	ldr	r3, [r4, #8]
   1c6a8:	2b00      	cmp	r3, #0
   1c6aa:	f000 8096 	beq.w	1c7da <pdn_interface_open+0x15a>
   1c6ae:	68e3      	ldr	r3, [r4, #12]
   1c6b0:	2b00      	cmp	r3, #0
   1c6b2:	f000 8094 	beq.w	1c7de <pdn_interface_open+0x15e>
   1c6b6:	6923      	ldr	r3, [r4, #16]
   1c6b8:	2b00      	cmp	r3, #0
   1c6ba:	f000 8092 	beq.w	1c7e2 <pdn_interface_open+0x162>
   1c6be:	6963      	ldr	r3, [r4, #20]
   1c6c0:	2b00      	cmp	r3, #0
   1c6c2:	f000 8090 	beq.w	1c7e6 <pdn_interface_open+0x166>
   1c6c6:	69a3      	ldr	r3, [r4, #24]
   1c6c8:	2b00      	cmp	r3, #0
   1c6ca:	f000 808e 	beq.w	1c7ea <pdn_interface_open+0x16a>
   1c6ce:	69e3      	ldr	r3, [r4, #28]
   1c6d0:	2b00      	cmp	r3, #0
   1c6d2:	f000 808c 	beq.w	1c7ee <pdn_interface_open+0x16e>
   1c6d6:	6a23      	ldr	r3, [r4, #32]
   1c6d8:	b153      	cbz	r3, 1c6f0 <pdn_interface_open+0x70>
   1c6da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c6dc:	2509      	movs	r5, #9
   1c6de:	b143      	cbz	r3, 1c6f2 <pdn_interface_open+0x72>
   1c6e0:	200c      	movs	r0, #12
   1c6e2:	f7f8 fbef 	bl	14ec4 <bsd_os_errno_set>
   1c6e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c6ea:	b003      	add	sp, #12
   1c6ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c6f0:	2508      	movs	r5, #8
   1c6f2:	2074      	movs	r0, #116	; 0x74
   1c6f4:	f002 fa92 	bl	1ec1c <nrf_malloc>
   1c6f8:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   1c6fc:	2800      	cmp	r0, #0
   1c6fe:	d0ef      	beq.n	1c6e0 <pdn_interface_open+0x60>
   1c700:	2274      	movs	r2, #116	; 0x74
   1c702:	2100      	movs	r1, #0
   1c704:	f00c feef 	bl	294e6 <memset>
   1c708:	2101      	movs	r1, #1
   1c70a:	2003      	movs	r0, #3
   1c70c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1c710:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1c714:	4a44      	ldr	r2, [pc, #272]	; (1c828 <pdn_interface_open+0x1a8>)
   1c716:	6099      	str	r1, [r3, #8]
   1c718:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1c71c:	f44f 7180 	mov.w	r1, #256	; 0x100
   1c720:	6718      	str	r0, [r3, #112]	; 0x70
   1c722:	605f      	str	r7, [r3, #4]
   1c724:	4841      	ldr	r0, [pc, #260]	; (1c82c <pdn_interface_open+0x1ac>)
   1c726:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1c838 <pdn_interface_open+0x1b8>
   1c72a:	f005 fb31 	bl	21d90 <sniprintf>
   1c72e:	483f      	ldr	r0, [pc, #252]	; (1c82c <pdn_interface_open+0x1ac>)
   1c730:	f8d8 9000 	ldr.w	r9, [r8]
   1c734:	2600      	movs	r6, #0
   1c736:	f7f0 fbff 	bl	cf38 <strlen>
   1c73a:	4633      	mov	r3, r6
   1c73c:	4602      	mov	r2, r0
   1c73e:	493b      	ldr	r1, [pc, #236]	; (1c82c <pdn_interface_open+0x1ac>)
   1c740:	4648      	mov	r0, r9
   1c742:	9601      	str	r6, [sp, #4]
   1c744:	9600      	str	r6, [sp, #0]
   1c746:	f7ff fd09 	bl	1c15c <at_interface_write>
   1c74a:	4681      	mov	r9, r0
   1c74c:	4837      	ldr	r0, [pc, #220]	; (1c82c <pdn_interface_open+0x1ac>)
   1c74e:	f7f0 fbf3 	bl	cf38 <strlen>
   1c752:	4548      	cmp	r0, r9
   1c754:	d153      	bne.n	1c7fe <pdn_interface_open+0x17e>
   1c756:	4633      	mov	r3, r6
   1c758:	e9cd 6600 	strd	r6, r6, [sp]
   1c75c:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c760:	4932      	ldr	r1, [pc, #200]	; (1c82c <pdn_interface_open+0x1ac>)
   1c762:	f8d8 0000 	ldr.w	r0, [r8]
   1c766:	f7ff fe2f 	bl	1c3c8 <at_interface_read>
   1c76a:	4606      	mov	r6, r0
   1c76c:	4830      	ldr	r0, [pc, #192]	; (1c830 <pdn_interface_open+0x1b0>)
   1c76e:	f7f0 fbe3 	bl	cf38 <strlen>
   1c772:	4286      	cmp	r6, r0
   1c774:	db15      	blt.n	1c7a2 <pdn_interface_open+0x122>
   1c776:	4602      	mov	r2, r0
   1c778:	492c      	ldr	r1, [pc, #176]	; (1c82c <pdn_interface_open+0x1ac>)
   1c77a:	482d      	ldr	r0, [pc, #180]	; (1c830 <pdn_interface_open+0x1b0>)
   1c77c:	f00d f87d 	bl	2987a <strncmp>
   1c780:	b978      	cbnz	r0, 1c7a2 <pdn_interface_open+0x122>
   1c782:	492a      	ldr	r1, [pc, #168]	; (1c82c <pdn_interface_open+0x1ac>)
   1c784:	4628      	mov	r0, r5
   1c786:	f7ff ff2f 	bl	1c5e8 <context_create_parser>
   1c78a:	b9b0      	cbnz	r0, 1c7ba <pdn_interface_open+0x13a>
   1c78c:	2202      	movs	r2, #2
   1c78e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1c792:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   1c796:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   1c79a:	609a      	str	r2, [r3, #8]
   1c79c:	b003      	add	sp, #12
   1c79e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c7a2:	4824      	ldr	r0, [pc, #144]	; (1c834 <pdn_interface_open+0x1b4>)
   1c7a4:	f7f0 fbc8 	bl	cf38 <strlen>
   1c7a8:	4920      	ldr	r1, [pc, #128]	; (1c82c <pdn_interface_open+0x1ac>)
   1c7aa:	4602      	mov	r2, r0
   1c7ac:	4821      	ldr	r0, [pc, #132]	; (1c834 <pdn_interface_open+0x1b4>)
   1c7ae:	f00d f864 	bl	2987a <strncmp>
   1c7b2:	b960      	cbnz	r0, 1c7ce <pdn_interface_open+0x14e>
   1c7b4:	2008      	movs	r0, #8
   1c7b6:	f7f8 fb85 	bl	14ec4 <bsd_os_errno_set>
   1c7ba:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1c7be:	f002 fa37 	bl	1ec30 <nrf_free>
   1c7c2:	2300      	movs	r3, #0
   1c7c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c7c8:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   1c7cc:	e78d      	b.n	1c6ea <pdn_interface_open+0x6a>
   1c7ce:	2005      	movs	r0, #5
   1c7d0:	f7f8 fb78 	bl	14ec4 <bsd_os_errno_set>
   1c7d4:	e7f1      	b.n	1c7ba <pdn_interface_open+0x13a>
   1c7d6:	2501      	movs	r5, #1
   1c7d8:	e78b      	b.n	1c6f2 <pdn_interface_open+0x72>
   1c7da:	2502      	movs	r5, #2
   1c7dc:	e789      	b.n	1c6f2 <pdn_interface_open+0x72>
   1c7de:	2503      	movs	r5, #3
   1c7e0:	e787      	b.n	1c6f2 <pdn_interface_open+0x72>
   1c7e2:	2504      	movs	r5, #4
   1c7e4:	e785      	b.n	1c6f2 <pdn_interface_open+0x72>
   1c7e6:	2505      	movs	r5, #5
   1c7e8:	e783      	b.n	1c6f2 <pdn_interface_open+0x72>
   1c7ea:	2506      	movs	r5, #6
   1c7ec:	e781      	b.n	1c6f2 <pdn_interface_open+0x72>
   1c7ee:	2507      	movs	r5, #7
   1c7f0:	e77f      	b.n	1c6f2 <pdn_interface_open+0x72>
   1c7f2:	2029      	movs	r0, #41	; 0x29
   1c7f4:	f7f8 fb66 	bl	14ec4 <bsd_os_errno_set>
   1c7f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c7fc:	e775      	b.n	1c6ea <pdn_interface_open+0x6a>
   1c7fe:	2005      	movs	r0, #5
   1c800:	f7f8 fb60 	bl	14ec4 <bsd_os_errno_set>
   1c804:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1c808:	f002 fa12 	bl	1ec30 <nrf_free>
   1c80c:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   1c810:	4638      	mov	r0, r7
   1c812:	e76a      	b.n	1c6ea <pdn_interface_open+0x6a>
   1c814:	2005      	movs	r0, #5
   1c816:	f7f8 fb55 	bl	14ec4 <bsd_os_errno_set>
   1c81a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c81e:	e764      	b.n	1c6ea <pdn_interface_open+0x6a>
   1c820:	2002af75 	.word	0x2002af75
   1c824:	200234f8 	.word	0x200234f8
   1c828:	0002aa0c 	.word	0x0002aa0c
   1c82c:	200233f8 	.word	0x200233f8
   1c830:	0002aa1c 	.word	0x0002aa1c
   1c834:	0002aa28 	.word	0x0002aa28
   1c838:	200233f4 	.word	0x200233f4

0001c83c <pdn_interface_connect>:
   1c83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c840:	b083      	sub	sp, #12
   1c842:	2900      	cmp	r1, #0
   1c844:	f000 813d 	beq.w	1cac2 <pdn_interface_connect+0x286>
   1c848:	2a64      	cmp	r2, #100	; 0x64
   1c84a:	4691      	mov	r9, r2
   1c84c:	f200 8139 	bhi.w	1cac2 <pdn_interface_connect+0x286>
   1c850:	4605      	mov	r5, r0
   1c852:	4608      	mov	r0, r1
   1c854:	4688      	mov	r8, r1
   1c856:	f7f0 fb6f 	bl	cf38 <strlen>
   1c85a:	2864      	cmp	r0, #100	; 0x64
   1c85c:	f200 8131 	bhi.w	1cac2 <pdn_interface_connect+0x286>
   1c860:	0c2b      	lsrs	r3, r5, #16
   1c862:	4aa5      	ldr	r2, [pc, #660]	; (1caf8 <pdn_interface_connect+0x2bc>)
   1c864:	041b      	lsls	r3, r3, #16
   1c866:	4293      	cmp	r3, r2
   1c868:	f040 8122 	bne.w	1cab0 <pdn_interface_connect+0x274>
   1c86c:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   1c870:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   1c874:	2d09      	cmp	r5, #9
   1c876:	f300 811b 	bgt.w	1cab0 <pdn_interface_connect+0x274>
   1c87a:	4fa0      	ldr	r7, [pc, #640]	; (1cafc <pdn_interface_connect+0x2c0>)
   1c87c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1c880:	2b00      	cmp	r3, #0
   1c882:	f000 8115 	beq.w	1cab0 <pdn_interface_connect+0x274>
   1c886:	689a      	ldr	r2, [r3, #8]
   1c888:	2a00      	cmp	r2, #0
   1c88a:	f000 8111 	beq.w	1cab0 <pdn_interface_connect+0x274>
   1c88e:	689b      	ldr	r3, [r3, #8]
   1c890:	2b02      	cmp	r3, #2
   1c892:	f040 810d 	bne.w	1cab0 <pdn_interface_connect+0x274>
   1c896:	4e9a      	ldr	r6, [pc, #616]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1c898:	4a9a      	ldr	r2, [pc, #616]	; (1cb04 <pdn_interface_connect+0x2c8>)
   1c89a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1c89e:	4630      	mov	r0, r6
   1c8a0:	f005 fa76 	bl	21d90 <sniprintf>
   1c8a4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1c8a8:	4604      	mov	r4, r0
   1c8aa:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1c8ae:	681b      	ldr	r3, [r3, #0]
   1c8b0:	4a95      	ldr	r2, [pc, #596]	; (1cb08 <pdn_interface_connect+0x2cc>)
   1c8b2:	1830      	adds	r0, r6, r0
   1c8b4:	f005 fa6c 	bl	21d90 <sniprintf>
   1c8b8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1c8bc:	4404      	add	r4, r0
   1c8be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1c8c0:	f003 0203 	and.w	r2, r3, #3
   1c8c4:	2a03      	cmp	r2, #3
   1c8c6:	f000 80ea 	beq.w	1ca9e <pdn_interface_connect+0x262>
   1c8ca:	079b      	lsls	r3, r3, #30
   1c8cc:	eb06 0004 	add.w	r0, r6, r4
   1c8d0:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1c8d4:	bf4c      	ite	mi
   1c8d6:	4b8d      	ldrmi	r3, [pc, #564]	; (1cb0c <pdn_interface_connect+0x2d0>)
   1c8d8:	4b8d      	ldrpl	r3, [pc, #564]	; (1cb10 <pdn_interface_connect+0x2d4>)
   1c8da:	4a8e      	ldr	r2, [pc, #568]	; (1cb14 <pdn_interface_connect+0x2d8>)
   1c8dc:	f005 fa58 	bl	21d90 <sniprintf>
   1c8e0:	4404      	add	r4, r0
   1c8e2:	4643      	mov	r3, r8
   1c8e4:	4a8c      	ldr	r2, [pc, #560]	; (1cb18 <pdn_interface_connect+0x2dc>)
   1c8e6:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1c8ea:	1930      	adds	r0, r6, r4
   1c8ec:	f005 fa50 	bl	21d90 <sniprintf>
   1c8f0:	4420      	add	r0, r4
   1c8f2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1c8f6:	f300 80f7 	bgt.w	1cae8 <pdn_interface_connect+0x2ac>
   1c8fa:	f8df a23c 	ldr.w	sl, [pc, #572]	; 1cb38 <pdn_interface_connect+0x2fc>
   1c8fe:	4880      	ldr	r0, [pc, #512]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1c900:	f8da b000 	ldr.w	fp, [sl]
   1c904:	2400      	movs	r4, #0
   1c906:	f7f0 fb17 	bl	cf38 <strlen>
   1c90a:	4623      	mov	r3, r4
   1c90c:	4602      	mov	r2, r0
   1c90e:	497c      	ldr	r1, [pc, #496]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1c910:	4658      	mov	r0, fp
   1c912:	9401      	str	r4, [sp, #4]
   1c914:	9400      	str	r4, [sp, #0]
   1c916:	f7ff fc21 	bl	1c15c <at_interface_write>
   1c91a:	4683      	mov	fp, r0
   1c91c:	4878      	ldr	r0, [pc, #480]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1c91e:	f7f0 fb0b 	bl	cf38 <strlen>
   1c922:	4558      	cmp	r0, fp
   1c924:	d008      	beq.n	1c938 <pdn_interface_connect+0xfc>
   1c926:	2005      	movs	r0, #5
   1c928:	f7f8 facc 	bl	14ec4 <bsd_os_errno_set>
   1c92c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c930:	4620      	mov	r0, r4
   1c932:	b003      	add	sp, #12
   1c934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c938:	4623      	mov	r3, r4
   1c93a:	e9cd 4400 	strd	r4, r4, [sp]
   1c93e:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c942:	496f      	ldr	r1, [pc, #444]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1c944:	f8da 0000 	ldr.w	r0, [sl]
   1c948:	f7ff fd3e 	bl	1c3c8 <at_interface_read>
   1c94c:	4604      	mov	r4, r0
   1c94e:	4873      	ldr	r0, [pc, #460]	; (1cb1c <pdn_interface_connect+0x2e0>)
   1c950:	f7f0 faf2 	bl	cf38 <strlen>
   1c954:	4284      	cmp	r4, r0
   1c956:	f2c0 8091 	blt.w	1ca7c <pdn_interface_connect+0x240>
   1c95a:	4602      	mov	r2, r0
   1c95c:	4968      	ldr	r1, [pc, #416]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1c95e:	486f      	ldr	r0, [pc, #444]	; (1cb1c <pdn_interface_connect+0x2e0>)
   1c960:	f00c ff8b 	bl	2987a <strncmp>
   1c964:	2800      	cmp	r0, #0
   1c966:	f040 8089 	bne.w	1ca7c <pdn_interface_connect+0x240>
   1c96a:	4965      	ldr	r1, [pc, #404]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1c96c:	4628      	mov	r0, r5
   1c96e:	f7ff fdd7 	bl	1c520 <ok_rsp_parser>
   1c972:	4604      	mov	r4, r0
   1c974:	2800      	cmp	r0, #0
   1c976:	d1db      	bne.n	1c930 <pdn_interface_connect+0xf4>
   1c978:	4a69      	ldr	r2, [pc, #420]	; (1cb20 <pdn_interface_connect+0x2e4>)
   1c97a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1c97e:	4860      	ldr	r0, [pc, #384]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1c980:	f005 fa06 	bl	21d90 <sniprintf>
   1c984:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1c988:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1c98c:	681b      	ldr	r3, [r3, #0]
   1c98e:	4a65      	ldr	r2, [pc, #404]	; (1cb24 <pdn_interface_connect+0x2e8>)
   1c990:	4430      	add	r0, r6
   1c992:	f005 f9fd 	bl	21d90 <sniprintf>
   1c996:	485a      	ldr	r0, [pc, #360]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1c998:	f8da b000 	ldr.w	fp, [sl]
   1c99c:	f7f0 facc 	bl	cf38 <strlen>
   1c9a0:	4623      	mov	r3, r4
   1c9a2:	4602      	mov	r2, r0
   1c9a4:	4956      	ldr	r1, [pc, #344]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1c9a6:	4658      	mov	r0, fp
   1c9a8:	9401      	str	r4, [sp, #4]
   1c9aa:	9400      	str	r4, [sp, #0]
   1c9ac:	f7ff fbd6 	bl	1c15c <at_interface_write>
   1c9b0:	4683      	mov	fp, r0
   1c9b2:	4853      	ldr	r0, [pc, #332]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1c9b4:	f7f0 fac0 	bl	cf38 <strlen>
   1c9b8:	4558      	cmp	r0, fp
   1c9ba:	d1b4      	bne.n	1c926 <pdn_interface_connect+0xea>
   1c9bc:	4623      	mov	r3, r4
   1c9be:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c9c2:	494f      	ldr	r1, [pc, #316]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1c9c4:	f8da 0000 	ldr.w	r0, [sl]
   1c9c8:	e9cd 4400 	strd	r4, r4, [sp]
   1c9cc:	f7ff fcfc 	bl	1c3c8 <at_interface_read>
   1c9d0:	4683      	mov	fp, r0
   1c9d2:	4852      	ldr	r0, [pc, #328]	; (1cb1c <pdn_interface_connect+0x2e0>)
   1c9d4:	f7f0 fab0 	bl	cf38 <strlen>
   1c9d8:	4583      	cmp	fp, r0
   1c9da:	db4f      	blt.n	1ca7c <pdn_interface_connect+0x240>
   1c9dc:	4602      	mov	r2, r0
   1c9de:	4948      	ldr	r1, [pc, #288]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1c9e0:	484e      	ldr	r0, [pc, #312]	; (1cb1c <pdn_interface_connect+0x2e0>)
   1c9e2:	f00c ff4a 	bl	2987a <strncmp>
   1c9e6:	2800      	cmp	r0, #0
   1c9e8:	d148      	bne.n	1ca7c <pdn_interface_connect+0x240>
   1c9ea:	2103      	movs	r1, #3
   1c9ec:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1c9f0:	464a      	mov	r2, r9
   1c9f2:	6099      	str	r1, [r3, #8]
   1c9f4:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   1c9f8:	4641      	mov	r1, r8
   1c9fa:	300c      	adds	r0, #12
   1c9fc:	f00c fd39 	bl	29472 <memcpy>
   1ca00:	4a49      	ldr	r2, [pc, #292]	; (1cb28 <pdn_interface_connect+0x2ec>)
   1ca02:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ca06:	483e      	ldr	r0, [pc, #248]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1ca08:	f005 f9c2 	bl	21d90 <sniprintf>
   1ca0c:	4601      	mov	r1, r0
   1ca0e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1ca12:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1ca16:	681b      	ldr	r3, [r3, #0]
   1ca18:	4a42      	ldr	r2, [pc, #264]	; (1cb24 <pdn_interface_connect+0x2e8>)
   1ca1a:	1830      	adds	r0, r6, r0
   1ca1c:	f005 f9b8 	bl	21d90 <sniprintf>
   1ca20:	4837      	ldr	r0, [pc, #220]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1ca22:	f8da 6000 	ldr.w	r6, [sl]
   1ca26:	f7f0 fa87 	bl	cf38 <strlen>
   1ca2a:	4623      	mov	r3, r4
   1ca2c:	4602      	mov	r2, r0
   1ca2e:	4934      	ldr	r1, [pc, #208]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1ca30:	4630      	mov	r0, r6
   1ca32:	9401      	str	r4, [sp, #4]
   1ca34:	9400      	str	r4, [sp, #0]
   1ca36:	f7ff fb91 	bl	1c15c <at_interface_write>
   1ca3a:	4606      	mov	r6, r0
   1ca3c:	4830      	ldr	r0, [pc, #192]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1ca3e:	f7f0 fa7b 	bl	cf38 <strlen>
   1ca42:	42b0      	cmp	r0, r6
   1ca44:	d153      	bne.n	1caee <pdn_interface_connect+0x2b2>
   1ca46:	4623      	mov	r3, r4
   1ca48:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ca4c:	492c      	ldr	r1, [pc, #176]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1ca4e:	f8da 0000 	ldr.w	r0, [sl]
   1ca52:	e9cd 4400 	strd	r4, r4, [sp]
   1ca56:	f7ff fcb7 	bl	1c3c8 <at_interface_read>
   1ca5a:	4606      	mov	r6, r0
   1ca5c:	4833      	ldr	r0, [pc, #204]	; (1cb2c <pdn_interface_connect+0x2f0>)
   1ca5e:	f7f0 fa6b 	bl	cf38 <strlen>
   1ca62:	4286      	cmp	r6, r0
   1ca64:	db33      	blt.n	1cace <pdn_interface_connect+0x292>
   1ca66:	4602      	mov	r2, r0
   1ca68:	4925      	ldr	r1, [pc, #148]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1ca6a:	4830      	ldr	r0, [pc, #192]	; (1cb2c <pdn_interface_connect+0x2f0>)
   1ca6c:	f00c ff05 	bl	2987a <strncmp>
   1ca70:	bb68      	cbnz	r0, 1cace <pdn_interface_connect+0x292>
   1ca72:	4628      	mov	r0, r5
   1ca74:	4922      	ldr	r1, [pc, #136]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1ca76:	f7ff fd8b 	bl	1c590 <pdn_id_get_parser>
   1ca7a:	e759      	b.n	1c930 <pdn_interface_connect+0xf4>
   1ca7c:	482c      	ldr	r0, [pc, #176]	; (1cb30 <pdn_interface_connect+0x2f4>)
   1ca7e:	f7f0 fa5b 	bl	cf38 <strlen>
   1ca82:	491f      	ldr	r1, [pc, #124]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1ca84:	4602      	mov	r2, r0
   1ca86:	482a      	ldr	r0, [pc, #168]	; (1cb30 <pdn_interface_connect+0x2f4>)
   1ca88:	f00c fef7 	bl	2987a <strncmp>
   1ca8c:	2800      	cmp	r0, #0
   1ca8e:	f47f af4a 	bne.w	1c926 <pdn_interface_connect+0xea>
   1ca92:	2008      	movs	r0, #8
   1ca94:	f7f8 fa16 	bl	14ec4 <bsd_os_errno_set>
   1ca98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ca9c:	e748      	b.n	1c930 <pdn_interface_connect+0xf4>
   1ca9e:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1caa2:	1930      	adds	r0, r6, r4
   1caa4:	4b23      	ldr	r3, [pc, #140]	; (1cb34 <pdn_interface_connect+0x2f8>)
   1caa6:	4a1b      	ldr	r2, [pc, #108]	; (1cb14 <pdn_interface_connect+0x2d8>)
   1caa8:	f005 f972 	bl	21d90 <sniprintf>
   1caac:	4404      	add	r4, r0
   1caae:	e718      	b.n	1c8e2 <pdn_interface_connect+0xa6>
   1cab0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1cab4:	2009      	movs	r0, #9
   1cab6:	f7f8 fa05 	bl	14ec4 <bsd_os_errno_set>
   1caba:	4620      	mov	r0, r4
   1cabc:	b003      	add	sp, #12
   1cabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cac2:	2016      	movs	r0, #22
   1cac4:	f7f8 f9fe 	bl	14ec4 <bsd_os_errno_set>
   1cac8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1cacc:	e730      	b.n	1c930 <pdn_interface_connect+0xf4>
   1cace:	4818      	ldr	r0, [pc, #96]	; (1cb30 <pdn_interface_connect+0x2f4>)
   1cad0:	f7f0 fa32 	bl	cf38 <strlen>
   1cad4:	490a      	ldr	r1, [pc, #40]	; (1cb00 <pdn_interface_connect+0x2c4>)
   1cad6:	4602      	mov	r2, r0
   1cad8:	4815      	ldr	r0, [pc, #84]	; (1cb30 <pdn_interface_connect+0x2f4>)
   1cada:	f00c fece 	bl	2987a <strncmp>
   1cade:	b930      	cbnz	r0, 1caee <pdn_interface_connect+0x2b2>
   1cae0:	2008      	movs	r0, #8
   1cae2:	f7f8 f9ef 	bl	14ec4 <bsd_os_errno_set>
   1cae6:	e723      	b.n	1c930 <pdn_interface_connect+0xf4>
   1cae8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1caec:	e720      	b.n	1c930 <pdn_interface_connect+0xf4>
   1caee:	2005      	movs	r0, #5
   1caf0:	f7f8 f9e8 	bl	14ec4 <bsd_os_errno_set>
   1caf4:	e71c      	b.n	1c930 <pdn_interface_connect+0xf4>
   1caf6:	bf00      	nop
   1caf8:	789a0000 	.word	0x789a0000
   1cafc:	200234f8 	.word	0x200234f8
   1cb00:	200233f8 	.word	0x200233f8
   1cb04:	0002a994 	.word	0x0002a994
   1cb08:	0002a9a0 	.word	0x0002a9a0
   1cb0c:	0002a9b4 	.word	0x0002a9b4
   1cb10:	0002a9bc 	.word	0x0002a9bc
   1cb14:	0002a9ac 	.word	0x0002a9ac
   1cb18:	0002a9f0 	.word	0x0002a9f0
   1cb1c:	0002a9c0 	.word	0x0002a9c0
   1cb20:	0002a9c4 	.word	0x0002a9c4
   1cb24:	0002a9d0 	.word	0x0002a9d0
   1cb28:	0002a9d4 	.word	0x0002a9d4
   1cb2c:	0002a9e4 	.word	0x0002a9e4
   1cb30:	0002aa28 	.word	0x0002aa28
   1cb34:	0002a9a4 	.word	0x0002a9a4
   1cb38:	200233f4 	.word	0x200233f4

0001cb3c <pdn_interface_close>:
   1cb3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cb40:	4a6b      	ldr	r2, [pc, #428]	; (1ccf0 <pdn_interface_close+0x1b4>)
   1cb42:	0c03      	lsrs	r3, r0, #16
   1cb44:	041b      	lsls	r3, r3, #16
   1cb46:	4293      	cmp	r3, r2
   1cb48:	b083      	sub	sp, #12
   1cb4a:	f040 80ac 	bne.w	1cca6 <pdn_interface_close+0x16a>
   1cb4e:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1cb52:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1cb56:	2c09      	cmp	r4, #9
   1cb58:	f300 80a5 	bgt.w	1cca6 <pdn_interface_close+0x16a>
   1cb5c:	4d65      	ldr	r5, [pc, #404]	; (1ccf4 <pdn_interface_close+0x1b8>)
   1cb5e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1cb62:	2800      	cmp	r0, #0
   1cb64:	f000 809f 	beq.w	1cca6 <pdn_interface_close+0x16a>
   1cb68:	6883      	ldr	r3, [r0, #8]
   1cb6a:	2b00      	cmp	r3, #0
   1cb6c:	f000 809b 	beq.w	1cca6 <pdn_interface_close+0x16a>
   1cb70:	6883      	ldr	r3, [r0, #8]
   1cb72:	2b03      	cmp	r3, #3
   1cb74:	d00b      	beq.n	1cb8e <pdn_interface_close+0x52>
   1cb76:	6883      	ldr	r3, [r0, #8]
   1cb78:	2b02      	cmp	r3, #2
   1cb7a:	d055      	beq.n	1cc28 <pdn_interface_close+0xec>
   1cb7c:	f002 f858 	bl	1ec30 <nrf_free>
   1cb80:	2300      	movs	r3, #0
   1cb82:	4618      	mov	r0, r3
   1cb84:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   1cb88:	b003      	add	sp, #12
   1cb8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cb8e:	4e5a      	ldr	r6, [pc, #360]	; (1ccf8 <pdn_interface_close+0x1bc>)
   1cb90:	4a5a      	ldr	r2, [pc, #360]	; (1ccfc <pdn_interface_close+0x1c0>)
   1cb92:	f44f 7180 	mov.w	r1, #256	; 0x100
   1cb96:	4630      	mov	r0, r6
   1cb98:	f005 f8fa 	bl	21d90 <sniprintf>
   1cb9c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1cba0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1cba4:	681b      	ldr	r3, [r3, #0]
   1cba6:	4a56      	ldr	r2, [pc, #344]	; (1cd00 <pdn_interface_close+0x1c4>)
   1cba8:	4430      	add	r0, r6
   1cbaa:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1cd10 <pdn_interface_close+0x1d4>
   1cbae:	f005 f8ef 	bl	21d90 <sniprintf>
   1cbb2:	4630      	mov	r0, r6
   1cbb4:	f8d8 9000 	ldr.w	r9, [r8]
   1cbb8:	2700      	movs	r7, #0
   1cbba:	f7f0 f9bd 	bl	cf38 <strlen>
   1cbbe:	4631      	mov	r1, r6
   1cbc0:	4602      	mov	r2, r0
   1cbc2:	463b      	mov	r3, r7
   1cbc4:	4648      	mov	r0, r9
   1cbc6:	9701      	str	r7, [sp, #4]
   1cbc8:	9700      	str	r7, [sp, #0]
   1cbca:	f7ff fac7 	bl	1c15c <at_interface_write>
   1cbce:	4681      	mov	r9, r0
   1cbd0:	4630      	mov	r0, r6
   1cbd2:	f7f0 f9b1 	bl	cf38 <strlen>
   1cbd6:	4548      	cmp	r0, r9
   1cbd8:	f040 8082 	bne.w	1cce0 <pdn_interface_close+0x1a4>
   1cbdc:	463b      	mov	r3, r7
   1cbde:	e9cd 7700 	strd	r7, r7, [sp]
   1cbe2:	f44f 7280 	mov.w	r2, #256	; 0x100
   1cbe6:	4631      	mov	r1, r6
   1cbe8:	f8d8 0000 	ldr.w	r0, [r8]
   1cbec:	f7ff fbec 	bl	1c3c8 <at_interface_read>
   1cbf0:	4607      	mov	r7, r0
   1cbf2:	4844      	ldr	r0, [pc, #272]	; (1cd04 <pdn_interface_close+0x1c8>)
   1cbf4:	f7f0 f9a0 	bl	cf38 <strlen>
   1cbf8:	4287      	cmp	r7, r0
   1cbfa:	da5a      	bge.n	1ccb2 <pdn_interface_close+0x176>
   1cbfc:	4842      	ldr	r0, [pc, #264]	; (1cd08 <pdn_interface_close+0x1cc>)
   1cbfe:	f7f0 f99b 	bl	cf38 <strlen>
   1cc02:	493d      	ldr	r1, [pc, #244]	; (1ccf8 <pdn_interface_close+0x1bc>)
   1cc04:	4602      	mov	r2, r0
   1cc06:	4840      	ldr	r0, [pc, #256]	; (1cd08 <pdn_interface_close+0x1cc>)
   1cc08:	f00c fe37 	bl	2987a <strncmp>
   1cc0c:	2800      	cmp	r0, #0
   1cc0e:	d167      	bne.n	1cce0 <pdn_interface_close+0x1a4>
   1cc10:	2008      	movs	r0, #8
   1cc12:	f7f8 f957 	bl	14ec4 <bsd_os_errno_set>
   1cc16:	2202      	movs	r2, #2
   1cc18:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1cc1c:	609a      	str	r2, [r3, #8]
   1cc1e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1cc22:	6883      	ldr	r3, [r0, #8]
   1cc24:	2b02      	cmp	r3, #2
   1cc26:	d1a9      	bne.n	1cb7c <pdn_interface_close+0x40>
   1cc28:	4e33      	ldr	r6, [pc, #204]	; (1ccf8 <pdn_interface_close+0x1bc>)
   1cc2a:	4a38      	ldr	r2, [pc, #224]	; (1cd0c <pdn_interface_close+0x1d0>)
   1cc2c:	f44f 7180 	mov.w	r1, #256	; 0x100
   1cc30:	4630      	mov	r0, r6
   1cc32:	f005 f8ad 	bl	21d90 <sniprintf>
   1cc36:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1cc3a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1cc3e:	681b      	ldr	r3, [r3, #0]
   1cc40:	4a2f      	ldr	r2, [pc, #188]	; (1cd00 <pdn_interface_close+0x1c4>)
   1cc42:	4430      	add	r0, r6
   1cc44:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 1cd10 <pdn_interface_close+0x1d4>
   1cc48:	f005 f8a2 	bl	21d90 <sniprintf>
   1cc4c:	4630      	mov	r0, r6
   1cc4e:	f8d8 9000 	ldr.w	r9, [r8]
   1cc52:	2700      	movs	r7, #0
   1cc54:	f7f0 f970 	bl	cf38 <strlen>
   1cc58:	4631      	mov	r1, r6
   1cc5a:	4602      	mov	r2, r0
   1cc5c:	463b      	mov	r3, r7
   1cc5e:	4648      	mov	r0, r9
   1cc60:	9701      	str	r7, [sp, #4]
   1cc62:	9700      	str	r7, [sp, #0]
   1cc64:	f7ff fa7a 	bl	1c15c <at_interface_write>
   1cc68:	4681      	mov	r9, r0
   1cc6a:	4630      	mov	r0, r6
   1cc6c:	f7f0 f964 	bl	cf38 <strlen>
   1cc70:	4548      	cmp	r0, r9
   1cc72:	d139      	bne.n	1cce8 <pdn_interface_close+0x1ac>
   1cc74:	463b      	mov	r3, r7
   1cc76:	e9cd 7700 	strd	r7, r7, [sp]
   1cc7a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1cc7e:	4631      	mov	r1, r6
   1cc80:	f8d8 0000 	ldr.w	r0, [r8]
   1cc84:	f7ff fba0 	bl	1c3c8 <at_interface_read>
   1cc88:	4607      	mov	r7, r0
   1cc8a:	481e      	ldr	r0, [pc, #120]	; (1cd04 <pdn_interface_close+0x1c8>)
   1cc8c:	f7f0 f954 	bl	cf38 <strlen>
   1cc90:	4287      	cmp	r7, r0
   1cc92:	db16      	blt.n	1ccc2 <pdn_interface_close+0x186>
   1cc94:	4602      	mov	r2, r0
   1cc96:	4631      	mov	r1, r6
   1cc98:	481a      	ldr	r0, [pc, #104]	; (1cd04 <pdn_interface_close+0x1c8>)
   1cc9a:	f00c fdee 	bl	2987a <strncmp>
   1cc9e:	b980      	cbnz	r0, 1ccc2 <pdn_interface_close+0x186>
   1cca0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1cca4:	e76a      	b.n	1cb7c <pdn_interface_close+0x40>
   1cca6:	2009      	movs	r0, #9
   1cca8:	f7f8 f90c 	bl	14ec4 <bsd_os_errno_set>
   1ccac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ccb0:	e76a      	b.n	1cb88 <pdn_interface_close+0x4c>
   1ccb2:	4602      	mov	r2, r0
   1ccb4:	4631      	mov	r1, r6
   1ccb6:	4813      	ldr	r0, [pc, #76]	; (1cd04 <pdn_interface_close+0x1c8>)
   1ccb8:	f00c fddf 	bl	2987a <strncmp>
   1ccbc:	2800      	cmp	r0, #0
   1ccbe:	d0aa      	beq.n	1cc16 <pdn_interface_close+0xda>
   1ccc0:	e79c      	b.n	1cbfc <pdn_interface_close+0xc0>
   1ccc2:	4811      	ldr	r0, [pc, #68]	; (1cd08 <pdn_interface_close+0x1cc>)
   1ccc4:	f7f0 f938 	bl	cf38 <strlen>
   1ccc8:	490b      	ldr	r1, [pc, #44]	; (1ccf8 <pdn_interface_close+0x1bc>)
   1ccca:	4602      	mov	r2, r0
   1cccc:	480e      	ldr	r0, [pc, #56]	; (1cd08 <pdn_interface_close+0x1cc>)
   1ccce:	f00c fdd4 	bl	2987a <strncmp>
   1ccd2:	b948      	cbnz	r0, 1cce8 <pdn_interface_close+0x1ac>
   1ccd4:	2008      	movs	r0, #8
   1ccd6:	f7f8 f8f5 	bl	14ec4 <bsd_os_errno_set>
   1ccda:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1ccde:	e74d      	b.n	1cb7c <pdn_interface_close+0x40>
   1cce0:	2005      	movs	r0, #5
   1cce2:	f7f8 f8ef 	bl	14ec4 <bsd_os_errno_set>
   1cce6:	e796      	b.n	1cc16 <pdn_interface_close+0xda>
   1cce8:	2005      	movs	r0, #5
   1ccea:	f7f8 f8eb 	bl	14ec4 <bsd_os_errno_set>
   1ccee:	e7d7      	b.n	1cca0 <pdn_interface_close+0x164>
   1ccf0:	789a0000 	.word	0x789a0000
   1ccf4:	200234f8 	.word	0x200234f8
   1ccf8:	200233f8 	.word	0x200233f8
   1ccfc:	0002a988 	.word	0x0002a988
   1cd00:	0002a9d0 	.word	0x0002a9d0
   1cd04:	0002a9c0 	.word	0x0002a9c0
   1cd08:	0002aa28 	.word	0x0002aa28
   1cd0c:	0002a994 	.word	0x0002a994
   1cd10:	200233f4 	.word	0x200233f4

0001cd14 <pdn_interface_setopt>:
   1cd14:	b538      	push	{r3, r4, r5, lr}
   1cd16:	f240 2502 	movw	r5, #514	; 0x202
   1cd1a:	42a9      	cmp	r1, r5
   1cd1c:	9c04      	ldr	r4, [sp, #16]
   1cd1e:	d140      	bne.n	1cda2 <pdn_interface_setopt+0x8e>
   1cd20:	2b00      	cmp	r3, #0
   1cd22:	d03e      	beq.n	1cda2 <pdn_interface_setopt+0x8e>
   1cd24:	2c00      	cmp	r4, #0
   1cd26:	d03c      	beq.n	1cda2 <pdn_interface_setopt+0x8e>
   1cd28:	0c01      	lsrs	r1, r0, #16
   1cd2a:	4d22      	ldr	r5, [pc, #136]	; (1cdb4 <pdn_interface_setopt+0xa0>)
   1cd2c:	0409      	lsls	r1, r1, #16
   1cd2e:	42a9      	cmp	r1, r5
   1cd30:	d005      	beq.n	1cd3e <pdn_interface_setopt+0x2a>
   1cd32:	2009      	movs	r0, #9
   1cd34:	f7f8 f8c6 	bl	14ec4 <bsd_os_errno_set>
   1cd38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cd3c:	bd38      	pop	{r3, r4, r5, pc}
   1cd3e:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   1cd42:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   1cd46:	2809      	cmp	r0, #9
   1cd48:	dcf3      	bgt.n	1cd32 <pdn_interface_setopt+0x1e>
   1cd4a:	491b      	ldr	r1, [pc, #108]	; (1cdb8 <pdn_interface_setopt+0xa4>)
   1cd4c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   1cd50:	2900      	cmp	r1, #0
   1cd52:	d0ee      	beq.n	1cd32 <pdn_interface_setopt+0x1e>
   1cd54:	6888      	ldr	r0, [r1, #8]
   1cd56:	2800      	cmp	r0, #0
   1cd58:	d0eb      	beq.n	1cd32 <pdn_interface_setopt+0x1e>
   1cd5a:	2a01      	cmp	r2, #1
   1cd5c:	d128      	bne.n	1cdb0 <pdn_interface_setopt+0x9c>
   1cd5e:	688a      	ldr	r2, [r1, #8]
   1cd60:	b1ea      	cbz	r2, 1cd9e <pdn_interface_setopt+0x8a>
   1cd62:	688a      	ldr	r2, [r1, #8]
   1cd64:	2a03      	cmp	r2, #3
   1cd66:	d01a      	beq.n	1cd9e <pdn_interface_setopt+0x8a>
   1cd68:	688a      	ldr	r2, [r1, #8]
   1cd6a:	2a04      	cmp	r2, #4
   1cd6c:	d017      	beq.n	1cd9e <pdn_interface_setopt+0x8a>
   1cd6e:	08a2      	lsrs	r2, r4, #2
   1cd70:	1e50      	subs	r0, r2, #1
   1cd72:	2801      	cmp	r0, #1
   1cd74:	d815      	bhi.n	1cda2 <pdn_interface_setopt+0x8e>
   1cd76:	07a0      	lsls	r0, r4, #30
   1cd78:	d113      	bne.n	1cda2 <pdn_interface_setopt+0x8e>
   1cd7a:	6818      	ldr	r0, [r3, #0]
   1cd7c:	2802      	cmp	r0, #2
   1cd7e:	d012      	beq.n	1cda6 <pdn_interface_setopt+0x92>
   1cd80:	280a      	cmp	r0, #10
   1cd82:	d10e      	bne.n	1cda2 <pdn_interface_setopt+0x8e>
   1cd84:	2002      	movs	r0, #2
   1cd86:	2a02      	cmp	r2, #2
   1cd88:	d106      	bne.n	1cd98 <pdn_interface_setopt+0x84>
   1cd8a:	685b      	ldr	r3, [r3, #4]
   1cd8c:	2b02      	cmp	r3, #2
   1cd8e:	d00c      	beq.n	1cdaa <pdn_interface_setopt+0x96>
   1cd90:	2b0a      	cmp	r3, #10
   1cd92:	d106      	bne.n	1cda2 <pdn_interface_setopt+0x8e>
   1cd94:	f040 0002 	orr.w	r0, r0, #2
   1cd98:	6708      	str	r0, [r1, #112]	; 0x70
   1cd9a:	2000      	movs	r0, #0
   1cd9c:	bd38      	pop	{r3, r4, r5, pc}
   1cd9e:	200e      	movs	r0, #14
   1cda0:	e7c8      	b.n	1cd34 <pdn_interface_setopt+0x20>
   1cda2:	2016      	movs	r0, #22
   1cda4:	e7c6      	b.n	1cd34 <pdn_interface_setopt+0x20>
   1cda6:	2001      	movs	r0, #1
   1cda8:	e7ed      	b.n	1cd86 <pdn_interface_setopt+0x72>
   1cdaa:	f040 0001 	orr.w	r0, r0, #1
   1cdae:	e7f3      	b.n	1cd98 <pdn_interface_setopt+0x84>
   1cdb0:	202d      	movs	r0, #45	; 0x2d
   1cdb2:	e7bf      	b.n	1cd34 <pdn_interface_setopt+0x20>
   1cdb4:	789a0000 	.word	0x789a0000
   1cdb8:	200234f8 	.word	0x200234f8

0001cdbc <pdn_interface_getopt>:
   1cdbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cdc0:	f240 2402 	movw	r4, #514	; 0x202
   1cdc4:	b083      	sub	sp, #12
   1cdc6:	42a1      	cmp	r1, r4
   1cdc8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1cdca:	f040 809f 	bne.w	1cf0c <pdn_interface_getopt+0x150>
   1cdce:	461e      	mov	r6, r3
   1cdd0:	2b00      	cmp	r3, #0
   1cdd2:	f000 809b 	beq.w	1cf0c <pdn_interface_getopt+0x150>
   1cdd6:	2d00      	cmp	r5, #0
   1cdd8:	f000 8098 	beq.w	1cf0c <pdn_interface_getopt+0x150>
   1cddc:	0c03      	lsrs	r3, r0, #16
   1cdde:	4955      	ldr	r1, [pc, #340]	; (1cf34 <pdn_interface_getopt+0x178>)
   1cde0:	041b      	lsls	r3, r3, #16
   1cde2:	428b      	cmp	r3, r1
   1cde4:	f040 8094 	bne.w	1cf10 <pdn_interface_getopt+0x154>
   1cde8:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1cdec:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1cdf0:	2c09      	cmp	r4, #9
   1cdf2:	f300 808d 	bgt.w	1cf10 <pdn_interface_getopt+0x154>
   1cdf6:	4b50      	ldr	r3, [pc, #320]	; (1cf38 <pdn_interface_getopt+0x17c>)
   1cdf8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1cdfc:	2b00      	cmp	r3, #0
   1cdfe:	f000 8087 	beq.w	1cf10 <pdn_interface_getopt+0x154>
   1ce02:	6899      	ldr	r1, [r3, #8]
   1ce04:	2900      	cmp	r1, #0
   1ce06:	f000 8083 	beq.w	1cf10 <pdn_interface_getopt+0x154>
   1ce0a:	2a02      	cmp	r2, #2
   1ce0c:	d04c      	beq.n	1cea8 <pdn_interface_getopt+0xec>
   1ce0e:	2a03      	cmp	r2, #3
   1ce10:	d009      	beq.n	1ce26 <pdn_interface_getopt+0x6a>
   1ce12:	2a01      	cmp	r2, #1
   1ce14:	d052      	beq.n	1cebc <pdn_interface_getopt+0x100>
   1ce16:	202d      	movs	r0, #45	; 0x2d
   1ce18:	f7f8 f854 	bl	14ec4 <bsd_os_errno_set>
   1ce1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ce20:	b003      	add	sp, #12
   1ce22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ce26:	682b      	ldr	r3, [r5, #0]
   1ce28:	2b00      	cmp	r3, #0
   1ce2a:	d06f      	beq.n	1cf0c <pdn_interface_getopt+0x150>
   1ce2c:	4a43      	ldr	r2, [pc, #268]	; (1cf3c <pdn_interface_getopt+0x180>)
   1ce2e:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ce32:	4843      	ldr	r0, [pc, #268]	; (1cf40 <pdn_interface_getopt+0x184>)
   1ce34:	f8df 8114 	ldr.w	r8, [pc, #276]	; 1cf4c <pdn_interface_getopt+0x190>
   1ce38:	f004 ffaa 	bl	21d90 <sniprintf>
   1ce3c:	4840      	ldr	r0, [pc, #256]	; (1cf40 <pdn_interface_getopt+0x184>)
   1ce3e:	f8d8 9000 	ldr.w	r9, [r8]
   1ce42:	2700      	movs	r7, #0
   1ce44:	f7f0 f878 	bl	cf38 <strlen>
   1ce48:	463b      	mov	r3, r7
   1ce4a:	4602      	mov	r2, r0
   1ce4c:	493c      	ldr	r1, [pc, #240]	; (1cf40 <pdn_interface_getopt+0x184>)
   1ce4e:	4648      	mov	r0, r9
   1ce50:	9701      	str	r7, [sp, #4]
   1ce52:	9700      	str	r7, [sp, #0]
   1ce54:	f7ff f982 	bl	1c15c <at_interface_write>
   1ce58:	4681      	mov	r9, r0
   1ce5a:	4839      	ldr	r0, [pc, #228]	; (1cf40 <pdn_interface_getopt+0x184>)
   1ce5c:	f7f0 f86c 	bl	cf38 <strlen>
   1ce60:	4548      	cmp	r0, r9
   1ce62:	d160      	bne.n	1cf26 <pdn_interface_getopt+0x16a>
   1ce64:	463b      	mov	r3, r7
   1ce66:	e9cd 7700 	strd	r7, r7, [sp]
   1ce6a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ce6e:	4934      	ldr	r1, [pc, #208]	; (1cf40 <pdn_interface_getopt+0x184>)
   1ce70:	f8d8 0000 	ldr.w	r0, [r8]
   1ce74:	f7ff faa8 	bl	1c3c8 <at_interface_read>
   1ce78:	4607      	mov	r7, r0
   1ce7a:	4832      	ldr	r0, [pc, #200]	; (1cf44 <pdn_interface_getopt+0x188>)
   1ce7c:	f7f0 f85c 	bl	cf38 <strlen>
   1ce80:	4287      	cmp	r7, r0
   1ce82:	db32      	blt.n	1ceea <pdn_interface_getopt+0x12e>
   1ce84:	4602      	mov	r2, r0
   1ce86:	492e      	ldr	r1, [pc, #184]	; (1cf40 <pdn_interface_getopt+0x184>)
   1ce88:	482e      	ldr	r0, [pc, #184]	; (1cf44 <pdn_interface_getopt+0x188>)
   1ce8a:	f00c fcf6 	bl	2987a <strncmp>
   1ce8e:	4607      	mov	r7, r0
   1ce90:	bb58      	cbnz	r0, 1ceea <pdn_interface_getopt+0x12e>
   1ce92:	4620      	mov	r0, r4
   1ce94:	492a      	ldr	r1, [pc, #168]	; (1cf40 <pdn_interface_getopt+0x184>)
   1ce96:	f7ff fb45 	bl	1c524 <pdn_state_get_parser>
   1ce9a:	2800      	cmp	r0, #0
   1ce9c:	dbbc      	blt.n	1ce18 <pdn_interface_getopt+0x5c>
   1ce9e:	2301      	movs	r3, #1
   1cea0:	7030      	strb	r0, [r6, #0]
   1cea2:	4638      	mov	r0, r7
   1cea4:	602b      	str	r3, [r5, #0]
   1cea6:	e7bb      	b.n	1ce20 <pdn_interface_getopt+0x64>
   1cea8:	682a      	ldr	r2, [r5, #0]
   1ceaa:	b37a      	cbz	r2, 1cf0c <pdn_interface_getopt+0x150>
   1ceac:	2201      	movs	r2, #1
   1ceae:	2000      	movs	r0, #0
   1ceb0:	681b      	ldr	r3, [r3, #0]
   1ceb2:	7033      	strb	r3, [r6, #0]
   1ceb4:	602a      	str	r2, [r5, #0]
   1ceb6:	b003      	add	sp, #12
   1ceb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cebc:	689a      	ldr	r2, [r3, #8]
   1cebe:	b31a      	cbz	r2, 1cf08 <pdn_interface_getopt+0x14c>
   1cec0:	689a      	ldr	r2, [r3, #8]
   1cec2:	2a04      	cmp	r2, #4
   1cec4:	d020      	beq.n	1cf08 <pdn_interface_getopt+0x14c>
   1cec6:	682a      	ldr	r2, [r5, #0]
   1cec8:	2a07      	cmp	r2, #7
   1ceca:	d91f      	bls.n	1cf0c <pdn_interface_getopt+0x150>
   1cecc:	f012 0203 	ands.w	r2, r2, #3
   1ced0:	d11c      	bne.n	1cf0c <pdn_interface_getopt+0x150>
   1ced2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1ced4:	0799      	lsls	r1, r3, #30
   1ced6:	d421      	bmi.n	1cf1c <pdn_interface_getopt+0x160>
   1ced8:	2104      	movs	r1, #4
   1ceda:	07db      	lsls	r3, r3, #31
   1cedc:	d502      	bpl.n	1cee4 <pdn_interface_getopt+0x128>
   1cede:	2302      	movs	r3, #2
   1cee0:	50b3      	str	r3, [r6, r2]
   1cee2:	460a      	mov	r2, r1
   1cee4:	602a      	str	r2, [r5, #0]
   1cee6:	2000      	movs	r0, #0
   1cee8:	e79a      	b.n	1ce20 <pdn_interface_getopt+0x64>
   1ceea:	4817      	ldr	r0, [pc, #92]	; (1cf48 <pdn_interface_getopt+0x18c>)
   1ceec:	f7f0 f824 	bl	cf38 <strlen>
   1cef0:	4913      	ldr	r1, [pc, #76]	; (1cf40 <pdn_interface_getopt+0x184>)
   1cef2:	4602      	mov	r2, r0
   1cef4:	4814      	ldr	r0, [pc, #80]	; (1cf48 <pdn_interface_getopt+0x18c>)
   1cef6:	f00c fcc0 	bl	2987a <strncmp>
   1cefa:	b9a0      	cbnz	r0, 1cf26 <pdn_interface_getopt+0x16a>
   1cefc:	2008      	movs	r0, #8
   1cefe:	f7f7 ffe1 	bl	14ec4 <bsd_os_errno_set>
   1cf02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cf06:	e787      	b.n	1ce18 <pdn_interface_getopt+0x5c>
   1cf08:	200e      	movs	r0, #14
   1cf0a:	e785      	b.n	1ce18 <pdn_interface_getopt+0x5c>
   1cf0c:	2016      	movs	r0, #22
   1cf0e:	e783      	b.n	1ce18 <pdn_interface_getopt+0x5c>
   1cf10:	2009      	movs	r0, #9
   1cf12:	f7f7 ffd7 	bl	14ec4 <bsd_os_errno_set>
   1cf16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cf1a:	e781      	b.n	1ce20 <pdn_interface_getopt+0x64>
   1cf1c:	220a      	movs	r2, #10
   1cf1e:	2108      	movs	r1, #8
   1cf20:	6032      	str	r2, [r6, #0]
   1cf22:	2204      	movs	r2, #4
   1cf24:	e7d9      	b.n	1ceda <pdn_interface_getopt+0x11e>
   1cf26:	2005      	movs	r0, #5
   1cf28:	f7f7 ffcc 	bl	14ec4 <bsd_os_errno_set>
   1cf2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cf30:	e772      	b.n	1ce18 <pdn_interface_getopt+0x5c>
   1cf32:	bf00      	nop
   1cf34:	789a0000 	.word	0x789a0000
   1cf38:	200234f8 	.word	0x200234f8
   1cf3c:	0002a9f8 	.word	0x0002a9f8
   1cf40:	200233f8 	.word	0x200233f8
   1cf44:	0002aa04 	.word	0x0002aa04
   1cf48:	0002aa28 	.word	0x0002aa28
   1cf4c:	200233f4 	.word	0x200233f4

0001cf50 <pdn_interface_pdn_id_get>:
   1cf50:	2900      	cmp	r1, #0
   1cf52:	f000 83b9 	beq.w	1d6c8 <pdn_interface_pdn_id_get+0x778>
   1cf56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cf5a:	4ca3      	ldr	r4, [pc, #652]	; (1d1e8 <pdn_interface_pdn_id_get+0x298>)
   1cf5c:	2802      	cmp	r0, #2
   1cf5e:	b083      	sub	sp, #12
   1cf60:	460d      	mov	r5, r1
   1cf62:	6823      	ldr	r3, [r4, #0]
   1cf64:	f000 8094 	beq.w	1d090 <pdn_interface_pdn_id_get+0x140>
   1cf68:	280a      	cmp	r0, #10
   1cf6a:	d03f      	beq.n	1cfec <pdn_interface_pdn_id_get+0x9c>
   1cf6c:	b11b      	cbz	r3, 1cf76 <pdn_interface_pdn_id_get+0x26>
   1cf6e:	689b      	ldr	r3, [r3, #8]
   1cf70:	2b03      	cmp	r3, #3
   1cf72:	f000 8127 	beq.w	1d1c4 <pdn_interface_pdn_id_get+0x274>
   1cf76:	6863      	ldr	r3, [r4, #4]
   1cf78:	b11b      	cbz	r3, 1cf82 <pdn_interface_pdn_id_get+0x32>
   1cf7a:	689b      	ldr	r3, [r3, #8]
   1cf7c:	2b03      	cmp	r3, #3
   1cf7e:	f000 8110 	beq.w	1d1a2 <pdn_interface_pdn_id_get+0x252>
   1cf82:	68a3      	ldr	r3, [r4, #8]
   1cf84:	b11b      	cbz	r3, 1cf8e <pdn_interface_pdn_id_get+0x3e>
   1cf86:	689b      	ldr	r3, [r3, #8]
   1cf88:	2b03      	cmp	r3, #3
   1cf8a:	f000 80f9 	beq.w	1d180 <pdn_interface_pdn_id_get+0x230>
   1cf8e:	68e3      	ldr	r3, [r4, #12]
   1cf90:	b11b      	cbz	r3, 1cf9a <pdn_interface_pdn_id_get+0x4a>
   1cf92:	689b      	ldr	r3, [r3, #8]
   1cf94:	2b03      	cmp	r3, #3
   1cf96:	f000 80e2 	beq.w	1d15e <pdn_interface_pdn_id_get+0x20e>
   1cf9a:	6923      	ldr	r3, [r4, #16]
   1cf9c:	b11b      	cbz	r3, 1cfa6 <pdn_interface_pdn_id_get+0x56>
   1cf9e:	689b      	ldr	r3, [r3, #8]
   1cfa0:	2b03      	cmp	r3, #3
   1cfa2:	f000 8123 	beq.w	1d1ec <pdn_interface_pdn_id_get+0x29c>
   1cfa6:	6963      	ldr	r3, [r4, #20]
   1cfa8:	b11b      	cbz	r3, 1cfb2 <pdn_interface_pdn_id_get+0x62>
   1cfaa:	689b      	ldr	r3, [r3, #8]
   1cfac:	2b03      	cmp	r3, #3
   1cfae:	f000 8161 	beq.w	1d274 <pdn_interface_pdn_id_get+0x324>
   1cfb2:	69a3      	ldr	r3, [r4, #24]
   1cfb4:	b11b      	cbz	r3, 1cfbe <pdn_interface_pdn_id_get+0x6e>
   1cfb6:	689b      	ldr	r3, [r3, #8]
   1cfb8:	2b03      	cmp	r3, #3
   1cfba:	f000 814a 	beq.w	1d252 <pdn_interface_pdn_id_get+0x302>
   1cfbe:	69e3      	ldr	r3, [r4, #28]
   1cfc0:	b11b      	cbz	r3, 1cfca <pdn_interface_pdn_id_get+0x7a>
   1cfc2:	689b      	ldr	r3, [r3, #8]
   1cfc4:	2b03      	cmp	r3, #3
   1cfc6:	f000 8133 	beq.w	1d230 <pdn_interface_pdn_id_get+0x2e0>
   1cfca:	6a23      	ldr	r3, [r4, #32]
   1cfcc:	b11b      	cbz	r3, 1cfd6 <pdn_interface_pdn_id_get+0x86>
   1cfce:	689b      	ldr	r3, [r3, #8]
   1cfd0:	2b03      	cmp	r3, #3
   1cfd2:	f000 811c 	beq.w	1d20e <pdn_interface_pdn_id_get+0x2be>
   1cfd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cfd8:	b11b      	cbz	r3, 1cfe2 <pdn_interface_pdn_id_get+0x92>
   1cfda:	689b      	ldr	r3, [r3, #8]
   1cfdc:	2b03      	cmp	r3, #3
   1cfde:	f000 80ad 	beq.w	1d13c <pdn_interface_pdn_id_get+0x1ec>
   1cfe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cfe6:	b003      	add	sp, #12
   1cfe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cfec:	b11b      	cbz	r3, 1cff6 <pdn_interface_pdn_id_get+0xa6>
   1cfee:	689b      	ldr	r3, [r3, #8]
   1cff0:	2b03      	cmp	r3, #3
   1cff2:	f000 8335 	beq.w	1d660 <pdn_interface_pdn_id_get+0x710>
   1cff6:	6863      	ldr	r3, [r4, #4]
   1cff8:	b11b      	cbz	r3, 1d002 <pdn_interface_pdn_id_get+0xb2>
   1cffa:	689b      	ldr	r3, [r3, #8]
   1cffc:	2b03      	cmp	r3, #3
   1cffe:	f000 82fd 	beq.w	1d5fc <pdn_interface_pdn_id_get+0x6ac>
   1d002:	68a3      	ldr	r3, [r4, #8]
   1d004:	b11b      	cbz	r3, 1d00e <pdn_interface_pdn_id_get+0xbe>
   1d006:	689b      	ldr	r3, [r3, #8]
   1d008:	2b03      	cmp	r3, #3
   1d00a:	f000 82d5 	beq.w	1d5b8 <pdn_interface_pdn_id_get+0x668>
   1d00e:	68e3      	ldr	r3, [r4, #12]
   1d010:	b11b      	cbz	r3, 1d01a <pdn_interface_pdn_id_get+0xca>
   1d012:	689e      	ldr	r6, [r3, #8]
   1d014:	2e03      	cmp	r6, #3
   1d016:	f000 81f0 	beq.w	1d3fa <pdn_interface_pdn_id_get+0x4aa>
   1d01a:	6923      	ldr	r3, [r4, #16]
   1d01c:	b11b      	cbz	r3, 1d026 <pdn_interface_pdn_id_get+0xd6>
   1d01e:	689b      	ldr	r3, [r3, #8]
   1d020:	2b03      	cmp	r3, #3
   1d022:	f000 8203 	beq.w	1d42c <pdn_interface_pdn_id_get+0x4dc>
   1d026:	6963      	ldr	r3, [r4, #20]
   1d028:	b11b      	cbz	r3, 1d032 <pdn_interface_pdn_id_get+0xe2>
   1d02a:	689b      	ldr	r3, [r3, #8]
   1d02c:	2b03      	cmp	r3, #3
   1d02e:	f000 8215 	beq.w	1d45c <pdn_interface_pdn_id_get+0x50c>
   1d032:	69a3      	ldr	r3, [r4, #24]
   1d034:	b11b      	cbz	r3, 1d03e <pdn_interface_pdn_id_get+0xee>
   1d036:	689b      	ldr	r3, [r3, #8]
   1d038:	2b03      	cmp	r3, #3
   1d03a:	f000 8227 	beq.w	1d48c <pdn_interface_pdn_id_get+0x53c>
   1d03e:	69e3      	ldr	r3, [r4, #28]
   1d040:	b11b      	cbz	r3, 1d04a <pdn_interface_pdn_id_get+0xfa>
   1d042:	689b      	ldr	r3, [r3, #8]
   1d044:	2b03      	cmp	r3, #3
   1d046:	f000 8239 	beq.w	1d4bc <pdn_interface_pdn_id_get+0x56c>
   1d04a:	6a23      	ldr	r3, [r4, #32]
   1d04c:	b11b      	cbz	r3, 1d056 <pdn_interface_pdn_id_get+0x106>
   1d04e:	689b      	ldr	r3, [r3, #8]
   1d050:	2b03      	cmp	r3, #3
   1d052:	f000 824d 	beq.w	1d4f0 <pdn_interface_pdn_id_get+0x5a0>
   1d056:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d058:	2b00      	cmp	r3, #0
   1d05a:	d0c2      	beq.n	1cfe2 <pdn_interface_pdn_id_get+0x92>
   1d05c:	689b      	ldr	r3, [r3, #8]
   1d05e:	2b03      	cmp	r3, #3
   1d060:	d1bf      	bne.n	1cfe2 <pdn_interface_pdn_id_get+0x92>
   1d062:	4628      	mov	r0, r5
   1d064:	f7ef ff68 	bl	cf38 <strlen>
   1d068:	4606      	mov	r6, r0
   1d06a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1d06c:	300c      	adds	r0, #12
   1d06e:	f7ef ff63 	bl	cf38 <strlen>
   1d072:	42b0      	cmp	r0, r6
   1d074:	d1b5      	bne.n	1cfe2 <pdn_interface_pdn_id_get+0x92>
   1d076:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d078:	4628      	mov	r0, r5
   1d07a:	310c      	adds	r1, #12
   1d07c:	f7ef ff52 	bl	cf24 <strcmp>
   1d080:	2800      	cmp	r0, #0
   1d082:	d1ae      	bne.n	1cfe2 <pdn_interface_pdn_id_get+0x92>
   1d084:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d086:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d088:	0792      	lsls	r2, r2, #30
   1d08a:	d5aa      	bpl.n	1cfe2 <pdn_interface_pdn_id_get+0x92>
   1d08c:	2609      	movs	r6, #9
   1d08e:	e11a      	b.n	1d2c6 <pdn_interface_pdn_id_get+0x376>
   1d090:	b11b      	cbz	r3, 1d09a <pdn_interface_pdn_id_get+0x14a>
   1d092:	689b      	ldr	r3, [r3, #8]
   1d094:	2b03      	cmp	r3, #3
   1d096:	f000 82fd 	beq.w	1d694 <pdn_interface_pdn_id_get+0x744>
   1d09a:	6863      	ldr	r3, [r4, #4]
   1d09c:	b11b      	cbz	r3, 1d0a6 <pdn_interface_pdn_id_get+0x156>
   1d09e:	689b      	ldr	r3, [r3, #8]
   1d0a0:	2b03      	cmp	r3, #3
   1d0a2:	f000 82c5 	beq.w	1d630 <pdn_interface_pdn_id_get+0x6e0>
   1d0a6:	68a3      	ldr	r3, [r4, #8]
   1d0a8:	b11b      	cbz	r3, 1d0b2 <pdn_interface_pdn_id_get+0x162>
   1d0aa:	689b      	ldr	r3, [r3, #8]
   1d0ac:	2b03      	cmp	r3, #3
   1d0ae:	f000 8269 	beq.w	1d584 <pdn_interface_pdn_id_get+0x634>
   1d0b2:	68e3      	ldr	r3, [r4, #12]
   1d0b4:	b11b      	cbz	r3, 1d0be <pdn_interface_pdn_id_get+0x16e>
   1d0b6:	689e      	ldr	r6, [r3, #8]
   1d0b8:	2e03      	cmp	r6, #3
   1d0ba:	f000 80ec 	beq.w	1d296 <pdn_interface_pdn_id_get+0x346>
   1d0be:	6923      	ldr	r3, [r4, #16]
   1d0c0:	b11b      	cbz	r3, 1d0ca <pdn_interface_pdn_id_get+0x17a>
   1d0c2:	689b      	ldr	r3, [r3, #8]
   1d0c4:	2b03      	cmp	r3, #3
   1d0c6:	f000 814a 	beq.w	1d35e <pdn_interface_pdn_id_get+0x40e>
   1d0ca:	6963      	ldr	r3, [r4, #20]
   1d0cc:	b11b      	cbz	r3, 1d0d6 <pdn_interface_pdn_id_get+0x186>
   1d0ce:	689b      	ldr	r3, [r3, #8]
   1d0d0:	2b03      	cmp	r3, #3
   1d0d2:	f000 815e 	beq.w	1d392 <pdn_interface_pdn_id_get+0x442>
   1d0d6:	69a3      	ldr	r3, [r4, #24]
   1d0d8:	b11b      	cbz	r3, 1d0e2 <pdn_interface_pdn_id_get+0x192>
   1d0da:	689b      	ldr	r3, [r3, #8]
   1d0dc:	2b03      	cmp	r3, #3
   1d0de:	f000 8172 	beq.w	1d3c6 <pdn_interface_pdn_id_get+0x476>
   1d0e2:	69e3      	ldr	r3, [r4, #28]
   1d0e4:	b11b      	cbz	r3, 1d0ee <pdn_interface_pdn_id_get+0x19e>
   1d0e6:	689b      	ldr	r3, [r3, #8]
   1d0e8:	2b03      	cmp	r3, #3
   1d0ea:	f000 821b 	beq.w	1d524 <pdn_interface_pdn_id_get+0x5d4>
   1d0ee:	6a23      	ldr	r3, [r4, #32]
   1d0f0:	b11b      	cbz	r3, 1d0fa <pdn_interface_pdn_id_get+0x1aa>
   1d0f2:	689b      	ldr	r3, [r3, #8]
   1d0f4:	2b03      	cmp	r3, #3
   1d0f6:	f000 822d 	beq.w	1d554 <pdn_interface_pdn_id_get+0x604>
   1d0fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d0fc:	2b00      	cmp	r3, #0
   1d0fe:	f43f af70 	beq.w	1cfe2 <pdn_interface_pdn_id_get+0x92>
   1d102:	689b      	ldr	r3, [r3, #8]
   1d104:	2b03      	cmp	r3, #3
   1d106:	f47f af6c 	bne.w	1cfe2 <pdn_interface_pdn_id_get+0x92>
   1d10a:	4628      	mov	r0, r5
   1d10c:	f7ef ff14 	bl	cf38 <strlen>
   1d110:	4606      	mov	r6, r0
   1d112:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1d114:	300c      	adds	r0, #12
   1d116:	f7ef ff0f 	bl	cf38 <strlen>
   1d11a:	4286      	cmp	r6, r0
   1d11c:	f47f af61 	bne.w	1cfe2 <pdn_interface_pdn_id_get+0x92>
   1d120:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d122:	4628      	mov	r0, r5
   1d124:	310c      	adds	r1, #12
   1d126:	f7ef fefd 	bl	cf24 <strcmp>
   1d12a:	2800      	cmp	r0, #0
   1d12c:	f47f af59 	bne.w	1cfe2 <pdn_interface_pdn_id_get+0x92>
   1d130:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d132:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d134:	07d2      	lsls	r2, r2, #31
   1d136:	f57f af54 	bpl.w	1cfe2 <pdn_interface_pdn_id_get+0x92>
   1d13a:	e7a7      	b.n	1d08c <pdn_interface_pdn_id_get+0x13c>
   1d13c:	4628      	mov	r0, r5
   1d13e:	f7ef fefb 	bl	cf38 <strlen>
   1d142:	4606      	mov	r6, r0
   1d144:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1d146:	300c      	adds	r0, #12
   1d148:	f7ef fef6 	bl	cf38 <strlen>
   1d14c:	42b0      	cmp	r0, r6
   1d14e:	f47f af48 	bne.w	1cfe2 <pdn_interface_pdn_id_get+0x92>
   1d152:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d154:	4628      	mov	r0, r5
   1d156:	310c      	adds	r1, #12
   1d158:	f7ef fee4 	bl	cf24 <strcmp>
   1d15c:	e741      	b.n	1cfe2 <pdn_interface_pdn_id_get+0x92>
   1d15e:	4628      	mov	r0, r5
   1d160:	f7ef feea 	bl	cf38 <strlen>
   1d164:	4606      	mov	r6, r0
   1d166:	68e0      	ldr	r0, [r4, #12]
   1d168:	300c      	adds	r0, #12
   1d16a:	f7ef fee5 	bl	cf38 <strlen>
   1d16e:	4286      	cmp	r6, r0
   1d170:	f47f af13 	bne.w	1cf9a <pdn_interface_pdn_id_get+0x4a>
   1d174:	68e1      	ldr	r1, [r4, #12]
   1d176:	4628      	mov	r0, r5
   1d178:	310c      	adds	r1, #12
   1d17a:	f7ef fed3 	bl	cf24 <strcmp>
   1d17e:	e70c      	b.n	1cf9a <pdn_interface_pdn_id_get+0x4a>
   1d180:	4628      	mov	r0, r5
   1d182:	f7ef fed9 	bl	cf38 <strlen>
   1d186:	4606      	mov	r6, r0
   1d188:	68a0      	ldr	r0, [r4, #8]
   1d18a:	300c      	adds	r0, #12
   1d18c:	f7ef fed4 	bl	cf38 <strlen>
   1d190:	4286      	cmp	r6, r0
   1d192:	f47f aefc 	bne.w	1cf8e <pdn_interface_pdn_id_get+0x3e>
   1d196:	68a1      	ldr	r1, [r4, #8]
   1d198:	4628      	mov	r0, r5
   1d19a:	310c      	adds	r1, #12
   1d19c:	f7ef fec2 	bl	cf24 <strcmp>
   1d1a0:	e6f5      	b.n	1cf8e <pdn_interface_pdn_id_get+0x3e>
   1d1a2:	4628      	mov	r0, r5
   1d1a4:	f7ef fec8 	bl	cf38 <strlen>
   1d1a8:	4606      	mov	r6, r0
   1d1aa:	6860      	ldr	r0, [r4, #4]
   1d1ac:	300c      	adds	r0, #12
   1d1ae:	f7ef fec3 	bl	cf38 <strlen>
   1d1b2:	4286      	cmp	r6, r0
   1d1b4:	f47f aee5 	bne.w	1cf82 <pdn_interface_pdn_id_get+0x32>
   1d1b8:	6861      	ldr	r1, [r4, #4]
   1d1ba:	4628      	mov	r0, r5
   1d1bc:	310c      	adds	r1, #12
   1d1be:	f7ef feb1 	bl	cf24 <strcmp>
   1d1c2:	e6de      	b.n	1cf82 <pdn_interface_pdn_id_get+0x32>
   1d1c4:	4608      	mov	r0, r1
   1d1c6:	f7ef feb7 	bl	cf38 <strlen>
   1d1ca:	4606      	mov	r6, r0
   1d1cc:	6820      	ldr	r0, [r4, #0]
   1d1ce:	300c      	adds	r0, #12
   1d1d0:	f7ef feb2 	bl	cf38 <strlen>
   1d1d4:	4286      	cmp	r6, r0
   1d1d6:	f47f aece 	bne.w	1cf76 <pdn_interface_pdn_id_get+0x26>
   1d1da:	6821      	ldr	r1, [r4, #0]
   1d1dc:	4628      	mov	r0, r5
   1d1de:	310c      	adds	r1, #12
   1d1e0:	f7ef fea0 	bl	cf24 <strcmp>
   1d1e4:	e6c7      	b.n	1cf76 <pdn_interface_pdn_id_get+0x26>
   1d1e6:	bf00      	nop
   1d1e8:	200234f8 	.word	0x200234f8
   1d1ec:	4628      	mov	r0, r5
   1d1ee:	f7ef fea3 	bl	cf38 <strlen>
   1d1f2:	4606      	mov	r6, r0
   1d1f4:	6920      	ldr	r0, [r4, #16]
   1d1f6:	300c      	adds	r0, #12
   1d1f8:	f7ef fe9e 	bl	cf38 <strlen>
   1d1fc:	4286      	cmp	r6, r0
   1d1fe:	f47f aed2 	bne.w	1cfa6 <pdn_interface_pdn_id_get+0x56>
   1d202:	6921      	ldr	r1, [r4, #16]
   1d204:	4628      	mov	r0, r5
   1d206:	310c      	adds	r1, #12
   1d208:	f7ef fe8c 	bl	cf24 <strcmp>
   1d20c:	e6cb      	b.n	1cfa6 <pdn_interface_pdn_id_get+0x56>
   1d20e:	4628      	mov	r0, r5
   1d210:	f7ef fe92 	bl	cf38 <strlen>
   1d214:	4606      	mov	r6, r0
   1d216:	6a20      	ldr	r0, [r4, #32]
   1d218:	300c      	adds	r0, #12
   1d21a:	f7ef fe8d 	bl	cf38 <strlen>
   1d21e:	4286      	cmp	r6, r0
   1d220:	f47f aed9 	bne.w	1cfd6 <pdn_interface_pdn_id_get+0x86>
   1d224:	6a21      	ldr	r1, [r4, #32]
   1d226:	4628      	mov	r0, r5
   1d228:	310c      	adds	r1, #12
   1d22a:	f7ef fe7b 	bl	cf24 <strcmp>
   1d22e:	e6d2      	b.n	1cfd6 <pdn_interface_pdn_id_get+0x86>
   1d230:	4628      	mov	r0, r5
   1d232:	f7ef fe81 	bl	cf38 <strlen>
   1d236:	4606      	mov	r6, r0
   1d238:	69e0      	ldr	r0, [r4, #28]
   1d23a:	300c      	adds	r0, #12
   1d23c:	f7ef fe7c 	bl	cf38 <strlen>
   1d240:	4286      	cmp	r6, r0
   1d242:	f47f aec2 	bne.w	1cfca <pdn_interface_pdn_id_get+0x7a>
   1d246:	69e1      	ldr	r1, [r4, #28]
   1d248:	4628      	mov	r0, r5
   1d24a:	310c      	adds	r1, #12
   1d24c:	f7ef fe6a 	bl	cf24 <strcmp>
   1d250:	e6bb      	b.n	1cfca <pdn_interface_pdn_id_get+0x7a>
   1d252:	4628      	mov	r0, r5
   1d254:	f7ef fe70 	bl	cf38 <strlen>
   1d258:	4606      	mov	r6, r0
   1d25a:	69a0      	ldr	r0, [r4, #24]
   1d25c:	300c      	adds	r0, #12
   1d25e:	f7ef fe6b 	bl	cf38 <strlen>
   1d262:	4286      	cmp	r6, r0
   1d264:	f47f aeab 	bne.w	1cfbe <pdn_interface_pdn_id_get+0x6e>
   1d268:	69a1      	ldr	r1, [r4, #24]
   1d26a:	4628      	mov	r0, r5
   1d26c:	310c      	adds	r1, #12
   1d26e:	f7ef fe59 	bl	cf24 <strcmp>
   1d272:	e6a4      	b.n	1cfbe <pdn_interface_pdn_id_get+0x6e>
   1d274:	4628      	mov	r0, r5
   1d276:	f7ef fe5f 	bl	cf38 <strlen>
   1d27a:	4606      	mov	r6, r0
   1d27c:	6960      	ldr	r0, [r4, #20]
   1d27e:	300c      	adds	r0, #12
   1d280:	f7ef fe5a 	bl	cf38 <strlen>
   1d284:	4286      	cmp	r6, r0
   1d286:	f47f ae94 	bne.w	1cfb2 <pdn_interface_pdn_id_get+0x62>
   1d28a:	6961      	ldr	r1, [r4, #20]
   1d28c:	4628      	mov	r0, r5
   1d28e:	310c      	adds	r1, #12
   1d290:	f7ef fe48 	bl	cf24 <strcmp>
   1d294:	e68d      	b.n	1cfb2 <pdn_interface_pdn_id_get+0x62>
   1d296:	4628      	mov	r0, r5
   1d298:	f7ef fe4e 	bl	cf38 <strlen>
   1d29c:	4607      	mov	r7, r0
   1d29e:	68e0      	ldr	r0, [r4, #12]
   1d2a0:	300c      	adds	r0, #12
   1d2a2:	f7ef fe49 	bl	cf38 <strlen>
   1d2a6:	4287      	cmp	r7, r0
   1d2a8:	f47f af09 	bne.w	1d0be <pdn_interface_pdn_id_get+0x16e>
   1d2ac:	68e1      	ldr	r1, [r4, #12]
   1d2ae:	4628      	mov	r0, r5
   1d2b0:	310c      	adds	r1, #12
   1d2b2:	f7ef fe37 	bl	cf24 <strcmp>
   1d2b6:	2800      	cmp	r0, #0
   1d2b8:	f47f af01 	bne.w	1d0be <pdn_interface_pdn_id_get+0x16e>
   1d2bc:	68e3      	ldr	r3, [r4, #12]
   1d2be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d2c0:	07d1      	lsls	r1, r2, #31
   1d2c2:	f57f aefc 	bpl.w	1d0be <pdn_interface_pdn_id_get+0x16e>
   1d2c6:	6858      	ldr	r0, [r3, #4]
   1d2c8:	1c43      	adds	r3, r0, #1
   1d2ca:	f47f ae8c 	bne.w	1cfe6 <pdn_interface_pdn_id_get+0x96>
   1d2ce:	4dc6      	ldr	r5, [pc, #792]	; (1d5e8 <pdn_interface_pdn_id_get+0x698>)
   1d2d0:	4ac6      	ldr	r2, [pc, #792]	; (1d5ec <pdn_interface_pdn_id_get+0x69c>)
   1d2d2:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d2d6:	4628      	mov	r0, r5
   1d2d8:	f004 fd5a 	bl	21d90 <sniprintf>
   1d2dc:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1d2e0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1d2e4:	681b      	ldr	r3, [r3, #0]
   1d2e6:	4ac2      	ldr	r2, [pc, #776]	; (1d5f0 <pdn_interface_pdn_id_get+0x6a0>)
   1d2e8:	4428      	add	r0, r5
   1d2ea:	f8df 830c 	ldr.w	r8, [pc, #780]	; 1d5f8 <pdn_interface_pdn_id_get+0x6a8>
   1d2ee:	f004 fd4f 	bl	21d90 <sniprintf>
   1d2f2:	4628      	mov	r0, r5
   1d2f4:	f8d8 9000 	ldr.w	r9, [r8]
   1d2f8:	2700      	movs	r7, #0
   1d2fa:	f7ef fe1d 	bl	cf38 <strlen>
   1d2fe:	4629      	mov	r1, r5
   1d300:	4602      	mov	r2, r0
   1d302:	463b      	mov	r3, r7
   1d304:	4648      	mov	r0, r9
   1d306:	9701      	str	r7, [sp, #4]
   1d308:	9700      	str	r7, [sp, #0]
   1d30a:	f7fe ff27 	bl	1c15c <at_interface_write>
   1d30e:	4681      	mov	r9, r0
   1d310:	4628      	mov	r0, r5
   1d312:	f7ef fe11 	bl	cf38 <strlen>
   1d316:	4548      	cmp	r0, r9
   1d318:	f040 81e9 	bne.w	1d6ee <pdn_interface_pdn_id_get+0x79e>
   1d31c:	463b      	mov	r3, r7
   1d31e:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d322:	e9cd 7700 	strd	r7, r7, [sp]
   1d326:	4629      	mov	r1, r5
   1d328:	f8d8 0000 	ldr.w	r0, [r8]
   1d32c:	f7ff f84c 	bl	1c3c8 <at_interface_read>
   1d330:	4607      	mov	r7, r0
   1d332:	48b0      	ldr	r0, [pc, #704]	; (1d5f4 <pdn_interface_pdn_id_get+0x6a4>)
   1d334:	f7ef fe00 	bl	cf38 <strlen>
   1d338:	4287      	cmp	r7, r0
   1d33a:	4602      	mov	r2, r0
   1d33c:	f2c0 81c7 	blt.w	1d6ce <pdn_interface_pdn_id_get+0x77e>
   1d340:	4629      	mov	r1, r5
   1d342:	48ac      	ldr	r0, [pc, #688]	; (1d5f4 <pdn_interface_pdn_id_get+0x6a4>)
   1d344:	f00c fa99 	bl	2987a <strncmp>
   1d348:	2800      	cmp	r0, #0
   1d34a:	f040 81c0 	bne.w	1d6ce <pdn_interface_pdn_id_get+0x77e>
   1d34e:	4629      	mov	r1, r5
   1d350:	4630      	mov	r0, r6
   1d352:	f7ff f91d 	bl	1c590 <pdn_id_get_parser>
   1d356:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1d35a:	6858      	ldr	r0, [r3, #4]
   1d35c:	e643      	b.n	1cfe6 <pdn_interface_pdn_id_get+0x96>
   1d35e:	4628      	mov	r0, r5
   1d360:	f7ef fdea 	bl	cf38 <strlen>
   1d364:	4606      	mov	r6, r0
   1d366:	6920      	ldr	r0, [r4, #16]
   1d368:	300c      	adds	r0, #12
   1d36a:	f7ef fde5 	bl	cf38 <strlen>
   1d36e:	4286      	cmp	r6, r0
   1d370:	f47f aeab 	bne.w	1d0ca <pdn_interface_pdn_id_get+0x17a>
   1d374:	6921      	ldr	r1, [r4, #16]
   1d376:	4628      	mov	r0, r5
   1d378:	310c      	adds	r1, #12
   1d37a:	f7ef fdd3 	bl	cf24 <strcmp>
   1d37e:	2800      	cmp	r0, #0
   1d380:	f47f aea3 	bne.w	1d0ca <pdn_interface_pdn_id_get+0x17a>
   1d384:	6923      	ldr	r3, [r4, #16]
   1d386:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d388:	07d2      	lsls	r2, r2, #31
   1d38a:	f57f ae9e 	bpl.w	1d0ca <pdn_interface_pdn_id_get+0x17a>
   1d38e:	2604      	movs	r6, #4
   1d390:	e799      	b.n	1d2c6 <pdn_interface_pdn_id_get+0x376>
   1d392:	4628      	mov	r0, r5
   1d394:	f7ef fdd0 	bl	cf38 <strlen>
   1d398:	4606      	mov	r6, r0
   1d39a:	6960      	ldr	r0, [r4, #20]
   1d39c:	300c      	adds	r0, #12
   1d39e:	f7ef fdcb 	bl	cf38 <strlen>
   1d3a2:	4286      	cmp	r6, r0
   1d3a4:	f47f ae97 	bne.w	1d0d6 <pdn_interface_pdn_id_get+0x186>
   1d3a8:	6961      	ldr	r1, [r4, #20]
   1d3aa:	4628      	mov	r0, r5
   1d3ac:	310c      	adds	r1, #12
   1d3ae:	f7ef fdb9 	bl	cf24 <strcmp>
   1d3b2:	2800      	cmp	r0, #0
   1d3b4:	f47f ae8f 	bne.w	1d0d6 <pdn_interface_pdn_id_get+0x186>
   1d3b8:	6963      	ldr	r3, [r4, #20]
   1d3ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d3bc:	07d7      	lsls	r7, r2, #31
   1d3be:	f57f ae8a 	bpl.w	1d0d6 <pdn_interface_pdn_id_get+0x186>
   1d3c2:	2605      	movs	r6, #5
   1d3c4:	e77f      	b.n	1d2c6 <pdn_interface_pdn_id_get+0x376>
   1d3c6:	4628      	mov	r0, r5
   1d3c8:	f7ef fdb6 	bl	cf38 <strlen>
   1d3cc:	4606      	mov	r6, r0
   1d3ce:	69a0      	ldr	r0, [r4, #24]
   1d3d0:	300c      	adds	r0, #12
   1d3d2:	f7ef fdb1 	bl	cf38 <strlen>
   1d3d6:	4286      	cmp	r6, r0
   1d3d8:	f47f ae83 	bne.w	1d0e2 <pdn_interface_pdn_id_get+0x192>
   1d3dc:	69a1      	ldr	r1, [r4, #24]
   1d3de:	4628      	mov	r0, r5
   1d3e0:	310c      	adds	r1, #12
   1d3e2:	f7ef fd9f 	bl	cf24 <strcmp>
   1d3e6:	2800      	cmp	r0, #0
   1d3e8:	f47f ae7b 	bne.w	1d0e2 <pdn_interface_pdn_id_get+0x192>
   1d3ec:	69a3      	ldr	r3, [r4, #24]
   1d3ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d3f0:	07d6      	lsls	r6, r2, #31
   1d3f2:	f57f ae76 	bpl.w	1d0e2 <pdn_interface_pdn_id_get+0x192>
   1d3f6:	2606      	movs	r6, #6
   1d3f8:	e765      	b.n	1d2c6 <pdn_interface_pdn_id_get+0x376>
   1d3fa:	4628      	mov	r0, r5
   1d3fc:	f7ef fd9c 	bl	cf38 <strlen>
   1d400:	4607      	mov	r7, r0
   1d402:	68e0      	ldr	r0, [r4, #12]
   1d404:	300c      	adds	r0, #12
   1d406:	f7ef fd97 	bl	cf38 <strlen>
   1d40a:	4287      	cmp	r7, r0
   1d40c:	f47f ae05 	bne.w	1d01a <pdn_interface_pdn_id_get+0xca>
   1d410:	68e1      	ldr	r1, [r4, #12]
   1d412:	4628      	mov	r0, r5
   1d414:	310c      	adds	r1, #12
   1d416:	f7ef fd85 	bl	cf24 <strcmp>
   1d41a:	2800      	cmp	r0, #0
   1d41c:	f47f adfd 	bne.w	1d01a <pdn_interface_pdn_id_get+0xca>
   1d420:	68e3      	ldr	r3, [r4, #12]
   1d422:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d424:	0791      	lsls	r1, r2, #30
   1d426:	f53f af4e 	bmi.w	1d2c6 <pdn_interface_pdn_id_get+0x376>
   1d42a:	e5f6      	b.n	1d01a <pdn_interface_pdn_id_get+0xca>
   1d42c:	4628      	mov	r0, r5
   1d42e:	f7ef fd83 	bl	cf38 <strlen>
   1d432:	4606      	mov	r6, r0
   1d434:	6920      	ldr	r0, [r4, #16]
   1d436:	300c      	adds	r0, #12
   1d438:	f7ef fd7e 	bl	cf38 <strlen>
   1d43c:	4286      	cmp	r6, r0
   1d43e:	f47f adf2 	bne.w	1d026 <pdn_interface_pdn_id_get+0xd6>
   1d442:	6921      	ldr	r1, [r4, #16]
   1d444:	4628      	mov	r0, r5
   1d446:	310c      	adds	r1, #12
   1d448:	f7ef fd6c 	bl	cf24 <strcmp>
   1d44c:	2800      	cmp	r0, #0
   1d44e:	f47f adea 	bne.w	1d026 <pdn_interface_pdn_id_get+0xd6>
   1d452:	6923      	ldr	r3, [r4, #16]
   1d454:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d456:	0792      	lsls	r2, r2, #30
   1d458:	d499      	bmi.n	1d38e <pdn_interface_pdn_id_get+0x43e>
   1d45a:	e5e4      	b.n	1d026 <pdn_interface_pdn_id_get+0xd6>
   1d45c:	4628      	mov	r0, r5
   1d45e:	f7ef fd6b 	bl	cf38 <strlen>
   1d462:	4606      	mov	r6, r0
   1d464:	6960      	ldr	r0, [r4, #20]
   1d466:	300c      	adds	r0, #12
   1d468:	f7ef fd66 	bl	cf38 <strlen>
   1d46c:	4286      	cmp	r6, r0
   1d46e:	f47f ade0 	bne.w	1d032 <pdn_interface_pdn_id_get+0xe2>
   1d472:	6961      	ldr	r1, [r4, #20]
   1d474:	4628      	mov	r0, r5
   1d476:	310c      	adds	r1, #12
   1d478:	f7ef fd54 	bl	cf24 <strcmp>
   1d47c:	2800      	cmp	r0, #0
   1d47e:	f47f add8 	bne.w	1d032 <pdn_interface_pdn_id_get+0xe2>
   1d482:	6963      	ldr	r3, [r4, #20]
   1d484:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d486:	0797      	lsls	r7, r2, #30
   1d488:	d49b      	bmi.n	1d3c2 <pdn_interface_pdn_id_get+0x472>
   1d48a:	e5d2      	b.n	1d032 <pdn_interface_pdn_id_get+0xe2>
   1d48c:	4628      	mov	r0, r5
   1d48e:	f7ef fd53 	bl	cf38 <strlen>
   1d492:	4606      	mov	r6, r0
   1d494:	69a0      	ldr	r0, [r4, #24]
   1d496:	300c      	adds	r0, #12
   1d498:	f7ef fd4e 	bl	cf38 <strlen>
   1d49c:	4286      	cmp	r6, r0
   1d49e:	f47f adce 	bne.w	1d03e <pdn_interface_pdn_id_get+0xee>
   1d4a2:	69a1      	ldr	r1, [r4, #24]
   1d4a4:	4628      	mov	r0, r5
   1d4a6:	310c      	adds	r1, #12
   1d4a8:	f7ef fd3c 	bl	cf24 <strcmp>
   1d4ac:	2800      	cmp	r0, #0
   1d4ae:	f47f adc6 	bne.w	1d03e <pdn_interface_pdn_id_get+0xee>
   1d4b2:	69a3      	ldr	r3, [r4, #24]
   1d4b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d4b6:	0796      	lsls	r6, r2, #30
   1d4b8:	d49d      	bmi.n	1d3f6 <pdn_interface_pdn_id_get+0x4a6>
   1d4ba:	e5c0      	b.n	1d03e <pdn_interface_pdn_id_get+0xee>
   1d4bc:	4628      	mov	r0, r5
   1d4be:	f7ef fd3b 	bl	cf38 <strlen>
   1d4c2:	4606      	mov	r6, r0
   1d4c4:	69e0      	ldr	r0, [r4, #28]
   1d4c6:	300c      	adds	r0, #12
   1d4c8:	f7ef fd36 	bl	cf38 <strlen>
   1d4cc:	4286      	cmp	r6, r0
   1d4ce:	f47f adbc 	bne.w	1d04a <pdn_interface_pdn_id_get+0xfa>
   1d4d2:	69e1      	ldr	r1, [r4, #28]
   1d4d4:	4628      	mov	r0, r5
   1d4d6:	310c      	adds	r1, #12
   1d4d8:	f7ef fd24 	bl	cf24 <strcmp>
   1d4dc:	2800      	cmp	r0, #0
   1d4de:	f47f adb4 	bne.w	1d04a <pdn_interface_pdn_id_get+0xfa>
   1d4e2:	69e3      	ldr	r3, [r4, #28]
   1d4e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d4e6:	0790      	lsls	r0, r2, #30
   1d4e8:	f57f adaf 	bpl.w	1d04a <pdn_interface_pdn_id_get+0xfa>
   1d4ec:	2607      	movs	r6, #7
   1d4ee:	e6ea      	b.n	1d2c6 <pdn_interface_pdn_id_get+0x376>
   1d4f0:	4628      	mov	r0, r5
   1d4f2:	f7ef fd21 	bl	cf38 <strlen>
   1d4f6:	4606      	mov	r6, r0
   1d4f8:	6a20      	ldr	r0, [r4, #32]
   1d4fa:	300c      	adds	r0, #12
   1d4fc:	f7ef fd1c 	bl	cf38 <strlen>
   1d500:	4286      	cmp	r6, r0
   1d502:	f47f ada8 	bne.w	1d056 <pdn_interface_pdn_id_get+0x106>
   1d506:	6a21      	ldr	r1, [r4, #32]
   1d508:	4628      	mov	r0, r5
   1d50a:	310c      	adds	r1, #12
   1d50c:	f7ef fd0a 	bl	cf24 <strcmp>
   1d510:	2800      	cmp	r0, #0
   1d512:	f47f ada0 	bne.w	1d056 <pdn_interface_pdn_id_get+0x106>
   1d516:	6a23      	ldr	r3, [r4, #32]
   1d518:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d51a:	0791      	lsls	r1, r2, #30
   1d51c:	f57f ad9b 	bpl.w	1d056 <pdn_interface_pdn_id_get+0x106>
   1d520:	2608      	movs	r6, #8
   1d522:	e6d0      	b.n	1d2c6 <pdn_interface_pdn_id_get+0x376>
   1d524:	4628      	mov	r0, r5
   1d526:	f7ef fd07 	bl	cf38 <strlen>
   1d52a:	4606      	mov	r6, r0
   1d52c:	69e0      	ldr	r0, [r4, #28]
   1d52e:	300c      	adds	r0, #12
   1d530:	f7ef fd02 	bl	cf38 <strlen>
   1d534:	4286      	cmp	r6, r0
   1d536:	f47f adda 	bne.w	1d0ee <pdn_interface_pdn_id_get+0x19e>
   1d53a:	69e1      	ldr	r1, [r4, #28]
   1d53c:	4628      	mov	r0, r5
   1d53e:	310c      	adds	r1, #12
   1d540:	f7ef fcf0 	bl	cf24 <strcmp>
   1d544:	2800      	cmp	r0, #0
   1d546:	f47f add2 	bne.w	1d0ee <pdn_interface_pdn_id_get+0x19e>
   1d54a:	69e3      	ldr	r3, [r4, #28]
   1d54c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d54e:	07d0      	lsls	r0, r2, #31
   1d550:	d4cc      	bmi.n	1d4ec <pdn_interface_pdn_id_get+0x59c>
   1d552:	e5cc      	b.n	1d0ee <pdn_interface_pdn_id_get+0x19e>
   1d554:	4628      	mov	r0, r5
   1d556:	f7ef fcef 	bl	cf38 <strlen>
   1d55a:	4606      	mov	r6, r0
   1d55c:	6a20      	ldr	r0, [r4, #32]
   1d55e:	300c      	adds	r0, #12
   1d560:	f7ef fcea 	bl	cf38 <strlen>
   1d564:	4286      	cmp	r6, r0
   1d566:	f47f adc8 	bne.w	1d0fa <pdn_interface_pdn_id_get+0x1aa>
   1d56a:	6a21      	ldr	r1, [r4, #32]
   1d56c:	4628      	mov	r0, r5
   1d56e:	310c      	adds	r1, #12
   1d570:	f7ef fcd8 	bl	cf24 <strcmp>
   1d574:	2800      	cmp	r0, #0
   1d576:	f47f adc0 	bne.w	1d0fa <pdn_interface_pdn_id_get+0x1aa>
   1d57a:	6a23      	ldr	r3, [r4, #32]
   1d57c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d57e:	07d1      	lsls	r1, r2, #31
   1d580:	d4ce      	bmi.n	1d520 <pdn_interface_pdn_id_get+0x5d0>
   1d582:	e5ba      	b.n	1d0fa <pdn_interface_pdn_id_get+0x1aa>
   1d584:	4628      	mov	r0, r5
   1d586:	f7ef fcd7 	bl	cf38 <strlen>
   1d58a:	4606      	mov	r6, r0
   1d58c:	68a0      	ldr	r0, [r4, #8]
   1d58e:	300c      	adds	r0, #12
   1d590:	f7ef fcd2 	bl	cf38 <strlen>
   1d594:	4286      	cmp	r6, r0
   1d596:	f47f ad8c 	bne.w	1d0b2 <pdn_interface_pdn_id_get+0x162>
   1d59a:	68a1      	ldr	r1, [r4, #8]
   1d59c:	4628      	mov	r0, r5
   1d59e:	310c      	adds	r1, #12
   1d5a0:	f7ef fcc0 	bl	cf24 <strcmp>
   1d5a4:	2800      	cmp	r0, #0
   1d5a6:	f47f ad84 	bne.w	1d0b2 <pdn_interface_pdn_id_get+0x162>
   1d5aa:	68a3      	ldr	r3, [r4, #8]
   1d5ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d5ae:	07d0      	lsls	r0, r2, #31
   1d5b0:	f57f ad7f 	bpl.w	1d0b2 <pdn_interface_pdn_id_get+0x162>
   1d5b4:	2602      	movs	r6, #2
   1d5b6:	e686      	b.n	1d2c6 <pdn_interface_pdn_id_get+0x376>
   1d5b8:	4628      	mov	r0, r5
   1d5ba:	f7ef fcbd 	bl	cf38 <strlen>
   1d5be:	4606      	mov	r6, r0
   1d5c0:	68a0      	ldr	r0, [r4, #8]
   1d5c2:	300c      	adds	r0, #12
   1d5c4:	f7ef fcb8 	bl	cf38 <strlen>
   1d5c8:	4286      	cmp	r6, r0
   1d5ca:	f47f ad20 	bne.w	1d00e <pdn_interface_pdn_id_get+0xbe>
   1d5ce:	68a1      	ldr	r1, [r4, #8]
   1d5d0:	4628      	mov	r0, r5
   1d5d2:	310c      	adds	r1, #12
   1d5d4:	f7ef fca6 	bl	cf24 <strcmp>
   1d5d8:	2800      	cmp	r0, #0
   1d5da:	f47f ad18 	bne.w	1d00e <pdn_interface_pdn_id_get+0xbe>
   1d5de:	68a3      	ldr	r3, [r4, #8]
   1d5e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d5e2:	0790      	lsls	r0, r2, #30
   1d5e4:	d4e6      	bmi.n	1d5b4 <pdn_interface_pdn_id_get+0x664>
   1d5e6:	e512      	b.n	1d00e <pdn_interface_pdn_id_get+0xbe>
   1d5e8:	200233f8 	.word	0x200233f8
   1d5ec:	0002a9d4 	.word	0x0002a9d4
   1d5f0:	0002a9d0 	.word	0x0002a9d0
   1d5f4:	0002a9e4 	.word	0x0002a9e4
   1d5f8:	200233f4 	.word	0x200233f4
   1d5fc:	4628      	mov	r0, r5
   1d5fe:	f7ef fc9b 	bl	cf38 <strlen>
   1d602:	4606      	mov	r6, r0
   1d604:	6860      	ldr	r0, [r4, #4]
   1d606:	300c      	adds	r0, #12
   1d608:	f7ef fc96 	bl	cf38 <strlen>
   1d60c:	4286      	cmp	r6, r0
   1d60e:	f47f acf8 	bne.w	1d002 <pdn_interface_pdn_id_get+0xb2>
   1d612:	6861      	ldr	r1, [r4, #4]
   1d614:	4628      	mov	r0, r5
   1d616:	310c      	adds	r1, #12
   1d618:	f7ef fc84 	bl	cf24 <strcmp>
   1d61c:	2800      	cmp	r0, #0
   1d61e:	f47f acf0 	bne.w	1d002 <pdn_interface_pdn_id_get+0xb2>
   1d622:	6863      	ldr	r3, [r4, #4]
   1d624:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d626:	0796      	lsls	r6, r2, #30
   1d628:	f57f aceb 	bpl.w	1d002 <pdn_interface_pdn_id_get+0xb2>
   1d62c:	2601      	movs	r6, #1
   1d62e:	e64a      	b.n	1d2c6 <pdn_interface_pdn_id_get+0x376>
   1d630:	4628      	mov	r0, r5
   1d632:	f7ef fc81 	bl	cf38 <strlen>
   1d636:	4606      	mov	r6, r0
   1d638:	6860      	ldr	r0, [r4, #4]
   1d63a:	300c      	adds	r0, #12
   1d63c:	f7ef fc7c 	bl	cf38 <strlen>
   1d640:	4286      	cmp	r6, r0
   1d642:	f47f ad30 	bne.w	1d0a6 <pdn_interface_pdn_id_get+0x156>
   1d646:	6861      	ldr	r1, [r4, #4]
   1d648:	4628      	mov	r0, r5
   1d64a:	310c      	adds	r1, #12
   1d64c:	f7ef fc6a 	bl	cf24 <strcmp>
   1d650:	2800      	cmp	r0, #0
   1d652:	f47f ad28 	bne.w	1d0a6 <pdn_interface_pdn_id_get+0x156>
   1d656:	6863      	ldr	r3, [r4, #4]
   1d658:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d65a:	07d6      	lsls	r6, r2, #31
   1d65c:	d4e6      	bmi.n	1d62c <pdn_interface_pdn_id_get+0x6dc>
   1d65e:	e522      	b.n	1d0a6 <pdn_interface_pdn_id_get+0x156>
   1d660:	4608      	mov	r0, r1
   1d662:	f7ef fc69 	bl	cf38 <strlen>
   1d666:	4606      	mov	r6, r0
   1d668:	6820      	ldr	r0, [r4, #0]
   1d66a:	300c      	adds	r0, #12
   1d66c:	f7ef fc64 	bl	cf38 <strlen>
   1d670:	4286      	cmp	r6, r0
   1d672:	f47f acc0 	bne.w	1cff6 <pdn_interface_pdn_id_get+0xa6>
   1d676:	6821      	ldr	r1, [r4, #0]
   1d678:	4628      	mov	r0, r5
   1d67a:	310c      	adds	r1, #12
   1d67c:	f7ef fc52 	bl	cf24 <strcmp>
   1d680:	4606      	mov	r6, r0
   1d682:	2800      	cmp	r0, #0
   1d684:	f47f acb7 	bne.w	1cff6 <pdn_interface_pdn_id_get+0xa6>
   1d688:	6823      	ldr	r3, [r4, #0]
   1d68a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d68c:	0797      	lsls	r7, r2, #30
   1d68e:	f53f ae1a 	bmi.w	1d2c6 <pdn_interface_pdn_id_get+0x376>
   1d692:	e4b0      	b.n	1cff6 <pdn_interface_pdn_id_get+0xa6>
   1d694:	4608      	mov	r0, r1
   1d696:	f7ef fc4f 	bl	cf38 <strlen>
   1d69a:	4606      	mov	r6, r0
   1d69c:	6820      	ldr	r0, [r4, #0]
   1d69e:	300c      	adds	r0, #12
   1d6a0:	f7ef fc4a 	bl	cf38 <strlen>
   1d6a4:	4286      	cmp	r6, r0
   1d6a6:	f47f acf8 	bne.w	1d09a <pdn_interface_pdn_id_get+0x14a>
   1d6aa:	6821      	ldr	r1, [r4, #0]
   1d6ac:	4628      	mov	r0, r5
   1d6ae:	310c      	adds	r1, #12
   1d6b0:	f7ef fc38 	bl	cf24 <strcmp>
   1d6b4:	4606      	mov	r6, r0
   1d6b6:	2800      	cmp	r0, #0
   1d6b8:	f47f acef 	bne.w	1d09a <pdn_interface_pdn_id_get+0x14a>
   1d6bc:	6823      	ldr	r3, [r4, #0]
   1d6be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1d6c0:	07d7      	lsls	r7, r2, #31
   1d6c2:	f53f ae00 	bmi.w	1d2c6 <pdn_interface_pdn_id_get+0x376>
   1d6c6:	e4e8      	b.n	1d09a <pdn_interface_pdn_id_get+0x14a>
   1d6c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d6cc:	4770      	bx	lr
   1d6ce:	480b      	ldr	r0, [pc, #44]	; (1d6fc <pdn_interface_pdn_id_get+0x7ac>)
   1d6d0:	f7ef fc32 	bl	cf38 <strlen>
   1d6d4:	490a      	ldr	r1, [pc, #40]	; (1d700 <pdn_interface_pdn_id_get+0x7b0>)
   1d6d6:	4602      	mov	r2, r0
   1d6d8:	4808      	ldr	r0, [pc, #32]	; (1d6fc <pdn_interface_pdn_id_get+0x7ac>)
   1d6da:	f00c f8ce 	bl	2987a <strncmp>
   1d6de:	b930      	cbnz	r0, 1d6ee <pdn_interface_pdn_id_get+0x79e>
   1d6e0:	2008      	movs	r0, #8
   1d6e2:	f7f7 fbef 	bl	14ec4 <bsd_os_errno_set>
   1d6e6:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1d6ea:	6858      	ldr	r0, [r3, #4]
   1d6ec:	e47b      	b.n	1cfe6 <pdn_interface_pdn_id_get+0x96>
   1d6ee:	2005      	movs	r0, #5
   1d6f0:	f7f7 fbe8 	bl	14ec4 <bsd_os_errno_set>
   1d6f4:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1d6f8:	6858      	ldr	r0, [r3, #4]
   1d6fa:	e474      	b.n	1cfe6 <pdn_interface_pdn_id_get+0x96>
   1d6fc:	0002aa28 	.word	0x0002aa28
   1d700:	200233f8 	.word	0x200233f8

0001d704 <bsd_platform_error_handler>:
   1d704:	b508      	push	{r3, lr}
   1d706:	f006 f9b9 	bl	23a7c <bsd_recoverable_error_handler>
   1d70a:	bd08      	pop	{r3, pc}

0001d70c <bsd_init>:
   1d70c:	b160      	cbz	r0, 1d728 <bsd_init+0x1c>
   1d70e:	b510      	push	{r4, lr}
   1d710:	4c07      	ldr	r4, [pc, #28]	; (1d730 <bsd_init+0x24>)
   1d712:	7823      	ldrb	r3, [r4, #0]
   1d714:	b92b      	cbnz	r3, 1d722 <bsd_init+0x16>
   1d716:	f000 f829 	bl	1d76c <bsd_platform_init>
   1d71a:	b908      	cbnz	r0, 1d720 <bsd_init+0x14>
   1d71c:	2301      	movs	r3, #1
   1d71e:	7023      	strb	r3, [r4, #0]
   1d720:	bd10      	pop	{r4, pc}
   1d722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d726:	bd10      	pop	{r4, pc}
   1d728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d72c:	4770      	bx	lr
   1d72e:	bf00      	nop
   1d730:	2002af76 	.word	0x2002af76

0001d734 <bsd_shutdown>:
   1d734:	b510      	push	{r4, lr}
   1d736:	4c05      	ldr	r4, [pc, #20]	; (1d74c <bsd_shutdown+0x18>)
   1d738:	7823      	ldrb	r3, [r4, #0]
   1d73a:	b123      	cbz	r3, 1d746 <bsd_shutdown+0x12>
   1d73c:	f000 f89a 	bl	1d874 <bsd_platform_shutdown>
   1d740:	b900      	cbnz	r0, 1d744 <bsd_shutdown+0x10>
   1d742:	7020      	strb	r0, [r4, #0]
   1d744:	bd10      	pop	{r4, pc}
   1d746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d74a:	bd10      	pop	{r4, pc}
   1d74c:	2002af76 	.word	0x2002af76

0001d750 <unimplemented_method>:
   1d750:	b40f      	push	{r0, r1, r2, r3}
   1d752:	b508      	push	{r3, lr}
   1d754:	202d      	movs	r0, #45	; 0x2d
   1d756:	f7f7 fbb5 	bl	14ec4 <bsd_os_errno_set>
   1d75a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d75e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d762:	b004      	add	sp, #16
   1d764:	4770      	bx	lr
   1d766:	bf00      	nop

0001d768 <rpc_transport_ipc_fault_handler>:
   1d768:	f7ff bfcc 	b.w	1d704 <bsd_platform_error_handler>

0001d76c <bsd_platform_init>:
   1d76c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d76e:	f04f 0c00 	mov.w	ip, #0
   1d772:	f247 0660 	movw	r6, #28768	; 0x7060
   1d776:	f24b 0260 	movw	r2, #45152	; 0xb060
   1d77a:	6843      	ldr	r3, [r0, #4]
   1d77c:	4d3a      	ldr	r5, [pc, #232]	; (1d868 <bsd_platform_init+0xfc>)
   1d77e:	4607      	mov	r7, r0
   1d780:	602b      	str	r3, [r5, #0]
   1d782:	7801      	ldrb	r1, [r0, #0]
   1d784:	2006      	movs	r0, #6
   1d786:	4561      	cmp	r1, ip
   1d788:	bf08      	it	eq
   1d78a:	4632      	moveq	r2, r6
   1d78c:	4413      	add	r3, r2
   1d78e:	4c37      	ldr	r4, [pc, #220]	; (1d86c <bsd_platform_init+0x100>)
   1d790:	60ab      	str	r3, [r5, #8]
   1d792:	68b9      	ldr	r1, [r7, #8]
   1d794:	6063      	str	r3, [r4, #4]
   1d796:	4b36      	ldr	r3, [pc, #216]	; (1d870 <bsd_platform_init+0x104>)
   1d798:	b093      	sub	sp, #76	; 0x4c
   1d79a:	606a      	str	r2, [r5, #4]
   1d79c:	f8a4 c000 	strh.w	ip, [r4]
   1d7a0:	1a8a      	subs	r2, r1, r2
   1d7a2:	60ea      	str	r2, [r5, #12]
   1d7a4:	60a2      	str	r2, [r4, #8]
   1d7a6:	81a0      	strh	r0, [r4, #12]
   1d7a8:	6123      	str	r3, [r4, #16]
   1d7aa:	f001 f8a9 	bl	1e900 <nrf_mem_init>
   1d7ae:	2800      	cmp	r0, #0
   1d7b0:	d156      	bne.n	1d860 <bsd_platform_init+0xf4>
   1d7b2:	4621      	mov	r1, r4
   1d7b4:	a801      	add	r0, sp, #4
   1d7b6:	f001 f917 	bl	1e9e8 <nrf_mem_register>
   1d7ba:	2800      	cmp	r0, #0
   1d7bc:	d150      	bne.n	1d860 <bsd_platform_init+0xf4>
   1d7be:	f7f7 fd11 	bl	151e4 <bsd_os_init>
   1d7c2:	f7fd fc7f 	bl	1b0c4 <rpc_framework_init>
   1d7c6:	2800      	cmp	r0, #0
   1d7c8:	d14a      	bne.n	1d860 <bsd_platform_init+0xf4>
   1d7ca:	783a      	ldrb	r2, [r7, #0]
   1d7cc:	682b      	ldr	r3, [r5, #0]
   1d7ce:	bb32      	cbnz	r2, 1d81e <bsd_platform_init+0xb2>
   1d7d0:	4606      	mov	r6, r0
   1d7d2:	2220      	movs	r2, #32
   1d7d4:	2408      	movs	r4, #8
   1d7d6:	2500      	movs	r5, #0
   1d7d8:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   1d7dc:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   1d7e0:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   1d7e4:	4411      	add	r1, r2
   1d7e6:	9302      	str	r3, [sp, #8]
   1d7e8:	e9cd 6008 	strd	r6, r0, [sp, #32]
   1d7ec:	910c      	str	r1, [sp, #48]	; 0x30
   1d7ee:	9203      	str	r2, [sp, #12]
   1d7f0:	f103 0140 	add.w	r1, r3, #64	; 0x40
   1d7f4:	9205      	str	r2, [sp, #20]
   1d7f6:	9207      	str	r2, [sp, #28]
   1d7f8:	eb0d 0004 	add.w	r0, sp, r4
   1d7fc:	189a      	adds	r2, r3, r2
   1d7fe:	3360      	adds	r3, #96	; 0x60
   1d800:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   1d804:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1d808:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   1d80c:	940f      	str	r4, [sp, #60]	; 0x3c
   1d80e:	9104      	str	r1, [sp, #16]
   1d810:	9206      	str	r2, [sp, #24]
   1d812:	930a      	str	r3, [sp, #40]	; 0x28
   1d814:	f7fa fdc0 	bl	18398 <rpc_transport_ipc_init>
   1d818:	b128      	cbz	r0, 1d826 <bsd_platform_init+0xba>
   1d81a:	b013      	add	sp, #76	; 0x4c
   1d81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d81e:	441e      	add	r6, r3
   1d820:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   1d824:	e7d5      	b.n	1d7d2 <bsd_platform_init+0x66>
   1d826:	f001 fd1f 	bl	1f268 <interface_init>
   1d82a:	b9c8      	cbnz	r0, 1d860 <bsd_platform_init+0xf4>
   1d82c:	f7fe fd0e 	bl	1c24c <at_interface_init>
   1d830:	b9b0      	cbnz	r0, 1d860 <bsd_platform_init+0xf4>
   1d832:	f7fc f88d 	bl	19950 <ip_interface_init>
   1d836:	b998      	cbnz	r0, 1d860 <bsd_platform_init+0xf4>
   1d838:	f7fb fbc0 	bl	18fbc <tls_interface_init>
   1d83c:	b980      	cbnz	r0, 1d860 <bsd_platform_init+0xf4>
   1d83e:	f001 fa2f 	bl	1eca0 <mfu_interface_init>
   1d842:	b968      	cbnz	r0, 1d860 <bsd_platform_init+0xf4>
   1d844:	f7fe fefc 	bl	1c640 <pdn_interface_init>
   1d848:	b950      	cbnz	r0, 1d860 <bsd_platform_init+0xf4>
   1d84a:	f7fe fb69 	bl	1bf20 <gnss_interface_init>
   1d84e:	b938      	cbnz	r0, 1d860 <bsd_platform_init+0xf4>
   1d850:	f7f9 ffe0 	bl	17814 <logobj_interface_init>
   1d854:	1b40      	subs	r0, r0, r5
   1d856:	bf18      	it	ne
   1d858:	2001      	movne	r0, #1
   1d85a:	4240      	negs	r0, r0
   1d85c:	b013      	add	sp, #76	; 0x4c
   1d85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d864:	b013      	add	sp, #76	; 0x4c
   1d866:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d868:	20023534 	.word	0x20023534
   1d86c:	20023520 	.word	0x20023520
   1d870:	0002ab7c 	.word	0x0002ab7c

0001d874 <bsd_platform_shutdown>:
   1d874:	b508      	push	{r3, lr}
   1d876:	f001 feed 	bl	1f654 <interface_shutdown>
   1d87a:	f7fb fad3 	bl	18e24 <rpc_transport_ipc_request_shutdown>
   1d87e:	f7fb f8e3 	bl	18a48 <rpc_transport_ipc_shutdown_done>
   1d882:	2800      	cmp	r0, #0
   1d884:	d0fb      	beq.n	1d87e <bsd_platform_shutdown+0xa>
   1d886:	2000      	movs	r0, #0
   1d888:	bd08      	pop	{r3, pc}
   1d88a:	bf00      	nop

0001d88c <bsd_platform_af_method_table_get>:
   1d88c:	2805      	cmp	r0, #5
   1d88e:	d02a      	beq.n	1d8e6 <bsd_platform_af_method_table_get+0x5a>
   1d890:	b508      	push	{r3, lr}
   1d892:	d914      	bls.n	1d8be <bsd_platform_af_method_table_get+0x32>
   1d894:	280a      	cmp	r0, #10
   1d896:	d016      	beq.n	1d8c6 <bsd_platform_af_method_table_get+0x3a>
   1d898:	2866      	cmp	r0, #102	; 0x66
   1d89a:	d11f      	bne.n	1d8dc <bsd_platform_af_method_table_get+0x50>
   1d89c:	f240 2302 	movw	r3, #514	; 0x202
   1d8a0:	429a      	cmp	r2, r3
   1d8a2:	d035      	beq.n	1d910 <bsd_platform_af_method_table_get+0x84>
   1d8a4:	f240 2305 	movw	r3, #517	; 0x205
   1d8a8:	429a      	cmp	r2, r3
   1d8aa:	d035      	beq.n	1d918 <bsd_platform_af_method_table_get+0x8c>
   1d8ac:	f240 2301 	movw	r3, #513	; 0x201
   1d8b0:	429a      	cmp	r2, r3
   1d8b2:	d02f      	beq.n	1d914 <bsd_platform_af_method_table_get+0x88>
   1d8b4:	202b      	movs	r0, #43	; 0x2b
   1d8b6:	f7f7 fb05 	bl	14ec4 <bsd_os_errno_set>
   1d8ba:	2000      	movs	r0, #0
   1d8bc:	bd08      	pop	{r3, pc}
   1d8be:	2801      	cmp	r0, #1
   1d8c0:	d016      	beq.n	1d8f0 <bsd_platform_af_method_table_get+0x64>
   1d8c2:	2802      	cmp	r0, #2
   1d8c4:	d10a      	bne.n	1d8dc <bsd_platform_af_method_table_get+0x50>
   1d8c6:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1d8ca:	d21a      	bcs.n	1d902 <bsd_platform_af_method_table_get+0x76>
   1d8cc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1d8d0:	d21a      	bcs.n	1d908 <bsd_platform_af_method_table_get+0x7c>
   1d8d2:	3a01      	subs	r2, #1
   1d8d4:	2a01      	cmp	r2, #1
   1d8d6:	d8ed      	bhi.n	1d8b4 <bsd_platform_af_method_table_get+0x28>
   1d8d8:	4810      	ldr	r0, [pc, #64]	; (1d91c <bsd_platform_af_method_table_get+0x90>)
   1d8da:	bd08      	pop	{r3, pc}
   1d8dc:	2016      	movs	r0, #22
   1d8de:	f7f7 faf1 	bl	14ec4 <bsd_os_errno_set>
   1d8e2:	2000      	movs	r0, #0
   1d8e4:	bd08      	pop	{r3, pc}
   1d8e6:	2903      	cmp	r1, #3
   1d8e8:	480d      	ldr	r0, [pc, #52]	; (1d920 <bsd_platform_af_method_table_get+0x94>)
   1d8ea:	bf18      	it	ne
   1d8ec:	2000      	movne	r0, #0
   1d8ee:	4770      	bx	lr
   1d8f0:	f240 2303 	movw	r3, #515	; 0x203
   1d8f4:	429a      	cmp	r2, r3
   1d8f6:	d009      	beq.n	1d90c <bsd_platform_af_method_table_get+0x80>
   1d8f8:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1d8fc:	d1da      	bne.n	1d8b4 <bsd_platform_af_method_table_get+0x28>
   1d8fe:	4809      	ldr	r0, [pc, #36]	; (1d924 <bsd_platform_af_method_table_get+0x98>)
   1d900:	bd08      	pop	{r3, pc}
   1d902:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1d906:	d1d5      	bne.n	1d8b4 <bsd_platform_af_method_table_get+0x28>
   1d908:	4807      	ldr	r0, [pc, #28]	; (1d928 <bsd_platform_af_method_table_get+0x9c>)
   1d90a:	bd08      	pop	{r3, pc}
   1d90c:	4807      	ldr	r0, [pc, #28]	; (1d92c <bsd_platform_af_method_table_get+0xa0>)
   1d90e:	bd08      	pop	{r3, pc}
   1d910:	4807      	ldr	r0, [pc, #28]	; (1d930 <bsd_platform_af_method_table_get+0xa4>)
   1d912:	bd08      	pop	{r3, pc}
   1d914:	4807      	ldr	r0, [pc, #28]	; (1d934 <bsd_platform_af_method_table_get+0xa8>)
   1d916:	bd08      	pop	{r3, pc}
   1d918:	4807      	ldr	r0, [pc, #28]	; (1d938 <bsd_platform_af_method_table_get+0xac>)
   1d91a:	bd08      	pop	{r3, pc}
   1d91c:	0002aa64 	.word	0x0002aa64
   1d920:	0002ab54 	.word	0x0002ab54
   1d924:	0002ab04 	.word	0x0002ab04
   1d928:	0002aa8c 	.word	0x0002aa8c
   1d92c:	0002aab4 	.word	0x0002aab4
   1d930:	0002aadc 	.word	0x0002aadc
   1d934:	0002aa3c 	.word	0x0002aa3c
   1d938:	0002ab2c 	.word	0x0002ab2c

0001d93c <bsd_platform_fd_method_table_get>:
   1d93c:	b538      	push	{r3, r4, r5, lr}
   1d93e:	4605      	mov	r5, r0
   1d940:	f001 fdd0 	bl	1f4e4 <interface_socket_from_handle_get>
   1d944:	4604      	mov	r4, r0
   1d946:	b960      	cbnz	r0, 1d962 <bsd_platform_fd_method_table_get+0x26>
   1d948:	4b2c      	ldr	r3, [pc, #176]	; (1d9fc <bsd_platform_fd_method_table_get+0xc0>)
   1d94a:	429d      	cmp	r5, r3
   1d94c:	d02f      	beq.n	1d9ae <bsd_platform_fd_method_table_get+0x72>
   1d94e:	0c2b      	lsrs	r3, r5, #16
   1d950:	4a2b      	ldr	r2, [pc, #172]	; (1da00 <bsd_platform_fd_method_table_get+0xc4>)
   1d952:	041b      	lsls	r3, r3, #16
   1d954:	4293      	cmp	r3, r2
   1d956:	d03d      	beq.n	1d9d4 <bsd_platform_fd_method_table_get+0x98>
   1d958:	4b2a      	ldr	r3, [pc, #168]	; (1da04 <bsd_platform_fd_method_table_get+0xc8>)
   1d95a:	429d      	cmp	r5, r3
   1d95c:	d149      	bne.n	1d9f2 <bsd_platform_fd_method_table_get+0xb6>
   1d95e:	482a      	ldr	r0, [pc, #168]	; (1da08 <bsd_platform_fd_method_table_get+0xcc>)
   1d960:	bd38      	pop	{r3, r4, r5, pc}
   1d962:	68c3      	ldr	r3, [r0, #12]
   1d964:	6942      	ldr	r2, [r0, #20]
   1d966:	2b05      	cmp	r3, #5
   1d968:	d036      	beq.n	1d9d8 <bsd_platform_fd_method_table_get+0x9c>
   1d96a:	d911      	bls.n	1d990 <bsd_platform_fd_method_table_get+0x54>
   1d96c:	2b0a      	cmp	r3, #10
   1d96e:	d013      	beq.n	1d998 <bsd_platform_fd_method_table_get+0x5c>
   1d970:	2b66      	cmp	r3, #102	; 0x66
   1d972:	d11e      	bne.n	1d9b2 <bsd_platform_fd_method_table_get+0x76>
   1d974:	f240 2302 	movw	r3, #514	; 0x202
   1d978:	429a      	cmp	r2, r3
   1d97a:	d02b      	beq.n	1d9d4 <bsd_platform_fd_method_table_get+0x98>
   1d97c:	f240 2305 	movw	r3, #517	; 0x205
   1d980:	429a      	cmp	r2, r3
   1d982:	d02f      	beq.n	1d9e4 <bsd_platform_fd_method_table_get+0xa8>
   1d984:	f240 2301 	movw	r3, #513	; 0x201
   1d988:	429a      	cmp	r2, r3
   1d98a:	d11e      	bne.n	1d9ca <bsd_platform_fd_method_table_get+0x8e>
   1d98c:	481f      	ldr	r0, [pc, #124]	; (1da0c <bsd_platform_fd_method_table_get+0xd0>)
   1d98e:	bd38      	pop	{r3, r4, r5, pc}
   1d990:	2b01      	cmp	r3, #1
   1d992:	d013      	beq.n	1d9bc <bsd_platform_fd_method_table_get+0x80>
   1d994:	2b02      	cmp	r3, #2
   1d996:	d10c      	bne.n	1d9b2 <bsd_platform_fd_method_table_get+0x76>
   1d998:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1d99c:	d224      	bcs.n	1d9e8 <bsd_platform_fd_method_table_get+0xac>
   1d99e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1d9a2:	d224      	bcs.n	1d9ee <bsd_platform_fd_method_table_get+0xb2>
   1d9a4:	3a01      	subs	r2, #1
   1d9a6:	2a01      	cmp	r2, #1
   1d9a8:	d80f      	bhi.n	1d9ca <bsd_platform_fd_method_table_get+0x8e>
   1d9aa:	4819      	ldr	r0, [pc, #100]	; (1da10 <bsd_platform_fd_method_table_get+0xd4>)
   1d9ac:	bd38      	pop	{r3, r4, r5, pc}
   1d9ae:	4819      	ldr	r0, [pc, #100]	; (1da14 <bsd_platform_fd_method_table_get+0xd8>)
   1d9b0:	bd38      	pop	{r3, r4, r5, pc}
   1d9b2:	2016      	movs	r0, #22
   1d9b4:	f7f7 fa86 	bl	14ec4 <bsd_os_errno_set>
   1d9b8:	2000      	movs	r0, #0
   1d9ba:	bd38      	pop	{r3, r4, r5, pc}
   1d9bc:	f240 2303 	movw	r3, #515	; 0x203
   1d9c0:	429a      	cmp	r2, r3
   1d9c2:	d0f4      	beq.n	1d9ae <bsd_platform_fd_method_table_get+0x72>
   1d9c4:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1d9c8:	d0c9      	beq.n	1d95e <bsd_platform_fd_method_table_get+0x22>
   1d9ca:	202b      	movs	r0, #43	; 0x2b
   1d9cc:	f7f7 fa7a 	bl	14ec4 <bsd_os_errno_set>
   1d9d0:	2000      	movs	r0, #0
   1d9d2:	bd38      	pop	{r3, r4, r5, pc}
   1d9d4:	4810      	ldr	r0, [pc, #64]	; (1da18 <bsd_platform_fd_method_table_get+0xdc>)
   1d9d6:	bd38      	pop	{r3, r4, r5, pc}
   1d9d8:	6903      	ldr	r3, [r0, #16]
   1d9da:	4810      	ldr	r0, [pc, #64]	; (1da1c <bsd_platform_fd_method_table_get+0xe0>)
   1d9dc:	2b03      	cmp	r3, #3
   1d9de:	bf18      	it	ne
   1d9e0:	2000      	movne	r0, #0
   1d9e2:	bd38      	pop	{r3, r4, r5, pc}
   1d9e4:	480e      	ldr	r0, [pc, #56]	; (1da20 <bsd_platform_fd_method_table_get+0xe4>)
   1d9e6:	bd38      	pop	{r3, r4, r5, pc}
   1d9e8:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1d9ec:	d1ed      	bne.n	1d9ca <bsd_platform_fd_method_table_get+0x8e>
   1d9ee:	480d      	ldr	r0, [pc, #52]	; (1da24 <bsd_platform_fd_method_table_get+0xe8>)
   1d9f0:	bd38      	pop	{r3, r4, r5, pc}
   1d9f2:	2009      	movs	r0, #9
   1d9f4:	f7f7 fa66 	bl	14ec4 <bsd_os_errno_set>
   1d9f8:	4620      	mov	r0, r4
   1d9fa:	bd38      	pop	{r3, r4, r5, pc}
   1d9fc:	49765432 	.word	0x49765432
   1da00:	789a0000 	.word	0x789a0000
   1da04:	49765443 	.word	0x49765443
   1da08:	0002ab04 	.word	0x0002ab04
   1da0c:	0002aa3c 	.word	0x0002aa3c
   1da10:	0002aa64 	.word	0x0002aa64
   1da14:	0002aab4 	.word	0x0002aab4
   1da18:	0002aadc 	.word	0x0002aadc
   1da1c:	0002ab54 	.word	0x0002ab54
   1da20:	0002ab2c 	.word	0x0002ab2c
   1da24:	0002aa8c 	.word	0x0002aa8c

0001da28 <bsd_platform_getaddrinfo>:
   1da28:	f7fc bf52 	b.w	1a8d0 <ip_interface_getaddrinfo>

0001da2c <bsd_platform_freeaddrinfo>:
   1da2c:	f7fd b846 	b.w	1aabc <ip_interface_freeaddrinfo>

0001da30 <bsd_platform_poll>:
   1da30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1da34:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   1da38:	b083      	sub	sp, #12
   1da3a:	9200      	str	r2, [sp, #0]
   1da3c:	2800      	cmp	r0, #0
   1da3e:	d048      	beq.n	1dad2 <bsd_platform_poll+0xa2>
   1da40:	1e4b      	subs	r3, r1, #1
   1da42:	2b08      	cmp	r3, #8
   1da44:	d845      	bhi.n	1dad2 <bsd_platform_poll+0xa2>
   1da46:	4680      	mov	r8, r0
   1da48:	4605      	mov	r5, r0
   1da4a:	2400      	movs	r4, #0
   1da4c:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   1da50:	88ab      	ldrh	r3, [r5, #4]
   1da52:	6828      	ldr	r0, [r5, #0]
   1da54:	f003 0303 	and.w	r3, r3, #3
   1da58:	a901      	add	r1, sp, #4
   1da5a:	f043 061c 	orr.w	r6, r3, #28
   1da5e:	f001 fd4f 	bl	1f500 <interface_socket_event_get>
   1da62:	9b01      	ldr	r3, [sp, #4]
   1da64:	3508      	adds	r5, #8
   1da66:	4033      	ands	r3, r6
   1da68:	f825 3c02 	strh.w	r3, [r5, #-2]
   1da6c:	b103      	cbz	r3, 1da70 <bsd_platform_poll+0x40>
   1da6e:	3401      	adds	r4, #1
   1da70:	42af      	cmp	r7, r5
   1da72:	d1ed      	bne.n	1da50 <bsd_platform_poll+0x20>
   1da74:	bb9c      	cbnz	r4, 1dade <bsd_platform_poll+0xae>
   1da76:	4669      	mov	r1, sp
   1da78:	4640      	mov	r0, r8
   1da7a:	f7f7 f96d 	bl	14d58 <bsd_os_timedwait>
   1da7e:	4607      	mov	r7, r0
   1da80:	b108      	cbz	r0, 1da86 <bsd_platform_poll+0x56>
   1da82:	283c      	cmp	r0, #60	; 0x3c
   1da84:	d11d      	bne.n	1dac2 <bsd_platform_poll+0x92>
   1da86:	46c1      	mov	r9, r8
   1da88:	2600      	movs	r6, #0
   1da8a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1da8e:	f8d9 0000 	ldr.w	r0, [r9]
   1da92:	f003 0303 	and.w	r3, r3, #3
   1da96:	a901      	add	r1, sp, #4
   1da98:	f043 041c 	orr.w	r4, r3, #28
   1da9c:	f001 fd30 	bl	1f500 <interface_socket_event_get>
   1daa0:	9b01      	ldr	r3, [sp, #4]
   1daa2:	f109 0908 	add.w	r9, r9, #8
   1daa6:	4023      	ands	r3, r4
   1daa8:	f829 3c02 	strh.w	r3, [r9, #-2]
   1daac:	b103      	cbz	r3, 1dab0 <bsd_platform_poll+0x80>
   1daae:	3601      	adds	r6, #1
   1dab0:	454d      	cmp	r5, r9
   1dab2:	d1ea      	bne.n	1da8a <bsd_platform_poll+0x5a>
   1dab4:	b90e      	cbnz	r6, 1daba <bsd_platform_poll+0x8a>
   1dab6:	2f00      	cmp	r7, #0
   1dab8:	d0dd      	beq.n	1da76 <bsd_platform_poll+0x46>
   1daba:	4630      	mov	r0, r6
   1dabc:	b003      	add	sp, #12
   1dabe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1dac2:	2023      	movs	r0, #35	; 0x23
   1dac4:	f7f7 f9fe 	bl	14ec4 <bsd_os_errno_set>
   1dac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dacc:	b003      	add	sp, #12
   1dace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1dad2:	2016      	movs	r0, #22
   1dad4:	f7f7 f9f6 	bl	14ec4 <bsd_os_errno_set>
   1dad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dadc:	e7ee      	b.n	1dabc <bsd_platform_poll+0x8c>
   1dade:	4620      	mov	r0, r4
   1dae0:	e7ec      	b.n	1dabc <bsd_platform_poll+0x8c>
   1dae2:	bf00      	nop

0001dae4 <bsd_platform_fcntl>:
   1dae4:	b508      	push	{r3, lr}
   1dae6:	4b06      	ldr	r3, [pc, #24]	; (1db00 <bsd_platform_fcntl+0x1c>)
   1dae8:	4298      	cmp	r0, r3
   1daea:	d003      	beq.n	1daf4 <bsd_platform_fcntl+0x10>
   1daec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1daf0:	f001 bde4 	b.w	1f6bc <interface_socket_fcntl>
   1daf4:	202d      	movs	r0, #45	; 0x2d
   1daf6:	f7f7 f9e5 	bl	14ec4 <bsd_os_errno_set>
   1dafa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dafe:	bd08      	pop	{r3, pc}
   1db00:	49765432 	.word	0x49765432

0001db04 <linked_list_init>:
   1db04:	b128      	cbz	r0, 1db12 <linked_list_init+0xe>
   1db06:	2300      	movs	r3, #0
   1db08:	6003      	str	r3, [r0, #0]
   1db0a:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1db0e:	4618      	mov	r0, r3
   1db10:	4770      	bx	lr
   1db12:	2007      	movs	r0, #7
   1db14:	4770      	bx	lr
   1db16:	bf00      	nop

0001db18 <linked_list_push>:
   1db18:	6802      	ldr	r2, [r0, #0]
   1db1a:	4603      	mov	r3, r0
   1db1c:	3201      	adds	r2, #1
   1db1e:	d00e      	beq.n	1db3e <linked_list_push+0x26>
   1db20:	2200      	movs	r2, #0
   1db22:	600a      	str	r2, [r1, #0]
   1db24:	6802      	ldr	r2, [r0, #0]
   1db26:	b13a      	cbz	r2, 1db38 <linked_list_push+0x20>
   1db28:	6882      	ldr	r2, [r0, #8]
   1db2a:	6011      	str	r1, [r2, #0]
   1db2c:	6081      	str	r1, [r0, #8]
   1db2e:	681a      	ldr	r2, [r3, #0]
   1db30:	2000      	movs	r0, #0
   1db32:	3201      	adds	r2, #1
   1db34:	601a      	str	r2, [r3, #0]
   1db36:	4770      	bx	lr
   1db38:	e9c0 1101 	strd	r1, r1, [r0, #4]
   1db3c:	e7f7      	b.n	1db2e <linked_list_push+0x16>
   1db3e:	2004      	movs	r0, #4
   1db40:	4770      	bx	lr
   1db42:	bf00      	nop

0001db44 <linked_list_pop>:
   1db44:	4603      	mov	r3, r0
   1db46:	6800      	ldr	r0, [r0, #0]
   1db48:	b128      	cbz	r0, 1db56 <linked_list_pop+0x12>
   1db4a:	6858      	ldr	r0, [r3, #4]
   1db4c:	681a      	ldr	r2, [r3, #0]
   1db4e:	6801      	ldr	r1, [r0, #0]
   1db50:	3a01      	subs	r2, #1
   1db52:	6059      	str	r1, [r3, #4]
   1db54:	601a      	str	r2, [r3, #0]
   1db56:	4770      	bx	lr

0001db58 <linked_list_peek>:
   1db58:	6803      	ldr	r3, [r0, #0]
   1db5a:	b10b      	cbz	r3, 1db60 <linked_list_peek+0x8>
   1db5c:	6840      	ldr	r0, [r0, #4]
   1db5e:	4770      	bx	lr
   1db60:	4618      	mov	r0, r3
   1db62:	4770      	bx	lr

0001db64 <linked_list_size_get>:
   1db64:	6800      	ldr	r0, [r0, #0]
   1db66:	4770      	bx	lr

0001db68 <linked_list_get_next>:
   1db68:	6800      	ldr	r0, [r0, #0]
   1db6a:	4770      	bx	lr

0001db6c <nrf_socket>:
   1db6c:	b570      	push	{r4, r5, r6, lr}
   1db6e:	4604      	mov	r4, r0
   1db70:	460d      	mov	r5, r1
   1db72:	4616      	mov	r6, r2
   1db74:	f7ff fe8a 	bl	1d88c <bsd_platform_af_method_table_get>
   1db78:	b130      	cbz	r0, 1db88 <nrf_socket+0x1c>
   1db7a:	6803      	ldr	r3, [r0, #0]
   1db7c:	4632      	mov	r2, r6
   1db7e:	4629      	mov	r1, r5
   1db80:	4620      	mov	r0, r4
   1db82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1db86:	4718      	bx	r3
   1db88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1db8c:	bd70      	pop	{r4, r5, r6, pc}
   1db8e:	bf00      	nop

0001db90 <nrf_close>:
   1db90:	b510      	push	{r4, lr}
   1db92:	4604      	mov	r4, r0
   1db94:	f7ff fed2 	bl	1d93c <bsd_platform_fd_method_table_get>
   1db98:	b120      	cbz	r0, 1dba4 <nrf_close+0x14>
   1db9a:	6843      	ldr	r3, [r0, #4]
   1db9c:	4620      	mov	r0, r4
   1db9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dba2:	4718      	bx	r3
   1dba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dba8:	bd10      	pop	{r4, pc}
   1dbaa:	bf00      	nop

0001dbac <nrf_sendto>:
   1dbac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dbb0:	460d      	mov	r5, r1
   1dbb2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1dbb6:	4616      	mov	r6, r2
   1dbb8:	461f      	mov	r7, r3
   1dbba:	4604      	mov	r4, r0
   1dbbc:	f7ff febe 	bl	1d93c <bsd_platform_fd_method_table_get>
   1dbc0:	b158      	cbz	r0, 1dbda <nrf_sendto+0x2e>
   1dbc2:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1dbc6:	f8d0 e008 	ldr.w	lr, [r0, #8]
   1dbca:	463b      	mov	r3, r7
   1dbcc:	4632      	mov	r2, r6
   1dbce:	4629      	mov	r1, r5
   1dbd0:	4620      	mov	r0, r4
   1dbd2:	46f4      	mov	ip, lr
   1dbd4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dbd8:	4760      	bx	ip
   1dbda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dbe2:	bf00      	nop

0001dbe4 <nrf_recvfrom>:
   1dbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dbe8:	460d      	mov	r5, r1
   1dbea:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1dbee:	4616      	mov	r6, r2
   1dbf0:	461f      	mov	r7, r3
   1dbf2:	4604      	mov	r4, r0
   1dbf4:	f7ff fea2 	bl	1d93c <bsd_platform_fd_method_table_get>
   1dbf8:	b158      	cbz	r0, 1dc12 <nrf_recvfrom+0x2e>
   1dbfa:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1dbfe:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   1dc02:	463b      	mov	r3, r7
   1dc04:	4632      	mov	r2, r6
   1dc06:	4629      	mov	r1, r5
   1dc08:	4620      	mov	r0, r4
   1dc0a:	46f4      	mov	ip, lr
   1dc0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dc10:	4760      	bx	ip
   1dc12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dc1a:	bf00      	nop

0001dc1c <nrf_recv>:
   1dc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc20:	b082      	sub	sp, #8
   1dc22:	460e      	mov	r6, r1
   1dc24:	4617      	mov	r7, r2
   1dc26:	4698      	mov	r8, r3
   1dc28:	4605      	mov	r5, r0
   1dc2a:	f7ff fe87 	bl	1d93c <bsd_platform_fd_method_table_get>
   1dc2e:	b160      	cbz	r0, 1dc4a <nrf_recv+0x2e>
   1dc30:	4604      	mov	r4, r0
   1dc32:	2000      	movs	r0, #0
   1dc34:	e9cd 0000 	strd	r0, r0, [sp]
   1dc38:	4643      	mov	r3, r8
   1dc3a:	463a      	mov	r2, r7
   1dc3c:	4631      	mov	r1, r6
   1dc3e:	4628      	mov	r0, r5
   1dc40:	68e4      	ldr	r4, [r4, #12]
   1dc42:	47a0      	blx	r4
   1dc44:	b002      	add	sp, #8
   1dc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dc4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dc4e:	e7f9      	b.n	1dc44 <nrf_recv+0x28>

0001dc50 <nrf_connect>:
   1dc50:	b570      	push	{r4, r5, r6, lr}
   1dc52:	460d      	mov	r5, r1
   1dc54:	4616      	mov	r6, r2
   1dc56:	4604      	mov	r4, r0
   1dc58:	f7ff fe70 	bl	1d93c <bsd_platform_fd_method_table_get>
   1dc5c:	b130      	cbz	r0, 1dc6c <nrf_connect+0x1c>
   1dc5e:	6943      	ldr	r3, [r0, #20]
   1dc60:	4632      	mov	r2, r6
   1dc62:	4629      	mov	r1, r5
   1dc64:	4620      	mov	r0, r4
   1dc66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dc6a:	4718      	bx	r3
   1dc6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dc70:	bd70      	pop	{r4, r5, r6, pc}
   1dc72:	bf00      	nop

0001dc74 <nrf_listen>:
   1dc74:	b570      	push	{r4, r5, r6, lr}
   1dc76:	460d      	mov	r5, r1
   1dc78:	4604      	mov	r4, r0
   1dc7a:	f7ff fe5f 	bl	1d93c <bsd_platform_fd_method_table_get>
   1dc7e:	b128      	cbz	r0, 1dc8c <nrf_listen+0x18>
   1dc80:	6983      	ldr	r3, [r0, #24]
   1dc82:	4629      	mov	r1, r5
   1dc84:	4620      	mov	r0, r4
   1dc86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dc8a:	4718      	bx	r3
   1dc8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dc90:	bd70      	pop	{r4, r5, r6, pc}
   1dc92:	bf00      	nop

0001dc94 <nrf_accept>:
   1dc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc98:	460d      	mov	r5, r1
   1dc9a:	4616      	mov	r6, r2
   1dc9c:	4604      	mov	r4, r0
   1dc9e:	f7ff fe4d 	bl	1d93c <bsd_platform_fd_method_table_get>
   1dca2:	b140      	cbz	r0, 1dcb6 <nrf_accept+0x22>
   1dca4:	69c7      	ldr	r7, [r0, #28]
   1dca6:	4632      	mov	r2, r6
   1dca8:	4629      	mov	r1, r5
   1dcaa:	4620      	mov	r0, r4
   1dcac:	46bc      	mov	ip, r7
   1dcae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1dcb2:	2300      	movs	r3, #0
   1dcb4:	4760      	bx	ip
   1dcb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dcba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dcbe:	bf00      	nop

0001dcc0 <nrf_bind>:
   1dcc0:	b570      	push	{r4, r5, r6, lr}
   1dcc2:	460d      	mov	r5, r1
   1dcc4:	4616      	mov	r6, r2
   1dcc6:	4604      	mov	r4, r0
   1dcc8:	f7ff fe38 	bl	1d93c <bsd_platform_fd_method_table_get>
   1dccc:	b130      	cbz	r0, 1dcdc <nrf_bind+0x1c>
   1dcce:	6903      	ldr	r3, [r0, #16]
   1dcd0:	4632      	mov	r2, r6
   1dcd2:	4629      	mov	r1, r5
   1dcd4:	4620      	mov	r0, r4
   1dcd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dcda:	4718      	bx	r3
   1dcdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dce0:	bd70      	pop	{r4, r5, r6, pc}
   1dce2:	bf00      	nop

0001dce4 <nrf_setsockopt>:
   1dce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dce8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1dcec:	460d      	mov	r5, r1
   1dcee:	4616      	mov	r6, r2
   1dcf0:	461f      	mov	r7, r3
   1dcf2:	4604      	mov	r4, r0
   1dcf4:	f7ff fe22 	bl	1d93c <bsd_platform_fd_method_table_get>
   1dcf8:	b158      	cbz	r0, 1dd12 <nrf_setsockopt+0x2e>
   1dcfa:	f8cd 8018 	str.w	r8, [sp, #24]
   1dcfe:	f8d0 e020 	ldr.w	lr, [r0, #32]
   1dd02:	463b      	mov	r3, r7
   1dd04:	4632      	mov	r2, r6
   1dd06:	4629      	mov	r1, r5
   1dd08:	4620      	mov	r0, r4
   1dd0a:	46f4      	mov	ip, lr
   1dd0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1dd10:	4760      	bx	ip
   1dd12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dd16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dd1a:	bf00      	nop

0001dd1c <nrf_getsockopt>:
   1dd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd20:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1dd24:	460d      	mov	r5, r1
   1dd26:	4616      	mov	r6, r2
   1dd28:	461f      	mov	r7, r3
   1dd2a:	4604      	mov	r4, r0
   1dd2c:	f7ff fe06 	bl	1d93c <bsd_platform_fd_method_table_get>
   1dd30:	b158      	cbz	r0, 1dd4a <nrf_getsockopt+0x2e>
   1dd32:	f8cd 8018 	str.w	r8, [sp, #24]
   1dd36:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   1dd3a:	463b      	mov	r3, r7
   1dd3c:	4632      	mov	r2, r6
   1dd3e:	4629      	mov	r1, r5
   1dd40:	4620      	mov	r0, r4
   1dd42:	46f4      	mov	ip, lr
   1dd44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1dd48:	4760      	bx	ip
   1dd4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dd52:	bf00      	nop

0001dd54 <nrf_getaddrinfo>:
   1dd54:	f7ff be68 	b.w	1da28 <bsd_platform_getaddrinfo>

0001dd58 <nrf_freeaddrinfo>:
   1dd58:	f7ff be68 	b.w	1da2c <bsd_platform_freeaddrinfo>

0001dd5c <nrf_poll>:
   1dd5c:	f7ff be68 	b.w	1da30 <bsd_platform_poll>

0001dd60 <nrf_fcntl>:
   1dd60:	f7ff bec0 	b.w	1dae4 <bsd_platform_fcntl>

0001dd64 <rpc_gnss_serialize_utc>:
   1dd64:	4603      	mov	r3, r0
   1dd66:	b1d8      	cbz	r0, 1dda0 <rpc_gnss_serialize_utc+0x3c>
   1dd68:	b1d1      	cbz	r1, 1dda0 <rpc_gnss_serialize_utc+0x3c>
   1dd6a:	2000      	movs	r0, #0
   1dd6c:	2201      	movs	r2, #1
   1dd6e:	7048      	strb	r0, [r1, #1]
   1dd70:	700a      	strb	r2, [r1, #0]
   1dd72:	685a      	ldr	r2, [r3, #4]
   1dd74:	2010      	movs	r0, #16
   1dd76:	f8c1 2006 	str.w	r2, [r1, #6]
   1dd7a:	681a      	ldr	r2, [r3, #0]
   1dd7c:	f8c1 2002 	str.w	r2, [r1, #2]
   1dd80:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1dd84:	730a      	strb	r2, [r1, #12]
   1dd86:	f993 200d 	ldrsb.w	r2, [r3, #13]
   1dd8a:	73ca      	strb	r2, [r1, #15]
   1dd8c:	f993 200c 	ldrsb.w	r2, [r3, #12]
   1dd90:	738a      	strb	r2, [r1, #14]
   1dd92:	7a1a      	ldrb	r2, [r3, #8]
   1dd94:	728a      	strb	r2, [r1, #10]
   1dd96:	7ada      	ldrb	r2, [r3, #11]
   1dd98:	734a      	strb	r2, [r1, #13]
   1dd9a:	7a5b      	ldrb	r3, [r3, #9]
   1dd9c:	72cb      	strb	r3, [r1, #11]
   1dd9e:	4770      	bx	lr
   1dda0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dda4:	4770      	bx	lr
   1dda6:	bf00      	nop

0001dda8 <rpc_gnss_serialize_ephe>:
   1dda8:	4603      	mov	r3, r0
   1ddaa:	2800      	cmp	r0, #0
   1ddac:	d04b      	beq.n	1de46 <rpc_gnss_serialize_ephe+0x9e>
   1ddae:	2900      	cmp	r1, #0
   1ddb0:	d049      	beq.n	1de46 <rpc_gnss_serialize_ephe+0x9e>
   1ddb2:	2000      	movs	r0, #0
   1ddb4:	2202      	movs	r2, #2
   1ddb6:	7048      	strb	r0, [r1, #1]
   1ddb8:	700a      	strb	r2, [r1, #0]
   1ddba:	68da      	ldr	r2, [r3, #12]
   1ddbc:	2040      	movs	r0, #64	; 0x40
   1ddbe:	f8c1 200b 	str.w	r2, [r1, #11]
   1ddc2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1ddc6:	f8a1 2009 	strh.w	r2, [r1, #9]
   1ddca:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1ddce:	720a      	strb	r2, [r1, #8]
   1ddd0:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   1ddd4:	878a      	strh	r2, [r1, #60]	; 0x3c
   1ddd6:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   1ddda:	86ca      	strh	r2, [r1, #54]	; 0x36
   1dddc:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   1dde0:	874a      	strh	r2, [r1, #58]	; 0x3a
   1dde2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1dde6:	868a      	strh	r2, [r1, #52]	; 0x34
   1dde8:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   1ddec:	87ca      	strh	r2, [r1, #62]	; 0x3e
   1ddee:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   1ddf2:	870a      	strh	r2, [r1, #56]	; 0x38
   1ddf4:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1ddf8:	830a      	strh	r2, [r1, #24]
   1ddfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ddfc:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   1de00:	7c9a      	ldrb	r2, [r3, #18]
   1de02:	744a      	strb	r2, [r1, #17]
   1de04:	785a      	ldrb	r2, [r3, #1]
   1de06:	70ca      	strb	r2, [r1, #3]
   1de08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1de0a:	62ca      	str	r2, [r1, #44]	; 0x2c
   1de0c:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   1de10:	84ca      	strh	r2, [r1, #38]	; 0x26
   1de12:	885a      	ldrh	r2, [r3, #2]
   1de14:	808a      	strh	r2, [r1, #4]
   1de16:	6a1a      	ldr	r2, [r3, #32]
   1de18:	f8c1 201a 	str.w	r2, [r1, #26]
   1de1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1de1e:	630a      	str	r2, [r1, #48]	; 0x30
   1de20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1de22:	f8c1 201e 	str.w	r2, [r1, #30]
   1de26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1de28:	628a      	str	r2, [r1, #40]	; 0x28
   1de2a:	781a      	ldrb	r2, [r3, #0]
   1de2c:	708a      	strb	r2, [r1, #2]
   1de2e:	f993 2010 	ldrsb.w	r2, [r3, #16]
   1de32:	73ca      	strb	r2, [r1, #15]
   1de34:	889a      	ldrh	r2, [r3, #4]
   1de36:	80ca      	strh	r2, [r1, #6]
   1de38:	8a9a      	ldrh	r2, [r3, #20]
   1de3a:	824a      	strh	r2, [r1, #18]
   1de3c:	7c5a      	ldrb	r2, [r3, #17]
   1de3e:	740a      	strb	r2, [r1, #16]
   1de40:	699b      	ldr	r3, [r3, #24]
   1de42:	614b      	str	r3, [r1, #20]
   1de44:	4770      	bx	lr
   1de46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1de4a:	4770      	bx	lr

0001de4c <rpc_gnss_serialize_alm>:
   1de4c:	4603      	mov	r3, r0
   1de4e:	b360      	cbz	r0, 1deaa <rpc_gnss_serialize_alm+0x5e>
   1de50:	b359      	cbz	r1, 1deaa <rpc_gnss_serialize_alm+0x5e>
   1de52:	2000      	movs	r0, #0
   1de54:	2203      	movs	r2, #3
   1de56:	7048      	strb	r0, [r1, #1]
   1de58:	700a      	strb	r2, [r1, #0]
   1de5a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1de5e:	2021      	movs	r0, #33	; 0x21
   1de60:	f8a1 201d 	strh.w	r2, [r1, #29]
   1de64:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   1de68:	f8a1 201f 	strh.w	r2, [r1, #31]
   1de6c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   1de70:	810a      	strh	r2, [r1, #8]
   1de72:	889a      	ldrh	r2, [r3, #4]
   1de74:	80ca      	strh	r2, [r1, #6]
   1de76:	78da      	ldrb	r2, [r3, #3]
   1de78:	714a      	strb	r2, [r1, #5]
   1de7a:	699a      	ldr	r2, [r3, #24]
   1de7c:	f8c1 2019 	str.w	r2, [r1, #25]
   1de80:	691a      	ldr	r2, [r3, #16]
   1de82:	f8c1 2011 	str.w	r2, [r1, #17]
   1de86:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1de8a:	814a      	strh	r2, [r1, #10]
   1de8c:	68da      	ldr	r2, [r3, #12]
   1de8e:	f8c1 200d 	str.w	r2, [r1, #13]
   1de92:	7a9a      	ldrb	r2, [r3, #10]
   1de94:	730a      	strb	r2, [r1, #12]
   1de96:	781a      	ldrb	r2, [r3, #0]
   1de98:	708a      	strb	r2, [r1, #2]
   1de9a:	789a      	ldrb	r2, [r3, #2]
   1de9c:	710a      	strb	r2, [r1, #4]
   1de9e:	695a      	ldr	r2, [r3, #20]
   1dea0:	f8c1 2015 	str.w	r2, [r1, #21]
   1dea4:	785b      	ldrb	r3, [r3, #1]
   1dea6:	70cb      	strb	r3, [r1, #3]
   1dea8:	4770      	bx	lr
   1deaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1deae:	4770      	bx	lr

0001deb0 <rpc_gnss_serialize_klob>:
   1deb0:	4603      	mov	r3, r0
   1deb2:	b1f0      	cbz	r0, 1def2 <rpc_gnss_serialize_klob+0x42>
   1deb4:	b1e9      	cbz	r1, 1def2 <rpc_gnss_serialize_klob+0x42>
   1deb6:	2000      	movs	r0, #0
   1deb8:	2204      	movs	r2, #4
   1deba:	7048      	strb	r0, [r1, #1]
   1debc:	700a      	strb	r2, [r1, #0]
   1debe:	f993 2000 	ldrsb.w	r2, [r3]
   1dec2:	200a      	movs	r0, #10
   1dec4:	708a      	strb	r2, [r1, #2]
   1dec6:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1deca:	70ca      	strb	r2, [r1, #3]
   1decc:	f993 2002 	ldrsb.w	r2, [r3, #2]
   1ded0:	710a      	strb	r2, [r1, #4]
   1ded2:	f993 2003 	ldrsb.w	r2, [r3, #3]
   1ded6:	714a      	strb	r2, [r1, #5]
   1ded8:	f993 2004 	ldrsb.w	r2, [r3, #4]
   1dedc:	718a      	strb	r2, [r1, #6]
   1dede:	f993 2005 	ldrsb.w	r2, [r3, #5]
   1dee2:	71ca      	strb	r2, [r1, #7]
   1dee4:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1dee8:	720a      	strb	r2, [r1, #8]
   1deea:	f993 3007 	ldrsb.w	r3, [r3, #7]
   1deee:	724b      	strb	r3, [r1, #9]
   1def0:	4770      	bx	lr
   1def2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1def6:	4770      	bx	lr

0001def8 <rpc_gnss_serialize_nequick>:
   1def8:	4603      	mov	r3, r0
   1defa:	b198      	cbz	r0, 1df24 <rpc_gnss_serialize_nequick+0x2c>
   1defc:	b191      	cbz	r1, 1df24 <rpc_gnss_serialize_nequick+0x2c>
   1defe:	2000      	movs	r0, #0
   1df00:	2205      	movs	r2, #5
   1df02:	7048      	strb	r0, [r1, #1]
   1df04:	700a      	strb	r2, [r1, #0]
   1df06:	f9b3 2000 	ldrsh.w	r2, [r3]
   1df0a:	200a      	movs	r0, #10
   1df0c:	804a      	strh	r2, [r1, #2]
   1df0e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1df12:	808a      	strh	r2, [r1, #4]
   1df14:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   1df18:	80ca      	strh	r2, [r1, #6]
   1df1a:	799a      	ldrb	r2, [r3, #6]
   1df1c:	720a      	strb	r2, [r1, #8]
   1df1e:	79db      	ldrb	r3, [r3, #7]
   1df20:	724b      	strb	r3, [r1, #9]
   1df22:	4770      	bx	lr
   1df24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1df28:	4770      	bx	lr
   1df2a:	bf00      	nop

0001df2c <rpc_gnss_serialize_time_and_sv_tow>:
   1df2c:	b310      	cbz	r0, 1df74 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1df2e:	b309      	cbz	r1, 1df74 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1df30:	b470      	push	{r4, r5, r6}
   1df32:	2500      	movs	r5, #0
   1df34:	2606      	movs	r6, #6
   1df36:	460c      	mov	r4, r1
   1df38:	704d      	strb	r5, [r1, #1]
   1df3a:	700e      	strb	r6, [r1, #0]
   1df3c:	462b      	mov	r3, r5
   1df3e:	8805      	ldrh	r5, [r0, #0]
   1df40:	4602      	mov	r2, r0
   1df42:	804d      	strh	r5, [r1, #2]
   1df44:	68c5      	ldr	r5, [r0, #12]
   1df46:	f8c1 500a 	str.w	r5, [r1, #10]
   1df4a:	8905      	ldrh	r5, [r0, #8]
   1df4c:	810d      	strh	r5, [r1, #8]
   1df4e:	6840      	ldr	r0, [r0, #4]
   1df50:	6048      	str	r0, [r1, #4]
   1df52:	8a15      	ldrh	r5, [r2, #16]
   1df54:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1df58:	4408      	add	r0, r1
   1df5a:	81c5      	strh	r5, [r0, #14]
   1df5c:	7c90      	ldrb	r0, [r2, #18]
   1df5e:	3301      	adds	r3, #1
   1df60:	2b20      	cmp	r3, #32
   1df62:	7420      	strb	r0, [r4, #16]
   1df64:	f102 0204 	add.w	r2, r2, #4
   1df68:	f104 0403 	add.w	r4, r4, #3
   1df6c:	d1f1      	bne.n	1df52 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   1df6e:	206e      	movs	r0, #110	; 0x6e
   1df70:	bc70      	pop	{r4, r5, r6}
   1df72:	4770      	bx	lr
   1df74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1df78:	4770      	bx	lr
   1df7a:	bf00      	nop

0001df7c <rpc_gnss_serialize_location>:
   1df7c:	4603      	mov	r3, r0
   1df7e:	b1c8      	cbz	r0, 1dfb4 <rpc_gnss_serialize_location+0x38>
   1df80:	b1c1      	cbz	r1, 1dfb4 <rpc_gnss_serialize_location+0x38>
   1df82:	2000      	movs	r0, #0
   1df84:	2207      	movs	r2, #7
   1df86:	7048      	strb	r0, [r1, #1]
   1df88:	700a      	strb	r2, [r1, #0]
   1df8a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1df8e:	2011      	movs	r0, #17
   1df90:	814a      	strh	r2, [r1, #10]
   1df92:	7b9a      	ldrb	r2, [r3, #14]
   1df94:	740a      	strb	r2, [r1, #16]
   1df96:	681a      	ldr	r2, [r3, #0]
   1df98:	f8c1 2002 	str.w	r2, [r1, #2]
   1df9c:	685a      	ldr	r2, [r3, #4]
   1df9e:	f8c1 2006 	str.w	r2, [r1, #6]
   1dfa2:	7b1a      	ldrb	r2, [r3, #12]
   1dfa4:	738a      	strb	r2, [r1, #14]
   1dfa6:	7b5a      	ldrb	r2, [r3, #13]
   1dfa8:	73ca      	strb	r2, [r1, #15]
   1dfaa:	7a9a      	ldrb	r2, [r3, #10]
   1dfac:	730a      	strb	r2, [r1, #12]
   1dfae:	7adb      	ldrb	r3, [r3, #11]
   1dfb0:	734b      	strb	r3, [r1, #13]
   1dfb2:	4770      	bx	lr
   1dfb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dfb8:	4770      	bx	lr
   1dfba:	bf00      	nop

0001dfbc <rpc_gnss_serialize_integrity>:
   1dfbc:	b148      	cbz	r0, 1dfd2 <rpc_gnss_serialize_integrity+0x16>
   1dfbe:	b141      	cbz	r1, 1dfd2 <rpc_gnss_serialize_integrity+0x16>
   1dfc0:	2200      	movs	r2, #0
   1dfc2:	2308      	movs	r3, #8
   1dfc4:	704a      	strb	r2, [r1, #1]
   1dfc6:	700b      	strb	r3, [r1, #0]
   1dfc8:	6803      	ldr	r3, [r0, #0]
   1dfca:	2006      	movs	r0, #6
   1dfcc:	f8c1 3002 	str.w	r3, [r1, #2]
   1dfd0:	4770      	bx	lr
   1dfd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dfd6:	4770      	bx	lr

0001dfd8 <gnss_client_event_handler>:
   1dfd8:	f850 1b08 	ldr.w	r1, [r0], #8
   1dfdc:	0c09      	lsrs	r1, r1, #16
   1dfde:	f7fd b947 	b.w	1b270 <rpc_gnss_event_handler>
   1dfe2:	bf00      	nop

0001dfe4 <rpc_gnss_client_init>:
   1dfe4:	4801      	ldr	r0, [pc, #4]	; (1dfec <rpc_gnss_client_init+0x8>)
   1dfe6:	f7fd b877 	b.w	1b0d8 <rpc_client_register>
   1dfea:	bf00      	nop
   1dfec:	0002ab94 	.word	0x0002ab94

0001dff0 <rpc_gnss_client_request_alloc>:
   1dff0:	2300      	movs	r3, #0
   1dff2:	b510      	push	{r4, lr}
   1dff4:	b082      	sub	sp, #8
   1dff6:	9301      	str	r3, [sp, #4]
   1dff8:	b158      	cbz	r0, 1e012 <rpc_gnss_client_request_alloc+0x22>
   1dffa:	4604      	mov	r4, r0
   1dffc:	aa01      	add	r2, sp, #4
   1dffe:	2007      	movs	r0, #7
   1e000:	f7fd f8e4 	bl	1b1cc <rpc_message_alloc>
   1e004:	b918      	cbnz	r0, 1e00e <rpc_gnss_client_request_alloc+0x1e>
   1e006:	9b01      	ldr	r3, [sp, #4]
   1e008:	b10b      	cbz	r3, 1e00e <rpc_gnss_client_request_alloc+0x1e>
   1e00a:	3308      	adds	r3, #8
   1e00c:	6023      	str	r3, [r4, #0]
   1e00e:	b002      	add	sp, #8
   1e010:	bd10      	pop	{r4, pc}
   1e012:	2007      	movs	r0, #7
   1e014:	b002      	add	sp, #8
   1e016:	bd10      	pop	{r4, pc}

0001e018 <rpc_gnss_client_request_send>:
   1e018:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1e01c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1e020:	d10b      	bne.n	1e03a <rpc_gnss_client_request_send+0x22>
   1e022:	b160      	cbz	r0, 1e03e <rpc_gnss_client_request_send+0x26>
   1e024:	4603      	mov	r3, r0
   1e026:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1e02a:	2007      	movs	r0, #7
   1e02c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1e030:	f843 1d08 	str.w	r1, [r3, #-8]!
   1e034:	4619      	mov	r1, r3
   1e036:	f7fd b8b9 	b.w	1b1ac <rpc_message_send>
   1e03a:	200f      	movs	r0, #15
   1e03c:	4770      	bx	lr
   1e03e:	2007      	movs	r0, #7
   1e040:	4770      	bx	lr
   1e042:	bf00      	nop

0001e044 <rpc_gnss_client_message_free>:
   1e044:	b120      	cbz	r0, 1e050 <rpc_gnss_client_message_free+0xc>
   1e046:	f1a0 0108 	sub.w	r1, r0, #8
   1e04a:	2007      	movs	r0, #7
   1e04c:	f7fd b8ea 	b.w	1b224 <rpc_message_free>
   1e050:	2007      	movs	r0, #7
   1e052:	4770      	bx	lr

0001e054 <rpc_gnss_client_data_free>:
   1e054:	b118      	cbz	r0, 1e05e <rpc_gnss_client_data_free+0xa>
   1e056:	4601      	mov	r1, r0
   1e058:	2007      	movs	r0, #7
   1e05a:	f7fd b8ef 	b.w	1b23c <rpc_message_data_free>
   1e05e:	2007      	movs	r0, #7
   1e060:	4770      	bx	lr
   1e062:	bf00      	nop

0001e064 <datagram_handler_init>:
   1e064:	b510      	push	{r4, lr}
   1e066:	4604      	mov	r4, r0
   1e068:	200c      	movs	r0, #12
   1e06a:	f000 fdd7 	bl	1ec1c <nrf_malloc>
   1e06e:	60e0      	str	r0, [r4, #12]
   1e070:	b118      	cbz	r0, 1e07a <datagram_handler_init+0x16>
   1e072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e076:	f7ff bd45 	b.w	1db04 <linked_list_init>
   1e07a:	2004      	movs	r0, #4
   1e07c:	bd10      	pop	{r4, pc}
   1e07e:	bf00      	nop

0001e080 <datagram_handler_put>:
   1e080:	b570      	push	{r4, r5, r6, lr}
   1e082:	4606      	mov	r6, r0
   1e084:	2014      	movs	r0, #20
   1e086:	460d      	mov	r5, r1
   1e088:	f000 fdc8 	bl	1ec1c <nrf_malloc>
   1e08c:	b178      	cbz	r0, 1e0ae <datagram_handler_put+0x2e>
   1e08e:	682b      	ldr	r3, [r5, #0]
   1e090:	4604      	mov	r4, r0
   1e092:	6043      	str	r3, [r0, #4]
   1e094:	686b      	ldr	r3, [r5, #4]
   1e096:	4601      	mov	r1, r0
   1e098:	6083      	str	r3, [r0, #8]
   1e09a:	68eb      	ldr	r3, [r5, #12]
   1e09c:	60c3      	str	r3, [r0, #12]
   1e09e:	68ab      	ldr	r3, [r5, #8]
   1e0a0:	6103      	str	r3, [r0, #16]
   1e0a2:	68f0      	ldr	r0, [r6, #12]
   1e0a4:	f7ff fd38 	bl	1db18 <linked_list_push>
   1e0a8:	b920      	cbnz	r0, 1e0b4 <datagram_handler_put+0x34>
   1e0aa:	6868      	ldr	r0, [r5, #4]
   1e0ac:	bd70      	pop	{r4, r5, r6, pc}
   1e0ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e0b2:	bd70      	pop	{r4, r5, r6, pc}
   1e0b4:	4620      	mov	r0, r4
   1e0b6:	f000 fdbb 	bl	1ec30 <nrf_free>
   1e0ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e0be:	bd70      	pop	{r4, r5, r6, pc}

0001e0c0 <datagram_handler_get>:
   1e0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0c4:	4607      	mov	r7, r0
   1e0c6:	b084      	sub	sp, #16
   1e0c8:	68c0      	ldr	r0, [r0, #12]
   1e0ca:	460c      	mov	r4, r1
   1e0cc:	4616      	mov	r6, r2
   1e0ce:	f7ff fd43 	bl	1db58 <linked_list_peek>
   1e0d2:	2800      	cmp	r0, #0
   1e0d4:	d03b      	beq.n	1e14e <datagram_handler_get+0x8e>
   1e0d6:	6882      	ldr	r2, [r0, #8]
   1e0d8:	4605      	mov	r5, r0
   1e0da:	e9d4 0300 	ldrd	r0, r3, [r4]
   1e0de:	429a      	cmp	r2, r3
   1e0e0:	bf28      	it	cs
   1e0e2:	461a      	movcs	r2, r3
   1e0e4:	6062      	str	r2, [r4, #4]
   1e0e6:	b110      	cbz	r0, 1e0ee <datagram_handler_get+0x2e>
   1e0e8:	6869      	ldr	r1, [r5, #4]
   1e0ea:	f00b f9c2 	bl	29472 <memcpy>
   1e0ee:	68a0      	ldr	r0, [r4, #8]
   1e0f0:	b118      	cbz	r0, 1e0fa <datagram_handler_get+0x3a>
   1e0f2:	692b      	ldr	r3, [r5, #16]
   1e0f4:	b10b      	cbz	r3, 1e0fa <datagram_handler_get+0x3a>
   1e0f6:	68ea      	ldr	r2, [r5, #12]
   1e0f8:	bb02      	cbnz	r2, 1e13c <datagram_handler_get+0x7c>
   1e0fa:	2300      	movs	r3, #0
   1e0fc:	60e3      	str	r3, [r4, #12]
   1e0fe:	0732      	lsls	r2, r6, #28
   1e100:	d506      	bpl.n	1e110 <datagram_handler_get+0x50>
   1e102:	06b3      	lsls	r3, r6, #26
   1e104:	bf4c      	ite	mi
   1e106:	68a8      	ldrmi	r0, [r5, #8]
   1e108:	6860      	ldrpl	r0, [r4, #4]
   1e10a:	b004      	add	sp, #16
   1e10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e110:	68f8      	ldr	r0, [r7, #12]
   1e112:	f7ff fd17 	bl	1db44 <linked_list_pop>
   1e116:	4680      	mov	r8, r0
   1e118:	2800      	cmp	r0, #0
   1e11a:	d0f2      	beq.n	1e102 <datagram_handler_get+0x42>
   1e11c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1e120:	6902      	ldr	r2, [r0, #16]
   1e122:	9300      	str	r3, [sp, #0]
   1e124:	68c3      	ldr	r3, [r0, #12]
   1e126:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1e12a:	9303      	str	r3, [sp, #12]
   1e12c:	4668      	mov	r0, sp
   1e12e:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   1e132:	4798      	blx	r3
   1e134:	4640      	mov	r0, r8
   1e136:	f000 fd7b 	bl	1ec30 <nrf_free>
   1e13a:	e7e2      	b.n	1e102 <datagram_handler_get+0x42>
   1e13c:	68e3      	ldr	r3, [r4, #12]
   1e13e:	429a      	cmp	r2, r3
   1e140:	bf28      	it	cs
   1e142:	461a      	movcs	r2, r3
   1e144:	60e2      	str	r2, [r4, #12]
   1e146:	6929      	ldr	r1, [r5, #16]
   1e148:	f00b f993 	bl	29472 <memcpy>
   1e14c:	e7d7      	b.n	1e0fe <datagram_handler_get+0x3e>
   1e14e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e152:	e7da      	b.n	1e10a <datagram_handler_get+0x4a>

0001e154 <datagram_handler_available>:
   1e154:	b508      	push	{r3, lr}
   1e156:	68c0      	ldr	r0, [r0, #12]
   1e158:	f7ff fcfe 	bl	1db58 <linked_list_peek>
   1e15c:	b108      	cbz	r0, 1e162 <datagram_handler_available+0xe>
   1e15e:	6880      	ldr	r0, [r0, #8]
   1e160:	bd08      	pop	{r3, pc}
   1e162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e166:	bd08      	pop	{r3, pc}

0001e168 <datagram_handler_flush>:
   1e168:	b530      	push	{r4, r5, lr}
   1e16a:	4605      	mov	r5, r0
   1e16c:	68c0      	ldr	r0, [r0, #12]
   1e16e:	b085      	sub	sp, #20
   1e170:	b9a8      	cbnz	r0, 1e19e <datagram_handler_flush+0x36>
   1e172:	e01a      	b.n	1e1aa <datagram_handler_flush+0x42>
   1e174:	68e8      	ldr	r0, [r5, #12]
   1e176:	f7ff fce5 	bl	1db44 <linked_list_pop>
   1e17a:	4604      	mov	r4, r0
   1e17c:	b170      	cbz	r0, 1e19c <datagram_handler_flush+0x34>
   1e17e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1e182:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1e186:	e9cd 0100 	strd	r0, r1, [sp]
   1e18a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e18e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1e192:	4668      	mov	r0, sp
   1e194:	4798      	blx	r3
   1e196:	4620      	mov	r0, r4
   1e198:	f000 fd4a 	bl	1ec30 <nrf_free>
   1e19c:	68e8      	ldr	r0, [r5, #12]
   1e19e:	f7ff fce1 	bl	1db64 <linked_list_size_get>
   1e1a2:	2800      	cmp	r0, #0
   1e1a4:	d1e6      	bne.n	1e174 <datagram_handler_flush+0xc>
   1e1a6:	b005      	add	sp, #20
   1e1a8:	bd30      	pop	{r4, r5, pc}
   1e1aa:	2008      	movs	r0, #8
   1e1ac:	b005      	add	sp, #20
   1e1ae:	bd30      	pop	{r4, r5, pc}

0001e1b0 <datagram_handler_free>:
   1e1b0:	b530      	push	{r4, r5, lr}
   1e1b2:	4605      	mov	r5, r0
   1e1b4:	68c0      	ldr	r0, [r0, #12]
   1e1b6:	b085      	sub	sp, #20
   1e1b8:	b9a0      	cbnz	r0, 1e1e4 <datagram_handler_free+0x34>
   1e1ba:	e01c      	b.n	1e1f6 <datagram_handler_free+0x46>
   1e1bc:	f7ff fcc2 	bl	1db44 <linked_list_pop>
   1e1c0:	4604      	mov	r4, r0
   1e1c2:	b170      	cbz	r0, 1e1e2 <datagram_handler_free+0x32>
   1e1c4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1e1c8:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1e1cc:	e9cd 0100 	strd	r0, r1, [sp]
   1e1d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e1d4:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1e1d8:	4668      	mov	r0, sp
   1e1da:	4798      	blx	r3
   1e1dc:	4620      	mov	r0, r4
   1e1de:	f000 fd27 	bl	1ec30 <nrf_free>
   1e1e2:	68e8      	ldr	r0, [r5, #12]
   1e1e4:	f7ff fcbe 	bl	1db64 <linked_list_size_get>
   1e1e8:	4604      	mov	r4, r0
   1e1ea:	68e8      	ldr	r0, [r5, #12]
   1e1ec:	2c00      	cmp	r4, #0
   1e1ee:	d1e5      	bne.n	1e1bc <datagram_handler_free+0xc>
   1e1f0:	f000 fd1e 	bl	1ec30 <nrf_free>
   1e1f4:	60ec      	str	r4, [r5, #12]
   1e1f6:	b005      	add	sp, #20
   1e1f8:	bd30      	pop	{r4, r5, pc}
   1e1fa:	bf00      	nop

0001e1fc <null_handler_init>:
   1e1fc:	2000      	movs	r0, #0
   1e1fe:	4770      	bx	lr

0001e200 <null_handler_put>:
   1e200:	b510      	push	{r4, lr}
   1e202:	460c      	mov	r4, r1
   1e204:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1e208:	4620      	mov	r0, r4
   1e20a:	4798      	blx	r3
   1e20c:	6860      	ldr	r0, [r4, #4]
   1e20e:	bd10      	pop	{r4, pc}

0001e210 <null_handler_get>:
   1e210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e214:	4770      	bx	lr
   1e216:	bf00      	nop

0001e218 <null_handler_available>:
   1e218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e21c:	4770      	bx	lr
   1e21e:	bf00      	nop

0001e220 <null_handler_flush>:
   1e220:	2000      	movs	r0, #0
   1e222:	4770      	bx	lr

0001e224 <null_handler_free>:
   1e224:	4770      	bx	lr
   1e226:	bf00      	nop

0001e228 <packet_handler_create>:
   1e228:	2801      	cmp	r0, #1
   1e22a:	b538      	push	{r3, r4, r5, lr}
   1e22c:	460d      	mov	r5, r1
   1e22e:	4614      	mov	r4, r2
   1e230:	d00d      	beq.n	1e24e <packet_handler_create+0x26>
   1e232:	db11      	blt.n	1e258 <packet_handler_create+0x30>
   1e234:	2803      	cmp	r0, #3
   1e236:	dc0f      	bgt.n	1e258 <packet_handler_create+0x30>
   1e238:	2010      	movs	r0, #16
   1e23a:	f000 fcef 	bl	1ec1c <nrf_malloc>
   1e23e:	2218      	movs	r2, #24
   1e240:	b120      	cbz	r0, 1e24c <packet_handler_create+0x24>
   1e242:	4b08      	ldr	r3, [pc, #32]	; (1e264 <packet_handler_create+0x3c>)
   1e244:	6045      	str	r5, [r0, #4]
   1e246:	4413      	add	r3, r2
   1e248:	6084      	str	r4, [r0, #8]
   1e24a:	6003      	str	r3, [r0, #0]
   1e24c:	bd38      	pop	{r3, r4, r5, pc}
   1e24e:	2014      	movs	r0, #20
   1e250:	f000 fce4 	bl	1ec1c <nrf_malloc>
   1e254:	2230      	movs	r2, #48	; 0x30
   1e256:	e7f3      	b.n	1e240 <packet_handler_create+0x18>
   1e258:	200c      	movs	r0, #12
   1e25a:	f000 fcdf 	bl	1ec1c <nrf_malloc>
   1e25e:	2200      	movs	r2, #0
   1e260:	e7ee      	b.n	1e240 <packet_handler_create+0x18>
   1e262:	bf00      	nop
   1e264:	0002aba4 	.word	0x0002aba4

0001e268 <packet_handler_delete>:
   1e268:	b510      	push	{r4, lr}
   1e26a:	4604      	mov	r4, r0
   1e26c:	6803      	ldr	r3, [r0, #0]
   1e26e:	691b      	ldr	r3, [r3, #16]
   1e270:	4798      	blx	r3
   1e272:	6823      	ldr	r3, [r4, #0]
   1e274:	4620      	mov	r0, r4
   1e276:	695b      	ldr	r3, [r3, #20]
   1e278:	4798      	blx	r3
   1e27a:	4620      	mov	r0, r4
   1e27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e280:	f000 bcd6 	b.w	1ec30 <nrf_free>

0001e284 <stream_handler_init>:
   1e284:	b510      	push	{r4, lr}
   1e286:	4604      	mov	r4, r0
   1e288:	200c      	movs	r0, #12
   1e28a:	f000 fcc7 	bl	1ec1c <nrf_malloc>
   1e28e:	60e0      	str	r0, [r4, #12]
   1e290:	b128      	cbz	r0, 1e29e <stream_handler_init+0x1a>
   1e292:	2300      	movs	r3, #0
   1e294:	6123      	str	r3, [r4, #16]
   1e296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e29a:	f7ff bc33 	b.w	1db04 <linked_list_init>
   1e29e:	2004      	movs	r0, #4
   1e2a0:	bd10      	pop	{r4, pc}
   1e2a2:	bf00      	nop

0001e2a4 <stream_handler_put>:
   1e2a4:	b570      	push	{r4, r5, r6, lr}
   1e2a6:	4606      	mov	r6, r0
   1e2a8:	2014      	movs	r0, #20
   1e2aa:	460d      	mov	r5, r1
   1e2ac:	f000 fcb6 	bl	1ec1c <nrf_malloc>
   1e2b0:	b178      	cbz	r0, 1e2d2 <stream_handler_put+0x2e>
   1e2b2:	682b      	ldr	r3, [r5, #0]
   1e2b4:	4604      	mov	r4, r0
   1e2b6:	6043      	str	r3, [r0, #4]
   1e2b8:	686b      	ldr	r3, [r5, #4]
   1e2ba:	4601      	mov	r1, r0
   1e2bc:	6083      	str	r3, [r0, #8]
   1e2be:	68eb      	ldr	r3, [r5, #12]
   1e2c0:	60c3      	str	r3, [r0, #12]
   1e2c2:	68ab      	ldr	r3, [r5, #8]
   1e2c4:	6103      	str	r3, [r0, #16]
   1e2c6:	68f0      	ldr	r0, [r6, #12]
   1e2c8:	f7ff fc26 	bl	1db18 <linked_list_push>
   1e2cc:	b920      	cbnz	r0, 1e2d8 <stream_handler_put+0x34>
   1e2ce:	6868      	ldr	r0, [r5, #4]
   1e2d0:	bd70      	pop	{r4, r5, r6, pc}
   1e2d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e2d6:	bd70      	pop	{r4, r5, r6, pc}
   1e2d8:	4620      	mov	r0, r4
   1e2da:	f000 fca9 	bl	1ec30 <nrf_free>
   1e2de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e2e2:	bd70      	pop	{r4, r5, r6, pc}

0001e2e4 <stream_handler_get>:
   1e2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2e8:	4682      	mov	sl, r0
   1e2ea:	b089      	sub	sp, #36	; 0x24
   1e2ec:	68c0      	ldr	r0, [r0, #12]
   1e2ee:	4689      	mov	r9, r1
   1e2f0:	4693      	mov	fp, r2
   1e2f2:	f7ff fc31 	bl	1db58 <linked_list_peek>
   1e2f6:	2800      	cmp	r0, #0
   1e2f8:	d071      	beq.n	1e3de <stream_handler_get+0xfa>
   1e2fa:	4605      	mov	r5, r0
   1e2fc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1e300:	b120      	cbz	r0, 1e30c <stream_handler_get+0x28>
   1e302:	692b      	ldr	r3, [r5, #16]
   1e304:	b113      	cbz	r3, 1e30c <stream_handler_get+0x28>
   1e306:	68ea      	ldr	r2, [r5, #12]
   1e308:	2a00      	cmp	r2, #0
   1e30a:	d15d      	bne.n	1e3c8 <stream_handler_get+0xe4>
   1e30c:	2300      	movs	r3, #0
   1e30e:	f8c9 300c 	str.w	r3, [r9, #12]
   1e312:	f8d9 2000 	ldr.w	r2, [r9]
   1e316:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1e31a:	f8da 1010 	ldr.w	r1, [sl, #16]
   1e31e:	9203      	str	r2, [sp, #12]
   1e320:	f1b8 0f00 	cmp.w	r8, #0
   1e324:	d030      	beq.n	1e388 <stream_handler_get+0xa4>
   1e326:	2400      	movs	r4, #0
   1e328:	f00b 0320 	and.w	r3, fp, #32
   1e32c:	9301      	str	r3, [sp, #4]
   1e32e:	f00b 0b08 	and.w	fp, fp, #8
   1e332:	68ae      	ldr	r6, [r5, #8]
   1e334:	eba8 0304 	sub.w	r3, r8, r4
   1e338:	1a76      	subs	r6, r6, r1
   1e33a:	429e      	cmp	r6, r3
   1e33c:	4637      	mov	r7, r6
   1e33e:	bf28      	it	cs
   1e340:	461f      	movcs	r7, r3
   1e342:	b10a      	cbz	r2, 1e348 <stream_handler_get+0x64>
   1e344:	9a01      	ldr	r2, [sp, #4]
   1e346:	b1aa      	cbz	r2, 1e374 <stream_handler_get+0x90>
   1e348:	f1bb 0f00 	cmp.w	fp, #0
   1e34c:	d106      	bne.n	1e35c <stream_handler_get+0x78>
   1e34e:	429e      	cmp	r6, r3
   1e350:	d921      	bls.n	1e396 <stream_handler_get+0xb2>
   1e352:	f8da 3010 	ldr.w	r3, [sl, #16]
   1e356:	443b      	add	r3, r7
   1e358:	f8ca 3010 	str.w	r3, [sl, #16]
   1e35c:	4628      	mov	r0, r5
   1e35e:	f7ff fc03 	bl	1db68 <linked_list_get_next>
   1e362:	443c      	add	r4, r7
   1e364:	4605      	mov	r5, r0
   1e366:	b180      	cbz	r0, 1e38a <stream_handler_get+0xa6>
   1e368:	45a0      	cmp	r8, r4
   1e36a:	d90e      	bls.n	1e38a <stream_handler_get+0xa6>
   1e36c:	f8d9 2000 	ldr.w	r2, [r9]
   1e370:	2100      	movs	r1, #0
   1e372:	e7de      	b.n	1e332 <stream_handler_get+0x4e>
   1e374:	6868      	ldr	r0, [r5, #4]
   1e376:	9302      	str	r3, [sp, #8]
   1e378:	9b03      	ldr	r3, [sp, #12]
   1e37a:	4401      	add	r1, r0
   1e37c:	463a      	mov	r2, r7
   1e37e:	1918      	adds	r0, r3, r4
   1e380:	f00b f877 	bl	29472 <memcpy>
   1e384:	9b02      	ldr	r3, [sp, #8]
   1e386:	e7df      	b.n	1e348 <stream_handler_get+0x64>
   1e388:	4644      	mov	r4, r8
   1e38a:	4620      	mov	r0, r4
   1e38c:	f8c9 4004 	str.w	r4, [r9, #4]
   1e390:	b009      	add	sp, #36	; 0x24
   1e392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e396:	f8da 000c 	ldr.w	r0, [sl, #12]
   1e39a:	f7ff fbd3 	bl	1db44 <linked_list_pop>
   1e39e:	4606      	mov	r6, r0
   1e3a0:	b170      	cbz	r0, 1e3c0 <stream_handler_get+0xdc>
   1e3a2:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1e3a6:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   1e3aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1e3ae:	e9cd 1006 	strd	r1, r0, [sp, #24]
   1e3b2:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   1e3b6:	a804      	add	r0, sp, #16
   1e3b8:	4798      	blx	r3
   1e3ba:	4630      	mov	r0, r6
   1e3bc:	f000 fc38 	bl	1ec30 <nrf_free>
   1e3c0:	2300      	movs	r3, #0
   1e3c2:	f8ca 3010 	str.w	r3, [sl, #16]
   1e3c6:	e7c9      	b.n	1e35c <stream_handler_get+0x78>
   1e3c8:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1e3cc:	429a      	cmp	r2, r3
   1e3ce:	bf28      	it	cs
   1e3d0:	461a      	movcs	r2, r3
   1e3d2:	f8c9 200c 	str.w	r2, [r9, #12]
   1e3d6:	6929      	ldr	r1, [r5, #16]
   1e3d8:	f00b f84b 	bl	29472 <memcpy>
   1e3dc:	e799      	b.n	1e312 <stream_handler_get+0x2e>
   1e3de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e3e2:	e7d5      	b.n	1e390 <stream_handler_get+0xac>

0001e3e4 <stream_handler_available>:
   1e3e4:	b510      	push	{r4, lr}
   1e3e6:	4604      	mov	r4, r0
   1e3e8:	68c0      	ldr	r0, [r0, #12]
   1e3ea:	f7ff fbb5 	bl	1db58 <linked_list_peek>
   1e3ee:	b150      	cbz	r0, 1e406 <stream_handler_available+0x22>
   1e3f0:	6924      	ldr	r4, [r4, #16]
   1e3f2:	4264      	negs	r4, r4
   1e3f4:	6883      	ldr	r3, [r0, #8]
   1e3f6:	441c      	add	r4, r3
   1e3f8:	f7ff fbb6 	bl	1db68 <linked_list_get_next>
   1e3fc:	2800      	cmp	r0, #0
   1e3fe:	d1f9      	bne.n	1e3f4 <stream_handler_available+0x10>
   1e400:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1e404:	bd10      	pop	{r4, pc}
   1e406:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e40a:	bd10      	pop	{r4, pc}

0001e40c <stream_handler_flush>:
   1e40c:	b530      	push	{r4, r5, lr}
   1e40e:	4605      	mov	r5, r0
   1e410:	68c0      	ldr	r0, [r0, #12]
   1e412:	b085      	sub	sp, #20
   1e414:	b9a8      	cbnz	r0, 1e442 <stream_handler_flush+0x36>
   1e416:	e01a      	b.n	1e44e <stream_handler_flush+0x42>
   1e418:	68e8      	ldr	r0, [r5, #12]
   1e41a:	f7ff fb93 	bl	1db44 <linked_list_pop>
   1e41e:	4604      	mov	r4, r0
   1e420:	b170      	cbz	r0, 1e440 <stream_handler_flush+0x34>
   1e422:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1e426:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1e42a:	e9cd 0100 	strd	r0, r1, [sp]
   1e42e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e432:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1e436:	4668      	mov	r0, sp
   1e438:	4798      	blx	r3
   1e43a:	4620      	mov	r0, r4
   1e43c:	f000 fbf8 	bl	1ec30 <nrf_free>
   1e440:	68e8      	ldr	r0, [r5, #12]
   1e442:	f7ff fb8f 	bl	1db64 <linked_list_size_get>
   1e446:	2800      	cmp	r0, #0
   1e448:	d1e6      	bne.n	1e418 <stream_handler_flush+0xc>
   1e44a:	b005      	add	sp, #20
   1e44c:	bd30      	pop	{r4, r5, pc}
   1e44e:	2008      	movs	r0, #8
   1e450:	b005      	add	sp, #20
   1e452:	bd30      	pop	{r4, r5, pc}

0001e454 <stream_handler_free>:
   1e454:	b530      	push	{r4, r5, lr}
   1e456:	4605      	mov	r5, r0
   1e458:	68c0      	ldr	r0, [r0, #12]
   1e45a:	b085      	sub	sp, #20
   1e45c:	b9a0      	cbnz	r0, 1e488 <stream_handler_free+0x34>
   1e45e:	e01c      	b.n	1e49a <stream_handler_free+0x46>
   1e460:	f7ff fb70 	bl	1db44 <linked_list_pop>
   1e464:	4604      	mov	r4, r0
   1e466:	b170      	cbz	r0, 1e486 <stream_handler_free+0x32>
   1e468:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1e46c:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1e470:	e9cd 0100 	strd	r0, r1, [sp]
   1e474:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e478:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1e47c:	4668      	mov	r0, sp
   1e47e:	4798      	blx	r3
   1e480:	4620      	mov	r0, r4
   1e482:	f000 fbd5 	bl	1ec30 <nrf_free>
   1e486:	68e8      	ldr	r0, [r5, #12]
   1e488:	f7ff fb6c 	bl	1db64 <linked_list_size_get>
   1e48c:	4604      	mov	r4, r0
   1e48e:	68e8      	ldr	r0, [r5, #12]
   1e490:	2c00      	cmp	r4, #0
   1e492:	d1e5      	bne.n	1e460 <stream_handler_free+0xc>
   1e494:	f000 fbcc 	bl	1ec30 <nrf_free>
   1e498:	60ec      	str	r4, [r5, #12]
   1e49a:	b005      	add	sp, #20
   1e49c:	bd30      	pop	{r4, r5, pc}
   1e49e:	bf00      	nop

0001e4a0 <mem_free>:
   1e4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4a4:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1e574 <mem_free+0xd4>
   1e4a8:	b083      	sub	sp, #12
   1e4aa:	9000      	str	r0, [sp, #0]
   1e4ac:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   1e4b0:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1e4b4:	b12b      	cbz	r3, 1e4c2 <mem_free+0x22>
   1e4b6:	f8dc 2000 	ldr.w	r2, [ip]
   1e4ba:	9c00      	ldr	r4, [sp, #0]
   1e4bc:	7810      	ldrb	r0, [r2, #0]
   1e4be:	42a0      	cmp	r0, r4
   1e4c0:	d006      	beq.n	1e4d0 <mem_free+0x30>
   1e4c2:	f10c 0c0c 	add.w	ip, ip, #12
   1e4c6:	45e3      	cmp	fp, ip
   1e4c8:	d1f2      	bne.n	1e4b0 <mem_free+0x10>
   1e4ca:	b003      	add	sp, #12
   1e4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4d0:	f8dc a004 	ldr.w	sl, [ip, #4]
   1e4d4:	eb03 080a 	add.w	r8, r3, sl
   1e4d8:	45c2      	cmp	sl, r8
   1e4da:	d2f2      	bcs.n	1e4c2 <mem_free+0x22>
   1e4dc:	6853      	ldr	r3, [r2, #4]
   1e4de:	f8cd c004 	str.w	ip, [sp, #4]
   1e4e2:	46d6      	mov	lr, sl
   1e4e4:	469c      	mov	ip, r3
   1e4e6:	f8d2 9010 	ldr.w	r9, [r2, #16]
   1e4ea:	8997      	ldrh	r7, [r2, #12]
   1e4ec:	ebae 000a 	sub.w	r0, lr, sl
   1e4f0:	b3df      	cbz	r7, 1e56a <mem_free+0xca>
   1e4f2:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1e4f6:	4290      	cmp	r0, r2
   1e4f8:	d31c      	bcc.n	1e534 <mem_free+0x94>
   1e4fa:	4665      	mov	r5, ip
   1e4fc:	2400      	movs	r4, #0
   1e4fe:	f109 0304 	add.w	r3, r9, #4
   1e502:	e003      	b.n	1e50c <mem_free+0x6c>
   1e504:	885a      	ldrh	r2, [r3, #2]
   1e506:	3304      	adds	r3, #4
   1e508:	4282      	cmp	r2, r0
   1e50a:	d815      	bhi.n	1e538 <mem_free+0x98>
   1e50c:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   1e510:	3401      	adds	r4, #1
   1e512:	42a7      	cmp	r7, r4
   1e514:	fb02 5506 	mla	r5, r2, r6, r5
   1e518:	eba0 0002 	sub.w	r0, r0, r2
   1e51c:	461e      	mov	r6, r3
   1e51e:	d1f1      	bne.n	1e504 <mem_free+0x64>
   1e520:	2000      	movs	r0, #0
   1e522:	4281      	cmp	r1, r0
   1e524:	d00d      	beq.n	1e542 <mem_free+0xa2>
   1e526:	f10e 0e01 	add.w	lr, lr, #1
   1e52a:	45f0      	cmp	r8, lr
   1e52c:	d1de      	bne.n	1e4ec <mem_free+0x4c>
   1e52e:	f8dd c004 	ldr.w	ip, [sp, #4]
   1e532:	e7c6      	b.n	1e4c2 <mem_free+0x22>
   1e534:	4665      	mov	r5, ip
   1e536:	464e      	mov	r6, r9
   1e538:	8833      	ldrh	r3, [r6, #0]
   1e53a:	fb00 5003 	mla	r0, r0, r3, r5
   1e53e:	4281      	cmp	r1, r0
   1e540:	d1f1      	bne.n	1e526 <mem_free+0x86>
   1e542:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1e546:	f8dd c004 	ldr.w	ip, [sp, #4]
   1e54a:	d0ba      	beq.n	1e4c2 <mem_free+0x22>
   1e54c:	2301      	movs	r3, #1
   1e54e:	4a08      	ldr	r2, [pc, #32]	; (1e570 <mem_free+0xd0>)
   1e550:	ea4f 115e 	mov.w	r1, lr, lsr #5
   1e554:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1e558:	f00e 0e1f 	and.w	lr, lr, #31
   1e55c:	fa03 fe0e 	lsl.w	lr, r3, lr
   1e560:	ea4e 0000 	orr.w	r0, lr, r0
   1e564:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   1e568:	e7af      	b.n	1e4ca <mem_free+0x2a>
   1e56a:	4638      	mov	r0, r7
   1e56c:	e7d9      	b.n	1e522 <mem_free+0x82>
   1e56e:	bf00      	nop
   1e570:	20023544 	.word	0x20023544
   1e574:	20023588 	.word	0x20023588

0001e578 <mem_alloc.constprop.5>:
   1e578:	2800      	cmp	r0, #0
   1e57a:	d050      	beq.n	1e61e <mem_alloc.constprop.5+0xa6>
   1e57c:	4b6d      	ldr	r3, [pc, #436]	; (1e734 <mem_alloc.constprop.5+0x1bc>)
   1e57e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1e582:	4290      	cmp	r0, r2
   1e584:	d84b      	bhi.n	1e61e <mem_alloc.constprop.5+0xa6>
   1e586:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e58a:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   1e58e:	b083      	sub	sp, #12
   1e590:	f1bb 0f00 	cmp.w	fp, #0
   1e594:	d054      	beq.n	1e640 <mem_alloc.constprop.5+0xc8>
   1e596:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   1e59a:	4691      	mov	r9, r2
   1e59c:	2600      	movs	r6, #0
   1e59e:	f04f 0812 	mov.w	r8, #18
   1e5a2:	4f65      	ldr	r7, [pc, #404]	; (1e738 <mem_alloc.constprop.5+0x1c0>)
   1e5a4:	9201      	str	r2, [sp, #4]
   1e5a6:	f10b 0e11 	add.w	lr, fp, #17
   1e5aa:	eb06 0209 	add.w	r2, r6, r9
   1e5ae:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   1e5b2:	3201      	adds	r2, #1
   1e5b4:	0852      	lsrs	r2, r2, #1
   1e5b6:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   1e5ba:	f102 0112 	add.w	r1, r2, #18
   1e5be:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   1e5c2:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   1e5c6:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   1e5ca:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   1e5ce:	f8dc c004 	ldr.w	ip, [ip, #4]
   1e5d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1e5d6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1e5da:	f8da a010 	ldr.w	sl, [sl, #16]
   1e5de:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   1e5e2:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   1e5e6:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   1e5ea:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1e5ee:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   1e5f2:	6849      	ldr	r1, [r1, #4]
   1e5f4:	692d      	ldr	r5, [r5, #16]
   1e5f6:	6924      	ldr	r4, [r4, #16]
   1e5f8:	f8dc c004 	ldr.w	ip, [ip, #4]
   1e5fc:	4550      	cmp	r0, sl
   1e5fe:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   1e602:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   1e606:	d915      	bls.n	1e634 <mem_alloc.constprop.5+0xbc>
   1e608:	4288      	cmp	r0, r1
   1e60a:	d211      	bcs.n	1e630 <mem_alloc.constprop.5+0xb8>
   1e60c:	42a8      	cmp	r0, r5
   1e60e:	d908      	bls.n	1e622 <mem_alloc.constprop.5+0xaa>
   1e610:	1c56      	adds	r6, r2, #1
   1e612:	45b1      	cmp	r9, r6
   1e614:	f0c0 8087 	bcc.w	1e726 <mem_alloc.constprop.5+0x1ae>
   1e618:	f102 0813 	add.w	r8, r2, #19
   1e61c:	e7c5      	b.n	1e5aa <mem_alloc.constprop.5+0x32>
   1e61e:	2000      	movs	r0, #0
   1e620:	4770      	bx	lr
   1e622:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1e626:	454e      	cmp	r6, r9
   1e628:	d87d      	bhi.n	1e726 <mem_alloc.constprop.5+0x1ae>
   1e62a:	f102 0e11 	add.w	lr, r2, #17
   1e62e:	e7bc      	b.n	1e5aa <mem_alloc.constprop.5+0x32>
   1e630:	f109 0601 	add.w	r6, r9, #1
   1e634:	45b3      	cmp	fp, r6
   1e636:	d007      	beq.n	1e648 <mem_alloc.constprop.5+0xd0>
   1e638:	2e10      	cmp	r6, #16
   1e63a:	d001      	beq.n	1e640 <mem_alloc.constprop.5+0xc8>
   1e63c:	45b3      	cmp	fp, r6
   1e63e:	d808      	bhi.n	1e652 <mem_alloc.constprop.5+0xda>
   1e640:	2000      	movs	r0, #0
   1e642:	b003      	add	sp, #12
   1e644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e648:	9a01      	ldr	r2, [sp, #4]
   1e64a:	2a10      	cmp	r2, #16
   1e64c:	bf18      	it	ne
   1e64e:	4616      	movne	r6, r2
   1e650:	d0f6      	beq.n	1e640 <mem_alloc.constprop.5+0xc8>
   1e652:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1e73c <mem_alloc.constprop.5+0x1c4>
   1e656:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   1e65a:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   1e65e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1e662:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   1e666:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   1e66a:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1e66e:	691d      	ldr	r5, [r3, #16]
   1e670:	2c00      	cmp	r4, #0
   1e672:	d056      	beq.n	1e722 <mem_alloc.constprop.5+0x1aa>
   1e674:	462a      	mov	r2, r5
   1e676:	4670      	mov	r0, lr
   1e678:	00a4      	lsls	r4, r4, #2
   1e67a:	eb05 0904 	add.w	r9, r5, r4
   1e67e:	8851      	ldrh	r1, [r2, #2]
   1e680:	3204      	adds	r2, #4
   1e682:	4591      	cmp	r9, r2
   1e684:	4408      	add	r0, r1
   1e686:	d1fa      	bne.n	1e67e <mem_alloc.constprop.5+0x106>
   1e688:	1929      	adds	r1, r5, r4
   1e68a:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   1e68e:	4482      	add	sl, r0
   1e690:	4582      	cmp	sl, r0
   1e692:	d918      	bls.n	1e6c6 <mem_alloc.constprop.5+0x14e>
   1e694:	0941      	lsrs	r1, r0, #5
   1e696:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1e69a:	f000 041f 	and.w	r4, r0, #31
   1e69e:	fa22 f904 	lsr.w	r9, r2, r4
   1e6a2:	f019 0f01 	tst.w	r9, #1
   1e6a6:	d007      	beq.n	1e6b8 <mem_alloc.constprop.5+0x140>
   1e6a8:	e013      	b.n	1e6d2 <mem_alloc.constprop.5+0x15a>
   1e6aa:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1e6ae:	fa22 f904 	lsr.w	r9, r2, r4
   1e6b2:	f019 0f01 	tst.w	r9, #1
   1e6b6:	d10c      	bne.n	1e6d2 <mem_alloc.constprop.5+0x15a>
   1e6b8:	3001      	adds	r0, #1
   1e6ba:	4582      	cmp	sl, r0
   1e6bc:	ea4f 1150 	mov.w	r1, r0, lsr #5
   1e6c0:	f000 041f 	and.w	r4, r0, #31
   1e6c4:	d1f1      	bne.n	1e6aa <mem_alloc.constprop.5+0x132>
   1e6c6:	3601      	adds	r6, #1
   1e6c8:	455e      	cmp	r6, fp
   1e6ca:	f108 0808 	add.w	r8, r8, #8
   1e6ce:	d3c4      	bcc.n	1e65a <mem_alloc.constprop.5+0xe2>
   1e6d0:	e7b6      	b.n	1e640 <mem_alloc.constprop.5+0xc8>
   1e6d2:	2601      	movs	r6, #1
   1e6d4:	fa06 f404 	lsl.w	r4, r6, r4
   1e6d8:	899e      	ldrh	r6, [r3, #12]
   1e6da:	ea22 0204 	bic.w	r2, r2, r4
   1e6de:	eba0 000e 	sub.w	r0, r0, lr
   1e6e2:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   1e6e6:	685c      	ldr	r4, [r3, #4]
   1e6e8:	2e00      	cmp	r6, #0
   1e6ea:	d0a9      	beq.n	1e640 <mem_alloc.constprop.5+0xc8>
   1e6ec:	886a      	ldrh	r2, [r5, #2]
   1e6ee:	4282      	cmp	r2, r0
   1e6f0:	d811      	bhi.n	1e716 <mem_alloc.constprop.5+0x19e>
   1e6f2:	2100      	movs	r1, #0
   1e6f4:	1d2b      	adds	r3, r5, #4
   1e6f6:	e003      	b.n	1e700 <mem_alloc.constprop.5+0x188>
   1e6f8:	885a      	ldrh	r2, [r3, #2]
   1e6fa:	3304      	adds	r3, #4
   1e6fc:	4282      	cmp	r2, r0
   1e6fe:	d80a      	bhi.n	1e716 <mem_alloc.constprop.5+0x19e>
   1e700:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1e704:	3101      	adds	r1, #1
   1e706:	428e      	cmp	r6, r1
   1e708:	fb02 4405 	mla	r4, r2, r5, r4
   1e70c:	eba0 0002 	sub.w	r0, r0, r2
   1e710:	461d      	mov	r5, r3
   1e712:	d1f1      	bne.n	1e6f8 <mem_alloc.constprop.5+0x180>
   1e714:	e794      	b.n	1e640 <mem_alloc.constprop.5+0xc8>
   1e716:	882b      	ldrh	r3, [r5, #0]
   1e718:	fb00 4003 	mla	r0, r0, r3, r4
   1e71c:	b003      	add	sp, #12
   1e71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e722:	4670      	mov	r0, lr
   1e724:	e7b0      	b.n	1e688 <mem_alloc.constprop.5+0x110>
   1e726:	f1bb 0f10 	cmp.w	fp, #16
   1e72a:	bf08      	it	eq
   1e72c:	260f      	moveq	r6, #15
   1e72e:	d090      	beq.n	1e652 <mem_alloc.constprop.5+0xda>
   1e730:	e786      	b.n	1e640 <mem_alloc.constprop.5+0xc8>
   1e732:	bf00      	nop
   1e734:	200235c4 	.word	0x200235c4
   1e738:	20023588 	.word	0x20023588
   1e73c:	20023544 	.word	0x20023544

0001e740 <mem_alloc.constprop.4>:
   1e740:	2800      	cmp	r0, #0
   1e742:	d04c      	beq.n	1e7de <mem_alloc.constprop.4+0x9e>
   1e744:	4b6b      	ldr	r3, [pc, #428]	; (1e8f4 <mem_alloc.constprop.4+0x1b4>)
   1e746:	681a      	ldr	r2, [r3, #0]
   1e748:	4290      	cmp	r0, r2
   1e74a:	d848      	bhi.n	1e7de <mem_alloc.constprop.4+0x9e>
   1e74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e750:	685f      	ldr	r7, [r3, #4]
   1e752:	b083      	sub	sp, #12
   1e754:	9700      	str	r7, [sp, #0]
   1e756:	2f00      	cmp	r7, #0
   1e758:	d051      	beq.n	1e7fe <mem_alloc.constprop.4+0xbe>
   1e75a:	1e7a      	subs	r2, r7, #1
   1e75c:	4696      	mov	lr, r2
   1e75e:	2100      	movs	r1, #0
   1e760:	f04f 0c01 	mov.w	ip, #1
   1e764:	4c64      	ldr	r4, [pc, #400]	; (1e8f8 <mem_alloc.constprop.4+0x1b8>)
   1e766:	9201      	str	r2, [sp, #4]
   1e768:	eb01 020e 	add.w	r2, r1, lr
   1e76c:	3201      	adds	r2, #1
   1e76e:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   1e772:	0852      	lsrs	r2, r2, #1
   1e774:	f102 0801 	add.w	r8, r2, #1
   1e778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1e77c:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   1e780:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   1e784:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   1e788:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   1e78c:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   1e790:	f8d9 9004 	ldr.w	r9, [r9, #4]
   1e794:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   1e798:	f8da a010 	ldr.w	sl, [sl, #16]
   1e79c:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   1e7a0:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   1e7a4:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   1e7a8:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   1e7ac:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   1e7b0:	6936      	ldr	r6, [r6, #16]
   1e7b2:	f8db b004 	ldr.w	fp, [fp, #4]
   1e7b6:	692d      	ldr	r5, [r5, #16]
   1e7b8:	f8d9 9004 	ldr.w	r9, [r9, #4]
   1e7bc:	4550      	cmp	r0, sl
   1e7be:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   1e7c2:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   1e7c6:	d913      	bls.n	1e7f0 <mem_alloc.constprop.4+0xb0>
   1e7c8:	42a8      	cmp	r0, r5
   1e7ca:	d210      	bcs.n	1e7ee <mem_alloc.constprop.4+0xae>
   1e7cc:	42b0      	cmp	r0, r6
   1e7ce:	d908      	bls.n	1e7e2 <mem_alloc.constprop.4+0xa2>
   1e7d0:	45c6      	cmp	lr, r8
   1e7d2:	4641      	mov	r1, r8
   1e7d4:	f0c0 8087 	bcc.w	1e8e6 <mem_alloc.constprop.4+0x1a6>
   1e7d8:	f108 0c01 	add.w	ip, r8, #1
   1e7dc:	e7c4      	b.n	1e768 <mem_alloc.constprop.4+0x28>
   1e7de:	2000      	movs	r0, #0
   1e7e0:	4770      	bx	lr
   1e7e2:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   1e7e6:	4571      	cmp	r1, lr
   1e7e8:	d87d      	bhi.n	1e8e6 <mem_alloc.constprop.4+0x1a6>
   1e7ea:	4617      	mov	r7, r2
   1e7ec:	e7bc      	b.n	1e768 <mem_alloc.constprop.4+0x28>
   1e7ee:	4639      	mov	r1, r7
   1e7f0:	9a00      	ldr	r2, [sp, #0]
   1e7f2:	428a      	cmp	r2, r1
   1e7f4:	d007      	beq.n	1e806 <mem_alloc.constprop.4+0xc6>
   1e7f6:	2910      	cmp	r1, #16
   1e7f8:	d001      	beq.n	1e7fe <mem_alloc.constprop.4+0xbe>
   1e7fa:	428a      	cmp	r2, r1
   1e7fc:	d808      	bhi.n	1e810 <mem_alloc.constprop.4+0xd0>
   1e7fe:	2000      	movs	r0, #0
   1e800:	b003      	add	sp, #12
   1e802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e806:	9a01      	ldr	r2, [sp, #4]
   1e808:	2a10      	cmp	r2, #16
   1e80a:	bf18      	it	ne
   1e80c:	4611      	movne	r1, r2
   1e80e:	d0f6      	beq.n	1e7fe <mem_alloc.constprop.4+0xbe>
   1e810:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1e8fc <mem_alloc.constprop.4+0x1bc>
   1e814:	f8dd 9000 	ldr.w	r9, [sp]
   1e818:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   1e81c:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   1e820:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1e824:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   1e828:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1e82c:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1e830:	691f      	ldr	r7, [r3, #16]
   1e832:	2e00      	cmp	r6, #0
   1e834:	d055      	beq.n	1e8e2 <mem_alloc.constprop.4+0x1a2>
   1e836:	463a      	mov	r2, r7
   1e838:	4670      	mov	r0, lr
   1e83a:	00b6      	lsls	r6, r6, #2
   1e83c:	eb07 0a06 	add.w	sl, r7, r6
   1e840:	8855      	ldrh	r5, [r2, #2]
   1e842:	3204      	adds	r2, #4
   1e844:	4592      	cmp	sl, r2
   1e846:	4428      	add	r0, r5
   1e848:	d1fa      	bne.n	1e840 <mem_alloc.constprop.4+0x100>
   1e84a:	19bd      	adds	r5, r7, r6
   1e84c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   1e850:	4483      	add	fp, r0
   1e852:	4583      	cmp	fp, r0
   1e854:	d918      	bls.n	1e888 <mem_alloc.constprop.4+0x148>
   1e856:	0945      	lsrs	r5, r0, #5
   1e858:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   1e85c:	f000 061f 	and.w	r6, r0, #31
   1e860:	fa22 fa06 	lsr.w	sl, r2, r6
   1e864:	f01a 0f01 	tst.w	sl, #1
   1e868:	d007      	beq.n	1e87a <mem_alloc.constprop.4+0x13a>
   1e86a:	e013      	b.n	1e894 <mem_alloc.constprop.4+0x154>
   1e86c:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   1e870:	fa22 fa06 	lsr.w	sl, r2, r6
   1e874:	f01a 0f01 	tst.w	sl, #1
   1e878:	d10c      	bne.n	1e894 <mem_alloc.constprop.4+0x154>
   1e87a:	3001      	adds	r0, #1
   1e87c:	4583      	cmp	fp, r0
   1e87e:	ea4f 1550 	mov.w	r5, r0, lsr #5
   1e882:	f000 061f 	and.w	r6, r0, #31
   1e886:	d1f1      	bne.n	1e86c <mem_alloc.constprop.4+0x12c>
   1e888:	3101      	adds	r1, #1
   1e88a:	4549      	cmp	r1, r9
   1e88c:	f108 0808 	add.w	r8, r8, #8
   1e890:	d3c4      	bcc.n	1e81c <mem_alloc.constprop.4+0xdc>
   1e892:	e7b4      	b.n	1e7fe <mem_alloc.constprop.4+0xbe>
   1e894:	2101      	movs	r1, #1
   1e896:	40b1      	lsls	r1, r6
   1e898:	899e      	ldrh	r6, [r3, #12]
   1e89a:	ea22 0201 	bic.w	r2, r2, r1
   1e89e:	eba0 000e 	sub.w	r0, r0, lr
   1e8a2:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   1e8a6:	685c      	ldr	r4, [r3, #4]
   1e8a8:	2e00      	cmp	r6, #0
   1e8aa:	d0a8      	beq.n	1e7fe <mem_alloc.constprop.4+0xbe>
   1e8ac:	887a      	ldrh	r2, [r7, #2]
   1e8ae:	4282      	cmp	r2, r0
   1e8b0:	d811      	bhi.n	1e8d6 <mem_alloc.constprop.4+0x196>
   1e8b2:	2100      	movs	r1, #0
   1e8b4:	1d3b      	adds	r3, r7, #4
   1e8b6:	e003      	b.n	1e8c0 <mem_alloc.constprop.4+0x180>
   1e8b8:	885a      	ldrh	r2, [r3, #2]
   1e8ba:	3304      	adds	r3, #4
   1e8bc:	4282      	cmp	r2, r0
   1e8be:	d80a      	bhi.n	1e8d6 <mem_alloc.constprop.4+0x196>
   1e8c0:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1e8c4:	3101      	adds	r1, #1
   1e8c6:	428e      	cmp	r6, r1
   1e8c8:	eba0 0002 	sub.w	r0, r0, r2
   1e8cc:	fb02 4405 	mla	r4, r2, r5, r4
   1e8d0:	461f      	mov	r7, r3
   1e8d2:	d1f1      	bne.n	1e8b8 <mem_alloc.constprop.4+0x178>
   1e8d4:	e793      	b.n	1e7fe <mem_alloc.constprop.4+0xbe>
   1e8d6:	883b      	ldrh	r3, [r7, #0]
   1e8d8:	fb00 4003 	mla	r0, r0, r3, r4
   1e8dc:	b003      	add	sp, #12
   1e8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8e2:	4670      	mov	r0, lr
   1e8e4:	e7b1      	b.n	1e84a <mem_alloc.constprop.4+0x10a>
   1e8e6:	9a00      	ldr	r2, [sp, #0]
   1e8e8:	2a10      	cmp	r2, #16
   1e8ea:	bf08      	it	eq
   1e8ec:	210f      	moveq	r1, #15
   1e8ee:	d08f      	beq.n	1e810 <mem_alloc.constprop.4+0xd0>
   1e8f0:	e785      	b.n	1e7fe <mem_alloc.constprop.4+0xbe>
   1e8f2:	bf00      	nop
   1e8f4:	200235c4 	.word	0x200235c4
   1e8f8:	20023588 	.word	0x20023588
   1e8fc:	20023544 	.word	0x20023544

0001e900 <nrf_mem_init>:
   1e900:	b570      	push	{r4, r5, r6, lr}
   1e902:	2200      	movs	r2, #0
   1e904:	2501      	movs	r5, #1
   1e906:	4833      	ldr	r0, [pc, #204]	; (1e9d4 <nrf_mem_init+0xd4>)
   1e908:	0951      	lsrs	r1, r2, #5
   1e90a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1e90e:	f002 031f 	and.w	r3, r2, #31
   1e912:	fa05 f303 	lsl.w	r3, r5, r3
   1e916:	3201      	adds	r2, #1
   1e918:	4323      	orrs	r3, r4
   1e91a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1e91e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   1e922:	d1f1      	bne.n	1e908 <nrf_mem_init+0x8>
   1e924:	2400      	movs	r4, #0
   1e926:	4b2c      	ldr	r3, [pc, #176]	; (1e9d8 <nrf_mem_init+0xd8>)
   1e928:	4621      	mov	r1, r4
   1e92a:	223c      	movs	r2, #60	; 0x3c
   1e92c:	482b      	ldr	r0, [pc, #172]	; (1e9dc <nrf_mem_init+0xdc>)
   1e92e:	601c      	str	r4, [r3, #0]
   1e930:	f00a fdd9 	bl	294e6 <memset>
   1e934:	2110      	movs	r1, #16
   1e936:	2205      	movs	r2, #5
   1e938:	4b29      	ldr	r3, [pc, #164]	; (1e9e0 <nrf_mem_init+0xe0>)
   1e93a:	4e2a      	ldr	r6, [pc, #168]	; (1e9e4 <nrf_mem_init+0xe4>)
   1e93c:	e9c3 4400 	strd	r4, r4, [r3]
   1e940:	60d9      	str	r1, [r3, #12]
   1e942:	6159      	str	r1, [r3, #20]
   1e944:	61d9      	str	r1, [r3, #28]
   1e946:	6259      	str	r1, [r3, #36]	; 0x24
   1e948:	62d9      	str	r1, [r3, #44]	; 0x2c
   1e94a:	6359      	str	r1, [r3, #52]	; 0x34
   1e94c:	63d9      	str	r1, [r3, #60]	; 0x3c
   1e94e:	6459      	str	r1, [r3, #68]	; 0x44
   1e950:	64d9      	str	r1, [r3, #76]	; 0x4c
   1e952:	6559      	str	r1, [r3, #84]	; 0x54
   1e954:	65d9      	str	r1, [r3, #92]	; 0x5c
   1e956:	6659      	str	r1, [r3, #100]	; 0x64
   1e958:	66d9      	str	r1, [r3, #108]	; 0x6c
   1e95a:	6759      	str	r1, [r3, #116]	; 0x74
   1e95c:	67d9      	str	r1, [r3, #124]	; 0x7c
   1e95e:	609a      	str	r2, [r3, #8]
   1e960:	611a      	str	r2, [r3, #16]
   1e962:	619a      	str	r2, [r3, #24]
   1e964:	621a      	str	r2, [r3, #32]
   1e966:	629a      	str	r2, [r3, #40]	; 0x28
   1e968:	631a      	str	r2, [r3, #48]	; 0x30
   1e96a:	639a      	str	r2, [r3, #56]	; 0x38
   1e96c:	641a      	str	r2, [r3, #64]	; 0x40
   1e96e:	649a      	str	r2, [r3, #72]	; 0x48
   1e970:	651a      	str	r2, [r3, #80]	; 0x50
   1e972:	659a      	str	r2, [r3, #88]	; 0x58
   1e974:	661a      	str	r2, [r3, #96]	; 0x60
   1e976:	669a      	str	r2, [r3, #104]	; 0x68
   1e978:	671a      	str	r2, [r3, #112]	; 0x70
   1e97a:	679a      	str	r2, [r3, #120]	; 0x78
   1e97c:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   1e980:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   1e984:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   1e988:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   1e98c:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   1e990:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   1e994:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   1e998:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   1e99c:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   1e9a0:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   1e9a4:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   1e9a8:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   1e9ac:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   1e9b0:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   1e9b4:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   1e9b8:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   1e9bc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1e9c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1e9c4:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   1e9c8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1e9cc:	4620      	mov	r0, r4
   1e9ce:	7035      	strb	r5, [r6, #0]
   1e9d0:	bd70      	pop	{r4, r5, r6, pc}
   1e9d2:	bf00      	nop
   1e9d4:	20023544 	.word	0x20023544
   1e9d8:	20023584 	.word	0x20023584
   1e9dc:	20023588 	.word	0x20023588
   1e9e0:	200235c4 	.word	0x200235c4
   1e9e4:	2002af77 	.word	0x2002af77

0001e9e8 <nrf_mem_register>:
   1e9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9ec:	4b87      	ldr	r3, [pc, #540]	; (1ec0c <nrf_mem_register+0x224>)
   1e9ee:	b087      	sub	sp, #28
   1e9f0:	781b      	ldrb	r3, [r3, #0]
   1e9f2:	2b00      	cmp	r3, #0
   1e9f4:	f000 808c 	beq.w	1eb10 <nrf_mem_register+0x128>
   1e9f8:	b328      	cbz	r0, 1ea46 <nrf_mem_register+0x5e>
   1e9fa:	b321      	cbz	r1, 1ea46 <nrf_mem_register+0x5e>
   1e9fc:	780b      	ldrb	r3, [r1, #0]
   1e9fe:	f8df 8218 	ldr.w	r8, [pc, #536]	; 1ec18 <nrf_mem_register+0x230>
   1ea02:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1ea06:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1ea0a:	685b      	ldr	r3, [r3, #4]
   1ea0c:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   1ea10:	4463      	add	r3, ip
   1ea12:	2b10      	cmp	r3, #16
   1ea14:	d811      	bhi.n	1ea3a <nrf_mem_register+0x52>
   1ea16:	f04f 0a00 	mov.w	sl, #0
   1ea1a:	4689      	mov	r9, r1
   1ea1c:	4b7c      	ldr	r3, [pc, #496]	; (1ec10 <nrf_mem_register+0x228>)
   1ea1e:	4f7d      	ldr	r7, [pc, #500]	; (1ec14 <nrf_mem_register+0x22c>)
   1ea20:	681b      	ldr	r3, [r3, #0]
   1ea22:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   1ea26:	9300      	str	r3, [sp, #0]
   1ea28:	68b9      	ldr	r1, [r7, #8]
   1ea2a:	b191      	cbz	r1, 1ea52 <nrf_mem_register+0x6a>
   1ea2c:	f10a 0a01 	add.w	sl, sl, #1
   1ea30:	f1ba 0f05 	cmp.w	sl, #5
   1ea34:	f107 070c 	add.w	r7, r7, #12
   1ea38:	d1f6      	bne.n	1ea28 <nrf_mem_register+0x40>
   1ea3a:	f248 1b07 	movw	fp, #33031	; 0x8107
   1ea3e:	4658      	mov	r0, fp
   1ea40:	b007      	add	sp, #28
   1ea42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea46:	f248 1b0e 	movw	fp, #33038	; 0x810e
   1ea4a:	4658      	mov	r0, fp
   1ea4c:	b007      	add	sp, #28
   1ea4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea52:	f1bc 0f00 	cmp.w	ip, #0
   1ea56:	d061      	beq.n	1eb1c <nrf_mem_register+0x134>
   1ea58:	460d      	mov	r5, r1
   1ea5a:	460c      	mov	r4, r1
   1ea5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1ea60:	eb0e 0b03 	add.w	fp, lr, r3
   1ea64:	885a      	ldrh	r2, [r3, #2]
   1ea66:	f833 6b04 	ldrh.w	r6, [r3], #4
   1ea6a:	4415      	add	r5, r2
   1ea6c:	459b      	cmp	fp, r3
   1ea6e:	fb02 4406 	mla	r4, r2, r6, r4
   1ea72:	d1f7      	bne.n	1ea64 <nrf_mem_register+0x7c>
   1ea74:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1ea78:	42a3      	cmp	r3, r4
   1ea7a:	d3d7      	bcc.n	1ea2c <nrf_mem_register+0x44>
   1ea7c:	9b00      	ldr	r3, [sp, #0]
   1ea7e:	442b      	add	r3, r5
   1ea80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1ea84:	d2d2      	bcs.n	1ea2c <nrf_mem_register+0x44>
   1ea86:	4c63      	ldr	r4, [pc, #396]	; (1ec14 <nrf_mem_register+0x22c>)
   1ea88:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   1ea8c:	0092      	lsls	r2, r2, #2
   1ea8e:	f8c0 a000 	str.w	sl, [r0]
   1ea92:	18a0      	adds	r0, r4, r2
   1ea94:	f844 9002 	str.w	r9, [r4, r2]
   1ea98:	9a00      	ldr	r2, [sp, #0]
   1ea9a:	468b      	mov	fp, r1
   1ea9c:	e9c0 2501 	strd	r2, r5, [r0, #4]
   1eaa0:	f899 2001 	ldrb.w	r2, [r9, #1]
   1eaa4:	485a      	ldr	r0, [pc, #360]	; (1ec10 <nrf_mem_register+0x228>)
   1eaa6:	2a01      	cmp	r2, #1
   1eaa8:	6003      	str	r3, [r0, #0]
   1eaaa:	d0c8      	beq.n	1ea3e <nrf_mem_register+0x56>
   1eaac:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   1eab0:	2b00      	cmp	r3, #0
   1eab2:	d0c4      	beq.n	1ea3e <nrf_mem_register+0x56>
   1eab4:	2500      	movs	r5, #0
   1eab6:	f8cd 9004 	str.w	r9, [sp, #4]
   1eaba:	f8cd a00c 	str.w	sl, [sp, #12]
   1eabe:	f8cd b014 	str.w	fp, [sp, #20]
   1eac2:	9b01      	ldr	r3, [sp, #4]
   1eac4:	781f      	ldrb	r7, [r3, #0]
   1eac6:	691a      	ldr	r2, [r3, #16]
   1eac8:	013b      	lsls	r3, r7, #4
   1eaca:	eb03 0907 	add.w	r9, r3, r7
   1eace:	9300      	str	r3, [sp, #0]
   1ead0:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   1ead4:	6859      	ldr	r1, [r3, #4]
   1ead6:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   1eada:	9102      	str	r1, [sp, #8]
   1eadc:	bb39      	cbnz	r1, 1eb2e <nrf_mem_register+0x146>
   1eade:	9a03      	ldr	r2, [sp, #12]
   1eae0:	60dd      	str	r5, [r3, #12]
   1eae2:	609a      	str	r2, [r3, #8]
   1eae4:	9b00      	ldr	r3, [sp, #0]
   1eae6:	443b      	add	r3, r7
   1eae8:	461f      	mov	r7, r3
   1eaea:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   1eaee:	684b      	ldr	r3, [r1, #4]
   1eaf0:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   1eaf4:	3301      	adds	r3, #1
   1eaf6:	4294      	cmp	r4, r2
   1eaf8:	604b      	str	r3, [r1, #4]
   1eafa:	d912      	bls.n	1eb22 <nrf_mem_register+0x13a>
   1eafc:	9b01      	ldr	r3, [sp, #4]
   1eafe:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   1eb02:	899b      	ldrh	r3, [r3, #12]
   1eb04:	3501      	adds	r5, #1
   1eb06:	429d      	cmp	r5, r3
   1eb08:	d3db      	bcc.n	1eac2 <nrf_mem_register+0xda>
   1eb0a:	f8dd b014 	ldr.w	fp, [sp, #20]
   1eb0e:	e796      	b.n	1ea3e <nrf_mem_register+0x56>
   1eb10:	f248 1b08 	movw	fp, #33032	; 0x8108
   1eb14:	4658      	mov	r0, fp
   1eb16:	b007      	add	sp, #28
   1eb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb1c:	9b00      	ldr	r3, [sp, #0]
   1eb1e:	4665      	mov	r5, ip
   1eb20:	e7ae      	b.n	1ea80 <nrf_mem_register+0x98>
   1eb22:	9b01      	ldr	r3, [sp, #4]
   1eb24:	3501      	adds	r5, #1
   1eb26:	899b      	ldrh	r3, [r3, #12]
   1eb28:	42ab      	cmp	r3, r5
   1eb2a:	d8ca      	bhi.n	1eac2 <nrf_mem_register+0xda>
   1eb2c:	e7ed      	b.n	1eb0a <nrf_mem_register+0x122>
   1eb2e:	2600      	movs	r6, #0
   1eb30:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   1eb34:	9504      	str	r5, [sp, #16]
   1eb36:	eb06 000a 	add.w	r0, r6, sl
   1eb3a:	eb09 0206 	add.w	r2, r9, r6
   1eb3e:	3201      	adds	r2, #1
   1eb40:	3001      	adds	r0, #1
   1eb42:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   1eb46:	0840      	lsrs	r0, r0, #1
   1eb48:	4d32      	ldr	r5, [pc, #200]	; (1ec14 <nrf_mem_register+0x22c>)
   1eb4a:	eb09 0100 	add.w	r1, r9, r0
   1eb4e:	eb09 030a 	add.w	r3, r9, sl
   1eb52:	3101      	adds	r1, #1
   1eb54:	3301      	adds	r3, #1
   1eb56:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1eb5a:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   1eb5e:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   1eb62:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   1eb66:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   1eb6a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   1eb6e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1eb72:	f8db b010 	ldr.w	fp, [fp, #16]
   1eb76:	6852      	ldr	r2, [r2, #4]
   1eb78:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   1eb7c:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   1eb80:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   1eb84:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1eb88:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   1eb8c:	f8de e010 	ldr.w	lr, [lr, #16]
   1eb90:	6849      	ldr	r1, [r1, #4]
   1eb92:	f8dc c010 	ldr.w	ip, [ip, #16]
   1eb96:	685b      	ldr	r3, [r3, #4]
   1eb98:	4294      	cmp	r4, r2
   1eb9a:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   1eb9e:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   1eba2:	d92d      	bls.n	1ec00 <nrf_mem_register+0x218>
   1eba4:	429c      	cmp	r4, r3
   1eba6:	d22d      	bcs.n	1ec04 <nrf_mem_register+0x21c>
   1eba8:	428c      	cmp	r4, r1
   1ebaa:	d924      	bls.n	1ebf6 <nrf_mem_register+0x20e>
   1ebac:	1c46      	adds	r6, r0, #1
   1ebae:	45b2      	cmp	sl, r6
   1ebb0:	d2c1      	bcs.n	1eb36 <nrf_mem_register+0x14e>
   1ebb2:	2610      	movs	r6, #16
   1ebb4:	9d04      	ldr	r5, [sp, #16]
   1ebb6:	9a02      	ldr	r2, [sp, #8]
   1ebb8:	42b2      	cmp	r2, r6
   1ebba:	d911      	bls.n	1ebe0 <nrf_mem_register+0x1f8>
   1ebbc:	9b00      	ldr	r3, [sp, #0]
   1ebbe:	443b      	add	r3, r7
   1ebc0:	441a      	add	r2, r3
   1ebc2:	4433      	add	r3, r6
   1ebc4:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   1ebc8:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   1ebcc:	2208      	movs	r2, #8
   1ebce:	4651      	mov	r1, sl
   1ebd0:	eb0a 0002 	add.w	r0, sl, r2
   1ebd4:	f1aa 0a08 	sub.w	sl, sl, #8
   1ebd8:	f00a fc4b 	bl	29472 <memcpy>
   1ebdc:	45d1      	cmp	r9, sl
   1ebde:	d1f5      	bne.n	1ebcc <nrf_mem_register+0x1e4>
   1ebe0:	9b00      	ldr	r3, [sp, #0]
   1ebe2:	9903      	ldr	r1, [sp, #12]
   1ebe4:	443b      	add	r3, r7
   1ebe6:	4433      	add	r3, r6
   1ebe8:	3301      	adds	r3, #1
   1ebea:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1ebee:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   1ebf2:	6055      	str	r5, [r2, #4]
   1ebf4:	e776      	b.n	1eae4 <nrf_mem_register+0xfc>
   1ebf6:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   1ebfa:	4556      	cmp	r6, sl
   1ebfc:	d99b      	bls.n	1eb36 <nrf_mem_register+0x14e>
   1ebfe:	e7d8      	b.n	1ebb2 <nrf_mem_register+0x1ca>
   1ec00:	9d04      	ldr	r5, [sp, #16]
   1ec02:	e7d8      	b.n	1ebb6 <nrf_mem_register+0x1ce>
   1ec04:	9d04      	ldr	r5, [sp, #16]
   1ec06:	f10a 0601 	add.w	r6, sl, #1
   1ec0a:	e7d4      	b.n	1ebb6 <nrf_mem_register+0x1ce>
   1ec0c:	2002af77 	.word	0x2002af77
   1ec10:	20023584 	.word	0x20023584
   1ec14:	20023588 	.word	0x20023588
   1ec18:	200235c4 	.word	0x200235c4

0001ec1c <nrf_malloc>:
   1ec1c:	4b03      	ldr	r3, [pc, #12]	; (1ec2c <nrf_malloc+0x10>)
   1ec1e:	781b      	ldrb	r3, [r3, #0]
   1ec20:	b10b      	cbz	r3, 1ec26 <nrf_malloc+0xa>
   1ec22:	f7ff bd8d 	b.w	1e740 <mem_alloc.constprop.4>
   1ec26:	4618      	mov	r0, r3
   1ec28:	4770      	bx	lr
   1ec2a:	bf00      	nop
   1ec2c:	2002af77 	.word	0x2002af77

0001ec30 <nrf_free>:
   1ec30:	4b04      	ldr	r3, [pc, #16]	; (1ec44 <nrf_free+0x14>)
   1ec32:	781b      	ldrb	r3, [r3, #0]
   1ec34:	b123      	cbz	r3, 1ec40 <nrf_free+0x10>
   1ec36:	b118      	cbz	r0, 1ec40 <nrf_free+0x10>
   1ec38:	4601      	mov	r1, r0
   1ec3a:	2000      	movs	r0, #0
   1ec3c:	f7ff bc30 	b.w	1e4a0 <mem_free>
   1ec40:	4770      	bx	lr
   1ec42:	bf00      	nop
   1ec44:	2002af77 	.word	0x2002af77

0001ec48 <nrf_shared_malloc>:
   1ec48:	4b03      	ldr	r3, [pc, #12]	; (1ec58 <nrf_shared_malloc+0x10>)
   1ec4a:	781b      	ldrb	r3, [r3, #0]
   1ec4c:	b10b      	cbz	r3, 1ec52 <nrf_shared_malloc+0xa>
   1ec4e:	f7ff bc93 	b.w	1e578 <mem_alloc.constprop.5>
   1ec52:	4618      	mov	r0, r3
   1ec54:	4770      	bx	lr
   1ec56:	bf00      	nop
   1ec58:	2002af77 	.word	0x2002af77

0001ec5c <nrf_shared_free>:
   1ec5c:	4b04      	ldr	r3, [pc, #16]	; (1ec70 <nrf_shared_free+0x14>)
   1ec5e:	781b      	ldrb	r3, [r3, #0]
   1ec60:	b123      	cbz	r3, 1ec6c <nrf_shared_free+0x10>
   1ec62:	b118      	cbz	r0, 1ec6c <nrf_shared_free+0x10>
   1ec64:	4601      	mov	r1, r0
   1ec66:	2001      	movs	r0, #1
   1ec68:	f7ff bc1a 	b.w	1e4a0 <mem_free>
   1ec6c:	4770      	bx	lr
   1ec6e:	bf00      	nop
   1ec70:	2002af77 	.word	0x2002af77

0001ec74 <rpc_dfu_event_handler>:
   1ec74:	b508      	push	{r3, lr}
   1ec76:	4a08      	ldr	r2, [pc, #32]	; (1ec98 <rpc_dfu_event_handler+0x24>)
   1ec78:	68c1      	ldr	r1, [r0, #12]
   1ec7a:	8812      	ldrh	r2, [r2, #0]
   1ec7c:	4603      	mov	r3, r0
   1ec7e:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   1ec82:	d005      	beq.n	1ec90 <rpc_dfu_event_handler+0x1c>
   1ec84:	6800      	ldr	r0, [r0, #0]
   1ec86:	b110      	cbz	r0, 1ec8e <rpc_dfu_event_handler+0x1a>
   1ec88:	f7fd fa5c 	bl	1c144 <rpc_dfu_client_data_free>
   1ec8c:	2000      	movs	r0, #0
   1ec8e:	bd08      	pop	{r3, pc}
   1ec90:	4a02      	ldr	r2, [pc, #8]	; (1ec9c <rpc_dfu_event_handler+0x28>)
   1ec92:	2001      	movs	r0, #1
   1ec94:	6013      	str	r3, [r2, #0]
   1ec96:	bd08      	pop	{r3, pc}
   1ec98:	200281f0 	.word	0x200281f0
   1ec9c:	200236e0 	.word	0x200236e0

0001eca0 <mfu_interface_init>:
   1eca0:	2300      	movs	r3, #0
   1eca2:	b510      	push	{r4, lr}
   1eca4:	4808      	ldr	r0, [pc, #32]	; (1ecc8 <mfu_interface_init+0x28>)
   1eca6:	4909      	ldr	r1, [pc, #36]	; (1eccc <mfu_interface_init+0x2c>)
   1eca8:	4a09      	ldr	r2, [pc, #36]	; (1ecd0 <mfu_interface_init+0x30>)
   1ecaa:	4c0a      	ldr	r4, [pc, #40]	; (1ecd4 <mfu_interface_init+0x34>)
   1ecac:	8003      	strh	r3, [r0, #0]
   1ecae:	600b      	str	r3, [r1, #0]
   1ecb0:	6013      	str	r3, [r2, #0]
   1ecb2:	6023      	str	r3, [r4, #0]
   1ecb4:	f7fd fa10 	bl	1c0d8 <rpc_dfu_client_init>
   1ecb8:	b910      	cbnz	r0, 1ecc0 <mfu_interface_init+0x20>
   1ecba:	2301      	movs	r3, #1
   1ecbc:	6023      	str	r3, [r4, #0]
   1ecbe:	bd10      	pop	{r4, pc}
   1ecc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ecc4:	bd10      	pop	{r4, pc}
   1ecc6:	bf00      	nop
   1ecc8:	200281f0 	.word	0x200281f0
   1eccc:	200236e0 	.word	0x200236e0
   1ecd0:	200236dc 	.word	0x200236dc
   1ecd4:	200236d4 	.word	0x200236d4

0001ecd8 <mfu_interface_open>:
   1ecd8:	b508      	push	{r3, lr}
   1ecda:	4b07      	ldr	r3, [pc, #28]	; (1ecf8 <mfu_interface_open+0x20>)
   1ecdc:	681a      	ldr	r2, [r3, #0]
   1ecde:	2a01      	cmp	r2, #1
   1ece0:	d103      	bne.n	1ecea <mfu_interface_open+0x12>
   1ece2:	2202      	movs	r2, #2
   1ece4:	601a      	str	r2, [r3, #0]
   1ece6:	4805      	ldr	r0, [pc, #20]	; (1ecfc <mfu_interface_open+0x24>)
   1ece8:	bd08      	pop	{r3, pc}
   1ecea:	2001      	movs	r0, #1
   1ecec:	f7f6 f8ea 	bl	14ec4 <bsd_os_errno_set>
   1ecf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ecf4:	bd08      	pop	{r3, pc}
   1ecf6:	bf00      	nop
   1ecf8:	200236d4 	.word	0x200236d4
   1ecfc:	49765432 	.word	0x49765432

0001ed00 <mfu_interface_close>:
   1ed00:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed02:	4c32      	ldr	r4, [pc, #200]	; (1edcc <mfu_interface_close+0xcc>)
   1ed04:	b083      	sub	sp, #12
   1ed06:	6823      	ldr	r3, [r4, #0]
   1ed08:	1e9a      	subs	r2, r3, #2
   1ed0a:	2a01      	cmp	r2, #1
   1ed0c:	d857      	bhi.n	1edbe <mfu_interface_close+0xbe>
   1ed0e:	2b03      	cmp	r3, #3
   1ed10:	d004      	beq.n	1ed1c <mfu_interface_close+0x1c>
   1ed12:	2301      	movs	r3, #1
   1ed14:	2000      	movs	r0, #0
   1ed16:	6023      	str	r3, [r4, #0]
   1ed18:	b003      	add	sp, #12
   1ed1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ed1c:	2100      	movs	r1, #0
   1ed1e:	4668      	mov	r0, sp
   1ed20:	f7fd f9e0 	bl	1c0e4 <rpc_dfu_client_request_alloc>
   1ed24:	4603      	mov	r3, r0
   1ed26:	2800      	cmp	r0, #0
   1ed28:	d13d      	bne.n	1eda6 <mfu_interface_close+0xa6>
   1ed2a:	2104      	movs	r1, #4
   1ed2c:	4e28      	ldr	r6, [pc, #160]	; (1edd0 <mfu_interface_close+0xd0>)
   1ed2e:	9800      	ldr	r0, [sp, #0]
   1ed30:	8832      	ldrh	r2, [r6, #0]
   1ed32:	7201      	strb	r1, [r0, #8]
   1ed34:	3201      	adds	r2, #1
   1ed36:	b292      	uxth	r2, r2
   1ed38:	0411      	lsls	r1, r2, #16
   1ed3a:	f041 0106 	orr.w	r1, r1, #6
   1ed3e:	4d25      	ldr	r5, [pc, #148]	; (1edd4 <mfu_interface_close+0xd4>)
   1ed40:	60c1      	str	r1, [r0, #12]
   1ed42:	7103      	strb	r3, [r0, #4]
   1ed44:	7143      	strb	r3, [r0, #5]
   1ed46:	7183      	strb	r3, [r0, #6]
   1ed48:	71c3      	strb	r3, [r0, #7]
   1ed4a:	7243      	strb	r3, [r0, #9]
   1ed4c:	7283      	strb	r3, [r0, #10]
   1ed4e:	72c3      	strb	r3, [r0, #11]
   1ed50:	2106      	movs	r1, #6
   1ed52:	8032      	strh	r2, [r6, #0]
   1ed54:	602b      	str	r3, [r5, #0]
   1ed56:	f7fd f9d9 	bl	1c10c <rpc_dfu_client_request_send>
   1ed5a:	b9d8      	cbnz	r0, 1ed94 <mfu_interface_close+0x94>
   1ed5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ed60:	ae02      	add	r6, sp, #8
   1ed62:	4627      	mov	r7, r4
   1ed64:	f846 3d04 	str.w	r3, [r6, #-4]!
   1ed68:	e004      	b.n	1ed74 <mfu_interface_close+0x74>
   1ed6a:	4631      	mov	r1, r6
   1ed6c:	4638      	mov	r0, r7
   1ed6e:	f7f5 fff3 	bl	14d58 <bsd_os_timedwait>
   1ed72:	b9f0      	cbnz	r0, 1edb2 <mfu_interface_close+0xb2>
   1ed74:	6828      	ldr	r0, [r5, #0]
   1ed76:	2800      	cmp	r0, #0
   1ed78:	d0f7      	beq.n	1ed6a <mfu_interface_close+0x6a>
   1ed7a:	6905      	ldr	r5, [r0, #16]
   1ed7c:	f7fd f9da 	bl	1c134 <rpc_dfu_client_message_free>
   1ed80:	2d00      	cmp	r5, #0
   1ed82:	d0c6      	beq.n	1ed12 <mfu_interface_close+0x12>
   1ed84:	4b14      	ldr	r3, [pc, #80]	; (1edd8 <mfu_interface_close+0xd8>)
   1ed86:	2008      	movs	r0, #8
   1ed88:	601d      	str	r5, [r3, #0]
   1ed8a:	f7f6 f89b 	bl	14ec4 <bsd_os_errno_set>
   1ed8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ed92:	e7c1      	b.n	1ed18 <mfu_interface_close+0x18>
   1ed94:	9800      	ldr	r0, [sp, #0]
   1ed96:	6803      	ldr	r3, [r0, #0]
   1ed98:	b11b      	cbz	r3, 1eda2 <mfu_interface_close+0xa2>
   1ed9a:	4618      	mov	r0, r3
   1ed9c:	f7fd f9d2 	bl	1c144 <rpc_dfu_client_data_free>
   1eda0:	9800      	ldr	r0, [sp, #0]
   1eda2:	f7fd f9c7 	bl	1c134 <rpc_dfu_client_message_free>
   1eda6:	200c      	movs	r0, #12
   1eda8:	f7f6 f88c 	bl	14ec4 <bsd_os_errno_set>
   1edac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1edb0:	e7b2      	b.n	1ed18 <mfu_interface_close+0x18>
   1edb2:	203c      	movs	r0, #60	; 0x3c
   1edb4:	f7f6 f886 	bl	14ec4 <bsd_os_errno_set>
   1edb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1edbc:	e7ac      	b.n	1ed18 <mfu_interface_close+0x18>
   1edbe:	2001      	movs	r0, #1
   1edc0:	f7f6 f880 	bl	14ec4 <bsd_os_errno_set>
   1edc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1edc8:	e7a6      	b.n	1ed18 <mfu_interface_close+0x18>
   1edca:	bf00      	nop
   1edcc:	200236d4 	.word	0x200236d4
   1edd0:	200281f0 	.word	0x200281f0
   1edd4:	200236e0 	.word	0x200236e0
   1edd8:	200236d8 	.word	0x200236d8

0001eddc <mfu_interface_sendto>:
   1eddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ede0:	4e64      	ldr	r6, [pc, #400]	; (1ef74 <mfu_interface_sendto+0x198>)
   1ede2:	460f      	mov	r7, r1
   1ede4:	6831      	ldr	r1, [r6, #0]
   1ede6:	4615      	mov	r5, r2
   1ede8:	1e8a      	subs	r2, r1, #2
   1edea:	2a01      	cmp	r2, #1
   1edec:	b082      	sub	sp, #8
   1edee:	f200 80b4 	bhi.w	1ef5a <mfu_interface_sendto+0x17e>
   1edf2:	2f00      	cmp	r7, #0
   1edf4:	f000 80a5 	beq.w	1ef42 <mfu_interface_sendto+0x166>
   1edf8:	2d00      	cmp	r5, #0
   1edfa:	f000 80a2 	beq.w	1ef42 <mfu_interface_sendto+0x166>
   1edfe:	2b00      	cmp	r3, #0
   1ee00:	f040 80b1 	bne.w	1ef66 <mfu_interface_sendto+0x18a>
   1ee04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ee06:	2b00      	cmp	r3, #0
   1ee08:	f040 80a1 	bne.w	1ef4e <mfu_interface_sendto+0x172>
   1ee0c:	2902      	cmp	r1, #2
   1ee0e:	d04f      	beq.n	1eeb0 <mfu_interface_sendto+0xd4>
   1ee10:	46e8      	mov	r8, sp
   1ee12:	4640      	mov	r0, r8
   1ee14:	4629      	mov	r1, r5
   1ee16:	f7fd f965 	bl	1c0e4 <rpc_dfu_client_request_alloc>
   1ee1a:	4606      	mov	r6, r0
   1ee1c:	b140      	cbz	r0, 1ee30 <mfu_interface_sendto+0x54>
   1ee1e:	200c      	movs	r0, #12
   1ee20:	f7f6 f850 	bl	14ec4 <bsd_os_errno_set>
   1ee24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ee28:	4628      	mov	r0, r5
   1ee2a:	b002      	add	sp, #8
   1ee2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ee30:	9b00      	ldr	r3, [sp, #0]
   1ee32:	4639      	mov	r1, r7
   1ee34:	6818      	ldr	r0, [r3, #0]
   1ee36:	462a      	mov	r2, r5
   1ee38:	f00a fb1b 	bl	29472 <memcpy>
   1ee3c:	2104      	movs	r1, #4
   1ee3e:	4c4e      	ldr	r4, [pc, #312]	; (1ef78 <mfu_interface_sendto+0x19c>)
   1ee40:	9800      	ldr	r0, [sp, #0]
   1ee42:	8823      	ldrh	r3, [r4, #0]
   1ee44:	6045      	str	r5, [r0, #4]
   1ee46:	3301      	adds	r3, #1
   1ee48:	b29b      	uxth	r3, r3
   1ee4a:	041a      	lsls	r2, r3, #16
   1ee4c:	8023      	strh	r3, [r4, #0]
   1ee4e:	430a      	orrs	r2, r1
   1ee50:	4c4a      	ldr	r4, [pc, #296]	; (1ef7c <mfu_interface_sendto+0x1a0>)
   1ee52:	60c2      	str	r2, [r0, #12]
   1ee54:	7246      	strb	r6, [r0, #9]
   1ee56:	7286      	strb	r6, [r0, #10]
   1ee58:	72c6      	strb	r6, [r0, #11]
   1ee5a:	7201      	strb	r1, [r0, #8]
   1ee5c:	6026      	str	r6, [r4, #0]
   1ee5e:	f7fd f955 	bl	1c10c <rpc_dfu_client_request_send>
   1ee62:	2800      	cmp	r0, #0
   1ee64:	d163      	bne.n	1ef2e <mfu_interface_sendto+0x152>
   1ee66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ee6a:	ae02      	add	r6, sp, #8
   1ee6c:	4f41      	ldr	r7, [pc, #260]	; (1ef74 <mfu_interface_sendto+0x198>)
   1ee6e:	f846 3d04 	str.w	r3, [r6, #-4]!
   1ee72:	e004      	b.n	1ee7e <mfu_interface_sendto+0xa2>
   1ee74:	4631      	mov	r1, r6
   1ee76:	4638      	mov	r0, r7
   1ee78:	f7f5 ff6e 	bl	14d58 <bsd_os_timedwait>
   1ee7c:	b978      	cbnz	r0, 1ee9e <mfu_interface_sendto+0xc2>
   1ee7e:	6820      	ldr	r0, [r4, #0]
   1ee80:	2800      	cmp	r0, #0
   1ee82:	d0f7      	beq.n	1ee74 <mfu_interface_sendto+0x98>
   1ee84:	6904      	ldr	r4, [r0, #16]
   1ee86:	f7fd f955 	bl	1c134 <rpc_dfu_client_message_free>
   1ee8a:	2c00      	cmp	r4, #0
   1ee8c:	d0cc      	beq.n	1ee28 <mfu_interface_sendto+0x4c>
   1ee8e:	4b3c      	ldr	r3, [pc, #240]	; (1ef80 <mfu_interface_sendto+0x1a4>)
   1ee90:	2008      	movs	r0, #8
   1ee92:	601c      	str	r4, [r3, #0]
   1ee94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ee98:	f7f6 f814 	bl	14ec4 <bsd_os_errno_set>
   1ee9c:	e7c4      	b.n	1ee28 <mfu_interface_sendto+0x4c>
   1ee9e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1eea2:	203c      	movs	r0, #60	; 0x3c
   1eea4:	f7f6 f80e 	bl	14ec4 <bsd_os_errno_set>
   1eea8:	4628      	mov	r0, r5
   1eeaa:	b002      	add	sp, #8
   1eeac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1eeb0:	46e8      	mov	r8, sp
   1eeb2:	4619      	mov	r1, r3
   1eeb4:	4640      	mov	r0, r8
   1eeb6:	f7fd f915 	bl	1c0e4 <rpc_dfu_client_request_alloc>
   1eeba:	4602      	mov	r2, r0
   1eebc:	2800      	cmp	r0, #0
   1eebe:	d1ae      	bne.n	1ee1e <mfu_interface_sendto+0x42>
   1eec0:	f04f 0c08 	mov.w	ip, #8
   1eec4:	492c      	ldr	r1, [pc, #176]	; (1ef78 <mfu_interface_sendto+0x19c>)
   1eec6:	482f      	ldr	r0, [pc, #188]	; (1ef84 <mfu_interface_sendto+0x1a8>)
   1eec8:	880b      	ldrh	r3, [r1, #0]
   1eeca:	6804      	ldr	r4, [r0, #0]
   1eecc:	3301      	adds	r3, #1
   1eece:	9800      	ldr	r0, [sp, #0]
   1eed0:	b29b      	uxth	r3, r3
   1eed2:	800b      	strh	r3, [r1, #0]
   1eed4:	041b      	lsls	r3, r3, #16
   1eed6:	f043 0303 	orr.w	r3, r3, #3
   1eeda:	6104      	str	r4, [r0, #16]
   1eedc:	4c27      	ldr	r4, [pc, #156]	; (1ef7c <mfu_interface_sendto+0x1a0>)
   1eede:	60c3      	str	r3, [r0, #12]
   1eee0:	7102      	strb	r2, [r0, #4]
   1eee2:	7142      	strb	r2, [r0, #5]
   1eee4:	7182      	strb	r2, [r0, #6]
   1eee6:	71c2      	strb	r2, [r0, #7]
   1eee8:	7242      	strb	r2, [r0, #9]
   1eeea:	7282      	strb	r2, [r0, #10]
   1eeec:	72c2      	strb	r2, [r0, #11]
   1eeee:	f880 c008 	strb.w	ip, [r0, #8]
   1eef2:	2103      	movs	r1, #3
   1eef4:	6022      	str	r2, [r4, #0]
   1eef6:	f7fd f909 	bl	1c10c <rpc_dfu_client_request_send>
   1eefa:	b9c0      	cbnz	r0, 1ef2e <mfu_interface_sendto+0x152>
   1eefc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ef00:	f10d 0908 	add.w	r9, sp, #8
   1ef04:	f849 3d04 	str.w	r3, [r9, #-4]!
   1ef08:	46b2      	mov	sl, r6
   1ef0a:	e005      	b.n	1ef18 <mfu_interface_sendto+0x13c>
   1ef0c:	4649      	mov	r1, r9
   1ef0e:	4650      	mov	r0, sl
   1ef10:	f7f5 ff22 	bl	14d58 <bsd_os_timedwait>
   1ef14:	2800      	cmp	r0, #0
   1ef16:	d1c2      	bne.n	1ee9e <mfu_interface_sendto+0xc2>
   1ef18:	6820      	ldr	r0, [r4, #0]
   1ef1a:	2800      	cmp	r0, #0
   1ef1c:	d0f6      	beq.n	1ef0c <mfu_interface_sendto+0x130>
   1ef1e:	6904      	ldr	r4, [r0, #16]
   1ef20:	f7fd f908 	bl	1c134 <rpc_dfu_client_message_free>
   1ef24:	2c00      	cmp	r4, #0
   1ef26:	d1b2      	bne.n	1ee8e <mfu_interface_sendto+0xb2>
   1ef28:	2303      	movs	r3, #3
   1ef2a:	6033      	str	r3, [r6, #0]
   1ef2c:	e771      	b.n	1ee12 <mfu_interface_sendto+0x36>
   1ef2e:	9800      	ldr	r0, [sp, #0]
   1ef30:	6803      	ldr	r3, [r0, #0]
   1ef32:	b11b      	cbz	r3, 1ef3c <mfu_interface_sendto+0x160>
   1ef34:	4618      	mov	r0, r3
   1ef36:	f7fd f905 	bl	1c144 <rpc_dfu_client_data_free>
   1ef3a:	9800      	ldr	r0, [sp, #0]
   1ef3c:	f7fd f8fa 	bl	1c134 <rpc_dfu_client_message_free>
   1ef40:	e76d      	b.n	1ee1e <mfu_interface_sendto+0x42>
   1ef42:	2016      	movs	r0, #22
   1ef44:	f7f5 ffbe 	bl	14ec4 <bsd_os_errno_set>
   1ef48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ef4c:	e76c      	b.n	1ee28 <mfu_interface_sendto+0x4c>
   1ef4e:	2038      	movs	r0, #56	; 0x38
   1ef50:	f7f5 ffb8 	bl	14ec4 <bsd_os_errno_set>
   1ef54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ef58:	e766      	b.n	1ee28 <mfu_interface_sendto+0x4c>
   1ef5a:	2001      	movs	r0, #1
   1ef5c:	f7f5 ffb2 	bl	14ec4 <bsd_os_errno_set>
   1ef60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ef64:	e760      	b.n	1ee28 <mfu_interface_sendto+0x4c>
   1ef66:	202d      	movs	r0, #45	; 0x2d
   1ef68:	f7f5 ffac 	bl	14ec4 <bsd_os_errno_set>
   1ef6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ef70:	e75a      	b.n	1ee28 <mfu_interface_sendto+0x4c>
   1ef72:	bf00      	nop
   1ef74:	200236d4 	.word	0x200236d4
   1ef78:	200281f0 	.word	0x200281f0
   1ef7c:	200236e0 	.word	0x200236e0
   1ef80:	200236d8 	.word	0x200236d8
   1ef84:	200236dc 	.word	0x200236dc

0001ef88 <mfu_interface_setopt>:
   1ef88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ef8a:	4846      	ldr	r0, [pc, #280]	; (1f0a4 <mfu_interface_setopt+0x11c>)
   1ef8c:	b083      	sub	sp, #12
   1ef8e:	6800      	ldr	r0, [r0, #0]
   1ef90:	3802      	subs	r0, #2
   1ef92:	2801      	cmp	r0, #1
   1ef94:	d877      	bhi.n	1f086 <mfu_interface_setopt+0xfe>
   1ef96:	f240 2003 	movw	r0, #515	; 0x203
   1ef9a:	4281      	cmp	r1, r0
   1ef9c:	d16d      	bne.n	1f07a <mfu_interface_setopt+0xf2>
   1ef9e:	3a04      	subs	r2, #4
   1efa0:	2a03      	cmp	r2, #3
   1efa2:	d85c      	bhi.n	1f05e <mfu_interface_setopt+0xd6>
   1efa4:	e8df f002 	tbb	[pc, r2]
   1efa8:	514e024b 	.word	0x514e024b
   1efac:	2407      	movs	r4, #7
   1efae:	4625      	mov	r5, r4
   1efb0:	2100      	movs	r1, #0
   1efb2:	4668      	mov	r0, sp
   1efb4:	f7fd f896 	bl	1c0e4 <rpc_dfu_client_request_alloc>
   1efb8:	4603      	mov	r3, r0
   1efba:	2800      	cmp	r0, #0
   1efbc:	d138      	bne.n	1f030 <mfu_interface_setopt+0xa8>
   1efbe:	2704      	movs	r7, #4
   1efc0:	4e39      	ldr	r6, [pc, #228]	; (1f0a8 <mfu_interface_setopt+0x120>)
   1efc2:	9800      	ldr	r0, [sp, #0]
   1efc4:	8832      	ldrh	r2, [r6, #0]
   1efc6:	4629      	mov	r1, r5
   1efc8:	3201      	adds	r2, #1
   1efca:	b292      	uxth	r2, r2
   1efcc:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   1efd0:	4c36      	ldr	r4, [pc, #216]	; (1f0ac <mfu_interface_setopt+0x124>)
   1efd2:	60c5      	str	r5, [r0, #12]
   1efd4:	7103      	strb	r3, [r0, #4]
   1efd6:	7143      	strb	r3, [r0, #5]
   1efd8:	7183      	strb	r3, [r0, #6]
   1efda:	71c3      	strb	r3, [r0, #7]
   1efdc:	7243      	strb	r3, [r0, #9]
   1efde:	7283      	strb	r3, [r0, #10]
   1efe0:	72c3      	strb	r3, [r0, #11]
   1efe2:	7207      	strb	r7, [r0, #8]
   1efe4:	8032      	strh	r2, [r6, #0]
   1efe6:	6023      	str	r3, [r4, #0]
   1efe8:	f7fd f890 	bl	1c10c <rpc_dfu_client_request_send>
   1efec:	b9b8      	cbnz	r0, 1f01e <mfu_interface_setopt+0x96>
   1efee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1eff2:	ad02      	add	r5, sp, #8
   1eff4:	4e2b      	ldr	r6, [pc, #172]	; (1f0a4 <mfu_interface_setopt+0x11c>)
   1eff6:	f845 3d04 	str.w	r3, [r5, #-4]!
   1effa:	e005      	b.n	1f008 <mfu_interface_setopt+0x80>
   1effc:	4629      	mov	r1, r5
   1effe:	4630      	mov	r0, r6
   1f000:	f7f5 feaa 	bl	14d58 <bsd_os_timedwait>
   1f004:	2800      	cmp	r0, #0
   1f006:	d131      	bne.n	1f06c <mfu_interface_setopt+0xe4>
   1f008:	6820      	ldr	r0, [r4, #0]
   1f00a:	2800      	cmp	r0, #0
   1f00c:	d0f6      	beq.n	1effc <mfu_interface_setopt+0x74>
   1f00e:	6904      	ldr	r4, [r0, #16]
   1f010:	f7fd f890 	bl	1c134 <rpc_dfu_client_message_free>
   1f014:	2c00      	cmp	r4, #0
   1f016:	d13c      	bne.n	1f092 <mfu_interface_setopt+0x10a>
   1f018:	4620      	mov	r0, r4
   1f01a:	b003      	add	sp, #12
   1f01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f01e:	9800      	ldr	r0, [sp, #0]
   1f020:	6803      	ldr	r3, [r0, #0]
   1f022:	b11b      	cbz	r3, 1f02c <mfu_interface_setopt+0xa4>
   1f024:	4618      	mov	r0, r3
   1f026:	f7fd f88d 	bl	1c144 <rpc_dfu_client_data_free>
   1f02a:	9800      	ldr	r0, [sp, #0]
   1f02c:	f7fd f882 	bl	1c134 <rpc_dfu_client_message_free>
   1f030:	200c      	movs	r0, #12
   1f032:	f7f5 ff47 	bl	14ec4 <bsd_os_errno_set>
   1f036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f03a:	b003      	add	sp, #12
   1f03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f03e:	2405      	movs	r4, #5
   1f040:	4625      	mov	r5, r4
   1f042:	e7b5      	b.n	1efb0 <mfu_interface_setopt+0x28>
   1f044:	2408      	movs	r4, #8
   1f046:	4625      	mov	r5, r4
   1f048:	e7b2      	b.n	1efb0 <mfu_interface_setopt+0x28>
   1f04a:	b1b3      	cbz	r3, 1f07a <mfu_interface_setopt+0xf2>
   1f04c:	9a08      	ldr	r2, [sp, #32]
   1f04e:	2a04      	cmp	r2, #4
   1f050:	d113      	bne.n	1f07a <mfu_interface_setopt+0xf2>
   1f052:	2000      	movs	r0, #0
   1f054:	681a      	ldr	r2, [r3, #0]
   1f056:	4b16      	ldr	r3, [pc, #88]	; (1f0b0 <mfu_interface_setopt+0x128>)
   1f058:	601a      	str	r2, [r3, #0]
   1f05a:	b003      	add	sp, #12
   1f05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f05e:	202a      	movs	r0, #42	; 0x2a
   1f060:	f7f5 ff30 	bl	14ec4 <bsd_os_errno_set>
   1f064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f068:	b003      	add	sp, #12
   1f06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f06c:	203c      	movs	r0, #60	; 0x3c
   1f06e:	f7f5 ff29 	bl	14ec4 <bsd_os_errno_set>
   1f072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f076:	b003      	add	sp, #12
   1f078:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f07a:	2016      	movs	r0, #22
   1f07c:	f7f5 ff22 	bl	14ec4 <bsd_os_errno_set>
   1f080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f084:	e7c9      	b.n	1f01a <mfu_interface_setopt+0x92>
   1f086:	2001      	movs	r0, #1
   1f088:	f7f5 ff1c 	bl	14ec4 <bsd_os_errno_set>
   1f08c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f090:	e7c3      	b.n	1f01a <mfu_interface_setopt+0x92>
   1f092:	4b08      	ldr	r3, [pc, #32]	; (1f0b4 <mfu_interface_setopt+0x12c>)
   1f094:	2008      	movs	r0, #8
   1f096:	601c      	str	r4, [r3, #0]
   1f098:	f7f5 ff14 	bl	14ec4 <bsd_os_errno_set>
   1f09c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f0a0:	e7bb      	b.n	1f01a <mfu_interface_setopt+0x92>
   1f0a2:	bf00      	nop
   1f0a4:	200236d4 	.word	0x200236d4
   1f0a8:	200281f0 	.word	0x200281f0
   1f0ac:	200236e0 	.word	0x200236e0
   1f0b0:	200236dc 	.word	0x200236dc
   1f0b4:	200236d8 	.word	0x200236d8

0001f0b8 <mfu_interface_getopt>:
   1f0b8:	f240 2003 	movw	r0, #515	; 0x203
   1f0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f0c0:	4281      	cmp	r1, r0
   1f0c2:	b082      	sub	sp, #8
   1f0c4:	9e08      	ldr	r6, [sp, #32]
   1f0c6:	f040 80ae 	bne.w	1f226 <mfu_interface_getopt+0x16e>
   1f0ca:	461d      	mov	r5, r3
   1f0cc:	2b00      	cmp	r3, #0
   1f0ce:	f000 80aa 	beq.w	1f226 <mfu_interface_getopt+0x16e>
   1f0d2:	2e00      	cmp	r6, #0
   1f0d4:	f000 80a7 	beq.w	1f226 <mfu_interface_getopt+0x16e>
   1f0d8:	4b5e      	ldr	r3, [pc, #376]	; (1f254 <mfu_interface_getopt+0x19c>)
   1f0da:	681b      	ldr	r3, [r3, #0]
   1f0dc:	3b02      	subs	r3, #2
   1f0de:	2b01      	cmp	r3, #1
   1f0e0:	f200 80a7 	bhi.w	1f232 <mfu_interface_getopt+0x17a>
   1f0e4:	3a01      	subs	r2, #1
   1f0e6:	2a13      	cmp	r2, #19
   1f0e8:	d879      	bhi.n	1f1de <mfu_interface_getopt+0x126>
   1f0ea:	e8df f002 	tbb	[pc, r2]
   1f0ee:	5f17      	.short	0x5f17
   1f0f0:	78787878 	.word	0x78787878
   1f0f4:	78787872 	.word	0x78787872
   1f0f8:	78787878 	.word	0x78787878
   1f0fc:	78787878 	.word	0x78787878
   1f100:	0a78      	.short	0x0a78
   1f102:	6833      	ldr	r3, [r6, #0]
   1f104:	2b04      	cmp	r3, #4
   1f106:	f040 808e 	bne.w	1f226 <mfu_interface_getopt+0x16e>
   1f10a:	2200      	movs	r2, #0
   1f10c:	4610      	mov	r0, r2
   1f10e:	4b52      	ldr	r3, [pc, #328]	; (1f258 <mfu_interface_getopt+0x1a0>)
   1f110:	6819      	ldr	r1, [r3, #0]
   1f112:	601a      	str	r2, [r3, #0]
   1f114:	6029      	str	r1, [r5, #0]
   1f116:	b002      	add	sp, #8
   1f118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f11c:	6833      	ldr	r3, [r6, #0]
   1f11e:	2b24      	cmp	r3, #36	; 0x24
   1f120:	f040 8081 	bne.w	1f226 <mfu_interface_getopt+0x16e>
   1f124:	2401      	movs	r4, #1
   1f126:	46a0      	mov	r8, r4
   1f128:	2100      	movs	r1, #0
   1f12a:	4668      	mov	r0, sp
   1f12c:	f7fc ffda 	bl	1c0e4 <rpc_dfu_client_request_alloc>
   1f130:	2800      	cmp	r0, #0
   1f132:	d146      	bne.n	1f1c2 <mfu_interface_getopt+0x10a>
   1f134:	4949      	ldr	r1, [pc, #292]	; (1f25c <mfu_interface_getopt+0x1a4>)
   1f136:	9b00      	ldr	r3, [sp, #0]
   1f138:	880a      	ldrh	r2, [r1, #0]
   1f13a:	f1b8 0f03 	cmp.w	r8, #3
   1f13e:	f102 0201 	add.w	r2, r2, #1
   1f142:	b292      	uxth	r2, r2
   1f144:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   1f148:	7118      	strb	r0, [r3, #4]
   1f14a:	800a      	strh	r2, [r1, #0]
   1f14c:	60dc      	str	r4, [r3, #12]
   1f14e:	7158      	strb	r0, [r3, #5]
   1f150:	7198      	strb	r0, [r3, #6]
   1f152:	71d8      	strb	r0, [r3, #7]
   1f154:	d04b      	beq.n	1f1ee <mfu_interface_getopt+0x136>
   1f156:	2104      	movs	r1, #4
   1f158:	2200      	movs	r2, #0
   1f15a:	4f41      	ldr	r7, [pc, #260]	; (1f260 <mfu_interface_getopt+0x1a8>)
   1f15c:	6099      	str	r1, [r3, #8]
   1f15e:	4618      	mov	r0, r3
   1f160:	4641      	mov	r1, r8
   1f162:	603a      	str	r2, [r7, #0]
   1f164:	f7fc ffd2 	bl	1c10c <rpc_dfu_client_request_send>
   1f168:	2800      	cmp	r0, #0
   1f16a:	d14d      	bne.n	1f208 <mfu_interface_getopt+0x150>
   1f16c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f170:	ac02      	add	r4, sp, #8
   1f172:	f844 3d04 	str.w	r3, [r4, #-4]!
   1f176:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1f254 <mfu_interface_getopt+0x19c>
   1f17a:	e005      	b.n	1f188 <mfu_interface_getopt+0xd0>
   1f17c:	4621      	mov	r1, r4
   1f17e:	4640      	mov	r0, r8
   1f180:	f7f5 fdea 	bl	14d58 <bsd_os_timedwait>
   1f184:	2800      	cmp	r0, #0
   1f186:	d137      	bne.n	1f1f8 <mfu_interface_getopt+0x140>
   1f188:	6839      	ldr	r1, [r7, #0]
   1f18a:	2900      	cmp	r1, #0
   1f18c:	d0f6      	beq.n	1f17c <mfu_interface_getopt+0xc4>
   1f18e:	690c      	ldr	r4, [r1, #16]
   1f190:	2c00      	cmp	r4, #0
   1f192:	d154      	bne.n	1f23e <mfu_interface_getopt+0x186>
   1f194:	6832      	ldr	r2, [r6, #0]
   1f196:	3114      	adds	r1, #20
   1f198:	4628      	mov	r0, r5
   1f19a:	f00a f96a 	bl	29472 <memcpy>
   1f19e:	6838      	ldr	r0, [r7, #0]
   1f1a0:	f7fc ffc8 	bl	1c134 <rpc_dfu_client_message_free>
   1f1a4:	4620      	mov	r0, r4
   1f1a6:	b002      	add	sp, #8
   1f1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f1ac:	6833      	ldr	r3, [r6, #0]
   1f1ae:	2b04      	cmp	r3, #4
   1f1b0:	d139      	bne.n	1f226 <mfu_interface_getopt+0x16e>
   1f1b2:	2402      	movs	r4, #2
   1f1b4:	2100      	movs	r1, #0
   1f1b6:	4668      	mov	r0, sp
   1f1b8:	46a0      	mov	r8, r4
   1f1ba:	f7fc ff93 	bl	1c0e4 <rpc_dfu_client_request_alloc>
   1f1be:	2800      	cmp	r0, #0
   1f1c0:	d0b8      	beq.n	1f134 <mfu_interface_getopt+0x7c>
   1f1c2:	200c      	movs	r0, #12
   1f1c4:	f7f5 fe7e 	bl	14ec4 <bsd_os_errno_set>
   1f1c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f1cc:	b002      	add	sp, #8
   1f1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f1d2:	6833      	ldr	r3, [r6, #0]
   1f1d4:	2b04      	cmp	r3, #4
   1f1d6:	d126      	bne.n	1f226 <mfu_interface_getopt+0x16e>
   1f1d8:	2409      	movs	r4, #9
   1f1da:	46a0      	mov	r8, r4
   1f1dc:	e7a4      	b.n	1f128 <mfu_interface_getopt+0x70>
   1f1de:	202a      	movs	r0, #42	; 0x2a
   1f1e0:	f7f5 fe70 	bl	14ec4 <bsd_os_errno_set>
   1f1e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f1e8:	b002      	add	sp, #8
   1f1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f1ee:	4a1d      	ldr	r2, [pc, #116]	; (1f264 <mfu_interface_getopt+0x1ac>)
   1f1f0:	2108      	movs	r1, #8
   1f1f2:	6812      	ldr	r2, [r2, #0]
   1f1f4:	611a      	str	r2, [r3, #16]
   1f1f6:	e7af      	b.n	1f158 <mfu_interface_getopt+0xa0>
   1f1f8:	203c      	movs	r0, #60	; 0x3c
   1f1fa:	f7f5 fe63 	bl	14ec4 <bsd_os_errno_set>
   1f1fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f202:	b002      	add	sp, #8
   1f204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f208:	9800      	ldr	r0, [sp, #0]
   1f20a:	6803      	ldr	r3, [r0, #0]
   1f20c:	b11b      	cbz	r3, 1f216 <mfu_interface_getopt+0x15e>
   1f20e:	4618      	mov	r0, r3
   1f210:	f7fc ff98 	bl	1c144 <rpc_dfu_client_data_free>
   1f214:	9800      	ldr	r0, [sp, #0]
   1f216:	f7fc ff8d 	bl	1c134 <rpc_dfu_client_message_free>
   1f21a:	200c      	movs	r0, #12
   1f21c:	f7f5 fe52 	bl	14ec4 <bsd_os_errno_set>
   1f220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f224:	e7d2      	b.n	1f1cc <mfu_interface_getopt+0x114>
   1f226:	2016      	movs	r0, #22
   1f228:	f7f5 fe4c 	bl	14ec4 <bsd_os_errno_set>
   1f22c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f230:	e771      	b.n	1f116 <mfu_interface_getopt+0x5e>
   1f232:	2001      	movs	r0, #1
   1f234:	f7f5 fe46 	bl	14ec4 <bsd_os_errno_set>
   1f238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f23c:	e76b      	b.n	1f116 <mfu_interface_getopt+0x5e>
   1f23e:	4b06      	ldr	r3, [pc, #24]	; (1f258 <mfu_interface_getopt+0x1a0>)
   1f240:	2008      	movs	r0, #8
   1f242:	601c      	str	r4, [r3, #0]
   1f244:	f7f5 fe3e 	bl	14ec4 <bsd_os_errno_set>
   1f248:	6838      	ldr	r0, [r7, #0]
   1f24a:	f7fc ff73 	bl	1c134 <rpc_dfu_client_message_free>
   1f24e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f252:	e760      	b.n	1f116 <mfu_interface_getopt+0x5e>
   1f254:	200236d4 	.word	0x200236d4
   1f258:	200236d8 	.word	0x200236d8
   1f25c:	200281f0 	.word	0x200281f0
   1f260:	200236e0 	.word	0x200236e0
   1f264:	200236dc 	.word	0x200236dc

0001f268 <interface_init>:
   1f268:	b508      	push	{r3, lr}
   1f26a:	f44f 72b4 	mov.w	r2, #360	; 0x168
   1f26e:	2100      	movs	r1, #0
   1f270:	4802      	ldr	r0, [pc, #8]	; (1f27c <interface_init+0x14>)
   1f272:	f00a f938 	bl	294e6 <memset>
   1f276:	2000      	movs	r0, #0
   1f278:	bd08      	pop	{r3, pc}
   1f27a:	bf00      	nop
   1f27c:	2002af90 	.word	0x2002af90

0001f280 <interface_socket_allocate>:
   1f280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f282:	4b30      	ldr	r3, [pc, #192]	; (1f344 <interface_socket_allocate+0xc4>)
   1f284:	4606      	mov	r6, r0
   1f286:	681d      	ldr	r5, [r3, #0]
   1f288:	4608      	mov	r0, r1
   1f28a:	b31d      	cbz	r5, 1f2d4 <interface_socket_allocate+0x54>
   1f28c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1f28e:	2c00      	cmp	r4, #0
   1f290:	d04a      	beq.n	1f328 <interface_socket_allocate+0xa8>
   1f292:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   1f294:	2c00      	cmp	r4, #0
   1f296:	d049      	beq.n	1f32c <interface_socket_allocate+0xac>
   1f298:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   1f29a:	2c00      	cmp	r4, #0
   1f29c:	d048      	beq.n	1f330 <interface_socket_allocate+0xb0>
   1f29e:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   1f2a2:	2900      	cmp	r1, #0
   1f2a4:	d046      	beq.n	1f334 <interface_socket_allocate+0xb4>
   1f2a6:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   1f2aa:	b191      	cbz	r1, 1f2d2 <interface_socket_allocate+0x52>
   1f2ac:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   1f2b0:	2900      	cmp	r1, #0
   1f2b2:	d043      	beq.n	1f33c <interface_socket_allocate+0xbc>
   1f2b4:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   1f2b8:	2900      	cmp	r1, #0
   1f2ba:	d041      	beq.n	1f340 <interface_socket_allocate+0xc0>
   1f2bc:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   1f2c0:	2900      	cmp	r1, #0
   1f2c2:	d039      	beq.n	1f338 <interface_socket_allocate+0xb8>
   1f2c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f2c8:	2069      	movs	r0, #105	; 0x69
   1f2ca:	f7f5 fdfb 	bl	14ec4 <bsd_os_errno_set>
   1f2ce:	4628      	mov	r0, r5
   1f2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f2d2:	2505      	movs	r5, #5
   1f2d4:	f04f 0c01 	mov.w	ip, #1
   1f2d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1f2dc:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   1f2e0:	00e4      	lsls	r4, r4, #3
   1f2e2:	f843 c004 	str.w	ip, [r3, r4]
   1f2e6:	441c      	add	r4, r3
   1f2e8:	4611      	mov	r1, r2
   1f2ea:	61a7      	str	r7, [r4, #24]
   1f2ec:	4622      	mov	r2, r4
   1f2ee:	f7fe ff9b 	bl	1e228 <packet_handler_create>
   1f2f2:	4603      	mov	r3, r0
   1f2f4:	61e0      	str	r0, [r4, #28]
   1f2f6:	b158      	cbz	r0, 1f310 <interface_socket_allocate+0x90>
   1f2f8:	681b      	ldr	r3, [r3, #0]
   1f2fa:	681b      	ldr	r3, [r3, #0]
   1f2fc:	4798      	blx	r3
   1f2fe:	b910      	cbnz	r0, 1f306 <interface_socket_allocate+0x86>
   1f300:	6034      	str	r4, [r6, #0]
   1f302:	4628      	mov	r0, r5
   1f304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f306:	69e0      	ldr	r0, [r4, #28]
   1f308:	f7fe ffae 	bl	1e268 <packet_handler_delete>
   1f30c:	2300      	movs	r3, #0
   1f30e:	61e3      	str	r3, [r4, #28]
   1f310:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f314:	2228      	movs	r2, #40	; 0x28
   1f316:	2100      	movs	r1, #0
   1f318:	4620      	mov	r0, r4
   1f31a:	f00a f8e4 	bl	294e6 <memset>
   1f31e:	200c      	movs	r0, #12
   1f320:	f7f5 fdd0 	bl	14ec4 <bsd_os_errno_set>
   1f324:	4628      	mov	r0, r5
   1f326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f328:	2501      	movs	r5, #1
   1f32a:	e7d3      	b.n	1f2d4 <interface_socket_allocate+0x54>
   1f32c:	2502      	movs	r5, #2
   1f32e:	e7d1      	b.n	1f2d4 <interface_socket_allocate+0x54>
   1f330:	2503      	movs	r5, #3
   1f332:	e7cf      	b.n	1f2d4 <interface_socket_allocate+0x54>
   1f334:	2504      	movs	r5, #4
   1f336:	e7cd      	b.n	1f2d4 <interface_socket_allocate+0x54>
   1f338:	2508      	movs	r5, #8
   1f33a:	e7cb      	b.n	1f2d4 <interface_socket_allocate+0x54>
   1f33c:	2506      	movs	r5, #6
   1f33e:	e7c9      	b.n	1f2d4 <interface_socket_allocate+0x54>
   1f340:	2507      	movs	r5, #7
   1f342:	e7c7      	b.n	1f2d4 <interface_socket_allocate+0x54>
   1f344:	2002af90 	.word	0x2002af90

0001f348 <interface_socket_free>:
   1f348:	2808      	cmp	r0, #8
   1f34a:	d900      	bls.n	1f34e <interface_socket_free+0x6>
   1f34c:	4770      	bx	lr
   1f34e:	b510      	push	{r4, lr}
   1f350:	4c07      	ldr	r4, [pc, #28]	; (1f370 <interface_socket_free+0x28>)
   1f352:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1f356:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   1f35a:	69e0      	ldr	r0, [r4, #28]
   1f35c:	b108      	cbz	r0, 1f362 <interface_socket_free+0x1a>
   1f35e:	f7fe ff83 	bl	1e268 <packet_handler_delete>
   1f362:	4620      	mov	r0, r4
   1f364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f368:	2228      	movs	r2, #40	; 0x28
   1f36a:	2100      	movs	r1, #0
   1f36c:	f00a b8bb 	b.w	294e6 <memset>
   1f370:	2002af90 	.word	0x2002af90

0001f374 <interface_socket_packet_handler_update>:
   1f374:	2808      	cmp	r0, #8
   1f376:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f37a:	d81e      	bhi.n	1f3ba <interface_socket_packet_handler_update+0x46>
   1f37c:	ea4f 0880 	mov.w	r8, r0, lsl #2
   1f380:	4e17      	ldr	r6, [pc, #92]	; (1f3e0 <interface_socket_packet_handler_update+0x6c>)
   1f382:	eb08 0300 	add.w	r3, r8, r0
   1f386:	00db      	lsls	r3, r3, #3
   1f388:	58f4      	ldr	r4, [r6, r3]
   1f38a:	18f5      	adds	r5, r6, r3
   1f38c:	b1ac      	cbz	r4, 1f3ba <interface_socket_packet_handler_update+0x46>
   1f38e:	460b      	mov	r3, r1
   1f390:	4604      	mov	r4, r0
   1f392:	4611      	mov	r1, r2
   1f394:	4618      	mov	r0, r3
   1f396:	462a      	mov	r2, r5
   1f398:	f8d5 901c 	ldr.w	r9, [r5, #28]
   1f39c:	f7fe ff44 	bl	1e228 <packet_handler_create>
   1f3a0:	61e8      	str	r0, [r5, #28]
   1f3a2:	b1d0      	cbz	r0, 1f3da <interface_socket_packet_handler_update+0x66>
   1f3a4:	6803      	ldr	r3, [r0, #0]
   1f3a6:	681b      	ldr	r3, [r3, #0]
   1f3a8:	4798      	blx	r3
   1f3aa:	4607      	mov	r7, r0
   1f3ac:	b948      	cbnz	r0, 1f3c2 <interface_socket_packet_handler_update+0x4e>
   1f3ae:	4648      	mov	r0, r9
   1f3b0:	f7fe ff5a 	bl	1e268 <packet_handler_delete>
   1f3b4:	4638      	mov	r0, r7
   1f3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f3ba:	2705      	movs	r7, #5
   1f3bc:	4638      	mov	r0, r7
   1f3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f3c2:	69e8      	ldr	r0, [r5, #28]
   1f3c4:	f7fe ff50 	bl	1e268 <packet_handler_delete>
   1f3c8:	eb08 0004 	add.w	r0, r8, r4
   1f3cc:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   1f3d0:	f8c6 901c 	str.w	r9, [r6, #28]
   1f3d4:	4638      	mov	r0, r7
   1f3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f3da:	2704      	movs	r7, #4
   1f3dc:	e7f4      	b.n	1f3c8 <interface_socket_packet_handler_update+0x54>
   1f3de:	bf00      	nop
   1f3e0:	2002af90 	.word	0x2002af90

0001f3e4 <interface_socket_wait>:
   1f3e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3e8:	4692      	mov	sl, r2
   1f3ea:	ea4f 0980 	mov.w	r9, r0, lsl #2
   1f3ee:	4d13      	ldr	r5, [pc, #76]	; (1f43c <interface_socket_wait+0x58>)
   1f3f0:	eb09 0400 	add.w	r4, r9, r0
   1f3f4:	00e4      	lsls	r4, r4, #3
   1f3f6:	592a      	ldr	r2, [r5, r4]
   1f3f8:	4606      	mov	r6, r0
   1f3fa:	ea02 020a 	and.w	r2, r2, sl
   1f3fe:	428a      	cmp	r2, r1
   1f400:	442c      	add	r4, r5
   1f402:	d013      	beq.n	1f42c <interface_socket_wait+0x48>
   1f404:	4698      	mov	r8, r3
   1f406:	6863      	ldr	r3, [r4, #4]
   1f408:	b983      	cbnz	r3, 1f42c <interface_socket_wait+0x48>
   1f40a:	460f      	mov	r7, r1
   1f40c:	46a3      	mov	fp, r4
   1f40e:	e007      	b.n	1f420 <interface_socket_wait+0x3c>
   1f410:	f8db 3004 	ldr.w	r3, [fp, #4]
   1f414:	b953      	cbnz	r3, 1f42c <interface_socket_wait+0x48>
   1f416:	4641      	mov	r1, r8
   1f418:	4620      	mov	r0, r4
   1f41a:	f7f5 fc9d 	bl	14d58 <bsd_os_timedwait>
   1f41e:	b958      	cbnz	r0, 1f438 <interface_socket_wait+0x54>
   1f420:	f8db 3000 	ldr.w	r3, [fp]
   1f424:	ea03 030a 	and.w	r3, r3, sl
   1f428:	42bb      	cmp	r3, r7
   1f42a:	d1f1      	bne.n	1f410 <interface_socket_wait+0x2c>
   1f42c:	444e      	add	r6, r9
   1f42e:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   1f432:	6868      	ldr	r0, [r5, #4]
   1f434:	b100      	cbz	r0, 1f438 <interface_socket_wait+0x54>
   1f436:	6868      	ldr	r0, [r5, #4]
   1f438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f43c:	2002af90 	.word	0x2002af90

0001f440 <interface_from_internal_id_search>:
   1f440:	4b27      	ldr	r3, [pc, #156]	; (1f4e0 <interface_from_internal_id_search+0xa0>)
   1f442:	681a      	ldr	r2, [r3, #0]
   1f444:	b112      	cbz	r2, 1f44c <interface_from_internal_id_search+0xc>
   1f446:	699a      	ldr	r2, [r3, #24]
   1f448:	4282      	cmp	r2, r0
   1f44a:	d039      	beq.n	1f4c0 <interface_from_internal_id_search+0x80>
   1f44c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1f44e:	b112      	cbz	r2, 1f456 <interface_from_internal_id_search+0x16>
   1f450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f452:	4282      	cmp	r2, r0
   1f454:	d036      	beq.n	1f4c4 <interface_from_internal_id_search+0x84>
   1f456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1f458:	b112      	cbz	r2, 1f460 <interface_from_internal_id_search+0x20>
   1f45a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1f45c:	4282      	cmp	r2, r0
   1f45e:	d033      	beq.n	1f4c8 <interface_from_internal_id_search+0x88>
   1f460:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   1f462:	b11a      	cbz	r2, 1f46c <interface_from_internal_id_search+0x2c>
   1f464:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1f468:	4282      	cmp	r2, r0
   1f46a:	d02f      	beq.n	1f4cc <interface_from_internal_id_search+0x8c>
   1f46c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1f470:	b11a      	cbz	r2, 1f47a <interface_from_internal_id_search+0x3a>
   1f472:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   1f476:	4282      	cmp	r2, r0
   1f478:	d02a      	beq.n	1f4d0 <interface_from_internal_id_search+0x90>
   1f47a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   1f47e:	b11a      	cbz	r2, 1f488 <interface_from_internal_id_search+0x48>
   1f480:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   1f484:	4282      	cmp	r2, r0
   1f486:	d025      	beq.n	1f4d4 <interface_from_internal_id_search+0x94>
   1f488:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   1f48c:	b11a      	cbz	r2, 1f496 <interface_from_internal_id_search+0x56>
   1f48e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   1f492:	4282      	cmp	r2, r0
   1f494:	d020      	beq.n	1f4d8 <interface_from_internal_id_search+0x98>
   1f496:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   1f49a:	b11a      	cbz	r2, 1f4a4 <interface_from_internal_id_search+0x64>
   1f49c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f4a0:	4282      	cmp	r2, r0
   1f4a2:	d01b      	beq.n	1f4dc <interface_from_internal_id_search+0x9c>
   1f4a4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1f4a8:	b13a      	cbz	r2, 1f4ba <interface_from_internal_id_search+0x7a>
   1f4aa:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   1f4ae:	4283      	cmp	r3, r0
   1f4b0:	bf14      	ite	ne
   1f4b2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1f4b6:	2008      	moveq	r0, #8
   1f4b8:	4770      	bx	lr
   1f4ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f4be:	4770      	bx	lr
   1f4c0:	2000      	movs	r0, #0
   1f4c2:	4770      	bx	lr
   1f4c4:	2001      	movs	r0, #1
   1f4c6:	4770      	bx	lr
   1f4c8:	2002      	movs	r0, #2
   1f4ca:	4770      	bx	lr
   1f4cc:	2003      	movs	r0, #3
   1f4ce:	4770      	bx	lr
   1f4d0:	2004      	movs	r0, #4
   1f4d2:	4770      	bx	lr
   1f4d4:	2005      	movs	r0, #5
   1f4d6:	4770      	bx	lr
   1f4d8:	2006      	movs	r0, #6
   1f4da:	4770      	bx	lr
   1f4dc:	2007      	movs	r0, #7
   1f4de:	4770      	bx	lr
   1f4e0:	2002af90 	.word	0x2002af90

0001f4e4 <interface_socket_from_handle_get>:
   1f4e4:	2808      	cmp	r0, #8
   1f4e6:	d807      	bhi.n	1f4f8 <interface_socket_from_handle_get+0x14>
   1f4e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1f4ec:	4b03      	ldr	r3, [pc, #12]	; (1f4fc <interface_socket_from_handle_get+0x18>)
   1f4ee:	00c0      	lsls	r0, r0, #3
   1f4f0:	581a      	ldr	r2, [r3, r0]
   1f4f2:	b10a      	cbz	r2, 1f4f8 <interface_socket_from_handle_get+0x14>
   1f4f4:	4418      	add	r0, r3
   1f4f6:	4770      	bx	lr
   1f4f8:	2000      	movs	r0, #0
   1f4fa:	4770      	bx	lr
   1f4fc:	2002af90 	.word	0x2002af90

0001f500 <interface_socket_event_get>:
   1f500:	b119      	cbz	r1, 1f50a <interface_socket_event_get+0xa>
   1f502:	2808      	cmp	r0, #8
   1f504:	d902      	bls.n	1f50c <interface_socket_event_get+0xc>
   1f506:	2310      	movs	r3, #16
   1f508:	600b      	str	r3, [r1, #0]
   1f50a:	4770      	bx	lr
   1f50c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1f510:	4b07      	ldr	r3, [pc, #28]	; (1f530 <interface_socket_event_get+0x30>)
   1f512:	00c0      	lsls	r0, r0, #3
   1f514:	581a      	ldr	r2, [r3, r0]
   1f516:	2a00      	cmp	r2, #0
   1f518:	d0f5      	beq.n	1f506 <interface_socket_event_get+0x6>
   1f51a:	581b      	ldr	r3, [r3, r0]
   1f51c:	0c1b      	lsrs	r3, r3, #16
   1f51e:	f003 020a 	and.w	r2, r3, #10
   1f522:	2a0a      	cmp	r2, #10
   1f524:	bf14      	ite	ne
   1f526:	f003 030f 	andne.w	r3, r3, #15
   1f52a:	f003 030d 	andeq.w	r3, r3, #13
   1f52e:	e7eb      	b.n	1f508 <interface_socket_event_get+0x8>
   1f530:	2002af90 	.word	0x2002af90

0001f534 <interface_socket_setopt>:
   1f534:	2808      	cmp	r0, #8
   1f536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f538:	d82c      	bhi.n	1f594 <interface_socket_setopt+0x60>
   1f53a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1f53e:	4e1e      	ldr	r6, [pc, #120]	; (1f5b8 <interface_socket_setopt+0x84>)
   1f540:	00c0      	lsls	r0, r0, #3
   1f542:	5834      	ldr	r4, [r6, r0]
   1f544:	b334      	cbz	r4, 1f594 <interface_socket_setopt+0x60>
   1f546:	2901      	cmp	r1, #1
   1f548:	d11e      	bne.n	1f588 <interface_socket_setopt+0x54>
   1f54a:	f1a2 0114 	sub.w	r1, r2, #20
   1f54e:	2901      	cmp	r1, #1
   1f550:	d81a      	bhi.n	1f588 <interface_socket_setopt+0x54>
   1f552:	9906      	ldr	r1, [sp, #24]
   1f554:	2908      	cmp	r1, #8
   1f556:	d123      	bne.n	1f5a0 <interface_socket_setopt+0x6c>
   1f558:	b313      	cbz	r3, 1f5a0 <interface_socket_setopt+0x6c>
   1f55a:	6859      	ldr	r1, [r3, #4]
   1f55c:	4c17      	ldr	r4, [pc, #92]	; (1f5bc <interface_socket_setopt+0x88>)
   1f55e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1f562:	fba4 4101 	umull	r4, r1, r4, r1
   1f566:	0989      	lsrs	r1, r1, #6
   1f568:	460c      	mov	r4, r1
   1f56a:	2500      	movs	r5, #0
   1f56c:	681b      	ldr	r3, [r3, #0]
   1f56e:	fbe7 4503 	umlal	r4, r5, r7, r3
   1f572:	2d01      	cmp	r5, #1
   1f574:	bf08      	it	eq
   1f576:	2c00      	cmpeq	r4, #0
   1f578:	d218      	bcs.n	1f5ac <interface_socket_setopt+0x78>
   1f57a:	4430      	add	r0, r6
   1f57c:	2a14      	cmp	r2, #20
   1f57e:	bf0c      	ite	eq
   1f580:	6204      	streq	r4, [r0, #32]
   1f582:	6244      	strne	r4, [r0, #36]	; 0x24
   1f584:	2000      	movs	r0, #0
   1f586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f588:	202a      	movs	r0, #42	; 0x2a
   1f58a:	f7f5 fc9b 	bl	14ec4 <bsd_os_errno_set>
   1f58e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f594:	2009      	movs	r0, #9
   1f596:	f7f5 fc95 	bl	14ec4 <bsd_os_errno_set>
   1f59a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f5a0:	2016      	movs	r0, #22
   1f5a2:	f7f5 fc8f 	bl	14ec4 <bsd_os_errno_set>
   1f5a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f5ac:	2025      	movs	r0, #37	; 0x25
   1f5ae:	f7f5 fc89 	bl	14ec4 <bsd_os_errno_set>
   1f5b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f5b8:	2002af90 	.word	0x2002af90
   1f5bc:	10624dd3 	.word	0x10624dd3

0001f5c0 <interface_socket_getopt>:
   1f5c0:	b570      	push	{r4, r5, r6, lr}
   1f5c2:	2808      	cmp	r0, #8
   1f5c4:	9d04      	ldr	r5, [sp, #16]
   1f5c6:	d835      	bhi.n	1f634 <__kernel_ram_size+0x54>
   1f5c8:	4c20      	ldr	r4, [pc, #128]	; (1f64c <__kernel_ram_size+0x6c>)
   1f5ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1f5ce:	00c0      	lsls	r0, r0, #3
   1f5d0:	5826      	ldr	r6, [r4, r0]
   1f5d2:	4404      	add	r4, r0
   1f5d4:	b376      	cbz	r6, 1f634 <__kernel_ram_size+0x54>
   1f5d6:	2901      	cmp	r1, #1
   1f5d8:	d132      	bne.n	1f640 <__kernel_ram_size+0x60>
   1f5da:	b32b      	cbz	r3, 1f628 <__kernel_ram_size+0x48>
   1f5dc:	b325      	cbz	r5, 1f628 <__kernel_ram_size+0x48>
   1f5de:	2a04      	cmp	r2, #4
   1f5e0:	d019      	beq.n	1f616 <__kernel_ram_size+0x36>
   1f5e2:	f1a2 0114 	sub.w	r1, r2, #20
   1f5e6:	2901      	cmp	r1, #1
   1f5e8:	d82a      	bhi.n	1f640 <__kernel_ram_size+0x60>
   1f5ea:	6829      	ldr	r1, [r5, #0]
   1f5ec:	2908      	cmp	r1, #8
   1f5ee:	d11b      	bne.n	1f628 <__kernel_ram_size+0x48>
   1f5f0:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   1f5f4:	2a14      	cmp	r2, #20
   1f5f6:	bf18      	it	ne
   1f5f8:	4601      	movne	r1, r0
   1f5fa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1f5fe:	4a14      	ldr	r2, [pc, #80]	; (1f650 <__kernel_ram_size+0x70>)
   1f600:	2000      	movs	r0, #0
   1f602:	fba2 5201 	umull	r5, r2, r2, r1
   1f606:	0992      	lsrs	r2, r2, #6
   1f608:	fb04 1112 	mls	r1, r4, r2, r1
   1f60c:	fb04 f101 	mul.w	r1, r4, r1
   1f610:	e9c3 2100 	strd	r2, r1, [r3]
   1f614:	bd70      	pop	{r4, r5, r6, pc}
   1f616:	682a      	ldr	r2, [r5, #0]
   1f618:	2a04      	cmp	r2, #4
   1f61a:	d105      	bne.n	1f628 <__kernel_ram_size+0x48>
   1f61c:	2200      	movs	r2, #0
   1f61e:	6861      	ldr	r1, [r4, #4]
   1f620:	4610      	mov	r0, r2
   1f622:	6019      	str	r1, [r3, #0]
   1f624:	6062      	str	r2, [r4, #4]
   1f626:	bd70      	pop	{r4, r5, r6, pc}
   1f628:	2016      	movs	r0, #22
   1f62a:	f7f5 fc4b 	bl	14ec4 <bsd_os_errno_set>
   1f62e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f632:	bd70      	pop	{r4, r5, r6, pc}
   1f634:	2009      	movs	r0, #9
   1f636:	f7f5 fc45 	bl	14ec4 <bsd_os_errno_set>
   1f63a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f63e:	bd70      	pop	{r4, r5, r6, pc}
   1f640:	202a      	movs	r0, #42	; 0x2a
   1f642:	f7f5 fc3f 	bl	14ec4 <bsd_os_errno_set>
   1f646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f64a:	bd70      	pop	{r4, r5, r6, pc}
   1f64c:	2002af90 	.word	0x2002af90
   1f650:	10624dd3 	.word	0x10624dd3

0001f654 <interface_shutdown>:
   1f654:	4b18      	ldr	r3, [pc, #96]	; (1f6b8 <interface_shutdown+0x64>)
   1f656:	681a      	ldr	r2, [r3, #0]
   1f658:	b10a      	cbz	r2, 1f65e <interface_shutdown+0xa>
   1f65a:	2270      	movs	r2, #112	; 0x70
   1f65c:	605a      	str	r2, [r3, #4]
   1f65e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1f660:	b10a      	cbz	r2, 1f666 <interface_shutdown+0x12>
   1f662:	2270      	movs	r2, #112	; 0x70
   1f664:	62da      	str	r2, [r3, #44]	; 0x2c
   1f666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1f668:	b10a      	cbz	r2, 1f66e <interface_shutdown+0x1a>
   1f66a:	2270      	movs	r2, #112	; 0x70
   1f66c:	655a      	str	r2, [r3, #84]	; 0x54
   1f66e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   1f670:	b10a      	cbz	r2, 1f676 <interface_shutdown+0x22>
   1f672:	2270      	movs	r2, #112	; 0x70
   1f674:	67da      	str	r2, [r3, #124]	; 0x7c
   1f676:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1f67a:	b112      	cbz	r2, 1f682 <interface_shutdown+0x2e>
   1f67c:	2270      	movs	r2, #112	; 0x70
   1f67e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
   1f682:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   1f686:	b112      	cbz	r2, 1f68e <interface_shutdown+0x3a>
   1f688:	2270      	movs	r2, #112	; 0x70
   1f68a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
   1f68e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   1f692:	b112      	cbz	r2, 1f69a <interface_shutdown+0x46>
   1f694:	2270      	movs	r2, #112	; 0x70
   1f696:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
   1f69a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   1f69e:	b112      	cbz	r2, 1f6a6 <interface_shutdown+0x52>
   1f6a0:	2270      	movs	r2, #112	; 0x70
   1f6a2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   1f6a6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1f6aa:	b112      	cbz	r2, 1f6b2 <interface_shutdown+0x5e>
   1f6ac:	2270      	movs	r2, #112	; 0x70
   1f6ae:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1f6b2:	2000      	movs	r0, #0
   1f6b4:	4770      	bx	lr
   1f6b6:	bf00      	nop
   1f6b8:	2002af90 	.word	0x2002af90

0001f6bc <interface_socket_fcntl>:
   1f6bc:	2808      	cmp	r0, #8
   1f6be:	b510      	push	{r4, lr}
   1f6c0:	d826      	bhi.n	1f710 <interface_socket_fcntl+0x54>
   1f6c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1f6c6:	4c1b      	ldr	r4, [pc, #108]	; (1f734 <interface_socket_fcntl+0x78>)
   1f6c8:	00c3      	lsls	r3, r0, #3
   1f6ca:	58e0      	ldr	r0, [r4, r3]
   1f6cc:	b300      	cbz	r0, 1f710 <interface_socket_fcntl+0x54>
   1f6ce:	2901      	cmp	r1, #1
   1f6d0:	d005      	beq.n	1f6de <interface_socket_fcntl+0x22>
   1f6d2:	2902      	cmp	r1, #2
   1f6d4:	d122      	bne.n	1f71c <interface_socket_fcntl+0x60>
   1f6d6:	58e0      	ldr	r0, [r4, r3]
   1f6d8:	f3c0 7000 	ubfx	r0, r0, #28, #1
   1f6dc:	bd10      	pop	{r4, pc}
   1f6de:	07d2      	lsls	r2, r2, #31
   1f6e0:	d410      	bmi.n	1f704 <interface_socket_fcntl+0x48>
   1f6e2:	58e0      	ldr	r0, [r4, r3]
   1f6e4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   1f6e8:	d11e      	bne.n	1f728 <interface_socket_fcntl+0x6c>
   1f6ea:	58e2      	ldr	r2, [r4, r3]
   1f6ec:	b292      	uxth	r2, r2
   1f6ee:	2a0a      	cmp	r2, #10
   1f6f0:	d01a      	beq.n	1f728 <interface_socket_fcntl+0x6c>
   1f6f2:	58e2      	ldr	r2, [r4, r3]
   1f6f4:	b292      	uxth	r2, r2
   1f6f6:	2a0b      	cmp	r2, #11
   1f6f8:	d016      	beq.n	1f728 <interface_socket_fcntl+0x6c>
   1f6fa:	58e2      	ldr	r2, [r4, r3]
   1f6fc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   1f700:	50e2      	str	r2, [r4, r3]
   1f702:	bd10      	pop	{r4, pc}
   1f704:	58e2      	ldr	r2, [r4, r3]
   1f706:	2000      	movs	r0, #0
   1f708:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1f70c:	50e2      	str	r2, [r4, r3]
   1f70e:	bd10      	pop	{r4, pc}
   1f710:	2009      	movs	r0, #9
   1f712:	f7f5 fbd7 	bl	14ec4 <bsd_os_errno_set>
   1f716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f71a:	bd10      	pop	{r4, pc}
   1f71c:	2016      	movs	r0, #22
   1f71e:	f7f5 fbd1 	bl	14ec4 <bsd_os_errno_set>
   1f722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f726:	bd10      	pop	{r4, pc}
   1f728:	2023      	movs	r0, #35	; 0x23
   1f72a:	f7f5 fbcb 	bl	14ec4 <bsd_os_errno_set>
   1f72e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f732:	bd10      	pop	{r4, pc}
   1f734:	2002af90 	.word	0x2002af90

0001f738 <at_client_evt_handler>:
   1f738:	b120      	cbz	r0, 1f744 <at_client_evt_handler+0xc>
   1f73a:	f850 1b08 	ldr.w	r1, [r0], #8
   1f73e:	0c09      	lsrs	r1, r1, #16
   1f740:	f7fc be9c 	b.w	1c47c <rpc_at_event_handler>
   1f744:	4770      	bx	lr
   1f746:	bf00      	nop

0001f748 <rpc_at_client_init>:
   1f748:	4801      	ldr	r0, [pc, #4]	; (1f750 <rpc_at_client_init+0x8>)
   1f74a:	f7fb bcc5 	b.w	1b0d8 <rpc_client_register>
   1f74e:	bf00      	nop
   1f750:	0002abec 	.word	0x0002abec

0001f754 <rpc_at_client_request_alloc>:
   1f754:	b180      	cbz	r0, 1f778 <rpc_at_client_request_alloc+0x24>
   1f756:	2300      	movs	r3, #0
   1f758:	b510      	push	{r4, lr}
   1f75a:	b082      	sub	sp, #8
   1f75c:	aa02      	add	r2, sp, #8
   1f75e:	4604      	mov	r4, r0
   1f760:	f842 3d04 	str.w	r3, [r2, #-4]!
   1f764:	2003      	movs	r0, #3
   1f766:	f7fb fd31 	bl	1b1cc <rpc_message_alloc>
   1f76a:	b918      	cbnz	r0, 1f774 <rpc_at_client_request_alloc+0x20>
   1f76c:	9b01      	ldr	r3, [sp, #4]
   1f76e:	b10b      	cbz	r3, 1f774 <rpc_at_client_request_alloc+0x20>
   1f770:	3308      	adds	r3, #8
   1f772:	6023      	str	r3, [r4, #0]
   1f774:	b002      	add	sp, #8
   1f776:	bd10      	pop	{r4, pc}
   1f778:	200e      	movs	r0, #14
   1f77a:	4770      	bx	lr

0001f77c <rpc_at_client_request_send>:
   1f77c:	b150      	cbz	r0, 1f794 <rpc_at_client_request_send+0x18>
   1f77e:	4603      	mov	r3, r0
   1f780:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1f784:	2003      	movs	r0, #3
   1f786:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1f78a:	f843 1d08 	str.w	r1, [r3, #-8]!
   1f78e:	4619      	mov	r1, r3
   1f790:	f7fb bd0c 	b.w	1b1ac <rpc_message_send>
   1f794:	200e      	movs	r0, #14
   1f796:	4770      	bx	lr

0001f798 <rpc_at_client_message_free>:
   1f798:	b120      	cbz	r0, 1f7a4 <rpc_at_client_message_free+0xc>
   1f79a:	f1a0 0108 	sub.w	r1, r0, #8
   1f79e:	2003      	movs	r0, #3
   1f7a0:	f7fb bd40 	b.w	1b224 <rpc_message_free>
   1f7a4:	200e      	movs	r0, #14
   1f7a6:	4770      	bx	lr

0001f7a8 <rpc_at_client_data_free>:
   1f7a8:	b118      	cbz	r0, 1f7b2 <rpc_at_client_data_free+0xa>
   1f7aa:	4601      	mov	r1, r0
   1f7ac:	2003      	movs	r0, #3
   1f7ae:	f7fb bd45 	b.w	1b23c <rpc_message_data_free>
   1f7b2:	200e      	movs	r0, #14
   1f7b4:	4770      	bx	lr
   1f7b6:	bf00      	nop

0001f7b8 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1f7b8:	4a07      	ldr	r2, [pc, #28]	; (1f7d8 <SystemInit+0x20>)
   1f7ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1f7be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1f7c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1f7c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1f7ca:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1f7ce:	4b03      	ldr	r3, [pc, #12]	; (1f7dc <SystemInit+0x24>)
   1f7d0:	4a03      	ldr	r2, [pc, #12]	; (1f7e0 <SystemInit+0x28>)
   1f7d2:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1f7d4:	4770      	bx	lr
   1f7d6:	bf00      	nop
   1f7d8:	e000ed00 	.word	0xe000ed00
   1f7dc:	200205c0 	.word	0x200205c0
   1f7e0:	03d09000 	.word	0x03d09000

0001f7e4 <nrfx_wdt_init>:
static wdt_control_block_t m_cb[NRFX_WDT_ENABLED_COUNT];

nrfx_err_t nrfx_wdt_init(nrfx_wdt_t const *        p_instance,
                         nrfx_wdt_config_t const * p_config,
                         nrfx_wdt_event_handler_t  wdt_event_handler)
{
   1f7e4:	b570      	push	{r4, r5, r6, lr}
   1f7e6:	4615      	mov	r5, r2
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

#if NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    (void)wdt_event_handler;
#else
    p_cb->wdt_event_handler = wdt_event_handler;
   1f7e8:	4b11      	ldr	r3, [pc, #68]	; (1f830 <nrfx_wdt_init+0x4c>)
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f7ea:	7902      	ldrb	r2, [r0, #4]
    p_cb->wdt_event_handler = wdt_event_handler;
   1f7ec:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
   1f7f0:	6065      	str	r5, [r4, #4]
#endif

    if (p_cb->state == NRFX_DRV_STATE_UNINITIALIZED)
   1f7f2:	f813 4032 	ldrb.w	r4, [r3, r2, lsl #3]
   1f7f6:	b9cc      	cbnz	r4, 1f82c <nrfx_wdt_init+0x48>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1f7f8:	2601      	movs	r6, #1
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    nrf_wdt_behaviour_set(p_instance->p_reg, p_config->behaviour);
   1f7fa:	6804      	ldr	r4, [r0, #0]
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1f7fc:	f803 6032 	strb.w	r6, [r3, r2, lsl #3]
    p_reg->CONFIG = behaviour;
   1f800:	780b      	ldrb	r3, [r1, #0]

    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   1f802:	6849      	ldr	r1, [r1, #4]
   1f804:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
   1f808:	03c8      	lsls	r0, r1, #15
   1f80a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f80e:	2300      	movs	r3, #0
   1f810:	0c49      	lsrs	r1, r1, #17
   1f812:	f7ec ffd1 	bl	c7b8 <__aeabi_uldivmod>
}

NRF_STATIC_INLINE void nrf_wdt_reload_value_set(NRF_WDT_Type * p_reg, uint32_t reload_value)
{
    p_reg->CRV = reload_value;
   1f816:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    NRFX_ASSERT(ticks <= UINT32_MAX);

    nrf_wdt_reload_value_set(p_instance->p_reg, (uint32_t) ticks);

#if !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    if (wdt_event_handler)
   1f81a:	b12d      	cbz	r5, 1f828 <nrfx_wdt_init+0x44>
    p_reg->INTENSET = mask;
   1f81c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    {
        nrf_wdt_int_enable(p_instance->p_reg, NRF_WDT_INT_TIMEOUT_MASK);
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg), p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1f820:	f344 3007 	sbfx	r0, r4, #12, #8
   1f824:	f7f1 fa4e 	bl	10cc4 <arch_irq_enable>
    }
#endif

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1f828:	4802      	ldr	r0, [pc, #8]	; (1f834 <nrfx_wdt_init+0x50>)
   1f82a:	e000      	b.n	1f82e <nrfx_wdt_init+0x4a>
        return err_code;
   1f82c:	4802      	ldr	r0, [pc, #8]	; (1f838 <nrfx_wdt_init+0x54>)
}
   1f82e:	bd70      	pop	{r4, r5, r6, pc}
   1f830:	200236e4 	.word	0x200236e4
   1f834:	0bad0000 	.word	0x0bad0000
   1f838:	0bad0005 	.word	0x0bad0005

0001f83c <nrfx_wdt_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x01UL;
   1f83c:	2101      	movs	r1, #1
void nrfx_wdt_enable(nrfx_wdt_t const * p_instance)
{
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->alloc_index != 0);
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    nrf_wdt_task_trigger(p_instance->p_reg, NRF_WDT_TASK_START);
   1f83e:	6803      	ldr	r3, [r0, #0]
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f840:	7902      	ldrb	r2, [r0, #4]
   1f842:	6019      	str	r1, [r3, #0]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1f844:	2102      	movs	r1, #2
   1f846:	4b02      	ldr	r3, [pc, #8]	; (1f850 <nrfx_wdt_enable+0x14>)
   1f848:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
    NRFX_LOG_INFO("Enabled.");
}
   1f84c:	4770      	bx	lr
   1f84e:	bf00      	nop
   1f850:	200236e4 	.word	0x200236e4

0001f854 <nrfx_wdt_channel_alloc>:
        nrf_wdt_reload_request_set(p_instance->p_reg, (nrf_wdt_rr_register_t)(NRF_WDT_RR0 + i));
    }
}

nrfx_err_t nrfx_wdt_channel_alloc(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id * p_channel_id)
{
   1f854:	b510      	push	{r4, lr}
    nrfx_err_t result;
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f856:	7902      	ldrb	r2, [r0, #4]
	__asm__ volatile(
   1f858:	f04f 0320 	mov.w	r3, #32
   1f85c:	f3ef 8411 	mrs	r4, BASEPRI
   1f860:	f383 8811 	msr	BASEPRI, r3
   1f864:	f3bf 8f6f 	isb	sy

    NRFX_ASSERT(p_channel_id);
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    NRFX_CRITICAL_SECTION_ENTER();
    if (p_cb->alloc_index < NRF_WDT_CHANNEL_NUMBER)
   1f868:	4b0c      	ldr	r3, [pc, #48]	; (1f89c <nrfx_wdt_channel_alloc+0x48>)
   1f86a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f86e:	785a      	ldrb	r2, [r3, #1]
   1f870:	2a07      	cmp	r2, #7
   1f872:	d810      	bhi.n	1f896 <nrfx_wdt_channel_alloc+0x42>
    {
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
   1f874:	700a      	strb	r2, [r1, #0]
        p_cb->alloc_index++;
   1f876:	1c51      	adds	r1, r2, #1
   1f878:	7059      	strb	r1, [r3, #1]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_enable(NRF_WDT_Type *        p_reg,
                                                     nrf_wdt_rr_register_t rr_register)
{
    p_reg->RREN |= 0x1UL << rr_register;
   1f87a:	2301      	movs	r3, #1
        nrf_wdt_reload_request_enable(p_instance->p_reg, *p_channel_id);
   1f87c:	6801      	ldr	r1, [r0, #0]
   1f87e:	4093      	lsls	r3, r2
   1f880:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
   1f884:	4303      	orrs	r3, r0
        result = NRFX_SUCCESS;
   1f886:	4806      	ldr	r0, [pc, #24]	; (1f8a0 <nrfx_wdt_channel_alloc+0x4c>)
   1f888:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
	__asm__ volatile(
   1f88c:	f384 8811 	msr	BASEPRI, r4
   1f890:	f3bf 8f6f 	isb	sy
        result = NRFX_ERROR_NO_MEM;
    }
    NRFX_CRITICAL_SECTION_EXIT();
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(result));
    return result;
}
   1f894:	bd10      	pop	{r4, pc}
        result = NRFX_ERROR_NO_MEM;
   1f896:	4803      	ldr	r0, [pc, #12]	; (1f8a4 <nrfx_wdt_channel_alloc+0x50>)
   1f898:	e7f8      	b.n	1f88c <nrfx_wdt_channel_alloc+0x38>
   1f89a:	bf00      	nop
   1f89c:	200236e4 	.word	0x200236e4
   1f8a0:	0bad0000 	.word	0x0bad0000
   1f8a4:	0bad0002 	.word	0x0bad0002

0001f8a8 <nrfx_wdt_channel_feed>:

void nrfx_wdt_channel_feed(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id channel_id)
{
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
    nrf_wdt_reload_request_set(p_instance->p_reg, channel_id);
   1f8a8:	6803      	ldr	r3, [r0, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
   1f8aa:	4a03      	ldr	r2, [pc, #12]	; (1f8b8 <nrfx_wdt_channel_feed+0x10>)
   1f8ac:	f501 71c0 	add.w	r1, r1, #384	; 0x180
   1f8b0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
   1f8b4:	4770      	bx	lr
   1f8b6:	bf00      	nop
   1f8b8:	6e524635 	.word	0x6e524635

0001f8bc <nrfx_wdt_0_irq_handler>:

#if NRFX_CHECK(NRFX_WDT0_ENABLED) && !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
void nrfx_wdt_0_irq_handler(void)
{
   1f8bc:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1f8be:	4c04      	ldr	r4, [pc, #16]	; (1f8d0 <nrfx_wdt_0_irq_handler+0x14>)
   1f8c0:	6823      	ldr	r3, [r4, #0]
    if (nrf_wdt_event_check(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT))
   1f8c2:	b123      	cbz	r3, 1f8ce <nrfx_wdt_0_irq_handler+0x12>
    {
        m_cb[NRFX_WDT0_INST_IDX].wdt_event_handler();
   1f8c4:	4b03      	ldr	r3, [pc, #12]	; (1f8d4 <nrfx_wdt_0_irq_handler+0x18>)
   1f8c6:	685b      	ldr	r3, [r3, #4]
   1f8c8:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f8ca:	2300      	movs	r3, #0
   1f8cc:	6023      	str	r3, [r4, #0]
        nrf_wdt_event_clear(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT);
    }
}
   1f8ce:	bd10      	pop	{r4, pc}
   1f8d0:	40018100 	.word	0x40018100
   1f8d4:	200236e4 	.word	0x200236e4

0001f8d8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
   1f8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
   1f8da:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f8dc:	4b08      	ldr	r3, [pc, #32]	; (1f900 <z_sys_init_run_level+0x28>)
   1f8de:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1f8e2:	3001      	adds	r0, #1
   1f8e4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1f8e8:	42a6      	cmp	r6, r4
   1f8ea:	d800      	bhi.n	1f8ee <z_sys_init_run_level+0x16>
			}
		}
	}
}
   1f8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
   1f8ee:	e9d4 3500 	ldrd	r3, r5, [r4]
   1f8f2:	4628      	mov	r0, r5
   1f8f4:	4798      	blx	r3
		if (retval != 0) {
   1f8f6:	b108      	cbz	r0, 1f8fc <z_sys_init_run_level+0x24>
			if (dev) {
   1f8f8:	b105      	cbz	r5, 1f8fc <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
   1f8fa:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f8fc:	3408      	adds	r4, #8
   1f8fe:	e7f3      	b.n	1f8e8 <z_sys_init_run_level+0x10>
   1f900:	0002abfc 	.word	0x0002abfc

0001f904 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1f904:	4b0f      	ldr	r3, [pc, #60]	; (1f944 <z_impl_device_get_binding+0x40>)
{
   1f906:	b570      	push	{r4, r5, r6, lr}
   1f908:	4605      	mov	r5, r0
   1f90a:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
   1f90c:	4c0e      	ldr	r4, [pc, #56]	; (1f948 <z_impl_device_get_binding+0x44>)
   1f90e:	429c      	cmp	r4, r3
   1f910:	d104      	bne.n	1f91c <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1f912:	4c0d      	ldr	r4, [pc, #52]	; (1f948 <z_impl_device_get_binding+0x44>)
   1f914:	42b4      	cmp	r4, r6
   1f916:	d108      	bne.n	1f92a <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
   1f918:	2400      	movs	r4, #0
   1f91a:	e010      	b.n	1f93e <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
   1f91c:	68a2      	ldr	r2, [r4, #8]
   1f91e:	b112      	cbz	r2, 1f926 <z_impl_device_get_binding+0x22>
   1f920:	6822      	ldr	r2, [r4, #0]
   1f922:	42aa      	cmp	r2, r5
   1f924:	d00b      	beq.n	1f93e <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f926:	3410      	adds	r4, #16
   1f928:	e7f1      	b.n	1f90e <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
   1f92a:	68a3      	ldr	r3, [r4, #8]
   1f92c:	b90b      	cbnz	r3, 1f932 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f92e:	3410      	adds	r4, #16
   1f930:	e7f0      	b.n	1f914 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
   1f932:	4628      	mov	r0, r5
   1f934:	6821      	ldr	r1, [r4, #0]
   1f936:	f7ed faf5 	bl	cf24 <strcmp>
		if ((dev->driver_api != NULL) &&
   1f93a:	2800      	cmp	r0, #0
   1f93c:	d1f7      	bne.n	1f92e <z_impl_device_get_binding+0x2a>
}
   1f93e:	4620      	mov	r0, r4
   1f940:	bd70      	pop	{r4, r5, r6, pc}
   1f942:	bf00      	nop
   1f944:	20020864 	.word	0x20020864
   1f948:	200207c4 	.word	0x200207c4

0001f94c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1f94c:	4b01      	ldr	r3, [pc, #4]	; (1f954 <z_impl_z_errno+0x8>)
   1f94e:	6898      	ldr	r0, [r3, #8]
}
   1f950:	305c      	adds	r0, #92	; 0x5c
   1f952:	4770      	bx	lr
   1f954:	200280bc 	.word	0x200280bc

0001f958 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f958:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f95c:	4605      	mov	r5, r0
   1f95e:	460f      	mov	r7, r1
	__asm__ volatile(
   1f960:	f04f 0320 	mov.w	r3, #32
   1f964:	f3ef 8811 	mrs	r8, BASEPRI
   1f968:	f383 8811 	msr	BASEPRI, r3
   1f96c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1f970:	f000 fece 	bl	20710 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f974:	2200      	movs	r2, #0
   1f976:	4b22      	ldr	r3, [pc, #136]	; (1fa00 <z_fatal_error+0xa8>)
   1f978:	4c22      	ldr	r4, [pc, #136]	; (1fa04 <z_fatal_error+0xac>)
   1f97a:	2d04      	cmp	r5, #4
   1f97c:	eba4 0403 	sub.w	r4, r4, r3
   1f980:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1f984:	bf98      	it	ls
   1f986:	4b20      	ldrls	r3, [pc, #128]	; (1fa08 <z_fatal_error+0xb0>)
   1f988:	ea4f 1484 	mov.w	r4, r4, lsl #6
   1f98c:	4606      	mov	r6, r0
   1f98e:	bf94      	ite	ls
   1f990:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   1f994:	4b1d      	ldrhi	r3, [pc, #116]	; (1fa0c <z_fatal_error+0xb4>)
   1f996:	9200      	str	r2, [sp, #0]
   1f998:	491d      	ldr	r1, [pc, #116]	; (1fa10 <z_fatal_error+0xb8>)
   1f99a:	462a      	mov	r2, r5
   1f99c:	f044 0001 	orr.w	r0, r4, #1
   1f9a0:	f004 fdae 	bl	24500 <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f9a4:	b147      	cbz	r7, 1f9b8 <z_fatal_error+0x60>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f9a6:	69fb      	ldr	r3, [r7, #28]
   1f9a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f9ac:	b123      	cbz	r3, 1f9b8 <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
   1f9ae:	4919      	ldr	r1, [pc, #100]	; (1fa14 <z_fatal_error+0xbc>)
   1f9b0:	f044 0001 	orr.w	r0, r4, #1
   1f9b4:	f004 fda4 	bl	24500 <log_string_sync>
	const char *thread_name = k_thread_name_get(thread);
   1f9b8:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f9ba:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   1f9be:	f009 fb33 	bl	29028 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1f9c2:	b1d0      	cbz	r0, 1f9fa <z_fatal_error+0xa2>
   1f9c4:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1f9c6:	4b14      	ldr	r3, [pc, #80]	; (1fa18 <z_fatal_error+0xc0>)
   1f9c8:	2a00      	cmp	r2, #0
   1f9ca:	bf08      	it	eq
   1f9cc:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1f9ce:	f004 fda9 	bl	24524 <log_strdup>
   1f9d2:	4632      	mov	r2, r6
   1f9d4:	4603      	mov	r3, r0
   1f9d6:	4911      	ldr	r1, [pc, #68]	; (1fa1c <z_fatal_error+0xc4>)
   1f9d8:	4620      	mov	r0, r4
   1f9da:	f004 fd91 	bl	24500 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1f9de:	4639      	mov	r1, r7
   1f9e0:	4628      	mov	r0, r5
   1f9e2:	f7ee fd75 	bl	e4d0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1f9e6:	f388 8811 	msr	BASEPRI, r8
   1f9ea:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f9ee:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1f9f0:	b002      	add	sp, #8
   1f9f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f9f6:	f7f1 bd83 	b.w	11500 <z_impl_k_thread_abort>
		thread_name = "unknown";
   1f9fa:	4807      	ldr	r0, [pc, #28]	; (1fa18 <z_fatal_error+0xc0>)
   1f9fc:	e7e7      	b.n	1f9ce <z_fatal_error+0x76>
   1f9fe:	bf00      	nop
   1fa00:	0002a2c4 	.word	0x0002a2c4
   1fa04:	0002a344 	.word	0x0002a344
   1fa08:	0002ac14 	.word	0x0002ac14
   1fa0c:	0002cfae 	.word	0x0002cfae
   1fa10:	0002cfc4 	.word	0x0002cfc4
   1fa14:	0002cfec 	.word	0x0002cfec
   1fa18:	0002cfbc 	.word	0x0002cfbc
   1fa1c:	0002d00d 	.word	0x0002d00d

0001fa20 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1fa20:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1fa22:	4d0b      	ldr	r5, [pc, #44]	; (1fa50 <idle+0x30>)
	__asm__ volatile(
   1fa24:	f04f 0220 	mov.w	r2, #32
   1fa28:	f3ef 8311 	mrs	r3, BASEPRI
   1fa2c:	f382 8811 	msr	BASEPRI, r2
   1fa30:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   1fa34:	f009 fb99 	bl	2916a <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1fa38:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   1fa3a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1fa3c:	2802      	cmp	r0, #2
   1fa3e:	bfd8      	it	le
   1fa40:	4608      	movle	r0, r1
   1fa42:	f009 fba2 	bl	2918a <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1fa46:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   1fa48:	f7f1 fac0 	bl	10fcc <arch_cpu_idle>
}
   1fa4c:	e7ea      	b.n	1fa24 <idle+0x4>
   1fa4e:	bf00      	nop
   1fa50:	200280bc 	.word	0x200280bc

0001fa54 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1fa54:	4802      	ldr	r0, [pc, #8]	; (1fa60 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   1fa56:	4a03      	ldr	r2, [pc, #12]	; (1fa64 <z_bss_zero+0x10>)
   1fa58:	2100      	movs	r1, #0
   1fa5a:	1a12      	subs	r2, r2, r0
   1fa5c:	f009 bd43 	b.w	294e6 <memset>
   1fa60:	20020a20 	.word	0x20020a20
   1fa64:	2002b108 	.word	0x2002b108

0001fa68 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1fa68:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1fa6a:	4806      	ldr	r0, [pc, #24]	; (1fa84 <z_data_copy+0x1c>)
   1fa6c:	4a06      	ldr	r2, [pc, #24]	; (1fa88 <z_data_copy+0x20>)
   1fa6e:	4907      	ldr	r1, [pc, #28]	; (1fa8c <z_data_copy+0x24>)
   1fa70:	1a12      	subs	r2, r2, r0
   1fa72:	f009 fcfe 	bl	29472 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1fa76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1fa7a:	4a05      	ldr	r2, [pc, #20]	; (1fa90 <z_data_copy+0x28>)
   1fa7c:	4905      	ldr	r1, [pc, #20]	; (1fa94 <z_data_copy+0x2c>)
   1fa7e:	4806      	ldr	r0, [pc, #24]	; (1fa98 <z_data_copy+0x30>)
   1fa80:	f009 bcf7 	b.w	29472 <memcpy>
   1fa84:	20020000 	.word	0x20020000
   1fa88:	20020a1c 	.word	0x20020a1c
   1fa8c:	0002d478 	.word	0x0002d478
   1fa90:	00000000 	.word	0x00000000
   1fa94:	0002d478 	.word	0x0002d478
   1fa98:	20020000 	.word	0x20020000

0001fa9c <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1fa9c:	2201      	movs	r2, #1
{
   1fa9e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1faa0:	4b0b      	ldr	r3, [pc, #44]	; (1fad0 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1faa2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1faa4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1faa6:	f7ff ff17 	bl	1f8d8 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1faaa:	4a0a      	ldr	r2, [pc, #40]	; (1fad4 <bg_thread_main+0x38>)
   1faac:	490a      	ldr	r1, [pc, #40]	; (1fad8 <bg_thread_main+0x3c>)
   1faae:	480b      	ldr	r0, [pc, #44]	; (1fadc <bg_thread_main+0x40>)
   1fab0:	f004 fa6f 	bl	23f92 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1fab4:	2003      	movs	r0, #3
   1fab6:	f7ff ff0f 	bl	1f8d8 <z_sys_init_run_level>

	z_init_static_threads();
   1faba:	f000 fee9 	bl	20890 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1fabe:	f7ee fd57 	bl	e570 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1fac2:	4a07      	ldr	r2, [pc, #28]	; (1fae0 <bg_thread_main+0x44>)
   1fac4:	7b13      	ldrb	r3, [r2, #12]
   1fac6:	f023 0301 	bic.w	r3, r3, #1
   1faca:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1facc:	bd08      	pop	{r3, pc}
   1face:	bf00      	nop
   1fad0:	2002af78 	.word	0x2002af78
   1fad4:	0002cc6c 	.word	0x0002cc6c
   1fad8:	0002d06f 	.word	0x0002d06f
   1fadc:	0002d07f 	.word	0x0002d07f
   1fae0:	200237a4 	.word	0x200237a4

0001fae4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1fae4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1fae8:	b0b5      	sub	sp, #212	; 0xd4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1faea:	f7f0 f999 	bl	fe20 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
   1faee:	4b36      	ldr	r3, [pc, #216]	; (1fbc8 <z_cstart+0xe4>)
   1faf0:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1faf4:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1faf8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1fafc:	2400      	movs	r4, #0
   1fafe:	23e0      	movs	r3, #224	; 0xe0
   1fb00:	4d32      	ldr	r5, [pc, #200]	; (1fbcc <z_cstart+0xe8>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1fb02:	f04f 0b01 	mov.w	fp, #1
   1fb06:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1fb0a:	77ec      	strb	r4, [r5, #31]
   1fb0c:	762c      	strb	r4, [r5, #24]
   1fb0e:	766c      	strb	r4, [r5, #25]
   1fb10:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1fb12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   1fb14:	4e2e      	ldr	r6, [pc, #184]	; (1fbd0 <z_cstart+0xec>)
   1fb16:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1fb1a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1fb1c:	f7f1 fcc6 	bl	114ac <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1fb20:	f7f1 fa4e 	bl	10fc0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1fb24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fb28:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1fb2a:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1fb2c:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
   1fb30:	4d28      	ldr	r5, [pc, #160]	; (1fbd4 <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1fb32:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1fb36:	ab06      	add	r3, sp, #24
   1fb38:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1fb3a:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1fb3c:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
   1fb40:	f7ff feca 	bl	1f8d8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1fb44:	2001      	movs	r0, #1
   1fb46:	f7ff fec7 	bl	1f8d8 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1fb4a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1fbe8 <z_cstart+0x104>
	z_sched_init();
   1fb4e:	f000 fd67 	bl	20620 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1fb52:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1fbec <z_cstart+0x108>
   1fb56:	4b20      	ldr	r3, [pc, #128]	; (1fbd8 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   1fb58:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1fb5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1fb5e:	4641      	mov	r1, r8
   1fb60:	4630      	mov	r0, r6
   1fb62:	9305      	str	r3, [sp, #20]
   1fb64:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1fb68:	4653      	mov	r3, sl
   1fb6a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1fb6e:	9400      	str	r4, [sp, #0]
   1fb70:	f000 fe3c 	bl	207ec <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1fb74:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   1fb76:	4630      	mov	r0, r6
   1fb78:	f023 0304 	bic.w	r3, r3, #4
   1fb7c:	7373      	strb	r3, [r6, #13]
   1fb7e:	f009 f988 	bl	28e92 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1fb82:	230f      	movs	r3, #15
   1fb84:	4f15      	ldr	r7, [pc, #84]	; (1fbdc <z_cstart+0xf8>)
   1fb86:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1fb8a:	4638      	mov	r0, r7
   1fb8c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1fb90:	4913      	ldr	r1, [pc, #76]	; (1fbe0 <z_cstart+0xfc>)
   1fb92:	4b14      	ldr	r3, [pc, #80]	; (1fbe4 <z_cstart+0x100>)
   1fb94:	e9cd b404 	strd	fp, r4, [sp, #16]
   1fb98:	e9cd 4400 	strd	r4, r4, [sp]
   1fb9c:	f000 fe26 	bl	207ec <z_setup_new_thread>
   1fba0:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1fba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1fba6:	f023 0304 	bic.w	r3, r3, #4
   1fbaa:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1fbac:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1fbb0:	e9c5 3306 	strd	r3, r3, [r5, #24]
   1fbb4:	4641      	mov	r1, r8
   1fbb6:	4653      	mov	r3, sl
   1fbb8:	4630      	mov	r0, r6
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1fbba:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   1fbbc:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1fbbe:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1fbc2:	f7f1 f8cf 	bl	10d64 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1fbc6:	bf00      	nop
   1fbc8:	2002ebd8 	.word	0x2002ebd8
   1fbcc:	e000ed00 	.word	0xe000ed00
   1fbd0:	200237a4 	.word	0x200237a4
   1fbd4:	200280bc 	.word	0x200280bc
   1fbd8:	0002d0a6 	.word	0x0002d0a6
   1fbdc:	200236ec 	.word	0x200236ec
   1fbe0:	2002ea98 	.word	0x2002ea98
   1fbe4:	0001fa21 	.word	0x0001fa21
   1fbe8:	0001fa9d 	.word	0x0001fa9d
   1fbec:	2002ca98 	.word	0x2002ca98

0001fbf0 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
   1fbf0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1fbf2:	4c06      	ldr	r4, [pc, #24]	; (1fc0c <statics_init+0x1c>)
   1fbf4:	4d06      	ldr	r5, [pc, #24]	; (1fc10 <statics_init+0x20>)
   1fbf6:	42ac      	cmp	r4, r5
   1fbf8:	d301      	bcc.n	1fbfe <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1fbfa:	2000      	movs	r0, #0
   1fbfc:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1fbfe:	4620      	mov	r0, r4
   1fc00:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1fc04:	f008 ff96 	bl	28b34 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1fc08:	3414      	adds	r4, #20
   1fc0a:	e7f4      	b.n	1fbf6 <statics_init+0x6>
   1fc0c:	200208b8 	.word	0x200208b8
   1fc10:	200208cc 	.word	0x200208cc

0001fc14 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1fc14:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1fc16:	4b0e      	ldr	r3, [pc, #56]	; (1fc50 <init_mem_slab_module+0x3c>)
   1fc18:	4c0e      	ldr	r4, [pc, #56]	; (1fc54 <init_mem_slab_module+0x40>)
   1fc1a:	42a3      	cmp	r3, r4
   1fc1c:	d301      	bcc.n	1fc22 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1fc1e:	2000      	movs	r0, #0
	return rc;
}
   1fc20:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1fc22:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1fc26:	ea41 0200 	orr.w	r2, r1, r0
   1fc2a:	f012 0203 	ands.w	r2, r2, #3
   1fc2e:	d10b      	bne.n	1fc48 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1fc30:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1fc32:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1fc34:	42aa      	cmp	r2, r5
   1fc36:	d101      	bne.n	1fc3c <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1fc38:	331c      	adds	r3, #28
   1fc3a:	e7ee      	b.n	1fc1a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1fc3c:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1fc3e:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   1fc40:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   1fc42:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1fc44:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1fc46:	e7f5      	b.n	1fc34 <init_mem_slab_module+0x20>
		return -EINVAL;
   1fc48:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1fc4c:	e7e8      	b.n	1fc20 <init_mem_slab_module+0xc>
   1fc4e:	bf00      	nop
   1fc50:	20020864 	.word	0x20020864
   1fc54:	200208b8 	.word	0x200208b8

0001fc58 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1fc58:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1fc5a:	460c      	mov	r4, r1
   1fc5c:	4616      	mov	r6, r2
   1fc5e:	461f      	mov	r7, r3
   1fc60:	f04f 0320 	mov.w	r3, #32
   1fc64:	f3ef 8111 	mrs	r1, BASEPRI
   1fc68:	f383 8811 	msr	BASEPRI, r3
   1fc6c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1fc70:	6943      	ldr	r3, [r0, #20]
   1fc72:	b15b      	cbz	r3, 1fc8c <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1fc74:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1fc76:	681b      	ldr	r3, [r3, #0]
   1fc78:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1fc7a:	6983      	ldr	r3, [r0, #24]
   1fc7c:	3301      	adds	r3, #1
   1fc7e:	6183      	str	r3, [r0, #24]
		result = 0;
   1fc80:	2000      	movs	r0, #0
	__asm__ volatile(
   1fc82:	f381 8811 	msr	BASEPRI, r1
   1fc86:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1fc8a:	e011      	b.n	1fcb0 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fc8c:	ea56 0207 	orrs.w	r2, r6, r7
   1fc90:	d103      	bne.n	1fc9a <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   1fc92:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   1fc96:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1fc98:	e7f3      	b.n	1fc82 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1fc9a:	4602      	mov	r2, r0
   1fc9c:	e9cd 6700 	strd	r6, r7, [sp]
   1fca0:	4804      	ldr	r0, [pc, #16]	; (1fcb4 <k_mem_slab_alloc+0x5c>)
   1fca2:	f000 fc69 	bl	20578 <z_pend_curr>
		if (result == 0) {
   1fca6:	b918      	cbnz	r0, 1fcb0 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1fca8:	4b03      	ldr	r3, [pc, #12]	; (1fcb8 <k_mem_slab_alloc+0x60>)
   1fcaa:	689b      	ldr	r3, [r3, #8]
   1fcac:	695b      	ldr	r3, [r3, #20]
   1fcae:	6023      	str	r3, [r4, #0]
}
   1fcb0:	b002      	add	sp, #8
   1fcb2:	bdd0      	pop	{r4, r6, r7, pc}
   1fcb4:	2002af79 	.word	0x2002af79
   1fcb8:	200280bc 	.word	0x200280bc

0001fcbc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1fcbc:	b570      	push	{r4, r5, r6, lr}
   1fcbe:	4604      	mov	r4, r0
   1fcc0:	460d      	mov	r5, r1
	__asm__ volatile(
   1fcc2:	f04f 0320 	mov.w	r3, #32
   1fcc6:	f3ef 8611 	mrs	r6, BASEPRI
   1fcca:	f383 8811 	msr	BASEPRI, r3
   1fcce:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1fcd2:	f009 f951 	bl	28f78 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1fcd6:	b158      	cbz	r0, 1fcf0 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1fcd8:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1fcda:	682a      	ldr	r2, [r5, #0]
   1fcdc:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1fcde:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   1fce0:	f009 f8d7 	bl	28e92 <z_ready_thread>
		z_reschedule(&lock, key);
   1fce4:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1fce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1fcea:	4808      	ldr	r0, [pc, #32]	; (1fd0c <k_mem_slab_free+0x50>)
   1fcec:	f009 b88d 	b.w	28e0a <z_reschedule>
		**(char ***)mem = slab->free_list;
   1fcf0:	682b      	ldr	r3, [r5, #0]
   1fcf2:	6962      	ldr	r2, [r4, #20]
   1fcf4:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1fcf6:	682b      	ldr	r3, [r5, #0]
   1fcf8:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1fcfa:	69a3      	ldr	r3, [r4, #24]
   1fcfc:	3b01      	subs	r3, #1
   1fcfe:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1fd00:	f386 8811 	msr	BASEPRI, r6
   1fd04:	f3bf 8f6f 	isb	sy
}
   1fd08:	bd70      	pop	{r4, r5, r6, pc}
   1fd0a:	bf00      	nop
   1fd0c:	2002af79 	.word	0x2002af79

0001fd10 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   1fd10:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1fd12:	4801      	ldr	r0, [pc, #4]	; (1fd18 <k_malloc+0x8>)
   1fd14:	f008 bf93 	b.w	28c3e <k_mem_pool_malloc>
   1fd18:	200205c4 	.word	0x200205c4

0001fd1c <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1fd1c:	b507      	push	{r0, r1, r2, lr}
   1fd1e:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1fd20:	f009 f977 	bl	29012 <k_is_in_isr>
   1fd24:	9901      	ldr	r1, [sp, #4]
   1fd26:	b948      	cbnz	r0, 1fd3c <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1fd28:	4b07      	ldr	r3, [pc, #28]	; (1fd48 <z_thread_malloc+0x2c>)
   1fd2a:	689b      	ldr	r3, [r3, #8]
   1fd2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	}

	if (pool) {
   1fd2e:	b13b      	cbz	r3, 1fd40 <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   1fd30:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1fd32:	b003      	add	sp, #12
   1fd34:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   1fd38:	f008 bf81 	b.w	28c3e <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   1fd3c:	4b03      	ldr	r3, [pc, #12]	; (1fd4c <z_thread_malloc+0x30>)
   1fd3e:	e7f7      	b.n	1fd30 <z_thread_malloc+0x14>
}
   1fd40:	b003      	add	sp, #12
   1fd42:	f85d fb04 	ldr.w	pc, [sp], #4
   1fd46:	bf00      	nop
   1fd48:	200280bc 	.word	0x200280bc
   1fd4c:	200205c4 	.word	0x200205c4

0001fd50 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   1fd50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fd54:	4604      	mov	r4, r0
   1fd56:	4616      	mov	r6, r2
   1fd58:	461f      	mov	r7, r3
   1fd5a:	b085      	sub	sp, #20

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1fd5c:	f100 0908 	add.w	r9, r0, #8
	__asm__ volatile(
   1fd60:	f04f 0320 	mov.w	r3, #32
   1fd64:	f3ef 8811 	mrs	r8, BASEPRI
   1fd68:	f383 8811 	msr	BASEPRI, r3
   1fd6c:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   1fd70:	6a02      	ldr	r2, [r0, #32]
   1fd72:	68c3      	ldr	r3, [r0, #12]
   1fd74:	429a      	cmp	r2, r3
   1fd76:	d22b      	bcs.n	1fdd0 <z_impl_k_msgq_put+0x80>
   1fd78:	9103      	str	r1, [sp, #12]
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1fd7a:	f009 f8fd 	bl	28f78 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1fd7e:	68a2      	ldr	r2, [r4, #8]
   1fd80:	4605      	mov	r5, r0
   1fd82:	9903      	ldr	r1, [sp, #12]
   1fd84:	b178      	cbz	r0, 1fda6 <z_impl_k_msgq_put+0x56>
   1fd86:	2400      	movs	r4, #0
   1fd88:	6940      	ldr	r0, [r0, #20]
   1fd8a:	f009 fb72 	bl	29472 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1fd8e:	4628      	mov	r0, r5
   1fd90:	672c      	str	r4, [r5, #112]	; 0x70
   1fd92:	f009 f87e 	bl	28e92 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1fd96:	4648      	mov	r0, r9
   1fd98:	4641      	mov	r1, r8
   1fd9a:	f009 f836 	bl	28e0a <z_reschedule>
			return 0;
   1fd9e:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1fda0:	b005      	add	sp, #20
   1fda2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fda6:	69e0      	ldr	r0, [r4, #28]
   1fda8:	f009 fb63 	bl	29472 <memcpy>
		result = 0;
   1fdac:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   1fdae:	69e3      	ldr	r3, [r4, #28]
   1fdb0:	68a2      	ldr	r2, [r4, #8]
   1fdb2:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1fdb4:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1fdb6:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1fdb8:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1fdba:	bf04      	itt	eq
   1fdbc:	6923      	ldreq	r3, [r4, #16]
   1fdbe:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1fdc0:	6a23      	ldr	r3, [r4, #32]
   1fdc2:	3301      	adds	r3, #1
   1fdc4:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   1fdc6:	f388 8811 	msr	BASEPRI, r8
   1fdca:	f3bf 8f6f 	isb	sy
	return result;
   1fdce:	e7e7      	b.n	1fda0 <z_impl_k_msgq_put+0x50>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fdd0:	ea56 0307 	orrs.w	r3, r6, r7
   1fdd4:	d00a      	beq.n	1fdec <z_impl_k_msgq_put+0x9c>
		_current->base.swap_data = data;
   1fdd6:	4b07      	ldr	r3, [pc, #28]	; (1fdf4 <z_impl_k_msgq_put+0xa4>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1fdd8:	4602      	mov	r2, r0
		_current->base.swap_data = data;
   1fdda:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1fddc:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   1fdde:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1fde0:	4641      	mov	r1, r8
   1fde2:	e9cd 6700 	strd	r6, r7, [sp]
   1fde6:	f000 fbc7 	bl	20578 <z_pend_curr>
   1fdea:	e7d9      	b.n	1fda0 <z_impl_k_msgq_put+0x50>
		result = -ENOMSG;
   1fdec:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1fdf0:	e7e9      	b.n	1fdc6 <z_impl_k_msgq_put+0x76>
   1fdf2:	bf00      	nop
   1fdf4:	200280bc 	.word	0x200280bc

0001fdf8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   1fdf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1fdfc:	4604      	mov	r4, r0
   1fdfe:	4616      	mov	r6, r2
   1fe00:	4608      	mov	r0, r1
   1fe02:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1fe04:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   1fe08:	f04f 0320 	mov.w	r3, #32
   1fe0c:	f3ef 8811 	mrs	r8, BASEPRI
   1fe10:	f383 8811 	msr	BASEPRI, r3
   1fe14:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   1fe18:	6a23      	ldr	r3, [r4, #32]
   1fe1a:	2b00      	cmp	r3, #0
   1fe1c:	d032      	beq.n	1fe84 <z_impl_k_msgq_get+0x8c>
   1fe1e:	68a2      	ldr	r2, [r4, #8]
   1fe20:	69a1      	ldr	r1, [r4, #24]
   1fe22:	f009 fb26 	bl	29472 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   1fe26:	69a3      	ldr	r3, [r4, #24]
   1fe28:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1fe2a:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   1fe2c:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1fe2e:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   1fe30:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1fe32:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1fe34:	bf04      	itt	eq
   1fe36:	6923      	ldreq	r3, [r4, #16]
   1fe38:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   1fe3a:	6a23      	ldr	r3, [r4, #32]
   1fe3c:	3b01      	subs	r3, #1
   1fe3e:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1fe40:	f009 f89a 	bl	28f78 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1fe44:	4605      	mov	r5, r0
   1fe46:	b368      	cbz	r0, 1fea4 <z_impl_k_msgq_get+0xac>
   1fe48:	6941      	ldr	r1, [r0, #20]
   1fe4a:	68a2      	ldr	r2, [r4, #8]
   1fe4c:	69e0      	ldr	r0, [r4, #28]
   1fe4e:	f009 fb10 	bl	29472 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1fe52:	69e3      	ldr	r3, [r4, #28]
   1fe54:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1fe56:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   1fe58:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1fe5a:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1fe5c:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1fe5e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1fe60:	bf04      	itt	eq
   1fe62:	6923      	ldreq	r3, [r4, #16]
   1fe64:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1fe66:	6a23      	ldr	r3, [r4, #32]
   1fe68:	3301      	adds	r3, #1
   1fe6a:	6223      	str	r3, [r4, #32]
   1fe6c:	2400      	movs	r4, #0
   1fe6e:	672c      	str	r4, [r5, #112]	; 0x70
			z_ready_thread(pending_thread);
   1fe70:	f009 f80f 	bl	28e92 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1fe74:	4648      	mov	r0, r9
   1fe76:	4641      	mov	r1, r8
   1fe78:	f008 ffc7 	bl	28e0a <z_reschedule>
			return 0;
   1fe7c:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1fe7e:	b003      	add	sp, #12
   1fe80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fe84:	ea56 0307 	orrs.w	r3, r6, r7
   1fe88:	d00a      	beq.n	1fea0 <z_impl_k_msgq_get+0xa8>
		_current->base.swap_data = data;
   1fe8a:	4b09      	ldr	r3, [pc, #36]	; (1feb0 <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1fe8c:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   1fe8e:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1fe90:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   1fe92:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1fe94:	4641      	mov	r1, r8
   1fe96:	e9cd 6700 	strd	r6, r7, [sp]
   1fe9a:	f000 fb6d 	bl	20578 <z_pend_curr>
   1fe9e:	e7ee      	b.n	1fe7e <z_impl_k_msgq_get+0x86>
		result = -ENOMSG;
   1fea0:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   1fea4:	f388 8811 	msr	BASEPRI, r8
   1fea8:	f3bf 8f6f 	isb	sy
	return result;
   1feac:	e7e7      	b.n	1fe7e <z_impl_k_msgq_get+0x86>
   1feae:	bf00      	nop
   1feb0:	200280bc 	.word	0x200280bc

0001feb4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1feb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1feb8:	4604      	mov	r4, r0
   1feba:	4616      	mov	r6, r2
   1febc:	461f      	mov	r7, r3
	__asm__ volatile(
   1febe:	f04f 0320 	mov.w	r3, #32
   1fec2:	f3ef 8811 	mrs	r8, BASEPRI
   1fec6:	f383 8811 	msr	BASEPRI, r3
   1feca:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1fece:	68c3      	ldr	r3, [r0, #12]
   1fed0:	4a32      	ldr	r2, [pc, #200]	; (1ff9c <z_impl_k_mutex_lock+0xe8>)
   1fed2:	b16b      	cbz	r3, 1fef0 <z_impl_k_mutex_lock+0x3c>
   1fed4:	6880      	ldr	r0, [r0, #8]
   1fed6:	6891      	ldr	r1, [r2, #8]
   1fed8:	4288      	cmp	r0, r1
   1feda:	d019      	beq.n	1ff10 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1fedc:	ea56 0307 	orrs.w	r3, r6, r7
   1fee0:	d118      	bne.n	1ff14 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1fee2:	f388 8811 	msr	BASEPRI, r8
   1fee6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1feea:	f06f 000f 	mvn.w	r0, #15
   1feee:	e00c      	b.n	1ff0a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1fef0:	6891      	ldr	r1, [r2, #8]
   1fef2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1fef6:	3301      	adds	r3, #1
   1fef8:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1fefa:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1fefc:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1fefe:	60a3      	str	r3, [r4, #8]
   1ff00:	f388 8811 	msr	BASEPRI, r8
   1ff04:	f3bf 8f6f 	isb	sy
		return 0;
   1ff08:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1ff0a:	b002      	add	sp, #8
   1ff0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1ff10:	6921      	ldr	r1, [r4, #16]
   1ff12:	e7f0      	b.n	1fef6 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1ff14:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ff18:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1ff1c:	4299      	cmp	r1, r3
   1ff1e:	bfa8      	it	ge
   1ff20:	4619      	movge	r1, r3
   1ff22:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1ff26:	428b      	cmp	r3, r1
   1ff28:	dd2c      	ble.n	1ff84 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1ff2a:	f000 fb39 	bl	205a0 <z_set_prio>
   1ff2e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1ff30:	4622      	mov	r2, r4
   1ff32:	4641      	mov	r1, r8
   1ff34:	e9cd 6700 	strd	r6, r7, [sp]
   1ff38:	4819      	ldr	r0, [pc, #100]	; (1ffa0 <z_impl_k_mutex_lock+0xec>)
   1ff3a:	f000 fb1d 	bl	20578 <z_pend_curr>
	if (got_mutex == 0) {
   1ff3e:	2800      	cmp	r0, #0
   1ff40:	d0e3      	beq.n	1ff0a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1ff42:	f04f 0320 	mov.w	r3, #32
   1ff46:	f3ef 8611 	mrs	r6, BASEPRI
   1ff4a:	f383 8811 	msr	BASEPRI, r3
   1ff4e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1ff52:	6823      	ldr	r3, [r4, #0]
   1ff54:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ff56:	429c      	cmp	r4, r3
   1ff58:	d007      	beq.n	1ff6a <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1ff5a:	b133      	cbz	r3, 1ff6a <z_impl_k_mutex_lock+0xb6>
   1ff5c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1ff60:	4299      	cmp	r1, r3
   1ff62:	bfa8      	it	ge
   1ff64:	4619      	movge	r1, r3
   1ff66:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1ff6a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1ff6c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ff70:	4299      	cmp	r1, r3
   1ff72:	d109      	bne.n	1ff88 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1ff74:	b16d      	cbz	r5, 1ff92 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1ff76:	4631      	mov	r1, r6
   1ff78:	4809      	ldr	r0, [pc, #36]	; (1ffa0 <z_impl_k_mutex_lock+0xec>)
   1ff7a:	f008 ff46 	bl	28e0a <z_reschedule>
	return -EAGAIN;
   1ff7e:	f06f 000a 	mvn.w	r0, #10
   1ff82:	e7c2      	b.n	1ff0a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1ff84:	2500      	movs	r5, #0
   1ff86:	e7d3      	b.n	1ff30 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1ff88:	f000 fb0a 	bl	205a0 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1ff8c:	2800      	cmp	r0, #0
   1ff8e:	d1f2      	bne.n	1ff76 <z_impl_k_mutex_lock+0xc2>
   1ff90:	e7f0      	b.n	1ff74 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1ff92:	f386 8811 	msr	BASEPRI, r6
   1ff96:	f3bf 8f6f 	isb	sy
   1ff9a:	e7f0      	b.n	1ff7e <z_impl_k_mutex_lock+0xca>
   1ff9c:	200280bc 	.word	0x200280bc
   1ffa0:	2002af79 	.word	0x2002af79

0001ffa4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1ffa4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   1ffa6:	6883      	ldr	r3, [r0, #8]
{
   1ffa8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1ffaa:	2b00      	cmp	r3, #0
   1ffac:	d036      	beq.n	2001c <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1ffae:	4a1e      	ldr	r2, [pc, #120]	; (20028 <z_impl_k_mutex_unlock+0x84>)
   1ffb0:	6892      	ldr	r2, [r2, #8]
   1ffb2:	4293      	cmp	r3, r2
   1ffb4:	d135      	bne.n	20022 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1ffb6:	7bda      	ldrb	r2, [r3, #15]
   1ffb8:	3a01      	subs	r2, #1
   1ffba:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1ffbc:	68c3      	ldr	r3, [r0, #12]
   1ffbe:	2b01      	cmp	r3, #1
   1ffc0:	d005      	beq.n	1ffce <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1ffc2:	3b01      	subs	r3, #1
   1ffc4:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1ffc6:	f000 f8f7 	bl	201b8 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1ffca:	2000      	movs	r0, #0
}
   1ffcc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1ffce:	f04f 0320 	mov.w	r3, #32
   1ffd2:	f3ef 8511 	mrs	r5, BASEPRI
   1ffd6:	f383 8811 	msr	BASEPRI, r3
   1ffda:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1ffde:	6901      	ldr	r1, [r0, #16]
   1ffe0:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1ffe2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ffe6:	4299      	cmp	r1, r3
   1ffe8:	d001      	beq.n	1ffee <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1ffea:	f000 fad9 	bl	205a0 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1ffee:	4620      	mov	r0, r4
   1fff0:	f008 ffc2 	bl	28f78 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1fff4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1fff6:	b158      	cbz	r0, 20010 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1fff8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1fffc:	6122      	str	r2, [r4, #16]
   1fffe:	2200      	movs	r2, #0
   20000:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
   20002:	f008 ff46 	bl	28e92 <z_ready_thread>
		z_reschedule(&lock, key);
   20006:	4629      	mov	r1, r5
   20008:	4808      	ldr	r0, [pc, #32]	; (2002c <z_impl_k_mutex_unlock+0x88>)
   2000a:	f008 fefe 	bl	28e0a <z_reschedule>
   2000e:	e7da      	b.n	1ffc6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   20010:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   20012:	f385 8811 	msr	BASEPRI, r5
   20016:	f3bf 8f6f 	isb	sy
   2001a:	e7d4      	b.n	1ffc6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   2001c:	f06f 0015 	mvn.w	r0, #21
   20020:	e7d4      	b.n	1ffcc <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   20022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20026:	e7d1      	b.n	1ffcc <z_impl_k_mutex_unlock+0x28>
   20028:	200280bc 	.word	0x200280bc
   2002c:	2002af79 	.word	0x2002af79

00020030 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   20030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20032:	4616      	mov	r6, r2
   20034:	461f      	mov	r7, r3
	__asm__ volatile(
   20036:	f04f 0320 	mov.w	r3, #32
   2003a:	f3ef 8511 	mrs	r5, BASEPRI
   2003e:	f383 8811 	msr	BASEPRI, r3
   20042:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   20046:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   20048:	b19c      	cbz	r4, 20072 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2004a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2004c:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2004e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20052:	4294      	cmp	r4, r2
	list->head = node;
   20054:	6003      	str	r3, [r0, #0]
	list->tail = node;
   20056:	bf08      	it	eq
   20058:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2005a:	2101      	movs	r1, #1
   2005c:	4620      	mov	r0, r4
   2005e:	f008 fe89 	bl	28d74 <z_queue_node_peek>
   20062:	4604      	mov	r4, r0
	__asm__ volatile(
   20064:	f385 8811 	msr	BASEPRI, r5
   20068:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2006c:	4620      	mov	r0, r4
   2006e:	b003      	add	sp, #12
   20070:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20072:	ea56 0307 	orrs.w	r3, r6, r7
   20076:	d0f5      	beq.n	20064 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20078:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2007c:	4629      	mov	r1, r5
   2007e:	4610      	mov	r0, r2
   20080:	e9cd 6700 	strd	r6, r7, [sp]
   20084:	f000 fa78 	bl	20578 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   20088:	2800      	cmp	r0, #0
   2008a:	d1ef      	bne.n	2006c <z_impl_k_queue_get+0x3c>
   2008c:	4b01      	ldr	r3, [pc, #4]	; (20094 <z_impl_k_queue_get+0x64>)
   2008e:	689b      	ldr	r3, [r3, #8]
   20090:	695c      	ldr	r4, [r3, #20]
   20092:	e7eb      	b.n	2006c <z_impl_k_queue_get+0x3c>
   20094:	200280bc 	.word	0x200280bc

00020098 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   20098:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   2009a:	4c08      	ldr	r4, [pc, #32]	; (200bc <z_reset_time_slice+0x24>)
   2009c:	6823      	ldr	r3, [r4, #0]
   2009e:	b15b      	cbz	r3, 200b8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   200a0:	f7f0 fdc2 	bl	10c28 <z_clock_elapsed>
   200a4:	6822      	ldr	r2, [r4, #0]
   200a6:	4906      	ldr	r1, [pc, #24]	; (200c0 <z_reset_time_slice+0x28>)
   200a8:	4410      	add	r0, r2
   200aa:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
   200ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   200b0:	2100      	movs	r1, #0
   200b2:	4610      	mov	r0, r2
   200b4:	f009 b869 	b.w	2918a <z_set_timeout_expiry>
}
   200b8:	bd10      	pop	{r4, pc}
   200ba:	bf00      	nop
   200bc:	200280f8 	.word	0x200280f8
   200c0:	200280bc 	.word	0x200280bc

000200c4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   200c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200c6:	460c      	mov	r4, r1
	__asm__ volatile(
   200c8:	f04f 0320 	mov.w	r3, #32
   200cc:	f3ef 8511 	mrs	r5, BASEPRI
   200d0:	f383 8811 	msr	BASEPRI, r3
   200d4:	f3bf 8f6f 	isb	sy
   200d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   200dc:	f240 36e7 	movw	r6, #999	; 0x3e7
   200e0:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   200e2:	2200      	movs	r2, #0
   200e4:	fbe1 6700 	umlal	r6, r7, r1, r0
   200e8:	4b09      	ldr	r3, [pc, #36]	; (20110 <k_sched_time_slice_set+0x4c>)
   200ea:	4630      	mov	r0, r6
   200ec:	611a      	str	r2, [r3, #16]
   200ee:	4639      	mov	r1, r7
   200f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   200f4:	2300      	movs	r3, #0
   200f6:	f7ec fb5f 	bl	c7b8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   200fa:	4b06      	ldr	r3, [pc, #24]	; (20114 <k_sched_time_slice_set+0x50>)
   200fc:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   200fe:	4b06      	ldr	r3, [pc, #24]	; (20118 <k_sched_time_slice_set+0x54>)
   20100:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   20102:	f7ff ffc9 	bl	20098 <z_reset_time_slice>
	__asm__ volatile(
   20106:	f385 8811 	msr	BASEPRI, r5
   2010a:	f3bf 8f6f 	isb	sy
	}
}
   2010e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20110:	200280bc 	.word	0x200280bc
   20114:	200280f8 	.word	0x200280f8
   20118:	200280f4 	.word	0x200280f4

0002011c <k_sched_lock>:
	__asm__ volatile(
   2011c:	f04f 0320 	mov.w	r3, #32
   20120:	f3ef 8111 	mrs	r1, BASEPRI
   20124:	f383 8811 	msr	BASEPRI, r3
   20128:	f3bf 8f6f 	isb	sy
   2012c:	4b04      	ldr	r3, [pc, #16]	; (20140 <k_sched_lock+0x24>)
   2012e:	689a      	ldr	r2, [r3, #8]
   20130:	7bd3      	ldrb	r3, [r2, #15]
   20132:	3b01      	subs	r3, #1
   20134:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   20136:	f381 8811 	msr	BASEPRI, r1
   2013a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   2013e:	4770      	bx	lr
   20140:	200280bc 	.word	0x200280bc

00020144 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   20144:	4b09      	ldr	r3, [pc, #36]	; (2016c <z_priq_dumb_remove+0x28>)
   20146:	f103 0228 	add.w	r2, r3, #40	; 0x28
   2014a:	4282      	cmp	r2, r0
   2014c:	d105      	bne.n	2015a <z_priq_dumb_remove+0x16>
   2014e:	689b      	ldr	r3, [r3, #8]
   20150:	428b      	cmp	r3, r1
   20152:	d102      	bne.n	2015a <z_priq_dumb_remove+0x16>
   20154:	7b4b      	ldrb	r3, [r1, #13]
   20156:	06db      	lsls	r3, r3, #27
   20158:	d106      	bne.n	20168 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   2015a:	e9d1 3200 	ldrd	r3, r2, [r1]
   2015e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20160:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20162:	2300      	movs	r3, #0
	node->prev = NULL;
   20164:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   20168:	4770      	bx	lr
   2016a:	bf00      	nop
   2016c:	200280bc 	.word	0x200280bc

00020170 <update_cache>:
{
   20170:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   20172:	4c10      	ldr	r4, [pc, #64]	; (201b4 <update_cache+0x44>)
{
   20174:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   20176:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2017a:	f008 fe84 	bl	28e86 <z_priq_dumb_best>
   2017e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   20180:	68a3      	ldr	r3, [r4, #8]
   20182:	7b59      	ldrb	r1, [r3, #13]
   20184:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   20186:	bf44      	itt	mi
   20188:	f041 0108 	orrmi.w	r1, r1, #8
   2018c:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   2018e:	b905      	cbnz	r5, 20192 <update_cache+0x22>
   20190:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   20192:	b94e      	cbnz	r6, 201a8 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   20194:	7b5a      	ldrb	r2, [r3, #13]
   20196:	06d2      	lsls	r2, r2, #27
   20198:	d106      	bne.n	201a8 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2019a:	69aa      	ldr	r2, [r5, #24]
   2019c:	b922      	cbnz	r2, 201a8 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   2019e:	89da      	ldrh	r2, [r3, #14]
   201a0:	2a7f      	cmp	r2, #127	; 0x7f
   201a2:	d901      	bls.n	201a8 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   201a4:	6263      	str	r3, [r4, #36]	; 0x24
}
   201a6:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   201a8:	42ab      	cmp	r3, r5
   201aa:	d001      	beq.n	201b0 <update_cache+0x40>
			z_reset_time_slice();
   201ac:	f7ff ff74 	bl	20098 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   201b0:	6265      	str	r5, [r4, #36]	; 0x24
}
   201b2:	e7f8      	b.n	201a6 <update_cache+0x36>
   201b4:	200280bc 	.word	0x200280bc

000201b8 <k_sched_unlock>:
{
   201b8:	b510      	push	{r4, lr}
	__asm__ volatile(
   201ba:	f04f 0320 	mov.w	r3, #32
   201be:	f3ef 8411 	mrs	r4, BASEPRI
   201c2:	f383 8811 	msr	BASEPRI, r3
   201c6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   201ca:	4b08      	ldr	r3, [pc, #32]	; (201ec <k_sched_unlock+0x34>)
		update_cache(0);
   201cc:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   201ce:	689a      	ldr	r2, [r3, #8]
   201d0:	7bd3      	ldrb	r3, [r2, #15]
   201d2:	3301      	adds	r3, #1
   201d4:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   201d6:	f7ff ffcb 	bl	20170 <update_cache>
	__asm__ volatile(
   201da:	f384 8811 	msr	BASEPRI, r4
   201de:	f3bf 8f6f 	isb	sy
}
   201e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   201e6:	f008 be27 	b.w	28e38 <z_reschedule_unlocked>
   201ea:	bf00      	nop
   201ec:	200280bc 	.word	0x200280bc

000201f0 <ready_thread>:
{
   201f0:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   201f2:	7b43      	ldrb	r3, [r0, #13]
   201f4:	06db      	lsls	r3, r3, #27
   201f6:	d127      	bne.n	20248 <ready_thread+0x58>
	if (z_is_thread_ready(thread)) {
   201f8:	6983      	ldr	r3, [r0, #24]
   201fa:	bb2b      	cbnz	r3, 20248 <ready_thread+0x58>
	return list->head == list;
   201fc:	4a13      	ldr	r2, [pc, #76]	; (2024c <ready_thread+0x5c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   201fe:	f102 0128 	add.w	r1, r2, #40	; 0x28
   20202:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
   20206:	428b      	cmp	r3, r1
   20208:	d018      	beq.n	2023c <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2020a:	b1bb      	cbz	r3, 2023c <ready_thread+0x4c>
	if (thread_1->base.prio < thread_2->base.prio) {
   2020c:	f990 500e 	ldrsb.w	r5, [r0, #14]
   20210:	f993 600e 	ldrsb.w	r6, [r3, #14]
   20214:	42ae      	cmp	r6, r5
   20216:	dd0c      	ble.n	20232 <ready_thread+0x42>
	node->prev = successor->prev;
   20218:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2021a:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   2021e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   20220:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   20222:	7b43      	ldrb	r3, [r0, #13]
   20224:	f063 037f 	orn	r3, r3, #127	; 0x7f
   20228:	7343      	strb	r3, [r0, #13]
}
   2022a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   2022c:	2000      	movs	r0, #0
   2022e:	f7ff bf9f 	b.w	20170 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   20232:	429c      	cmp	r4, r3
   20234:	d002      	beq.n	2023c <ready_thread+0x4c>
   20236:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20238:	2b00      	cmp	r3, #0
   2023a:	d1e9      	bne.n	20210 <ready_thread+0x20>
	node->prev = list->tail;
   2023c:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   20240:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20242:	6018      	str	r0, [r3, #0]
	list->tail = node;
   20244:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   20246:	e7ec      	b.n	20222 <ready_thread+0x32>
}
   20248:	bc70      	pop	{r4, r5, r6}
   2024a:	4770      	bx	lr
   2024c:	200280bc 	.word	0x200280bc

00020250 <z_sched_start>:
{
   20250:	b510      	push	{r4, lr}
	__asm__ volatile(
   20252:	f04f 0220 	mov.w	r2, #32
   20256:	f3ef 8411 	mrs	r4, BASEPRI
   2025a:	f382 8811 	msr	BASEPRI, r2
   2025e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   20262:	7b42      	ldrb	r2, [r0, #13]
   20264:	0751      	lsls	r1, r2, #29
   20266:	d404      	bmi.n	20272 <z_sched_start+0x22>
	__asm__ volatile(
   20268:	f384 8811 	msr	BASEPRI, r4
   2026c:	f3bf 8f6f 	isb	sy
}
   20270:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20272:	f022 0204 	bic.w	r2, r2, #4
   20276:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   20278:	f7ff ffba 	bl	201f0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2027c:	4621      	mov	r1, r4
}
   2027e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   20282:	4801      	ldr	r0, [pc, #4]	; (20288 <z_sched_start+0x38>)
   20284:	f008 bdc1 	b.w	28e0a <z_reschedule>
   20288:	2002af79 	.word	0x2002af79

0002028c <z_move_thread_to_end_of_prio_q>:
{
   2028c:	4601      	mov	r1, r0
   2028e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   20290:	f04f 0320 	mov.w	r3, #32
   20294:	f3ef 8411 	mrs	r4, BASEPRI
   20298:	f383 8811 	msr	BASEPRI, r3
   2029c:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   202a0:	f990 300d 	ldrsb.w	r3, [r0, #13]
   202a4:	2b00      	cmp	r3, #0
   202a6:	da02      	bge.n	202ae <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   202a8:	4817      	ldr	r0, [pc, #92]	; (20308 <z_move_thread_to_end_of_prio_q+0x7c>)
   202aa:	f7ff ff4b 	bl	20144 <z_priq_dumb_remove>
	return list->head == list;
   202ae:	4a17      	ldr	r2, [pc, #92]	; (2030c <z_move_thread_to_end_of_prio_q+0x80>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   202b0:	f102 0028 	add.w	r0, r2, #40	; 0x28
   202b4:	e9d2 350a 	ldrd	r3, r5, [r2, #40]	; 0x28
   202b8:	4283      	cmp	r3, r0
   202ba:	d01f      	beq.n	202fc <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   202bc:	b1f3      	cbz	r3, 202fc <z_move_thread_to_end_of_prio_q+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   202be:	f991 600e 	ldrsb.w	r6, [r1, #14]
   202c2:	f993 700e 	ldrsb.w	r7, [r3, #14]
   202c6:	42b7      	cmp	r7, r6
   202c8:	dd13      	ble.n	202f2 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
   202ca:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   202cc:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   202d0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   202d2:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   202d4:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
   202d6:	6890      	ldr	r0, [r2, #8]
   202d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   202dc:	734b      	strb	r3, [r1, #13]
   202de:	1a43      	subs	r3, r0, r1
   202e0:	4258      	negs	r0, r3
   202e2:	4158      	adcs	r0, r3
   202e4:	f7ff ff44 	bl	20170 <update_cache>
	__asm__ volatile(
   202e8:	f384 8811 	msr	BASEPRI, r4
   202ec:	f3bf 8f6f 	isb	sy
}
   202f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   202f2:	429d      	cmp	r5, r3
   202f4:	d002      	beq.n	202fc <z_move_thread_to_end_of_prio_q+0x70>
   202f6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   202f8:	2b00      	cmp	r3, #0
   202fa:	d1e2      	bne.n	202c2 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   202fc:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
   20300:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20302:	6019      	str	r1, [r3, #0]
	list->tail = node;
   20304:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   20306:	e7e5      	b.n	202d4 <z_move_thread_to_end_of_prio_q+0x48>
   20308:	200280e4 	.word	0x200280e4
   2030c:	200280bc 	.word	0x200280bc

00020310 <z_time_slice>:
{
   20310:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   20312:	4a15      	ldr	r2, [pc, #84]	; (20368 <z_time_slice+0x58>)
   20314:	4b15      	ldr	r3, [pc, #84]	; (2036c <z_time_slice+0x5c>)
   20316:	6814      	ldr	r4, [r2, #0]
{
   20318:	4601      	mov	r1, r0
	if (pending_current == _current) {
   2031a:	6898      	ldr	r0, [r3, #8]
   2031c:	42a0      	cmp	r0, r4
   2031e:	461c      	mov	r4, r3
   20320:	d103      	bne.n	2032a <z_time_slice+0x1a>
}
   20322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   20326:	f7ff beb7 	b.w	20098 <z_reset_time_slice>
	pending_current = NULL;
   2032a:	2500      	movs	r5, #0
   2032c:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   2032e:	4a10      	ldr	r2, [pc, #64]	; (20370 <z_time_slice+0x60>)
   20330:	6812      	ldr	r2, [r2, #0]
   20332:	b1b2      	cbz	r2, 20362 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   20334:	89c2      	ldrh	r2, [r0, #14]
   20336:	2a7f      	cmp	r2, #127	; 0x7f
   20338:	d813      	bhi.n	20362 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2033a:	4a0e      	ldr	r2, [pc, #56]	; (20374 <z_time_slice+0x64>)
   2033c:	f990 500e 	ldrsb.w	r5, [r0, #14]
   20340:	6812      	ldr	r2, [r2, #0]
   20342:	4295      	cmp	r5, r2
   20344:	db0d      	blt.n	20362 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   20346:	4a0c      	ldr	r2, [pc, #48]	; (20378 <z_time_slice+0x68>)
   20348:	4290      	cmp	r0, r2
   2034a:	d00a      	beq.n	20362 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   2034c:	6982      	ldr	r2, [r0, #24]
   2034e:	b942      	cbnz	r2, 20362 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   20350:	691a      	ldr	r2, [r3, #16]
   20352:	428a      	cmp	r2, r1
   20354:	dc02      	bgt.n	2035c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   20356:	f7ff ff99 	bl	2028c <z_move_thread_to_end_of_prio_q>
   2035a:	e7e2      	b.n	20322 <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   2035c:	1a52      	subs	r2, r2, r1
   2035e:	611a      	str	r2, [r3, #16]
}
   20360:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   20362:	2300      	movs	r3, #0
   20364:	6123      	str	r3, [r4, #16]
   20366:	e7fb      	b.n	20360 <z_time_slice+0x50>
   20368:	200280f0 	.word	0x200280f0
   2036c:	200280bc 	.word	0x200280bc
   20370:	200280f8 	.word	0x200280f8
   20374:	200280f4 	.word	0x200280f4
   20378:	200236ec 	.word	0x200236ec

0002037c <z_impl_k_thread_suspend>:
{
   2037c:	b570      	push	{r4, r5, r6, lr}
   2037e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   20380:	3018      	adds	r0, #24
   20382:	f008 fecc 	bl	2911e <z_abort_timeout>
	__asm__ volatile(
   20386:	f04f 0320 	mov.w	r3, #32
   2038a:	f3ef 8611 	mrs	r6, BASEPRI
   2038e:	f383 8811 	msr	BASEPRI, r3
   20392:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   20396:	f994 300d 	ldrsb.w	r3, [r4, #13]
   2039a:	2b00      	cmp	r3, #0
   2039c:	da07      	bge.n	203ae <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2039e:	4621      	mov	r1, r4
   203a0:	480e      	ldr	r0, [pc, #56]	; (203dc <z_impl_k_thread_suspend+0x60>)
   203a2:	f7ff fecf 	bl	20144 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   203a6:	7b63      	ldrb	r3, [r4, #13]
   203a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   203ac:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   203ae:	4d0c      	ldr	r5, [pc, #48]	; (203e0 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   203b0:	7b63      	ldrb	r3, [r4, #13]
   203b2:	68a8      	ldr	r0, [r5, #8]
   203b4:	f043 0310 	orr.w	r3, r3, #16
   203b8:	7363      	strb	r3, [r4, #13]
   203ba:	1b03      	subs	r3, r0, r4
   203bc:	4258      	negs	r0, r3
   203be:	4158      	adcs	r0, r3
   203c0:	f7ff fed6 	bl	20170 <update_cache>
	__asm__ volatile(
   203c4:	f386 8811 	msr	BASEPRI, r6
   203c8:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   203cc:	68ab      	ldr	r3, [r5, #8]
   203ce:	42a3      	cmp	r3, r4
   203d0:	d103      	bne.n	203da <z_impl_k_thread_suspend+0x5e>
}
   203d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   203d6:	f008 bd2f 	b.w	28e38 <z_reschedule_unlocked>
}
   203da:	bd70      	pop	{r4, r5, r6, pc}
   203dc:	200280e4 	.word	0x200280e4
   203e0:	200280bc 	.word	0x200280bc

000203e4 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   203e4:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
   203e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   203ea:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   203ec:	b103      	cbz	r3, 203f0 <z_thread_single_abort+0xc>
		thread->fn_abort();
   203ee:	4798      	blx	r3
   203f0:	f104 0018 	add.w	r0, r4, #24
   203f4:	f008 fe93 	bl	2911e <z_abort_timeout>
	__asm__ volatile(
   203f8:	f04f 0320 	mov.w	r3, #32
   203fc:	f3ef 8611 	mrs	r6, BASEPRI
   20400:	f383 8811 	msr	BASEPRI, r3
   20404:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   20408:	7b63      	ldrb	r3, [r4, #13]
   2040a:	06d8      	lsls	r0, r3, #27
   2040c:	d123      	bne.n	20456 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   2040e:	69a2      	ldr	r2, [r4, #24]
   20410:	bb0a      	cbnz	r2, 20456 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   20412:	0619      	lsls	r1, r3, #24
   20414:	d507      	bpl.n	20426 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   20416:	4621      	mov	r1, r4
   20418:	481e      	ldr	r0, [pc, #120]	; (20494 <z_thread_single_abort+0xb0>)
   2041a:	f7ff fe93 	bl	20144 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2041e:	7b63      	ldrb	r3, [r4, #13]
   20420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20424:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   20426:	4b1c      	ldr	r3, [pc, #112]	; (20498 <z_thread_single_abort+0xb4>)
   20428:	6898      	ldr	r0, [r3, #8]
   2042a:	1b02      	subs	r2, r0, r4
   2042c:	4250      	negs	r0, r2
   2042e:	4150      	adcs	r0, r2
   20430:	f7ff fe9e 	bl	20170 <update_cache>
			waiter->base.pended_on = NULL;
   20434:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   20436:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   20438:	f104 0828 	add.w	r8, r4, #40	; 0x28
   2043c:	f043 0308 	orr.w	r3, r3, #8
   20440:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   20442:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20444:	4545      	cmp	r5, r8
   20446:	d000      	beq.n	2044a <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   20448:	b995      	cbnz	r5, 20470 <z_thread_single_abort+0x8c>
	__asm__ volatile(
   2044a:	f386 8811 	msr	BASEPRI, r6
   2044e:	f3bf 8f6f 	isb	sy
}
   20452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   20456:	079b      	lsls	r3, r3, #30
   20458:	d5ec      	bpl.n	20434 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   2045a:	4621      	mov	r1, r4
   2045c:	68a0      	ldr	r0, [r4, #8]
   2045e:	f7ff fe71 	bl	20144 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20462:	7b63      	ldrb	r3, [r4, #13]
   20464:	f023 0302 	bic.w	r3, r3, #2
   20468:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   2046a:	2300      	movs	r3, #0
   2046c:	60a3      	str	r3, [r4, #8]
   2046e:	e7e1      	b.n	20434 <z_thread_single_abort+0x50>
   20470:	f105 0018 	add.w	r0, r5, #24
   20474:	f008 fe53 	bl	2911e <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   20478:	68a8      	ldr	r0, [r5, #8]
   2047a:	4629      	mov	r1, r5
   2047c:	f7ff fe62 	bl	20144 <z_priq_dumb_remove>
   20480:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   20482:	4628      	mov	r0, r5
   20484:	f023 0302 	bic.w	r3, r3, #2
   20488:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   2048a:	60af      	str	r7, [r5, #8]
   2048c:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
   2048e:	f7ff feaf 	bl	201f0 <ready_thread>
   20492:	e7d6      	b.n	20442 <z_thread_single_abort+0x5e>
   20494:	200280e4 	.word	0x200280e4
   20498:	200280bc 	.word	0x200280bc

0002049c <unready_thread>:
{
   2049c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   2049e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   204a2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   204a4:	2b00      	cmp	r3, #0
   204a6:	da06      	bge.n	204b6 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   204a8:	4807      	ldr	r0, [pc, #28]	; (204c8 <unready_thread+0x2c>)
   204aa:	f7ff fe4b 	bl	20144 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   204ae:	7b4b      	ldrb	r3, [r1, #13]
   204b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   204b4:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   204b6:	4b05      	ldr	r3, [pc, #20]	; (204cc <unready_thread+0x30>)
   204b8:	6898      	ldr	r0, [r3, #8]
   204ba:	1a43      	subs	r3, r0, r1
   204bc:	4258      	negs	r0, r3
   204be:	4158      	adcs	r0, r3
}
   204c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   204c4:	f7ff be54 	b.w	20170 <update_cache>
   204c8:	200280e4 	.word	0x200280e4
   204cc:	200280bc 	.word	0x200280bc

000204d0 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   204d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   204d2:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   204d4:	f008 fe74 	bl	291c0 <z_tick_get_32>
   204d8:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   204da:	f04f 0320 	mov.w	r3, #32
   204de:	f3ef 8711 	mrs	r7, BASEPRI
   204e2:	f383 8811 	msr	BASEPRI, r3
   204e6:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   204ea:	4e0d      	ldr	r6, [pc, #52]	; (20520 <z_tick_sleep.part.0+0x50>)
   204ec:	4b0d      	ldr	r3, [pc, #52]	; (20524 <z_tick_sleep.part.0+0x54>)
   204ee:	68b0      	ldr	r0, [r6, #8]
   204f0:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   204f2:	f008 fd09 	bl	28f08 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
   204f6:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   204f8:	490b      	ldr	r1, [pc, #44]	; (20528 <z_tick_sleep.part.0+0x58>)
   204fa:	462a      	mov	r2, r5
   204fc:	17eb      	asrs	r3, r5, #31
   204fe:	3018      	adds	r0, #24
   20500:	f000 faf0 	bl	20ae4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   20504:	68b2      	ldr	r2, [r6, #8]
	ret = arch_swap(key);
   20506:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   20508:	7b53      	ldrb	r3, [r2, #13]
   2050a:	f043 0310 	orr.w	r3, r3, #16
   2050e:	7353      	strb	r3, [r2, #13]
   20510:	f7f0 fbbe 	bl	10c90 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   20514:	f008 fe54 	bl	291c0 <z_tick_get_32>
   20518:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   2051a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2051e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20520:	200280bc 	.word	0x200280bc
   20524:	200280f0 	.word	0x200280f0
   20528:	00028eb3 	.word	0x00028eb3

0002052c <pend>:
{
   2052c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20530:	4606      	mov	r6, r0
   20532:	4614      	mov	r4, r2
   20534:	461d      	mov	r5, r3
   20536:	f04f 0320 	mov.w	r3, #32
   2053a:	f3ef 8711 	mrs	r7, BASEPRI
   2053e:	f383 8811 	msr	BASEPRI, r3
   20542:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   20546:	f008 fcef 	bl	28f28 <add_to_waitq_locked>
	__asm__ volatile(
   2054a:	f387 8811 	msr	BASEPRI, r7
   2054e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20552:	1c6b      	adds	r3, r5, #1
   20554:	bf08      	it	eq
   20556:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   2055a:	d008      	beq.n	2056e <pend+0x42>
   2055c:	4622      	mov	r2, r4
   2055e:	462b      	mov	r3, r5
   20560:	f106 0018 	add.w	r0, r6, #24
   20564:	4903      	ldr	r1, [pc, #12]	; (20574 <pend+0x48>)
}
   20566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2056a:	f000 babb 	b.w	20ae4 <z_add_timeout>
   2056e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20572:	bf00      	nop
   20574:	00028eb3 	.word	0x00028eb3

00020578 <z_pend_curr>:
{
   20578:	b510      	push	{r4, lr}
   2057a:	460c      	mov	r4, r1
	pending_current = _current;
   2057c:	4b06      	ldr	r3, [pc, #24]	; (20598 <z_pend_curr+0x20>)
{
   2057e:	4611      	mov	r1, r2
	pending_current = _current;
   20580:	6898      	ldr	r0, [r3, #8]
   20582:	4b06      	ldr	r3, [pc, #24]	; (2059c <z_pend_curr+0x24>)
   20584:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   20586:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2058a:	f7ff ffcf 	bl	2052c <pend>
   2058e:	4620      	mov	r0, r4
}
   20590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20594:	f7f0 bb7c 	b.w	10c90 <arch_swap>
   20598:	200280bc 	.word	0x200280bc
   2059c:	200280f0 	.word	0x200280f0

000205a0 <z_set_prio>:
{
   205a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   205a2:	4604      	mov	r4, r0
	__asm__ volatile(
   205a4:	f04f 0320 	mov.w	r3, #32
   205a8:	f3ef 8711 	mrs	r7, BASEPRI
   205ac:	f383 8811 	msr	BASEPRI, r3
   205b0:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   205b4:	7b43      	ldrb	r3, [r0, #13]
   205b6:	b24e      	sxtb	r6, r1
   205b8:	06db      	lsls	r3, r3, #27
   205ba:	d12c      	bne.n	20616 <z_set_prio+0x76>
		if (need_sched) {
   205bc:	6983      	ldr	r3, [r0, #24]
   205be:	bb53      	cbnz	r3, 20616 <z_set_prio+0x76>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   205c0:	4d16      	ldr	r5, [pc, #88]	; (2061c <z_set_prio+0x7c>)
   205c2:	4621      	mov	r1, r4
   205c4:	f105 0028 	add.w	r0, r5, #40	; 0x28
   205c8:	f7ff fdbc 	bl	20144 <z_priq_dumb_remove>
	return list->head == list;
   205cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   205ce:	462a      	mov	r2, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
   205d0:	4283      	cmp	r3, r0
				thread->base.prio = prio;
   205d2:	73a6      	strb	r6, [r4, #14]
   205d4:	d018      	beq.n	20608 <z_set_prio+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   205d6:	b1bb      	cbz	r3, 20608 <z_set_prio+0x68>
   205d8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   205da:	f993 500e 	ldrsb.w	r5, [r3, #14]
   205de:	42b5      	cmp	r5, r6
   205e0:	dd0d      	ble.n	205fe <z_set_prio+0x5e>
	node->prev = successor->prev;
   205e2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   205e4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   205e8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   205ea:	605c      	str	r4, [r3, #4]
			update_cache(1);
   205ec:	2001      	movs	r0, #1
   205ee:	f7ff fdbf 	bl	20170 <update_cache>
   205f2:	2001      	movs	r0, #1
	__asm__ volatile(
   205f4:	f387 8811 	msr	BASEPRI, r7
   205f8:	f3bf 8f6f 	isb	sy
}
   205fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   205fe:	428b      	cmp	r3, r1
   20600:	d002      	beq.n	20608 <z_set_prio+0x68>
   20602:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20604:	2b00      	cmp	r3, #0
   20606:	d1e8      	bne.n	205da <z_set_prio+0x3a>
	node->prev = list->tail;
   20608:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   2060a:	6020      	str	r0, [r4, #0]
	node->prev = list->tail;
   2060c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2060e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20610:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20612:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   20614:	e7ea      	b.n	205ec <z_set_prio+0x4c>
			thread->base.prio = prio;
   20616:	2000      	movs	r0, #0
   20618:	73a6      	strb	r6, [r4, #14]
   2061a:	e7eb      	b.n	205f4 <z_set_prio+0x54>
   2061c:	200280bc 	.word	0x200280bc

00020620 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   20620:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   20622:	4b04      	ldr	r3, [pc, #16]	; (20634 <z_sched_init+0x14>)
   20624:	4608      	mov	r0, r1
   20626:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2062a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   2062e:	f7ff bd49 	b.w	200c4 <k_sched_time_slice_set>
   20632:	bf00      	nop
   20634:	200280bc 	.word	0x200280bc

00020638 <z_impl_k_yield>:
{
   20638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   2063a:	4c23      	ldr	r4, [pc, #140]	; (206c8 <z_impl_k_yield+0x90>)
   2063c:	4b23      	ldr	r3, [pc, #140]	; (206cc <z_impl_k_yield+0x94>)
   2063e:	68a2      	ldr	r2, [r4, #8]
   20640:	429a      	cmp	r2, r3
   20642:	d028      	beq.n	20696 <z_impl_k_yield+0x5e>
	__asm__ volatile(
   20644:	f04f 0320 	mov.w	r3, #32
   20648:	f3ef 8511 	mrs	r5, BASEPRI
   2064c:	f383 8811 	msr	BASEPRI, r3
   20650:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   20654:	f104 0028 	add.w	r0, r4, #40	; 0x28
   20658:	68a1      	ldr	r1, [r4, #8]
   2065a:	f7ff fd73 	bl	20144 <z_priq_dumb_remove>
	return list->head == list;
   2065e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   20660:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20662:	4282      	cmp	r2, r0
   20664:	d028      	beq.n	206b8 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20666:	b33a      	cbz	r2, 206b8 <z_impl_k_yield+0x80>
   20668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   2066a:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2066e:	f992 700e 	ldrsb.w	r7, [r2, #14]
   20672:	428f      	cmp	r7, r1
   20674:	dd1b      	ble.n	206ae <z_impl_k_yield+0x76>
	node->prev = successor->prev;
   20676:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   20678:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   2067c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2067e:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   20680:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   20682:	2001      	movs	r0, #1
   20684:	f062 027f 	orn	r2, r2, #127	; 0x7f
   20688:	735a      	strb	r2, [r3, #13]
   2068a:	f7ff fd71 	bl	20170 <update_cache>
	__asm__ volatile(
   2068e:	f385 8811 	msr	BASEPRI, r5
   20692:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   20696:	f04f 0320 	mov.w	r3, #32
   2069a:	f3ef 8011 	mrs	r0, BASEPRI
   2069e:	f383 8811 	msr	BASEPRI, r3
   206a2:	f3bf 8f6f 	isb	sy
}
   206a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   206aa:	f7f0 baf1 	b.w	10c90 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   206ae:	4296      	cmp	r6, r2
   206b0:	d002      	beq.n	206b8 <z_impl_k_yield+0x80>
   206b2:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   206b4:	2a00      	cmp	r2, #0
   206b6:	d1da      	bne.n	2066e <z_impl_k_yield+0x36>
	node->prev = list->tail;
   206b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   206ba:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
   206bc:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   206be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   206c0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   206c2:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   206c4:	e7dc      	b.n	20680 <z_impl_k_yield+0x48>
   206c6:	bf00      	nop
   206c8:	200280bc 	.word	0x200280bc
   206cc:	200236ec 	.word	0x200236ec

000206d0 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
   206d0:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   206d2:	3301      	adds	r3, #1
   206d4:	bf08      	it	eq
   206d6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   206da:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   206dc:	d106      	bne.n	206ec <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   206de:	4b0b      	ldr	r3, [pc, #44]	; (2070c <z_impl_k_sleep+0x3c>)
   206e0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   206e2:	f7ff fe4b 	bl	2037c <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
   206e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   206ea:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   206ec:	4604      	mov	r4, r0
	if (ticks == 0) {
   206ee:	b948      	cbnz	r0, 20704 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   206f0:	f7ff ffa2 	bl	20638 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   206f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   206f8:	fb84 3400 	smull	r3, r4, r4, r0
   206fc:	0bd8      	lsrs	r0, r3, #15
   206fe:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   20702:	e7f2      	b.n	206ea <z_impl_k_sleep+0x1a>
   20704:	f7ff fee4 	bl	204d0 <z_tick_sleep.part.0>
   20708:	4604      	mov	r4, r0
   2070a:	e7f3      	b.n	206f4 <z_impl_k_sleep+0x24>
   2070c:	200280bc 	.word	0x200280bc

00020710 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   20710:	4b01      	ldr	r3, [pc, #4]	; (20718 <z_impl_k_current_get+0x8>)
   20712:	6898      	ldr	r0, [r3, #8]
   20714:	4770      	bx	lr
   20716:	bf00      	nop
   20718:	200280bc 	.word	0x200280bc

0002071c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2071c:	b538      	push	{r3, r4, r5, lr}
   2071e:	4604      	mov	r4, r0
   20720:	f04f 0320 	mov.w	r3, #32
   20724:	f3ef 8511 	mrs	r5, BASEPRI
   20728:	f383 8811 	msr	BASEPRI, r3
   2072c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   20730:	f008 fc22 	bl	28f78 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   20734:	b148      	cbz	r0, 2074a <z_impl_k_sem_give+0x2e>
   20736:	2200      	movs	r2, #0
   20738:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2073a:	f008 fbaa 	bl	28e92 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   2073e:	4629      	mov	r1, r5
}
   20740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   20744:	4807      	ldr	r0, [pc, #28]	; (20764 <z_impl_k_sem_give+0x48>)
   20746:	f008 bb60 	b.w	28e0a <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2074a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2074e:	429a      	cmp	r2, r3
   20750:	bf18      	it	ne
   20752:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20754:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20756:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20758:	f104 0010 	add.w	r0, r4, #16
   2075c:	f008 fe56 	bl	2940c <z_handle_obj_poll_events>
}
   20760:	e7ed      	b.n	2073e <z_impl_k_sem_give+0x22>
   20762:	bf00      	nop
   20764:	2002af79 	.word	0x2002af79

00020768 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   20768:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2076a:	4614      	mov	r4, r2
   2076c:	461d      	mov	r5, r3
   2076e:	f04f 0320 	mov.w	r3, #32
   20772:	f3ef 8111 	mrs	r1, BASEPRI
   20776:	f383 8811 	msr	BASEPRI, r3
   2077a:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   2077e:	6883      	ldr	r3, [r0, #8]
   20780:	b143      	cbz	r3, 20794 <z_impl_k_sem_take+0x2c>
		sem->count--;
   20782:	3b01      	subs	r3, #1
   20784:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   20786:	f381 8811 	msr	BASEPRI, r1
   2078a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2078e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   20790:	b003      	add	sp, #12
   20792:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20794:	ea54 0305 	orrs.w	r3, r4, r5
   20798:	d106      	bne.n	207a8 <z_impl_k_sem_take+0x40>
   2079a:	f381 8811 	msr	BASEPRI, r1
   2079e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   207a2:	f06f 000f 	mvn.w	r0, #15
   207a6:	e7f3      	b.n	20790 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   207a8:	4602      	mov	r2, r0
   207aa:	e9cd 4500 	strd	r4, r5, [sp]
   207ae:	4802      	ldr	r0, [pc, #8]	; (207b8 <z_impl_k_sem_take+0x50>)
   207b0:	f7ff fee2 	bl	20578 <z_pend_curr>
	return ret;
   207b4:	e7ec      	b.n	20790 <z_impl_k_sem_take+0x28>
   207b6:	bf00      	nop
   207b8:	2002af79 	.word	0x2002af79

000207bc <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   207bc:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   207be:	4c08      	ldr	r4, [pc, #32]	; (207e0 <k_sys_work_q_init+0x24>)
   207c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   207c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   207c8:	4620      	mov	r0, r4
   207ca:	4906      	ldr	r1, [pc, #24]	; (207e4 <k_sys_work_q_init+0x28>)
   207cc:	f000 f8c2 	bl	20954 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   207d0:	4905      	ldr	r1, [pc, #20]	; (207e8 <k_sys_work_q_init+0x2c>)
   207d2:	f104 0018 	add.w	r0, r4, #24
   207d6:	f008 fc24 	bl	29022 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   207da:	2000      	movs	r0, #0
   207dc:	bd10      	pop	{r4, pc}
   207de:	bf00      	nop
   207e0:	200280fc 	.word	0x200280fc
   207e4:	2002f3d8 	.word	0x2002f3d8
   207e8:	0002d0ae 	.word	0x0002d0ae

000207ec <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   207ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
   207ee:	f100 0528 	add.w	r5, r0, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   207f2:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
   207f6:	2504      	movs	r5, #4
   207f8:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   207fa:	2500      	movs	r5, #0
{
   207fc:	4604      	mov	r4, r0
   207fe:	b087      	sub	sp, #28
   20800:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20804:	e9cd 6703 	strd	r6, r7, [sp, #12]
	thread_base->prio = priority;
   20808:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2080a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	node->prev = NULL;
   2080c:	e9c0 5506 	strd	r5, r5, [r0, #24]
   20810:	9602      	str	r6, [sp, #8]
   20812:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	thread_base->user_options = (u8_t)options;
   20814:	7307      	strb	r7, [r0, #12]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20816:	9601      	str	r6, [sp, #4]
   20818:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   2081a:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2081c:	9600      	str	r6, [sp, #0]
   2081e:	f7f0 fa85 	bl	10d2c <arch_new_thread>
	if (!_current) {
   20822:	4b04      	ldr	r3, [pc, #16]	; (20834 <z_setup_new_thread+0x48>)
	new_thread->fn_abort = NULL;
   20824:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
   20828:	689b      	ldr	r3, [r3, #8]
   2082a:	b103      	cbz	r3, 2082e <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
   2082c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   2082e:	66a3      	str	r3, [r4, #104]	; 0x68
}
   20830:	b007      	add	sp, #28
   20832:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20834:	200280bc 	.word	0x200280bc

00020838 <z_impl_k_thread_create>:
{
   20838:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2083a:	2500      	movs	r5, #0
{
   2083c:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2083e:	9505      	str	r5, [sp, #20]
   20840:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   20842:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20846:	9504      	str	r5, [sp, #16]
   20848:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   2084a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2084c:	9503      	str	r5, [sp, #12]
   2084e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   20850:	9502      	str	r5, [sp, #8]
   20852:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   20854:	9501      	str	r5, [sp, #4]
   20856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   20858:	9500      	str	r5, [sp, #0]
   2085a:	f7ff ffc7 	bl	207ec <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2085e:	1c7b      	adds	r3, r7, #1
   20860:	bf08      	it	eq
   20862:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   20866:	d005      	beq.n	20874 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20868:	ea56 0307 	orrs.w	r3, r6, r7
   2086c:	d105      	bne.n	2087a <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   2086e:	4620      	mov	r0, r4
   20870:	f7ff fcee 	bl	20250 <z_sched_start>
}
   20874:	4620      	mov	r0, r4
   20876:	b007      	add	sp, #28
   20878:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2087a:	4632      	mov	r2, r6
   2087c:	463b      	mov	r3, r7
   2087e:	4903      	ldr	r1, [pc, #12]	; (2088c <z_impl_k_thread_create+0x54>)
   20880:	f104 0018 	add.w	r0, r4, #24
   20884:	f000 f92e 	bl	20ae4 <z_add_timeout>
   20888:	e7f4      	b.n	20874 <z_impl_k_thread_create+0x3c>
   2088a:	bf00      	nop
   2088c:	00028eb3 	.word	0x00028eb3

00020890 <z_init_static_threads>:
{
   20890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   20894:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2094c <z_init_static_threads+0xbc>
   20898:	4d2b      	ldr	r5, [pc, #172]	; (20948 <z_init_static_threads+0xb8>)
   2089a:	46c8      	mov	r8, r9
{
   2089c:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   2089e:	454d      	cmp	r5, r9
   208a0:	f105 0430 	add.w	r4, r5, #48	; 0x30
   208a4:	d30d      	bcc.n	208c2 <z_init_static_threads+0x32>
	k_sched_lock();
   208a6:	f7ff fc39 	bl	2011c <k_sched_lock>
			return (u32_t)((t * to_hz + off) / from_hz);
   208aa:	f44f 4900 	mov.w	r9, #32768	; 0x8000
	_FOREACH_STATIC_THREAD(thread_data) {
   208ae:	4c26      	ldr	r4, [pc, #152]	; (20948 <z_init_static_threads+0xb8>)
   208b0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 20950 <z_init_static_threads+0xc0>
   208b4:	4544      	cmp	r4, r8
   208b6:	d321      	bcc.n	208fc <z_init_static_threads+0x6c>
}
   208b8:	b007      	add	sp, #28
   208ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   208be:	f7ff bc7b 	b.w	201b8 <k_sched_unlock>
		z_setup_new_thread(
   208c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   208c6:	9305      	str	r3, [sp, #20]
   208c8:	f854 3c10 	ldr.w	r3, [r4, #-16]
   208cc:	9304      	str	r3, [sp, #16]
   208ce:	f854 3c14 	ldr.w	r3, [r4, #-20]
   208d2:	9303      	str	r3, [sp, #12]
   208d4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   208d8:	9302      	str	r3, [sp, #8]
   208da:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   208de:	9301      	str	r3, [sp, #4]
   208e0:	f854 3c20 	ldr.w	r3, [r4, #-32]
   208e4:	9300      	str	r3, [sp, #0]
   208e6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   208ea:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   208ee:	f7ff ff7d 	bl	207ec <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   208f2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   208f6:	655d      	str	r5, [r3, #84]	; 0x54
   208f8:	4625      	mov	r5, r4
   208fa:	e7d0      	b.n	2089e <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   208fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   208fe:	1c4b      	adds	r3, r1, #1
   20900:	d017      	beq.n	20932 <z_init_static_threads+0xa2>
   20902:	f240 3be7 	movw	fp, #999	; 0x3e7
   20906:	f04f 0c00 	mov.w	ip, #0
					    K_MSEC(thread_data->init_delay));
   2090a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2090e:	fbc9 bc01 	smlal	fp, ip, r9, r1
   20912:	2300      	movs	r3, #0
   20914:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20918:	4658      	mov	r0, fp
   2091a:	4661      	mov	r1, ip
   2091c:	f7eb ff4c 	bl	c7b8 <__aeabi_uldivmod>
   20920:	2700      	movs	r7, #0
   20922:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20924:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
   20928:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2092a:	d104      	bne.n	20936 <z_init_static_threads+0xa6>
	z_sched_start(thread);
   2092c:	4628      	mov	r0, r5
   2092e:	f7ff fc8f 	bl	20250 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   20932:	3430      	adds	r4, #48	; 0x30
   20934:	e7be      	b.n	208b4 <z_init_static_threads+0x24>
   20936:	4602      	mov	r2, r0
   20938:	463b      	mov	r3, r7
   2093a:	4651      	mov	r1, sl
   2093c:	f105 0018 	add.w	r0, r5, #24
   20940:	f000 f8d0 	bl	20ae4 <z_add_timeout>
   20944:	e7f5      	b.n	20932 <z_init_static_threads+0xa2>
   20946:	bf00      	nop
   20948:	20020864 	.word	0x20020864
   2094c:	20020864 	.word	0x20020864
   20950:	00028eb3 	.word	0x00028eb3

00020954 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   20954:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   20958:	b08a      	sub	sp, #40	; 0x28
   2095a:	4604      	mov	r4, r0
   2095c:	461d      	mov	r5, r3
   2095e:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   20962:	f008 fa13 	bl	28d8c <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   20966:	f104 0618 	add.w	r6, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2096a:	2000      	movs	r0, #0
   2096c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   20970:	f04f 0800 	mov.w	r8, #0
   20974:	f04f 0900 	mov.w	r9, #0
   20978:	e9cd 5003 	strd	r5, r0, [sp, #12]
   2097c:	e9cd 0001 	strd	r0, r0, [sp, #4]
   20980:	e9cd 8906 	strd	r8, r9, [sp, #24]
   20984:	4630      	mov	r0, r6
   20986:	4b05      	ldr	r3, [pc, #20]	; (2099c <k_work_q_start+0x48>)
   20988:	9400      	str	r4, [sp, #0]
   2098a:	f7ff ff55 	bl	20838 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   2098e:	4630      	mov	r0, r6
   20990:	4903      	ldr	r1, [pc, #12]	; (209a0 <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   20992:	b00a      	add	sp, #40	; 0x28
   20994:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   20998:	f008 bb43 	b.w	29022 <z_impl_k_thread_name_set>
   2099c:	00024003 	.word	0x00024003
   209a0:	0002d0b7 	.word	0x0002d0b7

000209a4 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   209a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   209a8:	4606      	mov	r6, r0
   209aa:	460d      	mov	r5, r1
   209ac:	4690      	mov	r8, r2
   209ae:	4699      	mov	r9, r3
	__asm__ volatile(
   209b0:	f04f 0320 	mov.w	r3, #32
   209b4:	f3ef 8711 	mrs	r7, BASEPRI
   209b8:	f383 8811 	msr	BASEPRI, r3
   209bc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   209c0:	69cb      	ldr	r3, [r1, #28]
   209c2:	b17b      	cbz	r3, 209e4 <k_delayed_work_submit_to_queue+0x40>
   209c4:	4283      	cmp	r3, r0
   209c6:	d128      	bne.n	20a1a <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   209c8:	4628      	mov	r0, r5
   209ca:	f008 fb48 	bl	2905e <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   209ce:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   209d2:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   209d4:	d008      	beq.n	209e8 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   209d6:	2800      	cmp	r0, #0
   209d8:	da07      	bge.n	209ea <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   209da:	f387 8811 	msr	BASEPRI, r7
   209de:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   209e2:	e00f      	b.n	20a04 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   209e4:	2800      	cmp	r0, #0
   209e6:	d0ef      	beq.n	209c8 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   209e8:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   209ea:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   209ee:	61ee      	str	r6, [r5, #28]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   209f0:	d10b      	bne.n	20a0a <k_delayed_work_submit_to_queue+0x66>
   209f2:	f387 8811 	msr	BASEPRI, r7
   209f6:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   209fa:	4629      	mov	r1, r5
   209fc:	4630      	mov	r0, r6
   209fe:	f008 fb15 	bl	2902c <k_work_submit_to_queue>
		return 0;
   20a02:	2400      	movs	r4, #0
}
   20a04:	4620      	mov	r0, r4
   20a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   20a0a:	4642      	mov	r2, r8
   20a0c:	464b      	mov	r3, r9
   20a0e:	4904      	ldr	r1, [pc, #16]	; (20a20 <k_delayed_work_submit_to_queue+0x7c>)
   20a10:	f105 000c 	add.w	r0, r5, #12
   20a14:	f000 f866 	bl	20ae4 <z_add_timeout>
   20a18:	e7df      	b.n	209da <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   20a1a:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   20a1e:	e7dc      	b.n	209da <k_delayed_work_submit_to_queue+0x36>
   20a20:	00029055 	.word	0x00029055

00020a24 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   20a24:	4b03      	ldr	r3, [pc, #12]	; (20a34 <elapsed+0x10>)
   20a26:	681b      	ldr	r3, [r3, #0]
   20a28:	b90b      	cbnz	r3, 20a2e <elapsed+0xa>
   20a2a:	f7f0 b8fd 	b.w	10c28 <z_clock_elapsed>
}
   20a2e:	2000      	movs	r0, #0
   20a30:	4770      	bx	lr
   20a32:	bf00      	nop
   20a34:	200281cc 	.word	0x200281cc

00020a38 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20a38:	6803      	ldr	r3, [r0, #0]
   20a3a:	b140      	cbz	r0, 20a4e <remove_timeout+0x16>
   20a3c:	4a07      	ldr	r2, [pc, #28]	; (20a5c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   20a3e:	6852      	ldr	r2, [r2, #4]
   20a40:	4290      	cmp	r0, r2
   20a42:	d004      	beq.n	20a4e <remove_timeout+0x16>
	if (next(t) != NULL) {
   20a44:	b11b      	cbz	r3, 20a4e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   20a46:	689a      	ldr	r2, [r3, #8]
   20a48:	6881      	ldr	r1, [r0, #8]
   20a4a:	440a      	add	r2, r1
   20a4c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   20a4e:	6842      	ldr	r2, [r0, #4]
   20a50:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20a52:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20a54:	2300      	movs	r3, #0
	node->prev = NULL;
   20a56:	e9c0 3300 	strd	r3, r3, [r0]
}
   20a5a:	4770      	bx	lr
   20a5c:	200205c8 	.word	0x200205c8

00020a60 <next_timeout>:
	return list->head == list;
   20a60:	4b0b      	ldr	r3, [pc, #44]	; (20a90 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   20a62:	b510      	push	{r4, lr}
   20a64:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20a66:	429c      	cmp	r4, r3
   20a68:	bf08      	it	eq
   20a6a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   20a6c:	f7ff ffda 	bl	20a24 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   20a70:	b154      	cbz	r4, 20a88 <next_timeout+0x28>
   20a72:	68a3      	ldr	r3, [r4, #8]
   20a74:	1a18      	subs	r0, r3, r0
   20a76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   20a7a:	4b06      	ldr	r3, [pc, #24]	; (20a94 <next_timeout+0x34>)
   20a7c:	691b      	ldr	r3, [r3, #16]
   20a7e:	b113      	cbz	r3, 20a86 <next_timeout+0x26>
   20a80:	4298      	cmp	r0, r3
   20a82:	bfa8      	it	ge
   20a84:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   20a86:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   20a88:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20a8c:	e7f5      	b.n	20a7a <next_timeout+0x1a>
   20a8e:	bf00      	nop
   20a90:	200205c8 	.word	0x200205c8
   20a94:	200280bc 	.word	0x200280bc

00020a98 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(struct _timeout *timeout)
{
   20a98:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   20a9a:	6803      	ldr	r3, [r0, #0]
   20a9c:	b1e3      	cbz	r3, 20ad8 <timeout_rem+0x40>
	return list->head == list;
   20a9e:	4a10      	ldr	r2, [pc, #64]	; (20ae0 <timeout_rem+0x48>)
   20aa0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20aa2:	4293      	cmp	r3, r2
   20aa4:	d015      	beq.n	20ad2 <timeout_rem+0x3a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20aa6:	2400      	movs	r4, #0
   20aa8:	2500      	movs	r5, #0
   20aaa:	6852      	ldr	r2, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   20aac:	b93b      	cbnz	r3, 20abe <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   20aae:	f7ff ffb9 	bl	20a24 <elapsed>
   20ab2:	1a24      	subs	r4, r4, r0
   20ab4:	eb65 75e0 	sbc.w	r5, r5, r0, asr #31
}
   20ab8:	4620      	mov	r0, r4
   20aba:	4629      	mov	r1, r5
   20abc:	bd38      	pop	{r3, r4, r5, pc}
		ticks += t->dticks;
   20abe:	6899      	ldr	r1, [r3, #8]
   20ac0:	1864      	adds	r4, r4, r1
   20ac2:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		if (timeout == t) {
   20ac6:	4283      	cmp	r3, r0
   20ac8:	d0f1      	beq.n	20aae <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   20aca:	4293      	cmp	r3, r2
   20acc:	d0ef      	beq.n	20aae <timeout_rem+0x16>
   20ace:	681b      	ldr	r3, [r3, #0]
   20ad0:	e7ec      	b.n	20aac <timeout_rem+0x14>
   20ad2:	2400      	movs	r4, #0
   20ad4:	2500      	movs	r5, #0
   20ad6:	e7ea      	b.n	20aae <timeout_rem+0x16>
		return 0;
   20ad8:	2400      	movs	r4, #0
   20ada:	2500      	movs	r5, #0
   20adc:	e7ec      	b.n	20ab8 <timeout_rem+0x20>
   20ade:	bf00      	nop
   20ae0:	200205c8 	.word	0x200205c8

00020ae4 <z_add_timeout>:
{
   20ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ae8:	9101      	str	r1, [sp, #4]
   20aea:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20aec:	1c4b      	adds	r3, r1, #1
   20aee:	bf08      	it	eq
   20af0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   20af4:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20af6:	d061      	beq.n	20bbc <z_add_timeout+0xd8>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   20af8:	f06f 0301 	mvn.w	r3, #1
   20afc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	k_ticks_t ticks = timeout.ticks + 1;
   20b00:	1c54      	adds	r4, r2, #1
   20b02:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   20b06:	ebb3 0804 	subs.w	r8, r3, r4
   20b0a:	eb6b 0905 	sbc.w	r9, fp, r5
   20b0e:	f1b8 0f00 	cmp.w	r8, #0
   20b12:	f179 0300 	sbcs.w	r3, r9, #0
   20b16:	db0f      	blt.n	20b38 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   20b18:	f7ff ff84 	bl	20a24 <elapsed>
   20b1c:	f06f 0301 	mvn.w	r3, #1
   20b20:	4a2b      	ldr	r2, [pc, #172]	; (20bd0 <z_add_timeout+0xec>)
   20b22:	e9d2 1c00 	ldrd	r1, ip, [r2]
   20b26:	1a5b      	subs	r3, r3, r1
   20b28:	eb6b 020c 	sbc.w	r2, fp, ip
   20b2c:	1b1e      	subs	r6, r3, r4
   20b2e:	eb62 0705 	sbc.w	r7, r2, r5
   20b32:	1a34      	subs	r4, r6, r0
   20b34:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	to->fn = fn;
   20b38:	9b01      	ldr	r3, [sp, #4]
   20b3a:	f8ca 300c 	str.w	r3, [sl, #12]
	__asm__ volatile(
   20b3e:	f04f 0320 	mov.w	r3, #32
   20b42:	f3ef 8611 	mrs	r6, BASEPRI
   20b46:	f383 8811 	msr	BASEPRI, r3
   20b4a:	f3bf 8f6f 	isb	sy
		to->dticks = ticks + elapsed();
   20b4e:	f7ff ff69 	bl	20a24 <elapsed>
	ticks = MAX(1, ticks);
   20b52:	2c01      	cmp	r4, #1
   20b54:	f175 0300 	sbcs.w	r3, r5, #0
   20b58:	bfb8      	it	lt
   20b5a:	2401      	movlt	r4, #1
	return list->head == list;
   20b5c:	4b1d      	ldr	r3, [pc, #116]	; (20bd4 <z_add_timeout+0xf0>)
		to->dticks = ticks + elapsed();
   20b5e:	4420      	add	r0, r4
   20b60:	681a      	ldr	r2, [r3, #0]
   20b62:	f8ca 0008 	str.w	r0, [sl, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20b66:	429a      	cmp	r2, r3
   20b68:	d001      	beq.n	20b6e <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20b6a:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   20b6c:	b952      	cbnz	r2, 20b84 <z_add_timeout+0xa0>
	node->prev = list->tail;
   20b6e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   20b70:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   20b74:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   20b78:	685a      	ldr	r2, [r3, #4]
   20b7a:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   20b7e:	f8c3 a004 	str.w	sl, [r3, #4]
}
   20b82:	e00d      	b.n	20ba0 <z_add_timeout+0xbc>
			if (t->dticks > to->dticks) {
   20b84:	6890      	ldr	r0, [r2, #8]
   20b86:	f8da 1008 	ldr.w	r1, [sl, #8]
   20b8a:	4288      	cmp	r0, r1
   20b8c:	dd19      	ble.n	20bc2 <z_add_timeout+0xde>
				t->dticks -= to->dticks;
   20b8e:	1a41      	subs	r1, r0, r1
   20b90:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   20b92:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   20b94:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   20b98:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   20b9c:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   20ba0:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20ba2:	429a      	cmp	r2, r3
   20ba4:	d006      	beq.n	20bb4 <z_add_timeout+0xd0>
		if (to == first()) {
   20ba6:	4592      	cmp	sl, r2
   20ba8:	d104      	bne.n	20bb4 <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
   20baa:	f7ff ff59 	bl	20a60 <next_timeout>
   20bae:	2100      	movs	r1, #0
   20bb0:	f7ef ffd6 	bl	10b60 <z_clock_set_timeout>
	__asm__ volatile(
   20bb4:	f386 8811 	msr	BASEPRI, r6
   20bb8:	f3bf 8f6f 	isb	sy
}
   20bbc:	b003      	add	sp, #12
   20bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   20bc2:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   20bc4:	4294      	cmp	r4, r2
   20bc6:	f8ca 1008 	str.w	r1, [sl, #8]
   20bca:	d0d0      	beq.n	20b6e <z_add_timeout+0x8a>
   20bcc:	6812      	ldr	r2, [r2, #0]
   20bce:	e7cd      	b.n	20b6c <z_add_timeout+0x88>
   20bd0:	20022380 	.word	0x20022380
   20bd4:	200205c8 	.word	0x200205c8

00020bd8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   20bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20bdc:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   20bde:	f7ff fb97 	bl	20310 <z_time_slice>
	__asm__ volatile(
   20be2:	f04f 0320 	mov.w	r3, #32
   20be6:	f3ef 8411 	mrs	r4, BASEPRI
   20bea:	f383 8811 	msr	BASEPRI, r3
   20bee:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   20bf2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 20c78 <z_clock_announce+0xa0>
   20bf6:	4d1f      	ldr	r5, [pc, #124]	; (20c74 <z_clock_announce+0x9c>)
   20bf8:	46c1      	mov	r9, r8
	return list->head == list;
   20bfa:	f8df a080 	ldr.w	sl, [pc, #128]	; 20c7c <z_clock_announce+0xa4>
   20bfe:	602e      	str	r6, [r5, #0]
   20c00:	f8da 0000 	ldr.w	r0, [sl]
   20c04:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20c06:	4550      	cmp	r0, sl
   20c08:	e9d8 6700 	ldrd	r6, r7, [r8]
   20c0c:	d005      	beq.n	20c1a <z_clock_announce+0x42>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   20c0e:	b120      	cbz	r0, 20c1a <z_clock_announce+0x42>
   20c10:	6883      	ldr	r3, [r0, #8]
   20c12:	4293      	cmp	r3, r2
   20c14:	dd13      	ble.n	20c3e <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   20c16:	1a9b      	subs	r3, r3, r2
   20c18:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
   20c1a:	18b6      	adds	r6, r6, r2
   20c1c:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
   20c20:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
   20c24:	2600      	movs	r6, #0
   20c26:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   20c28:	f7ff ff1a 	bl	20a60 <next_timeout>
   20c2c:	4631      	mov	r1, r6
   20c2e:	f7ef ff97 	bl	10b60 <z_clock_set_timeout>
	__asm__ volatile(
   20c32:	f384 8811 	msr	BASEPRI, r4
   20c36:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   20c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
   20c3e:	18f6      	adds	r6, r6, r3
   20c40:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
   20c44:	1ad3      	subs	r3, r2, r3
   20c46:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
   20c48:	2300      	movs	r3, #0
   20c4a:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
   20c4c:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
   20c50:	f7ff fef2 	bl	20a38 <remove_timeout>
   20c54:	f384 8811 	msr	BASEPRI, r4
   20c58:	f3bf 8f6f 	isb	sy
		t->fn(t);
   20c5c:	68c3      	ldr	r3, [r0, #12]
   20c5e:	4798      	blx	r3
	__asm__ volatile(
   20c60:	f04f 0320 	mov.w	r3, #32
   20c64:	f3ef 8411 	mrs	r4, BASEPRI
   20c68:	f383 8811 	msr	BASEPRI, r3
   20c6c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   20c70:	e7c6      	b.n	20c00 <z_clock_announce+0x28>
   20c72:	bf00      	nop
   20c74:	200281cc 	.word	0x200281cc
   20c78:	20022380 	.word	0x20022380
   20c7c:	200205c8 	.word	0x200205c8

00020c80 <z_tick_get>:

s64_t z_tick_get(void)
{
   20c80:	b510      	push	{r4, lr}
   20c82:	f04f 0320 	mov.w	r3, #32
   20c86:	f3ef 8411 	mrs	r4, BASEPRI
   20c8a:	f383 8811 	msr	BASEPRI, r3
   20c8e:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   20c92:	f7ef ffc9 	bl	10c28 <z_clock_elapsed>
   20c96:	4b06      	ldr	r3, [pc, #24]	; (20cb0 <z_tick_get+0x30>)
   20c98:	e9d3 2300 	ldrd	r2, r3, [r3]
   20c9c:	1812      	adds	r2, r2, r0
   20c9e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   20ca2:	f384 8811 	msr	BASEPRI, r4
   20ca6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   20caa:	4610      	mov	r0, r2
   20cac:	4619      	mov	r1, r3
   20cae:	bd10      	pop	{r4, pc}
   20cb0:	20022380 	.word	0x20022380

00020cb4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   20cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20cb8:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   20cba:	2301      	movs	r3, #1
{
   20cbc:	b089      	sub	sp, #36	; 0x24
	struct _poller poller = { .is_polling = true,
   20cbe:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   20cc2:	4b29      	ldr	r3, [pc, #164]	; (20d68 <z_impl_k_poll+0xb4>)
{
   20cc4:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   20cc6:	689b      	ldr	r3, [r3, #8]
{
   20cc8:	4605      	mov	r5, r0
	struct _poller poller = { .is_polling = true,
   20cca:	9306      	str	r3, [sp, #24]
   20ccc:	4b27      	ldr	r3, [pc, #156]	; (20d6c <z_impl_k_poll+0xb8>)
   20cce:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   20cd0:	ea52 0307 	orrs.w	r3, r2, r7
   20cd4:	bf0c      	ite	eq
   20cd6:	2301      	moveq	r3, #1
   20cd8:	2300      	movne	r3, #0
   20cda:	aa05      	add	r2, sp, #20
   20cdc:	f008 fb35 	bl	2934a <register_events>
   20ce0:	4680      	mov	r8, r0
	__asm__ volatile(
   20ce2:	f04f 0320 	mov.w	r3, #32
   20ce6:	f3ef 8911 	mrs	r9, BASEPRI
   20cea:	f383 8811 	msr	BASEPRI, r3
   20cee:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   20cf2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20cf6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   20cfa:	b963      	cbnz	r3, 20d16 <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
   20cfc:	4601      	mov	r1, r0
   20cfe:	464a      	mov	r2, r9
   20d00:	4628      	mov	r0, r5
   20d02:	f008 fa8c 	bl	2921e <clear_event_registrations>
	__asm__ volatile(
   20d06:	f389 8811 	msr	BASEPRI, r9
   20d0a:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   20d0e:	4620      	mov	r0, r4
   20d10:	b009      	add	sp, #36	; 0x24
   20d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
   20d16:	2300      	movs	r3, #0
   20d18:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20d1c:	ea56 0307 	orrs.w	r3, r6, r7
   20d20:	d106      	bne.n	20d30 <z_impl_k_poll+0x7c>
   20d22:	f389 8811 	msr	BASEPRI, r9
   20d26:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   20d2a:	f06f 040a 	mvn.w	r4, #10
   20d2e:	e7ee      	b.n	20d0e <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   20d30:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20d32:	4649      	mov	r1, r9
   20d34:	e9cd 6700 	strd	r6, r7, [sp]
   20d38:	480d      	ldr	r0, [pc, #52]	; (20d70 <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   20d3a:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20d3e:	f7ff fc1b 	bl	20578 <z_pend_curr>
   20d42:	4604      	mov	r4, r0
	__asm__ volatile(
   20d44:	f04f 0320 	mov.w	r3, #32
   20d48:	f3ef 8611 	mrs	r6, BASEPRI
   20d4c:	f383 8811 	msr	BASEPRI, r3
   20d50:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   20d54:	4632      	mov	r2, r6
   20d56:	4641      	mov	r1, r8
   20d58:	4628      	mov	r0, r5
   20d5a:	f008 fa60 	bl	2921e <clear_event_registrations>
	__asm__ volatile(
   20d5e:	f386 8811 	msr	BASEPRI, r6
   20d62:	f3bf 8f6f 	isb	sy
	return swap_rc;
   20d66:	e7d2      	b.n	20d0e <z_impl_k_poll+0x5a>
   20d68:	200280bc 	.word	0x200280bc
   20d6c:	000292ab 	.word	0x000292ab
   20d70:	2002af79 	.word	0x2002af79

00020d74 <__assert_func>:
   20d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   20d76:	4614      	mov	r4, r2
   20d78:	461a      	mov	r2, r3
   20d7a:	4b09      	ldr	r3, [pc, #36]	; (20da0 <__assert_func+0x2c>)
   20d7c:	4605      	mov	r5, r0
   20d7e:	681b      	ldr	r3, [r3, #0]
   20d80:	68d8      	ldr	r0, [r3, #12]
   20d82:	b14c      	cbz	r4, 20d98 <__assert_func+0x24>
   20d84:	4b07      	ldr	r3, [pc, #28]	; (20da4 <__assert_func+0x30>)
   20d86:	9100      	str	r1, [sp, #0]
   20d88:	4907      	ldr	r1, [pc, #28]	; (20da8 <__assert_func+0x34>)
   20d8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
   20d8e:	462b      	mov	r3, r5
   20d90:	f000 f80e 	bl	20db0 <fiprintf>
   20d94:	f008 fe05 	bl	299a2 <abort>
   20d98:	4b04      	ldr	r3, [pc, #16]	; (20dac <__assert_func+0x38>)
   20d9a:	461c      	mov	r4, r3
   20d9c:	e7f3      	b.n	20d86 <__assert_func+0x12>
   20d9e:	bf00      	nop
   20da0:	200205d0 	.word	0x200205d0
   20da4:	0002d0c1 	.word	0x0002d0c1
   20da8:	0002d0ce 	.word	0x0002d0ce
   20dac:	0002cc6c 	.word	0x0002cc6c

00020db0 <fiprintf>:
   20db0:	b40e      	push	{r1, r2, r3}
   20db2:	b503      	push	{r0, r1, lr}
   20db4:	ab03      	add	r3, sp, #12
   20db6:	4601      	mov	r1, r0
   20db8:	4805      	ldr	r0, [pc, #20]	; (20dd0 <fiprintf+0x20>)
   20dba:	f853 2b04 	ldr.w	r2, [r3], #4
   20dbe:	6800      	ldr	r0, [r0, #0]
   20dc0:	9301      	str	r3, [sp, #4]
   20dc2:	f000 fb41 	bl	21448 <_vfiprintf_r>
   20dc6:	b002      	add	sp, #8
   20dc8:	f85d eb04 	ldr.w	lr, [sp], #4
   20dcc:	b003      	add	sp, #12
   20dce:	4770      	bx	lr
   20dd0:	200205d0 	.word	0x200205d0

00020dd4 <malloc>:
   20dd4:	4b02      	ldr	r3, [pc, #8]	; (20de0 <malloc+0xc>)
   20dd6:	4601      	mov	r1, r0
   20dd8:	6818      	ldr	r0, [r3, #0]
   20dda:	f000 badb 	b.w	21394 <_malloc_r>
   20dde:	bf00      	nop
   20de0:	200205d0 	.word	0x200205d0

00020de4 <free>:
   20de4:	4b02      	ldr	r3, [pc, #8]	; (20df0 <free+0xc>)
   20de6:	4601      	mov	r1, r0
   20de8:	6818      	ldr	r0, [r3, #0]
   20dea:	f000 ba83 	b.w	212f4 <_free_r>
   20dee:	bf00      	nop
   20df0:	200205d0 	.word	0x200205d0

00020df4 <validate_structure>:
   20df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20df6:	6801      	ldr	r1, [r0, #0]
   20df8:	4604      	mov	r4, r0
   20dfa:	293b      	cmp	r1, #59	; 0x3b
   20dfc:	d911      	bls.n	20e22 <validate_structure+0x2e>
   20dfe:	223c      	movs	r2, #60	; 0x3c
   20e00:	4668      	mov	r0, sp
   20e02:	f008 fdd5 	bl	299b0 <div>
   20e06:	9a01      	ldr	r2, [sp, #4]
   20e08:	6863      	ldr	r3, [r4, #4]
   20e0a:	9900      	ldr	r1, [sp, #0]
   20e0c:	2a00      	cmp	r2, #0
   20e0e:	440b      	add	r3, r1
   20e10:	bfb4      	ite	lt
   20e12:	323c      	addlt	r2, #60	; 0x3c
   20e14:	6022      	strge	r2, [r4, #0]
   20e16:	6063      	str	r3, [r4, #4]
   20e18:	bfbe      	ittt	lt
   20e1a:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   20e1e:	6022      	strlt	r2, [r4, #0]
   20e20:	6063      	strlt	r3, [r4, #4]
   20e22:	6861      	ldr	r1, [r4, #4]
   20e24:	293b      	cmp	r1, #59	; 0x3b
   20e26:	d911      	bls.n	20e4c <validate_structure+0x58>
   20e28:	223c      	movs	r2, #60	; 0x3c
   20e2a:	4668      	mov	r0, sp
   20e2c:	f008 fdc0 	bl	299b0 <div>
   20e30:	9a01      	ldr	r2, [sp, #4]
   20e32:	68a3      	ldr	r3, [r4, #8]
   20e34:	9900      	ldr	r1, [sp, #0]
   20e36:	2a00      	cmp	r2, #0
   20e38:	440b      	add	r3, r1
   20e3a:	bfb4      	ite	lt
   20e3c:	323c      	addlt	r2, #60	; 0x3c
   20e3e:	6062      	strge	r2, [r4, #4]
   20e40:	60a3      	str	r3, [r4, #8]
   20e42:	bfbe      	ittt	lt
   20e44:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   20e48:	6062      	strlt	r2, [r4, #4]
   20e4a:	60a3      	strlt	r3, [r4, #8]
   20e4c:	68a1      	ldr	r1, [r4, #8]
   20e4e:	2917      	cmp	r1, #23
   20e50:	d911      	bls.n	20e76 <validate_structure+0x82>
   20e52:	2218      	movs	r2, #24
   20e54:	4668      	mov	r0, sp
   20e56:	f008 fdab 	bl	299b0 <div>
   20e5a:	9a01      	ldr	r2, [sp, #4]
   20e5c:	68e3      	ldr	r3, [r4, #12]
   20e5e:	9900      	ldr	r1, [sp, #0]
   20e60:	2a00      	cmp	r2, #0
   20e62:	440b      	add	r3, r1
   20e64:	bfb4      	ite	lt
   20e66:	3218      	addlt	r2, #24
   20e68:	60a2      	strge	r2, [r4, #8]
   20e6a:	60e3      	str	r3, [r4, #12]
   20e6c:	bfbe      	ittt	lt
   20e6e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   20e72:	60a2      	strlt	r2, [r4, #8]
   20e74:	60e3      	strlt	r3, [r4, #12]
   20e76:	6921      	ldr	r1, [r4, #16]
   20e78:	290b      	cmp	r1, #11
   20e7a:	d911      	bls.n	20ea0 <validate_structure+0xac>
   20e7c:	220c      	movs	r2, #12
   20e7e:	4668      	mov	r0, sp
   20e80:	f008 fd96 	bl	299b0 <div>
   20e84:	9a01      	ldr	r2, [sp, #4]
   20e86:	6963      	ldr	r3, [r4, #20]
   20e88:	9900      	ldr	r1, [sp, #0]
   20e8a:	2a00      	cmp	r2, #0
   20e8c:	440b      	add	r3, r1
   20e8e:	bfb4      	ite	lt
   20e90:	320c      	addlt	r2, #12
   20e92:	6122      	strge	r2, [r4, #16]
   20e94:	6163      	str	r3, [r4, #20]
   20e96:	bfbe      	ittt	lt
   20e98:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   20e9c:	6122      	strlt	r2, [r4, #16]
   20e9e:	6163      	strlt	r3, [r4, #20]
   20ea0:	6963      	ldr	r3, [r4, #20]
   20ea2:	0799      	lsls	r1, r3, #30
   20ea4:	d120      	bne.n	20ee8 <validate_structure+0xf4>
   20ea6:	2164      	movs	r1, #100	; 0x64
   20ea8:	fb93 f2f1 	sdiv	r2, r3, r1
   20eac:	fb01 3212 	mls	r2, r1, r2, r3
   20eb0:	b9e2      	cbnz	r2, 20eec <validate_structure+0xf8>
   20eb2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   20eb6:	f44f 71c8 	mov.w	r1, #400	; 0x190
   20eba:	fb93 f2f1 	sdiv	r2, r3, r1
   20ebe:	fb01 3312 	mls	r3, r1, r2, r3
   20ec2:	2b00      	cmp	r3, #0
   20ec4:	bf14      	ite	ne
   20ec6:	231c      	movne	r3, #28
   20ec8:	231d      	moveq	r3, #29
   20eca:	68e2      	ldr	r2, [r4, #12]
   20ecc:	2a00      	cmp	r2, #0
   20ece:	dc0f      	bgt.n	20ef0 <validate_structure+0xfc>
   20ed0:	260b      	movs	r6, #11
   20ed2:	2064      	movs	r0, #100	; 0x64
   20ed4:	f44f 75c8 	mov.w	r5, #400	; 0x190
   20ed8:	4f31      	ldr	r7, [pc, #196]	; (20fa0 <validate_structure+0x1ac>)
   20eda:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   20ede:	f1bc 0f00 	cmp.w	ip, #0
   20ee2:	dd31      	ble.n	20f48 <validate_structure+0x154>
   20ee4:	b003      	add	sp, #12
   20ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20ee8:	231c      	movs	r3, #28
   20eea:	e7ee      	b.n	20eca <validate_structure+0xd6>
   20eec:	231d      	movs	r3, #29
   20eee:	e7ec      	b.n	20eca <validate_structure+0xd6>
   20ef0:	4f2b      	ldr	r7, [pc, #172]	; (20fa0 <validate_structure+0x1ac>)
   20ef2:	f04f 0c00 	mov.w	ip, #0
   20ef6:	2564      	movs	r5, #100	; 0x64
   20ef8:	f44f 76c8 	mov.w	r6, #400	; 0x190
   20efc:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   20f00:	2a01      	cmp	r2, #1
   20f02:	bf14      	ite	ne
   20f04:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
   20f08:	4618      	moveq	r0, r3
   20f0a:	4281      	cmp	r1, r0
   20f0c:	ddea      	ble.n	20ee4 <validate_structure+0xf0>
   20f0e:	3201      	adds	r2, #1
   20f10:	1a09      	subs	r1, r1, r0
   20f12:	2a0c      	cmp	r2, #12
   20f14:	60e1      	str	r1, [r4, #12]
   20f16:	6122      	str	r2, [r4, #16]
   20f18:	d1f0      	bne.n	20efc <validate_structure+0x108>
   20f1a:	6963      	ldr	r3, [r4, #20]
   20f1c:	1c5a      	adds	r2, r3, #1
   20f1e:	0791      	lsls	r1, r2, #30
   20f20:	e9c4 c204 	strd	ip, r2, [r4, #16]
   20f24:	d137      	bne.n	20f96 <validate_structure+0x1a2>
   20f26:	fb92 f1f5 	sdiv	r1, r2, r5
   20f2a:	fb05 2211 	mls	r2, r5, r1, r2
   20f2e:	2a00      	cmp	r2, #0
   20f30:	d133      	bne.n	20f9a <validate_structure+0x1a6>
   20f32:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   20f36:	fb93 f2f6 	sdiv	r2, r3, r6
   20f3a:	fb06 3312 	mls	r3, r6, r2, r3
   20f3e:	2b00      	cmp	r3, #0
   20f40:	bf14      	ite	ne
   20f42:	231c      	movne	r3, #28
   20f44:	231d      	moveq	r3, #29
   20f46:	e7d9      	b.n	20efc <validate_structure+0x108>
   20f48:	6921      	ldr	r1, [r4, #16]
   20f4a:	3901      	subs	r1, #1
   20f4c:	6121      	str	r1, [r4, #16]
   20f4e:	3101      	adds	r1, #1
   20f50:	d114      	bne.n	20f7c <validate_structure+0x188>
   20f52:	6963      	ldr	r3, [r4, #20]
   20f54:	1e59      	subs	r1, r3, #1
   20f56:	078a      	lsls	r2, r1, #30
   20f58:	e9c4 6104 	strd	r6, r1, [r4, #16]
   20f5c:	d117      	bne.n	20f8e <validate_structure+0x19a>
   20f5e:	fb91 f2f0 	sdiv	r2, r1, r0
   20f62:	fb00 1112 	mls	r1, r0, r2, r1
   20f66:	b9a1      	cbnz	r1, 20f92 <validate_structure+0x19e>
   20f68:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   20f6c:	fb93 f2f5 	sdiv	r2, r3, r5
   20f70:	fb05 3312 	mls	r3, r5, r2, r3
   20f74:	2b00      	cmp	r3, #0
   20f76:	bf14      	ite	ne
   20f78:	231c      	movne	r3, #28
   20f7a:	231d      	moveq	r3, #29
   20f7c:	6922      	ldr	r2, [r4, #16]
   20f7e:	2a01      	cmp	r2, #1
   20f80:	bf14      	ite	ne
   20f82:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   20f86:	461a      	moveq	r2, r3
   20f88:	4462      	add	r2, ip
   20f8a:	60e2      	str	r2, [r4, #12]
   20f8c:	e7a5      	b.n	20eda <validate_structure+0xe6>
   20f8e:	231c      	movs	r3, #28
   20f90:	e7f4      	b.n	20f7c <validate_structure+0x188>
   20f92:	231d      	movs	r3, #29
   20f94:	e7f2      	b.n	20f7c <validate_structure+0x188>
   20f96:	231c      	movs	r3, #28
   20f98:	e7b0      	b.n	20efc <validate_structure+0x108>
   20f9a:	231d      	movs	r3, #29
   20f9c:	e7ae      	b.n	20efc <validate_structure+0x108>
   20f9e:	bf00      	nop
   20fa0:	0002ac2c 	.word	0x0002ac2c

00020fa4 <mktime>:
   20fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fa8:	4605      	mov	r5, r0
   20faa:	b08b      	sub	sp, #44	; 0x2c
   20fac:	f001 fdc4 	bl	22b38 <__gettzinfo>
   20fb0:	4607      	mov	r7, r0
   20fb2:	4628      	mov	r0, r5
   20fb4:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   20fb8:	f7ff ff1c 	bl	20df4 <validate_structure>
   20fbc:	68a8      	ldr	r0, [r5, #8]
   20fbe:	696e      	ldr	r6, [r5, #20]
   20fc0:	e9d5 2300 	ldrd	r2, r3, [r5]
   20fc4:	fb0a 2303 	mla	r3, sl, r3, r2
   20fc8:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
   20fcc:	4ac3      	ldr	r2, [pc, #780]	; (212dc <mktime+0x338>)
   20fce:	fb0a 3a00 	mla	sl, sl, r0, r3
   20fd2:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
   20fd6:	3c01      	subs	r4, #1
   20fd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   20fdc:	2b01      	cmp	r3, #1
   20fde:	4414      	add	r4, r2
   20fe0:	dd11      	ble.n	21006 <mktime+0x62>
   20fe2:	07b1      	lsls	r1, r6, #30
   20fe4:	d10f      	bne.n	21006 <mktime+0x62>
   20fe6:	2264      	movs	r2, #100	; 0x64
   20fe8:	fb96 f3f2 	sdiv	r3, r6, r2
   20fec:	fb02 6313 	mls	r3, r2, r3, r6
   20ff0:	b943      	cbnz	r3, 21004 <mktime+0x60>
   20ff2:	f206 716c 	addw	r1, r6, #1900	; 0x76c
   20ff6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   20ffa:	fb91 f3f2 	sdiv	r3, r1, r2
   20ffe:	fb02 1313 	mls	r3, r2, r3, r1
   21002:	b903      	cbnz	r3, 21006 <mktime+0x62>
   21004:	3401      	adds	r4, #1
   21006:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
   2100a:	f644 6220 	movw	r2, #20000	; 0x4e20
   2100e:	61ec      	str	r4, [r5, #28]
   21010:	3310      	adds	r3, #16
   21012:	4293      	cmp	r3, r2
   21014:	f200 8168 	bhi.w	212e8 <mktime+0x344>
   21018:	2e46      	cmp	r6, #70	; 0x46
   2101a:	dd77      	ble.n	2110c <mktime+0x168>
   2101c:	2346      	movs	r3, #70	; 0x46
   2101e:	f240 1e6d 	movw	lr, #365	; 0x16d
   21022:	2164      	movs	r1, #100	; 0x64
   21024:	f44f 70c8 	mov.w	r0, #400	; 0x190
   21028:	079a      	lsls	r2, r3, #30
   2102a:	d169      	bne.n	21100 <mktime+0x15c>
   2102c:	fb93 f2f1 	sdiv	r2, r3, r1
   21030:	fb01 3212 	mls	r2, r1, r2, r3
   21034:	2a00      	cmp	r2, #0
   21036:	d166      	bne.n	21106 <mktime+0x162>
   21038:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
   2103c:	fb9c f2f0 	sdiv	r2, ip, r0
   21040:	fb00 c212 	mls	r2, r0, r2, ip
   21044:	2a00      	cmp	r2, #0
   21046:	bf14      	ite	ne
   21048:	4672      	movne	r2, lr
   2104a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   2104e:	3301      	adds	r3, #1
   21050:	4414      	add	r4, r2
   21052:	429e      	cmp	r6, r3
   21054:	d1e8      	bne.n	21028 <mktime+0x84>
   21056:	4ba2      	ldr	r3, [pc, #648]	; (212e0 <mktime+0x33c>)
   21058:	ea4f 7bea 	mov.w	fp, sl, asr #31
   2105c:	fbc3 ab04 	smlal	sl, fp, r3, r4
   21060:	f001 f8ea 	bl	22238 <__tz_lock>
   21064:	f001 f8f4 	bl	22250 <_tzset_unlocked>
   21068:	4b9e      	ldr	r3, [pc, #632]	; (212e4 <mktime+0x340>)
   2106a:	f8d3 9000 	ldr.w	r9, [r3]
   2106e:	f1b9 0f00 	cmp.w	r9, #0
   21072:	d03f      	beq.n	210f4 <mktime+0x150>
   21074:	f8d5 9020 	ldr.w	r9, [r5, #32]
   21078:	6968      	ldr	r0, [r5, #20]
   2107a:	f1b9 0f01 	cmp.w	r9, #1
   2107e:	687b      	ldr	r3, [r7, #4]
   21080:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   21084:	46c8      	mov	r8, r9
   21086:	bfa8      	it	ge
   21088:	f04f 0801 	movge.w	r8, #1
   2108c:	4283      	cmp	r3, r0
   2108e:	d17f      	bne.n	21190 <mktime+0x1ec>
   21090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   21092:	4619      	mov	r1, r3
   21094:	17da      	asrs	r2, r3, #31
   21096:	e9cd 1200 	strd	r1, r2, [sp]
   2109a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
   2109e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   210a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   210a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   210a8:	1a80      	subs	r0, r0, r2
   210aa:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
   210ae:	4582      	cmp	sl, r0
   210b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   210b4:	eb7b 0101 	sbcs.w	r1, fp, r1
   210b8:	da71      	bge.n	2119e <mktime+0x1fa>
   210ba:	9800      	ldr	r0, [sp, #0]
   210bc:	6a39      	ldr	r1, [r7, #32]
   210be:	1a09      	subs	r1, r1, r0
   210c0:	9801      	ldr	r0, [sp, #4]
   210c2:	9104      	str	r1, [sp, #16]
   210c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   210c6:	eb61 0100 	sbc.w	r1, r1, r0
   210ca:	9105      	str	r1, [sp, #20]
   210cc:	6839      	ldr	r1, [r7, #0]
   210ce:	2900      	cmp	r1, #0
   210d0:	d075      	beq.n	211be <mktime+0x21a>
   210d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   210d6:	4582      	cmp	sl, r0
   210d8:	eb7b 0101 	sbcs.w	r1, fp, r1
   210dc:	db05      	blt.n	210ea <mktime+0x146>
   210de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   210e2:	4582      	cmp	sl, r0
   210e4:	eb7b 0101 	sbcs.w	r1, fp, r1
   210e8:	db6f      	blt.n	211ca <mktime+0x226>
   210ea:	f1b9 0f00 	cmp.w	r9, #0
   210ee:	f04f 0900 	mov.w	r9, #0
   210f2:	da6f      	bge.n	211d4 <mktime+0x230>
   210f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   210f6:	eb1a 0a03 	adds.w	sl, sl, r3
   210fa:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
   210fe:	e0ae      	b.n	2125e <mktime+0x2ba>
   21100:	f240 126d 	movw	r2, #365	; 0x16d
   21104:	e7a3      	b.n	2104e <mktime+0xaa>
   21106:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   2110a:	e7a0      	b.n	2104e <mktime+0xaa>
   2110c:	d0a3      	beq.n	21056 <mktime+0xb2>
   2110e:	2345      	movs	r3, #69	; 0x45
   21110:	f240 1e6d 	movw	lr, #365	; 0x16d
   21114:	2164      	movs	r1, #100	; 0x64
   21116:	f44f 70c8 	mov.w	r0, #400	; 0x190
   2111a:	e012      	b.n	21142 <mktime+0x19e>
   2111c:	bb62      	cbnz	r2, 21178 <mktime+0x1d4>
   2111e:	fb93 f2f1 	sdiv	r2, r3, r1
   21122:	fb01 3212 	mls	r2, r1, r2, r3
   21126:	bb52      	cbnz	r2, 2117e <mktime+0x1da>
   21128:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
   2112c:	fb9c f2f0 	sdiv	r2, ip, r0
   21130:	fb00 c212 	mls	r2, r0, r2, ip
   21134:	2a00      	cmp	r2, #0
   21136:	bf14      	ite	ne
   21138:	4672      	movne	r2, lr
   2113a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   2113e:	1aa4      	subs	r4, r4, r2
   21140:	3b01      	subs	r3, #1
   21142:	429e      	cmp	r6, r3
   21144:	f003 0203 	and.w	r2, r3, #3
   21148:	dbe8      	blt.n	2111c <mktime+0x178>
   2114a:	b9da      	cbnz	r2, 21184 <mktime+0x1e0>
   2114c:	2264      	movs	r2, #100	; 0x64
   2114e:	fb96 f3f2 	sdiv	r3, r6, r2
   21152:	fb02 6313 	mls	r3, r2, r3, r6
   21156:	b9c3      	cbnz	r3, 2118a <mktime+0x1e6>
   21158:	f206 716c 	addw	r1, r6, #1900	; 0x76c
   2115c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   21160:	fb91 f3f2 	sdiv	r3, r1, r2
   21164:	fb02 1313 	mls	r3, r2, r3, r1
   21168:	2b00      	cmp	r3, #0
   2116a:	f240 136d 	movw	r3, #365	; 0x16d
   2116e:	bf08      	it	eq
   21170:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   21174:	1ae4      	subs	r4, r4, r3
   21176:	e76e      	b.n	21056 <mktime+0xb2>
   21178:	f240 126d 	movw	r2, #365	; 0x16d
   2117c:	e7df      	b.n	2113e <mktime+0x19a>
   2117e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   21182:	e7dc      	b.n	2113e <mktime+0x19a>
   21184:	f240 136d 	movw	r3, #365	; 0x16d
   21188:	e7f4      	b.n	21174 <mktime+0x1d0>
   2118a:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   2118e:	e7f1      	b.n	21174 <mktime+0x1d0>
   21190:	f000 ffaa 	bl	220e8 <__tzcalc_limits>
   21194:	2800      	cmp	r0, #0
   21196:	f47f af7b 	bne.w	21090 <mktime+0xec>
   2119a:	46c1      	mov	r9, r8
   2119c:	e054      	b.n	21248 <mktime+0x2a4>
   2119e:	9800      	ldr	r0, [sp, #0]
   211a0:	9902      	ldr	r1, [sp, #8]
   211a2:	1a09      	subs	r1, r1, r0
   211a4:	9801      	ldr	r0, [sp, #4]
   211a6:	9108      	str	r1, [sp, #32]
   211a8:	9903      	ldr	r1, [sp, #12]
   211aa:	eb61 0100 	sbc.w	r1, r1, r0
   211ae:	9109      	str	r1, [sp, #36]	; 0x24
   211b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   211b4:	4582      	cmp	sl, r0
   211b6:	eb7b 0101 	sbcs.w	r1, fp, r1
   211ba:	dbee      	blt.n	2119a <mktime+0x1f6>
   211bc:	e77d      	b.n	210ba <mktime+0x116>
   211be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   211c2:	4582      	cmp	sl, r0
   211c4:	eb7b 0101 	sbcs.w	r1, fp, r1
   211c8:	db89      	blt.n	210de <mktime+0x13a>
   211ca:	f1b9 0f00 	cmp.w	r9, #0
   211ce:	db3f      	blt.n	21250 <mktime+0x2ac>
   211d0:	f04f 0901 	mov.w	r9, #1
   211d4:	ea88 0809 	eor.w	r8, r8, r9
   211d8:	f1b8 0f01 	cmp.w	r8, #1
   211dc:	d134      	bne.n	21248 <mktime+0x2a4>
   211de:	f1b9 0f00 	cmp.w	r9, #0
   211e2:	d04f      	beq.n	21284 <mktime+0x2e0>
   211e4:	1ad3      	subs	r3, r2, r3
   211e6:	682a      	ldr	r2, [r5, #0]
   211e8:	eb1a 0a03 	adds.w	sl, sl, r3
   211ec:	4628      	mov	r0, r5
   211ee:	f8d5 800c 	ldr.w	r8, [r5, #12]
   211f2:	441a      	add	r2, r3
   211f4:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
   211f8:	602a      	str	r2, [r5, #0]
   211fa:	f7ff fdfb 	bl	20df4 <validate_structure>
   211fe:	68ea      	ldr	r2, [r5, #12]
   21200:	ebb2 0208 	subs.w	r2, r2, r8
   21204:	d020      	beq.n	21248 <mktime+0x2a4>
   21206:	2a01      	cmp	r2, #1
   21208:	dc3e      	bgt.n	21288 <mktime+0x2e4>
   2120a:	1c90      	adds	r0, r2, #2
   2120c:	bfd8      	it	le
   2120e:	2201      	movle	r2, #1
   21210:	69eb      	ldr	r3, [r5, #28]
   21212:	4414      	add	r4, r2
   21214:	18d3      	adds	r3, r2, r3
   21216:	d540      	bpl.n	2129a <mktime+0x2f6>
   21218:	1e72      	subs	r2, r6, #1
   2121a:	0791      	lsls	r1, r2, #30
   2121c:	d137      	bne.n	2128e <mktime+0x2ea>
   2121e:	2164      	movs	r1, #100	; 0x64
   21220:	fb92 f3f1 	sdiv	r3, r2, r1
   21224:	fb01 2313 	mls	r3, r1, r3, r2
   21228:	bba3      	cbnz	r3, 21294 <mktime+0x2f0>
   2122a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
   2122e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   21232:	fb96 f3f2 	sdiv	r3, r6, r2
   21236:	fb02 6613 	mls	r6, r2, r3, r6
   2123a:	f240 136d 	movw	r3, #365	; 0x16d
   2123e:	2e00      	cmp	r6, #0
   21240:	bf18      	it	ne
   21242:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   21246:	61eb      	str	r3, [r5, #28]
   21248:	f1b9 0f01 	cmp.w	r9, #1
   2124c:	f47f af52 	bne.w	210f4 <mktime+0x150>
   21250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   21252:	f04f 0901 	mov.w	r9, #1
   21256:	eb1a 0a03 	adds.w	sl, sl, r3
   2125a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
   2125e:	f000 fff1 	bl	22244 <__tz_unlock>
   21262:	3404      	adds	r4, #4
   21264:	2307      	movs	r3, #7
   21266:	f8c5 9020 	str.w	r9, [r5, #32]
   2126a:	fb94 f3f3 	sdiv	r3, r4, r3
   2126e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   21272:	1ae4      	subs	r4, r4, r3
   21274:	bf48      	it	mi
   21276:	3407      	addmi	r4, #7
   21278:	61ac      	str	r4, [r5, #24]
   2127a:	4650      	mov	r0, sl
   2127c:	4659      	mov	r1, fp
   2127e:	b00b      	add	sp, #44	; 0x2c
   21280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21284:	1a9b      	subs	r3, r3, r2
   21286:	e7ae      	b.n	211e6 <mktime+0x242>
   21288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2128c:	e7c0      	b.n	21210 <mktime+0x26c>
   2128e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   21292:	e7d8      	b.n	21246 <mktime+0x2a2>
   21294:	f240 136d 	movw	r3, #365	; 0x16d
   21298:	e7d5      	b.n	21246 <mktime+0x2a2>
   2129a:	07b2      	lsls	r2, r6, #30
   2129c:	d117      	bne.n	212ce <mktime+0x32a>
   2129e:	2164      	movs	r1, #100	; 0x64
   212a0:	fb96 f2f1 	sdiv	r2, r6, r1
   212a4:	fb01 6212 	mls	r2, r1, r2, r6
   212a8:	b9a2      	cbnz	r2, 212d4 <mktime+0x330>
   212aa:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   212ae:	f44f 71c8 	mov.w	r1, #400	; 0x190
   212b2:	fb96 f2f1 	sdiv	r2, r6, r1
   212b6:	fb01 6612 	mls	r6, r1, r2, r6
   212ba:	f240 126d 	movw	r2, #365	; 0x16d
   212be:	2e00      	cmp	r6, #0
   212c0:	bf08      	it	eq
   212c2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   212c6:	4293      	cmp	r3, r2
   212c8:	bfa8      	it	ge
   212ca:	1a9b      	subge	r3, r3, r2
   212cc:	e7bb      	b.n	21246 <mktime+0x2a2>
   212ce:	f240 126d 	movw	r2, #365	; 0x16d
   212d2:	e7f8      	b.n	212c6 <mktime+0x322>
   212d4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   212d8:	e7f5      	b.n	212c6 <mktime+0x322>
   212da:	bf00      	nop
   212dc:	0002ac5c 	.word	0x0002ac5c
   212e0:	00015180 	.word	0x00015180
   212e4:	200281dc 	.word	0x200281dc
   212e8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   212ec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   212f0:	e7c3      	b.n	2127a <mktime+0x2d6>
   212f2:	bf00      	nop

000212f4 <_free_r>:
   212f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   212f6:	2900      	cmp	r1, #0
   212f8:	d047      	beq.n	2138a <_free_r+0x96>
   212fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
   212fe:	1f0c      	subs	r4, r1, #4
   21300:	9001      	str	r0, [sp, #4]
   21302:	2b00      	cmp	r3, #0
   21304:	bfb8      	it	lt
   21306:	18e4      	addlt	r4, r4, r3
   21308:	f001 fc70 	bl	22bec <__malloc_lock>
   2130c:	4a20      	ldr	r2, [pc, #128]	; (21390 <_free_r+0x9c>)
   2130e:	9801      	ldr	r0, [sp, #4]
   21310:	6813      	ldr	r3, [r2, #0]
   21312:	4615      	mov	r5, r2
   21314:	b933      	cbnz	r3, 21324 <_free_r+0x30>
   21316:	6063      	str	r3, [r4, #4]
   21318:	6014      	str	r4, [r2, #0]
   2131a:	b003      	add	sp, #12
   2131c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   21320:	f001 bc6a 	b.w	22bf8 <__malloc_unlock>
   21324:	42a3      	cmp	r3, r4
   21326:	d90b      	bls.n	21340 <_free_r+0x4c>
   21328:	6821      	ldr	r1, [r4, #0]
   2132a:	1862      	adds	r2, r4, r1
   2132c:	4293      	cmp	r3, r2
   2132e:	bf02      	ittt	eq
   21330:	681a      	ldreq	r2, [r3, #0]
   21332:	685b      	ldreq	r3, [r3, #4]
   21334:	1852      	addeq	r2, r2, r1
   21336:	6063      	str	r3, [r4, #4]
   21338:	bf08      	it	eq
   2133a:	6022      	streq	r2, [r4, #0]
   2133c:	602c      	str	r4, [r5, #0]
   2133e:	e7ec      	b.n	2131a <_free_r+0x26>
   21340:	461a      	mov	r2, r3
   21342:	685b      	ldr	r3, [r3, #4]
   21344:	b10b      	cbz	r3, 2134a <_free_r+0x56>
   21346:	42a3      	cmp	r3, r4
   21348:	d9fa      	bls.n	21340 <_free_r+0x4c>
   2134a:	6811      	ldr	r1, [r2, #0]
   2134c:	1855      	adds	r5, r2, r1
   2134e:	42a5      	cmp	r5, r4
   21350:	d10b      	bne.n	2136a <_free_r+0x76>
   21352:	6824      	ldr	r4, [r4, #0]
   21354:	4421      	add	r1, r4
   21356:	1854      	adds	r4, r2, r1
   21358:	6011      	str	r1, [r2, #0]
   2135a:	42a3      	cmp	r3, r4
   2135c:	d1dd      	bne.n	2131a <_free_r+0x26>
   2135e:	681c      	ldr	r4, [r3, #0]
   21360:	685b      	ldr	r3, [r3, #4]
   21362:	4421      	add	r1, r4
   21364:	6053      	str	r3, [r2, #4]
   21366:	6011      	str	r1, [r2, #0]
   21368:	e7d7      	b.n	2131a <_free_r+0x26>
   2136a:	d902      	bls.n	21372 <_free_r+0x7e>
   2136c:	230c      	movs	r3, #12
   2136e:	6003      	str	r3, [r0, #0]
   21370:	e7d3      	b.n	2131a <_free_r+0x26>
   21372:	6825      	ldr	r5, [r4, #0]
   21374:	1961      	adds	r1, r4, r5
   21376:	428b      	cmp	r3, r1
   21378:	bf02      	ittt	eq
   2137a:	6819      	ldreq	r1, [r3, #0]
   2137c:	685b      	ldreq	r3, [r3, #4]
   2137e:	1949      	addeq	r1, r1, r5
   21380:	6063      	str	r3, [r4, #4]
   21382:	bf08      	it	eq
   21384:	6021      	streq	r1, [r4, #0]
   21386:	6054      	str	r4, [r2, #4]
   21388:	e7c7      	b.n	2131a <_free_r+0x26>
   2138a:	b003      	add	sp, #12
   2138c:	bd30      	pop	{r4, r5, pc}
   2138e:	bf00      	nop
   21390:	200281d0 	.word	0x200281d0

00021394 <_malloc_r>:
   21394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21396:	1ccd      	adds	r5, r1, #3
   21398:	4606      	mov	r6, r0
   2139a:	f025 0503 	bic.w	r5, r5, #3
   2139e:	3508      	adds	r5, #8
   213a0:	2d0c      	cmp	r5, #12
   213a2:	bf38      	it	cc
   213a4:	250c      	movcc	r5, #12
   213a6:	2d00      	cmp	r5, #0
   213a8:	db01      	blt.n	213ae <_malloc_r+0x1a>
   213aa:	42a9      	cmp	r1, r5
   213ac:	d903      	bls.n	213b6 <_malloc_r+0x22>
   213ae:	230c      	movs	r3, #12
   213b0:	6033      	str	r3, [r6, #0]
   213b2:	2000      	movs	r0, #0
   213b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   213b6:	f001 fc19 	bl	22bec <__malloc_lock>
   213ba:	4921      	ldr	r1, [pc, #132]	; (21440 <_malloc_r+0xac>)
   213bc:	680a      	ldr	r2, [r1, #0]
   213be:	4614      	mov	r4, r2
   213c0:	b99c      	cbnz	r4, 213ea <_malloc_r+0x56>
   213c2:	4f20      	ldr	r7, [pc, #128]	; (21444 <_malloc_r+0xb0>)
   213c4:	683b      	ldr	r3, [r7, #0]
   213c6:	b923      	cbnz	r3, 213d2 <_malloc_r+0x3e>
   213c8:	4621      	mov	r1, r4
   213ca:	4630      	mov	r0, r6
   213cc:	f000 fcd0 	bl	21d70 <_sbrk_r>
   213d0:	6038      	str	r0, [r7, #0]
   213d2:	4629      	mov	r1, r5
   213d4:	4630      	mov	r0, r6
   213d6:	f000 fccb 	bl	21d70 <_sbrk_r>
   213da:	1c43      	adds	r3, r0, #1
   213dc:	d123      	bne.n	21426 <_malloc_r+0x92>
   213de:	230c      	movs	r3, #12
   213e0:	4630      	mov	r0, r6
   213e2:	6033      	str	r3, [r6, #0]
   213e4:	f001 fc08 	bl	22bf8 <__malloc_unlock>
   213e8:	e7e3      	b.n	213b2 <_malloc_r+0x1e>
   213ea:	6823      	ldr	r3, [r4, #0]
   213ec:	1b5b      	subs	r3, r3, r5
   213ee:	d417      	bmi.n	21420 <_malloc_r+0x8c>
   213f0:	2b0b      	cmp	r3, #11
   213f2:	d903      	bls.n	213fc <_malloc_r+0x68>
   213f4:	6023      	str	r3, [r4, #0]
   213f6:	441c      	add	r4, r3
   213f8:	6025      	str	r5, [r4, #0]
   213fa:	e004      	b.n	21406 <_malloc_r+0x72>
   213fc:	6863      	ldr	r3, [r4, #4]
   213fe:	42a2      	cmp	r2, r4
   21400:	bf0c      	ite	eq
   21402:	600b      	streq	r3, [r1, #0]
   21404:	6053      	strne	r3, [r2, #4]
   21406:	4630      	mov	r0, r6
   21408:	f001 fbf6 	bl	22bf8 <__malloc_unlock>
   2140c:	f104 000b 	add.w	r0, r4, #11
   21410:	1d23      	adds	r3, r4, #4
   21412:	f020 0007 	bic.w	r0, r0, #7
   21416:	1ac2      	subs	r2, r0, r3
   21418:	d0cc      	beq.n	213b4 <_malloc_r+0x20>
   2141a:	1a1b      	subs	r3, r3, r0
   2141c:	50a3      	str	r3, [r4, r2]
   2141e:	e7c9      	b.n	213b4 <_malloc_r+0x20>
   21420:	4622      	mov	r2, r4
   21422:	6864      	ldr	r4, [r4, #4]
   21424:	e7cc      	b.n	213c0 <_malloc_r+0x2c>
   21426:	1cc4      	adds	r4, r0, #3
   21428:	f024 0403 	bic.w	r4, r4, #3
   2142c:	42a0      	cmp	r0, r4
   2142e:	d0e3      	beq.n	213f8 <_malloc_r+0x64>
   21430:	1a21      	subs	r1, r4, r0
   21432:	4630      	mov	r0, r6
   21434:	f000 fc9c 	bl	21d70 <_sbrk_r>
   21438:	3001      	adds	r0, #1
   2143a:	d1dd      	bne.n	213f8 <_malloc_r+0x64>
   2143c:	e7cf      	b.n	213de <_malloc_r+0x4a>
   2143e:	bf00      	nop
   21440:	200281d0 	.word	0x200281d0
   21444:	200281d4 	.word	0x200281d4

00021448 <_vfiprintf_r>:
   21448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2144c:	460d      	mov	r5, r1
   2144e:	b09d      	sub	sp, #116	; 0x74
   21450:	4614      	mov	r4, r2
   21452:	4698      	mov	r8, r3
   21454:	4606      	mov	r6, r0
   21456:	b118      	cbz	r0, 21460 <_vfiprintf_r+0x18>
   21458:	6983      	ldr	r3, [r0, #24]
   2145a:	b90b      	cbnz	r3, 21460 <_vfiprintf_r+0x18>
   2145c:	f001 fab4 	bl	229c8 <__sinit>
   21460:	4b89      	ldr	r3, [pc, #548]	; (21688 <_vfiprintf_r+0x240>)
   21462:	429d      	cmp	r5, r3
   21464:	d11b      	bne.n	2149e <_vfiprintf_r+0x56>
   21466:	6875      	ldr	r5, [r6, #4]
   21468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2146a:	07d9      	lsls	r1, r3, #31
   2146c:	d405      	bmi.n	2147a <_vfiprintf_r+0x32>
   2146e:	89ab      	ldrh	r3, [r5, #12]
   21470:	059a      	lsls	r2, r3, #22
   21472:	d402      	bmi.n	2147a <_vfiprintf_r+0x32>
   21474:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21476:	f008 fb7c 	bl	29b72 <__retarget_lock_acquire_recursive>
   2147a:	89ab      	ldrh	r3, [r5, #12]
   2147c:	071b      	lsls	r3, r3, #28
   2147e:	d501      	bpl.n	21484 <_vfiprintf_r+0x3c>
   21480:	692b      	ldr	r3, [r5, #16]
   21482:	b9eb      	cbnz	r3, 214c0 <_vfiprintf_r+0x78>
   21484:	4629      	mov	r1, r5
   21486:	4630      	mov	r0, r6
   21488:	f001 f8fa 	bl	22680 <__swsetup_r>
   2148c:	b1c0      	cbz	r0, 214c0 <_vfiprintf_r+0x78>
   2148e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   21490:	07dc      	lsls	r4, r3, #31
   21492:	d50e      	bpl.n	214b2 <_vfiprintf_r+0x6a>
   21494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21498:	b01d      	add	sp, #116	; 0x74
   2149a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2149e:	4b7b      	ldr	r3, [pc, #492]	; (2168c <_vfiprintf_r+0x244>)
   214a0:	429d      	cmp	r5, r3
   214a2:	d101      	bne.n	214a8 <_vfiprintf_r+0x60>
   214a4:	68b5      	ldr	r5, [r6, #8]
   214a6:	e7df      	b.n	21468 <_vfiprintf_r+0x20>
   214a8:	4b79      	ldr	r3, [pc, #484]	; (21690 <_vfiprintf_r+0x248>)
   214aa:	429d      	cmp	r5, r3
   214ac:	bf08      	it	eq
   214ae:	68f5      	ldreq	r5, [r6, #12]
   214b0:	e7da      	b.n	21468 <_vfiprintf_r+0x20>
   214b2:	89ab      	ldrh	r3, [r5, #12]
   214b4:	0598      	lsls	r0, r3, #22
   214b6:	d4ed      	bmi.n	21494 <_vfiprintf_r+0x4c>
   214b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   214ba:	f008 fb5c 	bl	29b76 <__retarget_lock_release_recursive>
   214be:	e7e9      	b.n	21494 <_vfiprintf_r+0x4c>
   214c0:	2300      	movs	r3, #0
   214c2:	f8cd 800c 	str.w	r8, [sp, #12]
   214c6:	f04f 0901 	mov.w	r9, #1
   214ca:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 21694 <_vfiprintf_r+0x24c>
   214ce:	9309      	str	r3, [sp, #36]	; 0x24
   214d0:	2320      	movs	r3, #32
   214d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   214d6:	2330      	movs	r3, #48	; 0x30
   214d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   214dc:	4623      	mov	r3, r4
   214de:	469a      	mov	sl, r3
   214e0:	f813 2b01 	ldrb.w	r2, [r3], #1
   214e4:	b10a      	cbz	r2, 214ea <_vfiprintf_r+0xa2>
   214e6:	2a25      	cmp	r2, #37	; 0x25
   214e8:	d1f9      	bne.n	214de <_vfiprintf_r+0x96>
   214ea:	ebba 0b04 	subs.w	fp, sl, r4
   214ee:	d00b      	beq.n	21508 <_vfiprintf_r+0xc0>
   214f0:	465b      	mov	r3, fp
   214f2:	4622      	mov	r2, r4
   214f4:	4629      	mov	r1, r5
   214f6:	4630      	mov	r0, r6
   214f8:	f008 f814 	bl	29524 <__sfputs_r>
   214fc:	3001      	adds	r0, #1
   214fe:	f000 80aa 	beq.w	21656 <_vfiprintf_r+0x20e>
   21502:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21504:	445a      	add	r2, fp
   21506:	9209      	str	r2, [sp, #36]	; 0x24
   21508:	f89a 3000 	ldrb.w	r3, [sl]
   2150c:	2b00      	cmp	r3, #0
   2150e:	f000 80a2 	beq.w	21656 <_vfiprintf_r+0x20e>
   21512:	2300      	movs	r3, #0
   21514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21518:	f10a 0a01 	add.w	sl, sl, #1
   2151c:	9304      	str	r3, [sp, #16]
   2151e:	9307      	str	r3, [sp, #28]
   21520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   21524:	931a      	str	r3, [sp, #104]	; 0x68
   21526:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2152a:	4654      	mov	r4, sl
   2152c:	2205      	movs	r2, #5
   2152e:	4859      	ldr	r0, [pc, #356]	; (21694 <_vfiprintf_r+0x24c>)
   21530:	f814 1b01 	ldrb.w	r1, [r4], #1
   21534:	f007 ff81 	bl	2943a <memchr>
   21538:	9a04      	ldr	r2, [sp, #16]
   2153a:	b9d8      	cbnz	r0, 21574 <_vfiprintf_r+0x12c>
   2153c:	06d1      	lsls	r1, r2, #27
   2153e:	bf44      	itt	mi
   21540:	2320      	movmi	r3, #32
   21542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   21546:	0713      	lsls	r3, r2, #28
   21548:	bf44      	itt	mi
   2154a:	232b      	movmi	r3, #43	; 0x2b
   2154c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   21550:	f89a 3000 	ldrb.w	r3, [sl]
   21554:	2b2a      	cmp	r3, #42	; 0x2a
   21556:	d015      	beq.n	21584 <_vfiprintf_r+0x13c>
   21558:	9a07      	ldr	r2, [sp, #28]
   2155a:	4654      	mov	r4, sl
   2155c:	2000      	movs	r0, #0
   2155e:	f04f 0c0a 	mov.w	ip, #10
   21562:	4621      	mov	r1, r4
   21564:	f811 3b01 	ldrb.w	r3, [r1], #1
   21568:	3b30      	subs	r3, #48	; 0x30
   2156a:	2b09      	cmp	r3, #9
   2156c:	d94e      	bls.n	2160c <_vfiprintf_r+0x1c4>
   2156e:	b1b0      	cbz	r0, 2159e <_vfiprintf_r+0x156>
   21570:	9207      	str	r2, [sp, #28]
   21572:	e014      	b.n	2159e <_vfiprintf_r+0x156>
   21574:	eba0 0308 	sub.w	r3, r0, r8
   21578:	46a2      	mov	sl, r4
   2157a:	fa09 f303 	lsl.w	r3, r9, r3
   2157e:	4313      	orrs	r3, r2
   21580:	9304      	str	r3, [sp, #16]
   21582:	e7d2      	b.n	2152a <_vfiprintf_r+0xe2>
   21584:	9b03      	ldr	r3, [sp, #12]
   21586:	1d19      	adds	r1, r3, #4
   21588:	681b      	ldr	r3, [r3, #0]
   2158a:	2b00      	cmp	r3, #0
   2158c:	9103      	str	r1, [sp, #12]
   2158e:	bfbb      	ittet	lt
   21590:	425b      	neglt	r3, r3
   21592:	f042 0202 	orrlt.w	r2, r2, #2
   21596:	9307      	strge	r3, [sp, #28]
   21598:	9307      	strlt	r3, [sp, #28]
   2159a:	bfb8      	it	lt
   2159c:	9204      	strlt	r2, [sp, #16]
   2159e:	7823      	ldrb	r3, [r4, #0]
   215a0:	2b2e      	cmp	r3, #46	; 0x2e
   215a2:	d10c      	bne.n	215be <_vfiprintf_r+0x176>
   215a4:	7863      	ldrb	r3, [r4, #1]
   215a6:	2b2a      	cmp	r3, #42	; 0x2a
   215a8:	d135      	bne.n	21616 <_vfiprintf_r+0x1ce>
   215aa:	9b03      	ldr	r3, [sp, #12]
   215ac:	3402      	adds	r4, #2
   215ae:	1d1a      	adds	r2, r3, #4
   215b0:	681b      	ldr	r3, [r3, #0]
   215b2:	2b00      	cmp	r3, #0
   215b4:	9203      	str	r2, [sp, #12]
   215b6:	bfb8      	it	lt
   215b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   215bc:	9305      	str	r3, [sp, #20]
   215be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 216a4 <_vfiprintf_r+0x25c>
   215c2:	2203      	movs	r2, #3
   215c4:	7821      	ldrb	r1, [r4, #0]
   215c6:	4650      	mov	r0, sl
   215c8:	f007 ff37 	bl	2943a <memchr>
   215cc:	b140      	cbz	r0, 215e0 <_vfiprintf_r+0x198>
   215ce:	2340      	movs	r3, #64	; 0x40
   215d0:	eba0 000a 	sub.w	r0, r0, sl
   215d4:	3401      	adds	r4, #1
   215d6:	fa03 f000 	lsl.w	r0, r3, r0
   215da:	9b04      	ldr	r3, [sp, #16]
   215dc:	4303      	orrs	r3, r0
   215de:	9304      	str	r3, [sp, #16]
   215e0:	f814 1b01 	ldrb.w	r1, [r4], #1
   215e4:	2206      	movs	r2, #6
   215e6:	482c      	ldr	r0, [pc, #176]	; (21698 <_vfiprintf_r+0x250>)
   215e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   215ec:	f007 ff25 	bl	2943a <memchr>
   215f0:	2800      	cmp	r0, #0
   215f2:	d03f      	beq.n	21674 <_vfiprintf_r+0x22c>
   215f4:	4b29      	ldr	r3, [pc, #164]	; (2169c <_vfiprintf_r+0x254>)
   215f6:	bb1b      	cbnz	r3, 21640 <_vfiprintf_r+0x1f8>
   215f8:	9b03      	ldr	r3, [sp, #12]
   215fa:	3307      	adds	r3, #7
   215fc:	f023 0307 	bic.w	r3, r3, #7
   21600:	3308      	adds	r3, #8
   21602:	9303      	str	r3, [sp, #12]
   21604:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21606:	443b      	add	r3, r7
   21608:	9309      	str	r3, [sp, #36]	; 0x24
   2160a:	e767      	b.n	214dc <_vfiprintf_r+0x94>
   2160c:	fb0c 3202 	mla	r2, ip, r2, r3
   21610:	460c      	mov	r4, r1
   21612:	2001      	movs	r0, #1
   21614:	e7a5      	b.n	21562 <_vfiprintf_r+0x11a>
   21616:	2300      	movs	r3, #0
   21618:	3401      	adds	r4, #1
   2161a:	f04f 0c0a 	mov.w	ip, #10
   2161e:	4619      	mov	r1, r3
   21620:	9305      	str	r3, [sp, #20]
   21622:	4620      	mov	r0, r4
   21624:	f810 2b01 	ldrb.w	r2, [r0], #1
   21628:	3a30      	subs	r2, #48	; 0x30
   2162a:	2a09      	cmp	r2, #9
   2162c:	d903      	bls.n	21636 <_vfiprintf_r+0x1ee>
   2162e:	2b00      	cmp	r3, #0
   21630:	d0c5      	beq.n	215be <_vfiprintf_r+0x176>
   21632:	9105      	str	r1, [sp, #20]
   21634:	e7c3      	b.n	215be <_vfiprintf_r+0x176>
   21636:	fb0c 2101 	mla	r1, ip, r1, r2
   2163a:	4604      	mov	r4, r0
   2163c:	2301      	movs	r3, #1
   2163e:	e7f0      	b.n	21622 <_vfiprintf_r+0x1da>
   21640:	ab03      	add	r3, sp, #12
   21642:	462a      	mov	r2, r5
   21644:	a904      	add	r1, sp, #16
   21646:	4630      	mov	r0, r6
   21648:	9300      	str	r3, [sp, #0]
   2164a:	4b15      	ldr	r3, [pc, #84]	; (216a0 <_vfiprintf_r+0x258>)
   2164c:	f000 f82c 	bl	216a8 <_printf_float>
   21650:	4607      	mov	r7, r0
   21652:	1c78      	adds	r0, r7, #1
   21654:	d1d6      	bne.n	21604 <_vfiprintf_r+0x1bc>
   21656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   21658:	07d9      	lsls	r1, r3, #31
   2165a:	d405      	bmi.n	21668 <_vfiprintf_r+0x220>
   2165c:	89ab      	ldrh	r3, [r5, #12]
   2165e:	059a      	lsls	r2, r3, #22
   21660:	d402      	bmi.n	21668 <_vfiprintf_r+0x220>
   21662:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21664:	f008 fa87 	bl	29b76 <__retarget_lock_release_recursive>
   21668:	89ab      	ldrh	r3, [r5, #12]
   2166a:	065b      	lsls	r3, r3, #25
   2166c:	f53f af12 	bmi.w	21494 <_vfiprintf_r+0x4c>
   21670:	9809      	ldr	r0, [sp, #36]	; 0x24
   21672:	e711      	b.n	21498 <_vfiprintf_r+0x50>
   21674:	ab03      	add	r3, sp, #12
   21676:	462a      	mov	r2, r5
   21678:	a904      	add	r1, sp, #16
   2167a:	4630      	mov	r0, r6
   2167c:	9300      	str	r3, [sp, #0]
   2167e:	4b08      	ldr	r3, [pc, #32]	; (216a0 <_vfiprintf_r+0x258>)
   21680:	f000 fa48 	bl	21b14 <_printf_i>
   21684:	e7e4      	b.n	21650 <_vfiprintf_r+0x208>
   21686:	bf00      	nop
   21688:	0002acac 	.word	0x0002acac
   2168c:	0002accc 	.word	0x0002accc
   21690:	0002ac8c 	.word	0x0002ac8c
   21694:	0002d1fe 	.word	0x0002d1fe
   21698:	0002d208 	.word	0x0002d208
   2169c:	000216a9 	.word	0x000216a9
   216a0:	00029525 	.word	0x00029525
   216a4:	0002d204 	.word	0x0002d204

000216a8 <_printf_float>:
   216a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216ac:	ed2d 8b02 	vpush	{d8}
   216b0:	b08d      	sub	sp, #52	; 0x34
   216b2:	460c      	mov	r4, r1
   216b4:	4616      	mov	r6, r2
   216b6:	461f      	mov	r7, r3
   216b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   216bc:	4605      	mov	r5, r0
   216be:	f001 fa3f 	bl	22b40 <_localeconv_r>
   216c2:	f8d0 a000 	ldr.w	sl, [r0]
   216c6:	4650      	mov	r0, sl
   216c8:	f7eb fc36 	bl	cf38 <strlen>
   216cc:	2300      	movs	r3, #0
   216ce:	f894 b018 	ldrb.w	fp, [r4, #24]
   216d2:	ee08 0a10 	vmov	s16, r0
   216d6:	930a      	str	r3, [sp, #40]	; 0x28
   216d8:	6823      	ldr	r3, [r4, #0]
   216da:	9305      	str	r3, [sp, #20]
   216dc:	f8d8 3000 	ldr.w	r3, [r8]
   216e0:	3307      	adds	r3, #7
   216e2:	f023 0307 	bic.w	r3, r3, #7
   216e6:	f103 0208 	add.w	r2, r3, #8
   216ea:	f8c8 2000 	str.w	r2, [r8]
   216ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   216f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   216f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   216fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   216fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   21702:	f8cd 8018 	str.w	r8, [sp, #24]
   21706:	9307      	str	r3, [sp, #28]
   21708:	4b9e      	ldr	r3, [pc, #632]	; (21984 <_printf_float+0x2dc>)
   2170a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   2170e:	f7eb fbf3 	bl	cef8 <__aeabi_dcmpun>
   21712:	bb88      	cbnz	r0, 21778 <_printf_float+0xd0>
   21714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21718:	4b9a      	ldr	r3, [pc, #616]	; (21984 <_printf_float+0x2dc>)
   2171a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   2171e:	f7ea ffb5 	bl	c68c <__aeabi_dcmple>
   21722:	bb48      	cbnz	r0, 21778 <_printf_float+0xd0>
   21724:	2200      	movs	r2, #0
   21726:	2300      	movs	r3, #0
   21728:	4640      	mov	r0, r8
   2172a:	4649      	mov	r1, r9
   2172c:	f7ea ffa4 	bl	c678 <__aeabi_dcmplt>
   21730:	b110      	cbz	r0, 21738 <_printf_float+0x90>
   21732:	232d      	movs	r3, #45	; 0x2d
   21734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   21738:	4b93      	ldr	r3, [pc, #588]	; (21988 <_printf_float+0x2e0>)
   2173a:	4894      	ldr	r0, [pc, #592]	; (2198c <_printf_float+0x2e4>)
   2173c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   21740:	bf94      	ite	ls
   21742:	4698      	movls	r8, r3
   21744:	4680      	movhi	r8, r0
   21746:	2303      	movs	r3, #3
   21748:	f04f 0900 	mov.w	r9, #0
   2174c:	6123      	str	r3, [r4, #16]
   2174e:	9b05      	ldr	r3, [sp, #20]
   21750:	f023 0204 	bic.w	r2, r3, #4
   21754:	6022      	str	r2, [r4, #0]
   21756:	4633      	mov	r3, r6
   21758:	aa0b      	add	r2, sp, #44	; 0x2c
   2175a:	4621      	mov	r1, r4
   2175c:	4628      	mov	r0, r5
   2175e:	9700      	str	r7, [sp, #0]
   21760:	f007 ff92 	bl	29688 <_printf_common>
   21764:	3001      	adds	r0, #1
   21766:	f040 8090 	bne.w	2188a <_printf_float+0x1e2>
   2176a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2176e:	b00d      	add	sp, #52	; 0x34
   21770:	ecbd 8b02 	vpop	{d8}
   21774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21778:	4642      	mov	r2, r8
   2177a:	464b      	mov	r3, r9
   2177c:	4640      	mov	r0, r8
   2177e:	4649      	mov	r1, r9
   21780:	f7eb fbba 	bl	cef8 <__aeabi_dcmpun>
   21784:	b140      	cbz	r0, 21798 <_printf_float+0xf0>
   21786:	464b      	mov	r3, r9
   21788:	4881      	ldr	r0, [pc, #516]	; (21990 <_printf_float+0x2e8>)
   2178a:	2b00      	cmp	r3, #0
   2178c:	bfbc      	itt	lt
   2178e:	232d      	movlt	r3, #45	; 0x2d
   21790:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   21794:	4b7f      	ldr	r3, [pc, #508]	; (21994 <_printf_float+0x2ec>)
   21796:	e7d1      	b.n	2173c <_printf_float+0x94>
   21798:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   2179c:	6863      	ldr	r3, [r4, #4]
   2179e:	9206      	str	r2, [sp, #24]
   217a0:	1c5a      	adds	r2, r3, #1
   217a2:	d13f      	bne.n	21824 <_printf_float+0x17c>
   217a4:	2306      	movs	r3, #6
   217a6:	6063      	str	r3, [r4, #4]
   217a8:	9b05      	ldr	r3, [sp, #20]
   217aa:	4628      	mov	r0, r5
   217ac:	6861      	ldr	r1, [r4, #4]
   217ae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   217b2:	2300      	movs	r3, #0
   217b4:	9303      	str	r3, [sp, #12]
   217b6:	ab0a      	add	r3, sp, #40	; 0x28
   217b8:	6022      	str	r2, [r4, #0]
   217ba:	e9cd b301 	strd	fp, r3, [sp, #4]
   217be:	ab09      	add	r3, sp, #36	; 0x24
   217c0:	ec49 8b10 	vmov	d0, r8, r9
   217c4:	9300      	str	r3, [sp, #0]
   217c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   217ca:	f007 febd 	bl	29548 <__cvt>
   217ce:	9b06      	ldr	r3, [sp, #24]
   217d0:	4680      	mov	r8, r0
   217d2:	9909      	ldr	r1, [sp, #36]	; 0x24
   217d4:	2b47      	cmp	r3, #71	; 0x47
   217d6:	d108      	bne.n	217ea <_printf_float+0x142>
   217d8:	1cc8      	adds	r0, r1, #3
   217da:	db02      	blt.n	217e2 <_printf_float+0x13a>
   217dc:	6863      	ldr	r3, [r4, #4]
   217de:	4299      	cmp	r1, r3
   217e0:	dd41      	ble.n	21866 <_printf_float+0x1be>
   217e2:	f1ab 0b02 	sub.w	fp, fp, #2
   217e6:	fa5f fb8b 	uxtb.w	fp, fp
   217ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   217ee:	d820      	bhi.n	21832 <_printf_float+0x18a>
   217f0:	3901      	subs	r1, #1
   217f2:	465a      	mov	r2, fp
   217f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
   217f8:	9109      	str	r1, [sp, #36]	; 0x24
   217fa:	f007 ff07 	bl	2960c <__exponent>
   217fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21800:	4681      	mov	r9, r0
   21802:	1813      	adds	r3, r2, r0
   21804:	2a01      	cmp	r2, #1
   21806:	6123      	str	r3, [r4, #16]
   21808:	dc02      	bgt.n	21810 <_printf_float+0x168>
   2180a:	6822      	ldr	r2, [r4, #0]
   2180c:	07d2      	lsls	r2, r2, #31
   2180e:	d501      	bpl.n	21814 <_printf_float+0x16c>
   21810:	3301      	adds	r3, #1
   21812:	6123      	str	r3, [r4, #16]
   21814:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   21818:	2b00      	cmp	r3, #0
   2181a:	d09c      	beq.n	21756 <_printf_float+0xae>
   2181c:	232d      	movs	r3, #45	; 0x2d
   2181e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   21822:	e798      	b.n	21756 <_printf_float+0xae>
   21824:	9a06      	ldr	r2, [sp, #24]
   21826:	2a47      	cmp	r2, #71	; 0x47
   21828:	d1be      	bne.n	217a8 <_printf_float+0x100>
   2182a:	2b00      	cmp	r3, #0
   2182c:	d1bc      	bne.n	217a8 <_printf_float+0x100>
   2182e:	2301      	movs	r3, #1
   21830:	e7b9      	b.n	217a6 <_printf_float+0xfe>
   21832:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   21836:	d118      	bne.n	2186a <_printf_float+0x1c2>
   21838:	2900      	cmp	r1, #0
   2183a:	6863      	ldr	r3, [r4, #4]
   2183c:	dd0b      	ble.n	21856 <_printf_float+0x1ae>
   2183e:	6121      	str	r1, [r4, #16]
   21840:	b913      	cbnz	r3, 21848 <_printf_float+0x1a0>
   21842:	6822      	ldr	r2, [r4, #0]
   21844:	07d0      	lsls	r0, r2, #31
   21846:	d502      	bpl.n	2184e <_printf_float+0x1a6>
   21848:	3301      	adds	r3, #1
   2184a:	440b      	add	r3, r1
   2184c:	6123      	str	r3, [r4, #16]
   2184e:	f04f 0900 	mov.w	r9, #0
   21852:	65a1      	str	r1, [r4, #88]	; 0x58
   21854:	e7de      	b.n	21814 <_printf_float+0x16c>
   21856:	b913      	cbnz	r3, 2185e <_printf_float+0x1b6>
   21858:	6822      	ldr	r2, [r4, #0]
   2185a:	07d2      	lsls	r2, r2, #31
   2185c:	d501      	bpl.n	21862 <_printf_float+0x1ba>
   2185e:	3302      	adds	r3, #2
   21860:	e7f4      	b.n	2184c <_printf_float+0x1a4>
   21862:	2301      	movs	r3, #1
   21864:	e7f2      	b.n	2184c <_printf_float+0x1a4>
   21866:	f04f 0b67 	mov.w	fp, #103	; 0x67
   2186a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2186c:	4299      	cmp	r1, r3
   2186e:	db05      	blt.n	2187c <_printf_float+0x1d4>
   21870:	6823      	ldr	r3, [r4, #0]
   21872:	6121      	str	r1, [r4, #16]
   21874:	07d8      	lsls	r0, r3, #31
   21876:	d5ea      	bpl.n	2184e <_printf_float+0x1a6>
   21878:	1c4b      	adds	r3, r1, #1
   2187a:	e7e7      	b.n	2184c <_printf_float+0x1a4>
   2187c:	2900      	cmp	r1, #0
   2187e:	bfd4      	ite	le
   21880:	f1c1 0202 	rsble	r2, r1, #2
   21884:	2201      	movgt	r2, #1
   21886:	4413      	add	r3, r2
   21888:	e7e0      	b.n	2184c <_printf_float+0x1a4>
   2188a:	6823      	ldr	r3, [r4, #0]
   2188c:	055a      	lsls	r2, r3, #21
   2188e:	d407      	bmi.n	218a0 <_printf_float+0x1f8>
   21890:	6923      	ldr	r3, [r4, #16]
   21892:	4642      	mov	r2, r8
   21894:	4631      	mov	r1, r6
   21896:	4628      	mov	r0, r5
   21898:	47b8      	blx	r7
   2189a:	3001      	adds	r0, #1
   2189c:	d12c      	bne.n	218f8 <_printf_float+0x250>
   2189e:	e764      	b.n	2176a <_printf_float+0xc2>
   218a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   218a4:	f240 80e0 	bls.w	21a68 <_printf_float+0x3c0>
   218a8:	2200      	movs	r2, #0
   218aa:	2300      	movs	r3, #0
   218ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   218b0:	f7ea fed8 	bl	c664 <__aeabi_dcmpeq>
   218b4:	2800      	cmp	r0, #0
   218b6:	d034      	beq.n	21922 <_printf_float+0x27a>
   218b8:	2301      	movs	r3, #1
   218ba:	4a37      	ldr	r2, [pc, #220]	; (21998 <_printf_float+0x2f0>)
   218bc:	4631      	mov	r1, r6
   218be:	4628      	mov	r0, r5
   218c0:	47b8      	blx	r7
   218c2:	3001      	adds	r0, #1
   218c4:	f43f af51 	beq.w	2176a <_printf_float+0xc2>
   218c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   218cc:	429a      	cmp	r2, r3
   218ce:	db02      	blt.n	218d6 <_printf_float+0x22e>
   218d0:	6823      	ldr	r3, [r4, #0]
   218d2:	07d8      	lsls	r0, r3, #31
   218d4:	d510      	bpl.n	218f8 <_printf_float+0x250>
   218d6:	ee18 3a10 	vmov	r3, s16
   218da:	4652      	mov	r2, sl
   218dc:	4631      	mov	r1, r6
   218de:	4628      	mov	r0, r5
   218e0:	47b8      	blx	r7
   218e2:	3001      	adds	r0, #1
   218e4:	f43f af41 	beq.w	2176a <_printf_float+0xc2>
   218e8:	f04f 0800 	mov.w	r8, #0
   218ec:	f104 091a 	add.w	r9, r4, #26
   218f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   218f2:	3b01      	subs	r3, #1
   218f4:	4543      	cmp	r3, r8
   218f6:	dc09      	bgt.n	2190c <_printf_float+0x264>
   218f8:	6823      	ldr	r3, [r4, #0]
   218fa:	079b      	lsls	r3, r3, #30
   218fc:	f100 8105 	bmi.w	21b0a <_printf_float+0x462>
   21900:	68e0      	ldr	r0, [r4, #12]
   21902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21904:	4298      	cmp	r0, r3
   21906:	bfb8      	it	lt
   21908:	4618      	movlt	r0, r3
   2190a:	e730      	b.n	2176e <_printf_float+0xc6>
   2190c:	2301      	movs	r3, #1
   2190e:	464a      	mov	r2, r9
   21910:	4631      	mov	r1, r6
   21912:	4628      	mov	r0, r5
   21914:	47b8      	blx	r7
   21916:	3001      	adds	r0, #1
   21918:	f43f af27 	beq.w	2176a <_printf_float+0xc2>
   2191c:	f108 0801 	add.w	r8, r8, #1
   21920:	e7e6      	b.n	218f0 <_printf_float+0x248>
   21922:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21924:	2b00      	cmp	r3, #0
   21926:	dc39      	bgt.n	2199c <_printf_float+0x2f4>
   21928:	2301      	movs	r3, #1
   2192a:	4a1b      	ldr	r2, [pc, #108]	; (21998 <_printf_float+0x2f0>)
   2192c:	4631      	mov	r1, r6
   2192e:	4628      	mov	r0, r5
   21930:	47b8      	blx	r7
   21932:	3001      	adds	r0, #1
   21934:	f43f af19 	beq.w	2176a <_printf_float+0xc2>
   21938:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2193c:	4313      	orrs	r3, r2
   2193e:	d102      	bne.n	21946 <_printf_float+0x29e>
   21940:	6823      	ldr	r3, [r4, #0]
   21942:	07d9      	lsls	r1, r3, #31
   21944:	d5d8      	bpl.n	218f8 <_printf_float+0x250>
   21946:	ee18 3a10 	vmov	r3, s16
   2194a:	4652      	mov	r2, sl
   2194c:	4631      	mov	r1, r6
   2194e:	4628      	mov	r0, r5
   21950:	47b8      	blx	r7
   21952:	3001      	adds	r0, #1
   21954:	f43f af09 	beq.w	2176a <_printf_float+0xc2>
   21958:	f04f 0900 	mov.w	r9, #0
   2195c:	f104 0a1a 	add.w	sl, r4, #26
   21960:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21962:	425b      	negs	r3, r3
   21964:	454b      	cmp	r3, r9
   21966:	dc01      	bgt.n	2196c <_printf_float+0x2c4>
   21968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2196a:	e792      	b.n	21892 <_printf_float+0x1ea>
   2196c:	2301      	movs	r3, #1
   2196e:	4652      	mov	r2, sl
   21970:	4631      	mov	r1, r6
   21972:	4628      	mov	r0, r5
   21974:	47b8      	blx	r7
   21976:	3001      	adds	r0, #1
   21978:	f43f aef7 	beq.w	2176a <_printf_float+0xc2>
   2197c:	f109 0901 	add.w	r9, r9, #1
   21980:	e7ee      	b.n	21960 <_printf_float+0x2b8>
   21982:	bf00      	nop
   21984:	7fefffff 	.word	0x7fefffff
   21988:	0002d20f 	.word	0x0002d20f
   2198c:	0002b80f 	.word	0x0002b80f
   21990:	0002d217 	.word	0x0002d217
   21994:	0002d213 	.word	0x0002d213
   21998:	0002c95d 	.word	0x0002c95d
   2199c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2199e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   219a0:	429a      	cmp	r2, r3
   219a2:	bfa8      	it	ge
   219a4:	461a      	movge	r2, r3
   219a6:	2a00      	cmp	r2, #0
   219a8:	4691      	mov	r9, r2
   219aa:	dc37      	bgt.n	21a1c <_printf_float+0x374>
   219ac:	f04f 0b00 	mov.w	fp, #0
   219b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   219b4:	f104 021a 	add.w	r2, r4, #26
   219b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   219ba:	9305      	str	r3, [sp, #20]
   219bc:	eba3 0309 	sub.w	r3, r3, r9
   219c0:	455b      	cmp	r3, fp
   219c2:	dc33      	bgt.n	21a2c <_printf_float+0x384>
   219c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   219c8:	429a      	cmp	r2, r3
   219ca:	db3b      	blt.n	21a44 <_printf_float+0x39c>
   219cc:	6823      	ldr	r3, [r4, #0]
   219ce:	07da      	lsls	r2, r3, #31
   219d0:	d438      	bmi.n	21a44 <_printf_float+0x39c>
   219d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   219d4:	9b05      	ldr	r3, [sp, #20]
   219d6:	9909      	ldr	r1, [sp, #36]	; 0x24
   219d8:	1ad3      	subs	r3, r2, r3
   219da:	eba2 0901 	sub.w	r9, r2, r1
   219de:	4599      	cmp	r9, r3
   219e0:	bfa8      	it	ge
   219e2:	4699      	movge	r9, r3
   219e4:	f1b9 0f00 	cmp.w	r9, #0
   219e8:	dc35      	bgt.n	21a56 <_printf_float+0x3ae>
   219ea:	f04f 0800 	mov.w	r8, #0
   219ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   219f2:	f104 0a1a 	add.w	sl, r4, #26
   219f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   219fa:	1a9b      	subs	r3, r3, r2
   219fc:	eba3 0309 	sub.w	r3, r3, r9
   21a00:	4543      	cmp	r3, r8
   21a02:	f77f af79 	ble.w	218f8 <_printf_float+0x250>
   21a06:	2301      	movs	r3, #1
   21a08:	4652      	mov	r2, sl
   21a0a:	4631      	mov	r1, r6
   21a0c:	4628      	mov	r0, r5
   21a0e:	47b8      	blx	r7
   21a10:	3001      	adds	r0, #1
   21a12:	f43f aeaa 	beq.w	2176a <_printf_float+0xc2>
   21a16:	f108 0801 	add.w	r8, r8, #1
   21a1a:	e7ec      	b.n	219f6 <_printf_float+0x34e>
   21a1c:	4613      	mov	r3, r2
   21a1e:	4631      	mov	r1, r6
   21a20:	4642      	mov	r2, r8
   21a22:	4628      	mov	r0, r5
   21a24:	47b8      	blx	r7
   21a26:	3001      	adds	r0, #1
   21a28:	d1c0      	bne.n	219ac <_printf_float+0x304>
   21a2a:	e69e      	b.n	2176a <_printf_float+0xc2>
   21a2c:	2301      	movs	r3, #1
   21a2e:	4631      	mov	r1, r6
   21a30:	4628      	mov	r0, r5
   21a32:	9205      	str	r2, [sp, #20]
   21a34:	47b8      	blx	r7
   21a36:	3001      	adds	r0, #1
   21a38:	f43f ae97 	beq.w	2176a <_printf_float+0xc2>
   21a3c:	f10b 0b01 	add.w	fp, fp, #1
   21a40:	9a05      	ldr	r2, [sp, #20]
   21a42:	e7b9      	b.n	219b8 <_printf_float+0x310>
   21a44:	ee18 3a10 	vmov	r3, s16
   21a48:	4652      	mov	r2, sl
   21a4a:	4631      	mov	r1, r6
   21a4c:	4628      	mov	r0, r5
   21a4e:	47b8      	blx	r7
   21a50:	3001      	adds	r0, #1
   21a52:	d1be      	bne.n	219d2 <_printf_float+0x32a>
   21a54:	e689      	b.n	2176a <_printf_float+0xc2>
   21a56:	9a05      	ldr	r2, [sp, #20]
   21a58:	464b      	mov	r3, r9
   21a5a:	4631      	mov	r1, r6
   21a5c:	4628      	mov	r0, r5
   21a5e:	4442      	add	r2, r8
   21a60:	47b8      	blx	r7
   21a62:	3001      	adds	r0, #1
   21a64:	d1c1      	bne.n	219ea <_printf_float+0x342>
   21a66:	e680      	b.n	2176a <_printf_float+0xc2>
   21a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21a6a:	2a01      	cmp	r2, #1
   21a6c:	dc01      	bgt.n	21a72 <_printf_float+0x3ca>
   21a6e:	07db      	lsls	r3, r3, #31
   21a70:	d538      	bpl.n	21ae4 <_printf_float+0x43c>
   21a72:	2301      	movs	r3, #1
   21a74:	4642      	mov	r2, r8
   21a76:	4631      	mov	r1, r6
   21a78:	4628      	mov	r0, r5
   21a7a:	47b8      	blx	r7
   21a7c:	3001      	adds	r0, #1
   21a7e:	f43f ae74 	beq.w	2176a <_printf_float+0xc2>
   21a82:	ee18 3a10 	vmov	r3, s16
   21a86:	4652      	mov	r2, sl
   21a88:	4631      	mov	r1, r6
   21a8a:	4628      	mov	r0, r5
   21a8c:	47b8      	blx	r7
   21a8e:	3001      	adds	r0, #1
   21a90:	f43f ae6b 	beq.w	2176a <_printf_float+0xc2>
   21a94:	2200      	movs	r2, #0
   21a96:	2300      	movs	r3, #0
   21a98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   21a9c:	f7ea fde2 	bl	c664 <__aeabi_dcmpeq>
   21aa0:	b9d8      	cbnz	r0, 21ada <_printf_float+0x432>
   21aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21aa4:	f108 0201 	add.w	r2, r8, #1
   21aa8:	3b01      	subs	r3, #1
   21aaa:	4631      	mov	r1, r6
   21aac:	4628      	mov	r0, r5
   21aae:	47b8      	blx	r7
   21ab0:	3001      	adds	r0, #1
   21ab2:	d10e      	bne.n	21ad2 <_printf_float+0x42a>
   21ab4:	e659      	b.n	2176a <_printf_float+0xc2>
   21ab6:	2301      	movs	r3, #1
   21ab8:	4652      	mov	r2, sl
   21aba:	4631      	mov	r1, r6
   21abc:	4628      	mov	r0, r5
   21abe:	47b8      	blx	r7
   21ac0:	3001      	adds	r0, #1
   21ac2:	f43f ae52 	beq.w	2176a <_printf_float+0xc2>
   21ac6:	f108 0801 	add.w	r8, r8, #1
   21aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21acc:	3b01      	subs	r3, #1
   21ace:	4543      	cmp	r3, r8
   21ad0:	dcf1      	bgt.n	21ab6 <_printf_float+0x40e>
   21ad2:	464b      	mov	r3, r9
   21ad4:	f104 0250 	add.w	r2, r4, #80	; 0x50
   21ad8:	e6dc      	b.n	21894 <_printf_float+0x1ec>
   21ada:	f04f 0800 	mov.w	r8, #0
   21ade:	f104 0a1a 	add.w	sl, r4, #26
   21ae2:	e7f2      	b.n	21aca <_printf_float+0x422>
   21ae4:	2301      	movs	r3, #1
   21ae6:	4642      	mov	r2, r8
   21ae8:	e7df      	b.n	21aaa <_printf_float+0x402>
   21aea:	2301      	movs	r3, #1
   21aec:	464a      	mov	r2, r9
   21aee:	4631      	mov	r1, r6
   21af0:	4628      	mov	r0, r5
   21af2:	47b8      	blx	r7
   21af4:	3001      	adds	r0, #1
   21af6:	f43f ae38 	beq.w	2176a <_printf_float+0xc2>
   21afa:	f108 0801 	add.w	r8, r8, #1
   21afe:	68e3      	ldr	r3, [r4, #12]
   21b00:	990b      	ldr	r1, [sp, #44]	; 0x2c
   21b02:	1a5b      	subs	r3, r3, r1
   21b04:	4543      	cmp	r3, r8
   21b06:	dcf0      	bgt.n	21aea <_printf_float+0x442>
   21b08:	e6fa      	b.n	21900 <_printf_float+0x258>
   21b0a:	f04f 0800 	mov.w	r8, #0
   21b0e:	f104 0919 	add.w	r9, r4, #25
   21b12:	e7f4      	b.n	21afe <_printf_float+0x456>

00021b14 <_printf_i>:
   21b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   21b18:	460c      	mov	r4, r1
   21b1a:	4691      	mov	r9, r2
   21b1c:	4680      	mov	r8, r0
   21b1e:	469a      	mov	sl, r3
   21b20:	7e27      	ldrb	r7, [r4, #24]
   21b22:	f104 0243 	add.w	r2, r4, #67	; 0x43
   21b26:	990c      	ldr	r1, [sp, #48]	; 0x30
   21b28:	2f78      	cmp	r7, #120	; 0x78
   21b2a:	d807      	bhi.n	21b3c <_printf_i+0x28>
   21b2c:	2f62      	cmp	r7, #98	; 0x62
   21b2e:	d80a      	bhi.n	21b46 <_printf_i+0x32>
   21b30:	2f00      	cmp	r7, #0
   21b32:	f000 80d8 	beq.w	21ce6 <_printf_i+0x1d2>
   21b36:	2f58      	cmp	r7, #88	; 0x58
   21b38:	f000 80a3 	beq.w	21c82 <_printf_i+0x16e>
   21b3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   21b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   21b44:	e03a      	b.n	21bbc <_printf_i+0xa8>
   21b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   21b4a:	2b15      	cmp	r3, #21
   21b4c:	d8f6      	bhi.n	21b3c <_printf_i+0x28>
   21b4e:	a001      	add	r0, pc, #4	; (adr r0, 21b54 <_printf_i+0x40>)
   21b50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   21b54:	00021bad 	.word	0x00021bad
   21b58:	00021bc1 	.word	0x00021bc1
   21b5c:	00021b3d 	.word	0x00021b3d
   21b60:	00021b3d 	.word	0x00021b3d
   21b64:	00021b3d 	.word	0x00021b3d
   21b68:	00021b3d 	.word	0x00021b3d
   21b6c:	00021bc1 	.word	0x00021bc1
   21b70:	00021b3d 	.word	0x00021b3d
   21b74:	00021b3d 	.word	0x00021b3d
   21b78:	00021b3d 	.word	0x00021b3d
   21b7c:	00021b3d 	.word	0x00021b3d
   21b80:	00021ccd 	.word	0x00021ccd
   21b84:	00021bf1 	.word	0x00021bf1
   21b88:	00021caf 	.word	0x00021caf
   21b8c:	00021b3d 	.word	0x00021b3d
   21b90:	00021b3d 	.word	0x00021b3d
   21b94:	00021cef 	.word	0x00021cef
   21b98:	00021b3d 	.word	0x00021b3d
   21b9c:	00021bf1 	.word	0x00021bf1
   21ba0:	00021b3d 	.word	0x00021b3d
   21ba4:	00021b3d 	.word	0x00021b3d
   21ba8:	00021cb7 	.word	0x00021cb7
   21bac:	680b      	ldr	r3, [r1, #0]
   21bae:	f104 0642 	add.w	r6, r4, #66	; 0x42
   21bb2:	1d1a      	adds	r2, r3, #4
   21bb4:	681b      	ldr	r3, [r3, #0]
   21bb6:	600a      	str	r2, [r1, #0]
   21bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   21bbc:	2301      	movs	r3, #1
   21bbe:	e0a3      	b.n	21d08 <_printf_i+0x1f4>
   21bc0:	6825      	ldr	r5, [r4, #0]
   21bc2:	6808      	ldr	r0, [r1, #0]
   21bc4:	062e      	lsls	r6, r5, #24
   21bc6:	f100 0304 	add.w	r3, r0, #4
   21bca:	d50a      	bpl.n	21be2 <_printf_i+0xce>
   21bcc:	6805      	ldr	r5, [r0, #0]
   21bce:	600b      	str	r3, [r1, #0]
   21bd0:	2d00      	cmp	r5, #0
   21bd2:	da03      	bge.n	21bdc <_printf_i+0xc8>
   21bd4:	232d      	movs	r3, #45	; 0x2d
   21bd6:	426d      	negs	r5, r5
   21bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   21bdc:	485e      	ldr	r0, [pc, #376]	; (21d58 <_printf_i+0x244>)
   21bde:	230a      	movs	r3, #10
   21be0:	e019      	b.n	21c16 <_printf_i+0x102>
   21be2:	f015 0f40 	tst.w	r5, #64	; 0x40
   21be6:	6805      	ldr	r5, [r0, #0]
   21be8:	600b      	str	r3, [r1, #0]
   21bea:	bf18      	it	ne
   21bec:	b22d      	sxthne	r5, r5
   21bee:	e7ef      	b.n	21bd0 <_printf_i+0xbc>
   21bf0:	680b      	ldr	r3, [r1, #0]
   21bf2:	6825      	ldr	r5, [r4, #0]
   21bf4:	1d18      	adds	r0, r3, #4
   21bf6:	6008      	str	r0, [r1, #0]
   21bf8:	0628      	lsls	r0, r5, #24
   21bfa:	d501      	bpl.n	21c00 <_printf_i+0xec>
   21bfc:	681d      	ldr	r5, [r3, #0]
   21bfe:	e002      	b.n	21c06 <_printf_i+0xf2>
   21c00:	0669      	lsls	r1, r5, #25
   21c02:	d5fb      	bpl.n	21bfc <_printf_i+0xe8>
   21c04:	881d      	ldrh	r5, [r3, #0]
   21c06:	2f6f      	cmp	r7, #111	; 0x6f
   21c08:	4853      	ldr	r0, [pc, #332]	; (21d58 <_printf_i+0x244>)
   21c0a:	bf0c      	ite	eq
   21c0c:	2308      	moveq	r3, #8
   21c0e:	230a      	movne	r3, #10
   21c10:	2100      	movs	r1, #0
   21c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   21c16:	6866      	ldr	r6, [r4, #4]
   21c18:	2e00      	cmp	r6, #0
   21c1a:	60a6      	str	r6, [r4, #8]
   21c1c:	bfa2      	ittt	ge
   21c1e:	6821      	ldrge	r1, [r4, #0]
   21c20:	f021 0104 	bicge.w	r1, r1, #4
   21c24:	6021      	strge	r1, [r4, #0]
   21c26:	b90d      	cbnz	r5, 21c2c <_printf_i+0x118>
   21c28:	2e00      	cmp	r6, #0
   21c2a:	d04d      	beq.n	21cc8 <_printf_i+0x1b4>
   21c2c:	4616      	mov	r6, r2
   21c2e:	fbb5 f1f3 	udiv	r1, r5, r3
   21c32:	fb03 5711 	mls	r7, r3, r1, r5
   21c36:	5dc7      	ldrb	r7, [r0, r7]
   21c38:	f806 7d01 	strb.w	r7, [r6, #-1]!
   21c3c:	462f      	mov	r7, r5
   21c3e:	460d      	mov	r5, r1
   21c40:	42bb      	cmp	r3, r7
   21c42:	d9f4      	bls.n	21c2e <_printf_i+0x11a>
   21c44:	2b08      	cmp	r3, #8
   21c46:	d10b      	bne.n	21c60 <_printf_i+0x14c>
   21c48:	6823      	ldr	r3, [r4, #0]
   21c4a:	07df      	lsls	r7, r3, #31
   21c4c:	d508      	bpl.n	21c60 <_printf_i+0x14c>
   21c4e:	6923      	ldr	r3, [r4, #16]
   21c50:	6861      	ldr	r1, [r4, #4]
   21c52:	4299      	cmp	r1, r3
   21c54:	bfde      	ittt	le
   21c56:	2330      	movle	r3, #48	; 0x30
   21c58:	f806 3c01 	strble.w	r3, [r6, #-1]
   21c5c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   21c60:	1b92      	subs	r2, r2, r6
   21c62:	6122      	str	r2, [r4, #16]
   21c64:	464b      	mov	r3, r9
   21c66:	aa03      	add	r2, sp, #12
   21c68:	4621      	mov	r1, r4
   21c6a:	4640      	mov	r0, r8
   21c6c:	f8cd a000 	str.w	sl, [sp]
   21c70:	f007 fd0a 	bl	29688 <_printf_common>
   21c74:	3001      	adds	r0, #1
   21c76:	d14c      	bne.n	21d12 <_printf_i+0x1fe>
   21c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21c7c:	b004      	add	sp, #16
   21c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21c82:	4835      	ldr	r0, [pc, #212]	; (21d58 <_printf_i+0x244>)
   21c84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   21c88:	6823      	ldr	r3, [r4, #0]
   21c8a:	680e      	ldr	r6, [r1, #0]
   21c8c:	061f      	lsls	r7, r3, #24
   21c8e:	f856 5b04 	ldr.w	r5, [r6], #4
   21c92:	600e      	str	r6, [r1, #0]
   21c94:	d514      	bpl.n	21cc0 <_printf_i+0x1ac>
   21c96:	07d9      	lsls	r1, r3, #31
   21c98:	bf44      	itt	mi
   21c9a:	f043 0320 	orrmi.w	r3, r3, #32
   21c9e:	6023      	strmi	r3, [r4, #0]
   21ca0:	b91d      	cbnz	r5, 21caa <_printf_i+0x196>
   21ca2:	6823      	ldr	r3, [r4, #0]
   21ca4:	f023 0320 	bic.w	r3, r3, #32
   21ca8:	6023      	str	r3, [r4, #0]
   21caa:	2310      	movs	r3, #16
   21cac:	e7b0      	b.n	21c10 <_printf_i+0xfc>
   21cae:	6823      	ldr	r3, [r4, #0]
   21cb0:	f043 0320 	orr.w	r3, r3, #32
   21cb4:	6023      	str	r3, [r4, #0]
   21cb6:	2378      	movs	r3, #120	; 0x78
   21cb8:	4828      	ldr	r0, [pc, #160]	; (21d5c <_printf_i+0x248>)
   21cba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   21cbe:	e7e3      	b.n	21c88 <_printf_i+0x174>
   21cc0:	065e      	lsls	r6, r3, #25
   21cc2:	bf48      	it	mi
   21cc4:	b2ad      	uxthmi	r5, r5
   21cc6:	e7e6      	b.n	21c96 <_printf_i+0x182>
   21cc8:	4616      	mov	r6, r2
   21cca:	e7bb      	b.n	21c44 <_printf_i+0x130>
   21ccc:	680b      	ldr	r3, [r1, #0]
   21cce:	6826      	ldr	r6, [r4, #0]
   21cd0:	1d1d      	adds	r5, r3, #4
   21cd2:	6960      	ldr	r0, [r4, #20]
   21cd4:	600d      	str	r5, [r1, #0]
   21cd6:	0635      	lsls	r5, r6, #24
   21cd8:	681b      	ldr	r3, [r3, #0]
   21cda:	d501      	bpl.n	21ce0 <_printf_i+0x1cc>
   21cdc:	6018      	str	r0, [r3, #0]
   21cde:	e002      	b.n	21ce6 <_printf_i+0x1d2>
   21ce0:	0671      	lsls	r1, r6, #25
   21ce2:	d5fb      	bpl.n	21cdc <_printf_i+0x1c8>
   21ce4:	8018      	strh	r0, [r3, #0]
   21ce6:	2300      	movs	r3, #0
   21ce8:	4616      	mov	r6, r2
   21cea:	6123      	str	r3, [r4, #16]
   21cec:	e7ba      	b.n	21c64 <_printf_i+0x150>
   21cee:	680b      	ldr	r3, [r1, #0]
   21cf0:	1d1a      	adds	r2, r3, #4
   21cf2:	600a      	str	r2, [r1, #0]
   21cf4:	2100      	movs	r1, #0
   21cf6:	681e      	ldr	r6, [r3, #0]
   21cf8:	6862      	ldr	r2, [r4, #4]
   21cfa:	4630      	mov	r0, r6
   21cfc:	f007 fb9d 	bl	2943a <memchr>
   21d00:	b108      	cbz	r0, 21d06 <_printf_i+0x1f2>
   21d02:	1b80      	subs	r0, r0, r6
   21d04:	6060      	str	r0, [r4, #4]
   21d06:	6863      	ldr	r3, [r4, #4]
   21d08:	6123      	str	r3, [r4, #16]
   21d0a:	2300      	movs	r3, #0
   21d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   21d10:	e7a8      	b.n	21c64 <_printf_i+0x150>
   21d12:	6923      	ldr	r3, [r4, #16]
   21d14:	4632      	mov	r2, r6
   21d16:	4649      	mov	r1, r9
   21d18:	4640      	mov	r0, r8
   21d1a:	47d0      	blx	sl
   21d1c:	3001      	adds	r0, #1
   21d1e:	d0ab      	beq.n	21c78 <_printf_i+0x164>
   21d20:	6823      	ldr	r3, [r4, #0]
   21d22:	079b      	lsls	r3, r3, #30
   21d24:	d413      	bmi.n	21d4e <_printf_i+0x23a>
   21d26:	68e0      	ldr	r0, [r4, #12]
   21d28:	9b03      	ldr	r3, [sp, #12]
   21d2a:	4298      	cmp	r0, r3
   21d2c:	bfb8      	it	lt
   21d2e:	4618      	movlt	r0, r3
   21d30:	e7a4      	b.n	21c7c <_printf_i+0x168>
   21d32:	2301      	movs	r3, #1
   21d34:	4632      	mov	r2, r6
   21d36:	4649      	mov	r1, r9
   21d38:	4640      	mov	r0, r8
   21d3a:	47d0      	blx	sl
   21d3c:	3001      	adds	r0, #1
   21d3e:	d09b      	beq.n	21c78 <_printf_i+0x164>
   21d40:	3501      	adds	r5, #1
   21d42:	68e3      	ldr	r3, [r4, #12]
   21d44:	9903      	ldr	r1, [sp, #12]
   21d46:	1a5b      	subs	r3, r3, r1
   21d48:	42ab      	cmp	r3, r5
   21d4a:	dcf2      	bgt.n	21d32 <_printf_i+0x21e>
   21d4c:	e7eb      	b.n	21d26 <_printf_i+0x212>
   21d4e:	2500      	movs	r5, #0
   21d50:	f104 0619 	add.w	r6, r4, #25
   21d54:	e7f5      	b.n	21d42 <_printf_i+0x22e>
   21d56:	bf00      	nop
   21d58:	0002d21b 	.word	0x0002d21b
   21d5c:	0002d22c 	.word	0x0002d22c

00021d60 <realloc>:
   21d60:	4b02      	ldr	r3, [pc, #8]	; (21d6c <realloc+0xc>)
   21d62:	460a      	mov	r2, r1
   21d64:	4601      	mov	r1, r0
   21d66:	6818      	ldr	r0, [r3, #0]
   21d68:	f007 bfb7 	b.w	29cda <_realloc_r>
   21d6c:	200205d0 	.word	0x200205d0

00021d70 <_sbrk_r>:
   21d70:	b538      	push	{r3, r4, r5, lr}
   21d72:	2300      	movs	r3, #0
   21d74:	4d05      	ldr	r5, [pc, #20]	; (21d8c <_sbrk_r+0x1c>)
   21d76:	4604      	mov	r4, r0
   21d78:	4608      	mov	r0, r1
   21d7a:	602b      	str	r3, [r5, #0]
   21d7c:	f7ef fdc8 	bl	11910 <_sbrk>
   21d80:	1c43      	adds	r3, r0, #1
   21d82:	d102      	bne.n	21d8a <_sbrk_r+0x1a>
   21d84:	682b      	ldr	r3, [r5, #0]
   21d86:	b103      	cbz	r3, 21d8a <_sbrk_r+0x1a>
   21d88:	6023      	str	r3, [r4, #0]
   21d8a:	bd38      	pop	{r3, r4, r5, pc}
   21d8c:	2002b0f8 	.word	0x2002b0f8

00021d90 <sniprintf>:
   21d90:	b40c      	push	{r2, r3}
   21d92:	4b18      	ldr	r3, [pc, #96]	; (21df4 <sniprintf+0x64>)
   21d94:	b530      	push	{r4, r5, lr}
   21d96:	1e0c      	subs	r4, r1, #0
   21d98:	b09d      	sub	sp, #116	; 0x74
   21d9a:	681d      	ldr	r5, [r3, #0]
   21d9c:	da08      	bge.n	21db0 <sniprintf+0x20>
   21d9e:	238b      	movs	r3, #139	; 0x8b
   21da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21da4:	602b      	str	r3, [r5, #0]
   21da6:	b01d      	add	sp, #116	; 0x74
   21da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   21dac:	b002      	add	sp, #8
   21dae:	4770      	bx	lr
   21db0:	f44f 7302 	mov.w	r3, #520	; 0x208
   21db4:	9002      	str	r0, [sp, #8]
   21db6:	9006      	str	r0, [sp, #24]
   21db8:	a902      	add	r1, sp, #8
   21dba:	f8ad 3014 	strh.w	r3, [sp, #20]
   21dbe:	bf14      	ite	ne
   21dc0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   21dc4:	4623      	moveq	r3, r4
   21dc6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   21dc8:	4628      	mov	r0, r5
   21dca:	9304      	str	r3, [sp, #16]
   21dcc:	9307      	str	r3, [sp, #28]
   21dce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21dd2:	f8ad 3016 	strh.w	r3, [sp, #22]
   21dd6:	ab21      	add	r3, sp, #132	; 0x84
   21dd8:	9301      	str	r3, [sp, #4]
   21dda:	f001 fa2d 	bl	23238 <_svfiprintf_r>
   21dde:	1c43      	adds	r3, r0, #1
   21de0:	bfbc      	itt	lt
   21de2:	238b      	movlt	r3, #139	; 0x8b
   21de4:	602b      	strlt	r3, [r5, #0]
   21de6:	2c00      	cmp	r4, #0
   21de8:	d0dd      	beq.n	21da6 <sniprintf+0x16>
   21dea:	9b02      	ldr	r3, [sp, #8]
   21dec:	2200      	movs	r2, #0
   21dee:	701a      	strb	r2, [r3, #0]
   21df0:	e7d9      	b.n	21da6 <sniprintf+0x16>
   21df2:	bf00      	nop
   21df4:	200205d0 	.word	0x200205d0

00021df8 <siscanf>:
   21df8:	b40e      	push	{r1, r2, r3}
   21dfa:	b510      	push	{r4, lr}
   21dfc:	b09f      	sub	sp, #124	; 0x7c
   21dfe:	f44f 7101 	mov.w	r1, #516	; 0x204
   21e02:	ac21      	add	r4, sp, #132	; 0x84
   21e04:	f8ad 101c 	strh.w	r1, [sp, #28]
   21e08:	9004      	str	r0, [sp, #16]
   21e0a:	f854 2b04 	ldr.w	r2, [r4], #4
   21e0e:	9008      	str	r0, [sp, #32]
   21e10:	9201      	str	r2, [sp, #4]
   21e12:	f7eb f891 	bl	cf38 <strlen>
   21e16:	4b0c      	ldr	r3, [pc, #48]	; (21e48 <siscanf+0x50>)
   21e18:	a904      	add	r1, sp, #16
   21e1a:	9005      	str	r0, [sp, #20]
   21e1c:	930d      	str	r3, [sp, #52]	; 0x34
   21e1e:	2300      	movs	r3, #0
   21e20:	9009      	str	r0, [sp, #36]	; 0x24
   21e22:	9311      	str	r3, [sp, #68]	; 0x44
   21e24:	9316      	str	r3, [sp, #88]	; 0x58
   21e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21e2a:	4808      	ldr	r0, [pc, #32]	; (21e4c <siscanf+0x54>)
   21e2c:	f8ad 301e 	strh.w	r3, [sp, #30]
   21e30:	4623      	mov	r3, r4
   21e32:	9a01      	ldr	r2, [sp, #4]
   21e34:	6800      	ldr	r0, [r0, #0]
   21e36:	9403      	str	r4, [sp, #12]
   21e38:	f001 fafe 	bl	23438 <__ssvfiscanf_r>
   21e3c:	b01f      	add	sp, #124	; 0x7c
   21e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21e42:	b003      	add	sp, #12
   21e44:	4770      	bx	lr
   21e46:	bf00      	nop
   21e48:	000297bf 	.word	0x000297bf
   21e4c:	200205d0 	.word	0x200205d0

00021e50 <strdup>:
   21e50:	4b02      	ldr	r3, [pc, #8]	; (21e5c <strdup+0xc>)
   21e52:	4601      	mov	r1, r0
   21e54:	6818      	ldr	r0, [r3, #0]
   21e56:	f007 bcfb 	b.w	29850 <_strdup_r>
   21e5a:	bf00      	nop
   21e5c:	200205d0 	.word	0x200205d0

00021e60 <strtok>:
   21e60:	4b16      	ldr	r3, [pc, #88]	; (21ebc <_flash_used+0x28>)
   21e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21e64:	681e      	ldr	r6, [r3, #0]
   21e66:	4605      	mov	r5, r0
   21e68:	6db4      	ldr	r4, [r6, #88]	; 0x58
   21e6a:	b9fc      	cbnz	r4, 21eac <_flash_used+0x18>
   21e6c:	2050      	movs	r0, #80	; 0x50
   21e6e:	9101      	str	r1, [sp, #4]
   21e70:	f7fe ffb0 	bl	20dd4 <malloc>
   21e74:	9901      	ldr	r1, [sp, #4]
   21e76:	4602      	mov	r2, r0
   21e78:	65b0      	str	r0, [r6, #88]	; 0x58
   21e7a:	b920      	cbnz	r0, 21e86 <strtok+0x26>
   21e7c:	4b10      	ldr	r3, [pc, #64]	; (21ec0 <_flash_used+0x2c>)
   21e7e:	2157      	movs	r1, #87	; 0x57
   21e80:	4810      	ldr	r0, [pc, #64]	; (21ec4 <_flash_used+0x30>)
   21e82:	f7fe ff77 	bl	20d74 <__assert_func>
   21e86:	e9c0 4400 	strd	r4, r4, [r0]
   21e8a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   21e8e:	e9c0 4404 	strd	r4, r4, [r0, #16]
   21e92:	6184      	str	r4, [r0, #24]
   21e94:	7704      	strb	r4, [r0, #28]
   21e96:	6244      	str	r4, [r0, #36]	; 0x24
   21e98:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   21e9c:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   21ea0:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   21ea4:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   21ea8:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   21eac:	2301      	movs	r3, #1
   21eae:	6db2      	ldr	r2, [r6, #88]	; 0x58
   21eb0:	4628      	mov	r0, r5
   21eb2:	b002      	add	sp, #8
   21eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21eb8:	f007 bd1b 	b.w	298f2 <__strtok_r>
   21ebc:	200205d0 	.word	0x200205d0
   21ec0:	0002d23d 	.word	0x0002d23d
   21ec4:	0002d254 	.word	0x0002d254

00021ec8 <_strtol_l.isra.0>:
   21ec8:	2b01      	cmp	r3, #1
   21eca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21ece:	d001      	beq.n	21ed4 <_strtol_l.isra.0+0xc>
   21ed0:	2b24      	cmp	r3, #36	; 0x24
   21ed2:	d906      	bls.n	21ee2 <_strtol_l.isra.0+0x1a>
   21ed4:	f002 ff1c 	bl	24d10 <__errno>
   21ed8:	2316      	movs	r3, #22
   21eda:	6003      	str	r3, [r0, #0]
   21edc:	2000      	movs	r0, #0
   21ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21ee2:	468e      	mov	lr, r1
   21ee4:	4f38      	ldr	r7, [pc, #224]	; (21fc8 <_strtol_l.isra.0+0x100>)
   21ee6:	4676      	mov	r6, lr
   21ee8:	f81e 4b01 	ldrb.w	r4, [lr], #1
   21eec:	5de5      	ldrb	r5, [r4, r7]
   21eee:	f015 0508 	ands.w	r5, r5, #8
   21ef2:	d1f8      	bne.n	21ee6 <_strtol_l.isra.0+0x1e>
   21ef4:	2c2d      	cmp	r4, #45	; 0x2d
   21ef6:	d134      	bne.n	21f62 <_strtol_l.isra.0+0x9a>
   21ef8:	f89e 4000 	ldrb.w	r4, [lr]
   21efc:	f04f 0801 	mov.w	r8, #1
   21f00:	f106 0e02 	add.w	lr, r6, #2
   21f04:	2b00      	cmp	r3, #0
   21f06:	d05b      	beq.n	21fc0 <_strtol_l.isra.0+0xf8>
   21f08:	2b10      	cmp	r3, #16
   21f0a:	d10c      	bne.n	21f26 <_strtol_l.isra.0+0x5e>
   21f0c:	2c30      	cmp	r4, #48	; 0x30
   21f0e:	d10a      	bne.n	21f26 <_strtol_l.isra.0+0x5e>
   21f10:	f89e 4000 	ldrb.w	r4, [lr]
   21f14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   21f18:	2c58      	cmp	r4, #88	; 0x58
   21f1a:	d14c      	bne.n	21fb6 <_strtol_l.isra.0+0xee>
   21f1c:	f89e 4001 	ldrb.w	r4, [lr, #1]
   21f20:	2310      	movs	r3, #16
   21f22:	f10e 0e02 	add.w	lr, lr, #2
   21f26:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
   21f2a:	2600      	movs	r6, #0
   21f2c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   21f30:	4635      	mov	r5, r6
   21f32:	fbbc f9f3 	udiv	r9, ip, r3
   21f36:	fb03 ca19 	mls	sl, r3, r9, ip
   21f3a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   21f3e:	2f09      	cmp	r7, #9
   21f40:	d817      	bhi.n	21f72 <_strtol_l.isra.0+0xaa>
   21f42:	463c      	mov	r4, r7
   21f44:	42a3      	cmp	r3, r4
   21f46:	dd23      	ble.n	21f90 <_strtol_l.isra.0+0xc8>
   21f48:	2e00      	cmp	r6, #0
   21f4a:	db1e      	blt.n	21f8a <_strtol_l.isra.0+0xc2>
   21f4c:	45a9      	cmp	r9, r5
   21f4e:	d31c      	bcc.n	21f8a <_strtol_l.isra.0+0xc2>
   21f50:	d101      	bne.n	21f56 <_strtol_l.isra.0+0x8e>
   21f52:	45a2      	cmp	sl, r4
   21f54:	db19      	blt.n	21f8a <_strtol_l.isra.0+0xc2>
   21f56:	fb05 4503 	mla	r5, r5, r3, r4
   21f5a:	2601      	movs	r6, #1
   21f5c:	f81e 4b01 	ldrb.w	r4, [lr], #1
   21f60:	e7eb      	b.n	21f3a <_strtol_l.isra.0+0x72>
   21f62:	2c2b      	cmp	r4, #43	; 0x2b
   21f64:	46a8      	mov	r8, r5
   21f66:	bf04      	itt	eq
   21f68:	f89e 4000 	ldrbeq.w	r4, [lr]
   21f6c:	f106 0e02 	addeq.w	lr, r6, #2
   21f70:	e7c8      	b.n	21f04 <_strtol_l.isra.0+0x3c>
   21f72:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   21f76:	2f19      	cmp	r7, #25
   21f78:	d801      	bhi.n	21f7e <_strtol_l.isra.0+0xb6>
   21f7a:	3c37      	subs	r4, #55	; 0x37
   21f7c:	e7e2      	b.n	21f44 <_strtol_l.isra.0+0x7c>
   21f7e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   21f82:	2f19      	cmp	r7, #25
   21f84:	d804      	bhi.n	21f90 <_strtol_l.isra.0+0xc8>
   21f86:	3c57      	subs	r4, #87	; 0x57
   21f88:	e7dc      	b.n	21f44 <_strtol_l.isra.0+0x7c>
   21f8a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   21f8e:	e7e5      	b.n	21f5c <_strtol_l.isra.0+0x94>
   21f90:	2e00      	cmp	r6, #0
   21f92:	da05      	bge.n	21fa0 <_strtol_l.isra.0+0xd8>
   21f94:	2322      	movs	r3, #34	; 0x22
   21f96:	4665      	mov	r5, ip
   21f98:	6003      	str	r3, [r0, #0]
   21f9a:	b942      	cbnz	r2, 21fae <_strtol_l.isra.0+0xe6>
   21f9c:	4628      	mov	r0, r5
   21f9e:	e79e      	b.n	21ede <_strtol_l.isra.0+0x16>
   21fa0:	f1b8 0f00 	cmp.w	r8, #0
   21fa4:	d000      	beq.n	21fa8 <_strtol_l.isra.0+0xe0>
   21fa6:	426d      	negs	r5, r5
   21fa8:	2a00      	cmp	r2, #0
   21faa:	d0f7      	beq.n	21f9c <_strtol_l.isra.0+0xd4>
   21fac:	b10e      	cbz	r6, 21fb2 <_strtol_l.isra.0+0xea>
   21fae:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   21fb2:	6011      	str	r1, [r2, #0]
   21fb4:	e7f2      	b.n	21f9c <_strtol_l.isra.0+0xd4>
   21fb6:	2430      	movs	r4, #48	; 0x30
   21fb8:	2b00      	cmp	r3, #0
   21fba:	d1b4      	bne.n	21f26 <_strtol_l.isra.0+0x5e>
   21fbc:	2308      	movs	r3, #8
   21fbe:	e7b2      	b.n	21f26 <_strtol_l.isra.0+0x5e>
   21fc0:	2c30      	cmp	r4, #48	; 0x30
   21fc2:	d0a5      	beq.n	21f10 <_strtol_l.isra.0+0x48>
   21fc4:	230a      	movs	r3, #10
   21fc6:	e7ae      	b.n	21f26 <_strtol_l.isra.0+0x5e>
   21fc8:	0002d0fe 	.word	0x0002d0fe

00021fcc <strtol>:
   21fcc:	4613      	mov	r3, r2
   21fce:	460a      	mov	r2, r1
   21fd0:	4601      	mov	r1, r0
   21fd2:	4802      	ldr	r0, [pc, #8]	; (21fdc <strtol+0x10>)
   21fd4:	6800      	ldr	r0, [r0, #0]
   21fd6:	f7ff bf77 	b.w	21ec8 <_strtol_l.isra.0>
   21fda:	bf00      	nop
   21fdc:	200205d0 	.word	0x200205d0

00021fe0 <_strtoul_l.isra.0>:
   21fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21fe4:	468c      	mov	ip, r1
   21fe6:	4686      	mov	lr, r0
   21fe8:	4e39      	ldr	r6, [pc, #228]	; (220d0 <_strtoul_l.isra.0+0xf0>)
   21fea:	4660      	mov	r0, ip
   21fec:	f81c 4b01 	ldrb.w	r4, [ip], #1
   21ff0:	5da5      	ldrb	r5, [r4, r6]
   21ff2:	f015 0508 	ands.w	r5, r5, #8
   21ff6:	d1f8      	bne.n	21fea <_strtoul_l.isra.0+0xa>
   21ff8:	2c2d      	cmp	r4, #45	; 0x2d
   21ffa:	d134      	bne.n	22066 <_strtoul_l.isra.0+0x86>
   21ffc:	f89c 4000 	ldrb.w	r4, [ip]
   22000:	f04f 0801 	mov.w	r8, #1
   22004:	f100 0c02 	add.w	ip, r0, #2
   22008:	2b00      	cmp	r3, #0
   2200a:	d05d      	beq.n	220c8 <_strtoul_l.isra.0+0xe8>
   2200c:	2b10      	cmp	r3, #16
   2200e:	d10c      	bne.n	2202a <_strtoul_l.isra.0+0x4a>
   22010:	2c30      	cmp	r4, #48	; 0x30
   22012:	d10a      	bne.n	2202a <_strtoul_l.isra.0+0x4a>
   22014:	f89c 0000 	ldrb.w	r0, [ip]
   22018:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2201c:	2858      	cmp	r0, #88	; 0x58
   2201e:	d14e      	bne.n	220be <_strtoul_l.isra.0+0xde>
   22020:	f89c 4001 	ldrb.w	r4, [ip, #1]
   22024:	2310      	movs	r3, #16
   22026:	f10c 0c02 	add.w	ip, ip, #2
   2202a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2202e:	2500      	movs	r5, #0
   22030:	fbb7 f7f3 	udiv	r7, r7, r3
   22034:	fb03 f907 	mul.w	r9, r3, r7
   22038:	4628      	mov	r0, r5
   2203a:	ea6f 0909 	mvn.w	r9, r9
   2203e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   22042:	2e09      	cmp	r6, #9
   22044:	d817      	bhi.n	22076 <_strtoul_l.isra.0+0x96>
   22046:	4634      	mov	r4, r6
   22048:	42a3      	cmp	r3, r4
   2204a:	dd23      	ble.n	22094 <_strtoul_l.isra.0+0xb4>
   2204c:	2d00      	cmp	r5, #0
   2204e:	db1e      	blt.n	2208e <_strtoul_l.isra.0+0xae>
   22050:	4287      	cmp	r7, r0
   22052:	d31c      	bcc.n	2208e <_strtoul_l.isra.0+0xae>
   22054:	d101      	bne.n	2205a <_strtoul_l.isra.0+0x7a>
   22056:	45a1      	cmp	r9, r4
   22058:	db19      	blt.n	2208e <_strtoul_l.isra.0+0xae>
   2205a:	fb00 4003 	mla	r0, r0, r3, r4
   2205e:	2501      	movs	r5, #1
   22060:	f81c 4b01 	ldrb.w	r4, [ip], #1
   22064:	e7eb      	b.n	2203e <_strtoul_l.isra.0+0x5e>
   22066:	2c2b      	cmp	r4, #43	; 0x2b
   22068:	46a8      	mov	r8, r5
   2206a:	bf04      	itt	eq
   2206c:	f89c 4000 	ldrbeq.w	r4, [ip]
   22070:	f100 0c02 	addeq.w	ip, r0, #2
   22074:	e7c8      	b.n	22008 <_strtoul_l.isra.0+0x28>
   22076:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   2207a:	2e19      	cmp	r6, #25
   2207c:	d801      	bhi.n	22082 <_strtoul_l.isra.0+0xa2>
   2207e:	3c37      	subs	r4, #55	; 0x37
   22080:	e7e2      	b.n	22048 <_strtoul_l.isra.0+0x68>
   22082:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   22086:	2e19      	cmp	r6, #25
   22088:	d804      	bhi.n	22094 <_strtoul_l.isra.0+0xb4>
   2208a:	3c57      	subs	r4, #87	; 0x57
   2208c:	e7dc      	b.n	22048 <_strtoul_l.isra.0+0x68>
   2208e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   22092:	e7e5      	b.n	22060 <_strtoul_l.isra.0+0x80>
   22094:	2d00      	cmp	r5, #0
   22096:	da07      	bge.n	220a8 <_strtoul_l.isra.0+0xc8>
   22098:	2322      	movs	r3, #34	; 0x22
   2209a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2209e:	f8ce 3000 	str.w	r3, [lr]
   220a2:	b942      	cbnz	r2, 220b6 <_strtoul_l.isra.0+0xd6>
   220a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   220a8:	f1b8 0f00 	cmp.w	r8, #0
   220ac:	d000      	beq.n	220b0 <_strtoul_l.isra.0+0xd0>
   220ae:	4240      	negs	r0, r0
   220b0:	2a00      	cmp	r2, #0
   220b2:	d0f7      	beq.n	220a4 <_strtoul_l.isra.0+0xc4>
   220b4:	b10d      	cbz	r5, 220ba <_strtoul_l.isra.0+0xda>
   220b6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   220ba:	6011      	str	r1, [r2, #0]
   220bc:	e7f2      	b.n	220a4 <_strtoul_l.isra.0+0xc4>
   220be:	2430      	movs	r4, #48	; 0x30
   220c0:	2b00      	cmp	r3, #0
   220c2:	d1b2      	bne.n	2202a <_strtoul_l.isra.0+0x4a>
   220c4:	2308      	movs	r3, #8
   220c6:	e7b0      	b.n	2202a <_strtoul_l.isra.0+0x4a>
   220c8:	2c30      	cmp	r4, #48	; 0x30
   220ca:	d0a3      	beq.n	22014 <_strtoul_l.isra.0+0x34>
   220cc:	230a      	movs	r3, #10
   220ce:	e7ac      	b.n	2202a <_strtoul_l.isra.0+0x4a>
   220d0:	0002d0fe 	.word	0x0002d0fe

000220d4 <strtoul>:
   220d4:	4613      	mov	r3, r2
   220d6:	460a      	mov	r2, r1
   220d8:	4601      	mov	r1, r0
   220da:	4802      	ldr	r0, [pc, #8]	; (220e4 <strtoul+0x10>)
   220dc:	6800      	ldr	r0, [r0, #0]
   220de:	f7ff bf7f 	b.w	21fe0 <_strtoul_l.isra.0>
   220e2:	bf00      	nop
   220e4:	200205d0 	.word	0x200205d0

000220e8 <__tzcalc_limits>:
   220e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   220ec:	4680      	mov	r8, r0
   220ee:	f000 fd23 	bl	22b38 <__gettzinfo>
   220f2:	f240 73b1 	movw	r3, #1969	; 0x7b1
   220f6:	4598      	cmp	r8, r3
   220f8:	f340 8098 	ble.w	2222c <__tzcalc_limits+0x144>
   220fc:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   22100:	f240 126d 	movw	r2, #365	; 0x16d
   22104:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
   22108:	4604      	mov	r4, r0
   2210a:	4443      	add	r3, r8
   2210c:	f100 0b50 	add.w	fp, r0, #80	; 0x50
   22110:	f04f 0e07 	mov.w	lr, #7
   22114:	f8c0 8004 	str.w	r8, [r0, #4]
   22118:	109b      	asrs	r3, r3, #2
   2211a:	fb02 3505 	mla	r5, r2, r5, r3
   2211e:	f06f 0263 	mvn.w	r2, #99	; 0x63
   22122:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
   22126:	fb93 f3f2 	sdiv	r3, r3, r2
   2212a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   2212e:	441d      	add	r5, r3
   22130:	f44f 73c8 	mov.w	r3, #400	; 0x190
   22134:	4442      	add	r2, r8
   22136:	fbb2 f2f3 	udiv	r2, r2, r3
   2213a:	fb98 f7f3 	sdiv	r7, r8, r3
   2213e:	4415      	add	r5, r2
   22140:	2264      	movs	r2, #100	; 0x64
   22142:	fb03 8717 	mls	r7, r3, r7, r8
   22146:	f008 0303 	and.w	r3, r8, #3
   2214a:	fb98 f6f2 	sdiv	r6, r8, r2
   2214e:	fab7 fc87 	clz	ip, r7
   22152:	fb02 8616 	mls	r6, r2, r6, r8
   22156:	9300      	str	r3, [sp, #0]
   22158:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   2215c:	7a22      	ldrb	r2, [r4, #8]
   2215e:	6963      	ldr	r3, [r4, #20]
   22160:	2a4a      	cmp	r2, #74	; 0x4a
   22162:	d128      	bne.n	221b6 <__tzcalc_limits+0xce>
   22164:	9900      	ldr	r1, [sp, #0]
   22166:	18ea      	adds	r2, r5, r3
   22168:	b901      	cbnz	r1, 2216c <__tzcalc_limits+0x84>
   2216a:	b906      	cbnz	r6, 2216e <__tzcalc_limits+0x86>
   2216c:	bb0f      	cbnz	r7, 221b2 <__tzcalc_limits+0xca>
   2216e:	2b3b      	cmp	r3, #59	; 0x3b
   22170:	bfd4      	ite	le
   22172:	2300      	movle	r3, #0
   22174:	2301      	movgt	r3, #1
   22176:	4413      	add	r3, r2
   22178:	1e5a      	subs	r2, r3, #1
   2217a:	69a3      	ldr	r3, [r4, #24]
   2217c:	3428      	adds	r4, #40	; 0x28
   2217e:	492c      	ldr	r1, [pc, #176]	; (22230 <__tzcalc_limits+0x148>)
   22180:	fb01 3202 	mla	r2, r1, r2, r3
   22184:	6823      	ldr	r3, [r4, #0]
   22186:	4413      	add	r3, r2
   22188:	461a      	mov	r2, r3
   2218a:	17db      	asrs	r3, r3, #31
   2218c:	e944 2302 	strd	r2, r3, [r4, #-8]
   22190:	45a3      	cmp	fp, r4
   22192:	d1e3      	bne.n	2215c <__tzcalc_limits+0x74>
   22194:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
   22198:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
   2219c:	4294      	cmp	r4, r2
   2219e:	eb75 0303 	sbcs.w	r3, r5, r3
   221a2:	bfb4      	ite	lt
   221a4:	2301      	movlt	r3, #1
   221a6:	2300      	movge	r3, #0
   221a8:	6003      	str	r3, [r0, #0]
   221aa:	2001      	movs	r0, #1
   221ac:	b003      	add	sp, #12
   221ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221b2:	2300      	movs	r3, #0
   221b4:	e7df      	b.n	22176 <__tzcalc_limits+0x8e>
   221b6:	2a44      	cmp	r2, #68	; 0x44
   221b8:	d101      	bne.n	221be <__tzcalc_limits+0xd6>
   221ba:	18ea      	adds	r2, r5, r3
   221bc:	e7dd      	b.n	2217a <__tzcalc_limits+0x92>
   221be:	9a00      	ldr	r2, [sp, #0]
   221c0:	bb72      	cbnz	r2, 22220 <__tzcalc_limits+0x138>
   221c2:	2e00      	cmp	r6, #0
   221c4:	bf0c      	ite	eq
   221c6:	46e0      	moveq	r8, ip
   221c8:	f04f 0801 	movne.w	r8, #1
   221cc:	f04f 0a30 	mov.w	sl, #48	; 0x30
   221d0:	4918      	ldr	r1, [pc, #96]	; (22234 <__tzcalc_limits+0x14c>)
   221d2:	68e2      	ldr	r2, [r4, #12]
   221d4:	f04f 0900 	mov.w	r9, #0
   221d8:	fb0a 1808 	mla	r8, sl, r8, r1
   221dc:	9201      	str	r2, [sp, #4]
   221de:	462a      	mov	r2, r5
   221e0:	f1a8 0804 	sub.w	r8, r8, #4
   221e4:	f109 0901 	add.w	r9, r9, #1
   221e8:	9901      	ldr	r1, [sp, #4]
   221ea:	4549      	cmp	r1, r9
   221ec:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
   221f0:	dc18      	bgt.n	22224 <__tzcalc_limits+0x13c>
   221f2:	f102 0804 	add.w	r8, r2, #4
   221f6:	fb98 f9fe 	sdiv	r9, r8, lr
   221fa:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
   221fe:	eba8 0909 	sub.w	r9, r8, r9
   22202:	ebb3 0909 	subs.w	r9, r3, r9
   22206:	6923      	ldr	r3, [r4, #16]
   22208:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2220c:	bf48      	it	mi
   2220e:	f109 0907 	addmi.w	r9, r9, #7
   22212:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   22216:	444b      	add	r3, r9
   22218:	4553      	cmp	r3, sl
   2221a:	da05      	bge.n	22228 <__tzcalc_limits+0x140>
   2221c:	441a      	add	r2, r3
   2221e:	e7ac      	b.n	2217a <__tzcalc_limits+0x92>
   22220:	46e0      	mov	r8, ip
   22222:	e7d3      	b.n	221cc <__tzcalc_limits+0xe4>
   22224:	4452      	add	r2, sl
   22226:	e7dd      	b.n	221e4 <__tzcalc_limits+0xfc>
   22228:	3b07      	subs	r3, #7
   2222a:	e7f5      	b.n	22218 <__tzcalc_limits+0x130>
   2222c:	2000      	movs	r0, #0
   2222e:	e7bd      	b.n	221ac <__tzcalc_limits+0xc4>
   22230:	00015180 	.word	0x00015180
   22234:	0002acec 	.word	0x0002acec

00022238 <__tz_lock>:
   22238:	4801      	ldr	r0, [pc, #4]	; (22240 <__tz_lock+0x8>)
   2223a:	f007 bc99 	b.w	29b70 <__retarget_lock_acquire>
   2223e:	bf00      	nop
   22240:	2002b103 	.word	0x2002b103

00022244 <__tz_unlock>:
   22244:	4801      	ldr	r0, [pc, #4]	; (2224c <__tz_unlock+0x8>)
   22246:	f007 bc95 	b.w	29b74 <__retarget_lock_release>
   2224a:	bf00      	nop
   2224c:	2002b103 	.word	0x2002b103

00022250 <_tzset_unlocked>:
   22250:	4b01      	ldr	r3, [pc, #4]	; (22258 <_tzset_unlocked+0x8>)
   22252:	6818      	ldr	r0, [r3, #0]
   22254:	f000 b802 	b.w	2225c <_tzset_unlocked_r>
   22258:	200205d0 	.word	0x200205d0

0002225c <_tzset_unlocked_r>:
   2225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22260:	4607      	mov	r7, r0
   22262:	b08d      	sub	sp, #52	; 0x34
   22264:	f000 fc68 	bl	22b38 <__gettzinfo>
   22268:	49b0      	ldr	r1, [pc, #704]	; (2252c <_tzset_unlocked_r+0x2d0>)
   2226a:	4605      	mov	r5, r0
   2226c:	4638      	mov	r0, r7
   2226e:	f007 fc77 	bl	29b60 <_getenv_r>
   22272:	4eaf      	ldr	r6, [pc, #700]	; (22530 <_tzset_unlocked_r+0x2d4>)
   22274:	4604      	mov	r4, r0
   22276:	b970      	cbnz	r0, 22296 <_tzset_unlocked_r+0x3a>
   22278:	4bae      	ldr	r3, [pc, #696]	; (22534 <_tzset_unlocked_r+0x2d8>)
   2227a:	4aaf      	ldr	r2, [pc, #700]	; (22538 <_tzset_unlocked_r+0x2dc>)
   2227c:	6018      	str	r0, [r3, #0]
   2227e:	4baf      	ldr	r3, [pc, #700]	; (2253c <_tzset_unlocked_r+0x2e0>)
   22280:	6018      	str	r0, [r3, #0]
   22282:	4baf      	ldr	r3, [pc, #700]	; (22540 <_tzset_unlocked_r+0x2e4>)
   22284:	6830      	ldr	r0, [r6, #0]
   22286:	e9c3 2200 	strd	r2, r2, [r3]
   2228a:	f7fe fdab 	bl	20de4 <free>
   2228e:	6034      	str	r4, [r6, #0]
   22290:	b00d      	add	sp, #52	; 0x34
   22292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22296:	6831      	ldr	r1, [r6, #0]
   22298:	2900      	cmp	r1, #0
   2229a:	d15f      	bne.n	2235c <_tzset_unlocked_r+0x100>
   2229c:	6830      	ldr	r0, [r6, #0]
   2229e:	f7fe fda1 	bl	20de4 <free>
   222a2:	4620      	mov	r0, r4
   222a4:	f7ea fe48 	bl	cf38 <strlen>
   222a8:	1c41      	adds	r1, r0, #1
   222aa:	4638      	mov	r0, r7
   222ac:	f7ff f872 	bl	21394 <_malloc_r>
   222b0:	6030      	str	r0, [r6, #0]
   222b2:	2800      	cmp	r0, #0
   222b4:	d157      	bne.n	22366 <_tzset_unlocked_r+0x10a>
   222b6:	7823      	ldrb	r3, [r4, #0]
   222b8:	ae0a      	add	r6, sp, #40	; 0x28
   222ba:	4aa2      	ldr	r2, [pc, #648]	; (22544 <_tzset_unlocked_r+0x2e8>)
   222bc:	2b3a      	cmp	r3, #58	; 0x3a
   222be:	49a2      	ldr	r1, [pc, #648]	; (22548 <_tzset_unlocked_r+0x2ec>)
   222c0:	4633      	mov	r3, r6
   222c2:	bf08      	it	eq
   222c4:	3401      	addeq	r4, #1
   222c6:	4620      	mov	r0, r4
   222c8:	f7ff fd96 	bl	21df8 <siscanf>
   222cc:	2800      	cmp	r0, #0
   222ce:	dddf      	ble.n	22290 <_tzset_unlocked_r+0x34>
   222d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   222d2:	18e7      	adds	r7, r4, r3
   222d4:	5ce3      	ldrb	r3, [r4, r3]
   222d6:	2b2d      	cmp	r3, #45	; 0x2d
   222d8:	d149      	bne.n	2236e <_tzset_unlocked_r+0x112>
   222da:	3701      	adds	r7, #1
   222dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   222e0:	f10d 0a20 	add.w	sl, sp, #32
   222e4:	f10d 0b1e 	add.w	fp, sp, #30
   222e8:	f04f 0800 	mov.w	r8, #0
   222ec:	4633      	mov	r3, r6
   222ee:	aa07      	add	r2, sp, #28
   222f0:	4996      	ldr	r1, [pc, #600]	; (2254c <_tzset_unlocked_r+0x2f0>)
   222f2:	4638      	mov	r0, r7
   222f4:	9603      	str	r6, [sp, #12]
   222f6:	f8cd b000 	str.w	fp, [sp]
   222fa:	f8ad 801e 	strh.w	r8, [sp, #30]
   222fe:	f8ad 8020 	strh.w	r8, [sp, #32]
   22302:	e9cd 6a01 	strd	r6, sl, [sp, #4]
   22306:	f7ff fd77 	bl	21df8 <siscanf>
   2230a:	4540      	cmp	r0, r8
   2230c:	ddc0      	ble.n	22290 <_tzset_unlocked_r+0x34>
   2230e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   22312:	213c      	movs	r1, #60	; 0x3c
   22314:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   22318:	f8df 923c 	ldr.w	r9, [pc, #572]	; 22558 <_tzset_unlocked_r+0x2fc>
   2231c:	fb01 2203 	mla	r2, r1, r3, r2
   22320:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   22324:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   22328:	fb01 2303 	mla	r3, r1, r3, r2
   2232c:	464a      	mov	r2, r9
   2232e:	4986      	ldr	r1, [pc, #536]	; (22548 <_tzset_unlocked_r+0x2ec>)
   22330:	435c      	muls	r4, r3
   22332:	4b84      	ldr	r3, [pc, #528]	; (22544 <_tzset_unlocked_r+0x2e8>)
   22334:	62ac      	str	r4, [r5, #40]	; 0x28
   22336:	4c82      	ldr	r4, [pc, #520]	; (22540 <_tzset_unlocked_r+0x2e4>)
   22338:	6023      	str	r3, [r4, #0]
   2233a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2233c:	441f      	add	r7, r3
   2233e:	4633      	mov	r3, r6
   22340:	4638      	mov	r0, r7
   22342:	f7ff fd59 	bl	21df8 <siscanf>
   22346:	4540      	cmp	r0, r8
   22348:	dc17      	bgt.n	2237a <_tzset_unlocked_r+0x11e>
   2234a:	6823      	ldr	r3, [r4, #0]
   2234c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2234e:	6063      	str	r3, [r4, #4]
   22350:	4b78      	ldr	r3, [pc, #480]	; (22534 <_tzset_unlocked_r+0x2d8>)
   22352:	601a      	str	r2, [r3, #0]
   22354:	4b79      	ldr	r3, [pc, #484]	; (2253c <_tzset_unlocked_r+0x2e0>)
   22356:	f8c3 8000 	str.w	r8, [r3]
   2235a:	e799      	b.n	22290 <_tzset_unlocked_r+0x34>
   2235c:	f7ea fde2 	bl	cf24 <strcmp>
   22360:	2800      	cmp	r0, #0
   22362:	d19b      	bne.n	2229c <_tzset_unlocked_r+0x40>
   22364:	e794      	b.n	22290 <_tzset_unlocked_r+0x34>
   22366:	4621      	mov	r1, r4
   22368:	f007 fa6a 	bl	29840 <strcpy>
   2236c:	e7a3      	b.n	222b6 <_tzset_unlocked_r+0x5a>
   2236e:	2b2b      	cmp	r3, #43	; 0x2b
   22370:	f04f 0401 	mov.w	r4, #1
   22374:	bf08      	it	eq
   22376:	3701      	addeq	r7, #1
   22378:	e7b2      	b.n	222e0 <_tzset_unlocked_r+0x84>
   2237a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2237c:	f8c4 9004 	str.w	r9, [r4, #4]
   22380:	18fc      	adds	r4, r7, r3
   22382:	5cfb      	ldrb	r3, [r7, r3]
   22384:	2b2d      	cmp	r3, #45	; 0x2d
   22386:	f040 808c 	bne.w	224a2 <_tzset_unlocked_r+0x246>
   2238a:	3401      	adds	r4, #1
   2238c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   22390:	2300      	movs	r3, #0
   22392:	aa07      	add	r2, sp, #28
   22394:	496d      	ldr	r1, [pc, #436]	; (2254c <_tzset_unlocked_r+0x2f0>)
   22396:	4620      	mov	r0, r4
   22398:	f8ad 301c 	strh.w	r3, [sp, #28]
   2239c:	f8ad 301e 	strh.w	r3, [sp, #30]
   223a0:	f8ad 3020 	strh.w	r3, [sp, #32]
   223a4:	930a      	str	r3, [sp, #40]	; 0x28
   223a6:	4633      	mov	r3, r6
   223a8:	e9cd a602 	strd	sl, r6, [sp, #8]
   223ac:	e9cd b600 	strd	fp, r6, [sp]
   223b0:	f7ff fd22 	bl	21df8 <siscanf>
   223b4:	2800      	cmp	r0, #0
   223b6:	dc7a      	bgt.n	224ae <_tzset_unlocked_r+0x252>
   223b8:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   223ba:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
   223be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   223c0:	f04f 0900 	mov.w	r9, #0
   223c4:	652f      	str	r7, [r5, #80]	; 0x50
   223c6:	462f      	mov	r7, r5
   223c8:	441c      	add	r4, r3
   223ca:	7823      	ldrb	r3, [r4, #0]
   223cc:	2b2c      	cmp	r3, #44	; 0x2c
   223ce:	bf08      	it	eq
   223d0:	3401      	addeq	r4, #1
   223d2:	f894 8000 	ldrb.w	r8, [r4]
   223d6:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   223da:	d17a      	bne.n	224d2 <_tzset_unlocked_r+0x276>
   223dc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   223e0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   223e4:	495a      	ldr	r1, [pc, #360]	; (22550 <_tzset_unlocked_r+0x2f4>)
   223e6:	4620      	mov	r0, r4
   223e8:	9603      	str	r6, [sp, #12]
   223ea:	e9cd 6301 	strd	r6, r3, [sp, #4]
   223ee:	ab09      	add	r3, sp, #36	; 0x24
   223f0:	9300      	str	r3, [sp, #0]
   223f2:	4633      	mov	r3, r6
   223f4:	f7ff fd00 	bl	21df8 <siscanf>
   223f8:	2803      	cmp	r0, #3
   223fa:	f47f af49 	bne.w	22290 <_tzset_unlocked_r+0x34>
   223fe:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   22402:	1e4b      	subs	r3, r1, #1
   22404:	2b0b      	cmp	r3, #11
   22406:	f63f af43 	bhi.w	22290 <_tzset_unlocked_r+0x34>
   2240a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2240e:	1e53      	subs	r3, r2, #1
   22410:	2b04      	cmp	r3, #4
   22412:	f63f af3d 	bhi.w	22290 <_tzset_unlocked_r+0x34>
   22416:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   2241a:	2b06      	cmp	r3, #6
   2241c:	f63f af38 	bhi.w	22290 <_tzset_unlocked_r+0x34>
   22420:	f887 8008 	strb.w	r8, [r7, #8]
   22424:	617b      	str	r3, [r7, #20]
   22426:	e9c7 1203 	strd	r1, r2, [r7, #12]
   2242a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2242c:	eb04 0803 	add.w	r8, r4, r3
   22430:	2302      	movs	r3, #2
   22432:	f8ad 301c 	strh.w	r3, [sp, #28]
   22436:	2300      	movs	r3, #0
   22438:	f8ad 301e 	strh.w	r3, [sp, #30]
   2243c:	f8ad 3020 	strh.w	r3, [sp, #32]
   22440:	930a      	str	r3, [sp, #40]	; 0x28
   22442:	f898 3000 	ldrb.w	r3, [r8]
   22446:	2b2f      	cmp	r3, #47	; 0x2f
   22448:	d109      	bne.n	2245e <_tzset_unlocked_r+0x202>
   2244a:	4633      	mov	r3, r6
   2244c:	aa07      	add	r2, sp, #28
   2244e:	4941      	ldr	r1, [pc, #260]	; (22554 <_tzset_unlocked_r+0x2f8>)
   22450:	4640      	mov	r0, r8
   22452:	e9cd a602 	strd	sl, r6, [sp, #8]
   22456:	e9cd b600 	strd	fp, r6, [sp]
   2245a:	f7ff fccd 	bl	21df8 <siscanf>
   2245e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   22462:	213c      	movs	r1, #60	; 0x3c
   22464:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   22468:	3728      	adds	r7, #40	; 0x28
   2246a:	fb01 2203 	mla	r2, r1, r3, r2
   2246e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   22472:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   22476:	fb01 2303 	mla	r3, r1, r3, r2
   2247a:	f847 3c10 	str.w	r3, [r7, #-16]
   2247e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   22480:	4444      	add	r4, r8
   22482:	f1b9 0f00 	cmp.w	r9, #0
   22486:	d021      	beq.n	224cc <_tzset_unlocked_r+0x270>
   22488:	6868      	ldr	r0, [r5, #4]
   2248a:	f7ff fe2d 	bl	220e8 <__tzcalc_limits>
   2248e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   22490:	4b28      	ldr	r3, [pc, #160]	; (22534 <_tzset_unlocked_r+0x2d8>)
   22492:	601a      	str	r2, [r3, #0]
   22494:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   22496:	1a9b      	subs	r3, r3, r2
   22498:	4a28      	ldr	r2, [pc, #160]	; (2253c <_tzset_unlocked_r+0x2e0>)
   2249a:	bf18      	it	ne
   2249c:	2301      	movne	r3, #1
   2249e:	6013      	str	r3, [r2, #0]
   224a0:	e6f6      	b.n	22290 <_tzset_unlocked_r+0x34>
   224a2:	2b2b      	cmp	r3, #43	; 0x2b
   224a4:	f04f 0701 	mov.w	r7, #1
   224a8:	bf08      	it	eq
   224aa:	3401      	addeq	r4, #1
   224ac:	e770      	b.n	22390 <_tzset_unlocked_r+0x134>
   224ae:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   224b2:	213c      	movs	r1, #60	; 0x3c
   224b4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   224b8:	fb01 2203 	mla	r2, r1, r3, r2
   224bc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   224c0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   224c4:	fb01 2303 	mla	r3, r1, r3, r2
   224c8:	435f      	muls	r7, r3
   224ca:	e778      	b.n	223be <_tzset_unlocked_r+0x162>
   224cc:	f04f 0901 	mov.w	r9, #1
   224d0:	e77b      	b.n	223ca <_tzset_unlocked_r+0x16e>
   224d2:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   224d6:	f04f 020a 	mov.w	r2, #10
   224da:	a90b      	add	r1, sp, #44	; 0x2c
   224dc:	bf06      	itte	eq
   224de:	3401      	addeq	r4, #1
   224e0:	4643      	moveq	r3, r8
   224e2:	2344      	movne	r3, #68	; 0x44
   224e4:	4620      	mov	r0, r4
   224e6:	9305      	str	r3, [sp, #20]
   224e8:	f7ff fdf4 	bl	220d4 <strtoul>
   224ec:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   224f0:	9b05      	ldr	r3, [sp, #20]
   224f2:	45a0      	cmp	r8, r4
   224f4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   224f8:	d114      	bne.n	22524 <_tzset_unlocked_r+0x2c8>
   224fa:	234d      	movs	r3, #77	; 0x4d
   224fc:	f1b9 0f00 	cmp.w	r9, #0
   22500:	d107      	bne.n	22512 <_tzset_unlocked_r+0x2b6>
   22502:	2103      	movs	r1, #3
   22504:	722b      	strb	r3, [r5, #8]
   22506:	2302      	movs	r3, #2
   22508:	f8c5 9014 	str.w	r9, [r5, #20]
   2250c:	e9c5 1303 	strd	r1, r3, [r5, #12]
   22510:	e78e      	b.n	22430 <_tzset_unlocked_r+0x1d4>
   22512:	220b      	movs	r2, #11
   22514:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   22518:	2301      	movs	r3, #1
   2251a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
   2251e:	2300      	movs	r3, #0
   22520:	63eb      	str	r3, [r5, #60]	; 0x3c
   22522:	e785      	b.n	22430 <_tzset_unlocked_r+0x1d4>
   22524:	b280      	uxth	r0, r0
   22526:	723b      	strb	r3, [r7, #8]
   22528:	6178      	str	r0, [r7, #20]
   2252a:	e781      	b.n	22430 <_tzset_unlocked_r+0x1d4>
   2252c:	0002d2d2 	.word	0x0002d2d2
   22530:	200281d8 	.word	0x200281d8
   22534:	200281e0 	.word	0x200281e0
   22538:	0002d2d5 	.word	0x0002d2d5
   2253c:	200281dc 	.word	0x200281dc
   22540:	20020634 	.word	0x20020634
   22544:	2002af84 	.word	0x2002af84
   22548:	0002d2d9 	.word	0x0002d2d9
   2254c:	0002d2fc 	.word	0x0002d2fc
   22550:	0002d2e8 	.word	0x0002d2e8
   22554:	0002d2fb 	.word	0x0002d2fb
   22558:	2002af79 	.word	0x2002af79

0002255c <vsniprintf>:
   2255c:	b507      	push	{r0, r1, r2, lr}
   2255e:	9300      	str	r3, [sp, #0]
   22560:	4613      	mov	r3, r2
   22562:	460a      	mov	r2, r1
   22564:	4601      	mov	r1, r0
   22566:	4803      	ldr	r0, [pc, #12]	; (22574 <vsniprintf+0x18>)
   22568:	6800      	ldr	r0, [r0, #0]
   2256a:	f007 f9ee 	bl	2994a <_vsniprintf_r>
   2256e:	b003      	add	sp, #12
   22570:	f85d fb04 	ldr.w	pc, [sp], #4
   22574:	200205d0 	.word	0x200205d0

00022578 <_vsiprintf_r>:
   22578:	b500      	push	{lr}
   2257a:	b09b      	sub	sp, #108	; 0x6c
   2257c:	9100      	str	r1, [sp, #0]
   2257e:	9104      	str	r1, [sp, #16]
   22580:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   22584:	9105      	str	r1, [sp, #20]
   22586:	9102      	str	r1, [sp, #8]
   22588:	4905      	ldr	r1, [pc, #20]	; (225a0 <_vsiprintf_r+0x28>)
   2258a:	9103      	str	r1, [sp, #12]
   2258c:	4669      	mov	r1, sp
   2258e:	f000 fe53 	bl	23238 <_svfiprintf_r>
   22592:	9b00      	ldr	r3, [sp, #0]
   22594:	2200      	movs	r2, #0
   22596:	701a      	strb	r2, [r3, #0]
   22598:	b01b      	add	sp, #108	; 0x6c
   2259a:	f85d fb04 	ldr.w	pc, [sp], #4
   2259e:	bf00      	nop
   225a0:	ffff0208 	.word	0xffff0208

000225a4 <vsiprintf>:
   225a4:	4613      	mov	r3, r2
   225a6:	460a      	mov	r2, r1
   225a8:	4601      	mov	r1, r0
   225aa:	4802      	ldr	r0, [pc, #8]	; (225b4 <vsiprintf+0x10>)
   225ac:	6800      	ldr	r0, [r0, #0]
   225ae:	f7ff bfe3 	b.w	22578 <_vsiprintf_r>
   225b2:	bf00      	nop
   225b4:	200205d0 	.word	0x200205d0

000225b8 <__swbuf_r>:
   225b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   225ba:	460e      	mov	r6, r1
   225bc:	4614      	mov	r4, r2
   225be:	4605      	mov	r5, r0
   225c0:	b118      	cbz	r0, 225ca <__swbuf_r+0x12>
   225c2:	6983      	ldr	r3, [r0, #24]
   225c4:	b90b      	cbnz	r3, 225ca <__swbuf_r+0x12>
   225c6:	f000 f9ff 	bl	229c8 <__sinit>
   225ca:	4b21      	ldr	r3, [pc, #132]	; (22650 <__swbuf_r+0x98>)
   225cc:	429c      	cmp	r4, r3
   225ce:	d12b      	bne.n	22628 <__swbuf_r+0x70>
   225d0:	686c      	ldr	r4, [r5, #4]
   225d2:	69a3      	ldr	r3, [r4, #24]
   225d4:	60a3      	str	r3, [r4, #8]
   225d6:	89a3      	ldrh	r3, [r4, #12]
   225d8:	071a      	lsls	r2, r3, #28
   225da:	d52f      	bpl.n	2263c <__swbuf_r+0x84>
   225dc:	6923      	ldr	r3, [r4, #16]
   225de:	b36b      	cbz	r3, 2263c <__swbuf_r+0x84>
   225e0:	6923      	ldr	r3, [r4, #16]
   225e2:	b2f6      	uxtb	r6, r6
   225e4:	6820      	ldr	r0, [r4, #0]
   225e6:	4637      	mov	r7, r6
   225e8:	1ac0      	subs	r0, r0, r3
   225ea:	6963      	ldr	r3, [r4, #20]
   225ec:	4283      	cmp	r3, r0
   225ee:	dc04      	bgt.n	225fa <__swbuf_r+0x42>
   225f0:	4621      	mov	r1, r4
   225f2:	4628      	mov	r0, r5
   225f4:	f000 f96a 	bl	228cc <_fflush_r>
   225f8:	bb30      	cbnz	r0, 22648 <__swbuf_r+0x90>
   225fa:	68a3      	ldr	r3, [r4, #8]
   225fc:	3001      	adds	r0, #1
   225fe:	3b01      	subs	r3, #1
   22600:	60a3      	str	r3, [r4, #8]
   22602:	6823      	ldr	r3, [r4, #0]
   22604:	1c5a      	adds	r2, r3, #1
   22606:	6022      	str	r2, [r4, #0]
   22608:	701e      	strb	r6, [r3, #0]
   2260a:	6963      	ldr	r3, [r4, #20]
   2260c:	4283      	cmp	r3, r0
   2260e:	d004      	beq.n	2261a <__swbuf_r+0x62>
   22610:	89a3      	ldrh	r3, [r4, #12]
   22612:	07db      	lsls	r3, r3, #31
   22614:	d506      	bpl.n	22624 <__swbuf_r+0x6c>
   22616:	2e0a      	cmp	r6, #10
   22618:	d104      	bne.n	22624 <__swbuf_r+0x6c>
   2261a:	4621      	mov	r1, r4
   2261c:	4628      	mov	r0, r5
   2261e:	f000 f955 	bl	228cc <_fflush_r>
   22622:	b988      	cbnz	r0, 22648 <__swbuf_r+0x90>
   22624:	4638      	mov	r0, r7
   22626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22628:	4b0a      	ldr	r3, [pc, #40]	; (22654 <__swbuf_r+0x9c>)
   2262a:	429c      	cmp	r4, r3
   2262c:	d101      	bne.n	22632 <__swbuf_r+0x7a>
   2262e:	68ac      	ldr	r4, [r5, #8]
   22630:	e7cf      	b.n	225d2 <__swbuf_r+0x1a>
   22632:	4b09      	ldr	r3, [pc, #36]	; (22658 <__swbuf_r+0xa0>)
   22634:	429c      	cmp	r4, r3
   22636:	bf08      	it	eq
   22638:	68ec      	ldreq	r4, [r5, #12]
   2263a:	e7ca      	b.n	225d2 <__swbuf_r+0x1a>
   2263c:	4621      	mov	r1, r4
   2263e:	4628      	mov	r0, r5
   22640:	f000 f81e 	bl	22680 <__swsetup_r>
   22644:	2800      	cmp	r0, #0
   22646:	d0cb      	beq.n	225e0 <__swbuf_r+0x28>
   22648:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2264c:	e7ea      	b.n	22624 <__swbuf_r+0x6c>
   2264e:	bf00      	nop
   22650:	0002acac 	.word	0x0002acac
   22654:	0002accc 	.word	0x0002accc
   22658:	0002ac8c 	.word	0x0002ac8c

0002265c <_write_r>:
   2265c:	b538      	push	{r3, r4, r5, lr}
   2265e:	4604      	mov	r4, r0
   22660:	4d06      	ldr	r5, [pc, #24]	; (2267c <_write_r+0x20>)
   22662:	4608      	mov	r0, r1
   22664:	4611      	mov	r1, r2
   22666:	2200      	movs	r2, #0
   22668:	602a      	str	r2, [r5, #0]
   2266a:	461a      	mov	r2, r3
   2266c:	f002 fb3c 	bl	24ce8 <_write>
   22670:	1c43      	adds	r3, r0, #1
   22672:	d102      	bne.n	2267a <_write_r+0x1e>
   22674:	682b      	ldr	r3, [r5, #0]
   22676:	b103      	cbz	r3, 2267a <_write_r+0x1e>
   22678:	6023      	str	r3, [r4, #0]
   2267a:	bd38      	pop	{r3, r4, r5, pc}
   2267c:	2002b0f8 	.word	0x2002b0f8

00022680 <__swsetup_r>:
   22680:	4b32      	ldr	r3, [pc, #200]	; (2274c <__swsetup_r+0xcc>)
   22682:	b570      	push	{r4, r5, r6, lr}
   22684:	681d      	ldr	r5, [r3, #0]
   22686:	4606      	mov	r6, r0
   22688:	460c      	mov	r4, r1
   2268a:	b125      	cbz	r5, 22696 <__swsetup_r+0x16>
   2268c:	69ab      	ldr	r3, [r5, #24]
   2268e:	b913      	cbnz	r3, 22696 <__swsetup_r+0x16>
   22690:	4628      	mov	r0, r5
   22692:	f000 f999 	bl	229c8 <__sinit>
   22696:	4b2e      	ldr	r3, [pc, #184]	; (22750 <__swsetup_r+0xd0>)
   22698:	429c      	cmp	r4, r3
   2269a:	d10f      	bne.n	226bc <__swsetup_r+0x3c>
   2269c:	686c      	ldr	r4, [r5, #4]
   2269e:	89a3      	ldrh	r3, [r4, #12]
   226a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   226a4:	0719      	lsls	r1, r3, #28
   226a6:	d42c      	bmi.n	22702 <__swsetup_r+0x82>
   226a8:	06dd      	lsls	r5, r3, #27
   226aa:	d411      	bmi.n	226d0 <__swsetup_r+0x50>
   226ac:	2309      	movs	r3, #9
   226ae:	6033      	str	r3, [r6, #0]
   226b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   226b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   226b8:	81a3      	strh	r3, [r4, #12]
   226ba:	e03e      	b.n	2273a <__swsetup_r+0xba>
   226bc:	4b25      	ldr	r3, [pc, #148]	; (22754 <__swsetup_r+0xd4>)
   226be:	429c      	cmp	r4, r3
   226c0:	d101      	bne.n	226c6 <__swsetup_r+0x46>
   226c2:	68ac      	ldr	r4, [r5, #8]
   226c4:	e7eb      	b.n	2269e <__swsetup_r+0x1e>
   226c6:	4b24      	ldr	r3, [pc, #144]	; (22758 <__swsetup_r+0xd8>)
   226c8:	429c      	cmp	r4, r3
   226ca:	bf08      	it	eq
   226cc:	68ec      	ldreq	r4, [r5, #12]
   226ce:	e7e6      	b.n	2269e <__swsetup_r+0x1e>
   226d0:	0758      	lsls	r0, r3, #29
   226d2:	d512      	bpl.n	226fa <__swsetup_r+0x7a>
   226d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   226d6:	b141      	cbz	r1, 226ea <__swsetup_r+0x6a>
   226d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   226dc:	4299      	cmp	r1, r3
   226de:	d002      	beq.n	226e6 <__swsetup_r+0x66>
   226e0:	4630      	mov	r0, r6
   226e2:	f7fe fe07 	bl	212f4 <_free_r>
   226e6:	2300      	movs	r3, #0
   226e8:	6363      	str	r3, [r4, #52]	; 0x34
   226ea:	89a3      	ldrh	r3, [r4, #12]
   226ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   226f0:	81a3      	strh	r3, [r4, #12]
   226f2:	2300      	movs	r3, #0
   226f4:	6063      	str	r3, [r4, #4]
   226f6:	6923      	ldr	r3, [r4, #16]
   226f8:	6023      	str	r3, [r4, #0]
   226fa:	89a3      	ldrh	r3, [r4, #12]
   226fc:	f043 0308 	orr.w	r3, r3, #8
   22700:	81a3      	strh	r3, [r4, #12]
   22702:	6923      	ldr	r3, [r4, #16]
   22704:	b94b      	cbnz	r3, 2271a <__swsetup_r+0x9a>
   22706:	89a3      	ldrh	r3, [r4, #12]
   22708:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2270c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   22710:	d003      	beq.n	2271a <__swsetup_r+0x9a>
   22712:	4621      	mov	r1, r4
   22714:	4630      	mov	r0, r6
   22716:	f000 fa29 	bl	22b6c <__smakebuf_r>
   2271a:	89a0      	ldrh	r0, [r4, #12]
   2271c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   22720:	f010 0301 	ands.w	r3, r0, #1
   22724:	d00a      	beq.n	2273c <__swsetup_r+0xbc>
   22726:	2300      	movs	r3, #0
   22728:	60a3      	str	r3, [r4, #8]
   2272a:	6963      	ldr	r3, [r4, #20]
   2272c:	425b      	negs	r3, r3
   2272e:	61a3      	str	r3, [r4, #24]
   22730:	6923      	ldr	r3, [r4, #16]
   22732:	b943      	cbnz	r3, 22746 <__swsetup_r+0xc6>
   22734:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   22738:	d1ba      	bne.n	226b0 <__swsetup_r+0x30>
   2273a:	bd70      	pop	{r4, r5, r6, pc}
   2273c:	0781      	lsls	r1, r0, #30
   2273e:	bf58      	it	pl
   22740:	6963      	ldrpl	r3, [r4, #20]
   22742:	60a3      	str	r3, [r4, #8]
   22744:	e7f4      	b.n	22730 <__swsetup_r+0xb0>
   22746:	2000      	movs	r0, #0
   22748:	e7f7      	b.n	2273a <__swsetup_r+0xba>
   2274a:	bf00      	nop
   2274c:	200205d0 	.word	0x200205d0
   22750:	0002acac 	.word	0x0002acac
   22754:	0002accc 	.word	0x0002accc
   22758:	0002ac8c 	.word	0x0002ac8c

0002275c <__chk_fail>:
   2275c:	b500      	push	{lr}
   2275e:	b08d      	sub	sp, #52	; 0x34
   22760:	4b0f      	ldr	r3, [pc, #60]	; (227a0 <__chk_fail+0x44>)
   22762:	466a      	mov	r2, sp
   22764:	f103 0628 	add.w	r6, r3, #40	; 0x28
   22768:	4615      	mov	r5, r2
   2276a:	6818      	ldr	r0, [r3, #0]
   2276c:	3308      	adds	r3, #8
   2276e:	f853 1c04 	ldr.w	r1, [r3, #-4]
   22772:	4614      	mov	r4, r2
   22774:	42b3      	cmp	r3, r6
   22776:	c403      	stmia	r4!, {r0, r1}
   22778:	4622      	mov	r2, r4
   2277a:	d1f6      	bne.n	2276a <__chk_fail+0xe>
   2277c:	6818      	ldr	r0, [r3, #0]
   2277e:	889b      	ldrh	r3, [r3, #4]
   22780:	6020      	str	r0, [r4, #0]
   22782:	4628      	mov	r0, r5
   22784:	80a3      	strh	r3, [r4, #4]
   22786:	f7ea fbd7 	bl	cf38 <strlen>
   2278a:	4629      	mov	r1, r5
   2278c:	4602      	mov	r2, r0
   2278e:	2002      	movs	r0, #2
   22790:	f002 faaa 	bl	24ce8 <_write>
   22794:	2006      	movs	r0, #6
   22796:	f001 f927 	bl	239e8 <raise>
   2279a:	207f      	movs	r0, #127	; 0x7f
   2279c:	f7ef f8b0 	bl	11900 <_exit>
   227a0:	0002d30e 	.word	0x0002d30e

000227a4 <_close_r>:
   227a4:	b538      	push	{r3, r4, r5, lr}
   227a6:	2300      	movs	r3, #0
   227a8:	4d05      	ldr	r5, [pc, #20]	; (227c0 <_close_r+0x1c>)
   227aa:	4604      	mov	r4, r0
   227ac:	4608      	mov	r0, r1
   227ae:	602b      	str	r3, [r5, #0]
   227b0:	f002 fa9e 	bl	24cf0 <_close>
   227b4:	1c43      	adds	r3, r0, #1
   227b6:	d102      	bne.n	227be <_close_r+0x1a>
   227b8:	682b      	ldr	r3, [r5, #0]
   227ba:	b103      	cbz	r3, 227be <_close_r+0x1a>
   227bc:	6023      	str	r3, [r4, #0]
   227be:	bd38      	pop	{r3, r4, r5, pc}
   227c0:	2002b0f8 	.word	0x2002b0f8

000227c4 <__sflush_r>:
   227c4:	898a      	ldrh	r2, [r1, #12]
   227c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   227ca:	4605      	mov	r5, r0
   227cc:	0710      	lsls	r0, r2, #28
   227ce:	460c      	mov	r4, r1
   227d0:	d458      	bmi.n	22884 <__sflush_r+0xc0>
   227d2:	684b      	ldr	r3, [r1, #4]
   227d4:	2b00      	cmp	r3, #0
   227d6:	dc05      	bgt.n	227e4 <__sflush_r+0x20>
   227d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   227da:	2b00      	cmp	r3, #0
   227dc:	dc02      	bgt.n	227e4 <__sflush_r+0x20>
   227de:	2000      	movs	r0, #0
   227e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   227e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   227e6:	2e00      	cmp	r6, #0
   227e8:	d0f9      	beq.n	227de <__sflush_r+0x1a>
   227ea:	2300      	movs	r3, #0
   227ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   227f0:	682f      	ldr	r7, [r5, #0]
   227f2:	602b      	str	r3, [r5, #0]
   227f4:	d032      	beq.n	2285c <__sflush_r+0x98>
   227f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
   227f8:	89a3      	ldrh	r3, [r4, #12]
   227fa:	075a      	lsls	r2, r3, #29
   227fc:	d505      	bpl.n	2280a <__sflush_r+0x46>
   227fe:	6863      	ldr	r3, [r4, #4]
   22800:	1ac0      	subs	r0, r0, r3
   22802:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22804:	b10b      	cbz	r3, 2280a <__sflush_r+0x46>
   22806:	6c23      	ldr	r3, [r4, #64]	; 0x40
   22808:	1ac0      	subs	r0, r0, r3
   2280a:	2300      	movs	r3, #0
   2280c:	4602      	mov	r2, r0
   2280e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   22810:	4628      	mov	r0, r5
   22812:	6a21      	ldr	r1, [r4, #32]
   22814:	47b0      	blx	r6
   22816:	1c43      	adds	r3, r0, #1
   22818:	89a3      	ldrh	r3, [r4, #12]
   2281a:	d106      	bne.n	2282a <__sflush_r+0x66>
   2281c:	6829      	ldr	r1, [r5, #0]
   2281e:	291d      	cmp	r1, #29
   22820:	d82c      	bhi.n	2287c <__sflush_r+0xb8>
   22822:	4a29      	ldr	r2, [pc, #164]	; (228c8 <__sflush_r+0x104>)
   22824:	40ca      	lsrs	r2, r1
   22826:	07d6      	lsls	r6, r2, #31
   22828:	d528      	bpl.n	2287c <__sflush_r+0xb8>
   2282a:	2200      	movs	r2, #0
   2282c:	04d9      	lsls	r1, r3, #19
   2282e:	6062      	str	r2, [r4, #4]
   22830:	6922      	ldr	r2, [r4, #16]
   22832:	6022      	str	r2, [r4, #0]
   22834:	d504      	bpl.n	22840 <__sflush_r+0x7c>
   22836:	1c42      	adds	r2, r0, #1
   22838:	d101      	bne.n	2283e <__sflush_r+0x7a>
   2283a:	682b      	ldr	r3, [r5, #0]
   2283c:	b903      	cbnz	r3, 22840 <__sflush_r+0x7c>
   2283e:	6560      	str	r0, [r4, #84]	; 0x54
   22840:	6b61      	ldr	r1, [r4, #52]	; 0x34
   22842:	602f      	str	r7, [r5, #0]
   22844:	2900      	cmp	r1, #0
   22846:	d0ca      	beq.n	227de <__sflush_r+0x1a>
   22848:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2284c:	4299      	cmp	r1, r3
   2284e:	d002      	beq.n	22856 <__sflush_r+0x92>
   22850:	4628      	mov	r0, r5
   22852:	f7fe fd4f 	bl	212f4 <_free_r>
   22856:	2000      	movs	r0, #0
   22858:	6360      	str	r0, [r4, #52]	; 0x34
   2285a:	e7c1      	b.n	227e0 <__sflush_r+0x1c>
   2285c:	6a21      	ldr	r1, [r4, #32]
   2285e:	2301      	movs	r3, #1
   22860:	4628      	mov	r0, r5
   22862:	47b0      	blx	r6
   22864:	1c41      	adds	r1, r0, #1
   22866:	d1c7      	bne.n	227f8 <__sflush_r+0x34>
   22868:	682b      	ldr	r3, [r5, #0]
   2286a:	2b00      	cmp	r3, #0
   2286c:	d0c4      	beq.n	227f8 <__sflush_r+0x34>
   2286e:	2b1d      	cmp	r3, #29
   22870:	d001      	beq.n	22876 <__sflush_r+0xb2>
   22872:	2b16      	cmp	r3, #22
   22874:	d101      	bne.n	2287a <__sflush_r+0xb6>
   22876:	602f      	str	r7, [r5, #0]
   22878:	e7b1      	b.n	227de <__sflush_r+0x1a>
   2287a:	89a3      	ldrh	r3, [r4, #12]
   2287c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22880:	81a3      	strh	r3, [r4, #12]
   22882:	e7ad      	b.n	227e0 <__sflush_r+0x1c>
   22884:	690f      	ldr	r7, [r1, #16]
   22886:	2f00      	cmp	r7, #0
   22888:	d0a9      	beq.n	227de <__sflush_r+0x1a>
   2288a:	0793      	lsls	r3, r2, #30
   2288c:	680e      	ldr	r6, [r1, #0]
   2288e:	600f      	str	r7, [r1, #0]
   22890:	bf0c      	ite	eq
   22892:	694b      	ldreq	r3, [r1, #20]
   22894:	2300      	movne	r3, #0
   22896:	eba6 0807 	sub.w	r8, r6, r7
   2289a:	608b      	str	r3, [r1, #8]
   2289c:	f1b8 0f00 	cmp.w	r8, #0
   228a0:	dd9d      	ble.n	227de <__sflush_r+0x1a>
   228a2:	4643      	mov	r3, r8
   228a4:	463a      	mov	r2, r7
   228a6:	6a21      	ldr	r1, [r4, #32]
   228a8:	4628      	mov	r0, r5
   228aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   228ac:	47b0      	blx	r6
   228ae:	2800      	cmp	r0, #0
   228b0:	dc06      	bgt.n	228c0 <__sflush_r+0xfc>
   228b2:	89a3      	ldrh	r3, [r4, #12]
   228b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   228b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   228bc:	81a3      	strh	r3, [r4, #12]
   228be:	e78f      	b.n	227e0 <__sflush_r+0x1c>
   228c0:	4407      	add	r7, r0
   228c2:	eba8 0800 	sub.w	r8, r8, r0
   228c6:	e7e9      	b.n	2289c <__sflush_r+0xd8>
   228c8:	20400001 	.word	0x20400001

000228cc <_fflush_r>:
   228cc:	b538      	push	{r3, r4, r5, lr}
   228ce:	690b      	ldr	r3, [r1, #16]
   228d0:	4605      	mov	r5, r0
   228d2:	460c      	mov	r4, r1
   228d4:	b913      	cbnz	r3, 228dc <_fflush_r+0x10>
   228d6:	2500      	movs	r5, #0
   228d8:	4628      	mov	r0, r5
   228da:	bd38      	pop	{r3, r4, r5, pc}
   228dc:	b118      	cbz	r0, 228e6 <_fflush_r+0x1a>
   228de:	6983      	ldr	r3, [r0, #24]
   228e0:	b90b      	cbnz	r3, 228e6 <_fflush_r+0x1a>
   228e2:	f000 f871 	bl	229c8 <__sinit>
   228e6:	4b14      	ldr	r3, [pc, #80]	; (22938 <_fflush_r+0x6c>)
   228e8:	429c      	cmp	r4, r3
   228ea:	d11b      	bne.n	22924 <_fflush_r+0x58>
   228ec:	686c      	ldr	r4, [r5, #4]
   228ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   228f2:	2b00      	cmp	r3, #0
   228f4:	d0ef      	beq.n	228d6 <_fflush_r+0xa>
   228f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   228f8:	07d0      	lsls	r0, r2, #31
   228fa:	d404      	bmi.n	22906 <_fflush_r+0x3a>
   228fc:	0599      	lsls	r1, r3, #22
   228fe:	d402      	bmi.n	22906 <_fflush_r+0x3a>
   22900:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22902:	f007 f936 	bl	29b72 <__retarget_lock_acquire_recursive>
   22906:	4628      	mov	r0, r5
   22908:	4621      	mov	r1, r4
   2290a:	f7ff ff5b 	bl	227c4 <__sflush_r>
   2290e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   22910:	4605      	mov	r5, r0
   22912:	07da      	lsls	r2, r3, #31
   22914:	d4e0      	bmi.n	228d8 <_fflush_r+0xc>
   22916:	89a3      	ldrh	r3, [r4, #12]
   22918:	059b      	lsls	r3, r3, #22
   2291a:	d4dd      	bmi.n	228d8 <_fflush_r+0xc>
   2291c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2291e:	f007 f92a 	bl	29b76 <__retarget_lock_release_recursive>
   22922:	e7d9      	b.n	228d8 <_fflush_r+0xc>
   22924:	4b05      	ldr	r3, [pc, #20]	; (2293c <_fflush_r+0x70>)
   22926:	429c      	cmp	r4, r3
   22928:	d101      	bne.n	2292e <_fflush_r+0x62>
   2292a:	68ac      	ldr	r4, [r5, #8]
   2292c:	e7df      	b.n	228ee <_fflush_r+0x22>
   2292e:	4b04      	ldr	r3, [pc, #16]	; (22940 <_fflush_r+0x74>)
   22930:	429c      	cmp	r4, r3
   22932:	bf08      	it	eq
   22934:	68ec      	ldreq	r4, [r5, #12]
   22936:	e7da      	b.n	228ee <_fflush_r+0x22>
   22938:	0002acac 	.word	0x0002acac
   2293c:	0002accc 	.word	0x0002accc
   22940:	0002ac8c 	.word	0x0002ac8c

00022944 <std>:
   22944:	2300      	movs	r3, #0
   22946:	b510      	push	{r4, lr}
   22948:	4604      	mov	r4, r0
   2294a:	6083      	str	r3, [r0, #8]
   2294c:	8181      	strh	r1, [r0, #12]
   2294e:	4619      	mov	r1, r3
   22950:	6643      	str	r3, [r0, #100]	; 0x64
   22952:	81c2      	strh	r2, [r0, #14]
   22954:	2208      	movs	r2, #8
   22956:	6183      	str	r3, [r0, #24]
   22958:	e9c0 3300 	strd	r3, r3, [r0]
   2295c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   22960:	305c      	adds	r0, #92	; 0x5c
   22962:	f006 fdc0 	bl	294e6 <memset>
   22966:	4b05      	ldr	r3, [pc, #20]	; (2297c <std+0x38>)
   22968:	6224      	str	r4, [r4, #32]
   2296a:	6263      	str	r3, [r4, #36]	; 0x24
   2296c:	4b04      	ldr	r3, [pc, #16]	; (22980 <std+0x3c>)
   2296e:	62a3      	str	r3, [r4, #40]	; 0x28
   22970:	4b04      	ldr	r3, [pc, #16]	; (22984 <std+0x40>)
   22972:	62e3      	str	r3, [r4, #44]	; 0x2c
   22974:	4b04      	ldr	r3, [pc, #16]	; (22988 <std+0x44>)
   22976:	6323      	str	r3, [r4, #48]	; 0x30
   22978:	bd10      	pop	{r4, pc}
   2297a:	bf00      	nop
   2297c:	0002979d 	.word	0x0002979d
   22980:	000297c3 	.word	0x000297c3
   22984:	000297fb 	.word	0x000297fb
   22988:	0002981f 	.word	0x0002981f

0002298c <_cleanup_r>:
   2298c:	4901      	ldr	r1, [pc, #4]	; (22994 <_cleanup_r+0x8>)
   2298e:	f007 b8c8 	b.w	29b22 <_fwalk_reent>
   22992:	bf00      	nop
   22994:	000228cd 	.word	0x000228cd

00022998 <__sfp_lock_acquire>:
   22998:	4801      	ldr	r0, [pc, #4]	; (229a0 <__sfp_lock_acquire+0x8>)
   2299a:	f007 b8ea 	b.w	29b72 <__retarget_lock_acquire_recursive>
   2299e:	bf00      	nop
   229a0:	2002b104 	.word	0x2002b104

000229a4 <__sfp_lock_release>:
   229a4:	4801      	ldr	r0, [pc, #4]	; (229ac <__sfp_lock_release+0x8>)
   229a6:	f007 b8e6 	b.w	29b76 <__retarget_lock_release_recursive>
   229aa:	bf00      	nop
   229ac:	2002b104 	.word	0x2002b104

000229b0 <__sinit_lock_acquire>:
   229b0:	4801      	ldr	r0, [pc, #4]	; (229b8 <__sinit_lock_acquire+0x8>)
   229b2:	f007 b8de 	b.w	29b72 <__retarget_lock_acquire_recursive>
   229b6:	bf00      	nop
   229b8:	2002b0ff 	.word	0x2002b0ff

000229bc <__sinit_lock_release>:
   229bc:	4801      	ldr	r0, [pc, #4]	; (229c4 <__sinit_lock_release+0x8>)
   229be:	f007 b8da 	b.w	29b76 <__retarget_lock_release_recursive>
   229c2:	bf00      	nop
   229c4:	2002b0ff 	.word	0x2002b0ff

000229c8 <__sinit>:
   229c8:	b510      	push	{r4, lr}
   229ca:	4604      	mov	r4, r0
   229cc:	f7ff fff0 	bl	229b0 <__sinit_lock_acquire>
   229d0:	69a3      	ldr	r3, [r4, #24]
   229d2:	b11b      	cbz	r3, 229dc <__sinit+0x14>
   229d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   229d8:	f7ff bff0 	b.w	229bc <__sinit_lock_release>
   229dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   229e0:	6523      	str	r3, [r4, #80]	; 0x50
   229e2:	4620      	mov	r0, r4
   229e4:	4b12      	ldr	r3, [pc, #72]	; (22a30 <__sinit+0x68>)
   229e6:	4a13      	ldr	r2, [pc, #76]	; (22a34 <__sinit+0x6c>)
   229e8:	681b      	ldr	r3, [r3, #0]
   229ea:	62a2      	str	r2, [r4, #40]	; 0x28
   229ec:	42a3      	cmp	r3, r4
   229ee:	bf04      	itt	eq
   229f0:	2301      	moveq	r3, #1
   229f2:	61a3      	streq	r3, [r4, #24]
   229f4:	f000 f820 	bl	22a38 <__sfp>
   229f8:	6060      	str	r0, [r4, #4]
   229fa:	4620      	mov	r0, r4
   229fc:	f000 f81c 	bl	22a38 <__sfp>
   22a00:	60a0      	str	r0, [r4, #8]
   22a02:	4620      	mov	r0, r4
   22a04:	f000 f818 	bl	22a38 <__sfp>
   22a08:	2200      	movs	r2, #0
   22a0a:	2104      	movs	r1, #4
   22a0c:	60e0      	str	r0, [r4, #12]
   22a0e:	6860      	ldr	r0, [r4, #4]
   22a10:	f7ff ff98 	bl	22944 <std>
   22a14:	2201      	movs	r2, #1
   22a16:	2109      	movs	r1, #9
   22a18:	68a0      	ldr	r0, [r4, #8]
   22a1a:	f7ff ff93 	bl	22944 <std>
   22a1e:	2202      	movs	r2, #2
   22a20:	2112      	movs	r1, #18
   22a22:	68e0      	ldr	r0, [r4, #12]
   22a24:	f7ff ff8e 	bl	22944 <std>
   22a28:	2301      	movs	r3, #1
   22a2a:	61a3      	str	r3, [r4, #24]
   22a2c:	e7d2      	b.n	229d4 <__sinit+0xc>
   22a2e:	bf00      	nop
   22a30:	0002ac28 	.word	0x0002ac28
   22a34:	0002298d 	.word	0x0002298d

00022a38 <__sfp>:
   22a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22a3a:	4607      	mov	r7, r0
   22a3c:	f7ff ffac 	bl	22998 <__sfp_lock_acquire>
   22a40:	4b1e      	ldr	r3, [pc, #120]	; (22abc <__sfp+0x84>)
   22a42:	681e      	ldr	r6, [r3, #0]
   22a44:	69b3      	ldr	r3, [r6, #24]
   22a46:	b913      	cbnz	r3, 22a4e <__sfp+0x16>
   22a48:	4630      	mov	r0, r6
   22a4a:	f7ff ffbd 	bl	229c8 <__sinit>
   22a4e:	3648      	adds	r6, #72	; 0x48
   22a50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   22a54:	3b01      	subs	r3, #1
   22a56:	d503      	bpl.n	22a60 <__sfp+0x28>
   22a58:	6833      	ldr	r3, [r6, #0]
   22a5a:	b30b      	cbz	r3, 22aa0 <__sfp+0x68>
   22a5c:	6836      	ldr	r6, [r6, #0]
   22a5e:	e7f7      	b.n	22a50 <__sfp+0x18>
   22a60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   22a64:	b9d5      	cbnz	r5, 22a9c <__sfp+0x64>
   22a66:	4b16      	ldr	r3, [pc, #88]	; (22ac0 <__sfp+0x88>)
   22a68:	f104 0058 	add.w	r0, r4, #88	; 0x58
   22a6c:	6665      	str	r5, [r4, #100]	; 0x64
   22a6e:	60e3      	str	r3, [r4, #12]
   22a70:	f007 f87d 	bl	29b6e <__retarget_lock_init_recursive>
   22a74:	f7ff ff96 	bl	229a4 <__sfp_lock_release>
   22a78:	2208      	movs	r2, #8
   22a7a:	4629      	mov	r1, r5
   22a7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   22a80:	6025      	str	r5, [r4, #0]
   22a82:	61a5      	str	r5, [r4, #24]
   22a84:	e9c4 5501 	strd	r5, r5, [r4, #4]
   22a88:	e9c4 5504 	strd	r5, r5, [r4, #16]
   22a8c:	f006 fd2b 	bl	294e6 <memset>
   22a90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   22a94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   22a98:	4620      	mov	r0, r4
   22a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22a9c:	3468      	adds	r4, #104	; 0x68
   22a9e:	e7d9      	b.n	22a54 <__sfp+0x1c>
   22aa0:	2104      	movs	r1, #4
   22aa2:	4638      	mov	r0, r7
   22aa4:	f007 f827 	bl	29af6 <__sfmoreglue>
   22aa8:	4604      	mov	r4, r0
   22aaa:	6030      	str	r0, [r6, #0]
   22aac:	2800      	cmp	r0, #0
   22aae:	d1d5      	bne.n	22a5c <__sfp+0x24>
   22ab0:	f7ff ff78 	bl	229a4 <__sfp_lock_release>
   22ab4:	230c      	movs	r3, #12
   22ab6:	603b      	str	r3, [r7, #0]
   22ab8:	e7ee      	b.n	22a98 <__sfp+0x60>
   22aba:	bf00      	nop
   22abc:	0002ac28 	.word	0x0002ac28
   22ac0:	ffff0001 	.word	0xffff0001

00022ac4 <_findenv_r>:
   22ac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ac8:	4607      	mov	r7, r0
   22aca:	4689      	mov	r9, r1
   22acc:	4616      	mov	r6, r2
   22ace:	f000 ffa5 	bl	23a1c <__env_lock>
   22ad2:	4b18      	ldr	r3, [pc, #96]	; (22b34 <_findenv_r+0x70>)
   22ad4:	681c      	ldr	r4, [r3, #0]
   22ad6:	469a      	mov	sl, r3
   22ad8:	b134      	cbz	r4, 22ae8 <_findenv_r+0x24>
   22ada:	464b      	mov	r3, r9
   22adc:	4698      	mov	r8, r3
   22ade:	f813 1b01 	ldrb.w	r1, [r3], #1
   22ae2:	b139      	cbz	r1, 22af4 <_findenv_r+0x30>
   22ae4:	293d      	cmp	r1, #61	; 0x3d
   22ae6:	d1f9      	bne.n	22adc <_findenv_r+0x18>
   22ae8:	4638      	mov	r0, r7
   22aea:	f000 ff9d 	bl	23a28 <__env_unlock>
   22aee:	2000      	movs	r0, #0
   22af0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22af4:	eba8 0809 	sub.w	r8, r8, r9
   22af8:	46a3      	mov	fp, r4
   22afa:	f854 0b04 	ldr.w	r0, [r4], #4
   22afe:	2800      	cmp	r0, #0
   22b00:	d0f2      	beq.n	22ae8 <_findenv_r+0x24>
   22b02:	4642      	mov	r2, r8
   22b04:	4649      	mov	r1, r9
   22b06:	f006 feb8 	bl	2987a <strncmp>
   22b0a:	2800      	cmp	r0, #0
   22b0c:	d1f4      	bne.n	22af8 <_findenv_r+0x34>
   22b0e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22b12:	eb03 0508 	add.w	r5, r3, r8
   22b16:	f813 3008 	ldrb.w	r3, [r3, r8]
   22b1a:	2b3d      	cmp	r3, #61	; 0x3d
   22b1c:	d1ec      	bne.n	22af8 <_findenv_r+0x34>
   22b1e:	f8da 3000 	ldr.w	r3, [sl]
   22b22:	4638      	mov	r0, r7
   22b24:	ebab 0303 	sub.w	r3, fp, r3
   22b28:	109b      	asrs	r3, r3, #2
   22b2a:	6033      	str	r3, [r6, #0]
   22b2c:	f000 ff7c 	bl	23a28 <__env_unlock>
   22b30:	1c68      	adds	r0, r5, #1
   22b32:	e7dd      	b.n	22af0 <_findenv_r+0x2c>
   22b34:	200207a8 	.word	0x200207a8

00022b38 <__gettzinfo>:
   22b38:	4800      	ldr	r0, [pc, #0]	; (22b3c <__gettzinfo+0x4>)
   22b3a:	4770      	bx	lr
   22b3c:	20020000 	.word	0x20020000

00022b40 <_localeconv_r>:
   22b40:	4800      	ldr	r0, [pc, #0]	; (22b44 <_localeconv_r+0x4>)
   22b42:	4770      	bx	lr
   22b44:	2002072c 	.word	0x2002072c

00022b48 <_lseek_r>:
   22b48:	b538      	push	{r3, r4, r5, lr}
   22b4a:	4604      	mov	r4, r0
   22b4c:	4d06      	ldr	r5, [pc, #24]	; (22b68 <_lseek_r+0x20>)
   22b4e:	4608      	mov	r0, r1
   22b50:	4611      	mov	r1, r2
   22b52:	2200      	movs	r2, #0
   22b54:	602a      	str	r2, [r5, #0]
   22b56:	461a      	mov	r2, r3
   22b58:	f002 f8cd 	bl	24cf6 <_lseek>
   22b5c:	1c43      	adds	r3, r0, #1
   22b5e:	d102      	bne.n	22b66 <_lseek_r+0x1e>
   22b60:	682b      	ldr	r3, [r5, #0]
   22b62:	b103      	cbz	r3, 22b66 <_lseek_r+0x1e>
   22b64:	6023      	str	r3, [r4, #0]
   22b66:	bd38      	pop	{r3, r4, r5, pc}
   22b68:	2002b0f8 	.word	0x2002b0f8

00022b6c <__smakebuf_r>:
   22b6c:	898b      	ldrh	r3, [r1, #12]
   22b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22b70:	079d      	lsls	r5, r3, #30
   22b72:	4606      	mov	r6, r0
   22b74:	460c      	mov	r4, r1
   22b76:	d507      	bpl.n	22b88 <__smakebuf_r+0x1c>
   22b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
   22b7c:	6023      	str	r3, [r4, #0]
   22b7e:	6123      	str	r3, [r4, #16]
   22b80:	2301      	movs	r3, #1
   22b82:	6163      	str	r3, [r4, #20]
   22b84:	b002      	add	sp, #8
   22b86:	bd70      	pop	{r4, r5, r6, pc}
   22b88:	ab01      	add	r3, sp, #4
   22b8a:	466a      	mov	r2, sp
   22b8c:	f006 fff4 	bl	29b78 <__swhatbuf_r>
   22b90:	9900      	ldr	r1, [sp, #0]
   22b92:	4605      	mov	r5, r0
   22b94:	4630      	mov	r0, r6
   22b96:	f7fe fbfd 	bl	21394 <_malloc_r>
   22b9a:	b948      	cbnz	r0, 22bb0 <__smakebuf_r+0x44>
   22b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22ba0:	059a      	lsls	r2, r3, #22
   22ba2:	d4ef      	bmi.n	22b84 <__smakebuf_r+0x18>
   22ba4:	f023 0303 	bic.w	r3, r3, #3
   22ba8:	f043 0302 	orr.w	r3, r3, #2
   22bac:	81a3      	strh	r3, [r4, #12]
   22bae:	e7e3      	b.n	22b78 <__smakebuf_r+0xc>
   22bb0:	4b0d      	ldr	r3, [pc, #52]	; (22be8 <__smakebuf_r+0x7c>)
   22bb2:	62b3      	str	r3, [r6, #40]	; 0x28
   22bb4:	89a3      	ldrh	r3, [r4, #12]
   22bb6:	6020      	str	r0, [r4, #0]
   22bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   22bbc:	6120      	str	r0, [r4, #16]
   22bbe:	81a3      	strh	r3, [r4, #12]
   22bc0:	9b00      	ldr	r3, [sp, #0]
   22bc2:	6163      	str	r3, [r4, #20]
   22bc4:	9b01      	ldr	r3, [sp, #4]
   22bc6:	b15b      	cbz	r3, 22be0 <__smakebuf_r+0x74>
   22bc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   22bcc:	4630      	mov	r0, r6
   22bce:	f000 ff43 	bl	23a58 <_isatty_r>
   22bd2:	b128      	cbz	r0, 22be0 <__smakebuf_r+0x74>
   22bd4:	89a3      	ldrh	r3, [r4, #12]
   22bd6:	f023 0303 	bic.w	r3, r3, #3
   22bda:	f043 0301 	orr.w	r3, r3, #1
   22bde:	81a3      	strh	r3, [r4, #12]
   22be0:	89a0      	ldrh	r0, [r4, #12]
   22be2:	4305      	orrs	r5, r0
   22be4:	81a5      	strh	r5, [r4, #12]
   22be6:	e7cd      	b.n	22b84 <__smakebuf_r+0x18>
   22be8:	0002298d 	.word	0x0002298d

00022bec <__malloc_lock>:
   22bec:	4801      	ldr	r0, [pc, #4]	; (22bf4 <__malloc_lock+0x8>)
   22bee:	f006 bfc0 	b.w	29b72 <__retarget_lock_acquire_recursive>
   22bf2:	bf00      	nop
   22bf4:	2002b100 	.word	0x2002b100

00022bf8 <__malloc_unlock>:
   22bf8:	4801      	ldr	r0, [pc, #4]	; (22c00 <__malloc_unlock+0x8>)
   22bfa:	f006 bfbc 	b.w	29b76 <__retarget_lock_release_recursive>
   22bfe:	bf00      	nop
   22c00:	2002b100 	.word	0x2002b100

00022c04 <_Balloc>:
   22c04:	b570      	push	{r4, r5, r6, lr}
   22c06:	6a46      	ldr	r6, [r0, #36]	; 0x24
   22c08:	4604      	mov	r4, r0
   22c0a:	460d      	mov	r5, r1
   22c0c:	b976      	cbnz	r6, 22c2c <_Balloc+0x28>
   22c0e:	2010      	movs	r0, #16
   22c10:	f7fe f8e0 	bl	20dd4 <malloc>
   22c14:	4602      	mov	r2, r0
   22c16:	6260      	str	r0, [r4, #36]	; 0x24
   22c18:	b920      	cbnz	r0, 22c24 <_Balloc+0x20>
   22c1a:	4b18      	ldr	r3, [pc, #96]	; (22c7c <_Balloc+0x78>)
   22c1c:	2166      	movs	r1, #102	; 0x66
   22c1e:	4818      	ldr	r0, [pc, #96]	; (22c80 <_Balloc+0x7c>)
   22c20:	f7fe f8a8 	bl	20d74 <__assert_func>
   22c24:	e9c0 6601 	strd	r6, r6, [r0, #4]
   22c28:	6006      	str	r6, [r0, #0]
   22c2a:	60c6      	str	r6, [r0, #12]
   22c2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   22c2e:	68f3      	ldr	r3, [r6, #12]
   22c30:	b183      	cbz	r3, 22c54 <_Balloc+0x50>
   22c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22c34:	68db      	ldr	r3, [r3, #12]
   22c36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   22c3a:	b9b8      	cbnz	r0, 22c6c <_Balloc+0x68>
   22c3c:	2101      	movs	r1, #1
   22c3e:	4620      	mov	r0, r4
   22c40:	fa01 f605 	lsl.w	r6, r1, r5
   22c44:	1d72      	adds	r2, r6, #5
   22c46:	0092      	lsls	r2, r2, #2
   22c48:	f007 f838 	bl	29cbc <_calloc_r>
   22c4c:	b160      	cbz	r0, 22c68 <_Balloc+0x64>
   22c4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   22c52:	e00e      	b.n	22c72 <_Balloc+0x6e>
   22c54:	2221      	movs	r2, #33	; 0x21
   22c56:	2104      	movs	r1, #4
   22c58:	4620      	mov	r0, r4
   22c5a:	f007 f82f 	bl	29cbc <_calloc_r>
   22c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22c60:	60f0      	str	r0, [r6, #12]
   22c62:	68db      	ldr	r3, [r3, #12]
   22c64:	2b00      	cmp	r3, #0
   22c66:	d1e4      	bne.n	22c32 <_Balloc+0x2e>
   22c68:	2000      	movs	r0, #0
   22c6a:	bd70      	pop	{r4, r5, r6, pc}
   22c6c:	6802      	ldr	r2, [r0, #0]
   22c6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   22c72:	2300      	movs	r3, #0
   22c74:	e9c0 3303 	strd	r3, r3, [r0, #12]
   22c78:	e7f7      	b.n	22c6a <_Balloc+0x66>
   22c7a:	bf00      	nop
   22c7c:	0002d23d 	.word	0x0002d23d
   22c80:	0002d3dc 	.word	0x0002d3dc

00022c84 <_Bfree>:
   22c84:	b570      	push	{r4, r5, r6, lr}
   22c86:	6a46      	ldr	r6, [r0, #36]	; 0x24
   22c88:	4605      	mov	r5, r0
   22c8a:	460c      	mov	r4, r1
   22c8c:	b976      	cbnz	r6, 22cac <_Bfree+0x28>
   22c8e:	2010      	movs	r0, #16
   22c90:	f7fe f8a0 	bl	20dd4 <malloc>
   22c94:	4602      	mov	r2, r0
   22c96:	6268      	str	r0, [r5, #36]	; 0x24
   22c98:	b920      	cbnz	r0, 22ca4 <_Bfree+0x20>
   22c9a:	4b09      	ldr	r3, [pc, #36]	; (22cc0 <_Bfree+0x3c>)
   22c9c:	218a      	movs	r1, #138	; 0x8a
   22c9e:	4809      	ldr	r0, [pc, #36]	; (22cc4 <_Bfree+0x40>)
   22ca0:	f7fe f868 	bl	20d74 <__assert_func>
   22ca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   22ca8:	6006      	str	r6, [r0, #0]
   22caa:	60c6      	str	r6, [r0, #12]
   22cac:	b13c      	cbz	r4, 22cbe <_Bfree+0x3a>
   22cae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   22cb0:	6862      	ldr	r2, [r4, #4]
   22cb2:	68db      	ldr	r3, [r3, #12]
   22cb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   22cb8:	6021      	str	r1, [r4, #0]
   22cba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   22cbe:	bd70      	pop	{r4, r5, r6, pc}
   22cc0:	0002d23d 	.word	0x0002d23d
   22cc4:	0002d3dc 	.word	0x0002d3dc

00022cc8 <__multadd>:
   22cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ccc:	4607      	mov	r7, r0
   22cce:	4698      	mov	r8, r3
   22cd0:	460c      	mov	r4, r1
   22cd2:	690e      	ldr	r6, [r1, #16]
   22cd4:	f101 0014 	add.w	r0, r1, #20
   22cd8:	2300      	movs	r3, #0
   22cda:	6805      	ldr	r5, [r0, #0]
   22cdc:	3301      	adds	r3, #1
   22cde:	b2a9      	uxth	r1, r5
   22ce0:	429e      	cmp	r6, r3
   22ce2:	ea4f 4515 	mov.w	r5, r5, lsr #16
   22ce6:	fb02 8101 	mla	r1, r2, r1, r8
   22cea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   22cee:	b289      	uxth	r1, r1
   22cf0:	fb02 c505 	mla	r5, r2, r5, ip
   22cf4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   22cf8:	ea4f 4815 	mov.w	r8, r5, lsr #16
   22cfc:	f840 1b04 	str.w	r1, [r0], #4
   22d00:	dceb      	bgt.n	22cda <__multadd+0x12>
   22d02:	f1b8 0f00 	cmp.w	r8, #0
   22d06:	d022      	beq.n	22d4e <__multadd+0x86>
   22d08:	68a3      	ldr	r3, [r4, #8]
   22d0a:	42b3      	cmp	r3, r6
   22d0c:	dc19      	bgt.n	22d42 <__multadd+0x7a>
   22d0e:	6861      	ldr	r1, [r4, #4]
   22d10:	4638      	mov	r0, r7
   22d12:	3101      	adds	r1, #1
   22d14:	f7ff ff76 	bl	22c04 <_Balloc>
   22d18:	4605      	mov	r5, r0
   22d1a:	b928      	cbnz	r0, 22d28 <__multadd+0x60>
   22d1c:	4602      	mov	r2, r0
   22d1e:	4b0d      	ldr	r3, [pc, #52]	; (22d54 <__multadd+0x8c>)
   22d20:	21b5      	movs	r1, #181	; 0xb5
   22d22:	480d      	ldr	r0, [pc, #52]	; (22d58 <__multadd+0x90>)
   22d24:	f7fe f826 	bl	20d74 <__assert_func>
   22d28:	6922      	ldr	r2, [r4, #16]
   22d2a:	f104 010c 	add.w	r1, r4, #12
   22d2e:	300c      	adds	r0, #12
   22d30:	3202      	adds	r2, #2
   22d32:	0092      	lsls	r2, r2, #2
   22d34:	f006 fb9d 	bl	29472 <memcpy>
   22d38:	4621      	mov	r1, r4
   22d3a:	462c      	mov	r4, r5
   22d3c:	4638      	mov	r0, r7
   22d3e:	f7ff ffa1 	bl	22c84 <_Bfree>
   22d42:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   22d46:	3601      	adds	r6, #1
   22d48:	f8c3 8014 	str.w	r8, [r3, #20]
   22d4c:	6126      	str	r6, [r4, #16]
   22d4e:	4620      	mov	r0, r4
   22d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22d54:	0002d3c5 	.word	0x0002d3c5
   22d58:	0002d3dc 	.word	0x0002d3dc

00022d5c <__i2b>:
   22d5c:	b510      	push	{r4, lr}
   22d5e:	460c      	mov	r4, r1
   22d60:	2101      	movs	r1, #1
   22d62:	f7ff ff4f 	bl	22c04 <_Balloc>
   22d66:	4602      	mov	r2, r0
   22d68:	b928      	cbnz	r0, 22d76 <__i2b+0x1a>
   22d6a:	4b05      	ldr	r3, [pc, #20]	; (22d80 <__i2b+0x24>)
   22d6c:	f44f 71a0 	mov.w	r1, #320	; 0x140
   22d70:	4804      	ldr	r0, [pc, #16]	; (22d84 <__i2b+0x28>)
   22d72:	f7fd ffff 	bl	20d74 <__assert_func>
   22d76:	2301      	movs	r3, #1
   22d78:	6144      	str	r4, [r0, #20]
   22d7a:	6103      	str	r3, [r0, #16]
   22d7c:	bd10      	pop	{r4, pc}
   22d7e:	bf00      	nop
   22d80:	0002d3c5 	.word	0x0002d3c5
   22d84:	0002d3dc 	.word	0x0002d3dc

00022d88 <__multiply>:
   22d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d8c:	4614      	mov	r4, r2
   22d8e:	690a      	ldr	r2, [r1, #16]
   22d90:	460d      	mov	r5, r1
   22d92:	b085      	sub	sp, #20
   22d94:	6923      	ldr	r3, [r4, #16]
   22d96:	429a      	cmp	r2, r3
   22d98:	bfbe      	ittt	lt
   22d9a:	460b      	movlt	r3, r1
   22d9c:	4625      	movlt	r5, r4
   22d9e:	461c      	movlt	r4, r3
   22da0:	f8d5 a010 	ldr.w	sl, [r5, #16]
   22da4:	68ab      	ldr	r3, [r5, #8]
   22da6:	f8d4 9010 	ldr.w	r9, [r4, #16]
   22daa:	6869      	ldr	r1, [r5, #4]
   22dac:	eb0a 0709 	add.w	r7, sl, r9
   22db0:	42bb      	cmp	r3, r7
   22db2:	bfb8      	it	lt
   22db4:	3101      	addlt	r1, #1
   22db6:	f7ff ff25 	bl	22c04 <_Balloc>
   22dba:	b930      	cbnz	r0, 22dca <__multiply+0x42>
   22dbc:	4602      	mov	r2, r0
   22dbe:	4b43      	ldr	r3, [pc, #268]	; (22ecc <__multiply+0x144>)
   22dc0:	f240 115d 	movw	r1, #349	; 0x15d
   22dc4:	4842      	ldr	r0, [pc, #264]	; (22ed0 <__multiply+0x148>)
   22dc6:	f7fd ffd5 	bl	20d74 <__assert_func>
   22dca:	f100 0614 	add.w	r6, r0, #20
   22dce:	2200      	movs	r2, #0
   22dd0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
   22dd4:	4633      	mov	r3, r6
   22dd6:	4543      	cmp	r3, r8
   22dd8:	d31e      	bcc.n	22e18 <__multiply+0x90>
   22dda:	f105 0c14 	add.w	ip, r5, #20
   22dde:	f104 0314 	add.w	r3, r4, #20
   22de2:	f105 0115 	add.w	r1, r5, #21
   22de6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
   22dea:	eb03 0289 	add.w	r2, r3, r9, lsl #2
   22dee:	9202      	str	r2, [sp, #8]
   22df0:	ebac 0205 	sub.w	r2, ip, r5
   22df4:	3a15      	subs	r2, #21
   22df6:	f022 0203 	bic.w	r2, r2, #3
   22dfa:	3204      	adds	r2, #4
   22dfc:	458c      	cmp	ip, r1
   22dfe:	bf38      	it	cc
   22e00:	2204      	movcc	r2, #4
   22e02:	9201      	str	r2, [sp, #4]
   22e04:	9a02      	ldr	r2, [sp, #8]
   22e06:	9303      	str	r3, [sp, #12]
   22e08:	429a      	cmp	r2, r3
   22e0a:	d808      	bhi.n	22e1e <__multiply+0x96>
   22e0c:	2f00      	cmp	r7, #0
   22e0e:	dc57      	bgt.n	22ec0 <__multiply+0x138>
   22e10:	6107      	str	r7, [r0, #16]
   22e12:	b005      	add	sp, #20
   22e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e18:	f843 2b04 	str.w	r2, [r3], #4
   22e1c:	e7db      	b.n	22dd6 <__multiply+0x4e>
   22e1e:	f8b3 a000 	ldrh.w	sl, [r3]
   22e22:	f1ba 0f00 	cmp.w	sl, #0
   22e26:	d022      	beq.n	22e6e <__multiply+0xe6>
   22e28:	f105 0e14 	add.w	lr, r5, #20
   22e2c:	46b1      	mov	r9, r6
   22e2e:	2200      	movs	r2, #0
   22e30:	f85e 4b04 	ldr.w	r4, [lr], #4
   22e34:	f8d9 b000 	ldr.w	fp, [r9]
   22e38:	b2a1      	uxth	r1, r4
   22e3a:	45f4      	cmp	ip, lr
   22e3c:	fa1f fb8b 	uxth.w	fp, fp
   22e40:	ea4f 4414 	mov.w	r4, r4, lsr #16
   22e44:	fb0a b101 	mla	r1, sl, r1, fp
   22e48:	4411      	add	r1, r2
   22e4a:	f8d9 2000 	ldr.w	r2, [r9]
   22e4e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   22e52:	fb0a 2404 	mla	r4, sl, r4, r2
   22e56:	eb04 4411 	add.w	r4, r4, r1, lsr #16
   22e5a:	b289      	uxth	r1, r1
   22e5c:	ea4f 4214 	mov.w	r2, r4, lsr #16
   22e60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
   22e64:	f849 1b04 	str.w	r1, [r9], #4
   22e68:	d8e2      	bhi.n	22e30 <__multiply+0xa8>
   22e6a:	9901      	ldr	r1, [sp, #4]
   22e6c:	5072      	str	r2, [r6, r1]
   22e6e:	9a03      	ldr	r2, [sp, #12]
   22e70:	3304      	adds	r3, #4
   22e72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   22e76:	f1b9 0f00 	cmp.w	r9, #0
   22e7a:	d01f      	beq.n	22ebc <__multiply+0x134>
   22e7c:	6834      	ldr	r4, [r6, #0]
   22e7e:	f105 0114 	add.w	r1, r5, #20
   22e82:	46b6      	mov	lr, r6
   22e84:	f04f 0a00 	mov.w	sl, #0
   22e88:	880a      	ldrh	r2, [r1, #0]
   22e8a:	b2a4      	uxth	r4, r4
   22e8c:	f8be b002 	ldrh.w	fp, [lr, #2]
   22e90:	fb09 b202 	mla	r2, r9, r2, fp
   22e94:	4492      	add	sl, r2
   22e96:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
   22e9a:	f84e 4b04 	str.w	r4, [lr], #4
   22e9e:	f851 4b04 	ldr.w	r4, [r1], #4
   22ea2:	f8be 2000 	ldrh.w	r2, [lr]
   22ea6:	0c24      	lsrs	r4, r4, #16
   22ea8:	458c      	cmp	ip, r1
   22eaa:	fb09 2404 	mla	r4, r9, r4, r2
   22eae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
   22eb2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   22eb6:	d8e7      	bhi.n	22e88 <__multiply+0x100>
   22eb8:	9a01      	ldr	r2, [sp, #4]
   22eba:	50b4      	str	r4, [r6, r2]
   22ebc:	3604      	adds	r6, #4
   22ebe:	e7a1      	b.n	22e04 <__multiply+0x7c>
   22ec0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   22ec4:	2b00      	cmp	r3, #0
   22ec6:	d1a3      	bne.n	22e10 <__multiply+0x88>
   22ec8:	3f01      	subs	r7, #1
   22eca:	e79f      	b.n	22e0c <__multiply+0x84>
   22ecc:	0002d3c5 	.word	0x0002d3c5
   22ed0:	0002d3dc 	.word	0x0002d3dc

00022ed4 <__pow5mult>:
   22ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22ed8:	4615      	mov	r5, r2
   22eda:	f012 0203 	ands.w	r2, r2, #3
   22ede:	4606      	mov	r6, r0
   22ee0:	460f      	mov	r7, r1
   22ee2:	d007      	beq.n	22ef4 <__pow5mult+0x20>
   22ee4:	3a01      	subs	r2, #1
   22ee6:	4c25      	ldr	r4, [pc, #148]	; (22f7c <__pow5mult+0xa8>)
   22ee8:	2300      	movs	r3, #0
   22eea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   22eee:	f7ff feeb 	bl	22cc8 <__multadd>
   22ef2:	4607      	mov	r7, r0
   22ef4:	10ad      	asrs	r5, r5, #2
   22ef6:	d03d      	beq.n	22f74 <__pow5mult+0xa0>
   22ef8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   22efa:	b97c      	cbnz	r4, 22f1c <__pow5mult+0x48>
   22efc:	2010      	movs	r0, #16
   22efe:	f7fd ff69 	bl	20dd4 <malloc>
   22f02:	4602      	mov	r2, r0
   22f04:	6270      	str	r0, [r6, #36]	; 0x24
   22f06:	b928      	cbnz	r0, 22f14 <__pow5mult+0x40>
   22f08:	4b1d      	ldr	r3, [pc, #116]	; (22f80 <__pow5mult+0xac>)
   22f0a:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   22f0e:	481d      	ldr	r0, [pc, #116]	; (22f84 <__pow5mult+0xb0>)
   22f10:	f7fd ff30 	bl	20d74 <__assert_func>
   22f14:	e9c0 4401 	strd	r4, r4, [r0, #4]
   22f18:	6004      	str	r4, [r0, #0]
   22f1a:	60c4      	str	r4, [r0, #12]
   22f1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   22f20:	f8d8 4008 	ldr.w	r4, [r8, #8]
   22f24:	b94c      	cbnz	r4, 22f3a <__pow5mult+0x66>
   22f26:	f240 2171 	movw	r1, #625	; 0x271
   22f2a:	4630      	mov	r0, r6
   22f2c:	f7ff ff16 	bl	22d5c <__i2b>
   22f30:	2300      	movs	r3, #0
   22f32:	4604      	mov	r4, r0
   22f34:	f8c8 0008 	str.w	r0, [r8, #8]
   22f38:	6003      	str	r3, [r0, #0]
   22f3a:	f04f 0900 	mov.w	r9, #0
   22f3e:	07eb      	lsls	r3, r5, #31
   22f40:	d50a      	bpl.n	22f58 <__pow5mult+0x84>
   22f42:	4639      	mov	r1, r7
   22f44:	4622      	mov	r2, r4
   22f46:	4630      	mov	r0, r6
   22f48:	f7ff ff1e 	bl	22d88 <__multiply>
   22f4c:	4680      	mov	r8, r0
   22f4e:	4639      	mov	r1, r7
   22f50:	4630      	mov	r0, r6
   22f52:	4647      	mov	r7, r8
   22f54:	f7ff fe96 	bl	22c84 <_Bfree>
   22f58:	106d      	asrs	r5, r5, #1
   22f5a:	d00b      	beq.n	22f74 <__pow5mult+0xa0>
   22f5c:	6820      	ldr	r0, [r4, #0]
   22f5e:	b938      	cbnz	r0, 22f70 <__pow5mult+0x9c>
   22f60:	4622      	mov	r2, r4
   22f62:	4621      	mov	r1, r4
   22f64:	4630      	mov	r0, r6
   22f66:	f7ff ff0f 	bl	22d88 <__multiply>
   22f6a:	6020      	str	r0, [r4, #0]
   22f6c:	f8c0 9000 	str.w	r9, [r0]
   22f70:	4604      	mov	r4, r0
   22f72:	e7e4      	b.n	22f3e <__pow5mult+0x6a>
   22f74:	4638      	mov	r0, r7
   22f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22f7a:	bf00      	nop
   22f7c:	0002ad4c 	.word	0x0002ad4c
   22f80:	0002d23d 	.word	0x0002d23d
   22f84:	0002d3dc 	.word	0x0002d3dc

00022f88 <__lshift>:
   22f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22f8c:	460c      	mov	r4, r1
   22f8e:	4607      	mov	r7, r0
   22f90:	4691      	mov	r9, r2
   22f92:	ea4f 1a62 	mov.w	sl, r2, asr #5
   22f96:	6923      	ldr	r3, [r4, #16]
   22f98:	6849      	ldr	r1, [r1, #4]
   22f9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   22f9e:	68a3      	ldr	r3, [r4, #8]
   22fa0:	f108 0601 	add.w	r6, r8, #1
   22fa4:	42b3      	cmp	r3, r6
   22fa6:	db0b      	blt.n	22fc0 <__lshift+0x38>
   22fa8:	4638      	mov	r0, r7
   22faa:	f7ff fe2b 	bl	22c04 <_Balloc>
   22fae:	4605      	mov	r5, r0
   22fb0:	b948      	cbnz	r0, 22fc6 <__lshift+0x3e>
   22fb2:	4602      	mov	r2, r0
   22fb4:	4b28      	ldr	r3, [pc, #160]	; (23058 <__lshift+0xd0>)
   22fb6:	f240 11d9 	movw	r1, #473	; 0x1d9
   22fba:	4828      	ldr	r0, [pc, #160]	; (2305c <__lshift+0xd4>)
   22fbc:	f7fd feda 	bl	20d74 <__assert_func>
   22fc0:	3101      	adds	r1, #1
   22fc2:	005b      	lsls	r3, r3, #1
   22fc4:	e7ee      	b.n	22fa4 <__lshift+0x1c>
   22fc6:	2300      	movs	r3, #0
   22fc8:	f100 0114 	add.w	r1, r0, #20
   22fcc:	f100 0210 	add.w	r2, r0, #16
   22fd0:	4618      	mov	r0, r3
   22fd2:	4553      	cmp	r3, sl
   22fd4:	db33      	blt.n	2303e <__lshift+0xb6>
   22fd6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   22fda:	f104 0314 	add.w	r3, r4, #20
   22fde:	6920      	ldr	r0, [r4, #16]
   22fe0:	f019 091f 	ands.w	r9, r9, #31
   22fe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   22fe8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   22fec:	d02b      	beq.n	23046 <__lshift+0xbe>
   22fee:	f1c9 0e20 	rsb	lr, r9, #32
   22ff2:	468a      	mov	sl, r1
   22ff4:	2200      	movs	r2, #0
   22ff6:	6818      	ldr	r0, [r3, #0]
   22ff8:	fa00 f009 	lsl.w	r0, r0, r9
   22ffc:	4302      	orrs	r2, r0
   22ffe:	f84a 2b04 	str.w	r2, [sl], #4
   23002:	f853 2b04 	ldr.w	r2, [r3], #4
   23006:	459c      	cmp	ip, r3
   23008:	fa22 f20e 	lsr.w	r2, r2, lr
   2300c:	d8f3      	bhi.n	22ff6 <__lshift+0x6e>
   2300e:	ebac 0304 	sub.w	r3, ip, r4
   23012:	f104 0015 	add.w	r0, r4, #21
   23016:	3b15      	subs	r3, #21
   23018:	f023 0303 	bic.w	r3, r3, #3
   2301c:	3304      	adds	r3, #4
   2301e:	4584      	cmp	ip, r0
   23020:	bf38      	it	cc
   23022:	2304      	movcc	r3, #4
   23024:	50ca      	str	r2, [r1, r3]
   23026:	b10a      	cbz	r2, 2302c <__lshift+0xa4>
   23028:	f108 0602 	add.w	r6, r8, #2
   2302c:	3e01      	subs	r6, #1
   2302e:	4638      	mov	r0, r7
   23030:	4621      	mov	r1, r4
   23032:	612e      	str	r6, [r5, #16]
   23034:	f7ff fe26 	bl	22c84 <_Bfree>
   23038:	4628      	mov	r0, r5
   2303a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2303e:	3301      	adds	r3, #1
   23040:	f842 0f04 	str.w	r0, [r2, #4]!
   23044:	e7c5      	b.n	22fd2 <__lshift+0x4a>
   23046:	3904      	subs	r1, #4
   23048:	f853 2b04 	ldr.w	r2, [r3], #4
   2304c:	459c      	cmp	ip, r3
   2304e:	f841 2f04 	str.w	r2, [r1, #4]!
   23052:	d8f9      	bhi.n	23048 <__lshift+0xc0>
   23054:	e7ea      	b.n	2302c <__lshift+0xa4>
   23056:	bf00      	nop
   23058:	0002d3c5 	.word	0x0002d3c5
   2305c:	0002d3dc 	.word	0x0002d3dc

00023060 <__mdiff>:
   23060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23064:	460c      	mov	r4, r1
   23066:	4606      	mov	r6, r0
   23068:	4611      	mov	r1, r2
   2306a:	4692      	mov	sl, r2
   2306c:	4620      	mov	r0, r4
   2306e:	f006 fe09 	bl	29c84 <__mcmp>
   23072:	1e05      	subs	r5, r0, #0
   23074:	d110      	bne.n	23098 <__mdiff+0x38>
   23076:	4629      	mov	r1, r5
   23078:	4630      	mov	r0, r6
   2307a:	f7ff fdc3 	bl	22c04 <_Balloc>
   2307e:	b930      	cbnz	r0, 2308e <__mdiff+0x2e>
   23080:	4b3d      	ldr	r3, [pc, #244]	; (23178 <__mdiff+0x118>)
   23082:	4602      	mov	r2, r0
   23084:	f240 2132 	movw	r1, #562	; 0x232
   23088:	483c      	ldr	r0, [pc, #240]	; (2317c <__mdiff+0x11c>)
   2308a:	f7fd fe73 	bl	20d74 <__assert_func>
   2308e:	2301      	movs	r3, #1
   23090:	e9c0 3504 	strd	r3, r5, [r0, #16]
   23094:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23098:	bfa4      	itt	ge
   2309a:	4653      	movge	r3, sl
   2309c:	46a2      	movge	sl, r4
   2309e:	4630      	mov	r0, r6
   230a0:	bfa8      	it	ge
   230a2:	2500      	movge	r5, #0
   230a4:	f8da 1004 	ldr.w	r1, [sl, #4]
   230a8:	bfac      	ite	ge
   230aa:	461c      	movge	r4, r3
   230ac:	2501      	movlt	r5, #1
   230ae:	f7ff fda9 	bl	22c04 <_Balloc>
   230b2:	b920      	cbnz	r0, 230be <__mdiff+0x5e>
   230b4:	4b30      	ldr	r3, [pc, #192]	; (23178 <__mdiff+0x118>)
   230b6:	4602      	mov	r2, r0
   230b8:	f44f 7110 	mov.w	r1, #576	; 0x240
   230bc:	e7e4      	b.n	23088 <__mdiff+0x28>
   230be:	f8da 7010 	ldr.w	r7, [sl, #16]
   230c2:	f104 0914 	add.w	r9, r4, #20
   230c6:	6926      	ldr	r6, [r4, #16]
   230c8:	f100 0814 	add.w	r8, r0, #20
   230cc:	60c5      	str	r5, [r0, #12]
   230ce:	f10a 0514 	add.w	r5, sl, #20
   230d2:	f10a 0210 	add.w	r2, sl, #16
   230d6:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   230da:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   230de:	46c2      	mov	sl, r8
   230e0:	f04f 0c00 	mov.w	ip, #0
   230e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
   230e8:	f859 3b04 	ldr.w	r3, [r9], #4
   230ec:	fa1f f18b 	uxth.w	r1, fp
   230f0:	454e      	cmp	r6, r9
   230f2:	4461      	add	r1, ip
   230f4:	fa1f fc83 	uxth.w	ip, r3
   230f8:	ea4f 4313 	mov.w	r3, r3, lsr #16
   230fc:	eba1 010c 	sub.w	r1, r1, ip
   23100:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   23104:	eb03 4321 	add.w	r3, r3, r1, asr #16
   23108:	b289      	uxth	r1, r1
   2310a:	ea4f 4c23 	mov.w	ip, r3, asr #16
   2310e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   23112:	f84a 3b04 	str.w	r3, [sl], #4
   23116:	d8e5      	bhi.n	230e4 <__mdiff+0x84>
   23118:	1b33      	subs	r3, r6, r4
   2311a:	3415      	adds	r4, #21
   2311c:	3b15      	subs	r3, #21
   2311e:	f023 0303 	bic.w	r3, r3, #3
   23122:	3304      	adds	r3, #4
   23124:	42a6      	cmp	r6, r4
   23126:	bf38      	it	cc
   23128:	2304      	movcc	r3, #4
   2312a:	441d      	add	r5, r3
   2312c:	4443      	add	r3, r8
   2312e:	462c      	mov	r4, r5
   23130:	461e      	mov	r6, r3
   23132:	4574      	cmp	r4, lr
   23134:	d30e      	bcc.n	23154 <__mdiff+0xf4>
   23136:	f10e 0203 	add.w	r2, lr, #3
   2313a:	1b52      	subs	r2, r2, r5
   2313c:	3d03      	subs	r5, #3
   2313e:	f022 0203 	bic.w	r2, r2, #3
   23142:	45ae      	cmp	lr, r5
   23144:	bf38      	it	cc
   23146:	2200      	movcc	r2, #0
   23148:	441a      	add	r2, r3
   2314a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   2314e:	b18b      	cbz	r3, 23174 <__mdiff+0x114>
   23150:	6107      	str	r7, [r0, #16]
   23152:	e79f      	b.n	23094 <__mdiff+0x34>
   23154:	f854 8b04 	ldr.w	r8, [r4], #4
   23158:	fa1f f288 	uxth.w	r2, r8
   2315c:	4462      	add	r2, ip
   2315e:	1411      	asrs	r1, r2, #16
   23160:	b292      	uxth	r2, r2
   23162:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   23166:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   2316a:	ea4f 4c21 	mov.w	ip, r1, asr #16
   2316e:	f846 2b04 	str.w	r2, [r6], #4
   23172:	e7de      	b.n	23132 <__mdiff+0xd2>
   23174:	3f01      	subs	r7, #1
   23176:	e7e8      	b.n	2314a <__mdiff+0xea>
   23178:	0002d3c5 	.word	0x0002d3c5
   2317c:	0002d3dc 	.word	0x0002d3dc

00023180 <__d2b>:
   23180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23184:	4689      	mov	r9, r1
   23186:	2101      	movs	r1, #1
   23188:	4690      	mov	r8, r2
   2318a:	ec57 6b10 	vmov	r6, r7, d0
   2318e:	f7ff fd39 	bl	22c04 <_Balloc>
   23192:	4604      	mov	r4, r0
   23194:	b930      	cbnz	r0, 231a4 <__d2b+0x24>
   23196:	4602      	mov	r2, r0
   23198:	4b25      	ldr	r3, [pc, #148]	; (23230 <__d2b+0xb0>)
   2319a:	f240 310a 	movw	r1, #778	; 0x30a
   2319e:	4825      	ldr	r0, [pc, #148]	; (23234 <__d2b+0xb4>)
   231a0:	f7fd fde8 	bl	20d74 <__assert_func>
   231a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   231a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   231ac:	bb35      	cbnz	r5, 231fc <__d2b+0x7c>
   231ae:	2e00      	cmp	r6, #0
   231b0:	9301      	str	r3, [sp, #4]
   231b2:	d028      	beq.n	23206 <__d2b+0x86>
   231b4:	4668      	mov	r0, sp
   231b6:	9600      	str	r6, [sp, #0]
   231b8:	f006 fd34 	bl	29c24 <__lo0bits>
   231bc:	9900      	ldr	r1, [sp, #0]
   231be:	b300      	cbz	r0, 23202 <__d2b+0x82>
   231c0:	9a01      	ldr	r2, [sp, #4]
   231c2:	f1c0 0320 	rsb	r3, r0, #32
   231c6:	fa02 f303 	lsl.w	r3, r2, r3
   231ca:	40c2      	lsrs	r2, r0
   231cc:	430b      	orrs	r3, r1
   231ce:	9201      	str	r2, [sp, #4]
   231d0:	6163      	str	r3, [r4, #20]
   231d2:	9b01      	ldr	r3, [sp, #4]
   231d4:	2b00      	cmp	r3, #0
   231d6:	61a3      	str	r3, [r4, #24]
   231d8:	bf14      	ite	ne
   231da:	2202      	movne	r2, #2
   231dc:	2201      	moveq	r2, #1
   231de:	6122      	str	r2, [r4, #16]
   231e0:	b1d5      	cbz	r5, 23218 <__d2b+0x98>
   231e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   231e6:	4405      	add	r5, r0
   231e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   231ec:	f8c9 5000 	str.w	r5, [r9]
   231f0:	f8c8 0000 	str.w	r0, [r8]
   231f4:	4620      	mov	r0, r4
   231f6:	b003      	add	sp, #12
   231f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   231fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   23200:	e7d5      	b.n	231ae <__d2b+0x2e>
   23202:	6161      	str	r1, [r4, #20]
   23204:	e7e5      	b.n	231d2 <__d2b+0x52>
   23206:	a801      	add	r0, sp, #4
   23208:	f006 fd0c 	bl	29c24 <__lo0bits>
   2320c:	9b01      	ldr	r3, [sp, #4]
   2320e:	2201      	movs	r2, #1
   23210:	3020      	adds	r0, #32
   23212:	6163      	str	r3, [r4, #20]
   23214:	6122      	str	r2, [r4, #16]
   23216:	e7e3      	b.n	231e0 <__d2b+0x60>
   23218:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2321c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   23220:	f8c9 0000 	str.w	r0, [r9]
   23224:	6918      	ldr	r0, [r3, #16]
   23226:	f006 fcdd 	bl	29be4 <__hi0bits>
   2322a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2322e:	e7df      	b.n	231f0 <__d2b+0x70>
   23230:	0002d3c5 	.word	0x0002d3c5
   23234:	0002d3dc 	.word	0x0002d3dc

00023238 <_svfiprintf_r>:
   23238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2323c:	4698      	mov	r8, r3
   2323e:	898b      	ldrh	r3, [r1, #12]
   23240:	b09d      	sub	sp, #116	; 0x74
   23242:	4607      	mov	r7, r0
   23244:	061b      	lsls	r3, r3, #24
   23246:	460d      	mov	r5, r1
   23248:	4614      	mov	r4, r2
   2324a:	d50e      	bpl.n	2326a <_svfiprintf_r+0x32>
   2324c:	690b      	ldr	r3, [r1, #16]
   2324e:	b963      	cbnz	r3, 2326a <_svfiprintf_r+0x32>
   23250:	2140      	movs	r1, #64	; 0x40
   23252:	f7fe f89f 	bl	21394 <_malloc_r>
   23256:	6028      	str	r0, [r5, #0]
   23258:	6128      	str	r0, [r5, #16]
   2325a:	b920      	cbnz	r0, 23266 <_svfiprintf_r+0x2e>
   2325c:	230c      	movs	r3, #12
   2325e:	603b      	str	r3, [r7, #0]
   23260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23264:	e0d1      	b.n	2340a <_svfiprintf_r+0x1d2>
   23266:	2340      	movs	r3, #64	; 0x40
   23268:	616b      	str	r3, [r5, #20]
   2326a:	2300      	movs	r3, #0
   2326c:	f8cd 800c 	str.w	r8, [sp, #12]
   23270:	f04f 0901 	mov.w	r9, #1
   23274:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 23424 <_svfiprintf_r+0x1ec>
   23278:	9309      	str	r3, [sp, #36]	; 0x24
   2327a:	2320      	movs	r3, #32
   2327c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   23280:	2330      	movs	r3, #48	; 0x30
   23282:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   23286:	4623      	mov	r3, r4
   23288:	469a      	mov	sl, r3
   2328a:	f813 2b01 	ldrb.w	r2, [r3], #1
   2328e:	b10a      	cbz	r2, 23294 <_svfiprintf_r+0x5c>
   23290:	2a25      	cmp	r2, #37	; 0x25
   23292:	d1f9      	bne.n	23288 <_svfiprintf_r+0x50>
   23294:	ebba 0b04 	subs.w	fp, sl, r4
   23298:	d00b      	beq.n	232b2 <_svfiprintf_r+0x7a>
   2329a:	465b      	mov	r3, fp
   2329c:	4622      	mov	r2, r4
   2329e:	4629      	mov	r1, r5
   232a0:	4638      	mov	r0, r7
   232a2:	f006 fd40 	bl	29d26 <__ssputs_r>
   232a6:	3001      	adds	r0, #1
   232a8:	f000 80aa 	beq.w	23400 <_svfiprintf_r+0x1c8>
   232ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   232ae:	445a      	add	r2, fp
   232b0:	9209      	str	r2, [sp, #36]	; 0x24
   232b2:	f89a 3000 	ldrb.w	r3, [sl]
   232b6:	2b00      	cmp	r3, #0
   232b8:	f000 80a2 	beq.w	23400 <_svfiprintf_r+0x1c8>
   232bc:	2300      	movs	r3, #0
   232be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   232c2:	f10a 0a01 	add.w	sl, sl, #1
   232c6:	9304      	str	r3, [sp, #16]
   232c8:	9307      	str	r3, [sp, #28]
   232ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   232ce:	931a      	str	r3, [sp, #104]	; 0x68
   232d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
   232d4:	4654      	mov	r4, sl
   232d6:	2205      	movs	r2, #5
   232d8:	4852      	ldr	r0, [pc, #328]	; (23424 <_svfiprintf_r+0x1ec>)
   232da:	f814 1b01 	ldrb.w	r1, [r4], #1
   232de:	f006 f8ac 	bl	2943a <memchr>
   232e2:	9a04      	ldr	r2, [sp, #16]
   232e4:	b9d8      	cbnz	r0, 2331e <_svfiprintf_r+0xe6>
   232e6:	06d0      	lsls	r0, r2, #27
   232e8:	bf44      	itt	mi
   232ea:	2320      	movmi	r3, #32
   232ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   232f0:	0711      	lsls	r1, r2, #28
   232f2:	bf44      	itt	mi
   232f4:	232b      	movmi	r3, #43	; 0x2b
   232f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   232fa:	f89a 3000 	ldrb.w	r3, [sl]
   232fe:	2b2a      	cmp	r3, #42	; 0x2a
   23300:	d015      	beq.n	2332e <_svfiprintf_r+0xf6>
   23302:	9a07      	ldr	r2, [sp, #28]
   23304:	4654      	mov	r4, sl
   23306:	2000      	movs	r0, #0
   23308:	f04f 0c0a 	mov.w	ip, #10
   2330c:	4621      	mov	r1, r4
   2330e:	f811 3b01 	ldrb.w	r3, [r1], #1
   23312:	3b30      	subs	r3, #48	; 0x30
   23314:	2b09      	cmp	r3, #9
   23316:	d94e      	bls.n	233b6 <_svfiprintf_r+0x17e>
   23318:	b1b0      	cbz	r0, 23348 <_svfiprintf_r+0x110>
   2331a:	9207      	str	r2, [sp, #28]
   2331c:	e014      	b.n	23348 <_svfiprintf_r+0x110>
   2331e:	eba0 0308 	sub.w	r3, r0, r8
   23322:	46a2      	mov	sl, r4
   23324:	fa09 f303 	lsl.w	r3, r9, r3
   23328:	4313      	orrs	r3, r2
   2332a:	9304      	str	r3, [sp, #16]
   2332c:	e7d2      	b.n	232d4 <_svfiprintf_r+0x9c>
   2332e:	9b03      	ldr	r3, [sp, #12]
   23330:	1d19      	adds	r1, r3, #4
   23332:	681b      	ldr	r3, [r3, #0]
   23334:	2b00      	cmp	r3, #0
   23336:	9103      	str	r1, [sp, #12]
   23338:	bfbb      	ittet	lt
   2333a:	425b      	neglt	r3, r3
   2333c:	f042 0202 	orrlt.w	r2, r2, #2
   23340:	9307      	strge	r3, [sp, #28]
   23342:	9307      	strlt	r3, [sp, #28]
   23344:	bfb8      	it	lt
   23346:	9204      	strlt	r2, [sp, #16]
   23348:	7823      	ldrb	r3, [r4, #0]
   2334a:	2b2e      	cmp	r3, #46	; 0x2e
   2334c:	d10c      	bne.n	23368 <_svfiprintf_r+0x130>
   2334e:	7863      	ldrb	r3, [r4, #1]
   23350:	2b2a      	cmp	r3, #42	; 0x2a
   23352:	d135      	bne.n	233c0 <_svfiprintf_r+0x188>
   23354:	9b03      	ldr	r3, [sp, #12]
   23356:	3402      	adds	r4, #2
   23358:	1d1a      	adds	r2, r3, #4
   2335a:	681b      	ldr	r3, [r3, #0]
   2335c:	2b00      	cmp	r3, #0
   2335e:	9203      	str	r2, [sp, #12]
   23360:	bfb8      	it	lt
   23362:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   23366:	9305      	str	r3, [sp, #20]
   23368:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 23434 <_svfiprintf_r+0x1fc>
   2336c:	2203      	movs	r2, #3
   2336e:	7821      	ldrb	r1, [r4, #0]
   23370:	4650      	mov	r0, sl
   23372:	f006 f862 	bl	2943a <memchr>
   23376:	b140      	cbz	r0, 2338a <_svfiprintf_r+0x152>
   23378:	2340      	movs	r3, #64	; 0x40
   2337a:	eba0 000a 	sub.w	r0, r0, sl
   2337e:	3401      	adds	r4, #1
   23380:	fa03 f000 	lsl.w	r0, r3, r0
   23384:	9b04      	ldr	r3, [sp, #16]
   23386:	4303      	orrs	r3, r0
   23388:	9304      	str	r3, [sp, #16]
   2338a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2338e:	2206      	movs	r2, #6
   23390:	4825      	ldr	r0, [pc, #148]	; (23428 <_svfiprintf_r+0x1f0>)
   23392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   23396:	f006 f850 	bl	2943a <memchr>
   2339a:	2800      	cmp	r0, #0
   2339c:	d038      	beq.n	23410 <_svfiprintf_r+0x1d8>
   2339e:	4b23      	ldr	r3, [pc, #140]	; (2342c <_svfiprintf_r+0x1f4>)
   233a0:	bb1b      	cbnz	r3, 233ea <_svfiprintf_r+0x1b2>
   233a2:	9b03      	ldr	r3, [sp, #12]
   233a4:	3307      	adds	r3, #7
   233a6:	f023 0307 	bic.w	r3, r3, #7
   233aa:	3308      	adds	r3, #8
   233ac:	9303      	str	r3, [sp, #12]
   233ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   233b0:	4433      	add	r3, r6
   233b2:	9309      	str	r3, [sp, #36]	; 0x24
   233b4:	e767      	b.n	23286 <_svfiprintf_r+0x4e>
   233b6:	fb0c 3202 	mla	r2, ip, r2, r3
   233ba:	460c      	mov	r4, r1
   233bc:	2001      	movs	r0, #1
   233be:	e7a5      	b.n	2330c <_svfiprintf_r+0xd4>
   233c0:	2300      	movs	r3, #0
   233c2:	3401      	adds	r4, #1
   233c4:	f04f 0c0a 	mov.w	ip, #10
   233c8:	4619      	mov	r1, r3
   233ca:	9305      	str	r3, [sp, #20]
   233cc:	4620      	mov	r0, r4
   233ce:	f810 2b01 	ldrb.w	r2, [r0], #1
   233d2:	3a30      	subs	r2, #48	; 0x30
   233d4:	2a09      	cmp	r2, #9
   233d6:	d903      	bls.n	233e0 <_svfiprintf_r+0x1a8>
   233d8:	2b00      	cmp	r3, #0
   233da:	d0c5      	beq.n	23368 <_svfiprintf_r+0x130>
   233dc:	9105      	str	r1, [sp, #20]
   233de:	e7c3      	b.n	23368 <_svfiprintf_r+0x130>
   233e0:	fb0c 2101 	mla	r1, ip, r1, r2
   233e4:	4604      	mov	r4, r0
   233e6:	2301      	movs	r3, #1
   233e8:	e7f0      	b.n	233cc <_svfiprintf_r+0x194>
   233ea:	ab03      	add	r3, sp, #12
   233ec:	462a      	mov	r2, r5
   233ee:	a904      	add	r1, sp, #16
   233f0:	4638      	mov	r0, r7
   233f2:	9300      	str	r3, [sp, #0]
   233f4:	4b0e      	ldr	r3, [pc, #56]	; (23430 <_svfiprintf_r+0x1f8>)
   233f6:	f7fe f957 	bl	216a8 <_printf_float>
   233fa:	1c42      	adds	r2, r0, #1
   233fc:	4606      	mov	r6, r0
   233fe:	d1d6      	bne.n	233ae <_svfiprintf_r+0x176>
   23400:	89ab      	ldrh	r3, [r5, #12]
   23402:	065b      	lsls	r3, r3, #25
   23404:	f53f af2c 	bmi.w	23260 <_svfiprintf_r+0x28>
   23408:	9809      	ldr	r0, [sp, #36]	; 0x24
   2340a:	b01d      	add	sp, #116	; 0x74
   2340c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23410:	ab03      	add	r3, sp, #12
   23412:	462a      	mov	r2, r5
   23414:	a904      	add	r1, sp, #16
   23416:	4638      	mov	r0, r7
   23418:	9300      	str	r3, [sp, #0]
   2341a:	4b05      	ldr	r3, [pc, #20]	; (23430 <_svfiprintf_r+0x1f8>)
   2341c:	f7fe fb7a 	bl	21b14 <_printf_i>
   23420:	e7eb      	b.n	233fa <_svfiprintf_r+0x1c2>
   23422:	bf00      	nop
   23424:	0002d1fe 	.word	0x0002d1fe
   23428:	0002d208 	.word	0x0002d208
   2342c:	000216a9 	.word	0x000216a9
   23430:	00029d27 	.word	0x00029d27
   23434:	0002d204 	.word	0x0002d204

00023438 <__ssvfiscanf_r>:
   23438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2343c:	460c      	mov	r4, r1
   2343e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   23442:	2100      	movs	r1, #0
   23444:	4606      	mov	r6, r0
   23446:	f10d 0804 	add.w	r8, sp, #4
   2344a:	4fb4      	ldr	r7, [pc, #720]	; (2371c <__ssvfiscanf_r+0x2e4>)
   2344c:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 23728 <__ssvfiscanf_r+0x2f0>
   23450:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   23454:	9300      	str	r3, [sp, #0]
   23456:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   2345a:	49b1      	ldr	r1, [pc, #708]	; (23720 <__ssvfiscanf_r+0x2e8>)
   2345c:	91a0      	str	r1, [sp, #640]	; 0x280
   2345e:	49b1      	ldr	r1, [pc, #708]	; (23724 <__ssvfiscanf_r+0x2ec>)
   23460:	91a1      	str	r1, [sp, #644]	; 0x284
   23462:	f892 a000 	ldrb.w	sl, [r2]
   23466:	f1ba 0f00 	cmp.w	sl, #0
   2346a:	f000 8154 	beq.w	23716 <__ssvfiscanf_r+0x2de>
   2346e:	f81a 3007 	ldrb.w	r3, [sl, r7]
   23472:	1c55      	adds	r5, r2, #1
   23474:	f013 0308 	ands.w	r3, r3, #8
   23478:	d019      	beq.n	234ae <__ssvfiscanf_r+0x76>
   2347a:	6863      	ldr	r3, [r4, #4]
   2347c:	2b00      	cmp	r3, #0
   2347e:	dd0f      	ble.n	234a0 <__ssvfiscanf_r+0x68>
   23480:	6823      	ldr	r3, [r4, #0]
   23482:	781a      	ldrb	r2, [r3, #0]
   23484:	5cba      	ldrb	r2, [r7, r2]
   23486:	0712      	lsls	r2, r2, #28
   23488:	d401      	bmi.n	2348e <__ssvfiscanf_r+0x56>
   2348a:	462a      	mov	r2, r5
   2348c:	e7e9      	b.n	23462 <__ssvfiscanf_r+0x2a>
   2348e:	9a45      	ldr	r2, [sp, #276]	; 0x114
   23490:	3301      	adds	r3, #1
   23492:	3201      	adds	r2, #1
   23494:	6023      	str	r3, [r4, #0]
   23496:	9245      	str	r2, [sp, #276]	; 0x114
   23498:	6862      	ldr	r2, [r4, #4]
   2349a:	3a01      	subs	r2, #1
   2349c:	6062      	str	r2, [r4, #4]
   2349e:	e7ec      	b.n	2347a <__ssvfiscanf_r+0x42>
   234a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   234a2:	4621      	mov	r1, r4
   234a4:	4630      	mov	r0, r6
   234a6:	4798      	blx	r3
   234a8:	2800      	cmp	r0, #0
   234aa:	d0e9      	beq.n	23480 <__ssvfiscanf_r+0x48>
   234ac:	e7ed      	b.n	2348a <__ssvfiscanf_r+0x52>
   234ae:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   234b2:	f040 8086 	bne.w	235c2 <__ssvfiscanf_r+0x18a>
   234b6:	9341      	str	r3, [sp, #260]	; 0x104
   234b8:	9343      	str	r3, [sp, #268]	; 0x10c
   234ba:	7853      	ldrb	r3, [r2, #1]
   234bc:	2b2a      	cmp	r3, #42	; 0x2a
   234be:	bf04      	itt	eq
   234c0:	2310      	moveq	r3, #16
   234c2:	1c95      	addeq	r5, r2, #2
   234c4:	f04f 020a 	mov.w	r2, #10
   234c8:	bf08      	it	eq
   234ca:	9341      	streq	r3, [sp, #260]	; 0x104
   234cc:	46ab      	mov	fp, r5
   234ce:	f81b 1b01 	ldrb.w	r1, [fp], #1
   234d2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   234d6:	2b09      	cmp	r3, #9
   234d8:	d91d      	bls.n	23516 <__ssvfiscanf_r+0xde>
   234da:	2203      	movs	r2, #3
   234dc:	4892      	ldr	r0, [pc, #584]	; (23728 <__ssvfiscanf_r+0x2f0>)
   234de:	f005 ffac 	bl	2943a <memchr>
   234e2:	b140      	cbz	r0, 234f6 <__ssvfiscanf_r+0xbe>
   234e4:	2301      	movs	r3, #1
   234e6:	eba0 0009 	sub.w	r0, r0, r9
   234ea:	465d      	mov	r5, fp
   234ec:	fa03 f000 	lsl.w	r0, r3, r0
   234f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
   234f2:	4318      	orrs	r0, r3
   234f4:	9041      	str	r0, [sp, #260]	; 0x104
   234f6:	f815 3b01 	ldrb.w	r3, [r5], #1
   234fa:	2b78      	cmp	r3, #120	; 0x78
   234fc:	d806      	bhi.n	2350c <__ssvfiscanf_r+0xd4>
   234fe:	2b57      	cmp	r3, #87	; 0x57
   23500:	d810      	bhi.n	23524 <__ssvfiscanf_r+0xec>
   23502:	2b25      	cmp	r3, #37	; 0x25
   23504:	d05d      	beq.n	235c2 <__ssvfiscanf_r+0x18a>
   23506:	d857      	bhi.n	235b8 <__ssvfiscanf_r+0x180>
   23508:	2b00      	cmp	r3, #0
   2350a:	d075      	beq.n	235f8 <__ssvfiscanf_r+0x1c0>
   2350c:	2303      	movs	r3, #3
   2350e:	9347      	str	r3, [sp, #284]	; 0x11c
   23510:	230a      	movs	r3, #10
   23512:	9342      	str	r3, [sp, #264]	; 0x108
   23514:	e082      	b.n	2361c <__ssvfiscanf_r+0x1e4>
   23516:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   23518:	465d      	mov	r5, fp
   2351a:	fb02 1303 	mla	r3, r2, r3, r1
   2351e:	3b30      	subs	r3, #48	; 0x30
   23520:	9343      	str	r3, [sp, #268]	; 0x10c
   23522:	e7d3      	b.n	234cc <__ssvfiscanf_r+0x94>
   23524:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   23528:	2a20      	cmp	r2, #32
   2352a:	d8ef      	bhi.n	2350c <__ssvfiscanf_r+0xd4>
   2352c:	a101      	add	r1, pc, #4	; (adr r1, 23534 <__ssvfiscanf_r+0xfc>)
   2352e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   23532:	bf00      	nop
   23534:	00023607 	.word	0x00023607
   23538:	0002350d 	.word	0x0002350d
   2353c:	0002350d 	.word	0x0002350d
   23540:	00023665 	.word	0x00023665
   23544:	0002350d 	.word	0x0002350d
   23548:	0002350d 	.word	0x0002350d
   2354c:	0002350d 	.word	0x0002350d
   23550:	0002350d 	.word	0x0002350d
   23554:	0002350d 	.word	0x0002350d
   23558:	0002350d 	.word	0x0002350d
   2355c:	0002350d 	.word	0x0002350d
   23560:	0002367b 	.word	0x0002367b
   23564:	00023651 	.word	0x00023651
   23568:	000235bf 	.word	0x000235bf
   2356c:	000235bf 	.word	0x000235bf
   23570:	000235bf 	.word	0x000235bf
   23574:	0002350d 	.word	0x0002350d
   23578:	00023655 	.word	0x00023655
   2357c:	0002350d 	.word	0x0002350d
   23580:	0002350d 	.word	0x0002350d
   23584:	0002350d 	.word	0x0002350d
   23588:	0002350d 	.word	0x0002350d
   2358c:	0002368b 	.word	0x0002368b
   23590:	0002365d 	.word	0x0002365d
   23594:	000235ff 	.word	0x000235ff
   23598:	0002350d 	.word	0x0002350d
   2359c:	0002350d 	.word	0x0002350d
   235a0:	00023687 	.word	0x00023687
   235a4:	0002350d 	.word	0x0002350d
   235a8:	00023651 	.word	0x00023651
   235ac:	0002350d 	.word	0x0002350d
   235b0:	0002350d 	.word	0x0002350d
   235b4:	00023607 	.word	0x00023607
   235b8:	3b45      	subs	r3, #69	; 0x45
   235ba:	2b02      	cmp	r3, #2
   235bc:	d8a6      	bhi.n	2350c <__ssvfiscanf_r+0xd4>
   235be:	2305      	movs	r3, #5
   235c0:	e02b      	b.n	2361a <__ssvfiscanf_r+0x1e2>
   235c2:	6863      	ldr	r3, [r4, #4]
   235c4:	2b00      	cmp	r3, #0
   235c6:	dd0d      	ble.n	235e4 <__ssvfiscanf_r+0x1ac>
   235c8:	6823      	ldr	r3, [r4, #0]
   235ca:	781a      	ldrb	r2, [r3, #0]
   235cc:	4552      	cmp	r2, sl
   235ce:	f040 80a2 	bne.w	23716 <__ssvfiscanf_r+0x2de>
   235d2:	3301      	adds	r3, #1
   235d4:	6862      	ldr	r2, [r4, #4]
   235d6:	6023      	str	r3, [r4, #0]
   235d8:	3a01      	subs	r2, #1
   235da:	9b45      	ldr	r3, [sp, #276]	; 0x114
   235dc:	6062      	str	r2, [r4, #4]
   235de:	3301      	adds	r3, #1
   235e0:	9345      	str	r3, [sp, #276]	; 0x114
   235e2:	e752      	b.n	2348a <__ssvfiscanf_r+0x52>
   235e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   235e6:	4621      	mov	r1, r4
   235e8:	4630      	mov	r0, r6
   235ea:	4798      	blx	r3
   235ec:	2800      	cmp	r0, #0
   235ee:	d0eb      	beq.n	235c8 <__ssvfiscanf_r+0x190>
   235f0:	9844      	ldr	r0, [sp, #272]	; 0x110
   235f2:	2800      	cmp	r0, #0
   235f4:	f040 8085 	bne.w	23702 <__ssvfiscanf_r+0x2ca>
   235f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   235fc:	e087      	b.n	2370e <__ssvfiscanf_r+0x2d6>
   235fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
   23600:	f042 0220 	orr.w	r2, r2, #32
   23604:	9241      	str	r2, [sp, #260]	; 0x104
   23606:	9a41      	ldr	r2, [sp, #260]	; 0x104
   23608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2360c:	9241      	str	r2, [sp, #260]	; 0x104
   2360e:	2210      	movs	r2, #16
   23610:	2b6f      	cmp	r3, #111	; 0x6f
   23612:	9242      	str	r2, [sp, #264]	; 0x108
   23614:	bf34      	ite	cc
   23616:	2303      	movcc	r3, #3
   23618:	2304      	movcs	r3, #4
   2361a:	9347      	str	r3, [sp, #284]	; 0x11c
   2361c:	6863      	ldr	r3, [r4, #4]
   2361e:	2b00      	cmp	r3, #0
   23620:	dd42      	ble.n	236a8 <__ssvfiscanf_r+0x270>
   23622:	9b41      	ldr	r3, [sp, #260]	; 0x104
   23624:	0659      	lsls	r1, r3, #25
   23626:	d404      	bmi.n	23632 <__ssvfiscanf_r+0x1fa>
   23628:	6823      	ldr	r3, [r4, #0]
   2362a:	781a      	ldrb	r2, [r3, #0]
   2362c:	5cba      	ldrb	r2, [r7, r2]
   2362e:	0712      	lsls	r2, r2, #28
   23630:	d441      	bmi.n	236b6 <__ssvfiscanf_r+0x27e>
   23632:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   23634:	2b02      	cmp	r3, #2
   23636:	dc50      	bgt.n	236da <__ssvfiscanf_r+0x2a2>
   23638:	466b      	mov	r3, sp
   2363a:	4622      	mov	r2, r4
   2363c:	a941      	add	r1, sp, #260	; 0x104
   2363e:	4630      	mov	r0, r6
   23640:	f000 f876 	bl	23730 <_scanf_chars>
   23644:	2801      	cmp	r0, #1
   23646:	d066      	beq.n	23716 <__ssvfiscanf_r+0x2de>
   23648:	2802      	cmp	r0, #2
   2364a:	f47f af1e 	bne.w	2348a <__ssvfiscanf_r+0x52>
   2364e:	e7cf      	b.n	235f0 <__ssvfiscanf_r+0x1b8>
   23650:	220a      	movs	r2, #10
   23652:	e7dd      	b.n	23610 <__ssvfiscanf_r+0x1d8>
   23654:	2300      	movs	r3, #0
   23656:	9342      	str	r3, [sp, #264]	; 0x108
   23658:	2303      	movs	r3, #3
   2365a:	e7de      	b.n	2361a <__ssvfiscanf_r+0x1e2>
   2365c:	2308      	movs	r3, #8
   2365e:	9342      	str	r3, [sp, #264]	; 0x108
   23660:	2304      	movs	r3, #4
   23662:	e7da      	b.n	2361a <__ssvfiscanf_r+0x1e2>
   23664:	4629      	mov	r1, r5
   23666:	4640      	mov	r0, r8
   23668:	f006 fc12 	bl	29e90 <__sccl>
   2366c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2366e:	4605      	mov	r5, r0
   23670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23674:	9341      	str	r3, [sp, #260]	; 0x104
   23676:	2301      	movs	r3, #1
   23678:	e7cf      	b.n	2361a <__ssvfiscanf_r+0x1e2>
   2367a:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2367c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23680:	9341      	str	r3, [sp, #260]	; 0x104
   23682:	2300      	movs	r3, #0
   23684:	e7c9      	b.n	2361a <__ssvfiscanf_r+0x1e2>
   23686:	2302      	movs	r3, #2
   23688:	e7c7      	b.n	2361a <__ssvfiscanf_r+0x1e2>
   2368a:	9841      	ldr	r0, [sp, #260]	; 0x104
   2368c:	06c3      	lsls	r3, r0, #27
   2368e:	f53f aefc 	bmi.w	2348a <__ssvfiscanf_r+0x52>
   23692:	9b00      	ldr	r3, [sp, #0]
   23694:	07c0      	lsls	r0, r0, #31
   23696:	9a45      	ldr	r2, [sp, #276]	; 0x114
   23698:	f103 0104 	add.w	r1, r3, #4
   2369c:	9100      	str	r1, [sp, #0]
   2369e:	681b      	ldr	r3, [r3, #0]
   236a0:	bf4c      	ite	mi
   236a2:	801a      	strhmi	r2, [r3, #0]
   236a4:	601a      	strpl	r2, [r3, #0]
   236a6:	e6f0      	b.n	2348a <__ssvfiscanf_r+0x52>
   236a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   236aa:	4621      	mov	r1, r4
   236ac:	4630      	mov	r0, r6
   236ae:	4798      	blx	r3
   236b0:	2800      	cmp	r0, #0
   236b2:	d0b6      	beq.n	23622 <__ssvfiscanf_r+0x1ea>
   236b4:	e79c      	b.n	235f0 <__ssvfiscanf_r+0x1b8>
   236b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
   236b8:	3201      	adds	r2, #1
   236ba:	9245      	str	r2, [sp, #276]	; 0x114
   236bc:	6862      	ldr	r2, [r4, #4]
   236be:	3a01      	subs	r2, #1
   236c0:	2a00      	cmp	r2, #0
   236c2:	6062      	str	r2, [r4, #4]
   236c4:	dd02      	ble.n	236cc <__ssvfiscanf_r+0x294>
   236c6:	3301      	adds	r3, #1
   236c8:	6023      	str	r3, [r4, #0]
   236ca:	e7ad      	b.n	23628 <__ssvfiscanf_r+0x1f0>
   236cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   236ce:	4621      	mov	r1, r4
   236d0:	4630      	mov	r0, r6
   236d2:	4798      	blx	r3
   236d4:	2800      	cmp	r0, #0
   236d6:	d0a7      	beq.n	23628 <__ssvfiscanf_r+0x1f0>
   236d8:	e78a      	b.n	235f0 <__ssvfiscanf_r+0x1b8>
   236da:	2b04      	cmp	r3, #4
   236dc:	dc06      	bgt.n	236ec <__ssvfiscanf_r+0x2b4>
   236de:	466b      	mov	r3, sp
   236e0:	4622      	mov	r2, r4
   236e2:	a941      	add	r1, sp, #260	; 0x104
   236e4:	4630      	mov	r0, r6
   236e6:	f000 f87b 	bl	237e0 <_scanf_i>
   236ea:	e7ab      	b.n	23644 <__ssvfiscanf_r+0x20c>
   236ec:	4b0f      	ldr	r3, [pc, #60]	; (2372c <__ssvfiscanf_r+0x2f4>)
   236ee:	2b00      	cmp	r3, #0
   236f0:	f43f aecb 	beq.w	2348a <__ssvfiscanf_r+0x52>
   236f4:	466b      	mov	r3, sp
   236f6:	4622      	mov	r2, r4
   236f8:	a941      	add	r1, sp, #260	; 0x104
   236fa:	4630      	mov	r0, r6
   236fc:	e000      	b.n	23700 <__ssvfiscanf_r+0x2c8>
   236fe:	bf00      	nop
   23700:	e7a0      	b.n	23644 <__ssvfiscanf_r+0x20c>
   23702:	89a3      	ldrh	r3, [r4, #12]
   23704:	f013 0f40 	tst.w	r3, #64	; 0x40
   23708:	bf18      	it	ne
   2370a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2370e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   23712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23716:	9844      	ldr	r0, [sp, #272]	; 0x110
   23718:	e7f9      	b.n	2370e <__ssvfiscanf_r+0x2d6>
   2371a:	bf00      	nop
   2371c:	0002d0fe 	.word	0x0002d0fe
   23720:	00029ddd 	.word	0x00029ddd
   23724:	00029e57 	.word	0x00029e57
   23728:	0002d204 	.word	0x0002d204
   2372c:	00000000 	.word	0x00000000

00023730 <_scanf_chars>:
   23730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23734:	4615      	mov	r5, r2
   23736:	688a      	ldr	r2, [r1, #8]
   23738:	4680      	mov	r8, r0
   2373a:	460c      	mov	r4, r1
   2373c:	b932      	cbnz	r2, 2374c <_scanf_chars+0x1c>
   2373e:	698a      	ldr	r2, [r1, #24]
   23740:	2a00      	cmp	r2, #0
   23742:	bf0c      	ite	eq
   23744:	2201      	moveq	r2, #1
   23746:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   2374a:	608a      	str	r2, [r1, #8]
   2374c:	6822      	ldr	r2, [r4, #0]
   2374e:	2700      	movs	r7, #0
   23750:	f8df 9088 	ldr.w	r9, [pc, #136]	; 237dc <_scanf_chars+0xac>
   23754:	06d1      	lsls	r1, r2, #27
   23756:	bf5f      	itttt	pl
   23758:	681a      	ldrpl	r2, [r3, #0]
   2375a:	1d11      	addpl	r1, r2, #4
   2375c:	6019      	strpl	r1, [r3, #0]
   2375e:	6816      	ldrpl	r6, [r2, #0]
   23760:	69a0      	ldr	r0, [r4, #24]
   23762:	b188      	cbz	r0, 23788 <_scanf_chars+0x58>
   23764:	2801      	cmp	r0, #1
   23766:	d107      	bne.n	23778 <_scanf_chars+0x48>
   23768:	682b      	ldr	r3, [r5, #0]
   2376a:	781a      	ldrb	r2, [r3, #0]
   2376c:	6963      	ldr	r3, [r4, #20]
   2376e:	5c9b      	ldrb	r3, [r3, r2]
   23770:	b953      	cbnz	r3, 23788 <_scanf_chars+0x58>
   23772:	bb27      	cbnz	r7, 237be <_scanf_chars+0x8e>
   23774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23778:	2802      	cmp	r0, #2
   2377a:	d120      	bne.n	237be <_scanf_chars+0x8e>
   2377c:	682b      	ldr	r3, [r5, #0]
   2377e:	781b      	ldrb	r3, [r3, #0]
   23780:	f813 3009 	ldrb.w	r3, [r3, r9]
   23784:	071b      	lsls	r3, r3, #28
   23786:	d41a      	bmi.n	237be <_scanf_chars+0x8e>
   23788:	6823      	ldr	r3, [r4, #0]
   2378a:	3701      	adds	r7, #1
   2378c:	06da      	lsls	r2, r3, #27
   2378e:	bf5e      	ittt	pl
   23790:	682b      	ldrpl	r3, [r5, #0]
   23792:	781b      	ldrbpl	r3, [r3, #0]
   23794:	f806 3b01 	strbpl.w	r3, [r6], #1
   23798:	682a      	ldr	r2, [r5, #0]
   2379a:	686b      	ldr	r3, [r5, #4]
   2379c:	3201      	adds	r2, #1
   2379e:	3b01      	subs	r3, #1
   237a0:	602a      	str	r2, [r5, #0]
   237a2:	68a2      	ldr	r2, [r4, #8]
   237a4:	606b      	str	r3, [r5, #4]
   237a6:	3a01      	subs	r2, #1
   237a8:	60a2      	str	r2, [r4, #8]
   237aa:	b142      	cbz	r2, 237be <_scanf_chars+0x8e>
   237ac:	2b00      	cmp	r3, #0
   237ae:	dcd7      	bgt.n	23760 <_scanf_chars+0x30>
   237b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   237b4:	4629      	mov	r1, r5
   237b6:	4640      	mov	r0, r8
   237b8:	4798      	blx	r3
   237ba:	2800      	cmp	r0, #0
   237bc:	d0d0      	beq.n	23760 <_scanf_chars+0x30>
   237be:	6823      	ldr	r3, [r4, #0]
   237c0:	f013 0310 	ands.w	r3, r3, #16
   237c4:	d105      	bne.n	237d2 <_scanf_chars+0xa2>
   237c6:	68e2      	ldr	r2, [r4, #12]
   237c8:	3201      	adds	r2, #1
   237ca:	60e2      	str	r2, [r4, #12]
   237cc:	69a2      	ldr	r2, [r4, #24]
   237ce:	b102      	cbz	r2, 237d2 <_scanf_chars+0xa2>
   237d0:	7033      	strb	r3, [r6, #0]
   237d2:	6923      	ldr	r3, [r4, #16]
   237d4:	2000      	movs	r0, #0
   237d6:	441f      	add	r7, r3
   237d8:	6127      	str	r7, [r4, #16]
   237da:	e7cb      	b.n	23774 <_scanf_chars+0x44>
   237dc:	0002d0fe 	.word	0x0002d0fe

000237e0 <_scanf_i>:
   237e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   237e4:	4698      	mov	r8, r3
   237e6:	b087      	sub	sp, #28
   237e8:	4b72      	ldr	r3, [pc, #456]	; (239b4 <_scanf_i+0x1d4>)
   237ea:	460c      	mov	r4, r1
   237ec:	4682      	mov	sl, r0
   237ee:	4616      	mov	r6, r2
   237f0:	4627      	mov	r7, r4
   237f2:	f04f 0b00 	mov.w	fp, #0
   237f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   237fa:	ab03      	add	r3, sp, #12
   237fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   23800:	4b6d      	ldr	r3, [pc, #436]	; (239b8 <_scanf_i+0x1d8>)
   23802:	69a1      	ldr	r1, [r4, #24]
   23804:	4a6d      	ldr	r2, [pc, #436]	; (239bc <_scanf_i+0x1dc>)
   23806:	2903      	cmp	r1, #3
   23808:	bf18      	it	ne
   2380a:	461a      	movne	r2, r3
   2380c:	68a3      	ldr	r3, [r4, #8]
   2380e:	9201      	str	r2, [sp, #4]
   23810:	1e5a      	subs	r2, r3, #1
   23812:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   23816:	bf89      	itett	hi
   23818:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   2381c:	f04f 0900 	movls.w	r9, #0
   23820:	eb03 0905 	addhi.w	r9, r3, r5
   23824:	f240 135d 	movwhi	r3, #349	; 0x15d
   23828:	bf88      	it	hi
   2382a:	60a3      	strhi	r3, [r4, #8]
   2382c:	f857 3b1c 	ldr.w	r3, [r7], #28
   23830:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   23834:	463d      	mov	r5, r7
   23836:	6023      	str	r3, [r4, #0]
   23838:	6831      	ldr	r1, [r6, #0]
   2383a:	ab03      	add	r3, sp, #12
   2383c:	2202      	movs	r2, #2
   2383e:	7809      	ldrb	r1, [r1, #0]
   23840:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   23844:	f005 fdf9 	bl	2943a <memchr>
   23848:	b328      	cbz	r0, 23896 <_scanf_i+0xb6>
   2384a:	f1bb 0f01 	cmp.w	fp, #1
   2384e:	d159      	bne.n	23904 <_scanf_i+0x124>
   23850:	6862      	ldr	r2, [r4, #4]
   23852:	b92a      	cbnz	r2, 23860 <_scanf_i+0x80>
   23854:	6822      	ldr	r2, [r4, #0]
   23856:	2308      	movs	r3, #8
   23858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2385c:	6063      	str	r3, [r4, #4]
   2385e:	6022      	str	r2, [r4, #0]
   23860:	6822      	ldr	r2, [r4, #0]
   23862:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   23866:	6022      	str	r2, [r4, #0]
   23868:	68a2      	ldr	r2, [r4, #8]
   2386a:	1e51      	subs	r1, r2, #1
   2386c:	60a1      	str	r1, [r4, #8]
   2386e:	b192      	cbz	r2, 23896 <_scanf_i+0xb6>
   23870:	6832      	ldr	r2, [r6, #0]
   23872:	1c51      	adds	r1, r2, #1
   23874:	6031      	str	r1, [r6, #0]
   23876:	7812      	ldrb	r2, [r2, #0]
   23878:	f805 2b01 	strb.w	r2, [r5], #1
   2387c:	6872      	ldr	r2, [r6, #4]
   2387e:	3a01      	subs	r2, #1
   23880:	2a00      	cmp	r2, #0
   23882:	6072      	str	r2, [r6, #4]
   23884:	dc07      	bgt.n	23896 <_scanf_i+0xb6>
   23886:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   2388a:	4631      	mov	r1, r6
   2388c:	4650      	mov	r0, sl
   2388e:	4790      	blx	r2
   23890:	2800      	cmp	r0, #0
   23892:	f040 8085 	bne.w	239a0 <_scanf_i+0x1c0>
   23896:	f10b 0b01 	add.w	fp, fp, #1
   2389a:	f1bb 0f03 	cmp.w	fp, #3
   2389e:	d1cb      	bne.n	23838 <_scanf_i+0x58>
   238a0:	6863      	ldr	r3, [r4, #4]
   238a2:	b90b      	cbnz	r3, 238a8 <_scanf_i+0xc8>
   238a4:	230a      	movs	r3, #10
   238a6:	6063      	str	r3, [r4, #4]
   238a8:	6863      	ldr	r3, [r4, #4]
   238aa:	f04f 0b00 	mov.w	fp, #0
   238ae:	4944      	ldr	r1, [pc, #272]	; (239c0 <_scanf_i+0x1e0>)
   238b0:	6960      	ldr	r0, [r4, #20]
   238b2:	1ac9      	subs	r1, r1, r3
   238b4:	f006 faec 	bl	29e90 <__sccl>
   238b8:	68a3      	ldr	r3, [r4, #8]
   238ba:	6822      	ldr	r2, [r4, #0]
   238bc:	2b00      	cmp	r3, #0
   238be:	d03d      	beq.n	2393c <_scanf_i+0x15c>
   238c0:	6831      	ldr	r1, [r6, #0]
   238c2:	6960      	ldr	r0, [r4, #20]
   238c4:	f891 c000 	ldrb.w	ip, [r1]
   238c8:	f810 000c 	ldrb.w	r0, [r0, ip]
   238cc:	2800      	cmp	r0, #0
   238ce:	d035      	beq.n	2393c <_scanf_i+0x15c>
   238d0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   238d4:	d124      	bne.n	23920 <_scanf_i+0x140>
   238d6:	0510      	lsls	r0, r2, #20
   238d8:	d522      	bpl.n	23920 <_scanf_i+0x140>
   238da:	f10b 0b01 	add.w	fp, fp, #1
   238de:	f1b9 0f00 	cmp.w	r9, #0
   238e2:	d003      	beq.n	238ec <_scanf_i+0x10c>
   238e4:	3301      	adds	r3, #1
   238e6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   238ea:	60a3      	str	r3, [r4, #8]
   238ec:	6873      	ldr	r3, [r6, #4]
   238ee:	3b01      	subs	r3, #1
   238f0:	2b00      	cmp	r3, #0
   238f2:	6073      	str	r3, [r6, #4]
   238f4:	dd1b      	ble.n	2392e <_scanf_i+0x14e>
   238f6:	6833      	ldr	r3, [r6, #0]
   238f8:	3301      	adds	r3, #1
   238fa:	6033      	str	r3, [r6, #0]
   238fc:	68a3      	ldr	r3, [r4, #8]
   238fe:	3b01      	subs	r3, #1
   23900:	60a3      	str	r3, [r4, #8]
   23902:	e7d9      	b.n	238b8 <_scanf_i+0xd8>
   23904:	f1bb 0f02 	cmp.w	fp, #2
   23908:	d1ae      	bne.n	23868 <_scanf_i+0x88>
   2390a:	6822      	ldr	r2, [r4, #0]
   2390c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   23910:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   23914:	d1bf      	bne.n	23896 <_scanf_i+0xb6>
   23916:	2310      	movs	r3, #16
   23918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2391c:	6063      	str	r3, [r4, #4]
   2391e:	e7a2      	b.n	23866 <_scanf_i+0x86>
   23920:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   23924:	6022      	str	r2, [r4, #0]
   23926:	780b      	ldrb	r3, [r1, #0]
   23928:	f805 3b01 	strb.w	r3, [r5], #1
   2392c:	e7de      	b.n	238ec <_scanf_i+0x10c>
   2392e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   23932:	4631      	mov	r1, r6
   23934:	4650      	mov	r0, sl
   23936:	4798      	blx	r3
   23938:	2800      	cmp	r0, #0
   2393a:	d0df      	beq.n	238fc <_scanf_i+0x11c>
   2393c:	6823      	ldr	r3, [r4, #0]
   2393e:	05d9      	lsls	r1, r3, #23
   23940:	d50d      	bpl.n	2395e <_scanf_i+0x17e>
   23942:	42bd      	cmp	r5, r7
   23944:	d909      	bls.n	2395a <_scanf_i+0x17a>
   23946:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   2394a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2394e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   23952:	4632      	mov	r2, r6
   23954:	464d      	mov	r5, r9
   23956:	4650      	mov	r0, sl
   23958:	4798      	blx	r3
   2395a:	42bd      	cmp	r5, r7
   2395c:	d028      	beq.n	239b0 <_scanf_i+0x1d0>
   2395e:	6822      	ldr	r2, [r4, #0]
   23960:	f012 0210 	ands.w	r2, r2, #16
   23964:	d113      	bne.n	2398e <_scanf_i+0x1ae>
   23966:	702a      	strb	r2, [r5, #0]
   23968:	4639      	mov	r1, r7
   2396a:	6863      	ldr	r3, [r4, #4]
   2396c:	4650      	mov	r0, sl
   2396e:	9e01      	ldr	r6, [sp, #4]
   23970:	47b0      	blx	r6
   23972:	f8d8 3000 	ldr.w	r3, [r8]
   23976:	6821      	ldr	r1, [r4, #0]
   23978:	1d1a      	adds	r2, r3, #4
   2397a:	f011 0f20 	tst.w	r1, #32
   2397e:	f8c8 2000 	str.w	r2, [r8]
   23982:	681b      	ldr	r3, [r3, #0]
   23984:	d00f      	beq.n	239a6 <_scanf_i+0x1c6>
   23986:	6018      	str	r0, [r3, #0]
   23988:	68e3      	ldr	r3, [r4, #12]
   2398a:	3301      	adds	r3, #1
   2398c:	60e3      	str	r3, [r4, #12]
   2398e:	1bed      	subs	r5, r5, r7
   23990:	2000      	movs	r0, #0
   23992:	44ab      	add	fp, r5
   23994:	6925      	ldr	r5, [r4, #16]
   23996:	445d      	add	r5, fp
   23998:	6125      	str	r5, [r4, #16]
   2399a:	b007      	add	sp, #28
   2399c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   239a0:	f04f 0b00 	mov.w	fp, #0
   239a4:	e7ca      	b.n	2393c <_scanf_i+0x15c>
   239a6:	07ca      	lsls	r2, r1, #31
   239a8:	bf4c      	ite	mi
   239aa:	8018      	strhmi	r0, [r3, #0]
   239ac:	6018      	strpl	r0, [r3, #0]
   239ae:	e7eb      	b.n	23988 <_scanf_i+0x1a8>
   239b0:	2001      	movs	r0, #1
   239b2:	e7f2      	b.n	2399a <_scanf_i+0x1ba>
   239b4:	0002a3f0 	.word	0x0002a3f0
   239b8:	00029947 	.word	0x00029947
   239bc:	00029943 	.word	0x00029943
   239c0:	0002d472 	.word	0x0002d472

000239c4 <_read_r>:
   239c4:	b538      	push	{r3, r4, r5, lr}
   239c6:	4604      	mov	r4, r0
   239c8:	4d06      	ldr	r5, [pc, #24]	; (239e4 <_read_r+0x20>)
   239ca:	4608      	mov	r0, r1
   239cc:	4611      	mov	r1, r2
   239ce:	2200      	movs	r2, #0
   239d0:	602a      	str	r2, [r5, #0]
   239d2:	461a      	mov	r2, r3
   239d4:	f001 f984 	bl	24ce0 <_read>
   239d8:	1c43      	adds	r3, r0, #1
   239da:	d102      	bne.n	239e2 <_read_r+0x1e>
   239dc:	682b      	ldr	r3, [r5, #0]
   239de:	b103      	cbz	r3, 239e2 <_read_r+0x1e>
   239e0:	6023      	str	r3, [r4, #0]
   239e2:	bd38      	pop	{r3, r4, r5, pc}
   239e4:	2002b0f8 	.word	0x2002b0f8

000239e8 <raise>:
   239e8:	4b02      	ldr	r3, [pc, #8]	; (239f4 <raise+0xc>)
   239ea:	4601      	mov	r1, r0
   239ec:	6818      	ldr	r0, [r3, #0]
   239ee:	f006 ba88 	b.w	29f02 <_raise_r>
   239f2:	bf00      	nop
   239f4:	200205d0 	.word	0x200205d0

000239f8 <_kill_r>:
   239f8:	b538      	push	{r3, r4, r5, lr}
   239fa:	2300      	movs	r3, #0
   239fc:	4d06      	ldr	r5, [pc, #24]	; (23a18 <_kill_r+0x20>)
   239fe:	4604      	mov	r4, r0
   23a00:	4608      	mov	r0, r1
   23a02:	4611      	mov	r1, r2
   23a04:	602b      	str	r3, [r5, #0]
   23a06:	f001 f97a 	bl	24cfe <_kill>
   23a0a:	1c43      	adds	r3, r0, #1
   23a0c:	d102      	bne.n	23a14 <_kill_r+0x1c>
   23a0e:	682b      	ldr	r3, [r5, #0]
   23a10:	b103      	cbz	r3, 23a14 <_kill_r+0x1c>
   23a12:	6023      	str	r3, [r4, #0]
   23a14:	bd38      	pop	{r3, r4, r5, pc}
   23a16:	bf00      	nop
   23a18:	2002b0f8 	.word	0x2002b0f8

00023a1c <__env_lock>:
   23a1c:	4801      	ldr	r0, [pc, #4]	; (23a24 <__env_lock+0x8>)
   23a1e:	f006 b8a8 	b.w	29b72 <__retarget_lock_acquire_recursive>
   23a22:	bf00      	nop
   23a24:	2002b0fe 	.word	0x2002b0fe

00023a28 <__env_unlock>:
   23a28:	4801      	ldr	r0, [pc, #4]	; (23a30 <__env_unlock+0x8>)
   23a2a:	f006 b8a4 	b.w	29b76 <__retarget_lock_release_recursive>
   23a2e:	bf00      	nop
   23a30:	2002b0fe 	.word	0x2002b0fe

00023a34 <_fstat_r>:
   23a34:	b538      	push	{r3, r4, r5, lr}
   23a36:	2300      	movs	r3, #0
   23a38:	4d06      	ldr	r5, [pc, #24]	; (23a54 <_fstat_r+0x20>)
   23a3a:	4604      	mov	r4, r0
   23a3c:	4608      	mov	r0, r1
   23a3e:	4611      	mov	r1, r2
   23a40:	602b      	str	r3, [r5, #0]
   23a42:	f001 f960 	bl	24d06 <_fstat>
   23a46:	1c43      	adds	r3, r0, #1
   23a48:	d102      	bne.n	23a50 <_fstat_r+0x1c>
   23a4a:	682b      	ldr	r3, [r5, #0]
   23a4c:	b103      	cbz	r3, 23a50 <_fstat_r+0x1c>
   23a4e:	6023      	str	r3, [r4, #0]
   23a50:	bd38      	pop	{r3, r4, r5, pc}
   23a52:	bf00      	nop
   23a54:	2002b0f8 	.word	0x2002b0f8

00023a58 <_isatty_r>:
   23a58:	b538      	push	{r3, r4, r5, lr}
   23a5a:	2300      	movs	r3, #0
   23a5c:	4d05      	ldr	r5, [pc, #20]	; (23a74 <_isatty_r+0x1c>)
   23a5e:	4604      	mov	r4, r0
   23a60:	4608      	mov	r0, r1
   23a62:	602b      	str	r3, [r5, #0]
   23a64:	f001 f949 	bl	24cfa <_isatty>
   23a68:	1c43      	adds	r3, r0, #1
   23a6a:	d102      	bne.n	23a72 <_isatty_r+0x1a>
   23a6c:	682b      	ldr	r3, [r5, #0]
   23a6e:	b103      	cbz	r3, 23a72 <_isatty_r+0x1a>
   23a70:	6023      	str	r3, [r4, #0]
   23a72:	bd38      	pop	{r3, r4, r5, pc}
   23a74:	2002b0f8 	.word	0x2002b0f8

00023a78 <k_sleep>:
	return z_impl_k_sleep(timeout);
   23a78:	f7fc be2a 	b.w	206d0 <z_impl_k_sleep>

00023a7c <bsd_recoverable_error_handler>:
{
   23a7c:	4601      	mov	r1, r0
	error_handler(ERROR_BSD_RECOVERABLE, (int)err);
   23a7e:	2001      	movs	r0, #1
   23a80:	f7ea bcee 	b.w	e460 <error_handler>

00023a84 <mac_address_bin_init>:
   23a84:	680b      	ldr	r3, [r1, #0]
   23a86:	6003      	str	r3, [r0, #0]
   23a88:	888b      	ldrh	r3, [r1, #4]
   23a8a:	8083      	strh	r3, [r0, #4]
}
   23a8c:	4770      	bx	lr

00023a8e <ruuvi_send_nrf_get_id>:
    api_send_get_device_id(RE_CA_UART_GET_DEVICE_ID);
   23a8e:	2018      	movs	r0, #24
   23a90:	f000 b800 	b.w	23a94 <api_send_get_device_id>

00023a94 <api_send_get_device_id>:
    return (int8_t)res;
}

int8_t
api_send_get_device_id(uint32_t cmd)
{
   23a94:	b510      	push	{r4, lr}
   23a96:	b0be      	sub	sp, #248	; 0xf8
   23a98:	4604      	mov	r4, r0
    int8_t               res          = 0;
    re_ca_uart_payload_t uart_payload = { 0 };
   23a9a:	2228      	movs	r2, #40	; 0x28
   23a9c:	2100      	movs	r1, #0
   23a9e:	a801      	add	r0, sp, #4
   23aa0:	f005 fd21 	bl	294e6 <memset>
    uint8_t              data[BUFFER_PAYLOAD_SIZE];
    uint8_t              data_length;


    uart_payload.cmd = (re_ca_uart_cmd_t)cmd;
    data_length      = sizeof(data);
   23aa4:	23cc      	movs	r3, #204	; 0xcc

    if (RE_SUCCESS != re_ca_uart_encode(data, &data_length, &uart_payload))
   23aa6:	aa01      	add	r2, sp, #4
   23aa8:	f10d 0103 	add.w	r1, sp, #3
   23aac:	a80b      	add	r0, sp, #44	; 0x2c
    uart_payload.cmd = (re_ca_uart_cmd_t)cmd;
   23aae:	f88d 4004 	strb.w	r4, [sp, #4]
    data_length      = sizeof(data);
   23ab2:	f88d 3003 	strb.w	r3, [sp, #3]
    if (RE_SUCCESS != re_ca_uart_encode(data, &data_length, &uart_payload))
   23ab6:	f000 f94d 	bl	23d54 <re_ca_uart_encode>
   23aba:	4604      	mov	r4, r0
   23abc:	b938      	cbnz	r0, 23ace <api_send_get_device_id+0x3a>
    {
        res = (-1);
    }
    else
    {
        uart_driver_write(data, data_length);
   23abe:	a80b      	add	r0, sp, #44	; 0x2c
   23ac0:	f89d 1003 	ldrb.w	r1, [sp, #3]
   23ac4:	f7eb f970 	bl	eda8 <uart_driver_write>
    int8_t               res          = 0;
   23ac8:	4620      	mov	r0, r4
    }

    return (int8_t)res;
}
   23aca:	b03e      	add	sp, #248	; 0xf8
   23acc:	bd10      	pop	{r4, pc}
        res = (-1);
   23ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23ad2:	e7fa      	b.n	23aca <api_send_get_device_id+0x36>

00023ad4 <gpio_pin_set>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   23ad4:	2301      	movs	r3, #1
   23ad6:	fa03 f101 	lsl.w	r1, r3, r1
   23ada:	68c3      	ldr	r3, [r0, #12]
   23adc:	681b      	ldr	r3, [r3, #0]
   23ade:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   23ae0:	bf1c      	itt	ne
   23ae2:	fab2 f282 	clzne	r2, r2
   23ae6:	0952      	lsrne	r2, r2, #5
	if (value != 0)	{
   23ae8:	b112      	cbz	r2, 23af0 <gpio_pin_set+0x1c>
	return api->port_set_bits_raw(port, pins);
   23aea:	6883      	ldr	r3, [r0, #8]
   23aec:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   23aee:	4718      	bx	r3
   23af0:	6883      	ldr	r3, [r0, #8]
   23af2:	691b      	ldr	r3, [r3, #16]
   23af4:	e7fb      	b.n	23aee <gpio_pin_set+0x1a>

00023af6 <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(struct device *port, gpio_pin_t pin,
   23af6:	b538      	push	{r3, r4, r5, lr}
   23af8:	460c      	mov	r4, r1
	struct gpio_driver_data *data =
   23afa:	68c5      	ldr	r5, [r0, #12]
	return api->pin_configure(port, pin, flags);
   23afc:	6883      	ldr	r3, [r0, #8]
   23afe:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
   23b02:	681b      	ldr	r3, [r3, #0]
   23b04:	4798      	blx	r3
	if (ret != 0) {
   23b06:	b930      	cbnz	r0, 23b16 <gpio_pin_configure.constprop.0+0x20>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   23b08:	2201      	movs	r2, #1
   23b0a:	682b      	ldr	r3, [r5, #0]
   23b0c:	fa02 f104 	lsl.w	r1, r2, r4
   23b10:	ea23 0301 	bic.w	r3, r3, r1
   23b14:	602b      	str	r3, [r5, #0]
}
   23b16:	bd38      	pop	{r3, r4, r5, pc}

00023b18 <add_crc16>:
                                 const uint16_t * p_crc)
{
    uint32_t i;
    uint16_t crc = RE_CA_CRC_DEFAULT;

    if ( (p_data == NULL)
   23b18:	1c42      	adds	r2, r0, #1
}

/** @brief Function to add crc to buffer */
static void add_crc16 (uint8_t * const buffer,
                       uint32_t * written)
{
   23b1a:	b570      	push	{r4, r5, r6, lr}
    if ( (p_data == NULL)
   23b1c:	d020      	beq.n	23b60 <add_crc16+0x48>
    uint16_t crc16 = RE_CA_CRC_INVALID;
    uint16_t p_crc = RE_CA_CRC_DEFAULT;
    crc16 = calculate_crc16 (buffer + RE_CA_UART_STX_ETX_LEN,
                             (*written) - RE_CA_UART_STX_ETX_LEN, &p_crc);
   23b1e:	680c      	ldr	r4, [r1, #0]
            || (size == 0))
   23b20:	2c01      	cmp	r4, #1
   23b22:	d01d      	beq.n	23b60 <add_crc16+0x48>
   23b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23b28:	1906      	adds	r6, r0, r4
            crc ^= p_data[i];
   23b2a:	f812 5b01 	ldrb.w	r5, [r2], #1
   23b2e:	ba5b      	rev16	r3, r3
   23b30:	b29b      	uxth	r3, r3
   23b32:	406b      	eors	r3, r5
            crc ^= (unsigned char) (crc & U16_LSB_MASK) >> U8_HALF_OFFSET;
   23b34:	f3c3 1503 	ubfx	r5, r3, #4, #4
   23b38:	406b      	eors	r3, r5
            crc ^= (crc << U16_MSB_OFFSET) << U8_HALF_OFFSET;
   23b3a:	ea83 3303 	eor.w	r3, r3, r3, lsl #12
   23b3e:	b21d      	sxth	r5, r3
            crc ^= ( (crc & U16_LSB_MASK) << U8_HALF_OFFSET) << 1;
   23b40:	015b      	lsls	r3, r3, #5
   23b42:	f403 53ff 	and.w	r3, r3, #8160	; 0x1fe0
   23b46:	405d      	eors	r5, r3
        for (i = 0; i < size; i++)
   23b48:	42b2      	cmp	r2, r6
            crc ^= ( (crc & U16_LSB_MASK) << U8_HALF_OFFSET) << 1;
   23b4a:	b2ab      	uxth	r3, r5
        for (i = 0; i < size; i++)
   23b4c:	d1ed      	bne.n	23b2a <add_crc16+0x12>

    if (crc16 != RE_CA_CRC_INVALID)
   23b4e:	b13b      	cbz	r3, 23b60 <add_crc16+0x48>
    {
        buffer[ (*written)++] = (uint8_t) (crc16 & U16_LSB_MASK);
   23b50:	1c62      	adds	r2, r4, #1
   23b52:	600a      	str	r2, [r1, #0]
   23b54:	5505      	strb	r5, [r0, r4]
        buffer[ (*written)++] = (uint8_t) ( (crc16 & U16_MSB_MASK) >> U16_MSB_OFFSET);
   23b56:	680a      	ldr	r2, [r1, #0]
   23b58:	0a1b      	lsrs	r3, r3, #8
   23b5a:	1c54      	adds	r4, r2, #1
   23b5c:	600c      	str	r4, [r1, #0]
   23b5e:	5483      	strb	r3, [r0, r2]
    }
}
   23b60:	bd70      	pop	{r4, r5, r6, pc}

00023b62 <re_ca_uart_decode>:
    return err_code;
}

re_status_t re_ca_uart_decode (const uint8_t * const buffer,
                               re_ca_uart_payload_t * const payload)
{
   23b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23b64:	460c      	mov	r4, r1
    re_status_t err_code = RE_SUCCESS;

    // Sanity check buffer format
    if (NULL == buffer)
   23b66:	4605      	mov	r5, r0
   23b68:	2800      	cmp	r0, #0
   23b6a:	f000 80e1 	beq.w	23d30 <re_ca_uart_decode+0x1ce>
    {
        err_code |= RE_ERROR_NULL;
    }
    else if (NULL == payload)
   23b6e:	2900      	cmp	r1, #0
   23b70:	f000 80de 	beq.w	23d30 <re_ca_uart_decode+0x1ce>
    {
        err_code |= RE_ERROR_NULL;
    }
    else if (RE_CA_UART_STX != buffer[RE_CA_UART_STX_INDEX])
   23b74:	7803      	ldrb	r3, [r0, #0]
   23b76:	2bca      	cmp	r3, #202	; 0xca
   23b78:	f040 80dd 	bne.w	23d36 <re_ca_uart_decode+0x1d4>
    {
        err_code |= RE_ERROR_DECODING_STX;
    }
    else if (RE_CA_UART_ETX != buffer[buffer[RE_CA_UART_LEN_INDEX]
   23b7c:	7843      	ldrb	r3, [r0, #1]
   23b7e:	18c7      	adds	r7, r0, r3
   23b80:	797a      	ldrb	r2, [r7, #5]
   23b82:	2a0a      	cmp	r2, #10
   23b84:	f040 80da 	bne.w	23d3c <re_ca_uart_decode+0x1da>
    if ( (p_data == NULL)
   23b88:	1c42      	adds	r2, r0, #1
   23b8a:	f000 80da 	beq.w	23d42 <re_ca_uart_decode+0x1e0>
    crc16 = calculate_crc16 (buffer + RE_CA_UART_STX_ETX_LEN,
   23b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23b92:	f103 0c02 	add.w	ip, r3, #2
            crc  = (unsigned char) (crc >> U16_MSB_OFFSET) | (crc << U16_MSB_OFFSET);
   23b96:	ba51      	rev16	r1, r2
            crc ^= p_data[i];
   23b98:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   23b9c:	b289      	uxth	r1, r1
   23b9e:	4051      	eors	r1, r2
            crc ^= (unsigned char) (crc & U16_LSB_MASK) >> U8_HALF_OFFSET;
   23ba0:	f3c1 1203 	ubfx	r2, r1, #4, #4
   23ba4:	4051      	eors	r1, r2
            crc ^= (crc << U16_MSB_OFFSET) << U8_HALF_OFFSET;
   23ba6:	ea81 3101 	eor.w	r1, r1, r1, lsl #12
            crc ^= ( (crc & U16_LSB_MASK) << U8_HALF_OFFSET) << 1;
   23baa:	014a      	lsls	r2, r1, #5
   23bac:	f402 56ff 	and.w	r6, r2, #8160	; 0x1fe0
   23bb0:	b28a      	uxth	r2, r1
        for (i = 0; i < size; i++)
   23bb2:	1b41      	subs	r1, r0, r5
   23bb4:	458c      	cmp	ip, r1
            crc ^= ( (crc & U16_LSB_MASK) << U8_HALF_OFFSET) << 1;
   23bb6:	ea82 0206 	eor.w	r2, r2, r6
        for (i = 0; i < size; i++)
   23bba:	d8ec      	bhi.n	23b96 <re_ca_uart_decode+0x34>
    if (crc16 != RE_CA_CRC_INVALID)
   23bbc:	2a00      	cmp	r2, #0
   23bbe:	f000 80c0 	beq.w	23d42 <re_ca_uart_decode+0x1e0>
        if (in_crc == crc16)
   23bc2:	f8b7 1003 	ldrh.w	r1, [r7, #3]
   23bc6:	4291      	cmp	r1, r2
   23bc8:	f040 80bb 	bne.w	23d42 <re_ca_uart_decode+0x1e0>
    {
        err_code |= RE_ERROR_DECODING_CRC;
    }
    else
    {
        switch (buffer[RE_CA_UART_CMD_INDEX])
   23bcc:	78aa      	ldrb	r2, [r5, #2]
   23bce:	2a18      	cmp	r2, #24
   23bd0:	d810      	bhi.n	23bf4 <re_ca_uart_decode+0x92>
   23bd2:	2a04      	cmp	r2, #4
   23bd4:	d910      	bls.n	23bf8 <re_ca_uart_decode+0x96>
   23bd6:	1f51      	subs	r1, r2, #5
   23bd8:	2913      	cmp	r1, #19
   23bda:	d80d      	bhi.n	23bf8 <re_ca_uart_decode+0x96>
   23bdc:	e8df f001 	tbb	[pc, r1]
   23be0:	0f0f260f 	.word	0x0f0f260f
   23be4:	0f0f0f0f 	.word	0x0f0f0f0f
   23be8:	63300c0c 	.word	0x63300c0c
   23bec:	0c0c0c90 	.word	0x0c0c0c90
   23bf0:	a40c0c0c 	.word	0xa40c0c0c
   23bf4:	2a20      	cmp	r2, #32
   23bf6:	d00d      	beq.n	23c14 <re_ca_uart_decode+0xb2>
   23bf8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   23bfc:	e009      	b.n	23c12 <re_ca_uart_decode+0xb0>
    if (buffer[RE_CA_UART_LEN_INDEX] != (RE_CA_UART_CMD_BOOL_LEN
   23bfe:	2b02      	cmp	r3, #2
   23c00:	f040 80a5 	bne.w	23d4e <re_ca_uart_decode+0x1ec>
        payload->cmd = buffer[RE_CA_UART_CMD_INDEX];
   23c04:	7022      	strb	r2, [r4, #0]
        payload->params.bool_param.state =
   23c06:	7863      	ldrb	r3, [r4, #1]
   23c08:	78ea      	ldrb	r2, [r5, #3]
   23c0a:	f362 0300 	bfi	r3, r2, #0, #1
   23c0e:	7063      	strb	r3, [r4, #1]
    re_status_t err_code = RE_SUCCESS;
   23c10:	2000      	movs	r0, #0
                break;
        }
    }

    return err_code;
}
   23c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (buffer[RE_CA_UART_LEN_INDEX] != (RE_CA_UART_CMD_ACK_LEN
   23c14:	2b04      	cmp	r3, #4
   23c16:	f040 809a 	bne.w	23d4e <re_ca_uart_decode+0x1ec>
        payload->cmd = buffer[RE_CA_UART_CMD_INDEX];
   23c1a:	7022      	strb	r2, [r4, #0]
        payload->params.ack.cmd = (* ( (re_ca_uart_cmd_t *) &buffer[RE_CA_UART_PAYLOAD_INDEX])) &
   23c1c:	78eb      	ldrb	r3, [r5, #3]
   23c1e:	7063      	strb	r3, [r4, #1]
        payload->params.ack.ack_state.state =
   23c20:	796a      	ldrb	r2, [r5, #5]
   23c22:	78a3      	ldrb	r3, [r4, #2]
   23c24:	f362 0300 	bfi	r3, r2, #0, #1
   23c28:	70a3      	strb	r3, [r4, #2]
   23c2a:	e7f1      	b.n	23c10 <re_ca_uart_decode+0xae>
    if (buffer[RE_CA_UART_LEN_INDEX] != (RE_CA_UART_CMD_FLTR_ID_LEN
   23c2c:	2b03      	cmp	r3, #3
   23c2e:	f040 808e 	bne.w	23d4e <re_ca_uart_decode+0x1ec>
        payload->cmd = buffer[RE_CA_UART_CMD_INDEX];
   23c32:	2306      	movs	r3, #6
   23c34:	7023      	strb	r3, [r4, #0]
        payload->params.fltr_id_param.id = * ( (uint16_t *) &buffer[RE_CA_UART_PAYLOAD_INDEX]);
   23c36:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   23c3a:	f8a4 3001 	strh.w	r3, [r4, #1]
   23c3e:	e7e7      	b.n	23c10 <re_ca_uart_decode+0xae>
    if (buffer[RE_CA_UART_LEN_INDEX] != (RE_CA_UART_CMD_ALL_LEN
   23c40:	2b05      	cmp	r3, #5
   23c42:	f040 8084 	bne.w	23d4e <re_ca_uart_decode+0x1ec>
        payload->cmd = buffer[RE_CA_UART_CMD_INDEX];
   23c46:	230f      	movs	r3, #15
   23c48:	7023      	strb	r3, [r4, #0]
        payload->params.all_params.fltr_id.id = * ( (uint16_t *)
   23c4a:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   23c4e:	f8a4 3001 	strh.w	r3, [r4, #1]
        payload->params.all_params.bools.fltr_tags.state =
   23c52:	79aa      	ldrb	r2, [r5, #6]
   23c54:	78e3      	ldrb	r3, [r4, #3]
   23c56:	f362 0300 	bfi	r3, r2, #0, #1
   23c5a:	70e3      	strb	r3, [r4, #3]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CODED_PHY_BIT) & 1U);
   23c5c:	79ab      	ldrb	r3, [r5, #6]
        payload->params.all_params.bools.coded_phy.state =
   23c5e:	7922      	ldrb	r2, [r4, #4]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CODED_PHY_BIT) & 1U);
   23c60:	085b      	lsrs	r3, r3, #1
        payload->params.all_params.bools.coded_phy.state =
   23c62:	f363 0200 	bfi	r2, r3, #0, #1
   23c66:	7122      	strb	r2, [r4, #4]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_SCAN_PHY_BIT) & 1U);
   23c68:	79ab      	ldrb	r3, [r5, #6]
        payload->params.all_params.bools.scan_phy.state =
   23c6a:	7962      	ldrb	r2, [r4, #5]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_SCAN_PHY_BIT) & 1U);
   23c6c:	089b      	lsrs	r3, r3, #2
        payload->params.all_params.bools.scan_phy.state =
   23c6e:	f363 0200 	bfi	r2, r3, #0, #1
   23c72:	7162      	strb	r2, [r4, #5]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_EXT_PLD_BIT) & 1U);
   23c74:	79ab      	ldrb	r3, [r5, #6]
        payload->params.all_params.bools.ext_payload.state =
   23c76:	79a2      	ldrb	r2, [r4, #6]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_EXT_PLD_BIT) & 1U);
   23c78:	08db      	lsrs	r3, r3, #3
        payload->params.all_params.bools.ext_payload.state =
   23c7a:	f363 0200 	bfi	r2, r3, #0, #1
   23c7e:	71a2      	strb	r2, [r4, #6]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CH_37_BIT) & 1U);
   23c80:	79ab      	ldrb	r3, [r5, #6]
        payload->params.all_params.bools.ch_37.state =
   23c82:	79e2      	ldrb	r2, [r4, #7]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CH_37_BIT) & 1U);
   23c84:	091b      	lsrs	r3, r3, #4
        payload->params.all_params.bools.ch_37.state =
   23c86:	f363 0200 	bfi	r2, r3, #0, #1
   23c8a:	71e2      	strb	r2, [r4, #7]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CH_38_BIT) & 1U);
   23c8c:	79ab      	ldrb	r3, [r5, #6]
        payload->params.all_params.bools.ch_38.state =
   23c8e:	7a22      	ldrb	r2, [r4, #8]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CH_38_BIT) & 1U);
   23c90:	095b      	lsrs	r3, r3, #5
        payload->params.all_params.bools.ch_38.state =
   23c92:	f363 0200 	bfi	r2, r3, #0, #1
   23c96:	7222      	strb	r2, [r4, #8]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CH_39_BIT) & 1U);
   23c98:	79ab      	ldrb	r3, [r5, #6]
        payload->params.all_params.bools.ch_39.state =
   23c9a:	7a62      	ldrb	r2, [r4, #9]
                                       + RE_CA_UART_CMD_FLTR_ID_LEN]) >> RE_CA_UART_ALL_CH_39_BIT) & 1U);
   23c9c:	099b      	lsrs	r3, r3, #6
        payload->params.all_params.bools.ch_39.state =
   23c9e:	f363 0200 	bfi	r2, r3, #0, #1
   23ca2:	7262      	strb	r2, [r4, #9]
   23ca4:	e7b4      	b.n	23c10 <re_ca_uart_decode+0xae>
    const uint8_t adv_len = buffer[RE_CA_UART_LEN_INDEX]
   23ca6:	f1a3 060a 	sub.w	r6, r3, #10
   23caa:	b2f6      	uxtb	r6, r6
    if (adv_len > RE_CA_UART_ADV_BYTES)
   23cac:	2e1f      	cmp	r6, #31
   23cae:	d84e      	bhi.n	23d4e <re_ca_uart_decode+0x1ec>
    else if (RE_CA_UART_FIELD_DELIMITER != * (p_data - RE_CA_UART_DELIMITER_LEN))
   23cb0:	7a6a      	ldrb	r2, [r5, #9]
   23cb2:	2a2c      	cmp	r2, #44	; 0x2c
   23cb4:	d148      	bne.n	23d48 <re_ca_uart_decode+0x1e6>
                                    - RE_CA_UART_DELIMITER_LEN;
   23cb6:	1c5f      	adds	r7, r3, #1
    const uint8_t * const  p_rssi = buffer
   23cb8:	19eb      	adds	r3, r5, r7
    else if (RE_CA_UART_FIELD_DELIMITER != * (p_rssi - RE_CA_UART_DELIMITER_LEN))
   23cba:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   23cbe:	2a2c      	cmp	r2, #44	; 0x2c
   23cc0:	d142      	bne.n	23d48 <re_ca_uart_decode+0x1e6>
    else if (RE_CA_UART_FIELD_DELIMITER != * (p_rssi + RE_CA_UART_RSSI_BYTES))
   23cc2:	785b      	ldrb	r3, [r3, #1]
   23cc4:	2b2c      	cmp	r3, #44	; 0x2c
   23cc6:	d13f      	bne.n	23d48 <re_ca_uart_decode+0x1e6>
        memcpy (payload->params.adv.mac,
   23cc8:	462b      	mov	r3, r5
   23cca:	f853 2f03 	ldr.w	r2, [r3, #3]!
   23cce:	f105 010a 	add.w	r1, r5, #10
   23cd2:	f8c4 2001 	str.w	r2, [r4, #1]
   23cd6:	889b      	ldrh	r3, [r3, #4]
   23cd8:	4632      	mov	r2, r6
   23cda:	f8a4 3005 	strh.w	r3, [r4, #5]
   23cde:	1de0      	adds	r0, r4, #7
   23ce0:	f005 fbc7 	bl	29472 <memcpy>
        payload->cmd = RE_CA_UART_ADV_RPRT;
   23ce4:	2310      	movs	r3, #16
   23ce6:	7023      	strb	r3, [r4, #0]
    if (byte > I8_MAX)
   23ce8:	57eb      	ldrsb	r3, [r5, r7]
    int16_t rval = byte;
   23cea:	5dea      	ldrb	r2, [r5, r7]
    if (byte > I8_MAX)
   23cec:	2b00      	cmp	r3, #0
        rval -= U8_OVERFLOW;
   23cee:	bfbc      	itt	lt
   23cf0:	f5a2 7280 	sublt.w	r2, r2, #256	; 0x100
   23cf4:	b212      	sxthlt	r2, r2
    return rval;
   23cf6:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
        payload->params.adv.adv_len = adv_len;
   23cfa:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
   23cfe:	e787      	b.n	23c10 <re_ca_uart_decode+0xae>
    if (buffer[RE_CA_UART_LEN_INDEX] != (RE_CA_UART_DEVICE_ID_LEN + RE_CA_UART_DEVICE_ADDR_LEN
   23d00:	2b12      	cmp	r3, #18
   23d02:	d124      	bne.n	23d4e <re_ca_uart_decode+0x1ec>
        payload->cmd = buffer[RE_CA_UART_CMD_INDEX];
   23d04:	4623      	mov	r3, r4
   23d06:	2211      	movs	r2, #17
   23d08:	f803 2b01 	strb.w	r2, [r3], #1
        payload->params.device_id.id = * ( (uint64_t *) &buffer[RE_CA_UART_PAYLOAD_INDEX]);
   23d0c:	f8d5 2007 	ldr.w	r2, [r5, #7]
   23d10:	f8d5 1003 	ldr.w	r1, [r5, #3]
   23d14:	f8c4 1001 	str.w	r1, [r4, #1]
   23d18:	605a      	str	r2, [r3, #4]
        payload->params.device_id.addr = * ( (uint64_t *) &buffer[RE_CA_UART_PAYLOAD_INDEX
   23d1a:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   23d1e:	f8c4 2009 	str.w	r2, [r4, #9]
   23d22:	f8c4 300d 	str.w	r3, [r4, #13]
   23d26:	e773      	b.n	23c10 <re_ca_uart_decode+0xae>
    if (buffer[RE_CA_UART_LEN_INDEX] != (RE_CA_UART_GET_DEVICE_ID_LEN
   23d28:	b98b      	cbnz	r3, 23d4e <re_ca_uart_decode+0x1ec>
        payload->cmd = buffer[RE_CA_UART_CMD_INDEX];
   23d2a:	2218      	movs	r2, #24
   23d2c:	7022      	strb	r2, [r4, #0]
   23d2e:	e76f      	b.n	23c10 <re_ca_uart_decode+0xae>
        err_code |= RE_ERROR_NULL;
   23d30:	f44f 6000 	mov.w	r0, #2048	; 0x800
   23d34:	e76d      	b.n	23c12 <re_ca_uart_decode+0xb0>
        err_code |= RE_ERROR_DECODING_STX;
   23d36:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   23d3a:	e76a      	b.n	23c12 <re_ca_uart_decode+0xb0>
        err_code |= RE_ERROR_DECODING_ETX;
   23d3c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   23d40:	e767      	b.n	23c12 <re_ca_uart_decode+0xb0>
        err_code |= RE_ERROR_DECODING_CRC;
   23d42:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   23d46:	e764      	b.n	23c12 <re_ca_uart_decode+0xb0>
        err_code |= RE_ERROR_DECODING_DELIMITER;
   23d48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   23d4c:	e761      	b.n	23c12 <re_ca_uart_decode+0xb0>
        err_code |= RE_ERROR_DECODING_LEN;
   23d4e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    return err_code;
   23d52:	e75e      	b.n	23c12 <re_ca_uart_decode+0xb0>

00023d54 <re_ca_uart_encode>:
    return err_code;
}

re_status_t re_ca_uart_encode (uint8_t * const buffer, uint8_t * const buf_len,
                               const re_ca_uart_payload_t * const payload)
{
   23d54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23d58:	460f      	mov	r7, r1
   23d5a:	4615      	mov	r5, r2
    re_status_t err_code = RE_SUCCESS;

    if (NULL == buffer)
   23d5c:	4604      	mov	r4, r0
   23d5e:	2800      	cmp	r0, #0
   23d60:	f000 80f1 	beq.w	23f46 <re_ca_uart_encode+0x1f2>
    {
        err_code |= RE_ERROR_NULL;
    }
    else if (NULL == buf_len)
   23d64:	2900      	cmp	r1, #0
   23d66:	f000 80ee 	beq.w	23f46 <re_ca_uart_encode+0x1f2>
    {
        err_code |= RE_ERROR_NULL;
    }
    else if (NULL == payload)
   23d6a:	2a00      	cmp	r2, #0
   23d6c:	f000 80eb 	beq.w	23f46 <re_ca_uart_encode+0x1f2>
    {
        err_code |= RE_ERROR_NULL;
    }
    else
    {
        switch (payload->cmd)
   23d70:	7813      	ldrb	r3, [r2, #0]
   23d72:	2b18      	cmp	r3, #24
   23d74:	d810      	bhi.n	23d98 <re_ca_uart_encode+0x44>
   23d76:	2b04      	cmp	r3, #4
   23d78:	d910      	bls.n	23d9c <re_ca_uart_encode+0x48>
   23d7a:	3b05      	subs	r3, #5
   23d7c:	2b13      	cmp	r3, #19
   23d7e:	d80d      	bhi.n	23d9c <re_ca_uart_encode+0x48>
   23d80:	e8df f003 	tbb	[pc, r3]
   23d84:	0e0e440e 	.word	0x0e0e440e
   23d88:	0e0e0e0e 	.word	0x0e0e0e0e
   23d8c:	8d570c0c 	.word	0x8d570c0c
   23d90:	0c0c0cb9 	.word	0x0c0c0cb9
   23d94:	d30c0c0c 	.word	0xd30c0c0c
   23d98:	2b20      	cmp	r3, #32
   23d9a:	d016      	beq.n	23dca <re_ca_uart_encode+0x76>
   23d9c:	2010      	movs	r0, #16
                err_code |= RE_ERROR_INVALID_PARAM;
                break;
        }
    }

    return err_code;
   23d9e:	e032      	b.n	23e06 <re_ca_uart_encode+0xb2>
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   23da0:	780b      	ldrb	r3, [r1, #0]
   23da2:	2b2c      	cmp	r3, #44	; 0x2c
   23da4:	f240 80cd 	bls.w	23f42 <re_ca_uart_encode+0x1ee>
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   23da8:	23ca      	movs	r3, #202	; 0xca
   23daa:	7003      	strb	r3, [r0, #0]
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_CMD_BOOL_LEN
   23dac:	2302      	movs	r3, #2
   23dae:	7043      	strb	r3, [r0, #1]
        buffer[RE_CA_UART_CMD_INDEX] = payload->cmd;
   23db0:	782b      	ldrb	r3, [r5, #0]
   23db2:	7083      	strb	r3, [r0, #2]
        buffer[RE_CA_UART_PAYLOAD_INDEX] = (payload->params.bool_param.state & 1U);
   23db4:	786b      	ldrb	r3, [r5, #1]
   23db6:	f3c3 0300 	ubfx	r3, r3, #0, #1
   23dba:	70c3      	strb	r3, [r0, #3]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23dbc:	2305      	movs	r3, #5
   23dbe:	9301      	str	r3, [sp, #4]
   23dc0:	232c      	movs	r3, #44	; 0x2c
   23dc2:	7103      	strb	r3, [r0, #4]
        add_crc16 (buffer, &written);
   23dc4:	4620      	mov	r0, r4
   23dc6:	a901      	add	r1, sp, #4
   23dc8:	e015      	b.n	23df6 <re_ca_uart_encode+0xa2>
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   23dca:	780b      	ldrb	r3, [r1, #0]
   23dcc:	2b2c      	cmp	r3, #44	; 0x2c
   23dce:	f240 80b8 	bls.w	23f42 <re_ca_uart_encode+0x1ee>
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   23dd2:	23ca      	movs	r3, #202	; 0xca
   23dd4:	7003      	strb	r3, [r0, #0]
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_CMD_ACK_LEN
   23dd6:	2304      	movs	r3, #4
   23dd8:	7043      	strb	r3, [r0, #1]
        buffer[RE_CA_UART_CMD_INDEX] = payload->cmd;
   23dda:	7813      	ldrb	r3, [r2, #0]
        add_crc16 (buffer, &written);
   23ddc:	a901      	add	r1, sp, #4
        buffer[RE_CA_UART_CMD_INDEX] = payload->cmd;
   23dde:	7083      	strb	r3, [r0, #2]
        buffer[written++] = (uint8_t) payload->params.ack.cmd;
   23de0:	7853      	ldrb	r3, [r2, #1]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23de2:	222c      	movs	r2, #44	; 0x2c
        buffer[written++] = (uint8_t) payload->params.ack.cmd;
   23de4:	70c3      	strb	r3, [r0, #3]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23de6:	7102      	strb	r2, [r0, #4]
        buffer[written++] = (payload->params.ack.ack_state.state & 1U);
   23de8:	78ab      	ldrb	r3, [r5, #2]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23dea:	7182      	strb	r2, [r0, #6]
        buffer[written++] = (payload->params.ack.ack_state.state & 1U);
   23dec:	f3c3 0300 	ubfx	r3, r3, #0, #1
   23df0:	7143      	strb	r3, [r0, #5]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23df2:	2307      	movs	r3, #7
   23df4:	9301      	str	r3, [sp, #4]
        add_crc16 (buffer, &written);
   23df6:	f7ff fe8f 	bl	23b18 <add_crc16>
        buffer[written++] = RE_CA_UART_ETX;
   23dfa:	220a      	movs	r2, #10
    re_status_t err_code = RE_SUCCESS;
   23dfc:	2000      	movs	r0, #0
        buffer[written++] = RE_CA_UART_ETX;
   23dfe:	9b01      	ldr	r3, [sp, #4]
   23e00:	54e2      	strb	r2, [r4, r3]
   23e02:	3301      	adds	r3, #1
        *buf_len = written;
   23e04:	703b      	strb	r3, [r7, #0]
}
   23e06:	b002      	add	sp, #8
   23e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   23e0c:	780b      	ldrb	r3, [r1, #0]
   23e0e:	2b2c      	cmp	r3, #44	; 0x2c
   23e10:	f240 8097 	bls.w	23f42 <re_ca_uart_encode+0x1ee>
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   23e14:	23ca      	movs	r3, #202	; 0xca
   23e16:	7003      	strb	r3, [r0, #0]
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_CMD_FLTR_ID_LEN
   23e18:	2303      	movs	r3, #3
   23e1a:	7043      	strb	r3, [r0, #1]
        buffer[RE_CA_UART_CMD_INDEX] = payload->cmd;
   23e1c:	782b      	ldrb	r3, [r5, #0]
   23e1e:	7083      	strb	r3, [r0, #2]
   23e20:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   23e24:	f8a0 3003 	strh.w	r3, [r0, #3]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23e28:	2306      	movs	r3, #6
   23e2a:	9301      	str	r3, [sp, #4]
   23e2c:	232c      	movs	r3, #44	; 0x2c
   23e2e:	7143      	strb	r3, [r0, #5]
        add_crc16 (buffer, &written);
   23e30:	e7c8      	b.n	23dc4 <re_ca_uart_encode+0x70>
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   23e32:	780b      	ldrb	r3, [r1, #0]
   23e34:	2b2c      	cmp	r3, #44	; 0x2c
   23e36:	f240 8084 	bls.w	23f42 <re_ca_uart_encode+0x1ee>
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   23e3a:	23ca      	movs	r3, #202	; 0xca
   23e3c:	7003      	strb	r3, [r0, #0]
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_CMD_ALL_BOOL_LEN
   23e3e:	2305      	movs	r3, #5
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23e40:	212c      	movs	r1, #44	; 0x2c
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_CMD_ALL_BOOL_LEN
   23e42:	7043      	strb	r3, [r0, #1]
        buffer[RE_CA_UART_CMD_INDEX] = payload->cmd;
   23e44:	782b      	ldrb	r3, [r5, #0]
   23e46:	7083      	strb	r3, [r0, #2]
   23e48:	f8b5 3001 	ldrh.w	r3, [r5, #1]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23e4c:	7141      	strb	r1, [r0, #5]
   23e4e:	f8a0 3003 	strh.w	r3, [r0, #3]
                            | ( (payload->params.all_params.bools.coded_phy.state  & 1U)
   23e52:	792b      	ldrb	r3, [r5, #4]
   23e54:	f3c3 0200 	ubfx	r2, r3, #0, #1
                            | ( (payload->params.all_params.bools.scan_phy.state  & 1U)
   23e58:	796b      	ldrb	r3, [r5, #5]
   23e5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
                                << RE_CA_UART_ALL_SCAN_PHY_BIT)
   23e5e:	009b      	lsls	r3, r3, #2
                            | ( (payload->params.all_params.bools.scan_phy.state  & 1U)
   23e60:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
        buffer[written] = ( ( (payload->params.all_params.bools.fltr_tags.state & 1U)
   23e64:	78ea      	ldrb	r2, [r5, #3]
   23e66:	f3c2 0200 	ubfx	r2, r2, #0, #1
                            | ( (payload->params.all_params.bools.scan_phy.state  & 1U)
   23e6a:	4313      	orrs	r3, r2
                            | ( (payload->params.all_params.bools.ext_payload.state  & 1U)
   23e6c:	79aa      	ldrb	r2, [r5, #6]
   23e6e:	f3c2 0200 	ubfx	r2, r2, #0, #1
   23e72:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                            | ( (payload->params.all_params.bools.ch_37.state  & 1U)
   23e76:	79ea      	ldrb	r2, [r5, #7]
   23e78:	f3c2 0200 	ubfx	r2, r2, #0, #1
   23e7c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                            | ( (payload->params.all_params.bools.ch_38.state  & 1U)
   23e80:	7a2a      	ldrb	r2, [r5, #8]
   23e82:	f3c2 0200 	ubfx	r2, r2, #0, #1
   23e86:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                            | ( (payload->params.all_params.bools.ch_39.state  & 1U)
   23e8a:	7a6a      	ldrb	r2, [r5, #9]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23e8c:	71c1      	strb	r1, [r0, #7]
                            | ( (payload->params.all_params.bools.ch_39.state  & 1U)
   23e8e:	f3c2 0200 	ubfx	r2, r2, #0, #1
   23e92:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
        buffer[written] = ( ( (payload->params.all_params.bools.fltr_tags.state & 1U)
   23e96:	7183      	strb	r3, [r0, #6]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23e98:	2308      	movs	r3, #8
   23e9a:	9301      	str	r3, [sp, #4]
   23e9c:	e792      	b.n	23dc4 <re_ca_uart_encode+0x70>
    uint32_t written = 0;
   23e9e:	2600      	movs	r6, #0
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   23ea0:	780b      	ldrb	r3, [r1, #0]
    uint32_t written = 0;
   23ea2:	9601      	str	r6, [sp, #4]
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   23ea4:	2b2c      	cmp	r3, #44	; 0x2c
   23ea6:	d94c      	bls.n	23f42 <re_ca_uart_encode+0x1ee>
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   23ea8:	23ca      	movs	r3, #202	; 0xca
   23eaa:	7003      	strb	r3, [r0, #0]
                                       + RE_CA_UART_ADV_FIELDS * RE_CA_UART_DELIMITER_LEN;
   23eac:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23eb0:	f04f 082c 	mov.w	r8, #44	; 0x2c
                                       + RE_CA_UART_ADV_FIELDS * RE_CA_UART_DELIMITER_LEN;
   23eb4:	330a      	adds	r3, #10
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_MAC_BYTES
   23eb6:	7043      	strb	r3, [r0, #1]
        buffer[RE_CA_UART_CMD_INDEX] = RE_CA_UART_ADV_RPRT;
   23eb8:	2310      	movs	r3, #16
   23eba:	7083      	strb	r3, [r0, #2]
   23ebc:	462b      	mov	r3, r5
   23ebe:	f853 2f01 	ldr.w	r2, [r3, #1]!
   23ec2:	1de9      	adds	r1, r5, #7
   23ec4:	f8c0 2003 	str.w	r2, [r0, #3]
   23ec8:	889b      	ldrh	r3, [r3, #4]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23eca:	f880 8009 	strb.w	r8, [r0, #9]
   23ece:	f8a0 3007 	strh.w	r3, [r0, #7]
   23ed2:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
   23ed6:	300a      	adds	r0, #10
   23ed8:	f005 facb 	bl	29472 <memcpy>
        written += payload->params.adv.adv_len;
   23edc:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23ee0:	18e2      	adds	r2, r4, r3
   23ee2:	f882 800a 	strb.w	r8, [r2, #10]
        buffer[written++] = i8tou8 (payload->params.adv.rssi_db);
   23ee6:	f895 1027 	ldrb.w	r1, [r5, #39]	; 0x27
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23eea:	330d      	adds	r3, #13
        buffer[written++] = i8tou8 (payload->params.adv.rssi_db);
   23eec:	72d1      	strb	r1, [r2, #11]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23eee:	9301      	str	r3, [sp, #4]
   23ef0:	f882 800c 	strb.w	r8, [r2, #12]
        add_crc16 (buffer, &written);
   23ef4:	e766      	b.n	23dc4 <re_ca_uart_encode+0x70>
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   23ef6:	780b      	ldrb	r3, [r1, #0]
   23ef8:	2b2c      	cmp	r3, #44	; 0x2c
   23efa:	d922      	bls.n	23f42 <re_ca_uart_encode+0x1ee>
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   23efc:	23ca      	movs	r3, #202	; 0xca
   23efe:	7003      	strb	r3, [r0, #0]
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_DEVICE_ID_LEN + RE_CA_UART_DEVICE_ADDR_LEN
   23f00:	2312      	movs	r3, #18
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23f02:	222c      	movs	r2, #44	; 0x2c
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_DEVICE_ID_LEN + RE_CA_UART_DEVICE_ADDR_LEN
   23f04:	7043      	strb	r3, [r0, #1]
        buffer[RE_CA_UART_CMD_INDEX] = payload->cmd;
   23f06:	782b      	ldrb	r3, [r5, #0]
   23f08:	7083      	strb	r3, [r0, #2]
   23f0a:	f855 3f01 	ldr.w	r3, [r5, #1]!
   23f0e:	f8c0 3003 	str.w	r3, [r0, #3]
   23f12:	686b      	ldr	r3, [r5, #4]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23f14:	72c2      	strb	r2, [r0, #11]
   23f16:	f8c0 3007 	str.w	r3, [r0, #7]
   23f1a:	682b      	ldr	r3, [r5, #0]
   23f1c:	60c3      	str	r3, [r0, #12]
   23f1e:	686b      	ldr	r3, [r5, #4]
        buffer[written++] = RE_CA_UART_FIELD_DELIMITER;
   23f20:	7502      	strb	r2, [r0, #20]
   23f22:	6103      	str	r3, [r0, #16]
   23f24:	2315      	movs	r3, #21
   23f26:	9301      	str	r3, [sp, #4]
   23f28:	e74c      	b.n	23dc4 <re_ca_uart_encode+0x70>
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   23f2a:	780b      	ldrb	r3, [r1, #0]
    uint32_t written = 0;
   23f2c:	2600      	movs	r6, #0
    if (RE_CA_UART_TX_MAX_LEN > *buf_len)
   23f2e:	2b2c      	cmp	r3, #44	; 0x2c
   23f30:	d907      	bls.n	23f42 <re_ca_uart_encode+0x1ee>
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   23f32:	23ca      	movs	r3, #202	; 0xca
        buffer[RE_CA_UART_LEN_INDEX] = RE_CA_UART_GET_DEVICE_ID_LEN
   23f34:	7046      	strb	r6, [r0, #1]
        buffer[RE_CA_UART_STX_INDEX] = RE_CA_UART_STX;
   23f36:	7003      	strb	r3, [r0, #0]
        buffer[RE_CA_UART_CMD_INDEX] = payload->cmd;
   23f38:	782b      	ldrb	r3, [r5, #0]
   23f3a:	7083      	strb	r3, [r0, #2]
        written += RE_CA_UART_HEADER_SIZE;
   23f3c:	2303      	movs	r3, #3
   23f3e:	9301      	str	r3, [sp, #4]
   23f40:	e740      	b.n	23dc4 <re_ca_uart_encode+0x70>
        err_code |= RE_ERROR_DATA_SIZE;
   23f42:	2008      	movs	r0, #8
                break;
   23f44:	e75f      	b.n	23e06 <re_ca_uart_encode+0xb2>
        err_code |= RE_ERROR_NULL;
   23f46:	f44f 6000 	mov.w	r0, #2048	; 0x800
   23f4a:	e75c      	b.n	23e06 <re_ca_uart_encode+0xb2>

00023f4c <arch_printk_char_out>:
}
   23f4c:	2000      	movs	r0, #0
   23f4e:	4770      	bx	lr

00023f50 <print_err>:
{
   23f50:	b570      	push	{r4, r5, r6, lr}
   23f52:	460d      	mov	r5, r1
   23f54:	4604      	mov	r4, r0
	out('E', ctx);
   23f56:	2045      	movs	r0, #69	; 0x45
   23f58:	47a0      	blx	r4
	out('R', ctx);
   23f5a:	4629      	mov	r1, r5
   23f5c:	2052      	movs	r0, #82	; 0x52
   23f5e:	47a0      	blx	r4
	out('R', ctx);
   23f60:	4629      	mov	r1, r5
   23f62:	4623      	mov	r3, r4
}
   23f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   23f68:	2052      	movs	r0, #82	; 0x52
   23f6a:	4718      	bx	r3

00023f6c <str_out>:
{
   23f6c:	b530      	push	{r4, r5, lr}
   23f6e:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   23f70:	680c      	ldr	r4, [r1, #0]
   23f72:	1c55      	adds	r5, r2, #1
   23f74:	b114      	cbz	r4, 23f7c <str_out+0x10>
   23f76:	684b      	ldr	r3, [r1, #4]
   23f78:	4293      	cmp	r3, r2
   23f7a:	dc01      	bgt.n	23f80 <str_out+0x14>
		ctx->count++;
   23f7c:	608d      	str	r5, [r1, #8]
}
   23f7e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   23f80:	3b01      	subs	r3, #1
   23f82:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   23f84:	bf08      	it	eq
   23f86:	2200      	moveq	r2, #0
   23f88:	608d      	str	r5, [r1, #8]
   23f8a:	bf0c      	ite	eq
   23f8c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   23f8e:	54a0      	strbne	r0, [r4, r2]
   23f90:	e7f5      	b.n	23f7e <str_out+0x12>

00023f92 <printk>:
{
   23f92:	b40f      	push	{r0, r1, r2, r3}
   23f94:	b507      	push	{r0, r1, r2, lr}
   23f96:	a904      	add	r1, sp, #16
   23f98:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   23f9c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   23f9e:	f7eb fed3 	bl	fd48 <vprintk>
}
   23fa2:	b003      	add	sp, #12
   23fa4:	f85d eb04 	ldr.w	lr, [sp], #4
   23fa8:	b004      	add	sp, #16
   23faa:	4770      	bx	lr

00023fac <snprintk>:
{
   23fac:	b40c      	push	{r2, r3}
   23fae:	b507      	push	{r0, r1, r2, lr}
   23fb0:	ab04      	add	r3, sp, #16
   23fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   23fb6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   23fb8:	f7eb fed4 	bl	fd64 <vsnprintk>
}
   23fbc:	b003      	add	sp, #12
   23fbe:	f85d eb04 	ldr.w	lr, [sp], #4
   23fc2:	b002      	add	sp, #8
   23fc4:	4770      	bx	lr

00023fc6 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   23fc6:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   23fc8:	f7fc fba8 	bl	2071c <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   23fcc:	2000      	movs	r0, #0
   23fce:	bd08      	pop	{r3, pc}

00023fd0 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   23fd0:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   23fd2:	f7fc fbc9 	bl	20768 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   23fd6:	f110 0f0b 	cmn.w	r0, #11
   23fda:	d005      	beq.n	23fe8 <sys_sem_take+0x18>
   23fdc:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   23fe0:	bf08      	it	eq
   23fe2:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   23fe6:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   23fe8:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   23fec:	e7fb      	b.n	23fe6 <sys_sem_take+0x16>

00023fee <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   23fee:	4604      	mov	r4, r0
   23ff0:	b508      	push	{r3, lr}
   23ff2:	4608      	mov	r0, r1
   23ff4:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   23ff6:	461a      	mov	r2, r3
   23ff8:	47a0      	blx	r4
	return z_impl_k_current_get();
   23ffa:	f7fc fb89 	bl	20710 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   23ffe:	f7ed fa7f 	bl	11500 <z_impl_k_thread_abort>

00024002 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   24002:	b510      	push	{r4, lr}
   24004:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   24006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2400a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2400e:	4620      	mov	r0, r4
   24010:	f7fc f80e 	bl	20030 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   24014:	4603      	mov	r3, r0
   24016:	2800      	cmp	r0, #0
   24018:	d0f5      	beq.n	24006 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   2401a:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2401c:	3308      	adds	r3, #8
   2401e:	e8d3 1fef 	ldaex	r1, [r3]
   24022:	f021 0c01 	bic.w	ip, r1, #1
   24026:	e8c3 cfee 	stlex	lr, ip, [r3]
   2402a:	f1be 0f00 	cmp.w	lr, #0
   2402e:	d1f6      	bne.n	2401e <z_work_q_main+0x1c>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   24030:	07cb      	lsls	r3, r1, #31
   24032:	d500      	bpl.n	24036 <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   24034:	4790      	blx	r2
	z_impl_k_yield();
   24036:	f7fc faff 	bl	20638 <z_impl_k_yield>
   2403a:	e7e4      	b.n	24006 <z_work_q_main+0x4>

0002403c <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   2403c:	6803      	ldr	r3, [r0, #0]
   2403e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   24042:	6883      	ldr	r3, [r0, #8]
   24044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   24048:	bf2c      	ite	cs
   2404a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   2404e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   24052:	4770      	bx	lr

00024054 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   24054:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   24056:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   24058:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   2405a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   2405e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   24062:	bf2c      	ite	cs
   24064:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   24068:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   2406c:	bd10      	pop	{r4, pc}

0002406e <right_chunk>:
{
	return c - left_size(h, c);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
   2406e:	b538      	push	{r3, r4, r5, lr}
   24070:	4605      	mov	r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   24072:	2200      	movs	r2, #0
{
   24074:	460c      	mov	r4, r1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   24076:	f7ff ffe1 	bl	2403c <chunk_field>
   2407a:	68eb      	ldr	r3, [r5, #12]
   2407c:	4018      	ands	r0, r3
	return c + size(h, c);
}
   2407e:	4420      	add	r0, r4
   24080:	bd38      	pop	{r3, r4, r5, pc}

00024082 <free_list_remove>:
	return ret;
}

static void free_list_remove(struct z_heap *h, int bidx,
			     chunkid_t c)
{
   24082:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24086:	460d      	mov	r5, r1
	struct z_heap_bucket *b = &h->buckets[bidx];
   24088:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   2408c:	4611      	mov	r1, r2
	struct z_heap_bucket *b = &h->buckets[bidx];
   2408e:	eb08 02c5 	add.w	r2, r8, r5, lsl #3
	CHECK(b->next != 0);
	CHECK(b->list_size > 0);
	CHECK((((h->avail_buckets & (1 << bidx)) == 0)
	       == (h->buckets[bidx].next == 0)));

	b->list_size--;
   24092:	6853      	ldr	r3, [r2, #4]
{
   24094:	4604      	mov	r4, r0
	b->list_size--;
   24096:	3b01      	subs	r3, #1
   24098:	6053      	str	r3, [r2, #4]

	if (b->list_size == 0) {
   2409a:	b95b      	cbnz	r3, 240b4 <free_list_remove+0x32>
		h->avail_buckets &= ~(1 << bidx);
   2409c:	2201      	movs	r2, #1
   2409e:	fa02 f105 	lsl.w	r1, r2, r5
   240a2:	6942      	ldr	r2, [r0, #20]
   240a4:	ea22 0201 	bic.w	r2, r2, r1
   240a8:	6142      	str	r2, [r0, #20]
		b->next = 0;
   240aa:	f848 3035 	str.w	r3, [r8, r5, lsl #3]

		b->next = second;
		chunk_set(h, first, FREE_NEXT, second);
		chunk_set(h, second, FREE_PREV, first);
	}
}
   240ae:	b002      	add	sp, #8
   240b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   240b4:	2202      	movs	r2, #2
   240b6:	9101      	str	r1, [sp, #4]
   240b8:	f7ff ffc0 	bl	2403c <chunk_field>
	return chunk_field(h, c, FREE_NEXT);
   240bc:	9901      	ldr	r1, [sp, #4]
	return chunk_field(h, c, FREE_PREV);
   240be:	4607      	mov	r7, r0
	return chunk_field(h, c, FREE_NEXT);
   240c0:	2203      	movs	r2, #3
   240c2:	4620      	mov	r0, r4
   240c4:	f7ff ffba 	bl	2403c <chunk_field>
   240c8:	4606      	mov	r6, r0
		chunk_set(h, first, FREE_NEXT, second);
   240ca:	4603      	mov	r3, r0
   240cc:	4639      	mov	r1, r7
		b->next = second;
   240ce:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
		chunk_set(h, first, FREE_NEXT, second);
   240d2:	2203      	movs	r2, #3
   240d4:	4620      	mov	r0, r4
   240d6:	f7ff ffbd 	bl	24054 <chunk_set>
		chunk_set(h, second, FREE_PREV, first);
   240da:	463b      	mov	r3, r7
   240dc:	2202      	movs	r2, #2
   240de:	4631      	mov	r1, r6
   240e0:	4620      	mov	r0, r4
}
   240e2:	b002      	add	sp, #8
   240e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, first);
   240e8:	f7ff bfb4 	b.w	24054 <chunk_set>

000240ec <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   240ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   240f0:	4604      	mov	r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   240f2:	2200      	movs	r2, #0
   240f4:	460d      	mov	r5, r1
   240f6:	f7ff ffa1 	bl	2403c <chunk_field>
   240fa:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   240fc:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   240fe:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   24100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   24104:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   24108:	bf34      	ite	cc
   2410a:	2000      	movcc	r0, #0
   2410c:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   2410e:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   24110:	f1c0 001f 	rsb	r0, r0, #31
   24114:	1a80      	subs	r0, r0, r2
   24116:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   2411a:	684a      	ldr	r2, [r1, #4]
   2411c:	1c56      	adds	r6, r2, #1
   2411e:	604e      	str	r6, [r1, #4]
   24120:	b9a2      	cbnz	r2, 2414c <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   24122:	2201      	movs	r2, #1
   24124:	fa02 f100 	lsl.w	r1, r2, r0
   24128:	6962      	ldr	r2, [r4, #20]
   2412a:	430a      	orrs	r2, r1
   2412c:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   2412e:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   24130:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   24134:	2202      	movs	r2, #2
   24136:	462b      	mov	r3, r5
   24138:	4620      	mov	r0, r4
   2413a:	f7ff ff8b 	bl	24054 <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   2413e:	2203      	movs	r2, #3
   24140:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   24142:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   24144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   24148:	f7ff bf84 	b.w	24054 <chunk_set>
		chunkid_t second = h->buckets[b].next;
   2414c:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   24150:	2202      	movs	r2, #2
   24152:	4639      	mov	r1, r7
   24154:	4620      	mov	r0, r4
   24156:	f7ff ff71 	bl	2403c <chunk_field>
   2415a:	4606      	mov	r6, r0
		chunk_set(h, c, FREE_PREV, first);
   2415c:	4603      	mov	r3, r0
   2415e:	2202      	movs	r2, #2
   24160:	4629      	mov	r1, r5
   24162:	4620      	mov	r0, r4
   24164:	f7ff ff76 	bl	24054 <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   24168:	463b      	mov	r3, r7
   2416a:	2203      	movs	r2, #3
   2416c:	4629      	mov	r1, r5
   2416e:	4620      	mov	r0, r4
   24170:	f7ff ff70 	bl	24054 <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   24174:	2203      	movs	r2, #3
   24176:	4631      	mov	r1, r6
   24178:	462b      	mov	r3, r5
   2417a:	4620      	mov	r0, r4
   2417c:	f7ff ff6a 	bl	24054 <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   24180:	2202      	movs	r2, #2
   24182:	4639      	mov	r1, r7
   24184:	e7dd      	b.n	24142 <free_list_add+0x56>

00024186 <split_alloc>:

/* Allocates (fit check has already been perfomred) from the next
 * chunk at the specified bucket level
 */
static void *split_alloc(struct z_heap *h, int bidx, size_t sz)
{
   24186:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2418a:	4604      	mov	r4, r0
	CHECK(h->buckets[bidx].next != 0
	      && sz <= size(h, h->buckets[bidx].next));

	chunkid_t c = h->buckets[bidx].next;
   2418c:	6843      	ldr	r3, [r0, #4]
{
   2418e:	4617      	mov	r7, r2
	chunkid_t c = h->buckets[bidx].next;
   24190:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]

	free_list_remove(h, bidx, c);
   24194:	462a      	mov	r2, r5
   24196:	f7ff ff74 	bl	24082 <free_list_remove>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2419a:	2200      	movs	r2, #0
   2419c:	4629      	mov	r1, r5
   2419e:	4620      	mov	r0, r4
   241a0:	f7ff ff4c 	bl	2403c <chunk_field>
	/* Split off remainder if it's usefully large */
	size_t rem = size(h, c) - sz;

	CHECK(rem < h->len);

	if (rem >= (big_heap(h) ? 2 : 1)) {
   241a4:	68a3      	ldr	r3, [r4, #8]
   241a6:	68e6      	ldr	r6, [r4, #12]
   241a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   241ac:	bf2c      	ite	cs
   241ae:	2302      	movcs	r3, #2
   241b0:	2301      	movcc	r3, #1
   241b2:	4030      	ands	r0, r6
	size_t rem = size(h, c) - sz;
   241b4:	1bc6      	subs	r6, r0, r7
	if (rem >= (big_heap(h) ? 2 : 1)) {
   241b6:	42b3      	cmp	r3, r6
   241b8:	d82d      	bhi.n	24216 <split_alloc+0x90>
		chunkid_t c2 = c + sz;
		chunkid_t c3 = right_chunk(h, c);
   241ba:	4629      	mov	r1, r5
   241bc:	4620      	mov	r0, r4
   241be:	f7ff ff56 	bl	2406e <right_chunk>
		chunkid_t c2 = c + sz;
   241c2:	eb05 0807 	add.w	r8, r5, r7

		chunk_set(h, c, SIZE_AND_USED, sz);
   241c6:	463b      	mov	r3, r7
   241c8:	2200      	movs	r2, #0
   241ca:	4629      	mov	r1, r5
		chunkid_t c3 = right_chunk(h, c);
   241cc:	4681      	mov	r9, r0
		chunk_set(h, c, SIZE_AND_USED, sz);
   241ce:	4620      	mov	r0, r4
   241d0:	f7ff ff40 	bl	24054 <chunk_set>
		chunk_set(h, c2, SIZE_AND_USED, rem);
   241d4:	4633      	mov	r3, r6
   241d6:	2200      	movs	r2, #0
   241d8:	4641      	mov	r1, r8
   241da:	4620      	mov	r0, r4
   241dc:	f7ff ff3a 	bl	24054 <chunk_set>
		chunk_set(h, c2, LEFT_SIZE, sz);
   241e0:	463b      	mov	r3, r7
   241e2:	2201      	movs	r2, #1
   241e4:	4641      	mov	r1, r8
   241e6:	4620      	mov	r0, r4
   241e8:	f7ff ff34 	bl	24054 <chunk_set>
   241ec:	2200      	movs	r2, #0
   241ee:	4641      	mov	r1, r8
   241f0:	4620      	mov	r0, r4
   241f2:	f7ff ff23 	bl	2403c <chunk_field>
   241f6:	68e3      	ldr	r3, [r4, #12]
		if (!last_chunk(h, c2)) {
   241f8:	68a2      	ldr	r2, [r4, #8]
   241fa:	4003      	ands	r3, r0
	return (c + size(h, c)) == h->len;
   241fc:	4443      	add	r3, r8
		if (!last_chunk(h, c2)) {
   241fe:	4293      	cmp	r3, r2
   24200:	d005      	beq.n	2420e <split_alloc+0x88>
			chunk_set(h, c3, LEFT_SIZE, rem);
   24202:	4633      	mov	r3, r6
   24204:	2201      	movs	r2, #1
   24206:	4649      	mov	r1, r9
   24208:	4620      	mov	r0, r4
   2420a:	f7ff ff23 	bl	24054 <chunk_set>
		}
		free_list_add(h, c2);
   2420e:	4641      	mov	r1, r8
   24210:	4620      	mov	r0, r4
   24212:	f7ff ff6b 	bl	240ec <free_list_add>
   24216:	4629      	mov	r1, r5
   24218:	2200      	movs	r2, #0
   2421a:	4620      	mov	r0, r4
   2421c:	f7ff ff0e 	bl	2403c <chunk_field>
   24220:	68e2      	ldr	r2, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   24222:	4629      	mov	r1, r5
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   24224:	4010      	ands	r0, r2
		  size(h, c) | (used ? (h->size_mask + 1) : 0));
   24226:	3201      	adds	r2, #1
	chunk_set(h, c, SIZE_AND_USED,
   24228:	ea40 0302 	orr.w	r3, r0, r2
   2422c:	4620      	mov	r0, r4
   2422e:	2200      	movs	r2, #0
   24230:	f7ff ff10 	bl	24054 <chunk_set>
	return big_heap(h) ? 8 : 4;
   24234:	68a3      	ldr	r3, [r4, #8]
	u8_t *ret = ((u8_t *)&h->buf[c]) + chunk_header_bytes(h);
   24236:	6820      	ldr	r0, [r4, #0]
   24238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2423c:	bf2c      	ite	cs
   2423e:	2308      	movcs	r3, #8
   24240:	2304      	movcc	r3, #4
   24242:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	}

	chunk_set_used(h, c, true);

	return chunk_mem(h, c);
}
   24246:	4428      	add	r0, r5
   24248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002424c <sys_heap_free>:

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   2424c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (mem == NULL) {
   24250:	2900      	cmp	r1, #0
   24252:	f000 80ae 	beq.w	243b2 <sys_heap_free+0x166>
		return; /* ISO C free() semantics */
	}

	struct z_heap *h = heap->heap;
   24256:	6804      	ldr	r4, [r0, #0]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   24258:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   2425a:	68a7      	ldr	r7, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2425c:	4620      	mov	r0, r4
	return big_heap(h) ? 8 : 4;
   2425e:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   24262:	bf2c      	ite	cs
   24264:	2508      	movcs	r5, #8
   24266:	2504      	movcc	r5, #4
	chunkid_t c = ((u8_t *)mem - chunk_header_bytes(h)
   24268:	1b49      	subs	r1, r1, r5
		       - (u8_t *)h->buf) / CHUNK_UNIT;
   2426a:	6825      	ldr	r5, [r4, #0]
   2426c:	1b4d      	subs	r5, r1, r5
   2426e:	bf48      	it	mi
   24270:	3507      	addmi	r5, #7
   24272:	10ed      	asrs	r5, r5, #3
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   24274:	4629      	mov	r1, r5
   24276:	f7ff fee1 	bl	2403c <chunk_field>
   2427a:	68e6      	ldr	r6, [r4, #12]
   2427c:	ea06 0800 	and.w	r8, r6, r0
	return (c + size(h, c)) == h->len;
   24280:	eb05 0308 	add.w	r3, r5, r8

	/* Merge with right chunk?  We can just absorb it. */
	if (!last_chunk(h, c) && !used(h, right_chunk(h, c))) {
   24284:	42bb      	cmp	r3, r7
   24286:	d036      	beq.n	242f6 <sys_heap_free+0xaa>
   24288:	4629      	mov	r1, r5
   2428a:	4620      	mov	r0, r4
   2428c:	f7ff feef 	bl	2406e <right_chunk>
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   24290:	2200      	movs	r2, #0
   24292:	4601      	mov	r1, r0
   24294:	4682      	mov	sl, r0
   24296:	4620      	mov	r0, r4
   24298:	f7ff fed0 	bl	2403c <chunk_field>
   2429c:	ea30 0906 	bics.w	r9, r0, r6
   242a0:	d129      	bne.n	242f6 <sys_heap_free+0xaa>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   242a2:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   242a6:	bf34      	ite	cc
   242a8:	2700      	movcc	r7, #0
   242aa:	2701      	movcs	r7, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   242ac:	4006      	ands	r6, r0
		chunkid_t rc = right_chunk(h, c);
		size_t newsz = size(h, c) + size(h, rc);
   242ae:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   242b0:	fab6 f686 	clz	r6, r6
   242b4:	f1c7 071f 	rsb	r7, r7, #31

		free_list_remove(h, bucket_idx(h, size(h, rc)), rc);
   242b8:	4652      	mov	r2, sl
   242ba:	4620      	mov	r0, r4
   242bc:	1bb9      	subs	r1, r7, r6
   242be:	f7ff fee0 	bl	24082 <free_list_remove>
		chunk_set(h, c, SIZE_AND_USED, newsz);
   242c2:	4643      	mov	r3, r8
   242c4:	464a      	mov	r2, r9
   242c6:	4629      	mov	r1, r5
   242c8:	4620      	mov	r0, r4
   242ca:	f7ff fec3 	bl	24054 <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   242ce:	4629      	mov	r1, r5
   242d0:	4620      	mov	r0, r4
   242d2:	f7ff feb3 	bl	2403c <chunk_field>
   242d6:	68e3      	ldr	r3, [r4, #12]
   242d8:	4018      	ands	r0, r3
		if (!last_chunk(h, c)) {
   242da:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   242dc:	4428      	add	r0, r5
		if (!last_chunk(h, c)) {
   242de:	4283      	cmp	r3, r0
   242e0:	d009      	beq.n	242f6 <sys_heap_free+0xaa>
			chunk_set(h, right_chunk(h, c), LEFT_SIZE, newsz);
   242e2:	4629      	mov	r1, r5
   242e4:	4620      	mov	r0, r4
   242e6:	f7ff fec2 	bl	2406e <right_chunk>
   242ea:	4643      	mov	r3, r8
   242ec:	4601      	mov	r1, r0
   242ee:	2201      	movs	r2, #1
   242f0:	4620      	mov	r0, r4
   242f2:	f7ff feaf 	bl	24054 <chunk_set>
		}
	}

	/* Merge with left chunk?  It absorbs us. */
	if (c != h->chunk0 && !used(h, left_chunk(h, c))) {
   242f6:	6923      	ldr	r3, [r4, #16]
   242f8:	42ab      	cmp	r3, r5
   242fa:	d047      	beq.n	2438c <sys_heap_free+0x140>
	return chunk_field(h, c, LEFT_SIZE);
   242fc:	2201      	movs	r2, #1
   242fe:	4629      	mov	r1, r5
   24300:	4620      	mov	r0, r4
   24302:	f7ff fe9b 	bl	2403c <chunk_field>
	return c - left_size(h, c);
   24306:	1a2f      	subs	r7, r5, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   24308:	2200      	movs	r2, #0
   2430a:	4639      	mov	r1, r7
   2430c:	4620      	mov	r0, r4
   2430e:	f7ff fe95 	bl	2403c <chunk_field>
   24312:	f8d4 800c 	ldr.w	r8, [r4, #12]
   24316:	4606      	mov	r6, r0
   24318:	ea30 0908 	bics.w	r9, r0, r8
   2431c:	d136      	bne.n	2438c <sys_heap_free+0x140>
   2431e:	464a      	mov	r2, r9
   24320:	4629      	mov	r1, r5
   24322:	4620      	mov	r0, r4
   24324:	f7ff fe8a 	bl	2403c <chunk_field>
		chunkid_t lc = left_chunk(h, c);
		chunkid_t rc = right_chunk(h, c);
   24328:	4629      	mov	r1, r5
   2432a:	4682      	mov	sl, r0
   2432c:	4620      	mov	r0, r4
   2432e:	f7ff fe9e 	bl	2406e <right_chunk>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   24332:	68a1      	ldr	r1, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   24334:	ea06 0608 	and.w	r6, r6, r8
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   24338:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   2433c:	bf34      	ite	cc
   2433e:	2100      	movcc	r1, #0
   24340:	2101      	movcs	r1, #1
   24342:	4605      	mov	r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   24344:	ea08 000a 	and.w	r0, r8, sl
		size_t csz = size(h, c);
		size_t merged_sz = csz + size(h, lc);
   24348:	1983      	adds	r3, r0, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2434a:	fab6 f686 	clz	r6, r6
   2434e:	f1c1 011f 	rsb	r1, r1, #31

		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   24352:	463a      	mov	r2, r7
   24354:	4620      	mov	r0, r4
   24356:	1b89      	subs	r1, r1, r6
		size_t merged_sz = csz + size(h, lc);
   24358:	9301      	str	r3, [sp, #4]
		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   2435a:	f7ff fe92 	bl	24082 <free_list_remove>
		chunk_set(h, lc, SIZE_AND_USED, merged_sz);
   2435e:	464a      	mov	r2, r9
   24360:	4639      	mov	r1, r7
   24362:	4620      	mov	r0, r4
   24364:	9b01      	ldr	r3, [sp, #4]
   24366:	f7ff fe75 	bl	24054 <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2436a:	4639      	mov	r1, r7
   2436c:	4620      	mov	r0, r4
   2436e:	f7ff fe65 	bl	2403c <chunk_field>
   24372:	68e2      	ldr	r2, [r4, #12]
   24374:	4010      	ands	r0, r2
		if (!last_chunk(h, lc)) {
   24376:	68a2      	ldr	r2, [r4, #8]
	return (c + size(h, c)) == h->len;
   24378:	4438      	add	r0, r7
		if (!last_chunk(h, lc)) {
   2437a:	4290      	cmp	r0, r2
   2437c:	d005      	beq.n	2438a <sys_heap_free+0x13e>
			chunk_set(h, rc, LEFT_SIZE, merged_sz);
   2437e:	2201      	movs	r2, #1
   24380:	4629      	mov	r1, r5
   24382:	4620      	mov	r0, r4
   24384:	9b01      	ldr	r3, [sp, #4]
   24386:	f7ff fe65 	bl	24054 <chunk_set>
		}

		c = lc;
   2438a:	463d      	mov	r5, r7
   2438c:	4629      	mov	r1, r5
   2438e:	2200      	movs	r2, #0
   24390:	4620      	mov	r0, r4
   24392:	f7ff fe53 	bl	2403c <chunk_field>
   24396:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   24398:	4629      	mov	r1, r5
   2439a:	4003      	ands	r3, r0
   2439c:	2200      	movs	r2, #0
   2439e:	4620      	mov	r0, r4
   243a0:	f7ff fe58 	bl	24054 <chunk_set>
	}

	chunk_set_used(h, c, false);
	free_list_add(h, c);
   243a4:	4629      	mov	r1, r5
   243a6:	4620      	mov	r0, r4
}
   243a8:	b002      	add	sp, #8
   243aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	free_list_add(h, c);
   243ae:	f7ff be9d 	b.w	240ec <free_list_add>
}
   243b2:	b002      	add	sp, #8
   243b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000243b8 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   243b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;
   243bc:	6804      	ldr	r4, [r0, #0]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   243be:	1dcd      	adds	r5, r1, #7
	return big_heap(h) ? 8 : 4;
   243c0:	68a2      	ldr	r2, [r4, #8]
   243c2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   243c6:	bf2c      	ite	cs
   243c8:	2308      	movcs	r3, #8
   243ca:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   243cc:	441d      	add	r5, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   243ce:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   243d2:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   243d6:	fab5 f685 	clz	r6, r5
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   243da:	bf34      	ite	cc
   243dc:	2300      	movcc	r3, #0
   243de:	2301      	movcs	r3, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   243e0:	441e      	add	r6, r3
   243e2:	f1c6 081f 	rsb	r8, r6, #31
	size_t sz = bytes_to_chunksz(h, bytes);
	int bi = bucket_idx(h, sz);
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bytes == 0 || bi > bucket_idx(h, h->len)) {
   243e6:	2900      	cmp	r1, #0
   243e8:	d03b      	beq.n	24462 <sys_heap_alloc+0xaa>
   243ea:	fab2 f282 	clz	r2, r2
   243ee:	f1c3 031f 	rsb	r3, r3, #31
   243f2:	1a9b      	subs	r3, r3, r2
   243f4:	4598      	cmp	r8, r3
   243f6:	dc34      	bgt.n	24462 <sys_heap_alloc+0xaa>
	struct z_heap_bucket *b = &h->buckets[bi];
   243f8:	6867      	ldr	r7, [r4, #4]
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);

	for (int i = 0; i < loops; i++) {
   243fa:	f04f 0a00 	mov.w	sl, #0
	struct z_heap_bucket *b = &h->buckets[bi];
   243fe:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);
   24402:	687b      	ldr	r3, [r7, #4]
   24404:	2b03      	cmp	r3, #3
   24406:	bf28      	it	cs
   24408:	2303      	movcs	r3, #3
   2440a:	4699      	mov	r9, r3
	for (int i = 0; i < loops; i++) {
   2440c:	45ca      	cmp	sl, r9
   2440e:	db0d      	blt.n	2442c <sys_heap_alloc+0x74>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   24410:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   24414:	6963      	ldr	r3, [r4, #20]
   24416:	f1c6 0620 	rsb	r6, r6, #32
   2441a:	40b1      	lsls	r1, r6

	if ((bmask & h->avail_buckets) != 0) {
   2441c:	4019      	ands	r1, r3
   2441e:	d020      	beq.n	24462 <sys_heap_alloc+0xaa>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);

		return split_alloc(h, minbucket, sz);
   24420:	fa91 f1a1 	rbit	r1, r1
   24424:	462a      	mov	r2, r5
   24426:	fab1 f181 	clz	r1, r1
   2442a:	e00c      	b.n	24446 <sys_heap_alloc+0x8e>
		if (size(h, b->next) >= sz) {
   2442c:	6839      	ldr	r1, [r7, #0]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2442e:	2200      	movs	r2, #0
   24430:	4620      	mov	r0, r4
   24432:	9101      	str	r1, [sp, #4]
   24434:	f7ff fe02 	bl	2403c <chunk_field>
   24438:	68e3      	ldr	r3, [r4, #12]
   2443a:	9901      	ldr	r1, [sp, #4]
   2443c:	4018      	ands	r0, r3
   2443e:	42a8      	cmp	r0, r5
   24440:	d307      	bcc.n	24452 <sys_heap_alloc+0x9a>
			return split_alloc(h, bi, sz);
   24442:	462a      	mov	r2, r5
   24444:	4641      	mov	r1, r8
		return split_alloc(h, minbucket, sz);
   24446:	4620      	mov	r0, r4
	}

	return NULL;
}
   24448:	b002      	add	sp, #8
   2444a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return split_alloc(h, minbucket, sz);
   2444e:	f7ff be9a 	b.w	24186 <split_alloc>
	return chunk_field(h, c, FREE_NEXT);
   24452:	2203      	movs	r2, #3
   24454:	4620      	mov	r0, r4
   24456:	f7ff fdf1 	bl	2403c <chunk_field>
	for (int i = 0; i < loops; i++) {
   2445a:	f10a 0a01 	add.w	sl, sl, #1
		b->next = free_next(h, b->next);
   2445e:	6038      	str	r0, [r7, #0]
	for (int i = 0; i < loops; i++) {
   24460:	e7d4      	b.n	2440c <sys_heap_alloc+0x54>
}
   24462:	2000      	movs	r0, #0
   24464:	b002      	add	sp, #8
   24466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002446a <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   2446a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   2446c:	188b      	adds	r3, r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   2446e:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   24472:	1dcc      	adds	r4, r1, #7
   24474:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   24478:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   2447c:	1b1b      	subs	r3, r3, r4
   2447e:	08db      	lsrs	r3, r3, #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   24480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   24484:	bf2c      	ite	cs
   24486:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   2448a:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
   2448c:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
   2448e:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   24490:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   24492:	60e1      	str	r1, [r4, #12]
   24494:	bf94      	ite	ls
   24496:	2100      	movls	r1, #0
   24498:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2449a:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2449e:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   244a0:	4684      	mov	ip, r0
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   244a2:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   244a6:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   244aa:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   244ac:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   244b0:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   244b4:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   244b6:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   244b8:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   244ba:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   244bc:	68a2      	ldr	r2, [r4, #8]
   244be:	42ba      	cmp	r2, r7
   244c0:	bf94      	ite	ls
   244c2:	2200      	movls	r2, #0
   244c4:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   244c6:	f1c2 021f 	rsb	r2, r2, #31
   244ca:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   244cc:	4290      	cmp	r0, r2
   244ce:	dd0a      	ble.n	244e6 <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   244d0:	4620      	mov	r0, r4
   244d2:	1a5b      	subs	r3, r3, r1
   244d4:	2200      	movs	r2, #0
   244d6:	f7ff fdbd 	bl	24054 <chunk_set>
	free_list_add(h, h->chunk0);
   244da:	4620      	mov	r0, r4
   244dc:	6921      	ldr	r1, [r4, #16]
}
   244de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   244e2:	f7ff be03 	b.w	240ec <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   244e6:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   244ea:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   244ec:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   244f0:	e7e4      	b.n	244bc <sys_heap_init+0x52>

000244f2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_RUUVI_NODE_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_RUUVI_NODE_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   244f2:	4770      	bx	lr

000244f4 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   244f4:	f7fb b960 	b.w	1f7b8 <SystemInit>

000244f8 <k_cycle_get_32_wrapper>:
   244f8:	f7ec bbb0 	b.w	10c5c <z_timer_cycle_get_32>

000244fc <dummy_timestamp>:
   244fc:	2000      	movs	r0, #0
   244fe:	4770      	bx	lr

00024500 <log_string_sync>:
{
   24500:	b40e      	push	{r1, r2, r3}
   24502:	b503      	push	{r0, r1, lr}
   24504:	aa03      	add	r2, sp, #12
   24506:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   2450a:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap);
   2450c:	f7eb fc5c 	bl	fdc8 <log_generic>
}
   24510:	b002      	add	sp, #8
   24512:	f85d eb04 	ldr.w	lr, [sp], #4
   24516:	b003      	add	sp, #12
   24518:	4770      	bx	lr

0002451a <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
   2451a:	b508      	push	{r3, lr}
				K_THREAD_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   2451c:	f7eb fcb4 	bl	fe88 <log_init>
	}

	return 0;
}
   24520:	2000      	movs	r0, #0
   24522:	bd08      	pop	{r3, pc}

00024524 <log_strdup>:
}
   24524:	4770      	bx	lr

00024526 <out_func>:
{
   24526:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((u8_t *)&c, 1, out_ctx->control_block->ctx);
   24528:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   2452c:	9001      	str	r0, [sp, #4]
		out_ctx->func((u8_t *)&c, 1, out_ctx->control_block->ctx);
   2452e:	2101      	movs	r1, #1
   24530:	6852      	ldr	r2, [r2, #4]
   24532:	a801      	add	r0, sp, #4
   24534:	4798      	blx	r3
}
   24536:	2000      	movs	r0, #0
   24538:	b003      	add	sp, #12
   2453a:	f85d fb04 	ldr.w	pc, [sp], #4

0002453e <buffer_write>:
{
   2453e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24540:	4606      	mov	r6, r0
   24542:	460d      	mov	r5, r1
   24544:	4614      	mov	r4, r2
   24546:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   24548:	4621      	mov	r1, r4
   2454a:	4628      	mov	r0, r5
   2454c:	463a      	mov	r2, r7
   2454e:	47b0      	blx	r6
	} while (len != 0);
   24550:	1a24      	subs	r4, r4, r0
		buf += processed;
   24552:	4405      	add	r5, r0
	} while (len != 0);
   24554:	d1f8      	bne.n	24548 <buffer_write+0xa>
}
   24556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024558 <log_output_flush>:
		     log_output->control_block->offset,
   24558:	6842      	ldr	r2, [r0, #4]
{
   2455a:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   2455c:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   24560:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   24562:	6881      	ldr	r1, [r0, #8]
   24564:	6800      	ldr	r0, [r0, #0]
   24566:	f7ff ffea 	bl	2453e <buffer_write>
	log_output->control_block->offset = 0;
   2456a:	2200      	movs	r2, #0
   2456c:	6863      	ldr	r3, [r4, #4]
   2456e:	601a      	str	r2, [r3, #0]
}
   24570:	bd10      	pop	{r4, pc}

00024572 <char_out>:
{
   24572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24574:	460d      	mov	r5, r1
   24576:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   24578:	4604      	mov	r4, r0
   2457a:	1847      	adds	r7, r0, r1
   2457c:	42bc      	cmp	r4, r7
   2457e:	d101      	bne.n	24584 <char_out+0x12>
}
   24580:	4628      	mov	r0, r5
   24582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   24584:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   24588:	68b3      	ldr	r3, [r6, #8]
   2458a:	4630      	mov	r0, r6
   2458c:	685b      	ldr	r3, [r3, #4]
   2458e:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   24590:	e7f4      	b.n	2457c <char_out+0xa>

00024592 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   24592:	f7ec b8f3 	b.w	1077c <socket_offload_getaddrinfo>

00024596 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   24596:	f7ec b8fb 	b.w	10790 <socket_offload_freeaddrinfo>

0002459a <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   2459a:	b40c      	push	{r2, r3}
   2459c:	4603      	mov	r3, r0
   2459e:	b507      	push	{r0, r1, r2, lr}
   245a0:	aa04      	add	r2, sp, #16
   245a2:	4608      	mov	r0, r1
   245a4:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   245a8:	689b      	ldr	r3, [r3, #8]
	va_start(args, request);
   245aa:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   245ac:	4798      	blx	r3
	va_end(args);

	return res;
}
   245ae:	b003      	add	sp, #12
   245b0:	f85d eb04 	ldr.w	lr, [sp], #4
   245b4:	b002      	add	sp, #8
   245b6:	4770      	bx	lr

000245b8 <sock_getsockopt_vmeth>:
   245b8:	b508      	push	{r3, lr}
   245ba:	f000 fba9 	bl	24d10 <__errno>
   245be:	236d      	movs	r3, #109	; 0x6d
   245c0:	6003      	str	r3, [r0, #0]
   245c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   245c6:	bd08      	pop	{r3, pc}

000245c8 <zsock_received_cb>:
{
   245c8:	b570      	push	{r4, r5, r6, lr}
   245ca:	4604      	mov	r4, r0
	if (!pkt) {
   245cc:	460d      	mov	r5, r1
   245ce:	f100 066c 	add.w	r6, r0, #108	; 0x6c
   245d2:	b999      	cbnz	r1, 245fc <zsock_received_cb+0x34>
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
   245d4:	6f00      	ldr	r0, [r0, #112]	; 0x70
   245d6:	f004 fbcd 	bl	28d74 <z_queue_node_peek>
		if (!last_pkt) {
   245da:	b940      	cbnz	r0, 245ee <zsock_received_cb+0x26>
	val = (val & ~mask) | flag;
   245dc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   245de:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   245e2:	66a3      	str	r3, [r4, #104]	; 0x68
	z_impl_k_queue_cancel_wait(queue);
   245e4:	4630      	mov	r0, r6
}
   245e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   245ea:	f004 bbdb 	b.w	28da4 <z_impl_k_queue_cancel_wait>
	pkt->sent_or_eof = eof;
   245ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   245f2:	f043 0302 	orr.w	r3, r3, #2
   245f6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
   245fa:	bd70      	pop	{r4, r5, r6, pc}
   245fc:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   24600:	f36f 0341 	bfc	r3, #1, #1
   24604:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   24608:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
   2460c:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (net_context_get_type(ctx) == SOCK_STREAM) {
   24610:	2b01      	cmp	r3, #1
   24612:	d106      	bne.n	24622 <zsock_received_cb+0x5a>
		net_context_update_recv_wnd(ctx, -net_pkt_remaining_data(pkt));
   24614:	4608      	mov	r0, r1
   24616:	f001 feb9 	bl	2638c <net_pkt_remaining_data>
   2461a:	4241      	negs	r1, r0
   2461c:	4620      	mov	r0, r4
   2461e:	f001 fc73 	bl	25f08 <net_context_update_recv_wnd>
	k_fifo_put(&ctx->recv_q, pkt);
   24622:	4629      	mov	r1, r5
   24624:	4630      	mov	r0, r6
}
   24626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_fifo_put(&ctx->recv_q, pkt);
   2462a:	f004 bbdb 	b.w	28de4 <k_queue_append>

0002462e <zsock_close_ctx>:
{
   2462e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24630:	2100      	movs	r1, #0
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   24632:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
   24636:	4605      	mov	r5, r0
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   24638:	f3c3 0341 	ubfx	r3, r3, #1, #2
   2463c:	2b03      	cmp	r3, #3
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   2463e:	f04f 0200 	mov.w	r2, #0
   24642:	f04f 0300 	mov.w	r3, #0
   24646:	9100      	str	r1, [sp, #0]
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   24648:	d11e      	bne.n	24688 <zsock_close_ctx+0x5a>
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   2464a:	f001 fbbb 	bl	25dc4 <net_context_accept>
   2464e:	f8b5 6086 	ldrh.w	r6, [r5, #134]	; 0x86
	while ((p = k_fifo_get(&ctx->recv_q, K_NO_WAIT)) != NULL) {
   24652:	f105 076c 	add.w	r7, r5, #108	; 0x6c
	return (enum net_context_state)
   24656:	f3c6 0641 	ubfx	r6, r6, #1, #2
	return z_impl_k_queue_get(queue, timeout);
   2465a:	2200      	movs	r2, #0
   2465c:	2300      	movs	r3, #0
   2465e:	4638      	mov	r0, r7
   24660:	f7fb fce6 	bl	20030 <z_impl_k_queue_get>
   24664:	4604      	mov	r4, r0
   24666:	b990      	cbnz	r0, 2468e <zsock_close_ctx+0x60>
	z_impl_k_queue_cancel_wait(queue);
   24668:	4638      	mov	r0, r7
   2466a:	f004 fb9b 	bl	28da4 <z_impl_k_queue_cancel_wait>
	SET_ERRNO(net_context_put(ctx));
   2466e:	4628      	mov	r0, r5
   24670:	f7ee fa16 	bl	12aa0 <net_context_put>
   24674:	1e05      	subs	r5, r0, #0
   24676:	da12      	bge.n	2469e <zsock_close_ctx+0x70>
   24678:	f000 fb4a 	bl	24d10 <__errno>
   2467c:	426d      	negs	r5, r5
   2467e:	6005      	str	r5, [r0, #0]
   24680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   24684:	b003      	add	sp, #12
   24686:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)net_context_recv(ctx, NULL, K_NO_WAIT, NULL);
   24688:	f7ee fa2e 	bl	12ae8 <net_context_recv>
   2468c:	e7df      	b.n	2464e <zsock_close_ctx+0x20>
		if (is_listen) {
   2468e:	2e03      	cmp	r6, #3
   24690:	d102      	bne.n	24698 <zsock_close_ctx+0x6a>
			net_context_put(p);
   24692:	f7ee fa05 	bl	12aa0 <net_context_put>
   24696:	e7e0      	b.n	2465a <zsock_close_ctx+0x2c>
			net_pkt_unref(p);
   24698:	f001 fd07 	bl	260aa <net_pkt_unref>
   2469c:	e7dd      	b.n	2465a <zsock_close_ctx+0x2c>
	return 0;
   2469e:	4620      	mov	r0, r4
   246a0:	e7f0      	b.n	24684 <zsock_close_ctx+0x56>

000246a2 <z_impl_zsock_close>:
{
   246a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	void *ctx = z_get_fd_obj_and_vtable(sock, &vtable);
   246a4:	a901      	add	r1, sp, #4
{
   246a6:	4605      	mov	r5, r0
	void *ctx = z_get_fd_obj_and_vtable(sock, &vtable);
   246a8:	f7eb f90e 	bl	f8c8 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   246ac:	4604      	mov	r4, r0
   246ae:	b150      	cbz	r0, 246c6 <z_impl_zsock_close+0x24>
	z_free_fd(sock);
   246b0:	4628      	mov	r0, r5
   246b2:	f7eb f94b 	bl	f94c <z_free_fd>
	return z_fdtable_call_ioctl(vtable, ctx, ZFD_IOCTL_CLOSE);
   246b6:	f44f 7280 	mov.w	r2, #256	; 0x100
   246ba:	4621      	mov	r1, r4
   246bc:	9801      	ldr	r0, [sp, #4]
   246be:	f7ff ff6c 	bl	2459a <z_fdtable_call_ioctl>
}
   246c2:	b003      	add	sp, #12
   246c4:	bd30      	pop	{r4, r5, pc}
		return -1;
   246c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   246ca:	e7fa      	b.n	246c2 <z_impl_zsock_close+0x20>

000246cc <sock_bind_vmeth>:

static int sock_bind_vmeth(void *obj, const struct sockaddr *addr,
			   socklen_t addrlen)
{
	return zsock_bind_ctx(obj, addr, addrlen);
   246cc:	f7eb bea2 	b.w	10414 <zsock_bind_ctx>

000246d0 <sock_connect_vmeth>:
}

static int sock_connect_vmeth(void *obj, const struct sockaddr *addr,
			      socklen_t addrlen)
{
	return zsock_connect_ctx(obj, addr, addrlen);
   246d0:	f7eb bec2 	b.w	10458 <zsock_connect_ctx>

000246d4 <z_impl_zsock_connect>:
{
   246d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   246d6:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   246d8:	a903      	add	r1, sp, #12
{
   246da:	9201      	str	r2, [sp, #4]
	return z_get_fd_obj_and_vtable(sock,
   246dc:	f7eb f8f4 	bl	f8c8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   246e0:	b138      	cbz	r0, 246f2 <z_impl_zsock_connect+0x1e>
   246e2:	9b03      	ldr	r3, [sp, #12]
   246e4:	691b      	ldr	r3, [r3, #16]
   246e6:	b123      	cbz	r3, 246f2 <z_impl_zsock_connect+0x1e>
   246e8:	4621      	mov	r1, r4
   246ea:	9a01      	ldr	r2, [sp, #4]
   246ec:	4798      	blx	r3
}
   246ee:	b004      	add	sp, #16
   246f0:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   246f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   246f6:	e7fa      	b.n	246ee <z_impl_zsock_connect+0x1a>

000246f8 <sock_listen_vmeth>:
}

static int sock_listen_vmeth(void *obj, int backlog)
{
	return zsock_listen_ctx(obj, backlog);
   246f8:	f7eb bed6 	b.w	104a8 <zsock_listen_ctx>

000246fc <sock_accept_vmeth>:
}

static int sock_accept_vmeth(void *obj, struct sockaddr *addr,
			     socklen_t *addrlen)
{
	return zsock_accept_ctx(obj, addr, addrlen);
   246fc:	f7eb bef0 	b.w	104e0 <zsock_accept_ctx>

00024700 <sock_sendto_vmeth>:

static ssize_t sock_sendto_vmeth(void *obj, const void *buf, size_t len,
				 int flags, const struct sockaddr *dest_addr,
				 socklen_t addrlen)
{
	return zsock_sendto_ctx(obj, buf, len, flags, dest_addr, addrlen);
   24700:	f7eb bf5e 	b.w	105c0 <zsock_sendto_ctx>

00024704 <sock_write_vmeth>:
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
   24704:	2300      	movs	r3, #0
{
   24706:	b507      	push	{r0, r1, r2, lr}
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
   24708:	e9cd 3300 	strd	r3, r3, [sp]
   2470c:	f7eb ff58 	bl	105c0 <zsock_sendto_ctx>
}
   24710:	b003      	add	sp, #12
   24712:	f85d fb04 	ldr.w	pc, [sp], #4

00024716 <z_impl_zsock_sendto>:
{
   24716:	b530      	push	{r4, r5, lr}
   24718:	b087      	sub	sp, #28
   2471a:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   2471c:	a905      	add	r1, sp, #20
{
   2471e:	e9cd 3202 	strd	r3, r2, [sp, #8]
	return z_get_fd_obj_and_vtable(sock,
   24722:	f7eb f8d1 	bl	f8c8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   24726:	b160      	cbz	r0, 24742 <z_impl_zsock_sendto+0x2c>
   24728:	9905      	ldr	r1, [sp, #20]
   2472a:	69cd      	ldr	r5, [r1, #28]
   2472c:	b14d      	cbz	r5, 24742 <z_impl_zsock_sendto+0x2c>
   2472e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   24732:	990b      	ldr	r1, [sp, #44]	; 0x2c
   24734:	9101      	str	r1, [sp, #4]
   24736:	990a      	ldr	r1, [sp, #40]	; 0x28
   24738:	9100      	str	r1, [sp, #0]
   2473a:	4621      	mov	r1, r4
   2473c:	47a8      	blx	r5
}
   2473e:	b007      	add	sp, #28
   24740:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   24742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24746:	e7fa      	b.n	2473e <z_impl_zsock_sendto+0x28>

00024748 <zsock_sendmsg_ctx>:
{
   24748:	b530      	push	{r4, r5, lr}
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   2474a:	0653      	lsls	r3, r2, #25
	k_timeout_t timeout = K_FOREVER;
   2474c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   24750:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
{
   24754:	b085      	sub	sp, #20
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   24756:	d402      	bmi.n	2475e <zsock_sendmsg_ctx+0x16>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   24758:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2475a:	079b      	lsls	r3, r3, #30
   2475c:	d501      	bpl.n	24762 <zsock_sendmsg_ctx+0x1a>
		timeout = K_NO_WAIT;
   2475e:	2400      	movs	r4, #0
   24760:	2500      	movs	r5, #0
	status = net_context_sendmsg(ctx, msg, flags, NULL, timeout, NULL);
   24762:	2300      	movs	r3, #0
   24764:	e9cd 4500 	strd	r4, r5, [sp]
   24768:	9302      	str	r3, [sp, #8]
   2476a:	f001 fb88 	bl	25e7e <net_context_sendmsg>
	if (status < 0) {
   2476e:	1e04      	subs	r4, r0, #0
   24770:	da05      	bge.n	2477e <zsock_sendmsg_ctx+0x36>
		errno = -status;
   24772:	f000 facd 	bl	24d10 <__errno>
   24776:	4264      	negs	r4, r4
   24778:	6004      	str	r4, [r0, #0]
		return -1;
   2477a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   2477e:	4620      	mov	r0, r4
   24780:	b005      	add	sp, #20
   24782:	bd30      	pop	{r4, r5, pc}

00024784 <sock_sendmsg_vmeth>:
}

static ssize_t sock_sendmsg_vmeth(void *obj, const struct msghdr *msg,
				  int flags)
{
	return zsock_sendmsg_ctx(obj, msg, flags);
   24784:	f7ff bfe0 	b.w	24748 <zsock_sendmsg_ctx>

00024788 <zsock_recvfrom_ctx>:
{
   24788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2478c:	b08f      	sub	sp, #60	; 0x3c
   2478e:	4604      	mov	r4, r0
   24790:	468b      	mov	fp, r1
   24792:	461e      	mov	r6, r3
	if (max_len == 0) {
   24794:	4617      	mov	r7, r2
{
   24796:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (max_len == 0) {
   24798:	2a00      	cmp	r2, #0
   2479a:	f000 810b 	beq.w	249b4 <zsock_recvfrom_ctx+0x22c>
	enum net_sock_type sock_type = net_context_get_type(ctx);
   2479e:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   247a2:	f3c3 1281 	ubfx	r2, r3, #6, #2
	if (sock_type == SOCK_DGRAM) {
   247a6:	2a02      	cmp	r2, #2
   247a8:	f040 80e8 	bne.w	2497c <zsock_recvfrom_ctx+0x1f4>
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   247ac:	f016 0240 	ands.w	r2, r6, #64	; 0x40
   247b0:	d134      	bne.n	2481c <zsock_recvfrom_ctx+0x94>
   247b2:	6e83      	ldr	r3, [r0, #104]	; 0x68
   247b4:	f083 0302 	eor.w	r3, r3, #2
   247b8:	f3c3 0840 	ubfx	r8, r3, #1, #1
   247bc:	f1d8 0800 	rsbs	r8, r8, #0
   247c0:	eb62 0942 	sbc.w	r9, r2, r2, lsl #1
	if (flags & ZSOCK_MSG_PEEK) {
   247c4:	f016 0302 	ands.w	r3, r6, #2
   247c8:	f104 0a6c 	add.w	sl, r4, #108	; 0x6c
   247cc:	9300      	str	r3, [sp, #0]
   247ce:	d034      	beq.n	2483a <zsock_recvfrom_ctx+0xb2>
	struct k_poll_event events[] = {
   247d0:	2210      	movs	r2, #16
   247d2:	2100      	movs	r1, #0
   247d4:	a809      	add	r0, sp, #36	; 0x24
   247d6:	f004 fe86 	bl	294e6 <memset>
   247da:	2304      	movs	r3, #4
   247dc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   247e0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   247e4:	2101      	movs	r1, #1
   247e6:	464b      	mov	r3, r9
   247e8:	4642      	mov	r2, r8
   247ea:	a809      	add	r0, sp, #36	; 0x24
   247ec:	f7fc fa62 	bl	20cb4 <z_impl_k_poll>
		if (res && res != -EAGAIN && res != -EINTR) {
   247f0:	f100 030b 	add.w	r3, r0, #11
   247f4:	2b0b      	cmp	r3, #11
   247f6:	4606      	mov	r6, r0
   247f8:	d806      	bhi.n	24808 <zsock_recvfrom_ctx+0x80>
   247fa:	f640 0181 	movw	r1, #2177	; 0x881
   247fe:	40d9      	lsrs	r1, r3
   24800:	43c9      	mvns	r1, r1
   24802:	f011 0101 	ands.w	r1, r1, #1
   24806:	d00e      	beq.n	24826 <zsock_recvfrom_ctx+0x9e>
			errno = -res;
   24808:	f000 fa82 	bl	24d10 <__errno>
   2480c:	4276      	negs	r6, r6
   2480e:	6006      	str	r6, [r0, #0]
		return -1;
   24810:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
}
   24814:	4648      	mov	r0, r9
   24816:	b00f      	add	sp, #60	; 0x3c
   24818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_NO_WAIT;
   2481c:	f04f 0800 	mov.w	r8, #0
   24820:	f04f 0900 	mov.w	r9, #0
   24824:	e7ce      	b.n	247c4 <zsock_recvfrom_ctx+0x3c>
	return z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   24826:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   24828:	f004 faa4 	bl	28d74 <z_queue_node_peek>
	return z_impl_k_queue_get(queue, timeout);
   2482c:	4606      	mov	r6, r0
	if (!pkt) {
   2482e:	b950      	cbnz	r0, 24846 <zsock_recvfrom_ctx+0xbe>
		errno = EAGAIN;
   24830:	f000 fa6e 	bl	24d10 <__errno>
   24834:	230b      	movs	r3, #11
   24836:	6003      	str	r3, [r0, #0]
   24838:	e7ea      	b.n	24810 <zsock_recvfrom_ctx+0x88>
   2483a:	4642      	mov	r2, r8
   2483c:	464b      	mov	r3, r9
   2483e:	4650      	mov	r0, sl
   24840:	f7fb fbf6 	bl	20030 <z_impl_k_queue_get>
   24844:	e7f2      	b.n	2482c <zsock_recvfrom_ctx+0xa4>
	backup->pos = pkt->cursor.pos;
   24846:	e9d0 a805 	ldrd	sl, r8, [r0, #20]
	if (src_addr && addrlen) {
   2484a:	2d00      	cmp	r5, #0
   2484c:	d073      	beq.n	24936 <zsock_recvfrom_ctx+0x1ae>
   2484e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   24850:	2b00      	cmp	r3, #0
   24852:	d070      	beq.n	24936 <zsock_recvfrom_ctx+0x1ae>
		rv = sock_get_pkt_src_addr(pkt, net_context_get_ip_proto(ctx),
   24854:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
   24858:	9301      	str	r3, [sp, #4]
   2485a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2485c:	681c      	ldr	r4, [r3, #0]
	net_pkt_cursor_init(pkt);
   2485e:	f001 fc94 	bl	2618a <net_pkt_cursor_init>
	return pkt->family;
   24862:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
   24866:	f3c3 0342 	ubfx	r3, r3, #1, #3
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   2486a:	2b02      	cmp	r3, #2
	addr->sa_family = net_pkt_family(pkt);
   2486c:	802b      	strh	r3, [r5, #0]
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   2486e:	d010      	beq.n	24892 <zsock_recvfrom_ctx+0x10a>
		ret = -ENOTSUP;
   24870:	f06f 0485 	mvn.w	r4, #133	; 0x85
	pkt->cursor.pos = backup->pos;
   24874:	e9c6 a805 	strd	sl, r8, [r6, #20]
		if (rv < 0) {
   24878:	2c00      	cmp	r4, #0
   2487a:	d056      	beq.n	2492a <zsock_recvfrom_ctx+0x1a2>
			errno = -rv;
   2487c:	f000 fa48 	bl	24d10 <__errno>
   24880:	4264      	negs	r4, r4
   24882:	6004      	str	r4, [r0, #0]
	if (!(flags & ZSOCK_MSG_PEEK)) {
   24884:	9b00      	ldr	r3, [sp, #0]
   24886:	2b00      	cmp	r3, #0
   24888:	d1c2      	bne.n	24810 <zsock_recvfrom_ctx+0x88>
		net_pkt_unref(pkt);
   2488a:	4630      	mov	r0, r6
   2488c:	f001 fc0d 	bl	260aa <net_pkt_unref>
   24890:	e7be      	b.n	24810 <zsock_recvfrom_ctx+0x88>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access,
   24892:	2000      	movs	r0, #0
   24894:	2328      	movs	r3, #40	; 0x28
		if (addrlen < sizeof(struct sockaddr_in6)) {
   24896:	2c17      	cmp	r4, #23
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access,
   24898:	e9cd 0307 	strd	r0, r3, [sp, #28]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   2489c:	d942      	bls.n	24924 <zsock_recvfrom_ctx+0x19c>
		ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(
   2489e:	4630      	mov	r0, r6
   248a0:	a907      	add	r1, sp, #28
   248a2:	f001 fe58 	bl	26556 <net_pkt_get_data>
		if (!ipv6_hdr ||
   248a6:	4681      	mov	r9, r0
   248a8:	b910      	cbnz	r0, 248b0 <zsock_recvfrom_ctx+0x128>
			ret = -ENOBUFS;
   248aa:	f06f 0468 	mvn.w	r4, #104	; 0x68
   248ae:	e7e1      	b.n	24874 <zsock_recvfrom_ctx+0xec>
	return net_pkt_skip(pkt, access->size);
   248b0:	4630      	mov	r0, r6
   248b2:	9908      	ldr	r1, [sp, #32]
   248b4:	f001 fcf3 	bl	2629e <net_pkt_skip>
		if (!ipv6_hdr ||
   248b8:	2800      	cmp	r0, #0
   248ba:	d1f6      	bne.n	248aa <zsock_recvfrom_ctx+0x122>
		    net_pkt_skip(pkt, net_pkt_ipv6_ext_len(pkt))) {
   248bc:	4630      	mov	r0, r6
   248be:	8ff1      	ldrh	r1, [r6, #62]	; 0x3e
   248c0:	f001 fced 	bl	2629e <net_pkt_skip>
		    net_pkt_acknowledge_data(pkt, &ipv6_access) ||
   248c4:	4604      	mov	r4, r0
   248c6:	2800      	cmp	r0, #0
   248c8:	d1ef      	bne.n	248aa <zsock_recvfrom_ctx+0x122>
		net_ipaddr_copy(&addr6->sin6_addr, &ipv6_hdr->src);
   248ca:	f109 0308 	add.w	r3, r9, #8
   248ce:	aa09      	add	r2, sp, #36	; 0x24
   248d0:	f109 0918 	add.w	r9, r9, #24
   248d4:	4694      	mov	ip, r2
   248d6:	6818      	ldr	r0, [r3, #0]
   248d8:	6859      	ldr	r1, [r3, #4]
   248da:	3308      	adds	r3, #8
   248dc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   248e0:	454b      	cmp	r3, r9
   248e2:	4662      	mov	r2, ip
   248e4:	d1f6      	bne.n	248d4 <zsock_recvfrom_ctx+0x14c>
   248e6:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   248ea:	1d2a      	adds	r2, r5, #4
   248ec:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
   248f0:	4663      	mov	r3, ip
   248f2:	cb03      	ldmia	r3!, {r0, r1}
   248f4:	4573      	cmp	r3, lr
   248f6:	6010      	str	r0, [r2, #0]
   248f8:	6051      	str	r1, [r2, #4]
   248fa:	469c      	mov	ip, r3
   248fc:	f102 0208 	add.w	r2, r2, #8
   24900:	d1f6      	bne.n	248f0 <zsock_recvfrom_ctx+0x168>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   24902:	f89d 3004 	ldrb.w	r3, [sp, #4]
   24906:	2b11      	cmp	r3, #17
   24908:	d1b2      	bne.n	24870 <zsock_recvfrom_ctx+0xe8>
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   2490a:	ab05      	add	r3, sp, #20
   2490c:	9307      	str	r3, [sp, #28]
   2490e:	2308      	movs	r3, #8
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
   24910:	4630      	mov	r0, r6
   24912:	a907      	add	r1, sp, #28
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   24914:	9308      	str	r3, [sp, #32]
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
   24916:	f001 fe1e 	bl	26556 <net_pkt_get_data>
		if (!udp_hdr) {
   2491a:	2800      	cmp	r0, #0
   2491c:	d0c5      	beq.n	248aa <zsock_recvfrom_ctx+0x122>
		*port = udp_hdr->src_port;
   2491e:	8803      	ldrh	r3, [r0, #0]
   24920:	806b      	strh	r3, [r5, #2]
   24922:	e7a7      	b.n	24874 <zsock_recvfrom_ctx+0xec>
			ret = -EINVAL;
   24924:	f06f 0415 	mvn.w	r4, #21
   24928:	e7a4      	b.n	24874 <zsock_recvfrom_ctx+0xec>
		if (src_addr->sa_family == AF_INET) {
   2492a:	882b      	ldrh	r3, [r5, #0]
   2492c:	2b01      	cmp	r3, #1
   2492e:	d113      	bne.n	24958 <zsock_recvfrom_ctx+0x1d0>
			*addrlen = sizeof(struct sockaddr_in);
   24930:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
   24932:	9a19      	ldr	r2, [sp, #100]	; 0x64
   24934:	6013      	str	r3, [r2, #0]
	recv_len = net_pkt_remaining_data(pkt);
   24936:	4630      	mov	r0, r6
   24938:	f001 fd28 	bl	2638c <net_pkt_remaining_data>
	if (recv_len > max_len) {
   2493c:	4287      	cmp	r7, r0
   2493e:	bf28      	it	cs
   24940:	4607      	movcs	r7, r0
	if (net_pkt_read(pkt, buf, recv_len)) {
   24942:	4659      	mov	r1, fp
   24944:	463a      	mov	r2, r7
   24946:	4630      	mov	r0, r6
   24948:	46b9      	mov	r9, r7
   2494a:	f001 fcbe 	bl	262ca <net_pkt_read>
   2494e:	b160      	cbz	r0, 2496a <zsock_recvfrom_ctx+0x1e2>
		errno = ENOBUFS;
   24950:	f000 f9de 	bl	24d10 <__errno>
   24954:	2369      	movs	r3, #105	; 0x69
   24956:	e006      	b.n	24966 <zsock_recvfrom_ctx+0x1de>
		} else if (src_addr->sa_family == AF_INET6) {
   24958:	2b02      	cmp	r3, #2
   2495a:	d101      	bne.n	24960 <zsock_recvfrom_ctx+0x1d8>
			*addrlen = sizeof(struct sockaddr_in6);
   2495c:	2318      	movs	r3, #24
   2495e:	e7e8      	b.n	24932 <zsock_recvfrom_ctx+0x1aa>
			errno = ENOTSUP;
   24960:	f000 f9d6 	bl	24d10 <__errno>
   24964:	2386      	movs	r3, #134	; 0x86
		errno = ENOBUFS;
   24966:	6003      	str	r3, [r0, #0]
		goto fail;
   24968:	e78c      	b.n	24884 <zsock_recvfrom_ctx+0xfc>
	if (!(flags & ZSOCK_MSG_PEEK)) {
   2496a:	9b00      	ldr	r3, [sp, #0]
   2496c:	b91b      	cbnz	r3, 24976 <zsock_recvfrom_ctx+0x1ee>
		net_pkt_unref(pkt);
   2496e:	4630      	mov	r0, r6
   24970:	f001 fb9b 	bl	260aa <net_pkt_unref>
   24974:	e74e      	b.n	24814 <zsock_recvfrom_ctx+0x8c>
	pkt->cursor.pos = backup->pos;
   24976:	e9c6 a805 	strd	sl, r8, [r6, #20]
	return recv_len;
   2497a:	e74b      	b.n	24814 <zsock_recvfrom_ctx+0x8c>
	} else if (sock_type == SOCK_STREAM) {
   2497c:	2a01      	cmp	r2, #1
   2497e:	d119      	bne.n	249b4 <zsock_recvfrom_ctx+0x22c>
	if (!net_context_is_used(ctx)) {
   24980:	07d9      	lsls	r1, r3, #31
   24982:	d403      	bmi.n	2498c <zsock_recvfrom_ctx+0x204>
		errno = EBADF;
   24984:	f000 f9c4 	bl	24d10 <__errno>
   24988:	2309      	movs	r3, #9
   2498a:	e754      	b.n	24836 <zsock_recvfrom_ctx+0xae>
   2498c:	6e83      	ldr	r3, [r0, #104]	; 0x68
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   2498e:	f006 0240 	and.w	r2, r6, #64	; 0x40
   24992:	f003 0302 	and.w	r3, r3, #2
   24996:	4313      	orrs	r3, r2
   24998:	bf0c      	ite	eq
   2499a:	2301      	moveq	r3, #1
   2499c:	2300      	movne	r3, #0
   2499e:	4259      	negs	r1, r3
   249a0:	eb62 0202 	sbc.w	r2, r2, r2
   249a4:	e9cd 1202 	strd	r1, r2, [sp, #8]
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   249a8:	f100 0a6c 	add.w	sl, r0, #108	; 0x6c
   249ac:	6ea1      	ldr	r1, [r4, #104]	; 0x68
		if (sock_is_eof(ctx)) {
   249ae:	f011 0101 	ands.w	r1, r1, #1
   249b2:	d002      	beq.n	249ba <zsock_recvfrom_ctx+0x232>
		return 0;
   249b4:	f04f 0900 	mov.w	r9, #0
   249b8:	e72c      	b.n	24814 <zsock_recvfrom_ctx+0x8c>
	struct k_poll_event events[] = {
   249ba:	2210      	movs	r2, #16
   249bc:	a809      	add	r0, sp, #36	; 0x24
   249be:	f004 fd92 	bl	294e6 <memset>
   249c2:	2204      	movs	r2, #4
   249c4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   249c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   249cc:	f362 0303 	bfi	r3, r2, #0, #4
   249d0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	return z_impl_k_poll(events, num_events, timeout);
   249d4:	2101      	movs	r1, #1
   249d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   249da:	a809      	add	r0, sp, #36	; 0x24
   249dc:	f7fc f96a 	bl	20cb4 <z_impl_k_poll>
		if (res && res != -EAGAIN && res != -EINTR) {
   249e0:	f100 030b 	add.w	r3, r0, #11
   249e4:	2b0b      	cmp	r3, #11
   249e6:	4605      	mov	r5, r0
   249e8:	d806      	bhi.n	249f8 <zsock_recvfrom_ctx+0x270>
   249ea:	f640 0181 	movw	r1, #2177	; 0x881
   249ee:	40d9      	lsrs	r1, r3
   249f0:	43c9      	mvns	r1, r1
   249f2:	f011 0101 	ands.w	r1, r1, #1
   249f6:	d004      	beq.n	24a02 <zsock_recvfrom_ctx+0x27a>
			errno = -res;
   249f8:	f000 f98a 	bl	24d10 <__errno>
   249fc:	426d      	negs	r5, r5
   249fe:	6005      	str	r5, [r0, #0]
			return -1;
   24a00:	e706      	b.n	24810 <zsock_recvfrom_ctx+0x88>
   24a02:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   24a04:	f004 f9b6 	bl	28d74 <z_queue_node_peek>
		if (!pkt) {
   24a08:	4605      	mov	r5, r0
   24a0a:	b918      	cbnz	r0, 24a14 <zsock_recvfrom_ctx+0x28c>
   24a0c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
			if (sock_is_eof(ctx)) {
   24a0e:	07da      	lsls	r2, r3, #31
   24a10:	d4d0      	bmi.n	249b4 <zsock_recvfrom_ctx+0x22c>
   24a12:	e70d      	b.n	24830 <zsock_recvfrom_ctx+0xa8>
	backup->buf = pkt->cursor.buf;
   24a14:	6943      	ldr	r3, [r0, #20]
   24a16:	46b9      	mov	r9, r7
   24a18:	9301      	str	r3, [sp, #4]
	backup->pos = pkt->cursor.pos;
   24a1a:	6983      	ldr	r3, [r0, #24]
   24a1c:	9300      	str	r3, [sp, #0]
		data_len = net_pkt_remaining_data(pkt);
   24a1e:	f001 fcb5 	bl	2638c <net_pkt_remaining_data>
   24a22:	4287      	cmp	r7, r0
   24a24:	bf28      	it	cs
   24a26:	4681      	movcs	r9, r0
   24a28:	4680      	mov	r8, r0
		if (net_pkt_read(pkt, buf, recv_len)) {
   24a2a:	464a      	mov	r2, r9
   24a2c:	4659      	mov	r1, fp
   24a2e:	4628      	mov	r0, r5
   24a30:	f001 fc4b 	bl	262ca <net_pkt_read>
   24a34:	9b01      	ldr	r3, [sp, #4]
   24a36:	b118      	cbz	r0, 24a40 <zsock_recvfrom_ctx+0x2b8>
			errno = ENOBUFS;
   24a38:	f000 f96a 	bl	24d10 <__errno>
   24a3c:	2369      	movs	r3, #105	; 0x69
   24a3e:	e6fa      	b.n	24836 <zsock_recvfrom_ctx+0xae>
		if (!(flags & ZSOCK_MSG_PEEK)) {
   24a40:	f016 0202 	ands.w	r2, r6, #2
   24a44:	9201      	str	r2, [sp, #4]
   24a46:	d11d      	bne.n	24a84 <zsock_recvfrom_ctx+0x2fc>
			if (recv_len == data_len) {
   24a48:	4547      	cmp	r7, r8
   24a4a:	d30f      	bcc.n	24a6c <zsock_recvfrom_ctx+0x2e4>
	return z_impl_k_queue_get(queue, timeout);
   24a4c:	2300      	movs	r3, #0
   24a4e:	2200      	movs	r2, #0
   24a50:	4650      	mov	r0, sl
   24a52:	f7fb faed 	bl	20030 <z_impl_k_queue_get>
	return pkt->sent_or_eof;
   24a56:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
				net_pkt_unref(pkt);
   24a5a:	4628      	mov	r0, r5
				if (net_pkt_eof(pkt)) {
   24a5c:	079b      	lsls	r3, r3, #30
	val = (val & ~mask) | flag;
   24a5e:	bf42      	ittt	mi
   24a60:	6ea3      	ldrmi	r3, [r4, #104]	; 0x68
   24a62:	f043 0301 	orrmi.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   24a66:	66a3      	strmi	r3, [r4, #104]	; 0x68
				net_pkt_unref(pkt);
   24a68:	f001 fb1f 	bl	260aa <net_pkt_unref>
	} while (recv_len == 0);
   24a6c:	f1b9 0f00 	cmp.w	r9, #0
   24a70:	d09c      	beq.n	249ac <zsock_recvfrom_ctx+0x224>
	if (!(flags & ZSOCK_MSG_PEEK)) {
   24a72:	9b01      	ldr	r3, [sp, #4]
   24a74:	2b00      	cmp	r3, #0
   24a76:	f47f aecd 	bne.w	24814 <zsock_recvfrom_ctx+0x8c>
		net_context_update_recv_wnd(ctx, recv_len);
   24a7a:	4649      	mov	r1, r9
   24a7c:	4620      	mov	r0, r4
   24a7e:	f001 fa43 	bl	25f08 <net_context_update_recv_wnd>
		return zsock_recv_stream(ctx, buf, max_len, flags);
   24a82:	e6c7      	b.n	24814 <zsock_recvfrom_ctx+0x8c>
	pkt->cursor.buf = backup->buf;
   24a84:	616b      	str	r3, [r5, #20]
	pkt->cursor.pos = backup->pos;
   24a86:	9b00      	ldr	r3, [sp, #0]
   24a88:	61ab      	str	r3, [r5, #24]
}
   24a8a:	e7ef      	b.n	24a6c <zsock_recvfrom_ctx+0x2e4>

00024a8c <sock_recvfrom_vmeth>:

static ssize_t sock_recvfrom_vmeth(void *obj, void *buf, size_t max_len,
				   int flags, struct sockaddr *src_addr,
				   socklen_t *addrlen)
{
	return zsock_recvfrom_ctx(obj, buf, max_len, flags,
   24a8c:	f7ff be7c 	b.w	24788 <zsock_recvfrom_ctx>

00024a90 <sock_read_vmeth>:
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
   24a90:	2300      	movs	r3, #0
{
   24a92:	b507      	push	{r0, r1, r2, lr}
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
   24a94:	e9cd 3300 	strd	r3, r3, [sp]
   24a98:	f7ff fe76 	bl	24788 <zsock_recvfrom_ctx>
}
   24a9c:	b003      	add	sp, #12
   24a9e:	f85d fb04 	ldr.w	pc, [sp], #4

00024aa2 <z_impl_zsock_recvfrom>:
{
   24aa2:	b530      	push	{r4, r5, lr}
   24aa4:	b087      	sub	sp, #28
   24aa6:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   24aa8:	a905      	add	r1, sp, #20
{
   24aaa:	e9cd 3202 	strd	r3, r2, [sp, #8]
	return z_get_fd_obj_and_vtable(sock,
   24aae:	f7ea ff0b 	bl	f8c8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   24ab2:	b160      	cbz	r0, 24ace <z_impl_zsock_recvfrom+0x2c>
   24ab4:	9905      	ldr	r1, [sp, #20]
   24ab6:	6a0d      	ldr	r5, [r1, #32]
   24ab8:	b14d      	cbz	r5, 24ace <z_impl_zsock_recvfrom+0x2c>
   24aba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   24abe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   24ac0:	9101      	str	r1, [sp, #4]
   24ac2:	990a      	ldr	r1, [sp, #40]	; 0x28
   24ac4:	9100      	str	r1, [sp, #0]
   24ac6:	4621      	mov	r1, r4
   24ac8:	47a8      	blx	r5
}
   24aca:	b007      	add	sp, #28
   24acc:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   24ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24ad2:	e7fa      	b.n	24aca <z_impl_zsock_recvfrom+0x28>

00024ad4 <zsock_setsockopt_ctx>:
	switch (level) {
   24ad4:	2906      	cmp	r1, #6
{
   24ad6:	b508      	push	{r3, lr}
	switch (level) {
   24ad8:	d00c      	beq.n	24af4 <zsock_setsockopt_ctx+0x20>
   24ada:	2929      	cmp	r1, #41	; 0x29
   24adc:	d00c      	beq.n	24af8 <zsock_setsockopt_ctx+0x24>
   24ade:	2901      	cmp	r1, #1
   24ae0:	d101      	bne.n	24ae6 <zsock_setsockopt_ctx+0x12>
		switch (optname) {
   24ae2:	2a02      	cmp	r2, #2
   24ae4:	d00a      	beq.n	24afc <zsock_setsockopt_ctx+0x28>
	errno = ENOPROTOOPT;
   24ae6:	f000 f913 	bl	24d10 <__errno>
   24aea:	236d      	movs	r3, #109	; 0x6d
   24aec:	6003      	str	r3, [r0, #0]
   24aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   24af2:	bd08      	pop	{r3, pc}
		switch (optname) {
   24af4:	2a01      	cmp	r2, #1
   24af6:	e7f5      	b.n	24ae4 <zsock_setsockopt_ctx+0x10>
		switch (optname) {
   24af8:	2a1a      	cmp	r2, #26
   24afa:	e7f3      	b.n	24ae4 <zsock_setsockopt_ctx+0x10>
			return 0;
   24afc:	2000      	movs	r0, #0
   24afe:	e7f8      	b.n	24af2 <zsock_setsockopt_ctx+0x1e>

00024b00 <sock_setsockopt_vmeth>:
}

static int sock_setsockopt_vmeth(void *obj, int level, int optname,
				 const void *optval, socklen_t optlen)
{
	return zsock_setsockopt_ctx(obj, level, optname, optval, optlen);
   24b00:	f7ff bfe8 	b.w	24ad4 <zsock_setsockopt_ctx>

00024b04 <z_impl_zsock_setsockopt>:
{
   24b04:	b530      	push	{r4, r5, lr}
   24b06:	b087      	sub	sp, #28
   24b08:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   24b0a:	a905      	add	r1, sp, #20
{
   24b0c:	e9cd 3202 	strd	r3, r2, [sp, #8]
	return z_get_fd_obj_and_vtable(sock,
   24b10:	f7ea feda 	bl	f8c8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   24b14:	b150      	cbz	r0, 24b2c <z_impl_zsock_setsockopt+0x28>
   24b16:	9905      	ldr	r1, [sp, #20]
   24b18:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   24b1a:	b13d      	cbz	r5, 24b2c <z_impl_zsock_setsockopt+0x28>
   24b1c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   24b20:	990a      	ldr	r1, [sp, #40]	; 0x28
   24b22:	9100      	str	r1, [sp, #0]
   24b24:	4621      	mov	r1, r4
   24b26:	47a8      	blx	r5
}
   24b28:	b007      	add	sp, #28
   24b2a:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   24b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24b30:	e7fa      	b.n	24b28 <z_impl_zsock_setsockopt+0x24>

00024b32 <zsock_getsockname_ctx>:
{
   24b32:	b5f0      	push	{r4, r5, r6, r7, lr}
   24b34:	4614      	mov	r4, r2
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   24b36:	8b82      	ldrh	r2, [r0, #28]
{
   24b38:	460d      	mov	r5, r1
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   24b3a:	2a02      	cmp	r2, #2
   24b3c:	f04f 0300 	mov.w	r3, #0
{
   24b40:	b087      	sub	sp, #28
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   24b42:	d11a      	bne.n	24b7a <zsock_getsockname_ctx+0x48>
		struct sockaddr_in6 addr6 = { 0 };
   24b44:	9305      	str	r3, [sp, #20]
		addr6.sin6_port = net_sin6_ptr(&ctx->local)->sin6_port;
   24b46:	8bc3      	ldrh	r3, [r0, #30]
		addr6.sin6_family = AF_INET6;
   24b48:	f8ad 2000 	strh.w	r2, [sp]
		addr6.sin6_port = net_sin6_ptr(&ctx->local)->sin6_port;
   24b4c:	f8ad 3002 	strh.w	r3, [sp, #2]
		memcpy(&addr6.sin6_addr, net_sin6_ptr(&ctx->local)->sin6_addr,
   24b50:	6a03      	ldr	r3, [r0, #32]
   24b52:	ae01      	add	r6, sp, #4
   24b54:	f103 0710 	add.w	r7, r3, #16
   24b58:	4632      	mov	r2, r6
   24b5a:	6818      	ldr	r0, [r3, #0]
   24b5c:	6859      	ldr	r1, [r3, #4]
   24b5e:	3308      	adds	r3, #8
   24b60:	c203      	stmia	r2!, {r0, r1}
   24b62:	42bb      	cmp	r3, r7
   24b64:	4616      	mov	r6, r2
   24b66:	d1f7      	bne.n	24b58 <zsock_getsockname_ctx+0x26>
		memcpy(addr, &addr6, MIN(*addrlen, newlen));
   24b68:	6822      	ldr	r2, [r4, #0]
   24b6a:	4669      	mov	r1, sp
   24b6c:	2a18      	cmp	r2, #24
   24b6e:	bf28      	it	cs
   24b70:	2218      	movcs	r2, #24
   24b72:	4628      	mov	r0, r5
   24b74:	f004 fc7d 	bl	29472 <memcpy>
		newlen = sizeof(struct sockaddr_in6);
   24b78:	2318      	movs	r3, #24
}
   24b7a:	2000      	movs	r0, #0
	*addrlen = newlen;
   24b7c:	6023      	str	r3, [r4, #0]
}
   24b7e:	b007      	add	sp, #28
   24b80:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024b82 <uart_poll_out>:
   24b82:	6883      	ldr	r3, [r0, #8]
   24b84:	685b      	ldr	r3, [r3, #4]
   24b86:	4718      	bx	r3

00024b88 <debug_hook_out_nop>:
}
   24b88:	2000      	movs	r0, #0
   24b8a:	4770      	bx	lr

00024b8c <get_status>:
	if (data->started) {
   24b8c:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
   24b8e:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
   24b90:	b2c9      	uxtb	r1, r1
	if (data->started) {
   24b92:	fb02 3101 	mla	r1, r2, r1, r3
   24b96:	7a4b      	ldrb	r3, [r1, #9]
   24b98:	b923      	cbnz	r3, 24ba4 <get_status+0x18>
	if (data->ref > 0) {
   24b9a:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   24b9c:	fab0 f080 	clz	r0, r0
   24ba0:	0940      	lsrs	r0, r0, #5
   24ba2:	4770      	bx	lr
   24ba4:	2002      	movs	r0, #2
}
   24ba6:	4770      	bx	lr

00024ba8 <clock_stop>:
{
   24ba8:	b570      	push	{r4, r5, r6, lr}
   24baa:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
   24bac:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
   24bae:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
   24bb0:	f04f 0320 	mov.w	r3, #32
   24bb4:	f3ef 8611 	mrs	r6, BASEPRI
   24bb8:	f383 8811 	msr	BASEPRI, r3
   24bbc:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   24bc0:	230c      	movs	r3, #12
   24bc2:	434b      	muls	r3, r1
   24bc4:	18ea      	adds	r2, r5, r3
   24bc6:	7a10      	ldrb	r0, [r2, #8]
   24bc8:	b1a0      	cbz	r0, 24bf4 <clock_stop+0x4c>
	data->ref--;
   24bca:	3801      	subs	r0, #1
   24bcc:	b2c0      	uxtb	r0, r0
   24bce:	7210      	strb	r0, [r2, #8]
	if (data->ref == 0) {
   24bd0:	b998      	cbnz	r0, 24bfa <clock_stop+0x52>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   24bd2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	list->head = NULL;
   24bd6:	50e8      	str	r0, [r5, r3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24bd8:	78cb      	ldrb	r3, [r1, #3]
   24bda:	2101      	movs	r1, #1
   24bdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24be0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
	list->tail = NULL;
   24be4:	6050      	str	r0, [r2, #4]
   24be6:	6019      	str	r1, [r3, #0]
		data->started = false;
   24be8:	7250      	strb	r0, [r2, #9]
	__asm__ volatile(
   24bea:	f386 8811 	msr	BASEPRI, r6
   24bee:	f3bf 8f6f 	isb	sy
}
   24bf2:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   24bf4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   24bf8:	e7f7      	b.n	24bea <clock_stop+0x42>
	int err = 0;
   24bfa:	2000      	movs	r0, #0
   24bfc:	e7f5      	b.n	24bea <clock_stop+0x42>

00024bfe <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   24bfe:	2200      	movs	r2, #0
   24c00:	f7eb be12 	b.w	10828 <clock_async_start>

00024c04 <wdt_nrf_disable>:
}
   24c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24c08:	4770      	bx	lr

00024c0a <wdt_nrf_feed>:
{
   24c0a:	b508      	push	{r3, lr}
	if (channel_id > get_dev_data(dev)->m_allocated_channels) {
   24c0c:	68c3      	ldr	r3, [r0, #12]
   24c0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   24c12:	428b      	cmp	r3, r1
   24c14:	db05      	blt.n	24c22 <wdt_nrf_feed+0x18>
	nrfx_wdt_channel_feed(&get_dev_config(dev)->wdt,
   24c16:	6840      	ldr	r0, [r0, #4]
   24c18:	b2c9      	uxtb	r1, r1
   24c1a:	f7fa fe45 	bl	1f8a8 <nrfx_wdt_channel_feed>
	return 0;
   24c1e:	2000      	movs	r0, #0
}
   24c20:	bd08      	pop	{r3, pc}
		return -EINVAL;
   24c22:	f06f 0015 	mvn.w	r0, #21
   24c26:	e7fb      	b.n	24c20 <wdt_nrf_feed+0x16>

00024c28 <wdt_nrf_setup>:
{
   24c28:	b538      	push	{r3, r4, r5, lr}
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   24c2a:	6844      	ldr	r4, [r0, #4]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
   24c2c:	f001 0301 	and.w	r3, r1, #1
   24c30:	f1c3 0309 	rsb	r3, r3, #9
	if (options & WDT_OPT_PAUSE_HALTED_BY_DBG) {
   24c34:	078a      	lsls	r2, r1, #30
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   24c36:	6825      	ldr	r5, [r4, #0]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
   24c38:	b2db      	uxtb	r3, r3
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_HALT;
   24c3a:	bf48      	it	mi
   24c3c:	f003 03f7 	andmi.w	r3, r3, #247	; 0xf7
    p_reg->CONFIG = behaviour;
   24c40:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   24c44:	68c3      	ldr	r3, [r0, #12]
			   / 1000));
   24c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   24c4a:	6a19      	ldr	r1, [r3, #32]
			   / 1000));
   24c4c:	2300      	movs	r3, #0
   24c4e:	03c8      	lsls	r0, r1, #15
   24c50:	0c49      	lsrs	r1, r1, #17
   24c52:	f7e7 fdb1 	bl	c7b8 <__aeabi_uldivmod>
    p_reg->CRV = reload_value;
   24c56:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
	nrfx_wdt_enable(&get_dev_config(dev)->wdt);
   24c5a:	4620      	mov	r0, r4
   24c5c:	f7fa fdee 	bl	1f83c <nrfx_wdt_enable>
}
   24c60:	2000      	movs	r0, #0
   24c62:	bd38      	pop	{r3, r4, r5, pc}

00024c64 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   24c64:	4770      	bx	lr

00024c66 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   24c66:	4770      	bx	lr

00024c68 <sys_clock_disable>:
   24c68:	4770      	bx	lr

00024c6a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   24c6a:	2100      	movs	r1, #0
   24c6c:	2001      	movs	r0, #1
   24c6e:	f7ec b8a1 	b.w	10db4 <z_arm_fatal_error>

00024c72 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   24c72:	6e03      	ldr	r3, [r0, #96]	; 0x60
   24c74:	f383 880b 	msr	PSPLIM, r3
}
   24c78:	4770      	bx	lr

00024c7a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   24c7a:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   24c7c:	6800      	ldr	r0, [r0, #0]
   24c7e:	f7ec b899 	b.w	10db4 <z_arm_fatal_error>

00024c82 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   24c82:	b508      	push	{r3, lr}
	handler();
   24c84:	f7ec f9b0 	bl	10fe8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   24c88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   24c8c:	f7ec b9f2 	b.w	11074 <z_arm_exc_exit>

00024c90 <mpu_configure_region>:
{
   24c90:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   24c92:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   24c94:	680c      	ldr	r4, [r1, #0]
{
   24c96:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   24c98:	890a      	ldrh	r2, [r1, #8]
   24c9a:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   24c9c:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   24c9e:	3b01      	subs	r3, #1
   24ca0:	f024 041f 	bic.w	r4, r4, #31
   24ca4:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   24ca6:	f002 021f 	and.w	r2, r2, #31
   24caa:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   24cae:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   24cb2:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   24cb4:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   24cb8:	9303      	str	r3, [sp, #12]
   24cba:	f7ec fc89 	bl	115d0 <region_allocate_and_init>
}
   24cbe:	b005      	add	sp, #20
   24cc0:	bd30      	pop	{r4, r5, pc}

00024cc2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   24cc2:	e840 f000 	tt	r0, r0
   24cc6:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   24cc8:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   24ccc:	bf14      	ite	ne
   24cce:	4618      	movne	r0, r3
   24cd0:	f06f 0015 	mvneq.w	r0, #21
   24cd4:	4770      	bx	lr

00024cd6 <_stdout_hook_default>:
}
   24cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24cda:	4770      	bx	lr

00024cdc <_stdin_hook_default>:
}
   24cdc:	2000      	movs	r0, #0
   24cde:	4770      	bx	lr

00024ce0 <_read>:
{
   24ce0:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   24ce2:	4611      	mov	r1, r2
   24ce4:	f7ec bde0 	b.w	118a8 <z_impl_zephyr_read_stdin>

00024ce8 <_write>:
{
   24ce8:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   24cea:	4611      	mov	r1, r2
   24cec:	f7ec bdf0 	b.w	118d0 <z_impl_zephyr_write_stdout>

00024cf0 <_close>:
   24cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24cf4:	4770      	bx	lr

00024cf6 <_lseek>:
}
   24cf6:	2000      	movs	r0, #0
   24cf8:	4770      	bx	lr

00024cfa <_isatty>:
}
   24cfa:	2001      	movs	r0, #1
   24cfc:	4770      	bx	lr

00024cfe <_kill>:
}
   24cfe:	2000      	movs	r0, #0
   24d00:	4770      	bx	lr

00024d02 <_getpid>:
}
   24d02:	2000      	movs	r0, #0
   24d04:	4770      	bx	lr

00024d06 <_fstat>:
	st->st_mode = S_IFCHR;
   24d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   24d0a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   24d0c:	604b      	str	r3, [r1, #4]
}
   24d0e:	4770      	bx	lr

00024d10 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   24d10:	f7fa be1c 	b.w	1f94c <z_impl_z_errno>

00024d14 <fixed_data_unref>:
}
   24d14:	4770      	bx	lr

00024d16 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   24d16:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   24d18:	6849      	ldr	r1, [r1, #4]
   24d1a:	6809      	ldr	r1, [r1, #0]
   24d1c:	f7ec be42 	b.w	119a4 <net_buf_alloc_len>

00024d20 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   24d20:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   24d22:	4618      	mov	r0, r3
   24d24:	681b      	ldr	r3, [r3, #0]
   24d26:	2b00      	cmp	r3, #0
   24d28:	d1fb      	bne.n	24d22 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   24d2a:	4770      	bx	lr

00024d2c <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   24d2c:	6802      	ldr	r2, [r0, #0]
{
   24d2e:	b510      	push	{r4, lr}
	if (parent->frags) {
   24d30:	b12a      	cbz	r2, 24d3e <net_buf_frag_insert+0x12>
   24d32:	460b      	mov	r3, r1
	while (buf->frags) {
   24d34:	461c      	mov	r4, r3
   24d36:	681b      	ldr	r3, [r3, #0]
   24d38:	2b00      	cmp	r3, #0
   24d3a:	d1fb      	bne.n	24d34 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   24d3c:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   24d3e:	6001      	str	r1, [r0, #0]
}
   24d40:	bd10      	pop	{r4, pc}

00024d42 <net_buf_simple_add>:
	return buf->data + buf->len;
   24d42:	8883      	ldrh	r3, [r0, #4]
   24d44:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   24d46:	4419      	add	r1, r3
   24d48:	8081      	strh	r1, [r0, #4]
	return tail;
}
   24d4a:	18d0      	adds	r0, r2, r3
   24d4c:	4770      	bx	lr

00024d4e <net_ipv6_is_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24d4e:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24d50:	b94a      	cbnz	r2, 24d66 <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24d52:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24d54:	b93b      	cbnz	r3, 24d66 <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24d56:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24d58:	b92a      	cbnz	r2, 24d66 <net_ipv6_is_addr_loopback+0x18>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   24d5a:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24d5c:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
   24d60:	4258      	negs	r0, r3
   24d62:	4158      	adcs	r0, r3
   24d64:	4770      	bx	lr
   24d66:	2000      	movs	r0, #0
   24d68:	4770      	bx	lr

00024d6a <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   24d6a:	b538      	push	{r3, r4, r5, lr}
	if (!pkt->frags) {
   24d6c:	6903      	ldr	r3, [r0, #16]
{
   24d6e:	4604      	mov	r4, r0
   24d70:	460d      	mov	r5, r1
	if (!pkt->frags) {
   24d72:	b923      	cbnz	r3, 24d7e <processing_data+0x14>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   24d74:	4620      	mov	r0, r4
		break;
	}
}
   24d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_pkt_unref(pkt);
   24d7a:	f001 b996 	b.w	260aa <net_pkt_unref>
	if (!is_loopback && !locally_routed) {
   24d7e:	b171      	cbz	r1, 24d9e <processing_data+0x34>
	net_pkt_cursor_init(pkt);
   24d80:	4620      	mov	r0, r4
   24d82:	f001 fa02 	bl	2618a <net_pkt_cursor_init>
	return pkt->frags->data;
   24d86:	6923      	ldr	r3, [r4, #16]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   24d88:	689b      	ldr	r3, [r3, #8]
   24d8a:	781b      	ldrb	r3, [r3, #0]
   24d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   24d90:	2b60      	cmp	r3, #96	; 0x60
   24d92:	d1ef      	bne.n	24d74 <processing_data+0xa>
		return net_ipv6_input(pkt, is_loopback);
   24d94:	4629      	mov	r1, r5
   24d96:	4620      	mov	r0, r4
   24d98:	f001 fe1c 	bl	269d4 <net_ipv6_input>
   24d9c:	e005      	b.n	24daa <processing_data+0x40>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
   24d9e:	4601      	mov	r1, r0
   24da0:	6a00      	ldr	r0, [r0, #32]
   24da2:	f000 fc7d 	bl	256a0 <net_if_recv_data>
		if (ret != NET_CONTINUE) {
   24da6:	2801      	cmp	r0, #1
   24da8:	d0ea      	beq.n	24d80 <processing_data+0x16>
	switch (process_data(pkt, is_loopback)) {
   24daa:	2800      	cmp	r0, #0
   24dac:	d1e2      	bne.n	24d74 <processing_data+0xa>
}
   24dae:	bd38      	pop	{r3, r4, r5, pc}

00024db0 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   24db0:	b508      	push	{r3, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   24db2:	f001 fbf5 	bl	265a0 <net_pkt_init>

	net_context_init();
   24db6:	f7ed ff33 	bl	12c20 <net_context_init>
	net_icmpv6_init();
   24dba:	f7ee f895 	bl	12ee8 <net_icmpv6_init>
	net_ipv6_init();
   24dbe:	f001 ff88 	bl	26cd2 <net_ipv6_init>
		net_conn_init();
   24dc2:	f7ef f8d1 	bl	13f68 <net_conn_init>
	net_route_init();
   24dc6:	f002 fef5 	bl	27bb4 <net_route_init>
	net_if_init();
   24dca:	f7ed fc7b 	bl	126c4 <net_if_init>
	net_tc_rx_init();
   24dce:	f7ee f835 	bl	12e3c <net_tc_rx_init>
	net_if_post_init();
   24dd2:	f7ed fcd7 	bl	12784 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   24dd6:	2000      	movs	r0, #0
   24dd8:	bd08      	pop	{r3, pc}

00024dda <net_send_data>:
{
   24dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pkt || !pkt->frags) {
   24dde:	4604      	mov	r4, r0
{
   24de0:	b090      	sub	sp, #64	; 0x40
	if (!pkt || !pkt->frags) {
   24de2:	2800      	cmp	r0, #0
   24de4:	f000 8090 	beq.w	24f08 <net_send_data+0x12e>
   24de8:	6903      	ldr	r3, [r0, #16]
   24dea:	2b00      	cmp	r3, #0
   24dec:	f000 808c 	beq.w	24f08 <net_send_data+0x12e>
	if (!net_pkt_iface(pkt)) {
   24df0:	6a03      	ldr	r3, [r0, #32]
   24df2:	2b00      	cmp	r3, #0
   24df4:	f000 808b 	beq.w	24f0e <net_send_data+0x134>
	net_pkt_trim_buffer(pkt);
   24df8:	f001 f9ad 	bl	26156 <net_pkt_trim_buffer>
	net_pkt_cursor_init(pkt);
   24dfc:	4620      	mov	r0, r4
   24dfe:	f001 f9c4 	bl	2618a <net_pkt_cursor_init>
	return pkt->family;
   24e02:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	if (net_pkt_family(pkt) == AF_INET6) {
   24e06:	f3c3 0342 	ubfx	r3, r3, #1, #3
   24e0a:	2b02      	cmp	r3, #2
   24e0c:	d172      	bne.n	24ef4 <net_send_data+0x11a>
	return pkt->frags->data;
   24e0e:	6923      	ldr	r3, [r4, #16]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   24e10:	689d      	ldr	r5, [r3, #8]
   24e12:	f7ed fcf7 	bl	12804 <net_ipv6_unspecified_address>
   24e16:	3518      	adds	r5, #24
   24e18:	4601      	mov	r1, r0
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   24e1a:	2210      	movs	r2, #16
   24e1c:	4628      	mov	r0, r5
   24e1e:	f004 fb1a 	bl	29456 <memcmp>
   24e22:	b920      	cbnz	r0, 24e2e <net_send_data+0x54>
			return -EADDRNOTAVAIL;
   24e24:	f06f 007c 	mvn.w	r0, #124	; 0x7c
}
   24e28:	b010      	add	sp, #64	; 0x40
   24e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24e2e:	6923      	ldr	r3, [r4, #16]
		if (net_ipv6_is_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   24e30:	689d      	ldr	r5, [r3, #8]
   24e32:	3518      	adds	r5, #24
   24e34:	4628      	mov	r0, r5
   24e36:	f7ff ff8a 	bl	24d4e <net_ipv6_is_addr_loopback>
   24e3a:	4601      	mov	r1, r0
   24e3c:	2800      	cmp	r0, #0
   24e3e:	d047      	beq.n	24ed0 <net_send_data+0xf6>
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   24e40:	ae0c      	add	r6, sp, #48	; 0x30
   24e42:	4635      	mov	r5, r6
   24e44:	6923      	ldr	r3, [r4, #16]
   24e46:	689a      	ldr	r2, [r3, #8]
   24e48:	f102 0308 	add.w	r3, r2, #8
   24e4c:	3218      	adds	r2, #24
   24e4e:	4637      	mov	r7, r6
   24e50:	6818      	ldr	r0, [r3, #0]
   24e52:	6859      	ldr	r1, [r3, #4]
   24e54:	3308      	adds	r3, #8
   24e56:	c703      	stmia	r7!, {r0, r1}
   24e58:	4293      	cmp	r3, r2
   24e5a:	463e      	mov	r6, r7
   24e5c:	d1f7      	bne.n	24e4e <net_send_data+0x74>
   24e5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   24e62:	466e      	mov	r6, sp
   24e64:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   24e68:	af08      	add	r7, sp, #32
   24e6a:	46bc      	mov	ip, r7
   24e6c:	6923      	ldr	r3, [r4, #16]
   24e6e:	689b      	ldr	r3, [r3, #8]
   24e70:	f103 0218 	add.w	r2, r3, #24
   24e74:	f103 0828 	add.w	r8, r3, #40	; 0x28
   24e78:	46be      	mov	lr, r7
   24e7a:	6810      	ldr	r0, [r2, #0]
   24e7c:	6851      	ldr	r1, [r2, #4]
   24e7e:	3208      	adds	r2, #8
   24e80:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   24e84:	4542      	cmp	r2, r8
   24e86:	4677      	mov	r7, lr
   24e88:	d1f6      	bne.n	24e78 <net_send_data+0x9e>
   24e8a:	4667      	mov	r7, ip
   24e8c:	3308      	adds	r3, #8
   24e8e:	463a      	mov	r2, r7
   24e90:	ca03      	ldmia	r2!, {r0, r1}
   24e92:	42aa      	cmp	r2, r5
   24e94:	6018      	str	r0, [r3, #0]
   24e96:	6059      	str	r1, [r3, #4]
   24e98:	4617      	mov	r7, r2
   24e9a:	f103 0308 	add.w	r3, r3, #8
   24e9e:	d1f6      	bne.n	24e8e <net_send_data+0xb4>
   24ea0:	6923      	ldr	r3, [r4, #16]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   24ea2:	ad04      	add	r5, sp, #16
   24ea4:	689f      	ldr	r7, [r3, #8]
   24ea6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   24eaa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   24eae:	f107 0318 	add.w	r3, r7, #24
   24eb2:	462a      	mov	r2, r5
   24eb4:	ca03      	ldmia	r2!, {r0, r1}
   24eb6:	4562      	cmp	r2, ip
   24eb8:	6018      	str	r0, [r3, #0]
   24eba:	6059      	str	r1, [r3, #4]
   24ebc:	4615      	mov	r5, r2
   24ebe:	f103 0308 	add.w	r3, r3, #8
   24ec2:	d1f6      	bne.n	24eb2 <net_send_data+0xd8>
		processing_data(pkt, true);
   24ec4:	4620      	mov	r0, r4
   24ec6:	2101      	movs	r1, #1
   24ec8:	f7ff ff4f 	bl	24d6a <processing_data>
		return 0;
   24ecc:	2000      	movs	r0, #0
   24ece:	e7ab      	b.n	24e28 <net_send_data+0x4e>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   24ed0:	4628      	mov	r0, r5
   24ed2:	f7ed f86d 	bl	11fb0 <net_if_ipv6_addr_lookup>
		if (net_ipv6_is_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   24ed6:	2800      	cmp	r0, #0
   24ed8:	d1b2      	bne.n	24e40 <net_send_data+0x66>
   24eda:	6923      	ldr	r3, [r4, #16]
   24edc:	6898      	ldr	r0, [r3, #8]
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
   24ede:	7e03      	ldrb	r3, [r0, #24]
   24ee0:	2bff      	cmp	r3, #255	; 0xff
   24ee2:	d102      	bne.n	24eea <net_send_data+0x110>
   24ee4:	7e43      	ldrb	r3, [r0, #25]
   24ee6:	2b01      	cmp	r3, #1
   24ee8:	d0ec      	beq.n	24ec4 <net_send_data+0xea>
		if (net_ipv6_is_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   24eea:	3008      	adds	r0, #8
   24eec:	f7ff ff2f 	bl	24d4e <net_ipv6_is_addr_loopback>
   24ef0:	2800      	cmp	r0, #0
   24ef2:	d197      	bne.n	24e24 <net_send_data+0x4a>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   24ef4:	4621      	mov	r1, r4
   24ef6:	6a20      	ldr	r0, [r4, #32]
   24ef8:	f000 fbdb 	bl	256b2 <net_if_send_data>
		return -EIO;
   24efc:	2802      	cmp	r0, #2
   24efe:	bf14      	ite	ne
   24f00:	2000      	movne	r0, #0
   24f02:	f06f 0004 	mvneq.w	r0, #4
   24f06:	e78f      	b.n	24e28 <net_send_data+0x4e>
		return -ENODATA;
   24f08:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   24f0c:	e78c      	b.n	24e28 <net_send_data+0x4e>
		return -EINVAL;
   24f0e:	f06f 0015 	mvn.w	r0, #21
   24f12:	e789      	b.n	24e28 <net_send_data+0x4e>

00024f14 <sys_slist_append>:
	parent->next = child;
   24f14:	2300      	movs	r3, #0
   24f16:	600b      	str	r3, [r1, #0]
Z_GENLIST_APPEND(slist, snode)
   24f18:	6843      	ldr	r3, [r0, #4]
   24f1a:	b913      	cbnz	r3, 24f22 <sys_slist_append+0xe>
	list->head = node;
   24f1c:	e9c0 1100 	strd	r1, r1, [r0]
}
   24f20:	4770      	bx	lr
	parent->next = child;
   24f22:	6019      	str	r1, [r3, #0]
	list->tail = node;
   24f24:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   24f26:	4770      	bx	lr

00024f28 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24f28:	2200      	movs	r2, #0
   24f2a:	6803      	ldr	r3, [r0, #0]
   24f2c:	b90b      	cbnz	r3, 24f32 <sys_slist_find_and_remove+0xa>
   24f2e:	4618      	mov	r0, r3
   24f30:	4770      	bx	lr
   24f32:	428b      	cmp	r3, r1
   24f34:	d110      	bne.n	24f58 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   24f36:	680b      	ldr	r3, [r1, #0]
   24f38:	b942      	cbnz	r2, 24f4c <sys_slist_find_and_remove+0x24>
   24f3a:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   24f3c:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   24f3e:	4291      	cmp	r1, r2
   24f40:	d100      	bne.n	24f44 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   24f42:	6043      	str	r3, [r0, #4]
	parent->next = child;
   24f44:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24f46:	2001      	movs	r0, #1
	parent->next = child;
   24f48:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   24f4a:	4770      	bx	lr
	parent->next = child;
   24f4c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   24f4e:	6843      	ldr	r3, [r0, #4]
   24f50:	4299      	cmp	r1, r3
	list->tail = node;
   24f52:	bf08      	it	eq
   24f54:	6042      	streq	r2, [r0, #4]
}
   24f56:	e7f5      	b.n	24f44 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24f58:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24f5a:	681b      	ldr	r3, [r3, #0]
   24f5c:	e7e6      	b.n	24f2c <sys_slist_find_and_remove+0x4>

00024f5e <net_if_l2>:
	if (!iface || !iface->if_dev) {
   24f5e:	b110      	cbz	r0, 24f66 <net_if_l2+0x8>
   24f60:	6800      	ldr	r0, [r0, #0]
   24f62:	b100      	cbz	r0, 24f66 <net_if_l2+0x8>
	return iface->if_dev->l2;
   24f64:	6840      	ldr	r0, [r0, #4]
}
   24f66:	4770      	bx	lr

00024f68 <net_context_send_cb>:
{
   24f68:	b410      	push	{r4}
	if (!context) {
   24f6a:	b130      	cbz	r0, 24f7a <net_context_send_cb+0x12>
	if (context->send_cb) {
   24f6c:	6c84      	ldr	r4, [r0, #72]	; 0x48
   24f6e:	b124      	cbz	r4, 24f7a <net_context_send_cb+0x12>
		context->send_cb(context, status, context->user_data);
   24f70:	4623      	mov	r3, r4
   24f72:	6802      	ldr	r2, [r0, #0]
}
   24f74:	f85d 4b04 	ldr.w	r4, [sp], #4
		context->send_cb(context, status, context->user_data);
   24f78:	4718      	bx	r3
}
   24f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
   24f7e:	4770      	bx	lr

00024f80 <l2_flags_get>:
{
   24f80:	b510      	push	{r4, lr}
   24f82:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   24f84:	f7ff ffeb 	bl	24f5e <net_if_l2>
   24f88:	b128      	cbz	r0, 24f96 <l2_flags_get+0x16>
   24f8a:	68c2      	ldr	r2, [r0, #12]
   24f8c:	b11a      	cbz	r2, 24f96 <l2_flags_get+0x16>
}
   24f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   24f92:	4618      	mov	r0, r3
   24f94:	4710      	bx	r2
}
   24f96:	2000      	movs	r0, #0
   24f98:	bd10      	pop	{r4, pc}

00024f9a <net_ipv6_is_prefix>:
	if (length > 128) {
   24f9a:	2a80      	cmp	r2, #128	; 0x80
{
   24f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24f9e:	4607      	mov	r7, r0
   24fa0:	460e      	mov	r6, r1
   24fa2:	4614      	mov	r4, r2
	if (length > 128) {
   24fa4:	d901      	bls.n	24faa <net_ipv6_is_prefix+0x10>
		return false;
   24fa6:	2000      	movs	r0, #0
}
   24fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (memcmp(addr1, addr2, bytes)) {
   24faa:	08d5      	lsrs	r5, r2, #3
   24fac:	462a      	mov	r2, r5
   24fae:	f004 fa52 	bl	29456 <memcmp>
   24fb2:	2800      	cmp	r0, #0
   24fb4:	d1f7      	bne.n	24fa6 <net_ipv6_is_prefix+0xc>
	u8_t bits = 128 - length;
   24fb6:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   24fba:	f014 0407 	ands.w	r4, r4, #7
   24fbe:	d00f      	beq.n	24fe0 <net_ipv6_is_prefix+0x46>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   24fc0:	5d7b      	ldrb	r3, [r7, r5]
   24fc2:	5d72      	ldrb	r2, [r6, r5]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   24fc4:	f1c4 0108 	rsb	r1, r4, #8
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   24fc8:	405a      	eors	r2, r3
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   24fca:	23ff      	movs	r3, #255	; 0xff
   24fcc:	408b      	lsls	r3, r1
   24fce:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   24fd2:	fa03 f404 	lsl.w	r4, r3, r4
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   24fd6:	4222      	tst	r2, r4
   24fd8:	bf0c      	ite	eq
   24fda:	2001      	moveq	r0, #1
   24fdc:	2000      	movne	r0, #0
   24fde:	e7e3      	b.n	24fa8 <net_ipv6_is_prefix+0xe>
		return true;
   24fe0:	2001      	movs	r0, #1
   24fe2:	e7e1      	b.n	24fa8 <net_ipv6_is_prefix+0xe>

00024fe4 <net_ipv6_addr_cmp>:
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   24fe4:	2210      	movs	r2, #16
{
   24fe6:	b508      	push	{r3, lr}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   24fe8:	f004 fa35 	bl	29456 <memcmp>
}
   24fec:	fab0 f080 	clz	r0, r0
   24ff0:	0940      	lsrs	r0, r0, #5
   24ff2:	bd08      	pop	{r3, pc}

00024ff4 <k_uptime_get_32>:
{
   24ff4:	e92d 4800 	stmdb	sp!, {fp, lr}
	return z_impl_k_uptime_ticks();
   24ff8:	f004 f8e6 	bl	291c8 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   24ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   25000:	fba0 bc03 	umull	fp, ip, r0, r3
   25004:	fb03 cc01 	mla	ip, r3, r1, ip
   25008:	ea4f 30db 	mov.w	r0, fp, lsr #15
}
   2500c:	ea40 404c 	orr.w	r0, r0, ip, lsl #17
   25010:	e8bd 8800 	ldmia.w	sp!, {fp, pc}

00025014 <k_delayed_work_remaining_get>:
{
   25014:	b508      	push	{r3, lr}
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   25016:	300c      	adds	r0, #12
   25018:	f004 f897 	bl	2914a <z_timeout_remaining>
			return (u32_t)((t * to_hz + off) / from_hz);
   2501c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   25020:	fba0 2303 	umull	r2, r3, r0, r3
   25024:	0bd0      	lsrs	r0, r2, #15
}
   25026:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2502a:	bd08      	pop	{r3, pc}

0002502c <net_if_ipv6_addr_lookup_by_iface>:
{
   2502c:	b538      	push	{r3, r4, r5, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   2502e:	6844      	ldr	r4, [r0, #4]
{
   25030:	460d      	mov	r5, r1
	if (!ipv6) {
   25032:	b90c      	cbnz	r4, 25038 <net_if_ipv6_addr_lookup_by_iface+0xc>
		return NULL;
   25034:	2000      	movs	r0, #0
}
   25036:	bd38      	pop	{r3, r4, r5, pc}
		if (!ipv6->unicast[i].is_used ||
   25038:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   2503c:	079a      	lsls	r2, r3, #30
   2503e:	d508      	bpl.n	25052 <net_if_ipv6_addr_lookup_by_iface+0x26>
   25040:	8823      	ldrh	r3, [r4, #0]
   25042:	2b02      	cmp	r3, #2
   25044:	d105      	bne.n	25052 <net_if_ipv6_addr_lookup_by_iface+0x26>
		if (net_ipv6_is_prefix(
   25046:	2280      	movs	r2, #128	; 0x80
   25048:	4628      	mov	r0, r5
   2504a:	1d21      	adds	r1, r4, #4
   2504c:	f7ff ffa5 	bl	24f9a <net_ipv6_is_prefix>
   25050:	b988      	cbnz	r0, 25076 <net_if_ipv6_addr_lookup_by_iface+0x4a>
		if (!ipv6->unicast[i].is_used ||
   25052:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
   25056:	079b      	lsls	r3, r3, #30
   25058:	d5ec      	bpl.n	25034 <net_if_ipv6_addr_lookup_by_iface+0x8>
   2505a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   2505c:	2b02      	cmp	r3, #2
   2505e:	d1e9      	bne.n	25034 <net_if_ipv6_addr_lookup_by_iface+0x8>
		if (net_ipv6_is_prefix(
   25060:	2280      	movs	r2, #128	; 0x80
   25062:	4628      	mov	r0, r5
   25064:	f104 0134 	add.w	r1, r4, #52	; 0x34
   25068:	f7ff ff97 	bl	24f9a <net_ipv6_is_prefix>
   2506c:	2800      	cmp	r0, #0
   2506e:	d0e1      	beq.n	25034 <net_if_ipv6_addr_lookup_by_iface+0x8>
   25070:	2030      	movs	r0, #48	; 0x30
			return &ipv6->unicast[i];
   25072:	4420      	add	r0, r4
   25074:	e7df      	b.n	25036 <net_if_ipv6_addr_lookup_by_iface+0xa>
		if (net_ipv6_is_prefix(
   25076:	2000      	movs	r0, #0
   25078:	e7fb      	b.n	25072 <net_if_ipv6_addr_lookup_by_iface+0x46>

0002507a <net_if_ipv6_addr_add>:
{
   2507a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2507e:	b08b      	sub	sp, #44	; 0x2c
   25080:	460c      	mov	r4, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   25082:	a901      	add	r1, sp, #4
{
   25084:	4606      	mov	r6, r0
   25086:	4691      	mov	r9, r2
   25088:	4698      	mov	r8, r3
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   2508a:	f7ec fee7 	bl	11e5c <net_if_config_ipv6_get>
   2508e:	2800      	cmp	r0, #0
   25090:	da03      	bge.n	2509a <net_if_ipv6_addr_add+0x20>
		return NULL;
   25092:	2000      	movs	r0, #0
}
   25094:	b00b      	add	sp, #44	; 0x2c
   25096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ifaddr = ipv6_addr_find(iface, addr);
   2509a:	6875      	ldr	r5, [r6, #4]
		if (!ipv6->unicast[i].is_used) {
   2509c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   250a0:	079f      	lsls	r7, r3, #30
   250a2:	f100 809b 	bmi.w	251dc <net_if_ipv6_addr_add+0x162>
   250a6:	f895 305f 	ldrb.w	r3, [r5, #95]	; 0x5f
   250aa:	0798      	lsls	r0, r3, #30
   250ac:	f100 809f 	bmi.w	251ee <net_if_ipv6_addr_add+0x174>
		if (ipv6->unicast[i].is_used) {
   250b0:	f8dd c004 	ldr.w	ip, [sp, #4]
   250b4:	f89c 302f 	ldrb.w	r3, [ip, #47]	; 0x2f
   250b8:	0799      	lsls	r1, r3, #30
   250ba:	f3c3 0540 	ubfx	r5, r3, #1, #1
   250be:	f100 80a6 	bmi.w	2520e <net_if_ipv6_addr_add+0x194>
		net_if_addr_init(&ipv6->unicast[i], addr, addr_type,
   250c2:	2030      	movs	r0, #48	; 0x30
   250c4:	fb00 f705 	mul.w	r7, r0, r5
   250c8:	eb0c 0e07 	add.w	lr, ip, r7
	ifaddr->is_used = true;
   250cc:	f89e 302f 	ldrb.w	r3, [lr, #47]	; 0x2f
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   250d0:	4622      	mov	r2, r4
	ifaddr->is_used = true;
   250d2:	f043 0302 	orr.w	r3, r3, #2
   250d6:	f88e 302f 	strb.w	r3, [lr, #47]	; 0x2f
	ifaddr->address.family = AF_INET6;
   250da:	2302      	movs	r3, #2
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   250dc:	ac02      	add	r4, sp, #8
	ifaddr->address.family = AF_INET6;
   250de:	f82c 3007 	strh.w	r3, [ip, r7]
	ifaddr->addr_type = addr_type;
   250e2:	4623      	mov	r3, r4
   250e4:	f88e 902c 	strb.w	r9, [lr, #44]	; 0x2c
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   250e8:	f102 0a10 	add.w	sl, r2, #16
   250ec:	46a1      	mov	r9, r4
   250ee:	6810      	ldr	r0, [r2, #0]
   250f0:	6851      	ldr	r1, [r2, #4]
   250f2:	3208      	adds	r2, #8
   250f4:	e8a9 0003 	stmia.w	r9!, {r0, r1}
   250f8:	4552      	cmp	r2, sl
   250fa:	464c      	mov	r4, r9
   250fc:	d1f6      	bne.n	250ec <net_if_ipv6_addr_add+0x72>
   250fe:	461a      	mov	r2, r3
   25100:	f10e 0404 	add.w	r4, lr, #4
   25104:	f10d 0918 	add.w	r9, sp, #24
   25108:	4613      	mov	r3, r2
   2510a:	cb03      	ldmia	r3!, {r0, r1}
   2510c:	454b      	cmp	r3, r9
   2510e:	6020      	str	r0, [r4, #0]
   25110:	6061      	str	r1, [r4, #4]
   25112:	461a      	mov	r2, r3
   25114:	f104 0408 	add.w	r4, r4, #8
   25118:	d1f6      	bne.n	25108 <net_if_ipv6_addr_add+0x8e>
	if (vlifetime) {
   2511a:	2330      	movs	r3, #48	; 0x30
		ifaddr->is_infinite = false;
   2511c:	fb03 c305 	mla	r3, r3, r5, ip
   25120:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
	if (vlifetime) {
   25124:	f1b8 0f00 	cmp.w	r8, #0
   25128:	d078      	beq.n	2521c <net_if_ipv6_addr_add+0x1a2>
		ifaddr->is_infinite = false;
   2512a:	f36f 0200 	bfc	r2, #0, #1
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   2512e:	4641      	mov	r1, r8
   25130:	4670      	mov	r0, lr
		ifaddr->is_infinite = false;
   25132:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   25136:	f7e7 ff07 	bl	cf48 <net_if_ipv6_addr_update_lifetime>
		if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   2513a:	4630      	mov	r0, r6
   2513c:	f7ff ff20 	bl	24f80 <l2_flags_get>
   25140:	f010 0a08 	ands.w	sl, r0, #8
   25144:	d147      	bne.n	251d6 <net_if_ipv6_addr_add+0x15c>
	flags = l2_flags_get(iface);
   25146:	4630      	mov	r0, r6
					 &ipv6->unicast[i].address.in6_addr);
   25148:	f8dd 8004 	ldr.w	r8, [sp, #4]
	flags = l2_flags_get(iface);
   2514c:	f7ff ff18 	bl	24f80 <l2_flags_get>
	if (flags & NET_L2_MULTICAST) {
   25150:	07c3      	lsls	r3, r0, #31
	flags = l2_flags_get(iface);
   25152:	4604      	mov	r4, r0
	if (flags & NET_L2_MULTICAST) {
   25154:	d53a      	bpl.n	251cc <net_if_ipv6_addr_add+0x152>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   25156:	f240 2bff 	movw	fp, #767	; 0x2ff
   2515a:	f8ad b018 	strh.w	fp, [sp, #24]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   2515e:	f8ad a01a 	strh.w	sl, [sp, #26]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   25162:	f8ad a01c 	strh.w	sl, [sp, #28]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   25166:	f8ad a01e 	strh.w	sl, [sp, #30]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   2516a:	f8ad a020 	strh.w	sl, [sp, #32]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   2516e:	f8ad a022 	strh.w	sl, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   25172:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   25176:	f44f 7a80 	mov.w	sl, #256	; 0x100
   2517a:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
	ret = net_ipv6_mld_join(iface, &addr);
   2517e:	4649      	mov	r1, r9
   25180:	4630      	mov	r0, r6
   25182:	f002 fc3c 	bl	279fe <net_ipv6_mld_join>
		if (!(flags & NET_L2_MULTICAST_SKIP_JOIN_SOLICIT_NODE)) {
   25186:	f014 0402 	ands.w	r4, r4, #2
   2518a:	d11f      	bne.n	251cc <net_if_ipv6_addr_add+0x152>
	dst->s6_addr[0]   = 0xFF;
   2518c:	f8cd b018 	str.w	fp, [sp, #24]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   25190:	f8ad 401c 	strh.w	r4, [sp, #28]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   25194:	f8ad 401e 	strh.w	r4, [sp, #30]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   25198:	f8ad 4020 	strh.w	r4, [sp, #32]
	dst->s6_addr[12]  = 0xFF;
   2519c:	23ff      	movs	r3, #255	; 0xff
   2519e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   251a2:	2330      	movs	r3, #48	; 0x30
   251a4:	fb03 8505 	mla	r5, r3, r5, r8
	dst->s6_addr[10]  = 0U;
   251a8:	f8ad a022 	strh.w	sl, [sp, #34]	; 0x22
	dst->s6_addr[13]  = src->s6_addr[13];
   251ac:	7c6b      	ldrb	r3, [r5, #17]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   251ae:	44b8      	add	r8, r7
   251b0:	f898 2013 	ldrb.w	r2, [r8, #19]
	dst->s6_addr[13]  = src->s6_addr[13];
   251b4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   251b8:	f898 3012 	ldrb.w	r3, [r8, #18]
   251bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   251c0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	ret = net_ipv6_mld_join(iface, &addr);
   251c4:	4649      	mov	r1, r9
   251c6:	4630      	mov	r0, r6
   251c8:	f002 fc19 	bl	279fe <net_ipv6_mld_join>
			net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
   251cc:	9901      	ldr	r1, [sp, #4]
   251ce:	4630      	mov	r0, r6
   251d0:	4439      	add	r1, r7
   251d2:	f7ec fdc7 	bl	11d64 <net_if_ipv6_start_dad>
		return &ipv6->unicast[i];
   251d6:	9801      	ldr	r0, [sp, #4]
   251d8:	4438      	add	r0, r7
   251da:	e75b      	b.n	25094 <net_if_ipv6_addr_add+0x1a>
		if (net_ipv6_addr_cmp(
   251dc:	4620      	mov	r0, r4
   251de:	1d29      	adds	r1, r5, #4
   251e0:	f7ff ff00 	bl	24fe4 <net_ipv6_addr_cmp>
   251e4:	2800      	cmp	r0, #0
   251e6:	f43f af5e 	beq.w	250a6 <net_if_ipv6_addr_add+0x2c>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   251ea:	2100      	movs	r1, #0
   251ec:	e008      	b.n	25200 <net_if_ipv6_addr_add+0x186>
		if (net_ipv6_addr_cmp(
   251ee:	4620      	mov	r0, r4
   251f0:	f105 0134 	add.w	r1, r5, #52	; 0x34
   251f4:	f7ff fef6 	bl	24fe4 <net_ipv6_addr_cmp>
   251f8:	2800      	cmp	r0, #0
   251fa:	f43f af59 	beq.w	250b0 <net_if_ipv6_addr_add+0x36>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   251fe:	2101      	movs	r1, #1
			return &ipv6->unicast[i];
   25200:	2030      	movs	r0, #48	; 0x30
   25202:	fb00 5001 	mla	r0, r0, r1, r5
	if (ifaddr) {
   25206:	2800      	cmp	r0, #0
   25208:	f47f af44 	bne.w	25094 <net_if_ipv6_addr_add+0x1a>
   2520c:	e750      	b.n	250b0 <net_if_ipv6_addr_add+0x36>
		if (ipv6->unicast[i].is_used) {
   2520e:	f89c 305f 	ldrb.w	r3, [ip, #95]	; 0x5f
   25212:	079a      	lsls	r2, r3, #30
   25214:	f53f af3d 	bmi.w	25092 <net_if_ipv6_addr_add+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   25218:	2501      	movs	r5, #1
   2521a:	e752      	b.n	250c2 <net_if_ipv6_addr_add+0x48>
		ifaddr->is_infinite = true;
   2521c:	f042 0201 	orr.w	r2, r2, #1
   25220:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   25224:	e789      	b.n	2513a <net_if_ipv6_addr_add+0xc0>

00025226 <net_if_start_dad>:
{
   25226:	b530      	push	{r4, r5, lr}
   25228:	4604      	mov	r4, r0
   2522a:	b087      	sub	sp, #28
	struct in6_addr addr = { };
   2522c:	2210      	movs	r2, #16
   2522e:	2100      	movs	r1, #0
   25230:	a802      	add	r0, sp, #8
   25232:	f004 f958 	bl	294e6 <memset>
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   25236:	4620      	mov	r0, r4
   25238:	a901      	add	r1, sp, #4
   2523a:	f7ec fe0f 	bl	11e5c <net_if_config_ipv6_get>
   2523e:	2800      	cmp	r0, #0
   25240:	db45      	blt.n	252ce <net_if_start_dad+0xa8>
	if (!ipv6) {
   25242:	9b01      	ldr	r3, [sp, #4]
   25244:	2b00      	cmp	r3, #0
   25246:	d042      	beq.n	252ce <net_if_start_dad+0xa8>
	addr->s6_addr[0] = 0xfe;
   25248:	f248 03fe 	movw	r3, #33022	; 0x80fe
	net_ipv6_addr_create_iid(&addr, net_if_get_link_addr(iface));
   2524c:	6822      	ldr	r2, [r4, #0]
   2524e:	9302      	str	r3, [sp, #8]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   25250:	2300      	movs	r3, #0
   25252:	9303      	str	r3, [sp, #12]
	switch (lladdr->len) {
   25254:	7d13      	ldrb	r3, [r2, #20]
   25256:	2b06      	cmp	r3, #6
   25258:	d03b      	beq.n	252d2 <net_if_start_dad+0xac>
   2525a:	2b08      	cmp	r3, #8
   2525c:	d057      	beq.n	2530e <net_if_start_dad+0xe8>
   2525e:	2b02      	cmp	r3, #2
   25260:	d113      	bne.n	2528a <net_if_start_dad+0x64>
		if (lladdr->type == NET_LINK_IEEE802154 ||
   25262:	7d53      	ldrb	r3, [r2, #21]
   25264:	2b01      	cmp	r3, #1
   25266:	d001      	beq.n	2526c <net_if_start_dad+0x46>
   25268:	2b06      	cmp	r3, #6
   2526a:	d10e      	bne.n	2528a <net_if_start_dad+0x64>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   2526c:	2300      	movs	r3, #0
   2526e:	9304      	str	r3, [sp, #16]
			addr->s6_addr[11] = 0xff;
   25270:	23ff      	movs	r3, #255	; 0xff
   25272:	f88d 3013 	strb.w	r3, [sp, #19]
			addr->s6_addr[12] = 0xfe;
   25276:	23fe      	movs	r3, #254	; 0xfe
   25278:	f8ad 3014 	strh.w	r3, [sp, #20]
			addr->s6_addr[14] = lladdr->addr[0];
   2527c:	6913      	ldr	r3, [r2, #16]
   2527e:	781a      	ldrb	r2, [r3, #0]
   25280:	f88d 2016 	strb.w	r2, [sp, #22]
			addr->s6_addr[15] = lladdr->addr[1];
   25284:	785b      	ldrb	r3, [r3, #1]
   25286:	f88d 3017 	strb.w	r3, [sp, #23]
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   2528a:	2300      	movs	r3, #0
   2528c:	2201      	movs	r2, #1
   2528e:	a902      	add	r1, sp, #8
   25290:	4620      	mov	r0, r4
   25292:	f7ff fef2 	bl	2507a <net_if_ipv6_addr_add>
		if (!ipv6->unicast[i].is_used ||
   25296:	9901      	ldr	r1, [sp, #4]
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   25298:	4605      	mov	r5, r0
		if (!ipv6->unicast[i].is_used ||
   2529a:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
   2529e:	079a      	lsls	r2, r3, #30
   252a0:	d507      	bpl.n	252b2 <net_if_start_dad+0x8c>
   252a2:	880b      	ldrh	r3, [r1, #0]
   252a4:	2b02      	cmp	r3, #2
   252a6:	d104      	bne.n	252b2 <net_if_start_dad+0x8c>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   252a8:	4288      	cmp	r0, r1
   252aa:	d002      	beq.n	252b2 <net_if_start_dad+0x8c>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
   252ac:	4620      	mov	r0, r4
   252ae:	f7ec fd59 	bl	11d64 <net_if_ipv6_start_dad>
		if (!ipv6->unicast[i].is_used ||
   252b2:	9901      	ldr	r1, [sp, #4]
   252b4:	f891 305f 	ldrb.w	r3, [r1, #95]	; 0x5f
   252b8:	079b      	lsls	r3, r3, #30
   252ba:	d508      	bpl.n	252ce <net_if_start_dad+0xa8>
   252bc:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
   252be:	2b02      	cmp	r3, #2
   252c0:	d105      	bne.n	252ce <net_if_start_dad+0xa8>
		    &ipv6->unicast[i] == ifaddr) {
   252c2:	3130      	adds	r1, #48	; 0x30
		    ipv6->unicast[i].address.family != AF_INET6 ||
   252c4:	428d      	cmp	r5, r1
   252c6:	d002      	beq.n	252ce <net_if_start_dad+0xa8>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
   252c8:	4620      	mov	r0, r4
   252ca:	f7ec fd4b 	bl	11d64 <net_if_ipv6_start_dad>
}
   252ce:	b007      	add	sp, #28
   252d0:	bd30      	pop	{r4, r5, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   252d2:	6913      	ldr	r3, [r2, #16]
   252d4:	7899      	ldrb	r1, [r3, #2]
   252d6:	8818      	ldrh	r0, [r3, #0]
   252d8:	f88d 1012 	strb.w	r1, [sp, #18]
		addr->s6_addr[11] = 0xff;
   252dc:	21ff      	movs	r1, #255	; 0xff
   252de:	f88d 1013 	strb.w	r1, [sp, #19]
		addr->s6_addr[12] = 0xfe;
   252e2:	21fe      	movs	r1, #254	; 0xfe
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   252e4:	f8ad 0010 	strh.w	r0, [sp, #16]
		addr->s6_addr[12] = 0xfe;
   252e8:	f88d 1014 	strb.w	r1, [sp, #20]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   252ec:	f833 1f03 	ldrh.w	r1, [r3, #3]!
   252f0:	f8ad 1015 	strh.w	r1, [sp, #21]
   252f4:	789b      	ldrb	r3, [r3, #2]
   252f6:	f88d 3017 	strb.w	r3, [sp, #23]
		if (lladdr->type == NET_LINK_ETHERNET) {
   252fa:	7d53      	ldrb	r3, [r2, #21]
   252fc:	2b03      	cmp	r3, #3
   252fe:	d1c4      	bne.n	2528a <net_if_start_dad+0x64>
		addr->s6_addr[8] ^= 0x02;
   25300:	f89d 3010 	ldrb.w	r3, [sp, #16]
   25304:	f083 0302 	eor.w	r3, r3, #2
   25308:	f88d 3010 	strb.w	r3, [sp, #16]
		break;
   2530c:	e7bd      	b.n	2528a <net_if_start_dad+0x64>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   2530e:	6912      	ldr	r2, [r2, #16]
   25310:	ab04      	add	r3, sp, #16
   25312:	6810      	ldr	r0, [r2, #0]
   25314:	6851      	ldr	r1, [r2, #4]
   25316:	c303      	stmia	r3!, {r0, r1}
   25318:	e7f2      	b.n	25300 <net_if_start_dad+0xda>

0002531a <net_if_ipv6_maddr_add>:
{
   2531a:	b513      	push	{r0, r1, r4, lr}
   2531c:	460c      	mov	r4, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   2531e:	a901      	add	r1, sp, #4
   25320:	f7ec fd9c 	bl	11e5c <net_if_config_ipv6_get>
   25324:	2800      	cmp	r0, #0
   25326:	db30      	blt.n	2538a <net_if_ipv6_maddr_add+0x70>
	if (!net_ipv6_is_addr_mcast(addr)) {
   25328:	7823      	ldrb	r3, [r4, #0]
   2532a:	2bff      	cmp	r3, #255	; 0xff
   2532c:	d12d      	bne.n	2538a <net_if_ipv6_maddr_add+0x70>
		if (ipv6->mcast[i].is_used) {
   2532e:	9b01      	ldr	r3, [sp, #4]
   25330:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
   25334:	f010 0001 	ands.w	r0, r0, #1
   25338:	d008      	beq.n	2534c <net_if_ipv6_maddr_add+0x32>
   2533a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
   2533e:	07d1      	lsls	r1, r2, #31
   25340:	d521      	bpl.n	25386 <net_if_ipv6_maddr_add+0x6c>
   25342:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
   25346:	07d2      	lsls	r2, r2, #31
   25348:	d41f      	bmi.n	2538a <net_if_ipv6_maddr_add+0x70>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   2534a:	2002      	movs	r0, #2
		ipv6->mcast[i].is_used = true;
   2534c:	2218      	movs	r2, #24
   2534e:	4350      	muls	r0, r2
   25350:	181a      	adds	r2, r3, r0
   25352:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   25356:	f041 0101 	orr.w	r1, r1, #1
   2535a:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
		ipv6->mcast[i].address.family = AF_INET6;
   2535e:	2102      	movs	r1, #2
   25360:	f8a2 1060 	strh.w	r1, [r2, #96]	; 0x60
   25364:	4621      	mov	r1, r4
		memcpy(&ipv6->mcast[i].address.in6_addr, addr, 16);
   25366:	f100 0264 	add.w	r2, r0, #100	; 0x64
   2536a:	4413      	add	r3, r2
   2536c:	f104 0210 	add.w	r2, r4, #16
   25370:	f851 4b04 	ldr.w	r4, [r1], #4
   25374:	4291      	cmp	r1, r2
   25376:	f843 4b04 	str.w	r4, [r3], #4
   2537a:	d1f9      	bne.n	25370 <net_if_ipv6_maddr_add+0x56>
		return &ipv6->mcast[i];
   2537c:	9b01      	ldr	r3, [sp, #4]
   2537e:	3060      	adds	r0, #96	; 0x60
   25380:	4418      	add	r0, r3
}
   25382:	b002      	add	sp, #8
   25384:	bd10      	pop	{r4, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   25386:	2001      	movs	r0, #1
   25388:	e7e0      	b.n	2534c <net_if_ipv6_maddr_add+0x32>
		return NULL;
   2538a:	2000      	movs	r0, #0
   2538c:	e7f9      	b.n	25382 <net_if_ipv6_maddr_add+0x68>

0002538e <net_if_ipv6_maddr_rm>:
{
   2538e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   25392:	6845      	ldr	r5, [r0, #4]
{
   25394:	4689      	mov	r9, r1
	if (!ipv6) {
   25396:	b1d5      	cbz	r5, 253ce <net_if_ipv6_maddr_rm+0x40>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   25398:	2400      	movs	r4, #0
		if (!ipv6->mcast[i].is_used) {
   2539a:	2718      	movs	r7, #24
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
   2539c:	f105 0864 	add.w	r8, r5, #100	; 0x64
		if (!ipv6->mcast[i].is_used) {
   253a0:	fb07 f004 	mul.w	r0, r7, r4
   253a4:	182b      	adds	r3, r5, r0
   253a6:	f103 0670 	add.w	r6, r3, #112	; 0x70
   253aa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   253ae:	07db      	lsls	r3, r3, #31
   253b0:	d50a      	bpl.n	253c8 <net_if_ipv6_maddr_rm+0x3a>
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
   253b2:	4649      	mov	r1, r9
   253b4:	4440      	add	r0, r8
   253b6:	f7ff fe15 	bl	24fe4 <net_ipv6_addr_cmp>
   253ba:	b128      	cbz	r0, 253c8 <net_if_ipv6_maddr_rm+0x3a>
		ipv6->mcast[i].is_used = false;
   253bc:	7933      	ldrb	r3, [r6, #4]
   253be:	f36f 0300 	bfc	r3, #0, #1
   253c2:	7133      	strb	r3, [r6, #4]
}
   253c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   253c8:	3401      	adds	r4, #1
   253ca:	2c03      	cmp	r4, #3
   253cc:	d1e8      	bne.n	253a0 <net_if_ipv6_maddr_rm+0x12>
		return false;
   253ce:	2000      	movs	r0, #0
   253d0:	e7f8      	b.n	253c4 <net_if_ipv6_maddr_rm+0x36>

000253d2 <remove_prefix_addresses>:
{
   253d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   253d4:	4616      	mov	r6, r2
   253d6:	461a      	mov	r2, r3
		if (!ipv6->unicast[i].is_used ||
   253d8:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
{
   253dc:	460c      	mov	r4, r1
		if (!ipv6->unicast[i].is_used ||
   253de:	0799      	lsls	r1, r3, #30
{
   253e0:	4605      	mov	r5, r0
		if (!ipv6->unicast[i].is_used ||
   253e2:	d514      	bpl.n	2540e <remove_prefix_addresses+0x3c>
   253e4:	8823      	ldrh	r3, [r4, #0]
   253e6:	2b02      	cmp	r3, #2
   253e8:	d111      	bne.n	2540e <remove_prefix_addresses+0x3c>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   253ea:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   253ee:	2b01      	cmp	r3, #1
   253f0:	d10d      	bne.n	2540e <remove_prefix_addresses+0x3c>
				ipv6->unicast[i].address.in6_addr.s6_addr,
   253f2:	1d21      	adds	r1, r4, #4
		if (net_ipv6_is_prefix(
   253f4:	4630      	mov	r0, r6
   253f6:	e9cd 1200 	strd	r1, r2, [sp]
   253fa:	f7ff fdce 	bl	24f9a <net_ipv6_is_prefix>
   253fe:	e9dd 1200 	ldrd	r1, r2, [sp]
   25402:	b120      	cbz	r0, 2540e <remove_prefix_addresses+0x3c>
			net_if_ipv6_addr_rm(iface,
   25404:	4628      	mov	r0, r5
   25406:	9200      	str	r2, [sp, #0]
   25408:	f7ec fe64 	bl	120d4 <net_if_ipv6_addr_rm>
   2540c:	9a00      	ldr	r2, [sp, #0]
		if (!ipv6->unicast[i].is_used ||
   2540e:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
   25412:	079b      	lsls	r3, r3, #30
   25414:	d514      	bpl.n	25440 <remove_prefix_addresses+0x6e>
   25416:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   25418:	2b02      	cmp	r3, #2
   2541a:	d111      	bne.n	25440 <remove_prefix_addresses+0x6e>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   2541c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
   25420:	2b01      	cmp	r3, #1
   25422:	d10d      	bne.n	25440 <remove_prefix_addresses+0x6e>
				ipv6->unicast[i].address.in6_addr.s6_addr,
   25424:	f104 0134 	add.w	r1, r4, #52	; 0x34
		if (net_ipv6_is_prefix(
   25428:	4630      	mov	r0, r6
   2542a:	9100      	str	r1, [sp, #0]
   2542c:	f7ff fdb5 	bl	24f9a <net_ipv6_is_prefix>
   25430:	9900      	ldr	r1, [sp, #0]
   25432:	b128      	cbz	r0, 25440 <remove_prefix_addresses+0x6e>
			net_if_ipv6_addr_rm(iface,
   25434:	4628      	mov	r0, r5
}
   25436:	b002      	add	sp, #8
   25438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_if_ipv6_addr_rm(iface,
   2543c:	f7ec be4a 	b.w	120d4 <net_if_ipv6_addr_rm>
}
   25440:	b002      	add	sp, #8
   25442:	bd70      	pop	{r4, r5, r6, pc}

00025444 <net_if_ipv6_prefix_add>:
{
   25444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25448:	b086      	sub	sp, #24
   2544a:	460d      	mov	r5, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   2544c:	a901      	add	r1, sp, #4
{
   2544e:	4680      	mov	r8, r0
   25450:	4617      	mov	r7, r2
   25452:	461e      	mov	r6, r3
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   25454:	f7ec fd02 	bl	11e5c <net_if_config_ipv6_get>
   25458:	2800      	cmp	r0, #0
   2545a:	da03      	bge.n	25464 <net_if_ipv6_prefix_add+0x20>
		return NULL;
   2545c:	2000      	movs	r0, #0
}
   2545e:	b006      	add	sp, #24
   25460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ifprefix = ipv6_prefix_find(iface, prefix, len);
   25464:	f8d8 4004 	ldr.w	r4, [r8, #4]
	if (!ipv6) {
   25468:	2c00      	cmp	r4, #0
   2546a:	d147      	bne.n	254fc <net_if_ipv6_prefix_add+0xb8>
	if (!ipv6) {
   2546c:	9c01      	ldr	r4, [sp, #4]
   2546e:	2c00      	cmp	r4, #0
   25470:	d0f4      	beq.n	2545c <net_if_ipv6_prefix_add+0x18>
		if (ipv6->prefix[i].is_used) {
   25472:	f894 20cd 	ldrb.w	r2, [r4, #205]	; 0xcd
   25476:	0791      	lsls	r1, r2, #30
   25478:	f3c2 0340 	ubfx	r3, r2, #1, #1
   2547c:	d504      	bpl.n	25488 <net_if_ipv6_prefix_add+0x44>
   2547e:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   25482:	079a      	lsls	r2, r3, #30
   25484:	d4ea      	bmi.n	2545c <net_if_ipv6_prefix_add+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   25486:	2301      	movs	r3, #1
		net_if_ipv6_prefix_init(iface, &ipv6->prefix[i], prefix,
   25488:	2128      	movs	r1, #40	; 0x28
   2548a:	4359      	muls	r1, r3
   2548c:	f101 0ca8 	add.w	ip, r1, #168	; 0xa8
	ifprefix->is_used = true;
   25490:	4421      	add	r1, r4
   25492:	f891 20cd 	ldrb.w	r2, [r1, #205]	; 0xcd
	ifprefix->len = len;
   25496:	f881 70cc 	strb.w	r7, [r1, #204]	; 0xcc
	ifprefix->is_used = true;
   2549a:	f042 0202 	orr.w	r2, r2, #2
   2549e:	f881 20cd 	strb.w	r2, [r1, #205]	; 0xcd
	net_ipaddr_copy(&ifprefix->prefix, addr);
   254a2:	462a      	mov	r2, r5
   254a4:	ad02      	add	r5, sp, #8
   254a6:	462f      	mov	r7, r5
	ifprefix->iface = iface;
   254a8:	f8c1 80c8 	str.w	r8, [r1, #200]	; 0xc8
	net_ipaddr_copy(&ifprefix->prefix, addr);
   254ac:	f102 0810 	add.w	r8, r2, #16
   254b0:	46ae      	mov	lr, r5
   254b2:	6810      	ldr	r0, [r2, #0]
   254b4:	6851      	ldr	r1, [r2, #4]
   254b6:	3208      	adds	r2, #8
   254b8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   254bc:	4542      	cmp	r2, r8
   254be:	4675      	mov	r5, lr
   254c0:	d1f6      	bne.n	254b0 <net_if_ipv6_prefix_add+0x6c>
   254c2:	eb04 020c 	add.w	r2, r4, ip
   254c6:	3210      	adds	r2, #16
   254c8:	f10d 0e18 	add.w	lr, sp, #24
   254cc:	463d      	mov	r5, r7
   254ce:	cd03      	ldmia	r5!, {r0, r1}
   254d0:	4575      	cmp	r5, lr
   254d2:	6010      	str	r0, [r2, #0]
   254d4:	6051      	str	r1, [r2, #4]
   254d6:	462f      	mov	r7, r5
   254d8:	f102 0208 	add.w	r2, r2, #8
   254dc:	d1f6      	bne.n	254cc <net_if_ipv6_prefix_add+0x88>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   254de:	2228      	movs	r2, #40	; 0x28
   254e0:	fb02 4403 	mla	r4, r2, r3, r4
   254e4:	1c73      	adds	r3, r6, #1
   254e6:	425e      	negs	r6, r3
   254e8:	415e      	adcs	r6, r3
   254ea:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
		return &ipv6->prefix[i];
   254ee:	9801      	ldr	r0, [sp, #4]
   254f0:	f366 0300 	bfi	r3, r6, #0, #1
   254f4:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
   254f8:	4460      	add	r0, ip
   254fa:	e7b0      	b.n	2545e <net_if_ipv6_prefix_add+0x1a>
		if (!ipv6->unicast[i].is_used) {
   254fc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   25500:	079b      	lsls	r3, r3, #30
   25502:	d509      	bpl.n	25518 <net_if_ipv6_prefix_add+0xd4>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   25504:	4628      	mov	r0, r5
   25506:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
   2550a:	f7ff fd6b 	bl	24fe4 <net_ipv6_addr_cmp>
   2550e:	b118      	cbz	r0, 25518 <net_if_ipv6_prefix_add+0xd4>
   25510:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   25514:	42bb      	cmp	r3, r7
   25516:	d013      	beq.n	25540 <net_if_ipv6_prefix_add+0xfc>
		if (!ipv6->unicast[i].is_used) {
   25518:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
   2551c:	0798      	lsls	r0, r3, #30
   2551e:	d5a5      	bpl.n	2546c <net_if_ipv6_prefix_add+0x28>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   25520:	4628      	mov	r0, r5
   25522:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
   25526:	f7ff fd5d 	bl	24fe4 <net_ipv6_addr_cmp>
   2552a:	2800      	cmp	r0, #0
   2552c:	d09e      	beq.n	2546c <net_if_ipv6_prefix_add+0x28>
   2552e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   25532:	42bb      	cmp	r3, r7
   25534:	d19a      	bne.n	2546c <net_if_ipv6_prefix_add+0x28>
   25536:	2028      	movs	r0, #40	; 0x28
			return &ipv6->prefix[i];
   25538:	30a8      	adds	r0, #168	; 0xa8
	if (ifprefix) {
   2553a:	1820      	adds	r0, r4, r0
   2553c:	d18f      	bne.n	2545e <net_if_ipv6_prefix_add+0x1a>
   2553e:	e795      	b.n	2546c <net_if_ipv6_prefix_add+0x28>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   25540:	2000      	movs	r0, #0
   25542:	e7f9      	b.n	25538 <net_if_ipv6_prefix_add+0xf4>

00025544 <net_if_ipv6_prefix_lookup>:
{
   25544:	b570      	push	{r4, r5, r6, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   25546:	6844      	ldr	r4, [r0, #4]
{
   25548:	460d      	mov	r5, r1
   2554a:	4616      	mov	r6, r2
	if (!ipv6) {
   2554c:	b90c      	cbnz	r4, 25552 <net_if_ipv6_prefix_lookup+0xe>
		return NULL;
   2554e:	2000      	movs	r0, #0
}
   25550:	bd70      	pop	{r4, r5, r6, pc}
		if (!ipv6->prefix[i].is_used) {
   25552:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   25556:	0798      	lsls	r0, r3, #30
   25558:	d411      	bmi.n	2557e <net_if_ipv6_prefix_lookup+0x3a>
   2555a:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   2555e:	079b      	lsls	r3, r3, #30
   25560:	d5f5      	bpl.n	2554e <net_if_ipv6_prefix_lookup+0xa>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
   25562:	4632      	mov	r2, r6
   25564:	4629      	mov	r1, r5
   25566:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   2556a:	f7ff fd16 	bl	24f9a <net_ipv6_is_prefix>
   2556e:	2800      	cmp	r0, #0
   25570:	d0ed      	beq.n	2554e <net_if_ipv6_prefix_lookup+0xa>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   25572:	2001      	movs	r0, #1
			return &ipv6->prefix[i];
   25574:	2328      	movs	r3, #40	; 0x28
   25576:	fb03 4000 	mla	r0, r3, r0, r4
   2557a:	30a8      	adds	r0, #168	; 0xa8
   2557c:	e7e8      	b.n	25550 <net_if_ipv6_prefix_lookup+0xc>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
   2557e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   25582:	f7ff fd0a 	bl	24f9a <net_ipv6_is_prefix>
   25586:	2800      	cmp	r0, #0
   25588:	d0e7      	beq.n	2555a <net_if_ipv6_prefix_lookup+0x16>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   2558a:	2000      	movs	r0, #0
   2558c:	e7f2      	b.n	25574 <net_if_ipv6_prefix_lookup+0x30>

0002558e <net_if_ipv6_prefix_rm>:
{
   2558e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   25592:	6844      	ldr	r4, [r0, #4]
{
   25594:	4607      	mov	r7, r0
   25596:	4688      	mov	r8, r1
   25598:	4616      	mov	r6, r2
	if (!ipv6) {
   2559a:	b914      	cbnz	r4, 255a2 <net_if_ipv6_prefix_rm+0x14>
		return false;
   2559c:	2000      	movs	r0, #0
}
   2559e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!ipv6->prefix[i].is_used) {
   255a2:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   255a6:	079a      	lsls	r2, r3, #30
   255a8:	d508      	bpl.n	255bc <net_if_ipv6_prefix_rm+0x2e>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   255aa:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   255ae:	f7ff fd19 	bl	24fe4 <net_ipv6_addr_cmp>
   255b2:	b118      	cbz	r0, 255bc <net_if_ipv6_prefix_rm+0x2e>
   255b4:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   255b8:	42b3      	cmp	r3, r6
   255ba:	d025      	beq.n	25608 <net_if_ipv6_prefix_rm+0x7a>
		if (!ipv6->prefix[i].is_used) {
   255bc:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   255c0:	079b      	lsls	r3, r3, #30
   255c2:	d5eb      	bpl.n	2559c <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   255c4:	4641      	mov	r1, r8
   255c6:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   255ca:	f7ff fd0b 	bl	24fe4 <net_ipv6_addr_cmp>
   255ce:	2800      	cmp	r0, #0
   255d0:	d0e4      	beq.n	2559c <net_if_ipv6_prefix_rm+0xe>
   255d2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   255d6:	42b3      	cmp	r3, r6
   255d8:	d1e0      	bne.n	2559c <net_if_ipv6_prefix_rm+0xe>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   255da:	2501      	movs	r5, #1
   255dc:	2028      	movs	r0, #40	; 0x28
		net_if_ipv6_prefix_unset_timer(&ipv6->prefix[i]);
   255de:	30a8      	adds	r0, #168	; 0xa8
   255e0:	4420      	add	r0, r4
   255e2:	f7ec fefd 	bl	123e0 <net_if_ipv6_prefix_unset_timer>
		ipv6->prefix[i].is_used = false;
   255e6:	2328      	movs	r3, #40	; 0x28
   255e8:	fb03 4505 	mla	r5, r3, r5, r4
   255ec:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
		remove_prefix_addresses(iface, ipv6, addr, len);
   255f0:	4638      	mov	r0, r7
		ipv6->prefix[i].is_used = false;
   255f2:	f36f 0341 	bfc	r3, #1, #1
   255f6:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		remove_prefix_addresses(iface, ipv6, addr, len);
   255fa:	4642      	mov	r2, r8
   255fc:	4633      	mov	r3, r6
   255fe:	4621      	mov	r1, r4
   25600:	f7ff fee7 	bl	253d2 <remove_prefix_addresses>
		return true;
   25604:	2001      	movs	r0, #1
   25606:	e7ca      	b.n	2559e <net_if_ipv6_prefix_rm+0x10>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   25608:	2500      	movs	r5, #0
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   2560a:	4628      	mov	r0, r5
   2560c:	e7e7      	b.n	255de <net_if_ipv6_prefix_rm+0x50>

0002560e <net_if_ipv6_router_update_lifetime>:
{
   2560e:	b538      	push	{r3, r4, r5, lr}
   25610:	4604      	mov	r4, r0
   25612:	460d      	mov	r5, r1
	router->life_start = k_uptime_get_32();
   25614:	f7ff fcee 	bl	24ff4 <k_uptime_get_32>
	router->lifetime = lifetime;
   25618:	8425      	strh	r5, [r4, #32]
	router->life_start = k_uptime_get_32();
   2561a:	61e0      	str	r0, [r4, #28]
}
   2561c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	iface_router_run_timer(router->life_start);
   25620:	f7ec bb0e 	b.w	11c40 <iface_router_run_timer>

00025624 <net_if_ipv6_get_ll>:
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   25624:	6840      	ldr	r0, [r0, #4]
{
   25626:	b510      	push	{r4, lr}
	if (!ipv6) {
   25628:	b338      	cbz	r0, 2567a <net_if_ipv6_get_ll+0x56>
		if (!ipv6->unicast[i].is_used ||
   2562a:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   2562e:	079b      	lsls	r3, r3, #30
   25630:	d50e      	bpl.n	25650 <net_if_ipv6_get_ll+0x2c>
   25632:	1c4c      	adds	r4, r1, #1
   25634:	d003      	beq.n	2563e <net_if_ipv6_get_ll+0x1a>
		    (addr_state != NET_ADDR_ANY_STATE &&
   25636:	f990 302d 	ldrsb.w	r3, [r0, #45]	; 0x2d
   2563a:	428b      	cmp	r3, r1
   2563c:	d108      	bne.n	25650 <net_if_ipv6_get_ll+0x2c>
		     ipv6->unicast[i].addr_state != addr_state) ||
   2563e:	8803      	ldrh	r3, [r0, #0]
   25640:	2b02      	cmp	r3, #2
   25642:	d105      	bne.n	25650 <net_if_ipv6_get_ll+0x2c>
		if (net_ipv6_is_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
   25644:	f248 02fe 	movw	r2, #33022	; 0x80fe
   25648:	8884      	ldrh	r4, [r0, #4]
   2564a:	1d03      	adds	r3, r0, #4
   2564c:	4294      	cmp	r4, r2
   2564e:	d013      	beq.n	25678 <net_if_ipv6_get_ll+0x54>
		if (!ipv6->unicast[i].is_used ||
   25650:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
   25654:	079a      	lsls	r2, r3, #30
   25656:	d511      	bpl.n	2567c <net_if_ipv6_get_ll+0x58>
   25658:	1c4b      	adds	r3, r1, #1
   2565a:	d003      	beq.n	25664 <net_if_ipv6_get_ll+0x40>
		    (addr_state != NET_ADDR_ANY_STATE &&
   2565c:	f990 305d 	ldrsb.w	r3, [r0, #93]	; 0x5d
   25660:	428b      	cmp	r3, r1
   25662:	d10b      	bne.n	2567c <net_if_ipv6_get_ll+0x58>
		     ipv6->unicast[i].addr_state != addr_state) ||
   25664:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   25666:	2b02      	cmp	r3, #2
   25668:	d108      	bne.n	2567c <net_if_ipv6_get_ll+0x58>
		if (net_ipv6_is_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
   2566a:	f248 02fe 	movw	r2, #33022	; 0x80fe
   2566e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   25670:	f100 0334 	add.w	r3, r0, #52	; 0x34
   25674:	4291      	cmp	r1, r2
   25676:	d101      	bne.n	2567c <net_if_ipv6_get_ll+0x58>
   25678:	4618      	mov	r0, r3
}
   2567a:	bd10      	pop	{r4, pc}
		return NULL;
   2567c:	2000      	movs	r0, #0
   2567e:	e7fc      	b.n	2567a <net_if_ipv6_get_ll+0x56>

00025680 <net_if_ipv6_calc_reachable_time>:
{
   25680:	b538      	push	{r3, r4, r5, lr}
	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
   25682:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
	       sys_rand32_get() % (max_reachable - min_reachable);
   25686:	f7ee fc89 	bl	13f9c <sys_rand32_get>
	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
   2568a:	0865      	lsrs	r5, r4, #1
	max_reachable = (MAX_RANDOM_NUMER * ipv6->base_reachable_time)
   2568c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	       sys_rand32_get() % (max_reachable - min_reachable);
   25690:	ebc5 0454 	rsb	r4, r5, r4, lsr #1
   25694:	fbb0 f3f4 	udiv	r3, r0, r4
   25698:	fb03 0014 	mls	r0, r3, r4, r0
}
   2569c:	4428      	add	r0, r5
   2569e:	bd38      	pop	{r3, r4, r5, pc}

000256a0 <net_if_recv_data>:
{
   256a0:	b510      	push	{r4, lr}
   256a2:	4603      	mov	r3, r0
	return net_if_l2(iface)->recv(iface, pkt);
   256a4:	f7ff fc5b 	bl	24f5e <net_if_l2>
}
   256a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_l2(iface)->recv(iface, pkt);
   256ac:	6802      	ldr	r2, [r0, #0]
   256ae:	4618      	mov	r0, r3
   256b0:	4710      	bx	r2

000256b2 <net_if_send_data>:
{
   256b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   256b4:	6803      	ldr	r3, [r0, #0]
   256b6:	4605      	mov	r5, r0
   256b8:	460c      	mov	r4, r1
	struct net_context *context = net_pkt_context(pkt);
   256ba:	69ce      	ldr	r6, [r1, #28]
   256bc:	330c      	adds	r3, #12
   256be:	e8d3 3faf 	lda	r3, [r3]
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
   256c2:	07d9      	lsls	r1, r3, #31
   256c4:	d411      	bmi.n	256ea <net_if_send_data+0x38>
		status = -ENETDOWN;
   256c6:	f06f 0272 	mvn.w	r2, #114	; 0x72
		if (context) {
   256ca:	b12e      	cbz	r6, 256d8 <net_if_send_data+0x26>
			net_context_send_cb(context, status);
   256cc:	4611      	mov	r1, r2
   256ce:	4630      	mov	r0, r6
   256d0:	9201      	str	r2, [sp, #4]
   256d2:	f7ff fc49 	bl	24f68 <net_context_send_cb>
   256d6:	9a01      	ldr	r2, [sp, #4]
		if (dst->addr) {
   256d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   256da:	b123      	cbz	r3, 256e6 <net_if_send_data+0x34>
			net_if_call_link_cb(iface, dst, status);
   256dc:	4628      	mov	r0, r5
   256de:	f104 0130 	add.w	r1, r4, #48	; 0x30
   256e2:	f7ec ff71 	bl	125c8 <net_if_call_link_cb>
   256e6:	2002      	movs	r0, #2
   256e8:	e01f      	b.n	2572a <net_if_send_data+0x78>
   256ea:	6803      	ldr	r3, [r0, #0]
   256ec:	330c      	adds	r3, #12
   256ee:	e8d3 3faf 	lda	r3, [r3]
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
   256f2:	06da      	lsls	r2, r3, #27
   256f4:	d4e7      	bmi.n	256c6 <net_if_send_data+0x14>
   256f6:	6803      	ldr	r3, [r0, #0]
   256f8:	330c      	adds	r3, #12
   256fa:	e8d3 3faf 	lda	r3, [r3]
	if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
   256fe:	079b      	lsls	r3, r3, #30
   25700:	d408      	bmi.n	25714 <net_if_send_data+0x62>
   25702:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25704:	b933      	cbnz	r3, 25714 <net_if_send_data+0x62>
	return net_if_get_link_addr(pkt->iface);
   25706:	6a23      	ldr	r3, [r4, #32]
   25708:	681b      	ldr	r3, [r3, #0]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   2570a:	691a      	ldr	r2, [r3, #16]
   2570c:	62a2      	str	r2, [r4, #40]	; 0x28
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   2570e:	7d1b      	ldrb	r3, [r3, #20]
   25710:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	return pkt->family;
   25714:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	if (IS_ENABLED(CONFIG_NET_IPV6) && net_pkt_family(pkt) == AF_INET6) {
   25718:	f3c3 0342 	ubfx	r3, r3, #1, #3
   2571c:	2b02      	cmp	r3, #2
   2571e:	d006      	beq.n	2572e <net_if_send_data+0x7c>
		net_if_queue_tx(iface, pkt);
   25720:	4628      	mov	r0, r5
   25722:	4621      	mov	r1, r4
   25724:	f7ec fb7e 	bl	11e24 <net_if_queue_tx>
   25728:	2000      	movs	r0, #0
}
   2572a:	b002      	add	sp, #8
   2572c:	bd70      	pop	{r4, r5, r6, pc}
		verdict = net_ipv6_prepare_for_send(pkt);
   2572e:	4620      	mov	r0, r4
   25730:	f001 feee 	bl	27510 <net_ipv6_prepare_for_send>
	if (verdict == NET_DROP) {
   25734:	2802      	cmp	r0, #2
   25736:	d102      	bne.n	2573e <net_if_send_data+0x8c>
	int status = -EIO;
   25738:	f06f 0204 	mvn.w	r2, #4
   2573c:	e7c5      	b.n	256ca <net_if_send_data+0x18>
	} else if (verdict == NET_OK) {
   2573e:	2800      	cmp	r0, #0
   25740:	d1f3      	bne.n	2572a <net_if_send_data+0x78>
   25742:	e7ed      	b.n	25720 <net_if_send_data+0x6e>

00025744 <net_if_need_calc_tx_checksum>:
   25744:	2001      	movs	r0, #1
   25746:	4770      	bx	lr

00025748 <net_if_need_calc_rx_checksum>:
}
   25748:	2001      	movs	r0, #1
   2574a:	4770      	bx	lr

0002574c <net_if_up>:
{
   2574c:	b538      	push	{r3, r4, r5, lr}
   2574e:	4605      	mov	r5, r0
   25750:	6803      	ldr	r3, [r0, #0]
   25752:	330c      	adds	r3, #12
   25754:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   25758:	f013 0301 	ands.w	r3, r3, #1
   2575c:	d001      	beq.n	25762 <net_if_up+0x16>
		return 0;
   2575e:	2000      	movs	r0, #0
}
   25760:	bd38      	pop	{r3, r4, r5, pc}
	     net_if_is_socket_offloaded(iface))) {
   25762:	6802      	ldr	r2, [r0, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   25764:	7e91      	ldrb	r1, [r2, #26]
   25766:	b149      	cbz	r1, 2577c <net_if_up+0x30>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25768:	320c      	adds	r2, #12
   2576a:	e8d2 1fef 	ldaex	r1, [r2]
   2576e:	f041 0101 	orr.w	r1, r1, #1
   25772:	e8c2 1fe0 	stlex	r0, r1, [r2]
   25776:	2800      	cmp	r0, #0
   25778:	d0f1      	beq.n	2575e <net_if_up+0x12>
   2577a:	e7f6      	b.n	2576a <net_if_up+0x1e>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   2577c:	f7ff fbef 	bl	24f5e <net_if_l2>
   25780:	b9b8      	cbnz	r0, 257b2 <net_if_up+0x66>
   25782:	682b      	ldr	r3, [r5, #0]
   25784:	330c      	adds	r3, #12
   25786:	e8d3 2fef 	ldaex	r2, [r3]
   2578a:	f042 0201 	orr.w	r2, r2, #1
   2578e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   25792:	2900      	cmp	r1, #0
   25794:	d1f7      	bne.n	25786 <net_if_up+0x3a>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   25796:	4628      	mov	r0, r5
   25798:	f7ff fbf2 	bl	24f80 <l2_flags_get>
   2579c:	f010 0408 	ands.w	r4, r0, #8
   257a0:	d1dd      	bne.n	2575e <net_if_up+0x12>
		net_if_start_dad(iface);
   257a2:	4628      	mov	r0, r5
   257a4:	f7ff fd3f 	bl	25226 <net_if_start_dad>
	net_if_start_rs(iface);
   257a8:	4628      	mov	r0, r5
   257aa:	f7ec fb6f 	bl	11e8c <net_if_start_rs>
}
   257ae:	4620      	mov	r0, r4
   257b0:	e7d6      	b.n	25760 <net_if_up+0x14>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   257b2:	6883      	ldr	r3, [r0, #8]
   257b4:	2b00      	cmp	r3, #0
   257b6:	d0e4      	beq.n	25782 <net_if_up+0x36>
	status = net_if_l2(iface)->enable(iface, true);
   257b8:	2101      	movs	r1, #1
   257ba:	4628      	mov	r0, r5
   257bc:	4798      	blx	r3
	if (status < 0) {
   257be:	2800      	cmp	r0, #0
   257c0:	dadf      	bge.n	25782 <net_if_up+0x36>
   257c2:	e7cd      	b.n	25760 <net_if_up+0x14>

000257c4 <calc_chksum>:
{
   257c4:	b570      	push	{r4, r5, r6, lr}
	while (data < end) {
   257c6:	460c      	mov	r4, r1
	end = data + len - 1;
   257c8:	3a01      	subs	r2, #1
   257ca:	188d      	adds	r5, r1, r2
	while (data < end) {
   257cc:	42ac      	cmp	r4, r5
   257ce:	d315      	bcc.n	257fc <calc_chksum+0x38>
   257d0:	f1c1 0301 	rsb	r3, r1, #1
   257d4:	442b      	add	r3, r5
   257d6:	f023 0301 	bic.w	r3, r3, #1
   257da:	1e4c      	subs	r4, r1, #1
   257dc:	42a5      	cmp	r5, r4
   257de:	bf38      	it	cc
   257e0:	2300      	movcc	r3, #0
   257e2:	440b      	add	r3, r1
	if (data == end) {
   257e4:	42ab      	cmp	r3, r5
   257e6:	d108      	bne.n	257fa <calc_chksum+0x36>
		tmp = data[0] << 8;
   257e8:	5c8b      	ldrb	r3, [r1, r2]
		sum += tmp;
   257ea:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   257ee:	b280      	uxth	r0, r0
		if (sum < tmp) {
   257f0:	ebb0 2f03 	cmp.w	r0, r3, lsl #8
			sum++;
   257f4:	bf3c      	itt	cc
   257f6:	3001      	addcc	r0, #1
   257f8:	b280      	uxthcc	r0, r0
}
   257fa:	bd70      	pop	{r4, r5, r6, pc}
		tmp = (data[0] << 8) + data[1];
   257fc:	7826      	ldrb	r6, [r4, #0]
   257fe:	7863      	ldrb	r3, [r4, #1]
		data += 2;
   25800:	3402      	adds	r4, #2
		tmp = (data[0] << 8) + data[1];
   25802:	eb03 2306 	add.w	r3, r3, r6, lsl #8
		sum += tmp;
   25806:	fa10 f083 	uxtah	r0, r0, r3
   2580a:	b280      	uxth	r0, r0
		tmp = (data[0] << 8) + data[1];
   2580c:	b29e      	uxth	r6, r3
		if (sum < tmp) {
   2580e:	4286      	cmp	r6, r0
			sum++;
   25810:	bf84      	itt	hi
   25812:	3001      	addhi	r0, #1
   25814:	b280      	uxthhi	r0, r0
		data += 2;
   25816:	e7d9      	b.n	257cc <calc_chksum+0x8>

00025818 <net_byte_to_hex>:
{
   25818:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   2581a:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   2581c:	b1bb      	cbz	r3, 2584e <net_byte_to_hex+0x36>
		if (val < 10) {
   2581e:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   25820:	b26b      	sxtb	r3, r5
   25822:	bf86      	itte	hi
   25824:	f1a2 050a 	subhi.w	r5, r2, #10
   25828:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   2582a:	3330      	addls	r3, #48	; 0x30
   2582c:	1c44      	adds	r4, r0, #1
   2582e:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   25830:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   25834:	4619      	mov	r1, r3
   25836:	2b09      	cmp	r3, #9
	*ptr = '\0';
   25838:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   2583c:	bf83      	ittte	hi
   2583e:	3a0a      	subhi	r2, #10
   25840:	1889      	addhi	r1, r1, r2
   25842:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   25844:	3130      	addls	r1, #48	; 0x30
   25846:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   25848:	7063      	strb	r3, [r4, #1]
   2584a:	1c60      	adds	r0, r4, #1
}
   2584c:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   2584e:	2d00      	cmp	r5, #0
   25850:	d1e5      	bne.n	2581e <net_byte_to_hex+0x6>
   25852:	4604      	mov	r4, r0
   25854:	e7ec      	b.n	25830 <net_byte_to_hex+0x18>

00025856 <net_calc_chksum>:
   25856:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
{
   2585a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   2585e:	f3c3 0342 	ubfx	r3, r3, #1, #3
   25862:	2b02      	cmp	r3, #2
{
   25864:	4605      	mov	r5, r0
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   25866:	d16f      	bne.n	25948 <net_calc_chksum+0xf2>
	size_t bytes = 0;
   25868:	2200      	movs	r2, #0
		sum =  net_pkt_get_len(pkt) -
   2586a:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   2586c:	2b00      	cmp	r3, #0
   2586e:	d143      	bne.n	258f8 <net_calc_chksum+0xa2>
	backup->pos = pkt->cursor.pos;
   25870:	e9d5 8705 	ldrd	r8, r7, [r5, #20]
			net_pkt_ip_hdr_len(pkt) -
   25874:	f895 4038 	ldrb.w	r4, [r5, #56]	; 0x38
	net_pkt_cursor_init(pkt);
   25878:	4628      	mov	r0, r5
		sum =  net_pkt_get_len(pkt) -
   2587a:	1b09      	subs	r1, r1, r4
   2587c:	8fec      	ldrh	r4, [r5, #62]	; 0x3e
   2587e:	1b0c      	subs	r4, r1, r4
   25880:	4414      	add	r4, r2
	net_pkt_cursor_init(pkt);
   25882:	f000 fc82 	bl	2618a <net_pkt_cursor_init>
	return pkt->overwrite;
   25886:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
   2588a:	f895 1038 	ldrb.w	r1, [r5, #56]	; 0x38
   2588e:	f003 0601 	and.w	r6, r3, #1
	pkt->overwrite = overwrite;
   25892:	f043 0301 	orr.w	r3, r3, #1
   25896:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		sum =  net_pkt_get_len(pkt) -
   2589a:	b2a4      	uxth	r4, r4
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
   2589c:	3920      	subs	r1, #32
   2589e:	4628      	mov	r0, r5
   258a0:	f000 fcfd 	bl	2629e <net_pkt_skip>
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   258a4:	69a9      	ldr	r1, [r5, #24]
   258a6:	2220      	movs	r2, #32
   258a8:	4620      	mov	r0, r4
   258aa:	f7ff ff8b 	bl	257c4 <calc_chksum>
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
   258ae:	8fe9      	ldrh	r1, [r5, #62]	; 0x3e
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   258b0:	4604      	mov	r4, r0
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
   258b2:	3120      	adds	r1, #32
   258b4:	4628      	mov	r0, r5
   258b6:	f000 fcf2 	bl	2629e <net_pkt_skip>
	if (!cur->buf || !cur->pos) {
   258ba:	6969      	ldr	r1, [r5, #20]
   258bc:	b161      	cbz	r1, 258d8 <net_calc_chksum+0x82>
   258be:	69ab      	ldr	r3, [r5, #24]
   258c0:	b153      	cbz	r3, 258d8 <net_calc_chksum+0x82>
	len = cur->buf->len - (cur->pos - cur->buf->data);
   258c2:	688a      	ldr	r2, [r1, #8]
   258c4:	f8b1 900c 	ldrh.w	r9, [r1, #12]
   258c8:	1a9b      	subs	r3, r3, r2
   258ca:	eba9 0903 	sub.w	r9, r9, r3
	while (cur->buf) {
   258ce:	f8d5 a014 	ldr.w	sl, [r5, #20]
   258d2:	f1ba 0f00 	cmp.w	sl, #0
   258d6:	d113      	bne.n	25900 <net_calc_chksum+0xaa>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   258d8:	2c00      	cmp	r4, #0
   258da:	d032      	beq.n	25942 <net_calc_chksum+0xec>
   258dc:	ba64      	rev16	r4, r4
   258de:	b2a4      	uxth	r4, r4
	return ~sum;
   258e0:	43e0      	mvns	r0, r4
   258e2:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	pkt->cursor.pos = backup->pos;
   258e6:	e9c5 8705 	strd	r8, r7, [r5, #20]
	pkt->overwrite = overwrite;
   258ea:	f366 0300 	bfi	r3, r6, #0, #1
   258ee:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   258f2:	b280      	uxth	r0, r0
}
   258f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   258f8:	8998      	ldrh	r0, [r3, #12]
		buf = buf->frags;
   258fa:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   258fc:	4402      	add	r2, r0
		buf = buf->frags;
   258fe:	e7b5      	b.n	2586c <net_calc_chksum+0x16>
		sum = calc_chksum(sum, cur->pos, len);
   25900:	4620      	mov	r0, r4
   25902:	464a      	mov	r2, r9
   25904:	69a9      	ldr	r1, [r5, #24]
   25906:	f7ff ff5d 	bl	257c4 <calc_chksum>
		cur->buf = cur->buf->frags;
   2590a:	f8da 3000 	ldr.w	r3, [sl]
		sum = calc_chksum(sum, cur->pos, len);
   2590e:	4604      	mov	r4, r0
		cur->buf = cur->buf->frags;
   25910:	616b      	str	r3, [r5, #20]
		if (!cur->buf || !cur->buf->len) {
   25912:	2b00      	cmp	r3, #0
   25914:	d0e0      	beq.n	258d8 <net_calc_chksum+0x82>
   25916:	899a      	ldrh	r2, [r3, #12]
   25918:	2a00      	cmp	r2, #0
   2591a:	d0dd      	beq.n	258d8 <net_calc_chksum+0x82>
		cur->pos = cur->buf->data;
   2591c:	689b      	ldr	r3, [r3, #8]
		if (len % 2) {
   2591e:	f019 0f01 	tst.w	r9, #1
		cur->pos = cur->buf->data;
   25922:	61ab      	str	r3, [r5, #24]
		if (len % 2) {
   25924:	d00b      	beq.n	2593e <net_calc_chksum+0xe8>
			sum += *cur->pos;
   25926:	7819      	ldrb	r1, [r3, #0]
			cur->pos++;
   25928:	3301      	adds	r3, #1
			sum += *cur->pos;
   2592a:	440c      	add	r4, r1
   2592c:	b2a4      	uxth	r4, r4
			if (sum < *cur->pos) {
   2592e:	42a1      	cmp	r1, r4
				sum++;
   25930:	bf84      	itt	hi
   25932:	3401      	addhi	r4, #1
   25934:	b2a4      	uxthhi	r4, r4
			cur->pos++;
   25936:	61ab      	str	r3, [r5, #24]
			len = cur->buf->len - 1;
   25938:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   2593c:	e7c7      	b.n	258ce <net_calc_chksum+0x78>
			len = cur->buf->len;
   2593e:	4691      	mov	r9, r2
   25940:	e7c5      	b.n	258ce <net_calc_chksum+0x78>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   25942:	f64f 74ff 	movw	r4, #65535	; 0xffff
   25946:	e7cb      	b.n	258e0 <net_calc_chksum+0x8a>
		return 0;
   25948:	2000      	movs	r0, #0
   2594a:	e7d3      	b.n	258f4 <net_calc_chksum+0x9e>

0002594c <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2594c:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2594e:	b942      	cbnz	r2, 25962 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25950:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25952:	b933      	cbnz	r3, 25962 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25954:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25956:	b922      	cbnz	r2, 25962 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   25958:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2595a:	fab0 f080 	clz	r0, r0
   2595e:	0940      	lsrs	r0, r0, #5
   25960:	4770      	bx	lr
   25962:	2000      	movs	r0, #0
   25964:	4770      	bx	lr

00025966 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   25966:	f7fa bb1d 	b.w	1ffa4 <z_impl_k_mutex_unlock>

0002596a <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2596a:	f7fa baa3 	b.w	1feb4 <z_impl_k_mutex_lock>

0002596e <net_context_ref>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2596e:	3004      	adds	r0, #4
   25970:	e8d0 3fef 	ldaex	r3, [r0]
   25974:	1c5a      	adds	r2, r3, #1
   25976:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2597a:	2900      	cmp	r1, #0
   2597c:	d1f8      	bne.n	25970 <net_context_ref+0x2>
}
   2597e:	1c58      	adds	r0, r3, #1
   25980:	4770      	bx	lr

00025982 <net_context_unref>:
{
   25982:	b538      	push	{r3, r4, r5, lr}
   25984:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   25986:	1d03      	adds	r3, r0, #4
   25988:	e8d3 0fef 	ldaex	r0, [r3]
   2598c:	1e42      	subs	r2, r0, #1
   2598e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   25992:	2900      	cmp	r1, #0
   25994:	d1f8      	bne.n	25988 <net_context_unref+0x6>
	if (old_rc != 1) {
   25996:	2801      	cmp	r0, #1
   25998:	d001      	beq.n	2599e <net_context_unref+0x1c>
		return old_rc - 1;
   2599a:	3801      	subs	r0, #1
}
   2599c:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_lock(&context->lock, K_FOREVER);
   2599e:	f104 0508 	add.w	r5, r4, #8
   259a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   259a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   259aa:	4628      	mov	r0, r5
   259ac:	f7ff ffdd 	bl	2596a <k_mutex_lock.constprop.0>
	if (context->conn_handler) {
   259b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
   259b2:	b118      	cbz	r0, 259bc <net_context_unref+0x3a>
			net_conn_unregister(context->conn_handler);
   259b4:	f7ee f9aa 	bl	13d0c <net_conn_unregister>
		context->conn_handler = NULL;
   259b8:	2300      	movs	r3, #0
   259ba:	6423      	str	r3, [r4, #64]	; 0x40
	context->flags &= ~NET_CONTEXT_IN_USE;
   259bc:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	k_mutex_unlock(&context->lock);
   259c0:	4628      	mov	r0, r5
	context->flags &= ~NET_CONTEXT_IN_USE;
   259c2:	f023 0307 	bic.w	r3, r3, #7
   259c6:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
	k_mutex_unlock(&context->lock);
   259ca:	f7ff ffcc 	bl	25966 <k_mutex_unlock>
	return 0;
   259ce:	2000      	movs	r0, #0
   259d0:	e7e4      	b.n	2599c <net_context_unref+0x1a>

000259d2 <net_context_bind>:
	if (context->conn_handler) {
   259d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
   259d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   259d6:	4606      	mov	r6, r0
   259d8:	460d      	mov	r5, r1
	if (context->conn_handler) {
   259da:	2b00      	cmp	r3, #0
   259dc:	d140      	bne.n	25a60 <net_context_bind+0x8e>
	if (IS_ENABLED(CONFIG_NET_IPV6) && addr->sa_family == AF_INET6) {
   259de:	8809      	ldrh	r1, [r1, #0]
   259e0:	2902      	cmp	r1, #2
   259e2:	d140      	bne.n	25a66 <net_context_bind+0x94>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   259e4:	2a17      	cmp	r2, #23
		struct net_if *iface = NULL;
   259e6:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   259e8:	d93d      	bls.n	25a66 <net_context_bind+0x94>
		if (net_ipv6_is_addr_mcast(&addr6->sin6_addr)) {
   259ea:	792b      	ldrb	r3, [r5, #4]
   259ec:	1d2c      	adds	r4, r5, #4
   259ee:	2bff      	cmp	r3, #255	; 0xff
   259f0:	d109      	bne.n	25a06 <net_context_bind+0x34>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   259f2:	4620      	mov	r0, r4
   259f4:	a901      	add	r1, sp, #4
   259f6:	f7ec fc65 	bl	122c4 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   259fa:	4604      	mov	r4, r0
   259fc:	bb38      	cbnz	r0, 25a4e <net_context_bind+0x7c>
				return -ENOENT;
   259fe:	f06f 0001 	mvn.w	r0, #1
}
   25a02:	b002      	add	sp, #8
   25a04:	bd70      	pop	{r4, r5, r6, pc}
		} else if (net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
   25a06:	4620      	mov	r0, r4
   25a08:	f7ff ffa0 	bl	2594c <net_ipv6_is_addr_unspecified>
   25a0c:	b1d0      	cbz	r0, 25a44 <net_context_bind+0x72>
			iface = net_if_ipv6_select_src_iface(
   25a0e:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   25a12:	f7ec fdbb 	bl	1258c <net_if_ipv6_select_src_iface>
   25a16:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   25a18:	f7ec fef4 	bl	12804 <net_ipv6_unspecified_address>
   25a1c:	4604      	mov	r4, r0
		if (!iface) {
   25a1e:	9801      	ldr	r0, [sp, #4]
   25a20:	b1d8      	cbz	r0, 25a5a <net_context_bind+0x88>
	context->iface = net_if_get_by_iface(iface);
   25a22:	f7ec fe3d 	bl	126a0 <net_if_get_by_iface>
   25a26:	f886 0088 	strb.w	r0, [r6, #136]	; 0x88
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   25a2a:	2002      	movs	r0, #2
		if (addr6->sin6_port) {
   25a2c:	8869      	ldrh	r1, [r5, #2]
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   25a2e:	83b0      	strh	r0, [r6, #28]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   25a30:	6234      	str	r4, [r6, #32]
		if (addr6->sin6_port) {
   25a32:	b171      	cbz	r1, 25a52 <net_context_bind+0x80>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   25a34:	462a      	mov	r2, r5
   25a36:	f7ec fee9 	bl	1280c <check_used_port>
			if (!ret) {
   25a3a:	2800      	cmp	r0, #0
   25a3c:	d1e1      	bne.n	25a02 <net_context_bind+0x30>
				net_sin6_ptr(&context->local)->sin6_port =
   25a3e:	886b      	ldrh	r3, [r5, #2]
   25a40:	83f3      	strh	r3, [r6, #30]
   25a42:	e7de      	b.n	25a02 <net_context_bind+0x30>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   25a44:	4620      	mov	r0, r4
   25a46:	a901      	add	r1, sp, #4
   25a48:	f7ec fab2 	bl	11fb0 <net_if_ipv6_addr_lookup>
   25a4c:	e7d5      	b.n	259fa <net_context_bind+0x28>
			ptr = &ifaddr->address.in6_addr;
   25a4e:	3404      	adds	r4, #4
   25a50:	e7e5      	b.n	25a1e <net_context_bind+0x4c>
			addr6->sin6_port =
   25a52:	8bf3      	ldrh	r3, [r6, #30]
		return 0;
   25a54:	4608      	mov	r0, r1
			addr6->sin6_port =
   25a56:	806b      	strh	r3, [r5, #2]
   25a58:	e7d3      	b.n	25a02 <net_context_bind+0x30>
			return -EADDRNOTAVAIL;
   25a5a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   25a5e:	e7d0      	b.n	25a02 <net_context_bind+0x30>
		return -EISCONN;
   25a60:	f06f 007e 	mvn.w	r0, #126	; 0x7e
   25a64:	e7cd      	b.n	25a02 <net_context_bind+0x30>
	return -EINVAL;
   25a66:	f06f 0015 	mvn.w	r0, #21
   25a6a:	e7ca      	b.n	25a02 <net_context_bind+0x30>

00025a6c <bind_default>:
{
   25a6c:	b570      	push	{r4, r5, r6, lr}
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   25a6e:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
   25a72:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   25a74:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   25a78:	2b02      	cmp	r3, #2
{
   25a7a:	b086      	sub	sp, #24
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   25a7c:	d120      	bne.n	25ac0 <bind_default+0x54>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   25a7e:	6a02      	ldr	r2, [r0, #32]
   25a80:	b9e2      	cbnz	r2, 25abc <bind_default+0x50>
		addr6.sin6_family = AF_INET6;
   25a82:	f8ad 3000 	strh.w	r3, [sp]
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   25a86:	f7ec febd 	bl	12804 <net_ipv6_unspecified_address>
   25a8a:	4603      	mov	r3, r0
   25a8c:	ad01      	add	r5, sp, #4
   25a8e:	f100 0610 	add.w	r6, r0, #16
   25a92:	462a      	mov	r2, r5
   25a94:	6818      	ldr	r0, [r3, #0]
   25a96:	6859      	ldr	r1, [r3, #4]
   25a98:	3308      	adds	r3, #8
   25a9a:	c203      	stmia	r2!, {r0, r1}
   25a9c:	42b3      	cmp	r3, r6
   25a9e:	4615      	mov	r5, r2
   25aa0:	d1f7      	bne.n	25a92 <bind_default+0x26>
			find_available_port(context,
   25aa2:	4669      	mov	r1, sp
   25aa4:	4620      	mov	r0, r4
   25aa6:	f7ec fedb 	bl	12860 <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr6,
   25aaa:	2218      	movs	r2, #24
		addr6.sin6_port =
   25aac:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   25ab0:	4669      	mov	r1, sp
   25ab2:	4620      	mov	r0, r4
   25ab4:	f7ff ff8d 	bl	259d2 <net_context_bind>
}
   25ab8:	b006      	add	sp, #24
   25aba:	bd70      	pop	{r4, r5, r6, pc}
			return 0;
   25abc:	2000      	movs	r0, #0
   25abe:	e7fb      	b.n	25ab8 <bind_default+0x4c>
	return -EINVAL;
   25ac0:	f06f 0015 	mvn.w	r0, #21
   25ac4:	e7f8      	b.n	25ab8 <bind_default+0x4c>

00025ac6 <net_context_listen>:
	return context->flags & NET_CONTEXT_IN_USE;
   25ac6:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
{
   25aca:	b510      	push	{r4, lr}
	if (!net_context_is_used(context)) {
   25acc:	07db      	lsls	r3, r3, #31
   25ace:	d50e      	bpl.n	25aee <net_context_listen+0x28>
	k_mutex_lock(&context->lock, K_FOREVER);
   25ad0:	f100 0408 	add.w	r4, r0, #8
   25ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25adc:	4620      	mov	r0, r4
   25ade:	f7ff ff44 	bl	2596a <k_mutex_lock.constprop.0>
	k_mutex_unlock(&context->lock);
   25ae2:	4620      	mov	r0, r4
   25ae4:	f7ff ff3f 	bl	25966 <k_mutex_unlock>
	return -EOPNOTSUPP;
   25ae8:	f06f 005e 	mvn.w	r0, #94	; 0x5e
}
   25aec:	bd10      	pop	{r4, pc}
		return -EBADF;
   25aee:	f06f 0008 	mvn.w	r0, #8
   25af2:	e7fb      	b.n	25aec <net_context_listen+0x26>

00025af4 <net_context_create_ipv6_new>:
{
   25af4:	b5e0      	push	{r5, r6, r7, lr}
   25af6:	460d      	mov	r5, r1
   25af8:	4607      	mov	r7, r0
   25afa:	461e      	mov	r6, r3
	if (!src) {
   25afc:	4611      	mov	r1, r2
   25afe:	b902      	cbnz	r2, 25b02 <net_context_create_ipv6_new+0xe>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   25b00:	6a01      	ldr	r1, [r0, #32]
	if (net_ipv6_is_addr_unspecified(src)
   25b02:	4608      	mov	r0, r1
   25b04:	f7ff ff22 	bl	2594c <net_ipv6_is_addr_unspecified>
   25b08:	b910      	cbnz	r0, 25b10 <net_context_create_ipv6_new+0x1c>
	    || net_ipv6_is_addr_mcast(src)) {
   25b0a:	780b      	ldrb	r3, [r1, #0]
   25b0c:	2bff      	cmp	r3, #255	; 0xff
   25b0e:	d104      	bne.n	25b1a <net_context_create_ipv6_new+0x26>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   25b10:	4631      	mov	r1, r6
   25b12:	6a28      	ldr	r0, [r5, #32]
   25b14:	f7ec fcfa 	bl	1250c <net_if_ipv6_select_src_addr>
   25b18:	4601      	mov	r1, r0
	net_pkt_set_ipv6_hop_limit(pkt,
   25b1a:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
	return net_ipv6_create(pkt, src, dst);
   25b1e:	4632      	mov	r2, r6
   25b20:	4628      	mov	r0, r5
	pkt->ipv6_hop_limit = hop_limit;
   25b22:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
}
   25b26:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
	return net_ipv6_create(pkt, src, dst);
   25b2a:	f000 beab 	b.w	26884 <net_ipv6_create>

00025b2e <context_sendto.isra.0>:
static int context_sendto(struct net_context *context,
   25b2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b32:	4617      	mov	r7, r2
	if (!net_context_is_used(context)) {
   25b34:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
static int context_sendto(struct net_context *context,
   25b38:	4605      	mov	r5, r0
	if (!net_context_is_used(context)) {
   25b3a:	07d0      	lsls	r0, r2, #31
static int context_sendto(struct net_context *context,
   25b3c:	4689      	mov	r9, r1
   25b3e:	469a      	mov	sl, r3
   25b40:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   25b44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (!net_context_is_used(context)) {
   25b46:	f140 80c6 	bpl.w	25cd6 <context_sendto.isra.0+0x1a8>
	if (sendto && addrlen == 0 && dst_addr == NULL && buf != NULL) {
   25b4a:	b149      	cbz	r1, 25b60 <context_sendto.isra.0+0x32>
   25b4c:	b943      	cbnz	r3, 25b60 <context_sendto.isra.0+0x32>
   25b4e:	f1ba 0f00 	cmp.w	sl, #0
   25b52:	d108      	bne.n	25b66 <context_sendto.isra.0+0x38>
   25b54:	f1b9 0f00 	cmp.w	r9, #0
   25b58:	d175      	bne.n	25c46 <context_sendto.isra.0+0x118>
		return -EDESTADDRREQ;
   25b5a:	f06f 0478 	mvn.w	r4, #120	; 0x78
   25b5e:	e0a8      	b.n	25cb2 <context_sendto.isra.0+0x184>
	if (!msghdr && !dst_addr &&
   25b60:	f1ba 0f00 	cmp.w	sl, #0
   25b64:	d0f9      	beq.n	25b5a <context_sendto.isra.0+0x2c>
   25b66:	f04f 0800 	mov.w	r8, #0
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   25b6a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   25b6e:	2a02      	cmp	r2, #2
   25b70:	d16d      	bne.n	25c4e <context_sendto.isra.0+0x120>
		if (msghdr) {
   25b72:	f1b8 0f00 	cmp.w	r8, #0
   25b76:	d068      	beq.n	25c4a <context_sendto.isra.0+0x11c>
			addrlen = msghdr->msg_namelen;
   25b78:	e9d8 a300 	ldrd	sl, r3, [r8]
			if (!addr6) {
   25b7c:	f1ba 0f00 	cmp.w	sl, #0
   25b80:	d163      	bne.n	25c4a <context_sendto.isra.0+0x11c>
				addr6 = net_sin6(&context->remote);
   25b82:	f105 0a28 	add.w	sl, r5, #40	; 0x28
		if (net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
   25b86:	f10a 0404 	add.w	r4, sl, #4
   25b8a:	4620      	mov	r0, r4
   25b8c:	f7ff fede 	bl	2594c <net_ipv6_is_addr_unspecified>
   25b90:	2800      	cmp	r0, #0
   25b92:	d1e2      	bne.n	25b5a <context_sendto.isra.0+0x2c>
	if (msghdr && len == 0) {
   25b94:	f1b8 0f00 	cmp.w	r8, #0
   25b98:	d005      	beq.n	25ba6 <context_sendto.isra.0+0x78>
   25b9a:	b927      	cbnz	r7, 25ba6 <context_sendto.isra.0+0x78>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   25b9c:	463b      	mov	r3, r7
   25b9e:	f8d8 100c 	ldr.w	r1, [r8, #12]
   25ba2:	428b      	cmp	r3, r1
   25ba4:	d156      	bne.n	25c54 <context_sendto.isra.0+0x126>
	return net_if_get_by_index(context->iface);
   25ba6:	f995 0088 	ldrsb.w	r0, [r5, #136]	; 0x88
   25baa:	f7ec fd67 	bl	1267c <net_if_get_by_index>
	pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context), len,
   25bae:	f44f 4b00 	mov.w	fp, #32768	; 0x8000
   25bb2:	f04f 0c00 	mov.w	ip, #0
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   25bb6:	f8b5 2086 	ldrh.w	r2, [r5, #134]	; 0x86
   25bba:	4639      	mov	r1, r7
   25bbc:	e9cd bc00 	strd	fp, ip, [sp]
   25bc0:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
   25bc4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   25bc8:	f7ed f8f0 	bl	12dac <net_pkt_alloc_with_buffer>
	if (pkt) {
   25bcc:	4606      	mov	r6, r0
   25bce:	2800      	cmp	r0, #0
   25bd0:	f000 8084 	beq.w	25cdc <context_sendto.isra.0+0x1ae>
	tmp_len = net_pkt_available_payload_buffer(
   25bd4:	f895 1084 	ldrb.w	r1, [r5, #132]	; 0x84
	pkt->context = ctx;
   25bd8:	61c5      	str	r5, [r0, #28]
   25bda:	f000 fa98 	bl	2610e <net_pkt_available_payload_buffer>
	context->send_cb = cb;
   25bde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	tmp_len = net_pkt_available_payload_buffer(
   25be0:	4683      	mov	fp, r0
	context->send_cb = cb;
   25be2:	64ab      	str	r3, [r5, #72]	; 0x48
	context->user_data = user_data;
   25be4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25be6:	602b      	str	r3, [r5, #0]
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
   25be8:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
   25bec:	2b11      	cmp	r3, #17
   25bee:	d16c      	bne.n	25cca <context_sendto.isra.0+0x19c>
   25bf0:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   25bf4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   25bf8:	2b02      	cmp	r3, #2
   25bfa:	d169      	bne.n	25cd0 <context_sendto.isra.0+0x1a2>
		ret = net_context_create_ipv6_new(context, pkt,
   25bfc:	4623      	mov	r3, r4
   25bfe:	2200      	movs	r2, #0
   25c00:	4631      	mov	r1, r6
   25c02:	4628      	mov	r0, r5
		dst_port = addr6->sin6_port;
   25c04:	f8ba a002 	ldrh.w	sl, [sl, #2]
		ret = net_context_create_ipv6_new(context, pkt,
   25c08:	f7ff ff74 	bl	25af4 <net_context_create_ipv6_new>
	if (ret < 0) {
   25c0c:	1e04      	subs	r4, r0, #0
   25c0e:	db58      	blt.n	25cc2 <context_sendto.isra.0+0x194>
   25c10:	455f      	cmp	r7, fp
	ret = bind_default(context);
   25c12:	4628      	mov	r0, r5
   25c14:	bf28      	it	cs
   25c16:	465f      	movcs	r7, fp
   25c18:	f7ff ff28 	bl	25a6c <bind_default>
	if (ret) {
   25c1c:	4604      	mov	r4, r0
   25c1e:	2800      	cmp	r0, #0
   25c20:	d14d      	bne.n	25cbe <context_sendto.isra.0+0x190>
	ret = net_udp_create(pkt,
   25c22:	4652      	mov	r2, sl
   25c24:	4630      	mov	r0, r6
   25c26:	8be9      	ldrh	r1, [r5, #30]
   25c28:	f001 ffd2 	bl	27bd0 <net_udp_create>
	if (ret) {
   25c2c:	4604      	mov	r4, r0
   25c2e:	2800      	cmp	r0, #0
   25c30:	d145      	bne.n	25cbe <context_sendto.isra.0+0x190>
	if (msghdr) {
   25c32:	f1b8 0f00 	cmp.w	r8, #0
   25c36:	d140      	bne.n	25cba <context_sendto.isra.0+0x18c>
		ret = net_pkt_write(pkt, buf, buf_len);
   25c38:	463a      	mov	r2, r7
   25c3a:	4649      	mov	r1, r9
   25c3c:	4630      	mov	r0, r6
   25c3e:	f000 fc6e 	bl	2651e <net_pkt_write>
   25c42:	4604      	mov	r4, r0
   25c44:	e020      	b.n	25c88 <context_sendto.isra.0+0x15a>
   25c46:	46c8      	mov	r8, r9
   25c48:	e78f      	b.n	25b6a <context_sendto.isra.0+0x3c>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   25c4a:	2b17      	cmp	r3, #23
   25c4c:	d89b      	bhi.n	25b86 <context_sendto.isra.0+0x58>
		return -EINVAL;
   25c4e:	f06f 0415 	mvn.w	r4, #21
   25c52:	e02e      	b.n	25cb2 <context_sendto.isra.0+0x184>
			len += msghdr->msg_iov[i].iov_len;
   25c54:	f8d8 2008 	ldr.w	r2, [r8, #8]
   25c58:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   25c5c:	6852      	ldr	r2, [r2, #4]
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   25c5e:	3301      	adds	r3, #1
			len += msghdr->msg_iov[i].iov_len;
   25c60:	4417      	add	r7, r2
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   25c62:	e79e      	b.n	25ba2 <context_sendto.isra.0+0x74>
			ret = net_pkt_write(pkt, msghdr->msg_iov[i].iov_base,
   25c64:	f8d8 3008 	ldr.w	r3, [r8, #8]
   25c68:	4630      	mov	r0, r6
   25c6a:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
   25c6e:	6852      	ldr	r2, [r2, #4]
   25c70:	f853 1039 	ldr.w	r1, [r3, r9, lsl #3]
   25c74:	f000 fc53 	bl	2651e <net_pkt_write>
			if (ret < 0) {
   25c78:	1e04      	subs	r4, r0, #0
   25c7a:	db22      	blt.n	25cc2 <context_sendto.isra.0+0x194>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   25c7c:	f109 0901 	add.w	r9, r9, #1
   25c80:	f8d8 300c 	ldr.w	r3, [r8, #12]
   25c84:	454b      	cmp	r3, r9
   25c86:	d8ed      	bhi.n	25c64 <context_sendto.isra.0+0x136>
	if (ret) {
   25c88:	b9cc      	cbnz	r4, 25cbe <context_sendto.isra.0+0x190>
	net_pkt_cursor_init(pkt);
   25c8a:	4630      	mov	r0, r6
   25c8c:	f000 fa7d 	bl	2618a <net_pkt_cursor_init>
   25c90:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   25c94:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   25c98:	2b02      	cmp	r3, #2
   25c9a:	d104      	bne.n	25ca6 <context_sendto.isra.0+0x178>
		net_ipv6_finalize(pkt, net_context_get_ip_proto(context));
   25c9c:	4630      	mov	r0, r6
   25c9e:	f895 1084 	ldrb.w	r1, [r5, #132]	; 0x84
   25ca2:	f000 fe52 	bl	2694a <net_ipv6_finalize>
		ret = net_send_data(pkt);
   25ca6:	4630      	mov	r0, r6
   25ca8:	f7ff f897 	bl	24dda <net_send_data>
	if (ret < 0) {
   25cac:	1e04      	subs	r4, r0, #0
   25cae:	db08      	blt.n	25cc2 <context_sendto.isra.0+0x194>
	return len;
   25cb0:	463c      	mov	r4, r7
}
   25cb2:	4620      	mov	r0, r4
   25cb4:	b003      	add	sp, #12
   25cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   25cba:	4681      	mov	r9, r0
   25cbc:	e7e0      	b.n	25c80 <context_sendto.isra.0+0x152>
		if (ret < 0) {
   25cbe:	2c00      	cmp	r4, #0
   25cc0:	dae3      	bge.n	25c8a <context_sendto.isra.0+0x15c>
	net_pkt_unref(pkt);
   25cc2:	4630      	mov	r0, r6
   25cc4:	f000 f9f1 	bl	260aa <net_pkt_unref>
	return ret;
   25cc8:	e7f3      	b.n	25cb2 <context_sendto.isra.0+0x184>
		ret = -EPROTONOSUPPORT;
   25cca:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   25cce:	e7f8      	b.n	25cc2 <context_sendto.isra.0+0x194>
	int ret = -EINVAL;
   25cd0:	f06f 0415 	mvn.w	r4, #21
   25cd4:	e7f5      	b.n	25cc2 <context_sendto.isra.0+0x194>
		return -EBADF;
   25cd6:	f06f 0408 	mvn.w	r4, #8
   25cda:	e7ea      	b.n	25cb2 <context_sendto.isra.0+0x184>
		return -ENOMEM;
   25cdc:	f06f 040b 	mvn.w	r4, #11
   25ce0:	e7e7      	b.n	25cb2 <context_sendto.isra.0+0x184>

00025ce2 <net_context_connect>:
{
   25ce2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25ce6:	4604      	mov	r4, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   25ce8:	f100 0708 	add.w	r7, r0, #8
{
   25cec:	4691      	mov	r9, r2
   25cee:	461e      	mov	r6, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   25cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25cf8:	4638      	mov	r0, r7
{
   25cfa:	4688      	mov	r8, r1
	k_mutex_lock(&context->lock, K_FOREVER);
   25cfc:	f7ff fe35 	bl	2596a <k_mutex_lock.constprop.0>
	if (!net_context_is_used(context)) {
   25d00:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
   25d04:	07eb      	lsls	r3, r5, #31
   25d06:	d54e      	bpl.n	25da6 <net_context_connect+0xc4>
	if (addr->sa_family != net_context_get_family(context)) {
   25d08:	f8b8 2000 	ldrh.w	r2, [r8]
   25d0c:	f3c5 03c2 	ubfx	r3, r5, #3, #3
   25d10:	429a      	cmp	r2, r3
   25d12:	d14e      	bne.n	25db2 <net_context_connect+0xd0>
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   25d14:	f3c5 0341 	ubfx	r3, r5, #1, #2
   25d18:	2b03      	cmp	r3, #3
   25d1a:	d047      	beq.n	25dac <net_context_connect+0xca>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   25d1c:	2a02      	cmp	r2, #2
   25d1e:	d148      	bne.n	25db2 <net_context_connect+0xd0>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   25d20:	f1b9 0f17 	cmp.w	r9, #23
   25d24:	d945      	bls.n	25db2 <net_context_connect+0xd0>
		if (net_context_get_ip_proto(context) == IPPROTO_TCP &&
   25d26:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
   25d2a:	2b06      	cmp	r3, #6
   25d2c:	d103      	bne.n	25d36 <net_context_connect+0x54>
   25d2e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   25d32:	2bff      	cmp	r3, #255	; 0xff
   25d34:	d040      	beq.n	25db8 <net_context_connect+0xd6>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   25d36:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   25d3a:	4602      	mov	r2, r0
   25d3c:	f108 0304 	add.w	r3, r8, #4
   25d40:	f108 0114 	add.w	r1, r8, #20
   25d44:	f853 cb04 	ldr.w	ip, [r3], #4
   25d48:	428b      	cmp	r3, r1
   25d4a:	f842 cb04 	str.w	ip, [r2], #4
   25d4e:	d1f9      	bne.n	25d44 <net_context_connect+0x62>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   25d50:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   25d54:	8563      	strh	r3, [r4, #42]	; 0x2a
		addr6->sin6_family = AF_INET6;
   25d56:	2302      	movs	r3, #2
   25d58:	8523      	strh	r3, [r4, #40]	; 0x28
		if (!net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
   25d5a:	f7ff fdf7 	bl	2594c <net_ipv6_is_addr_unspecified>
   25d5e:	b9f0      	cbnz	r0, 25d9e <net_context_connect+0xbc>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   25d60:	f445 7580 	orr.w	r5, r5, #256	; 0x100
   25d64:	f8a4 5086 	strh.w	r5, [r4, #134]	; 0x86
		ret = bind_default(context);
   25d68:	4620      	mov	r0, r4
   25d6a:	f7ff fe7f 	bl	25a6c <bind_default>
		if (ret) {
   25d6e:	4605      	mov	r5, r0
   25d70:	b978      	cbnz	r0, 25d92 <net_context_connect+0xb0>
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   25d72:	2302      	movs	r3, #2
   25d74:	83a3      	strh	r3, [r4, #28]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   25d76:	6a23      	ldr	r3, [r4, #32]
   25d78:	2b00      	cmp	r3, #0
   25d7a:	d0ff      	beq.n	25d7c <net_context_connect+0x9a>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   25d7c:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
   25d80:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   25d84:	2b02      	cmp	r3, #2
   25d86:	d11a      	bne.n	25dbe <net_context_connect+0xdc>
		if (cb) {
   25d88:	b11e      	cbz	r6, 25d92 <net_context_connect+0xb0>
			cb(context, 0, user_data);
   25d8a:	2100      	movs	r1, #0
   25d8c:	4620      	mov	r0, r4
   25d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25d90:	47b0      	blx	r6
	k_mutex_unlock(&context->lock);
   25d92:	4638      	mov	r0, r7
   25d94:	f7ff fde7 	bl	25966 <k_mutex_unlock>
}
   25d98:	4628      	mov	r0, r5
   25d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   25d9e:	f425 7580 	bic.w	r5, r5, #256	; 0x100
   25da2:	b2ad      	uxth	r5, r5
   25da4:	e7de      	b.n	25d64 <net_context_connect+0x82>
		ret = -EBADF;
   25da6:	f06f 0508 	mvn.w	r5, #8
   25daa:	e7f2      	b.n	25d92 <net_context_connect+0xb0>
		ret = -EOPNOTSUPP;
   25dac:	f06f 055e 	mvn.w	r5, #94	; 0x5e
   25db0:	e7ef      	b.n	25d92 <net_context_connect+0xb0>
		ret = -EINVAL;
   25db2:	f06f 0515 	mvn.w	r5, #21
   25db6:	e7ec      	b.n	25d92 <net_context_connect+0xb0>
			ret = -EADDRNOTAVAIL;
   25db8:	f06f 057c 	mvn.w	r5, #124	; 0x7c
   25dbc:	e7e9      	b.n	25d92 <net_context_connect+0xb0>
		ret = -ENOTSUP;
   25dbe:	f06f 0585 	mvn.w	r5, #133	; 0x85
   25dc2:	e7e6      	b.n	25d92 <net_context_connect+0xb0>

00025dc4 <net_context_accept>:
{
   25dc4:	b538      	push	{r3, r4, r5, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   25dc6:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
   25dca:	4604      	mov	r4, r0
	if (!net_context_is_used(context)) {
   25dcc:	07db      	lsls	r3, r3, #31
   25dce:	d521      	bpl.n	25e14 <net_context_accept+0x50>
	k_mutex_lock(&context->lock, K_FOREVER);
   25dd0:	f100 0508 	add.w	r5, r0, #8
   25dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25ddc:	4628      	mov	r0, r5
   25dde:	f7ff fdc4 	bl	2596a <k_mutex_lock.constprop.0>
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
   25de2:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
   25de6:	f3c3 0241 	ubfx	r2, r3, #1, #2
   25dea:	2a03      	cmp	r2, #3
   25dec:	d003      	beq.n	25df6 <net_context_accept+0x32>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   25dee:	f3c3 1381 	ubfx	r3, r3, #6, #2
   25df2:	2b01      	cmp	r3, #1
   25df4:	d10b      	bne.n	25e0e <net_context_accept+0x4a>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   25df6:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
		ret = net_tcp_accept(context, cb, user_data);
   25dfa:	2b06      	cmp	r3, #6
   25dfc:	bf14      	ite	ne
   25dfe:	2400      	movne	r4, #0
   25e00:	f06f 047a 	mvneq.w	r4, #122	; 0x7a
	k_mutex_unlock(&context->lock);
   25e04:	4628      	mov	r0, r5
   25e06:	f7ff fdae 	bl	25966 <k_mutex_unlock>
}
   25e0a:	4620      	mov	r0, r4
   25e0c:	bd38      	pop	{r3, r4, r5, pc}
		ret = -EINVAL;
   25e0e:	f06f 0415 	mvn.w	r4, #21
   25e12:	e7f7      	b.n	25e04 <net_context_accept+0x40>
		return -EBADF;
   25e14:	f06f 0408 	mvn.w	r4, #8
   25e18:	e7f7      	b.n	25e0a <net_context_accept+0x46>

00025e1a <net_context_send>:
{
   25e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   25e1c:	4604      	mov	r4, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   25e1e:	f100 0608 	add.w	r6, r0, #8
{
   25e22:	b087      	sub	sp, #28
   25e24:	4615      	mov	r5, r2
   25e26:	461f      	mov	r7, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   25e28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25e30:	4630      	mov	r0, r6
{
   25e32:	9105      	str	r1, [sp, #20]
	k_mutex_lock(&context->lock, K_FOREVER);
   25e34:	f7ff fd99 	bl	2596a <k_mutex_lock.constprop.0>
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   25e38:	f8b4 0086 	ldrh.w	r0, [r4, #134]	; 0x86
   25e3c:	05c3      	lsls	r3, r0, #23
   25e3e:	d51b      	bpl.n	25e78 <net_context_send+0x5e>
   25e40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   25e42:	b1cb      	cbz	r3, 25e78 <net_context_send+0x5e>
	ret = context_sendto(context, buf, len, &context->remote,
   25e44:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   25e46:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   25e4a:	2802      	cmp	r0, #2
		addrlen = 0;
   25e4c:	bf0c      	ite	eq
   25e4e:	2318      	moveq	r3, #24
   25e50:	2300      	movne	r3, #0
	ret = context_sendto(context, buf, len, &context->remote,
   25e52:	9203      	str	r2, [sp, #12]
   25e54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25e56:	4620      	mov	r0, r4
   25e58:	e9cd 7201 	strd	r7, r2, [sp, #4]
   25e5c:	9300      	str	r3, [sp, #0]
   25e5e:	462a      	mov	r2, r5
   25e60:	f104 0328 	add.w	r3, r4, #40	; 0x28
   25e64:	9905      	ldr	r1, [sp, #20]
   25e66:	f7ff fe62 	bl	25b2e <context_sendto.isra.0>
   25e6a:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
   25e6c:	4630      	mov	r0, r6
   25e6e:	f7ff fd7a 	bl	25966 <k_mutex_unlock>
}
   25e72:	4620      	mov	r0, r4
   25e74:	b007      	add	sp, #28
   25e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = -EDESTADDRREQ;
   25e78:	f06f 0478 	mvn.w	r4, #120	; 0x78
   25e7c:	e7f6      	b.n	25e6c <net_context_send+0x52>

00025e7e <net_context_sendmsg>:
{
   25e7e:	b570      	push	{r4, r5, r6, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
   25e80:	f100 0608 	add.w	r6, r0, #8
{
   25e84:	b086      	sub	sp, #24
   25e86:	4604      	mov	r4, r0
   25e88:	461d      	mov	r5, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   25e8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25e92:	4630      	mov	r0, r6
{
   25e94:	9105      	str	r1, [sp, #20]
	k_mutex_lock(&context->lock, K_FOREVER);
   25e96:	f7ff fd68 	bl	2596a <k_mutex_lock.constprop.0>
	ret = context_sendto(context, msghdr, 0, NULL, 0,
   25e9a:	2301      	movs	r3, #1
   25e9c:	9303      	str	r3, [sp, #12]
   25e9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25ea0:	9905      	ldr	r1, [sp, #20]
   25ea2:	e9cd 5301 	strd	r5, r3, [sp, #4]
   25ea6:	2300      	movs	r3, #0
   25ea8:	4620      	mov	r0, r4
   25eaa:	461a      	mov	r2, r3
   25eac:	9300      	str	r3, [sp, #0]
   25eae:	f7ff fe3e 	bl	25b2e <context_sendto.isra.0>
   25eb2:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
   25eb4:	4630      	mov	r0, r6
   25eb6:	f7ff fd56 	bl	25966 <k_mutex_unlock>
}
   25eba:	4620      	mov	r0, r4
   25ebc:	b006      	add	sp, #24
   25ebe:	bd70      	pop	{r4, r5, r6, pc}

00025ec0 <net_context_sendto>:
{
   25ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
   25ec2:	f100 0708 	add.w	r7, r0, #8
{
   25ec6:	b087      	sub	sp, #28
   25ec8:	4604      	mov	r4, r0
   25eca:	4615      	mov	r5, r2
   25ecc:	461e      	mov	r6, r3
	k_mutex_lock(&context->lock, K_FOREVER);
   25ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25ed6:	4638      	mov	r0, r7
{
   25ed8:	9105      	str	r1, [sp, #20]
	k_mutex_lock(&context->lock, K_FOREVER);
   25eda:	f7ff fd46 	bl	2596a <k_mutex_lock.constprop.0>
	ret = context_sendto(context, buf, len, dst_addr, addrlen,
   25ede:	2301      	movs	r3, #1
   25ee0:	9303      	str	r3, [sp, #12]
   25ee2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   25ee4:	462a      	mov	r2, r5
   25ee6:	9302      	str	r3, [sp, #8]
   25ee8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25eea:	9905      	ldr	r1, [sp, #20]
   25eec:	9301      	str	r3, [sp, #4]
   25eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25ef0:	4620      	mov	r0, r4
   25ef2:	9300      	str	r3, [sp, #0]
   25ef4:	4633      	mov	r3, r6
   25ef6:	f7ff fe1a 	bl	25b2e <context_sendto.isra.0>
   25efa:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
   25efc:	4638      	mov	r0, r7
   25efe:	f7ff fd32 	bl	25966 <k_mutex_unlock>
}
   25f02:	4620      	mov	r0, r4
   25f04:	b007      	add	sp, #28
   25f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025f08 <net_context_update_recv_wnd>:

int net_context_update_recv_wnd(struct net_context *context,
				s32_t delta)
{
   25f08:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
		net_if_is_ip_offloaded(net_context_get_iface(context))) {
		return 0;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
   25f0a:	f100 0408 	add.w	r4, r0, #8
   25f0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25f16:	4620      	mov	r0, r4
   25f18:	f7ff fd27 	bl	2596a <k_mutex_lock.constprop.0>

	ret = net_tcp_update_recv_wnd(context, delta);

	k_mutex_unlock(&context->lock);
   25f1c:	4620      	mov	r0, r4
   25f1e:	f7ff fd22 	bl	25966 <k_mutex_unlock>

	return ret;
}
   25f22:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   25f26:	bd10      	pop	{r4, pc}

00025f28 <net_buf_frags_len>:
	size_t bytes = 0;
   25f28:	2300      	movs	r3, #0
	while (buf) {
   25f2a:	b908      	cbnz	r0, 25f30 <net_buf_frags_len+0x8>
	}

	return bytes;
}
   25f2c:	4618      	mov	r0, r3
   25f2e:	4770      	bx	lr
		bytes += buf->len;
   25f30:	8982      	ldrh	r2, [r0, #12]
		buf = buf->frags;
   25f32:	6800      	ldr	r0, [r0, #0]
		bytes += buf->len;
   25f34:	4413      	add	r3, r2
		buf = buf->frags;
   25f36:	e7f8      	b.n	25f2a <net_buf_frags_len+0x2>

00025f38 <pkt_cursor_jump>:

static void pkt_cursor_jump(struct net_pkt *pkt, bool write)
{
	struct net_pkt_cursor *cursor = &pkt->cursor;

	cursor->buf = cursor->buf->frags;
   25f38:	6943      	ldr	r3, [r0, #20]
	while (cursor->buf) {
		size_t len = write ? cursor->buf->size : cursor->buf->len;

		if (!len) {
			cursor->buf = cursor->buf->frags;
   25f3a:	681b      	ldr	r3, [r3, #0]
   25f3c:	6143      	str	r3, [r0, #20]
	while (cursor->buf) {
   25f3e:	6943      	ldr	r3, [r0, #20]
   25f40:	b90b      	cbnz	r3, 25f46 <pkt_cursor_jump+0xe>
	}

	if (cursor->buf) {
		cursor->pos = cursor->buf->data;
	} else {
		cursor->pos = NULL;
   25f42:	6183      	str	r3, [r0, #24]
	}
}
   25f44:	4770      	bx	lr
		size_t len = write ? cursor->buf->size : cursor->buf->len;
   25f46:	b121      	cbz	r1, 25f52 <pkt_cursor_jump+0x1a>
   25f48:	89da      	ldrh	r2, [r3, #14]
		if (!len) {
   25f4a:	2a00      	cmp	r2, #0
   25f4c:	d0f5      	beq.n	25f3a <pkt_cursor_jump+0x2>
		cursor->pos = cursor->buf->data;
   25f4e:	689b      	ldr	r3, [r3, #8]
   25f50:	e7f7      	b.n	25f42 <pkt_cursor_jump+0xa>
		size_t len = write ? cursor->buf->size : cursor->buf->len;
   25f52:	899a      	ldrh	r2, [r3, #12]
   25f54:	e7f9      	b.n	25f4a <pkt_cursor_jump+0x12>

00025f56 <pkt_cursor_advance>:
static void pkt_cursor_advance(struct net_pkt *pkt, bool write)
{
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (!cursor->buf) {
   25f56:	6943      	ldr	r3, [r0, #20]
{
   25f58:	b410      	push	{r4}
	if (!cursor->buf) {
   25f5a:	b163      	cbz	r3, 25f76 <pkt_cursor_advance+0x20>
		return;
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   25f5c:	b149      	cbz	r1, 25f72 <pkt_cursor_advance+0x1c>
   25f5e:	89dc      	ldrh	r4, [r3, #14]
	if ((cursor->pos - cursor->buf->data) == len) {
   25f60:	6982      	ldr	r2, [r0, #24]
   25f62:	689b      	ldr	r3, [r3, #8]
   25f64:	1ad2      	subs	r2, r2, r3
   25f66:	42a2      	cmp	r2, r4
   25f68:	d105      	bne.n	25f76 <pkt_cursor_advance+0x20>
		pkt_cursor_jump(pkt, write);
	}
}
   25f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
		pkt_cursor_jump(pkt, write);
   25f6e:	f7ff bfe3 	b.w	25f38 <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
   25f72:	899c      	ldrh	r4, [r3, #12]
   25f74:	e7f4      	b.n	25f60 <pkt_cursor_advance+0xa>
}
   25f76:	f85d 4b04 	ldr.w	r4, [sp], #4
   25f7a:	4770      	bx	lr

00025f7c <pkt_cursor_update>:
	return pkt->overwrite;
   25f7c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39

static void pkt_cursor_update(struct net_pkt *pkt,
			      size_t length, bool write)
{
   25f80:	b4f0      	push	{r4, r5, r6, r7}
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (net_pkt_is_being_overwritten(pkt)) {
   25f82:	f013 0601 	ands.w	r6, r3, #1
   25f86:	6945      	ldr	r5, [r0, #20]
   25f88:	d10f      	bne.n	25faa <pkt_cursor_update+0x2e>
		write = false;
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   25f8a:	b172      	cbz	r2, 25faa <pkt_cursor_update+0x2e>
   25f8c:	89ef      	ldrh	r7, [r5, #14]
	if (length + (cursor->pos - cursor->buf->data) == len &&
   25f8e:	6984      	ldr	r4, [r0, #24]
   25f90:	68ab      	ldr	r3, [r5, #8]
   25f92:	1ae3      	subs	r3, r4, r3
   25f94:	440b      	add	r3, r1
   25f96:	42bb      	cmp	r3, r7
   25f98:	d10a      	bne.n	25fb0 <pkt_cursor_update+0x34>
   25f9a:	b116      	cbz	r6, 25fa2 <pkt_cursor_update+0x26>
	    !(net_pkt_is_being_overwritten(pkt) && len < cursor->buf->size)) {
   25f9c:	89eb      	ldrh	r3, [r5, #14]
   25f9e:	42bb      	cmp	r3, r7
   25fa0:	d806      	bhi.n	25fb0 <pkt_cursor_update+0x34>
		pkt_cursor_jump(pkt, write);
	} else {
		cursor->pos += length;
	}
}
   25fa2:	bcf0      	pop	{r4, r5, r6, r7}
		pkt_cursor_jump(pkt, write);
   25fa4:	4611      	mov	r1, r2
   25fa6:	f7ff bfc7 	b.w	25f38 <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
   25faa:	2200      	movs	r2, #0
   25fac:	89af      	ldrh	r7, [r5, #12]
   25fae:	e7ee      	b.n	25f8e <pkt_cursor_update+0x12>
		cursor->pos += length;
   25fb0:	4421      	add	r1, r4
   25fb2:	6181      	str	r1, [r0, #24]
}
   25fb4:	bcf0      	pop	{r4, r5, r6, r7}
   25fb6:	4770      	bx	lr

00025fb8 <net_pkt_cursor_operate>:

/* Internal function that does all operation (skip/read/write/memset) */
static int net_pkt_cursor_operate(struct net_pkt *pkt,
				  void *data, size_t length,
				  bool copy, bool write)
{
   25fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25fbc:	4606      	mov	r6, r0
   25fbe:	460f      	mov	r7, r1
   25fc0:	4615      	mov	r5, r2
   25fc2:	4699      	mov	r9, r3
   25fc4:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* We use such variable to avoid lengthy lines */
	struct net_pkt_cursor *c_op = &pkt->cursor;

	while (c_op->buf && length) {
   25fc8:	6973      	ldr	r3, [r6, #20]
   25fca:	2b00      	cmp	r3, #0
   25fcc:	d051      	beq.n	26072 <net_pkt_cursor_operate+0xba>
   25fce:	b90d      	cbnz	r5, 25fd4 <net_pkt_cursor_operate+0x1c>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
   25fd0:	4628      	mov	r0, r5
   25fd2:	e00d      	b.n	25ff0 <net_pkt_cursor_operate+0x38>
   25fd4:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
   25fd8:	4630      	mov	r0, r6
   25fda:	f013 0f01 	tst.w	r3, #1
   25fde:	bf0c      	ite	eq
   25fe0:	4641      	moveq	r1, r8
   25fe2:	2100      	movne	r1, #0
   25fe4:	f7ff ffb7 	bl	25f56 <pkt_cursor_advance>
		if (c_op->buf == NULL) {
   25fe8:	6973      	ldr	r3, [r6, #20]
   25fea:	b91b      	cbnz	r3, 25ff4 <net_pkt_cursor_operate+0x3c>
		return -ENOBUFS;
   25fec:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   25ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   25ff4:	69b0      	ldr	r0, [r6, #24]
   25ff6:	689c      	ldr	r4, [r3, #8]
   25ff8:	1b04      	subs	r4, r0, r4
   25ffa:	f1b8 0f00 	cmp.w	r8, #0
   25ffe:	d02d      	beq.n	2605c <net_pkt_cursor_operate+0xa4>
   26000:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
   26004:	07d2      	lsls	r2, r2, #31
   26006:	d429      	bmi.n	2605c <net_pkt_cursor_operate+0xa4>
			d_len = c_op->buf->size - (c_op->pos - c_op->buf->data);
   26008:	89db      	ldrh	r3, [r3, #14]
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   2600a:	1b1c      	subs	r4, r3, r4
		if (!d_len) {
   2600c:	2c00      	cmp	r4, #0
   2600e:	d0ed      	beq.n	25fec <net_pkt_cursor_operate+0x34>
		if (length < d_len) {
   26010:	42ac      	cmp	r4, r5
   26012:	bf28      	it	cs
   26014:	462c      	movcs	r4, r5
		if (copy) {
   26016:	f1b9 0f00 	cmp.w	r9, #0
   2601a:	d023      	beq.n	26064 <net_pkt_cursor_operate+0xac>
			memcpy(write ? c_op->pos : data,
   2601c:	f1b8 0f00 	cmp.w	r8, #0
   26020:	d11e      	bne.n	26060 <net_pkt_cursor_operate+0xa8>
   26022:	4601      	mov	r1, r0
   26024:	4638      	mov	r0, r7
   26026:	4622      	mov	r2, r4
   26028:	f003 fa23 	bl	29472 <memcpy>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   2602c:	f1b8 0f00 	cmp.w	r8, #0
   26030:	d008      	beq.n	26044 <net_pkt_cursor_operate+0x8c>
   26032:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
   26036:	07db      	lsls	r3, r3, #31
   26038:	d404      	bmi.n	26044 <net_pkt_cursor_operate+0x8c>
			net_buf_add(c_op->buf, len);
   2603a:	6970      	ldr	r0, [r6, #20]
   2603c:	4621      	mov	r1, r4
   2603e:	3008      	adds	r0, #8
   26040:	f7fe fe7f 	bl	24d42 <net_buf_simple_add>
		pkt_cursor_update(pkt, len, write);
   26044:	4642      	mov	r2, r8
   26046:	4621      	mov	r1, r4
   26048:	4630      	mov	r0, r6
   2604a:	f7ff ff97 	bl	25f7c <pkt_cursor_update>
		if (copy && data) {
   2604e:	f1b9 0f00 	cmp.w	r9, #0
   26052:	d001      	beq.n	26058 <net_pkt_cursor_operate+0xa0>
   26054:	b107      	cbz	r7, 26058 <net_pkt_cursor_operate+0xa0>
			data = (u8_t *) data + len;
   26056:	4427      	add	r7, r4
		length -= len;
   26058:	1b2d      	subs	r5, r5, r4
   2605a:	e7b5      	b.n	25fc8 <net_pkt_cursor_operate+0x10>
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   2605c:	899b      	ldrh	r3, [r3, #12]
   2605e:	e7d4      	b.n	2600a <net_pkt_cursor_operate+0x52>
   26060:	4639      	mov	r1, r7
   26062:	e7e0      	b.n	26026 <net_pkt_cursor_operate+0x6e>
		} else if (data) {
   26064:	2f00      	cmp	r7, #0
   26066:	d0e1      	beq.n	2602c <net_pkt_cursor_operate+0x74>
__ssp_bos_icheck3(memset, void *, int)
   26068:	4622      	mov	r2, r4
   2606a:	6839      	ldr	r1, [r7, #0]
   2606c:	f003 fa3b 	bl	294e6 <memset>
   26070:	e7dc      	b.n	2602c <net_pkt_cursor_operate+0x74>
	if (length) {
   26072:	2d00      	cmp	r5, #0
   26074:	d0ac      	beq.n	25fd0 <net_pkt_cursor_operate+0x18>
   26076:	e7b9      	b.n	25fec <net_pkt_cursor_operate+0x34>

00026078 <net_pkt_ref>:
{
   26078:	b510      	push	{r4, lr}
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
   2607a:	f100 0324 	add.w	r3, r0, #36	; 0x24
   2607e:	b170      	cbz	r0, 2609e <net_pkt_ref+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26080:	e8d3 2faf 	lda	r2, [r3]
		if (!ref) {
   26084:	b15a      	cbz	r2, 2609e <net_pkt_ref+0x26>
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref + 1));
   26086:	1c51      	adds	r1, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   26088:	e8d3 4fef 	ldaex	r4, [r3]
   2608c:	4294      	cmp	r4, r2
   2608e:	d104      	bne.n	2609a <net_pkt_ref+0x22>
   26090:	e8c3 1fec 	stlex	ip, r1, [r3]
   26094:	f1bc 0f00 	cmp.w	ip, #0
   26098:	d1f6      	bne.n	26088 <net_pkt_ref+0x10>
   2609a:	d1f0      	bne.n	2607e <net_pkt_ref+0x6>
}
   2609c:	bd10      	pop	{r4, pc}
			return NULL;
   2609e:	2000      	movs	r0, #0
   260a0:	e7fc      	b.n	2609c <net_pkt_ref+0x24>

000260a2 <net_pkt_frag_unref>:
	if (!frag) {
   260a2:	b108      	cbz	r0, 260a8 <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
   260a4:	f7eb bd0a 	b.w	11abc <net_buf_unref>
}
   260a8:	4770      	bx	lr

000260aa <net_pkt_unref>:
{
   260aa:	b507      	push	{r0, r1, r2, lr}
   260ac:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   260ae:	b1e8      	cbz	r0, 260ec <net_pkt_unref+0x42>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   260b0:	9b01      	ldr	r3, [sp, #4]
   260b2:	3324      	adds	r3, #36	; 0x24
   260b4:	e8d3 3faf 	lda	r3, [r3]
		if (!ref) {
   260b8:	b1c3      	cbz	r3, 260ec <net_pkt_unref+0x42>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   260ba:	9a01      	ldr	r2, [sp, #4]
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref - 1));
   260bc:	1e59      	subs	r1, r3, #1
   260be:	3224      	adds	r2, #36	; 0x24
   260c0:	e8d2 0fef 	ldaex	r0, [r2]
   260c4:	4298      	cmp	r0, r3
   260c6:	d104      	bne.n	260d2 <net_pkt_unref+0x28>
   260c8:	e8c2 1fec 	stlex	ip, r1, [r2]
   260cc:	f1bc 0f00 	cmp.w	ip, #0
   260d0:	d1f6      	bne.n	260c0 <net_pkt_unref+0x16>
   260d2:	d1ed      	bne.n	260b0 <net_pkt_unref+0x6>
	if (ref > 1) {
   260d4:	2b01      	cmp	r3, #1
   260d6:	dc09      	bgt.n	260ec <net_pkt_unref+0x42>
	if (pkt->frags) {
   260d8:	9b01      	ldr	r3, [sp, #4]
   260da:	6918      	ldr	r0, [r3, #16]
   260dc:	b108      	cbz	r0, 260e2 <net_pkt_unref+0x38>
		net_pkt_frag_unref(pkt->frags);
   260de:	f7ff ffe0 	bl	260a2 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   260e2:	9b01      	ldr	r3, [sp, #4]
   260e4:	a901      	add	r1, sp, #4
   260e6:	68d8      	ldr	r0, [r3, #12]
   260e8:	f7f9 fde8 	bl	1fcbc <k_mem_slab_free>
}
   260ec:	b003      	add	sp, #12
   260ee:	f85d fb04 	ldr.w	pc, [sp], #4

000260f2 <net_pkt_available_buffer>:
{
   260f2:	b508      	push	{r3, lr}
	if (!pkt) {
   260f4:	b130      	cbz	r0, 26104 <net_pkt_available_buffer+0x12>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
   260f6:	6900      	ldr	r0, [r0, #16]
	size_t size = 0;
   260f8:	2100      	movs	r1, #0
	struct net_buf *buf = pkt->buffer;
   260fa:	4603      	mov	r3, r0
	while (buf) {
   260fc:	b91b      	cbnz	r3, 26106 <net_pkt_available_buffer+0x14>
	return net_buf_frags_len(pkt->frags);
   260fe:	f7ff ff13 	bl	25f28 <net_buf_frags_len>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
   26102:	1a08      	subs	r0, r1, r0
}
   26104:	bd08      	pop	{r3, pc}
		size += buf->size;
   26106:	89da      	ldrh	r2, [r3, #14]
		buf = buf->frags;
   26108:	681b      	ldr	r3, [r3, #0]
		size += buf->size;
   2610a:	4411      	add	r1, r2
		buf = buf->frags;
   2610c:	e7f6      	b.n	260fc <net_pkt_available_buffer+0xa>

0002610e <net_pkt_available_payload_buffer>:
{
   2610e:	b538      	push	{r3, r4, r5, lr}
	if (!pkt) {
   26110:	4605      	mov	r5, r0
   26112:	b1c8      	cbz	r0, 26148 <net_pkt_available_payload_buffer+0x3a>
	return pkt->family;
   26114:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	if (family == AF_UNSPEC) {
   26118:	f013 0f0e 	tst.w	r3, #14
	hdr_len = pkt_estimate_headers_length(pkt, net_pkt_family(pkt), proto);
   2611c:	f3c3 0442 	ubfx	r4, r3, #1, #3
	if (family == AF_UNSPEC) {
   26120:	d006      	beq.n	26130 <net_pkt_available_payload_buffer+0x22>
		hdr_len += NET_IPV6H_LEN;
   26122:	2c02      	cmp	r4, #2
   26124:	bf14      	ite	ne
   26126:	2400      	movne	r4, #0
   26128:	2428      	moveq	r4, #40	; 0x28
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   2612a:	2911      	cmp	r1, #17
   2612c:	d10d      	bne.n	2614a <net_pkt_available_payload_buffer+0x3c>
		hdr_len += NET_UDPH_LEN;
   2612e:	3408      	adds	r4, #8
	return net_buf_frags_len(pkt->frags);
   26130:	6928      	ldr	r0, [r5, #16]
   26132:	f7ff fef9 	bl	25f28 <net_buf_frags_len>
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   26136:	42a0      	cmp	r0, r4
   26138:	bf38      	it	cc
   2613a:	1a24      	subcc	r4, r4, r0
	len = net_pkt_available_buffer(pkt) - hdr_len;
   2613c:	4628      	mov	r0, r5
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   2613e:	bf28      	it	cs
   26140:	2400      	movcs	r4, #0
	len = net_pkt_available_buffer(pkt) - hdr_len;
   26142:	f7ff ffd6 	bl	260f2 <net_pkt_available_buffer>
   26146:	1b00      	subs	r0, r0, r4
}
   26148:	bd38      	pop	{r3, r4, r5, pc}
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
   2614a:	2901      	cmp	r1, #1
   2614c:	d001      	beq.n	26152 <net_pkt_available_payload_buffer+0x44>
   2614e:	293a      	cmp	r1, #58	; 0x3a
   26150:	d1ee      	bne.n	26130 <net_pkt_available_payload_buffer+0x22>
		hdr_len += NET_ICMPH_LEN;
   26152:	3404      	adds	r4, #4
   26154:	e7ec      	b.n	26130 <net_pkt_available_payload_buffer+0x22>

00026156 <net_pkt_trim_buffer>:
{
   26156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26158:	4604      	mov	r4, r0
	buf = pkt->buffer;
   2615a:	6900      	ldr	r0, [r0, #16]
			buf->frags = NULL;
   2615c:	2700      	movs	r7, #0
	prev = buf;
   2615e:	4605      	mov	r5, r0
	while (buf) {
   26160:	b900      	cbnz	r0, 26164 <net_pkt_trim_buffer+0xe>
}
   26162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!buf->len) {
   26164:	8983      	ldrh	r3, [r0, #12]
		struct net_buf *next = buf->frags;
   26166:	6806      	ldr	r6, [r0, #0]
		if (!buf->len) {
   26168:	b93b      	cbnz	r3, 2617a <net_pkt_trim_buffer+0x24>
			if (buf == pkt->buffer) {
   2616a:	6923      	ldr	r3, [r4, #16]
   2616c:	4283      	cmp	r3, r0
   2616e:	d107      	bne.n	26180 <net_pkt_trim_buffer+0x2a>
				pkt->buffer = next;
   26170:	6126      	str	r6, [r4, #16]
			buf->frags = NULL;
   26172:	6007      	str	r7, [r0, #0]
			net_buf_unref(buf);
   26174:	f7eb fca2 	bl	11abc <net_buf_unref>
   26178:	4628      	mov	r0, r5
   2617a:	4605      	mov	r5, r0
   2617c:	4630      	mov	r0, r6
   2617e:	e7ef      	b.n	26160 <net_pkt_trim_buffer+0xa>
			} else if (buf == prev->frags) {
   26180:	682b      	ldr	r3, [r5, #0]
   26182:	4283      	cmp	r3, r0
				prev->frags = next;
   26184:	bf08      	it	eq
   26186:	602e      	streq	r6, [r5, #0]
   26188:	e7f3      	b.n	26172 <net_pkt_trim_buffer+0x1c>

0002618a <net_pkt_cursor_init>:
	pkt->cursor.buf = pkt->buffer;
   2618a:	6903      	ldr	r3, [r0, #16]
   2618c:	6143      	str	r3, [r0, #20]
	if (pkt->cursor.buf) {
   2618e:	b103      	cbz	r3, 26192 <net_pkt_cursor_init+0x8>
		pkt->cursor.pos = pkt->cursor.buf->data;
   26190:	689b      	ldr	r3, [r3, #8]
   26192:	6183      	str	r3, [r0, #24]
}
   26194:	4770      	bx	lr

00026196 <pkt_alloc>:
{
   26196:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26198:	4604      	mov	r4, r0
   2619a:	4616      	mov	r6, r2
   2619c:	461d      	mov	r5, r3
	if (k_is_in_isr()) {
   2619e:	f002 ff38 	bl	29012 <k_is_in_isr>
   261a2:	b108      	cbz	r0, 261a8 <pkt_alloc+0x12>
		timeout = K_NO_WAIT;
   261a4:	2600      	movs	r6, #0
   261a6:	4635      	mov	r5, r6
	ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   261a8:	a901      	add	r1, sp, #4
   261aa:	4632      	mov	r2, r6
   261ac:	462b      	mov	r3, r5
   261ae:	4620      	mov	r0, r4
   261b0:	f7f9 fd52 	bl	1fc58 <k_mem_slab_alloc>
	if (ret) {
   261b4:	4601      	mov	r1, r0
   261b6:	b978      	cbnz	r0, 261d8 <pkt_alloc+0x42>
   261b8:	2244      	movs	r2, #68	; 0x44
   261ba:	9801      	ldr	r0, [sp, #4]
   261bc:	f003 f993 	bl	294e6 <memset>
	pkt->atomic_ref = ATOMIC_INIT(1);
   261c0:	2301      	movs	r3, #1
   261c2:	9801      	ldr	r0, [sp, #4]
   261c4:	6243      	str	r3, [r0, #36]	; 0x24
	pkt->ipv6_next_hdr = next_hdr;
   261c6:	23ff      	movs	r3, #255	; 0xff
	pkt->slab = slab;
   261c8:	60c4      	str	r4, [r0, #12]
   261ca:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
	net_pkt_cursor_init(pkt);
   261ce:	f7ff ffdc 	bl	2618a <net_pkt_cursor_init>
	return pkt;
   261d2:	9801      	ldr	r0, [sp, #4]
}
   261d4:	b002      	add	sp, #8
   261d6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   261d8:	2000      	movs	r0, #0
   261da:	e7fb      	b.n	261d4 <pkt_alloc+0x3e>

000261dc <pkt_alloc_on_iface>:
{
   261dc:	b510      	push	{r4, lr}
   261de:	460c      	mov	r4, r1
	pkt = pkt_alloc(slab, timeout);
   261e0:	f7ff ffd9 	bl	26196 <pkt_alloc>
	if (pkt) {
   261e4:	b148      	cbz	r0, 261fa <pkt_alloc_on_iface+0x1e>
	pkt->iface = iface;
   261e6:	6204      	str	r4, [r0, #32]
	if (iface) {
   261e8:	b13c      	cbz	r4, 261fa <pkt_alloc_on_iface+0x1e>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   261ea:	6823      	ldr	r3, [r4, #0]
   261ec:	7d5b      	ldrb	r3, [r3, #21]
   261ee:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   261f2:	6823      	ldr	r3, [r4, #0]
   261f4:	7d5b      	ldrb	r3, [r3, #21]
   261f6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
}
   261fa:	bd10      	pop	{r4, pc}

000261fc <net_pkt_append_buffer>:
	if (!pkt->buffer) {
   261fc:	6902      	ldr	r2, [r0, #16]
{
   261fe:	b510      	push	{r4, lr}
   26200:	460c      	mov	r4, r1
	if (!pkt->buffer) {
   26202:	b922      	cbnz	r2, 2620e <net_pkt_append_buffer+0x12>
}
   26204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pkt->buffer = buffer;
   26208:	6101      	str	r1, [r0, #16]
		net_pkt_cursor_init(pkt);
   2620a:	f7ff bfbe 	b.w	2618a <net_pkt_cursor_init>
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   2620e:	4610      	mov	r0, r2
   26210:	f7fe fd86 	bl	24d20 <net_buf_frag_last>
   26214:	4621      	mov	r1, r4
}
   26216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   2621a:	f7fe bd87 	b.w	24d2c <net_buf_frag_insert>

0002621e <pkt_alloc_with_buffer>:
{
   2621e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26222:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   26226:	4604      	mov	r4, r0
   26228:	468b      	mov	fp, r1
	u64_t end = z_timeout_end_calc(timeout);
   2622a:	4630      	mov	r0, r6
   2622c:	4639      	mov	r1, r7
{
   2622e:	4690      	mov	r8, r2
   26230:	469a      	mov	sl, r3
	u64_t end = z_timeout_end_calc(timeout);
   26232:	f002 ffcb 	bl	291cc <z_timeout_end_calc>
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   26236:	4632      	mov	r2, r6
	u64_t end = z_timeout_end_calc(timeout);
   26238:	4605      	mov	r5, r0
   2623a:	4689      	mov	r9, r1
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   2623c:	4620      	mov	r0, r4
   2623e:	463b      	mov	r3, r7
   26240:	4659      	mov	r1, fp
   26242:	f7ff ffcb 	bl	261dc <pkt_alloc_on_iface>
	if (!pkt) {
   26246:	4604      	mov	r4, r0
   26248:	b328      	cbz	r0, 26296 <pkt_alloc_with_buffer+0x78>
	pkt->family = family;
   2624a:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   2624e:	f36a 0343 	bfi	r3, sl, #1, #3
   26252:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   26256:	ea56 0307 	orrs.w	r3, r6, r7
   2625a:	d00f      	beq.n	2627c <pkt_alloc_with_buffer+0x5e>
   2625c:	1c7b      	adds	r3, r7, #1
   2625e:	bf08      	it	eq
   26260:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   26264:	d00a      	beq.n	2627c <pkt_alloc_with_buffer+0x5e>
		s64_t remaining = end - z_tick_get();
   26266:	f7fa fd0b 	bl	20c80 <z_tick_get>
   2626a:	1a2e      	subs	r6, r5, r0
   2626c:	eb69 0701 	sbc.w	r7, r9, r1
   26270:	2e00      	cmp	r6, #0
   26272:	f177 0300 	sbcs.w	r3, r7, #0
   26276:	bfbc      	itt	lt
   26278:	2600      	movlt	r6, #0
   2627a:	2700      	movlt	r7, #0
	ret = net_pkt_alloc_buffer(pkt, size, proto, timeout);
   2627c:	4641      	mov	r1, r8
   2627e:	4620      	mov	r0, r4
   26280:	e9cd 6700 	strd	r6, r7, [sp]
   26284:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   26288:	f7ec fcd2 	bl	12c30 <net_pkt_alloc_buffer>
	if (ret) {
   2628c:	b118      	cbz	r0, 26296 <pkt_alloc_with_buffer+0x78>
		net_pkt_unref(pkt);
   2628e:	4620      	mov	r0, r4
   26290:	f7ff ff0b 	bl	260aa <net_pkt_unref>
		return NULL;
   26294:	2400      	movs	r4, #0
}
   26296:	4620      	mov	r0, r4
   26298:	b003      	add	sp, #12
   2629a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002629e <net_pkt_skip>:

int net_pkt_skip(struct net_pkt *pkt, size_t skip)
{
	NET_DBG("pkt %p skip %zu", pkt, skip);

	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   2629e:	2301      	movs	r3, #1
{
   262a0:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   262a2:	9300      	str	r3, [sp, #0]
   262a4:	2300      	movs	r3, #0
{
   262a6:	460a      	mov	r2, r1
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   262a8:	4619      	mov	r1, r3
   262aa:	f7ff fe85 	bl	25fb8 <net_pkt_cursor_operate>
}
   262ae:	b003      	add	sp, #12
   262b0:	f85d fb04 	ldr.w	pc, [sp], #4

000262b4 <net_pkt_memset>:

int net_pkt_memset(struct net_pkt *pkt, int byte, size_t amount)
{
   262b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	NET_DBG("pkt %p byte %d amount %zu", pkt, byte, amount);

	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   262b6:	2301      	movs	r3, #1
{
   262b8:	9103      	str	r1, [sp, #12]
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   262ba:	9300      	str	r3, [sp, #0]
   262bc:	a903      	add	r1, sp, #12
   262be:	2300      	movs	r3, #0
   262c0:	f7ff fe7a 	bl	25fb8 <net_pkt_cursor_operate>
}
   262c4:	b005      	add	sp, #20
   262c6:	f85d fb04 	ldr.w	pc, [sp], #4

000262ca <net_pkt_read>:

int net_pkt_read(struct net_pkt *pkt, void *data, size_t length)
{
	NET_DBG("pkt %p data %p length %zu", pkt, data, length);

	return net_pkt_cursor_operate(pkt, data, length, true, false);
   262ca:	2300      	movs	r3, #0
{
   262cc:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, data, length, true, false);
   262ce:	9300      	str	r3, [sp, #0]
   262d0:	2301      	movs	r3, #1
   262d2:	f7ff fe71 	bl	25fb8 <net_pkt_cursor_operate>
}
   262d6:	b003      	add	sp, #12
   262d8:	f85d fb04 	ldr.w	pc, [sp], #4

000262dc <net_pkt_read_be32>:
int net_pkt_read_be32(struct net_pkt *pkt, u32_t *data)
{
	u8_t d32[4];
	int ret;

	ret = net_pkt_read(pkt, d32, sizeof(u32_t));
   262dc:	2204      	movs	r2, #4
{
   262de:	b513      	push	{r0, r1, r4, lr}
   262e0:	460c      	mov	r4, r1
	ret = net_pkt_read(pkt, d32, sizeof(u32_t));
   262e2:	eb0d 0102 	add.w	r1, sp, r2
   262e6:	f7ff fff0 	bl	262ca <net_pkt_read>

	*data = d32[0] << 24 | d32[1] << 16 | d32[2] << 8 | d32[3];
   262ea:	9b01      	ldr	r3, [sp, #4]
   262ec:	ba1b      	rev	r3, r3
   262ee:	6023      	str	r3, [r4, #0]

	return ret;
}
   262f0:	b002      	add	sp, #8
   262f2:	bd10      	pop	{r4, pc}

000262f4 <net_pkt_copy>:
}

int net_pkt_copy(struct net_pkt *pkt_dst,
		 struct net_pkt *pkt_src,
		 size_t length)
{
   262f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   262f6:	4606      	mov	r6, r0
   262f8:	460f      	mov	r7, r1
   262fa:	4614      	mov	r4, r2
	struct net_pkt_cursor *c_dst = &pkt_dst->cursor;
	struct net_pkt_cursor *c_src = &pkt_src->cursor;

	while (c_dst->buf && c_src->buf && length) {
   262fc:	6973      	ldr	r3, [r6, #20]
   262fe:	2b00      	cmp	r3, #0
   26300:	d041      	beq.n	26386 <net_pkt_copy+0x92>
   26302:	697b      	ldr	r3, [r7, #20]
   26304:	2b00      	cmp	r3, #0
   26306:	d03e      	beq.n	26386 <net_pkt_copy+0x92>
   26308:	b90c      	cbnz	r4, 2630e <net_pkt_copy+0x1a>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
   2630a:	4620      	mov	r0, r4
   2630c:	e021      	b.n	26352 <net_pkt_copy+0x5e>
		pkt_cursor_advance(pkt_dst, true);
   2630e:	2101      	movs	r1, #1
   26310:	4630      	mov	r0, r6
   26312:	f7ff fe20 	bl	25f56 <pkt_cursor_advance>
		pkt_cursor_advance(pkt_src, false);
   26316:	2100      	movs	r1, #0
   26318:	4638      	mov	r0, r7
   2631a:	f7ff fe1c 	bl	25f56 <pkt_cursor_advance>
		if (!c_dst->buf || !c_src->buf) {
   2631e:	6972      	ldr	r2, [r6, #20]
   26320:	b1aa      	cbz	r2, 2634e <net_pkt_copy+0x5a>
   26322:	697b      	ldr	r3, [r7, #20]
   26324:	b19b      	cbz	r3, 2634e <net_pkt_copy+0x5a>
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   26326:	899d      	ldrh	r5, [r3, #12]
   26328:	69b9      	ldr	r1, [r7, #24]
   2632a:	689b      	ldr	r3, [r3, #8]
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   2632c:	69b0      	ldr	r0, [r6, #24]
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   2632e:	1acb      	subs	r3, r1, r3
   26330:	1aed      	subs	r5, r5, r3
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   26332:	89d3      	ldrh	r3, [r2, #14]
   26334:	6892      	ldr	r2, [r2, #8]
		if (length < s_len && length < d_len) {
   26336:	42ac      	cmp	r4, r5
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   26338:	eba0 0202 	sub.w	r2, r0, r2
   2633c:	eba3 0302 	sub.w	r3, r3, r2
		if (length < s_len && length < d_len) {
   26340:	d201      	bcs.n	26346 <net_pkt_copy+0x52>
   26342:	429c      	cmp	r4, r3
   26344:	d306      	bcc.n	26354 <net_pkt_copy+0x60>
			if (d_len < s_len) {
   26346:	429d      	cmp	r5, r3
   26348:	bf28      	it	cs
   2634a:	461d      	movcs	r5, r3
		if (!len) {
   2634c:	b91d      	cbnz	r5, 26356 <net_pkt_copy+0x62>
		return -ENOBUFS;
   2634e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   26352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26354:	4625      	mov	r5, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26356:	462a      	mov	r2, r5
   26358:	f003 f88b 	bl	29472 <memcpy>
	return pkt->overwrite;
   2635c:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
		if (!net_pkt_is_being_overwritten(pkt_dst)) {
   26360:	07db      	lsls	r3, r3, #31
   26362:	d404      	bmi.n	2636e <net_pkt_copy+0x7a>
			net_buf_add(c_dst->buf, len);
   26364:	6970      	ldr	r0, [r6, #20]
   26366:	4629      	mov	r1, r5
   26368:	3008      	adds	r0, #8
   2636a:	f7fe fcea 	bl	24d42 <net_buf_simple_add>
		pkt_cursor_update(pkt_dst, len, true);
   2636e:	2201      	movs	r2, #1
   26370:	4629      	mov	r1, r5
   26372:	4630      	mov	r0, r6
   26374:	f7ff fe02 	bl	25f7c <pkt_cursor_update>
		pkt_cursor_update(pkt_src, len, false);
   26378:	2200      	movs	r2, #0
   2637a:	4629      	mov	r1, r5
   2637c:	4638      	mov	r0, r7
   2637e:	f7ff fdfd 	bl	25f7c <pkt_cursor_update>
		length -= len;
   26382:	1b64      	subs	r4, r4, r5
   26384:	e7ba      	b.n	262fc <net_pkt_copy+0x8>
	if (length) {
   26386:	2c00      	cmp	r4, #0
   26388:	d0bf      	beq.n	2630a <net_pkt_copy+0x16>
   2638a:	e7e0      	b.n	2634e <net_pkt_copy+0x5a>

0002638c <net_pkt_remaining_data>:
size_t net_pkt_remaining_data(struct net_pkt *pkt)
{
	struct net_buf *buf;
	size_t data_length;

	if (!pkt || !pkt->cursor.buf || !pkt->cursor.pos) {
   2638c:	b170      	cbz	r0, 263ac <net_pkt_remaining_data+0x20>
   2638e:	6943      	ldr	r3, [r0, #20]
   26390:	b15b      	cbz	r3, 263aa <net_pkt_remaining_data+0x1e>
   26392:	6980      	ldr	r0, [r0, #24]
   26394:	b150      	cbz	r0, 263ac <net_pkt_remaining_data+0x20>
		return 0;
	}

	buf = pkt->cursor.buf;
	data_length = buf->len - (pkt->cursor.pos - buf->data);
   26396:	6899      	ldr	r1, [r3, #8]
   26398:	899a      	ldrh	r2, [r3, #12]
   2639a:	1a40      	subs	r0, r0, r1
   2639c:	1a10      	subs	r0, r2, r0

	buf = buf->frags;
	while (buf) {
		data_length += buf->len;
		buf = buf->frags;
   2639e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   263a0:	b903      	cbnz	r3, 263a4 <net_pkt_remaining_data+0x18>
   263a2:	4770      	bx	lr
		data_length += buf->len;
   263a4:	899a      	ldrh	r2, [r3, #12]
   263a6:	4410      	add	r0, r2
   263a8:	e7f9      	b.n	2639e <net_pkt_remaining_data+0x12>
		return 0;
   263aa:	4618      	mov	r0, r3
	}

	return data_length;
}
   263ac:	4770      	bx	lr

000263ae <net_pkt_update_length>:

int net_pkt_update_length(struct net_pkt *pkt, size_t length)
{
	struct net_buf *buf;

	for (buf = pkt->buffer; buf; buf = buf->frags) {
   263ae:	6903      	ldr	r3, [r0, #16]
   263b0:	b92b      	cbnz	r3, 263be <net_pkt_update_length+0x10>
			buf->len = length;
			length = 0;
		}
	}

	return !length ? 0 : -EINVAL;
   263b2:	2900      	cmp	r1, #0
}
   263b4:	bf14      	ite	ne
   263b6:	f06f 0015 	mvnne.w	r0, #21
   263ba:	2000      	moveq	r0, #0
   263bc:	4770      	bx	lr
		if (buf->len < length) {
   263be:	899a      	ldrh	r2, [r3, #12]
   263c0:	428a      	cmp	r2, r1
			buf->len = length;
   263c2:	bf2a      	itet	cs
   263c4:	8199      	strhcs	r1, [r3, #12]
			length -= buf->len;
   263c6:	1a89      	subcc	r1, r1, r2
			length = 0;
   263c8:	2100      	movcs	r1, #0
	for (buf = pkt->buffer; buf; buf = buf->frags) {
   263ca:	681b      	ldr	r3, [r3, #0]
   263cc:	e7f0      	b.n	263b0 <net_pkt_update_length+0x2>

000263ce <net_pkt_get_current_offset>:
u16_t net_pkt_get_current_offset(struct net_pkt *pkt)
{
	struct net_buf *buf = pkt->buffer;
	u16_t offset;

	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   263ce:	6941      	ldr	r1, [r0, #20]
{
   263d0:	b510      	push	{r4, lr}
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   263d2:	b179      	cbz	r1, 263f4 <net_pkt_get_current_offset+0x26>
   263d4:	6983      	ldr	r3, [r0, #24]
   263d6:	b17b      	cbz	r3, 263f8 <net_pkt_get_current_offset+0x2a>
		return 0;
	}

	offset = 0U;
   263d8:	2200      	movs	r2, #0
	struct net_buf *buf = pkt->buffer;
   263da:	6904      	ldr	r4, [r0, #16]

	while (buf != pkt->cursor.buf) {
   263dc:	42a1      	cmp	r1, r4
   263de:	d104      	bne.n	263ea <net_pkt_get_current_offset+0x1c>
		offset += buf->len;
		buf = buf->frags;
	}

	offset += pkt->cursor.pos - buf->data;
   263e0:	6888      	ldr	r0, [r1, #8]
   263e2:	1a18      	subs	r0, r3, r0
   263e4:	4410      	add	r0, r2
   263e6:	b280      	uxth	r0, r0

	return offset;
}
   263e8:	bd10      	pop	{r4, pc}
		offset += buf->len;
   263ea:	89a0      	ldrh	r0, [r4, #12]
		buf = buf->frags;
   263ec:	6824      	ldr	r4, [r4, #0]
		offset += buf->len;
   263ee:	4402      	add	r2, r0
   263f0:	b292      	uxth	r2, r2
		buf = buf->frags;
   263f2:	e7f3      	b.n	263dc <net_pkt_get_current_offset+0xe>
		return 0;
   263f4:	4608      	mov	r0, r1
   263f6:	e7f7      	b.n	263e8 <net_pkt_get_current_offset+0x1a>
   263f8:	4618      	mov	r0, r3
   263fa:	e7f5      	b.n	263e8 <net_pkt_get_current_offset+0x1a>

000263fc <net_pkt_clone>:
{
   263fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   26400:	461c      	mov	r4, r3
   26402:	4617      	mov	r7, r2
   26404:	4605      	mov	r5, r0
	size_t cursor_offset = net_pkt_get_current_offset(pkt);
   26406:	f7ff ffe2 	bl	263ce <net_pkt_get_current_offset>
   2640a:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
   2640c:	6928      	ldr	r0, [r5, #16]
   2640e:	f7ff fd8b 	bl	25f28 <net_buf_frags_len>
	clone_pkt = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
   26412:	2300      	movs	r3, #0
   26414:	4601      	mov	r1, r0
   26416:	e9cd 7400 	strd	r7, r4, [sp]
   2641a:	461a      	mov	r2, r3
   2641c:	6a28      	ldr	r0, [r5, #32]
   2641e:	f7ec fcc5 	bl	12dac <net_pkt_alloc_with_buffer>
	if (!clone_pkt) {
   26422:	4604      	mov	r4, r0
   26424:	b198      	cbz	r0, 2644e <net_pkt_clone+0x52>
	backup->pos = pkt->cursor.pos;
   26426:	e9d5 8705 	ldrd	r8, r7, [r5, #20]
	net_pkt_cursor_init(pkt);
   2642a:	4628      	mov	r0, r5
   2642c:	f7ff fead 	bl	2618a <net_pkt_cursor_init>
	return net_buf_frags_len(pkt->frags);
   26430:	6928      	ldr	r0, [r5, #16]
   26432:	f7ff fd79 	bl	25f28 <net_buf_frags_len>
	if (net_pkt_copy(clone_pkt, pkt, net_pkt_get_len(pkt))) {
   26436:	4629      	mov	r1, r5
   26438:	4602      	mov	r2, r0
   2643a:	4620      	mov	r0, r4
   2643c:	f7ff ff5a 	bl	262f4 <net_pkt_copy>
   26440:	b148      	cbz	r0, 26456 <net_pkt_clone+0x5a>
		net_pkt_unref(clone_pkt);
   26442:	4620      	mov	r0, r4
		return NULL;
   26444:	2400      	movs	r4, #0
		net_pkt_unref(clone_pkt);
   26446:	f7ff fe30 	bl	260aa <net_pkt_unref>
	pkt->cursor.pos = backup->pos;
   2644a:	e9c5 8705 	strd	r8, r7, [r5, #20]
}
   2644e:	4620      	mov	r0, r4
   26450:	b002      	add	sp, #8
   26452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clone_pkt->buffer) {
   26456:	6923      	ldr	r3, [r4, #16]
   26458:	b15b      	cbz	r3, 26472 <net_pkt_clone+0x76>
   2645a:	462a      	mov	r2, r5
   2645c:	f852 3f28 	ldr.w	r3, [r2, #40]!
   26460:	62a3      	str	r3, [r4, #40]	; 0x28
   26462:	6853      	ldr	r3, [r2, #4]
   26464:	462a      	mov	r2, r5
   26466:	62e3      	str	r3, [r4, #44]	; 0x2c
   26468:	f852 3f30 	ldr.w	r3, [r2, #48]!
   2646c:	6323      	str	r3, [r4, #48]	; 0x30
   2646e:	6853      	ldr	r3, [r2, #4]
   26470:	6363      	str	r3, [r4, #52]	; 0x34
	return pkt->family;
   26472:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	pkt->family = family;
   26476:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
	return pkt->family;
   2647a:	f3c3 0342 	ubfx	r3, r3, #1, #3
	pkt->family = family;
   2647e:	f363 0243 	bfi	r2, r3, #1, #3
   26482:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
	net_pkt_set_context(clone_pkt, net_pkt_context(pkt));
   26486:	69eb      	ldr	r3, [r5, #28]
	pkt->context = ctx;
   26488:	61e3      	str	r3, [r4, #28]
	net_pkt_set_ip_hdr_len(clone_pkt, net_pkt_ip_hdr_len(pkt));
   2648a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
	pkt->ip_hdr_len = len;
   2648e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return pkt->family;
   26492:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   26496:	f3c3 0342 	ubfx	r3, r3, #1, #3
   2649a:	2b02      	cmp	r3, #2
   2649c:	d111      	bne.n	264c2 <net_pkt_clone+0xc6>
		net_pkt_set_ipv6_hop_limit(clone_pkt,
   2649e:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
	pkt->ipv6_hop_limit = hop_limit;
   264a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		net_pkt_set_ipv6_ext_len(clone_pkt, net_pkt_ipv6_ext_len(pkt));
   264a6:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
	pkt->ipv6_ext_len = len;
   264a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
		net_pkt_set_ipv6_ext_opt_len(clone_pkt,
   264aa:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
	pkt->ipv6_ext_opt_len = len;
   264ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		net_pkt_set_ipv6_hdr_prev(clone_pkt,
   264b2:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
	pkt->ipv6_prev_hdr_start = offset;
   264b6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		net_pkt_set_ipv6_next_hdr(clone_pkt,
   264ba:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
	pkt->ipv6_next_hdr = next_hdr;
   264be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	net_pkt_cursor_init(clone_pkt);
   264c2:	4620      	mov	r0, r4
   264c4:	f7ff fe61 	bl	2618a <net_pkt_cursor_init>
	if (cursor_offset) {
   264c8:	b146      	cbz	r6, 264dc <net_pkt_clone+0xe0>
	pkt->overwrite = overwrite;
   264ca:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		net_pkt_skip(clone_pkt, cursor_offset);
   264ce:	4631      	mov	r1, r6
   264d0:	f043 0301 	orr.w	r3, r3, #1
   264d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   264d8:	f7ff fee1 	bl	2629e <net_pkt_skip>
	pkt->cursor.pos = backup->pos;
   264dc:	e9c5 8705 	strd	r8, r7, [r5, #20]
	return clone_pkt;
   264e0:	e7b5      	b.n	2644e <net_pkt_clone+0x52>

000264e2 <net_pkt_is_contiguous>:

bool net_pkt_is_contiguous(struct net_pkt *pkt, size_t size)
{
   264e2:	b538      	push	{r3, r4, r5, lr}
   264e4:	460d      	mov	r5, r1
	return pkt->overwrite;
   264e6:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   264ea:	4604      	mov	r4, r0
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
   264ec:	43c9      	mvns	r1, r1
   264ee:	f001 0101 	and.w	r1, r1, #1
   264f2:	f7ff fd30 	bl	25f56 <pkt_cursor_advance>

	if (pkt->cursor.buf && pkt->cursor.pos) {
   264f6:	6940      	ldr	r0, [r0, #20]
   264f8:	b170      	cbz	r0, 26518 <net_pkt_is_contiguous+0x36>
   264fa:	69a3      	ldr	r3, [r4, #24]
   264fc:	b16b      	cbz	r3, 2651a <net_pkt_is_contiguous+0x38>
   264fe:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
		size_t len;

		len = net_pkt_is_being_overwritten(pkt) ?
			pkt->cursor.buf->len : pkt->cursor.buf->size;
   26502:	07d2      	lsls	r2, r2, #31
   26504:	bf4c      	ite	mi
   26506:	8982      	ldrhmi	r2, [r0, #12]
   26508:	89c2      	ldrhpl	r2, [r0, #14]
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
   2650a:	6880      	ldr	r0, [r0, #8]
   2650c:	1a1b      	subs	r3, r3, r0
   2650e:	1ad3      	subs	r3, r2, r3
		if (len >= size) {
   26510:	42ab      	cmp	r3, r5
   26512:	bf34      	ite	cc
   26514:	2000      	movcc	r0, #0
   26516:	2001      	movcs	r0, #1
			return true;
		}
	}

	return false;
}
   26518:	bd38      	pop	{r3, r4, r5, pc}
	return false;
   2651a:	4618      	mov	r0, r3
   2651c:	e7fc      	b.n	26518 <net_pkt_is_contiguous+0x36>

0002651e <net_pkt_write>:
{
   2651e:	b530      	push	{r4, r5, lr}
   26520:	460d      	mov	r5, r1
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   26522:	6983      	ldr	r3, [r0, #24]
{
   26524:	4604      	mov	r4, r0
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   26526:	429d      	cmp	r5, r3
{
   26528:	4611      	mov	r1, r2
   2652a:	b085      	sub	sp, #20
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   2652c:	d10a      	bne.n	26544 <net_pkt_write+0x26>
   2652e:	9203      	str	r2, [sp, #12]
   26530:	f7ff ffd7 	bl	264e2 <net_pkt_is_contiguous>
   26534:	9903      	ldr	r1, [sp, #12]
   26536:	b128      	cbz	r0, 26544 <net_pkt_write+0x26>
		return net_pkt_skip(pkt, length);
   26538:	4620      	mov	r0, r4
}
   2653a:	b005      	add	sp, #20
   2653c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return net_pkt_skip(pkt, length);
   26540:	f7ff bead 	b.w	2629e <net_pkt_skip>
	return net_pkt_cursor_operate(pkt, (void *)data, length, true, true);
   26544:	2301      	movs	r3, #1
   26546:	460a      	mov	r2, r1
   26548:	4620      	mov	r0, r4
   2654a:	4629      	mov	r1, r5
   2654c:	9300      	str	r3, [sp, #0]
   2654e:	f7ff fd33 	bl	25fb8 <net_pkt_cursor_operate>
}
   26552:	b005      	add	sp, #20
   26554:	bd30      	pop	{r4, r5, pc}

00026556 <net_pkt_get_data>:

void *net_pkt_get_data(struct net_pkt *pkt,
		       struct net_pkt_data_access *access)
{
   26556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2655a:	460d      	mov	r5, r1
			return NULL;
		}

		return pkt->cursor.pos;
	} else {
		if (net_pkt_is_contiguous(pkt, access->size)) {
   2655c:	6849      	ldr	r1, [r1, #4]
{
   2655e:	4604      	mov	r4, r0
		if (net_pkt_is_contiguous(pkt, access->size)) {
   26560:	f7ff ffbf 	bl	264e2 <net_pkt_is_contiguous>
   26564:	4606      	mov	r6, r0
   26566:	b118      	cbz	r0, 26570 <net_pkt_get_data+0x1a>
			access->data = pkt->cursor.pos;
   26568:	69a3      	ldr	r3, [r4, #24]
   2656a:	602b      	str	r3, [r5, #0]
			}

			net_pkt_cursor_restore(pkt, &backup);
		}

		return access->data;
   2656c:	6829      	ldr	r1, [r5, #0]
   2656e:	e010      	b.n	26592 <net_pkt_get_data+0x3c>
   26570:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		} else if (net_pkt_is_being_overwritten(pkt)) {
   26574:	07db      	lsls	r3, r3, #31
   26576:	d5f9      	bpl.n	2656c <net_pkt_get_data+0x16>
   26578:	6829      	ldr	r1, [r5, #0]
			if (!access->data) {
   2657a:	b151      	cbz	r1, 26592 <net_pkt_get_data+0x3c>
	backup->pos = pkt->cursor.pos;
   2657c:	e9d4 8705 	ldrd	r8, r7, [r4, #20]
			if (net_pkt_read(pkt, access->data, access->size)) {
   26580:	4620      	mov	r0, r4
   26582:	686a      	ldr	r2, [r5, #4]
   26584:	f7ff fea1 	bl	262ca <net_pkt_read>
	pkt->cursor.pos = backup->pos;
   26588:	e9c4 8705 	strd	r8, r7, [r4, #20]
   2658c:	2800      	cmp	r0, #0
   2658e:	d0ed      	beq.n	2656c <net_pkt_get_data+0x16>
				return NULL;
   26590:	4631      	mov	r1, r6
	}

	return NULL;
}
   26592:	4608      	mov	r0, r1
   26594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026598 <net_pkt_set_data>:
{
	if (IS_ENABLED(CONFIG_NET_HEADERS_ALWAYS_CONTIGUOUS)) {
		return net_pkt_skip(pkt, access->size);
	}

	return net_pkt_write(pkt, access->data, access->size);
   26598:	e9d1 1200 	ldrd	r1, r2, [r1]
   2659c:	f7ff bfbf 	b.w	2651e <net_pkt_write>

000265a0 <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
   265a0:	4770      	bx	lr

000265a2 <k_work_submit_to_queue>:
{
   265a2:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   265a4:	f101 0308 	add.w	r3, r1, #8
   265a8:	e8d3 2fef 	ldaex	r2, [r3]
   265ac:	f042 0c01 	orr.w	ip, r2, #1
   265b0:	e8c3 cfee 	stlex	lr, ip, [r3]
   265b4:	f1be 0f00 	cmp.w	lr, #0
   265b8:	d1f6      	bne.n	265a8 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   265ba:	07d3      	lsls	r3, r2, #31
   265bc:	d403      	bmi.n	265c6 <k_work_submit_to_queue+0x24>
}
   265be:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   265c2:	f002 bc0f 	b.w	28de4 <k_queue_append>
}
   265c6:	f85d fb04 	ldr.w	pc, [sp], #4

000265ca <net_icmpv6_finalize>:
{
   265ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   265cc:	2304      	movs	r3, #4
   265ce:	2200      	movs	r2, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   265d0:	4669      	mov	r1, sp
{
   265d2:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   265d4:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   265d8:	f7ff ffbd 	bl	26556 <net_pkt_get_data>
	if (!icmp_hdr) {
   265dc:	4605      	mov	r5, r0
   265de:	b150      	cbz	r0, 265f6 <net_icmpv6_finalize+0x2c>
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   265e0:	213a      	movs	r1, #58	; 0x3a
   265e2:	4620      	mov	r0, r4
   265e4:	f7ff f937 	bl	25856 <net_calc_chksum>
	return net_pkt_set_data(pkt, &icmp_access);
   265e8:	4669      	mov	r1, sp
	icmp_hdr->chksum = net_calc_chksum_icmpv6(pkt);
   265ea:	8068      	strh	r0, [r5, #2]
	return net_pkt_set_data(pkt, &icmp_access);
   265ec:	4620      	mov	r0, r4
   265ee:	f7ff ffd3 	bl	26598 <net_pkt_set_data>
}
   265f2:	b003      	add	sp, #12
   265f4:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   265f6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   265fa:	e7fa      	b.n	265f2 <net_icmpv6_finalize+0x28>

000265fc <net_icmpv6_create>:
{
   265fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   265fe:	2304      	movs	r3, #4
   26600:	2500      	movs	r5, #0
{
   26602:	460f      	mov	r7, r1
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   26604:	4669      	mov	r1, sp
{
   26606:	4604      	mov	r4, r0
   26608:	4616      	mov	r6, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   2660a:	e9cd 5300 	strd	r5, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   2660e:	f7ff ffa2 	bl	26556 <net_pkt_get_data>
	if (!icmp_hdr) {
   26612:	b148      	cbz	r0, 26628 <net_icmpv6_create+0x2c>
	icmp_hdr->type   = icmp_type;
   26614:	7007      	strb	r7, [r0, #0]
	icmp_hdr->code   = icmp_code;
   26616:	7046      	strb	r6, [r0, #1]
	icmp_hdr->chksum = 0U;
   26618:	7085      	strb	r5, [r0, #2]
   2661a:	70c5      	strb	r5, [r0, #3]
	return net_pkt_set_data(pkt, &icmp_access);
   2661c:	4669      	mov	r1, sp
   2661e:	4620      	mov	r0, r4
   26620:	f7ff ffba 	bl	26598 <net_pkt_set_data>
}
   26624:	b003      	add	sp, #12
   26626:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   26628:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2662c:	e7fa      	b.n	26624 <net_icmpv6_create+0x28>

0002662e <icmpv6_handle_echo_request>:
{
   2662e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	payload_len = ntohs(ip_hdr->len) -
   26630:	888b      	ldrh	r3, [r1, #4]
{
   26632:	4606      	mov	r6, r0
	payload_len = ntohs(ip_hdr->len) -
   26634:	021d      	lsls	r5, r3, #8
   26636:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   2663a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
{
   2663c:	460f      	mov	r7, r1
	payload_len = ntohs(ip_hdr->len) -
   2663e:	1aed      	subs	r5, r5, r3
   26640:	3d04      	subs	r5, #4
   26642:	b22d      	sxth	r5, r5
	if (payload_len < NET_ICMPV6_UNUSED_LEN) {
   26644:	2d03      	cmp	r5, #3
   26646:	dc01      	bgt.n	2664c <icmpv6_handle_echo_request+0x1e>
	return NET_DROP;
   26648:	2002      	movs	r0, #2
   2664a:	e03c      	b.n	266c6 <icmpv6_handle_echo_request+0x98>
					  PKT_WAIT_TIME);
   2664c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   26650:	2300      	movs	r3, #0
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt), payload_len,
   26652:	e9cd 2300 	strd	r2, r3, [sp]
   26656:	4629      	mov	r1, r5
   26658:	233a      	movs	r3, #58	; 0x3a
   2665a:	2202      	movs	r2, #2
   2665c:	6a00      	ldr	r0, [r0, #32]
   2665e:	f7ec fba5 	bl	12dac <net_pkt_alloc_with_buffer>
	if (!reply) {
   26662:	4604      	mov	r4, r0
   26664:	2800      	cmp	r0, #0
   26666:	d0ef      	beq.n	26648 <icmpv6_handle_echo_request+0x1a>
	if (net_ipv6_is_addr_mcast(&ip_hdr->dst)) {
   26668:	7e3b      	ldrb	r3, [r7, #24]
   2666a:	f107 0118 	add.w	r1, r7, #24
   2666e:	2bff      	cmp	r3, #255	; 0xff
   26670:	d103      	bne.n	2667a <icmpv6_handle_echo_request+0x4c>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   26672:	6a30      	ldr	r0, [r6, #32]
   26674:	f7eb ff4a 	bl	1250c <net_if_ipv6_select_src_addr>
   26678:	4601      	mov	r1, r0
	net_pkt_lladdr_dst(reply)->addr = NULL;
   2667a:	2300      	movs	r3, #0
	if (net_ipv6_create(reply, src, &ip_hdr->src)) {
   2667c:	f107 0208 	add.w	r2, r7, #8
   26680:	4620      	mov	r0, r4
	net_pkt_lladdr_dst(reply)->addr = NULL;
   26682:	6323      	str	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_src(reply)->addr = NULL;
   26684:	62a3      	str	r3, [r4, #40]	; 0x28
	if (net_ipv6_create(reply, src, &ip_hdr->src)) {
   26686:	f000 f8fd 	bl	26884 <net_ipv6_create>
   2668a:	4602      	mov	r2, r0
   2668c:	b9e8      	cbnz	r0, 266ca <icmpv6_handle_echo_request+0x9c>
	if (net_icmpv6_create(reply, NET_ICMPV6_ECHO_REPLY, 0) ||
   2668e:	2181      	movs	r1, #129	; 0x81
   26690:	4620      	mov	r0, r4
   26692:	f7ff ffb3 	bl	265fc <net_icmpv6_create>
   26696:	b9c0      	cbnz	r0, 266ca <icmpv6_handle_echo_request+0x9c>
	    net_pkt_copy(reply, pkt, payload_len)) {
   26698:	462a      	mov	r2, r5
   2669a:	4631      	mov	r1, r6
   2669c:	4620      	mov	r0, r4
   2669e:	f7ff fe29 	bl	262f4 <net_pkt_copy>
	if (net_icmpv6_create(reply, NET_ICMPV6_ECHO_REPLY, 0) ||
   266a2:	4605      	mov	r5, r0
   266a4:	b988      	cbnz	r0, 266ca <icmpv6_handle_echo_request+0x9c>
	net_pkt_cursor_init(reply);
   266a6:	4620      	mov	r0, r4
   266a8:	f7ff fd6f 	bl	2618a <net_pkt_cursor_init>
	net_ipv6_finalize(reply, IPPROTO_ICMPV6);
   266ac:	213a      	movs	r1, #58	; 0x3a
   266ae:	4620      	mov	r0, r4
   266b0:	f000 f94b 	bl	2694a <net_ipv6_finalize>
	if (net_send_data(reply) < 0) {
   266b4:	4620      	mov	r0, r4
   266b6:	f7fe fb90 	bl	24dda <net_send_data>
   266ba:	2800      	cmp	r0, #0
   266bc:	db05      	blt.n	266ca <icmpv6_handle_echo_request+0x9c>
	net_pkt_unref(pkt);
   266be:	4630      	mov	r0, r6
   266c0:	f7ff fcf3 	bl	260aa <net_pkt_unref>
	return NET_OK;
   266c4:	4628      	mov	r0, r5
}
   266c6:	b003      	add	sp, #12
   266c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_pkt_unref(reply);
   266ca:	4620      	mov	r0, r4
   266cc:	f7ff fced 	bl	260aa <net_pkt_unref>
   266d0:	e7ba      	b.n	26648 <icmpv6_handle_echo_request+0x1a>

000266d2 <net_icmpv6_send_error>:
{
   266d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   266d6:	4605      	mov	r5, r0
   266d8:	4698      	mov	r8, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   266da:	2400      	movs	r4, #0
   266dc:	2328      	movs	r3, #40	; 0x28
{
   266de:	b087      	sub	sp, #28
   266e0:	460f      	mov	r7, r1
   266e2:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   266e4:	e9cd 4302 	strd	r4, r3, [sp, #8]
	net_pkt_cursor_init(orig);
   266e8:	f7ff fd4f 	bl	2618a <net_pkt_cursor_init>
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(orig, &ipv6_access);
   266ec:	4628      	mov	r0, r5
   266ee:	a902      	add	r1, sp, #8
   266f0:	f7ff ff31 	bl	26556 <net_pkt_get_data>
	if (!ip_hdr) {
   266f4:	4606      	mov	r6, r0
   266f6:	2800      	cmp	r0, #0
   266f8:	f000 808e 	beq.w	26818 <net_icmpv6_send_error+0x146>
	if (ip_hdr->nexthdr == IPPROTO_ICMPV6) {
   266fc:	7983      	ldrb	r3, [r0, #6]
   266fe:	2b3a      	cmp	r3, #58	; 0x3a
   26700:	d118      	bne.n	26734 <net_icmpv6_send_error+0x62>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv6_access,
   26702:	2304      	movs	r3, #4
	return net_pkt_skip(pkt, access->size);
   26704:	9903      	ldr	r1, [sp, #12]
   26706:	4628      	mov	r0, r5
   26708:	9404      	str	r4, [sp, #16]
   2670a:	9305      	str	r3, [sp, #20]
   2670c:	f7ff fdc7 	bl	2629e <net_pkt_skip>
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
   26710:	4628      	mov	r0, r5
   26712:	a904      	add	r1, sp, #16
   26714:	f7ff ff1f 	bl	26556 <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 128) {
   26718:	b118      	cbz	r0, 26722 <net_icmpv6_send_error+0x50>
   2671a:	f990 3001 	ldrsb.w	r3, [r0, #1]
   2671e:	42a3      	cmp	r3, r4
   26720:	db05      	blt.n	2672e <net_icmpv6_send_error+0x5c>
			err = -EINVAL;
   26722:	f06f 0615 	mvn.w	r6, #21
}
   26726:	4630      	mov	r0, r6
   26728:	b007      	add	sp, #28
   2672a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_pkt_cursor_init(orig);
   2672e:	4628      	mov	r0, r5
   26730:	f7ff fd2b 	bl	2618a <net_pkt_cursor_init>
	if (ip_hdr->nexthdr == IPPROTO_UDP) {
   26734:	79b3      	ldrb	r3, [r6, #6]
   26736:	2b11      	cmp	r3, #17
   26738:	d02c      	beq.n	26794 <net_icmpv6_send_error+0xc2>
	} else if (ip_hdr->nexthdr == IPPROTO_TCP) {
   2673a:	2b06      	cmp	r3, #6
   2673c:	d02c      	beq.n	26798 <net_icmpv6_send_error+0xc6>
	size_t bytes = 0;
   2673e:	2100      	movs	r1, #0
		copy_len = net_pkt_get_len(orig);
   26740:	692b      	ldr	r3, [r5, #16]
	while (buf) {
   26742:	bb1b      	cbnz	r3, 2678c <net_icmpv6_send_error+0xba>
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
   26744:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   26748:	2300      	movs	r3, #0
   2674a:	6a28      	ldr	r0, [r5, #32]
   2674c:	e9cd 2300 	strd	r2, r3, [sp]
   26750:	3104      	adds	r1, #4
   26752:	233a      	movs	r3, #58	; 0x3a
   26754:	2202      	movs	r2, #2
   26756:	f7ec fb29 	bl	12dac <net_pkt_alloc_with_buffer>
	if (!pkt) {
   2675a:	4604      	mov	r4, r0
   2675c:	2800      	cmp	r0, #0
   2675e:	d05e      	beq.n	2681e <net_icmpv6_send_error+0x14c>
	if (net_ipv6_is_addr_mcast(&ip_hdr->dst)) {
   26760:	7e33      	ldrb	r3, [r6, #24]
   26762:	f106 0118 	add.w	r1, r6, #24
   26766:	2bff      	cmp	r3, #255	; 0xff
   26768:	d103      	bne.n	26772 <net_icmpv6_send_error+0xa0>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   2676a:	6a00      	ldr	r0, [r0, #32]
   2676c:	f7eb fece 	bl	1250c <net_if_ipv6_select_src_addr>
   26770:	4601      	mov	r1, r0
	if (net_ipv6_create(pkt, src, &ip_hdr->src) ||
   26772:	4620      	mov	r0, r4
   26774:	f106 0208 	add.w	r2, r6, #8
   26778:	f000 f884 	bl	26884 <net_ipv6_create>
   2677c:	b170      	cbz	r0, 2679c <net_icmpv6_send_error+0xca>
	int err = -EIO;
   2677e:	f06f 0704 	mvn.w	r7, #4
	net_pkt_unref(pkt);
   26782:	4620      	mov	r0, r4
   26784:	f7ff fc91 	bl	260aa <net_pkt_unref>
   26788:	463e      	mov	r6, r7
   2678a:	e7cc      	b.n	26726 <net_icmpv6_send_error+0x54>
		bytes += buf->len;
   2678c:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2678e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   26790:	4411      	add	r1, r2
		buf = buf->frags;
   26792:	e7d6      	b.n	26742 <net_icmpv6_send_error+0x70>
		copy_len = sizeof(struct net_ipv6_hdr) +
   26794:	2130      	movs	r1, #48	; 0x30
   26796:	e7d5      	b.n	26744 <net_icmpv6_send_error+0x72>
		copy_len = sizeof(struct net_ipv6_hdr) +
   26798:	213c      	movs	r1, #60	; 0x3c
   2679a:	e7d3      	b.n	26744 <net_icmpv6_send_error+0x72>
	    net_icmpv6_create(pkt, type, code)) {
   2679c:	4639      	mov	r1, r7
   2679e:	464a      	mov	r2, r9
   267a0:	4620      	mov	r0, r4
   267a2:	f7ff ff2b 	bl	265fc <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, &ip_hdr->src) ||
   267a6:	4601      	mov	r1, r0
   267a8:	2800      	cmp	r0, #0
   267aa:	d1e8      	bne.n	2677e <net_icmpv6_send_error+0xac>
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   267ac:	2f04      	cmp	r7, #4
   267ae:	d12e      	bne.n	2680e <net_icmpv6_send_error+0x13c>
	u32_t data_be32 = htonl(data);
   267b0:	fa98 f388 	rev.w	r3, r8
	return net_pkt_write(pkt, &data_be32, sizeof(u32_t));
   267b4:	463a      	mov	r2, r7
   267b6:	4620      	mov	r0, r4
   267b8:	a904      	add	r1, sp, #16
	u32_t data_be32 = htonl(data);
   267ba:	9304      	str	r3, [sp, #16]
	return net_pkt_write(pkt, &data_be32, sizeof(u32_t));
   267bc:	f7ff feaf 	bl	2651e <net_pkt_write>
		err = net_pkt_memset(pkt, 0, NET_ICMPV6_UNUSED_LEN);
   267c0:	4607      	mov	r7, r0
	copy_len = net_pkt_available_buffer(pkt);
   267c2:	4620      	mov	r0, r4
   267c4:	f7ff fc95 	bl	260f2 <net_pkt_available_buffer>
   267c8:	4602      	mov	r2, r0
	if (err || net_pkt_copy(pkt, orig, copy_len)) {
   267ca:	2f00      	cmp	r7, #0
   267cc:	d1d9      	bne.n	26782 <net_icmpv6_send_error+0xb0>
   267ce:	4629      	mov	r1, r5
   267d0:	4620      	mov	r0, r4
   267d2:	f7ff fd8f 	bl	262f4 <net_pkt_copy>
   267d6:	4606      	mov	r6, r0
   267d8:	2800      	cmp	r0, #0
   267da:	d1d2      	bne.n	26782 <net_icmpv6_send_error+0xb0>
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_dst(orig)->addr;
   267dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	net_pkt_cursor_init(pkt);
   267de:	4620      	mov	r0, r4
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_dst(orig)->addr;
   267e0:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_dst(orig)->len;
   267e2:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   267e6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   267ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
   267ec:	6323      	str	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
   267ee:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   267f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	net_pkt_cursor_init(pkt);
   267f6:	f7ff fcc8 	bl	2618a <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   267fa:	213a      	movs	r1, #58	; 0x3a
   267fc:	4620      	mov	r0, r4
   267fe:	f000 f8a4 	bl	2694a <net_ipv6_finalize>
	if (net_send_data(pkt) >= 0) {
   26802:	4620      	mov	r0, r4
   26804:	f7fe fae9 	bl	24dda <net_send_data>
   26808:	2800      	cmp	r0, #0
   2680a:	dbba      	blt.n	26782 <net_icmpv6_send_error+0xb0>
   2680c:	e78b      	b.n	26726 <net_icmpv6_send_error+0x54>
		err = net_pkt_memset(pkt, 0, NET_ICMPV6_UNUSED_LEN);
   2680e:	2204      	movs	r2, #4
   26810:	4620      	mov	r0, r4
   26812:	f7ff fd4f 	bl	262b4 <net_pkt_memset>
   26816:	e7d3      	b.n	267c0 <net_icmpv6_send_error+0xee>
	int err = -EIO;
   26818:	f06f 0604 	mvn.w	r6, #4
   2681c:	e783      	b.n	26726 <net_icmpv6_send_error+0x54>
		err = -ENOMEM;
   2681e:	f06f 060b 	mvn.w	r6, #11
   26822:	e780      	b.n	26726 <net_icmpv6_send_error+0x54>

00026824 <net_nbr_unref>:
	if (--nbr->ref) {
   26824:	7803      	ldrb	r3, [r0, #0]
   26826:	3b01      	subs	r3, #1
   26828:	b2db      	uxtb	r3, r3
   2682a:	7003      	strb	r3, [r0, #0]
   2682c:	b913      	cbnz	r3, 26834 <net_nbr_unref+0x10>
	if (nbr->remove) {
   2682e:	6903      	ldr	r3, [r0, #16]
   26830:	b103      	cbz	r3, 26834 <net_nbr_unref+0x10>
		nbr->remove(nbr);
   26832:	4718      	bx	r3
}
   26834:	4770      	bx	lr

00026836 <net_nbr_get>:
{
   26836:	4601      	mov	r1, r0
	for (i = 0; i < table->nbr_count; i++) {
   26838:	2200      	movs	r2, #0
{
   2683a:	b530      	push	{r4, r5, lr}
	for (i = 0; i < table->nbr_count; i++) {
   2683c:	8905      	ldrh	r5, [r0, #8]
   2683e:	4295      	cmp	r5, r2
   26840:	dc01      	bgt.n	26846 <net_nbr_get+0x10>
	return NULL;
   26842:	2000      	movs	r0, #0
   26844:	e00d      	b.n	26862 <net_nbr_get+0x2c>
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   26846:	680c      	ldr	r4, [r1, #0]
			  start->size + start->extra_data_size) * idx));
   26848:	88a0      	ldrh	r0, [r4, #4]
   2684a:	8863      	ldrh	r3, [r4, #2]
   2684c:	4403      	add	r3, r0
   2684e:	3314      	adds	r3, #20
   26850:	4353      	muls	r3, r2
	return (struct net_nbr *)((u8_t *)start +
   26852:	18e0      	adds	r0, r4, r3
		if (!nbr->ref) {
   26854:	5ce3      	ldrb	r3, [r4, r3]
   26856:	b92b      	cbnz	r3, 26864 <net_nbr_get+0x2e>
			nbr->data = nbr->__nbr;
   26858:	f100 0314 	add.w	r3, r0, #20
   2685c:	60c3      	str	r3, [r0, #12]
	nbr->ref++;
   2685e:	2301      	movs	r3, #1
   26860:	7003      	strb	r3, [r0, #0]
}
   26862:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < table->nbr_count; i++) {
   26864:	3201      	adds	r2, #1
   26866:	e7ea      	b.n	2683e <net_nbr_get+0x8>

00026868 <net_ipv6_is_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   26868:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2686a:	b94a      	cbnz	r2, 26880 <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2686c:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2686e:	b93b      	cbnz	r3, 26880 <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   26870:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   26872:	b92a      	cbnz	r2, 26880 <net_ipv6_is_addr_loopback+0x18>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   26874:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   26876:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
   2687a:	4258      	negs	r0, r3
   2687c:	4158      	adcs	r0, r3
   2687e:	4770      	bx	lr
   26880:	2000      	movs	r0, #0
   26882:	4770      	bx	lr

00026884 <net_ipv6_create>:
#define MAX_REACHABLE_TIME 3600000

int net_ipv6_create(struct net_pkt *pkt,
		    const struct in6_addr *src,
		    const struct in6_addr *dst)
{
   26884:	b5f0      	push	{r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   26886:	2328      	movs	r3, #40	; 0x28
   26888:	2700      	movs	r7, #0
{
   2688a:	b08b      	sub	sp, #44	; 0x2c
   2688c:	460c      	mov	r4, r1
	struct net_ipv6_hdr *ipv6_hdr;

	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   2688e:	4669      	mov	r1, sp
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   26890:	e9cd 7300 	strd	r7, r3, [sp]
{
   26894:	4606      	mov	r6, r0
   26896:	4615      	mov	r5, r2
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   26898:	f7ff fe5d 	bl	26556 <net_pkt_get_data>
	if (!ipv6_hdr) {
   2689c:	4603      	mov	r3, r0
   2689e:	2800      	cmp	r0, #0
   268a0:	d050      	beq.n	26944 <net_ipv6_create+0xc0>
		return -ENOBUFS;
	}

	ipv6_hdr->vtc     = 0x60;
   268a2:	2260      	movs	r2, #96	; 0x60
	ipv6_hdr->tcflow  = 0U;
   268a4:	7047      	strb	r7, [r0, #1]
	ipv6_hdr->vtc     = 0x60;
   268a6:	7002      	strb	r2, [r0, #0]
	ipv6_hdr->flow    = 0U;
	ipv6_hdr->len     = 0U;
	ipv6_hdr->nexthdr = 0U;
   268a8:	7187      	strb	r7, [r0, #6]

	/* User can tweak the default hop limit if needed */
	ipv6_hdr->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   268aa:	f896 203d 	ldrb.w	r2, [r6, #61]	; 0x3d
	ipv6_hdr->flow    = 0U;
   268ae:	7087      	strb	r7, [r0, #2]
   268b0:	70c7      	strb	r7, [r0, #3]
	ipv6_hdr->len     = 0U;
   268b2:	7107      	strb	r7, [r0, #4]
   268b4:	7147      	strb	r7, [r0, #5]
	ipv6_hdr->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   268b6:	71c2      	strb	r2, [r0, #7]
	if (ipv6_hdr->hop_limit == 0U) {
   268b8:	b92a      	cbnz	r2, 268c6 <net_ipv6_create+0x42>
		ipv6_hdr->hop_limit =
			net_if_ipv6_get_hop_limit(net_pkt_iface(pkt));
   268ba:	6a31      	ldr	r1, [r6, #32]
   268bc:	6849      	ldr	r1, [r1, #4]
	if (!iface->config.ip.ipv6) {
   268be:	b109      	cbz	r1, 268c4 <net_ipv6_create+0x40>
	return iface->config.ip.ipv6->hop_limit;
   268c0:	f891 210d 	ldrb.w	r2, [r1, #269]	; 0x10d
		ipv6_hdr->hop_limit =
   268c4:	71da      	strb	r2, [r3, #7]
	}

	net_ipaddr_copy(&ipv6_hdr->dst, dst);
   268c6:	462a      	mov	r2, r5
   268c8:	ad02      	add	r5, sp, #8
   268ca:	462f      	mov	r7, r5
   268cc:	f102 0e10 	add.w	lr, r2, #16
   268d0:	46ac      	mov	ip, r5
   268d2:	6810      	ldr	r0, [r2, #0]
   268d4:	6851      	ldr	r1, [r2, #4]
   268d6:	3208      	adds	r2, #8
   268d8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   268dc:	4572      	cmp	r2, lr
   268de:	4665      	mov	r5, ip
   268e0:	d1f6      	bne.n	268d0 <net_ipv6_create+0x4c>
   268e2:	f103 0c18 	add.w	ip, r3, #24
   268e6:	ad06      	add	r5, sp, #24
   268e8:	463a      	mov	r2, r7
   268ea:	ca03      	ldmia	r2!, {r0, r1}
   268ec:	42aa      	cmp	r2, r5
   268ee:	f8cc 0000 	str.w	r0, [ip]
   268f2:	f8cc 1004 	str.w	r1, [ip, #4]
   268f6:	4617      	mov	r7, r2
   268f8:	f10c 0c08 	add.w	ip, ip, #8
   268fc:	d1f4      	bne.n	268e8 <net_ipv6_create+0x64>
	net_ipaddr_copy(&ipv6_hdr->src, src);
   268fe:	4622      	mov	r2, r4
   26900:	462f      	mov	r7, r5
   26902:	f104 0c10 	add.w	ip, r4, #16
   26906:	463c      	mov	r4, r7
   26908:	6810      	ldr	r0, [r2, #0]
   2690a:	6851      	ldr	r1, [r2, #4]
   2690c:	3208      	adds	r2, #8
   2690e:	c403      	stmia	r4!, {r0, r1}
   26910:	4562      	cmp	r2, ip
   26912:	4627      	mov	r7, r4
   26914:	d1f7      	bne.n	26906 <net_ipv6_create+0x82>
   26916:	462a      	mov	r2, r5
   26918:	3308      	adds	r3, #8
   2691a:	ad0a      	add	r5, sp, #40	; 0x28
   2691c:	4614      	mov	r4, r2
   2691e:	cc03      	ldmia	r4!, {r0, r1}
   26920:	42ac      	cmp	r4, r5
   26922:	6018      	str	r0, [r3, #0]
   26924:	6059      	str	r1, [r3, #4]
   26926:	4622      	mov	r2, r4
   26928:	f103 0308 	add.w	r3, r3, #8
   2692c:	d1f6      	bne.n	2691c <net_ipv6_create+0x98>
	pkt->ip_hdr_len = len;
   2692e:	2328      	movs	r3, #40	; 0x28
   26930:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	pkt->ipv6_ext_len = len;
   26934:	2300      	movs	r3, #0

	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));
	net_pkt_set_ipv6_ext_len(pkt, 0);

	return net_pkt_set_data(pkt, &ipv6_access);
   26936:	4669      	mov	r1, sp
   26938:	4630      	mov	r0, r6
   2693a:	87f3      	strh	r3, [r6, #62]	; 0x3e
   2693c:	f7ff fe2c 	bl	26598 <net_pkt_set_data>
}
   26940:	b00b      	add	sp, #44	; 0x2c
   26942:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   26944:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26948:	e7fa      	b.n	26940 <net_ipv6_create+0xbc>

0002694a <net_ipv6_finalize>:

int net_ipv6_finalize(struct net_pkt *pkt, u8_t next_header_proto)
{
   2694a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   2694c:	2328      	movs	r3, #40	; 0x28
   2694e:	2500      	movs	r5, #0
   26950:	e9cd 5300 	strd	r5, r3, [sp]
	pkt->overwrite = overwrite;
   26954:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
   26958:	460e      	mov	r6, r1
   2695a:	f043 0301 	orr.w	r3, r3, #1
	struct net_ipv6_hdr *ipv6_hdr;

	net_pkt_set_overwrite(pkt, true);

	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   2695e:	4669      	mov	r1, sp
   26960:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
{
   26964:	4604      	mov	r4, r0
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   26966:	f7ff fdf6 	bl	26556 <net_pkt_get_data>
	if (!ipv6_hdr) {
   2696a:	b918      	cbnz	r0, 26974 <net_ipv6_finalize+0x2a>
		return -ENOBUFS;
   2696c:	f06f 0068 	mvn.w	r0, #104	; 0x68
	} else if (next_header_proto == IPPROTO_ICMPV6) {
		return net_icmpv6_finalize(pkt);
	}

	return 0;
}
   26970:	b002      	add	sp, #8
   26972:	bd70      	pop	{r4, r5, r6, pc}
	size_t bytes = 0;
   26974:	462b      	mov	r3, r5
	ipv6_hdr->len = htons(net_pkt_get_len(pkt) -
   26976:	6922      	ldr	r2, [r4, #16]
	while (buf) {
   26978:	b9ca      	cbnz	r2, 269ae <net_ipv6_finalize+0x64>
   2697a:	3b28      	subs	r3, #40	; 0x28
   2697c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   26980:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   26984:	8083      	strh	r3, [r0, #4]
	if (net_pkt_ipv6_next_hdr(pkt) != 255U) {
   26986:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	net_pkt_set_data(pkt, &ipv6_access);
   2698a:	4669      	mov	r1, sp
   2698c:	2bff      	cmp	r3, #255	; 0xff
   2698e:	bf08      	it	eq
   26990:	4633      	moveq	r3, r6
   26992:	7183      	strb	r3, [r0, #6]
   26994:	4620      	mov	r0, r4
   26996:	f7ff fdff 	bl	26598 <net_pkt_set_data>
	if (net_pkt_ipv6_next_hdr(pkt) != 255U &&
   2699a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   2699e:	2bff      	cmp	r3, #255	; 0xff
   269a0:	d109      	bne.n	269b6 <net_ipv6_finalize+0x6c>
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   269a2:	2e11      	cmp	r6, #17
   269a4:	d10e      	bne.n	269c4 <net_ipv6_finalize+0x7a>
		return net_udp_finalize(pkt);
   269a6:	4620      	mov	r0, r4
   269a8:	f001 f92f 	bl	27c0a <net_udp_finalize>
   269ac:	e7e0      	b.n	26970 <net_ipv6_finalize+0x26>
		bytes += buf->len;
   269ae:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   269b0:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   269b2:	440b      	add	r3, r1
		buf = buf->frags;
   269b4:	e7e0      	b.n	26978 <net_ipv6_finalize+0x2e>
	    net_pkt_skip(pkt, net_pkt_ipv6_ext_len(pkt))) {
   269b6:	4620      	mov	r0, r4
   269b8:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   269ba:	f7ff fc70 	bl	2629e <net_pkt_skip>
	if (net_pkt_ipv6_next_hdr(pkt) != 255U &&
   269be:	2800      	cmp	r0, #0
   269c0:	d0ef      	beq.n	269a2 <net_ipv6_finalize+0x58>
   269c2:	e7d3      	b.n	2696c <net_ipv6_finalize+0x22>
	} else if (next_header_proto == IPPROTO_ICMPV6) {
   269c4:	2e3a      	cmp	r6, #58	; 0x3a
   269c6:	d103      	bne.n	269d0 <net_ipv6_finalize+0x86>
		return net_icmpv6_finalize(pkt);
   269c8:	4620      	mov	r0, r4
   269ca:	f7ff fdfe 	bl	265ca <net_icmpv6_finalize>
   269ce:	e7cf      	b.n	26970 <net_ipv6_finalize+0x26>
	return 0;
   269d0:	2000      	movs	r0, #0
   269d2:	e7cd      	b.n	26970 <net_ipv6_finalize+0x26>

000269d4 <net_ipv6_input>:
}

#endif /* CONFIG_NET_ROUTE */

enum net_verdict net_ipv6_input(struct net_pkt *pkt, bool is_loopback)
{
   269d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   269d8:	2328      	movs	r3, #40	; 0x28
   269da:	2600      	movs	r6, #0
{
   269dc:	b08b      	sub	sp, #44	; 0x2c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   269de:	e9cd 6304 	strd	r6, r3, [sp, #16]
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   269e2:	ab06      	add	r3, sp, #24
   269e4:	9308      	str	r3, [sp, #32]
   269e6:	2308      	movs	r3, #8
{
   269e8:	4604      	mov	r4, r0
   269ea:	4688      	mov	r8, r1
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   269ec:	9309      	str	r3, [sp, #36]	; 0x24
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
	enum net_verdict verdict = NET_DROP;
	int real_len = net_pkt_get_len(pkt);
   269ee:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   269f0:	b93b      	cbnz	r3, 26a02 <net_ipv6_input+0x2e>
	union net_ip_header ip;
	int pkt_len;

	net_stats_update_ipv6_recv(net_pkt_iface(pkt));

	hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   269f2:	4620      	mov	r0, r4
   269f4:	a904      	add	r1, sp, #16
   269f6:	f7ff fdae 	bl	26556 <net_pkt_get_data>
	if (!hdr) {
   269fa:	4605      	mov	r5, r0
   269fc:	b928      	cbnz	r0, 26a0a <net_ipv6_input+0x36>
			      net_pkt_get_current_offset(pkt) - 1);

	NET_DBG("DROP: Unknown/wrong nexthdr type");
	net_stats_update_ip_errors_protoerr(net_pkt_iface(pkt));

	return NET_DROP;
   269fe:	2002      	movs	r0, #2
   26a00:	e097      	b.n	26b32 <net_ipv6_input+0x15e>
		bytes += buf->len;
   26a02:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   26a04:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   26a06:	4416      	add	r6, r2
		buf = buf->frags;
   26a08:	e7f2      	b.n	269f0 <net_ipv6_input+0x1c>
	pkt_len = ntohs(hdr->len) + sizeof(struct net_ipv6_hdr);
   26a0a:	8883      	ldrh	r3, [r0, #4]
   26a0c:	021f      	lsls	r7, r3, #8
   26a0e:	ea47 2713 	orr.w	r7, r7, r3, lsr #8
   26a12:	b2bf      	uxth	r7, r7
   26a14:	3728      	adds	r7, #40	; 0x28
	if (real_len < pkt_len) {
   26a16:	42b7      	cmp	r7, r6
   26a18:	dcf1      	bgt.n	269fe <net_ipv6_input+0x2a>
	} else if (real_len > pkt_len) {
   26a1a:	da03      	bge.n	26a24 <net_ipv6_input+0x50>
		net_pkt_update_length(pkt, pkt_len);
   26a1c:	4639      	mov	r1, r7
   26a1e:	4620      	mov	r0, r4
   26a20:	f7ff fcc5 	bl	263ae <net_pkt_update_length>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   26a24:	68ab      	ldr	r3, [r5, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   26a26:	b933      	cbnz	r3, 26a36 <net_ipv6_input+0x62>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   26a28:	68eb      	ldr	r3, [r5, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   26a2a:	b923      	cbnz	r3, 26a36 <net_ipv6_input+0x62>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   26a2c:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   26a2e:	b913      	cbnz	r3, 26a36 <net_ipv6_input+0x62>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   26a30:	696b      	ldr	r3, [r5, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   26a32:	2b00      	cmp	r3, #0
   26a34:	d0e3      	beq.n	269fe <net_ipv6_input+0x2a>
	if (net_ipv6_is_addr_mcast(&hdr->src) ||
   26a36:	7a2b      	ldrb	r3, [r5, #8]
   26a38:	2bff      	cmp	r3, #255	; 0xff
   26a3a:	d0e0      	beq.n	269fe <net_ipv6_input+0x2a>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
   26a3c:	7e29      	ldrb	r1, [r5, #24]
	    net_ipv6_is_addr_mcast_scope(&hdr->dst, 0)) {
   26a3e:	f105 0618 	add.w	r6, r5, #24
   26a42:	29ff      	cmp	r1, #255	; 0xff
   26a44:	d102      	bne.n	26a4c <net_ipv6_input+0x78>
   26a46:	7e6b      	ldrb	r3, [r5, #25]
   26a48:	2b00      	cmp	r3, #0
   26a4a:	d0d8      	beq.n	269fe <net_ipv6_input+0x2a>
	if (!is_loopback) {
   26a4c:	f1b8 0f00 	cmp.w	r8, #0
   26a50:	d130      	bne.n	26ab4 <net_ipv6_input+0xe0>
		if (net_ipv6_is_addr_loopback(&hdr->dst) ||
   26a52:	4630      	mov	r0, r6
   26a54:	f7ff ff08 	bl	26868 <net_ipv6_is_addr_loopback>
   26a58:	2800      	cmp	r0, #0
   26a5a:	d1d0      	bne.n	269fe <net_ipv6_input+0x2a>
		    net_ipv6_is_addr_loopback(&hdr->src)) {
   26a5c:	f105 0008 	add.w	r0, r5, #8
   26a60:	f7ff ff02 	bl	26868 <net_ipv6_is_addr_loopback>
		if (net_ipv6_is_addr_loopback(&hdr->dst) ||
   26a64:	2800      	cmp	r0, #0
   26a66:	d1ca      	bne.n	269fe <net_ipv6_input+0x2a>
   26a68:	29ff      	cmp	r1, #255	; 0xff
   26a6a:	d102      	bne.n	26a72 <net_ipv6_input+0x9e>
   26a6c:	7e6b      	ldrb	r3, [r5, #25]
   26a6e:	2b01      	cmp	r3, #1
   26a70:	d0c5      	beq.n	269fe <net_ipv6_input+0x2a>
		    (net_ipv6_is_addr_mcast_group(
   26a72:	f7eb fec7 	bl	12804 <net_ipv6_unspecified_address>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
   26a76:	8b6a      	ldrh	r2, [r5, #26]
   26a78:	8843      	ldrh	r3, [r0, #2]
   26a7a:	429a      	cmp	r2, r3
   26a7c:	d11a      	bne.n	26ab4 <net_ipv6_input+0xe0>
	return UNALIGNED_GET(&addr->s6_addr16[1]) == group->s6_addr16[1] &&
   26a7e:	8baa      	ldrh	r2, [r5, #28]
   26a80:	8883      	ldrh	r3, [r0, #4]
   26a82:	429a      	cmp	r2, r3
   26a84:	d116      	bne.n	26ab4 <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr16[2]) == group->s6_addr16[2] &&
   26a86:	8bea      	ldrh	r2, [r5, #30]
   26a88:	88c3      	ldrh	r3, [r0, #6]
   26a8a:	429a      	cmp	r2, r3
   26a8c:	d112      	bne.n	26ab4 <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
   26a8e:	6842      	ldr	r2, [r0, #4]
   26a90:	69eb      	ldr	r3, [r5, #28]
		UNALIGNED_GET(&addr->s6_addr16[3]) == group->s6_addr16[3] &&
   26a92:	4293      	cmp	r3, r2
   26a94:	d10e      	bne.n	26ab4 <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
   26a96:	6a2a      	ldr	r2, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
   26a98:	4293      	cmp	r3, r2
   26a9a:	d10b      	bne.n	26ab4 <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr32[3]) == group->s6_addr32[3];
   26a9c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
   26a9e:	68c3      	ldr	r3, [r0, #12]
   26aa0:	429a      	cmp	r2, r3
   26aa2:	d107      	bne.n	26ab4 <net_ipv6_input+0xe0>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
   26aa4:	7e2b      	ldrb	r3, [r5, #24]
   26aa6:	2bff      	cmp	r3, #255	; 0xff
   26aa8:	d104      	bne.n	26ab4 <net_ipv6_input+0xe0>
   26aaa:	7e6b      	ldrb	r3, [r5, #25]
   26aac:	2b05      	cmp	r3, #5
   26aae:	d0a6      	beq.n	269fe <net_ipv6_input+0x2a>
   26ab0:	2b08      	cmp	r3, #8
   26ab2:	d0a4      	beq.n	269fe <net_ipv6_input+0x2a>
	net_pkt_set_ipv6_next_hdr(pkt, hdr->nexthdr);
   26ab4:	79ab      	ldrb	r3, [r5, #6]
	pkt->ipv6_ext_len = len;
   26ab6:	2100      	movs	r1, #0
	pkt->ipv6_next_hdr = next_hdr;
   26ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	pkt->ip_hdr_len = len;
   26abc:	2328      	movs	r3, #40	; 0x28
	pkt->family = family;
   26abe:	2202      	movs	r2, #2
	pkt->ip_hdr_len = len;
   26ac0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return pkt->frags->data;
   26ac4:	6923      	ldr	r3, [r4, #16]
	pkt->ipv6_ext_len = len;
   26ac6:	87e1      	strh	r1, [r4, #62]	; 0x3e
	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_HDR(pkt)->hop_limit);
   26ac8:	689b      	ldr	r3, [r3, #8]
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   26aca:	4630      	mov	r0, r6
   26acc:	79db      	ldrb	r3, [r3, #7]
	pkt->ipv6_hop_limit = hop_limit;
   26ace:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	pkt->family = family;
   26ad2:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   26ad6:	f362 0343 	bfi	r3, r2, #1, #3
   26ada:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   26ade:	f7eb fa67 	bl	11fb0 <net_if_ipv6_addr_lookup>
	if (!net_ipv6_is_my_addr(&hdr->dst) &&
   26ae2:	4601      	mov	r1, r0
   26ae4:	2800      	cmp	r0, #0
   26ae6:	d138      	bne.n	26b5a <net_ipv6_input+0x186>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   26ae8:	4630      	mov	r0, r6
   26aea:	f7eb fbeb 	bl	122c4 <net_if_ipv6_maddr_lookup>
   26aee:	2800      	cmp	r0, #0
   26af0:	d133      	bne.n	26b5a <net_ipv6_input+0x186>
	    !net_ipv6_is_my_maddr(&hdr->dst) &&
   26af2:	7e2b      	ldrb	r3, [r5, #24]
   26af4:	2bff      	cmp	r3, #255	; 0xff
   26af6:	d030      	beq.n	26b5a <net_ipv6_input+0x186>
		found = net_route_get_info(net_pkt_iface(pkt),
   26af8:	4631      	mov	r1, r6
   26afa:	6a20      	ldr	r0, [r4, #32]
   26afc:	ab02      	add	r3, sp, #8
   26afe:	aa01      	add	r2, sp, #4
   26b00:	f000 ffd4 	bl	27aac <net_route_get_info>
	if (found) {
   26b04:	4605      	mov	r5, r0
   26b06:	b1b8      	cbz	r0, 26b38 <net_ipv6_input+0x164>
		if (route) {
   26b08:	9b01      	ldr	r3, [sp, #4]
   26b0a:	b153      	cbz	r3, 26b22 <net_ipv6_input+0x14e>
			net_pkt_set_iface(pkt, route->iface);
   26b0c:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   26b0e:	6223      	str	r3, [r4, #32]
	if (iface) {
   26b10:	b13b      	cbz	r3, 26b22 <net_ipv6_input+0x14e>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   26b12:	681a      	ldr	r2, [r3, #0]
   26b14:	7d52      	ldrb	r2, [r2, #21]
   26b16:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   26b1a:	681b      	ldr	r3, [r3, #0]
   26b1c:	7d5b      	ldrb	r3, [r3, #21]
   26b1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		ret = net_route_packet(pkt, nexthop);
   26b22:	4620      	mov	r0, r4
   26b24:	9902      	ldr	r1, [sp, #8]
   26b26:	f000 ffe3 	bl	27af0 <net_route_packet>
	return NET_DROP;
   26b2a:	2800      	cmp	r0, #0
   26b2c:	bfac      	ite	ge
   26b2e:	2000      	movge	r0, #0
   26b30:	2002      	movlt	r0, #2
}
   26b32:	b00b      	add	sp, #44	; 0x2c
   26b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		struct net_if *iface = NULL;
   26b38:	9003      	str	r0, [sp, #12]
		if (net_if_ipv6_addr_onlink(&iface, &hdr->dst)) {
   26b3a:	4631      	mov	r1, r6
   26b3c:	a803      	add	r0, sp, #12
   26b3e:	f7eb fc17 	bl	12370 <net_if_ipv6_addr_onlink>
   26b42:	2800      	cmp	r0, #0
   26b44:	f43f af5b 	beq.w	269fe <net_ipv6_input+0x2a>
			ret = net_route_packet_if(pkt, iface);
   26b48:	4620      	mov	r0, r4
   26b4a:	9903      	ldr	r1, [sp, #12]
   26b4c:	f001 f817 	bl	27b7e <net_route_packet_if>
			if (ret < 0) {
   26b50:	2800      	cmp	r0, #0
   26b52:	f6ff af54 	blt.w	269fe <net_ipv6_input+0x2a>
			return NET_OK;
   26b56:	4628      	mov	r0, r5
   26b58:	e7eb      	b.n	26b32 <net_ipv6_input+0x15e>
	u16_t ext_len = 0U;
   26b5a:	f04f 0900 	mov.w	r9, #0
	u8_t ext_bitmap = 0U;
   26b5e:	46c8      	mov	r8, r9
	return net_pkt_skip(pkt, access->size);
   26b60:	4620      	mov	r0, r4
   26b62:	9905      	ldr	r1, [sp, #20]
   26b64:	f7ff fb9b 	bl	2629e <net_pkt_skip>
	nexthdr = hdr->nexthdr;
   26b68:	79ae      	ldrb	r6, [r5, #6]
		     u8_t flags);


static inline bool net_ipv6_is_nexthdr_upper_layer(u8_t nexthdr)
{
	return (nexthdr == IPPROTO_ICMPV6 || nexthdr == IPPROTO_UDP ||
   26b6a:	2e3a      	cmp	r6, #58	; 0x3a
   26b6c:	d003      	beq.n	26b76 <net_ipv6_input+0x1a2>
   26b6e:	2e11      	cmp	r6, #17
   26b70:	d001      	beq.n	26b76 <net_ipv6_input+0x1a2>
	while (!net_ipv6_is_nexthdr_upper_layer(nexthdr)) {
   26b72:	2e06      	cmp	r6, #6
   26b74:	d10c      	bne.n	26b90 <net_ipv6_input+0x1bc>
	switch (nexthdr) {
   26b76:	2e11      	cmp	r6, #17
	pkt->ipv6_ext_len = len;
   26b78:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
   26b7c:	f000 8093 	beq.w	26ca6 <net_ipv6_input+0x2d2>
   26b80:	2e3a      	cmp	r6, #58	; 0x3a
   26b82:	f47f af3c 	bne.w	269fe <net_ipv6_input+0x2a>
		verdict = net_icmpv6_input(pkt, hdr);
   26b86:	4629      	mov	r1, r5
   26b88:	4620      	mov	r0, r4
   26b8a:	f7ec f97b 	bl	12e84 <net_icmpv6_input>
	if (verdict == NET_DROP) {
   26b8e:	e7d0      	b.n	26b32 <net_ipv6_input+0x15e>
	return net_pkt_read(pkt, data, 1);
   26b90:	2201      	movs	r2, #1
   26b92:	4620      	mov	r0, r4
   26b94:	f10d 0103 	add.w	r1, sp, #3
   26b98:	f7ff fb97 	bl	262ca <net_pkt_read>
		if (net_pkt_read_u8(pkt, &next_nexthdr)) {
   26b9c:	2800      	cmp	r0, #0
   26b9e:	f47f af2e 	bne.w	269fe <net_ipv6_input+0x2a>
		switch (nexthdr) {
   26ba2:	2e3b      	cmp	r6, #59	; 0x3b
   26ba4:	f43f af2b 	beq.w	269fe <net_ipv6_input+0x2a>
   26ba8:	2e3c      	cmp	r6, #60	; 0x3c
   26baa:	d02d      	beq.n	26c08 <net_ipv6_input+0x234>
   26bac:	2e00      	cmp	r6, #0
   26bae:	f040 808a 	bne.w	26cc6 <net_ipv6_input+0x2f2>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   26bb2:	f018 0f01 	tst.w	r8, #1
   26bb6:	f47f af22 	bne.w	269fe <net_ipv6_input+0x2a>
			if (nexthdr != hdr->nexthdr) {
   26bba:	79ab      	ldrb	r3, [r5, #6]
   26bbc:	2b00      	cmp	r3, #0
   26bbe:	f040 8082 	bne.w	26cc6 <net_ipv6_input+0x2f2>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   26bc2:	f048 0801 	orr.w	r8, r8, #1
	u16_t exthdr_len = 0U;
   26bc6:	2300      	movs	r3, #0
   26bc8:	2201      	movs	r2, #1
   26bca:	4620      	mov	r0, r4
   26bcc:	a903      	add	r1, sp, #12
		exthdr_len = ipv6_handle_ext_hdr_options(pkt, hdr, pkt_len);
   26bce:	b2be      	uxth	r6, r7
	u16_t exthdr_len = 0U;
   26bd0:	f8ad 300c 	strh.w	r3, [sp, #12]
   26bd4:	f7ff fb79 	bl	262ca <net_pkt_read>
	if (net_pkt_read_u8(pkt, (u8_t *)&exthdr_len)) {
   26bd8:	2800      	cmp	r0, #0
   26bda:	f47f af10 	bne.w	269fe <net_ipv6_input+0x2a>
	exthdr_len = exthdr_len * 8U + 8;
   26bde:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   26be2:	3301      	adds	r3, #1
   26be4:	00db      	lsls	r3, r3, #3
   26be6:	b29b      	uxth	r3, r3
	if (exthdr_len > pkt_len) {
   26be8:	429e      	cmp	r6, r3
	exthdr_len = exthdr_len * 8U + 8;
   26bea:	f8ad 300c 	strh.w	r3, [sp, #12]
	if (exthdr_len > pkt_len) {
   26bee:	f4ff af06 	bcc.w	269fe <net_ipv6_input+0x2a>
	length += 2U;
   26bf2:	2602      	movs	r6, #2
	while (length < exthdr_len) {
   26bf4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   26bf8:	429e      	cmp	r6, r3
   26bfa:	d310      	bcc.n	26c1e <net_ipv6_input+0x24a>
		ext_len += exthdr_len;
   26bfc:	4499      	add	r9, r3
		nexthdr = next_nexthdr;
   26bfe:	f89d 6003 	ldrb.w	r6, [sp, #3]
		ext_len += exthdr_len;
   26c02:	fa1f f989 	uxth.w	r9, r9
		nexthdr = next_nexthdr;
   26c06:	e7b0      	b.n	26b6a <net_ipv6_input+0x196>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_DESTO2) {
   26c08:	f018 0f40 	tst.w	r8, #64	; 0x40
   26c0c:	d15b      	bne.n	26cc6 <net_ipv6_input+0x2f2>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_DESTO1) {
   26c0e:	f018 0f02 	tst.w	r8, #2
				ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_DESTO2;
   26c12:	bf14      	ite	ne
   26c14:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
				ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_DESTO1;
   26c18:	f048 0802 	orreq.w	r8, r8, #2
   26c1c:	e7d3      	b.n	26bc6 <net_ipv6_input+0x1f2>
   26c1e:	2201      	movs	r2, #1
   26c20:	4620      	mov	r0, r4
   26c22:	a901      	add	r1, sp, #4
   26c24:	f7ff fb51 	bl	262ca <net_pkt_read>
		if (net_pkt_read_u8(pkt, &opt_type)) {
   26c28:	2800      	cmp	r0, #0
   26c2a:	f47f aee8 	bne.w	269fe <net_ipv6_input+0x2a>
		if (opt_type != NET_IPV6_EXT_HDR_OPT_PAD1) {
   26c2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   26c32:	b9fb      	cbnz	r3, 26c74 <net_ipv6_input+0x2a0>
		switch (opt_type) {
   26c34:	f89d 2004 	ldrb.w	r2, [sp, #4]
   26c38:	b322      	cbz	r2, 26c84 <net_ipv6_input+0x2b0>
   26c3a:	2a01      	cmp	r2, #1
   26c3c:	f89d 1008 	ldrb.w	r1, [sp, #8]
   26c40:	d023      	beq.n	26c8a <net_ipv6_input+0x2b6>
			if (opt_len > (exthdr_len - (1 + 1 + 1 + 1))) {
   26c42:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   26c46:	3b04      	subs	r3, #4
   26c48:	4299      	cmp	r1, r3
   26c4a:	f73f aed8 	bgt.w	269fe <net_ipv6_input+0x2a>
	switch (opt_type & 0xc0) {
   26c4e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   26c52:	2a80      	cmp	r2, #128	; 0x80
   26c54:	d020      	beq.n	26c98 <net_ipv6_input+0x2c4>
   26c56:	2ac0      	cmp	r2, #192	; 0xc0
   26c58:	d01a      	beq.n	26c90 <net_ipv6_input+0x2bc>
   26c5a:	2a00      	cmp	r2, #0
   26c5c:	f47f aecf 	bne.w	269fe <net_ipv6_input+0x2a>
			if (net_pkt_skip(pkt, opt_len)) {
   26c60:	4620      	mov	r0, r4
   26c62:	f7ff fb1c 	bl	2629e <net_pkt_skip>
   26c66:	2800      	cmp	r0, #0
   26c68:	f47f aec9 	bne.w	269fe <net_ipv6_input+0x2a>
			length += opt_len + 2;
   26c6c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   26c70:	441e      	add	r6, r3
   26c72:	e00b      	b.n	26c8c <net_ipv6_input+0x2b8>
   26c74:	2201      	movs	r2, #1
   26c76:	4620      	mov	r0, r4
   26c78:	a902      	add	r1, sp, #8
   26c7a:	f7ff fb26 	bl	262ca <net_pkt_read>
			if (net_pkt_read_u8(pkt, &opt_len)) {
   26c7e:	2800      	cmp	r0, #0
   26c80:	d0d8      	beq.n	26c34 <net_ipv6_input+0x260>
   26c82:	e6bc      	b.n	269fe <net_ipv6_input+0x2a>
			length++;
   26c84:	3601      	adds	r6, #1
			length += opt_len + 2;
   26c86:	b2b6      	uxth	r6, r6
			break;
   26c88:	e7b4      	b.n	26bf4 <net_ipv6_input+0x220>
			length += opt_len + 2;
   26c8a:	440e      	add	r6, r1
			length += opt_len + 2;
   26c8c:	3602      	adds	r6, #2
   26c8e:	e7fa      	b.n	26c86 <net_ipv6_input+0x2b2>
		if (net_ipv6_is_addr_mcast(&hdr->dst)) {
   26c90:	7e2b      	ldrb	r3, [r5, #24]
   26c92:	2bff      	cmp	r3, #255	; 0xff
   26c94:	f43f aeb3 	beq.w	269fe <net_ipv6_input+0x2a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   26c98:	4633      	mov	r3, r6
   26c9a:	2202      	movs	r2, #2
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   26c9c:	2104      	movs	r1, #4
   26c9e:	4620      	mov	r0, r4
   26ca0:	f7ff fd17 	bl	266d2 <net_icmpv6_send_error>
   26ca4:	e6ab      	b.n	269fe <net_ipv6_input+0x2a>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
   26ca6:	4620      	mov	r0, r4
   26ca8:	a908      	add	r1, sp, #32
   26caa:	f000 ffe0 	bl	27c6e <net_udp_input>
   26cae:	9002      	str	r0, [sp, #8]
		if (proto_hdr.udp) {
   26cb0:	2800      	cmp	r0, #0
   26cb2:	f43f aea4 	beq.w	269fe <net_ipv6_input+0x2a>
	verdict = net_conn_input(pkt, &ip, nexthdr, &proto_hdr);
   26cb6:	4632      	mov	r2, r6
   26cb8:	4620      	mov	r0, r4
   26cba:	ab02      	add	r3, sp, #8
   26cbc:	a903      	add	r1, sp, #12
	ip.ipv6 = hdr;
   26cbe:	9503      	str	r5, [sp, #12]
	verdict = net_conn_input(pkt, &ip, nexthdr, &proto_hdr);
   26cc0:	f7ed f856 	bl	13d70 <net_conn_input>
	if (verdict != NET_DROP) {
   26cc4:	e735      	b.n	26b32 <net_ipv6_input+0x15e>
			      net_pkt_get_current_offset(pkt) - 1);
   26cc6:	4620      	mov	r0, r4
   26cc8:	f7ff fb81 	bl	263ce <net_pkt_get_current_offset>
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   26ccc:	2201      	movs	r2, #1
   26cce:	1e43      	subs	r3, r0, #1
   26cd0:	e7e4      	b.n	26c9c <net_ipv6_input+0x2c8>

00026cd2 <net_ipv6_init>:

void net_ipv6_init(void)
{
   26cd2:	b508      	push	{r3, lr}
	net_ipv6_nbr_init();
   26cd4:	f7ec fe4c 	bl	13970 <net_ipv6_nbr_init>

#if defined(CONFIG_NET_IPV6_MLD)
	net_ipv6_mld_init();
#endif
}
   26cd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	net_ipv6_mld_init();
   26cdc:	f7ec be72 	b.w	139c4 <net_ipv6_mld_init>

00026ce0 <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   26ce0:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   26ce2:	b942      	cbnz	r2, 26cf6 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   26ce4:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   26ce6:	b933      	cbnz	r3, 26cf6 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   26ce8:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   26cea:	b922      	cbnz	r2, 26cf6 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   26cec:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   26cee:	fab0 f080 	clz	r0, r0
   26cf2:	0940      	lsrs	r0, r0, #5
   26cf4:	4770      	bx	lr
   26cf6:	2000      	movs	r0, #0
   26cf8:	4770      	bx	lr

00026cfa <net_neighbor_data_remove>:
}
   26cfa:	4770      	bx	lr

00026cfc <nbr_clear_ns_pending>:
	data->send_ns = 0;
   26cfc:	2200      	movs	r2, #0
   26cfe:	2300      	movs	r3, #0
{
   26d00:	b510      	push	{r4, lr}
   26d02:	4604      	mov	r4, r0
	data->send_ns = 0;
   26d04:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	if (data->pending) {
   26d08:	6800      	ldr	r0, [r0, #0]
   26d0a:	b118      	cbz	r0, 26d14 <nbr_clear_ns_pending+0x18>
		net_pkt_unref(data->pending);
   26d0c:	f7ff f9cd 	bl	260aa <net_pkt_unref>
		data->pending = NULL;
   26d10:	2300      	movs	r3, #0
   26d12:	6023      	str	r3, [r4, #0]
}
   26d14:	bd10      	pop	{r4, pc}

00026d16 <nbr_free>:
{
   26d16:	b538      	push	{r3, r4, r5, lr}
   26d18:	4604      	mov	r4, r0
	nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   26d1a:	68c0      	ldr	r0, [r0, #12]
   26d1c:	f7ff ffee 	bl	26cfc <nbr_clear_ns_pending>
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   26d20:	2500      	movs	r5, #0
	net_ipv6_nbr_data(nbr)->reachable = 0;
   26d22:	2100      	movs	r1, #0
   26d24:	2000      	movs	r0, #0
   26d26:	68e3      	ldr	r3, [r4, #12]
   26d28:	e9c3 0106 	strd	r0, r1, [r3, #24]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   26d2c:	621d      	str	r5, [r3, #32]
	net_nbr_unref(nbr);
   26d2e:	4620      	mov	r0, r4
   26d30:	f7ff fd78 	bl	26824 <net_nbr_unref>
	net_nbr_unlink(nbr, NULL);
   26d34:	4629      	mov	r1, r5
   26d36:	4620      	mov	r0, r4
}
   26d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_nbr_unlink(nbr, NULL);
   26d3c:	f7ec b934 	b.w	12fa8 <net_nbr_unlink>

00026d40 <k_uptime_get>:
{
   26d40:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   26d42:	f002 fa41 	bl	291c8 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   26d46:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   26d4a:	fba0 2304 	umull	r2, r3, r0, r4
   26d4e:	fb04 3301 	mla	r3, r4, r1, r3
   26d52:	0bd0      	lsrs	r0, r2, #15
}
   26d54:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   26d58:	0bd9      	lsrs	r1, r3, #15
   26d5a:	bd10      	pop	{r4, pc}

00026d5c <k_delayed_work_remaining_get>:
{
   26d5c:	b508      	push	{r3, lr}
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   26d5e:	300c      	adds	r0, #12
   26d60:	f002 f9f3 	bl	2914a <z_timeout_remaining>
			return (u32_t)((t * to_hz + off) / from_hz);
   26d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   26d68:	fba0 2303 	umull	r2, r3, r0, r3
   26d6c:	0bd0      	lsrs	r0, r2, #15
}
   26d6e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   26d72:	bd08      	pop	{r3, pc}

00026d74 <set_llao>:
{
   26d74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26d76:	460d      	mov	r5, r1
   26d78:	4614      	mov	r4, r2
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
   26d7a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (net_pkt_write(pkt, &opt_hdr,
   26d7e:	a901      	add	r1, sp, #4
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
   26d80:	08d3      	lsrs	r3, r2, #3
	if (net_pkt_write(pkt, &opt_hdr,
   26d82:	2202      	movs	r2, #2
{
   26d84:	4606      	mov	r6, r0
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
   26d86:	f88d 3005 	strb.w	r3, [sp, #5]
	if (net_pkt_write(pkt, &opt_hdr,
   26d8a:	f7ff fbc8 	bl	2651e <net_pkt_write>
   26d8e:	b110      	cbz	r0, 26d96 <set_llao+0x22>
		return false;
   26d90:	2000      	movs	r0, #0
}
   26d92:	b002      	add	sp, #8
   26d94:	bd70      	pop	{r4, r5, r6, pc}
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
   26d96:	6829      	ldr	r1, [r5, #0]
   26d98:	4630      	mov	r0, r6
   26d9a:	792a      	ldrb	r2, [r5, #4]
   26d9c:	f7ff fbbf 	bl	2651e <net_pkt_write>
			  sizeof(struct net_icmpv6_nd_opt_hdr)) ||
   26da0:	4601      	mov	r1, r0
   26da2:	2800      	cmp	r0, #0
   26da4:	d1f4      	bne.n	26d90 <set_llao+0x1c>
	    net_pkt_memset(pkt, 0, llao_len - lladdr->len - 2)) {
   26da6:	792a      	ldrb	r2, [r5, #4]
   26da8:	4630      	mov	r0, r6
   26daa:	1aa2      	subs	r2, r4, r2
   26dac:	3a02      	subs	r2, #2
   26dae:	f7ff fa81 	bl	262b4 <net_pkt_memset>
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
   26db2:	fab0 f080 	clz	r0, r0
   26db6:	0940      	lsrs	r0, r0, #5
   26db8:	e7eb      	b.n	26d92 <set_llao+0x1e>

00026dba <net_linkaddr_set>:
{
   26dba:	b510      	push	{r4, lr}
	if (!lladdr_store || !new_addr) {
   26dbc:	b140      	cbz	r0, 26dd0 <net_linkaddr_set+0x16>
   26dbe:	b139      	cbz	r1, 26dd0 <net_linkaddr_set+0x16>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   26dc0:	2a06      	cmp	r2, #6
   26dc2:	d808      	bhi.n	26dd6 <net_linkaddr_set+0x1c>
	lladdr_store->len = new_len;
   26dc4:	7042      	strb	r2, [r0, #1]
   26dc6:	3002      	adds	r0, #2
   26dc8:	f002 fb53 	bl	29472 <memcpy>

	return 0;
   26dcc:	2000      	movs	r0, #0
}
   26dce:	bd10      	pop	{r4, pc}
		return -EINVAL;
   26dd0:	f06f 0015 	mvn.w	r0, #21
   26dd4:	e7fb      	b.n	26dce <net_linkaddr_set+0x14>
		return -EMSGSIZE;
   26dd6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   26dda:	e7f8      	b.n	26dce <net_linkaddr_set+0x14>

00026ddc <read_llao>:
	llstorage->len = NET_LINK_ADDR_MAX_LENGTH;
   26ddc:	2306      	movs	r3, #6
{
   26dde:	b570      	push	{r4, r5, r6, lr}
   26de0:	4615      	mov	r5, r2
	llstorage->len = NET_LINK_ADDR_MAX_LENGTH;
   26de2:	7053      	strb	r3, [r2, #1]
	if (net_pkt_lladdr_src(pkt)->len < llstorage->len) {
   26de4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
   26de8:	460c      	mov	r4, r1
	if (net_pkt_lladdr_src(pkt)->len < llstorage->len) {
   26dea:	2b05      	cmp	r3, #5
		llstorage->len = net_pkt_lladdr_src(pkt)->len;
   26dec:	bf98      	it	ls
   26dee:	7053      	strbls	r3, [r2, #1]
	if (net_pkt_read(pkt, llstorage->addr, llstorage->len)) {
   26df0:	7852      	ldrb	r2, [r2, #1]
   26df2:	1ca9      	adds	r1, r5, #2
{
   26df4:	4606      	mov	r6, r0
	if (net_pkt_read(pkt, llstorage->addr, llstorage->len)) {
   26df6:	f7ff fa68 	bl	262ca <net_pkt_read>
   26dfa:	b968      	cbnz	r0, 26e18 <read_llao+0x3c>
	padding = len * 8U - 2 - llstorage->len;
   26dfc:	786b      	ldrb	r3, [r5, #1]
   26dfe:	00e1      	lsls	r1, r4, #3
   26e00:	3902      	subs	r1, #2
   26e02:	1ac9      	subs	r1, r1, r3
	if (padding) {
   26e04:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   26e08:	d008      	beq.n	26e1c <read_llao+0x40>
		if (net_pkt_skip(pkt, padding)) {
   26e0a:	4630      	mov	r0, r6
   26e0c:	f7ff fa47 	bl	2629e <net_pkt_skip>
   26e10:	fab0 f080 	clz	r0, r0
   26e14:	0940      	lsrs	r0, r0, #5
}
   26e16:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   26e18:	2000      	movs	r0, #0
   26e1a:	e7fc      	b.n	26e16 <read_llao+0x3a>
	return true;
   26e1c:	2001      	movs	r0, #1
   26e1e:	e7fa      	b.n	26e16 <read_llao+0x3a>

00026e20 <net_ipv6_addr_create_ll_allnodes_mcast>:
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   26e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26e24:	2202      	movs	r2, #2
   26e26:	7003      	strb	r3, [r0, #0]
   26e28:	7042      	strb	r2, [r0, #1]
   26e2a:	2300      	movs	r3, #0
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   26e2c:	7083      	strb	r3, [r0, #2]
   26e2e:	70c3      	strb	r3, [r0, #3]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   26e30:	7103      	strb	r3, [r0, #4]
   26e32:	7143      	strb	r3, [r0, #5]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   26e34:	7183      	strb	r3, [r0, #6]
   26e36:	71c3      	strb	r3, [r0, #7]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   26e38:	7203      	strb	r3, [r0, #8]
   26e3a:	7243      	strb	r3, [r0, #9]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   26e3c:	7283      	strb	r3, [r0, #10]
   26e3e:	72c3      	strb	r3, [r0, #11]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   26e40:	7303      	strb	r3, [r0, #12]
   26e42:	7343      	strb	r3, [r0, #13]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   26e44:	7383      	strb	r3, [r0, #14]
   26e46:	2301      	movs	r3, #1
   26e48:	73c3      	strb	r3, [r0, #15]
}
   26e4a:	4770      	bx	lr

00026e4c <net_neighbor_table_clear>:
   26e4c:	4770      	bx	lr

00026e4e <nbr_init>:
{
   26e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
   26e50:	461f      	mov	r7, r3
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   26e52:	23ff      	movs	r3, #255	; 0xff
{
   26e54:	b085      	sub	sp, #20
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   26e56:	7043      	strb	r3, [r0, #1]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   26e58:	466b      	mov	r3, sp
{
   26e5a:	4604      	mov	r4, r0
   26e5c:	461e      	mov	r6, r3
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   26e5e:	68c5      	ldr	r5, [r0, #12]
	nbr->iface = iface;
   26e60:	6081      	str	r1, [r0, #8]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   26e62:	f102 0e10 	add.w	lr, r2, #16
   26e66:	469c      	mov	ip, r3
   26e68:	6810      	ldr	r0, [r2, #0]
   26e6a:	6851      	ldr	r1, [r2, #4]
   26e6c:	3208      	adds	r2, #8
   26e6e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   26e72:	4572      	cmp	r2, lr
   26e74:	4663      	mov	r3, ip
   26e76:	d1f6      	bne.n	26e66 <nbr_init+0x18>
   26e78:	1d2a      	adds	r2, r5, #4
   26e7a:	ab04      	add	r3, sp, #16
   26e7c:	4635      	mov	r5, r6
   26e7e:	cd03      	ldmia	r5!, {r0, r1}
   26e80:	429d      	cmp	r5, r3
   26e82:	6010      	str	r0, [r2, #0]
   26e84:	6051      	str	r1, [r2, #4]
   26e86:	462e      	mov	r6, r5
   26e88:	f102 0208 	add.w	r2, r2, #8
   26e8c:	d1f6      	bne.n	26e7c <nbr_init+0x2e>
	ipv6_nbr_set_state(nbr, state);
   26e8e:	4620      	mov	r0, r4
   26e90:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   26e94:	f7ec f920 	bl	130d8 <ipv6_nbr_set_state>
	net_ipv6_nbr_data(nbr)->pending = NULL;
   26e98:	2300      	movs	r3, #0
	net_ipv6_nbr_data(nbr)->send_ns = 0;
   26e9a:	2000      	movs	r0, #0
   26e9c:	2100      	movs	r1, #0
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   26e9e:	68e2      	ldr	r2, [r4, #12]
	net_ipv6_nbr_data(nbr)->send_ns = 0;
   26ea0:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
	net_ipv6_nbr_data(nbr)->reachable = 0;
   26ea4:	e9c2 0106 	strd	r0, r1, [r2, #24]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   26ea8:	f882 7035 	strb.w	r7, [r2, #53]	; 0x35
	net_ipv6_nbr_data(nbr)->pending = NULL;
   26eac:	6013      	str	r3, [r2, #0]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   26eae:	6213      	str	r3, [r2, #32]
}
   26eb0:	b005      	add	sp, #20
   26eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026eb4 <net_ipv6_nbr_rm>:
{
   26eb4:	b570      	push	{r4, r5, r6, lr}
   26eb6:	4605      	mov	r5, r0
   26eb8:	460e      	mov	r6, r1
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   26eba:	f7ec f89d 	bl	12ff8 <nbr_lookup.isra.0>
	if (!nbr) {
   26ebe:	4604      	mov	r4, r0
   26ec0:	b138      	cbz	r0, 26ed2 <net_ipv6_nbr_rm+0x1e>
	net_route_del_by_nexthop(iface, addr);
   26ec2:	4631      	mov	r1, r6
   26ec4:	4628      	mov	r0, r5
   26ec6:	f7ec fe0b 	bl	13ae0 <net_route_del_by_nexthop>
	nbr_free(nbr);
   26eca:	4620      	mov	r0, r4
   26ecc:	f7ff ff23 	bl	26d16 <nbr_free>
	return true;
   26ed0:	2001      	movs	r0, #1
}
   26ed2:	bd70      	pop	{r4, r5, r6, pc}

00026ed4 <net_ipv6_nbr_lookup>:
	return nbr_lookup(&net_neighbor.table, iface, addr);
   26ed4:	f7ec b890 	b.w	12ff8 <nbr_lookup.isra.0>

00026ed8 <net_ipv6_send_na>:
{
   26ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   26edc:	f04f 0a14 	mov.w	sl, #20
{
   26ee0:	461e      	mov	r6, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   26ee2:	2300      	movs	r3, #0
{
   26ee4:	b088      	sub	sp, #32
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   26ee6:	e9cd 3a02 	strd	r3, sl, [sp, #8]
	u8_t total_len = net_if_get_link_addr(iface)->len +
   26eea:	6803      	ldr	r3, [r0, #0]
{
   26eec:	4691      	mov	r9, r2
	return ROUND_UP(total_len, 8U);
   26eee:	7d1f      	ldrb	r7, [r3, #20]
	pkt = net_pkt_alloc_with_buffer(iface,
   26ef0:	f640 42cd 	movw	r2, #3277	; 0xccd
   26ef4:	2300      	movs	r3, #0
	return ROUND_UP(total_len, 8U);
   26ef6:	3709      	adds	r7, #9
   26ef8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
	pkt = net_pkt_alloc_with_buffer(iface,
   26efc:	e9cd 2300 	strd	r2, r3, [sp]
{
   26f00:	460d      	mov	r5, r1
	pkt = net_pkt_alloc_with_buffer(iface,
   26f02:	233a      	movs	r3, #58	; 0x3a
   26f04:	2202      	movs	r2, #2
   26f06:	eb07 010a 	add.w	r1, r7, sl
{
   26f0a:	4680      	mov	r8, r0
	pkt = net_pkt_alloc_with_buffer(iface,
   26f0c:	f7eb ff4e 	bl	12dac <net_pkt_alloc_with_buffer>
	if (!pkt) {
   26f10:	4604      	mov	r4, r0
   26f12:	2800      	cmp	r0, #0
   26f14:	d05f      	beq.n	26fd6 <net_ipv6_send_na+0xfe>
	pkt->ipv6_hop_limit = hop_limit;
   26f16:	23ff      	movs	r3, #255	; 0xff
	if (net_ipv6_create(pkt, src, dst) ||
   26f18:	464a      	mov	r2, r9
   26f1a:	4629      	mov	r1, r5
   26f1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   26f20:	f7ff fcb0 	bl	26884 <net_ipv6_create>
   26f24:	4602      	mov	r2, r0
   26f26:	b140      	cbz	r0, 26f3a <net_ipv6_send_na+0x62>
	int ret = -ENOBUFS;
   26f28:	f06f 0568 	mvn.w	r5, #104	; 0x68
	net_pkt_unref(pkt);
   26f2c:	4620      	mov	r0, r4
   26f2e:	f7ff f8bc 	bl	260aa <net_pkt_unref>
}
   26f32:	4628      	mov	r0, r5
   26f34:	b008      	add	sp, #32
   26f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    net_icmpv6_create(pkt, NET_ICMPV6_NA, 0)) {
   26f3a:	2188      	movs	r1, #136	; 0x88
   26f3c:	4620      	mov	r0, r4
   26f3e:	f7ff fb5d 	bl	265fc <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
   26f42:	4681      	mov	r9, r0
   26f44:	2800      	cmp	r0, #0
   26f46:	d1ef      	bne.n	26f28 <net_ipv6_send_na+0x50>
	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
   26f48:	4620      	mov	r0, r4
   26f4a:	a902      	add	r1, sp, #8
   26f4c:	f7ff fb03 	bl	26556 <net_pkt_get_data>
	if (!na_hdr) {
   26f50:	4605      	mov	r5, r0
   26f52:	2800      	cmp	r0, #0
   26f54:	d0e8      	beq.n	26f28 <net_ipv6_send_na+0x50>
__ssp_bos_icheck3(memset, void *, int)
   26f56:	4652      	mov	r2, sl
   26f58:	4649      	mov	r1, r9
   26f5a:	f002 fac4 	bl	294e6 <memset>
	na_hdr->flags = flags;
   26f5e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   26f62:	aa04      	add	r2, sp, #16
	na_hdr->flags = flags;
   26f64:	702b      	strb	r3, [r5, #0]
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   26f66:	f106 0e10 	add.w	lr, r6, #16
   26f6a:	4633      	mov	r3, r6
   26f6c:	4616      	mov	r6, r2
   26f6e:	4694      	mov	ip, r2
   26f70:	6818      	ldr	r0, [r3, #0]
   26f72:	6859      	ldr	r1, [r3, #4]
   26f74:	3308      	adds	r3, #8
   26f76:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   26f7a:	4573      	cmp	r3, lr
   26f7c:	4662      	mov	r2, ip
   26f7e:	d1f6      	bne.n	26f6e <net_ipv6_send_na+0x96>
   26f80:	1d2b      	adds	r3, r5, #4
   26f82:	ad08      	add	r5, sp, #32
   26f84:	4632      	mov	r2, r6
   26f86:	ca03      	ldmia	r2!, {r0, r1}
   26f88:	42aa      	cmp	r2, r5
   26f8a:	6018      	str	r0, [r3, #0]
   26f8c:	6059      	str	r1, [r3, #4]
   26f8e:	4616      	mov	r6, r2
   26f90:	f103 0308 	add.w	r3, r3, #8
   26f94:	d1f6      	bne.n	26f84 <net_ipv6_send_na+0xac>
	if (net_pkt_set_data(pkt, &na_access)) {
   26f96:	4620      	mov	r0, r4
   26f98:	a902      	add	r1, sp, #8
   26f9a:	f7ff fafd 	bl	26598 <net_pkt_set_data>
   26f9e:	4605      	mov	r5, r0
   26fa0:	2800      	cmp	r0, #0
   26fa2:	d1c1      	bne.n	26f28 <net_ipv6_send_na+0x50>
	return &iface->if_dev->link_addr;
   26fa4:	f8d8 1000 	ldr.w	r1, [r8]
	if (!set_llao(pkt, net_if_get_link_addr(iface),
   26fa8:	2302      	movs	r3, #2
   26faa:	463a      	mov	r2, r7
   26fac:	4620      	mov	r0, r4
   26fae:	3110      	adds	r1, #16
   26fb0:	f7ff fee0 	bl	26d74 <set_llao>
   26fb4:	2800      	cmp	r0, #0
   26fb6:	d0b7      	beq.n	26f28 <net_ipv6_send_na+0x50>
	net_pkt_cursor_init(pkt);
   26fb8:	4620      	mov	r0, r4
   26fba:	f7ff f8e6 	bl	2618a <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   26fbe:	213a      	movs	r1, #58	; 0x3a
   26fc0:	4620      	mov	r0, r4
   26fc2:	f7ff fcc2 	bl	2694a <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
   26fc6:	4620      	mov	r0, r4
   26fc8:	f7fd ff07 	bl	24dda <net_send_data>
   26fcc:	2800      	cmp	r0, #0
   26fce:	dab0      	bge.n	26f32 <net_ipv6_send_na+0x5a>
		ret = -EINVAL;
   26fd0:	f06f 0515 	mvn.w	r5, #21
   26fd4:	e7aa      	b.n	26f2c <net_ipv6_send_na+0x54>
		return -ENOMEM;
   26fd6:	f06f 050b 	mvn.w	r5, #11
   26fda:	e7aa      	b.n	26f32 <net_ipv6_send_na+0x5a>

00026fdc <net_ipv6_nbr_set_reachable_timer>:
	time = net_if_ipv6_get_reachable_time(iface);
   26fdc:	6842      	ldr	r2, [r0, #4]
	if (!iface->config.ip.ipv6) {
   26fde:	b10a      	cbz	r2, 26fe4 <net_ipv6_nbr_set_reachable_timer+0x8>
	return iface->config.ip.ipv6->reachable_time;
   26fe0:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
	ipv6_nd_restart_reachable_timer(nbr, time);
   26fe4:	2300      	movs	r3, #0
   26fe6:	4608      	mov	r0, r1
   26fe8:	f7ec b83c 	b.w	13064 <ipv6_nd_restart_reachable_timer>

00026fec <handle_na_input>:
{
   26fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   26ff0:	2314      	movs	r3, #20
   26ff2:	2500      	movs	r5, #0
{
   26ff4:	b08d      	sub	sp, #52	; 0x34
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   26ff6:	e9cd 5304 	strd	r5, r3, [sp, #16]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   26ffa:	ab03      	add	r3, sp, #12
   26ffc:	9306      	str	r3, [sp, #24]
   26ffe:	2302      	movs	r3, #2
{
   27000:	4604      	mov	r4, r0
   27002:	460f      	mov	r7, r1
   27004:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   27006:	9307      	str	r3, [sp, #28]
	u16_t length = net_pkt_get_len(pkt);
   27008:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   2700a:	b953      	cbnz	r3, 27022 <handle_na_input+0x36>
	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
   2700c:	4620      	mov	r0, r4
   2700e:	a904      	add	r1, sp, #16
   27010:	f7ff faa1 	bl	26556 <net_pkt_get_data>
	u16_t length = net_pkt_get_len(pkt);
   27014:	b2ad      	uxth	r5, r5
	if (!na_hdr) {
   27016:	4606      	mov	r6, r0
   27018:	b938      	cbnz	r0, 2702a <handle_na_input+0x3e>
	return NET_DROP;
   2701a:	2002      	movs	r0, #2
}
   2701c:	b00d      	add	sp, #52	; 0x34
   2701e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes += buf->len;
   27022:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   27024:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   27026:	4415      	add	r5, r2
		buf = buf->frags;
   27028:	e7ef      	b.n	2700a <handle_na_input+0x1e>
	if (((length < (sizeof(struct net_ipv6_hdr) +
   2702a:	2d41      	cmp	r5, #65	; 0x41
   2702c:	d90b      	bls.n	27046 <handle_na_input+0x5a>
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   2702e:	79fb      	ldrb	r3, [r7, #7]
   27030:	2bff      	cmp	r3, #255	; 0xff
   27032:	d108      	bne.n	27046 <handle_na_input+0x5a>
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   27034:	7903      	ldrb	r3, [r0, #4]
   27036:	2bff      	cmp	r3, #255	; 0xff
   27038:	d005      	beq.n	27046 <handle_na_input+0x5a>
	     net_ipv6_is_addr_mcast(&na_hdr->tgt) ||
   2703a:	7803      	ldrb	r3, [r0, #0]
   2703c:	0658      	lsls	r0, r3, #25
   2703e:	d506      	bpl.n	2704e <handle_na_input+0x62>
	     (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED &&
   27040:	7e3b      	ldrb	r3, [r7, #24]
   27042:	2bff      	cmp	r3, #255	; 0xff
   27044:	d103      	bne.n	2704e <handle_na_input+0x62>
	      net_ipv6_is_addr_mcast(&ip_hdr->dst))) &&
   27046:	f898 3001 	ldrb.w	r3, [r8, #1]
   2704a:	2b00      	cmp	r3, #0
   2704c:	d1e5      	bne.n	2701a <handle_na_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   2704e:	9905      	ldr	r1, [sp, #20]
   27050:	4620      	mov	r0, r4
   27052:	f7ff f924 	bl	2629e <net_pkt_skip>
	pkt->ipv6_ext_opt_len = len;
   27056:	2314      	movs	r3, #20
				net_pkt_get_data(pkt, &nd_access);
   27058:	4620      	mov	r0, r4
   2705a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2705e:	a906      	add	r1, sp, #24
   27060:	f7ff fa79 	bl	26556 <net_pkt_get_data>
	u16_t tllao_offset = 0U;
   27064:	2700      	movs	r7, #0
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
   27066:	3d2c      	subs	r5, #44	; 0x2c
   27068:	b2ad      	uxth	r5, r5
	while (nd_opt_hdr && nd_opt_hdr->len &&
   2706a:	b130      	cbz	r0, 2707a <handle_na_input+0x8e>
   2706c:	7843      	ldrb	r3, [r0, #1]
   2706e:	b123      	cbz	r3, 2707a <handle_na_input+0x8e>
	       net_pkt_ipv6_ext_opt_len(pkt) < length) {
   27070:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
	while (nd_opt_hdr && nd_opt_hdr->len &&
   27074:	42a9      	cmp	r1, r5
	       net_pkt_ipv6_ext_opt_len(pkt) < length) {
   27076:	460a      	mov	r2, r1
	while (nd_opt_hdr && nd_opt_hdr->len &&
   27078:	d313      	bcc.n	270a2 <handle_na_input+0xb6>
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   2707a:	1d31      	adds	r1, r6, #4
   2707c:	6a20      	ldr	r0, [r4, #32]
   2707e:	9101      	str	r1, [sp, #4]
   27080:	f7fd ffd4 	bl	2502c <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   27084:	9901      	ldr	r1, [sp, #4]
   27086:	b330      	cbz	r0, 270d6 <handle_na_input+0xea>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   27088:	f990 302d 	ldrsb.w	r3, [r0, #45]	; 0x2d
   2708c:	2b00      	cmp	r3, #0
   2708e:	d1c4      	bne.n	2701a <handle_na_input+0x2e>
	if (net_ipv6_is_ll_addr(addr)) {
   27090:	f248 03fe 	movw	r3, #33022	; 0x80fe
   27094:	88b2      	ldrh	r2, [r6, #4]
   27096:	429a      	cmp	r2, r3
   27098:	d0bf      	beq.n	2701a <handle_na_input+0x2e>
	net_if_ipv6_dad_failed(iface, addr);
   2709a:	6a20      	ldr	r0, [r4, #32]
   2709c:	f7eb f880 	bl	121a0 <net_if_ipv6_dad_failed>
	return true;
   270a0:	e7bb      	b.n	2701a <handle_na_input+0x2e>
		switch (nd_opt_hdr->type) {
   270a2:	7800      	ldrb	r0, [r0, #0]
   270a4:	2802      	cmp	r0, #2
   270a6:	d106      	bne.n	270b6 <handle_na_input+0xca>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   270a8:	8fe7      	ldrh	r7, [r4, #62]	; 0x3e
   270aa:	3706      	adds	r7, #6
   270ac:	443a      	add	r2, r7
   270ae:	f894 7038 	ldrb.w	r7, [r4, #56]	; 0x38
   270b2:	443a      	add	r2, r7
   270b4:	b297      	uxth	r7, r2
					     net_pkt_ipv6_ext_opt_len(pkt) +
   270b6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   270ba:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   270bc:	4299      	cmp	r1, r3
   270be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   270c2:	d2aa      	bcs.n	2701a <handle_na_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   270c4:	9907      	ldr	r1, [sp, #28]
   270c6:	4620      	mov	r0, r4
   270c8:	f7ff f8e9 	bl	2629e <net_pkt_skip>
					net_pkt_get_data(pkt, &nd_access);
   270cc:	4620      	mov	r0, r4
   270ce:	a906      	add	r1, sp, #24
   270d0:	f7ff fa41 	bl	26556 <net_pkt_get_data>
   270d4:	e7c9      	b.n	2706a <handle_na_input+0x7e>
	struct net_linkaddr_storage lladdr = { 0 };
   270d6:	e9cd 0008 	strd	r0, r0, [sp, #32]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &na_hdr->tgt);
   270da:	6a20      	ldr	r0, [r4, #32]
   270dc:	f7eb ff8c 	bl	12ff8 <nbr_lookup.isra.0>
	if (!nbr) {
   270e0:	4605      	mov	r5, r0
   270e2:	2800      	cmp	r0, #0
   270e4:	d099      	beq.n	2701a <handle_na_input+0x2e>
	if (tllao_offset) {
   270e6:	2f00      	cmp	r7, #0
   270e8:	d140      	bne.n	2716c <handle_na_input+0x180>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   270ea:	786b      	ldrb	r3, [r5, #1]
   270ec:	2bff      	cmp	r3, #255	; 0xff
   270ee:	d055      	beq.n	2719c <handle_na_input+0x1b0>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   270f0:	7868      	ldrb	r0, [r5, #1]
   270f2:	f7eb ff79 	bl	12fe8 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   270f6:	4680      	mov	r8, r0
   270f8:	2800      	cmp	r0, #0
   270fa:	d08e      	beq.n	2701a <handle_na_input+0x2e>
	if (tllao_offset) {
   270fc:	2f00      	cmp	r7, #0
   270fe:	d062      	beq.n	271c6 <handle_na_input+0x1da>
		lladdr_changed = memcmp(lladdr.addr,
   27100:	7842      	ldrb	r2, [r0, #1]
   27102:	1c81      	adds	r1, r0, #2
   27104:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   27108:	f002 f9a5 	bl	29456 <memcmp>
   2710c:	f1b0 0900 	subs.w	r9, r0, #0
   27110:	bf18      	it	ne
   27112:	f04f 0901 	movne.w	r9, #1
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   27116:	68eb      	ldr	r3, [r5, #12]
   27118:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   2711c:	2b00      	cmp	r3, #0
   2711e:	d154      	bne.n	271ca <handle_na_input+0x1de>
		if (!tllao_offset) {
   27120:	2f00      	cmp	r7, #0
   27122:	f43f af7a 	beq.w	2701a <handle_na_input+0x2e>
		if (lladdr_changed) {
   27126:	f1b9 0f00 	cmp.w	r9, #0
   2712a:	d009      	beq.n	27140 <handle_na_input+0x154>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
   2712c:	4640      	mov	r0, r8
   2712e:	f7eb ff85 	bl	1303c <dbg_update_neighbor_lladdr.isra.0>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   27132:	4640      	mov	r0, r8
   27134:	f898 2001 	ldrb.w	r2, [r8, #1]
   27138:	f10d 0122 	add.w	r1, sp, #34	; 0x22
   2713c:	f7ff fe3d 	bl	26dba <net_linkaddr_set>
		if (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED) {
   27140:	7833      	ldrb	r3, [r6, #0]
   27142:	0659      	lsls	r1, r3, #25
   27144:	f140 8086 	bpl.w	27254 <handle_na_input+0x268>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   27148:	2101      	movs	r1, #1
   2714a:	4628      	mov	r0, r5
   2714c:	f7eb ffc4 	bl	130d8 <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->reachable = 0;
   27150:	2000      	movs	r0, #0
   27152:	2100      	movs	r1, #0
			net_ipv6_nbr_data(nbr)->ns_count = 0U;
   27154:	2200      	movs	r2, #0
   27156:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable = 0;
   27158:	e9c3 0106 	strd	r0, r1, [r3, #24]
			net_ipv6_nbr_data(nbr)->ns_count = 0U;
   2715c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   27160:	4629      	mov	r1, r5
   27162:	6a20      	ldr	r0, [r4, #32]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   27164:	621a      	str	r2, [r3, #32]
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   27166:	f7ff ff39 	bl	26fdc <net_ipv6_nbr_set_reachable_timer>
   2716a:	e03d      	b.n	271e8 <handle_na_input+0x1fc>
		lladdr.len = net_pkt_lladdr_src(pkt)->len;
   2716c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
		net_pkt_cursor_init(pkt);
   27170:	4620      	mov	r0, r4
		lladdr.len = net_pkt_lladdr_src(pkt)->len;
   27172:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		net_pkt_cursor_init(pkt);
   27176:	f7ff f808 	bl	2618a <net_pkt_cursor_init>
		if (net_pkt_skip(pkt, tllao_offset) ||
   2717a:	4639      	mov	r1, r7
   2717c:	4620      	mov	r0, r4
   2717e:	f7ff f88e 	bl	2629e <net_pkt_skip>
   27182:	2800      	cmp	r0, #0
   27184:	f47f af49 	bne.w	2701a <handle_na_input+0x2e>
		    net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
   27188:	4620      	mov	r0, r4
   2718a:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   2718e:	f10d 0122 	add.w	r1, sp, #34	; 0x22
   27192:	f7ff f89a 	bl	262ca <net_pkt_read>
		if (net_pkt_skip(pkt, tllao_offset) ||
   27196:	2800      	cmp	r0, #0
   27198:	d0a7      	beq.n	270ea <handle_na_input+0xfe>
   2719a:	e73e      	b.n	2701a <handle_na_input+0x2e>
		if (!tllao_offset) {
   2719c:	2f00      	cmp	r7, #0
   2719e:	f43f af3c 	beq.w	2701a <handle_na_input+0x2e>
		nbr_lladdr.len = lladdr.len;
   271a2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   271a6:	4628      	mov	r0, r5
		nbr_lladdr.len = lladdr.len;
   271a8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   271ac:	6a21      	ldr	r1, [r4, #32]
		nbr_lladdr.addr = lladdr.addr;
   271ae:	f10d 0322 	add.w	r3, sp, #34	; 0x22
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   271b2:	aa0a      	add	r2, sp, #40	; 0x28
		nbr_lladdr.addr = lladdr.addr;
   271b4:	930a      	str	r3, [sp, #40]	; 0x28
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   271b6:	f7eb fe9d 	bl	12ef4 <net_nbr_link>
   271ba:	2800      	cmp	r0, #0
   271bc:	d098      	beq.n	270f0 <handle_na_input+0x104>
			nbr_free(nbr);
   271be:	4628      	mov	r0, r5
   271c0:	f7ff fda9 	bl	26d16 <nbr_free>
			return false;
   271c4:	e729      	b.n	2701a <handle_na_input+0x2e>
	bool lladdr_changed = false;
   271c6:	46b9      	mov	r9, r7
   271c8:	e7a5      	b.n	27116 <handle_na_input+0x12a>
	if (!(na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE) && lladdr_changed) {
   271ca:	7832      	ldrb	r2, [r6, #0]
   271cc:	0692      	lsls	r2, r2, #26
   271ce:	d423      	bmi.n	27218 <handle_na_input+0x22c>
   271d0:	f1b9 0f00 	cmp.w	r9, #0
   271d4:	d007      	beq.n	271e6 <handle_na_input+0x1fa>
		if (net_ipv6_nbr_data(nbr)->state ==
   271d6:	2b01      	cmp	r3, #1
   271d8:	f47f af1f 	bne.w	2701a <handle_na_input+0x2e>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   271dc:	2102      	movs	r1, #2
   271de:	4628      	mov	r0, r5
   271e0:	f7eb ff7a 	bl	130d8 <ipv6_nbr_set_state>
   271e4:	e719      	b.n	2701a <handle_na_input+0x2e>
	if (na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE ||
   271e6:	bb27      	cbnz	r7, 27232 <handle_na_input+0x246>
		(na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER);
   271e8:	7833      	ldrb	r3, [r6, #0]
	net_ipv6_nbr_data(nbr)->is_router =
   271ea:	68ea      	ldr	r2, [r5, #12]
		(na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER);
   271ec:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router =
   271ee:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	pending = net_ipv6_nbr_data(nbr)->pending;
   271f2:	68eb      	ldr	r3, [r5, #12]
   271f4:	681e      	ldr	r6, [r3, #0]
	if (pending) {
   271f6:	b156      	cbz	r6, 2720e <handle_na_input+0x222>
		if (net_send_data(pending) < 0) {
   271f8:	4630      	mov	r0, r6
   271fa:	f7fd fdee 	bl	24dda <net_send_data>
   271fe:	2800      	cmp	r0, #0
   27200:	da2d      	bge.n	2725e <handle_na_input+0x272>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   27202:	68e8      	ldr	r0, [r5, #12]
   27204:	f7ff fd7a 	bl	26cfc <nbr_clear_ns_pending>
		net_pkt_unref(pending);
   27208:	4630      	mov	r0, r6
   2720a:	f7fe ff4e 	bl	260aa <net_pkt_unref>
	net_pkt_unref(pkt);
   2720e:	4620      	mov	r0, r4
   27210:	f7fe ff4b 	bl	260aa <net_pkt_unref>
	return NET_OK;
   27214:	2000      	movs	r0, #0
   27216:	e701      	b.n	2701c <handle_na_input+0x30>
		if (lladdr_changed) {
   27218:	f1b9 0f00 	cmp.w	r9, #0
   2721c:	d009      	beq.n	27232 <handle_na_input+0x246>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
   2721e:	4640      	mov	r0, r8
   27220:	f7eb ff0c 	bl	1303c <dbg_update_neighbor_lladdr.isra.0>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   27224:	4640      	mov	r0, r8
   27226:	f898 2001 	ldrb.w	r2, [r8, #1]
   2722a:	f10d 0122 	add.w	r1, sp, #34	; 0x22
   2722e:	f7ff fdc4 	bl	26dba <net_linkaddr_set>
		if (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED) {
   27232:	7833      	ldrb	r3, [r6, #0]
   27234:	065b      	lsls	r3, r3, #25
   27236:	d50a      	bpl.n	2724e <handle_na_input+0x262>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   27238:	2101      	movs	r1, #1
   2723a:	4628      	mov	r0, r5
   2723c:	f7eb ff4c 	bl	130d8 <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->reachable = 0;
   27240:	2000      	movs	r0, #0
   27242:	2100      	movs	r1, #0
   27244:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   27246:	2200      	movs	r2, #0
			net_ipv6_nbr_data(nbr)->reachable = 0;
   27248:	e9c3 0106 	strd	r0, r1, [r3, #24]
	return (struct net_ipv6_nbr_data *)nbr->data;
   2724c:	e788      	b.n	27160 <handle_na_input+0x174>
			if (lladdr_changed) {
   2724e:	f1b9 0f00 	cmp.w	r9, #0
   27252:	d0c9      	beq.n	271e8 <handle_na_input+0x1fc>
				ipv6_nbr_set_state(nbr,
   27254:	2102      	movs	r1, #2
   27256:	4628      	mov	r0, r5
   27258:	f7eb ff3e 	bl	130d8 <ipv6_nbr_set_state>
   2725c:	e7c4      	b.n	271e8 <handle_na_input+0x1fc>
			net_ipv6_nbr_data(nbr)->pending = NULL;
   2725e:	2200      	movs	r2, #0
   27260:	68eb      	ldr	r3, [r5, #12]
   27262:	601a      	str	r2, [r3, #0]
   27264:	e7d0      	b.n	27208 <handle_na_input+0x21c>

00027266 <net_ipv6_nbr_add>:
{
   27266:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2726a:	4615      	mov	r5, r2
   2726c:	461a      	mov	r2, r3
	nbr = add_nbr(iface, addr, is_router, state);
   2726e:	f89d 3020 	ldrb.w	r3, [sp, #32]
{
   27272:	4607      	mov	r7, r0
   27274:	4688      	mov	r8, r1
	nbr = add_nbr(iface, addr, is_router, state);
   27276:	f7eb ffcb 	bl	13210 <add_nbr>
	if (!nbr) {
   2727a:	4604      	mov	r4, r0
   2727c:	b388      	cbz	r0, 272e2 <net_ipv6_nbr_add+0x7c>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   2727e:	462a      	mov	r2, r5
   27280:	4639      	mov	r1, r7
   27282:	f7eb fe37 	bl	12ef4 <net_nbr_link>
   27286:	3078      	adds	r0, #120	; 0x78
   27288:	d11a      	bne.n	272c0 <net_ipv6_nbr_add+0x5a>
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   2728a:	68e3      	ldr	r3, [r4, #12]
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   2728c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   27290:	2b05      	cmp	r3, #5
   27292:	d026      	beq.n	272e2 <net_ipv6_nbr_add+0x7c>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   27294:	7860      	ldrb	r0, [r4, #1]
   27296:	f7eb fea7 	bl	12fe8 <net_nbr_get_lladdr>
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   2729a:	792a      	ldrb	r2, [r5, #4]
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   2729c:	4606      	mov	r6, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   2729e:	6829      	ldr	r1, [r5, #0]
   272a0:	3002      	adds	r0, #2
   272a2:	f002 f8d8 	bl	29456 <memcmp>
   272a6:	b1b8      	cbz	r0, 272d8 <net_ipv6_nbr_add+0x72>
			dbg_update_neighbor_lladdr(lladdr, cached_lladdr, addr);
   272a8:	4630      	mov	r0, r6
   272aa:	f7eb fec7 	bl	1303c <dbg_update_neighbor_lladdr.isra.0>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   272ae:	4630      	mov	r0, r6
   272b0:	792a      	ldrb	r2, [r5, #4]
   272b2:	6829      	ldr	r1, [r5, #0]
   272b4:	f7ff fd81 	bl	26dba <net_linkaddr_set>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   272b8:	2102      	movs	r1, #2
   272ba:	4620      	mov	r0, r4
   272bc:	f7eb ff0c 	bl	130d8 <ipv6_nbr_set_state>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   272c0:	68e3      	ldr	r3, [r4, #12]
   272c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   272c6:	b963      	cbnz	r3, 272e2 <net_ipv6_nbr_add+0x7c>
		ret = net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   272c8:	461a      	mov	r2, r3
   272ca:	4619      	mov	r1, r3
   272cc:	4638      	mov	r0, r7
   272ce:	e9cd 8300 	strd	r8, r3, [sp]
   272d2:	f7eb fff9 	bl	132c8 <net_ipv6_send_ns>
		if (ret < 0) {
   272d6:	e004      	b.n	272e2 <net_ipv6_nbr_add+0x7c>
		} else if (net_ipv6_nbr_data(nbr)->state ==
   272d8:	68e3      	ldr	r3, [r4, #12]
   272da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   272de:	2b00      	cmp	r3, #0
   272e0:	d0ea      	beq.n	272b8 <net_ipv6_nbr_add+0x52>
}
   272e2:	4620      	mov	r0, r4
   272e4:	b002      	add	sp, #8
   272e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000272ea <handle_ns_input>:
{
   272ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
   272ee:	2314      	movs	r3, #20
   272f0:	2600      	movs	r6, #0
{
   272f2:	b090      	sub	sp, #64	; 0x40
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
   272f4:	e9cd 6304 	strd	r6, r3, [sp, #16]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   272f8:	ab03      	add	r3, sp, #12
   272fa:	9306      	str	r3, [sp, #24]
   272fc:	2302      	movs	r3, #2
{
   272fe:	4604      	mov	r4, r0
   27300:	460d      	mov	r5, r1
   27302:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   27304:	9307      	str	r3, [sp, #28]
	u16_t length = net_pkt_get_len(pkt);
   27306:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   27308:	b963      	cbnz	r3, 27324 <handle_ns_input+0x3a>
	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
   2730a:	4620      	mov	r0, r4
   2730c:	a904      	add	r1, sp, #16
	src_lladdr.len = 0;
   2730e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
   27312:	f7ff f920 	bl	26556 <net_pkt_get_data>
	u16_t length = net_pkt_get_len(pkt);
   27316:	b2b6      	uxth	r6, r6
	if (!ns_hdr) {
   27318:	4607      	mov	r7, r0
   2731a:	b938      	cbnz	r0, 2732c <handle_ns_input+0x42>
	return NET_DROP;
   2731c:	2002      	movs	r0, #2
}
   2731e:	b010      	add	sp, #64	; 0x40
   27320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   27324:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   27326:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   27328:	4416      	add	r6, r2
		buf = buf->frags;
   2732a:	e7ed      	b.n	27308 <handle_ns_input+0x1e>
	if (((length < (sizeof(struct net_ipv6_hdr) +
   2732c:	2e3f      	cmp	r6, #63	; 0x3f
   2732e:	d902      	bls.n	27336 <handle_ns_input+0x4c>
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   27330:	79eb      	ldrb	r3, [r5, #7]
   27332:	2bff      	cmp	r3, #255	; 0xff
   27334:	d006      	beq.n	27344 <handle_ns_input+0x5a>
	    (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT)) &&
   27336:	793b      	ldrb	r3, [r7, #4]
   27338:	2bff      	cmp	r3, #255	; 0xff
   2733a:	d103      	bne.n	27344 <handle_ns_input+0x5a>
	    (net_ipv6_is_addr_mcast(&ns_hdr->tgt) && icmp_hdr->code != 0U)) {
   2733c:	f898 3001 	ldrb.w	r3, [r8, #1]
   27340:	2b00      	cmp	r3, #0
   27342:	d1eb      	bne.n	2731c <handle_ns_input+0x32>
   27344:	9905      	ldr	r1, [sp, #20]
   27346:	4620      	mov	r0, r4
   27348:	f7fe ffa9 	bl	2629e <net_pkt_skip>
	pkt->ipv6_ext_opt_len = len;
   2734c:	2314      	movs	r3, #20
				net_pkt_get_data(pkt, &nd_access);
   2734e:	4620      	mov	r0, r4
   27350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   27354:	a906      	add	r1, sp, #24
   27356:	f7ff f8fe 	bl	26556 <net_pkt_get_data>
   2735a:	4682      	mov	sl, r0
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
   2735c:	3e2c      	subs	r6, #44	; 0x2c
   2735e:	b2b6      	uxth	r6, r6
			if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   27360:	f105 0808 	add.w	r8, r5, #8
			src_lladdr.addr = src_lladdr_s.addr;
   27364:	f10d 0922 	add.w	r9, sp, #34	; 0x22
	while (nd_opt_hdr && nd_opt_hdr->len > 0 &&
   27368:	f1ba 0f00 	cmp.w	sl, #0
   2736c:	d006      	beq.n	2737c <handle_ns_input+0x92>
   2736e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   27372:	b11b      	cbz	r3, 2737c <handle_ns_input+0x92>
   27374:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   27378:	42b3      	cmp	r3, r6
   2737a:	d331      	bcc.n	273e0 <handle_ns_input+0xf6>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   2737c:	3704      	adds	r7, #4
   2737e:	4639      	mov	r1, r7
   27380:	6a20      	ldr	r0, [r4, #32]
   27382:	f7fd fe53 	bl	2502c <net_if_ipv6_addr_lookup_by_iface>
	if (!ifaddr) {
   27386:	4682      	mov	sl, r0
   27388:	2800      	cmp	r0, #0
   2738a:	d0c7      	beq.n	2731c <handle_ns_input+0x32>
	if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   2738c:	f105 0808 	add.w	r8, r5, #8
		tgt = &ifaddr->address.in6_addr;
   27390:	1d06      	adds	r6, r0, #4
	if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   27392:	4640      	mov	r0, r8
   27394:	f7ff fca4 	bl	26ce0 <net_ipv6_is_addr_unspecified>
		na_src = &ip_hdr->dst;
   27398:	f105 0918 	add.w	r9, r5, #24
	if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   2739c:	4601      	mov	r1, r0
   2739e:	2800      	cmp	r0, #0
   273a0:	d07f      	beq.n	274a2 <handle_ns_input+0x1b8>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   273a2:	f240 23ff 	movw	r3, #767	; 0x2ff
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   273a6:	69aa      	ldr	r2, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   273a8:	429a      	cmp	r2, r3
   273aa:	d1b7      	bne.n	2731c <handle_ns_input+0x32>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   273ac:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   273ae:	2b00      	cmp	r3, #0
   273b0:	d1b4      	bne.n	2731c <handle_ns_input+0x32>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   273b2:	6a2b      	ldr	r3, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   273b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   273b8:	d1b0      	bne.n	2731c <handle_ns_input+0x32>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   273ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   273bc:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   273be:	2bff      	cmp	r3, #255	; 0xff
   273c0:	d1ac      	bne.n	2731c <handle_ns_input+0x32>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   273c2:	f99a 302d 	ldrsb.w	r3, [sl, #45]	; 0x2d
   273c6:	2b00      	cmp	r3, #0
   273c8:	d137      	bne.n	2743a <handle_ns_input+0x150>
	if (net_ipv6_is_ll_addr(addr)) {
   273ca:	f248 03fe 	movw	r3, #33022	; 0x80fe
   273ce:	f8ba 2004 	ldrh.w	r2, [sl, #4]
   273d2:	429a      	cmp	r2, r3
   273d4:	d0a2      	beq.n	2731c <handle_ns_input+0x32>
	net_if_ipv6_dad_failed(iface, addr);
   273d6:	4631      	mov	r1, r6
   273d8:	6a20      	ldr	r0, [r4, #32]
   273da:	f7ea fee1 	bl	121a0 <net_if_ipv6_dad_failed>
   273de:	e79d      	b.n	2731c <handle_ns_input+0x32>
	return net_pkt_skip(pkt, access->size);
   273e0:	4620      	mov	r0, r4
   273e2:	9907      	ldr	r1, [sp, #28]
   273e4:	f7fe ff5b 	bl	2629e <net_pkt_skip>
		switch (nd_opt_hdr->type) {
   273e8:	f89a 3000 	ldrb.w	r3, [sl]
   273ec:	2b01      	cmp	r3, #1
   273ee:	d112      	bne.n	27416 <handle_ns_input+0x12c>
			if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   273f0:	4640      	mov	r0, r8
   273f2:	f7ff fc75 	bl	26ce0 <net_ipv6_is_addr_unspecified>
   273f6:	2800      	cmp	r0, #0
   273f8:	d190      	bne.n	2731c <handle_ns_input+0x32>
			if (!read_llao(pkt, nd_opt_hdr->len, &src_lladdr_s)) {
   273fa:	4620      	mov	r0, r4
   273fc:	f89a 1001 	ldrb.w	r1, [sl, #1]
   27400:	aa08      	add	r2, sp, #32
   27402:	f7ff fceb 	bl	26ddc <read_llao>
   27406:	2800      	cmp	r0, #0
   27408:	d088      	beq.n	2731c <handle_ns_input+0x32>
			src_lladdr.len = src_lladdr_s.len;
   2740a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
			src_lladdr.addr = src_lladdr_s.addr;
   2740e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
			src_lladdr.len = src_lladdr_s.len;
   27412:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
		prev_opt_len = net_pkt_ipv6_ext_opt_len(pkt);
   27416:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
					     (nd_opt_hdr->len << 3));
   2741a:	f89a 3001 	ldrb.w	r3, [sl, #1]
					     net_pkt_ipv6_ext_opt_len(pkt) +
   2741e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   27422:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   27424:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
   27426:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2742a:	f67f af77 	bls.w	2731c <handle_ns_input+0x32>
					net_pkt_get_data(pkt, &nd_access);
   2742e:	4620      	mov	r0, r4
   27430:	a906      	add	r1, sp, #24
   27432:	f7ff f890 	bl	26556 <net_pkt_get_data>
   27436:	4682      	mov	sl, r0
   27438:	e796      	b.n	27368 <handle_ns_input+0x7e>
		net_ipv6_addr_create_ll_allnodes_mcast(&ip_hdr->dst);
   2743a:	4648      	mov	r0, r9
   2743c:	f7ff fcf0 	bl	26e20 <net_ipv6_addr_create_ll_allnodes_mcast>
		net_ipaddr_copy(&ip_hdr->src,
   27440:	4649      	mov	r1, r9
   27442:	6a20      	ldr	r0, [r4, #32]
   27444:	f7eb f862 	bl	1250c <net_if_ipv6_select_src_addr>
   27448:	ad0c      	add	r5, sp, #48	; 0x30
   2744a:	4603      	mov	r3, r0
   2744c:	462a      	mov	r2, r5
   2744e:	f100 0c10 	add.w	ip, r0, #16
   27452:	462f      	mov	r7, r5
   27454:	6818      	ldr	r0, [r3, #0]
   27456:	6859      	ldr	r1, [r3, #4]
   27458:	3308      	adds	r3, #8
   2745a:	c703      	stmia	r7!, {r0, r1}
   2745c:	4563      	cmp	r3, ip
   2745e:	463d      	mov	r5, r7
   27460:	d1f7      	bne.n	27452 <handle_ns_input+0x168>
   27462:	4645      	mov	r5, r8
   27464:	af10      	add	r7, sp, #64	; 0x40
   27466:	4613      	mov	r3, r2
   27468:	cb03      	ldmia	r3!, {r0, r1}
   2746a:	42bb      	cmp	r3, r7
   2746c:	6028      	str	r0, [r5, #0]
   2746e:	6069      	str	r1, [r5, #4]
   27470:	461a      	mov	r2, r3
   27472:	f105 0508 	add.w	r5, r5, #8
   27476:	d1f6      	bne.n	27466 <handle_ns_input+0x17c>
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   27478:	2520      	movs	r5, #32
		na_src = &ip_hdr->src;
   2747a:	4647      	mov	r7, r8
	if (src_lladdr.len) {
   2747c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   27480:	bb7b      	cbnz	r3, 274e2 <handle_ns_input+0x1f8>
	if (!net_ipv6_send_na(net_pkt_iface(pkt), na_src,
   27482:	9500      	str	r5, [sp, #0]
   27484:	4633      	mov	r3, r6
   27486:	464a      	mov	r2, r9
   27488:	4639      	mov	r1, r7
   2748a:	6a20      	ldr	r0, [r4, #32]
   2748c:	f7ff fd24 	bl	26ed8 <net_ipv6_send_na>
   27490:	4605      	mov	r5, r0
   27492:	2800      	cmp	r0, #0
   27494:	f47f af42 	bne.w	2731c <handle_ns_input+0x32>
		net_pkt_unref(pkt);
   27498:	4620      	mov	r0, r4
   2749a:	f7fe fe06 	bl	260aa <net_pkt_unref>
		return NET_OK;
   2749e:	4628      	mov	r0, r5
   274a0:	e73d      	b.n	2731e <handle_ns_input+0x34>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   274a2:	4640      	mov	r0, r8
   274a4:	f7ea fd84 	bl	11fb0 <net_if_ipv6_addr_lookup>
	if (net_ipv6_is_my_addr(&ip_hdr->src)) {
   274a8:	2800      	cmp	r0, #0
   274aa:	f47f af37 	bne.w	2731c <handle_ns_input+0x32>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   274ae:	f240 23ff 	movw	r3, #767	; 0x2ff
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   274b2:	69aa      	ldr	r2, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   274b4:	429a      	cmp	r2, r3
   274b6:	d109      	bne.n	274cc <handle_ns_input+0x1e2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   274b8:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   274ba:	b93b      	cbnz	r3, 274cc <handle_ns_input+0x1e2>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   274bc:	6a2b      	ldr	r3, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   274be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   274c2:	d103      	bne.n	274cc <handle_ns_input+0x1e2>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   274c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   274c6:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   274c8:	2bff      	cmp	r3, #255	; 0xff
   274ca:	d007      	beq.n	274dc <handle_ns_input+0x1f2>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   274cc:	4649      	mov	r1, r9
   274ce:	6a20      	ldr	r0, [r4, #32]
   274d0:	f7fd fdac 	bl	2502c <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   274d4:	2800      	cmp	r0, #0
   274d6:	f43f af21 	beq.w	2731c <handle_ns_input+0x32>
		tgt = &ifaddr->address.in6_addr;
   274da:	1d06      	adds	r6, r0, #4
		na_dst = &ip_hdr->src;
   274dc:	46c1      	mov	r9, r8
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   274de:	2560      	movs	r5, #96	; 0x60
   274e0:	e7cc      	b.n	2747c <handle_ns_input+0x192>
		if (!net_ipv6_nbr_add(net_pkt_iface(pkt),
   274e2:	2300      	movs	r3, #0
   274e4:	4641      	mov	r1, r8
   274e6:	6a20      	ldr	r0, [r4, #32]
   274e8:	9300      	str	r3, [sp, #0]
   274ea:	aa0a      	add	r2, sp, #40	; 0x28
   274ec:	f7ff febb 	bl	27266 <net_ipv6_nbr_add>
   274f0:	2800      	cmp	r0, #0
   274f2:	d1c6      	bne.n	27482 <handle_ns_input+0x198>
   274f4:	e712      	b.n	2731c <handle_ns_input+0x32>

000274f6 <net_ipv6_start_dad>:
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   274f6:	2301      	movs	r3, #1
{
   274f8:	b507      	push	{r0, r1, r2, lr}
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   274fa:	9301      	str	r3, [sp, #4]
   274fc:	2300      	movs	r3, #0
				&ifaddr->address.in6_addr, true);
   274fe:	3104      	adds	r1, #4
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   27500:	9100      	str	r1, [sp, #0]
   27502:	461a      	mov	r2, r3
   27504:	4619      	mov	r1, r3
   27506:	f7eb fedf 	bl	132c8 <net_ipv6_send_ns>
}
   2750a:	b003      	add	sp, #12
   2750c:	f85d fb04 	ldr.w	pc, [sp], #4

00027510 <net_ipv6_prepare_for_send>:
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   27510:	2300      	movs	r3, #0
   27512:	2228      	movs	r2, #40	; 0x28
{
   27514:	b5f0      	push	{r4, r5, r6, r7, lr}
   27516:	b087      	sub	sp, #28
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   27518:	a904      	add	r1, sp, #16
{
   2751a:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   2751c:	e9cd 3204 	strd	r3, r2, [sp, #16]
	struct net_if *iface = NULL;
   27520:	9303      	str	r3, [sp, #12]
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   27522:	f7ff f818 	bl	26556 <net_pkt_get_data>
	if (!ip_hdr) {
   27526:	4607      	mov	r7, r0
   27528:	b910      	cbnz	r0, 27530 <net_ipv6_prepare_for_send+0x20>
			return NET_DROP;
   2752a:	2002      	movs	r0, #2
}
   2752c:	b007      	add	sp, #28
   2752e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((net_pkt_lladdr_dst(pkt)->addr &&
   27530:	6b23      	ldr	r3, [r4, #48]	; 0x30
   27532:	b10b      	cbz	r3, 27538 <net_ipv6_prepare_for_send+0x28>
		return NET_OK;
   27534:	2000      	movs	r0, #0
   27536:	e7f9      	b.n	2752c <net_ipv6_prepare_for_send+0x1c>
	      !IS_ENABLED(CONFIG_NET_ROUTING))) ||
   27538:	7e03      	ldrb	r3, [r0, #24]
   2753a:	2bff      	cmp	r3, #255	; 0xff
   2753c:	d0fa      	beq.n	27534 <net_ipv6_prepare_for_send+0x24>
	    net_if_flag_is_set(net_pkt_iface(pkt),
   2753e:	6a23      	ldr	r3, [r4, #32]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27540:	681b      	ldr	r3, [r3, #0]
   27542:	330c      	adds	r3, #12
   27544:	e8d3 3faf 	lda	r3, [r3]
	    net_ipv6_is_addr_mcast(&ip_hdr->dst) ||
   27548:	079b      	lsls	r3, r3, #30
   2754a:	d4f3      	bmi.n	27534 <net_ipv6_prepare_for_send+0x24>
	if (net_if_ipv6_addr_onlink(&iface, &ip_hdr->dst)) {
   2754c:	f100 0518 	add.w	r5, r0, #24
   27550:	4629      	mov	r1, r5
   27552:	a803      	add	r0, sp, #12
   27554:	f7ea ff0c 	bl	12370 <net_if_ipv6_addr_onlink>
   27558:	2800      	cmp	r0, #0
   2755a:	d03d      	beq.n	275d8 <net_ipv6_prepare_for_send+0xc8>
		net_pkt_set_iface(pkt, iface);
   2755c:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   2755e:	6223      	str	r3, [r4, #32]
	if (iface) {
   27560:	b13b      	cbz	r3, 27572 <net_ipv6_prepare_for_send+0x62>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   27562:	681a      	ldr	r2, [r3, #0]
   27564:	7d52      	ldrb	r2, [r2, #21]
   27566:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   2756a:	681b      	ldr	r3, [r3, #0]
   2756c:	7d5b      	ldrb	r3, [r3, #21]
   2756e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	if (!iface) {
   27572:	9b03      	ldr	r3, [sp, #12]
   27574:	b983      	cbnz	r3, 27598 <net_ipv6_prepare_for_send+0x88>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   27576:	4629      	mov	r1, r5
   27578:	a803      	add	r0, sp, #12
   2757a:	f7ea fef9 	bl	12370 <net_if_ipv6_addr_onlink>
   2757e:	2800      	cmp	r0, #0
   27580:	d040      	beq.n	27604 <net_ipv6_prepare_for_send+0xf4>
			net_pkt_set_iface(pkt, iface);
   27582:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   27584:	6223      	str	r3, [r4, #32]
	if (iface) {
   27586:	b13b      	cbz	r3, 27598 <net_ipv6_prepare_for_send+0x88>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   27588:	681a      	ldr	r2, [r3, #0]
   2758a:	7d52      	ldrb	r2, [r2, #21]
   2758c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   27590:	681b      	ldr	r3, [r3, #0]
   27592:	7d5b      	ldrb	r3, [r3, #21]
   27594:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	nbr = nbr_lookup(&net_neighbor.table, iface, nexthop);
   27598:	4629      	mov	r1, r5
   2759a:	9803      	ldr	r0, [sp, #12]
   2759c:	f7eb fd2c 	bl	12ff8 <nbr_lookup.isra.0>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   275a0:	4606      	mov	r6, r0
   275a2:	b390      	cbz	r0, 2760a <net_ipv6_prepare_for_send+0xfa>
   275a4:	7840      	ldrb	r0, [r0, #1]
   275a6:	28ff      	cmp	r0, #255	; 0xff
   275a8:	d02f      	beq.n	2760a <net_ipv6_prepare_for_send+0xfa>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   275aa:	f7eb fd1d 	bl	12fe8 <net_nbr_get_lladdr>
		net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
   275ae:	1c83      	adds	r3, r0, #2
   275b0:	6323      	str	r3, [r4, #48]	; 0x30
		net_pkt_lladdr_dst(pkt)->len = lladdr->len;
   275b2:	7843      	ldrb	r3, [r0, #1]
   275b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   275b8:	68f3      	ldr	r3, [r6, #12]
   275ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   275be:	2b02      	cmp	r3, #2
   275c0:	d1b8      	bne.n	27534 <net_ipv6_prepare_for_send+0x24>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   275c2:	4630      	mov	r0, r6
   275c4:	2103      	movs	r1, #3
   275c6:	f7eb fd87 	bl	130d8 <ipv6_nbr_set_state>
			ipv6_nd_restart_reachable_timer(nbr,
   275ca:	f241 3288 	movw	r2, #5000	; 0x1388
   275ce:	2300      	movs	r3, #0
   275d0:	4630      	mov	r0, r6
   275d2:	f7eb fd47 	bl	13064 <ipv6_nd_restart_reachable_timer>
   275d6:	e7ad      	b.n	27534 <net_ipv6_prepare_for_send+0x24>
	route = net_route_lookup(iface, dst);
   275d8:	4629      	mov	r1, r5
   275da:	f7ec fa2d 	bl	13a38 <net_route_lookup>
	if (route) {
   275de:	4606      	mov	r6, r0
   275e0:	b140      	cbz	r0, 275f4 <net_ipv6_prepare_for_send+0xe4>
		nexthop = net_route_get_nexthop(route);
   275e2:	f000 fa55 	bl	27a90 <net_route_get_nexthop>
		if (!nexthop) {
   275e6:	4605      	mov	r5, r0
   275e8:	2800      	cmp	r0, #0
   275ea:	d1c2      	bne.n	27572 <net_ipv6_prepare_for_send+0x62>
			net_route_del(route);
   275ec:	4630      	mov	r0, r6
   275ee:	f000 fa32 	bl	27a56 <net_route_del>
   275f2:	e79a      	b.n	2752a <net_ipv6_prepare_for_send+0x1a>
		router = net_if_ipv6_router_find_default(NULL, dst);
   275f4:	4629      	mov	r1, r5
   275f6:	f7ea ff19 	bl	1242c <net_if_ipv6_router_find_default>
		if (!router) {
   275fa:	b188      	cbz	r0, 27620 <net_ipv6_prepare_for_send+0x110>
		if (!nexthop) {
   275fc:	f110 0508 	adds.w	r5, r0, #8
   27600:	d1b7      	bne.n	27572 <net_ipv6_prepare_for_send+0x62>
   27602:	e792      	b.n	2752a <net_ipv6_prepare_for_send+0x1a>
			iface = net_pkt_iface(pkt);
   27604:	6a23      	ldr	r3, [r4, #32]
   27606:	9303      	str	r3, [sp, #12]
   27608:	e7c6      	b.n	27598 <net_ipv6_prepare_for_send+0x88>
	ret = net_ipv6_send_ns(net_pkt_iface(pkt), pkt,
   2760a:	2300      	movs	r3, #0
   2760c:	e9cd 5300 	strd	r5, r3, [sp]
   27610:	4621      	mov	r1, r4
   27612:	6a20      	ldr	r0, [r4, #32]
   27614:	f107 0208 	add.w	r2, r7, #8
   27618:	f7eb fe56 	bl	132c8 <net_ipv6_send_ns>
	return NET_CONTINUE;
   2761c:	2001      	movs	r0, #1
   2761e:	e785      	b.n	2752c <net_ipv6_prepare_for_send+0x1c>
		if (!nexthop) {
   27620:	2d00      	cmp	r5, #0
   27622:	d1b9      	bne.n	27598 <net_ipv6_prepare_for_send+0x88>
   27624:	e781      	b.n	2752a <net_ipv6_prepare_for_send+0x1a>

00027626 <net_ipv6_send_rs>:
{
   27626:	b5f0      	push	{r4, r5, r6, r7, lr}
   27628:	4607      	mov	r7, r0
   2762a:	b087      	sub	sp, #28
	net_ipv6_addr_create_ll_allnodes_mcast(&dst);
   2762c:	a802      	add	r0, sp, #8
   2762e:	f7ff fbf7 	bl	26e20 <net_ipv6_addr_create_ll_allnodes_mcast>
	src = net_if_ipv6_select_src_addr(iface, &dst);
   27632:	4638      	mov	r0, r7
   27634:	a902      	add	r1, sp, #8
   27636:	f7ea ff69 	bl	1250c <net_if_ipv6_select_src_addr>
   2763a:	4606      	mov	r6, r0
	if (!net_ipv6_is_addr_unspecified(src)) {
   2763c:	f7ff fb50 	bl	26ce0 <net_ipv6_is_addr_unspecified>
   27640:	bb18      	cbnz	r0, 2768a <net_ipv6_send_rs+0x64>
	u8_t total_len = net_if_get_link_addr(iface)->len +
   27642:	683b      	ldr	r3, [r7, #0]
	return ROUND_UP(total_len, 8U);
   27644:	7d1d      	ldrb	r5, [r3, #20]
   27646:	3509      	adds	r5, #9
   27648:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
	pkt = net_pkt_alloc_with_buffer(iface,
   2764c:	f640 42cd 	movw	r2, #3277	; 0xccd
   27650:	2300      	movs	r3, #0
   27652:	4638      	mov	r0, r7
   27654:	e9cd 2300 	strd	r2, r3, [sp]
   27658:	1d29      	adds	r1, r5, #4
   2765a:	233a      	movs	r3, #58	; 0x3a
   2765c:	2202      	movs	r2, #2
   2765e:	f7eb fba5 	bl	12dac <net_pkt_alloc_with_buffer>
	if (!pkt) {
   27662:	4604      	mov	r4, r0
   27664:	2800      	cmp	r0, #0
   27666:	d03a      	beq.n	276de <net_ipv6_send_rs+0xb8>
	pkt->ipv6_hop_limit = hop_limit;
   27668:	23ff      	movs	r3, #255	; 0xff
	if (net_ipv6_create(pkt, src, &dst) ||
   2766a:	aa02      	add	r2, sp, #8
   2766c:	4631      	mov	r1, r6
   2766e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   27672:	f7ff f907 	bl	26884 <net_ipv6_create>
   27676:	4602      	mov	r2, r0
   27678:	b148      	cbz	r0, 2768e <net_ipv6_send_rs+0x68>
	int ret = -ENOBUFS;
   2767a:	f06f 0668 	mvn.w	r6, #104	; 0x68
	net_pkt_unref(pkt);
   2767e:	4620      	mov	r0, r4
   27680:	f7fe fd13 	bl	260aa <net_pkt_unref>
}
   27684:	4630      	mov	r0, r6
   27686:	b007      	add	sp, #28
   27688:	bdf0      	pop	{r4, r5, r6, r7, pc}
	u8_t llao_len = 0U;
   2768a:	2500      	movs	r5, #0
   2768c:	e7de      	b.n	2764c <net_ipv6_send_rs+0x26>
	    net_icmpv6_create(pkt, NET_ICMPV6_RS, 0) ||
   2768e:	2185      	movs	r1, #133	; 0x85
   27690:	4620      	mov	r0, r4
   27692:	f7fe ffb3 	bl	265fc <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, &dst) ||
   27696:	4601      	mov	r1, r0
   27698:	2800      	cmp	r0, #0
   2769a:	d1ee      	bne.n	2767a <net_ipv6_send_rs+0x54>
	    net_pkt_memset(pkt, 0, sizeof(struct net_icmpv6_rs_hdr))) {
   2769c:	2204      	movs	r2, #4
   2769e:	4620      	mov	r0, r4
   276a0:	f7fe fe08 	bl	262b4 <net_pkt_memset>
	    net_icmpv6_create(pkt, NET_ICMPV6_RS, 0) ||
   276a4:	4606      	mov	r6, r0
   276a6:	2800      	cmp	r0, #0
   276a8:	d1e7      	bne.n	2767a <net_ipv6_send_rs+0x54>
	if (llao_len > 0) {
   276aa:	b975      	cbnz	r5, 276ca <net_ipv6_send_rs+0xa4>
	net_pkt_cursor_init(pkt);
   276ac:	4620      	mov	r0, r4
   276ae:	f7fe fd6c 	bl	2618a <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   276b2:	213a      	movs	r1, #58	; 0x3a
   276b4:	4620      	mov	r0, r4
   276b6:	f7ff f948 	bl	2694a <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
   276ba:	4620      	mov	r0, r4
   276bc:	f7fd fb8d 	bl	24dda <net_send_data>
   276c0:	2800      	cmp	r0, #0
   276c2:	dadf      	bge.n	27684 <net_ipv6_send_rs+0x5e>
		ret = -EINVAL;
   276c4:	f06f 0615 	mvn.w	r6, #21
   276c8:	e7d9      	b.n	2767e <net_ipv6_send_rs+0x58>
	return &iface->if_dev->link_addr;
   276ca:	6839      	ldr	r1, [r7, #0]
		if (!set_llao(pkt, net_if_get_link_addr(iface),
   276cc:	2301      	movs	r3, #1
   276ce:	462a      	mov	r2, r5
   276d0:	4620      	mov	r0, r4
   276d2:	3110      	adds	r1, #16
   276d4:	f7ff fb4e 	bl	26d74 <set_llao>
   276d8:	2800      	cmp	r0, #0
   276da:	d1e7      	bne.n	276ac <net_ipv6_send_rs+0x86>
   276dc:	e7cd      	b.n	2767a <net_ipv6_send_rs+0x54>
		return -ENOMEM;
   276de:	f06f 060b 	mvn.w	r6, #11
   276e2:	e7cf      	b.n	27684 <net_ipv6_send_rs+0x5e>

000276e4 <net_ipv6_start_rs>:
	return net_ipv6_send_rs(iface);
   276e4:	f7ff bf9f 	b.w	27626 <net_ipv6_send_rs>

000276e8 <net_pkt_write_be16>:
{
   276e8:	b507      	push	{r0, r1, r2, lr}
	u16_t data_be16 = htons(data);
   276ea:	ba49      	rev16	r1, r1
   276ec:	f8ad 1006 	strh.w	r1, [sp, #6]
	return net_pkt_write(pkt, &data_be16, sizeof(u16_t));
   276f0:	2202      	movs	r2, #2
   276f2:	f10d 0106 	add.w	r1, sp, #6
   276f6:	f7fe ff12 	bl	2651e <net_pkt_write>
}
   276fa:	b003      	add	sp, #12
   276fc:	f85d fb04 	ldr.w	pc, [sp], #4

00027700 <mld_create>:
{
   27700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27704:	461f      	mov	r7, r3
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
   27706:	2314      	movs	r3, #20
{
   27708:	b08d      	sub	sp, #52	; 0x34
   2770a:	460d      	mov	r5, r1
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
   2770c:	f10d 081c 	add.w	r8, sp, #28
				net_pkt_get_data(pkt, &mld_access);
   27710:	a901      	add	r1, sp, #4
{
   27712:	4606      	mov	r6, r0
   27714:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
   27716:	f8cd 8004 	str.w	r8, [sp, #4]
   2771a:	9302      	str	r3, [sp, #8]
				net_pkt_get_data(pkt, &mld_access);
   2771c:	f7fe ff1b 	bl	26556 <net_pkt_get_data>
	if (!mld) {
   27720:	4604      	mov	r4, r0
   27722:	b368      	cbz	r0, 27780 <mld_create+0x80>
	mld->aux_data_len = 0U;
   27724:	2300      	movs	r3, #0
	net_ipaddr_copy(&mld->mcast_address, addr);
   27726:	462a      	mov	r2, r5
	mld->aux_data_len = 0U;
   27728:	7043      	strb	r3, [r0, #1]
	net_ipaddr_copy(&mld->mcast_address, addr);
   2772a:	ad03      	add	r5, sp, #12
	mld->num_sources = htons(num_sources);
   2772c:	023b      	lsls	r3, r7, #8
   2772e:	8043      	strh	r3, [r0, #2]
   27730:	462b      	mov	r3, r5
	mld->record_type = record_type;
   27732:	f880 9000 	strb.w	r9, [r0]
	net_ipaddr_copy(&mld->mcast_address, addr);
   27736:	f102 0e10 	add.w	lr, r2, #16
   2773a:	46ac      	mov	ip, r5
   2773c:	6810      	ldr	r0, [r2, #0]
   2773e:	6851      	ldr	r1, [r2, #4]
   27740:	3208      	adds	r2, #8
   27742:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   27746:	4572      	cmp	r2, lr
   27748:	4665      	mov	r5, ip
   2774a:	d1f6      	bne.n	2773a <mld_create+0x3a>
   2774c:	461a      	mov	r2, r3
   2774e:	3404      	adds	r4, #4
   27750:	4613      	mov	r3, r2
   27752:	cb03      	ldmia	r3!, {r0, r1}
   27754:	4543      	cmp	r3, r8
   27756:	6020      	str	r0, [r4, #0]
   27758:	6061      	str	r1, [r4, #4]
   2775a:	461a      	mov	r2, r3
   2775c:	f104 0408 	add.w	r4, r4, #8
   27760:	d1f6      	bne.n	27750 <mld_create+0x50>
	if (net_pkt_set_data(pkt, &mld_access)) {
   27762:	4630      	mov	r0, r6
   27764:	a901      	add	r1, sp, #4
   27766:	f7fe ff17 	bl	26598 <net_pkt_set_data>
   2776a:	4604      	mov	r4, r0
   2776c:	b940      	cbnz	r0, 27780 <mld_create+0x80>
	if (num_sources > 0) {
   2776e:	b14f      	cbz	r7, 27784 <mld_create+0x84>
				  net_ipv6_unspecified_address()->s6_addr,
   27770:	f7eb f848 	bl	12804 <net_ipv6_unspecified_address>
		if (net_pkt_write(pkt,
   27774:	2210      	movs	r2, #16
				  net_ipv6_unspecified_address()->s6_addr,
   27776:	4601      	mov	r1, r0
		if (net_pkt_write(pkt,
   27778:	4630      	mov	r0, r6
   2777a:	f7fe fed0 	bl	2651e <net_pkt_write>
   2777e:	b108      	cbz	r0, 27784 <mld_create+0x84>
			return -ENOBUFS;
   27780:	f06f 0468 	mvn.w	r4, #104	; 0x68
}
   27784:	4620      	mov	r0, r4
   27786:	b00d      	add	sp, #52	; 0x34
   27788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002778c <mld_send>:
{
   2778c:	b510      	push	{r4, lr}
   2778e:	4604      	mov	r4, r0
	net_pkt_cursor_init(pkt);
   27790:	f7fe fcfb 	bl	2618a <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   27794:	213a      	movs	r1, #58	; 0x3a
   27796:	4620      	mov	r0, r4
   27798:	f7ff f8d7 	bl	2694a <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
   2779c:	4620      	mov	r0, r4
   2779e:	f7fd fb1c 	bl	24dda <net_send_data>
   277a2:	2800      	cmp	r0, #0
   277a4:	da05      	bge.n	277b2 <mld_send+0x26>
		net_pkt_unref(pkt);
   277a6:	4620      	mov	r0, r4
   277a8:	f7fe fc7f 	bl	260aa <net_pkt_unref>
		return -1;
   277ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   277b0:	bd10      	pop	{r4, pc}
	return 0;
   277b2:	2000      	movs	r0, #0
   277b4:	e7fc      	b.n	277b0 <mld_send+0x24>

000277b6 <mld_create_packet>:
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   277b6:	f240 23ff 	movw	r3, #767	; 0x2ff
{
   277ba:	b570      	push	{r4, r5, r6, lr}
   277bc:	b086      	sub	sp, #24
   277be:	4604      	mov	r4, r0
   277c0:	460d      	mov	r5, r1
   277c2:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   277c6:	2300      	movs	r3, #0
   277c8:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   277cc:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   277d0:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   277d4:	f8ad 3010 	strh.w	r3, [sp, #16]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   277d8:	f8ad 3012 	strh.w	r3, [sp, #18]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   277dc:	f8ad 3014 	strh.w	r3, [sp, #20]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   277e0:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   277e4:	f8ad 3016 	strh.w	r3, [sp, #22]
	pkt->ipv6_hop_limit = hop_limit;
   277e8:	2601      	movs	r6, #1
	if (net_ipv6_create(pkt, net_if_ipv6_select_src_addr(
   277ea:	a902      	add	r1, sp, #8
   277ec:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
   277f0:	6a00      	ldr	r0, [r0, #32]
   277f2:	f7ea fe8b 	bl	1250c <net_if_ipv6_select_src_addr>
   277f6:	aa02      	add	r2, sp, #8
   277f8:	4601      	mov	r1, r0
   277fa:	4620      	mov	r0, r4
   277fc:	f7ff f842 	bl	26884 <net_ipv6_create>
   27800:	b118      	cbz	r0, 2780a <mld_create_packet+0x54>
		return -ENOBUFS;
   27802:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   27806:	b006      	add	sp, #24
   27808:	bd70      	pop	{r4, r5, r6, pc}
	if (net_pkt_write_u8(pkt, IPPROTO_ICMPV6) ||
   2780a:	233a      	movs	r3, #58	; 0x3a
	return net_pkt_write(pkt, &data, sizeof(u8_t));
   2780c:	4632      	mov	r2, r6
   2780e:	4620      	mov	r0, r4
   27810:	f10d 0107 	add.w	r1, sp, #7
   27814:	f88d 3007 	strb.w	r3, [sp, #7]
   27818:	f7fe fe81 	bl	2651e <net_pkt_write>
   2781c:	2800      	cmp	r0, #0
   2781e:	d1f0      	bne.n	27802 <mld_create_packet+0x4c>
   27820:	f88d 0007 	strb.w	r0, [sp, #7]
   27824:	4632      	mov	r2, r6
   27826:	4620      	mov	r0, r4
   27828:	f10d 0107 	add.w	r1, sp, #7
   2782c:	f7fe fe77 	bl	2651e <net_pkt_write>
   27830:	2800      	cmp	r0, #0
   27832:	d1e6      	bne.n	27802 <mld_create_packet+0x4c>
	if (net_pkt_write_be16(pkt, 0x0502) ||
   27834:	f240 5102 	movw	r1, #1282	; 0x502
   27838:	4620      	mov	r0, r4
   2783a:	f7ff ff55 	bl	276e8 <net_pkt_write_be16>
   2783e:	4601      	mov	r1, r0
   27840:	2800      	cmp	r0, #0
   27842:	d1de      	bne.n	27802 <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0) ||
   27844:	4620      	mov	r0, r4
   27846:	f7ff ff4f 	bl	276e8 <net_pkt_write_be16>
	if (net_pkt_write_be16(pkt, 0x0502) ||
   2784a:	4601      	mov	r1, r0
   2784c:	2800      	cmp	r0, #0
   2784e:	d1d8      	bne.n	27802 <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0)) {
   27850:	4620      	mov	r0, r4
   27852:	f7ff ff49 	bl	276e8 <net_pkt_write_be16>
	    net_pkt_write_be16(pkt, 0) ||
   27856:	4602      	mov	r2, r0
   27858:	2800      	cmp	r0, #0
   2785a:	d1d2      	bne.n	27802 <mld_create_packet+0x4c>
	pkt->ipv6_ext_len = len;
   2785c:	2308      	movs	r3, #8
	if (net_icmpv6_create(pkt, NET_ICMPV6_MLDv2, 0) ||
   2785e:	218f      	movs	r1, #143	; 0x8f
   27860:	4620      	mov	r0, r4
   27862:	87e3      	strh	r3, [r4, #62]	; 0x3e
   27864:	f7fe feca 	bl	265fc <net_icmpv6_create>
   27868:	4601      	mov	r1, r0
   2786a:	2800      	cmp	r0, #0
   2786c:	d1c9      	bne.n	27802 <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0) ||
   2786e:	4620      	mov	r0, r4
   27870:	f7ff ff3a 	bl	276e8 <net_pkt_write_be16>
	if (net_icmpv6_create(pkt, NET_ICMPV6_MLDv2, 0) ||
   27874:	2800      	cmp	r0, #0
   27876:	d1c4      	bne.n	27802 <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, count)) {
   27878:	4629      	mov	r1, r5
   2787a:	4620      	mov	r0, r4
   2787c:	f7ff ff34 	bl	276e8 <net_pkt_write_be16>
	    net_pkt_write_be16(pkt, 0) ||
   27880:	2800      	cmp	r0, #0
   27882:	d1be      	bne.n	27802 <mld_create_packet+0x4c>
	pkt->ipv6_next_hdr = next_hdr;
   27884:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
	return 0;
   27888:	e7bd      	b.n	27806 <mld_create_packet+0x50>

0002788a <mld_send_generic>:
{
   2788a:	b573      	push	{r0, r1, r4, r5, r6, lr}
					PKT_WAIT_TIME);
   2788c:	2300      	movs	r3, #0
{
   2788e:	4616      	mov	r6, r2
					PKT_WAIT_TIME);
   27890:	f240 6267 	movw	r2, #1639	; 0x667
{
   27894:	460c      	mov	r4, r1
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
   27896:	e9cd 2300 	strd	r2, r3, [sp]
   2789a:	2130      	movs	r1, #48	; 0x30
   2789c:	233a      	movs	r3, #58	; 0x3a
   2789e:	2202      	movs	r2, #2
   278a0:	f7eb fa84 	bl	12dac <net_pkt_alloc_with_buffer>
	if (!pkt) {
   278a4:	4605      	mov	r5, r0
   278a6:	b1d0      	cbz	r0, 278de <mld_send_generic+0x54>
	if (mld_create_packet(pkt, 1) ||
   278a8:	2101      	movs	r1, #1
   278aa:	f7ff ff84 	bl	277b6 <mld_create_packet>
   278ae:	b128      	cbz	r0, 278bc <mld_send_generic+0x32>
		ret = -ENOBUFS;
   278b0:	f06f 0468 	mvn.w	r4, #104	; 0x68
	net_pkt_unref(pkt);
   278b4:	4628      	mov	r0, r5
   278b6:	f7fe fbf8 	bl	260aa <net_pkt_unref>
	return ret;
   278ba:	e00d      	b.n	278d8 <mld_send_generic+0x4e>
	    mld_create(pkt, addr, mode, 1)) {
   278bc:	2301      	movs	r3, #1
   278be:	4632      	mov	r2, r6
   278c0:	4621      	mov	r1, r4
   278c2:	4628      	mov	r0, r5
   278c4:	f7ff ff1c 	bl	27700 <mld_create>
	if (mld_create_packet(pkt, 1) ||
   278c8:	2800      	cmp	r0, #0
   278ca:	d1f1      	bne.n	278b0 <mld_send_generic+0x26>
	ret = mld_send(pkt);
   278cc:	4628      	mov	r0, r5
   278ce:	f7ff ff5d 	bl	2778c <mld_send>
	if (ret) {
   278d2:	4604      	mov	r4, r0
   278d4:	2800      	cmp	r0, #0
   278d6:	d1ed      	bne.n	278b4 <mld_send_generic+0x2a>
}
   278d8:	4620      	mov	r0, r4
   278da:	b002      	add	sp, #8
   278dc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   278de:	f06f 040b 	mvn.w	r4, #11
   278e2:	e7f9      	b.n	278d8 <mld_send_generic+0x4e>

000278e4 <handle_mld_query>:
{
   278e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(mld_access,
   278e8:	2600      	movs	r6, #0
   278ea:	2318      	movs	r3, #24
{
   278ec:	4605      	mov	r5, r0
   278ee:	4688      	mov	r8, r1
   278f0:	4617      	mov	r7, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(mld_access,
   278f2:	e9cd 6302 	strd	r6, r3, [sp, #8]
	u16_t length = net_pkt_get_len(pkt);
   278f6:	6904      	ldr	r4, [r0, #16]
	while (buf) {
   278f8:	b964      	cbnz	r4, 27914 <handle_mld_query+0x30>
				net_pkt_get_data(pkt, &mld_access);
   278fa:	4628      	mov	r0, r5
   278fc:	a902      	add	r1, sp, #8
   278fe:	f7fe fe2a 	bl	26556 <net_pkt_get_data>
	u16_t length = net_pkt_get_len(pkt);
   27902:	b2b6      	uxth	r6, r6
	if (!mld_query) {
   27904:	4681      	mov	r9, r0
   27906:	b948      	cbnz	r0, 2791c <handle_mld_query+0x38>
	return NET_DROP;
   27908:	f04f 0802 	mov.w	r8, #2
}
   2790c:	4640      	mov	r0, r8
   2790e:	b004      	add	sp, #16
   27910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   27914:	89a3      	ldrh	r3, [r4, #12]
		buf = buf->frags;
   27916:	6824      	ldr	r4, [r4, #0]
		bytes += buf->len;
   27918:	441e      	add	r6, r3
		buf = buf->frags;
   2791a:	e7ed      	b.n	278f8 <handle_mld_query+0x14>
	return net_pkt_skip(pkt, access->size);
   2791c:	4628      	mov	r0, r5
   2791e:	9903      	ldr	r1, [sp, #12]
   27920:	f7fe fcbd 	bl	2629e <net_pkt_skip>
	mld_query->num_sources = ntohs(mld_query->num_sources);
   27924:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   27928:	0213      	lsls	r3, r2, #8
   2792a:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   2792e:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
	mld_query->num_sources = ntohs(mld_query->num_sources);
   27930:	f8a9 2016 	strh.w	r2, [r9, #22]
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   27934:	3344      	adds	r3, #68	; 0x44
   27936:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2793a:	b29b      	uxth	r3, r3
	if (length < pkt_len || pkt_len > NET_IPV6_MTU ||
   2793c:	42b3      	cmp	r3, r6
   2793e:	d8e3      	bhi.n	27908 <handle_mld_query+0x24>
   27940:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   27944:	d8e0      	bhi.n	27908 <handle_mld_query+0x24>
   27946:	f898 3007 	ldrb.w	r3, [r8, #7]
   2794a:	2b01      	cmp	r3, #1
   2794c:	d1dc      	bne.n	27908 <handle_mld_query+0x24>
	    ip_hdr->hop_limit != 1U || icmp_hdr->code != 0U) {
   2794e:	f897 8001 	ldrb.w	r8, [r7, #1]
   27952:	f1b8 0f00 	cmp.w	r8, #0
   27956:	d1d7      	bne.n	27908 <handle_mld_query+0x24>
	if (!net_ipv6_addr_cmp(&mld_query->mcast_address,
   27958:	f7ea ff54 	bl	12804 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   2795c:	2210      	movs	r2, #16
   2795e:	4601      	mov	r1, r0
   27960:	f109 0004 	add.w	r0, r9, #4
   27964:	f001 fd77 	bl	29456 <memcmp>
   27968:	4606      	mov	r6, r0
   2796a:	2800      	cmp	r0, #0
   2796c:	d1cc      	bne.n	27908 <handle_mld_query+0x24>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   2796e:	2218      	movs	r2, #24
	send_mld_report(net_pkt_iface(pkt));
   27970:	6a28      	ldr	r0, [r5, #32]
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   27972:	f8d0 9004 	ldr.w	r9, [r0, #4]
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   27976:	fb02 9304 	mla	r3, r2, r4, r9
   2797a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   2797e:	07df      	lsls	r7, r3, #31
   27980:	d502      	bpl.n	27988 <handle_mld_query+0xa4>
   27982:	0799      	lsls	r1, r3, #30
		count++;
   27984:	bf48      	it	mi
   27986:	3601      	addmi	r6, #1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   27988:	3401      	adds	r4, #1
   2798a:	2c03      	cmp	r4, #3
   2798c:	d1f3      	bne.n	27976 <handle_mld_query+0x92>
					count * MLDv2_MCAST_RECORD_LEN,
   2798e:	2114      	movs	r1, #20
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
   27990:	f240 6267 	movw	r2, #1639	; 0x667
   27994:	2300      	movs	r3, #0
					count * MLDv2_MCAST_RECORD_LEN,
   27996:	4371      	muls	r1, r6
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
   27998:	e9cd 2300 	strd	r2, r3, [sp]
   2799c:	310c      	adds	r1, #12
   2799e:	233a      	movs	r3, #58	; 0x3a
   279a0:	2202      	movs	r2, #2
   279a2:	f7eb fa03 	bl	12dac <net_pkt_alloc_with_buffer>
	if (!pkt) {
   279a6:	4607      	mov	r7, r0
   279a8:	b328      	cbz	r0, 279f6 <handle_mld_query+0x112>
	if (mld_create_packet(pkt, count)) {
   279aa:	b2b1      	uxth	r1, r6
   279ac:	f7ff ff03 	bl	277b6 <mld_create_packet>
   279b0:	4604      	mov	r4, r0
   279b2:	b9e8      	cbnz	r0, 279f0 <handle_mld_query+0x10c>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   279b4:	f04f 0a18 	mov.w	sl, #24
		if (!mld_create(pkt, &ipv6->mcast[i].address.in6_addr,
   279b8:	f109 0664 	add.w	r6, r9, #100	; 0x64
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   279bc:	fb0a f104 	mul.w	r1, sl, r4
   279c0:	eb09 0301 	add.w	r3, r9, r1
   279c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   279c8:	07da      	lsls	r2, r3, #31
   279ca:	d407      	bmi.n	279dc <handle_mld_query+0xf8>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   279cc:	3401      	adds	r4, #1
   279ce:	2c03      	cmp	r4, #3
   279d0:	d1f4      	bne.n	279bc <handle_mld_query+0xd8>
	if (!mld_send(pkt)) {
   279d2:	4638      	mov	r0, r7
   279d4:	f7ff feda 	bl	2778c <mld_send>
   279d8:	b950      	cbnz	r0, 279f0 <handle_mld_query+0x10c>
   279da:	e00c      	b.n	279f6 <handle_mld_query+0x112>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   279dc:	079b      	lsls	r3, r3, #30
   279de:	d5f5      	bpl.n	279cc <handle_mld_query+0xe8>
		if (!mld_create(pkt, &ipv6->mcast[i].address.in6_addr,
   279e0:	2300      	movs	r3, #0
   279e2:	2202      	movs	r2, #2
   279e4:	4638      	mov	r0, r7
   279e6:	4431      	add	r1, r6
   279e8:	f7ff fe8a 	bl	27700 <mld_create>
   279ec:	2800      	cmp	r0, #0
   279ee:	d1ed      	bne.n	279cc <handle_mld_query+0xe8>
	net_pkt_unref(pkt);
   279f0:	4638      	mov	r0, r7
   279f2:	f7fe fb5a 	bl	260aa <net_pkt_unref>
	net_pkt_unref(pkt);
   279f6:	4628      	mov	r0, r5
   279f8:	f7fe fb57 	bl	260aa <net_pkt_unref>
	return NET_OK;
   279fc:	e786      	b.n	2790c <handle_mld_query+0x28>

000279fe <net_ipv6_mld_join>:
{
   279fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27a00:	460e      	mov	r6, r1
   27a02:	9001      	str	r0, [sp, #4]
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   27a04:	a901      	add	r1, sp, #4
   27a06:	4630      	mov	r0, r6
   27a08:	f7ea fc5c 	bl	122c4 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   27a0c:	4604      	mov	r4, r0
   27a0e:	b128      	cbz	r0, 27a1c <net_ipv6_mld_join+0x1e>
	return addr->is_joined;
   27a10:	7d03      	ldrb	r3, [r0, #20]
   27a12:	079b      	lsls	r3, r3, #30
   27a14:	d508      	bpl.n	27a28 <net_ipv6_mld_join+0x2a>
		return -EALREADY;
   27a16:	f06f 0577 	mvn.w	r5, #119	; 0x77
   27a1a:	e015      	b.n	27a48 <net_ipv6_mld_join+0x4a>
		maddr = net_if_ipv6_maddr_add(iface, addr);
   27a1c:	4631      	mov	r1, r6
   27a1e:	9801      	ldr	r0, [sp, #4]
   27a20:	f7fd fc7b 	bl	2531a <net_if_ipv6_maddr_add>
		if (!maddr) {
   27a24:	4604      	mov	r4, r0
   27a26:	b190      	cbz	r0, 27a4e <net_ipv6_mld_join+0x50>
	ret = mld_send_generic(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   27a28:	2202      	movs	r2, #2
   27a2a:	4631      	mov	r1, r6
   27a2c:	9801      	ldr	r0, [sp, #4]
   27a2e:	f7ff ff2c 	bl	2788a <mld_send_generic>
	if (ret < 0) {
   27a32:	1e05      	subs	r5, r0, #0
   27a34:	db08      	blt.n	27a48 <net_ipv6_mld_join+0x4a>
	addr->is_joined = true;
   27a36:	7d23      	ldrb	r3, [r4, #20]
	net_if_mcast_monitor(iface, addr, true);
   27a38:	2201      	movs	r2, #1
   27a3a:	f043 0302 	orr.w	r3, r3, #2
   27a3e:	4631      	mov	r1, r6
   27a40:	9801      	ldr	r0, [sp, #4]
   27a42:	7523      	strb	r3, [r4, #20]
   27a44:	f7ea fc7c 	bl	12340 <net_if_mcast_monitor>
}
   27a48:	4628      	mov	r0, r5
   27a4a:	b002      	add	sp, #8
   27a4c:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   27a4e:	f06f 050b 	mvn.w	r5, #11
   27a52:	e7f9      	b.n	27a48 <net_ipv6_mld_join+0x4a>

00027a54 <net_route_entry_remove>:
   27a54:	4770      	bx	lr

00027a56 <net_route_del>:
{
   27a56:	b538      	push	{r3, r4, r5, lr}
	if (!route) {
   27a58:	4604      	mov	r4, r0
   27a5a:	b198      	cbz	r0, 27a84 <net_route_del+0x2e>
	sys_slist_find_and_remove(&routes, &route->node);
   27a5c:	f7eb ffb8 	bl	139d0 <sys_slist_find_and_remove.constprop.0>
	nbr = net_route_get_nbr(route);
   27a60:	4620      	mov	r0, r4
   27a62:	f7eb ffd3 	bl	13a0c <net_route_get_nbr>
	if (!nbr) {
   27a66:	4605      	mov	r5, r0
   27a68:	b178      	cbz	r0, 27a8a <net_route_del+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   27a6a:	6864      	ldr	r4, [r4, #4]
   27a6c:	b924      	cbnz	r4, 27a78 <net_route_del+0x22>
	net_nbr_unref(nbr);
   27a6e:	4628      	mov	r0, r5
   27a70:	f7fe fed8 	bl	26824 <net_nbr_unref>
	return 0;
   27a74:	2000      	movs	r0, #0
}
   27a76:	bd38      	pop	{r3, r4, r5, pc}
		if (!nexthop_route->nbr) {
   27a78:	6860      	ldr	r0, [r4, #4]
   27a7a:	b108      	cbz	r0, 27a80 <net_route_del+0x2a>
	net_nbr_unref(nbr);
   27a7c:	f7fe fed2 	bl	26824 <net_nbr_unref>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27a80:	6824      	ldr	r4, [r4, #0]
	return node->next;
   27a82:	e7f3      	b.n	27a6c <net_route_del+0x16>
		return -EINVAL;
   27a84:	f06f 0015 	mvn.w	r0, #21
   27a88:	e7f5      	b.n	27a76 <net_route_del+0x20>
		return -ENOENT;
   27a8a:	f06f 0001 	mvn.w	r0, #1
   27a8e:	e7f2      	b.n	27a76 <net_route_del+0x20>

00027a90 <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   27a90:	b158      	cbz	r0, 27aaa <net_route_get_nexthop+0x1a>
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   27a92:	6840      	ldr	r0, [r0, #4]
   27a94:	b148      	cbz	r0, 27aaa <net_route_get_nexthop+0x1a>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   27a96:	6843      	ldr	r3, [r0, #4]
   27a98:	785a      	ldrb	r2, [r3, #1]
   27a9a:	2aff      	cmp	r2, #255	; 0xff
   27a9c:	d003      	beq.n	27aa6 <net_route_get_nexthop+0x16>
			continue;
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
   27a9e:	68db      	ldr	r3, [r3, #12]
		if (ipv6_nbr_data) {
   27aa0:	b10b      	cbz	r3, 27aa6 <net_route_get_nexthop+0x16>
			addr = &ipv6_nbr_data->addr;
   27aa2:	1d18      	adds	r0, r3, #4
			NET_ASSERT(addr);

			return addr;
   27aa4:	4770      	bx	lr
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27aa6:	6800      	ldr	r0, [r0, #0]
	return node->next;
   27aa8:	e7f4      	b.n	27a94 <net_route_get_nexthop+0x4>
			NET_ERR("could not get neighbor data from next hop");
		}
	}

	return NULL;
}
   27aaa:	4770      	bx	lr

00027aac <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   27aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27aae:	4607      	mov	r7, r0
   27ab0:	460d      	mov	r5, r1
   27ab2:	4616      	mov	r6, r2
   27ab4:	461c      	mov	r4, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   27ab6:	f7ff fa0d 	bl	26ed4 <net_ipv6_nbr_lookup>
   27aba:	b120      	cbz	r0, 27ac6 <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   27abc:	2300      	movs	r3, #0
   27abe:	6033      	str	r3, [r6, #0]
		*nexthop = dst;
   27ac0:	6025      	str	r5, [r4, #0]
			return false;
		}

		*nexthop = &router->address.in6_addr;

		return true;
   27ac2:	2001      	movs	r0, #1
   27ac4:	e00b      	b.n	27ade <net_route_get_info+0x32>
	*route = net_route_lookup(iface, dst);
   27ac6:	4629      	mov	r1, r5
   27ac8:	4638      	mov	r0, r7
   27aca:	f7eb ffb5 	bl	13a38 <net_route_lookup>
   27ace:	6030      	str	r0, [r6, #0]
	if (*route) {
   27ad0:	b130      	cbz	r0, 27ae0 <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   27ad2:	f7ff ffdd 	bl	27a90 <net_route_get_nexthop>
   27ad6:	6020      	str	r0, [r4, #0]
		if (!*nexthop) {
   27ad8:	3800      	subs	r0, #0
   27ada:	bf18      	it	ne
   27adc:	2001      	movne	r0, #1
	}

	return false;
}
   27ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   27ae0:	4629      	mov	r1, r5
   27ae2:	f7ea fca3 	bl	1242c <net_if_ipv6_router_find_default>
		if (!router) {
   27ae6:	2800      	cmp	r0, #0
   27ae8:	d0f9      	beq.n	27ade <net_route_get_info+0x32>
		*nexthop = &router->address.in6_addr;
   27aea:	3008      	adds	r0, #8
   27aec:	6020      	str	r0, [r4, #0]
   27aee:	e7e8      	b.n	27ac2 <net_route_get_info+0x16>

00027af0 <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   27af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27af2:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(NULL, nexthop);
   27af4:	2000      	movs	r0, #0
   27af6:	f7ff f9ed 	bl	26ed4 <net_ipv6_nbr_lookup>
	if (!nbr) {
   27afa:	4606      	mov	r6, r0
   27afc:	2800      	cmp	r0, #0
   27afe:	d038      	beq.n	27b72 <net_route_packet+0x82>
		NET_DBG("Cannot find %s neighbor",
			log_strdup(net_sprint_ipv6_addr(nexthop)));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   27b00:	7840      	ldrb	r0, [r0, #1]
   27b02:	f7eb fa71 	bl	12fe8 <net_nbr_get_lladdr>
	if (!lladdr) {
   27b06:	4605      	mov	r5, r0
   27b08:	2800      	cmp	r0, #0
   27b0a:	d035      	beq.n	27b78 <net_route_packet+0x88>
	 * link layer. This is done at runtime because we can have multiple
	 * network technologies enabled.
	 */
	if (net_if_l2(net_pkt_iface(pkt)) != &NET_L2_GET_NAME(DUMMY)) {
#endif
		if (!net_pkt_lladdr_src(pkt)->addr) {
   27b0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   27b0e:	b910      	cbnz	r0, 27b16 <net_route_packet+0x26>
			NET_DBG("Link layer source address not set");
			return -EINVAL;
   27b10:	f06f 0015 	mvn.w	r0, #21
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;

	net_pkt_set_iface(pkt, nbr->iface);

	return net_send_data(pkt);
}
   27b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!memcmp(net_pkt_lladdr_src(pkt)->addr, lladdr->addr,
   27b16:	1caf      	adds	r7, r5, #2
   27b18:	4639      	mov	r1, r7
   27b1a:	786a      	ldrb	r2, [r5, #1]
   27b1c:	f001 fc9b 	bl	29456 <memcmp>
   27b20:	2800      	cmp	r0, #0
   27b22:	d0f5      	beq.n	27b10 <net_route_packet+0x20>
	pkt->forwarding = forward;
   27b24:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   27b28:	f043 0301 	orr.w	r3, r3, #1
   27b2c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return net_if_get_link_addr(pkt->iface);
   27b30:	6a23      	ldr	r3, [r4, #32]
   27b32:	681b      	ldr	r3, [r3, #0]
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   27b34:	691a      	ldr	r2, [r3, #16]
   27b36:	62a2      	str	r2, [r4, #40]	; 0x28
	net_pkt_lladdr_src(pkt)->type = net_pkt_lladdr_if(pkt)->type;
   27b38:	7d5a      	ldrb	r2, [r3, #21]
   27b3a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   27b3e:	7d1b      	ldrb	r3, [r3, #20]
	net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
   27b40:	6327      	str	r7, [r4, #48]	; 0x30
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   27b42:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->type = lladdr->type;
   27b46:	782b      	ldrb	r3, [r5, #0]
   27b48:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;
   27b4c:	786b      	ldrb	r3, [r5, #1]
   27b4e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	net_pkt_set_iface(pkt, nbr->iface);
   27b52:	68b3      	ldr	r3, [r6, #8]
	pkt->iface = iface;
   27b54:	6223      	str	r3, [r4, #32]
	if (iface) {
   27b56:	b13b      	cbz	r3, 27b68 <net_route_packet+0x78>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   27b58:	681a      	ldr	r2, [r3, #0]
   27b5a:	7d52      	ldrb	r2, [r2, #21]
   27b5c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   27b60:	681b      	ldr	r3, [r3, #0]
   27b62:	7d5b      	ldrb	r3, [r3, #21]
   27b64:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return net_send_data(pkt);
   27b68:	4620      	mov	r0, r4
}
   27b6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return net_send_data(pkt);
   27b6e:	f7fd b934 	b.w	24dda <net_send_data>
		return -ENOENT;
   27b72:	f06f 0001 	mvn.w	r0, #1
   27b76:	e7cd      	b.n	27b14 <net_route_packet+0x24>
		return -ESRCH;
   27b78:	f06f 0002 	mvn.w	r0, #2
   27b7c:	e7ca      	b.n	27b14 <net_route_packet+0x24>

00027b7e <net_route_packet_if>:
	pkt->iface = iface;
   27b7e:	6201      	str	r1, [r0, #32]
	if (iface) {
   27b80:	b139      	cbz	r1, 27b92 <net_route_packet_if+0x14>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   27b82:	680b      	ldr	r3, [r1, #0]
   27b84:	7d5b      	ldrb	r3, [r3, #21]
   27b86:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   27b8a:	680b      	ldr	r3, [r1, #0]
   27b8c:	7d5b      	ldrb	r3, [r3, #21]
   27b8e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
	pkt->forwarding = forward;
   27b92:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   27b96:	f043 0301 	orr.w	r3, r3, #1
   27b9a:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
	return net_if_get_link_addr(pkt->iface);
   27b9e:	680b      	ldr	r3, [r1, #0]
	net_pkt_set_orig_iface(pkt, net_pkt_iface(pkt));
	net_pkt_set_iface(pkt, iface);

	net_pkt_set_forwarding(pkt, true);

	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   27ba0:	691a      	ldr	r2, [r3, #16]
   27ba2:	6282      	str	r2, [r0, #40]	; 0x28
	net_pkt_lladdr_src(pkt)->type = net_pkt_lladdr_if(pkt)->type;
   27ba4:	7d5a      	ldrb	r2, [r3, #21]
   27ba6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   27baa:	7d1b      	ldrb	r3, [r3, #20]
   27bac:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

	return net_send_data(pkt);
   27bb0:	f7fd b913 	b.w	24dda <net_send_data>

00027bb4 <net_route_init>:
	NET_DBG("Allocated %d routing entries (%zu bytes)",
		CONFIG_NET_MAX_ROUTES, sizeof(net_route_entries_pool));

	NET_DBG("Allocated %d nexthop entries (%zu bytes)",
		CONFIG_NET_MAX_NEXTHOPS, sizeof(net_route_nexthop_pool));
}
   27bb4:	4770      	bx	lr

00027bb6 <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   27bb6:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   27bb8:	b942      	cbnz	r2, 27bcc <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   27bba:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   27bbc:	b933      	cbnz	r3, 27bcc <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   27bbe:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   27bc0:	b922      	cbnz	r2, 27bcc <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   27bc2:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   27bc4:	fab0 f080 	clz	r0, r0
   27bc8:	0940      	lsrs	r0, r0, #5
   27bca:	4770      	bx	lr
   27bcc:	2000      	movs	r0, #0
   27bce:	4770      	bx	lr

00027bd0 <net_udp_create>:
#include "net_stats.h"

#define PKT_WAIT_TIME K_SECONDS(1)

int net_udp_create(struct net_pkt *pkt, u16_t src_port, u16_t dst_port)
{
   27bd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   27bd2:	2308      	movs	r3, #8
{
   27bd4:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   27bd6:	eb0d 0103 	add.w	r1, sp, r3
{
   27bda:	4604      	mov	r4, r0
   27bdc:	4615      	mov	r5, r2
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   27bde:	f8cd d008 	str.w	sp, [sp, #8]
   27be2:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   27be4:	f7fe fcb7 	bl	26556 <net_pkt_get_data>
	if (!udp_hdr) {
   27be8:	b160      	cbz	r0, 27c04 <net_udp_create+0x34>
		return -ENOBUFS;
	}

	udp_hdr->src_port = src_port;
	udp_hdr->dst_port = dst_port;
	udp_hdr->len      = 0U;
   27bea:	2300      	movs	r3, #0
	udp_hdr->src_port = src_port;
   27bec:	8006      	strh	r6, [r0, #0]
	udp_hdr->dst_port = dst_port;
   27bee:	8045      	strh	r5, [r0, #2]
	udp_hdr->len      = 0U;
   27bf0:	7103      	strb	r3, [r0, #4]
   27bf2:	7143      	strb	r3, [r0, #5]
	udp_hdr->chksum   = 0U;
   27bf4:	7183      	strb	r3, [r0, #6]
   27bf6:	71c3      	strb	r3, [r0, #7]

	return net_pkt_set_data(pkt, &udp_access);
   27bf8:	a902      	add	r1, sp, #8
   27bfa:	4620      	mov	r0, r4
   27bfc:	f7fe fccc 	bl	26598 <net_pkt_set_data>
}
   27c00:	b004      	add	sp, #16
   27c02:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   27c04:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27c08:	e7fa      	b.n	27c00 <net_udp_create+0x30>

00027c0a <net_udp_finalize>:

int net_udp_finalize(struct net_pkt *pkt)
{
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   27c0a:	2308      	movs	r3, #8
{
   27c0c:	b530      	push	{r4, r5, lr}
   27c0e:	b085      	sub	sp, #20
	struct net_udp_hdr *udp_hdr;
	u16_t length = 0;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   27c10:	eb0d 0103 	add.w	r1, sp, r3
{
   27c14:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   27c16:	f8cd d008 	str.w	sp, [sp, #8]
   27c1a:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   27c1c:	f7fe fc9b 	bl	26556 <net_pkt_get_data>
	if (!udp_hdr) {
   27c20:	4605      	mov	r5, r0
   27c22:	b308      	cbz	r0, 27c68 <net_udp_finalize+0x5e>
	size_t bytes = 0;
   27c24:	2300      	movs	r3, #0
		return -ENOBUFS;
	}

	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
   27c26:	6922      	ldr	r2, [r4, #16]
	while (buf) {
   27c28:	b9d2      	cbnz	r2, 27c60 <net_udp_finalize+0x56>
   27c2a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   27c2e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
		 net_pkt_ip_opts_len(pkt);

	udp_hdr->len = htons(length);

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   27c30:	6a20      	ldr	r0, [r4, #32]
	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
   27c32:	440a      	add	r2, r1
   27c34:	1a9b      	subs	r3, r3, r2
	udp_hdr->len = htons(length);
   27c36:	ba5b      	rev16	r3, r3
   27c38:	80ab      	strh	r3, [r5, #4]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   27c3a:	f7fd fd83 	bl	25744 <net_if_need_calc_tx_checksum>
   27c3e:	b148      	cbz	r0, 27c54 <net_udp_finalize+0x4a>
	u16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);
   27c40:	2111      	movs	r1, #17
   27c42:	4620      	mov	r0, r4
   27c44:	f7fd fe07 	bl	25856 <net_calc_chksum>
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
   27c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
   27c4c:	2800      	cmp	r0, #0
   27c4e:	bf08      	it	eq
   27c50:	4618      	moveq	r0, r3
   27c52:	80e8      	strh	r0, [r5, #6]
	}

	return net_pkt_set_data(pkt, &udp_access);
   27c54:	4620      	mov	r0, r4
   27c56:	a902      	add	r1, sp, #8
   27c58:	f7fe fc9e 	bl	26598 <net_pkt_set_data>
}
   27c5c:	b005      	add	sp, #20
   27c5e:	bd30      	pop	{r4, r5, pc}
		bytes += buf->len;
   27c60:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   27c62:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   27c64:	440b      	add	r3, r1
		buf = buf->frags;
   27c66:	e7df      	b.n	27c28 <net_udp_finalize+0x1e>
		return -ENOBUFS;
   27c68:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27c6c:	e7f6      	b.n	27c5c <net_udp_finalize+0x52>

00027c6e <net_udp_input>:
	return net_conn_unregister(handle);
}

struct net_udp_hdr *net_udp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *udp_access)
{
   27c6e:	b570      	push	{r4, r5, r6, lr}
   27c70:	4604      	mov	r4, r0
   27c72:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, udp_access);
   27c74:	f7fe fc6f 	bl	26556 <net_pkt_get_data>
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
   27c78:	4605      	mov	r5, r0
   27c7a:	b1f0      	cbz	r0, 27cba <net_udp_input+0x4c>
   27c7c:	4631      	mov	r1, r6
   27c7e:	4620      	mov	r0, r4
   27c80:	f7fe fc8a 	bl	26598 <net_pkt_set_data>
   27c84:	4603      	mov	r3, r0
   27c86:	b9c0      	cbnz	r0, 27cba <net_udp_input+0x4c>
		NET_DBG("DROP: corrupted header");
		goto drop;
	}

	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   27c88:	88a9      	ldrh	r1, [r5, #4]
   27c8a:	020a      	lsls	r2, r1, #8
   27c8c:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   27c90:	6921      	ldr	r1, [r4, #16]
   27c92:	b292      	uxth	r2, r2
	while (buf) {
   27c94:	b9a1      	cbnz	r1, 27cc0 <net_udp_input+0x52>
				    net_pkt_ip_hdr_len(pkt) -
   27c96:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
				    net_pkt_ip_opts_len(pkt))) {
   27c9a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
				    net_pkt_ip_hdr_len(pkt) -
   27c9c:	4408      	add	r0, r1
   27c9e:	1a1b      	subs	r3, r3, r0
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   27ca0:	429a      	cmp	r2, r3
   27ca2:	d10a      	bne.n	27cba <net_udp_input+0x4c>
		NET_DBG("DROP: Invalid hdr length");
		goto drop;
	}

	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
   27ca4:	6a20      	ldr	r0, [r4, #32]
   27ca6:	f7fd fd4f 	bl	25748 <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   27caa:	b138      	cbz	r0, 27cbc <net_udp_input+0x4e>
		if (!udp_hdr->chksum) {
   27cac:	88eb      	ldrh	r3, [r5, #6]
   27cae:	b123      	cbz	r3, 27cba <net_udp_input+0x4c>
	return net_calc_chksum(pkt, IPPROTO_UDP);
   27cb0:	2111      	movs	r1, #17
   27cb2:	4620      	mov	r0, r4
   27cb4:	f7fd fdcf 	bl	25856 <net_calc_chksum>
			}

			goto drop;
		}

		if (net_calc_verify_chksum_udp(pkt) != 0U) {
   27cb8:	b100      	cbz	r0, 27cbc <net_udp_input+0x4e>
	}
out:
	return udp_hdr;
drop:
	net_stats_update_udp_chkerr(net_pkt_iface(pkt));
	return NULL;
   27cba:	2500      	movs	r5, #0
}
   27cbc:	4628      	mov	r0, r5
   27cbe:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   27cc0:	8988      	ldrh	r0, [r1, #12]
		buf = buf->frags;
   27cc2:	6809      	ldr	r1, [r1, #0]
		bytes += buf->len;
   27cc4:	4403      	add	r3, r0
		buf = buf->frags;
   27cc6:	e7e5      	b.n	27c94 <net_udp_input+0x26>

00027cc8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27cc8:	6843      	ldr	r3, [r0, #4]
}
   27cca:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27ccc:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   27cce:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   27cd0:	600b      	str	r3, [r1, #0]
}
   27cd2:	4770      	bx	lr

00027cd4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27cd4:	6843      	ldr	r3, [r0, #4]
   27cd6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   27cd8:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   27cda:	4042      	eors	r2, r0
   27cdc:	400a      	ands	r2, r1
   27cde:	4042      	eors	r2, r0
    p_reg->OUT = value;
   27ce0:	605a      	str	r2, [r3, #4]
}
   27ce2:	2000      	movs	r0, #0
   27ce4:	4770      	bx	lr

00027ce6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27ce6:	6843      	ldr	r3, [r0, #4]
}
   27ce8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27cea:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   27cec:	6099      	str	r1, [r3, #8]
}
   27cee:	4770      	bx	lr

00027cf0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27cf0:	6843      	ldr	r3, [r0, #4]
}
   27cf2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27cf4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   27cf6:	60d9      	str	r1, [r3, #12]
}
   27cf8:	4770      	bx	lr

00027cfa <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27cfa:	6843      	ldr	r3, [r0, #4]
}
   27cfc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27cfe:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   27d00:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   27d02:	4059      	eors	r1, r3
    p_reg->OUT = value;
   27d04:	6051      	str	r1, [r2, #4]
}
   27d06:	4770      	bx	lr

00027d08 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   27d08:	68c3      	ldr	r3, [r0, #12]
{
   27d0a:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   27d0c:	6858      	ldr	r0, [r3, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   27d0e:	b158      	cbz	r0, 27d28 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27d10:	2400      	movs	r4, #0
   27d12:	4281      	cmp	r1, r0
   27d14:	d113      	bne.n	27d3e <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   27d16:	6808      	ldr	r0, [r1, #0]
   27d18:	b95c      	cbnz	r4, 27d32 <gpio_nrfx_manage_callback+0x2a>
   27d1a:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   27d1c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   27d1e:	42a1      	cmp	r1, r4
   27d20:	d100      	bne.n	27d24 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   27d22:	6098      	str	r0, [r3, #8]
	parent->next = child;
   27d24:	2000      	movs	r0, #0
   27d26:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   27d28:	b972      	cbnz	r2, 27d48 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   27d2a:	2000      	movs	r0, #0
}
   27d2c:	bd30      	pop	{r4, r5, pc}
   27d2e:	4628      	mov	r0, r5
   27d30:	e7ef      	b.n	27d12 <gpio_nrfx_manage_callback+0xa>
   27d32:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   27d34:	6898      	ldr	r0, [r3, #8]
   27d36:	4281      	cmp	r1, r0
	list->tail = node;
   27d38:	bf08      	it	eq
   27d3a:	609c      	streq	r4, [r3, #8]
}
   27d3c:	e7f2      	b.n	27d24 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27d3e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27d40:	4604      	mov	r4, r0
   27d42:	2d00      	cmp	r5, #0
   27d44:	d1f3      	bne.n	27d2e <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   27d46:	b13a      	cbz	r2, 27d58 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   27d48:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   27d4a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   27d4c:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   27d4e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   27d50:	2800      	cmp	r0, #0
   27d52:	d1ea      	bne.n	27d2a <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   27d54:	6099      	str	r1, [r3, #8]
}
   27d56:	e7e9      	b.n	27d2c <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   27d58:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   27d5c:	e7e6      	b.n	27d2c <gpio_nrfx_manage_callback+0x24>

00027d5e <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   27d5e:	2201      	movs	r2, #1
{
   27d60:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   27d62:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   27d64:	408a      	lsls	r2, r1
   27d66:	6923      	ldr	r3, [r4, #16]
   27d68:	ea23 0302 	bic.w	r3, r3, r2
   27d6c:	6123      	str	r3, [r4, #16]
}
   27d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   27d72:	f7ec b9a1 	b.w	140b8 <gpiote_pin_int_cfg>

00027d76 <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   27d76:	2201      	movs	r2, #1
{
   27d78:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   27d7a:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   27d7c:	408a      	lsls	r2, r1
   27d7e:	6923      	ldr	r3, [r4, #16]
   27d80:	4313      	orrs	r3, r2
   27d82:	6123      	str	r3, [r4, #16]
}
   27d84:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   27d88:	f7ec b996 	b.w	140b8 <gpiote_pin_int_cfg>

00027d8c <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   27d8c:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   27d8e:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   27d90:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   27d92:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   27d94:	7b91      	ldrb	r1, [r2, #14]
   27d96:	b159      	cbz	r1, 27db0 <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27d98:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   27d9c:	b141      	cbz	r1, 27db0 <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   27d9e:	f44f 7180 	mov.w	r1, #256	; 0x100
   27da2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27da6:	2101      	movs	r1, #1
   27da8:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   27daa:	2300      	movs	r3, #0
   27dac:	7393      	strb	r3, [r2, #14]
		return;
   27dae:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27db0:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   27db4:	b111      	cbz	r1, 27dbc <uarte_nrfx_isr_int+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27db6:	2100      	movs	r1, #0
   27db8:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   27dbc:	6813      	ldr	r3, [r2, #0]
   27dbe:	b10b      	cbz	r3, 27dc4 <uarte_nrfx_isr_int+0x38>
		data->int_driven->cb(data->int_driven->cb_data);
   27dc0:	6850      	ldr	r0, [r2, #4]
   27dc2:	4718      	bx	r3
}
   27dc4:	4770      	bx	lr

00027dc6 <uarte_nrfx_config_get>:
{
   27dc6:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   27dc8:	68c2      	ldr	r2, [r0, #12]
   27dca:	e892 0003 	ldmia.w	r2, {r0, r1}
   27dce:	e883 0003 	stmia.w	r3, {r0, r1}
}
   27dd2:	2000      	movs	r0, #0
   27dd4:	4770      	bx	lr

00027dd6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   27dd6:	6843      	ldr	r3, [r0, #4]
   27dd8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   27dda:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   27dde:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   27de2:	4770      	bx	lr

00027de4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   27de4:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   27de6:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   27de8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27dea:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   27dee:	b138      	cbz	r0, 27e00 <uarte_nrfx_poll_in+0x1c>
	*c = data->rx_data;
   27df0:	7c12      	ldrb	r2, [r2, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27df2:	2000      	movs	r0, #0
   27df4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27df6:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27df8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27dfc:	601a      	str	r2, [r3, #0]
	return 0;
   27dfe:	4770      	bx	lr
		return -1;
   27e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   27e04:	4770      	bx	lr

00027e06 <uarte_nrfx_fifo_fill>:
	return config->uarte_regs;
   27e06:	6843      	ldr	r3, [r0, #4]
{
   27e08:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   27e0a:	681c      	ldr	r4, [r3, #0]
{
   27e0c:	4605      	mov	r5, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27e0e:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   27e12:	b190      	cbz	r0, 27e3a <uarte_nrfx_fifo_fill+0x34>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   27e14:	68ed      	ldr	r5, [r5, #12]
	if (len > data->int_driven->tx_buff_size) {
   27e16:	68ab      	ldr	r3, [r5, #8]
   27e18:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27e1a:	2300      	movs	r3, #0
   27e1c:	4290      	cmp	r0, r2
   27e1e:	bfa8      	it	ge
   27e20:	4610      	movge	r0, r2
   27e22:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   27e26:	68aa      	ldr	r2, [r5, #8]
   27e28:	4283      	cmp	r3, r0
   27e2a:	6892      	ldr	r2, [r2, #8]
   27e2c:	db06      	blt.n	27e3c <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27e2e:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   27e30:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   27e34:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27e38:	60a3      	str	r3, [r4, #8]
}
   27e3a:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   27e3c:	5cce      	ldrb	r6, [r1, r3]
   27e3e:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   27e40:	3301      	adds	r3, #1
   27e42:	e7f0      	b.n	27e26 <uarte_nrfx_fifo_fill+0x20>

00027e44 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   27e44:	6843      	ldr	r3, [r0, #4]
   27e46:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27e48:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   27e4c:	b143      	cbz	r3, 27e60 <uarte_nrfx_fifo_read+0x1c>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   27e4e:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27e50:	2000      	movs	r0, #0
   27e52:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27e56:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   27e58:	7c1b      	ldrb	r3, [r3, #16]
   27e5a:	700b      	strb	r3, [r1, #0]
   27e5c:	6010      	str	r0, [r2, #0]
}
   27e5e:	4770      	bx	lr
	int num_rx = 0;
   27e60:	4618      	mov	r0, r3
}
   27e62:	4770      	bx	lr

00027e64 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   27e64:	2100      	movs	r1, #0
   27e66:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   27e68:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   27e6a:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   27e6c:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   27e6e:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   27e70:	f44f 7280 	mov.w	r2, #256	; 0x100
   27e74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   27e78:	4770      	bx	lr

00027e7a <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   27e7a:	2201      	movs	r2, #1
   27e7c:	68c3      	ldr	r3, [r0, #12]
   27e7e:	689b      	ldr	r3, [r3, #8]
   27e80:	739a      	strb	r2, [r3, #14]
}
   27e82:	4770      	bx	lr

00027e84 <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   27e84:	68c3      	ldr	r3, [r0, #12]
   27e86:	689b      	ldr	r3, [r3, #8]
   27e88:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   27e8a:	b94b      	cbnz	r3, 27ea0 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   27e8c:	6843      	ldr	r3, [r0, #4]
   27e8e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27e90:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   27e94:	b128      	cbz	r0, 27ea2 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   27e96:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   27e9a:	f3c0 2000 	ubfx	r0, r0, #8, #1
   27e9e:	4770      	bx	lr
   27ea0:	2000      	movs	r0, #0
}
   27ea2:	4770      	bx	lr

00027ea4 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   27ea4:	6843      	ldr	r3, [r0, #4]
   27ea6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27ea8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   27eac:	3800      	subs	r0, #0
   27eae:	bf18      	it	ne
   27eb0:	2001      	movne	r0, #1
   27eb2:	4770      	bx	lr

00027eb4 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   27eb4:	2210      	movs	r2, #16
	return config->uarte_regs;
   27eb6:	6843      	ldr	r3, [r0, #4]
   27eb8:	681b      	ldr	r3, [r3, #0]
   27eba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   27ebe:	4770      	bx	lr

00027ec0 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   27ec0:	2210      	movs	r2, #16
	return config->uarte_regs;
   27ec2:	6843      	ldr	r3, [r0, #4]
   27ec4:	681b      	ldr	r3, [r3, #0]
   27ec6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   27eca:	4770      	bx	lr

00027ecc <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   27ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   27ed0:	6843      	ldr	r3, [r0, #4]
   27ed2:	681b      	ldr	r3, [r3, #0]
   27ed4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   27ed8:	4770      	bx	lr

00027eda <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   27eda:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   27ede:	6843      	ldr	r3, [r0, #4]
   27ee0:	681b      	ldr	r3, [r3, #0]
   27ee2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   27ee6:	4770      	bx	lr

00027ee8 <uarte_nrfx_irq_update>:
}
   27ee8:	2001      	movs	r0, #1
   27eea:	4770      	bx	lr

00027eec <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   27eec:	68c3      	ldr	r3, [r0, #12]
   27eee:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   27ef0:	e9c3 1200 	strd	r1, r2, [r3]
}
   27ef4:	4770      	bx	lr

00027ef6 <uarte_nrfx_irq_is_pending>:
{
   27ef6:	b508      	push	{r3, lr}
	return config->uarte_regs;
   27ef8:	6843      	ldr	r3, [r0, #4]
{
   27efa:	4602      	mov	r2, r0
	return config->uarte_regs;
   27efc:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   27efe:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   27f02:	05db      	lsls	r3, r3, #23
   27f04:	d405      	bmi.n	27f12 <uarte_nrfx_irq_is_pending+0x1c>
   27f06:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   27f0a:	f010 0010 	ands.w	r0, r0, #16
   27f0e:	d106      	bne.n	27f1e <uarte_nrfx_irq_is_pending+0x28>
}
   27f10:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   27f12:	f7ff ffb7 	bl	27e84 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   27f16:	2800      	cmp	r0, #0
   27f18:	d0f5      	beq.n	27f06 <uarte_nrfx_irq_is_pending+0x10>
		||
   27f1a:	2001      	movs	r0, #1
   27f1c:	e7f8      	b.n	27f10 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   27f1e:	4610      	mov	r0, r2
   27f20:	f7ff ffc0 	bl	27ea4 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   27f24:	3800      	subs	r0, #0
   27f26:	bf18      	it	ne
   27f28:	2001      	movne	r0, #1
   27f2a:	e7f1      	b.n	27f10 <uarte_nrfx_irq_is_pending+0x1a>

00027f2c <uarte_nrfx_poll_out>:
{
   27f2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   27f30:	6843      	ldr	r3, [r0, #4]
{
   27f32:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   27f36:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   27f38:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   27f3a:	f001 f86a 	bl	29012 <k_is_in_isr>
   27f3e:	b9c0      	cbnz	r0, 27f72 <uarte_nrfx_poll_out+0x46>
		lock = &data->poll_out_lock;
   27f40:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   27f42:	f04f 0801 	mov.w	r8, #1
   27f46:	f106 070c 	add.w	r7, r6, #12
   27f4a:	e8d7 3fef 	ldaex	r3, [r7]
   27f4e:	2b00      	cmp	r3, #0
   27f50:	d103      	bne.n	27f5a <uarte_nrfx_poll_out+0x2e>
   27f52:	e8c7 8fe2 	stlex	r2, r8, [r7]
   27f56:	2a00      	cmp	r2, #0
   27f58:	d1f7      	bne.n	27f4a <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   27f5a:	d00c      	beq.n	27f76 <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
   27f5c:	2021      	movs	r0, #33	; 0x21
   27f5e:	2100      	movs	r1, #0
   27f60:	3d01      	subs	r5, #1
   27f62:	f7f8 fbb5 	bl	206d0 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   27f66:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   27f6a:	d1ee      	bne.n	27f4a <uarte_nrfx_poll_out+0x1e>
}
   27f6c:	b002      	add	sp, #8
   27f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   27f72:	2301      	movs	r3, #1
   27f74:	60f3      	str	r3, [r6, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27f76:	2300      	movs	r3, #0
   27f78:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   27f7c:	f10d 0307 	add.w	r3, sp, #7
   27f80:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   27f84:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27f86:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   27f8a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27f8e:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27f90:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   27f94:	b923      	cbnz	r3, 27fa0 <uarte_nrfx_poll_out+0x74>
   27f96:	2001      	movs	r0, #1
   27f98:	f000 fdc8 	bl	28b2c <nrfx_busy_wait>
   27f9c:	3d01      	subs	r5, #1
   27f9e:	d1f7      	bne.n	27f90 <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27fa0:	2301      	movs	r3, #1
   27fa2:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   27fa4:	2300      	movs	r3, #0
   27fa6:	60f3      	str	r3, [r6, #12]
   27fa8:	e7e0      	b.n	27f6c <uarte_nrfx_poll_out+0x40>

00027faa <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   27faa:	2000      	movs	r0, #0
   27fac:	4770      	bx	lr

00027fae <entropy_cc310_rng_get_entropy>:
{
   27fae:	b513      	push	{r0, r1, r4, lr}
   27fb0:	4614      	mov	r4, r2
   27fb2:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   27fb4:	aa01      	add	r2, sp, #4
   27fb6:	4621      	mov	r1, r4
   27fb8:	f7e0 f81a 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   27fbc:	9b01      	ldr	r3, [sp, #4]
   27fbe:	429c      	cmp	r4, r3
}
   27fc0:	bf18      	it	ne
   27fc2:	f06f 0015 	mvnne.w	r0, #21
   27fc6:	b002      	add	sp, #8
   27fc8:	bd10      	pop	{r4, pc}

00027fca <update_offset>:
{
   27fca:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   27fcc:	4604      	mov	r4, r0
   27fce:	b140      	cbz	r0, 27fe2 <update_offset+0x18>
   27fd0:	6803      	ldr	r3, [r0, #0]
   27fd2:	b133      	cbz	r3, 27fe2 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   27fd4:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   27fd6:	4418      	add	r0, r3
   27fd8:	f7e4 ffae 	bl	cf38 <strlen>
   27fdc:	68a3      	ldr	r3, [r4, #8]
   27fde:	4418      	add	r0, r3
   27fe0:	60a0      	str	r0, [r4, #8]
}
   27fe2:	bd10      	pop	{r4, pc}

00027fe4 <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   27fe4:	b161      	cbz	r1, 28000 <add_item_to_array+0x1c>
   27fe6:	b160      	cbz	r0, 28002 <add_item_to_array+0x1e>
    child = array->child;
   27fe8:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   27fea:	b913      	cbnz	r3, 27ff2 <add_item_to_array+0xe>
        array->child = item;
   27fec:	6081      	str	r1, [r0, #8]
}
   27fee:	2001      	movs	r0, #1
   27ff0:	4770      	bx	lr
        while (child->next)
   27ff2:	461a      	mov	r2, r3
   27ff4:	681b      	ldr	r3, [r3, #0]
   27ff6:	2b00      	cmp	r3, #0
   27ff8:	d1fb      	bne.n	27ff2 <add_item_to_array+0xe>
    prev->next = item;
   27ffa:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   27ffc:	604a      	str	r2, [r1, #4]
   27ffe:	e7f6      	b.n	27fee <add_item_to_array+0xa>
        return false;
   28000:	4608      	mov	r0, r1
}
   28002:	4770      	bx	lr

00028004 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   28004:	4603      	mov	r3, r0
   28006:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   28008:	2028      	movs	r0, #40	; 0x28
   2800a:	4798      	blx	r3
    if (node)
   2800c:	4604      	mov	r4, r0
   2800e:	b118      	cbz	r0, 28018 <cJSON_New_Item.isra.0+0x14>
   28010:	2228      	movs	r2, #40	; 0x28
   28012:	2100      	movs	r1, #0
   28014:	f001 fa67 	bl	294e6 <memset>
}
   28018:	4620      	mov	r0, r4
   2801a:	bd10      	pop	{r4, pc}

0002801c <ensure>:
{
   2801c:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   2801e:	4604      	mov	r4, r0
   28020:	b1b8      	cbz	r0, 28052 <ensure+0x36>
   28022:	6805      	ldr	r5, [r0, #0]
   28024:	b165      	cbz	r5, 28040 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   28026:	6842      	ldr	r2, [r0, #4]
   28028:	b112      	cbz	r2, 28030 <ensure+0x14>
   2802a:	6883      	ldr	r3, [r0, #8]
   2802c:	429a      	cmp	r2, r3
   2802e:	d910      	bls.n	28052 <ensure+0x36>
    if (needed > INT_MAX)
   28030:	2900      	cmp	r1, #0
   28032:	db0e      	blt.n	28052 <ensure+0x36>
    needed += p->offset + 1;
   28034:	68a0      	ldr	r0, [r4, #8]
   28036:	4401      	add	r1, r0
   28038:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   2803a:	429a      	cmp	r2, r3
   2803c:	d302      	bcc.n	28044 <ensure+0x28>
        return p->buffer + p->offset;
   2803e:	4405      	add	r5, r0
}
   28040:	4628      	mov	r0, r5
   28042:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   28044:	6922      	ldr	r2, [r4, #16]
   28046:	b922      	cbnz	r2, 28052 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   28048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   2804c:	d303      	bcc.n	28056 <ensure+0x3a>
        if (needed <= INT_MAX)
   2804e:	2b00      	cmp	r3, #0
   28050:	da0f      	bge.n	28072 <ensure+0x56>
        return NULL;
   28052:	2500      	movs	r5, #0
   28054:	e7f4      	b.n	28040 <ensure+0x24>
        newsize = needed + 1;
   28056:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   28058:	6a23      	ldr	r3, [r4, #32]
   2805a:	b16b      	cbz	r3, 28078 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   2805c:	4628      	mov	r0, r5
   2805e:	4631      	mov	r1, r6
   28060:	4798      	blx	r3
        if (newbuffer == NULL)
   28062:	4605      	mov	r5, r0
   28064:	b9b0      	cbnz	r0, 28094 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   28066:	69e3      	ldr	r3, [r4, #28]
   28068:	6820      	ldr	r0, [r4, #0]
   2806a:	4798      	blx	r3
            p->buffer = NULL;
   2806c:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   28070:	e7e6      	b.n	28040 <ensure+0x24>
            newsize = INT_MAX;
   28072:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   28076:	e7ef      	b.n	28058 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   28078:	4630      	mov	r0, r6
   2807a:	69a3      	ldr	r3, [r4, #24]
   2807c:	4798      	blx	r3
        if (!newbuffer)
   2807e:	4605      	mov	r5, r0
   28080:	2800      	cmp	r0, #0
   28082:	d0f0      	beq.n	28066 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   28084:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28086:	6821      	ldr	r1, [r4, #0]
   28088:	3201      	adds	r2, #1
   2808a:	f001 f9f2 	bl	29472 <memcpy>
        p->hooks.deallocate(p->buffer);
   2808e:	69e3      	ldr	r3, [r4, #28]
   28090:	6820      	ldr	r0, [r4, #0]
   28092:	4798      	blx	r3
    return newbuffer + p->offset;
   28094:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   28096:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   2809a:	441d      	add	r5, r3
   2809c:	e7d0      	b.n	28040 <ensure+0x24>

0002809e <cJSON_Print>:
    return (char*)print(item, true, &global_hooks);
   2809e:	2101      	movs	r1, #1
   280a0:	f7ec bd6a 	b.w	14b78 <print.constprop.0>

000280a4 <cJSON_AddItemToObject>:
    add_item_to_object(object, string, item, &global_hooks, false);
   280a4:	2300      	movs	r3, #0
   280a6:	f7ec bd3f 	b.w	14b28 <add_item_to_object.constprop.0>

000280aa <cJSON_AddNumberToObject>:
{
   280aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   280ac:	4605      	mov	r5, r0
   280ae:	9101      	str	r1, [sp, #4]
    cJSON *number_item = cJSON_CreateNumber(number);
   280b0:	f7e4 fffa 	bl	d0a8 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   280b4:	2300      	movs	r3, #0
   280b6:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   280b8:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   280ba:	9901      	ldr	r1, [sp, #4]
   280bc:	4628      	mov	r0, r5
   280be:	f7ec fd33 	bl	14b28 <add_item_to_object.constprop.0>
   280c2:	4605      	mov	r5, r0
   280c4:	b918      	cbnz	r0, 280ce <cJSON_AddNumberToObject+0x24>
    cJSON_Delete(number_item);
   280c6:	4620      	mov	r0, r4
   280c8:	f7ec fda2 	bl	14c10 <cJSON_Delete>
    return NULL;
   280cc:	462c      	mov	r4, r5
}
   280ce:	4620      	mov	r0, r4
   280d0:	b003      	add	sp, #12
   280d2:	bd30      	pop	{r4, r5, pc}

000280d4 <cJSON_AddStringToObject>:
{
   280d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   280d6:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   280d8:	4610      	mov	r0, r2
{
   280da:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   280dc:	f7ec fdbc 	bl	14c58 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   280e0:	2300      	movs	r3, #0
   280e2:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   280e4:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   280e6:	9901      	ldr	r1, [sp, #4]
   280e8:	4628      	mov	r0, r5
   280ea:	f7ec fd1d 	bl	14b28 <add_item_to_object.constprop.0>
   280ee:	4605      	mov	r5, r0
   280f0:	b918      	cbnz	r0, 280fa <cJSON_AddStringToObject+0x26>
    cJSON_Delete(string_item);
   280f2:	4620      	mov	r0, r4
   280f4:	f7ec fd8c 	bl	14c10 <cJSON_Delete>
    return NULL;
   280f8:	462c      	mov	r4, r5
}
   280fa:	4620      	mov	r0, r4
   280fc:	b003      	add	sp, #12
   280fe:	bd30      	pop	{r4, r5, pc}

00028100 <cJSON_AddObjectToObject>:
{
   28100:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28102:	4605      	mov	r5, r0
   28104:	9101      	str	r1, [sp, #4]
    cJSON *object_item = cJSON_CreateObject();
   28106:	f7ec fdbf 	bl	14c88 <cJSON_CreateObject>
    if (add_item_to_object(object, name, object_item, &global_hooks, false))
   2810a:	2300      	movs	r3, #0
   2810c:	4602      	mov	r2, r0
    cJSON *object_item = cJSON_CreateObject();
   2810e:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, object_item, &global_hooks, false))
   28110:	9901      	ldr	r1, [sp, #4]
   28112:	4628      	mov	r0, r5
   28114:	f7ec fd08 	bl	14b28 <add_item_to_object.constprop.0>
   28118:	4605      	mov	r5, r0
   2811a:	b918      	cbnz	r0, 28124 <cJSON_AddObjectToObject+0x24>
    cJSON_Delete(object_item);
   2811c:	4620      	mov	r0, r4
   2811e:	f7ec fd77 	bl	14c10 <cJSON_Delete>
    return NULL;
   28122:	462c      	mov	r4, r5
}
   28124:	4620      	mov	r0, r4
   28126:	b003      	add	sp, #12
   28128:	bd30      	pop	{r4, r5, pc}

0002812a <bsdlib_shutdown>:
{
	return init_ret;
}

int bsdlib_shutdown(void)
{
   2812a:	b508      	push	{r3, lr}
	bsd_shutdown();
   2812c:	f7f5 fb02 	bl	1d734 <bsd_shutdown>

	return 0;
}
   28130:	2000      	movs	r0, #0
   28132:	bd08      	pop	{r3, pc}

00028134 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   28134:	4668      	mov	r0, sp
   28136:	f020 0107 	bic.w	r1, r0, #7
   2813a:	468d      	mov	sp, r1
   2813c:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   2813e:	f7ef feab 	bl	17e98 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   28142:	f7e8 fde5 	bl	10d10 <_arch_isr_direct_pm>
   28146:	f7e8 ff95 	bl	11074 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2814a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2814e:	4685      	mov	sp, r0
   28150:	4770      	bx	lr

00028152 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   28152:	4668      	mov	r0, sp
   28154:	f020 0107 	bic.w	r1, r0, #7
   28158:	468d      	mov	sp, r1
   2815a:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   2815c:	f7f0 f9c6 	bl	184ec <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   28160:	f7e8 fdd6 	bl	10d10 <_arch_isr_direct_pm>
   28164:	f7e8 ff86 	bl	11074 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   28168:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2816c:	4685      	mov	sp, r0
   2816e:	4770      	bx	lr

00028170 <trace_task_create>:
{
   28170:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   28172:	201d      	movs	r0, #29
   28174:	2200      	movs	r2, #0
   28176:	2106      	movs	r1, #6
   28178:	f7e8 fdb4 	bl	10ce4 <z_arm_irq_priority_set>
}
   2817c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   28180:	201d      	movs	r0, #29
   28182:	f7e8 bd9f 	b.w	10cc4 <arch_irq_enable>

00028186 <read_task_create>:
{
   28186:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   28188:	201c      	movs	r0, #28
   2818a:	2200      	movs	r2, #0
   2818c:	2106      	movs	r1, #6
   2818e:	f7e8 fda9 	bl	10ce4 <z_arm_irq_priority_set>
}
   28192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   28196:	201c      	movs	r0, #28
   28198:	f7e8 bd94 	b.w	10cc4 <arch_irq_enable>

0002819c <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   2819c:	2000      	movs	r0, #0
   2819e:	4770      	bx	lr

000281a0 <z_to_nrf_flags>:
{
   281a0:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   281a2:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   281a6:	bf18      	it	ne
   281a8:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   281aa:	079b      	lsls	r3, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   281ac:	bf48      	it	mi
   281ae:	f040 0008 	orrmi.w	r0, r0, #8
}
   281b2:	4770      	bx	lr

000281b4 <z_to_nrf_family>:
	switch (z_family) {
   281b4:	2806      	cmp	r0, #6
   281b6:	d80a      	bhi.n	281ce <z_to_nrf_family+0x1a>
   281b8:	b198      	cbz	r0, 281e2 <z_to_nrf_family+0x2e>
   281ba:	3801      	subs	r0, #1
   281bc:	2805      	cmp	r0, #5
   281be:	d810      	bhi.n	281e2 <z_to_nrf_family+0x2e>
   281c0:	e8df f000 	tbb	[pc, r0]
   281c4:	0f0d0312 	.word	0x0f0d0312
   281c8:	0b0f      	.short	0x0b0f
   281ca:	200a      	movs	r0, #10
   281cc:	4770      	bx	lr
   281ce:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   281d0:	bf14      	ite	ne
   281d2:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   281d6:	2066      	moveq	r0, #102	; 0x66
   281d8:	4770      	bx	lr
		return NRF_AF_LOCAL;
   281da:	2001      	movs	r0, #1
   281dc:	4770      	bx	lr
		return NRF_AF_PACKET;
   281de:	2005      	movs	r0, #5
   281e0:	4770      	bx	lr
		return -EAFNOSUPPORT;
   281e2:	f06f 0069 	mvn.w	r0, #105	; 0x69
   281e6:	4770      	bx	lr
		return NRF_AF_INET;
   281e8:	2002      	movs	r0, #2
}
   281ea:	4770      	bx	lr

000281ec <z_to_nrf_protocol>:
	switch (proto) {
   281ec:	f240 1311 	movw	r3, #273	; 0x111
   281f0:	4298      	cmp	r0, r3
   281f2:	d023      	beq.n	2823c <z_to_nrf_protocol+0x50>
   281f4:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   281f8:	da11      	bge.n	2821e <z_to_nrf_protocol+0x32>
   281fa:	2811      	cmp	r0, #17
   281fc:	d021      	beq.n	28242 <z_to_nrf_protocol+0x56>
   281fe:	dc06      	bgt.n	2820e <z_to_nrf_protocol+0x22>
   28200:	b300      	cbz	r0, 28244 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   28202:	2806      	cmp	r0, #6
   28204:	bf14      	ite	ne
   28206:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2820a:	2001      	moveq	r0, #1
   2820c:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   2820e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   28212:	bf14      	ite	ne
   28214:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   28218:	f44f 7082 	moveq.w	r0, #260	; 0x104
   2821c:	4770      	bx	lr
	switch (proto) {
   2821e:	f240 2302 	movw	r3, #514	; 0x202
   28222:	4298      	cmp	r0, r3
   28224:	d00e      	beq.n	28244 <z_to_nrf_protocol+0x58>
   28226:	f240 2303 	movw	r3, #515	; 0x203
   2822a:	4298      	cmp	r0, r3
   2822c:	d00a      	beq.n	28244 <z_to_nrf_protocol+0x58>
   2822e:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   28232:	4298      	cmp	r0, r3
   28234:	bf18      	it	ne
   28236:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2823a:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   2823c:	f44f 7087 	mov.w	r0, #270	; 0x10e
   28240:	4770      	bx	lr
	switch (proto) {
   28242:	2002      	movs	r0, #2
}
   28244:	4770      	bx	lr

00028246 <nrf91_socket_is_supported>:
}
   28246:	2001      	movs	r0, #1
   28248:	4770      	bx	lr

0002824a <nrf91_bsdlib_socket_offload_init>:
}
   2824a:	2000      	movs	r0, #0
   2824c:	4770      	bx	lr

0002824e <nrf91_socket_offload_getsockopt>:
{
   2824e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28252:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   28254:	2300      	movs	r3, #0
{
   28256:	b086      	sub	sp, #24
   28258:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   2825c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   28260:	f8d8 3000 	ldr.w	r3, [r8]
{
   28264:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   28266:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   28268:	f240 2302 	movw	r3, #514	; 0x202
   2826c:	4299      	cmp	r1, r3
{
   2826e:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   28270:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
	switch (z_in_level) {
   28274:	d005      	beq.n	28282 <nrf91_socket_offload_getsockopt+0x34>
   28276:	dc2e      	bgt.n	282d6 <nrf91_socket_offload_getsockopt+0x88>
   28278:	2901      	cmp	r1, #1
   2827a:	d002      	beq.n	28282 <nrf91_socket_offload_getsockopt+0x34>
   2827c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   28280:	d139      	bne.n	282f6 <nrf91_socket_offload_getsockopt+0xa8>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   28282:	4631      	mov	r1, r6
   28284:	4620      	mov	r0, r4
   28286:	aa02      	add	r2, sp, #8
   28288:	f7ec ffc2 	bl	15210 <z_to_nrf_optname>
   2828c:	2800      	cmp	r0, #0
   2828e:	db32      	blt.n	282f6 <nrf91_socket_offload_getsockopt+0xa8>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   28290:	2c01      	cmp	r4, #1
   28292:	d124      	bne.n	282de <nrf91_socket_offload_getsockopt+0x90>
   28294:	2e14      	cmp	r6, #20
   28296:	d122      	bne.n	282de <nrf91_socket_offload_getsockopt+0x90>
		nrf_optlen = sizeof(struct nrf_timeval);
   28298:	2308      	movs	r3, #8
   2829a:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   2829c:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2829e:	aa03      	add	r2, sp, #12
   282a0:	4638      	mov	r0, r7
   282a2:	9200      	str	r2, [sp, #0]
   282a4:	4621      	mov	r1, r4
   282a6:	9a02      	ldr	r2, [sp, #8]
   282a8:	f7f5 fd38 	bl	1dd1c <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   282ac:	4607      	mov	r7, r0
   282ae:	b970      	cbnz	r0, 282ce <nrf91_socket_offload_getsockopt+0x80>
   282b0:	b16d      	cbz	r5, 282ce <nrf91_socket_offload_getsockopt+0x80>
		*optlen = nrf_optlen;
   282b2:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   282b4:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   282b6:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   282ba:	d108      	bne.n	282ce <nrf91_socket_offload_getsockopt+0x80>
			if (optname == SO_ERROR) {
   282bc:	2e04      	cmp	r6, #4
   282be:	d110      	bne.n	282e2 <nrf91_socket_offload_getsockopt+0x94>
				bsd_os_errno_set(*(int *)optval);
   282c0:	6828      	ldr	r0, [r5, #0]
   282c2:	f7ec fdff 	bl	14ec4 <bsd_os_errno_set>
				*(int *)optval = errno;
   282c6:	f7fc fd23 	bl	24d10 <__errno>
   282ca:	6803      	ldr	r3, [r0, #0]
   282cc:	602b      	str	r3, [r5, #0]
}
   282ce:	4638      	mov	r0, r7
   282d0:	b006      	add	sp, #24
   282d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   282d6:	f240 2303 	movw	r3, #515	; 0x203
   282da:	4299      	cmp	r1, r3
   282dc:	e7d0      	b.n	28280 <nrf91_socket_offload_getsockopt+0x32>
   282de:	462b      	mov	r3, r5
   282e0:	e7dd      	b.n	2829e <nrf91_socket_offload_getsockopt+0x50>
			} else if (optname == SO_RCVTIMEO) {
   282e2:	2e14      	cmp	r6, #20
   282e4:	d1f3      	bne.n	282ce <nrf91_socket_offload_getsockopt+0x80>
				((struct timeval *)optval)->tv_sec =
   282e6:	9b04      	ldr	r3, [sp, #16]
   282e8:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   282ea:	9b05      	ldr	r3, [sp, #20]
   282ec:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   282ee:	2308      	movs	r3, #8
   282f0:	f8c8 3000 	str.w	r3, [r8]
   282f4:	e7eb      	b.n	282ce <nrf91_socket_offload_getsockopt+0x80>
	errno = ENOPROTOOPT;
   282f6:	f7fc fd0b 	bl	24d10 <__errno>
   282fa:	236d      	movs	r3, #109	; 0x6d
	return retval;
   282fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   28300:	6003      	str	r3, [r0, #0]
	return retval;
   28302:	e7e4      	b.n	282ce <nrf91_socket_offload_getsockopt+0x80>

00028304 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   28304:	3801      	subs	r0, #1
   28306:	f7f5 bcb5 	b.w	1dc74 <nrf_listen>

0002830a <nrf91_socket_offload_freeaddrinfo>:
{
   2830a:	b538      	push	{r3, r4, r5, lr}
   2830c:	4604      	mov	r4, r0
	while (next != NULL) {
   2830e:	b904      	cbnz	r4, 28312 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   28310:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   28312:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   28314:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   28316:	f000 fcaa 	bl	28c6e <k_free>
		k_free(this);
   2831a:	4620      	mov	r0, r4
   2831c:	f000 fca7 	bl	28c6e <k_free>
		next = next->ai_next;
   28320:	462c      	mov	r4, r5
   28322:	e7f4      	b.n	2830e <nrf91_socket_offload_freeaddrinfo+0x4>

00028324 <z_to_nrf_addrinfo_hints>:
{
   28324:	b538      	push	{r3, r4, r5, lr}
   28326:	460c      	mov	r4, r1
   28328:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   2832a:	221c      	movs	r2, #28
   2832c:	2100      	movs	r1, #0
   2832e:	1d20      	adds	r0, r4, #4
   28330:	f001 f8d9 	bl	294e6 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   28334:	2300      	movs	r3, #0
   28336:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   28338:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   2833a:	2b03      	cmp	r3, #3
   2833c:	d003      	beq.n	28346 <z_to_nrf_addrinfo_hints+0x22>
   2833e:	2b04      	cmp	r3, #4
   28340:	bf08      	it	eq
   28342:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   28346:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   28348:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   2834a:	f7ff ff33 	bl	281b4 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2834e:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   28352:	d00b      	beq.n	2836c <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   28354:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   28356:	6928      	ldr	r0, [r5, #16]
   28358:	f7ff ff48 	bl	281ec <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2835c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   28360:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   28362:	d003      	beq.n	2836c <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   28364:	69e8      	ldr	r0, [r5, #28]
   28366:	b108      	cbz	r0, 2836c <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   28368:	61a0      	str	r0, [r4, #24]
	return 0;
   2836a:	2000      	movs	r0, #0
}
   2836c:	bd38      	pop	{r3, r4, r5, pc}

0002836e <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   2836e:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   28370:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   28372:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   28374:	4603      	mov	r3, r0
{
   28376:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   28378:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2837c:	f101 0420 	add.w	r4, r1, #32
   28380:	f101 0210 	add.w	r2, r1, #16
   28384:	f852 5b04 	ldr.w	r5, [r2], #4
   28388:	42a2      	cmp	r2, r4
   2838a:	f843 5b04 	str.w	r5, [r3], #4
   2838e:	d1f9      	bne.n	28384 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   28390:	6a0b      	ldr	r3, [r1, #32]
   28392:	7503      	strb	r3, [r0, #20]
}
   28394:	bd30      	pop	{r4, r5, pc}

00028396 <nrf91_socket_offload_recvfrom>:
{
   28396:	b5f0      	push	{r4, r5, r6, r7, lr}
	int sd = OBJ_TO_SD(obj);
   28398:	1e45      	subs	r5, r0, #1
{
   2839a:	b08d      	sub	sp, #52	; 0x34
   2839c:	4618      	mov	r0, r3
   2839e:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   283a2:	f7ff fefd 	bl	281a0 <z_to_nrf_flags>
   283a6:	4603      	mov	r3, r0
	if (from == NULL) {
   283a8:	b944      	cbnz	r4, 283bc <nrf91_socket_offload_recvfrom+0x26>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   283aa:	4628      	mov	r0, r5
   283ac:	e9cd 4400 	strd	r4, r4, [sp]
   283b0:	f7f5 fc18 	bl	1dbe4 <nrf_recvfrom>
   283b4:	4605      	mov	r5, r0
}
   283b6:	4628      	mov	r0, r5
   283b8:	b00d      	add	sp, #52	; 0x34
   283ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   283bc:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   283be:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   283c0:	9002      	str	r0, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   283c2:	a802      	add	r0, sp, #8
   283c4:	9001      	str	r0, [sp, #4]
   283c6:	9700      	str	r7, [sp, #0]
   283c8:	4628      	mov	r0, r5
   283ca:	f7f5 fc0b 	bl	1dbe4 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   283ce:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   283d0:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   283d2:	2b02      	cmp	r3, #2
   283d4:	d109      	bne.n	283ea <nrf91_socket_offload_recvfrom+0x54>
	ptr->sin_port = nrf_in->sin_port;
   283d6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   283da:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   283dc:	2301      	movs	r3, #1
   283de:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   283e0:	9b06      	ldr	r3, [sp, #24]
   283e2:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   283e4:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   283e6:	6033      	str	r3, [r6, #0]
	return retval;
   283e8:	e7e5      	b.n	283b6 <nrf91_socket_offload_recvfrom+0x20>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   283ea:	2b0a      	cmp	r3, #10
   283ec:	d1e3      	bne.n	283b6 <nrf91_socket_offload_recvfrom+0x20>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   283ee:	4639      	mov	r1, r7
   283f0:	4620      	mov	r0, r4
   283f2:	f7ff ffbc 	bl	2836e <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   283f6:	2318      	movs	r3, #24
   283f8:	e7f5      	b.n	283e6 <nrf91_socket_offload_recvfrom+0x50>

000283fa <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   283fa:	2300      	movs	r3, #0
{
   283fc:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   283fe:	e9cd 3300 	strd	r3, r3, [sp]
   28402:	f7ff ffc8 	bl	28396 <nrf91_socket_offload_recvfrom>
}
   28406:	b003      	add	sp, #12
   28408:	f85d fb04 	ldr.w	pc, [sp], #4

0002840c <nrf91_socket_offload_getaddrinfo>:
{
   2840c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28410:	4614      	mov	r4, r2
   28412:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   28414:	2100      	movs	r1, #0
{
   28416:	b093      	sub	sp, #76	; 0x4c
   28418:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2841a:	2220      	movs	r2, #32
   2841c:	a802      	add	r0, sp, #8
{
   2841e:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   28420:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   28422:	f001 f860 	bl	294e6 <memset>
	if (hints != NULL) {
   28426:	b194      	cbz	r4, 2844e <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   28428:	4620      	mov	r0, r4
   2842a:	a902      	add	r1, sp, #8
   2842c:	f7ff ff7a 	bl	28324 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   28430:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   28434:	f000 80c7 	beq.w	285c6 <nrf91_socket_offload_getaddrinfo+0x1ba>
		} else if (error == -EAFNOSUPPORT) {
   28438:	306a      	adds	r0, #106	; 0x6a
   2843a:	f000 80c7 	beq.w	285cc <nrf91_socket_offload_getaddrinfo+0x1c0>
		if (hints->ai_next != NULL) {
   2843e:	6820      	ldr	r0, [r4, #0]
   28440:	b120      	cbz	r0, 2844c <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   28442:	ac0a      	add	r4, sp, #40	; 0x28
   28444:	4621      	mov	r1, r4
   28446:	f7ff ff6d 	bl	28324 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   2844a:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   2844c:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   2844e:	4628      	mov	r0, r5
   28450:	4622      	mov	r2, r4
   28452:	4631      	mov	r1, r6
   28454:	ab01      	add	r3, sp, #4
   28456:	f7f5 fc7d 	bl	1dd54 <nrf_getaddrinfo>
	if (retval != 0) {
   2845a:	4605      	mov	r5, r0
   2845c:	b1b8      	cbz	r0, 2848e <nrf91_socket_offload_getaddrinfo+0x82>
	switch (nrf_error) {
   2845e:	282f      	cmp	r0, #47	; 0x2f
   28460:	f000 80b7 	beq.w	285d2 <nrf91_socket_offload_getaddrinfo+0x1c6>
   28464:	dc0c      	bgt.n	28480 <nrf91_socket_offload_getaddrinfo+0x74>
   28466:	280c      	cmp	r0, #12
   28468:	f000 80b6 	beq.w	285d8 <nrf91_socket_offload_getaddrinfo+0x1cc>
   2846c:	2823      	cmp	r0, #35	; 0x23
   2846e:	bf14      	ite	ne
   28470:	f06f 050a 	mvnne.w	r5, #10
   28474:	f06f 0502 	mvneq.w	r5, #2
}
   28478:	4628      	mov	r0, r5
   2847a:	b013      	add	sp, #76	; 0x4c
   2847c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return DNS_EAI_INPROGRESS;
   28480:	2873      	cmp	r0, #115	; 0x73
   28482:	bf14      	ite	ne
   28484:	f06f 050a 	mvnne.w	r5, #10
   28488:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   2848c:	e7f4      	b.n	28478 <nrf91_socket_offload_getaddrinfo+0x6c>
	struct zsock_addrinfo *latest_z_res = NULL;
   2848e:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   28490:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   28492:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   28494:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   28496:	b91e      	cbnz	r6, 284a0 <nrf91_socket_offload_getaddrinfo+0x94>
	nrf_freeaddrinfo(nrf_res);
   28498:	9801      	ldr	r0, [sp, #4]
   2849a:	f7f5 fc5d 	bl	1dd58 <nrf_freeaddrinfo>
	return retval;
   2849e:	e7eb      	b.n	28478 <nrf91_socket_offload_getaddrinfo+0x6c>
					k_malloc(sizeof(struct zsock_addrinfo));
   284a0:	2050      	movs	r0, #80	; 0x50
   284a2:	f7f7 fc35 	bl	1fd10 <k_malloc>
		if (next_z_res == NULL) {
   284a6:	4604      	mov	r4, r0
   284a8:	2800      	cmp	r0, #0
   284aa:	f000 8081 	beq.w	285b0 <nrf91_socket_offload_getaddrinfo+0x1a4>
	family = nrf_to_z_family(nrf_in->ai_family);
   284ae:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   284b0:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   284b2:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   284b4:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   284b8:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   284bc:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   284c0:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   284c2:	dc23      	bgt.n	2850c <nrf91_socket_offload_getaddrinfo+0x100>
   284c4:	2900      	cmp	r1, #0
   284c6:	dd23      	ble.n	28510 <nrf91_socket_offload_getaddrinfo+0x104>
   284c8:	1e4b      	subs	r3, r1, #1
   284ca:	2b09      	cmp	r3, #9
   284cc:	d820      	bhi.n	28510 <nrf91_socket_offload_getaddrinfo+0x104>
   284ce:	e8df f003 	tbb	[pc, r3]
   284d2:	2905      	.short	0x2905
   284d4:	1f251f1f 	.word	0x1f251f1f
   284d8:	271f1f1f 	.word	0x271f1f1f
		return AF_LOCAL;
   284dc:	2306      	movs	r3, #6
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   284de:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   284e0:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   284e2:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   284e6:	d04b      	beq.n	28580 <nrf91_socket_offload_getaddrinfo+0x174>
   284e8:	dc26      	bgt.n	28538 <nrf91_socket_offload_getaddrinfo+0x12c>
   284ea:	2a02      	cmp	r2, #2
   284ec:	d04c      	beq.n	28588 <nrf91_socket_offload_getaddrinfo+0x17c>
   284ee:	dc1d      	bgt.n	2852c <nrf91_socket_offload_getaddrinfo+0x120>
   284f0:	b372      	cbz	r2, 28550 <nrf91_socket_offload_getaddrinfo+0x144>
   284f2:	2a01      	cmp	r2, #1
   284f4:	d04a      	beq.n	2858c <nrf91_socket_offload_getaddrinfo+0x180>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   284f6:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   284fa:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   284fc:	2300      	movs	r3, #0
   284fe:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   28500:	4620      	mov	r0, r4
   28502:	f000 fbb4 	bl	28c6e <k_free>
			retval = DNS_EAI_SOCKTYPE;
   28506:	f06f 0506 	mvn.w	r5, #6
   2850a:	e053      	b.n	285b4 <nrf91_socket_offload_getaddrinfo+0x1a8>
	switch (nrf_family) {
   2850c:	2966      	cmp	r1, #102	; 0x66
   2850e:	d00b      	beq.n	28528 <nrf91_socket_offload_getaddrinfo+0x11c>
			k_free(next_z_res);
   28510:	4620      	mov	r0, r4
   28512:	f000 fbac 	bl	28c6e <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   28516:	f06f 0508 	mvn.w	r5, #8
   2851a:	e04b      	b.n	285b4 <nrf91_socket_offload_getaddrinfo+0x1a8>
		return AF_PACKET;
   2851c:	2303      	movs	r3, #3
   2851e:	e7de      	b.n	284de <nrf91_socket_offload_getaddrinfo+0xd2>
		return AF_INET6;
   28520:	2302      	movs	r3, #2
   28522:	e7dc      	b.n	284de <nrf91_socket_offload_getaddrinfo+0xd2>
	switch (nrf_family) {
   28524:	2301      	movs	r3, #1
   28526:	e7da      	b.n	284de <nrf91_socket_offload_getaddrinfo+0xd2>
		return AF_LTE;
   28528:	460b      	mov	r3, r1
   2852a:	e7d8      	b.n	284de <nrf91_socket_offload_getaddrinfo+0xd2>
	switch (proto) {
   2852c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   28530:	d1e1      	bne.n	284f6 <nrf91_socket_offload_getaddrinfo+0xea>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   28532:	f44f 7381 	mov.w	r3, #258	; 0x102
   28536:	e025      	b.n	28584 <nrf91_socket_offload_getaddrinfo+0x178>
	switch (proto) {
   28538:	f240 2302 	movw	r3, #514	; 0x202
   2853c:	429a      	cmp	r2, r3
   2853e:	d007      	beq.n	28550 <nrf91_socket_offload_getaddrinfo+0x144>
   28540:	f240 2303 	movw	r3, #515	; 0x203
   28544:	429a      	cmp	r2, r3
   28546:	d003      	beq.n	28550 <nrf91_socket_offload_getaddrinfo+0x144>
   28548:	f240 2301 	movw	r3, #513	; 0x201
   2854c:	429a      	cmp	r2, r3
   2854e:	d1d2      	bne.n	284f6 <nrf91_socket_offload_getaddrinfo+0xea>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   28550:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   28552:	2902      	cmp	r1, #2
   28554:	d11c      	bne.n	28590 <nrf91_socket_offload_getaddrinfo+0x184>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   28556:	2008      	movs	r0, #8
   28558:	f7f7 fbda 	bl	1fd10 <k_malloc>
   2855c:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   2855e:	b320      	cbz	r0, 285aa <nrf91_socket_offload_getaddrinfo+0x19e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   28560:	2308      	movs	r3, #8
   28562:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   28564:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   28566:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   28568:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   2856a:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   2856c:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2856e:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   28570:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   28572:	f1b8 0f00 	cmp.w	r8, #0
   28576:	d123      	bne.n	285c0 <nrf91_socket_offload_getaddrinfo+0x1b4>
			*res = next_z_res;
   28578:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   2857a:	46a0      	mov	r8, r4
   2857c:	69f6      	ldr	r6, [r6, #28]
   2857e:	e78a      	b.n	28496 <nrf91_socket_offload_getaddrinfo+0x8a>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   28580:	f240 1311 	movw	r3, #273	; 0x111
   28584:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   28586:	e7e4      	b.n	28552 <nrf91_socket_offload_getaddrinfo+0x146>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   28588:	2311      	movs	r3, #17
   2858a:	e7fb      	b.n	28584 <nrf91_socket_offload_getaddrinfo+0x178>
   2858c:	2306      	movs	r3, #6
   2858e:	e7f9      	b.n	28584 <nrf91_socket_offload_getaddrinfo+0x178>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   28590:	290a      	cmp	r1, #10
   28592:	d1b5      	bne.n	28500 <nrf91_socket_offload_getaddrinfo+0xf4>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   28594:	2018      	movs	r0, #24
   28596:	f7f7 fbbb 	bl	1fd10 <k_malloc>
   2859a:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   2859c:	b128      	cbz	r0, 285aa <nrf91_socket_offload_getaddrinfo+0x19e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2859e:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   285a0:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   285a2:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   285a4:	f7ff fee3 	bl	2836e <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   285a8:	e7e3      	b.n	28572 <nrf91_socket_offload_getaddrinfo+0x166>
			k_free(next_z_res);
   285aa:	4620      	mov	r0, r4
   285ac:	f000 fb5f 	bl	28c6e <k_free>
			retval = DNS_EAI_MEMORY;
   285b0:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   285b4:	6838      	ldr	r0, [r7, #0]
   285b6:	f7ff fea8 	bl	2830a <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   285ba:	2300      	movs	r3, #0
   285bc:	603b      	str	r3, [r7, #0]
   285be:	e76b      	b.n	28498 <nrf91_socket_offload_getaddrinfo+0x8c>
			latest_z_res->ai_next = next_z_res;
   285c0:	f8c8 4000 	str.w	r4, [r8]
   285c4:	e7d9      	b.n	2857a <nrf91_socket_offload_getaddrinfo+0x16e>
			return DNS_EAI_SOCKTYPE;
   285c6:	f06f 0506 	mvn.w	r5, #6
   285ca:	e755      	b.n	28478 <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   285cc:	f06f 0508 	mvn.w	r5, #8
   285d0:	e752      	b.n	28478 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   285d2:	f06f 0501 	mvn.w	r5, #1
   285d6:	e74f      	b.n	28478 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   285d8:	f06f 0509 	mvn.w	r5, #9
   285dc:	e74c      	b.n	28478 <nrf91_socket_offload_getaddrinfo+0x6c>

000285de <z_to_nrf_ipv6>:
{
   285de:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   285e0:	2124      	movs	r1, #36	; 0x24
   285e2:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   285e4:	8841      	ldrh	r1, [r0, #2]
{
   285e6:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   285e8:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   285ea:	210a      	movs	r1, #10
{
   285ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   285ee:	6059      	str	r1, [r3, #4]
   285f0:	1d04      	adds	r4, r0, #4
   285f2:	f103 0610 	add.w	r6, r3, #16
   285f6:	f100 0714 	add.w	r7, r0, #20
   285fa:	4635      	mov	r5, r6
   285fc:	6820      	ldr	r0, [r4, #0]
   285fe:	6861      	ldr	r1, [r4, #4]
   28600:	3408      	adds	r4, #8
   28602:	c503      	stmia	r5!, {r0, r1}
   28604:	42bc      	cmp	r4, r7
   28606:	462e      	mov	r6, r5
   28608:	d1f7      	bne.n	285fa <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   2860a:	7d12      	ldrb	r2, [r2, #20]
   2860c:	621a      	str	r2, [r3, #32]
}
   2860e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028610 <nrf91_socket_offload_sendto>:
{
   28610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28614:	b08e      	sub	sp, #56	; 0x38
   28616:	9c14      	ldr	r4, [sp, #80]	; 0x50
   28618:	460e      	mov	r6, r1
   2861a:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   2861c:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   2861e:	b974      	cbnz	r4, 2863e <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   28620:	4618      	mov	r0, r3
   28622:	9203      	str	r2, [sp, #12]
   28624:	f7ff fdbc 	bl	281a0 <z_to_nrf_flags>
   28628:	4603      	mov	r3, r0
   2862a:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2862e:	4631      	mov	r1, r6
   28630:	4628      	mov	r0, r5
   28632:	9a03      	ldr	r2, [sp, #12]
   28634:	f7f5 faba 	bl	1dbac <nrf_sendto>
}
   28638:	b00e      	add	sp, #56	; 0x38
   2863a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   2863e:	8823      	ldrh	r3, [r4, #0]
   28640:	9203      	str	r2, [sp, #12]
   28642:	2b01      	cmp	r3, #1
   28644:	d111      	bne.n	2866a <nrf91_socket_offload_sendto+0x5a>
	nrf_out->sin_port = ptr->sin_port;
   28646:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   28648:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   2864a:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   2864e:	2302      	movs	r3, #2
   28650:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   28652:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   28654:	4638      	mov	r0, r7
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   28656:	f88d 1014 	strb.w	r1, [sp, #20]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2865a:	9308      	str	r3, [sp, #32]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2865c:	f7ff fda0 	bl	281a0 <z_to_nrf_flags>
   28660:	9101      	str	r1, [sp, #4]
   28662:	a905      	add	r1, sp, #20
   28664:	4603      	mov	r3, r0
   28666:	9100      	str	r1, [sp, #0]
   28668:	e7e1      	b.n	2862e <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   2866a:	2b02      	cmp	r3, #2
   2866c:	d10d      	bne.n	2868a <nrf91_socket_offload_sendto+0x7a>
		z_to_nrf_ipv6(to, &ipv6);
   2866e:	f10d 0814 	add.w	r8, sp, #20
   28672:	4641      	mov	r1, r8
   28674:	4620      	mov	r0, r4
   28676:	f7ff ffb2 	bl	285de <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2867a:	4638      	mov	r0, r7
   2867c:	f7ff fd90 	bl	281a0 <z_to_nrf_flags>
   28680:	2124      	movs	r1, #36	; 0x24
   28682:	4603      	mov	r3, r0
   28684:	e9cd 8100 	strd	r8, r1, [sp]
   28688:	e7d1      	b.n	2862e <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   2868a:	f7fc fb41 	bl	24d10 <__errno>
   2868e:	2386      	movs	r3, #134	; 0x86
   28690:	6003      	str	r3, [r0, #0]
	return retval;
   28692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28696:	e7cf      	b.n	28638 <nrf91_socket_offload_sendto+0x28>

00028698 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   28698:	2300      	movs	r3, #0
{
   2869a:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2869c:	e9cd 3300 	strd	r3, r3, [sp]
   286a0:	f7ff ffb6 	bl	28610 <nrf91_socket_offload_sendto>
}
   286a4:	b003      	add	sp, #12
   286a6:	f85d fb04 	ldr.w	pc, [sp], #4

000286aa <nrf91_socket_offload_connect>:
{
   286aa:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   286ac:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   286ae:	8808      	ldrh	r0, [r1, #0]
{
   286b0:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   286b2:	2801      	cmp	r0, #1
{
   286b4:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   286b6:	d10f      	bne.n	286d8 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   286b8:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   286ba:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   286bc:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   286c0:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   286c2:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   286c4:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   286c8:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   286ca:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   286cc:	4620      	mov	r0, r4
   286ce:	a901      	add	r1, sp, #4
   286d0:	f7f5 fabe 	bl	1dc50 <nrf_connect>
}
   286d4:	b00a      	add	sp, #40	; 0x28
   286d6:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   286d8:	2802      	cmp	r0, #2
   286da:	d105      	bne.n	286e8 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   286dc:	4618      	mov	r0, r3
   286de:	a901      	add	r1, sp, #4
   286e0:	f7ff ff7d 	bl	285de <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   286e4:	2224      	movs	r2, #36	; 0x24
   286e6:	e7f1      	b.n	286cc <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   286e8:	4620      	mov	r0, r4
   286ea:	f7f5 fab1 	bl	1dc50 <nrf_connect>
		if (retval < 0) {
   286ee:	2800      	cmp	r0, #0
   286f0:	daf0      	bge.n	286d4 <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   286f2:	f7fc fb0d 	bl	24d10 <__errno>
   286f6:	2386      	movs	r3, #134	; 0x86
   286f8:	6003      	str	r3, [r0, #0]
   286fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   286fe:	e7e9      	b.n	286d4 <nrf91_socket_offload_connect+0x2a>

00028700 <nrf91_socket_offload_setsockopt>:
{
   28700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28704:	461d      	mov	r5, r3
	switch (z_in_level) {
   28706:	f240 2302 	movw	r3, #514	; 0x202
{
   2870a:	b086      	sub	sp, #24
	switch (z_in_level) {
   2870c:	4299      	cmp	r1, r3
{
   2870e:	460c      	mov	r4, r1
   28710:	4616      	mov	r6, r2
   28712:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   28714:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	switch (z_in_level) {
   28718:	d005      	beq.n	28726 <nrf91_socket_offload_setsockopt+0x26>
   2871a:	dc1f      	bgt.n	2875c <nrf91_socket_offload_setsockopt+0x5c>
   2871c:	2901      	cmp	r1, #1
   2871e:	d002      	beq.n	28726 <nrf91_socket_offload_setsockopt+0x26>
   28720:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   28724:	d125      	bne.n	28772 <nrf91_socket_offload_setsockopt+0x72>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   28726:	4631      	mov	r1, r6
   28728:	4620      	mov	r0, r4
   2872a:	aa03      	add	r2, sp, #12
   2872c:	f7ec fd70 	bl	15210 <z_to_nrf_optname>
   28730:	2800      	cmp	r0, #0
   28732:	db1e      	blt.n	28772 <nrf91_socket_offload_setsockopt+0x72>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   28734:	2c01      	cmp	r4, #1
   28736:	d115      	bne.n	28764 <nrf91_socket_offload_setsockopt+0x64>
   28738:	2e14      	cmp	r6, #20
   2873a:	d105      	bne.n	28748 <nrf91_socket_offload_setsockopt+0x48>
		nrf_optlen = sizeof(struct nrf_timeval);
   2873c:	2708      	movs	r7, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2873e:	682b      	ldr	r3, [r5, #0]
   28740:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   28742:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   28744:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   28746:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   28748:	462b      	mov	r3, r5
   2874a:	4621      	mov	r1, r4
   2874c:	4640      	mov	r0, r8
   2874e:	9a03      	ldr	r2, [sp, #12]
   28750:	9700      	str	r7, [sp, #0]
   28752:	f7f5 fac7 	bl	1dce4 <nrf_setsockopt>
}
   28756:	b006      	add	sp, #24
   28758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2875c:	f240 2303 	movw	r3, #515	; 0x203
   28760:	4299      	cmp	r1, r3
   28762:	e7df      	b.n	28724 <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   28764:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   28768:	d1ee      	bne.n	28748 <nrf91_socket_offload_setsockopt+0x48>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   2876a:	2e07      	cmp	r6, #7
   2876c:	bf08      	it	eq
   2876e:	2701      	moveq	r7, #1
   28770:	e7ea      	b.n	28748 <nrf91_socket_offload_setsockopt+0x48>
	errno = ENOPROTOOPT;
   28772:	f7fc facd 	bl	24d10 <__errno>
   28776:	236d      	movs	r3, #109	; 0x6d
   28778:	6003      	str	r3, [r0, #0]
   2877a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2877e:	e7ea      	b.n	28756 <nrf91_socket_offload_setsockopt+0x56>

00028780 <nrf91_socket_offload_bind>:
{
   28780:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   28782:	880a      	ldrh	r2, [r1, #0]
{
   28784:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   28786:	2a01      	cmp	r2, #1
{
   28788:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   2878a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
	if (addr->sa_family == AF_INET) {
   2878e:	d10f      	bne.n	287b0 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   28790:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   28792:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   28794:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   28798:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2879a:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2879c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   287a0:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   287a2:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   287a4:	4620      	mov	r0, r4
   287a6:	a901      	add	r1, sp, #4
   287a8:	f7f5 fa8a 	bl	1dcc0 <nrf_bind>
}
   287ac:	b00a      	add	sp, #40	; 0x28
   287ae:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   287b0:	2a02      	cmp	r2, #2
   287b2:	d105      	bne.n	287c0 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   287b4:	4618      	mov	r0, r3
   287b6:	a901      	add	r1, sp, #4
   287b8:	f7ff ff11 	bl	285de <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   287bc:	2224      	movs	r2, #36	; 0x24
   287be:	e7f1      	b.n	287a4 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   287c0:	f7fc faa6 	bl	24d10 <__errno>
   287c4:	2386      	movs	r3, #134	; 0x86
   287c6:	6003      	str	r3, [r0, #0]
   287c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   287cc:	e7ee      	b.n	287ac <nrf91_socket_offload_bind+0x2c>

000287ce <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   287ce:	6883      	ldr	r3, [r0, #8]
   287d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   287d2:	b103      	cbz	r3, 287d6 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   287d4:	4718      	bx	r3
}
   287d6:	4770      	bx	lr

000287d8 <response_handler>:
	write_uart_string(response);
   287d8:	4608      	mov	r0, r1
   287da:	f7ed b9fb 	b.w	15bd4 <write_uart_string>

000287de <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   287de:	280d      	cmp	r0, #13
   287e0:	d004      	beq.n	287ec <is_lfcr+0xe>
   287e2:	f1a0 030a 	sub.w	r3, r0, #10
   287e6:	4258      	negs	r0, r3
   287e8:	4158      	adcs	r0, r3
   287ea:	4770      	bx	lr
		return true;
   287ec:	2001      	movs	r0, #1
}
   287ee:	4770      	bx	lr

000287f0 <skip_command_prefix>:
{
   287f0:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   287f2:	6801      	ldr	r1, [r0, #0]
{
   287f4:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   287f6:	1c8b      	adds	r3, r1, #2
   287f8:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   287fa:	788c      	ldrb	r4, [r1, #2]
   287fc:	4620      	mov	r0, r4
   287fe:	f7ff ffee 	bl	287de <is_lfcr>
   28802:	b910      	cbnz	r0, 2880a <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   28804:	b10c      	cbz	r4, 2880a <skip_command_prefix+0x1a>
	(*cmd)++;
   28806:	3103      	adds	r1, #3
   28808:	6011      	str	r1, [r2, #0]
}
   2880a:	bd10      	pop	{r4, pc}

0002880c <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   2880c:	6813      	ldr	r3, [r2, #0]
   2880e:	f7ed bd1d 	b.w	1624c <at_parser_max_params_from_str>

00028812 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   28812:	6803      	ldr	r3, [r0, #0]
   28814:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   28816:	bf83      	ittte	hi
   28818:	230c      	movhi	r3, #12
   2881a:	6840      	ldrhi	r0, [r0, #4]
   2881c:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   28820:	2000      	movls	r0, #0
}
   28822:	4770      	bx	lr

00028824 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   28824:	7803      	ldrb	r3, [r0, #0]
   28826:	2b01      	cmp	r3, #1
   28828:	d006      	beq.n	28838 <at_param_size+0x14>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   2882a:	2b02      	cmp	r3, #2
   2882c:	d006      	beq.n	2883c <at_param_size+0x18>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   2882e:	3b03      	subs	r3, #3
   28830:	2b01      	cmp	r3, #1
   28832:	d805      	bhi.n	28840 <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   28834:	6840      	ldr	r0, [r0, #4]
   28836:	4770      	bx	lr
		return sizeof(u16_t);
   28838:	2002      	movs	r0, #2
   2883a:	4770      	bx	lr
		return sizeof(u32_t);
   2883c:	2004      	movs	r0, #4
   2883e:	4770      	bx	lr
	}

	return 0;
   28840:	2000      	movs	r0, #0
}
   28842:	4770      	bx	lr

00028844 <at_param_clear>:
{
   28844:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   28846:	7803      	ldrb	r3, [r0, #0]
{
   28848:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2884a:	3b03      	subs	r3, #3
   2884c:	2b01      	cmp	r3, #1
   2884e:	d802      	bhi.n	28856 <at_param_clear+0x12>
		k_free(param->value.str_val);
   28850:	6880      	ldr	r0, [r0, #8]
   28852:	f000 fa0c 	bl	28c6e <k_free>
	param->value.int_val = 0;
   28856:	2300      	movs	r3, #0
   28858:	60a3      	str	r3, [r4, #8]
}
   2885a:	bd10      	pop	{r4, pc}

0002885c <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   2885c:	b538      	push	{r3, r4, r5, lr}
   2885e:	460d      	mov	r5, r1
	if (list == NULL) {
   28860:	4604      	mov	r4, r0
   28862:	b140      	cbz	r0, 28876 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   28864:	210c      	movs	r1, #12
   28866:	4628      	mov	r0, r5
   28868:	f000 fa06 	bl	28c78 <k_calloc>
   2886c:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   2886e:	b128      	cbz	r0, 2887c <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   28870:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   28872:	6025      	str	r5, [r4, #0]
}
   28874:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   28876:	f06f 0015 	mvn.w	r0, #21
   2887a:	e7fb      	b.n	28874 <at_params_list_init+0x18>
		return -ENOMEM;
   2887c:	f06f 000b 	mvn.w	r0, #11
   28880:	e7f8      	b.n	28874 <at_params_list_init+0x18>

00028882 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   28882:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (list == NULL || list->params == NULL) {
   28886:	4604      	mov	r4, r0
   28888:	b140      	cbz	r0, 2889c <at_params_list_clear+0x1a>
   2888a:	6843      	ldr	r3, [r0, #4]
   2888c:	b133      	cbz	r3, 2889c <at_params_list_clear+0x1a>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   2888e:	2500      	movs	r5, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   28890:	f04f 0a0c 	mov.w	sl, #12
__ssp_bos_icheck3(memset, void *, int)
   28894:	462e      	mov	r6, r5
	for (size_t i = 0; i < list->param_count; ++i) {
   28896:	6823      	ldr	r3, [r4, #0]
   28898:	429d      	cmp	r5, r3
   2889a:	d301      	bcc.n	288a0 <at_params_list_clear+0x1e>
		at_param_init(&params[i]);
	}
}
   2889c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		at_param_clear(&params[i]);
   288a0:	fb0a f805 	mul.w	r8, sl, r5
   288a4:	f8d4 9004 	ldr.w	r9, [r4, #4]
	for (size_t i = 0; i < list->param_count; ++i) {
   288a8:	3501      	adds	r5, #1
		at_param_clear(&params[i]);
   288aa:	eb09 0708 	add.w	r7, r9, r8
   288ae:	4638      	mov	r0, r7
   288b0:	f7ff ffc8 	bl	28844 <at_param_clear>
   288b4:	f849 6008 	str.w	r6, [r9, r8]
   288b8:	607e      	str	r6, [r7, #4]
   288ba:	60be      	str	r6, [r7, #8]
	for (size_t i = 0; i < list->param_count; ++i) {
   288bc:	e7eb      	b.n	28896 <at_params_list_clear+0x14>

000288be <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   288be:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   288c0:	4604      	mov	r4, r0
   288c2:	b148      	cbz	r0, 288d8 <at_params_list_free+0x1a>
   288c4:	6843      	ldr	r3, [r0, #4]
   288c6:	b13b      	cbz	r3, 288d8 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   288c8:	2500      	movs	r5, #0
	at_params_list_clear(list);
   288ca:	f7ff ffda 	bl	28882 <at_params_list_clear>
	k_free(list->params);
   288ce:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   288d0:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   288d2:	f000 f9cc 	bl	28c6e <k_free>
	list->params = NULL;
   288d6:	6065      	str	r5, [r4, #4]
}
   288d8:	bd38      	pop	{r3, r4, r5, pc}

000288da <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   288da:	b538      	push	{r3, r4, r5, lr}
   288dc:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   288de:	b160      	cbz	r0, 288fa <at_params_short_put+0x20>
   288e0:	6843      	ldr	r3, [r0, #4]
   288e2:	b153      	cbz	r3, 288fa <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   288e4:	f7ff ff95 	bl	28812 <at_params_get>

	if (param == NULL) {
   288e8:	4604      	mov	r4, r0
   288ea:	b130      	cbz	r0, 288fa <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   288ec:	f7ff ffaa 	bl	28844 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   288f0:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
   288f2:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   288f4:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   288f6:	60a5      	str	r5, [r4, #8]
}
   288f8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   288fa:	f06f 0015 	mvn.w	r0, #21
   288fe:	e7fb      	b.n	288f8 <at_params_short_put+0x1e>

00028900 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   28900:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   28902:	b160      	cbz	r0, 2891e <at_params_empty_put+0x1e>
   28904:	6843      	ldr	r3, [r0, #4]
   28906:	b153      	cbz	r3, 2891e <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   28908:	f7ff ff83 	bl	28812 <at_params_get>

	if (param == NULL) {
   2890c:	4604      	mov	r4, r0
   2890e:	b130      	cbz	r0, 2891e <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   28910:	f7ff ff98 	bl	28844 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   28914:	2305      	movs	r3, #5
	param->value.int_val = 0;
   28916:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   28918:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   2891a:	60a0      	str	r0, [r4, #8]

	return 0;
}
   2891c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2891e:	f06f 0015 	mvn.w	r0, #21
   28922:	e7fb      	b.n	2891c <at_params_empty_put+0x1c>

00028924 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   28924:	b538      	push	{r3, r4, r5, lr}
   28926:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   28928:	b160      	cbz	r0, 28944 <at_params_int_put+0x20>
   2892a:	6843      	ldr	r3, [r0, #4]
   2892c:	b153      	cbz	r3, 28944 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2892e:	f7ff ff70 	bl	28812 <at_params_get>

	if (param == NULL) {
   28932:	4604      	mov	r4, r0
   28934:	b130      	cbz	r0, 28944 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   28936:	f7ff ff85 	bl	28844 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   2893a:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   2893c:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   2893e:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   28940:	60a5      	str	r5, [r4, #8]
}
   28942:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   28944:	f06f 0015 	mvn.w	r0, #21
   28948:	e7fb      	b.n	28942 <at_params_int_put+0x1e>

0002894a <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   2894a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2894c:	4617      	mov	r7, r2
   2894e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   28950:	b1c0      	cbz	r0, 28984 <at_params_string_put+0x3a>
   28952:	6843      	ldr	r3, [r0, #4]
   28954:	b1b3      	cbz	r3, 28984 <at_params_string_put+0x3a>
   28956:	b1aa      	cbz	r2, 28984 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   28958:	f7ff ff5b 	bl	28812 <at_params_get>

	if (param == NULL) {
   2895c:	4604      	mov	r4, r0
   2895e:	b188      	cbz	r0, 28984 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   28960:	1c68      	adds	r0, r5, #1
   28962:	f7f7 f9d5 	bl	1fd10 <k_malloc>

	if (param_value == NULL) {
   28966:	4606      	mov	r6, r0
   28968:	b178      	cbz	r0, 2898a <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2896a:	462a      	mov	r2, r5
   2896c:	4639      	mov	r1, r7
   2896e:	f000 fd80 	bl	29472 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   28972:	4620      	mov	r0, r4
   28974:	f7ff ff66 	bl	28844 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   28978:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   2897a:	2000      	movs	r0, #0
	param->size = str_len;
   2897c:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   2897e:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   28980:	60a6      	str	r6, [r4, #8]
}
   28982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   28984:	f06f 0015 	mvn.w	r0, #21
   28988:	e7fb      	b.n	28982 <at_params_string_put+0x38>
		return -ENOMEM;
   2898a:	f06f 000b 	mvn.w	r0, #11
   2898e:	e7f8      	b.n	28982 <at_params_string_put+0x38>

00028990 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   28990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28992:	4617      	mov	r7, r2
   28994:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   28996:	b1c0      	cbz	r0, 289ca <at_params_array_put+0x3a>
   28998:	6843      	ldr	r3, [r0, #4]
   2899a:	b1b3      	cbz	r3, 289ca <at_params_array_put+0x3a>
   2899c:	b1aa      	cbz	r2, 289ca <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2899e:	f7ff ff38 	bl	28812 <at_params_get>

	if (param == NULL) {
   289a2:	4604      	mov	r4, r0
   289a4:	b188      	cbz	r0, 289ca <at_params_array_put+0x3a>
		return -EINVAL;
	}

	u32_t *param_value = (u32_t *)k_malloc(array_len);
   289a6:	4628      	mov	r0, r5
   289a8:	f7f7 f9b2 	bl	1fd10 <k_malloc>

	if (param_value == NULL) {
   289ac:	4606      	mov	r6, r0
   289ae:	b178      	cbz	r0, 289d0 <at_params_array_put+0x40>
   289b0:	462a      	mov	r2, r5
   289b2:	4639      	mov	r1, r7
   289b4:	f000 fd5d 	bl	29472 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   289b8:	4620      	mov	r0, r4
   289ba:	f7ff ff43 	bl	28844 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   289be:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   289c0:	2000      	movs	r0, #0
	param->size = array_len;
   289c2:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   289c4:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   289c6:	60a6      	str	r6, [r4, #8]
}
   289c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   289ca:	f06f 0015 	mvn.w	r0, #21
   289ce:	e7fb      	b.n	289c8 <at_params_array_put+0x38>
		return -ENOMEM;
   289d0:	f06f 000b 	mvn.w	r0, #11
   289d4:	e7f8      	b.n	289c8 <at_params_array_put+0x38>

000289d6 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   289d6:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   289d8:	b160      	cbz	r0, 289f4 <at_params_short_get+0x1e>
   289da:	6843      	ldr	r3, [r0, #4]
   289dc:	b153      	cbz	r3, 289f4 <at_params_short_get+0x1e>
   289de:	b14a      	cbz	r2, 289f4 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   289e0:	f7ff ff17 	bl	28812 <at_params_get>

	if (param == NULL) {
   289e4:	b130      	cbz	r0, 289f4 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   289e6:	7803      	ldrb	r3, [r0, #0]
   289e8:	2b01      	cmp	r3, #1
   289ea:	d103      	bne.n	289f4 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
   289ec:	6883      	ldr	r3, [r0, #8]
	return 0;
   289ee:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   289f0:	8013      	strh	r3, [r2, #0]
}
   289f2:	bd08      	pop	{r3, pc}
		return -EINVAL;
   289f4:	f06f 0015 	mvn.w	r0, #21
   289f8:	e7fb      	b.n	289f2 <at_params_short_get+0x1c>

000289fa <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   289fa:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   289fc:	b168      	cbz	r0, 28a1a <at_params_int_get+0x20>
   289fe:	6843      	ldr	r3, [r0, #4]
   28a00:	b15b      	cbz	r3, 28a1a <at_params_int_get+0x20>
   28a02:	b152      	cbz	r2, 28a1a <at_params_int_get+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   28a04:	f7ff ff05 	bl	28812 <at_params_get>

	if (param == NULL) {
   28a08:	b138      	cbz	r0, 28a1a <at_params_int_get+0x20>
		return -EINVAL;
	}

	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   28a0a:	7803      	ldrb	r3, [r0, #0]
   28a0c:	3b01      	subs	r3, #1
   28a0e:	2b01      	cmp	r3, #1
   28a10:	d803      	bhi.n	28a1a <at_params_int_get+0x20>
	    (param->type != AT_PARAM_TYPE_NUM_SHORT)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   28a12:	6883      	ldr	r3, [r0, #8]
	return 0;
   28a14:	2000      	movs	r0, #0
	*value = param->value.int_val;
   28a16:	6013      	str	r3, [r2, #0]
}
   28a18:	bd08      	pop	{r3, pc}
		return -EINVAL;
   28a1a:	f06f 0015 	mvn.w	r0, #21
   28a1e:	e7fb      	b.n	28a18 <at_params_int_get+0x1e>

00028a20 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   28a20:	b570      	push	{r4, r5, r6, lr}
   28a22:	4616      	mov	r6, r2
   28a24:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   28a26:	b1c0      	cbz	r0, 28a5a <at_params_string_get+0x3a>
   28a28:	6843      	ldr	r3, [r0, #4]
   28a2a:	b1b3      	cbz	r3, 28a5a <at_params_string_get+0x3a>
   28a2c:	b1aa      	cbz	r2, 28a5a <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   28a2e:	b1a4      	cbz	r4, 28a5a <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   28a30:	f7ff feef 	bl	28812 <at_params_get>

	if (param == NULL) {
   28a34:	4601      	mov	r1, r0
   28a36:	b180      	cbz	r0, 28a5a <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   28a38:	7803      	ldrb	r3, [r0, #0]
   28a3a:	2b03      	cmp	r3, #3
   28a3c:	d10d      	bne.n	28a5a <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   28a3e:	f7ff fef1 	bl	28824 <at_param_size>

	if (*len < param_len) {
   28a42:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   28a44:	4605      	mov	r5, r0
	if (*len < param_len) {
   28a46:	4283      	cmp	r3, r0
   28a48:	d30a      	bcc.n	28a60 <at_params_string_get+0x40>
   28a4a:	4602      	mov	r2, r0
   28a4c:	6889      	ldr	r1, [r1, #8]
   28a4e:	4630      	mov	r0, r6
   28a50:	f000 fd0f 	bl	29472 <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   28a54:	2000      	movs	r0, #0
	*len = param_len;
   28a56:	6025      	str	r5, [r4, #0]
}
   28a58:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   28a5a:	f06f 0015 	mvn.w	r0, #21
   28a5e:	e7fb      	b.n	28a58 <at_params_string_get+0x38>
		return -ENOMEM;
   28a60:	f06f 000b 	mvn.w	r0, #11
   28a64:	e7f8      	b.n	28a58 <at_params_string_get+0x38>

00028a66 <at_params_valid_count_get>:
	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   28a66:	4602      	mov	r2, r0
{
   28a68:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   28a6a:	b170      	cbz	r0, 28a8a <at_params_valid_count_get+0x24>
   28a6c:	6840      	ldr	r0, [r0, #4]
   28a6e:	b160      	cbz	r0, 28a8a <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   28a70:	6811      	ldr	r1, [r2, #0]
   28a72:	b141      	cbz	r1, 28a86 <at_params_valid_count_get+0x20>
   28a74:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   28a76:	7803      	ldrb	r3, [r0, #0]
   28a78:	b12b      	cbz	r3, 28a86 <at_params_valid_count_get+0x20>
		valid_i += 1;
		param = at_params_get(list, valid_i);
   28a7a:	4610      	mov	r0, r2
		valid_i += 1;
   28a7c:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   28a7e:	f7ff fec8 	bl	28812 <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   28a82:	2800      	cmp	r0, #0
   28a84:	d1f7      	bne.n	28a76 <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   28a86:	4608      	mov	r0, r1
   28a88:	bd08      	pop	{r3, pc}
		return -EINVAL;
   28a8a:	f06f 0115 	mvn.w	r1, #21
   28a8e:	e7fa      	b.n	28a86 <at_params_valid_count_get+0x20>

00028a90 <response_is_valid>:
{
   28a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28a92:	4605      	mov	r5, r0
	if ((response_len < strlen(check)) ||
   28a94:	4610      	mov	r0, r2
{
   28a96:	460c      	mov	r4, r1
	if ((response_len < strlen(check)) ||
   28a98:	9201      	str	r2, [sp, #4]
   28a9a:	f7e4 fa4d 	bl	cf38 <strlen>
   28a9e:	42a0      	cmp	r0, r4
   28aa0:	d809      	bhi.n	28ab6 <response_is_valid+0x26>
	    (memcmp(response, check, response_len) != 0)) {
   28aa2:	4622      	mov	r2, r4
   28aa4:	4628      	mov	r0, r5
   28aa6:	9901      	ldr	r1, [sp, #4]
   28aa8:	f000 fcd5 	bl	29456 <memcmp>
	if ((response_len < strlen(check)) ||
   28aac:	fab0 f080 	clz	r0, r0
   28ab0:	0940      	lsrs	r0, r0, #5
}
   28ab2:	b003      	add	sp, #12
   28ab4:	bd30      	pop	{r4, r5, pc}
		return false;
   28ab6:	2000      	movs	r0, #0
   28ab8:	e7fb      	b.n	28ab2 <response_is_valid+0x22>

00028aba <w_lte_lc_init_and_connect>:
{
   28aba:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   28abc:	f7ed fd88 	bl	165d0 <w_lte_lc_init>
	if (ret) {
   28ac0:	b920      	cbnz	r0, 28acc <w_lte_lc_init_and_connect+0x12>
}
   28ac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   28ac6:	2001      	movs	r0, #1
   28ac8:	f7ed bdfa 	b.w	166c0 <w_lte_lc_connect>
}
   28acc:	bd08      	pop	{r3, pc}

00028ace <notify_event>:
	if (drv_data->handler) {
   28ace:	68c3      	ldr	r3, [r0, #12]
   28ad0:	685b      	ldr	r3, [r3, #4]
   28ad2:	b103      	cbz	r3, 28ad6 <notify_event+0x8>
		drv_data->handler(dev, evt);
   28ad4:	4718      	bx	r3
}
   28ad6:	4770      	bx	lr

00028ad8 <stop_work_fn>:
{
   28ad8:	b510      	push	{r4, lr}
	struct device *dev = drv_data->dev;
   28ada:	f6a0 101c 	subw	r0, r0, #2332	; 0x91c
{
   28ade:	b0b0      	sub	sp, #192	; 0xc0
	struct device *dev = drv_data->dev;
   28ae0:	6804      	ldr	r4, [r0, #0]
	struct gps_event evt = {
   28ae2:	22c0      	movs	r2, #192	; 0xc0
   28ae4:	2100      	movs	r1, #0
   28ae6:	4668      	mov	r0, sp
   28ae8:	f000 fcfd 	bl	294e6 <memset>
   28aec:	2301      	movs	r3, #1
	notify_event(dev, &evt);
   28aee:	4669      	mov	r1, sp
   28af0:	4620      	mov	r0, r4
	struct gps_event evt = {
   28af2:	f88d 3000 	strb.w	r3, [sp]
	notify_event(dev, &evt);
   28af6:	f7ff ffea 	bl	28ace <notify_event>
}
   28afa:	b030      	add	sp, #192	; 0xc0
   28afc:	bd10      	pop	{r4, pc}

00028afe <start_work_fn>:
{
   28afe:	b530      	push	{r4, r5, lr}
   28b00:	4604      	mov	r4, r0
	struct device *dev = drv_data->dev;
   28b02:	f6a0 03fc 	subw	r3, r0, #2300	; 0x8fc
{
   28b06:	b0b1      	sub	sp, #196	; 0xc4
	struct device *dev = drv_data->dev;
   28b08:	681d      	ldr	r5, [r3, #0]
	struct gps_event evt = {
   28b0a:	22c0      	movs	r2, #192	; 0xc0
   28b0c:	2100      	movs	r1, #0
   28b0e:	4668      	mov	r0, sp
   28b10:	f000 fce9 	bl	294e6 <memset>
	start(dev, &drv_data->current_cfg);
   28b14:	f6a4 01f4 	subw	r1, r4, #2292	; 0x8f4
   28b18:	4628      	mov	r0, r5
   28b1a:	f7ee fc57 	bl	173cc <start>
	notify_event(dev, &evt);
   28b1e:	4669      	mov	r1, sp
   28b20:	4628      	mov	r0, r5
   28b22:	f7ff ffd4 	bl	28ace <notify_event>
}
   28b26:	b031      	add	sp, #196	; 0xc4
   28b28:	bd30      	pop	{r4, r5, pc}

00028b2a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   28b2a:	4700      	bx	r0

00028b2c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   28b2c:	f000 ba77 	b.w	2901e <z_impl_k_busy_wait>

00028b30 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   28b30:	f7fc b899 	b.w	24c66 <z_clock_idle_exit>

00028b34 <k_heap_init>:
{
   28b34:	b410      	push	{r4}
   28b36:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   28b3a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   28b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   28b42:	f7fb bc92 	b.w	2446a <sys_heap_init>

00028b46 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   28b46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b4a:	4605      	mov	r5, r0
   28b4c:	b085      	sub	sp, #20
   28b4e:	460f      	mov	r7, r1
	s64_t now, end = z_timeout_end_calc(timeout);
   28b50:	4610      	mov	r0, r2
   28b52:	4619      	mov	r1, r3
   28b54:	f000 fb3a 	bl	291cc <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   28b58:	f105 0b14 	add.w	fp, r5, #20
	s64_t now, end = z_timeout_end_calc(timeout);
   28b5c:	9002      	str	r0, [sp, #8]
   28b5e:	468a      	mov	sl, r1
	__asm__ volatile(
   28b60:	f04f 0320 	mov.w	r3, #32
   28b64:	f3ef 8411 	mrs	r4, BASEPRI
   28b68:	f383 8811 	msr	BASEPRI, r3
   28b6c:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   28b70:	f105 060c 	add.w	r6, r5, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   28b74:	4639      	mov	r1, r7
   28b76:	4628      	mov	r0, r5
   28b78:	f7fb fc1e 	bl	243b8 <sys_heap_alloc>
   28b7c:	9003      	str	r0, [sp, #12]
		now = z_tick_get();
   28b7e:	f7f8 f87f 	bl	20c80 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   28b82:	9b03      	ldr	r3, [sp, #12]
   28b84:	b13b      	cbz	r3, 28b96 <k_heap_alloc+0x50>
	__asm__ volatile(
   28b86:	f384 8811 	msr	BASEPRI, r4
   28b8a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   28b8e:	4618      	mov	r0, r3
   28b90:	b005      	add	sp, #20
   28b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   28b96:	9a02      	ldr	r2, [sp, #8]
   28b98:	ebb2 0800 	subs.w	r8, r2, r0
   28b9c:	eb6a 0901 	sbc.w	r9, sl, r1
   28ba0:	f1b8 0f01 	cmp.w	r8, #1
   28ba4:	f179 0200 	sbcs.w	r2, r9, #0
   28ba8:	dbed      	blt.n	28b86 <k_heap_alloc+0x40>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   28baa:	4632      	mov	r2, r6
   28bac:	4621      	mov	r1, r4
   28bae:	4658      	mov	r0, fp
   28bb0:	e9cd 8900 	strd	r8, r9, [sp]
   28bb4:	f7f7 fce0 	bl	20578 <z_pend_curr>
	__asm__ volatile(
   28bb8:	f04f 0320 	mov.w	r3, #32
   28bbc:	f3ef 8411 	mrs	r4, BASEPRI
   28bc0:	f383 8811 	msr	BASEPRI, r3
   28bc4:	f3bf 8f6f 	isb	sy
   28bc8:	e7d4      	b.n	28b74 <k_heap_alloc+0x2e>

00028bca <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   28bca:	b538      	push	{r3, r4, r5, lr}
   28bcc:	4604      	mov	r4, r0
   28bce:	f04f 0320 	mov.w	r3, #32
   28bd2:	f3ef 8511 	mrs	r5, BASEPRI
   28bd6:	f383 8811 	msr	BASEPRI, r3
   28bda:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   28bde:	f7fb fb35 	bl	2424c <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   28be2:	f104 000c 	add.w	r0, r4, #12
   28be6:	f000 f9f4 	bl	28fd2 <z_unpend_all>
   28bea:	b130      	cbz	r0, 28bfa <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   28bec:	4629      	mov	r1, r5
   28bee:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   28bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   28bf6:	f000 b908 	b.w	28e0a <z_reschedule>
	__asm__ volatile(
   28bfa:	f385 8811 	msr	BASEPRI, r5
   28bfe:	f3bf 8f6f 	isb	sy
}
   28c02:	bd38      	pop	{r3, r4, r5, pc}

00028c04 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   28c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28c06:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   28c0a:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   28c0c:	6800      	ldr	r0, [r0, #0]
{
   28c0e:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   28c10:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   28c12:	4632      	mov	r2, r6
   28c14:	463b      	mov	r3, r7
   28c16:	4621      	mov	r1, r4
   28c18:	f7ff ff95 	bl	28b46 <k_heap_alloc>
   28c1c:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   28c1e:	b144      	cbz	r4, 28c32 <k_mem_pool_alloc+0x2e>
   28c20:	b938      	cbnz	r0, 28c32 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   28c22:	ea56 0307 	orrs.w	r3, r6, r7
   28c26:	bf0c      	ite	eq
   28c28:	f06f 000b 	mvneq.w	r0, #11
   28c2c:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   28c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   28c32:	2000      	movs	r0, #0
   28c34:	e7fc      	b.n	28c30 <k_mem_pool_alloc+0x2c>

00028c36 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   28c36:	e9d0 1000 	ldrd	r1, r0, [r0]
   28c3a:	f7ff bfc6 	b.w	28bca <k_heap_free>

00028c3e <k_mem_pool_malloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   28c3e:	2208      	movs	r2, #8
{
   28c40:	b530      	push	{r4, r5, lr}
   28c42:	188a      	adds	r2, r1, r2
   28c44:	b085      	sub	sp, #20
   28c46:	d207      	bcs.n	28c58 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   28c48:	2400      	movs	r4, #0
   28c4a:	2500      	movs	r5, #0
   28c4c:	a902      	add	r1, sp, #8
   28c4e:	e9cd 4500 	strd	r4, r5, [sp]
   28c52:	f7ff ffd7 	bl	28c04 <k_mem_pool_alloc>
   28c56:	b110      	cbz	r0, 28c5e <k_mem_pool_malloc+0x20>
		return NULL;
   28c58:	2000      	movs	r0, #0
}
   28c5a:	b005      	add	sp, #20
   28c5c:	bd30      	pop	{r4, r5, pc}
   28c5e:	9a02      	ldr	r2, [sp, #8]
   28c60:	ab02      	add	r3, sp, #8
   28c62:	cb03      	ldmia	r3!, {r0, r1}
   28c64:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   28c66:	9802      	ldr	r0, [sp, #8]
   28c68:	6051      	str	r1, [r2, #4]
   28c6a:	3008      	adds	r0, #8
   28c6c:	e7f5      	b.n	28c5a <k_mem_pool_malloc+0x1c>

00028c6e <k_free>:
	if (ptr != NULL) {
   28c6e:	b110      	cbz	r0, 28c76 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   28c70:	3808      	subs	r0, #8
   28c72:	f7ff bfe0 	b.w	28c36 <k_mem_pool_free_id>
}
   28c76:	4770      	bx	lr

00028c78 <k_calloc>:
{
   28c78:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   28c7a:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   28c7e:	b118      	cbz	r0, 28c88 <k_calloc+0x10>
   28c80:	fbb2 f0f0 	udiv	r0, r2, r0
   28c84:	4281      	cmp	r1, r0
   28c86:	d10c      	bne.n	28ca2 <k_calloc+0x2a>
	ret = k_malloc(bounds);
   28c88:	4610      	mov	r0, r2
   28c8a:	9201      	str	r2, [sp, #4]
   28c8c:	f7f7 f840 	bl	1fd10 <k_malloc>
	if (ret != NULL) {
   28c90:	4604      	mov	r4, r0
   28c92:	b118      	cbz	r0, 28c9c <k_calloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
   28c94:	2100      	movs	r1, #0
   28c96:	9a01      	ldr	r2, [sp, #4]
   28c98:	f000 fc25 	bl	294e6 <memset>
}
   28c9c:	4620      	mov	r0, r4
   28c9e:	b002      	add	sp, #8
   28ca0:	bd10      	pop	{r4, pc}
		return NULL;
   28ca2:	2400      	movs	r4, #0
   28ca4:	e7fa      	b.n	28c9c <k_calloc+0x24>

00028ca6 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   28ca6:	2300      	movs	r3, #0
   28ca8:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   28cac:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   28cb0:	4618      	mov	r0, r3
   28cb2:	4770      	bx	lr

00028cb4 <queue_insert>:
{
   28cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28cb8:	4604      	mov	r4, r0
   28cba:	460d      	mov	r5, r1
   28cbc:	4690      	mov	r8, r2
   28cbe:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   28cc0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   28cc4:	f04f 0320 	mov.w	r3, #32
   28cc8:	f3ef 8711 	mrs	r7, BASEPRI
   28ccc:	f383 8811 	msr	BASEPRI, r3
   28cd0:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   28cd4:	4630      	mov	r0, r6
   28cd6:	f000 f94f 	bl	28f78 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   28cda:	b158      	cbz	r0, 28cf4 <queue_insert+0x40>
   28cdc:	2400      	movs	r4, #0
   28cde:	f8c0 8014 	str.w	r8, [r0, #20]
   28ce2:	6704      	str	r4, [r0, #112]	; 0x70
	z_ready_thread(thread);
   28ce4:	f000 f8d5 	bl	28e92 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   28ce8:	4630      	mov	r0, r6
   28cea:	4639      	mov	r1, r7
   28cec:	f000 f88d 	bl	28e0a <z_reschedule>
	return 0;
   28cf0:	2000      	movs	r0, #0
   28cf2:	e00c      	b.n	28d0e <queue_insert+0x5a>
	if (alloc) {
   28cf4:	f1b9 0f00 	cmp.w	r9, #0
   28cf8:	d01b      	beq.n	28d32 <queue_insert+0x7e>
		anode = z_thread_malloc(sizeof(*anode));
   28cfa:	2008      	movs	r0, #8
   28cfc:	f7f7 f80e 	bl	1fd1c <z_thread_malloc>
		if (anode == NULL) {
   28d00:	b938      	cbnz	r0, 28d12 <queue_insert+0x5e>
	__asm__ volatile(
   28d02:	f387 8811 	msr	BASEPRI, r7
   28d06:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   28d0a:	f06f 000b 	mvn.w	r0, #11
}
   28d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   28d12:	2301      	movs	r3, #1
		anode->data = data;
   28d14:	f8c0 8004 	str.w	r8, [r0, #4]
   28d18:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   28d1a:	6803      	ldr	r3, [r0, #0]
   28d1c:	f003 0203 	and.w	r2, r3, #3
   28d20:	b95d      	cbnz	r5, 28d3a <queue_insert+0x86>
	parent->next_and_flags = cur_flags | (unative_t)child;
   28d22:	6823      	ldr	r3, [r4, #0]
   28d24:	4313      	orrs	r3, r2
   28d26:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   28d28:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   28d2a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   28d2c:	b973      	cbnz	r3, 28d4c <queue_insert+0x98>
	list->tail = node;
   28d2e:	6060      	str	r0, [r4, #4]
}
   28d30:	e00c      	b.n	28d4c <queue_insert+0x98>
}
   28d32:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   28d34:	f8c8 9000 	str.w	r9, [r8]
}
   28d38:	e7ef      	b.n	28d1a <queue_insert+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   28d3a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   28d3c:	f033 0303 	bics.w	r3, r3, #3
   28d40:	d110      	bne.n	28d64 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   28d42:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   28d44:	6862      	ldr	r2, [r4, #4]
   28d46:	b93a      	cbnz	r2, 28d58 <queue_insert+0xa4>
	list->head = node;
   28d48:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   28d4c:	2104      	movs	r1, #4
   28d4e:	f104 0010 	add.w	r0, r4, #16
   28d52:	f000 fb5b 	bl	2940c <z_handle_obj_poll_events>
   28d56:	e7c7      	b.n	28ce8 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28d58:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28d5a:	f003 0303 	and.w	r3, r3, #3
   28d5e:	4303      	orrs	r3, r0
   28d60:	6013      	str	r3, [r2, #0]
   28d62:	e7e4      	b.n	28d2e <queue_insert+0x7a>
   28d64:	4313      	orrs	r3, r2
   28d66:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28d68:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28d6a:	f003 0303 	and.w	r3, r3, #3
   28d6e:	4303      	orrs	r3, r0
   28d70:	602b      	str	r3, [r5, #0]
}
   28d72:	e7eb      	b.n	28d4c <queue_insert+0x98>

00028d74 <z_queue_node_peek>:
{
   28d74:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   28d76:	4604      	mov	r4, r0
   28d78:	b130      	cbz	r0, 28d88 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28d7a:	6802      	ldr	r2, [r0, #0]
   28d7c:	0793      	lsls	r3, r2, #30
   28d7e:	d003      	beq.n	28d88 <z_queue_node_peek+0x14>
		ret = anode->data;
   28d80:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   28d82:	b109      	cbz	r1, 28d88 <z_queue_node_peek+0x14>
			k_free(anode);
   28d84:	f7ff ff73 	bl	28c6e <k_free>
}
   28d88:	4620      	mov	r0, r4
   28d8a:	bd10      	pop	{r4, pc}

00028d8c <z_impl_k_queue_init>:
	list->head = NULL;
   28d8c:	2300      	movs	r3, #0
	list->tail = NULL;
   28d8e:	e9c0 3300 	strd	r3, r3, [r0]
   28d92:	f100 0308 	add.w	r3, r0, #8
   28d96:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   28d9a:	f100 0310 	add.w	r3, r0, #16
   28d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   28da2:	4770      	bx	lr

00028da4 <z_impl_k_queue_cancel_wait>:
{
   28da4:	b570      	push	{r4, r5, r6, lr}
   28da6:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   28da8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   28dac:	f04f 0320 	mov.w	r3, #32
   28db0:	f3ef 8611 	mrs	r6, BASEPRI
   28db4:	f383 8811 	msr	BASEPRI, r3
   28db8:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   28dbc:	4628      	mov	r0, r5
   28dbe:	f000 f8db 	bl	28f78 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   28dc2:	b120      	cbz	r0, 28dce <z_impl_k_queue_cancel_wait+0x2a>
   28dc4:	2200      	movs	r2, #0
   28dc6:	6702      	str	r2, [r0, #112]	; 0x70
   28dc8:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   28dca:	f000 f862 	bl	28e92 <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   28dce:	f104 0010 	add.w	r0, r4, #16
   28dd2:	2108      	movs	r1, #8
   28dd4:	f000 fb1a 	bl	2940c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   28dd8:	4631      	mov	r1, r6
   28dda:	4628      	mov	r0, r5
}
   28ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   28de0:	f000 b813 	b.w	28e0a <z_reschedule>

00028de4 <k_queue_append>:
{
   28de4:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   28de6:	2300      	movs	r3, #0
   28de8:	6841      	ldr	r1, [r0, #4]
   28dea:	f7ff bf63 	b.w	28cb4 <queue_insert>

00028dee <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   28dee:	2300      	movs	r3, #0
{
   28df0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
   28df2:	4619      	mov	r1, r3
   28df4:	f7ff bf5e 	b.w	28cb4 <queue_insert>

00028df8 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   28df8:	f990 000e 	ldrsb.w	r0, [r0, #14]
   28dfc:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   28e00:	4298      	cmp	r0, r3
   28e02:	bfac      	ite	ge
   28e04:	2000      	movge	r0, #0
   28e06:	2001      	movlt	r0, #1
   28e08:	4770      	bx	lr

00028e0a <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   28e0a:	b921      	cbnz	r1, 28e16 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   28e0c:	f3ef 8005 	mrs	r0, IPSR
   28e10:	b908      	cbnz	r0, 28e16 <z_reschedule+0xc>
   28e12:	f7e7 bf3d 	b.w	10c90 <arch_swap>
	__asm__ volatile(
   28e16:	f381 8811 	msr	BASEPRI, r1
   28e1a:	f3bf 8f6f 	isb	sy
}
   28e1e:	4770      	bx	lr

00028e20 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   28e20:	4603      	mov	r3, r0
   28e22:	b920      	cbnz	r0, 28e2e <z_reschedule_irqlock+0xe>
   28e24:	f3ef 8205 	mrs	r2, IPSR
   28e28:	b90a      	cbnz	r2, 28e2e <z_reschedule_irqlock+0xe>
   28e2a:	f7e7 bf31 	b.w	10c90 <arch_swap>
   28e2e:	f383 8811 	msr	BASEPRI, r3
   28e32:	f3bf 8f6f 	isb	sy
}
   28e36:	4770      	bx	lr

00028e38 <z_reschedule_unlocked>:
	__asm__ volatile(
   28e38:	f04f 0320 	mov.w	r3, #32
   28e3c:	f3ef 8011 	mrs	r0, BASEPRI
   28e40:	f383 8811 	msr	BASEPRI, r3
   28e44:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   28e48:	f7ff bfea 	b.w	28e20 <z_reschedule_irqlock>

00028e4c <z_unpend_thread>:
{
   28e4c:	b510      	push	{r4, lr}
   28e4e:	4601      	mov	r1, r0
   28e50:	f04f 0320 	mov.w	r3, #32
   28e54:	f3ef 8411 	mrs	r4, BASEPRI
   28e58:	f383 8811 	msr	BASEPRI, r3
   28e5c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   28e60:	6880      	ldr	r0, [r0, #8]
   28e62:	f7f7 f96f 	bl	20144 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   28e66:	7b4b      	ldrb	r3, [r1, #13]
   28e68:	f023 0302 	bic.w	r3, r3, #2
   28e6c:	734b      	strb	r3, [r1, #13]
		thread->base.pended_on = NULL;
   28e6e:	2300      	movs	r3, #0
   28e70:	608b      	str	r3, [r1, #8]
	__asm__ volatile(
   28e72:	f384 8811 	msr	BASEPRI, r4
   28e76:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   28e7a:	f101 0018 	add.w	r0, r1, #24
}
   28e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28e82:	f000 b94c 	b.w	2911e <z_abort_timeout>

00028e86 <z_priq_dumb_best>:
	return list->head == list;
   28e86:	6803      	ldr	r3, [r0, #0]
}
   28e88:	4298      	cmp	r0, r3
   28e8a:	bf14      	ite	ne
   28e8c:	4618      	movne	r0, r3
   28e8e:	2000      	moveq	r0, #0
   28e90:	4770      	bx	lr

00028e92 <z_ready_thread>:
{
   28e92:	b510      	push	{r4, lr}
	__asm__ volatile(
   28e94:	f04f 0320 	mov.w	r3, #32
   28e98:	f3ef 8411 	mrs	r4, BASEPRI
   28e9c:	f383 8811 	msr	BASEPRI, r3
   28ea0:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   28ea4:	f7f7 f9a4 	bl	201f0 <ready_thread>
	__asm__ volatile(
   28ea8:	f384 8811 	msr	BASEPRI, r4
   28eac:	f3bf 8f6f 	isb	sy
}
   28eb0:	bd10      	pop	{r4, pc}

00028eb2 <z_thread_timeout>:
{
   28eb2:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   28eb4:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   28eb8:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   28eba:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   28ebe:	b1c3      	cbz	r3, 28ef2 <z_thread_timeout+0x40>
	__asm__ volatile(
   28ec0:	f04f 0320 	mov.w	r3, #32
   28ec4:	f3ef 8511 	mrs	r5, BASEPRI
   28ec8:	f383 8811 	msr	BASEPRI, r3
   28ecc:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   28ed0:	f850 0c10 	ldr.w	r0, [r0, #-16]
   28ed4:	f7f7 f936 	bl	20144 <z_priq_dumb_remove>
   28ed8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   28edc:	f023 0302 	bic.w	r3, r3, #2
   28ee0:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   28ee4:	2300      	movs	r3, #0
   28ee6:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   28eea:	f385 8811 	msr	BASEPRI, r5
   28eee:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   28ef2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   28ef6:	4608      	mov	r0, r1
   28ef8:	f023 0314 	bic.w	r3, r3, #20
   28efc:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
   28f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   28f04:	f7ff bfc5 	b.w	28e92 <z_ready_thread>

00028f08 <z_remove_thread_from_ready_q>:
{
   28f08:	b510      	push	{r4, lr}
	__asm__ volatile(
   28f0a:	f04f 0320 	mov.w	r3, #32
   28f0e:	f3ef 8411 	mrs	r4, BASEPRI
   28f12:	f383 8811 	msr	BASEPRI, r3
   28f16:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   28f1a:	f7f7 fabf 	bl	2049c <unready_thread>
	__asm__ volatile(
   28f1e:	f384 8811 	msr	BASEPRI, r4
   28f22:	f3bf 8f6f 	isb	sy
}
   28f26:	bd10      	pop	{r4, pc}

00028f28 <add_to_waitq_locked>:
{
   28f28:	b538      	push	{r3, r4, r5, lr}
   28f2a:	4604      	mov	r4, r0
   28f2c:	460d      	mov	r5, r1
	unready_thread(thread);
   28f2e:	f7f7 fab5 	bl	2049c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   28f32:	7b63      	ldrb	r3, [r4, #13]
   28f34:	f043 0302 	orr.w	r3, r3, #2
   28f38:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   28f3a:	b17d      	cbz	r5, 28f5c <add_to_waitq_locked+0x34>
   28f3c:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   28f3e:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28f40:	429d      	cmp	r5, r3
   28f42:	d012      	beq.n	28f6a <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28f44:	b18b      	cbz	r3, 28f6a <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   28f46:	f994 200e 	ldrsb.w	r2, [r4, #14]
   28f4a:	f993 100e 	ldrsb.w	r1, [r3, #14]
   28f4e:	4291      	cmp	r1, r2
   28f50:	dd05      	ble.n	28f5e <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   28f52:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   28f54:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   28f58:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   28f5a:	605c      	str	r4, [r3, #4]
}
   28f5c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   28f5e:	6869      	ldr	r1, [r5, #4]
   28f60:	428b      	cmp	r3, r1
   28f62:	d002      	beq.n	28f6a <add_to_waitq_locked+0x42>
   28f64:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28f66:	2b00      	cmp	r3, #0
   28f68:	d1ef      	bne.n	28f4a <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   28f6a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   28f6c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   28f6e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   28f70:	686b      	ldr	r3, [r5, #4]
   28f72:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28f74:	606c      	str	r4, [r5, #4]
}
   28f76:	e7f1      	b.n	28f5c <add_to_waitq_locked+0x34>

00028f78 <z_unpend_first_thread>:
{
   28f78:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   28f7a:	f04f 0320 	mov.w	r3, #32
   28f7e:	f3ef 8211 	mrs	r2, BASEPRI
   28f82:	f383 8811 	msr	BASEPRI, r3
   28f86:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   28f8a:	f7ff ff7c 	bl	28e86 <z_priq_dumb_best>
   28f8e:	4604      	mov	r4, r0
	__asm__ volatile(
   28f90:	f382 8811 	msr	BASEPRI, r2
   28f94:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   28f98:	b1c8      	cbz	r0, 28fce <z_unpend_first_thread+0x56>
	__asm__ volatile(
   28f9a:	f04f 0320 	mov.w	r3, #32
   28f9e:	f3ef 8511 	mrs	r5, BASEPRI
   28fa2:	f383 8811 	msr	BASEPRI, r3
   28fa6:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   28faa:	4601      	mov	r1, r0
   28fac:	6880      	ldr	r0, [r0, #8]
   28fae:	f7f7 f8c9 	bl	20144 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   28fb2:	7b63      	ldrb	r3, [r4, #13]
   28fb4:	f023 0302 	bic.w	r3, r3, #2
   28fb8:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   28fba:	2300      	movs	r3, #0
   28fbc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   28fbe:	f385 8811 	msr	BASEPRI, r5
   28fc2:	f3bf 8f6f 	isb	sy
   28fc6:	f104 0018 	add.w	r0, r4, #24
   28fca:	f000 f8a8 	bl	2911e <z_abort_timeout>
}
   28fce:	4620      	mov	r0, r4
   28fd0:	bd38      	pop	{r3, r4, r5, pc}

00028fd2 <z_unpend_all>:
{
   28fd2:	b538      	push	{r3, r4, r5, lr}
   28fd4:	4605      	mov	r5, r0
	int need_sched = 0;
   28fd6:	2000      	movs	r0, #0
	return list->head == list;
   28fd8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28fda:	42a5      	cmp	r5, r4
   28fdc:	d000      	beq.n	28fe0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   28fde:	b904      	cbnz	r4, 28fe2 <z_unpend_all+0x10>
}
   28fe0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   28fe2:	4620      	mov	r0, r4
   28fe4:	f7ff ff32 	bl	28e4c <z_unpend_thread>
		z_ready_thread(thread);
   28fe8:	4620      	mov	r0, r4
   28fea:	f7ff ff52 	bl	28e92 <z_ready_thread>
		need_sched = 1;
   28fee:	2001      	movs	r0, #1
   28ff0:	e7f2      	b.n	28fd8 <z_unpend_all+0x6>

00028ff2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   28ff2:	b15a      	cbz	r2, 2900c <z_impl_k_sem_init+0x1a>
   28ff4:	428a      	cmp	r2, r1
   28ff6:	d309      	bcc.n	2900c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   28ff8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   28ffc:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   29000:	e9c0 0000 	strd	r0, r0, [r0]
   29004:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   29008:	2000      	movs	r0, #0
   2900a:	4770      	bx	lr
		return -EINVAL;
   2900c:	f06f 0015 	mvn.w	r0, #21
}
   29010:	4770      	bx	lr

00029012 <k_is_in_isr>:
   29012:	f3ef 8005 	mrs	r0, IPSR
}
   29016:	3800      	subs	r0, #0
   29018:	bf18      	it	ne
   2901a:	2001      	movne	r0, #1
   2901c:	4770      	bx	lr

0002901e <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   2901e:	f7e6 bec9 	b.w	fdb4 <arch_busy_wait>

00029022 <z_impl_k_thread_name_set>:
}
   29022:	f06f 0057 	mvn.w	r0, #87	; 0x57
   29026:	4770      	bx	lr

00029028 <k_thread_name_get>:
}
   29028:	2000      	movs	r0, #0
   2902a:	4770      	bx	lr

0002902c <k_work_submit_to_queue>:
{
   2902c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2902e:	f101 0308 	add.w	r3, r1, #8
   29032:	e8d3 2fef 	ldaex	r2, [r3]
   29036:	f042 0c01 	orr.w	ip, r2, #1
   2903a:	e8c3 cfee 	stlex	lr, ip, [r3]
   2903e:	f1be 0f00 	cmp.w	lr, #0
   29042:	d1f6      	bne.n	29032 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   29044:	07d3      	lsls	r3, r2, #31
   29046:	d403      	bmi.n	29050 <k_work_submit_to_queue+0x24>
}
   29048:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2904c:	f7ff beca 	b.w	28de4 <k_queue_append>
}
   29050:	f85d fb04 	ldr.w	pc, [sp], #4

00029054 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   29054:	f1a0 010c 	sub.w	r1, r0, #12
   29058:	6900      	ldr	r0, [r0, #16]
   2905a:	f7ff bfe7 	b.w	2902c <k_work_submit_to_queue>

0002905e <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   2905e:	69c3      	ldr	r3, [r0, #28]
{
   29060:	b570      	push	{r4, r5, r6, lr}
   29062:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   29064:	b913      	cbnz	r3, 2906c <work_cancel+0xe>
		return -EALREADY;
   29066:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   2906a:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2906c:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29070:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   29074:	07db      	lsls	r3, r3, #31
   29076:	d52f      	bpl.n	290d8 <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   29078:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2907a:	69c2      	ldr	r2, [r0, #28]
   2907c:	6813      	ldr	r3, [r2, #0]
   2907e:	b913      	cbnz	r3, 29086 <work_cancel+0x28>
			return -EINVAL;
   29080:	f06f 0015 	mvn.w	r0, #21
   29084:	e7f1      	b.n	2906a <work_cancel+0xc>
   29086:	429c      	cmp	r4, r3
   29088:	d121      	bne.n	290ce <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   2908a:	6823      	ldr	r3, [r4, #0]
   2908c:	6856      	ldr	r6, [r2, #4]
   2908e:	f023 0003 	bic.w	r0, r3, #3
   29092:	b991      	cbnz	r1, 290ba <work_cancel+0x5c>
   29094:	42b4      	cmp	r4, r6
	list->head = node;
   29096:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   29098:	d100      	bne.n	2909c <work_cancel+0x3e>
	list->tail = node;
   2909a:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2909c:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2909e:	f003 0303 	and.w	r3, r3, #3
   290a2:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   290a4:	2000      	movs	r0, #0
   290a6:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   290a8:	e8d5 3fef 	ldaex	r3, [r5]
   290ac:	f023 0301 	bic.w	r3, r3, #1
   290b0:	e8c5 3fe2 	stlex	r2, r3, [r5]
   290b4:	2a00      	cmp	r2, #0
   290b6:	d0d8      	beq.n	2906a <work_cancel+0xc>
   290b8:	e7f6      	b.n	290a8 <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   290ba:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   290bc:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   290be:	f003 0303 	and.w	r3, r3, #3
   290c2:	ea43 0300 	orr.w	r3, r3, r0
   290c6:	600b      	str	r3, [r1, #0]
	list->tail = node;
   290c8:	bf08      	it	eq
   290ca:	6051      	streq	r1, [r2, #4]
}
   290cc:	e7e6      	b.n	2909c <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   290ce:	6818      	ldr	r0, [r3, #0]
   290d0:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   290d2:	f020 0303 	bic.w	r3, r0, #3
   290d6:	e7d2      	b.n	2907e <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   290d8:	300c      	adds	r0, #12
   290da:	f000 f820 	bl	2911e <z_abort_timeout>
		if (err) {
   290de:	2800      	cmp	r0, #0
   290e0:	d0e0      	beq.n	290a4 <work_cancel+0x46>
   290e2:	e7c0      	b.n	29066 <work_cancel+0x8>

000290e4 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   290e4:	2300      	movs	r3, #0
   290e6:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   290ea:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   290ee:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   290f0:	61c3      	str	r3, [r0, #28]
}
   290f2:	4770      	bx	lr

000290f4 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   290f4:	69c3      	ldr	r3, [r0, #28]
{
   290f6:	b510      	push	{r4, lr}
	if (!work->work_q) {
   290f8:	b173      	cbz	r3, 29118 <k_delayed_work_cancel+0x24>
	__asm__ volatile(
   290fa:	f04f 0320 	mov.w	r3, #32
   290fe:	f3ef 8411 	mrs	r4, BASEPRI
   29102:	f383 8811 	msr	BASEPRI, r3
   29106:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   2910a:	f7ff ffa8 	bl	2905e <work_cancel>
	__asm__ volatile(
   2910e:	f384 8811 	msr	BASEPRI, r4
   29112:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   29116:	bd10      	pop	{r4, pc}
		return -EINVAL;
   29118:	f06f 0015 	mvn.w	r0, #21
   2911c:	e7fb      	b.n	29116 <k_delayed_work_cancel+0x22>

0002911e <z_abort_timeout>:
{
   2911e:	b510      	push	{r4, lr}
	__asm__ volatile(
   29120:	f04f 0220 	mov.w	r2, #32
   29124:	f3ef 8411 	mrs	r4, BASEPRI
   29128:	f382 8811 	msr	BASEPRI, r2
   2912c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   29130:	6803      	ldr	r3, [r0, #0]
   29132:	b13b      	cbz	r3, 29144 <z_abort_timeout+0x26>
			remove_timeout(to);
   29134:	f7f7 fc80 	bl	20a38 <remove_timeout>
			ret = 0;
   29138:	2000      	movs	r0, #0
	__asm__ volatile(
   2913a:	f384 8811 	msr	BASEPRI, r4
   2913e:	f3bf 8f6f 	isb	sy
}
   29142:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   29144:	f06f 0015 	mvn.w	r0, #21
   29148:	e7f7      	b.n	2913a <z_abort_timeout+0x1c>

0002914a <z_timeout_remaining>:
{
   2914a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2914c:	f04f 0320 	mov.w	r3, #32
   29150:	f3ef 8411 	mrs	r4, BASEPRI
   29154:	f383 8811 	msr	BASEPRI, r3
   29158:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   2915c:	f7f7 fc9c 	bl	20a98 <timeout_rem>
	__asm__ volatile(
   29160:	f384 8811 	msr	BASEPRI, r4
   29164:	f3bf 8f6f 	isb	sy
}
   29168:	bd10      	pop	{r4, pc}

0002916a <z_get_next_timeout_expiry>:
{
   2916a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2916c:	f04f 0320 	mov.w	r3, #32
   29170:	f3ef 8411 	mrs	r4, BASEPRI
   29174:	f383 8811 	msr	BASEPRI, r3
   29178:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2917c:	f7f7 fc70 	bl	20a60 <next_timeout>
	__asm__ volatile(
   29180:	f384 8811 	msr	BASEPRI, r4
   29184:	f3bf 8f6f 	isb	sy
}
   29188:	bd10      	pop	{r4, pc}

0002918a <z_set_timeout_expiry>:
{
   2918a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2918c:	4604      	mov	r4, r0
   2918e:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   29190:	f04f 0320 	mov.w	r3, #32
   29194:	f3ef 8511 	mrs	r5, BASEPRI
   29198:	f383 8811 	msr	BASEPRI, r3
   2919c:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   291a0:	f7f7 fc5e 	bl	20a60 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   291a4:	2801      	cmp	r0, #1
   291a6:	dd05      	ble.n	291b4 <z_set_timeout_expiry+0x2a>
   291a8:	42a0      	cmp	r0, r4
   291aa:	9901      	ldr	r1, [sp, #4]
   291ac:	dd02      	ble.n	291b4 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   291ae:	4620      	mov	r0, r4
   291b0:	f7e7 fcd6 	bl	10b60 <z_clock_set_timeout>
	__asm__ volatile(
   291b4:	f385 8811 	msr	BASEPRI, r5
   291b8:	f3bf 8f6f 	isb	sy
}
   291bc:	b003      	add	sp, #12
   291be:	bd30      	pop	{r4, r5, pc}

000291c0 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   291c0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   291c2:	f7f7 fd5d 	bl	20c80 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   291c6:	bd08      	pop	{r3, pc}

000291c8 <z_impl_k_uptime_ticks>:

s64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   291c8:	f7f7 bd5a 	b.w	20c80 <z_tick_get>

000291cc <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
u64_t z_timeout_end_calc(k_timeout_t timeout)
{
   291cc:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   291ce:	1c4b      	adds	r3, r1, #1
   291d0:	bf08      	it	eq
   291d2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   291d6:	4604      	mov	r4, r0
   291d8:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   291da:	d013      	beq.n	29204 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   291dc:	ea54 0105 	orrs.w	r1, r4, r5
   291e0:	d103      	bne.n	291ea <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   291e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   291e6:	f7f7 bd4b 	b.w	20c80 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   291ea:	f06f 0101 	mvn.w	r1, #1
   291ee:	1a0a      	subs	r2, r1, r0
   291f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   291f4:	eb61 0305 	sbc.w	r3, r1, r5
   291f8:	2a00      	cmp	r2, #0
   291fa:	f173 0100 	sbcs.w	r1, r3, #0
   291fe:	db02      	blt.n	29206 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   29200:	4610      	mov	r0, r2
   29202:	4619      	mov	r1, r3
}
   29204:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   29206:	f7f7 fd3b 	bl	20c80 <z_tick_get>
   2920a:	2c01      	cmp	r4, #1
   2920c:	f175 0300 	sbcs.w	r3, r5, #0
   29210:	bfbc      	itt	lt
   29212:	2401      	movlt	r4, #1
   29214:	2500      	movlt	r5, #0
   29216:	1820      	adds	r0, r4, r0
   29218:	eb45 0101 	adc.w	r1, r5, r1
   2921c:	e7f2      	b.n	29204 <z_timeout_end_calc+0x38>

0002921e <clear_event_registrations>:
	while (num_events--) {
   2921e:	2314      	movs	r3, #20
{
   29220:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   29222:	2400      	movs	r4, #0
   29224:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   29228:	4281      	cmp	r1, r0
   2922a:	d100      	bne.n	2922e <clear_event_registrations+0x10>
}
   2922c:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   2922e:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   29232:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   29236:	f003 030f 	and.w	r3, r3, #15
   2923a:	2b02      	cmp	r3, #2
   2923c:	d80a      	bhi.n	29254 <clear_event_registrations+0x36>
   2923e:	b15b      	cbz	r3, 29258 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   29240:	f851 3c14 	ldr.w	r3, [r1, #-20]
   29244:	b143      	cbz	r3, 29258 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   29246:	f851 5c10 	ldr.w	r5, [r1, #-16]
   2924a:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   2924c:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2924e:	e941 4405 	strd	r4, r4, [r1, #-20]
	sys_dnode_init(node);
}
   29252:	e001      	b.n	29258 <clear_event_registrations+0x3a>
	switch (event->type) {
   29254:	2b04      	cmp	r3, #4
   29256:	d0f3      	beq.n	29240 <clear_event_registrations+0x22>
   29258:	f382 8811 	msr	BASEPRI, r2
   2925c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   29260:	f04f 0320 	mov.w	r3, #32
   29264:	f3ef 8211 	mrs	r2, BASEPRI
   29268:	f383 8811 	msr	BASEPRI, r3
   2926c:	f3bf 8f6f 	isb	sy
   29270:	3914      	subs	r1, #20
   29272:	e7d9      	b.n	29228 <clear_event_registrations+0xa>

00029274 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   29274:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   29276:	6884      	ldr	r4, [r0, #8]
{
   29278:	4605      	mov	r5, r0
   2927a:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   2927c:	b19c      	cbz	r4, 292a6 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   2927e:	68a3      	ldr	r3, [r4, #8]
   29280:	b95b      	cbnz	r3, 2929a <signal_poll_event+0x26>
	int retcode = 0;
   29282:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   29284:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   29286:	2300      	movs	r3, #0
   29288:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   2928a:	68eb      	ldr	r3, [r5, #12]
   2928c:	f3c3 3104 	ubfx	r1, r3, #12, #5
   29290:	430e      	orrs	r6, r1
   29292:	f366 3310 	bfi	r3, r6, #12, #5
   29296:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   29298:	e004      	b.n	292a4 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   2929a:	4798      	blx	r3
		poller->is_polling = false;
   2929c:	2300      	movs	r3, #0
		if (retcode < 0) {
   2929e:	2800      	cmp	r0, #0
		poller->is_polling = false;
   292a0:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   292a2:	daf0      	bge.n	29286 <signal_poll_event+0x12>
}
   292a4:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   292a6:	4620      	mov	r0, r4
   292a8:	e7ed      	b.n	29286 <signal_poll_event+0x12>

000292aa <k_poll_poller_cb>:
{
   292aa:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   292ac:	6883      	ldr	r3, [r0, #8]
{
   292ae:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   292b0:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   292b2:	7b63      	ldrb	r3, [r4, #13]
   292b4:	079a      	lsls	r2, r3, #30
   292b6:	d50e      	bpl.n	292d6 <k_poll_poller_cb+0x2c>
	if (z_is_thread_timeout_expired(thread)) {
   292b8:	6a23      	ldr	r3, [r4, #32]
   292ba:	3302      	adds	r3, #2
   292bc:	d014      	beq.n	292e8 <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   292be:	4620      	mov	r0, r4
   292c0:	f7ff fdc4 	bl	28e4c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   292c4:	2d08      	cmp	r5, #8
   292c6:	bf0c      	ite	eq
   292c8:	f06f 0303 	mvneq.w	r3, #3
   292cc:	2300      	movne	r3, #0
   292ce:	6723      	str	r3, [r4, #112]	; 0x70
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   292d0:	7b63      	ldrb	r3, [r4, #13]
   292d2:	06db      	lsls	r3, r3, #27
   292d4:	d001      	beq.n	292da <k_poll_poller_cb+0x30>
		return 0;
   292d6:	2000      	movs	r0, #0
}
   292d8:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   292da:	69a5      	ldr	r5, [r4, #24]
   292dc:	2d00      	cmp	r5, #0
   292de:	d1fa      	bne.n	292d6 <k_poll_poller_cb+0x2c>
	z_ready_thread(thread);
   292e0:	4620      	mov	r0, r4
   292e2:	f7ff fdd6 	bl	28e92 <z_ready_thread>
	return 0;
   292e6:	e7f6      	b.n	292d6 <k_poll_poller_cb+0x2c>
		return -EAGAIN;
   292e8:	f06f 000a 	mvn.w	r0, #10
   292ec:	e7f4      	b.n	292d8 <k_poll_poller_cb+0x2e>

000292ee <add_event>:
{
   292ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   292f0:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   292f2:	e9d0 2300 	ldrd	r2, r3, [r0]
   292f6:	4290      	cmp	r0, r2
   292f8:	4604      	mov	r4, r0
   292fa:	460d      	mov	r5, r1
   292fc:	d106      	bne.n	2930c <add_event+0x1e>
	node->prev = list->tail;
   292fe:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   29300:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   29302:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   29304:	6863      	ldr	r3, [r4, #4]
   29306:	601d      	str	r5, [r3, #0]
	list->tail = node;
   29308:	6065      	str	r5, [r4, #4]
}
   2930a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2930c:	2b00      	cmp	r3, #0
   2930e:	d0f6      	beq.n	292fe <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   29310:	689b      	ldr	r3, [r3, #8]
   29312:	6879      	ldr	r1, [r7, #4]
   29314:	6858      	ldr	r0, [r3, #4]
   29316:	f7ff fd6f 	bl	28df8 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2931a:	2800      	cmp	r0, #0
   2931c:	d1ef      	bne.n	292fe <add_event+0x10>
	return list->head == list;
   2931e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29320:	42b4      	cmp	r4, r6
   29322:	d0ec      	beq.n	292fe <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   29324:	2e00      	cmp	r6, #0
   29326:	d0ea      	beq.n	292fe <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   29328:	68b3      	ldr	r3, [r6, #8]
   2932a:	6878      	ldr	r0, [r7, #4]
   2932c:	6859      	ldr	r1, [r3, #4]
   2932e:	f7ff fd63 	bl	28df8 <z_is_t1_higher_prio_than_t2>
   29332:	b128      	cbz	r0, 29340 <add_event+0x52>
	node->prev = successor->prev;
   29334:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   29336:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2933a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2933c:	6075      	str	r5, [r6, #4]
			return;
   2933e:	e7e4      	b.n	2930a <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   29340:	6863      	ldr	r3, [r4, #4]
   29342:	429e      	cmp	r6, r3
   29344:	d0db      	beq.n	292fe <add_event+0x10>
   29346:	6836      	ldr	r6, [r6, #0]
   29348:	e7ec      	b.n	29324 <add_event+0x36>

0002934a <register_events>:
{
   2934a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2934e:	f04f 0a00 	mov.w	sl, #0
{
   29352:	460e      	mov	r6, r1
   29354:	4614      	mov	r4, r2
   29356:	461f      	mov	r7, r3
   29358:	4683      	mov	fp, r0
	int events_registered = 0;
   2935a:	4655      	mov	r5, sl
	event->poller = NULL;
   2935c:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   2935e:	45b2      	cmp	sl, r6
   29360:	db02      	blt.n	29368 <register_events+0x1e>
}
   29362:	4628      	mov	r0, r5
   29364:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29368:	f04f 0320 	mov.w	r3, #32
   2936c:	f3ef 8911 	mrs	r9, BASEPRI
   29370:	f383 8811 	msr	BASEPRI, r3
   29374:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   29378:	f89b 200d 	ldrb.w	r2, [fp, #13]
   2937c:	f002 020f 	and.w	r2, r2, #15
   29380:	2a02      	cmp	r2, #2
   29382:	d006      	beq.n	29392 <register_events+0x48>
   29384:	2a04      	cmp	r2, #4
   29386:	d008      	beq.n	2939a <register_events+0x50>
   29388:	2a01      	cmp	r2, #1
   2938a:	d120      	bne.n	293ce <register_events+0x84>
		if (event->signal->signaled != 0U) {
   2938c:	f8db 3010 	ldr.w	r3, [fp, #16]
   29390:	e001      	b.n	29396 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0) {
   29392:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   29396:	689b      	ldr	r3, [r3, #8]
   29398:	e002      	b.n	293a0 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   2939a:	f8db 3010 	ldr.w	r3, [fp, #16]
   2939e:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   293a0:	b1ab      	cbz	r3, 293ce <register_events+0x84>
	event->state |= state;
   293a2:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   293a6:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   293aa:	f3c3 3104 	ubfx	r1, r3, #12, #5
   293ae:	430a      	orrs	r2, r1
   293b0:	f362 3310 	bfi	r3, r2, #12, #5
   293b4:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   293b8:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   293bc:	f389 8811 	msr	BASEPRI, r9
   293c0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   293c4:	f10a 0a01 	add.w	sl, sl, #1
   293c8:	f10b 0b14 	add.w	fp, fp, #20
   293cc:	e7c7      	b.n	2935e <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   293ce:	2f00      	cmp	r7, #0
   293d0:	d1f4      	bne.n	293bc <register_events+0x72>
   293d2:	7823      	ldrb	r3, [r4, #0]
   293d4:	2b00      	cmp	r3, #0
   293d6:	d0f1      	beq.n	293bc <register_events+0x72>
	switch (event->type) {
   293d8:	f89b 300d 	ldrb.w	r3, [fp, #13]
   293dc:	f003 030f 	and.w	r3, r3, #15
   293e0:	2b02      	cmp	r3, #2
   293e2:	d008      	beq.n	293f6 <register_events+0xac>
   293e4:	2b04      	cmp	r3, #4
   293e6:	d006      	beq.n	293f6 <register_events+0xac>
   293e8:	2b01      	cmp	r3, #1
   293ea:	d10b      	bne.n	29404 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   293ec:	4622      	mov	r2, r4
   293ee:	4659      	mov	r1, fp
   293f0:	f8db 0010 	ldr.w	r0, [fp, #16]
   293f4:	e004      	b.n	29400 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   293f6:	4622      	mov	r2, r4
   293f8:	4659      	mov	r1, fp
   293fa:	f8db 0010 	ldr.w	r0, [fp, #16]
   293fe:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   29400:	f7ff ff75 	bl	292ee <add_event>
	event->poller = poller;
   29404:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   29408:	3501      	adds	r5, #1
   2940a:	e7d7      	b.n	293bc <register_events+0x72>

0002940c <z_handle_obj_poll_events>:

void z_handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
   2940c:	4603      	mov	r3, r0
	return list->head == list;
   2940e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   29410:	4283      	cmp	r3, r0
   29412:	d008      	beq.n	29426 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   29414:	e9d0 3200 	ldrd	r3, r2, [r0]
   29418:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2941a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2941c:	2300      	movs	r3, #0
	node->prev = NULL;
   2941e:	e9c0 3300 	strd	r3, r3, [r0]
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   29422:	f7ff bf27 	b.w	29274 <signal_poll_event>
	}
}
   29426:	4770      	bx	lr

00029428 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   29428:	4770      	bx	lr

0002942a <abs>:
   2942a:	2800      	cmp	r0, #0
   2942c:	bfb8      	it	lt
   2942e:	4240      	neglt	r0, r0
   29430:	4770      	bx	lr

00029432 <atoi>:
   29432:	220a      	movs	r2, #10
   29434:	2100      	movs	r1, #0
   29436:	f7f8 bdc9 	b.w	21fcc <strtol>

0002943a <memchr>:
   2943a:	b2c9      	uxtb	r1, r1
   2943c:	4402      	add	r2, r0
   2943e:	b510      	push	{r4, lr}
   29440:	4290      	cmp	r0, r2
   29442:	4603      	mov	r3, r0
   29444:	d101      	bne.n	2944a <memchr+0x10>
   29446:	2300      	movs	r3, #0
   29448:	e003      	b.n	29452 <memchr+0x18>
   2944a:	781c      	ldrb	r4, [r3, #0]
   2944c:	3001      	adds	r0, #1
   2944e:	428c      	cmp	r4, r1
   29450:	d1f6      	bne.n	29440 <memchr+0x6>
   29452:	4618      	mov	r0, r3
   29454:	bd10      	pop	{r4, pc}

00029456 <memcmp>:
   29456:	b530      	push	{r4, r5, lr}
   29458:	3901      	subs	r1, #1
   2945a:	2400      	movs	r4, #0
   2945c:	42a2      	cmp	r2, r4
   2945e:	d101      	bne.n	29464 <memcmp+0xe>
   29460:	2000      	movs	r0, #0
   29462:	e005      	b.n	29470 <memcmp+0x1a>
   29464:	5d03      	ldrb	r3, [r0, r4]
   29466:	3401      	adds	r4, #1
   29468:	5d0d      	ldrb	r5, [r1, r4]
   2946a:	42ab      	cmp	r3, r5
   2946c:	d0f6      	beq.n	2945c <memcmp+0x6>
   2946e:	1b58      	subs	r0, r3, r5
   29470:	bd30      	pop	{r4, r5, pc}

00029472 <memcpy>:
   29472:	440a      	add	r2, r1
   29474:	1e43      	subs	r3, r0, #1
   29476:	4291      	cmp	r1, r2
   29478:	d100      	bne.n	2947c <memcpy+0xa>
   2947a:	4770      	bx	lr
   2947c:	b510      	push	{r4, lr}
   2947e:	f811 4b01 	ldrb.w	r4, [r1], #1
   29482:	4291      	cmp	r1, r2
   29484:	f803 4f01 	strb.w	r4, [r3, #1]!
   29488:	d1f9      	bne.n	2947e <memcpy+0xc>
   2948a:	bd10      	pop	{r4, pc}

0002948c <__memcpy_chk>:
   2948c:	429a      	cmp	r2, r3
   2948e:	b508      	push	{r3, lr}
   29490:	d901      	bls.n	29496 <__memcpy_chk+0xa>
   29492:	f7f9 f963 	bl	2275c <__chk_fail>
   29496:	4281      	cmp	r1, r0
   29498:	d804      	bhi.n	294a4 <__memcpy_chk+0x18>
   2949a:	188b      	adds	r3, r1, r2
   2949c:	4298      	cmp	r0, r3
   2949e:	d3f8      	bcc.n	29492 <__memcpy_chk+0x6>
   294a0:	4281      	cmp	r1, r0
   294a2:	d102      	bne.n	294aa <__memcpy_chk+0x1e>
   294a4:	1883      	adds	r3, r0, r2
   294a6:	4299      	cmp	r1, r3
   294a8:	d3f3      	bcc.n	29492 <__memcpy_chk+0x6>
   294aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   294ae:	f7ff bfe0 	b.w	29472 <memcpy>

000294b2 <memmove>:
   294b2:	4288      	cmp	r0, r1
   294b4:	b510      	push	{r4, lr}
   294b6:	eb01 0402 	add.w	r4, r1, r2
   294ba:	d902      	bls.n	294c2 <memmove+0x10>
   294bc:	4284      	cmp	r4, r0
   294be:	4623      	mov	r3, r4
   294c0:	d807      	bhi.n	294d2 <memmove+0x20>
   294c2:	1e43      	subs	r3, r0, #1
   294c4:	42a1      	cmp	r1, r4
   294c6:	d008      	beq.n	294da <memmove+0x28>
   294c8:	f811 2b01 	ldrb.w	r2, [r1], #1
   294cc:	f803 2f01 	strb.w	r2, [r3, #1]!
   294d0:	e7f8      	b.n	294c4 <memmove+0x12>
   294d2:	4402      	add	r2, r0
   294d4:	4601      	mov	r1, r0
   294d6:	428a      	cmp	r2, r1
   294d8:	d100      	bne.n	294dc <memmove+0x2a>
   294da:	bd10      	pop	{r4, pc}
   294dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   294e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   294e4:	e7f7      	b.n	294d6 <memmove+0x24>

000294e6 <memset>:
   294e6:	4402      	add	r2, r0
   294e8:	4603      	mov	r3, r0
   294ea:	4293      	cmp	r3, r2
   294ec:	d100      	bne.n	294f0 <memset+0xa>
   294ee:	4770      	bx	lr
   294f0:	f803 1b01 	strb.w	r1, [r3], #1
   294f4:	e7f9      	b.n	294ea <memset+0x4>

000294f6 <__sfputc_r>:
   294f6:	6893      	ldr	r3, [r2, #8]
   294f8:	3b01      	subs	r3, #1
   294fa:	2b00      	cmp	r3, #0
   294fc:	6093      	str	r3, [r2, #8]
   294fe:	b410      	push	{r4}
   29500:	da08      	bge.n	29514 <__sfputc_r+0x1e>
   29502:	6994      	ldr	r4, [r2, #24]
   29504:	42a3      	cmp	r3, r4
   29506:	db01      	blt.n	2950c <__sfputc_r+0x16>
   29508:	290a      	cmp	r1, #10
   2950a:	d103      	bne.n	29514 <__sfputc_r+0x1e>
   2950c:	f85d 4b04 	ldr.w	r4, [sp], #4
   29510:	f7f9 b852 	b.w	225b8 <__swbuf_r>
   29514:	6813      	ldr	r3, [r2, #0]
   29516:	1c58      	adds	r0, r3, #1
   29518:	6010      	str	r0, [r2, #0]
   2951a:	4608      	mov	r0, r1
   2951c:	7019      	strb	r1, [r3, #0]
   2951e:	f85d 4b04 	ldr.w	r4, [sp], #4
   29522:	4770      	bx	lr

00029524 <__sfputs_r>:
   29524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29526:	4606      	mov	r6, r0
   29528:	460f      	mov	r7, r1
   2952a:	4614      	mov	r4, r2
   2952c:	18d5      	adds	r5, r2, r3
   2952e:	42ac      	cmp	r4, r5
   29530:	d101      	bne.n	29536 <__sfputs_r+0x12>
   29532:	2000      	movs	r0, #0
   29534:	e007      	b.n	29546 <__sfputs_r+0x22>
   29536:	463a      	mov	r2, r7
   29538:	f814 1b01 	ldrb.w	r1, [r4], #1
   2953c:	4630      	mov	r0, r6
   2953e:	f7ff ffda 	bl	294f6 <__sfputc_r>
   29542:	1c43      	adds	r3, r0, #1
   29544:	d1f3      	bne.n	2952e <__sfputs_r+0xa>
   29546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029548 <__cvt>:
   29548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2954c:	ec55 4b10 	vmov	r4, r5, d0
   29550:	2d00      	cmp	r5, #0
   29552:	460e      	mov	r6, r1
   29554:	4619      	mov	r1, r3
   29556:	462b      	mov	r3, r5
   29558:	bfb4      	ite	lt
   2955a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   2955e:	2300      	movge	r3, #0
   29560:	4691      	mov	r9, r2
   29562:	bfbf      	itttt	lt
   29564:	4622      	movlt	r2, r4
   29566:	461d      	movlt	r5, r3
   29568:	232d      	movlt	r3, #45	; 0x2d
   2956a:	4614      	movlt	r4, r2
   2956c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   29570:	700b      	strb	r3, [r1, #0]
   29572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   29574:	f023 0820 	bic.w	r8, r3, #32
   29578:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   2957c:	d005      	beq.n	2958a <__cvt+0x42>
   2957e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   29582:	d100      	bne.n	29586 <__cvt+0x3e>
   29584:	3601      	adds	r6, #1
   29586:	2102      	movs	r1, #2
   29588:	e000      	b.n	2958c <__cvt+0x44>
   2958a:	2103      	movs	r1, #3
   2958c:	ab03      	add	r3, sp, #12
   2958e:	4632      	mov	r2, r6
   29590:	9301      	str	r3, [sp, #4]
   29592:	ab02      	add	r3, sp, #8
   29594:	ec45 4b10 	vmov	d0, r4, r5
   29598:	9300      	str	r3, [sp, #0]
   2959a:	4653      	mov	r3, sl
   2959c:	f7e4 f870 	bl	d680 <_dtoa_r>
   295a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   295a4:	4607      	mov	r7, r0
   295a6:	d102      	bne.n	295ae <__cvt+0x66>
   295a8:	f019 0f01 	tst.w	r9, #1
   295ac:	d022      	beq.n	295f4 <__cvt+0xac>
   295ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   295b2:	eb07 0906 	add.w	r9, r7, r6
   295b6:	d110      	bne.n	295da <__cvt+0x92>
   295b8:	783b      	ldrb	r3, [r7, #0]
   295ba:	2b30      	cmp	r3, #48	; 0x30
   295bc:	d10a      	bne.n	295d4 <__cvt+0x8c>
   295be:	2200      	movs	r2, #0
   295c0:	2300      	movs	r3, #0
   295c2:	4620      	mov	r0, r4
   295c4:	4629      	mov	r1, r5
   295c6:	f7e3 f84d 	bl	c664 <__aeabi_dcmpeq>
   295ca:	b918      	cbnz	r0, 295d4 <__cvt+0x8c>
   295cc:	f1c6 0601 	rsb	r6, r6, #1
   295d0:	f8ca 6000 	str.w	r6, [sl]
   295d4:	f8da 3000 	ldr.w	r3, [sl]
   295d8:	4499      	add	r9, r3
   295da:	2200      	movs	r2, #0
   295dc:	2300      	movs	r3, #0
   295de:	4620      	mov	r0, r4
   295e0:	4629      	mov	r1, r5
   295e2:	f7e3 f83f 	bl	c664 <__aeabi_dcmpeq>
   295e6:	b108      	cbz	r0, 295ec <__cvt+0xa4>
   295e8:	f8cd 900c 	str.w	r9, [sp, #12]
   295ec:	2230      	movs	r2, #48	; 0x30
   295ee:	9b03      	ldr	r3, [sp, #12]
   295f0:	454b      	cmp	r3, r9
   295f2:	d307      	bcc.n	29604 <__cvt+0xbc>
   295f4:	9b03      	ldr	r3, [sp, #12]
   295f6:	4638      	mov	r0, r7
   295f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   295fa:	1bdb      	subs	r3, r3, r7
   295fc:	6013      	str	r3, [r2, #0]
   295fe:	b004      	add	sp, #16
   29600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29604:	1c59      	adds	r1, r3, #1
   29606:	9103      	str	r1, [sp, #12]
   29608:	701a      	strb	r2, [r3, #0]
   2960a:	e7f0      	b.n	295ee <__cvt+0xa6>

0002960c <__exponent>:
   2960c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2960e:	2900      	cmp	r1, #0
   29610:	4603      	mov	r3, r0
   29612:	bfb8      	it	lt
   29614:	4249      	neglt	r1, r1
   29616:	f803 2b02 	strb.w	r2, [r3], #2
   2961a:	bfb4      	ite	lt
   2961c:	222d      	movlt	r2, #45	; 0x2d
   2961e:	222b      	movge	r2, #43	; 0x2b
   29620:	2909      	cmp	r1, #9
   29622:	7042      	strb	r2, [r0, #1]
   29624:	dd2a      	ble.n	2967c <__exponent+0x70>
   29626:	f10d 0407 	add.w	r4, sp, #7
   2962a:	270a      	movs	r7, #10
   2962c:	46a4      	mov	ip, r4
   2962e:	460a      	mov	r2, r1
   29630:	46a6      	mov	lr, r4
   29632:	3c01      	subs	r4, #1
   29634:	2a63      	cmp	r2, #99	; 0x63
   29636:	fb91 f6f7 	sdiv	r6, r1, r7
   2963a:	fb07 1516 	mls	r5, r7, r6, r1
   2963e:	4631      	mov	r1, r6
   29640:	f105 0530 	add.w	r5, r5, #48	; 0x30
   29644:	f80e 5c01 	strb.w	r5, [lr, #-1]
   29648:	dcf1      	bgt.n	2962e <__exponent+0x22>
   2964a:	3130      	adds	r1, #48	; 0x30
   2964c:	f1ae 0502 	sub.w	r5, lr, #2
   29650:	f804 1c01 	strb.w	r1, [r4, #-1]
   29654:	1c44      	adds	r4, r0, #1
   29656:	4629      	mov	r1, r5
   29658:	4561      	cmp	r1, ip
   2965a:	d30a      	bcc.n	29672 <__exponent+0x66>
   2965c:	f10d 0209 	add.w	r2, sp, #9
   29660:	eba2 020e 	sub.w	r2, r2, lr
   29664:	4565      	cmp	r5, ip
   29666:	bf88      	it	hi
   29668:	2200      	movhi	r2, #0
   2966a:	4413      	add	r3, r2
   2966c:	1a18      	subs	r0, r3, r0
   2966e:	b003      	add	sp, #12
   29670:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29672:	f811 2b01 	ldrb.w	r2, [r1], #1
   29676:	f804 2f01 	strb.w	r2, [r4, #1]!
   2967a:	e7ed      	b.n	29658 <__exponent+0x4c>
   2967c:	2330      	movs	r3, #48	; 0x30
   2967e:	3130      	adds	r1, #48	; 0x30
   29680:	7083      	strb	r3, [r0, #2]
   29682:	1d03      	adds	r3, r0, #4
   29684:	70c1      	strb	r1, [r0, #3]
   29686:	e7f1      	b.n	2966c <__exponent+0x60>

00029688 <_printf_common>:
   29688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2968c:	4616      	mov	r6, r2
   2968e:	4699      	mov	r9, r3
   29690:	688a      	ldr	r2, [r1, #8]
   29692:	4607      	mov	r7, r0
   29694:	690b      	ldr	r3, [r1, #16]
   29696:	460c      	mov	r4, r1
   29698:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2969c:	4293      	cmp	r3, r2
   2969e:	bfb8      	it	lt
   296a0:	4613      	movlt	r3, r2
   296a2:	6033      	str	r3, [r6, #0]
   296a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   296a8:	b10a      	cbz	r2, 296ae <_printf_common+0x26>
   296aa:	3301      	adds	r3, #1
   296ac:	6033      	str	r3, [r6, #0]
   296ae:	6823      	ldr	r3, [r4, #0]
   296b0:	0699      	lsls	r1, r3, #26
   296b2:	bf42      	ittt	mi
   296b4:	6833      	ldrmi	r3, [r6, #0]
   296b6:	3302      	addmi	r3, #2
   296b8:	6033      	strmi	r3, [r6, #0]
   296ba:	6825      	ldr	r5, [r4, #0]
   296bc:	f015 0506 	ands.w	r5, r5, #6
   296c0:	d106      	bne.n	296d0 <_printf_common+0x48>
   296c2:	f104 0a19 	add.w	sl, r4, #25
   296c6:	68e3      	ldr	r3, [r4, #12]
   296c8:	6832      	ldr	r2, [r6, #0]
   296ca:	1a9b      	subs	r3, r3, r2
   296cc:	42ab      	cmp	r3, r5
   296ce:	dc29      	bgt.n	29724 <_printf_common+0x9c>
   296d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   296d4:	1e13      	subs	r3, r2, #0
   296d6:	6822      	ldr	r2, [r4, #0]
   296d8:	bf18      	it	ne
   296da:	2301      	movne	r3, #1
   296dc:	0692      	lsls	r2, r2, #26
   296de:	d42e      	bmi.n	2973e <_printf_common+0xb6>
   296e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   296e4:	4649      	mov	r1, r9
   296e6:	4638      	mov	r0, r7
   296e8:	47c0      	blx	r8
   296ea:	3001      	adds	r0, #1
   296ec:	d021      	beq.n	29732 <_printf_common+0xaa>
   296ee:	6823      	ldr	r3, [r4, #0]
   296f0:	341a      	adds	r4, #26
   296f2:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   296f6:	f003 0306 	and.w	r3, r3, #6
   296fa:	6832      	ldr	r2, [r6, #0]
   296fc:	2600      	movs	r6, #0
   296fe:	2b04      	cmp	r3, #4
   29700:	f854 3c12 	ldr.w	r3, [r4, #-18]
   29704:	bf08      	it	eq
   29706:	1aad      	subeq	r5, r5, r2
   29708:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   2970c:	bf14      	ite	ne
   2970e:	2500      	movne	r5, #0
   29710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   29714:	4293      	cmp	r3, r2
   29716:	bfc4      	itt	gt
   29718:	1a9b      	subgt	r3, r3, r2
   2971a:	18ed      	addgt	r5, r5, r3
   2971c:	42b5      	cmp	r5, r6
   2971e:	d11a      	bne.n	29756 <_printf_common+0xce>
   29720:	2000      	movs	r0, #0
   29722:	e008      	b.n	29736 <_printf_common+0xae>
   29724:	2301      	movs	r3, #1
   29726:	4652      	mov	r2, sl
   29728:	4649      	mov	r1, r9
   2972a:	4638      	mov	r0, r7
   2972c:	47c0      	blx	r8
   2972e:	3001      	adds	r0, #1
   29730:	d103      	bne.n	2973a <_printf_common+0xb2>
   29732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2973a:	3501      	adds	r5, #1
   2973c:	e7c3      	b.n	296c6 <_printf_common+0x3e>
   2973e:	18e1      	adds	r1, r4, r3
   29740:	1c5a      	adds	r2, r3, #1
   29742:	2030      	movs	r0, #48	; 0x30
   29744:	3302      	adds	r3, #2
   29746:	4422      	add	r2, r4
   29748:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2974c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   29750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   29754:	e7c4      	b.n	296e0 <_printf_common+0x58>
   29756:	2301      	movs	r3, #1
   29758:	4622      	mov	r2, r4
   2975a:	4649      	mov	r1, r9
   2975c:	4638      	mov	r0, r7
   2975e:	47c0      	blx	r8
   29760:	3001      	adds	r0, #1
   29762:	d0e6      	beq.n	29732 <_printf_common+0xaa>
   29764:	3601      	adds	r6, #1
   29766:	e7d9      	b.n	2971c <_printf_common+0x94>

00029768 <__sprintf_chk>:
   29768:	b408      	push	{r3}
   2976a:	b517      	push	{r0, r1, r2, r4, lr}
   2976c:	ab05      	add	r3, sp, #20
   2976e:	1e14      	subs	r4, r2, #0
   29770:	f853 1b04 	ldr.w	r1, [r3], #4
   29774:	9301      	str	r3, [sp, #4]
   29776:	da07      	bge.n	29788 <__sprintf_chk+0x20>
   29778:	461a      	mov	r2, r3
   2977a:	f7f8 ff13 	bl	225a4 <vsiprintf>
   2977e:	b003      	add	sp, #12
   29780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29784:	b001      	add	sp, #4
   29786:	4770      	bx	lr
   29788:	460a      	mov	r2, r1
   2978a:	4621      	mov	r1, r4
   2978c:	f7f8 fee6 	bl	2255c <vsniprintf>
   29790:	2800      	cmp	r0, #0
   29792:	dbf4      	blt.n	2977e <__sprintf_chk+0x16>
   29794:	42a0      	cmp	r0, r4
   29796:	d3f2      	bcc.n	2977e <__sprintf_chk+0x16>
   29798:	f7f8 ffe0 	bl	2275c <__chk_fail>

0002979c <__sread>:
   2979c:	b510      	push	{r4, lr}
   2979e:	460c      	mov	r4, r1
   297a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   297a4:	f7fa f90e 	bl	239c4 <_read_r>
   297a8:	2800      	cmp	r0, #0
   297aa:	bfab      	itete	ge
   297ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   297ae:	89a3      	ldrhlt	r3, [r4, #12]
   297b0:	181b      	addge	r3, r3, r0
   297b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   297b6:	bfac      	ite	ge
   297b8:	6563      	strge	r3, [r4, #84]	; 0x54
   297ba:	81a3      	strhlt	r3, [r4, #12]
   297bc:	bd10      	pop	{r4, pc}

000297be <__seofread>:
   297be:	2000      	movs	r0, #0
   297c0:	4770      	bx	lr

000297c2 <__swrite>:
   297c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   297c6:	461f      	mov	r7, r3
   297c8:	898b      	ldrh	r3, [r1, #12]
   297ca:	4605      	mov	r5, r0
   297cc:	460c      	mov	r4, r1
   297ce:	05db      	lsls	r3, r3, #23
   297d0:	4616      	mov	r6, r2
   297d2:	d505      	bpl.n	297e0 <__swrite+0x1e>
   297d4:	2302      	movs	r3, #2
   297d6:	2200      	movs	r2, #0
   297d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   297dc:	f7f9 f9b4 	bl	22b48 <_lseek_r>
   297e0:	89a3      	ldrh	r3, [r4, #12]
   297e2:	4632      	mov	r2, r6
   297e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   297e8:	4628      	mov	r0, r5
   297ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   297ee:	81a3      	strh	r3, [r4, #12]
   297f0:	463b      	mov	r3, r7
   297f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   297f6:	f7f8 bf31 	b.w	2265c <_write_r>

000297fa <__sseek>:
   297fa:	b510      	push	{r4, lr}
   297fc:	460c      	mov	r4, r1
   297fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29802:	f7f9 f9a1 	bl	22b48 <_lseek_r>
   29806:	1c43      	adds	r3, r0, #1
   29808:	89a3      	ldrh	r3, [r4, #12]
   2980a:	bf15      	itete	ne
   2980c:	6560      	strne	r0, [r4, #84]	; 0x54
   2980e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   29812:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   29816:	81a3      	strheq	r3, [r4, #12]
   29818:	bf18      	it	ne
   2981a:	81a3      	strhne	r3, [r4, #12]
   2981c:	bd10      	pop	{r4, pc}

0002981e <__sclose>:
   2981e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29822:	f7f8 bfbf 	b.w	227a4 <_close_r>

00029826 <strchr>:
   29826:	b2c9      	uxtb	r1, r1
   29828:	4603      	mov	r3, r0
   2982a:	f810 2b01 	ldrb.w	r2, [r0], #1
   2982e:	b11a      	cbz	r2, 29838 <strchr+0x12>
   29830:	428a      	cmp	r2, r1
   29832:	d1f9      	bne.n	29828 <strchr+0x2>
   29834:	4618      	mov	r0, r3
   29836:	4770      	bx	lr
   29838:	2900      	cmp	r1, #0
   2983a:	bf18      	it	ne
   2983c:	2300      	movne	r3, #0
   2983e:	e7f9      	b.n	29834 <strchr+0xe>

00029840 <strcpy>:
   29840:	4603      	mov	r3, r0
   29842:	f811 2b01 	ldrb.w	r2, [r1], #1
   29846:	f803 2b01 	strb.w	r2, [r3], #1
   2984a:	2a00      	cmp	r2, #0
   2984c:	d1f9      	bne.n	29842 <strcpy+0x2>
   2984e:	4770      	bx	lr

00029850 <_strdup_r>:
   29850:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29852:	4604      	mov	r4, r0
   29854:	4608      	mov	r0, r1
   29856:	460d      	mov	r5, r1
   29858:	f7e3 fb6e 	bl	cf38 <strlen>
   2985c:	1c42      	adds	r2, r0, #1
   2985e:	4620      	mov	r0, r4
   29860:	4611      	mov	r1, r2
   29862:	9201      	str	r2, [sp, #4]
   29864:	f7f7 fd96 	bl	21394 <_malloc_r>
   29868:	4604      	mov	r4, r0
   2986a:	b118      	cbz	r0, 29874 <_strdup_r+0x24>
   2986c:	9a01      	ldr	r2, [sp, #4]
   2986e:	4629      	mov	r1, r5
   29870:	f7ff fdff 	bl	29472 <memcpy>
   29874:	4620      	mov	r0, r4
   29876:	b003      	add	sp, #12
   29878:	bd30      	pop	{r4, r5, pc}

0002987a <strncmp>:
   2987a:	b510      	push	{r4, lr}
   2987c:	b16a      	cbz	r2, 2989a <strncmp+0x20>
   2987e:	3901      	subs	r1, #1
   29880:	1884      	adds	r4, r0, r2
   29882:	f810 3b01 	ldrb.w	r3, [r0], #1
   29886:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2988a:	4293      	cmp	r3, r2
   2988c:	d103      	bne.n	29896 <strncmp+0x1c>
   2988e:	42a0      	cmp	r0, r4
   29890:	d001      	beq.n	29896 <strncmp+0x1c>
   29892:	2b00      	cmp	r3, #0
   29894:	d1f5      	bne.n	29882 <strncmp+0x8>
   29896:	1a98      	subs	r0, r3, r2
   29898:	bd10      	pop	{r4, pc}
   2989a:	4610      	mov	r0, r2
   2989c:	e7fc      	b.n	29898 <strncmp+0x1e>

0002989e <strncpy>:
   2989e:	3901      	subs	r1, #1
   298a0:	4603      	mov	r3, r0
   298a2:	b510      	push	{r4, lr}
   298a4:	b132      	cbz	r2, 298b4 <strncpy+0x16>
   298a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   298aa:	3a01      	subs	r2, #1
   298ac:	f803 4b01 	strb.w	r4, [r3], #1
   298b0:	2c00      	cmp	r4, #0
   298b2:	d1f7      	bne.n	298a4 <strncpy+0x6>
   298b4:	441a      	add	r2, r3
   298b6:	2100      	movs	r1, #0
   298b8:	4293      	cmp	r3, r2
   298ba:	d100      	bne.n	298be <strncpy+0x20>
   298bc:	bd10      	pop	{r4, pc}
   298be:	f803 1b01 	strb.w	r1, [r3], #1
   298c2:	e7f9      	b.n	298b8 <strncpy+0x1a>

000298c4 <strstr>:
   298c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   298c6:	780c      	ldrb	r4, [r1, #0]
   298c8:	b164      	cbz	r4, 298e4 <strstr+0x20>
   298ca:	4603      	mov	r3, r0
   298cc:	781a      	ldrb	r2, [r3, #0]
   298ce:	4618      	mov	r0, r3
   298d0:	1c5e      	adds	r6, r3, #1
   298d2:	b90a      	cbnz	r2, 298d8 <strstr+0x14>
   298d4:	4610      	mov	r0, r2
   298d6:	e005      	b.n	298e4 <strstr+0x20>
   298d8:	4294      	cmp	r4, r2
   298da:	d108      	bne.n	298ee <strstr+0x2a>
   298dc:	460d      	mov	r5, r1
   298de:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   298e2:	b902      	cbnz	r2, 298e6 <strstr+0x22>
   298e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   298e6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   298ea:	4297      	cmp	r7, r2
   298ec:	d0f7      	beq.n	298de <strstr+0x1a>
   298ee:	4633      	mov	r3, r6
   298f0:	e7ec      	b.n	298cc <strstr+0x8>

000298f2 <__strtok_r>:
   298f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   298f4:	b908      	cbnz	r0, 298fa <__strtok_r+0x8>
   298f6:	6810      	ldr	r0, [r2, #0]
   298f8:	b188      	cbz	r0, 2991e <__strtok_r+0x2c>
   298fa:	4604      	mov	r4, r0
   298fc:	4620      	mov	r0, r4
   298fe:	460f      	mov	r7, r1
   29900:	f814 5b01 	ldrb.w	r5, [r4], #1
   29904:	f817 6b01 	ldrb.w	r6, [r7], #1
   29908:	b91e      	cbnz	r6, 29912 <__strtok_r+0x20>
   2990a:	b965      	cbnz	r5, 29926 <__strtok_r+0x34>
   2990c:	4628      	mov	r0, r5
   2990e:	6015      	str	r5, [r2, #0]
   29910:	e005      	b.n	2991e <__strtok_r+0x2c>
   29912:	42b5      	cmp	r5, r6
   29914:	d1f6      	bne.n	29904 <__strtok_r+0x12>
   29916:	2b00      	cmp	r3, #0
   29918:	d1f0      	bne.n	298fc <__strtok_r+0xa>
   2991a:	6014      	str	r4, [r2, #0]
   2991c:	7003      	strb	r3, [r0, #0]
   2991e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29920:	461c      	mov	r4, r3
   29922:	e00c      	b.n	2993e <__strtok_r+0x4c>
   29924:	b915      	cbnz	r5, 2992c <__strtok_r+0x3a>
   29926:	f814 3b01 	ldrb.w	r3, [r4], #1
   2992a:	460e      	mov	r6, r1
   2992c:	f816 5b01 	ldrb.w	r5, [r6], #1
   29930:	42ab      	cmp	r3, r5
   29932:	d1f7      	bne.n	29924 <__strtok_r+0x32>
   29934:	2b00      	cmp	r3, #0
   29936:	d0f3      	beq.n	29920 <__strtok_r+0x2e>
   29938:	2300      	movs	r3, #0
   2993a:	f804 3c01 	strb.w	r3, [r4, #-1]
   2993e:	6014      	str	r4, [r2, #0]
   29940:	e7ed      	b.n	2991e <__strtok_r+0x2c>

00029942 <_strtol_r>:
   29942:	f7f8 bac1 	b.w	21ec8 <_strtol_l.isra.0>

00029946 <_strtoul_r>:
   29946:	f7f8 bb4b 	b.w	21fe0 <_strtoul_l.isra.0>

0002994a <_vsniprintf_r>:
   2994a:	b530      	push	{r4, r5, lr}
   2994c:	1e14      	subs	r4, r2, #0
   2994e:	4605      	mov	r5, r0
   29950:	b09b      	sub	sp, #108	; 0x6c
   29952:	4618      	mov	r0, r3
   29954:	da05      	bge.n	29962 <_vsniprintf_r+0x18>
   29956:	238b      	movs	r3, #139	; 0x8b
   29958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2995c:	602b      	str	r3, [r5, #0]
   2995e:	b01b      	add	sp, #108	; 0x6c
   29960:	bd30      	pop	{r4, r5, pc}
   29962:	f44f 7302 	mov.w	r3, #520	; 0x208
   29966:	4602      	mov	r2, r0
   29968:	9100      	str	r1, [sp, #0]
   2996a:	4628      	mov	r0, r5
   2996c:	f8ad 300c 	strh.w	r3, [sp, #12]
   29970:	bf14      	ite	ne
   29972:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   29976:	4623      	moveq	r3, r4
   29978:	9104      	str	r1, [sp, #16]
   2997a:	4669      	mov	r1, sp
   2997c:	9302      	str	r3, [sp, #8]
   2997e:	9305      	str	r3, [sp, #20]
   29980:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29984:	f8ad 300e 	strh.w	r3, [sp, #14]
   29988:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2998a:	f7f9 fc55 	bl	23238 <_svfiprintf_r>
   2998e:	1c43      	adds	r3, r0, #1
   29990:	bfbc      	itt	lt
   29992:	238b      	movlt	r3, #139	; 0x8b
   29994:	602b      	strlt	r3, [r5, #0]
   29996:	2c00      	cmp	r4, #0
   29998:	d0e1      	beq.n	2995e <_vsniprintf_r+0x14>
   2999a:	9b00      	ldr	r3, [sp, #0]
   2999c:	2200      	movs	r2, #0
   2999e:	701a      	strb	r2, [r3, #0]
   299a0:	e7dd      	b.n	2995e <_vsniprintf_r+0x14>

000299a2 <abort>:
   299a2:	2006      	movs	r0, #6
   299a4:	b508      	push	{r3, lr}
   299a6:	f7fa f81f 	bl	239e8 <raise>
   299aa:	2001      	movs	r0, #1
   299ac:	f7e7 ffa8 	bl	11900 <_exit>

000299b0 <div>:
   299b0:	b510      	push	{r4, lr}
   299b2:	fb91 f4f2 	sdiv	r4, r1, r2
   299b6:	2900      	cmp	r1, #0
   299b8:	fb02 1314 	mls	r3, r2, r4, r1
   299bc:	db06      	blt.n	299cc <div+0x1c>
   299be:	2b00      	cmp	r3, #0
   299c0:	da01      	bge.n	299c6 <div+0x16>
   299c2:	3401      	adds	r4, #1
   299c4:	1a9b      	subs	r3, r3, r2
   299c6:	e9c0 4300 	strd	r4, r3, [r0]
   299ca:	bd10      	pop	{r4, pc}
   299cc:	2b00      	cmp	r3, #0
   299ce:	bfc4      	itt	gt
   299d0:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   299d4:	189b      	addgt	r3, r3, r2
   299d6:	e7f6      	b.n	299c6 <div+0x16>

000299d8 <quorem>:
   299d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   299dc:	6903      	ldr	r3, [r0, #16]
   299de:	4607      	mov	r7, r0
   299e0:	690c      	ldr	r4, [r1, #16]
   299e2:	42a3      	cmp	r3, r4
   299e4:	f2c0 8085 	blt.w	29af2 <quorem+0x11a>
   299e8:	3c01      	subs	r4, #1
   299ea:	f100 0514 	add.w	r5, r0, #20
   299ee:	f101 0814 	add.w	r8, r1, #20
   299f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   299f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   299fa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   299fe:	9301      	str	r3, [sp, #4]
   29a00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   29a04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   29a08:	3301      	adds	r3, #1
   29a0a:	429a      	cmp	r2, r3
   29a0c:	fbb2 f6f3 	udiv	r6, r2, r3
   29a10:	d333      	bcc.n	29a7a <quorem+0xa2>
   29a12:	f04f 0e00 	mov.w	lr, #0
   29a16:	4640      	mov	r0, r8
   29a18:	46ac      	mov	ip, r5
   29a1a:	46f2      	mov	sl, lr
   29a1c:	f850 2b04 	ldr.w	r2, [r0], #4
   29a20:	b293      	uxth	r3, r2
   29a22:	4581      	cmp	r9, r0
   29a24:	ea4f 4212 	mov.w	r2, r2, lsr #16
   29a28:	fb06 e303 	mla	r3, r6, r3, lr
   29a2c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   29a30:	b29b      	uxth	r3, r3
   29a32:	fb06 e202 	mla	r2, r6, r2, lr
   29a36:	ebaa 0303 	sub.w	r3, sl, r3
   29a3a:	f8dc a000 	ldr.w	sl, [ip]
   29a3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   29a42:	fa1f fa8a 	uxth.w	sl, sl
   29a46:	4453      	add	r3, sl
   29a48:	fa1f fa82 	uxth.w	sl, r2
   29a4c:	f8dc 2000 	ldr.w	r2, [ip]
   29a50:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   29a54:	eb02 4223 	add.w	r2, r2, r3, asr #16
   29a58:	b29b      	uxth	r3, r3
   29a5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
   29a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   29a62:	f84c 3b04 	str.w	r3, [ip], #4
   29a66:	d2d9      	bcs.n	29a1c <quorem+0x44>
   29a68:	f855 300b 	ldr.w	r3, [r5, fp]
   29a6c:	b92b      	cbnz	r3, 29a7a <quorem+0xa2>
   29a6e:	9b01      	ldr	r3, [sp, #4]
   29a70:	3b04      	subs	r3, #4
   29a72:	429d      	cmp	r5, r3
   29a74:	461a      	mov	r2, r3
   29a76:	d330      	bcc.n	29ada <quorem+0x102>
   29a78:	613c      	str	r4, [r7, #16]
   29a7a:	4638      	mov	r0, r7
   29a7c:	f000 f902 	bl	29c84 <__mcmp>
   29a80:	2800      	cmp	r0, #0
   29a82:	db26      	blt.n	29ad2 <quorem+0xfa>
   29a84:	3601      	adds	r6, #1
   29a86:	4628      	mov	r0, r5
   29a88:	f04f 0c00 	mov.w	ip, #0
   29a8c:	f858 1b04 	ldr.w	r1, [r8], #4
   29a90:	f8d0 e000 	ldr.w	lr, [r0]
   29a94:	b28b      	uxth	r3, r1
   29a96:	45c1      	cmp	r9, r8
   29a98:	fa1f f28e 	uxth.w	r2, lr
   29a9c:	ebac 0303 	sub.w	r3, ip, r3
   29aa0:	4413      	add	r3, r2
   29aa2:	ea4f 4211 	mov.w	r2, r1, lsr #16
   29aa6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   29aaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
   29aae:	b29b      	uxth	r3, r3
   29ab0:	ea4f 4c22 	mov.w	ip, r2, asr #16
   29ab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   29ab8:	f840 3b04 	str.w	r3, [r0], #4
   29abc:	d2e6      	bcs.n	29a8c <quorem+0xb4>
   29abe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   29ac2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   29ac6:	b922      	cbnz	r2, 29ad2 <quorem+0xfa>
   29ac8:	3b04      	subs	r3, #4
   29aca:	429d      	cmp	r5, r3
   29acc:	461a      	mov	r2, r3
   29ace:	d30a      	bcc.n	29ae6 <quorem+0x10e>
   29ad0:	613c      	str	r4, [r7, #16]
   29ad2:	4630      	mov	r0, r6
   29ad4:	b003      	add	sp, #12
   29ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ada:	6812      	ldr	r2, [r2, #0]
   29adc:	3b04      	subs	r3, #4
   29ade:	2a00      	cmp	r2, #0
   29ae0:	d1ca      	bne.n	29a78 <quorem+0xa0>
   29ae2:	3c01      	subs	r4, #1
   29ae4:	e7c5      	b.n	29a72 <quorem+0x9a>
   29ae6:	6812      	ldr	r2, [r2, #0]
   29ae8:	3b04      	subs	r3, #4
   29aea:	2a00      	cmp	r2, #0
   29aec:	d1f0      	bne.n	29ad0 <quorem+0xf8>
   29aee:	3c01      	subs	r4, #1
   29af0:	e7eb      	b.n	29aca <quorem+0xf2>
   29af2:	2000      	movs	r0, #0
   29af4:	e7ee      	b.n	29ad4 <quorem+0xfc>

00029af6 <__sfmoreglue>:
   29af6:	b570      	push	{r4, r5, r6, lr}
   29af8:	1e4a      	subs	r2, r1, #1
   29afa:	2568      	movs	r5, #104	; 0x68
   29afc:	460e      	mov	r6, r1
   29afe:	4355      	muls	r5, r2
   29b00:	f105 0174 	add.w	r1, r5, #116	; 0x74
   29b04:	f7f7 fc46 	bl	21394 <_malloc_r>
   29b08:	4604      	mov	r4, r0
   29b0a:	b140      	cbz	r0, 29b1e <__sfmoreglue+0x28>
   29b0c:	2100      	movs	r1, #0
   29b0e:	f105 0268 	add.w	r2, r5, #104	; 0x68
   29b12:	e9c0 1600 	strd	r1, r6, [r0]
   29b16:	300c      	adds	r0, #12
   29b18:	60a0      	str	r0, [r4, #8]
   29b1a:	f7ff fce4 	bl	294e6 <memset>
   29b1e:	4620      	mov	r0, r4
   29b20:	bd70      	pop	{r4, r5, r6, pc}

00029b22 <_fwalk_reent>:
   29b22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29b26:	4606      	mov	r6, r0
   29b28:	4688      	mov	r8, r1
   29b2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
   29b2e:	2700      	movs	r7, #0
   29b30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   29b34:	f1b9 0901 	subs.w	r9, r9, #1
   29b38:	d505      	bpl.n	29b46 <_fwalk_reent+0x24>
   29b3a:	6824      	ldr	r4, [r4, #0]
   29b3c:	2c00      	cmp	r4, #0
   29b3e:	d1f7      	bne.n	29b30 <_fwalk_reent+0xe>
   29b40:	4638      	mov	r0, r7
   29b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29b46:	89ab      	ldrh	r3, [r5, #12]
   29b48:	2b01      	cmp	r3, #1
   29b4a:	d907      	bls.n	29b5c <_fwalk_reent+0x3a>
   29b4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   29b50:	3301      	adds	r3, #1
   29b52:	d003      	beq.n	29b5c <_fwalk_reent+0x3a>
   29b54:	4629      	mov	r1, r5
   29b56:	4630      	mov	r0, r6
   29b58:	47c0      	blx	r8
   29b5a:	4307      	orrs	r7, r0
   29b5c:	3568      	adds	r5, #104	; 0x68
   29b5e:	e7e9      	b.n	29b34 <_fwalk_reent+0x12>

00029b60 <_getenv_r>:
   29b60:	b507      	push	{r0, r1, r2, lr}
   29b62:	aa01      	add	r2, sp, #4
   29b64:	f7f8 ffae 	bl	22ac4 <_findenv_r>
   29b68:	b003      	add	sp, #12
   29b6a:	f85d fb04 	ldr.w	pc, [sp], #4

00029b6e <__retarget_lock_init_recursive>:
   29b6e:	4770      	bx	lr

00029b70 <__retarget_lock_acquire>:
   29b70:	4770      	bx	lr

00029b72 <__retarget_lock_acquire_recursive>:
   29b72:	4770      	bx	lr

00029b74 <__retarget_lock_release>:
   29b74:	4770      	bx	lr

00029b76 <__retarget_lock_release_recursive>:
   29b76:	4770      	bx	lr

00029b78 <__swhatbuf_r>:
   29b78:	b570      	push	{r4, r5, r6, lr}
   29b7a:	460e      	mov	r6, r1
   29b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29b80:	b096      	sub	sp, #88	; 0x58
   29b82:	4614      	mov	r4, r2
   29b84:	2900      	cmp	r1, #0
   29b86:	461d      	mov	r5, r3
   29b88:	da07      	bge.n	29b9a <__swhatbuf_r+0x22>
   29b8a:	2300      	movs	r3, #0
   29b8c:	602b      	str	r3, [r5, #0]
   29b8e:	89b3      	ldrh	r3, [r6, #12]
   29b90:	061a      	lsls	r2, r3, #24
   29b92:	d410      	bmi.n	29bb6 <__swhatbuf_r+0x3e>
   29b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
   29b98:	e00e      	b.n	29bb8 <__swhatbuf_r+0x40>
   29b9a:	466a      	mov	r2, sp
   29b9c:	f7f9 ff4a 	bl	23a34 <_fstat_r>
   29ba0:	2800      	cmp	r0, #0
   29ba2:	dbf2      	blt.n	29b8a <__swhatbuf_r+0x12>
   29ba4:	9a01      	ldr	r2, [sp, #4]
   29ba6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   29baa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   29bae:	425a      	negs	r2, r3
   29bb0:	415a      	adcs	r2, r3
   29bb2:	602a      	str	r2, [r5, #0]
   29bb4:	e7ee      	b.n	29b94 <__swhatbuf_r+0x1c>
   29bb6:	2340      	movs	r3, #64	; 0x40
   29bb8:	2000      	movs	r0, #0
   29bba:	6023      	str	r3, [r4, #0]
   29bbc:	b016      	add	sp, #88	; 0x58
   29bbe:	bd70      	pop	{r4, r5, r6, pc}

00029bc0 <__ascii_mbtowc>:
   29bc0:	b082      	sub	sp, #8
   29bc2:	b901      	cbnz	r1, 29bc6 <__ascii_mbtowc+0x6>
   29bc4:	a901      	add	r1, sp, #4
   29bc6:	b142      	cbz	r2, 29bda <__ascii_mbtowc+0x1a>
   29bc8:	b14b      	cbz	r3, 29bde <__ascii_mbtowc+0x1e>
   29bca:	7813      	ldrb	r3, [r2, #0]
   29bcc:	600b      	str	r3, [r1, #0]
   29bce:	7812      	ldrb	r2, [r2, #0]
   29bd0:	1e10      	subs	r0, r2, #0
   29bd2:	bf18      	it	ne
   29bd4:	2001      	movne	r0, #1
   29bd6:	b002      	add	sp, #8
   29bd8:	4770      	bx	lr
   29bda:	4610      	mov	r0, r2
   29bdc:	e7fb      	b.n	29bd6 <__ascii_mbtowc+0x16>
   29bde:	f06f 0001 	mvn.w	r0, #1
   29be2:	e7f8      	b.n	29bd6 <__ascii_mbtowc+0x16>

00029be4 <__hi0bits>:
   29be4:	0c03      	lsrs	r3, r0, #16
   29be6:	041b      	lsls	r3, r3, #16
   29be8:	b9d3      	cbnz	r3, 29c20 <__hi0bits+0x3c>
   29bea:	0400      	lsls	r0, r0, #16
   29bec:	2310      	movs	r3, #16
   29bee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   29bf2:	bf04      	itt	eq
   29bf4:	0200      	lsleq	r0, r0, #8
   29bf6:	3308      	addeq	r3, #8
   29bf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   29bfc:	bf04      	itt	eq
   29bfe:	0100      	lsleq	r0, r0, #4
   29c00:	3304      	addeq	r3, #4
   29c02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   29c06:	bf04      	itt	eq
   29c08:	0080      	lsleq	r0, r0, #2
   29c0a:	3302      	addeq	r3, #2
   29c0c:	2800      	cmp	r0, #0
   29c0e:	db05      	blt.n	29c1c <__hi0bits+0x38>
   29c10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   29c14:	f103 0301 	add.w	r3, r3, #1
   29c18:	bf08      	it	eq
   29c1a:	2320      	moveq	r3, #32
   29c1c:	4618      	mov	r0, r3
   29c1e:	4770      	bx	lr
   29c20:	2300      	movs	r3, #0
   29c22:	e7e4      	b.n	29bee <__hi0bits+0xa>

00029c24 <__lo0bits>:
   29c24:	6803      	ldr	r3, [r0, #0]
   29c26:	4601      	mov	r1, r0
   29c28:	f013 0207 	ands.w	r2, r3, #7
   29c2c:	d00b      	beq.n	29c46 <__lo0bits+0x22>
   29c2e:	07da      	lsls	r2, r3, #31
   29c30:	d424      	bmi.n	29c7c <__lo0bits+0x58>
   29c32:	0798      	lsls	r0, r3, #30
   29c34:	bf47      	ittee	mi
   29c36:	085b      	lsrmi	r3, r3, #1
   29c38:	2001      	movmi	r0, #1
   29c3a:	089b      	lsrpl	r3, r3, #2
   29c3c:	2002      	movpl	r0, #2
   29c3e:	bf4c      	ite	mi
   29c40:	600b      	strmi	r3, [r1, #0]
   29c42:	600b      	strpl	r3, [r1, #0]
   29c44:	4770      	bx	lr
   29c46:	b298      	uxth	r0, r3
   29c48:	b9b0      	cbnz	r0, 29c78 <__lo0bits+0x54>
   29c4a:	0c1b      	lsrs	r3, r3, #16
   29c4c:	2010      	movs	r0, #16
   29c4e:	f013 0fff 	tst.w	r3, #255	; 0xff
   29c52:	bf04      	itt	eq
   29c54:	0a1b      	lsreq	r3, r3, #8
   29c56:	3008      	addeq	r0, #8
   29c58:	071a      	lsls	r2, r3, #28
   29c5a:	bf04      	itt	eq
   29c5c:	091b      	lsreq	r3, r3, #4
   29c5e:	3004      	addeq	r0, #4
   29c60:	079a      	lsls	r2, r3, #30
   29c62:	bf04      	itt	eq
   29c64:	089b      	lsreq	r3, r3, #2
   29c66:	3002      	addeq	r0, #2
   29c68:	07da      	lsls	r2, r3, #31
   29c6a:	d403      	bmi.n	29c74 <__lo0bits+0x50>
   29c6c:	085b      	lsrs	r3, r3, #1
   29c6e:	f100 0001 	add.w	r0, r0, #1
   29c72:	d005      	beq.n	29c80 <__lo0bits+0x5c>
   29c74:	600b      	str	r3, [r1, #0]
   29c76:	4770      	bx	lr
   29c78:	4610      	mov	r0, r2
   29c7a:	e7e8      	b.n	29c4e <__lo0bits+0x2a>
   29c7c:	2000      	movs	r0, #0
   29c7e:	4770      	bx	lr
   29c80:	2020      	movs	r0, #32
   29c82:	4770      	bx	lr

00029c84 <__mcmp>:
   29c84:	6902      	ldr	r2, [r0, #16]
   29c86:	b530      	push	{r4, r5, lr}
   29c88:	690c      	ldr	r4, [r1, #16]
   29c8a:	1b12      	subs	r2, r2, r4
   29c8c:	d10e      	bne.n	29cac <__mcmp+0x28>
   29c8e:	f100 0314 	add.w	r3, r0, #20
   29c92:	3114      	adds	r1, #20
   29c94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   29c98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   29c9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   29ca0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   29ca4:	42a5      	cmp	r5, r4
   29ca6:	d003      	beq.n	29cb0 <__mcmp+0x2c>
   29ca8:	d305      	bcc.n	29cb6 <__mcmp+0x32>
   29caa:	2201      	movs	r2, #1
   29cac:	4610      	mov	r0, r2
   29cae:	bd30      	pop	{r4, r5, pc}
   29cb0:	4283      	cmp	r3, r0
   29cb2:	d3f3      	bcc.n	29c9c <__mcmp+0x18>
   29cb4:	e7fa      	b.n	29cac <__mcmp+0x28>
   29cb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29cba:	e7f7      	b.n	29cac <__mcmp+0x28>

00029cbc <_calloc_r>:
   29cbc:	434a      	muls	r2, r1
   29cbe:	b513      	push	{r0, r1, r4, lr}
   29cc0:	4611      	mov	r1, r2
   29cc2:	9201      	str	r2, [sp, #4]
   29cc4:	f7f7 fb66 	bl	21394 <_malloc_r>
   29cc8:	4604      	mov	r4, r0
   29cca:	b118      	cbz	r0, 29cd4 <_calloc_r+0x18>
   29ccc:	9a01      	ldr	r2, [sp, #4]
   29cce:	2100      	movs	r1, #0
   29cd0:	f7ff fc09 	bl	294e6 <memset>
   29cd4:	4620      	mov	r0, r4
   29cd6:	b002      	add	sp, #8
   29cd8:	bd10      	pop	{r4, pc}

00029cda <_realloc_r>:
   29cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29cdc:	4607      	mov	r7, r0
   29cde:	4614      	mov	r4, r2
   29ce0:	460e      	mov	r6, r1
   29ce2:	b921      	cbnz	r1, 29cee <_realloc_r+0x14>
   29ce4:	4611      	mov	r1, r2
   29ce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   29cea:	f7f7 bb53 	b.w	21394 <_malloc_r>
   29cee:	b922      	cbnz	r2, 29cfa <_realloc_r+0x20>
   29cf0:	4625      	mov	r5, r4
   29cf2:	f7f7 faff 	bl	212f4 <_free_r>
   29cf6:	4628      	mov	r0, r5
   29cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29cfa:	f000 f970 	bl	29fde <_malloc_usable_size_r>
   29cfe:	42a0      	cmp	r0, r4
   29d00:	d20f      	bcs.n	29d22 <_realloc_r+0x48>
   29d02:	4621      	mov	r1, r4
   29d04:	4638      	mov	r0, r7
   29d06:	f7f7 fb45 	bl	21394 <_malloc_r>
   29d0a:	4605      	mov	r5, r0
   29d0c:	2800      	cmp	r0, #0
   29d0e:	d0f2      	beq.n	29cf6 <_realloc_r+0x1c>
   29d10:	4631      	mov	r1, r6
   29d12:	4622      	mov	r2, r4
   29d14:	f7ff fbad 	bl	29472 <memcpy>
   29d18:	4631      	mov	r1, r6
   29d1a:	4638      	mov	r0, r7
   29d1c:	f7f7 faea 	bl	212f4 <_free_r>
   29d20:	e7e9      	b.n	29cf6 <_realloc_r+0x1c>
   29d22:	4635      	mov	r5, r6
   29d24:	e7e7      	b.n	29cf6 <_realloc_r+0x1c>

00029d26 <__ssputs_r>:
   29d26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29d2a:	688e      	ldr	r6, [r1, #8]
   29d2c:	4682      	mov	sl, r0
   29d2e:	460c      	mov	r4, r1
   29d30:	4690      	mov	r8, r2
   29d32:	429e      	cmp	r6, r3
   29d34:	461f      	mov	r7, r3
   29d36:	d838      	bhi.n	29daa <__ssputs_r+0x84>
   29d38:	898a      	ldrh	r2, [r1, #12]
   29d3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
   29d3e:	d032      	beq.n	29da6 <__ssputs_r+0x80>
   29d40:	6825      	ldr	r5, [r4, #0]
   29d42:	3301      	adds	r3, #1
   29d44:	6909      	ldr	r1, [r1, #16]
   29d46:	eba5 0901 	sub.w	r9, r5, r1
   29d4a:	6965      	ldr	r5, [r4, #20]
   29d4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   29d50:	444b      	add	r3, r9
   29d52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   29d56:	106d      	asrs	r5, r5, #1
   29d58:	429d      	cmp	r5, r3
   29d5a:	bf38      	it	cc
   29d5c:	461d      	movcc	r5, r3
   29d5e:	0553      	lsls	r3, r2, #21
   29d60:	d531      	bpl.n	29dc6 <__ssputs_r+0xa0>
   29d62:	4629      	mov	r1, r5
   29d64:	f7f7 fb16 	bl	21394 <_malloc_r>
   29d68:	4606      	mov	r6, r0
   29d6a:	b950      	cbnz	r0, 29d82 <__ssputs_r+0x5c>
   29d6c:	230c      	movs	r3, #12
   29d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29d72:	f8ca 3000 	str.w	r3, [sl]
   29d76:	89a3      	ldrh	r3, [r4, #12]
   29d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29d7c:	81a3      	strh	r3, [r4, #12]
   29d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29d82:	464a      	mov	r2, r9
   29d84:	6921      	ldr	r1, [r4, #16]
   29d86:	f7ff fb74 	bl	29472 <memcpy>
   29d8a:	89a3      	ldrh	r3, [r4, #12]
   29d8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   29d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   29d94:	81a3      	strh	r3, [r4, #12]
   29d96:	6126      	str	r6, [r4, #16]
   29d98:	444e      	add	r6, r9
   29d9a:	6165      	str	r5, [r4, #20]
   29d9c:	eba5 0509 	sub.w	r5, r5, r9
   29da0:	6026      	str	r6, [r4, #0]
   29da2:	463e      	mov	r6, r7
   29da4:	60a5      	str	r5, [r4, #8]
   29da6:	42be      	cmp	r6, r7
   29da8:	d900      	bls.n	29dac <__ssputs_r+0x86>
   29daa:	463e      	mov	r6, r7
   29dac:	4632      	mov	r2, r6
   29dae:	4641      	mov	r1, r8
   29db0:	6820      	ldr	r0, [r4, #0]
   29db2:	f7ff fb7e 	bl	294b2 <memmove>
   29db6:	68a3      	ldr	r3, [r4, #8]
   29db8:	6822      	ldr	r2, [r4, #0]
   29dba:	2000      	movs	r0, #0
   29dbc:	1b9b      	subs	r3, r3, r6
   29dbe:	4432      	add	r2, r6
   29dc0:	60a3      	str	r3, [r4, #8]
   29dc2:	6022      	str	r2, [r4, #0]
   29dc4:	e7db      	b.n	29d7e <__ssputs_r+0x58>
   29dc6:	462a      	mov	r2, r5
   29dc8:	f7ff ff87 	bl	29cda <_realloc_r>
   29dcc:	4606      	mov	r6, r0
   29dce:	2800      	cmp	r0, #0
   29dd0:	d1e1      	bne.n	29d96 <__ssputs_r+0x70>
   29dd2:	6921      	ldr	r1, [r4, #16]
   29dd4:	4650      	mov	r0, sl
   29dd6:	f7f7 fa8d 	bl	212f4 <_free_r>
   29dda:	e7c7      	b.n	29d6c <__ssputs_r+0x46>

00029ddc <_sungetc_r>:
   29ddc:	b538      	push	{r3, r4, r5, lr}
   29dde:	1c4b      	adds	r3, r1, #1
   29de0:	4614      	mov	r4, r2
   29de2:	d103      	bne.n	29dec <_sungetc_r+0x10>
   29de4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   29de8:	4628      	mov	r0, r5
   29dea:	bd38      	pop	{r3, r4, r5, pc}
   29dec:	8993      	ldrh	r3, [r2, #12]
   29dee:	b2cd      	uxtb	r5, r1
   29df0:	f023 0320 	bic.w	r3, r3, #32
   29df4:	8193      	strh	r3, [r2, #12]
   29df6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29df8:	6852      	ldr	r2, [r2, #4]
   29dfa:	b18b      	cbz	r3, 29e20 <_sungetc_r+0x44>
   29dfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   29dfe:	4293      	cmp	r3, r2
   29e00:	dd08      	ble.n	29e14 <_sungetc_r+0x38>
   29e02:	6823      	ldr	r3, [r4, #0]
   29e04:	1e5a      	subs	r2, r3, #1
   29e06:	6022      	str	r2, [r4, #0]
   29e08:	f803 5c01 	strb.w	r5, [r3, #-1]
   29e0c:	6863      	ldr	r3, [r4, #4]
   29e0e:	3301      	adds	r3, #1
   29e10:	6063      	str	r3, [r4, #4]
   29e12:	e7e9      	b.n	29de8 <_sungetc_r+0xc>
   29e14:	4621      	mov	r1, r4
   29e16:	f000 f89e 	bl	29f56 <__submore>
   29e1a:	2800      	cmp	r0, #0
   29e1c:	d0f1      	beq.n	29e02 <_sungetc_r+0x26>
   29e1e:	e7e1      	b.n	29de4 <_sungetc_r+0x8>
   29e20:	6921      	ldr	r1, [r4, #16]
   29e22:	6823      	ldr	r3, [r4, #0]
   29e24:	b151      	cbz	r1, 29e3c <_sungetc_r+0x60>
   29e26:	4299      	cmp	r1, r3
   29e28:	d208      	bcs.n	29e3c <_sungetc_r+0x60>
   29e2a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   29e2e:	42a9      	cmp	r1, r5
   29e30:	d104      	bne.n	29e3c <_sungetc_r+0x60>
   29e32:	3b01      	subs	r3, #1
   29e34:	3201      	adds	r2, #1
   29e36:	6023      	str	r3, [r4, #0]
   29e38:	6062      	str	r2, [r4, #4]
   29e3a:	e7d5      	b.n	29de8 <_sungetc_r+0xc>
   29e3c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   29e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
   29e44:	6363      	str	r3, [r4, #52]	; 0x34
   29e46:	2303      	movs	r3, #3
   29e48:	63a3      	str	r3, [r4, #56]	; 0x38
   29e4a:	4623      	mov	r3, r4
   29e4c:	f803 5f46 	strb.w	r5, [r3, #70]!
   29e50:	6023      	str	r3, [r4, #0]
   29e52:	2301      	movs	r3, #1
   29e54:	e7dc      	b.n	29e10 <_sungetc_r+0x34>

00029e56 <__ssrefill_r>:
   29e56:	b510      	push	{r4, lr}
   29e58:	460c      	mov	r4, r1
   29e5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
   29e5c:	b169      	cbz	r1, 29e7a <__ssrefill_r+0x24>
   29e5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   29e62:	4299      	cmp	r1, r3
   29e64:	d001      	beq.n	29e6a <__ssrefill_r+0x14>
   29e66:	f7f7 fa45 	bl	212f4 <_free_r>
   29e6a:	2000      	movs	r0, #0
   29e6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   29e6e:	6360      	str	r0, [r4, #52]	; 0x34
   29e70:	6063      	str	r3, [r4, #4]
   29e72:	b113      	cbz	r3, 29e7a <__ssrefill_r+0x24>
   29e74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   29e76:	6023      	str	r3, [r4, #0]
   29e78:	bd10      	pop	{r4, pc}
   29e7a:	6923      	ldr	r3, [r4, #16]
   29e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29e80:	6023      	str	r3, [r4, #0]
   29e82:	2300      	movs	r3, #0
   29e84:	6063      	str	r3, [r4, #4]
   29e86:	89a3      	ldrh	r3, [r4, #12]
   29e88:	f043 0320 	orr.w	r3, r3, #32
   29e8c:	81a3      	strh	r3, [r4, #12]
   29e8e:	e7f3      	b.n	29e78 <__ssrefill_r+0x22>

00029e90 <__sccl>:
   29e90:	b570      	push	{r4, r5, r6, lr}
   29e92:	780b      	ldrb	r3, [r1, #0]
   29e94:	4604      	mov	r4, r0
   29e96:	2b5e      	cmp	r3, #94	; 0x5e
   29e98:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   29e9c:	bf13      	iteet	ne
   29e9e:	1c48      	addne	r0, r1, #1
   29ea0:	1c88      	addeq	r0, r1, #2
   29ea2:	784b      	ldrbeq	r3, [r1, #1]
   29ea4:	2200      	movne	r2, #0
   29ea6:	bf08      	it	eq
   29ea8:	2201      	moveq	r2, #1
   29eaa:	1e61      	subs	r1, r4, #1
   29eac:	f801 2f01 	strb.w	r2, [r1, #1]!
   29eb0:	42a9      	cmp	r1, r5
   29eb2:	d1fb      	bne.n	29eac <__sccl+0x1c>
   29eb4:	b90b      	cbnz	r3, 29eba <__sccl+0x2a>
   29eb6:	3801      	subs	r0, #1
   29eb8:	bd70      	pop	{r4, r5, r6, pc}
   29eba:	f082 0101 	eor.w	r1, r2, #1
   29ebe:	1c42      	adds	r2, r0, #1
   29ec0:	54e1      	strb	r1, [r4, r3]
   29ec2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   29ec6:	1e56      	subs	r6, r2, #1
   29ec8:	4610      	mov	r0, r2
   29eca:	2d2d      	cmp	r5, #45	; 0x2d
   29ecc:	d006      	beq.n	29edc <__sccl+0x4c>
   29ece:	2d5d      	cmp	r5, #93	; 0x5d
   29ed0:	d0f2      	beq.n	29eb8 <__sccl+0x28>
   29ed2:	b90d      	cbnz	r5, 29ed8 <__sccl+0x48>
   29ed4:	4630      	mov	r0, r6
   29ed6:	e7ef      	b.n	29eb8 <__sccl+0x28>
   29ed8:	462b      	mov	r3, r5
   29eda:	e7f0      	b.n	29ebe <__sccl+0x2e>
   29edc:	7816      	ldrb	r6, [r2, #0]
   29ede:	2e5d      	cmp	r6, #93	; 0x5d
   29ee0:	d0fa      	beq.n	29ed8 <__sccl+0x48>
   29ee2:	42b3      	cmp	r3, r6
   29ee4:	dcf8      	bgt.n	29ed8 <__sccl+0x48>
   29ee6:	4618      	mov	r0, r3
   29ee8:	3001      	adds	r0, #1
   29eea:	4286      	cmp	r6, r0
   29eec:	5421      	strb	r1, [r4, r0]
   29eee:	dcfb      	bgt.n	29ee8 <__sccl+0x58>
   29ef0:	43d8      	mvns	r0, r3
   29ef2:	1c5d      	adds	r5, r3, #1
   29ef4:	3202      	adds	r2, #2
   29ef6:	4430      	add	r0, r6
   29ef8:	42b3      	cmp	r3, r6
   29efa:	bfa8      	it	ge
   29efc:	2000      	movge	r0, #0
   29efe:	182b      	adds	r3, r5, r0
   29f00:	e7df      	b.n	29ec2 <__sccl+0x32>

00029f02 <_raise_r>:
   29f02:	291f      	cmp	r1, #31
   29f04:	b538      	push	{r3, r4, r5, lr}
   29f06:	4604      	mov	r4, r0
   29f08:	460d      	mov	r5, r1
   29f0a:	d904      	bls.n	29f16 <_raise_r+0x14>
   29f0c:	2316      	movs	r3, #22
   29f0e:	6003      	str	r3, [r0, #0]
   29f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29f14:	bd38      	pop	{r3, r4, r5, pc}
   29f16:	6c42      	ldr	r2, [r0, #68]	; 0x44
   29f18:	b112      	cbz	r2, 29f20 <_raise_r+0x1e>
   29f1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   29f1e:	b94b      	cbnz	r3, 29f34 <_raise_r+0x32>
   29f20:	4620      	mov	r0, r4
   29f22:	f000 f816 	bl	29f52 <_getpid_r>
   29f26:	462a      	mov	r2, r5
   29f28:	4601      	mov	r1, r0
   29f2a:	4620      	mov	r0, r4
   29f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29f30:	f7f9 bd62 	b.w	239f8 <_kill_r>
   29f34:	2b01      	cmp	r3, #1
   29f36:	d00a      	beq.n	29f4e <_raise_r+0x4c>
   29f38:	1c59      	adds	r1, r3, #1
   29f3a:	d103      	bne.n	29f44 <_raise_r+0x42>
   29f3c:	2316      	movs	r3, #22
   29f3e:	6003      	str	r3, [r0, #0]
   29f40:	2001      	movs	r0, #1
   29f42:	e7e7      	b.n	29f14 <_raise_r+0x12>
   29f44:	2400      	movs	r4, #0
   29f46:	4628      	mov	r0, r5
   29f48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   29f4c:	4798      	blx	r3
   29f4e:	2000      	movs	r0, #0
   29f50:	e7e0      	b.n	29f14 <_raise_r+0x12>

00029f52 <_getpid_r>:
   29f52:	f7fa bed6 	b.w	24d02 <_getpid>

00029f56 <__submore>:
   29f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29f5a:	460c      	mov	r4, r1
   29f5c:	6b49      	ldr	r1, [r1, #52]	; 0x34
   29f5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   29f62:	4299      	cmp	r1, r3
   29f64:	d11a      	bne.n	29f9c <__submore+0x46>
   29f66:	f44f 6180 	mov.w	r1, #1024	; 0x400
   29f6a:	f7f7 fa13 	bl	21394 <_malloc_r>
   29f6e:	b918      	cbnz	r0, 29f78 <__submore+0x22>
   29f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
   29f7c:	6360      	str	r0, [r4, #52]	; 0x34
   29f7e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   29f82:	63a3      	str	r3, [r4, #56]	; 0x38
   29f84:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   29f88:	7083      	strb	r3, [r0, #2]
   29f8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   29f8e:	7043      	strb	r3, [r0, #1]
   29f90:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   29f94:	7003      	strb	r3, [r0, #0]
   29f96:	6020      	str	r0, [r4, #0]
   29f98:	2000      	movs	r0, #0
   29f9a:	e7eb      	b.n	29f74 <__submore+0x1e>
   29f9c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   29f9e:	0077      	lsls	r7, r6, #1
   29fa0:	463a      	mov	r2, r7
   29fa2:	f7ff fe9a 	bl	29cda <_realloc_r>
   29fa6:	4605      	mov	r5, r0
   29fa8:	2800      	cmp	r0, #0
   29faa:	d0e1      	beq.n	29f70 <__submore+0x1a>
   29fac:	eb00 0806 	add.w	r8, r0, r6
   29fb0:	4601      	mov	r1, r0
   29fb2:	4632      	mov	r2, r6
   29fb4:	4640      	mov	r0, r8
   29fb6:	f7ff fa5c 	bl	29472 <memcpy>
   29fba:	f8c4 8000 	str.w	r8, [r4]
   29fbe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   29fc2:	e7e9      	b.n	29f98 <__submore+0x42>

00029fc4 <__ascii_wctomb>:
   29fc4:	b149      	cbz	r1, 29fda <__ascii_wctomb+0x16>
   29fc6:	2aff      	cmp	r2, #255	; 0xff
   29fc8:	bf8d      	iteet	hi
   29fca:	238a      	movhi	r3, #138	; 0x8a
   29fcc:	2001      	movls	r0, #1
   29fce:	700a      	strbls	r2, [r1, #0]
   29fd0:	6003      	strhi	r3, [r0, #0]
   29fd2:	bf88      	it	hi
   29fd4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   29fd8:	4770      	bx	lr
   29fda:	4608      	mov	r0, r1
   29fdc:	4770      	bx	lr

00029fde <_malloc_usable_size_r>:
   29fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
   29fe2:	1f18      	subs	r0, r3, #4
   29fe4:	2b00      	cmp	r3, #0
   29fe6:	bfbc      	itt	lt
   29fe8:	580b      	ldrlt	r3, [r1, r0]
   29fea:	18c0      	addlt	r0, r0, r3
   29fec:	4770      	bx	lr
