
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000be8 	.word	0x20000be8
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00001499 	.word	0x00001499
   8:	00004099 	.word	0x00004099
   c:	000014c9 	.word	0x000014c9
  10:	000014c9 	.word	0x000014c9
		if (fdtable[fd].obj == NULL) {
  14:	000014c9 	.word	0x000014c9
  18:	000014c9 	.word	0x000014c9
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  1c:	000014c9 	.word	0x000014c9
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	000012e1 	.word	0x000012e1
  30:	000014c9 	.word	0x000014c9
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00001299 	.word	0x00001299
  3c:	00003f97 	.word	0x00003f97

00000040 <_irq_vector_table>:
  40:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
  50:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
  60:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
  70:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
  80:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
  90:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
  a0:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
  b0:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
  c0:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
  d0:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
  e0:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
  f0:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
 100:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
 110:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
 120:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
 130:	00001459 00001459 00001459 00001459     Y...Y...Y...Y...
 140:	00001459                                Y...

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
 210:	00008000 00000001 00000000 00000000     ................
 220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     24c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     250:	f000 b980 	b.w	554 <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f806 	bl	26c <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     270:	9d09      	ldr	r5, [sp, #36]	; 0x24
     272:	4604      	mov	r4, r0
     274:	4688      	mov	r8, r1
     276:	2b00      	cmp	r3, #0
     278:	f040 8084 	bne.w	384 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x104>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d943      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     282:	fab2 f282 	clz	r2, r2
     286:	b142      	cbz	r2, 29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     288:	f1c2 0020 	rsb	r0, r2, #32
     28c:	4091      	lsls	r1, r2
     28e:	4097      	lsls	r7, r2
     290:	fa24 f000 	lsr.w	r0, r4, r0
     294:	4094      	lsls	r4, r2
     296:	ea40 0801 	orr.w	r8, r0, r1
     29a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
     29e:	0c23      	lsrs	r3, r4, #16
     2a0:	fa1f fe87 	uxth.w	lr, r7
     2a4:	fbb8 f6fc 	udiv	r6, r8, ip
     2a8:	fb0c 8116 	mls	r1, ip, r6, r8
     2ac:	fb06 f00e 	mul.w	r0, r6, lr
     2b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2b4:	4298      	cmp	r0, r3
     2b6:	d907      	bls.n	2c8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x48>
     2b8:	18fb      	adds	r3, r7, r3
     2ba:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
     2be:	d202      	bcs.n	2c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x46>
     2c0:	4298      	cmp	r0, r3
     2c2:	f200 8131 	bhi.w	528 <CONFIG_FLASH_SIZE+0x128>
     2c6:	460e      	mov	r6, r1
     2c8:	1a19      	subs	r1, r3, r0
     2ca:	b2a3      	uxth	r3, r4
     2cc:	fbb1 f0fc 	udiv	r0, r1, ip
     2d0:	fb0c 1110 	mls	r1, ip, r0, r1
     2d4:	fb00 fe0e 	mul.w	lr, r0, lr
     2d8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2dc:	45a6      	cmp	lr, r4
     2de:	d907      	bls.n	2f0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x70>
     2e0:	193c      	adds	r4, r7, r4
     2e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2e6:	d202      	bcs.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     2e8:	45a6      	cmp	lr, r4
     2ea:	f200 811a 	bhi.w	522 <CONFIG_FLASH_SIZE+0x122>
     2ee:	4618      	mov	r0, r3
     2f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     2f4:	eba4 040e 	sub.w	r4, r4, lr
     2f8:	2600      	movs	r6, #0
     2fa:	b11d      	cbz	r5, 304 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x84>
     2fc:	40d4      	lsrs	r4, r2
     2fe:	2300      	movs	r3, #0
     300:	e9c5 4300 	strd	r4, r3, [r5]
     304:	4631      	mov	r1, r6
     306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     30a:	b902      	cbnz	r2, 30e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8e>
     30c:	deff      	udf	#255	; 0xff
     30e:	fab2 f282 	clz	r2, r2
     312:	2a00      	cmp	r2, #0
     314:	d152      	bne.n	3bc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13c>
     316:	1bcb      	subs	r3, r1, r7
     318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     31c:	fa1f f887 	uxth.w	r8, r7
     320:	2601      	movs	r6, #1
     322:	0c21      	lsrs	r1, r4, #16
     324:	fbb3 fcfe 	udiv	ip, r3, lr
     328:	fb0e 301c 	mls	r0, lr, ip, r3
     32c:	fb08 f90c 	mul.w	r9, r8, ip
     330:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     334:	4589      	cmp	r9, r1
     336:	d90b      	bls.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     338:	1879      	adds	r1, r7, r1
     33a:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     33e:	bf2c      	ite	cs
     340:	2001      	movcs	r0, #1
     342:	2000      	movcc	r0, #0
     344:	4589      	cmp	r9, r1
     346:	d902      	bls.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
     348:	2800      	cmp	r0, #0
     34a:	f000 80f0 	beq.w	52e <CONFIG_FLASH_SIZE+0x12e>
     34e:	469c      	mov	ip, r3
     350:	eba1 0109 	sub.w	r1, r1, r9
     354:	b2a3      	uxth	r3, r4
     356:	fbb1 f0fe 	udiv	r0, r1, lr
     35a:	fb0e 1110 	mls	r1, lr, r0, r1
     35e:	fb08 f800 	mul.w	r8, r8, r0
     362:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     366:	45a0      	cmp	r8, r4
     368:	d907      	bls.n	37a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xfa>
     36a:	193c      	adds	r4, r7, r4
     36c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     370:	d202      	bcs.n	378 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf8>
     372:	45a0      	cmp	r8, r4
     374:	f200 80d2 	bhi.w	51c <CONFIG_FLASH_SIZE+0x11c>
     378:	4618      	mov	r0, r3
     37a:	eba4 0408 	sub.w	r4, r4, r8
     37e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     382:	e7ba      	b.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     384:	428b      	cmp	r3, r1
     386:	d909      	bls.n	39c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x11c>
     388:	2d00      	cmp	r5, #0
     38a:	f000 80be 	beq.w	50a <CONFIG_FLASH_SIZE+0x10a>
     38e:	2600      	movs	r6, #0
     390:	e9c5 0100 	strd	r0, r1, [r5]
     394:	4630      	mov	r0, r6
     396:	4631      	mov	r1, r6
     398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     39c:	fab3 f683 	clz	r6, r3
     3a0:	2e00      	cmp	r6, #0
     3a2:	d14d      	bne.n	440 <CONFIG_FLASH_SIZE+0x40>
     3a4:	428b      	cmp	r3, r1
     3a6:	f0c0 80b3 	bcc.w	510 <CONFIG_FLASH_SIZE+0x110>
     3aa:	4282      	cmp	r2, r0
     3ac:	f240 80b0 	bls.w	510 <CONFIG_FLASH_SIZE+0x110>
     3b0:	4630      	mov	r0, r6
     3b2:	2d00      	cmp	r5, #0
     3b4:	d0a6      	beq.n	304 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x84>
     3b6:	e9c5 4800 	strd	r4, r8, [r5]
     3ba:	e7a3      	b.n	304 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x84>
     3bc:	4097      	lsls	r7, r2
     3be:	f1c2 0320 	rsb	r3, r2, #32
     3c2:	fa01 f002 	lsl.w	r0, r1, r2
     3c6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     3ca:	40d9      	lsrs	r1, r3
     3cc:	fa24 f303 	lsr.w	r3, r4, r3
     3d0:	fa1f f887 	uxth.w	r8, r7
     3d4:	4094      	lsls	r4, r2
     3d6:	4303      	orrs	r3, r0
     3d8:	fbb1 f0fe 	udiv	r0, r1, lr
     3dc:	0c1e      	lsrs	r6, r3, #16
     3de:	fb0e 1110 	mls	r1, lr, r0, r1
     3e2:	fb00 fc08 	mul.w	ip, r0, r8
     3e6:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
     3ea:	458c      	cmp	ip, r1
     3ec:	d90e      	bls.n	40c <CONFIG_FLASH_SIZE+0xc>
     3ee:	1879      	adds	r1, r7, r1
     3f0:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
     3f4:	bf2c      	ite	cs
     3f6:	f04f 0901 	movcs.w	r9, #1
     3fa:	f04f 0900 	movcc.w	r9, #0
     3fe:	458c      	cmp	ip, r1
     400:	d903      	bls.n	40a <CONFIG_FLASH_SIZE+0xa>
     402:	f1b9 0f00 	cmp.w	r9, #0
     406:	f000 8096 	beq.w	536 <CONFIG_FLASH_SIZE+0x136>
     40a:	4630      	mov	r0, r6
     40c:	eba1 010c 	sub.w	r1, r1, ip
     410:	b29b      	uxth	r3, r3
     412:	fbb1 f6fe 	udiv	r6, r1, lr
     416:	fb0e 1116 	mls	r1, lr, r6, r1
     41a:	fb06 fc08 	mul.w	ip, r6, r8
     41e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
     422:	458c      	cmp	ip, r1
     424:	d907      	bls.n	436 <CONFIG_FLASH_SIZE+0x36>
     426:	1879      	adds	r1, r7, r1
     428:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
     42c:	d202      	bcs.n	434 <CONFIG_FLASH_SIZE+0x34>
     42e:	458c      	cmp	ip, r1
     430:	f200 8088 	bhi.w	544 <CONFIG_FLASH_SIZE+0x144>
     434:	461e      	mov	r6, r3
     436:	eba1 030c 	sub.w	r3, r1, ip
     43a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     43e:	e770      	b.n	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     440:	f1c6 0720 	rsb	r7, r6, #32
     444:	fa03 f406 	lsl.w	r4, r3, r6
     448:	fa02 fc06 	lsl.w	ip, r2, r6
     44c:	fa01 fe06 	lsl.w	lr, r1, r6
     450:	40fa      	lsrs	r2, r7
     452:	fa20 f807 	lsr.w	r8, r0, r7
     456:	40f9      	lsrs	r1, r7
     458:	fa00 f306 	lsl.w	r3, r0, r6
     45c:	4322      	orrs	r2, r4
     45e:	ea48 040e 	orr.w	r4, r8, lr
     462:	ea4f 4812 	mov.w	r8, r2, lsr #16
     466:	ea4f 4e14 	mov.w	lr, r4, lsr #16
     46a:	fa1f f982 	uxth.w	r9, r2
     46e:	fbb1 faf8 	udiv	sl, r1, r8
     472:	fb08 111a 	mls	r1, r8, sl, r1
     476:	fb0a f009 	mul.w	r0, sl, r9
     47a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
     47e:	4570      	cmp	r0, lr
     480:	d90e      	bls.n	4a0 <CONFIG_FLASH_SIZE+0xa0>
     482:	eb12 0e0e 	adds.w	lr, r2, lr
     486:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
     48a:	bf2c      	ite	cs
     48c:	f04f 0b01 	movcs.w	fp, #1
     490:	f04f 0b00 	movcc.w	fp, #0
     494:	4570      	cmp	r0, lr
     496:	d902      	bls.n	49e <CONFIG_FLASH_SIZE+0x9e>
     498:	f1bb 0f00 	cmp.w	fp, #0
     49c:	d04e      	beq.n	53c <CONFIG_FLASH_SIZE+0x13c>
     49e:	468a      	mov	sl, r1
     4a0:	ebae 0e00 	sub.w	lr, lr, r0
     4a4:	b2a4      	uxth	r4, r4
     4a6:	fbbe f0f8 	udiv	r0, lr, r8
     4aa:	fb08 ee10 	mls	lr, r8, r0, lr
     4ae:	fb00 f909 	mul.w	r9, r0, r9
     4b2:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
     4b6:	45f1      	cmp	r9, lr
     4b8:	d907      	bls.n	4ca <CONFIG_FLASH_SIZE+0xca>
     4ba:	eb12 0e0e 	adds.w	lr, r2, lr
     4be:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
     4c2:	d201      	bcs.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4c4:	45f1      	cmp	r9, lr
     4c6:	d840      	bhi.n	54a <CONFIG_FLASH_SIZE+0x14a>
     4c8:	4608      	mov	r0, r1
     4ca:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     4ce:	ebae 0e09 	sub.w	lr, lr, r9
     4d2:	fba0 890c 	umull	r8, r9, r0, ip
     4d6:	45ce      	cmp	lr, r9
     4d8:	4641      	mov	r1, r8
     4da:	464c      	mov	r4, r9
     4dc:	d302      	bcc.n	4e4 <CONFIG_FLASH_SIZE+0xe4>
     4de:	d106      	bne.n	4ee <CONFIG_FLASH_SIZE+0xee>
     4e0:	4543      	cmp	r3, r8
     4e2:	d204      	bcs.n	4ee <CONFIG_FLASH_SIZE+0xee>
     4e4:	3801      	subs	r0, #1
     4e6:	ebb8 010c 	subs.w	r1, r8, ip
     4ea:	eb69 0402 	sbc.w	r4, r9, r2
     4ee:	b37d      	cbz	r5, 550 <CONFIG_FLASH_SIZE+0x150>
     4f0:	1a5a      	subs	r2, r3, r1
     4f2:	eb6e 0e04 	sbc.w	lr, lr, r4
     4f6:	40f2      	lsrs	r2, r6
     4f8:	fa0e f707 	lsl.w	r7, lr, r7
     4fc:	fa2e f306 	lsr.w	r3, lr, r6
     500:	2600      	movs	r6, #0
     502:	4317      	orrs	r7, r2
     504:	e9c5 7300 	strd	r7, r3, [r5]
     508:	e6fc      	b.n	304 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x84>
     50a:	462e      	mov	r6, r5
     50c:	4628      	mov	r0, r5
     50e:	e6f9      	b.n	304 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x84>
     510:	1a84      	subs	r4, r0, r2
     512:	eb61 0103 	sbc.w	r1, r1, r3
     516:	2001      	movs	r0, #1
     518:	4688      	mov	r8, r1
     51a:	e74a      	b.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     51c:	3802      	subs	r0, #2
     51e:	443c      	add	r4, r7
     520:	e72b      	b.n	37a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xfa>
     522:	3802      	subs	r0, #2
     524:	443c      	add	r4, r7
     526:	e6e3      	b.n	2f0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x70>
     528:	3e02      	subs	r6, #2
     52a:	443b      	add	r3, r7
     52c:	e6cc      	b.n	2c8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x48>
     52e:	f1ac 0c02 	sub.w	ip, ip, #2
     532:	4439      	add	r1, r7
     534:	e70c      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     536:	3802      	subs	r0, #2
     538:	4439      	add	r1, r7
     53a:	e767      	b.n	40c <CONFIG_FLASH_SIZE+0xc>
     53c:	f1aa 0a02 	sub.w	sl, sl, #2
     540:	4496      	add	lr, r2
     542:	e7ad      	b.n	4a0 <CONFIG_FLASH_SIZE+0xa0>
     544:	3e02      	subs	r6, #2
     546:	4439      	add	r1, r7
     548:	e775      	b.n	436 <CONFIG_FLASH_SIZE+0x36>
     54a:	3802      	subs	r0, #2
     54c:	4496      	add	lr, r2
     54e:	e7bc      	b.n	4ca <CONFIG_FLASH_SIZE+0xca>
     550:	462e      	mov	r6, r5
     552:	e6d7      	b.n	304 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x84>

00000554 <__aeabi_idiv0>:
     554:	4770      	bx	lr
     556:	bf00      	nop

00000558 <__gnu_cmse_nonsecure_call>:
     558:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     55c:	4627      	mov	r7, r4
     55e:	46a0      	mov	r8, r4
     560:	46a1      	mov	r9, r4
     562:	46a2      	mov	sl, r4
     564:	46a3      	mov	fp, r4
     566:	46a4      	mov	ip, r4
     568:	ed2d 8b10 	vpush	{d8-d15}
     56c:	f04f 0500 	mov.w	r5, #0
     570:	ec45 5b18 	vmov	d8, r5, r5
     574:	ec45 5a19 	vmov	s18, s19, r5, r5
     578:	ec45 5a1a 	vmov	s20, s21, r5, r5
     57c:	ec45 5a1b 	vmov	s22, s23, r5, r5
     580:	ec45 5a1c 	vmov	s24, s25, r5, r5
     584:	ec45 5a1d 	vmov	s26, s27, r5, r5
     588:	ec45 5a1e 	vmov	s28, s29, r5, r5
     58c:	ec45 5a1f 	vmov	s30, s31, r5, r5
     590:	eef1 5a10 	vmrs	r5, fpscr
     594:	f64f 7660 	movw	r6, #65376	; 0xff60
     598:	f6c0 76ff 	movt	r6, #4095	; 0xfff
     59c:	4035      	ands	r5, r6
     59e:	eee1 5a10 	vmsr	fpscr, r5
     5a2:	f384 8800 	msr	CPSR_f, r4
     5a6:	4625      	mov	r5, r4
     5a8:	4626      	mov	r6, r4
     5aa:	47a4      	blxns	r4
     5ac:	ecbd 8b10 	vpop	{d8-d15}
     5b0:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

000005b4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     5b4:	680b      	ldr	r3, [r1, #0]
     5b6:	3301      	adds	r3, #1
     5b8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     5ba:	4b01      	ldr	r3, [pc, #4]	; (5c0 <char_out+0xc>)
     5bc:	681b      	ldr	r3, [r3, #0]
     5be:	4718      	bx	r3
     5c0:	20000000 	.word	0x20000000

000005c4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5c8:	ed2d 8b02 	vpush	{d8}
     5cc:	b083      	sub	sp, #12
     5ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     5d0:	469a      	mov	sl, r3
     5d2:	2c01      	cmp	r4, #1
     5d4:	bfb8      	it	lt
     5d6:	2401      	movlt	r4, #1
     5d8:	2b01      	cmp	r3, #1
     5da:	bf0c      	ite	eq
     5dc:	2330      	moveq	r3, #48	; 0x30
     5de:	2320      	movne	r3, #32
     5e0:	4615      	mov	r5, r2
     5e2:	4606      	mov	r6, r0
     5e4:	ee08 3a10 	vmov	s16, r3
     5e8:	2701      	movs	r7, #1
     5ea:	f04f 080a 	mov.w	r8, #10
     5ee:	2200      	movs	r2, #0
     5f0:	f8df b074 	ldr.w	fp, [pc, #116]	; 668 <_printk_dec_ulong+0xa4>
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     5f4:	fbb5 f9fb 	udiv	r9, r5, fp
     5f8:	b90a      	cbnz	r2, 5fe <_printk_dec_ulong+0x3a>
     5fa:	45ab      	cmp	fp, r5
     5fc:	d820      	bhi.n	640 <_printk_dec_ulong+0x7c>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     5fe:	f109 0030 	add.w	r0, r9, #48	; 0x30
     602:	9100      	str	r1, [sp, #0]
     604:	47b0      	blx	r6
			found_largest_digit = 1;
     606:	2201      	movs	r2, #1
			digits++;
     608:	3701      	adds	r7, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
     60a:	9900      	ldr	r1, [sp, #0]
		}
		remaining--;
		remainder %= pos;
		pos /= 10;
     60c:	230a      	movs	r3, #10
		remaining--;
     60e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
     612:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
     616:	fb0b 5519 	mls	r5, fp, r9, r5
		pos /= 10;
     61a:	fbbb fbf3 	udiv	fp, fp, r3
	while (pos >= 10) {
     61e:	d1e9      	bne.n	5f4 <_printk_dec_ulong+0x30>
	}
	out((int)(remainder + 48), ctx);
     620:	f105 0030 	add.w	r0, r5, #48	; 0x30
     624:	9100      	str	r1, [sp, #0]
     626:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
     628:	f1ba 0f03 	cmp.w	sl, #3
     62c:	9900      	ldr	r1, [sp, #0]
     62e:	d102      	bne.n	636 <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
     630:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
     632:	2c00      	cmp	r4, #0
     634:	dc11      	bgt.n	65a <_printk_dec_ulong+0x96>
			out(' ', ctx);
		}
	}
}
     636:	b003      	add	sp, #12
     638:	ecbd 8b02 	vpop	{d8}
     63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     640:	4544      	cmp	r4, r8
     642:	dbe3      	blt.n	60c <_printk_dec_ulong+0x48>
				&& padding < PAD_SPACE_AFTER) {
     644:	f1ba 0f02 	cmp.w	sl, #2
     648:	d8e0      	bhi.n	60c <_printk_dec_ulong+0x48>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     64a:	ee18 0a10 	vmov	r0, s16
     64e:	e9cd 1200 	strd	r1, r2, [sp]
			digits++;
     652:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     654:	47b0      	blx	r6
			digits++;
     656:	9a01      	ldr	r2, [sp, #4]
     658:	e7d7      	b.n	60a <_printk_dec_ulong+0x46>
			out(' ', ctx);
     65a:	2020      	movs	r0, #32
     65c:	9100      	str	r1, [sp, #0]
     65e:	3c01      	subs	r4, #1
     660:	47b0      	blx	r6
     662:	9900      	ldr	r1, [sp, #0]
     664:	e7e5      	b.n	632 <_printk_dec_ulong+0x6e>
     666:	bf00      	nop
     668:	3b9aca00 	.word	0x3b9aca00

0000066c <__printk_hook_install>:
	_char_out = fn;
     66c:	4b01      	ldr	r3, [pc, #4]	; (674 <__printk_hook_install+0x8>)
     66e:	6018      	str	r0, [r3, #0]
}
     670:	4770      	bx	lr
     672:	bf00      	nop
     674:	20000000 	.word	0x20000000

00000678 <z_vprintk>:
{
     678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
     67c:	2700      	movs	r7, #0
{
     67e:	4605      	mov	r5, r0
     680:	468b      	mov	fp, r1
	int min_width = -1;
     682:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     686:	46b8      	mov	r8, r7
{
     688:	461c      	mov	r4, r3
     68a:	b08d      	sub	sp, #52	; 0x34
     68c:	1e53      	subs	r3, r2, #1
     68e:	9303      	str	r3, [sp, #12]
			might_format = 0;
     690:	2600      	movs	r6, #0
					break;
     692:	e005      	b.n	6a0 <z_vprintk+0x28>
		if (!might_format) {
     694:	b96e      	cbnz	r6, 6b2 <z_vprintk+0x3a>
			if (*fmt != '%') {
     696:	2825      	cmp	r0, #37	; 0x25
     698:	f000 8171 	beq.w	97e <CONFIG_ISR_STACK_SIZE+0x17e>
				out((int)*fmt, ctx);
     69c:	4659      	mov	r1, fp
     69e:	47a8      	blx	r5
	while (*fmt) {
     6a0:	9b03      	ldr	r3, [sp, #12]
     6a2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     6a6:	9303      	str	r3, [sp, #12]
     6a8:	2800      	cmp	r0, #0
     6aa:	d1f3      	bne.n	694 <z_vprintk+0x1c>
}
     6ac:	b00d      	add	sp, #52	; 0x34
     6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     6b2:	287a      	cmp	r0, #122	; 0x7a
     6b4:	d80a      	bhi.n	6cc <z_vprintk+0x54>
     6b6:	2862      	cmp	r0, #98	; 0x62
     6b8:	d810      	bhi.n	6dc <z_vprintk+0x64>
     6ba:	2830      	cmp	r0, #48	; 0x30
     6bc:	d054      	beq.n	768 <z_vprintk+0xf0>
     6be:	d845      	bhi.n	74c <z_vprintk+0xd4>
     6c0:	2825      	cmp	r0, #37	; 0x25
     6c2:	f000 815a 	beq.w	97a <CONFIG_ISR_STACK_SIZE+0x17a>
     6c6:	282d      	cmp	r0, #45	; 0x2d
     6c8:	f000 815f 	beq.w	98a <CONFIG_ISR_STACK_SIZE+0x18a>
					out((int)'%', ctx);
     6cc:	4659      	mov	r1, fp
     6ce:	2025      	movs	r0, #37	; 0x25
     6d0:	47a8      	blx	r5
					out((int)*fmt, ctx);
     6d2:	4659      	mov	r1, fp
     6d4:	9b03      	ldr	r3, [sp, #12]
     6d6:	7818      	ldrb	r0, [r3, #0]
     6d8:	47a8      	blx	r5
     6da:	e7d9      	b.n	690 <z_vprintk+0x18>
     6dc:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
     6e0:	2b17      	cmp	r3, #23
     6e2:	d8f3      	bhi.n	6cc <z_vprintk+0x54>
     6e4:	a201      	add	r2, pc, #4	; (adr r2, 6ec <z_vprintk+0x74>)
     6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     6ea:	bf00      	nop
     6ec:	00000973 	.word	0x00000973
     6f0:	000007b7 	.word	0x000007b7
     6f4:	000006cd 	.word	0x000006cd
     6f8:	000006cd 	.word	0x000006cd
     6fc:	000006cd 	.word	0x000006cd
     700:	00000799 	.word	0x00000799
     704:	000007b7 	.word	0x000007b7
     708:	000006cd 	.word	0x000006cd
     70c:	000006cd 	.word	0x000006cd
     710:	00000799 	.word	0x00000799
     714:	000006cd 	.word	0x000006cd
     718:	000006cd 	.word	0x000006cd
     71c:	000006cd 	.word	0x000006cd
     720:	00000859 	.word	0x00000859
     724:	000006cd 	.word	0x000006cd
     728:	000006cd 	.word	0x000006cd
     72c:	00000943 	.word	0x00000943
     730:	000006cd 	.word	0x000006cd
     734:	00000827 	.word	0x00000827
     738:	000006cd 	.word	0x000006cd
     73c:	000006cd 	.word	0x000006cd
     740:	00000755 	.word	0x00000755
     744:	000006cd 	.word	0x000006cd
     748:	00000799 	.word	0x00000799
			switch (*fmt) {
     74c:	2839      	cmp	r0, #57	; 0x39
     74e:	d91a      	bls.n	786 <z_vprintk+0x10e>
     750:	2858      	cmp	r0, #88	; 0x58
     752:	d1bb      	bne.n	6cc <z_vprintk+0x54>
				if (*fmt == 'p') {
     754:	9b03      	ldr	r3, [sp, #12]
     756:	781b      	ldrb	r3, [r3, #0]
     758:	2b70      	cmp	r3, #112	; 0x70
     75a:	f040 8088 	bne.w	86e <CONFIG_ISR_STACK_SIZE+0x6e>
					x = va_arg(ap, unsigned int);
     75e:	f854 3b04 	ldr.w	r3, [r4], #4
     762:	2200      	movs	r2, #0
     764:	9306      	str	r3, [sp, #24]
     766:	e090      	b.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
				if (min_width < 0 && padding == PAD_NONE) {
     768:	f1b9 0f00 	cmp.w	r9, #0
     76c:	da0e      	bge.n	78c <z_vprintk+0x114>
     76e:	f1b8 0f00 	cmp.w	r8, #0
     772:	f000 810d 	beq.w	990 <CONFIG_ISR_STACK_SIZE+0x190>
					min_width = *fmt - '0';
     776:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     77a:	f1b8 0f00 	cmp.w	r8, #0
     77e:	bf08      	it	eq
     780:	f04f 0802 	moveq.w	r8, #2
     784:	e78c      	b.n	6a0 <z_vprintk+0x28>
				if (min_width < 0) {
     786:	f1b9 0f00 	cmp.w	r9, #0
     78a:	dbf4      	blt.n	776 <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
     78c:	230a      	movs	r3, #10
     78e:	fb03 0909 	mla	r9, r3, r9, r0
     792:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     796:	e7f0      	b.n	77a <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
     798:	2868      	cmp	r0, #104	; 0x68
     79a:	d103      	bne.n	7a4 <z_vprintk+0x12c>
     79c:	2f68      	cmp	r7, #104	; 0x68
     79e:	d106      	bne.n	7ae <z_vprintk+0x136>
					length_mod = 'H';
     7a0:	2748      	movs	r7, #72	; 0x48
     7a2:	e77d      	b.n	6a0 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
     7a4:	286c      	cmp	r0, #108	; 0x6c
     7a6:	d102      	bne.n	7ae <z_vprintk+0x136>
     7a8:	2f6c      	cmp	r7, #108	; 0x6c
     7aa:	f000 80f4 	beq.w	996 <CONFIG_ISR_STACK_SIZE+0x196>
				} else if (length_mod == 0) {
     7ae:	2f00      	cmp	r7, #0
     7b0:	d18c      	bne.n	6cc <z_vprintk+0x54>
     7b2:	4607      	mov	r7, r0
     7b4:	e774      	b.n	6a0 <z_vprintk+0x28>
				if (length_mod == 'z') {
     7b6:	2f7a      	cmp	r7, #122	; 0x7a
     7b8:	d102      	bne.n	7c0 <z_vprintk+0x148>
					d = va_arg(ap, int);
     7ba:	f854 6b04 	ldr.w	r6, [r4], #4
     7be:	e021      	b.n	804 <CONFIG_ISR_STACK_SIZE+0x4>
				} else if (length_mod == 'l') {
     7c0:	2f6c      	cmp	r7, #108	; 0x6c
     7c2:	d0fa      	beq.n	7ba <z_vprintk+0x142>
				} else if (length_mod == 'L') {
     7c4:	2f4c      	cmp	r7, #76	; 0x4c
     7c6:	d1f8      	bne.n	7ba <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
     7c8:	3407      	adds	r4, #7
     7ca:	f024 0407 	bic.w	r4, r4, #7
     7ce:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     7d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
     7d6:	9b04      	ldr	r3, [sp, #16]
     7d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     7dc:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
     7e0:	9b05      	ldr	r3, [sp, #20]
     7e2:	9108      	str	r1, [sp, #32]
     7e4:	f143 0100 	adc.w	r1, r3, #0
     7e8:	9109      	str	r1, [sp, #36]	; 0x24
     7ea:	2100      	movs	r1, #0
     7ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     7f0:	4299      	cmp	r1, r3
     7f2:	bf08      	it	eq
     7f4:	4290      	cmpeq	r0, r2
     7f6:	d204      	bcs.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
						print_err(out, ctx);
     7f8:	4659      	mov	r1, fp
     7fa:	4628      	mov	r0, r5
     7fc:	f003 fa41 	bl	3c82 <print_err>
						break;
     800:	e746      	b.n	690 <z_vprintk+0x18>
					d = lld;
     802:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
     804:	2e00      	cmp	r6, #0
     806:	da05      	bge.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
					out((int)'-', ctx);
     808:	4659      	mov	r1, fp
     80a:	202d      	movs	r0, #45	; 0x2d
     80c:	47a8      	blx	r5
					d = -d;
     80e:	4276      	negs	r6, r6
					min_width--;
     810:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     814:	4643      	mov	r3, r8
     816:	4632      	mov	r2, r6
     818:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
     81c:	4659      	mov	r1, fp
     81e:	4628      	mov	r0, r5
     820:	f7ff fed0 	bl	5c4 <_printk_dec_ulong>
				break;
     824:	e734      	b.n	690 <z_vprintk+0x18>
				if (length_mod == 'z') {
     826:	2f7a      	cmp	r7, #122	; 0x7a
     828:	d102      	bne.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
					u = va_arg(ap, unsigned int);
     82a:	f854 2b04 	ldr.w	r2, [r4], #4
     82e:	e00f      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
				} else if (length_mod == 'l') {
     830:	2f6c      	cmp	r7, #108	; 0x6c
     832:	d0fa      	beq.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
				} else if (length_mod == 'L') {
     834:	2f4c      	cmp	r7, #76	; 0x4c
     836:	d1f8      	bne.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
					if (llu > ~0UL) {
     838:	2100      	movs	r1, #0
     83a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
     83e:	3407      	adds	r4, #7
     840:	f024 0407 	bic.w	r4, r4, #7
     844:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
     848:	4299      	cmp	r1, r3
     84a:	bf08      	it	eq
     84c:	4290      	cmpeq	r0, r2
     84e:	d3d3      	bcc.n	7f8 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
     850:	4643      	mov	r3, r8
     852:	f8cd 9000 	str.w	r9, [sp]
     856:	e7e1      	b.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
				out('0', ctx);
     858:	4659      	mov	r1, fp
     85a:	2030      	movs	r0, #48	; 0x30
     85c:	47a8      	blx	r5
				out('x', ctx);
     85e:	4659      	mov	r1, fp
     860:	2078      	movs	r0, #120	; 0x78
     862:	47a8      	blx	r5
					min_width = 8;
     864:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
     868:	f04f 0801 	mov.w	r8, #1
     86c:	e772      	b.n	754 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
     86e:	2f6c      	cmp	r7, #108	; 0x6c
     870:	f43f af75 	beq.w	75e <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
     874:	2f4c      	cmp	r7, #76	; 0x4c
     876:	f47f af72 	bne.w	75e <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
     87a:	1de3      	adds	r3, r4, #7
     87c:	f023 0307 	bic.w	r3, r3, #7
     880:	461c      	mov	r4, r3
     882:	f854 2b08 	ldr.w	r2, [r4], #8
     886:	9206      	str	r2, [sp, #24]
     888:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
     88a:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
     88c:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
     88e:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
     892:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
     894:	9107      	str	r1, [sp, #28]
		shift -= 4;
     896:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
     89a:	9906      	ldr	r1, [sp, #24]
     89c:	f1ca 0e20 	rsb	lr, sl, #32
     8a0:	f1aa 0c20 	sub.w	ip, sl, #32
     8a4:	fa21 f00a 	lsr.w	r0, r1, sl
     8a8:	fa02 fe0e 	lsl.w	lr, r2, lr
     8ac:	ea40 000e 	orr.w	r0, r0, lr
     8b0:	fa22 fc0c 	lsr.w	ip, r2, ip
     8b4:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
     8b8:	f010 000f 	ands.w	r0, r0, #15
     8bc:	d107      	bne.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     8be:	9907      	ldr	r1, [sp, #28]
     8c0:	b911      	cbnz	r1, 8c8 <CONFIG_ISR_STACK_SIZE+0xc8>
     8c2:	f1ba 0f00 	cmp.w	sl, #0
     8c6:	d125      	bne.n	914 <CONFIG_ISR_STACK_SIZE+0x114>
			nibble += nibble > 9 ? 87 : 48;
     8c8:	f04f 0c30 	mov.w	ip, #48	; 0x30
     8cc:	e005      	b.n	8da <CONFIG_ISR_STACK_SIZE+0xda>
     8ce:	2809      	cmp	r0, #9
     8d0:	bf8c      	ite	hi
     8d2:	f04f 0c57 	movhi.w	ip, #87	; 0x57
     8d6:	f04f 0c30 	movls.w	ip, #48	; 0x30
     8da:	4460      	add	r0, ip
			out((int)nibble, ctx);
     8dc:	4659      	mov	r1, fp
     8de:	b240      	sxtb	r0, r0
     8e0:	920a      	str	r2, [sp, #40]	; 0x28
     8e2:	9307      	str	r3, [sp, #28]
     8e4:	47a8      	blx	r5
			digits++;
     8e6:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
     8e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
     8ea:	3301      	adds	r3, #1
     8ec:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
     8ee:	9b07      	ldr	r3, [sp, #28]
     8f0:	f1ba 0f00 	cmp.w	sl, #0
     8f4:	d123      	bne.n	93e <CONFIG_ISR_STACK_SIZE+0x13e>
	if (padding == PAD_SPACE_AFTER) {
     8f6:	f1b8 0f03 	cmp.w	r8, #3
     8fa:	f47f aec9 	bne.w	690 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
     8fe:	9b04      	ldr	r3, [sp, #16]
     900:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
     904:	2e00      	cmp	r6, #0
     906:	f77f aec3 	ble.w	690 <z_vprintk+0x18>
			out(' ', ctx);
     90a:	4659      	mov	r1, fp
     90c:	2020      	movs	r0, #32
     90e:	47a8      	blx	r5
     910:	3e01      	subs	r6, #1
     912:	e7f7      	b.n	904 <CONFIG_ISR_STACK_SIZE+0x104>
		if (remaining-- <= min_width) {
     914:	1e59      	subs	r1, r3, #1
     916:	4599      	cmp	r9, r3
     918:	910a      	str	r1, [sp, #40]	; 0x28
     91a:	db07      	blt.n	92c <CONFIG_ISR_STACK_SIZE+0x12c>
			if (padding == PAD_ZERO_BEFORE) {
     91c:	f1b8 0f01 	cmp.w	r8, #1
     920:	d106      	bne.n	930 <CONFIG_ISR_STACK_SIZE+0x130>
				out('0', ctx);
     922:	4659      	mov	r1, fp
     924:	2030      	movs	r0, #48	; 0x30
     926:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
     928:	47a8      	blx	r5
     92a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
     92c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     92e:	e7b2      	b.n	896 <CONFIG_ISR_STACK_SIZE+0x96>
			} else if (padding == PAD_SPACE_BEFORE) {
     930:	f1b8 0f02 	cmp.w	r8, #2
     934:	d1fa      	bne.n	92c <CONFIG_ISR_STACK_SIZE+0x12c>
				out(' ', ctx);
     936:	4659      	mov	r1, fp
     938:	2020      	movs	r0, #32
     93a:	920b      	str	r2, [sp, #44]	; 0x2c
     93c:	e7f4      	b.n	928 <CONFIG_ISR_STACK_SIZE+0x128>
			found_largest_digit = 1;
     93e:	9607      	str	r6, [sp, #28]
     940:	e7a9      	b.n	896 <CONFIG_ISR_STACK_SIZE+0x96>
				char *s = va_arg(ap, char *);
     942:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
     946:	46b2      	mov	sl, r6
     948:	4653      	mov	r3, sl
     94a:	f81a 0b01 	ldrb.w	r0, [sl], #1
     94e:	b968      	cbnz	r0, 96c <CONFIG_ISR_STACK_SIZE+0x16c>
				if (padding == PAD_SPACE_AFTER) {
     950:	f1b8 0f03 	cmp.w	r8, #3
     954:	d121      	bne.n	99a <CONFIG_ISR_STACK_SIZE+0x19a>
					int remaining = min_width - (s - start);
     956:	1b9e      	subs	r6, r3, r6
     958:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
     95c:	2e00      	cmp	r6, #0
     95e:	f77f ae97 	ble.w	690 <z_vprintk+0x18>
						out(' ', ctx);
     962:	4659      	mov	r1, fp
     964:	2020      	movs	r0, #32
     966:	47a8      	blx	r5
     968:	3e01      	subs	r6, #1
     96a:	e7f7      	b.n	95c <CONFIG_ISR_STACK_SIZE+0x15c>
					out((int)(*s++), ctx);
     96c:	4659      	mov	r1, fp
     96e:	47a8      	blx	r5
     970:	e7ea      	b.n	948 <CONFIG_ISR_STACK_SIZE+0x148>
				out(c, ctx);
     972:	4659      	mov	r1, fp
     974:	f854 0b04 	ldr.w	r0, [r4], #4
     978:	e6ae      	b.n	6d8 <z_vprintk+0x60>
				out((int)'%', ctx);
     97a:	4659      	mov	r1, fp
     97c:	e6ac      	b.n	6d8 <z_vprintk+0x60>
				length_mod = 0;
     97e:	4637      	mov	r7, r6
				padding = PAD_NONE;
     980:	46b0      	mov	r8, r6
				min_width = -1;
     982:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     986:	2601      	movs	r6, #1
     988:	e68a      	b.n	6a0 <z_vprintk+0x28>
			switch (*fmt) {
     98a:	f04f 0803 	mov.w	r8, #3
     98e:	e687      	b.n	6a0 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
     990:	f04f 0801 	mov.w	r8, #1
     994:	e684      	b.n	6a0 <z_vprintk+0x28>
					length_mod = 'L';
     996:	274c      	movs	r7, #76	; 0x4c
     998:	e682      	b.n	6a0 <z_vprintk+0x28>
			might_format = 0;
     99a:	4606      	mov	r6, r0
		++fmt;
     99c:	e680      	b.n	6a0 <z_vprintk+0x28>
     99e:	bf00      	nop

000009a0 <vprintk>:
{
     9a0:	b507      	push	{r0, r1, r2, lr}
     9a2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     9a4:	2100      	movs	r1, #0
{
     9a6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     9a8:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     9aa:	4803      	ldr	r0, [pc, #12]	; (9b8 <vprintk+0x18>)
     9ac:	a901      	add	r1, sp, #4
     9ae:	f7ff fe63 	bl	678 <z_vprintk>
}
     9b2:	b003      	add	sp, #12
     9b4:	f85d fb04 	ldr.w	pc, [sp], #4
     9b8:	000005b5 	.word	0x000005b5

000009bc <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     9bc:	f04f 0220 	mov.w	r2, #32
     9c0:	f3ef 8311 	mrs	r3, BASEPRI
     9c4:	f382 8811 	msr	BASEPRI, r2
     9c8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     9cc:	2101      	movs	r1, #1
     9ce:	4a04      	ldr	r2, [pc, #16]	; (9e0 <nordicsemi_nrf91_init+0x24>)
     9d0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     9d4:	f383 8811 	msr	BASEPRI, r3
     9d8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     9dc:	2000      	movs	r0, #0
     9de:	4770      	bx	lr
     9e0:	50039000 	.word	0x50039000

000009e4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     9e4:	b120      	cbz	r0, 9f0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     9e6:	4b03      	ldr	r3, [pc, #12]	; (9f4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     9e8:	0180      	lsls	r0, r0, #6
     9ea:	f043 0301 	orr.w	r3, r3, #1
     9ee:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     9f0:	4770      	bx	lr
     9f2:	bf00      	nop
     9f4:	00004860 	.word	0x00004860

000009f8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     9f8:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     9fa:	4806      	ldr	r0, [pc, #24]	; (a14 <uart_console_init+0x1c>)
     9fc:	f001 fb0c 	bl	2018 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     a00:	4b05      	ldr	r3, [pc, #20]	; (a18 <uart_console_init+0x20>)
     a02:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
     a04:	4805      	ldr	r0, [pc, #20]	; (a1c <uart_console_init+0x24>)
     a06:	f001 f8a7 	bl	1b58 <__stdout_hook_install>
	__printk_hook_install(console_out);
     a0a:	4804      	ldr	r0, [pc, #16]	; (a1c <uart_console_init+0x24>)
     a0c:	f7ff fe2e 	bl	66c <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
     a10:	2000      	movs	r0, #0
     a12:	bd08      	pop	{r3, pc}
     a14:	00004ae6 	.word	0x00004ae6
     a18:	20000150 	.word	0x20000150
     a1c:	00000a21 	.word	0x00000a21

00000a20 <console_out>:
	if ('\n' == c) {
     a20:	280a      	cmp	r0, #10
{
     a22:	b538      	push	{r3, r4, r5, lr}
     a24:	4604      	mov	r4, r0
     a26:	4d07      	ldr	r5, [pc, #28]	; (a44 <console_out+0x24>)
	if ('\n' == c) {
     a28:	d104      	bne.n	a34 <console_out+0x14>
     a2a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     a2c:	6883      	ldr	r3, [r0, #8]
     a2e:	210d      	movs	r1, #13
     a30:	685b      	ldr	r3, [r3, #4]
     a32:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
     a34:	6828      	ldr	r0, [r5, #0]
     a36:	6883      	ldr	r3, [r0, #8]
     a38:	b2e1      	uxtb	r1, r4
     a3a:	685b      	ldr	r3, [r3, #4]
     a3c:	4798      	blx	r3
}
     a3e:	4620      	mov	r0, r4
     a40:	bd38      	pop	{r3, r4, r5, pc}
     a42:	bf00      	nop
     a44:	20000150 	.word	0x20000150

00000a48 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
     a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
     a4a:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
     a4c:	4f11      	ldr	r7, [pc, #68]	; (a94 <clkstarted_handle.constprop.0+0x4c>)
static void clkstarted_handle(struct device *dev,
     a4e:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
     a50:	68fb      	ldr	r3, [r7, #12]
	sub_data->started = true;
     a52:	fb04 3400 	mla	r4, r4, r0, r3
     a56:	2301      	movs	r3, #1
     a58:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
     a5a:	f04f 0320 	mov.w	r3, #32
     a5e:	f3ef 8111 	mrs	r1, BASEPRI
     a62:	f383 8811 	msr	BASEPRI, r3
     a66:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
     a6a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
     a6c:	b12b      	cbz	r3, a7a <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     a6e:	6866      	ldr	r6, [r4, #4]
     a70:	681a      	ldr	r2, [r3, #0]
     a72:	42b3      	cmp	r3, r6
	list->head = node;
     a74:	6022      	str	r2, [r4, #0]
	list->tail = node;
     a76:	bf08      	it	eq
     a78:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
     a7a:	f381 8811 	msr	BASEPRI, r1
     a7e:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
     a82:	b903      	cbnz	r3, a86 <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
     a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
     a86:	4629      	mov	r1, r5
     a88:	e9d3 6201 	ldrd	r6, r2, [r3, #4]
     a8c:	4638      	mov	r0, r7
     a8e:	47b0      	blx	r6
     a90:	e7e3      	b.n	a5a <clkstarted_handle.constprop.0+0x12>
     a92:	bf00      	nop
     a94:	20000094 	.word	0x20000094

00000a98 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     a98:	b508      	push	{r3, lr}
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     a9a:	4b11      	ldr	r3, [pc, #68]	; (ae0 <nrf_power_clock_isr+0x48>)
     a9c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     a9e:	b16a      	cbz	r2, abc <nrf_power_clock_isr+0x24>
    return p_reg->INTENSET & mask;
     aa0:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     aa4:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     aa8:	07d1      	lsls	r1, r2, #31
     aaa:	d507      	bpl.n	abc <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     aac:	2200      	movs	r2, #0
     aae:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     ab0:	4b0c      	ldr	r3, [pc, #48]	; (ae4 <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     ab2:	68db      	ldr	r3, [r3, #12]
     ab4:	7a58      	ldrb	r0, [r3, #9]
     ab6:	b908      	cbnz	r0, abc <nrf_power_clock_isr+0x24>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     ab8:	f7ff ffc6 	bl	a48 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     abc:	4b0a      	ldr	r3, [pc, #40]	; (ae8 <nrf_power_clock_isr+0x50>)
     abe:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     ac0:	b162      	cbz	r2, adc <nrf_power_clock_isr+0x44>
    return p_reg->INTENSET & mask;
     ac2:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     ac6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     aca:	0792      	lsls	r2, r2, #30
     acc:	d506      	bpl.n	adc <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     ace:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     ad0:	2001      	movs	r0, #1
     ad2:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     ad4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     ad8:	f7ff bfb6 	b.w	a48 <clkstarted_handle.constprop.0>
}
     adc:	bd08      	pop	{r3, pc}
     ade:	bf00      	nop
     ae0:	50005100 	.word	0x50005100
     ae4:	20000094 	.word	0x20000094
     ae8:	50005104 	.word	0x50005104

00000aec <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
     aec:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
     aee:	4b08      	ldr	r3, [pc, #32]	; (b10 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     af0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     af4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     af8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
     afc:	4290      	cmp	r0, r2
     afe:	d100      	bne.n	b02 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
     b00:	4770      	bx	lr
     b02:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
     b06:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     b08:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     b0c:	e7f2      	b.n	af4 <handle_next_tick_case+0x8>
     b0e:	bf00      	nop
     b10:	50015000 	.word	0x50015000

00000b14 <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     b14:	2200      	movs	r2, #0
     b16:	4b06      	ldr	r3, [pc, #24]	; (b30 <rtc1_nrf_isr+0x1c>)
     b18:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     b1a:	4a06      	ldr	r2, [pc, #24]	; (b34 <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
     b1c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
     b20:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     b22:	1ac0      	subs	r0, r0, r3
     b24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     b28:	4403      	add	r3, r0
     b2a:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     b2c:	f002 b93a 	b.w	2da4 <z_clock_announce>
     b30:	50015140 	.word	0x50015140
     b34:	2000016c 	.word	0x2000016c

00000b38 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     b38:	b538      	push	{r3, r4, r5, lr}
     b3a:	4814      	ldr	r0, [pc, #80]	; (b8c <z_clock_driver_init+0x54>)
     b3c:	f001 fa6c 	bl	2018 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
     b40:	b300      	cbz	r0, b84 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     b42:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     b44:	2400      	movs	r4, #0
     b46:	2101      	movs	r1, #1
     b48:	681b      	ldr	r3, [r3, #0]
     b4a:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     b50:	4d0f      	ldr	r5, [pc, #60]	; (b90 <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     b52:	4b10      	ldr	r3, [pc, #64]	; (b94 <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
     b54:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     b58:	601c      	str	r4, [r3, #0]
     b5a:	4b0f      	ldr	r3, [pc, #60]	; (b98 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     b5c:	2101      	movs	r1, #1
     b5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
     b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     b66:	4622      	mov	r2, r4
     b68:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
     b6c:	2015      	movs	r0, #21
     b6e:	f000 fbd7 	bl	1320 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     b72:	2015      	movs	r0, #21
     b74:	f000 fbc4 	bl	1300 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     b78:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
     b7a:	4620      	mov	r0, r4
     b7c:	4a07      	ldr	r2, [pc, #28]	; (b9c <z_clock_driver_init+0x64>)
     b7e:	6013      	str	r3, [r2, #0]
     b80:	602b      	str	r3, [r5, #0]
}
     b82:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
     b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     b88:	e7fb      	b.n	b82 <z_clock_driver_init+0x4a>
     b8a:	bf00      	nop
     b8c:	00004cad 	.word	0x00004cad
     b90:	50015000 	.word	0x50015000
     b94:	50015140 	.word	0x50015140
     b98:	e000e100 	.word	0xe000e100
     b9c:	50015008 	.word	0x50015008

00000ba0 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
     ba2:	4b2c      	ldr	r3, [pc, #176]	; (c54 <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     ba4:	4c2c      	ldr	r4, [pc, #176]	; (c58 <z_clock_set_timeout+0xb8>)
     ba6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
     baa:	4b2c      	ldr	r3, [pc, #176]	; (c5c <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     bac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     bb0:	bf08      	it	eq
     bb2:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
     bb4:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
     bb6:	1a52      	subs	r2, r2, r1
     bb8:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
     bbc:	0212      	lsls	r2, r2, #8
     bbe:	d436      	bmi.n	c2e <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     bc0:	3801      	subs	r0, #1
     bc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     bc6:	42a0      	cmp	r0, r4
     bc8:	bfa8      	it	ge
     bca:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
     bcc:	3301      	adds	r3, #1
     bce:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
     bd0:	42a0      	cmp	r0, r4
     bd2:	bf94      	ite	ls
     bd4:	180c      	addls	r4, r1, r0
     bd6:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
     bd8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     bdc:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
     bde:	4b1d      	ldr	r3, [pc, #116]	; (c54 <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     be0:	4e1f      	ldr	r6, [pc, #124]	; (c60 <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
     be2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
     be6:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
     bea:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     bee:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
     bf2:	1a52      	subs	r2, r2, r1
     bf4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
     bf8:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     bfa:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
     bfc:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
     c00:	461d      	mov	r5, r3
     c02:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
     c06:	d103      	bne.n	c10 <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
     c08:	200f      	movs	r0, #15
     c0a:	f003 fc75 	bl	44f8 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     c0e:	6037      	str	r7, [r6, #0]
     c10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     c14:	4b13      	ldr	r3, [pc, #76]	; (c64 <z_clock_set_timeout+0xc4>)
     c16:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
     c1a:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     c1e:	1a23      	subs	r3, r4, r0
     c20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
     c24:	2b01      	cmp	r3, #1
     c26:	d104      	bne.n	c32 <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
     c28:	f7ff ff60 	bl	aec <handle_next_tick_case>
     c2c:	e00b      	b.n	c46 <z_clock_set_timeout+0xa6>
		ticks = 0;
     c2e:	2000      	movs	r0, #0
     c30:	e7cc      	b.n	bcc <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     c32:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     c36:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
     c3a:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     c3e:	1a24      	subs	r4, r4, r0
     c40:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
     c42:	0223      	lsls	r3, r4, #8
     c44:	d4f0      	bmi.n	c28 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
     c46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     c4a:	4b02      	ldr	r3, [pc, #8]	; (c54 <z_clock_set_timeout+0xb4>)
     c4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
     c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c52:	bf00      	nop
     c54:	50015000 	.word	0x50015000
     c58:	007fffff 	.word	0x007fffff
     c5c:	2000016c 	.word	0x2000016c
     c60:	50015140 	.word	0x50015140
     c64:	e000e100 	.word	0xe000e100

00000c68 <z_clock_elapsed>:
	__asm__ volatile(
     c68:	f04f 0220 	mov.w	r2, #32
     c6c:	f3ef 8311 	mrs	r3, BASEPRI
     c70:	f382 8811 	msr	BASEPRI, r2
     c74:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     c78:	4a06      	ldr	r2, [pc, #24]	; (c94 <z_clock_elapsed+0x2c>)
     c7a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     c7e:	4a06      	ldr	r2, [pc, #24]	; (c98 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     c80:	6812      	ldr	r2, [r2, #0]
     c82:	1a80      	subs	r0, r0, r2
     c84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     c88:	f383 8811 	msr	BASEPRI, r3
     c8c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     c90:	4770      	bx	lr
     c92:	bf00      	nop
     c94:	50015000 	.word	0x50015000
     c98:	2000016c 	.word	0x2000016c

00000c9c <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, u32_t perm)
{
     c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
     c9e:	2800      	cmp	r0, #0
{
     ca0:	461c      	mov	r4, r3

	for (size_t i = start; i < end; i++) {
     ca2:	460d      	mov	r5, r1
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
     ca4:	bf14      	ite	ne
     ca6:	f44f 5300 	movne.w	r3, #8192	; 0x2000
     caa:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
	for (size_t i = start; i < end; i++) {
     cae:	4e20      	ldr	r6, [pc, #128]	; (d30 <config_regions+0x94>)
     cb0:	4295      	cmp	r5, r2
     cb2:	d332      	bcc.n	d1a <config_regions+0x7e>
		} else {
			NRF_SPU->FLASHREGION[i].PERM = perm;
		}
	}

	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
     cb4:	fb02 f003 	mul.w	r0, r2, r3
     cb8:	3a01      	subs	r2, #1
     cba:	434b      	muls	r3, r1
     cbc:	9000      	str	r0, [sp, #0]
     cbe:	481d      	ldr	r0, [pc, #116]	; (d34 <config_regions+0x98>)
     cc0:	f002 ffed 	bl	3c9e <printk>
				region_size * start, region_size * end);
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
     cc4:	4b1c      	ldr	r3, [pc, #112]	; (d38 <config_regions+0x9c>)
     cc6:	f014 0f10 	tst.w	r4, #16
     cca:	491c      	ldr	r1, [pc, #112]	; (d3c <config_regions+0xa0>)
     ccc:	481c      	ldr	r0, [pc, #112]	; (d40 <config_regions+0xa4>)
     cce:	bf08      	it	eq
     cd0:	4619      	moveq	r1, r3
     cd2:	f002 ffe4 	bl	3c9e <printk>
								"Non-Secure\t");
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
     cd6:	f014 0f04 	tst.w	r4, #4
     cda:	bf14      	ite	ne
     cdc:	2172      	movne	r1, #114	; 0x72
     cde:	212d      	moveq	r1, #45	; 0x2d
     ce0:	4818      	ldr	r0, [pc, #96]	; (d44 <config_regions+0xa8>)
     ce2:	f002 ffdc 	bl	3c9e <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
     ce6:	f014 0f02 	tst.w	r4, #2
     cea:	bf14      	ite	ne
     cec:	2177      	movne	r1, #119	; 0x77
     cee:	212d      	moveq	r1, #45	; 0x2d
     cf0:	4814      	ldr	r0, [pc, #80]	; (d44 <config_regions+0xa8>)
     cf2:	f002 ffd4 	bl	3c9e <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
     cf6:	f014 0f01 	tst.w	r4, #1
     cfa:	bf0c      	ite	eq
     cfc:	212d      	moveq	r1, #45	; 0x2d
     cfe:	2178      	movne	r1, #120	; 0x78
     d00:	4810      	ldr	r0, [pc, #64]	; (d44 <config_regions+0xa8>)
     d02:	f002 ffcc 	bl	3c9e <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
     d06:	216c      	movs	r1, #108	; 0x6c
     d08:	480e      	ldr	r0, [pc, #56]	; (d44 <config_regions+0xa8>)
     d0a:	f002 ffc8 	bl	3c9e <printk>
	PRINT("\n");
     d0e:	480e      	ldr	r0, [pc, #56]	; (d48 <config_regions+0xac>)
}
     d10:	b003      	add	sp, #12
     d12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
     d16:	f002 bfc2 	b.w	3c9e <printk>
		if (ram) {
     d1a:	b128      	cbz	r0, d28 <config_regions+0x8c>
			NRF_SPU->RAMREGION[i].PERM = perm;
     d1c:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
			NRF_SPU->FLASHREGION[i].PERM = perm;
     d20:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
     d24:	3501      	adds	r5, #1
     d26:	e7c3      	b.n	cb0 <config_regions+0x14>
			NRF_SPU->FLASHREGION[i].PERM = perm;
     d28:	f505 77c0 	add.w	r7, r5, #384	; 0x180
     d2c:	e7f8      	b.n	d20 <config_regions+0x84>
     d2e:	bf00      	nop
     d30:	50003000 	.word	0x50003000
     d34:	00004b0c 	.word	0x00004b0c
     d38:	00004b00 	.word	0x00004b00
     d3c:	00004af7 	.word	0x00004af7
     d40:	00004c8b 	.word	0x00004c8b
     d44:	00004b26 	.word	0x00004b26
     d48:	00004e61 	.word	0x00004e61

00000d4c <spm_config_peripheral.constprop.0>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(u8_t id, bool dma_present)
     d4c:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
     d4e:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     d50:	2b00      	cmp	r3, #0
     d52:	db0c      	blt.n	d6e <spm_config_peripheral.constprop.0+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d54:	2201      	movs	r2, #1
     d56:	f000 011f 	and.w	r1, r0, #31
     d5a:	408a      	lsls	r2, r1
     d5c:	095b      	lsrs	r3, r3, #5
     d5e:	4910      	ldr	r1, [pc, #64]	; (da0 <spm_config_peripheral.constprop.0+0x54>)
     d60:	3320      	adds	r3, #32
     d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     d66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d6a:	f3bf 8f6f 	isb	sy
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     d6e:	0083      	lsls	r3, r0, #2
     d70:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
     d74:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     d78:	2831      	cmp	r0, #49	; 0x31
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     d7a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     d7e:	d006      	beq.n	d8e <spm_config_peripheral.constprop.0+0x42>
	return present && (usel || split);
     d80:	2a00      	cmp	r2, #0
     d82:	da07      	bge.n	d94 <spm_config_peripheral.constprop.0+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
     d84:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
     d88:	3a02      	subs	r2, #2
     d8a:	2a01      	cmp	r2, #1
     d8c:	d802      	bhi.n	d94 <spm_config_peripheral.constprop.0+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
     d8e:	4a05      	ldr	r2, [pc, #20]	; (da4 <spm_config_peripheral.constprop.0+0x58>)
     d90:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, 0);
     d94:	2100      	movs	r1, #0
     d96:	f003 f950 	bl	403a <irq_target_state_set>
	return 0;
}
     d9a:	2000      	movs	r0, #0
     d9c:	bd08      	pop	{r3, pc}
     d9e:	bf00      	nop
     da0:	e000e100 	.word	0xe000e100
     da4:	80000100 	.word	0x80000100

00000da8 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
     da8:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	u32_t *vtor_ns = (u32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     daa:	f44f 4440 	mov.w	r4, #49152	; 0xc000
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     dae:	f24c 0504 	movw	r5, #49156	; 0xc004
{
     db2:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
     db4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     db8:	482c      	ldr	r0, [pc, #176]	; (e6c <spm_jump+0xc4>)
     dba:	f002 ff70 	bl	3c9e <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     dbe:	6821      	ldr	r1, [r4, #0]
     dc0:	482b      	ldr	r0, [pc, #172]	; (e70 <spm_jump+0xc8>)
     dc2:	f002 ff6c 	bl	3c9e <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     dc6:	6829      	ldr	r1, [r5, #0]
     dc8:	482a      	ldr	r0, [pc, #168]	; (e74 <spm_jump+0xcc>)
     dca:	f002 ff68 	bl	3c9e <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     dce:	2210      	movs	r2, #16
     dd0:	2100      	movs	r1, #0
     dd2:	4668      	mov	r0, sp
     dd4:	f003 f9ef 	bl	41b6 <memset>
		.vtor_ns = (u32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
     dd8:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
     dda:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     ddc:	9300      	str	r3, [sp, #0]
     dde:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
     de0:	f000 fe44 	bl	1a6c <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
     de4:	2001      	movs	r0, #1
     de6:	f000 fe71 	bl	1acc <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
     dea:	2000      	movs	r0, #0
     dec:	f000 fe5a 	bl	1aa4 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
     df0:	2000      	movs	r0, #0
     df2:	f000 fe7f 	bl	1af4 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
     df6:	2101      	movs	r1, #1
     df8:	2000      	movs	r0, #0
     dfa:	f000 fe99 	bl	1b30 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
     dfe:	f000 fe8d 	bl	1b1c <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     e02:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
     e04:	481c      	ldr	r0, [pc, #112]	; (e78 <spm_jump+0xd0>)
     e06:	f002 ff4a 	bl	3c9e <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
     e0a:	2008      	movs	r0, #8
     e0c:	f7ff ff9e 	bl	d4c <spm_config_peripheral.constprop.0>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     e10:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
     e14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e18:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
     e1c:	0864      	lsrs	r4, r4, #1
     e1e:	0064      	lsls	r4, r4, #1
     e20:	4620      	mov	r0, r4
     e22:	4621      	mov	r1, r4
     e24:	4622      	mov	r2, r4
     e26:	4623      	mov	r3, r4
     e28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     e2c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     e30:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     e34:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     e38:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     e3c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     e40:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     e44:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     e48:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     e4c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     e50:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     e54:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     e58:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     e60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     e64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     e68:	f7ff fb76 	bl	558 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
     e6c:	00004b29 	.word	0x00004b29
     e70:	00004b40 	.word	0x00004b40
     e74:	00004b55 	.word	0x00004b55
     e78:	00004b73 	.word	0x00004b73

00000e7c <spm_config>:
		      (u32_t)reset_ns);
	}
}

void spm_config(void)
{
     e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
     e80:	483b      	ldr	r0, [pc, #236]	; (f70 <spm_config+0xf4>)
     e82:	f002 ff0c 	bl	3c9e <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
     e86:	2100      	movs	r1, #0
     e88:	f240 1317 	movw	r3, #279	; 0x117
     e8c:	4608      	mov	r0, r1
     e8e:	2201      	movs	r2, #1
     e90:	f7ff ff04 	bl	c9c <config_regions>
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
     e94:	f240 1307 	movw	r3, #263	; 0x107
     e98:	2220      	movs	r2, #32
     e9a:	2101      	movs	r1, #1
     e9c:	2000      	movs	r0, #0
     e9e:	f7ff fefd 	bl	c9c <config_regions>
	PRINT("\n");
     ea2:	4834      	ldr	r0, [pc, #208]	; (f74 <spm_config+0xf8>)
     ea4:	f002 fefb 	bl	3c9e <printk>
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     ea8:	4b33      	ldr	r3, [pc, #204]	; (f78 <spm_config+0xfc>)
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
     eaa:	4a34      	ldr	r2, [pc, #208]	; (f7c <spm_config+0x100>)
     eac:	f3c3 31c4 	ubfx	r1, r3, #15, #5
     eb0:	f3c3 030e 	ubfx	r3, r3, #0, #15
     eb4:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
     eb8:	f3c3 1343 	ubfx	r3, r3, #5, #4
    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
     ebc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
     ec0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
     ec4:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
     ec8:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
     ecc:	482c      	ldr	r0, [pc, #176]	; (f80 <spm_config+0x104>)
     ece:	0152      	lsls	r2, r2, #5
     ed0:	f002 fee5 	bl	3c9e <printk>
	PRINT("\n");
     ed4:	4827      	ldr	r0, [pc, #156]	; (f74 <spm_config+0xf8>)
     ed6:	f002 fee2 	bl	3c9e <printk>
	int err = spm_secure_services_init();
     eda:	f003 f85e 	bl	3f9a <spm_secure_services_init>
	if (err != 0) {
     ede:	4601      	mov	r1, r0
     ee0:	b110      	cbz	r0, ee8 <spm_config+0x6c>
		PRINT("Could not initialize secure services (err %d).\n", err);
     ee2:	4828      	ldr	r0, [pc, #160]	; (f84 <spm_config+0x108>)
     ee4:	f002 fedb 	bl	3c9e <printk>
	NRF_SPU->DPPI[0].PERM = mask;
     ee8:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
     eea:	4827      	ldr	r0, [pc, #156]	; (f88 <spm_config+0x10c>)
     eec:	f002 fed7 	bl	3c9e <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
     ef0:	f240 1317 	movw	r3, #279	; 0x117
     ef4:	2208      	movs	r2, #8
     ef6:	2100      	movs	r1, #0
     ef8:	2001      	movs	r0, #1
     efa:	f7ff fecf 	bl	c9c <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
     efe:	4d1f      	ldr	r5, [pc, #124]	; (f7c <spm_config+0x100>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
     f00:	f240 1307 	movw	r3, #263	; 0x107
     f04:	2220      	movs	r2, #32
     f06:	2108      	movs	r1, #8
     f08:	2001      	movs	r0, #1
     f0a:	f7ff fec7 	bl	c9c <config_regions>
	PRINT("\n");
     f0e:	4819      	ldr	r0, [pc, #100]	; (f74 <spm_config+0xf8>)
     f10:	f002 fec5 	bl	3c9e <printk>
	NRF_SPU->DPPI[0].PERM = mask;
     f14:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
     f18:	481c      	ldr	r0, [pc, #112]	; (f8c <spm_config+0x110>)
     f1a:	f002 fec0 	bl	3c9e <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
     f1e:	4f1c      	ldr	r7, [pc, #112]	; (f90 <spm_config+0x114>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
     f20:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
     f24:	f8df 807c 	ldr.w	r8, [pc, #124]	; fa4 <spm_config+0x128>
     f28:	4d1a      	ldr	r5, [pc, #104]	; (f94 <spm_config+0x118>)
     f2a:	f8df 907c 	ldr.w	r9, [pc, #124]	; fa8 <spm_config+0x12c>
     f2e:	796e      	ldrb	r6, [r5, #5]
     f30:	4621      	mov	r1, r4
     f32:	2e00      	cmp	r6, #0
     f34:	bf14      	ite	ne
     f36:	463b      	movne	r3, r7
     f38:	4643      	moveq	r3, r8
     f3a:	4648      	mov	r0, r9
     f3c:	682a      	ldr	r2, [r5, #0]
     f3e:	f002 feae 	bl	3c9e <printk>
		if (!periph[i].nonsecure) {
     f42:	b966      	cbnz	r6, f5e <spm_config+0xe2>
			PRINT("\tSKIP\n");
     f44:	4814      	ldr	r0, [pc, #80]	; (f98 <spm_config+0x11c>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     f46:	3401      	adds	r4, #1
			PRINT("\tOK\n");
     f48:	f002 fea9 	bl	3c9e <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     f4c:	2c1a      	cmp	r4, #26
     f4e:	f105 0508 	add.w	r5, r5, #8
     f52:	d1ec      	bne.n	f2e <spm_config+0xb2>
	PRINT("\n");
     f54:	4807      	ldr	r0, [pc, #28]	; (f74 <spm_config+0xf8>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
     f56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
     f5a:	f002 bea0 	b.w	3c9e <printk>
		err = spm_config_peripheral(periph[i].id, false);
     f5e:	7928      	ldrb	r0, [r5, #4]
     f60:	f7ff fef4 	bl	d4c <spm_config_peripheral.constprop.0>
		if (err) {
     f64:	b108      	cbz	r0, f6a <spm_config+0xee>
			PRINT("\tERROR\n");
     f66:	480d      	ldr	r0, [pc, #52]	; (f9c <spm_config+0x120>)
     f68:	e7ed      	b.n	f46 <spm_config+0xca>
			PRINT("\tOK\n");
     f6a:	480d      	ldr	r0, [pc, #52]	; (fa0 <spm_config+0x124>)
     f6c:	e7eb      	b.n	f46 <spm_config+0xca>
     f6e:	bf00      	nop
     f70:	00004ba9 	.word	0x00004ba9
     f74:	00004e61 	.word	0x00004e61
     f78:	00007fe0 	.word	0x00007fe0
     f7c:	50003000 	.word	0x50003000
     f80:	00004bcd 	.word	0x00004bcd
     f84:	00004c13 	.word	0x00004c13
     f88:	00004c43 	.word	0x00004c43
     f8c:	00004c65 	.word	0x00004c65
     f90:	00004b9e 	.word	0x00004b9e
     f94:	0000487c 	.word	0x0000487c
     f98:	00004c8e 	.word	0x00004c8e
     f9c:	00004c95 	.word	0x00004c95
     fa0:	00004c9d 	.word	0x00004c9d
     fa4:	00004b04 	.word	0x00004b04
     fa8:	00004c81 	.word	0x00004c81

00000fac <__acle_se_spm_request_read>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read(void *destination, u32_t addr, size_t len)
{
     fac:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
     fae:	2800      	cmp	r0, #0
     fb0:	d04b      	beq.n	104a <__acle_se_spm_request_read+0x9e>
     fb2:	2a00      	cmp	r2, #0
     fb4:	d049      	beq.n	104a <__acle_se_spm_request_read+0x9e>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		u32_t start = ranges[i].start;
		u32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
     fb6:	4b26      	ldr	r3, [pc, #152]	; (1050 <__acle_se_spm_request_read+0xa4>)
     fb8:	4299      	cmp	r1, r3
     fba:	d93c      	bls.n	1036 <__acle_se_spm_request_read+0x8a>
     fbc:	1854      	adds	r4, r2, r1
     fbe:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
     fc2:	429c      	cmp	r4, r3
     fc4:	d83a      	bhi.n	103c <__acle_se_spm_request_read+0x90>
			memcpy(destination, (const void *)addr, len);
     fc6:	f003 f8cb 	bl	4160 <memcpy>
			return 0;
     fca:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
     fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     fd0:	4671      	mov	r1, lr
     fd2:	4672      	mov	r2, lr
     fd4:	4673      	mov	r3, lr
     fd6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     fda:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     fde:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     fe2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     fe6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     fea:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     fee:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     ff2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     ff6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     ffa:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     ffe:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    1002:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    1006:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    100a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    100e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1012:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1016:	f38e 8c00 	msr	CPSR_fs, lr
    101a:	b410      	push	{r4}
    101c:	eef1 ca10 	vmrs	ip, fpscr
    1020:	f64f 7460 	movw	r4, #65376	; 0xff60
    1024:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    1028:	ea0c 0c04 	and.w	ip, ip, r4
    102c:	eee1 ca10 	vmsr	fpscr, ip
    1030:	bc10      	pop	{r4}
    1032:	46f4      	mov	ip, lr
    1034:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
    1036:	4b07      	ldr	r3, [pc, #28]	; (1054 <__acle_se_spm_request_read+0xa8>)
    1038:	4299      	cmp	r1, r3
    103a:	d903      	bls.n	1044 <__acle_se_spm_request_read+0x98>
    103c:	4b06      	ldr	r3, [pc, #24]	; (1058 <__acle_se_spm_request_read+0xac>)
    103e:	1854      	adds	r4, r2, r1
    1040:	429c      	cmp	r4, r3
    1042:	d9c0      	bls.n	fc6 <__acle_se_spm_request_read+0x1a>
	return -EPERM;
    1044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1048:	e7c0      	b.n	fcc <__acle_se_spm_request_read+0x20>
		return -EINVAL;
    104a:	f06f 0015 	mvn.w	r0, #21
    104e:	e7bd      	b.n	fcc <__acle_se_spm_request_read+0x20>
    1050:	00ff0203 	.word	0x00ff0203
    1054:	00ff012f 	.word	0x00ff012f
    1058:	00ff0138 	.word	0x00ff0138

0000105c <__acle_se_spm_firmware_info>:


#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info(u32_t fw_address, struct fw_info *info)
{
    105c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1060:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
    1062:	460e      	mov	r6, r1
{
    1064:	b085      	sub	sp, #20
	if (info == NULL) {
    1066:	2900      	cmp	r1, #0
    1068:	d054      	beq.n	1114 <__acle_se_spm_firmware_info+0xb8>
 */
static inline const struct fw_info *fw_info_find(u32_t firmware_address)
{
	const struct fw_info *finfo;

	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    106a:	f04f 0800 	mov.w	r8, #0
    106e:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 1128 <__acle_se_spm_firmware_info+0xcc>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1072:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 112c <__acle_se_spm_firmware_info+0xd0>
    1076:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    1078:	f85b 5b04 	ldr.w	r5, [fp], #4
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    107c:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
    1080:	444d      	add	r5, r9
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1082:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    1086:	220c      	movs	r2, #12
    1088:	4639      	mov	r1, r7
    108a:	4628      	mov	r0, r5
    108c:	f003 f841 	bl	4112 <memcmp>
    1090:	4604      	mov	r4, r0
    1092:	b908      	cbnz	r0, 1098 <__acle_se_spm_firmware_info+0x3c>
		if (finfo) {
    1094:	2d00      	cmp	r5, #0
    1096:	d140      	bne.n	111a <__acle_se_spm_firmware_info+0xbe>
	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1098:	f108 0801 	add.w	r8, r8, #1
    109c:	f1b8 0f05 	cmp.w	r8, #5
    10a0:	d1ea      	bne.n	1078 <__acle_se_spm_firmware_info+0x1c>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
    10a2:	f06f 040d 	mvn.w	r4, #13
}
    10a6:	4620      	mov	r0, r4
    10a8:	b005      	add	sp, #20
    10aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    10ae:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    10b2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    10b6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    10ba:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    10be:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    10c2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    10c6:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    10ca:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    10ce:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    10d2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    10d6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    10da:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    10de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    10e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    10e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10ea:	4671      	mov	r1, lr
    10ec:	4672      	mov	r2, lr
    10ee:	4673      	mov	r3, lr
    10f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    10f4:	f38e 8c00 	msr	CPSR_fs, lr
    10f8:	b410      	push	{r4}
    10fa:	eef1 ca10 	vmrs	ip, fpscr
    10fe:	f64f 7460 	movw	r4, #65376	; 0xff60
    1102:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    1106:	ea0c 0c04 	and.w	ip, ip, r4
    110a:	eee1 ca10 	vmsr	fpscr, ip
    110e:	bc10      	pop	{r4}
    1110:	46f4      	mov	ip, lr
    1112:	4774      	bxns	lr
		return -EINVAL;
    1114:	f06f 0415 	mvn.w	r4, #21
    1118:	e7c5      	b.n	10a6 <__acle_se_spm_firmware_info+0x4a>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    111a:	223c      	movs	r2, #60	; 0x3c
    111c:	4629      	mov	r1, r5
    111e:	4630      	mov	r0, r6
    1120:	f003 f81e 	bl	4160 <memcpy>
		return 0;
    1124:	e7bf      	b.n	10a6 <__acle_se_spm_firmware_info+0x4a>
    1126:	bf00      	nop
    1128:	0000494c 	.word	0x0000494c
    112c:	00004810 	.word	0x00004810

00001130 <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
    1130:	4801      	ldr	r0, [pc, #4]	; (1138 <nrf_cc310_platform_abort_init+0x8>)
    1132:	f002 b8bb 	b.w	32ac <nrf_cc310_platform_set_abort>
    1136:	bf00      	nop
    1138:	00004960 	.word	0x00004960

0000113c <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
    113c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    113e:	b130      	cbz	r0, 114e <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    1140:	6843      	ldr	r3, [r0, #4]
    1142:	b13b      	cbz	r3, 1154 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
    1144:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    1146:	f001 f969 	bl	241c <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
    114a:	2000      	movs	r0, #0
}
    114c:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    114e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1152:	e7fb      	b.n	114c <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1154:	4800      	ldr	r0, [pc, #0]	; (1158 <mutex_unlock+0x1c>)
    1156:	e7f9      	b.n	114c <mutex_unlock+0x10>
    1158:	ffff8fea 	.word	0xffff8fea

0000115c <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
    115c:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
    115e:	4604      	mov	r4, r0
    1160:	b918      	cbnz	r0, 116a <mutex_free+0xe>
        platform_abort_apis.abort_fn(
    1162:	4b0b      	ldr	r3, [pc, #44]	; (1190 <mutex_free+0x34>)
    1164:	480b      	ldr	r0, [pc, #44]	; (1194 <mutex_free+0x38>)
    1166:	685b      	ldr	r3, [r3, #4]
    1168:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    116a:	6865      	ldr	r5, [r4, #4]
    116c:	b155      	cbz	r5, 1184 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
    116e:	f015 0502 	ands.w	r5, r5, #2
    1172:	6820      	ldr	r0, [r4, #0]
    1174:	d107      	bne.n	1186 <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
    1176:	4601      	mov	r1, r0
    1178:	4807      	ldr	r0, [pc, #28]	; (1198 <mutex_free+0x3c>)
    117a:	f001 f8ad 	bl	22d8 <k_mem_slab_free>
        mutex->mutex = NULL;
    117e:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
    1180:	2300      	movs	r3, #0
    1182:	6063      	str	r3, [r4, #4]
}
    1184:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1186:	2214      	movs	r2, #20
    1188:	2100      	movs	r1, #0
    118a:	f003 f814 	bl	41b6 <memset>
    118e:	e7f7      	b.n	1180 <mutex_free+0x24>
    1190:	20000068 	.word	0x20000068
    1194:	00004d9e 	.word	0x00004d9e
    1198:	20000170 	.word	0x20000170

0000119c <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
    119c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    119e:	4604      	mov	r4, r0
    11a0:	b918      	cbnz	r0, 11aa <mutex_init+0xe>
        platform_abort_apis.abort_fn(
    11a2:	4b14      	ldr	r3, [pc, #80]	; (11f4 <mutex_init+0x58>)
    11a4:	4814      	ldr	r0, [pc, #80]	; (11f8 <mutex_init+0x5c>)
    11a6:	685b      	ldr	r3, [r3, #4]
    11a8:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
    11aa:	6863      	ldr	r3, [r4, #4]
    11ac:	b9cb      	cbnz	r3, 11e2 <mutex_init+0x46>
    11ae:	6823      	ldr	r3, [r4, #0]
    11b0:	b9bb      	cbnz	r3, 11e2 <mutex_init+0x46>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    11b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    11b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    11ba:	4621      	mov	r1, r4
    11bc:	480f      	ldr	r0, [pc, #60]	; (11fc <mutex_init+0x60>)
    11be:	f001 f859 	bl	2274 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    11c2:	b908      	cbnz	r0, 11c8 <mutex_init+0x2c>
    11c4:	6823      	ldr	r3, [r4, #0]
    11c6:	b91b      	cbnz	r3, 11d0 <mutex_init+0x34>
            platform_abort_apis.abort_fn(
    11c8:	4b0a      	ldr	r3, [pc, #40]	; (11f4 <mutex_init+0x58>)
    11ca:	480d      	ldr	r0, [pc, #52]	; (1200 <mutex_init+0x64>)
    11cc:	685b      	ldr	r3, [r3, #4]
    11ce:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    11d0:	2214      	movs	r2, #20
    11d2:	2100      	movs	r1, #0
    11d4:	6820      	ldr	r0, [r4, #0]
    11d6:	f002 ffee 	bl	41b6 <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    11da:	6863      	ldr	r3, [r4, #4]
    11dc:	f043 0302 	orr.w	r3, r3, #2
    11e0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    11e2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    11e4:	f003 f8b4 	bl	4350 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
    11e8:	6863      	ldr	r3, [r4, #4]
    11ea:	f043 0301 	orr.w	r3, r3, #1
    11ee:	6063      	str	r3, [r4, #4]
}
    11f0:	bd10      	pop	{r4, pc}
    11f2:	bf00      	nop
    11f4:	20000068 	.word	0x20000068
    11f8:	00004d9e 	.word	0x00004d9e
    11fc:	20000170 	.word	0x20000170
    1200:	00004dc4 	.word	0x00004dc4

00001204 <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
    1204:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    1206:	b168      	cbz	r0, 1224 <mutex_lock+0x20>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    1208:	6843      	ldr	r3, [r0, #4]
    120a:	b173      	cbz	r3, 122a <mutex_lock+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    120c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    120e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1216:	f001 f889 	bl	232c <z_impl_k_mutex_lock>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
    121a:	4b05      	ldr	r3, [pc, #20]	; (1230 <mutex_lock+0x2c>)
    if (ret == 0) {
    121c:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
    121e:	bf18      	it	ne
    1220:	4618      	movne	r0, r3
}
    1222:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    1224:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1228:	e7fb      	b.n	1222 <mutex_lock+0x1e>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    122a:	4802      	ldr	r0, [pc, #8]	; (1234 <mutex_lock+0x30>)
    122c:	e7f9      	b.n	1222 <mutex_lock+0x1e>
    122e:	bf00      	nop
    1230:	ffff8fe9 	.word	0xffff8fe9
    1234:	ffff8fea 	.word	0xffff8fea

00001238 <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
    1238:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    123a:	4906      	ldr	r1, [pc, #24]	; (1254 <nrf_cc310_platform_mutex_init+0x1c>)
    123c:	2340      	movs	r3, #64	; 0x40
    123e:	2214      	movs	r2, #20
    1240:	4805      	ldr	r0, [pc, #20]	; (1258 <nrf_cc310_platform_mutex_init+0x20>)
    1242:	f003 f86a 	bl	431a <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
    124a:	4904      	ldr	r1, [pc, #16]	; (125c <nrf_cc310_platform_mutex_init+0x24>)
    124c:	4804      	ldr	r0, [pc, #16]	; (1260 <nrf_cc310_platform_mutex_init+0x28>)
    124e:	f002 b865 	b.w	331c <nrf_cc310_platform_set_mutexes>
    1252:	bf00      	nop
    1254:	2000018c 	.word	0x2000018c
    1258:	20000170 	.word	0x20000170
    125c:	00004978 	.word	0x00004978
    1260:	00004968 	.word	0x00004968

00001264 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1264:	4a09      	ldr	r2, [pc, #36]	; (128c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1266:	490a      	ldr	r1, [pc, #40]	; (1290 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1268:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    126a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    126c:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
    126e:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1270:	4908      	ldr	r1, [pc, #32]	; (1294 <arch_swap+0x30>)
    1272:	684b      	ldr	r3, [r1, #4]
    1274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1278:	604b      	str	r3, [r1, #4]
    127a:	2300      	movs	r3, #0
    127c:	f383 8811 	msr	BASEPRI, r3
    1280:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1284:	6893      	ldr	r3, [r2, #8]
}
    1286:	6f18      	ldr	r0, [r3, #112]	; 0x70
    1288:	4770      	bx	lr
    128a:	bf00      	nop
    128c:	20000788 	.word	0x20000788
    1290:	000049ec 	.word	0x000049ec
    1294:	e000ed00 	.word	0xe000ed00

00001298 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1298:	490f      	ldr	r1, [pc, #60]	; (12d8 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    129a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    129c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    12a0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    12a2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    12a6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    12aa:	2020      	movs	r0, #32
    msr BASEPRI, r0
    12ac:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    12b0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    12b4:	4f09      	ldr	r7, [pc, #36]	; (12dc <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    12b6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    12ba:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    12bc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    12be:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    12c0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
    12c2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    12c4:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    12c6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    12ca:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    12ce:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    12d2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    12d6:	4770      	bx	lr
    ldr r1, =_kernel
    12d8:	20000788 	.word	0x20000788
    ldr v4, =_SCS_ICSR
    12dc:	e000ed04 	.word	0xe000ed04

000012e0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    12e0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    12e4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    12e6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    12ea:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    12ee:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    12f0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    12f4:	2902      	cmp	r1, #2
    beq _oops
    12f6:	d0ff      	beq.n	12f8 <_oops>

000012f8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    12f8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    12fa:	f002 fec9 	bl	4090 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    12fe:	bd01      	pop	{r0, pc}

00001300 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1300:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1302:	2b00      	cmp	r3, #0
    1304:	db08      	blt.n	1318 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1306:	2201      	movs	r2, #1
    1308:	f000 001f 	and.w	r0, r0, #31
    130c:	fa02 f000 	lsl.w	r0, r2, r0
    1310:	4a02      	ldr	r2, [pc, #8]	; (131c <arch_irq_enable+0x1c>)
    1312:	095b      	lsrs	r3, r3, #5
    1314:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1318:	4770      	bx	lr
    131a:	bf00      	nop
    131c:	e000e100 	.word	0xe000e100

00001320 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1320:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1322:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    1324:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1328:	bfac      	ite	ge
    132a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    132e:	4b06      	ldrlt	r3, [pc, #24]	; (1348 <z_arm_irq_priority_set+0x28>)
    1330:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1334:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1336:	bfab      	itete	ge
    1338:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    133c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1340:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1344:	5419      	strblt	r1, [r3, r0]
}
    1346:	4770      	bx	lr
    1348:	e000ed14 	.word	0xe000ed14

0000134c <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    134c:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    1350:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    1352:	3a20      	subs	r2, #32
    1354:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
    1358:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    135a:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
    135c:	4907      	ldr	r1, [pc, #28]	; (137c <arch_new_thread+0x30>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
    135e:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    1360:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
    1362:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
    1366:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    1368:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
    136a:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    136c:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    136e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1372:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    1374:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
    1376:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1378:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    137a:	4770      	bx	lr
    137c:	00003cb9 	.word	0x00003cb9

00001380 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    1380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1382:	461d      	mov	r5, r3
    1384:	4606      	mov	r6, r0
    1386:	460c      	mov	r4, r1
    1388:	4617      	mov	r7, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    138a:	2300      	movs	r3, #0
    138c:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    1390:	f000 f9f4 	bl	177c <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    1394:	4b08      	ldr	r3, [pc, #32]	; (13b8 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
    1396:	19e2      	adds	r2, r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    1398:	f022 0407 	bic.w	r4, r2, #7
	_current = main_thread;
    139c:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    139e:	4628      	mov	r0, r5
    13a0:	f384 8809 	msr	PSP, r4
    13a4:	2100      	movs	r1, #0
    13a6:	b663      	cpsie	if
    13a8:	f381 8811 	msr	BASEPRI, r1
    13ac:	f3bf 8f6f 	isb	sy
    13b0:	2200      	movs	r2, #0
    13b2:	2300      	movs	r3, #0
    13b4:	f002 fc80 	bl	3cb8 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    13b8:	20000788 	.word	0x20000788

000013bc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    13bc:	4901      	ldr	r1, [pc, #4]	; (13c4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    13be:	2210      	movs	r2, #16
	str	r2, [r1]
    13c0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    13c2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    13c4:	e000ed10 	.word	0xe000ed10

000013c8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    13c8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    13ca:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    13cc:	f380 8811 	msr	BASEPRI, r0
	isb
    13d0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    13d4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    13d8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    13da:	b662      	cpsie	i
	isb
    13dc:	f3bf 8f6f 	isb	sy

	bx	lr
    13e0:	4770      	bx	lr
    13e2:	bf00      	nop

000013e4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    13e4:	bf30      	wfi
    b z_SysNmiOnReset
    13e6:	f7ff bffd 	b.w	13e4 <z_SysNmiOnReset>
    13ea:	bf00      	nop

000013ec <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    13ec:	4a17      	ldr	r2, [pc, #92]	; (144c <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    13ee:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    13f0:	4b17      	ldr	r3, [pc, #92]	; (1450 <z_arm_prep_c+0x64>)
    13f2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    13f6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    13f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    13fc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1400:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1404:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    140c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1410:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    1414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    1418:	4a0e      	ldr	r2, [pc, #56]	; (1454 <z_arm_prep_c+0x68>)
    141a:	6853      	ldr	r3, [r2, #4]
    141c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    1420:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1422:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1426:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    142a:	2300      	movs	r3, #0
    142c:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1430:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1434:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1438:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    143c:	f000 fe2a 	bl	2094 <z_bss_zero>
	z_data_copy();
    1440:	f000 fe32 	bl	20a8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1444:	f000 f968 	bl	1718 <z_arm_interrupt_init>
	z_cstart();
    1448:	f000 fe6c 	bl	2124 <z_cstart>
    144c:	00000000 	.word	0x00000000
    1450:	e000ed00 	.word	0xe000ed00
    1454:	e000ef30 	.word	0xe000ef30

00001458 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1458:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    145a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    145c:	4a0b      	ldr	r2, [pc, #44]	; (148c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    145e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    1460:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1462:	bf1e      	ittt	ne
	movne	r1, #0
    1464:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1466:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1468:	f002 ff55 	blne	4316 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    146c:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    146e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1472:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1476:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    147a:	4905      	ldr	r1, [pc, #20]	; (1490 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    147c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    147e:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    1480:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1482:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1486:	4903      	ldr	r1, [pc, #12]	; (1494 <_isr_wrapper+0x3c>)
	bx r1
    1488:	4708      	bx	r1
    148a:	0000      	.short	0x0000
	ldr r2, =_kernel
    148c:	20000788 	.word	0x20000788
	ldr r1, =_sw_isr_table
    1490:	000045fc 	.word	0x000045fc
	ldr r1, =z_arm_int_exit
    1494:	000016d9 	.word	0x000016d9

00001498 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1498:	f002 fcc3 	bl	3e22 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    149c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    149e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    14a2:	4808      	ldr	r0, [pc, #32]	; (14c4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    14a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    14a8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    14aa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    14ae:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    14b2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    14b4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    14b6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    14ba:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    14be:	f7ff ff95 	bl	13ec <z_arm_prep_c>
    14c2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    14c4:	20000d28 	.word	0x20000d28

000014c8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    14c8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    14cc:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    14d0:	4672      	mov	r2, lr

	push {r0, lr}
    14d2:	b501      	push	{r0, lr}

	bl z_arm_fault
    14d4:	f000 f86c 	bl	15b0 <z_arm_fault>

	pop {r0, pc}
    14d8:	bd01      	pop	{r0, pc}
    14da:	bf00      	nop

000014dc <mem_manage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    14dc:	4b0c      	ldr	r3, [pc, #48]	; (1510 <mem_manage_fault.isra.0+0x34>)
    14de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    14e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    14e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14e4:	0792      	lsls	r2, r2, #30
    14e6:	d508      	bpl.n	14fa <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    14e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    14ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14ec:	0612      	lsls	r2, r2, #24
    14ee:	d504      	bpl.n	14fa <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    14f0:	b118      	cbz	r0, 14fa <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    14f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    14f8:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    14fa:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    14fc:	4b04      	ldr	r3, [pc, #16]	; (1510 <mem_manage_fault.isra.0+0x34>)
    14fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    1502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1506:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    150a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    150c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    150e:	4770      	bx	lr
    1510:	e000ed00 	.word	0xe000ed00

00001514 <bus_fault.isra.0>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1514:	4b0d      	ldr	r3, [pc, #52]	; (154c <bus_fault.isra.0+0x38>)
    1516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    151a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    151c:	0592      	lsls	r2, r2, #22
    151e:	d508      	bpl.n	1532 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1520:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1522:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1524:	0412      	lsls	r2, r2, #16
    1526:	d504      	bpl.n	1532 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    1528:	b118      	cbz	r0, 1532 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    152a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    152c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1530:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    1532:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1534:	4b05      	ldr	r3, [pc, #20]	; (154c <bus_fault.isra.0+0x38>)
    1536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    153a:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    153c:	bf58      	it	pl
    153e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1542:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1546:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1548:	7008      	strb	r0, [r1, #0]

	return reason;
}
    154a:	4770      	bx	lr
    154c:	e000ed00 	.word	0xe000ed00

00001550 <usage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1550:	4b07      	ldr	r3, [pc, #28]	; (1570 <usage_fault.isra.0+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
    1552:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    155a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    155c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    155e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1562:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1564:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1568:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    156c:	629a      	str	r2, [r3, #40]	; 0x28
}
    156e:	4770      	bx	lr
    1570:	e000ed00 	.word	0xe000ed00

00001574 <secure_fault.isra.0>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    1574:	4b0d      	ldr	r3, [pc, #52]	; (15ac <secure_fault.isra.0+0x38>)
    1576:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    1578:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    157a:	695a      	ldr	r2, [r3, #20]
    157c:	07d0      	lsls	r0, r2, #31
    157e:	d40f      	bmi.n	15a0 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    1580:	695a      	ldr	r2, [r3, #20]
    1582:	0791      	lsls	r1, r2, #30
    1584:	d40c      	bmi.n	15a0 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    1586:	695a      	ldr	r2, [r3, #20]
    1588:	0752      	lsls	r2, r2, #29
    158a:	d409      	bmi.n	15a0 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    158c:	695a      	ldr	r2, [r3, #20]
    158e:	0710      	lsls	r0, r2, #28
    1590:	d406      	bmi.n	15a0 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    1592:	695a      	ldr	r2, [r3, #20]
    1594:	06d1      	lsls	r1, r2, #27
    1596:	d403      	bmi.n	15a0 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    1598:	695a      	ldr	r2, [r3, #20]
    159a:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    159c:	bf58      	it	pl
    159e:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    15a0:	695a      	ldr	r2, [r3, #20]
    15a2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    15a6:	615a      	str	r2, [r3, #20]
}
    15a8:	4770      	bx	lr
    15aa:	bf00      	nop
    15ac:	e000edd0 	.word	0xe000edd0

000015b0 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    15b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    15b2:	4b41      	ldr	r3, [pc, #260]	; (16b8 <z_arm_fault+0x108>)
    15b4:	2500      	movs	r5, #0
    15b6:	685b      	ldr	r3, [r3, #4]
{
    15b8:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    15ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
    15be:	f385 8811 	msr	BASEPRI, r5
    15c2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    15c6:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    15ca:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    15ce:	d11e      	bne.n	160e <z_arm_fault+0x5e>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    15d0:	f012 0401 	ands.w	r4, r2, #1
    15d4:	d01a      	beq.n	160c <z_arm_fault+0x5c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    15d6:	0656      	lsls	r6, r2, #25
    15d8:	f002 0408 	and.w	r4, r2, #8
    15dc:	d467      	bmi.n	16ae <z_arm_fault+0xfe>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    15de:	f082 0204 	eor.w	r2, r2, #4
    15e2:	f3c2 0580 	ubfx	r5, r2, #2, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    15e6:	b164      	cbz	r4, 1602 <z_arm_fault+0x52>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    15e8:	f3ef 8689 	mrs	r6, PSP_NS
	*recoverable = false;
    15ec:	2200      	movs	r2, #0
    15ee:	3b03      	subs	r3, #3
    15f0:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    15f4:	2b04      	cmp	r3, #4
    15f6:	d84b      	bhi.n	1690 <z_arm_fault+0xe0>
    15f8:	e8df f003 	tbb	[pc, r3]
    15fc:	41504c0b 	.word	0x41504c0b
    1600:	48          	.byte	0x48
    1601:	00          	.byte	0x00
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    1602:	f3ef 8688 	mrs	r6, MSP_NS
  return(result);
    1606:	e7f1      	b.n	15ec <z_arm_fault+0x3c>
			ptr_esf =  (z_arch_esf_t *)psp;
    1608:	460e      	mov	r6, r1
    160a:	e7ef      	b.n	15ec <z_arm_fault+0x3c>
	*nested_exc = false;
    160c:	4625      	mov	r5, r4
		return NULL;
    160e:	462e      	mov	r6, r5
    1610:	e7ec      	b.n	15ec <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1612:	4b29      	ldr	r3, [pc, #164]	; (16b8 <z_arm_fault+0x108>)
    1614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1616:	0792      	lsls	r2, r2, #30
    1618:	d43a      	bmi.n	1690 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    161a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    161c:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    1620:	d008      	beq.n	1634 <z_arm_fault+0x84>
		if (SCB_MMFSR != 0) {
    1622:	3328      	adds	r3, #40	; 0x28
    1624:	781b      	ldrb	r3, [r3, #0]
    1626:	b1eb      	cbz	r3, 1664 <z_arm_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
    1628:	2001      	movs	r0, #1
    162a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    162e:	f7ff ff55 	bl	14dc <mem_manage_fault.isra.0>
    1632:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1634:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1638:	b993      	cbnz	r3, 1660 <z_arm_fault+0xb0>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    163a:	2220      	movs	r2, #32
    163c:	4631      	mov	r1, r6
    163e:	a802      	add	r0, sp, #8
    1640:	f002 fd8e 	bl	4160 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1644:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1646:	b36d      	cbz	r5, 16a4 <z_arm_fault+0xf4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1648:	f3c3 0208 	ubfx	r2, r3, #0, #9
    164c:	b922      	cbnz	r2, 1658 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    164e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1652:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1656:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1658:	4620      	mov	r0, r4
    165a:	a902      	add	r1, sp, #8
    165c:	f002 fd16 	bl	408c <z_arm_fatal_error>
}
    1660:	b00b      	add	sp, #44	; 0x2c
    1662:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
    1664:	4b15      	ldr	r3, [pc, #84]	; (16bc <z_arm_fault+0x10c>)
    1666:	781b      	ldrb	r3, [r3, #0]
    1668:	b12b      	cbz	r3, 1676 <z_arm_fault+0xc6>
			reason = bus_fault(esf, 1, recoverable);
    166a:	2001      	movs	r0, #1
    166c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    1670:	f7ff ff50 	bl	1514 <bus_fault.isra.0>
    1674:	e7dd      	b.n	1632 <z_arm_fault+0x82>
		} else if (SCB_UFSR != 0) {
    1676:	4b12      	ldr	r3, [pc, #72]	; (16c0 <z_arm_fault+0x110>)
    1678:	881f      	ldrh	r7, [r3, #0]
    167a:	b2bf      	uxth	r7, r7
    167c:	b117      	cbz	r7, 1684 <z_arm_fault+0xd4>
		reason = usage_fault(esf);
    167e:	f7ff ff67 	bl	1550 <usage_fault.isra.0>
    1682:	e7d6      	b.n	1632 <z_arm_fault+0x82>
		} else if (SAU->SFSR != 0) {
    1684:	4b0f      	ldr	r3, [pc, #60]	; (16c4 <z_arm_fault+0x114>)
    1686:	695c      	ldr	r4, [r3, #20]
    1688:	2c00      	cmp	r4, #0
    168a:	d0d3      	beq.n	1634 <z_arm_fault+0x84>
		secure_fault(esf);
    168c:	f7ff ff72 	bl	1574 <secure_fault.isra.0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    1690:	2400      	movs	r4, #0
    1692:	e7cf      	b.n	1634 <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
    1694:	2000      	movs	r0, #0
    1696:	f10d 0107 	add.w	r1, sp, #7
    169a:	e7c8      	b.n	162e <z_arm_fault+0x7e>
		reason = bus_fault(esf, 0, recoverable);
    169c:	2000      	movs	r0, #0
    169e:	f10d 0107 	add.w	r1, sp, #7
    16a2:	e7e5      	b.n	1670 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    16a4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    16a8:	f023 0301 	bic.w	r3, r3, #1
    16ac:	e7d3      	b.n	1656 <z_arm_fault+0xa6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    16ae:	2c00      	cmp	r4, #0
    16b0:	d1aa      	bne.n	1608 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)msp;
    16b2:	4606      	mov	r6, r0
			*nested_exc = true;
    16b4:	2501      	movs	r5, #1
    16b6:	e799      	b.n	15ec <z_arm_fault+0x3c>
    16b8:	e000ed00 	.word	0xe000ed00
    16bc:	e000ed29 	.word	0xe000ed29
    16c0:	e000ed2a 	.word	0xe000ed2a
    16c4:	e000edd0 	.word	0xe000edd0

000016c8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    16c8:	4a02      	ldr	r2, [pc, #8]	; (16d4 <z_arm_fault_init+0xc>)
    16ca:	6953      	ldr	r3, [r2, #20]
    16cc:	f043 0310 	orr.w	r3, r3, #16
    16d0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    16d2:	4770      	bx	lr
    16d4:	e000ed00 	.word	0xe000ed00

000016d8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    16d8:	4b04      	ldr	r3, [pc, #16]	; (16ec <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    16da:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    16dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    16de:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    16e0:	d003      	beq.n	16ea <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    16e2:	4903      	ldr	r1, [pc, #12]	; (16f0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    16e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    16e8:	600a      	str	r2, [r1, #0]

000016ea <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    16ea:	4770      	bx	lr
	ldr r3, =_kernel
    16ec:	20000788 	.word	0x20000788
	ldr r1, =_SCS_ICSR
    16f0:	e000ed04 	.word	0xe000ed04

000016f4 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    16f4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    16f8:	4905      	ldr	r1, [pc, #20]	; (1710 <sys_arch_reboot+0x1c>)
    16fa:	4b06      	ldr	r3, [pc, #24]	; (1714 <sys_arch_reboot+0x20>)
    16fc:	68ca      	ldr	r2, [r1, #12]
    16fe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1702:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1704:	60cb      	str	r3, [r1, #12]
    1706:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    170a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    170c:	e7fd      	b.n	170a <sys_arch_reboot+0x16>
    170e:	bf00      	nop
    1710:	e000ed00 	.word	0xe000ed00
    1714:	05fa0004 	.word	0x05fa0004

00001718 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1718:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    171a:	2120      	movs	r1, #32
    171c:	4803      	ldr	r0, [pc, #12]	; (172c <z_arm_interrupt_init+0x14>)
    171e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1720:	3301      	adds	r3, #1
    1722:	2b41      	cmp	r3, #65	; 0x41
    1724:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1728:	d1f9      	bne.n	171e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    172a:	4770      	bx	lr
    172c:	e000e100 	.word	0xe000e100

00001730 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    1730:	b538      	push	{r3, r4, r5, lr}
    1732:	4604      	mov	r4, r0
	__asm__ volatile(
    1734:	f04f 0320 	mov.w	r3, #32
    1738:	f3ef 8511 	mrs	r5, BASEPRI
    173c:	f383 8811 	msr	BASEPRI, r3
    1740:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    1744:	f001 f856 	bl	27f4 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    1748:	4b0a      	ldr	r3, [pc, #40]	; (1774 <z_impl_k_thread_abort+0x44>)
    174a:	689b      	ldr	r3, [r3, #8]
    174c:	42a3      	cmp	r3, r4
    174e:	d10b      	bne.n	1768 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1750:	4b09      	ldr	r3, [pc, #36]	; (1778 <z_impl_k_thread_abort+0x48>)
    1752:	685a      	ldr	r2, [r3, #4]
    1754:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1758:	b912      	cbnz	r2, 1760 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    175a:	4628      	mov	r0, r5
    175c:	f7ff fd82 	bl	1264 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1760:	685a      	ldr	r2, [r3, #4]
    1762:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1766:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    1768:	4628      	mov	r0, r5
}
    176a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    176e:	f002 be01 	b.w	4374 <z_reschedule_irqlock>
    1772:	bf00      	nop
    1774:	20000788 	.word	0x20000788
    1778:	e000ed00 	.word	0xe000ed00

0000177c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    177c:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    177e:	4b0e      	ldr	r3, [pc, #56]	; (17b8 <z_arm_configure_static_mpu_regions+0x3c>)
{
    1780:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    1782:	9302      	str	r3, [sp, #8]
    1784:	4b0d      	ldr	r3, [pc, #52]	; (17bc <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1786:	4c0e      	ldr	r4, [pc, #56]	; (17c0 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    1788:	9303      	str	r3, [sp, #12]
    178a:	4b0e      	ldr	r3, [pc, #56]	; (17c4 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    178c:	4a0e      	ldr	r2, [pc, #56]	; (17c8 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    178e:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    1790:	ab02      	add	r3, sp, #8
    1792:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1794:	a801      	add	r0, sp, #4
    1796:	4623      	mov	r3, r4
    1798:	2101      	movs	r1, #1
    179a:	f000 f907 	bl	19ac <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    179e:	2300      	movs	r3, #0
    17a0:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    17a2:	4b0a      	ldr	r3, [pc, #40]	; (17cc <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    17a4:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    17a6:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    17a8:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    17aa:	9305      	str	r3, [sp, #20]
    17ac:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    17ae:	f000 f907 	bl	19c0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    17b2:	b008      	add	sp, #32
    17b4:	bd10      	pop	{r4, pc}
    17b6:	bf00      	nop
    17b8:	20000000 	.word	0x20000000
    17bc:	00000000 	.word	0x00000000
    17c0:	20010000 	.word	0x20010000
    17c4:	00010006 	.word	0x00010006
    17c8:	20000000 	.word	0x20000000
    17cc:	20000148 	.word	0x20000148

000017d0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    17d0:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    17d2:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    17d4:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    17d6:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    17da:	f004 031f 	and.w	r3, r4, #31
    17de:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    17e0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    17e2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    17e4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    17e8:	4904      	ldr	r1, [pc, #16]	; (17fc <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    17ea:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    17ee:	f043 0301 	orr.w	r3, r3, #1
    17f2:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    17f4:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    17f6:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    17f8:	bd10      	pop	{r4, pc}
    17fa:	bf00      	nop
    17fc:	e000ed90 	.word	0xe000ed90

00001800 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    1800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1804:	4607      	mov	r7, r0
    1806:	4688      	mov	r8, r1
    1808:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    180a:	2600      	movs	r6, #0
	MPU->RNR = index;
    180c:	4d4a      	ldr	r5, [pc, #296]	; (1938 <mpu_configure_regions_and_partition.constprop.0+0x138>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    180e:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    1810:	4546      	cmp	r6, r8
    1812:	da0b      	bge.n	182c <mpu_configure_regions_and_partition.constprop.0+0x2c>
		if (regions[i]->size == 0U) {
    1814:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    1818:	f8d3 9004 	ldr.w	r9, [r3, #4]
    181c:	f1b9 0f00 	cmp.w	r9, #0
    1820:	d03a      	beq.n	1898 <mpu_configure_regions_and_partition.constprop.0+0x98>
		&&
    1822:	f1b9 0f1f 	cmp.w	r9, #31
    1826:	d805      	bhi.n	1834 <mpu_configure_regions_and_partition.constprop.0+0x34>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    1828:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    182c:	4620      	mov	r0, r4
    182e:	b005      	add	sp, #20
    1830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    1834:	f019 0f1f 	tst.w	r9, #31
    1838:	d1f6      	bne.n	1828 <mpu_configure_regions_and_partition.constprop.0+0x28>
		((part->start &
    183a:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    183e:	f01a 0f1f 	tst.w	sl, #31
    1842:	d1f1      	bne.n	1828 <mpu_configure_regions_and_partition.constprop.0+0x28>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1844:	4650      	mov	r0, sl
    1846:	f002 fc4e 	bl	40e6 <arm_cmse_mpu_region_get>
    184a:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    184c:	eb09 000a 	add.w	r0, r9, sl
    1850:	3801      	subs	r0, #1
    1852:	f002 fc48 	bl	40e6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1856:	4583      	cmp	fp, r0
    1858:	d1e6      	bne.n	1828 <mpu_configure_regions_and_partition.constprop.0+0x28>
		if ((u_reg_index == -EINVAL) ||
    185a:	f11b 0f16 	cmn.w	fp, #22
    185e:	d0e3      	beq.n	1828 <mpu_configure_regions_and_partition.constprop.0+0x28>
			(u_reg_index > (reg_index - 1))) {
    1860:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    1862:	455b      	cmp	r3, fp
    1864:	dbe0      	blt.n	1828 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
    1866:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    186a:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    186c:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1870:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    1872:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1876:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    187a:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    187e:	e9d1 3200 	ldrd	r3, r2, [r1]
    1882:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    1884:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    1886:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    188a:	d118      	bne.n	18be <mpu_configure_regions_and_partition.constprop.0+0xbe>
    188c:	45ca      	cmp	sl, r9
    188e:	d105      	bne.n	189c <mpu_configure_regions_and_partition.constprop.0+0x9c>
			mpu_configure_region(u_reg_index, regions[i]);
    1890:	fa5f f08b 	uxtb.w	r0, fp
    1894:	f002 fc07 	bl	40a6 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    1898:	3601      	adds	r6, #1
    189a:	e7b9      	b.n	1810 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
    189c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    18a0:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    18a2:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    18a6:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    18aa:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    18ac:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    18ae:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    18b0:	f002 fbf9 	bl	40a6 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    18b4:	f110 0f16 	cmn.w	r0, #22
    18b8:	d0b6      	beq.n	1828 <mpu_configure_regions_and_partition.constprop.0+0x28>
			reg_index++;
    18ba:	1c44      	adds	r4, r0, #1
    18bc:	e7ec      	b.n	1898 <mpu_configure_regions_and_partition.constprop.0+0x98>
	MPU->RNR = index;
    18be:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    18c2:	692a      	ldr	r2, [r5, #16]
    18c4:	3b01      	subs	r3, #1
    18c6:	f023 031f 	bic.w	r3, r3, #31
    18ca:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    18ce:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    18d0:	45ca      	cmp	sl, r9
    18d2:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    18d4:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    18d6:	d0eb      	beq.n	18b0 <mpu_configure_regions_and_partition.constprop.0+0xb0>
				mpu_configure_region(reg_index, regions[i]);
    18d8:	f002 fbe5 	bl	40a6 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    18dc:	f110 0f16 	cmn.w	r0, #22
    18e0:	d0a2      	beq.n	1828 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
    18e2:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    18e6:	68ea      	ldr	r2, [r5, #12]
    18e8:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    18ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
    18f0:	f362 0304 	bfi	r3, r2, #0, #5
    18f4:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    18f8:	692b      	ldr	r3, [r5, #16]
    18fa:	f89d 2008 	ldrb.w	r2, [sp, #8]
    18fe:	085b      	lsrs	r3, r3, #1
    1900:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    1904:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1908:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    190c:	e9d3 1300 	ldrd	r1, r3, [r3]
    1910:	440b      	add	r3, r1
    1912:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    1914:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    1918:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    191a:	4453      	add	r3, sl
    191c:	eba3 0309 	sub.w	r3, r3, r9
    1920:	b2c0      	uxtb	r0, r0
    1922:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    1926:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    1928:	9303      	str	r3, [sp, #12]
    192a:	f63f af7d 	bhi.w	1828 <mpu_configure_regions_and_partition.constprop.0+0x28>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    192e:	4669      	mov	r1, sp
    1930:	f7ff ff4e 	bl	17d0 <region_init>
    1934:	e7c1      	b.n	18ba <mpu_configure_regions_and_partition.constprop.0+0xba>
    1936:	bf00      	nop
    1938:	e000ed90 	.word	0xe000ed90

0000193c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    193c:	2205      	movs	r2, #5
    193e:	4b03      	ldr	r3, [pc, #12]	; (194c <arm_core_mpu_enable+0x10>)
    1940:	605a      	str	r2, [r3, #4]
    1942:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1946:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    194a:	4770      	bx	lr
    194c:	e000ed90 	.word	0xe000ed90

00001950 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1950:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1954:	2200      	movs	r2, #0
    1956:	4b01      	ldr	r3, [pc, #4]	; (195c <arm_core_mpu_disable+0xc>)
    1958:	605a      	str	r2, [r3, #4]
}
    195a:	4770      	bx	lr
    195c:	e000ed90 	.word	0xe000ed90

00001960 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    1960:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1962:	4c0e      	ldr	r4, [pc, #56]	; (199c <arm_mpu_init+0x3c>)
    1964:	6825      	ldr	r5, [r4, #0]
    1966:	2d10      	cmp	r5, #16
    1968:	d814      	bhi.n	1994 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    196a:	f7ff fff1 	bl	1950 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    196e:	2000      	movs	r0, #0
	MPU->MAIR0 =
    1970:	4b0b      	ldr	r3, [pc, #44]	; (19a0 <arm_mpu_init+0x40>)
    1972:	4a0c      	ldr	r2, [pc, #48]	; (19a4 <arm_mpu_init+0x44>)
    1974:	631a      	str	r2, [r3, #48]	; 0x30
    1976:	4285      	cmp	r5, r0
    1978:	d105      	bne.n	1986 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    197a:	4b0b      	ldr	r3, [pc, #44]	; (19a8 <arm_mpu_init+0x48>)
    197c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    197e:	f7ff ffdd 	bl	193c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1982:	2000      	movs	r0, #0
}
    1984:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1986:	6861      	ldr	r1, [r4, #4]
    1988:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    198c:	f7ff ff20 	bl	17d0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1990:	3001      	adds	r0, #1
    1992:	e7f0      	b.n	1976 <arm_mpu_init+0x16>
		return -1;
    1994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1998:	e7f4      	b.n	1984 <arm_mpu_init+0x24>
    199a:	bf00      	nop
    199c:	0000498c 	.word	0x0000498c
    19a0:	e000ed90 	.word	0xe000ed90
    19a4:	0044ffaa 	.word	0x0044ffaa
    19a8:	200007e4 	.word	0x200007e4

000019ac <arm_core_mpu_configure_static_mpu_regions>:
{
    19ac:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    19ae:	4c03      	ldr	r4, [pc, #12]	; (19bc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    19b0:	7822      	ldrb	r2, [r4, #0]
    19b2:	f7ff ff25 	bl	1800 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    19b6:	7020      	strb	r0, [r4, #0]
}
    19b8:	bd10      	pop	{r4, pc}
    19ba:	bf00      	nop
    19bc:	200007e4 	.word	0x200007e4

000019c0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    19c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19c4:	4d26      	ldr	r5, [pc, #152]	; (1a60 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
    19c6:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    19c8:	4606      	mov	r6, r0
    19ca:	f04f 0800 	mov.w	r8, #0
    19ce:	46ab      	mov	fp, r5
	MPU->RNR = index;
    19d0:	4f24      	ldr	r7, [pc, #144]	; (1a64 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    19d2:	45d0      	cmp	r8, sl
    19d4:	da1b      	bge.n	1a0e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    19d6:	f8d6 9004 	ldr.w	r9, [r6, #4]
    19da:	f1b9 0f00 	cmp.w	r9, #0
    19de:	d039      	beq.n	1a54 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    19e0:	6831      	ldr	r1, [r6, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    19e2:	4608      	mov	r0, r1
    19e4:	9101      	str	r1, [sp, #4]
    19e6:	f002 fb7e 	bl	40e6 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    19ea:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    19ec:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    19ee:	eb09 0001 	add.w	r0, r9, r1
    19f2:	3801      	subs	r0, #1
    19f4:	f002 fb77 	bl	40e6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    19f8:	4284      	cmp	r4, r0
    19fa:	f04f 0214 	mov.w	r2, #20
    19fe:	4b1a      	ldr	r3, [pc, #104]	; (1a68 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
    1a00:	d008      	beq.n	1a14 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    1a02:	f06f 0315 	mvn.w	r3, #21
    1a06:	fb02 f808 	mul.w	r8, r2, r8
    1a0a:	f84b 3008 	str.w	r3, [fp, r8]
}
    1a0e:	b003      	add	sp, #12
    1a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1a14:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    1a18:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    1a1a:	d0f8      	beq.n	1a0e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1a1c:	7819      	ldrb	r1, [r3, #0]
    1a1e:	42a1      	cmp	r1, r4
    1a20:	ddf5      	ble.n	1a0e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    1a22:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    1a26:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    1a28:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    1a2a:	68fc      	ldr	r4, [r7, #12]
    1a2c:	f100 0108 	add.w	r1, r0, #8
    1a30:	7b00      	ldrb	r0, [r0, #12]
    1a32:	f364 0004 	bfi	r0, r4, #0, #5
    1a36:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1a38:	6938      	ldr	r0, [r7, #16]
    1a3a:	790c      	ldrb	r4, [r1, #4]
    1a3c:	0840      	lsrs	r0, r0, #1
    1a3e:	f360 1447 	bfi	r4, r0, #5, #3
    1a42:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    1a44:	68f9      	ldr	r1, [r7, #12]
    1a46:	f021 011f 	bic.w	r1, r1, #31
    1a4a:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    1a4c:	6939      	ldr	r1, [r7, #16]
    1a4e:	f021 011f 	bic.w	r1, r1, #31
    1a52:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1a54:	f108 0801 	add.w	r8, r8, #1
    1a58:	3514      	adds	r5, #20
    1a5a:	360c      	adds	r6, #12
    1a5c:	e7b9      	b.n	19d2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    1a5e:	bf00      	nop
    1a60:	2000068c 	.word	0x2000068c
    1a64:	e000ed90 	.word	0xe000ed90
    1a68:	200007e4 	.word	0x200007e4

00001a6c <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    1a6c:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    1a6e:	4b0c      	ldr	r3, [pc, #48]	; (1aa0 <tz_nonsecure_state_setup+0x34>)
    1a70:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    1a72:	6803      	ldr	r3, [r0, #0]
    1a74:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    1a78:	6843      	ldr	r3, [r0, #4]
    1a7a:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    1a7e:	7b02      	ldrb	r2, [r0, #12]
    1a80:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    1a84:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    1a88:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    1a8c:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    1a8e:	bf48      	it	mi
    1a90:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    1a94:	b109      	cbz	r1, 1a9a <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    1a96:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    1a9a:	f383 8894 	msr	CONTROL_NS, r3
}
    1a9e:	4770      	bx	lr
    1aa0:	e002ed00 	.word	0xe002ed00

00001aa4 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1aa4:	4a08      	ldr	r2, [pc, #32]	; (1ac8 <tz_nbanked_exception_target_state_set+0x24>)
    1aa6:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    1aa8:	b148      	cbz	r0, 1abe <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    1aaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1aae:	041b      	lsls	r3, r3, #16
    1ab0:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1ab2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1aba:	60d3      	str	r3, [r2, #12]
}
    1abc:	4770      	bx	lr
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1abe:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    1ac0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1ac4:	e7f5      	b.n	1ab2 <tz_nbanked_exception_target_state_set+0xe>
    1ac6:	bf00      	nop
    1ac8:	e000ed00 	.word	0xe000ed00

00001acc <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1acc:	4a08      	ldr	r2, [pc, #32]	; (1af0 <tz_nonsecure_exception_prio_config+0x24>)
    1ace:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    1ad0:	b140      	cbz	r0, 1ae4 <tz_nonsecure_exception_prio_config+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1ad2:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    1ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1ae0:	60d3      	str	r3, [r2, #12]
}
    1ae2:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    1ae4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ae8:	041b      	lsls	r3, r3, #16
    1aea:	0c1b      	lsrs	r3, r3, #16
    1aec:	e7f4      	b.n	1ad8 <tz_nonsecure_exception_prio_config+0xc>
    1aee:	bf00      	nop
    1af0:	e000ed00 	.word	0xe000ed00

00001af4 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1af4:	4a08      	ldr	r2, [pc, #32]	; (1b18 <tz_nonsecure_system_reset_req_block+0x24>)
    1af6:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    1af8:	b140      	cbz	r0, 1b0c <tz_nonsecure_system_reset_req_block+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1afa:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    1afc:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    1b08:	60d3      	str	r3, [r2, #12]
}
    1b0a:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    1b0c:	f023 0308 	bic.w	r3, r3, #8
    1b10:	041b      	lsls	r3, r3, #16
    1b12:	0c1b      	lsrs	r3, r3, #16
    1b14:	e7f4      	b.n	1b00 <tz_nonsecure_system_reset_req_block+0xc>
    1b16:	bf00      	nop
    1b18:	e000ed00 	.word	0xe000ed00

00001b1c <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    1b1c:	4a03      	ldr	r2, [pc, #12]	; (1b2c <tz_nonsecure_fpu_access_enable+0x10>)
    1b1e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    1b22:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    1b26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    1b2a:	4770      	bx	lr
    1b2c:	e000ed00 	.word	0xe000ed00

00001b30 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    1b30:	4b08      	ldr	r3, [pc, #32]	; (1b54 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    1b32:	681a      	ldr	r2, [r3, #0]
    1b34:	b118      	cbz	r0, 1b3e <tz_sau_configure+0xe>
    1b36:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    1b3a:	601a      	str	r2, [r3, #0]
		}
	}
}
    1b3c:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    1b3e:	f022 0201 	bic.w	r2, r2, #1
    1b42:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    1b44:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    1b46:	b111      	cbz	r1, 1b4e <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    1b48:	f042 0202 	orr.w	r2, r2, #2
    1b4c:	e7f5      	b.n	1b3a <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    1b4e:	f022 0202 	bic.w	r2, r2, #2
    1b52:	e7f2      	b.n	1b3a <tz_sau_configure+0xa>
    1b54:	e000edd0 	.word	0xe000edd0

00001b58 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1b58:	4b01      	ldr	r3, [pc, #4]	; (1b60 <__stdout_hook_install+0x8>)
    1b5a:	6018      	str	r0, [r3, #0]
}
    1b5c:	4770      	bx	lr
    1b5e:	bf00      	nop
    1b60:	20000024 	.word	0x20000024

00001b64 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    1b64:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    1b66:	794b      	ldrb	r3, [r1, #5]
    1b68:	2b01      	cmp	r3, #1
    1b6a:	d029      	beq.n	1bc0 <uarte_nrfx_configure+0x5c>
    1b6c:	2b03      	cmp	r3, #3
    1b6e:	d124      	bne.n	1bba <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    1b70:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1b72:	798b      	ldrb	r3, [r1, #6]
    1b74:	2b03      	cmp	r3, #3
    1b76:	d120      	bne.n	1bba <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1b78:	79cc      	ldrb	r4, [r1, #7]
    1b7a:	b124      	cbz	r4, 1b86 <uarte_nrfx_configure+0x22>
    1b7c:	2c01      	cmp	r4, #1
    1b7e:	d11c      	bne.n	1bba <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    1b80:	6843      	ldr	r3, [r0, #4]
    1b82:	791b      	ldrb	r3, [r3, #4]
    1b84:	b1cb      	cbz	r3, 1bba <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1b86:	790a      	ldrb	r2, [r1, #4]
    1b88:	b112      	cbz	r2, 1b90 <uarte_nrfx_configure+0x2c>
    1b8a:	2a02      	cmp	r2, #2
    1b8c:	d115      	bne.n	1bba <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    1b8e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1b90:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1b92:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    1b94:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    1b98:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    1b9a:	d064      	beq.n	1c66 <uarte_nrfx_configure+0x102>
    1b9c:	d82d      	bhi.n	1bfa <uarte_nrfx_configure+0x96>
    1b9e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1ba2:	d063      	beq.n	1c6c <uarte_nrfx_configure+0x108>
    1ba4:	d816      	bhi.n	1bd4 <uarte_nrfx_configure+0x70>
    1ba6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1baa:	d061      	beq.n	1c70 <uarte_nrfx_configure+0x10c>
    1bac:	d80a      	bhi.n	1bc4 <uarte_nrfx_configure+0x60>
    1bae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1bb2:	d060      	beq.n	1c76 <uarte_nrfx_configure+0x112>
    1bb4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1bb8:	d060      	beq.n	1c7c <uarte_nrfx_configure+0x118>
    1bba:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1bbe:	e051      	b.n	1c64 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    1bc0:	2600      	movs	r6, #0
    1bc2:	e7d6      	b.n	1b72 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    1bc4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1bc8:	d05b      	beq.n	1c82 <uarte_nrfx_configure+0x11e>
    1bca:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1bce:	d1f4      	bne.n	1bba <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1bd0:	4b36      	ldr	r3, [pc, #216]	; (1cac <uarte_nrfx_configure+0x148>)
    1bd2:	e03c      	b.n	1c4e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1bd4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1bd8:	d056      	beq.n	1c88 <uarte_nrfx_configure+0x124>
    1bda:	d807      	bhi.n	1bec <uarte_nrfx_configure+0x88>
    1bdc:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1be0:	d054      	beq.n	1c8c <uarte_nrfx_configure+0x128>
    1be2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1be6:	d1e8      	bne.n	1bba <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1be8:	4b31      	ldr	r3, [pc, #196]	; (1cb0 <uarte_nrfx_configure+0x14c>)
    1bea:	e030      	b.n	1c4e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1bec:	f647 2712 	movw	r7, #31250	; 0x7a12
    1bf0:	42bb      	cmp	r3, r7
    1bf2:	d1e2      	bne.n	1bba <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1bf4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1bf8:	e029      	b.n	1c4e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1bfa:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1bfe:	d047      	beq.n	1c90 <uarte_nrfx_configure+0x12c>
    1c00:	d813      	bhi.n	1c2a <uarte_nrfx_configure+0xc6>
    1c02:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1c06:	d046      	beq.n	1c96 <uarte_nrfx_configure+0x132>
    1c08:	d809      	bhi.n	1c1e <uarte_nrfx_configure+0xba>
    1c0a:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    1c0e:	42bb      	cmp	r3, r7
    1c10:	d043      	beq.n	1c9a <uarte_nrfx_configure+0x136>
    1c12:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    1c16:	d1d0      	bne.n	1bba <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1c18:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1c1c:	e017      	b.n	1c4e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1c1e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1c22:	d1ca      	bne.n	1bba <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1c24:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1c28:	e011      	b.n	1c4e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1c2a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1c2e:	d037      	beq.n	1ca0 <uarte_nrfx_configure+0x13c>
    1c30:	d808      	bhi.n	1c44 <uarte_nrfx_configure+0xe0>
    1c32:	4f20      	ldr	r7, [pc, #128]	; (1cb4 <uarte_nrfx_configure+0x150>)
    1c34:	42bb      	cmp	r3, r7
    1c36:	d036      	beq.n	1ca6 <uarte_nrfx_configure+0x142>
    1c38:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    1c3c:	d1bd      	bne.n	1bba <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1c3e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1c42:	e004      	b.n	1c4e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1c44:	4f1c      	ldr	r7, [pc, #112]	; (1cb8 <uarte_nrfx_configure+0x154>)
    1c46:	42bb      	cmp	r3, r7
    1c48:	d1b7      	bne.n	1bba <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1c4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1c4e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    1c52:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    1c54:	68c3      	ldr	r3, [r0, #12]
    1c56:	4322      	orrs	r2, r4
    1c58:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1c5a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    1c5e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    1c62:	2000      	movs	r0, #0
}
    1c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1c66:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1c6a:	e7f0      	b.n	1c4e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    1c6c:	4b13      	ldr	r3, [pc, #76]	; (1cbc <uarte_nrfx_configure+0x158>)
    1c6e:	e7ee      	b.n	1c4e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1c70:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1c74:	e7eb      	b.n	1c4e <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
    1c76:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1c7a:	e7e8      	b.n	1c4e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1c7c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    1c80:	e7e5      	b.n	1c4e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1c82:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1c86:	e7e2      	b.n	1c4e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    1c88:	4b0d      	ldr	r3, [pc, #52]	; (1cc0 <uarte_nrfx_configure+0x15c>)
    1c8a:	e7e0      	b.n	1c4e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1c8c:	4b0d      	ldr	r3, [pc, #52]	; (1cc4 <uarte_nrfx_configure+0x160>)
    1c8e:	e7de      	b.n	1c4e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1c90:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1c94:	e7db      	b.n	1c4e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1c96:	4b0c      	ldr	r3, [pc, #48]	; (1cc8 <uarte_nrfx_configure+0x164>)
    1c98:	e7d9      	b.n	1c4e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1c9a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1c9e:	e7d6      	b.n	1c4e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1ca0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1ca4:	e7d3      	b.n	1c4e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    1ca6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1caa:	e7d0      	b.n	1c4e <uarte_nrfx_configure+0xea>
    1cac:	0013b000 	.word	0x0013b000
    1cb0:	004ea000 	.word	0x004ea000
    1cb4:	0003d090 	.word	0x0003d090
    1cb8:	000f4240 	.word	0x000f4240
    1cbc:	00275000 	.word	0x00275000
    1cc0:	0075c000 	.word	0x0075c000
    1cc4:	003af000 	.word	0x003af000
    1cc8:	013a9000 	.word	0x013a9000

00001ccc <uarte_instance_init.isra.0>:

NRF_STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1ccc:	2201      	movs	r2, #1
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
    1cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1cd0:	2703      	movs	r7, #3
    1cd2:	460d      	mov	r5, r1
	return config->uarte_regs;
    1cd4:	6843      	ldr	r3, [r0, #4]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
    1cd6:	6809      	ldr	r1, [r1, #0]
	return config->uarte_regs;
    1cd8:	681c      	ldr	r4, [r3, #0]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    1cda:	4b21      	ldr	r3, [pc, #132]	; (1d60 <uarte_instance_init.isra.0+0x94>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1cdc:	408a      	lsls	r2, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    1cde:	68c6      	ldr	r6, [r0, #12]
    p_reg->OUTSET = set_mask;
    1ce0:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1ce2:	f101 0280 	add.w	r2, r1, #128	; 0x80
    1ce6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    1cea:	686a      	ldr	r2, [r5, #4]
    1cec:	1c57      	adds	r7, r2, #1
    1cee:	bf1e      	ittt	ne
    1cf0:	f04f 0c00 	movne.w	ip, #0
    1cf4:	f102 0780 	addne.w	r7, r2, #128	; 0x80
    1cf8:	f843 c027 	strne.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
    1cfc:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    1d00:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
    1d02:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    1d06:	1c4a      	adds	r2, r1, #1
    1d08:	d015      	beq.n	1d36 <uarte_instance_init.isra.0+0x6a>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    1d0a:	68ea      	ldr	r2, [r5, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    1d0c:	1c57      	adds	r7, r2, #1
    1d0e:	d012      	beq.n	1d36 <uarte_instance_init.isra.0+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1d10:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1d12:	f04f 0c03 	mov.w	ip, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1d16:	4097      	lsls	r7, r2
    p_reg->OUTSET = set_mask;
    1d18:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1d1a:	f102 0780 	add.w	r7, r2, #128	; 0x80
    1d1e:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    1d22:	f04f 0c00 	mov.w	ip, #0
    1d26:	f101 0780 	add.w	r7, r1, #128	; 0x80
    1d2a:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    1d2e:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    1d32:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    1d36:	4631      	mov	r1, r6
    1d38:	f7ff ff14 	bl	1b64 <uarte_nrfx_configure>
	if (err) {
    1d3c:	b970      	cbnz	r0, 1d5c <uarte_instance_init.isra.0+0x90>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    1d3e:	2308      	movs	r3, #8
    1d40:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    1d44:	686b      	ldr	r3, [r5, #4]
    1d46:	3301      	adds	r3, #1
    1d48:	d008      	beq.n	1d5c <uarte_instance_init.isra.0+0x90>
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    1d4a:	2301      	movs	r3, #1
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    1d4c:	360c      	adds	r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1d4e:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    1d52:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    1d56:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1d5a:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    1d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d5e:	bf00      	nop
    1d60:	50842500 	.word	0x50842500

00001d64 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    1d64:	b530      	push	{r4, r5, lr}
    1d66:	b085      	sub	sp, #20
    1d68:	4605      	mov	r5, r0
    1d6a:	466c      	mov	r4, sp
    1d6c:	4b04      	ldr	r3, [pc, #16]	; (1d80 <uarte_0_init+0x1c>)
    1d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1d70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1d74:	4621      	mov	r1, r4
    1d76:	4628      	mov	r0, r5
    1d78:	f7ff ffa8 	bl	1ccc <uarte_instance_init.isra.0>
    1d7c:	b005      	add	sp, #20
    1d7e:	bd30      	pop	{r4, r5, pc}
    1d80:	0000481c 	.word	0x0000481c

00001d84 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    1d84:	b530      	push	{r4, r5, lr}
    1d86:	b085      	sub	sp, #20
    1d88:	4605      	mov	r5, r0
    1d8a:	466c      	mov	r4, sp
    1d8c:	4b04      	ldr	r3, [pc, #16]	; (1da0 <uarte_1_init+0x1c>)
    1d8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1d90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1d94:	4621      	mov	r1, r4
    1d96:	4628      	mov	r0, r5
    1d98:	f7ff ff98 	bl	1ccc <uarte_instance_init.isra.0>
    1d9c:	b005      	add	sp, #20
    1d9e:	bd30      	pop	{r4, r5, pc}
    1da0:	0000482c 	.word	0x0000482c

00001da4 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
    1da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1da8:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    1daa:	4c21      	ldr	r4, [pc, #132]	; (1e30 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
    1dac:	4e21      	ldr	r6, [pc, #132]	; (1e34 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1dae:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    1db2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1e3c <check_ext_api_requests+0x98>
{
    1db6:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1db8:	45a8      	cmp	r8, r5
    1dba:	d803      	bhi.n	1dc4 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    1dbc:	2000      	movs	r0, #0
    1dbe:	b005      	add	sp, #20
    1dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
    1dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1dc6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1dca:	681f      	ldr	r7, [r3, #0]
    1dcc:	ab01      	add	r3, sp, #4
    1dce:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    1dd2:	220c      	movs	r2, #12
    1dd4:	4619      	mov	r1, r3
    1dd6:	4638      	mov	r0, r7
    1dd8:	f002 f99b 	bl	4112 <memcmp>
    1ddc:	b990      	cbnz	r0, 1e04 <check_ext_api_requests+0x60>
    1dde:	b18f      	cbz	r7, 1e04 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    1de0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
    1de2:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    1de4:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    1de6:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    1de8:	4291      	cmp	r1, r2
    1dea:	d10b      	bne.n	1e04 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    1dec:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
    1dee:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    1df0:	4291      	cmp	r1, r2
    1df2:	d807      	bhi.n	1e04 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
    1df4:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    1df6:	4291      	cmp	r1, r2
    1df8:	d904      	bls.n	1e04 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
    1dfa:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    1dfc:	695b      	ldr	r3, [r3, #20]
    1dfe:	ea32 0303 	bics.w	r3, r2, r3
    1e02:	d00a      	beq.n	1e1a <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    1e04:	6a27      	ldr	r7, [r4, #32]
    1e06:	b167      	cbz	r7, 1e22 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    1e08:	480b      	ldr	r0, [pc, #44]	; (1e38 <check_ext_api_requests+0x94>)
    1e0a:	f001 ff48 	bl	3c9e <printk>
			k_panic();
    1e0e:	4040      	eors	r0, r0
    1e10:	f380 8811 	msr	BASEPRI, r0
    1e14:	f04f 0004 	mov.w	r0, #4
    1e18:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    1e1a:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1e1c:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    1e1e:	441c      	add	r4, r3
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1e20:	e7ca      	b.n	1db8 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    1e22:	4648      	mov	r0, r9
    1e24:	f001 ff3b 	bl	3c9e <printk>
			*ext_api_req->ext_api = NULL;
    1e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e2a:	601f      	str	r7, [r3, #0]
    1e2c:	e7f5      	b.n	1e1a <check_ext_api_requests+0x76>
    1e2e:	bf00      	nop
    1e30:	0000023c 	.word	0x0000023c
    1e34:	0000483c 	.word	0x0000483c
    1e38:	00004e07 	.word	0x00004e07
    1e3c:	00004e30 	.word	0x00004e30

00001e40 <nrf91_errata_31>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1e40:	4b06      	ldr	r3, [pc, #24]	; (1e5c <nrf91_errata_31+0x1c>)
    1e42:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1e44:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1e46:	681b      	ldr	r3, [r3, #0]
    1e48:	2b09      	cmp	r3, #9
    1e4a:	d105      	bne.n	1e58 <nrf91_errata_31+0x18>
            {
                switch(var2)
    1e4c:	3801      	subs	r0, #1
    1e4e:	2801      	cmp	r0, #1
    1e50:	bf8c      	ite	hi
    1e52:	2000      	movhi	r0, #0
    1e54:	2001      	movls	r0, #1
    1e56:	4770      	bx	lr
                    case 0x02ul:
                        return true;
                }
            }
        #endif
        return false;
    1e58:	2000      	movs	r0, #0
    #endif
}
    1e5a:	4770      	bx	lr
    1e5c:	00ff0134 	.word	0x00ff0134

00001e60 <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1e60:	4b05      	ldr	r3, [pc, #20]	; (1e78 <nrf91_errata_14+0x18>)
    1e62:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1e64:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1e66:	681b      	ldr	r3, [r3, #0]
    1e68:	2b09      	cmp	r3, #9
    1e6a:	d103      	bne.n	1e74 <nrf91_errata_14+0x14>
            {
                switch(var2)
    1e6c:	1e43      	subs	r3, r0, #1
    1e6e:	4258      	negs	r0, r3
    1e70:	4158      	adcs	r0, r3
    1e72:	4770      	bx	lr
                    case 0x02ul:
                        return false;
                }
            }
        #endif
        return false;
    1e74:	2000      	movs	r0, #0
    #endif
}
    1e76:	4770      	bx	lr
    1e78:	00ff0134 	.word	0x00ff0134

00001e7c <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1e7c:	4a4e      	ldr	r2, [pc, #312]	; (1fb8 <SystemInit+0x13c>)
{
    1e7e:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1e80:	6813      	ldr	r3, [r2, #0]
    1e82:	f043 0302 	orr.w	r3, r3, #2
    1e86:	6013      	str	r3, [r2, #0]
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
    1e88:	f7ff ffda 	bl	1e40 <nrf91_errata_31>
    1e8c:	b130      	cbz	r0, 1e9c <SystemInit+0x20>
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    1e8e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1e92:	2200      	movs	r2, #0
    1e94:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    1e98:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    1e9c:	f7ff ffe0 	bl	1e60 <nrf91_errata_14>
    1ea0:	b130      	cbz	r0, 1eb0 <SystemInit+0x34>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    1ea2:	2301      	movs	r3, #1
    1ea4:	4a45      	ldr	r2, [pc, #276]	; (1fbc <SystemInit+0x140>)
    1ea6:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1ea8:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    1eac:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1eb0:	4b43      	ldr	r3, [pc, #268]	; (1fc0 <SystemInit+0x144>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	2b09      	cmp	r3, #9
    1eb6:	d107      	bne.n	1ec8 <SystemInit+0x4c>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1eb8:	4b42      	ldr	r3, [pc, #264]	; (1fc4 <SystemInit+0x148>)
            {
                switch(var2)
    1eba:	681b      	ldr	r3, [r3, #0]
    1ebc:	2b02      	cmp	r3, #2
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1ebe:	bf02      	ittt	eq
    1ec0:	2201      	moveq	r2, #1
    1ec2:	4b41      	ldreq	r3, [pc, #260]	; (1fc8 <SystemInit+0x14c>)
    1ec4:	f8c3 2578 	streq.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    1ec8:	f7ff ffca 	bl	1e60 <nrf91_errata_14>
    1ecc:	b110      	cbz	r0, 1ed4 <SystemInit+0x58>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    1ece:	220e      	movs	r2, #14
    1ed0:	4b3e      	ldr	r3, [pc, #248]	; (1fcc <SystemInit+0x150>)
    1ed2:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
    1ed4:	f7ff ffb4 	bl	1e40 <nrf91_errata_31>
    1ed8:	b120      	cbz	r0, 1ee4 <SystemInit+0x68>
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    1eda:	2200      	movs	r2, #0
    1edc:	4b3c      	ldr	r3, [pc, #240]	; (1fd0 <SystemInit+0x154>)
    1ede:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    1ee0:	2201      	movs	r2, #1
    1ee2:	605a      	str	r2, [r3, #4]
{
    1ee4:	2200      	movs	r2, #0
    1ee6:	00d3      	lsls	r3, r2, #3
    1ee8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1eec:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    1ef0:	3101      	adds	r1, #1
    1ef2:	d008      	beq.n	1f06 <SystemInit+0x8a>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1ef4:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1ef8:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1efa:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1efe:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1f02:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1f04:	d1ef      	bne.n	1ee6 <SystemInit+0x6a>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1f06:	4b33      	ldr	r3, [pc, #204]	; (1fd4 <SystemInit+0x158>)
    1f08:	69da      	ldr	r2, [r3, #28]
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    1f0a:	07d1      	lsls	r1, r2, #31
    1f0c:	d53b      	bpl.n	1f86 <SystemInit+0x10a>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1f0e:	4b32      	ldr	r3, [pc, #200]	; (1fd8 <SystemInit+0x15c>)
    1f10:	4619      	mov	r1, r3
    1f12:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1f16:	2a01      	cmp	r2, #1
    1f18:	d1fb      	bne.n	1f12 <SystemInit+0x96>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    1f1a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1f1e:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    1f22:	2b01      	cmp	r3, #1
    1f24:	d1fb      	bne.n	1f1e <SystemInit+0xa2>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1f26:	4b2b      	ldr	r3, [pc, #172]	; (1fd4 <SystemInit+0x158>)
    1f28:	69da      	ldr	r2, [r3, #28]
          if (uicr_HFXOSRC_erased()){
    1f2a:	07d2      	lsls	r2, r2, #31
    1f2c:	d508      	bpl.n	1f40 <SystemInit+0xc4>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    1f2e:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1f30:	4929      	ldr	r1, [pc, #164]	; (1fd8 <SystemInit+0x15c>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    1f32:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    1f36:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1f38:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    1f3c:	2a01      	cmp	r2, #1
    1f3e:	d1fb      	bne.n	1f38 <SystemInit+0xbc>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1f40:	6a1a      	ldr	r2, [r3, #32]
    1f42:	3201      	adds	r2, #1
    1f44:	d10a      	bne.n	1f5c <SystemInit+0xe0>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    1f46:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    1f48:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    1f4c:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    1f50:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1f52:	4a21      	ldr	r2, [pc, #132]	; (1fd8 <SystemInit+0x15c>)
    1f54:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1f58:	2b01      	cmp	r3, #1
    1f5a:	d1fb      	bne.n	1f54 <SystemInit+0xd8>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    1f5c:	2200      	movs	r2, #0
    1f5e:	4b1e      	ldr	r3, [pc, #120]	; (1fd8 <SystemInit+0x15c>)
    1f60:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1f64:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1f68:	2a01      	cmp	r2, #1
    1f6a:	d1fb      	bne.n	1f64 <SystemInit+0xe8>
  __ASM volatile ("dsb 0xF":::"memory");
    1f6c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1f70:	491a      	ldr	r1, [pc, #104]	; (1fdc <SystemInit+0x160>)
    1f72:	4b1b      	ldr	r3, [pc, #108]	; (1fe0 <SystemInit+0x164>)
    1f74:	68ca      	ldr	r2, [r1, #12]
    1f76:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1f7a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1f7c:	60cb      	str	r3, [r1, #12]
    1f7e:	f3bf 8f4f 	dsb	sy
    __NOP();
    1f82:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1f84:	e7fd      	b.n	1f82 <SystemInit+0x106>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1f86:	6a1b      	ldr	r3, [r3, #32]
    1f88:	3301      	adds	r3, #1
    1f8a:	d0c0      	beq.n	1f0e <SystemInit+0x92>
        SCB->NSACR |= (3UL << 10);
    1f8c:	4b13      	ldr	r3, [pc, #76]	; (1fdc <SystemInit+0x160>)
    1f8e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    1f92:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    1f96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    1f9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1f9e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    1fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1fa6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1faa:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    1fae:	4b0d      	ldr	r3, [pc, #52]	; (1fe4 <SystemInit+0x168>)
    1fb0:	4a0d      	ldr	r2, [pc, #52]	; (1fe8 <SystemInit+0x16c>)
    1fb2:	601a      	str	r2, [r3, #0]
}
    1fb4:	bd08      	pop	{r3, pc}
    1fb6:	bf00      	nop
    1fb8:	e000edd0 	.word	0xe000edd0
    1fbc:	50004a38 	.word	0x50004a38
    1fc0:	00ff0130 	.word	0x00ff0130
    1fc4:	00ff0134 	.word	0x00ff0134
    1fc8:	50004000 	.word	0x50004000
    1fcc:	5003aee4 	.word	0x5003aee4
    1fd0:	5000470c 	.word	0x5000470c
    1fd4:	00ff8000 	.word	0x00ff8000
    1fd8:	50039000 	.word	0x50039000
    1fdc:	e000ed00 	.word	0xe000ed00
    1fe0:	05fa0004 	.word	0x05fa0004
    1fe4:	20000048 	.word	0x20000048
    1fe8:	03d09000 	.word	0x03d09000

00001fec <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
    1fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    1fee:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    1ff0:	4b08      	ldr	r3, [pc, #32]	; (2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>)
    1ff2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1ff6:	3001      	adds	r0, #1
    1ff8:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    1ffc:	42a6      	cmp	r6, r4
    1ffe:	d800      	bhi.n	2002 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2>
			}
		}
	}
}
    2000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    2002:	e9d4 3500 	ldrd	r3, r5, [r4]
    2006:	4628      	mov	r0, r5
    2008:	4798      	blx	r3
		if (retval != 0) {
    200a:	b108      	cbz	r0, 2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>
			if (dev) {
    200c:	b105      	cbz	r5, 2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>
				dev->driver_api = NULL;
    200e:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2010:	3408      	adds	r4, #8
    2012:	e7f3      	b.n	1ffc <z_sys_init_run_level+0x10>
    2014:	000049d8 	.word	0x000049d8

00002018 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    2018:	4b0f      	ldr	r3, [pc, #60]	; (2058 <z_impl_device_get_binding+0x40>)
{
    201a:	b570      	push	{r4, r5, r6, lr}
    201c:	4605      	mov	r5, r0
    201e:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    2020:	4c0e      	ldr	r4, [pc, #56]	; (205c <z_impl_device_get_binding+0x44>)
    2022:	429c      	cmp	r4, r3
    2024:	d104      	bne.n	2030 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    2026:	4c0d      	ldr	r4, [pc, #52]	; (205c <z_impl_device_get_binding+0x44>)
    2028:	42b4      	cmp	r4, r6
    202a:	d108      	bne.n	203e <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    202c:	2400      	movs	r4, #0
    202e:	e010      	b.n	2052 <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
    2030:	68a2      	ldr	r2, [r4, #8]
    2032:	b112      	cbz	r2, 203a <z_impl_device_get_binding+0x22>
    2034:	6822      	ldr	r2, [r4, #0]
    2036:	42aa      	cmp	r2, r5
    2038:	d00b      	beq.n	2052 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
    203a:	3410      	adds	r4, #16
    203c:	e7f1      	b.n	2022 <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
    203e:	68a3      	ldr	r3, [r4, #8]
    2040:	b90b      	cbnz	r3, 2046 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    2042:	3410      	adds	r4, #16
    2044:	e7f0      	b.n	2028 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
    2046:	4628      	mov	r0, r5
    2048:	6821      	ldr	r1, [r4, #0]
    204a:	f002 f856 	bl	40fa <strcmp>
		if ((dev->driver_api != NULL) &&
    204e:	2800      	cmp	r0, #0
    2050:	d1f7      	bne.n	2042 <z_impl_device_get_binding+0x2a>
}
    2052:	4620      	mov	r0, r4
    2054:	bd70      	pop	{r4, r5, r6, pc}
    2056:	bf00      	nop
    2058:	200000e4 	.word	0x200000e4
    205c:	20000094 	.word	0x20000094

00002060 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    2060:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    2062:	4d0b      	ldr	r5, [pc, #44]	; (2090 <idle+0x30>)
    2064:	f04f 0220 	mov.w	r2, #32
    2068:	f3ef 8311 	mrs	r3, BASEPRI
    206c:	f382 8811 	msr	BASEPRI, r2
    2070:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    2074:	f002 fa58 	bl	4528 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2078:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    207a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    207c:	2802      	cmp	r0, #2
    207e:	bfd8      	it	le
    2080:	4608      	movle	r0, r1
    2082:	f002 fa61 	bl	4548 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    2086:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2088:	f7ff f99e 	bl	13c8 <arch_cpu_idle>
}
    208c:	e7ea      	b.n	2064 <idle+0x4>
    208e:	bf00      	nop
    2090:	20000788 	.word	0x20000788

00002094 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    2094:	4802      	ldr	r0, [pc, #8]	; (20a0 <z_bss_zero+0xc>)
    2096:	4a03      	ldr	r2, [pc, #12]	; (20a4 <z_bss_zero+0x10>)
    2098:	2100      	movs	r1, #0
    209a:	1a12      	subs	r2, r2, r0
    209c:	f002 b88b 	b.w	41b6 <memset>
    20a0:	20000148 	.word	0x20000148
    20a4:	200007e8 	.word	0x200007e8

000020a8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    20a8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    20aa:	4806      	ldr	r0, [pc, #24]	; (20c4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    20ac:	4a06      	ldr	r2, [pc, #24]	; (20c8 <z_data_copy+0x20>)
    20ae:	4907      	ldr	r1, [pc, #28]	; (20cc <z_data_copy+0x24>)
    20b0:	1a12      	subs	r2, r2, r0
    20b2:	f002 f855 	bl	4160 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    20b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    20ba:	4a05      	ldr	r2, [pc, #20]	; (20d0 <z_data_copy+0x28>)
    20bc:	4905      	ldr	r1, [pc, #20]	; (20d4 <z_data_copy+0x2c>)
    20be:	4806      	ldr	r0, [pc, #24]	; (20d8 <z_data_copy+0x30>)
    20c0:	f002 b84e 	b.w	4160 <memcpy>
    20c4:	20000000 	.word	0x20000000
    20c8:	20000148 	.word	0x20000148
    20cc:	00004eb0 	.word	0x00004eb0
    20d0:	00000000 	.word	0x00000000
    20d4:	00004eb0 	.word	0x00004eb0
    20d8:	20000000 	.word	0x20000000

000020dc <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    20dc:	2201      	movs	r2, #1
{
    20de:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    20e0:	4b0b      	ldr	r3, [pc, #44]	; (2110 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    20e2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    20e4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    20e6:	f7ff ff81 	bl	1fec <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    20ea:	4a0a      	ldr	r2, [pc, #40]	; (2114 <bg_thread_main+0x38>)
    20ec:	490a      	ldr	r1, [pc, #40]	; (2118 <bg_thread_main+0x3c>)
    20ee:	480b      	ldr	r0, [pc, #44]	; (211c <bg_thread_main+0x40>)
    20f0:	f001 fdd5 	bl	3c9e <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    20f4:	2003      	movs	r0, #3
    20f6:	f7ff ff79 	bl	1fec <z_sys_init_run_level>

	z_init_static_threads();
    20fa:	f000 fd3d 	bl	2b78 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    20fe:	f001 fdb7 	bl	3c70 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    2102:	4a07      	ldr	r2, [pc, #28]	; (2120 <bg_thread_main+0x44>)
    2104:	7b13      	ldrb	r3, [r2, #12]
    2106:	f023 0301 	bic.w	r3, r3, #1
    210a:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    210c:	bd08      	pop	{r3, pc}
    210e:	bf00      	nop
    2110:	200007e5 	.word	0x200007e5
    2114:	00004aff 	.word	0x00004aff
    2118:	00004e6e 	.word	0x00004e6e
    211c:	00004e7e 	.word	0x00004e7e
    2120:	20000714 	.word	0x20000714

00002124 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    2124:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    2128:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 2224 <z_cstart+0x100>
    212c:	b0a5      	sub	sp, #148	; 0x94
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    212e:	f389 8808 	msr	MSP, r9
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2132:	2400      	movs	r4, #0
    2134:	23e0      	movs	r3, #224	; 0xe0
    2136:	4d34      	ldr	r5, [pc, #208]	; (2208 <z_cstart+0xe4>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2138:	f04f 0b01 	mov.w	fp, #1
    213c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    2140:	77ec      	strb	r4, [r5, #31]
    2142:	762c      	strb	r4, [r5, #24]
    2144:	766c      	strb	r4, [r5, #25]
    2146:	76ac      	strb	r4, [r5, #26]
    2148:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    214a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    214c:	4e2f      	ldr	r6, [pc, #188]	; (220c <z_cstart+0xe8>)
    214e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    2152:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    2154:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2156:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 2228 <z_cstart+0x104>
    215a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    215e:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    2160:	63ac      	str	r4, [r5, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    2162:	f7ff fab1 	bl	16c8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    2166:	f7ff f929 	bl	13bc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    216a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    216e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    2170:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    2172:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    2176:	4d26      	ldr	r5, [pc, #152]	; (2210 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    2178:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
    217c:	ab07      	add	r3, sp, #28
    217e:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    2180:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    2182:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
    2186:	f7ff ff31 	bl	1fec <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    218a:	2001      	movs	r0, #1
    218c:	f7ff ff2e 	bl	1fec <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2190:	f8df 8098 	ldr.w	r8, [pc, #152]	; 222c <z_cstart+0x108>
	z_sched_init();
    2194:	f000 fc4c 	bl	2a30 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2198:	4b1e      	ldr	r3, [pc, #120]	; (2214 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    219a:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    219c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    21a0:	4641      	mov	r1, r8
    21a2:	4630      	mov	r0, r6
    21a4:	9305      	str	r3, [sp, #20]
    21a6:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    21aa:	4653      	mov	r3, sl
    21ac:	e9cd 4401 	strd	r4, r4, [sp, #4]
    21b0:	9400      	str	r4, [sp, #0]
    21b2:	f000 fcbb 	bl	2b2c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    21b6:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    21b8:	4630      	mov	r0, r6
    21ba:	f023 0304 	bic.w	r3, r3, #4
    21be:	7373      	strb	r3, [r6, #13]
    21c0:	f002 f8f4 	bl	43ac <z_ready_thread>
	z_setup_new_thread(thread, stack,
    21c4:	230f      	movs	r3, #15
    21c6:	4f14      	ldr	r7, [pc, #80]	; (2218 <z_cstart+0xf4>)
    21c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    21cc:	4638      	mov	r0, r7
    21ce:	e9cd 4302 	strd	r4, r3, [sp, #8]
    21d2:	4912      	ldr	r1, [pc, #72]	; (221c <z_cstart+0xf8>)
    21d4:	4b12      	ldr	r3, [pc, #72]	; (2220 <z_cstart+0xfc>)
    21d6:	e9cd b404 	strd	fp, r4, [sp, #16]
    21da:	e9cd 4400 	strd	r4, r4, [sp]
    21de:	f000 fca5 	bl	2b2c <z_setup_new_thread>
    21e2:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    21e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    21e8:	f023 0304 	bic.w	r3, r3, #4
    21ec:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    21ee:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    21f2:	e9c5 3306 	strd	r3, r3, [r5, #24]
    21f6:	4641      	mov	r1, r8
    21f8:	4653      	mov	r3, sl
    21fa:	4630      	mov	r0, r6
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    21fc:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    21fe:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    2200:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    2204:	f7ff f8bc 	bl	1380 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2208:	e000ed00 	.word	0xe000ed00
    220c:	20000714 	.word	0x20000714
    2210:	20000788 	.word	0x20000788
    2214:	00004ea5 	.word	0x00004ea5
    2218:	200006a0 	.word	0x200006a0
    221c:	20000be8 	.word	0x20000be8
    2220:	00002061 	.word	0x00002061
    2224:	20001528 	.word	0x20001528
    2228:	000020dd 	.word	0x000020dd
    222c:	200007e8 	.word	0x200007e8

00002230 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    2230:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    2232:	4b0e      	ldr	r3, [pc, #56]	; (226c <init_mem_slab_module+0x3c>)
    2234:	4c0e      	ldr	r4, [pc, #56]	; (2270 <init_mem_slab_module+0x40>)
    2236:	42a3      	cmp	r3, r4
    2238:	d301      	bcc.n	223e <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    223a:	2000      	movs	r0, #0
	return rc;
}
    223c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    223e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    2242:	ea41 0200 	orr.w	r2, r1, r0
    2246:	f012 0203 	ands.w	r2, r2, #3
    224a:	d10b      	bne.n	2264 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    224c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    224e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    2250:	42aa      	cmp	r2, r5
    2252:	d101      	bne.n	2258 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    2254:	331c      	adds	r3, #28
    2256:	e7ee      	b.n	2236 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    2258:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    225a:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    225c:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    225e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    2260:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    2262:	e7f5      	b.n	2250 <init_mem_slab_module+0x20>
		return -EINVAL;
    2264:	f06f 0015 	mvn.w	r0, #21
	return rc;
    2268:	e7e8      	b.n	223c <init_mem_slab_module+0xc>
    226a:	bf00      	nop
    226c:	200000e4 	.word	0x200000e4
    2270:	200000e4 	.word	0x200000e4

00002274 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    2274:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    2276:	460c      	mov	r4, r1
    2278:	4616      	mov	r6, r2
    227a:	461f      	mov	r7, r3
    227c:	f04f 0320 	mov.w	r3, #32
    2280:	f3ef 8111 	mrs	r1, BASEPRI
    2284:	f383 8811 	msr	BASEPRI, r3
    2288:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    228c:	6943      	ldr	r3, [r0, #20]
    228e:	b15b      	cbz	r3, 22a8 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    2290:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    2292:	681b      	ldr	r3, [r3, #0]
    2294:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    2296:	6983      	ldr	r3, [r0, #24]
    2298:	3301      	adds	r3, #1
    229a:	6183      	str	r3, [r0, #24]
		result = 0;
    229c:	2000      	movs	r0, #0
	__asm__ volatile(
    229e:	f381 8811 	msr	BASEPRI, r1
    22a2:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    22a6:	e011      	b.n	22cc <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    22a8:	ea56 0207 	orrs.w	r2, r6, r7
    22ac:	d103      	bne.n	22b6 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
    22ae:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    22b2:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    22b4:	e7f3      	b.n	229e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    22b6:	4602      	mov	r2, r0
    22b8:	e9cd 6700 	strd	r6, r7, [sp]
    22bc:	4804      	ldr	r0, [pc, #16]	; (22d0 <k_mem_slab_alloc+0x5c>)
    22be:	f000 fb63 	bl	2988 <z_pend_curr>
		if (result == 0) {
    22c2:	b918      	cbnz	r0, 22cc <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    22c4:	4b03      	ldr	r3, [pc, #12]	; (22d4 <k_mem_slab_alloc+0x60>)
    22c6:	689b      	ldr	r3, [r3, #8]
    22c8:	695b      	ldr	r3, [r3, #20]
    22ca:	6023      	str	r3, [r4, #0]
}
    22cc:	b002      	add	sp, #8
    22ce:	bdd0      	pop	{r4, r6, r7, pc}
    22d0:	200007e6 	.word	0x200007e6
    22d4:	20000788 	.word	0x20000788

000022d8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    22d8:	b570      	push	{r4, r5, r6, lr}
    22da:	4604      	mov	r4, r0
    22dc:	460d      	mov	r5, r1
	__asm__ volatile(
    22de:	f04f 0320 	mov.w	r3, #32
    22e2:	f3ef 8611 	mrs	r6, BASEPRI
    22e6:	f383 8811 	msr	BASEPRI, r3
    22ea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    22ee:	f002 f8d0 	bl	4492 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    22f2:	b158      	cbz	r0, 230c <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    22f4:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    22f6:	682a      	ldr	r2, [r5, #0]
    22f8:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    22fa:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
    22fc:	f002 f856 	bl	43ac <z_ready_thread>
		z_reschedule(&lock, key);
    2300:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    2302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    2306:	4808      	ldr	r0, [pc, #32]	; (2328 <k_mem_slab_free+0x50>)
    2308:	f002 b829 	b.w	435e <z_reschedule>
		**(char ***)mem = slab->free_list;
    230c:	682b      	ldr	r3, [r5, #0]
    230e:	6962      	ldr	r2, [r4, #20]
    2310:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    2312:	682b      	ldr	r3, [r5, #0]
    2314:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    2316:	69a3      	ldr	r3, [r4, #24]
    2318:	3b01      	subs	r3, #1
    231a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    231c:	f386 8811 	msr	BASEPRI, r6
    2320:	f3bf 8f6f 	isb	sy
}
    2324:	bd70      	pop	{r4, r5, r6, pc}
    2326:	bf00      	nop
    2328:	200007e6 	.word	0x200007e6

0000232c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    232c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2330:	4604      	mov	r4, r0
    2332:	4616      	mov	r6, r2
    2334:	461f      	mov	r7, r3
	__asm__ volatile(
    2336:	f04f 0320 	mov.w	r3, #32
    233a:	f3ef 8811 	mrs	r8, BASEPRI
    233e:	f383 8811 	msr	BASEPRI, r3
    2342:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    2346:	68c3      	ldr	r3, [r0, #12]
    2348:	4a32      	ldr	r2, [pc, #200]	; (2414 <z_impl_k_mutex_lock+0xe8>)
    234a:	b16b      	cbz	r3, 2368 <z_impl_k_mutex_lock+0x3c>
    234c:	6880      	ldr	r0, [r0, #8]
    234e:	6891      	ldr	r1, [r2, #8]
    2350:	4288      	cmp	r0, r1
    2352:	d019      	beq.n	2388 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    2354:	ea56 0307 	orrs.w	r3, r6, r7
    2358:	d118      	bne.n	238c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    235a:	f388 8811 	msr	BASEPRI, r8
    235e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    2362:	f06f 000f 	mvn.w	r0, #15
    2366:	e00c      	b.n	2382 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    2368:	6891      	ldr	r1, [r2, #8]
    236a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    236e:	3301      	adds	r3, #1
    2370:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    2372:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    2374:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    2376:	60a3      	str	r3, [r4, #8]
    2378:	f388 8811 	msr	BASEPRI, r8
    237c:	f3bf 8f6f 	isb	sy
		return 0;
    2380:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    2382:	b002      	add	sp, #8
    2384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    2388:	6921      	ldr	r1, [r4, #16]
    238a:	e7f0      	b.n	236e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    238c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2390:	f991 100e 	ldrsb.w	r1, [r1, #14]
    2394:	4299      	cmp	r1, r3
    2396:	bfa8      	it	ge
    2398:	4619      	movge	r1, r3
    239a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    239e:	428b      	cmp	r3, r1
    23a0:	dd2c      	ble.n	23fc <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    23a2:	f000 fb05 	bl	29b0 <z_set_prio>
    23a6:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    23a8:	4622      	mov	r2, r4
    23aa:	4641      	mov	r1, r8
    23ac:	e9cd 6700 	strd	r6, r7, [sp]
    23b0:	4819      	ldr	r0, [pc, #100]	; (2418 <z_impl_k_mutex_lock+0xec>)
    23b2:	f000 fae9 	bl	2988 <z_pend_curr>
	if (got_mutex == 0) {
    23b6:	2800      	cmp	r0, #0
    23b8:	d0e3      	beq.n	2382 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    23ba:	f04f 0320 	mov.w	r3, #32
    23be:	f3ef 8611 	mrs	r6, BASEPRI
    23c2:	f383 8811 	msr	BASEPRI, r3
    23c6:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    23ca:	6823      	ldr	r3, [r4, #0]
    23cc:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    23ce:	429c      	cmp	r4, r3
    23d0:	d007      	beq.n	23e2 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    23d2:	b133      	cbz	r3, 23e2 <z_impl_k_mutex_lock+0xb6>
    23d4:	f993 300e 	ldrsb.w	r3, [r3, #14]
    23d8:	4299      	cmp	r1, r3
    23da:	bfa8      	it	ge
    23dc:	4619      	movge	r1, r3
    23de:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    23e2:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    23e4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    23e8:	4299      	cmp	r1, r3
    23ea:	d109      	bne.n	2400 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    23ec:	b16d      	cbz	r5, 240a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    23ee:	4631      	mov	r1, r6
    23f0:	4809      	ldr	r0, [pc, #36]	; (2418 <z_impl_k_mutex_lock+0xec>)
    23f2:	f001 ffb4 	bl	435e <z_reschedule>
	return -EAGAIN;
    23f6:	f06f 000a 	mvn.w	r0, #10
    23fa:	e7c2      	b.n	2382 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    23fc:	2500      	movs	r5, #0
    23fe:	e7d3      	b.n	23a8 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    2400:	f000 fad6 	bl	29b0 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    2404:	2800      	cmp	r0, #0
    2406:	d1f2      	bne.n	23ee <z_impl_k_mutex_lock+0xc2>
    2408:	e7f0      	b.n	23ec <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    240a:	f386 8811 	msr	BASEPRI, r6
    240e:	f3bf 8f6f 	isb	sy
    2412:	e7f0      	b.n	23f6 <z_impl_k_mutex_lock+0xca>
    2414:	20000788 	.word	0x20000788
    2418:	200007e6 	.word	0x200007e6

0000241c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    241c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
    241e:	6883      	ldr	r3, [r0, #8]
{
    2420:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    2422:	2b00      	cmp	r3, #0
    2424:	d036      	beq.n	2494 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    2426:	4a1e      	ldr	r2, [pc, #120]	; (24a0 <z_impl_k_mutex_unlock+0x84>)
    2428:	6892      	ldr	r2, [r2, #8]
    242a:	4293      	cmp	r3, r2
    242c:	d135      	bne.n	249a <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    242e:	7bda      	ldrb	r2, [r3, #15]
    2430:	3a01      	subs	r2, #1
    2432:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    2434:	68c3      	ldr	r3, [r0, #12]
    2436:	2b01      	cmp	r3, #1
    2438:	d005      	beq.n	2446 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    243a:	3b01      	subs	r3, #1
    243c:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    243e:	f000 f8c3 	bl	25c8 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    2442:	2000      	movs	r0, #0
}
    2444:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    2446:	f04f 0320 	mov.w	r3, #32
    244a:	f3ef 8511 	mrs	r5, BASEPRI
    244e:	f383 8811 	msr	BASEPRI, r3
    2452:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    2456:	6901      	ldr	r1, [r0, #16]
    2458:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    245a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    245e:	4299      	cmp	r1, r3
    2460:	d001      	beq.n	2466 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    2462:	f000 faa5 	bl	29b0 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    2466:	4620      	mov	r0, r4
    2468:	f002 f813 	bl	4492 <z_unpend_first_thread>
	mutex->owner = new_owner;
    246c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    246e:	b158      	cbz	r0, 2488 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    2470:	f990 200e 	ldrsb.w	r2, [r0, #14]
    2474:	6122      	str	r2, [r4, #16]
    2476:	2200      	movs	r2, #0
    2478:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
    247a:	f001 ff97 	bl	43ac <z_ready_thread>
		z_reschedule(&lock, key);
    247e:	4629      	mov	r1, r5
    2480:	4808      	ldr	r0, [pc, #32]	; (24a4 <z_impl_k_mutex_unlock+0x88>)
    2482:	f001 ff6c 	bl	435e <z_reschedule>
    2486:	e7da      	b.n	243e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    2488:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    248a:	f385 8811 	msr	BASEPRI, r5
    248e:	f3bf 8f6f 	isb	sy
    2492:	e7d4      	b.n	243e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    2494:	f06f 0015 	mvn.w	r0, #21
    2498:	e7d4      	b.n	2444 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    249a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    249e:	e7d1      	b.n	2444 <z_impl_k_mutex_unlock+0x28>
    24a0:	20000788 	.word	0x20000788
    24a4:	200007e6 	.word	0x200007e6

000024a8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    24a8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    24aa:	4c08      	ldr	r4, [pc, #32]	; (24cc <z_reset_time_slice+0x24>)
    24ac:	6823      	ldr	r3, [r4, #0]
    24ae:	b15b      	cbz	r3, 24c8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    24b0:	f7fe fbda 	bl	c68 <z_clock_elapsed>
    24b4:	6822      	ldr	r2, [r4, #0]
    24b6:	4906      	ldr	r1, [pc, #24]	; (24d0 <z_reset_time_slice+0x28>)
    24b8:	4410      	add	r0, r2
    24ba:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
    24bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    24c0:	2100      	movs	r1, #0
    24c2:	4610      	mov	r0, r2
    24c4:	f002 b840 	b.w	4548 <z_set_timeout_expiry>
}
    24c8:	bd10      	pop	{r4, pc}
    24ca:	bf00      	nop
    24cc:	200007c0 	.word	0x200007c0
    24d0:	20000788 	.word	0x20000788

000024d4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    24d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24d6:	460c      	mov	r4, r1
	__asm__ volatile(
    24d8:	f04f 0320 	mov.w	r3, #32
    24dc:	f3ef 8511 	mrs	r5, BASEPRI
    24e0:	f383 8811 	msr	BASEPRI, r3
    24e4:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    24e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    24ec:	f240 36e7 	movw	r6, #999	; 0x3e7
    24f0:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    24f2:	2200      	movs	r2, #0
    24f4:	fbe1 6700 	umlal	r6, r7, r1, r0
    24f8:	4b09      	ldr	r3, [pc, #36]	; (2520 <k_sched_time_slice_set+0x4c>)
    24fa:	4630      	mov	r0, r6
    24fc:	611a      	str	r2, [r3, #16]
    24fe:	4639      	mov	r1, r7
    2500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2504:	2300      	movs	r3, #0
    2506:	f7fd fe99 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    250a:	4b06      	ldr	r3, [pc, #24]	; (2524 <k_sched_time_slice_set+0x50>)
    250c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    250e:	4b06      	ldr	r3, [pc, #24]	; (2528 <k_sched_time_slice_set+0x54>)
    2510:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    2512:	f7ff ffc9 	bl	24a8 <z_reset_time_slice>
	__asm__ volatile(
    2516:	f385 8811 	msr	BASEPRI, r5
    251a:	f3bf 8f6f 	isb	sy
	}
}
    251e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2520:	20000788 	.word	0x20000788
    2524:	200007c0 	.word	0x200007c0
    2528:	200007bc 	.word	0x200007bc

0000252c <k_sched_lock>:
	__asm__ volatile(
    252c:	f04f 0320 	mov.w	r3, #32
    2530:	f3ef 8111 	mrs	r1, BASEPRI
    2534:	f383 8811 	msr	BASEPRI, r3
    2538:	f3bf 8f6f 	isb	sy
    253c:	4b04      	ldr	r3, [pc, #16]	; (2550 <k_sched_lock+0x24>)
    253e:	689a      	ldr	r2, [r3, #8]
    2540:	7bd3      	ldrb	r3, [r2, #15]
    2542:	3b01      	subs	r3, #1
    2544:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    2546:	f381 8811 	msr	BASEPRI, r1
    254a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    254e:	4770      	bx	lr
    2550:	20000788 	.word	0x20000788

00002554 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    2554:	4b09      	ldr	r3, [pc, #36]	; (257c <z_priq_dumb_remove+0x28>)
    2556:	f103 0228 	add.w	r2, r3, #40	; 0x28
    255a:	4282      	cmp	r2, r0
    255c:	d105      	bne.n	256a <z_priq_dumb_remove+0x16>
    255e:	689b      	ldr	r3, [r3, #8]
    2560:	428b      	cmp	r3, r1
    2562:	d102      	bne.n	256a <z_priq_dumb_remove+0x16>
    2564:	7b4b      	ldrb	r3, [r1, #13]
    2566:	06db      	lsls	r3, r3, #27
    2568:	d106      	bne.n	2578 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    256a:	e9d1 3200 	ldrd	r3, r2, [r1]
    256e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2570:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2572:	2300      	movs	r3, #0
	node->prev = NULL;
    2574:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    2578:	4770      	bx	lr
    257a:	bf00      	nop
    257c:	20000788 	.word	0x20000788

00002580 <update_cache>:
{
    2580:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    2582:	4c10      	ldr	r4, [pc, #64]	; (25c4 <update_cache+0x44>)
{
    2584:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    2586:	f104 0028 	add.w	r0, r4, #40	; 0x28
    258a:	f001 ff09 	bl	43a0 <z_priq_dumb_best>
    258e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    2590:	68a3      	ldr	r3, [r4, #8]
    2592:	7b59      	ldrb	r1, [r3, #13]
    2594:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    2596:	bf44      	itt	mi
    2598:	f041 0108 	orrmi.w	r1, r1, #8
    259c:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    259e:	b905      	cbnz	r5, 25a2 <update_cache+0x22>
    25a0:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    25a2:	b94e      	cbnz	r6, 25b8 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    25a4:	7b5a      	ldrb	r2, [r3, #13]
    25a6:	06d2      	lsls	r2, r2, #27
    25a8:	d106      	bne.n	25b8 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    25aa:	69aa      	ldr	r2, [r5, #24]
    25ac:	b922      	cbnz	r2, 25b8 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    25ae:	89da      	ldrh	r2, [r3, #14]
    25b0:	2a7f      	cmp	r2, #127	; 0x7f
    25b2:	d901      	bls.n	25b8 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    25b4:	6263      	str	r3, [r4, #36]	; 0x24
}
    25b6:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    25b8:	42ab      	cmp	r3, r5
    25ba:	d001      	beq.n	25c0 <update_cache+0x40>
			z_reset_time_slice();
    25bc:	f7ff ff74 	bl	24a8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    25c0:	6265      	str	r5, [r4, #36]	; 0x24
}
    25c2:	e7f8      	b.n	25b6 <update_cache+0x36>
    25c4:	20000788 	.word	0x20000788

000025c8 <k_sched_unlock>:
{
    25c8:	b510      	push	{r4, lr}
	__asm__ volatile(
    25ca:	f04f 0320 	mov.w	r3, #32
    25ce:	f3ef 8411 	mrs	r4, BASEPRI
    25d2:	f383 8811 	msr	BASEPRI, r3
    25d6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    25da:	4b08      	ldr	r3, [pc, #32]	; (25fc <k_sched_unlock+0x34>)
		update_cache(0);
    25dc:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    25de:	689a      	ldr	r2, [r3, #8]
    25e0:	7bd3      	ldrb	r3, [r2, #15]
    25e2:	3301      	adds	r3, #1
    25e4:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    25e6:	f7ff ffcb 	bl	2580 <update_cache>
	__asm__ volatile(
    25ea:	f384 8811 	msr	BASEPRI, r4
    25ee:	f3bf 8f6f 	isb	sy
}
    25f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    25f6:	f001 bec9 	b.w	438c <z_reschedule_unlocked>
    25fa:	bf00      	nop
    25fc:	20000788 	.word	0x20000788

00002600 <ready_thread>:
{
    2600:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2602:	7b43      	ldrb	r3, [r0, #13]
    2604:	06db      	lsls	r3, r3, #27
    2606:	d127      	bne.n	2658 <ready_thread+0x58>
	if (z_is_thread_ready(thread)) {
    2608:	6983      	ldr	r3, [r0, #24]
    260a:	bb2b      	cbnz	r3, 2658 <ready_thread+0x58>
	return list->head == list;
    260c:	4a13      	ldr	r2, [pc, #76]	; (265c <ready_thread+0x5c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    260e:	f102 0128 	add.w	r1, r2, #40	; 0x28
    2612:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
    2616:	428b      	cmp	r3, r1
    2618:	d018      	beq.n	264c <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    261a:	b1bb      	cbz	r3, 264c <ready_thread+0x4c>
	if (thread_1->base.prio < thread_2->base.prio) {
    261c:	f990 500e 	ldrsb.w	r5, [r0, #14]
    2620:	f993 600e 	ldrsb.w	r6, [r3, #14]
    2624:	42ae      	cmp	r6, r5
    2626:	dd0c      	ble.n	2642 <ready_thread+0x42>
	node->prev = successor->prev;
    2628:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    262a:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    262e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    2630:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    2632:	7b43      	ldrb	r3, [r0, #13]
    2634:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2638:	7343      	strb	r3, [r0, #13]
}
    263a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    263c:	2000      	movs	r0, #0
    263e:	f7ff bf9f 	b.w	2580 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    2642:	429c      	cmp	r4, r3
    2644:	d002      	beq.n	264c <ready_thread+0x4c>
    2646:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2648:	2b00      	cmp	r3, #0
    264a:	d1e9      	bne.n	2620 <ready_thread+0x20>
	node->prev = list->tail;
    264c:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    2650:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2652:	6018      	str	r0, [r3, #0]
	list->tail = node;
    2654:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    2656:	e7ec      	b.n	2632 <ready_thread+0x32>
}
    2658:	bc70      	pop	{r4, r5, r6}
    265a:	4770      	bx	lr
    265c:	20000788 	.word	0x20000788

00002660 <z_sched_start>:
{
    2660:	b510      	push	{r4, lr}
	__asm__ volatile(
    2662:	f04f 0220 	mov.w	r2, #32
    2666:	f3ef 8411 	mrs	r4, BASEPRI
    266a:	f382 8811 	msr	BASEPRI, r2
    266e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    2672:	7b42      	ldrb	r2, [r0, #13]
    2674:	0751      	lsls	r1, r2, #29
    2676:	d404      	bmi.n	2682 <z_sched_start+0x22>
	__asm__ volatile(
    2678:	f384 8811 	msr	BASEPRI, r4
    267c:	f3bf 8f6f 	isb	sy
}
    2680:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2682:	f022 0204 	bic.w	r2, r2, #4
    2686:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    2688:	f7ff ffba 	bl	2600 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    268c:	4621      	mov	r1, r4
}
    268e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    2692:	4801      	ldr	r0, [pc, #4]	; (2698 <z_sched_start+0x38>)
    2694:	f001 be63 	b.w	435e <z_reschedule>
    2698:	200007e6 	.word	0x200007e6

0000269c <z_move_thread_to_end_of_prio_q>:
{
    269c:	4601      	mov	r1, r0
    269e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    26a0:	f04f 0320 	mov.w	r3, #32
    26a4:	f3ef 8411 	mrs	r4, BASEPRI
    26a8:	f383 8811 	msr	BASEPRI, r3
    26ac:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    26b0:	f990 300d 	ldrsb.w	r3, [r0, #13]
    26b4:	2b00      	cmp	r3, #0
    26b6:	da02      	bge.n	26be <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    26b8:	4817      	ldr	r0, [pc, #92]	; (2718 <z_move_thread_to_end_of_prio_q+0x7c>)
    26ba:	f7ff ff4b 	bl	2554 <z_priq_dumb_remove>
	return list->head == list;
    26be:	4a17      	ldr	r2, [pc, #92]	; (271c <z_move_thread_to_end_of_prio_q+0x80>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    26c0:	f102 0028 	add.w	r0, r2, #40	; 0x28
    26c4:	e9d2 350a 	ldrd	r3, r5, [r2, #40]	; 0x28
    26c8:	4283      	cmp	r3, r0
    26ca:	d01f      	beq.n	270c <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    26cc:	b1f3      	cbz	r3, 270c <z_move_thread_to_end_of_prio_q+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    26ce:	f991 600e 	ldrsb.w	r6, [r1, #14]
    26d2:	f993 700e 	ldrsb.w	r7, [r3, #14]
    26d6:	42b7      	cmp	r7, r6
    26d8:	dd13      	ble.n	2702 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
    26da:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    26dc:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    26e0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    26e2:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    26e4:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
    26e6:	6890      	ldr	r0, [r2, #8]
    26e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    26ec:	734b      	strb	r3, [r1, #13]
    26ee:	1a43      	subs	r3, r0, r1
    26f0:	4258      	negs	r0, r3
    26f2:	4158      	adcs	r0, r3
    26f4:	f7ff ff44 	bl	2580 <update_cache>
	__asm__ volatile(
    26f8:	f384 8811 	msr	BASEPRI, r4
    26fc:	f3bf 8f6f 	isb	sy
}
    2700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    2702:	429d      	cmp	r5, r3
    2704:	d002      	beq.n	270c <z_move_thread_to_end_of_prio_q+0x70>
    2706:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2708:	2b00      	cmp	r3, #0
    270a:	d1e2      	bne.n	26d2 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    270c:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
    2710:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2712:	6019      	str	r1, [r3, #0]
	list->tail = node;
    2714:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    2716:	e7e5      	b.n	26e4 <z_move_thread_to_end_of_prio_q+0x48>
    2718:	200007b0 	.word	0x200007b0
    271c:	20000788 	.word	0x20000788

00002720 <z_time_slice>:
{
    2720:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    2722:	4a15      	ldr	r2, [pc, #84]	; (2778 <z_time_slice+0x58>)
    2724:	4b15      	ldr	r3, [pc, #84]	; (277c <z_time_slice+0x5c>)
    2726:	6814      	ldr	r4, [r2, #0]
{
    2728:	4601      	mov	r1, r0
	if (pending_current == _current) {
    272a:	6898      	ldr	r0, [r3, #8]
    272c:	42a0      	cmp	r0, r4
    272e:	461c      	mov	r4, r3
    2730:	d103      	bne.n	273a <z_time_slice+0x1a>
}
    2732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    2736:	f7ff beb7 	b.w	24a8 <z_reset_time_slice>
	pending_current = NULL;
    273a:	2500      	movs	r5, #0
    273c:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    273e:	4a10      	ldr	r2, [pc, #64]	; (2780 <z_time_slice+0x60>)
    2740:	6812      	ldr	r2, [r2, #0]
    2742:	b1b2      	cbz	r2, 2772 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    2744:	89c2      	ldrh	r2, [r0, #14]
    2746:	2a7f      	cmp	r2, #127	; 0x7f
    2748:	d813      	bhi.n	2772 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    274a:	4a0e      	ldr	r2, [pc, #56]	; (2784 <z_time_slice+0x64>)
    274c:	f990 500e 	ldrsb.w	r5, [r0, #14]
    2750:	6812      	ldr	r2, [r2, #0]
    2752:	4295      	cmp	r5, r2
    2754:	db0d      	blt.n	2772 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    2756:	4a0c      	ldr	r2, [pc, #48]	; (2788 <z_time_slice+0x68>)
    2758:	4290      	cmp	r0, r2
    275a:	d00a      	beq.n	2772 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    275c:	6982      	ldr	r2, [r0, #24]
    275e:	b942      	cbnz	r2, 2772 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    2760:	691a      	ldr	r2, [r3, #16]
    2762:	428a      	cmp	r2, r1
    2764:	dc02      	bgt.n	276c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    2766:	f7ff ff99 	bl	269c <z_move_thread_to_end_of_prio_q>
    276a:	e7e2      	b.n	2732 <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
    276c:	1a52      	subs	r2, r2, r1
    276e:	611a      	str	r2, [r3, #16]
}
    2770:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    2772:	2300      	movs	r3, #0
    2774:	6123      	str	r3, [r4, #16]
    2776:	e7fb      	b.n	2770 <z_time_slice+0x50>
    2778:	200007b8 	.word	0x200007b8
    277c:	20000788 	.word	0x20000788
    2780:	200007c0 	.word	0x200007c0
    2784:	200007bc 	.word	0x200007bc
    2788:	200006a0 	.word	0x200006a0

0000278c <z_impl_k_thread_suspend>:
{
    278c:	b570      	push	{r4, r5, r6, lr}
    278e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    2790:	3018      	adds	r0, #24
    2792:	f001 feb3 	bl	44fc <z_abort_timeout>
	__asm__ volatile(
    2796:	f04f 0320 	mov.w	r3, #32
    279a:	f3ef 8611 	mrs	r6, BASEPRI
    279e:	f383 8811 	msr	BASEPRI, r3
    27a2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    27a6:	f994 300d 	ldrsb.w	r3, [r4, #13]
    27aa:	2b00      	cmp	r3, #0
    27ac:	da07      	bge.n	27be <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    27ae:	4621      	mov	r1, r4
    27b0:	480e      	ldr	r0, [pc, #56]	; (27ec <z_impl_k_thread_suspend+0x60>)
    27b2:	f7ff fecf 	bl	2554 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    27b6:	7b63      	ldrb	r3, [r4, #13]
    27b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    27bc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    27be:	4d0c      	ldr	r5, [pc, #48]	; (27f0 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    27c0:	7b63      	ldrb	r3, [r4, #13]
    27c2:	68a8      	ldr	r0, [r5, #8]
    27c4:	f043 0310 	orr.w	r3, r3, #16
    27c8:	7363      	strb	r3, [r4, #13]
    27ca:	1b03      	subs	r3, r0, r4
    27cc:	4258      	negs	r0, r3
    27ce:	4158      	adcs	r0, r3
    27d0:	f7ff fed6 	bl	2580 <update_cache>
	__asm__ volatile(
    27d4:	f386 8811 	msr	BASEPRI, r6
    27d8:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    27dc:	68ab      	ldr	r3, [r5, #8]
    27de:	42a3      	cmp	r3, r4
    27e0:	d103      	bne.n	27ea <z_impl_k_thread_suspend+0x5e>
}
    27e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    27e6:	f001 bdd1 	b.w	438c <z_reschedule_unlocked>
}
    27ea:	bd70      	pop	{r4, r5, r6, pc}
    27ec:	200007b0 	.word	0x200007b0
    27f0:	20000788 	.word	0x20000788

000027f4 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    27f4:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
    27f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27fa:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    27fc:	b103      	cbz	r3, 2800 <z_thread_single_abort+0xc>
		thread->fn_abort();
    27fe:	4798      	blx	r3
    2800:	f104 0018 	add.w	r0, r4, #24
    2804:	f001 fe7a 	bl	44fc <z_abort_timeout>
	__asm__ volatile(
    2808:	f04f 0320 	mov.w	r3, #32
    280c:	f3ef 8611 	mrs	r6, BASEPRI
    2810:	f383 8811 	msr	BASEPRI, r3
    2814:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2818:	7b63      	ldrb	r3, [r4, #13]
    281a:	06d8      	lsls	r0, r3, #27
    281c:	d123      	bne.n	2866 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
    281e:	69a2      	ldr	r2, [r4, #24]
    2820:	bb0a      	cbnz	r2, 2866 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
    2822:	0619      	lsls	r1, r3, #24
    2824:	d507      	bpl.n	2836 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    2826:	4621      	mov	r1, r4
    2828:	481e      	ldr	r0, [pc, #120]	; (28a4 <z_thread_single_abort+0xb0>)
    282a:	f7ff fe93 	bl	2554 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    282e:	7b63      	ldrb	r3, [r4, #13]
    2830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2834:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    2836:	4b1c      	ldr	r3, [pc, #112]	; (28a8 <z_thread_single_abort+0xb4>)
    2838:	6898      	ldr	r0, [r3, #8]
    283a:	1b02      	subs	r2, r0, r4
    283c:	4250      	negs	r0, r2
    283e:	4150      	adcs	r0, r2
    2840:	f7ff fe9e 	bl	2580 <update_cache>
			waiter->base.pended_on = NULL;
    2844:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
    2846:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    2848:	f104 0828 	add.w	r8, r4, #40	; 0x28
    284c:	f043 0308 	orr.w	r3, r3, #8
    2850:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    2852:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2854:	4545      	cmp	r5, r8
    2856:	d000      	beq.n	285a <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    2858:	b995      	cbnz	r5, 2880 <z_thread_single_abort+0x8c>
	__asm__ volatile(
    285a:	f386 8811 	msr	BASEPRI, r6
    285e:	f3bf 8f6f 	isb	sy
}
    2862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    2866:	079b      	lsls	r3, r3, #30
    2868:	d5ec      	bpl.n	2844 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    286a:	4621      	mov	r1, r4
    286c:	68a0      	ldr	r0, [r4, #8]
    286e:	f7ff fe71 	bl	2554 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2872:	7b63      	ldrb	r3, [r4, #13]
    2874:	f023 0302 	bic.w	r3, r3, #2
    2878:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    287a:	2300      	movs	r3, #0
    287c:	60a3      	str	r3, [r4, #8]
    287e:	e7e1      	b.n	2844 <z_thread_single_abort+0x50>
    2880:	f105 0018 	add.w	r0, r5, #24
    2884:	f001 fe3a 	bl	44fc <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    2888:	68a8      	ldr	r0, [r5, #8]
    288a:	4629      	mov	r1, r5
    288c:	f7ff fe62 	bl	2554 <z_priq_dumb_remove>
    2890:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
    2892:	4628      	mov	r0, r5
    2894:	f023 0302 	bic.w	r3, r3, #2
    2898:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    289a:	60af      	str	r7, [r5, #8]
    289c:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
    289e:	f7ff feaf 	bl	2600 <ready_thread>
    28a2:	e7d6      	b.n	2852 <z_thread_single_abort+0x5e>
    28a4:	200007b0 	.word	0x200007b0
    28a8:	20000788 	.word	0x20000788

000028ac <unready_thread>:
{
    28ac:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    28ae:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    28b2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    28b4:	2b00      	cmp	r3, #0
    28b6:	da06      	bge.n	28c6 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    28b8:	4807      	ldr	r0, [pc, #28]	; (28d8 <unready_thread+0x2c>)
    28ba:	f7ff fe4b 	bl	2554 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    28be:	7b4b      	ldrb	r3, [r1, #13]
    28c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    28c4:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    28c6:	4b05      	ldr	r3, [pc, #20]	; (28dc <unready_thread+0x30>)
    28c8:	6898      	ldr	r0, [r3, #8]
    28ca:	1a43      	subs	r3, r0, r1
    28cc:	4258      	negs	r0, r3
    28ce:	4158      	adcs	r0, r3
}
    28d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    28d4:	f7ff be54 	b.w	2580 <update_cache>
    28d8:	200007b0 	.word	0x200007b0
    28dc:	20000788 	.word	0x20000788

000028e0 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    28e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28e2:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    28e4:	f001 fe4b 	bl	457e <z_tick_get_32>
    28e8:	182c      	adds	r4, r5, r0
	__asm__ volatile(
    28ea:	f04f 0320 	mov.w	r3, #32
    28ee:	f3ef 8711 	mrs	r7, BASEPRI
    28f2:	f383 8811 	msr	BASEPRI, r3
    28f6:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    28fa:	4e0d      	ldr	r6, [pc, #52]	; (2930 <z_tick_sleep.part.0+0x50>)
    28fc:	4b0d      	ldr	r3, [pc, #52]	; (2934 <z_tick_sleep.part.0+0x54>)
    28fe:	68b0      	ldr	r0, [r6, #8]
    2900:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    2902:	f001 fd8e 	bl	4422 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
    2906:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    2908:	490b      	ldr	r1, [pc, #44]	; (2938 <z_tick_sleep.part.0+0x58>)
    290a:	462a      	mov	r2, r5
    290c:	17eb      	asrs	r3, r5, #31
    290e:	3018      	adds	r0, #24
    2910:	f000 f9ce 	bl	2cb0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    2914:	68b2      	ldr	r2, [r6, #8]
	ret = arch_swap(key);
    2916:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2918:	7b53      	ldrb	r3, [r2, #13]
    291a:	f043 0310 	orr.w	r3, r3, #16
    291e:	7353      	strb	r3, [r2, #13]
    2920:	f7fe fca0 	bl	1264 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    2924:	f001 fe2b 	bl	457e <z_tick_get_32>
    2928:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    292a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    292e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2930:	20000788 	.word	0x20000788
    2934:	200007b8 	.word	0x200007b8
    2938:	000043cd 	.word	0x000043cd

0000293c <pend>:
{
    293c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2940:	4606      	mov	r6, r0
    2942:	4614      	mov	r4, r2
    2944:	461d      	mov	r5, r3
    2946:	f04f 0320 	mov.w	r3, #32
    294a:	f3ef 8711 	mrs	r7, BASEPRI
    294e:	f383 8811 	msr	BASEPRI, r3
    2952:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    2956:	f001 fd74 	bl	4442 <add_to_waitq_locked>
	__asm__ volatile(
    295a:	f387 8811 	msr	BASEPRI, r7
    295e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2962:	1c6b      	adds	r3, r5, #1
    2964:	bf08      	it	eq
    2966:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    296a:	d008      	beq.n	297e <pend+0x42>
    296c:	4622      	mov	r2, r4
    296e:	462b      	mov	r3, r5
    2970:	f106 0018 	add.w	r0, r6, #24
    2974:	4903      	ldr	r1, [pc, #12]	; (2984 <pend+0x48>)
}
    2976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    297a:	f000 b999 	b.w	2cb0 <z_add_timeout>
    297e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2982:	bf00      	nop
    2984:	000043cd 	.word	0x000043cd

00002988 <z_pend_curr>:
{
    2988:	b510      	push	{r4, lr}
    298a:	460c      	mov	r4, r1
	pending_current = _current;
    298c:	4b06      	ldr	r3, [pc, #24]	; (29a8 <z_pend_curr+0x20>)
{
    298e:	4611      	mov	r1, r2
	pending_current = _current;
    2990:	6898      	ldr	r0, [r3, #8]
    2992:	4b06      	ldr	r3, [pc, #24]	; (29ac <z_pend_curr+0x24>)
    2994:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    2996:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    299a:	f7ff ffcf 	bl	293c <pend>
    299e:	4620      	mov	r0, r4
}
    29a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    29a4:	f7fe bc5e 	b.w	1264 <arch_swap>
    29a8:	20000788 	.word	0x20000788
    29ac:	200007b8 	.word	0x200007b8

000029b0 <z_set_prio>:
{
    29b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29b2:	4604      	mov	r4, r0
	__asm__ volatile(
    29b4:	f04f 0320 	mov.w	r3, #32
    29b8:	f3ef 8711 	mrs	r7, BASEPRI
    29bc:	f383 8811 	msr	BASEPRI, r3
    29c0:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    29c4:	7b43      	ldrb	r3, [r0, #13]
    29c6:	b24e      	sxtb	r6, r1
    29c8:	06db      	lsls	r3, r3, #27
    29ca:	d12c      	bne.n	2a26 <z_set_prio+0x76>
		if (need_sched) {
    29cc:	6983      	ldr	r3, [r0, #24]
    29ce:	bb53      	cbnz	r3, 2a26 <z_set_prio+0x76>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    29d0:	4d16      	ldr	r5, [pc, #88]	; (2a2c <z_set_prio+0x7c>)
    29d2:	4621      	mov	r1, r4
    29d4:	f105 0028 	add.w	r0, r5, #40	; 0x28
    29d8:	f7ff fdbc 	bl	2554 <z_priq_dumb_remove>
	return list->head == list;
    29dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    29de:	462a      	mov	r2, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
    29e0:	4283      	cmp	r3, r0
				thread->base.prio = prio;
    29e2:	73a6      	strb	r6, [r4, #14]
    29e4:	d018      	beq.n	2a18 <z_set_prio+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    29e6:	b1bb      	cbz	r3, 2a18 <z_set_prio+0x68>
    29e8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    29ea:	f993 500e 	ldrsb.w	r5, [r3, #14]
    29ee:	42b5      	cmp	r5, r6
    29f0:	dd0d      	ble.n	2a0e <z_set_prio+0x5e>
	node->prev = successor->prev;
    29f2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    29f4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    29f8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    29fa:	605c      	str	r4, [r3, #4]
			update_cache(1);
    29fc:	2001      	movs	r0, #1
    29fe:	f7ff fdbf 	bl	2580 <update_cache>
    2a02:	2001      	movs	r0, #1
	__asm__ volatile(
    2a04:	f387 8811 	msr	BASEPRI, r7
    2a08:	f3bf 8f6f 	isb	sy
}
    2a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    2a0e:	428b      	cmp	r3, r1
    2a10:	d002      	beq.n	2a18 <z_set_prio+0x68>
    2a12:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2a14:	2b00      	cmp	r3, #0
    2a16:	d1e8      	bne.n	29ea <z_set_prio+0x3a>
	node->prev = list->tail;
    2a18:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    2a1a:	6020      	str	r0, [r4, #0]
	node->prev = list->tail;
    2a1c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    2a1e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2a20:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2a22:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    2a24:	e7ea      	b.n	29fc <z_set_prio+0x4c>
			thread->base.prio = prio;
    2a26:	2000      	movs	r0, #0
    2a28:	73a6      	strb	r6, [r4, #14]
    2a2a:	e7eb      	b.n	2a04 <z_set_prio+0x54>
    2a2c:	20000788 	.word	0x20000788

00002a30 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    2a30:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    2a32:	4b04      	ldr	r3, [pc, #16]	; (2a44 <z_sched_init+0x14>)
    2a34:	4608      	mov	r0, r1
    2a36:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2a3a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    2a3e:	f7ff bd49 	b.w	24d4 <k_sched_time_slice_set>
    2a42:	bf00      	nop
    2a44:	20000788 	.word	0x20000788

00002a48 <z_impl_k_yield>:
{
    2a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    2a4a:	4c23      	ldr	r4, [pc, #140]	; (2ad8 <z_impl_k_yield+0x90>)
    2a4c:	4b23      	ldr	r3, [pc, #140]	; (2adc <z_impl_k_yield+0x94>)
    2a4e:	68a2      	ldr	r2, [r4, #8]
    2a50:	429a      	cmp	r2, r3
    2a52:	d028      	beq.n	2aa6 <z_impl_k_yield+0x5e>
	__asm__ volatile(
    2a54:	f04f 0320 	mov.w	r3, #32
    2a58:	f3ef 8511 	mrs	r5, BASEPRI
    2a5c:	f383 8811 	msr	BASEPRI, r3
    2a60:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    2a64:	f104 0028 	add.w	r0, r4, #40	; 0x28
    2a68:	68a1      	ldr	r1, [r4, #8]
    2a6a:	f7ff fd73 	bl	2554 <z_priq_dumb_remove>
	return list->head == list;
    2a6e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    2a70:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2a72:	4282      	cmp	r2, r0
    2a74:	d028      	beq.n	2ac8 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2a76:	b33a      	cbz	r2, 2ac8 <z_impl_k_yield+0x80>
    2a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    2a7a:	f993 100e 	ldrsb.w	r1, [r3, #14]
    2a7e:	f992 700e 	ldrsb.w	r7, [r2, #14]
    2a82:	428f      	cmp	r7, r1
    2a84:	dd1b      	ble.n	2abe <z_impl_k_yield+0x76>
	node->prev = successor->prev;
    2a86:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    2a88:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
    2a8c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    2a8e:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
    2a90:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
    2a92:	2001      	movs	r0, #1
    2a94:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2a98:	735a      	strb	r2, [r3, #13]
    2a9a:	f7ff fd71 	bl	2580 <update_cache>
	__asm__ volatile(
    2a9e:	f385 8811 	msr	BASEPRI, r5
    2aa2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    2aa6:	f04f 0320 	mov.w	r3, #32
    2aaa:	f3ef 8011 	mrs	r0, BASEPRI
    2aae:	f383 8811 	msr	BASEPRI, r3
    2ab2:	f3bf 8f6f 	isb	sy
}
    2ab6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2aba:	f7fe bbd3 	b.w	1264 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    2abe:	4296      	cmp	r6, r2
    2ac0:	d002      	beq.n	2ac8 <z_impl_k_yield+0x80>
    2ac2:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2ac4:	2a00      	cmp	r2, #0
    2ac6:	d1da      	bne.n	2a7e <z_impl_k_yield+0x36>
	node->prev = list->tail;
    2ac8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
    2aca:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
    2acc:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    2ace:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2ad0:	6013      	str	r3, [r2, #0]
	list->tail = node;
    2ad2:	62e3      	str	r3, [r4, #44]	; 0x2c
}
    2ad4:	e7dc      	b.n	2a90 <z_impl_k_yield+0x48>
    2ad6:	bf00      	nop
    2ad8:	20000788 	.word	0x20000788
    2adc:	200006a0 	.word	0x200006a0

00002ae0 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
    2ae0:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2ae2:	3301      	adds	r3, #1
    2ae4:	bf08      	it	eq
    2ae6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    2aea:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2aec:	d106      	bne.n	2afc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    2aee:	4b0b      	ldr	r3, [pc, #44]	; (2b1c <z_impl_k_sleep+0x3c>)
    2af0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    2af2:	f7ff fe4b 	bl	278c <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
    2af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    2afa:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    2afc:	4604      	mov	r4, r0
	if (ticks == 0) {
    2afe:	b948      	cbnz	r0, 2b14 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
    2b00:	f7ff ffa2 	bl	2a48 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    2b04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2b08:	fb84 3400 	smull	r3, r4, r4, r0
    2b0c:	0bd8      	lsrs	r0, r3, #15
    2b0e:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    2b12:	e7f2      	b.n	2afa <z_impl_k_sleep+0x1a>
    2b14:	f7ff fee4 	bl	28e0 <z_tick_sleep.part.0>
    2b18:	4604      	mov	r4, r0
    2b1a:	e7f3      	b.n	2b04 <z_impl_k_sleep+0x24>
    2b1c:	20000788 	.word	0x20000788

00002b20 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    2b20:	4b01      	ldr	r3, [pc, #4]	; (2b28 <z_impl_k_current_get+0x8>)
    2b22:	6898      	ldr	r0, [r3, #8]
    2b24:	4770      	bx	lr
    2b26:	bf00      	nop
    2b28:	20000788 	.word	0x20000788

00002b2c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    2b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
    2b2e:	f100 0528 	add.w	r5, r0, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2b32:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
    2b36:	2504      	movs	r5, #4
    2b38:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    2b3a:	2500      	movs	r5, #0
{
    2b3c:	4604      	mov	r4, r0
    2b3e:	b087      	sub	sp, #28
    2b40:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2b44:	e9cd 6703 	strd	r6, r7, [sp, #12]
	thread_base->prio = priority;
    2b48:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2b4a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	node->prev = NULL;
    2b4c:	e9c0 5506 	strd	r5, r5, [r0, #24]
    2b50:	9602      	str	r6, [sp, #8]
    2b52:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	thread_base->user_options = (u8_t)options;
    2b54:	7307      	strb	r7, [r0, #12]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2b56:	9601      	str	r6, [sp, #4]
    2b58:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
    2b5a:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2b5c:	9600      	str	r6, [sp, #0]
    2b5e:	f7fe fbf5 	bl	134c <arch_new_thread>
	if (!_current) {
    2b62:	4b04      	ldr	r3, [pc, #16]	; (2b74 <z_setup_new_thread+0x48>)
	new_thread->fn_abort = NULL;
    2b64:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
    2b68:	689b      	ldr	r3, [r3, #8]
    2b6a:	b103      	cbz	r3, 2b6e <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
    2b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2b6e:	66a3      	str	r3, [r4, #104]	; 0x68
}
    2b70:	b007      	add	sp, #28
    2b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b74:	20000788 	.word	0x20000788

00002b78 <z_init_static_threads>:
{
    2b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    2b7c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2c34 <z_init_static_threads+0xbc>
    2b80:	4d2b      	ldr	r5, [pc, #172]	; (2c30 <z_init_static_threads+0xb8>)
    2b82:	46c8      	mov	r8, r9
{
    2b84:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    2b86:	454d      	cmp	r5, r9
    2b88:	f105 0430 	add.w	r4, r5, #48	; 0x30
    2b8c:	d30d      	bcc.n	2baa <z_init_static_threads+0x32>
	k_sched_lock();
    2b8e:	f7ff fccd 	bl	252c <k_sched_lock>
			return (u32_t)((t * to_hz + off) / from_hz);
    2b92:	f44f 4900 	mov.w	r9, #32768	; 0x8000
	_FOREACH_STATIC_THREAD(thread_data) {
    2b96:	4c26      	ldr	r4, [pc, #152]	; (2c30 <z_init_static_threads+0xb8>)
    2b98:	f8df a09c 	ldr.w	sl, [pc, #156]	; 2c38 <z_init_static_threads+0xc0>
    2b9c:	4544      	cmp	r4, r8
    2b9e:	d321      	bcc.n	2be4 <z_init_static_threads+0x6c>
}
    2ba0:	b007      	add	sp, #28
    2ba2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    2ba6:	f7ff bd0f 	b.w	25c8 <k_sched_unlock>
		z_setup_new_thread(
    2baa:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2bae:	9305      	str	r3, [sp, #20]
    2bb0:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2bb4:	9304      	str	r3, [sp, #16]
    2bb6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2bba:	9303      	str	r3, [sp, #12]
    2bbc:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2bc0:	9302      	str	r3, [sp, #8]
    2bc2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2bc6:	9301      	str	r3, [sp, #4]
    2bc8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2bcc:	9300      	str	r3, [sp, #0]
    2bce:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2bd2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2bd6:	f7ff ffa9 	bl	2b2c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2bda:	f854 3c30 	ldr.w	r3, [r4, #-48]
    2bde:	655d      	str	r5, [r3, #84]	; 0x54
    2be0:	4625      	mov	r5, r4
    2be2:	e7d0      	b.n	2b86 <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    2be4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2be6:	1c4b      	adds	r3, r1, #1
    2be8:	d017      	beq.n	2c1a <z_init_static_threads+0xa2>
    2bea:	f240 3be7 	movw	fp, #999	; 0x3e7
    2bee:	f04f 0c00 	mov.w	ip, #0
					    K_MSEC(thread_data->init_delay));
    2bf2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    2bf6:	fbc9 bc01 	smlal	fp, ip, r9, r1
    2bfa:	2300      	movs	r3, #0
    2bfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2c00:	4658      	mov	r0, fp
    2c02:	4661      	mov	r1, ip
    2c04:	f7fd fb1a 	bl	23c <__aeabi_uldivmod>
    2c08:	2700      	movs	r7, #0
    2c0a:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2c0c:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
    2c10:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2c12:	d104      	bne.n	2c1e <z_init_static_threads+0xa6>
	z_sched_start(thread);
    2c14:	4628      	mov	r0, r5
    2c16:	f7ff fd23 	bl	2660 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2c1a:	3430      	adds	r4, #48	; 0x30
    2c1c:	e7be      	b.n	2b9c <z_init_static_threads+0x24>
    2c1e:	4602      	mov	r2, r0
    2c20:	463b      	mov	r3, r7
    2c22:	4651      	mov	r1, sl
    2c24:	f105 0018 	add.w	r0, r5, #24
    2c28:	f000 f842 	bl	2cb0 <z_add_timeout>
    2c2c:	e7f5      	b.n	2c1a <z_init_static_threads+0xa2>
    2c2e:	bf00      	nop
    2c30:	200000e4 	.word	0x200000e4
    2c34:	200000e4 	.word	0x200000e4
    2c38:	000043cd 	.word	0x000043cd

00002c3c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    2c3c:	4b03      	ldr	r3, [pc, #12]	; (2c4c <elapsed+0x10>)
    2c3e:	681b      	ldr	r3, [r3, #0]
    2c40:	b90b      	cbnz	r3, 2c46 <elapsed+0xa>
    2c42:	f7fe b811 	b.w	c68 <z_clock_elapsed>
}
    2c46:	2000      	movs	r0, #0
    2c48:	4770      	bx	lr
    2c4a:	bf00      	nop
    2c4c:	200007c4 	.word	0x200007c4

00002c50 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2c50:	6803      	ldr	r3, [r0, #0]
    2c52:	b140      	cbz	r0, 2c66 <remove_timeout+0x16>
    2c54:	4a07      	ldr	r2, [pc, #28]	; (2c74 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    2c56:	6852      	ldr	r2, [r2, #4]
    2c58:	4290      	cmp	r0, r2
    2c5a:	d004      	beq.n	2c66 <remove_timeout+0x16>
	if (next(t) != NULL) {
    2c5c:	b11b      	cbz	r3, 2c66 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    2c5e:	689a      	ldr	r2, [r3, #8]
    2c60:	6881      	ldr	r1, [r0, #8]
    2c62:	440a      	add	r2, r1
    2c64:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    2c66:	6842      	ldr	r2, [r0, #4]
    2c68:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2c6a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2c6c:	2300      	movs	r3, #0
	node->prev = NULL;
    2c6e:	e9c0 3300 	strd	r3, r3, [r0]
}
    2c72:	4770      	bx	lr
    2c74:	2000004c 	.word	0x2000004c

00002c78 <next_timeout>:
	return list->head == list;
    2c78:	4b0b      	ldr	r3, [pc, #44]	; (2ca8 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    2c7a:	b510      	push	{r4, lr}
    2c7c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2c7e:	429c      	cmp	r4, r3
    2c80:	bf08      	it	eq
    2c82:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    2c84:	f7ff ffda 	bl	2c3c <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2c88:	b154      	cbz	r4, 2ca0 <next_timeout+0x28>
    2c8a:	68a3      	ldr	r3, [r4, #8]
    2c8c:	1a18      	subs	r0, r3, r0
    2c8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2c92:	4b06      	ldr	r3, [pc, #24]	; (2cac <next_timeout+0x34>)
    2c94:	691b      	ldr	r3, [r3, #16]
    2c96:	b113      	cbz	r3, 2c9e <next_timeout+0x26>
    2c98:	4298      	cmp	r0, r3
    2c9a:	bfa8      	it	ge
    2c9c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    2c9e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2ca0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2ca4:	e7f5      	b.n	2c92 <next_timeout+0x1a>
    2ca6:	bf00      	nop
    2ca8:	2000004c 	.word	0x2000004c
    2cac:	20000788 	.word	0x20000788

00002cb0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    2cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cb4:	9101      	str	r1, [sp, #4]
    2cb6:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2cb8:	1c4b      	adds	r3, r1, #1
    2cba:	bf08      	it	eq
    2cbc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    2cc0:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2cc2:	d061      	beq.n	2d88 <z_add_timeout+0xd8>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    2cc4:	f06f 0301 	mvn.w	r3, #1
    2cc8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	k_ticks_t ticks = timeout.ticks + 1;
    2ccc:	1c54      	adds	r4, r2, #1
    2cce:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    2cd2:	ebb3 0804 	subs.w	r8, r3, r4
    2cd6:	eb6b 0905 	sbc.w	r9, fp, r5
    2cda:	f1b8 0f00 	cmp.w	r8, #0
    2cde:	f179 0300 	sbcs.w	r3, r9, #0
    2ce2:	db0f      	blt.n	2d04 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    2ce4:	f7ff ffaa 	bl	2c3c <elapsed>
    2ce8:	f06f 0301 	mvn.w	r3, #1
    2cec:	4a2b      	ldr	r2, [pc, #172]	; (2d9c <z_add_timeout+0xec>)
    2cee:	e9d2 1c00 	ldrd	r1, ip, [r2]
    2cf2:	1a5b      	subs	r3, r3, r1
    2cf4:	eb6b 020c 	sbc.w	r2, fp, ip
    2cf8:	1b1e      	subs	r6, r3, r4
    2cfa:	eb62 0705 	sbc.w	r7, r2, r5
    2cfe:	1a34      	subs	r4, r6, r0
    2d00:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    2d04:	9b01      	ldr	r3, [sp, #4]
    2d06:	f8ca 300c 	str.w	r3, [sl, #12]
    2d0a:	f04f 0320 	mov.w	r3, #32
    2d0e:	f3ef 8611 	mrs	r6, BASEPRI
    2d12:	f383 8811 	msr	BASEPRI, r3
    2d16:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    2d1a:	f7ff ff8f 	bl	2c3c <elapsed>
	ticks = MAX(1, ticks);
    2d1e:	2c01      	cmp	r4, #1
    2d20:	f175 0300 	sbcs.w	r3, r5, #0
    2d24:	bfb8      	it	lt
    2d26:	2401      	movlt	r4, #1
	return list->head == list;
    2d28:	4b1d      	ldr	r3, [pc, #116]	; (2da0 <z_add_timeout+0xf0>)
		to->dticks = ticks + elapsed();
    2d2a:	4420      	add	r0, r4
    2d2c:	681a      	ldr	r2, [r3, #0]
    2d2e:	f8ca 0008 	str.w	r0, [sl, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2d32:	429a      	cmp	r2, r3
    2d34:	d001      	beq.n	2d3a <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2d36:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    2d38:	b952      	cbnz	r2, 2d50 <z_add_timeout+0xa0>
	node->prev = list->tail;
    2d3a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2d3c:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    2d40:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    2d44:	685a      	ldr	r2, [r3, #4]
    2d46:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    2d4a:	f8c3 a004 	str.w	sl, [r3, #4]
}
    2d4e:	e00d      	b.n	2d6c <z_add_timeout+0xbc>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    2d50:	6890      	ldr	r0, [r2, #8]
    2d52:	f8da 1008 	ldr.w	r1, [sl, #8]
    2d56:	4288      	cmp	r0, r1
    2d58:	dd19      	ble.n	2d8e <z_add_timeout+0xde>
				t->dticks -= to->dticks;
    2d5a:	1a41      	subs	r1, r0, r1
    2d5c:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    2d5e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    2d60:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    2d64:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    2d68:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    2d6c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2d6e:	429a      	cmp	r2, r3
    2d70:	d006      	beq.n	2d80 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    2d72:	4592      	cmp	sl, r2
    2d74:	d104      	bne.n	2d80 <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
    2d76:	f7ff ff7f 	bl	2c78 <next_timeout>
    2d7a:	2100      	movs	r1, #0
    2d7c:	f7fd ff10 	bl	ba0 <z_clock_set_timeout>
	__asm__ volatile(
    2d80:	f386 8811 	msr	BASEPRI, r6
    2d84:	f3bf 8f6f 	isb	sy
		}
	}
}
    2d88:	b003      	add	sp, #12
    2d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    2d8e:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    2d90:	4294      	cmp	r4, r2
    2d92:	f8ca 1008 	str.w	r1, [sl, #8]
    2d96:	d0d0      	beq.n	2d3a <z_add_timeout+0x8a>
    2d98:	6812      	ldr	r2, [r2, #0]
    2d9a:	e7cd      	b.n	2d38 <z_add_timeout+0x88>
    2d9c:	20000148 	.word	0x20000148
    2da0:	2000004c 	.word	0x2000004c

00002da4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    2da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2da8:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    2daa:	f7ff fcb9 	bl	2720 <z_time_slice>
	__asm__ volatile(
    2dae:	f04f 0320 	mov.w	r3, #32
    2db2:	f3ef 8411 	mrs	r4, BASEPRI
    2db6:	f383 8811 	msr	BASEPRI, r3
    2dba:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    2dbe:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2e44 <z_clock_announce+0xa0>
    2dc2:	4d1f      	ldr	r5, [pc, #124]	; (2e40 <z_clock_announce+0x9c>)
    2dc4:	46c1      	mov	r9, r8
	return list->head == list;
    2dc6:	f8df a080 	ldr.w	sl, [pc, #128]	; 2e48 <z_clock_announce+0xa4>
    2dca:	602e      	str	r6, [r5, #0]
    2dcc:	f8da 0000 	ldr.w	r0, [sl]
    2dd0:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2dd2:	4550      	cmp	r0, sl
    2dd4:	e9d8 6700 	ldrd	r6, r7, [r8]
    2dd8:	d005      	beq.n	2de6 <z_clock_announce+0x42>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    2dda:	b120      	cbz	r0, 2de6 <z_clock_announce+0x42>
    2ddc:	6883      	ldr	r3, [r0, #8]
    2dde:	4293      	cmp	r3, r2
    2de0:	dd13      	ble.n	2e0a <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    2de2:	1a9b      	subs	r3, r3, r2
    2de4:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
    2de6:	18b6      	adds	r6, r6, r2
    2de8:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
    2dec:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
    2df0:	2600      	movs	r6, #0
    2df2:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    2df4:	f7ff ff40 	bl	2c78 <next_timeout>
    2df8:	4631      	mov	r1, r6
    2dfa:	f7fd fed1 	bl	ba0 <z_clock_set_timeout>
	__asm__ volatile(
    2dfe:	f384 8811 	msr	BASEPRI, r4
    2e02:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    2e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
    2e0a:	18f6      	adds	r6, r6, r3
    2e0c:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
    2e10:	1ad3      	subs	r3, r2, r3
    2e12:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
    2e14:	2300      	movs	r3, #0
    2e16:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
    2e18:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
    2e1c:	f7ff ff18 	bl	2c50 <remove_timeout>
    2e20:	f384 8811 	msr	BASEPRI, r4
    2e24:	f3bf 8f6f 	isb	sy
		t->fn(t);
    2e28:	68c3      	ldr	r3, [r0, #12]
    2e2a:	4798      	blx	r3
	__asm__ volatile(
    2e2c:	f04f 0320 	mov.w	r3, #32
    2e30:	f3ef 8411 	mrs	r4, BASEPRI
    2e34:	f383 8811 	msr	BASEPRI, r3
    2e38:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    2e3c:	e7c6      	b.n	2dcc <z_clock_announce+0x28>
    2e3e:	bf00      	nop
    2e40:	200007c4 	.word	0x200007c4
    2e44:	20000148 	.word	0x20000148
    2e48:	2000004c 	.word	0x2000004c

00002e4c <z_tick_get>:

s64_t z_tick_get(void)
{
    2e4c:	b510      	push	{r4, lr}
    2e4e:	f04f 0320 	mov.w	r3, #32
    2e52:	f3ef 8411 	mrs	r4, BASEPRI
    2e56:	f383 8811 	msr	BASEPRI, r3
    2e5a:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    2e5e:	f7fd ff03 	bl	c68 <z_clock_elapsed>
    2e62:	4b06      	ldr	r3, [pc, #24]	; (2e7c <z_tick_get+0x30>)
    2e64:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e68:	1812      	adds	r2, r2, r0
    2e6a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    2e6e:	f384 8811 	msr	BASEPRI, r4
    2e72:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    2e76:	4610      	mov	r0, r2
    2e78:	4619      	mov	r1, r3
    2e7a:	bd10      	pop	{r4, pc}
    2e7c:	20000148 	.word	0x20000148

00002e80 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    2e80:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    2e82:	4c06      	ldr	r4, [pc, #24]	; (2e9c <statics_init+0x1c>)
    2e84:	4d06      	ldr	r5, [pc, #24]	; (2ea0 <statics_init+0x20>)
    2e86:	42ac      	cmp	r4, r5
    2e88:	d301      	bcc.n	2e8e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    2e8a:	2000      	movs	r0, #0
    2e8c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    2e8e:	4620      	mov	r0, r4
    2e90:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    2e94:	f001 fb77 	bl	4586 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    2e98:	3414      	adds	r4, #20
    2e9a:	e7f4      	b.n	2e86 <statics_init+0x6>
    2e9c:	200000e4 	.word	0x200000e4
    2ea0:	200000e4 	.word	0x200000e4

00002ea4 <CC_PalMemCopyPlat>:
    2ea4:	f001 b945 	b.w	4132 <memmove>

00002ea8 <CC_PalMemSetZeroPlat>:
    2ea8:	460a      	mov	r2, r1
    2eaa:	2100      	movs	r1, #0
    2eac:	f001 b983 	b.w	41b6 <memset>

00002eb0 <CC_PalInit>:
    2eb0:	b510      	push	{r4, lr}
    2eb2:	4811      	ldr	r0, [pc, #68]	; (2ef8 <CC_PalInit+0x48>)
    2eb4:	f000 f848 	bl	2f48 <CC_PalMutexCreate>
    2eb8:	b100      	cbz	r0, 2ebc <CC_PalInit+0xc>
    2eba:	bd10      	pop	{r4, pc}
    2ebc:	480f      	ldr	r0, [pc, #60]	; (2efc <CC_PalInit+0x4c>)
    2ebe:	f000 f843 	bl	2f48 <CC_PalMutexCreate>
    2ec2:	2800      	cmp	r0, #0
    2ec4:	d1f9      	bne.n	2eba <CC_PalInit+0xa>
    2ec6:	4c0e      	ldr	r4, [pc, #56]	; (2f00 <CC_PalInit+0x50>)
    2ec8:	4620      	mov	r0, r4
    2eca:	f000 f83d 	bl	2f48 <CC_PalMutexCreate>
    2ece:	2800      	cmp	r0, #0
    2ed0:	d1f3      	bne.n	2eba <CC_PalInit+0xa>
    2ed2:	4b0c      	ldr	r3, [pc, #48]	; (2f04 <CC_PalInit+0x54>)
    2ed4:	480c      	ldr	r0, [pc, #48]	; (2f08 <CC_PalInit+0x58>)
    2ed6:	601c      	str	r4, [r3, #0]
    2ed8:	f000 f836 	bl	2f48 <CC_PalMutexCreate>
    2edc:	4601      	mov	r1, r0
    2ede:	2800      	cmp	r0, #0
    2ee0:	d1eb      	bne.n	2eba <CC_PalInit+0xa>
    2ee2:	f000 f82d 	bl	2f40 <CC_PalDmaInit>
    2ee6:	4604      	mov	r4, r0
    2ee8:	b108      	cbz	r0, 2eee <CC_PalInit+0x3e>
    2eea:	4620      	mov	r0, r4
    2eec:	bd10      	pop	{r4, pc}
    2eee:	f000 f851 	bl	2f94 <CC_PalPowerSaveModeInit>
    2ef2:	4620      	mov	r0, r4
    2ef4:	e7fa      	b.n	2eec <CC_PalInit+0x3c>
    2ef6:	bf00      	nop
    2ef8:	20000060 	.word	0x20000060
    2efc:	20000054 	.word	0x20000054
    2f00:	2000005c 	.word	0x2000005c
    2f04:	20000064 	.word	0x20000064
    2f08:	20000058 	.word	0x20000058

00002f0c <CC_PalTerminate>:
    2f0c:	b508      	push	{r3, lr}
    2f0e:	4808      	ldr	r0, [pc, #32]	; (2f30 <CC_PalTerminate+0x24>)
    2f10:	f000 f824 	bl	2f5c <CC_PalMutexDestroy>
    2f14:	4807      	ldr	r0, [pc, #28]	; (2f34 <CC_PalTerminate+0x28>)
    2f16:	f000 f821 	bl	2f5c <CC_PalMutexDestroy>
    2f1a:	4807      	ldr	r0, [pc, #28]	; (2f38 <CC_PalTerminate+0x2c>)
    2f1c:	f000 f81e 	bl	2f5c <CC_PalMutexDestroy>
    2f20:	4806      	ldr	r0, [pc, #24]	; (2f3c <CC_PalTerminate+0x30>)
    2f22:	f000 f81b 	bl	2f5c <CC_PalMutexDestroy>
    2f26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2f2a:	f000 b80b 	b.w	2f44 <CC_PalDmaTerminate>
    2f2e:	bf00      	nop
    2f30:	20000060 	.word	0x20000060
    2f34:	20000054 	.word	0x20000054
    2f38:	2000005c 	.word	0x2000005c
    2f3c:	20000058 	.word	0x20000058

00002f40 <CC_PalDmaInit>:
    2f40:	2000      	movs	r0, #0
    2f42:	4770      	bx	lr

00002f44 <CC_PalDmaTerminate>:
    2f44:	4770      	bx	lr
    2f46:	bf00      	nop

00002f48 <CC_PalMutexCreate>:
    2f48:	b508      	push	{r3, lr}
    2f4a:	4b03      	ldr	r3, [pc, #12]	; (2f58 <CC_PalMutexCreate+0x10>)
    2f4c:	6802      	ldr	r2, [r0, #0]
    2f4e:	681b      	ldr	r3, [r3, #0]
    2f50:	6810      	ldr	r0, [r2, #0]
    2f52:	4798      	blx	r3
    2f54:	2000      	movs	r0, #0
    2f56:	bd08      	pop	{r3, pc}
    2f58:	20000070 	.word	0x20000070

00002f5c <CC_PalMutexDestroy>:
    2f5c:	b508      	push	{r3, lr}
    2f5e:	4b03      	ldr	r3, [pc, #12]	; (2f6c <CC_PalMutexDestroy+0x10>)
    2f60:	6802      	ldr	r2, [r0, #0]
    2f62:	685b      	ldr	r3, [r3, #4]
    2f64:	6810      	ldr	r0, [r2, #0]
    2f66:	4798      	blx	r3
    2f68:	2000      	movs	r0, #0
    2f6a:	bd08      	pop	{r3, pc}
    2f6c:	20000070 	.word	0x20000070

00002f70 <CC_PalMutexLock>:
    2f70:	6802      	ldr	r2, [r0, #0]
    2f72:	4b02      	ldr	r3, [pc, #8]	; (2f7c <CC_PalMutexLock+0xc>)
    2f74:	6810      	ldr	r0, [r2, #0]
    2f76:	689b      	ldr	r3, [r3, #8]
    2f78:	4718      	bx	r3
    2f7a:	bf00      	nop
    2f7c:	20000070 	.word	0x20000070

00002f80 <CC_PalMutexUnlock>:
    2f80:	b508      	push	{r3, lr}
    2f82:	4b03      	ldr	r3, [pc, #12]	; (2f90 <CC_PalMutexUnlock+0x10>)
    2f84:	6802      	ldr	r2, [r0, #0]
    2f86:	68db      	ldr	r3, [r3, #12]
    2f88:	6810      	ldr	r0, [r2, #0]
    2f8a:	4798      	blx	r3
    2f8c:	2000      	movs	r0, #0
    2f8e:	bd08      	pop	{r3, pc}
    2f90:	20000070 	.word	0x20000070

00002f94 <CC_PalPowerSaveModeInit>:
    2f94:	b570      	push	{r4, r5, r6, lr}
    2f96:	4c09      	ldr	r4, [pc, #36]	; (2fbc <CC_PalPowerSaveModeInit+0x28>)
    2f98:	4d09      	ldr	r5, [pc, #36]	; (2fc0 <CC_PalPowerSaveModeInit+0x2c>)
    2f9a:	6920      	ldr	r0, [r4, #16]
    2f9c:	68ab      	ldr	r3, [r5, #8]
    2f9e:	4798      	blx	r3
    2fa0:	b118      	cbz	r0, 2faa <CC_PalPowerSaveModeInit+0x16>
    2fa2:	4b08      	ldr	r3, [pc, #32]	; (2fc4 <CC_PalPowerSaveModeInit+0x30>)
    2fa4:	4808      	ldr	r0, [pc, #32]	; (2fc8 <CC_PalPowerSaveModeInit+0x34>)
    2fa6:	685b      	ldr	r3, [r3, #4]
    2fa8:	4798      	blx	r3
    2faa:	2100      	movs	r1, #0
    2fac:	4a07      	ldr	r2, [pc, #28]	; (2fcc <CC_PalPowerSaveModeInit+0x38>)
    2fae:	68eb      	ldr	r3, [r5, #12]
    2fb0:	6011      	str	r1, [r2, #0]
    2fb2:	6920      	ldr	r0, [r4, #16]
    2fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2fb8:	4718      	bx	r3
    2fba:	bf00      	nop
    2fbc:	20000080 	.word	0x20000080
    2fc0:	20000070 	.word	0x20000070
    2fc4:	20000068 	.word	0x20000068
    2fc8:	000049f0 	.word	0x000049f0
    2fcc:	200007c8 	.word	0x200007c8

00002fd0 <CC_PalPowerSaveModeSelect>:
    2fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fd2:	4c1a      	ldr	r4, [pc, #104]	; (303c <CC_PalPowerSaveModeSelect+0x6c>)
    2fd4:	4d1a      	ldr	r5, [pc, #104]	; (3040 <CC_PalPowerSaveModeSelect+0x70>)
    2fd6:	4607      	mov	r7, r0
    2fd8:	68ab      	ldr	r3, [r5, #8]
    2fda:	6920      	ldr	r0, [r4, #16]
    2fdc:	4798      	blx	r3
    2fde:	b9e8      	cbnz	r0, 301c <CC_PalPowerSaveModeSelect+0x4c>
    2fe0:	4e18      	ldr	r6, [pc, #96]	; (3044 <CC_PalPowerSaveModeSelect+0x74>)
    2fe2:	6833      	ldr	r3, [r6, #0]
    2fe4:	b97f      	cbnz	r7, 3006 <CC_PalPowerSaveModeSelect+0x36>
    2fe6:	b93b      	cbnz	r3, 2ff8 <CC_PalPowerSaveModeSelect+0x28>
    2fe8:	2001      	movs	r0, #1
    2fea:	4a17      	ldr	r2, [pc, #92]	; (3048 <CC_PalPowerSaveModeSelect+0x78>)
    2fec:	4917      	ldr	r1, [pc, #92]	; (304c <CC_PalPowerSaveModeSelect+0x7c>)
    2fee:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    2ff2:	680a      	ldr	r2, [r1, #0]
    2ff4:	2a00      	cmp	r2, #0
    2ff6:	d1fc      	bne.n	2ff2 <CC_PalPowerSaveModeSelect+0x22>
    2ff8:	3301      	adds	r3, #1
    2ffa:	6033      	str	r3, [r6, #0]
    2ffc:	68eb      	ldr	r3, [r5, #12]
    2ffe:	6920      	ldr	r0, [r4, #16]
    3000:	4798      	blx	r3
    3002:	2000      	movs	r0, #0
    3004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3006:	2b00      	cmp	r3, #0
    3008:	d0f8      	beq.n	2ffc <CC_PalPowerSaveModeSelect+0x2c>
    300a:	2b01      	cmp	r3, #1
    300c:	d008      	beq.n	3020 <CC_PalPowerSaveModeSelect+0x50>
    300e:	3b01      	subs	r3, #1
    3010:	6033      	str	r3, [r6, #0]
    3012:	6920      	ldr	r0, [r4, #16]
    3014:	68eb      	ldr	r3, [r5, #12]
    3016:	4798      	blx	r3
    3018:	2000      	movs	r0, #0
    301a:	e7f3      	b.n	3004 <CC_PalPowerSaveModeSelect+0x34>
    301c:	480c      	ldr	r0, [pc, #48]	; (3050 <CC_PalPowerSaveModeSelect+0x80>)
    301e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3020:	4a0a      	ldr	r2, [pc, #40]	; (304c <CC_PalPowerSaveModeSelect+0x7c>)
    3022:	6813      	ldr	r3, [r2, #0]
    3024:	2b00      	cmp	r3, #0
    3026:	d1fc      	bne.n	3022 <CC_PalPowerSaveModeSelect+0x52>
    3028:	4a07      	ldr	r2, [pc, #28]	; (3048 <CC_PalPowerSaveModeSelect+0x78>)
    302a:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    302e:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    3032:	f000 f821 	bl	3078 <CC_HalMaskInterrupt>
    3036:	6833      	ldr	r3, [r6, #0]
    3038:	e7e9      	b.n	300e <CC_PalPowerSaveModeSelect+0x3e>
    303a:	bf00      	nop
    303c:	20000080 	.word	0x20000080
    3040:	20000070 	.word	0x20000070
    3044:	200007c8 	.word	0x200007c8
    3048:	50840000 	.word	0x50840000
    304c:	50841910 	.word	0x50841910
    3050:	ffff8fe9 	.word	0xffff8fe9

00003054 <CC_HalInit>:
    3054:	2000      	movs	r0, #0
    3056:	4770      	bx	lr

00003058 <CC_HalTerminate>:
    3058:	2000      	movs	r0, #0
    305a:	4770      	bx	lr

0000305c <CC_HalClearInterruptBit>:
    305c:	0543      	lsls	r3, r0, #21
    305e:	d503      	bpl.n	3068 <CC_HalClearInterruptBit+0xc>
    3060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3064:	4b02      	ldr	r3, [pc, #8]	; (3070 <CC_HalClearInterruptBit+0x14>)
    3066:	601a      	str	r2, [r3, #0]
    3068:	4b02      	ldr	r3, [pc, #8]	; (3074 <CC_HalClearInterruptBit+0x18>)
    306a:	6018      	str	r0, [r3, #0]
    306c:	4770      	bx	lr
    306e:	bf00      	nop
    3070:	50841108 	.word	0x50841108
    3074:	50841a08 	.word	0x50841a08

00003078 <CC_HalMaskInterrupt>:
    3078:	4b01      	ldr	r3, [pc, #4]	; (3080 <CC_HalMaskInterrupt+0x8>)
    307a:	6018      	str	r0, [r3, #0]
    307c:	4770      	bx	lr
    307e:	bf00      	nop
    3080:	50841a04 	.word	0x50841a04

00003084 <CC_HalWaitInterruptRND>:
    3084:	b108      	cbz	r0, 308a <CC_HalWaitInterruptRND+0x6>
    3086:	f000 b803 	b.w	3090 <CC_PalWaitInterruptRND>
    308a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    308e:	4770      	bx	lr

00003090 <CC_PalWaitInterruptRND>:
    3090:	4602      	mov	r2, r0
    3092:	4807      	ldr	r0, [pc, #28]	; (30b0 <CC_PalWaitInterruptRND+0x20>)
    3094:	6803      	ldr	r3, [r0, #0]
    3096:	4213      	tst	r3, r2
    3098:	d0fc      	beq.n	3094 <CC_PalWaitInterruptRND+0x4>
    309a:	b121      	cbz	r1, 30a6 <CC_PalWaitInterruptRND+0x16>
    309c:	4b05      	ldr	r3, [pc, #20]	; (30b4 <CC_PalWaitInterruptRND+0x24>)
    309e:	4806      	ldr	r0, [pc, #24]	; (30b8 <CC_PalWaitInterruptRND+0x28>)
    30a0:	681b      	ldr	r3, [r3, #0]
    30a2:	600b      	str	r3, [r1, #0]
    30a4:	6003      	str	r3, [r0, #0]
    30a6:	4b05      	ldr	r3, [pc, #20]	; (30bc <CC_PalWaitInterruptRND+0x2c>)
    30a8:	2000      	movs	r0, #0
    30aa:	601a      	str	r2, [r3, #0]
    30ac:	4770      	bx	lr
    30ae:	bf00      	nop
    30b0:	50841a00 	.word	0x50841a00
    30b4:	50841104 	.word	0x50841104
    30b8:	50841108 	.word	0x50841108
    30bc:	50841a08 	.word	0x50841a08

000030c0 <mbedtls_platform_setup>:
    30c0:	f000 b8a0 	b.w	3204 <nrf_cc310_platform_init>

000030c4 <mbedtls_platform_zeroize>:
    30c4:	b130      	cbz	r0, 30d4 <mbedtls_platform_zeroize+0x10>
    30c6:	b129      	cbz	r1, 30d4 <mbedtls_platform_zeroize+0x10>
    30c8:	2300      	movs	r3, #0
    30ca:	4401      	add	r1, r0
    30cc:	7003      	strb	r3, [r0, #0]
    30ce:	3001      	adds	r0, #1
    30d0:	4281      	cmp	r1, r0
    30d2:	d1fb      	bne.n	30cc <mbedtls_platform_zeroize+0x8>
    30d4:	4770      	bx	lr
    30d6:	bf00      	nop

000030d8 <mbedtls_hardware_poll>:
    30d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30dc:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    30e0:	460f      	mov	r7, r1
    30e2:	9205      	str	r2, [sp, #20]
    30e4:	2100      	movs	r1, #0
    30e6:	4614      	mov	r4, r2
    30e8:	a812      	add	r0, sp, #72	; 0x48
    30ea:	f44f 7208 	mov.w	r2, #544	; 0x220
    30ee:	461e      	mov	r6, r3
    30f0:	f001 f861 	bl	41b6 <memset>
    30f4:	2300      	movs	r3, #0
    30f6:	a808      	add	r0, sp, #32
    30f8:	4619      	mov	r1, r3
    30fa:	2228      	movs	r2, #40	; 0x28
    30fc:	9306      	str	r3, [sp, #24]
    30fe:	f001 f85a 	bl	41b6 <memset>
    3102:	2f00      	cmp	r7, #0
    3104:	d03c      	beq.n	3180 <mbedtls_hardware_poll+0xa8>
    3106:	2e00      	cmp	r6, #0
    3108:	d03a      	beq.n	3180 <mbedtls_hardware_poll+0xa8>
    310a:	2c00      	cmp	r4, #0
    310c:	d038      	beq.n	3180 <mbedtls_hardware_poll+0xa8>
    310e:	2104      	movs	r1, #4
    3110:	a806      	add	r0, sp, #24
    3112:	f7ff fec9 	bl	2ea8 <CC_PalMemSetZeroPlat>
    3116:	a808      	add	r0, sp, #32
    3118:	2128      	movs	r1, #40	; 0x28
    311a:	f7ff fec5 	bl	2ea8 <CC_PalMemSetZeroPlat>
    311e:	a808      	add	r0, sp, #32
    3120:	f000 f832 	bl	3188 <RNG_PLAT_SetUserRngParameters>
    3124:	b178      	cbz	r0, 3146 <mbedtls_hardware_poll+0x6e>
    3126:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    312a:	a812      	add	r0, sp, #72	; 0x48
    312c:	f44f 7108 	mov.w	r1, #544	; 0x220
    3130:	f7ff ffc8 	bl	30c4 <mbedtls_platform_zeroize>
    3134:	a806      	add	r0, sp, #24
    3136:	2104      	movs	r1, #4
    3138:	f7ff ffc4 	bl	30c4 <mbedtls_platform_zeroize>
    313c:	4628      	mov	r0, r5
    313e:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
    3142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3146:	ab12      	add	r3, sp, #72	; 0x48
    3148:	f10d 081c 	add.w	r8, sp, #28
    314c:	9003      	str	r0, [sp, #12]
    314e:	e9cd 6301 	strd	r6, r3, [sp, #4]
    3152:	4602      	mov	r2, r0
    3154:	ab05      	add	r3, sp, #20
    3156:	a908      	add	r1, sp, #32
    3158:	f8cd 8000 	str.w	r8, [sp]
    315c:	a806      	add	r0, sp, #24
    315e:	f000 fce9 	bl	3b34 <LLF_RND_GetTrngSource>
    3162:	2800      	cmp	r0, #0
    3164:	d1df      	bne.n	3126 <mbedtls_hardware_poll+0x4e>
    3166:	6833      	ldr	r3, [r6, #0]
    3168:	42a3      	cmp	r3, r4
    316a:	d3dc      	bcc.n	3126 <mbedtls_hardware_poll+0x4e>
    316c:	f8d8 1000 	ldr.w	r1, [r8]
    3170:	4605      	mov	r5, r0
    3172:	3108      	adds	r1, #8
    3174:	4638      	mov	r0, r7
    3176:	4622      	mov	r2, r4
    3178:	f7ff fe94 	bl	2ea4 <CC_PalMemCopyPlat>
    317c:	6034      	str	r4, [r6, #0]
    317e:	e7d4      	b.n	312a <mbedtls_hardware_poll+0x52>
    3180:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    3184:	e7da      	b.n	313c <mbedtls_hardware_poll+0x64>
    3186:	bf00      	nop

00003188 <RNG_PLAT_SetUserRngParameters>:
    3188:	231c      	movs	r3, #28
    318a:	b530      	push	{r4, r5, lr}
    318c:	b083      	sub	sp, #12
    318e:	a902      	add	r1, sp, #8
    3190:	f841 3d04 	str.w	r3, [r1, #-4]!
    3194:	4604      	mov	r4, r0
    3196:	f000 f9b1 	bl	34fc <CC_PalTrngParamGet>
    319a:	4605      	mov	r5, r0
    319c:	b9d8      	cbnz	r0, 31d6 <RNG_PLAT_SetUserRngParameters+0x4e>
    319e:	9b01      	ldr	r3, [sp, #4]
    31a0:	2b1c      	cmp	r3, #28
    31a2:	d11b      	bne.n	31dc <RNG_PLAT_SetUserRngParameters+0x54>
    31a4:	e9d4 3200 	ldrd	r3, r2, [r4]
    31a8:	2101      	movs	r1, #1
    31aa:	3300      	adds	r3, #0
    31ac:	61e1      	str	r1, [r4, #28]
    31ae:	bf18      	it	ne
    31b0:	2301      	movne	r3, #1
    31b2:	b10a      	cbz	r2, 31b8 <RNG_PLAT_SetUserRngParameters+0x30>
    31b4:	f043 0302 	orr.w	r3, r3, #2
    31b8:	68a2      	ldr	r2, [r4, #8]
    31ba:	b932      	cbnz	r2, 31ca <RNG_PLAT_SetUserRngParameters+0x42>
    31bc:	68e2      	ldr	r2, [r4, #12]
    31be:	b9aa      	cbnz	r2, 31ec <RNG_PLAT_SetUserRngParameters+0x64>
    31c0:	e9c4 3208 	strd	r3, r2, [r4, #32]
    31c4:	b93b      	cbnz	r3, 31d6 <RNG_PLAT_SetUserRngParameters+0x4e>
    31c6:	4d0d      	ldr	r5, [pc, #52]	; (31fc <RNG_PLAT_SetUserRngParameters+0x74>)
    31c8:	e009      	b.n	31de <RNG_PLAT_SetUserRngParameters+0x56>
    31ca:	68e2      	ldr	r2, [r4, #12]
    31cc:	f043 0304 	orr.w	r3, r3, #4
    31d0:	b962      	cbnz	r2, 31ec <RNG_PLAT_SetUserRngParameters+0x64>
    31d2:	e9c4 3208 	strd	r3, r2, [r4, #32]
    31d6:	4628      	mov	r0, r5
    31d8:	b003      	add	sp, #12
    31da:	bd30      	pop	{r4, r5, pc}
    31dc:	4d08      	ldr	r5, [pc, #32]	; (3200 <RNG_PLAT_SetUserRngParameters+0x78>)
    31de:	4620      	mov	r0, r4
    31e0:	211c      	movs	r1, #28
    31e2:	f7ff fe61 	bl	2ea8 <CC_PalMemSetZeroPlat>
    31e6:	4628      	mov	r0, r5
    31e8:	b003      	add	sp, #12
    31ea:	bd30      	pop	{r4, r5, pc}
    31ec:	2200      	movs	r2, #0
    31ee:	4628      	mov	r0, r5
    31f0:	f043 0308 	orr.w	r3, r3, #8
    31f4:	e9c4 3208 	strd	r3, r2, [r4, #32]
    31f8:	b003      	add	sp, #12
    31fa:	bd30      	pop	{r4, r5, pc}
    31fc:	00f00c0e 	.word	0x00f00c0e
    3200:	00f00c37 	.word	0x00f00c37

00003204 <nrf_cc310_platform_init>:
    3204:	b510      	push	{r4, lr}
    3206:	4c0c      	ldr	r4, [pc, #48]	; (3238 <nrf_cc310_platform_init+0x34>)
    3208:	6823      	ldr	r3, [r4, #0]
    320a:	b113      	cbz	r3, 3212 <nrf_cc310_platform_init+0xe>
    320c:	4b0b      	ldr	r3, [pc, #44]	; (323c <nrf_cc310_platform_init+0x38>)
    320e:	681b      	ldr	r3, [r3, #0]
    3210:	b96b      	cbnz	r3, 322e <nrf_cc310_platform_init+0x2a>
    3212:	f000 f931 	bl	3478 <CC_LibInit>
    3216:	b138      	cbz	r0, 3228 <nrf_cc310_platform_init+0x24>
    3218:	3801      	subs	r0, #1
    321a:	2806      	cmp	r0, #6
    321c:	bf96      	itet	ls
    321e:	4b08      	ldrls	r3, [pc, #32]	; (3240 <nrf_cc310_platform_init+0x3c>)
    3220:	4808      	ldrhi	r0, [pc, #32]	; (3244 <nrf_cc310_platform_init+0x40>)
    3222:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    3226:	bd10      	pop	{r4, pc}
    3228:	2201      	movs	r2, #1
    322a:	4b04      	ldr	r3, [pc, #16]	; (323c <nrf_cc310_platform_init+0x38>)
    322c:	601a      	str	r2, [r3, #0]
    322e:	2301      	movs	r3, #1
    3230:	2000      	movs	r0, #0
    3232:	6023      	str	r3, [r4, #0]
    3234:	bd10      	pop	{r4, pc}
    3236:	bf00      	nop
    3238:	200007cc 	.word	0x200007cc
    323c:	200007d0 	.word	0x200007d0
    3240:	00004a10 	.word	0x00004a10
    3244:	ffff8ffe 	.word	0xffff8ffe

00003248 <nrf_cc310_platform_init_no_rng>:
    3248:	b510      	push	{r4, lr}
    324a:	4c09      	ldr	r4, [pc, #36]	; (3270 <nrf_cc310_platform_init_no_rng+0x28>)
    324c:	6823      	ldr	r3, [r4, #0]
    324e:	b11b      	cbz	r3, 3258 <nrf_cc310_platform_init_no_rng+0x10>
    3250:	2301      	movs	r3, #1
    3252:	2000      	movs	r0, #0
    3254:	6023      	str	r3, [r4, #0]
    3256:	bd10      	pop	{r4, pc}
    3258:	f000 f87c 	bl	3354 <CC_LibInitNoRng>
    325c:	2800      	cmp	r0, #0
    325e:	d0f7      	beq.n	3250 <nrf_cc310_platform_init_no_rng+0x8>
    3260:	3801      	subs	r0, #1
    3262:	2806      	cmp	r0, #6
    3264:	bf96      	itet	ls
    3266:	4b03      	ldrls	r3, [pc, #12]	; (3274 <nrf_cc310_platform_init_no_rng+0x2c>)
    3268:	4803      	ldrhi	r0, [pc, #12]	; (3278 <nrf_cc310_platform_init_no_rng+0x30>)
    326a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    326e:	bd10      	pop	{r4, pc}
    3270:	200007cc 	.word	0x200007cc
    3274:	00004a10 	.word	0x00004a10
    3278:	ffff8ffe 	.word	0xffff8ffe

0000327c <nrf_cc310_platform_abort>:
    327c:	f3bf 8f4f 	dsb	sy
    3280:	4905      	ldr	r1, [pc, #20]	; (3298 <nrf_cc310_platform_abort+0x1c>)
    3282:	4b06      	ldr	r3, [pc, #24]	; (329c <nrf_cc310_platform_abort+0x20>)
    3284:	68ca      	ldr	r2, [r1, #12]
    3286:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    328a:	4313      	orrs	r3, r2
    328c:	60cb      	str	r3, [r1, #12]
    328e:	f3bf 8f4f 	dsb	sy
    3292:	bf00      	nop
    3294:	e7fd      	b.n	3292 <nrf_cc310_platform_abort+0x16>
    3296:	bf00      	nop
    3298:	e000ed00 	.word	0xe000ed00
    329c:	05fa0004 	.word	0x05fa0004

000032a0 <CC_PalAbort>:
    32a0:	4b01      	ldr	r3, [pc, #4]	; (32a8 <CC_PalAbort+0x8>)
    32a2:	685b      	ldr	r3, [r3, #4]
    32a4:	4718      	bx	r3
    32a6:	bf00      	nop
    32a8:	20000068 	.word	0x20000068

000032ac <nrf_cc310_platform_set_abort>:
    32ac:	4b02      	ldr	r3, [pc, #8]	; (32b8 <nrf_cc310_platform_set_abort+0xc>)
    32ae:	e9d0 1200 	ldrd	r1, r2, [r0]
    32b2:	e9c3 1200 	strd	r1, r2, [r3]
    32b6:	4770      	bx	lr
    32b8:	20000068 	.word	0x20000068

000032bc <mutex_free>:
    32bc:	4770      	bx	lr
    32be:	bf00      	nop

000032c0 <mutex_unlock>:
    32c0:	b510      	push	{r4, lr}
    32c2:	4604      	mov	r4, r0
    32c4:	b120      	cbz	r0, 32d0 <mutex_unlock+0x10>
    32c6:	f3bf 8f5f 	dmb	sy
    32ca:	2000      	movs	r0, #0
    32cc:	6020      	str	r0, [r4, #0]
    32ce:	bd10      	pop	{r4, pc}
    32d0:	4803      	ldr	r0, [pc, #12]	; (32e0 <mutex_unlock+0x20>)
    32d2:	f7ff ffe5 	bl	32a0 <CC_PalAbort>
    32d6:	f3bf 8f5f 	dmb	sy
    32da:	2000      	movs	r0, #0
    32dc:	6020      	str	r0, [r4, #0]
    32de:	bd10      	pop	{r4, pc}
    32e0:	00004a50 	.word	0x00004a50

000032e4 <mutex_init>:
    32e4:	b510      	push	{r4, lr}
    32e6:	4604      	mov	r4, r0
    32e8:	b110      	cbz	r0, 32f0 <mutex_init+0xc>
    32ea:	2300      	movs	r3, #0
    32ec:	6023      	str	r3, [r4, #0]
    32ee:	bd10      	pop	{r4, pc}
    32f0:	4802      	ldr	r0, [pc, #8]	; (32fc <mutex_init+0x18>)
    32f2:	f7ff ffd5 	bl	32a0 <CC_PalAbort>
    32f6:	2300      	movs	r3, #0
    32f8:	6023      	str	r3, [r4, #0]
    32fa:	bd10      	pop	{r4, pc}
    32fc:	00004a2c 	.word	0x00004a2c

00003300 <mutex_lock>:
    3300:	b150      	cbz	r0, 3318 <mutex_lock+0x18>
    3302:	2201      	movs	r2, #1
    3304:	e8d0 3fef 	ldaex	r3, [r0]
    3308:	e8c0 2fe1 	stlex	r1, r2, [r0]
    330c:	2900      	cmp	r1, #0
    330e:	d1f9      	bne.n	3304 <mutex_lock+0x4>
    3310:	2b01      	cmp	r3, #1
    3312:	d0f7      	beq.n	3304 <mutex_lock+0x4>
    3314:	f3bf 8f5f 	dmb	sy
    3318:	2000      	movs	r0, #0
    331a:	4770      	bx	lr

0000331c <nrf_cc310_platform_set_mutexes>:
    331c:	b470      	push	{r4, r5, r6}
    331e:	4b0b      	ldr	r3, [pc, #44]	; (334c <nrf_cc310_platform_set_mutexes+0x30>)
    3320:	6806      	ldr	r6, [r0, #0]
    3322:	68c2      	ldr	r2, [r0, #12]
    3324:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    3328:	e9c3 4202 	strd	r4, r2, [r3, #8]
    332c:	e9c3 6500 	strd	r6, r5, [r3]
    3330:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    3334:	680e      	ldr	r6, [r1, #0]
    3336:	4b06      	ldr	r3, [pc, #24]	; (3350 <nrf_cc310_platform_set_mutexes+0x34>)
    3338:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    333c:	e9c3 6500 	strd	r6, r5, [r3]
    3340:	e9c3 4002 	strd	r4, r0, [r3, #8]
    3344:	611a      	str	r2, [r3, #16]
    3346:	bc70      	pop	{r4, r5, r6}
    3348:	4770      	bx	lr
    334a:	bf00      	nop
    334c:	20000070 	.word	0x20000070
    3350:	20000080 	.word	0x20000080

00003354 <CC_LibInitNoRng>:
    3354:	b510      	push	{r4, lr}
    3356:	f7ff fe7d 	bl	3054 <CC_HalInit>
    335a:	b970      	cbnz	r0, 337a <CC_LibInitNoRng+0x26>
    335c:	f7ff fda8 	bl	2eb0 <CC_PalInit>
    3360:	b980      	cbnz	r0, 3384 <CC_LibInitNoRng+0x30>
    3362:	f7ff fe35 	bl	2fd0 <CC_PalPowerSaveModeSelect>
    3366:	b980      	cbnz	r0, 338a <CC_LibInitNoRng+0x36>
    3368:	4b11      	ldr	r3, [pc, #68]	; (33b0 <CC_LibInitNoRng+0x5c>)
    336a:	681b      	ldr	r3, [r3, #0]
    336c:	0e1b      	lsrs	r3, r3, #24
    336e:	2bf0      	cmp	r3, #240	; 0xf0
    3370:	d00d      	beq.n	338e <CC_LibInitNoRng+0x3a>
    3372:	2406      	movs	r4, #6
    3374:	f7ff fe70 	bl	3058 <CC_HalTerminate>
    3378:	e000      	b.n	337c <CC_LibInitNoRng+0x28>
    337a:	2403      	movs	r4, #3
    337c:	f7ff fdc6 	bl	2f0c <CC_PalTerminate>
    3380:	4620      	mov	r0, r4
    3382:	bd10      	pop	{r4, pc}
    3384:	2404      	movs	r4, #4
    3386:	4620      	mov	r0, r4
    3388:	bd10      	pop	{r4, pc}
    338a:	2400      	movs	r4, #0
    338c:	e7f2      	b.n	3374 <CC_LibInitNoRng+0x20>
    338e:	4a09      	ldr	r2, [pc, #36]	; (33b4 <CC_LibInitNoRng+0x60>)
    3390:	4b09      	ldr	r3, [pc, #36]	; (33b8 <CC_LibInitNoRng+0x64>)
    3392:	6812      	ldr	r2, [r2, #0]
    3394:	429a      	cmp	r2, r3
    3396:	d001      	beq.n	339c <CC_LibInitNoRng+0x48>
    3398:	2407      	movs	r4, #7
    339a:	e7eb      	b.n	3374 <CC_LibInitNoRng+0x20>
    339c:	2001      	movs	r0, #1
    339e:	f7ff fe17 	bl	2fd0 <CC_PalPowerSaveModeSelect>
    33a2:	2800      	cmp	r0, #0
    33a4:	d1f1      	bne.n	338a <CC_LibInitNoRng+0x36>
    33a6:	4b05      	ldr	r3, [pc, #20]	; (33bc <CC_LibInitNoRng+0x68>)
    33a8:	4604      	mov	r4, r0
    33aa:	6018      	str	r0, [r3, #0]
    33ac:	e7e8      	b.n	3380 <CC_LibInitNoRng+0x2c>
    33ae:	bf00      	nop
    33b0:	50841928 	.word	0x50841928
    33b4:	50841a24 	.word	0x50841a24
    33b8:	20e00000 	.word	0x20e00000
    33bc:	50841a0c 	.word	0x50841a0c

000033c0 <CC_LibInitRngModule>:
    33c0:	b530      	push	{r4, r5, lr}
    33c2:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    33c6:	f44f 7208 	mov.w	r2, #544	; 0x220
    33ca:	2100      	movs	r1, #0
    33cc:	a80c      	add	r0, sp, #48	; 0x30
    33ce:	f000 fef2 	bl	41b6 <memset>
    33d2:	2300      	movs	r3, #0
    33d4:	a802      	add	r0, sp, #8
    33d6:	4619      	mov	r1, r3
    33d8:	2228      	movs	r2, #40	; 0x28
    33da:	9301      	str	r3, [sp, #4]
    33dc:	f000 feeb 	bl	41b6 <memset>
    33e0:	a802      	add	r0, sp, #8
    33e2:	f7ff fed1 	bl	3188 <RNG_PLAT_SetUserRngParameters>
    33e6:	b118      	cbz	r0, 33f0 <CC_LibInitRngModule+0x30>
    33e8:	2005      	movs	r0, #5
    33ea:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    33ee:	bd30      	pop	{r4, r5, pc}
    33f0:	4d1c      	ldr	r5, [pc, #112]	; (3464 <CC_LibInitRngModule+0xa4>)
    33f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    33f6:	6828      	ldr	r0, [r5, #0]
    33f8:	f7ff fdba 	bl	2f70 <CC_PalMutexLock>
    33fc:	4604      	mov	r4, r0
    33fe:	b9f0      	cbnz	r0, 343e <CC_LibInitRngModule+0x7e>
    3400:	2000      	movs	r0, #0
    3402:	f7ff fde5 	bl	2fd0 <CC_PalPowerSaveModeSelect>
    3406:	b9b0      	cbnz	r0, 3436 <CC_LibInitRngModule+0x76>
    3408:	aa0c      	add	r2, sp, #48	; 0x30
    340a:	a902      	add	r1, sp, #8
    340c:	a801      	add	r0, sp, #4
    340e:	f000 fbd5 	bl	3bbc <LLF_RND_RunTrngStartupTest>
    3412:	4604      	mov	r4, r0
    3414:	2001      	movs	r0, #1
    3416:	f7ff fddb 	bl	2fd0 <CC_PalPowerSaveModeSelect>
    341a:	b9f0      	cbnz	r0, 345a <CC_LibInitRngModule+0x9a>
    341c:	6828      	ldr	r0, [r5, #0]
    341e:	f7ff fdaf 	bl	2f80 <CC_PalMutexUnlock>
    3422:	b110      	cbz	r0, 342a <CC_LibInitRngModule+0x6a>
    3424:	4810      	ldr	r0, [pc, #64]	; (3468 <CC_LibInitRngModule+0xa8>)
    3426:	f7ff ff3b 	bl	32a0 <CC_PalAbort>
    342a:	4620      	mov	r0, r4
    342c:	2c00      	cmp	r4, #0
    342e:	d1db      	bne.n	33e8 <CC_LibInitRngModule+0x28>
    3430:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    3434:	bd30      	pop	{r4, r5, pc}
    3436:	480d      	ldr	r0, [pc, #52]	; (346c <CC_LibInitRngModule+0xac>)
    3438:	f7ff ff32 	bl	32a0 <CC_PalAbort>
    343c:	e7e4      	b.n	3408 <CC_LibInitRngModule+0x48>
    343e:	480c      	ldr	r0, [pc, #48]	; (3470 <CC_LibInitRngModule+0xb0>)
    3440:	f7ff ff2e 	bl	32a0 <CC_PalAbort>
    3444:	2c01      	cmp	r4, #1
    3446:	d1db      	bne.n	3400 <CC_LibInitRngModule+0x40>
    3448:	6828      	ldr	r0, [r5, #0]
    344a:	f7ff fd99 	bl	2f80 <CC_PalMutexUnlock>
    344e:	2800      	cmp	r0, #0
    3450:	d0ca      	beq.n	33e8 <CC_LibInitRngModule+0x28>
    3452:	4805      	ldr	r0, [pc, #20]	; (3468 <CC_LibInitRngModule+0xa8>)
    3454:	f7ff ff24 	bl	32a0 <CC_PalAbort>
    3458:	e7c6      	b.n	33e8 <CC_LibInitRngModule+0x28>
    345a:	4806      	ldr	r0, [pc, #24]	; (3474 <CC_LibInitRngModule+0xb4>)
    345c:	f7ff ff20 	bl	32a0 <CC_PalAbort>
    3460:	e7dc      	b.n	341c <CC_LibInitRngModule+0x5c>
    3462:	bf00      	nop
    3464:	20000064 	.word	0x20000064
    3468:	00004a88 	.word	0x00004a88
    346c:	00004aa0 	.word	0x00004aa0
    3470:	00004a70 	.word	0x00004a70
    3474:	00004ac0 	.word	0x00004ac0

00003478 <CC_LibInit>:
    3478:	b508      	push	{r3, lr}
    347a:	f7ff fdeb 	bl	3054 <CC_HalInit>
    347e:	b118      	cbz	r0, 3488 <CC_LibInit+0x10>
    3480:	f7ff fd44 	bl	2f0c <CC_PalTerminate>
    3484:	2003      	movs	r0, #3
    3486:	bd08      	pop	{r3, pc}
    3488:	f7ff fd12 	bl	2eb0 <CC_PalInit>
    348c:	b968      	cbnz	r0, 34aa <CC_LibInit+0x32>
    348e:	f7ff fd9f 	bl	2fd0 <CC_PalPowerSaveModeSelect>
    3492:	b960      	cbnz	r0, 34ae <CC_LibInit+0x36>
    3494:	4b15      	ldr	r3, [pc, #84]	; (34ec <CC_LibInit+0x74>)
    3496:	681b      	ldr	r3, [r3, #0]
    3498:	0e1b      	lsrs	r3, r3, #24
    349a:	2bf0      	cmp	r3, #240	; 0xf0
    349c:	d012      	beq.n	34c4 <CC_LibInit+0x4c>
    349e:	f7ff fddb 	bl	3058 <CC_HalTerminate>
    34a2:	f7ff fd33 	bl	2f0c <CC_PalTerminate>
    34a6:	2006      	movs	r0, #6
    34a8:	bd08      	pop	{r3, pc}
    34aa:	2004      	movs	r0, #4
    34ac:	bd08      	pop	{r3, pc}
    34ae:	f7ff fdd3 	bl	3058 <CC_HalTerminate>
    34b2:	f7ff fd2b 	bl	2f0c <CC_PalTerminate>
    34b6:	f7ff ff83 	bl	33c0 <CC_LibInitRngModule>
    34ba:	2800      	cmp	r0, #0
    34bc:	bf0c      	ite	eq
    34be:	2000      	moveq	r0, #0
    34c0:	2005      	movne	r0, #5
    34c2:	bd08      	pop	{r3, pc}
    34c4:	4a0a      	ldr	r2, [pc, #40]	; (34f0 <CC_LibInit+0x78>)
    34c6:	4b0b      	ldr	r3, [pc, #44]	; (34f4 <CC_LibInit+0x7c>)
    34c8:	6812      	ldr	r2, [r2, #0]
    34ca:	429a      	cmp	r2, r3
    34cc:	d005      	beq.n	34da <CC_LibInit+0x62>
    34ce:	f7ff fdc3 	bl	3058 <CC_HalTerminate>
    34d2:	f7ff fd1b 	bl	2f0c <CC_PalTerminate>
    34d6:	2007      	movs	r0, #7
    34d8:	bd08      	pop	{r3, pc}
    34da:	2001      	movs	r0, #1
    34dc:	f7ff fd78 	bl	2fd0 <CC_PalPowerSaveModeSelect>
    34e0:	2800      	cmp	r0, #0
    34e2:	d1e4      	bne.n	34ae <CC_LibInit+0x36>
    34e4:	4b04      	ldr	r3, [pc, #16]	; (34f8 <CC_LibInit+0x80>)
    34e6:	6018      	str	r0, [r3, #0]
    34e8:	e7e5      	b.n	34b6 <CC_LibInit+0x3e>
    34ea:	bf00      	nop
    34ec:	50841928 	.word	0x50841928
    34f0:	50841a24 	.word	0x50841a24
    34f4:	20e00000 	.word	0x20e00000
    34f8:	50841a0c 	.word	0x50841a0c

000034fc <CC_PalTrngParamGet>:
    34fc:	b118      	cbz	r0, 3506 <CC_PalTrngParamGet+0xa>
    34fe:	b111      	cbz	r1, 3506 <CC_PalTrngParamGet+0xa>
    3500:	680b      	ldr	r3, [r1, #0]
    3502:	2b1c      	cmp	r3, #28
    3504:	d001      	beq.n	350a <CC_PalTrngParamGet+0xe>
    3506:	2001      	movs	r0, #1
    3508:	4770      	bx	lr
    350a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    350e:	4a3a      	ldr	r2, [pc, #232]	; (35f8 <CC_PalTrngParamGet+0xfc>)
    3510:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    3514:	4291      	cmp	r1, r2
    3516:	d05a      	beq.n	35ce <CC_PalTrngParamGet+0xd2>
    3518:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    351c:	3201      	adds	r2, #1
    351e:	d056      	beq.n	35ce <CC_PalTrngParamGet+0xd2>
    3520:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    3524:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3528:	6002      	str	r2, [r0, #0]
    352a:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    352e:	4a33      	ldr	r2, [pc, #204]	; (35fc <CC_PalTrngParamGet+0x100>)
    3530:	4291      	cmp	r1, r2
    3532:	d05e      	beq.n	35f2 <CC_PalTrngParamGet+0xf6>
    3534:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    3538:	3201      	adds	r2, #1
    353a:	d05a      	beq.n	35f2 <CC_PalTrngParamGet+0xf6>
    353c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    3540:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3544:	6042      	str	r2, [r0, #4]
    3546:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    354a:	f512 7f94 	cmn.w	r2, #296	; 0x128
    354e:	d04d      	beq.n	35ec <CC_PalTrngParamGet+0xf0>
    3550:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    3554:	3201      	adds	r2, #1
    3556:	d049      	beq.n	35ec <CC_PalTrngParamGet+0xf0>
    3558:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    355c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3560:	6082      	str	r2, [r0, #8]
    3562:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    3566:	4a26      	ldr	r2, [pc, #152]	; (3600 <CC_PalTrngParamGet+0x104>)
    3568:	4291      	cmp	r1, r2
    356a:	d03c      	beq.n	35e6 <CC_PalTrngParamGet+0xea>
    356c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    3570:	3201      	adds	r2, #1
    3572:	d038      	beq.n	35e6 <CC_PalTrngParamGet+0xea>
    3574:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    3578:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    357c:	60c2      	str	r2, [r0, #12]
    357e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    3582:	3270      	adds	r2, #112	; 0x70
    3584:	d02d      	beq.n	35e2 <CC_PalTrngParamGet+0xe6>
    3586:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    358a:	3201      	adds	r2, #1
    358c:	d029      	beq.n	35e2 <CC_PalTrngParamGet+0xe6>
    358e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    3592:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3596:	6102      	str	r2, [r0, #16]
    3598:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    359c:	32af      	adds	r2, #175	; 0xaf
    359e:	d01e      	beq.n	35de <CC_PalTrngParamGet+0xe2>
    35a0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    35a4:	3201      	adds	r2, #1
    35a6:	d01a      	beq.n	35de <CC_PalTrngParamGet+0xe2>
    35a8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    35ac:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    35b0:	6142      	str	r2, [r0, #20]
    35b2:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    35b6:	4a13      	ldr	r2, [pc, #76]	; (3604 <CC_PalTrngParamGet+0x108>)
    35b8:	4291      	cmp	r1, r2
    35ba:	d00b      	beq.n	35d4 <CC_PalTrngParamGet+0xd8>
    35bc:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    35c0:	3201      	adds	r2, #1
    35c2:	d007      	beq.n	35d4 <CC_PalTrngParamGet+0xd8>
    35c4:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    35c8:	6183      	str	r3, [r0, #24]
    35ca:	2000      	movs	r0, #0
    35cc:	4770      	bx	lr
    35ce:	f640 02fc 	movw	r2, #2300	; 0x8fc
    35d2:	e7a7      	b.n	3524 <CC_PalTrngParamGet+0x28>
    35d4:	f240 3337 	movw	r3, #823	; 0x337
    35d8:	6183      	str	r3, [r0, #24]
    35da:	2000      	movs	r0, #0
    35dc:	4770      	bx	lr
    35de:	2251      	movs	r2, #81	; 0x51
    35e0:	e7e4      	b.n	35ac <CC_PalTrngParamGet+0xb0>
    35e2:	2290      	movs	r2, #144	; 0x90
    35e4:	e7d5      	b.n	3592 <CC_PalTrngParamGet+0x96>
    35e6:	f642 1204 	movw	r2, #10500	; 0x2904
    35ea:	e7c5      	b.n	3578 <CC_PalTrngParamGet+0x7c>
    35ec:	f640 62d8 	movw	r2, #3800	; 0xed8
    35f0:	e7b4      	b.n	355c <CC_PalTrngParamGet+0x60>
    35f2:	f242 02d0 	movw	r2, #8400	; 0x20d0
    35f6:	e7a3      	b.n	3540 <CC_PalTrngParamGet+0x44>
    35f8:	fffff8fc 	.word	0xfffff8fc
    35fc:	ffff20d0 	.word	0xffff20d0
    3600:	ffff2904 	.word	0xffff2904
    3604:	fffff337 	.word	0xfffff337

00003608 <LLF_RND_AdaptiveProportionTest>:
    3608:	b3a8      	cbz	r0, 3676 <LLF_RND_AdaptiveProportionTest+0x6e>
    360a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    360e:	1e4c      	subs	r4, r1, #1
    3610:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    3614:	d22c      	bcs.n	3670 <LLF_RND_AdaptiveProportionTest+0x68>
    3616:	b35b      	cbz	r3, 3670 <LLF_RND_AdaptiveProportionTest+0x68>
    3618:	b352      	cbz	r2, 3670 <LLF_RND_AdaptiveProportionTest+0x68>
    361a:	f04f 0c00 	mov.w	ip, #0
    361e:	00c9      	lsls	r1, r1, #3
    3620:	46e6      	mov	lr, ip
    3622:	4665      	mov	r5, ip
    3624:	4664      	mov	r4, ip
    3626:	1e4f      	subs	r7, r1, #1
    3628:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    362c:	e00c      	b.n	3648 <LLF_RND_AdaptiveProportionTest+0x40>
    362e:	42ab      	cmp	r3, r5
    3630:	d016      	beq.n	3660 <LLF_RND_AdaptiveProportionTest+0x58>
    3632:	458e      	cmp	lr, r1
    3634:	d101      	bne.n	363a <LLF_RND_AdaptiveProportionTest+0x32>
    3636:	f10c 0c01 	add.w	ip, ip, #1
    363a:	45a8      	cmp	r8, r5
    363c:	d016      	beq.n	366c <LLF_RND_AdaptiveProportionTest+0x64>
    363e:	3401      	adds	r4, #1
    3640:	42bc      	cmp	r4, r7
    3642:	f105 0501 	add.w	r5, r5, #1
    3646:	d818      	bhi.n	367a <LLF_RND_AdaptiveProportionTest+0x72>
    3648:	0961      	lsrs	r1, r4, #5
    364a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    364e:	f004 061f 	and.w	r6, r4, #31
    3652:	40f1      	lsrs	r1, r6
    3654:	2e1f      	cmp	r6, #31
    3656:	bf18      	it	ne
    3658:	f001 0101 	andne.w	r1, r1, #1
    365c:	2c00      	cmp	r4, #0
    365e:	d1e6      	bne.n	362e <LLF_RND_AdaptiveProportionTest+0x26>
    3660:	2500      	movs	r5, #0
    3662:	45a8      	cmp	r8, r5
    3664:	468e      	mov	lr, r1
    3666:	f04f 0c01 	mov.w	ip, #1
    366a:	d1e8      	bne.n	363e <LLF_RND_AdaptiveProportionTest+0x36>
    366c:	4562      	cmp	r2, ip
    366e:	d2e6      	bcs.n	363e <LLF_RND_AdaptiveProportionTest+0x36>
    3670:	4803      	ldr	r0, [pc, #12]	; (3680 <LLF_RND_AdaptiveProportionTest+0x78>)
    3672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3676:	4802      	ldr	r0, [pc, #8]	; (3680 <LLF_RND_AdaptiveProportionTest+0x78>)
    3678:	4770      	bx	lr
    367a:	2000      	movs	r0, #0
    367c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3680:	00f10c37 	.word	0x00f10c37

00003684 <getTrngSource>:
    3684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3688:	b08f      	sub	sp, #60	; 0x3c
    368a:	460d      	mov	r5, r1
    368c:	e9dd 4119 	ldrd	r4, r1, [sp, #100]	; 0x64
    3690:	4683      	mov	fp, r0
    3692:	2900      	cmp	r1, #0
    3694:	d157      	bne.n	3746 <getTrngSource+0xc2>
    3696:	6929      	ldr	r1, [r5, #16]
    3698:	9103      	str	r1, [sp, #12]
    369a:	2100      	movs	r1, #0
    369c:	601c      	str	r4, [r3, #0]
    369e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    36a0:	6019      	str	r1, [r3, #0]
    36a2:	2a00      	cmp	r2, #0
    36a4:	f000 8122 	beq.w	38ec <getTrngSource+0x268>
    36a8:	4a81      	ldr	r2, [pc, #516]	; (38b0 <getTrngSource+0x22c>)
    36aa:	4b82      	ldr	r3, [pc, #520]	; (38b4 <getTrngSource+0x230>)
    36ac:	6811      	ldr	r1, [r2, #0]
    36ae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    36b0:	681b      	ldr	r3, [r3, #0]
    36b2:	429a      	cmp	r2, r3
    36b4:	d157      	bne.n	3766 <getTrngSource+0xe2>
    36b6:	290a      	cmp	r1, #10
    36b8:	d155      	bne.n	3766 <getTrngSource+0xe2>
    36ba:	f89b 3003 	ldrb.w	r3, [fp, #3]
    36be:	9306      	str	r3, [sp, #24]
    36c0:	9903      	ldr	r1, [sp, #12]
    36c2:	2304      	movs	r3, #4
    36c4:	4608      	mov	r0, r1
    36c6:	4a7c      	ldr	r2, [pc, #496]	; (38b8 <getTrngSource+0x234>)
    36c8:	9302      	str	r3, [sp, #8]
    36ca:	fba2 0200 	umull	r0, r2, r2, r0
    36ce:	0892      	lsrs	r2, r2, #2
    36d0:	00cb      	lsls	r3, r1, #3
    36d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    36d6:	f104 0008 	add.w	r0, r4, #8
    36da:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    36de:	3b01      	subs	r3, #1
    36e0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 38b4 <getTrngSource+0x230>
    36e4:	f8df a200 	ldr.w	sl, [pc, #512]	; 38e8 <getTrngSource+0x264>
    36e8:	9004      	str	r0, [sp, #16]
    36ea:	9200      	str	r2, [sp, #0]
    36ec:	9305      	str	r3, [sp, #20]
    36ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
    36f0:	9c03      	ldr	r4, [sp, #12]
    36f2:	601c      	str	r4, [r3, #0]
    36f4:	2c00      	cmp	r4, #0
    36f6:	f000 80cc 	beq.w	3892 <getTrngSource+0x20e>
    36fa:	2600      	movs	r6, #0
    36fc:	9f04      	ldr	r7, [sp, #16]
    36fe:	f000 faa9 	bl	3c54 <LLF_RND_TurnOffTrng>
    3702:	2300      	movs	r3, #0
    3704:	9307      	str	r3, [sp, #28]
    3706:	9b06      	ldr	r3, [sp, #24]
    3708:	f1bb 0f00 	cmp.w	fp, #0
    370c:	d03a      	beq.n	3784 <getTrngSource+0x100>
    370e:	2d00      	cmp	r5, #0
    3710:	d034      	beq.n	377c <getTrngSource+0xf8>
    3712:	bb53      	cbnz	r3, 376a <getTrngSource+0xe6>
    3714:	005b      	lsls	r3, r3, #1
    3716:	9306      	str	r3, [sp, #24]
    3718:	f1bb 0f00 	cmp.w	fp, #0
    371c:	d036      	beq.n	378c <getTrngSource+0x108>
    371e:	2d00      	cmp	r5, #0
    3720:	d034      	beq.n	378c <getTrngSource+0x108>
    3722:	b1e3      	cbz	r3, 375e <getTrngSource+0xda>
    3724:	a906      	add	r1, sp, #24
    3726:	4628      	mov	r0, r5
    3728:	f000 fa84 	bl	3c34 <LLF_RND_GetFastestRosc>
    372c:	2800      	cmp	r0, #0
    372e:	f000 817d 	beq.w	3a2c <getTrngSource+0x3a8>
    3732:	4b62      	ldr	r3, [pc, #392]	; (38bc <getTrngSource+0x238>)
    3734:	4298      	cmp	r0, r3
    3736:	d012      	beq.n	375e <getTrngSource+0xda>
    3738:	9000      	str	r0, [sp, #0]
    373a:	f000 fa8b 	bl	3c54 <LLF_RND_TurnOffTrng>
    373e:	9800      	ldr	r0, [sp, #0]
    3740:	b00f      	add	sp, #60	; 0x3c
    3742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3746:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    374a:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    374e:	3001      	adds	r0, #1
    3750:	bf0c      	ite	eq
    3752:	f44f 7104 	moveq.w	r1, #528	; 0x210
    3756:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
    375a:	9103      	str	r1, [sp, #12]
    375c:	e79d      	b.n	369a <getTrngSource+0x16>
    375e:	6a2b      	ldr	r3, [r5, #32]
    3760:	b973      	cbnz	r3, 3780 <getTrngSource+0xfc>
    3762:	4856      	ldr	r0, [pc, #344]	; (38bc <getTrngSource+0x238>)
    3764:	e7e8      	b.n	3738 <getTrngSource+0xb4>
    3766:	4856      	ldr	r0, [pc, #344]	; (38c0 <getTrngSource+0x23c>)
    3768:	e7e6      	b.n	3738 <getTrngSource+0xb4>
    376a:	a906      	add	r1, sp, #24
    376c:	4628      	mov	r0, r5
    376e:	f000 fa61 	bl	3c34 <LLF_RND_GetFastestRosc>
    3772:	b168      	cbz	r0, 3790 <getTrngSource+0x10c>
    3774:	4b53      	ldr	r3, [pc, #332]	; (38c4 <getTrngSource+0x240>)
    3776:	4298      	cmp	r0, r3
    3778:	d0de      	beq.n	3738 <getTrngSource+0xb4>
    377a:	9b06      	ldr	r3, [sp, #24]
    377c:	2b08      	cmp	r3, #8
    377e:	d1c9      	bne.n	3714 <getTrngSource+0x90>
    3780:	4851      	ldr	r0, [pc, #324]	; (38c8 <getTrngSource+0x244>)
    3782:	e7d9      	b.n	3738 <getTrngSource+0xb4>
    3784:	2b08      	cmp	r3, #8
    3786:	d0fb      	beq.n	3780 <getTrngSource+0xfc>
    3788:	005b      	lsls	r3, r3, #1
    378a:	9306      	str	r3, [sp, #24]
    378c:	484f      	ldr	r0, [pc, #316]	; (38cc <getTrngSource+0x248>)
    378e:	e7d3      	b.n	3738 <getTrngSource+0xb4>
    3790:	4629      	mov	r1, r5
    3792:	9806      	ldr	r0, [sp, #24]
    3794:	f000 fa30 	bl	3bf8 <LLF_RND_GetRoscSampleCnt>
    3798:	2800      	cmp	r0, #0
    379a:	d1eb      	bne.n	3774 <getTrngSource+0xf0>
    379c:	9b06      	ldr	r3, [sp, #24]
    379e:	2b08      	cmp	r3, #8
    37a0:	f000 810e 	beq.w	39c0 <getTrngSource+0x33c>
    37a4:	2b04      	cmp	r3, #4
    37a6:	f000 8131 	beq.w	3a0c <getTrngSource+0x388>
    37aa:	f1a3 0302 	sub.w	r3, r3, #2
    37ae:	fab3 f383 	clz	r3, r3
    37b2:	095b      	lsrs	r3, r3, #5
    37b4:	9301      	str	r3, [sp, #4]
    37b6:	2301      	movs	r3, #1
    37b8:	4619      	mov	r1, r3
    37ba:	4a45      	ldr	r2, [pc, #276]	; (38d0 <getTrngSource+0x24c>)
    37bc:	6013      	str	r3, [r2, #0]
    37be:	f842 3c84 	str.w	r3, [r2, #-132]
    37c2:	4b43      	ldr	r3, [pc, #268]	; (38d0 <getTrngSource+0x24c>)
    37c4:	6019      	str	r1, [r3, #0]
    37c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    37c8:	f8c9 3000 	str.w	r3, [r9]
    37cc:	f8d9 2000 	ldr.w	r2, [r9]
    37d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    37d2:	429a      	cmp	r2, r3
    37d4:	d1f5      	bne.n	37c2 <getTrngSource+0x13e>
    37d6:	f04f 0800 	mov.w	r8, #0
    37da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    37de:	f8ca 8000 	str.w	r8, [sl]
    37e2:	f7ff fc3b 	bl	305c <CC_HalClearInterruptBit>
    37e6:	4a3b      	ldr	r2, [pc, #236]	; (38d4 <getTrngSource+0x250>)
    37e8:	4b3b      	ldr	r3, [pc, #236]	; (38d8 <getTrngSource+0x254>)
    37ea:	4640      	mov	r0, r8
    37ec:	601a      	str	r2, [r3, #0]
    37ee:	f7ff fc43 	bl	3078 <CC_HalMaskInterrupt>
    37f2:	220a      	movs	r2, #10
    37f4:	9801      	ldr	r0, [sp, #4]
    37f6:	4939      	ldr	r1, [pc, #228]	; (38dc <getTrngSource+0x258>)
    37f8:	4b2d      	ldr	r3, [pc, #180]	; (38b0 <getTrngSource+0x22c>)
    37fa:	6008      	str	r0, [r1, #0]
    37fc:	601a      	str	r2, [r3, #0]
    37fe:	692a      	ldr	r2, [r5, #16]
    3800:	f1a8 3855 	sub.w	r8, r8, #1431655765	; 0x55555555
    3804:	fba8 1202 	umull	r1, r2, r8, r2
    3808:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    380a:	0912      	lsrs	r2, r2, #4
    380c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3810:	03db      	lsls	r3, r3, #15
    3812:	fb03 f302 	mul.w	r3, r3, r2
    3816:	4a32      	ldr	r2, [pc, #200]	; (38e0 <getTrngSource+0x25c>)
    3818:	099b      	lsrs	r3, r3, #6
    381a:	6013      	str	r3, [r2, #0]
    381c:	2301      	movs	r3, #1
    381e:	f8ca 3000 	str.w	r3, [sl]
    3822:	9906      	ldr	r1, [sp, #24]
    3824:	f8db 2000 	ldr.w	r2, [fp]
    3828:	020b      	lsls	r3, r1, #8
    382a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    382e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3832:	4313      	orrs	r3, r2
    3834:	f8cb 3000 	str.w	r3, [fp]
    3838:	a807      	add	r0, sp, #28
    383a:	f000 f9cd 	bl	3bd8 <LLF_RND_WaitRngInterrupt>
    383e:	2800      	cmp	r0, #0
    3840:	d198      	bne.n	3774 <getTrngSource+0xf0>
    3842:	4b28      	ldr	r3, [pc, #160]	; (38e4 <getTrngSource+0x260>)
    3844:	fba8 2804 	umull	r2, r8, r8, r4
    3848:	681a      	ldr	r2, [r3, #0]
    384a:	3314      	adds	r3, #20
    384c:	9208      	str	r2, [sp, #32]
    384e:	f853 2c10 	ldr.w	r2, [r3, #-16]
    3852:	ebb6 0f98 	cmp.w	r6, r8, lsr #2
    3856:	9209      	str	r2, [sp, #36]	; 0x24
    3858:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    385c:	920a      	str	r2, [sp, #40]	; 0x28
    385e:	f853 2c08 	ldr.w	r2, [r3, #-8]
    3862:	920b      	str	r2, [sp, #44]	; 0x2c
    3864:	f853 2c04 	ldr.w	r2, [r3, #-4]
    3868:	920c      	str	r2, [sp, #48]	; 0x30
    386a:	681b      	ldr	r3, [r3, #0]
    386c:	930d      	str	r3, [sp, #52]	; 0x34
    386e:	d101      	bne.n	3874 <getTrngSource+0x1f0>
    3870:	9b00      	ldr	r3, [sp, #0]
    3872:	b99b      	cbnz	r3, 389c <getTrngSource+0x218>
    3874:	4638      	mov	r0, r7
    3876:	2218      	movs	r2, #24
    3878:	a908      	add	r1, sp, #32
    387a:	f7ff fb13 	bl	2ea4 <CC_PalMemCopyPlat>
    387e:	3c18      	subs	r4, #24
    3880:	3718      	adds	r7, #24
    3882:	3601      	adds	r6, #1
    3884:	2c00      	cmp	r4, #0
    3886:	f47f af3a 	bne.w	36fe <getTrngSource+0x7a>
    388a:	9b04      	ldr	r3, [sp, #16]
    388c:	2b00      	cmp	r3, #0
    388e:	f040 809a 	bne.w	39c6 <getTrngSource+0x342>
    3892:	2300      	movs	r3, #0
    3894:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3896:	6013      	str	r3, [r2, #0]
    3898:	9b06      	ldr	r3, [sp, #24]
    389a:	e76f      	b.n	377c <getTrngSource+0xf8>
    389c:	461a      	mov	r2, r3
    389e:	4638      	mov	r0, r7
    38a0:	a908      	add	r1, sp, #32
    38a2:	1ae4      	subs	r4, r4, r3
    38a4:	f7ff fafe 	bl	2ea4 <CC_PalMemCopyPlat>
    38a8:	9b00      	ldr	r3, [sp, #0]
    38aa:	441f      	add	r7, r3
    38ac:	e7e9      	b.n	3882 <getTrngSource+0x1fe>
    38ae:	bf00      	nop
    38b0:	50841138 	.word	0x50841138
    38b4:	50841130 	.word	0x50841130
    38b8:	aaaaaaab 	.word	0xaaaaaaab
    38bc:	00f10c31 	.word	0x00f10c31
    38c0:	00f10c30 	.word	0x00f10c30
    38c4:	00f10c02 	.word	0x00f10c02
    38c8:	00f10c32 	.word	0x00f10c32
    38cc:	00f10c35 	.word	0x00f10c35
    38d0:	508411c4 	.word	0x508411c4
    38d4:	0ffffffe 	.word	0x0ffffffe
    38d8:	50841100 	.word	0x50841100
    38dc:	5084110c 	.word	0x5084110c
    38e0:	508411d8 	.word	0x508411d8
    38e4:	50841114 	.word	0x50841114
    38e8:	5084112c 	.word	0x5084112c
    38ec:	f1bb 0f00 	cmp.w	fp, #0
    38f0:	f43f af4c 	beq.w	378c <getTrngSource+0x108>
    38f4:	2d00      	cmp	r5, #0
    38f6:	f43f af49 	beq.w	378c <getTrngSource+0x108>
    38fa:	2301      	movs	r3, #1
    38fc:	a90e      	add	r1, sp, #56	; 0x38
    38fe:	f841 3d20 	str.w	r3, [r1, #-32]!
    3902:	f8cb 2000 	str.w	r2, [fp]
    3906:	4628      	mov	r0, r5
    3908:	f000 f994 	bl	3c34 <LLF_RND_GetFastestRosc>
    390c:	2800      	cmp	r0, #0
    390e:	f47f af13 	bne.w	3738 <getTrngSource+0xb4>
    3912:	4629      	mov	r1, r5
    3914:	9806      	ldr	r0, [sp, #24]
    3916:	f000 f96f 	bl	3bf8 <LLF_RND_GetRoscSampleCnt>
    391a:	2800      	cmp	r0, #0
    391c:	f47f af0c 	bne.w	3738 <getTrngSource+0xb4>
    3920:	9f06      	ldr	r7, [sp, #24]
    3922:	2f08      	cmp	r7, #8
    3924:	f000 80eb 	beq.w	3afe <getTrngSource+0x47a>
    3928:	2f04      	cmp	r7, #4
    392a:	f000 80ea 	beq.w	3b02 <getTrngSource+0x47e>
    392e:	f1a7 0702 	sub.w	r7, r7, #2
    3932:	fab7 f787 	clz	r7, r7
    3936:	097f      	lsrs	r7, r7, #5
    3938:	2201      	movs	r2, #1
    393a:	4616      	mov	r6, r2
    393c:	4b73      	ldr	r3, [pc, #460]	; (3b0c <getTrngSource+0x488>)
    393e:	4974      	ldr	r1, [pc, #464]	; (3b10 <getTrngSource+0x48c>)
    3940:	601a      	str	r2, [r3, #0]
    3942:	4618      	mov	r0, r3
    3944:	600a      	str	r2, [r1, #0]
    3946:	3b94      	subs	r3, #148	; 0x94
    3948:	6006      	str	r6, [r0, #0]
    394a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    394c:	601a      	str	r2, [r3, #0]
    394e:	6819      	ldr	r1, [r3, #0]
    3950:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3952:	4291      	cmp	r1, r2
    3954:	d1f8      	bne.n	3948 <getTrngSource+0x2c4>
    3956:	f04f 0800 	mov.w	r8, #0
    395a:	4b6e      	ldr	r3, [pc, #440]	; (3b14 <getTrngSource+0x490>)
    395c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3960:	f8c3 8000 	str.w	r8, [r3]
    3964:	f7ff fb7a 	bl	305c <CC_HalClearInterruptBit>
    3968:	4b6b      	ldr	r3, [pc, #428]	; (3b18 <getTrngSource+0x494>)
    396a:	4a6c      	ldr	r2, [pc, #432]	; (3b1c <getTrngSource+0x498>)
    396c:	4640      	mov	r0, r8
    396e:	601a      	str	r2, [r3, #0]
    3970:	f7ff fb82 	bl	3078 <CC_HalMaskInterrupt>
    3974:	220a      	movs	r2, #10
    3976:	496a      	ldr	r1, [pc, #424]	; (3b20 <getTrngSource+0x49c>)
    3978:	4b6a      	ldr	r3, [pc, #424]	; (3b24 <getTrngSource+0x4a0>)
    397a:	600f      	str	r7, [r1, #0]
    397c:	601a      	str	r2, [r3, #0]
    397e:	991a      	ldr	r1, [sp, #104]	; 0x68
    3980:	692b      	ldr	r3, [r5, #16]
    3982:	2901      	cmp	r1, #1
    3984:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3986:	f000 80b1 	beq.w	3aec <getTrngSource+0x468>
    398a:	4967      	ldr	r1, [pc, #412]	; (3b28 <getTrngSource+0x4a4>)
    398c:	fba1 1303 	umull	r1, r3, r1, r3
    3990:	091b      	lsrs	r3, r3, #4
    3992:	2101      	movs	r1, #1
    3994:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3998:	03d2      	lsls	r2, r2, #15
    399a:	fb03 f302 	mul.w	r3, r3, r2
    399e:	4a63      	ldr	r2, [pc, #396]	; (3b2c <getTrngSource+0x4a8>)
    39a0:	099b      	lsrs	r3, r3, #6
    39a2:	6013      	str	r3, [r2, #0]
    39a4:	4b5b      	ldr	r3, [pc, #364]	; (3b14 <getTrngSource+0x490>)
    39a6:	6019      	str	r1, [r3, #0]
    39a8:	9906      	ldr	r1, [sp, #24]
    39aa:	f8db 2000 	ldr.w	r2, [fp]
    39ae:	020b      	lsls	r3, r1, #8
    39b0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    39b4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    39b8:	4313      	orrs	r3, r2
    39ba:	f8cb 3000 	str.w	r3, [fp]
    39be:	e67f      	b.n	36c0 <getTrngSource+0x3c>
    39c0:	2303      	movs	r3, #3
    39c2:	9301      	str	r3, [sp, #4]
    39c4:	e6f7      	b.n	37b6 <getTrngSource+0x132>
    39c6:	9b03      	ldr	r3, [sp, #12]
    39c8:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
    39cc:	f63f af61 	bhi.w	3892 <getTrngSource+0x20e>
    39d0:	e9dd 7c04 	ldrd	r7, ip, [sp, #16]
    39d4:	4620      	mov	r0, r4
    39d6:	4623      	mov	r3, r4
    39d8:	696e      	ldr	r6, [r5, #20]
    39da:	e004      	b.n	39e6 <getTrngSource+0x362>
    39dc:	2001      	movs	r0, #1
    39de:	3301      	adds	r3, #1
    39e0:	4563      	cmp	r3, ip
    39e2:	4614      	mov	r4, r2
    39e4:	d815      	bhi.n	3a12 <getTrngSource+0x38e>
    39e6:	095a      	lsrs	r2, r3, #5
    39e8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    39ec:	f003 011f 	and.w	r1, r3, #31
    39f0:	40ca      	lsrs	r2, r1
    39f2:	291f      	cmp	r1, #31
    39f4:	bf18      	it	ne
    39f6:	f002 0201 	andne.w	r2, r2, #1
    39fa:	2b00      	cmp	r3, #0
    39fc:	d0ee      	beq.n	39dc <getTrngSource+0x358>
    39fe:	42a2      	cmp	r2, r4
    3a00:	d1ec      	bne.n	39dc <getTrngSource+0x358>
    3a02:	3001      	adds	r0, #1
    3a04:	4286      	cmp	r6, r0
    3a06:	d1ea      	bne.n	39de <getTrngSource+0x35a>
    3a08:	4849      	ldr	r0, [pc, #292]	; (3b30 <getTrngSource+0x4ac>)
    3a0a:	e00b      	b.n	3a24 <getTrngSource+0x3a0>
    3a0c:	2302      	movs	r3, #2
    3a0e:	9301      	str	r3, [sp, #4]
    3a10:	e6d1      	b.n	37b6 <getTrngSource+0x132>
    3a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3a16:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
    3a1a:	69aa      	ldr	r2, [r5, #24]
    3a1c:	f7ff fdf4 	bl	3608 <LLF_RND_AdaptiveProportionTest>
    3a20:	2800      	cmp	r0, #0
    3a22:	d05d      	beq.n	3ae0 <getTrngSource+0x45c>
    3a24:	2300      	movs	r3, #0
    3a26:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3a28:	6013      	str	r3, [r2, #0]
    3a2a:	e6a3      	b.n	3774 <getTrngSource+0xf0>
    3a2c:	4629      	mov	r1, r5
    3a2e:	9806      	ldr	r0, [sp, #24]
    3a30:	f000 f8e2 	bl	3bf8 <LLF_RND_GetRoscSampleCnt>
    3a34:	2800      	cmp	r0, #0
    3a36:	f47f ae7c 	bne.w	3732 <getTrngSource+0xae>
    3a3a:	9c06      	ldr	r4, [sp, #24]
    3a3c:	2c08      	cmp	r4, #8
    3a3e:	d051      	beq.n	3ae4 <getTrngSource+0x460>
    3a40:	2c04      	cmp	r4, #4
    3a42:	d051      	beq.n	3ae8 <getTrngSource+0x464>
    3a44:	f1a4 0402 	sub.w	r4, r4, #2
    3a48:	fab4 f484 	clz	r4, r4
    3a4c:	0964      	lsrs	r4, r4, #5
    3a4e:	2301      	movs	r3, #1
    3a50:	461e      	mov	r6, r3
    3a52:	4619      	mov	r1, r3
    3a54:	4a2d      	ldr	r2, [pc, #180]	; (3b0c <getTrngSource+0x488>)
    3a56:	6013      	str	r3, [r2, #0]
    3a58:	f842 3c84 	str.w	r3, [r2, #-132]
    3a5c:	4b2b      	ldr	r3, [pc, #172]	; (3b0c <getTrngSource+0x488>)
    3a5e:	6019      	str	r1, [r3, #0]
    3a60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3a62:	f8c9 3000 	str.w	r3, [r9]
    3a66:	f8d9 2000 	ldr.w	r2, [r9]
    3a6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3a6c:	429a      	cmp	r2, r3
    3a6e:	d1f5      	bne.n	3a5c <getTrngSource+0x3d8>
    3a70:	2700      	movs	r7, #0
    3a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3a76:	f8ca 7000 	str.w	r7, [sl]
    3a7a:	f7ff faef 	bl	305c <CC_HalClearInterruptBit>
    3a7e:	4b26      	ldr	r3, [pc, #152]	; (3b18 <getTrngSource+0x494>)
    3a80:	4a26      	ldr	r2, [pc, #152]	; (3b1c <getTrngSource+0x498>)
    3a82:	4638      	mov	r0, r7
    3a84:	601a      	str	r2, [r3, #0]
    3a86:	f7ff faf7 	bl	3078 <CC_HalMaskInterrupt>
    3a8a:	220a      	movs	r2, #10
    3a8c:	4924      	ldr	r1, [pc, #144]	; (3b20 <getTrngSource+0x49c>)
    3a8e:	4b25      	ldr	r3, [pc, #148]	; (3b24 <getTrngSource+0x4a0>)
    3a90:	600c      	str	r4, [r1, #0]
    3a92:	601a      	str	r2, [r3, #0]
    3a94:	692a      	ldr	r2, [r5, #16]
    3a96:	4924      	ldr	r1, [pc, #144]	; (3b28 <getTrngSource+0x4a4>)
    3a98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3a9a:	fba1 1202 	umull	r1, r2, r1, r2
    3a9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3aa2:	0912      	lsrs	r2, r2, #4
    3aa4:	03db      	lsls	r3, r3, #15
    3aa6:	fb03 f302 	mul.w	r3, r3, r2
    3aaa:	4a20      	ldr	r2, [pc, #128]	; (3b2c <getTrngSource+0x4a8>)
    3aac:	099b      	lsrs	r3, r3, #6
    3aae:	6013      	str	r3, [r2, #0]
    3ab0:	f8ca 6000 	str.w	r6, [sl]
    3ab4:	9b06      	ldr	r3, [sp, #24]
    3ab6:	f8db 1000 	ldr.w	r1, [fp]
    3aba:	021a      	lsls	r2, r3, #8
    3abc:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
    3ac0:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
    3ac4:	431a      	orrs	r2, r3
    3ac6:	0a13      	lsrs	r3, r2, #8
    3ac8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    3acc:	4313      	orrs	r3, r2
    3ace:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3ad2:	f8cb 3000 	str.w	r3, [fp]
    3ad6:	9b02      	ldr	r3, [sp, #8]
    3ad8:	3b01      	subs	r3, #1
    3ada:	9302      	str	r3, [sp, #8]
    3adc:	f47f ae07 	bne.w	36ee <getTrngSource+0x6a>
    3ae0:	2000      	movs	r0, #0
    3ae2:	e629      	b.n	3738 <getTrngSource+0xb4>
    3ae4:	2403      	movs	r4, #3
    3ae6:	e7b2      	b.n	3a4e <getTrngSource+0x3ca>
    3ae8:	2402      	movs	r4, #2
    3aea:	e7b0      	b.n	3a4e <getTrngSource+0x3ca>
    3aec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3af0:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
    3af4:	3101      	adds	r1, #1
    3af6:	d006      	beq.n	3b06 <getTrngSource+0x482>
    3af8:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    3afc:	e745      	b.n	398a <getTrngSource+0x306>
    3afe:	2703      	movs	r7, #3
    3b00:	e71a      	b.n	3938 <getTrngSource+0x2b4>
    3b02:	2702      	movs	r7, #2
    3b04:	e718      	b.n	3938 <getTrngSource+0x2b4>
    3b06:	2316      	movs	r3, #22
    3b08:	e743      	b.n	3992 <getTrngSource+0x30e>
    3b0a:	bf00      	nop
    3b0c:	508411c4 	.word	0x508411c4
    3b10:	50841140 	.word	0x50841140
    3b14:	5084112c 	.word	0x5084112c
    3b18:	50841100 	.word	0x50841100
    3b1c:	0ffffffe 	.word	0x0ffffffe
    3b20:	5084110c 	.word	0x5084110c
    3b24:	50841138 	.word	0x50841138
    3b28:	aaaaaaab 	.word	0xaaaaaaab
    3b2c:	508411d8 	.word	0x508411d8
    3b30:	00f10c36 	.word	0x00f10c36

00003b34 <LLF_RND_GetTrngSource>:
    3b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3b38:	4c1b      	ldr	r4, [pc, #108]	; (3ba8 <LLF_RND_GetTrngSource+0x74>)
    3b3a:	b085      	sub	sp, #20
    3b3c:	4607      	mov	r7, r0
    3b3e:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
    3b42:	4688      	mov	r8, r1
    3b44:	6820      	ldr	r0, [r4, #0]
    3b46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3b4a:	4691      	mov	r9, r2
    3b4c:	f7ff fa10 	bl	2f70 <CC_PalMutexLock>
    3b50:	bb28      	cbnz	r0, 3b9e <LLF_RND_GetTrngSource+0x6a>
    3b52:	2000      	movs	r0, #0
    3b54:	f7ff fa3c 	bl	2fd0 <CC_PalPowerSaveModeSelect>
    3b58:	b9e8      	cbnz	r0, 3b96 <LLF_RND_GetTrngSource+0x62>
    3b5a:	2300      	movs	r3, #0
    3b5c:	e9cd 5600 	strd	r5, r6, [sp]
    3b60:	9302      	str	r3, [sp, #8]
    3b62:	464a      	mov	r2, r9
    3b64:	4641      	mov	r1, r8
    3b66:	4638      	mov	r0, r7
    3b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3b6a:	f7ff fd8b 	bl	3684 <getTrngSource>
    3b6e:	4605      	mov	r5, r0
    3b70:	2001      	movs	r0, #1
    3b72:	f7ff fa2d 	bl	2fd0 <CC_PalPowerSaveModeSelect>
    3b76:	b950      	cbnz	r0, 3b8e <LLF_RND_GetTrngSource+0x5a>
    3b78:	6820      	ldr	r0, [r4, #0]
    3b7a:	f7ff fa01 	bl	2f80 <CC_PalMutexUnlock>
    3b7e:	b110      	cbz	r0, 3b86 <LLF_RND_GetTrngSource+0x52>
    3b80:	480a      	ldr	r0, [pc, #40]	; (3bac <LLF_RND_GetTrngSource+0x78>)
    3b82:	f7ff fb8d 	bl	32a0 <CC_PalAbort>
    3b86:	4628      	mov	r0, r5
    3b88:	b005      	add	sp, #20
    3b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3b8e:	4808      	ldr	r0, [pc, #32]	; (3bb0 <LLF_RND_GetTrngSource+0x7c>)
    3b90:	f7ff fb86 	bl	32a0 <CC_PalAbort>
    3b94:	e7f0      	b.n	3b78 <LLF_RND_GetTrngSource+0x44>
    3b96:	4807      	ldr	r0, [pc, #28]	; (3bb4 <LLF_RND_GetTrngSource+0x80>)
    3b98:	f7ff fb82 	bl	32a0 <CC_PalAbort>
    3b9c:	e7dd      	b.n	3b5a <LLF_RND_GetTrngSource+0x26>
    3b9e:	4806      	ldr	r0, [pc, #24]	; (3bb8 <LLF_RND_GetTrngSource+0x84>)
    3ba0:	f7ff fb7e 	bl	32a0 <CC_PalAbort>
    3ba4:	e7d5      	b.n	3b52 <LLF_RND_GetTrngSource+0x1e>
    3ba6:	bf00      	nop
    3ba8:	20000064 	.word	0x20000064
    3bac:	00004a88 	.word	0x00004a88
    3bb0:	00004ac0 	.word	0x00004ac0
    3bb4:	00004aa0 	.word	0x00004aa0
    3bb8:	00004a70 	.word	0x00004a70

00003bbc <LLF_RND_RunTrngStartupTest>:
    3bbc:	b510      	push	{r4, lr}
    3bbe:	2401      	movs	r4, #1
    3bc0:	b086      	sub	sp, #24
    3bc2:	ab05      	add	r3, sp, #20
    3bc4:	e9cd 2401 	strd	r2, r4, [sp, #4]
    3bc8:	9300      	str	r3, [sp, #0]
    3bca:	2200      	movs	r2, #0
    3bcc:	ab04      	add	r3, sp, #16
    3bce:	f7ff fd59 	bl	3684 <getTrngSource>
    3bd2:	b006      	add	sp, #24
    3bd4:	bd10      	pop	{r4, pc}
    3bd6:	bf00      	nop

00003bd8 <LLF_RND_WaitRngInterrupt>:
    3bd8:	b508      	push	{r3, lr}
    3bda:	4601      	mov	r1, r0
    3bdc:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3be0:	f7ff fa50 	bl	3084 <CC_HalWaitInterruptRND>
    3be4:	2300      	movs	r3, #0
    3be6:	4902      	ldr	r1, [pc, #8]	; (3bf0 <LLF_RND_WaitRngInterrupt+0x18>)
    3be8:	4a02      	ldr	r2, [pc, #8]	; (3bf4 <LLF_RND_WaitRngInterrupt+0x1c>)
    3bea:	600b      	str	r3, [r1, #0]
    3bec:	6013      	str	r3, [r2, #0]
    3bee:	bd08      	pop	{r3, pc}
    3bf0:	508411c8 	.word	0x508411c8
    3bf4:	5084112c 	.word	0x5084112c

00003bf8 <LLF_RND_GetRoscSampleCnt>:
    3bf8:	3801      	subs	r0, #1
    3bfa:	2807      	cmp	r0, #7
    3bfc:	d815      	bhi.n	3c2a <LLF_RND_GetRoscSampleCnt+0x32>
    3bfe:	e8df f000 	tbb	[pc, r0]
    3c02:	0c10      	.short	0x0c10
    3c04:	14140814 	.word	0x14140814
    3c08:	0414      	.short	0x0414
    3c0a:	68cb      	ldr	r3, [r1, #12]
    3c0c:	2000      	movs	r0, #0
    3c0e:	624b      	str	r3, [r1, #36]	; 0x24
    3c10:	4770      	bx	lr
    3c12:	688b      	ldr	r3, [r1, #8]
    3c14:	2000      	movs	r0, #0
    3c16:	624b      	str	r3, [r1, #36]	; 0x24
    3c18:	4770      	bx	lr
    3c1a:	684b      	ldr	r3, [r1, #4]
    3c1c:	2000      	movs	r0, #0
    3c1e:	624b      	str	r3, [r1, #36]	; 0x24
    3c20:	4770      	bx	lr
    3c22:	680b      	ldr	r3, [r1, #0]
    3c24:	2000      	movs	r0, #0
    3c26:	624b      	str	r3, [r1, #36]	; 0x24
    3c28:	4770      	bx	lr
    3c2a:	4801      	ldr	r0, [pc, #4]	; (3c30 <LLF_RND_GetRoscSampleCnt+0x38>)
    3c2c:	4770      	bx	lr
    3c2e:	bf00      	nop
    3c30:	00f10c31 	.word	0x00f10c31

00003c34 <LLF_RND_GetFastestRosc>:
    3c34:	680b      	ldr	r3, [r1, #0]
    3c36:	e002      	b.n	3c3e <LLF_RND_GetFastestRosc+0xa>
    3c38:	2b08      	cmp	r3, #8
    3c3a:	600b      	str	r3, [r1, #0]
    3c3c:	d806      	bhi.n	3c4c <LLF_RND_GetFastestRosc+0x18>
    3c3e:	6a02      	ldr	r2, [r0, #32]
    3c40:	4213      	tst	r3, r2
    3c42:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3c46:	d0f7      	beq.n	3c38 <LLF_RND_GetFastestRosc+0x4>
    3c48:	2000      	movs	r0, #0
    3c4a:	4770      	bx	lr
    3c4c:	4800      	ldr	r0, [pc, #0]	; (3c50 <LLF_RND_GetFastestRosc+0x1c>)
    3c4e:	4770      	bx	lr
    3c50:	00f10c31 	.word	0x00f10c31

00003c54 <LLF_RND_TurnOffTrng>:
    3c54:	2300      	movs	r3, #0
    3c56:	4904      	ldr	r1, [pc, #16]	; (3c68 <LLF_RND_TurnOffTrng+0x14>)
    3c58:	4a04      	ldr	r2, [pc, #16]	; (3c6c <LLF_RND_TurnOffTrng+0x18>)
    3c5a:	600b      	str	r3, [r1, #0]
    3c5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3c60:	6013      	str	r3, [r2, #0]
    3c62:	f7ff b9fb 	b.w	305c <CC_HalClearInterruptBit>
    3c66:	bf00      	nop
    3c68:	5084112c 	.word	0x5084112c
    3c6c:	508411c4 	.word	0x508411c4

00003c70 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    3c70:	b508      	push	{r3, lr}
	spm_config();
    3c72:	f7fd f903 	bl	e7c <spm_config>
	spm_jump();
}
    3c76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    3c7a:	f7fd b895 	b.w	da8 <spm_jump>

00003c7e <arch_printk_char_out>:
}
    3c7e:	2000      	movs	r0, #0
    3c80:	4770      	bx	lr

00003c82 <print_err>:
{
    3c82:	b570      	push	{r4, r5, r6, lr}
    3c84:	460d      	mov	r5, r1
    3c86:	4604      	mov	r4, r0
	out('E', ctx);
    3c88:	2045      	movs	r0, #69	; 0x45
    3c8a:	47a0      	blx	r4
	out('R', ctx);
    3c8c:	4629      	mov	r1, r5
    3c8e:	2052      	movs	r0, #82	; 0x52
    3c90:	47a0      	blx	r4
	out('R', ctx);
    3c92:	4629      	mov	r1, r5
    3c94:	4623      	mov	r3, r4
}
    3c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    3c9a:	2052      	movs	r0, #82	; 0x52
    3c9c:	4718      	bx	r3

00003c9e <printk>:
{
    3c9e:	b40f      	push	{r0, r1, r2, r3}
    3ca0:	b507      	push	{r0, r1, r2, lr}
    3ca2:	a904      	add	r1, sp, #16
    3ca4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    3ca8:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    3caa:	f7fc fe79 	bl	9a0 <vprintk>
}
    3cae:	b003      	add	sp, #12
    3cb0:	f85d eb04 	ldr.w	lr, [sp], #4
    3cb4:	b004      	add	sp, #16
    3cb6:	4770      	bx	lr

00003cb8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3cb8:	4604      	mov	r4, r0
    3cba:	b508      	push	{r3, lr}
    3cbc:	4608      	mov	r0, r1
    3cbe:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    3cc0:	461a      	mov	r2, r3
    3cc2:	47a0      	blx	r4
	return z_impl_k_current_get();
    3cc4:	f7fe ff2c 	bl	2b20 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    3cc8:	f7fd fd32 	bl	1730 <z_impl_k_thread_abort>

00003ccc <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
    3ccc:	6803      	ldr	r3, [r0, #0]
    3cce:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
    3cd2:	6883      	ldr	r3, [r0, #8]
    3cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
    3cd8:	bf2c      	ite	cs
    3cda:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
    3cde:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    3ce2:	4770      	bx	lr

00003ce4 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
    3ce4:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
    3ce6:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
    3ce8:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
    3cea:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
    3cee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
    3cf2:	bf2c      	ite	cs
    3cf4:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
    3cf8:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    3cfc:	bd10      	pop	{r4, pc}

00003cfe <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    3cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d02:	4604      	mov	r4, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
}

static ALWAYS_INLINE chunkid_t size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    3d04:	2200      	movs	r2, #0
    3d06:	460d      	mov	r5, r1
    3d08:	f7ff ffe0 	bl	3ccc <chunk_field>
    3d0c:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3d0e:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    3d10:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    3d16:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3d1a:	bf34      	ite	cc
    3d1c:	2000      	movcc	r0, #0
    3d1e:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
    3d20:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    3d22:	f1c0 001f 	rsb	r0, r0, #31
    3d26:	1a80      	subs	r0, r0, r2
    3d28:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    3d2c:	684a      	ldr	r2, [r1, #4]
    3d2e:	1c56      	adds	r6, r2, #1
    3d30:	604e      	str	r6, [r1, #4]
    3d32:	b9a2      	cbnz	r2, 3d5e <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
    3d34:	2201      	movs	r2, #1
    3d36:	fa02 f100 	lsl.w	r1, r2, r0
    3d3a:	6962      	ldr	r2, [r4, #20]
    3d3c:	430a      	orrs	r2, r1
    3d3e:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
    3d40:	4629      	mov	r1, r5
		h->buckets[b].next = c;
    3d42:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
    3d46:	2202      	movs	r2, #2
    3d48:	462b      	mov	r3, r5
    3d4a:	4620      	mov	r0, r4
    3d4c:	f7ff ffca 	bl	3ce4 <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
    3d50:	2203      	movs	r2, #3
    3d52:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
    3d54:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
    3d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
    3d5a:	f7ff bfc3 	b.w	3ce4 <chunk_set>
		chunkid_t second = h->buckets[b].next;
    3d5e:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
    3d62:	2202      	movs	r2, #2
    3d64:	4639      	mov	r1, r7
    3d66:	4620      	mov	r0, r4
    3d68:	f7ff ffb0 	bl	3ccc <chunk_field>
    3d6c:	4606      	mov	r6, r0
		chunk_set(h, c, FREE_PREV, first);
    3d6e:	4603      	mov	r3, r0
    3d70:	2202      	movs	r2, #2
    3d72:	4629      	mov	r1, r5
    3d74:	4620      	mov	r0, r4
    3d76:	f7ff ffb5 	bl	3ce4 <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
    3d7a:	463b      	mov	r3, r7
    3d7c:	2203      	movs	r2, #3
    3d7e:	4629      	mov	r1, r5
    3d80:	4620      	mov	r0, r4
    3d82:	f7ff ffaf 	bl	3ce4 <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
    3d86:	2203      	movs	r2, #3
    3d88:	4631      	mov	r1, r6
    3d8a:	462b      	mov	r3, r5
    3d8c:	4620      	mov	r0, r4
    3d8e:	f7ff ffa9 	bl	3ce4 <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
    3d92:	2202      	movs	r2, #2
    3d94:	4639      	mov	r1, r7
    3d96:	e7dd      	b.n	3d54 <free_list_add+0x56>

00003d98 <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    3d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    3d9a:	188b      	adds	r3, r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    3d9c:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
    3da0:	1dcc      	adds	r4, r1, #7
    3da2:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    3da6:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    3daa:	1b1b      	subs	r3, r3, r4
    3dac:	08db      	lsrs	r3, r3, #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    3dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    3db2:	bf2c      	ite	cs
    3db4:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
    3db8:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
    3dba:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
    3dbc:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3dbe:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    3dc0:	60e1      	str	r1, [r4, #12]
    3dc2:	bf94      	ite	ls
    3dc4:	2100      	movls	r1, #0
    3dc6:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    3dc8:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3dcc:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
    3dce:	4684      	mov	ip, r0
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
    3dd0:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
    3dd4:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
    3dd8:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    3dda:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
    3dde:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    3de2:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
    3de4:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
    3de6:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    3de8:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3dea:	68a2      	ldr	r2, [r4, #8]
    3dec:	42ba      	cmp	r2, r7
    3dee:	bf94      	ite	ls
    3df0:	2200      	movls	r2, #0
    3df2:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    3df4:	f1c2 021f 	rsb	r2, r2, #31
    3df8:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    3dfa:	4290      	cmp	r0, r2
    3dfc:	dd0a      	ble.n	3e14 <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
    3dfe:	4620      	mov	r0, r4
    3e00:	1a5b      	subs	r3, r3, r1
    3e02:	2200      	movs	r2, #0
    3e04:	f7ff ff6e 	bl	3ce4 <chunk_set>
	free_list_add(h, h->chunk0);
    3e08:	4620      	mov	r0, r4
    3e0a:	6921      	ldr	r1, [r4, #16]
}
    3e0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
    3e10:	f7ff bf75 	b.w	3cfe <free_list_add>
		heap->heap->buckets[i].list_size = 0;
    3e14:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    3e18:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
    3e1a:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    3e1e:	e7e4      	b.n	3dea <sys_heap_init+0x52>

00003e20 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    3e20:	4770      	bx	lr

00003e22 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    3e22:	f7fe b82b 	b.w	1e7c <SystemInit>

00003e26 <get_status>:
	if (data->started) {
    3e26:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
    3e28:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
    3e2a:	b2c9      	uxtb	r1, r1
	if (data->started) {
    3e2c:	fb02 3101 	mla	r1, r2, r1, r3
    3e30:	7a4b      	ldrb	r3, [r1, #9]
    3e32:	b923      	cbnz	r3, 3e3e <get_status+0x18>
	if (data->ref > 0) {
    3e34:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    3e36:	fab0 f080 	clz	r0, r0
    3e3a:	0940      	lsrs	r0, r0, #5
    3e3c:	4770      	bx	lr
    3e3e:	2002      	movs	r0, #2
}
    3e40:	4770      	bx	lr

00003e42 <clock_stop>:
{
    3e42:	b570      	push	{r4, r5, r6, lr}
    3e44:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
    3e46:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
    3e48:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
    3e4a:	f04f 0320 	mov.w	r3, #32
    3e4e:	f3ef 8611 	mrs	r6, BASEPRI
    3e52:	f383 8811 	msr	BASEPRI, r3
    3e56:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    3e5a:	220c      	movs	r2, #12
    3e5c:	434a      	muls	r2, r1
    3e5e:	18ab      	adds	r3, r5, r2
    3e60:	7a18      	ldrb	r0, [r3, #8]
    3e62:	b190      	cbz	r0, 3e8a <clock_stop+0x48>
	data->ref--;
    3e64:	3801      	subs	r0, #1
    3e66:	b2c0      	uxtb	r0, r0
    3e68:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
    3e6a:	b988      	cbnz	r0, 3e90 <clock_stop+0x4e>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    3e6c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
	list->head = NULL;
    3e70:	50a8      	str	r0, [r5, r2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e72:	78ca      	ldrb	r2, [r1, #3]
    3e74:	2101      	movs	r1, #1
    3e76:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
	list->tail = NULL;
    3e7a:	6058      	str	r0, [r3, #4]
    3e7c:	6011      	str	r1, [r2, #0]
		data->started = false;
    3e7e:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
    3e80:	f386 8811 	msr	BASEPRI, r6
    3e84:	f3bf 8f6f 	isb	sy
}
    3e88:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
    3e8a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3e8e:	e7f7      	b.n	3e80 <clock_stop+0x3e>
	int err = 0;
    3e90:	2000      	movs	r0, #0
    3e92:	e7f5      	b.n	3e80 <clock_stop+0x3e>

00003e94 <clock_async_start>:
{
    3e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	config = get_sub_config(dev, type);
    3e98:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
    3e9a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
    3e9e:	b2cf      	uxtb	r7, r1
	if ((data != NULL)
    3ea0:	b14a      	cbz	r2, 3eb6 <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
    3ea2:	230c      	movs	r3, #12
    3ea4:	437b      	muls	r3, r7
    3ea6:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
    3eaa:	429a      	cmp	r2, r3
    3eac:	d052      	beq.n	3f54 <clock_async_start+0xc0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    3eae:	b113      	cbz	r3, 3eb6 <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3eb0:	681b      	ldr	r3, [r3, #0]
	} while (item);
    3eb2:	2b00      	cmp	r3, #0
    3eb4:	d1f9      	bne.n	3eaa <clock_async_start+0x16>
	__asm__ volatile(
    3eb6:	f04f 0320 	mov.w	r3, #32
    3eba:	f3ef 8c11 	mrs	ip, BASEPRI
    3ebe:	f383 8811 	msr	BASEPRI, r3
    3ec2:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    3ec6:	250c      	movs	r5, #12
    3ec8:	437d      	muls	r5, r7
    3eca:	eb0e 0305 	add.w	r3, lr, r5
    3ece:	7a1c      	ldrb	r4, [r3, #8]
    3ed0:	3401      	adds	r4, #1
    3ed2:	b2e4      	uxtb	r4, r4
    3ed4:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    3ed6:	f38c 8811 	msr	BASEPRI, ip
    3eda:	f3bf 8f6f 	isb	sy
	if (data) {
    3ede:	b35a      	cbz	r2, 3f38 <clock_async_start+0xa4>
    p_reg->INTENCLR = mask;
    3ee0:	f04f 2c50 	mov.w	ip, #1342197760	; 0x50005000
    3ee4:	f04f 0803 	mov.w	r8, #3
    3ee8:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		already_started = clk_data->started;
    3eec:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
    3ef0:	f1bc 0f00 	cmp.w	ip, #0
    3ef4:	d115      	bne.n	3f22 <clock_async_start+0x8e>
	__asm__ volatile(
    3ef6:	f04f 0820 	mov.w	r8, #32
    3efa:	f3ef 8911 	mrs	r9, BASEPRI
    3efe:	f388 8811 	msr	BASEPRI, r8
    3f02:	f3bf 8f6f 	isb	sy
	parent->next = child;
    3f06:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_APPEND(slist, snode)
    3f0a:	f8d3 8004 	ldr.w	r8, [r3, #4]
    3f0e:	f1b8 0f00 	cmp.w	r8, #0
    3f12:	d11b      	bne.n	3f4c <clock_async_start+0xb8>
	list->tail = node;
    3f14:	605a      	str	r2, [r3, #4]
	list->head = node;
    3f16:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
    3f1a:	f389 8811 	msr	BASEPRI, r9
    3f1e:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    3f22:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3f26:	2503      	movs	r5, #3
    3f28:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		if (already_started) {
    3f2c:	f1bc 0f00 	cmp.w	ip, #0
    3f30:	d002      	beq.n	3f38 <clock_async_start+0xa4>
			data->cb(dev, subsys, data->user_data);
    3f32:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
    3f36:	4798      	blx	r3
	if (ref == 1) {
    3f38:	2c01      	cmp	r4, #1
    3f3a:	d105      	bne.n	3f48 <clock_async_start+0xb4>
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    3f3c:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f40:	78b3      	ldrb	r3, [r6, #2]
    3f42:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    3f46:	601c      	str	r4, [r3, #0]
	return 0;
    3f48:	2000      	movs	r0, #0
    3f4a:	e005      	b.n	3f58 <clock_async_start+0xc4>
	parent->next = child;
    3f4c:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
    3f50:	605a      	str	r2, [r3, #4]
}
    3f52:	e7e2      	b.n	3f1a <clock_async_start+0x86>
		return -EBUSY;
    3f54:	f06f 000f 	mvn.w	r0, #15
}
    3f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003f5c <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    3f5c:	2200      	movs	r2, #0
    3f5e:	f7ff bf99 	b.w	3e94 <clock_async_start>

00003f62 <clk_init>:
{
    3f62:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3f64:	2200      	movs	r2, #0
{
    3f66:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3f68:	2101      	movs	r1, #1
    3f6a:	2005      	movs	r0, #5
    3f6c:	f7fd f9d8 	bl	1320 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
    3f70:	2005      	movs	r0, #5
    3f72:	f7fd f9c5 	bl	1300 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    3f76:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3f7a:	2202      	movs	r2, #2
    3f7c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    3f80:	2203      	movs	r2, #3
	list->head = NULL;
    3f82:	2000      	movs	r0, #0
    3f84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
    3f88:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
    3f8a:	e9c3 0000 	strd	r0, r0, [r3]
    3f8e:	68e3      	ldr	r3, [r4, #12]
    3f90:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
    3f94:	bd10      	pop	{r4, pc}

00003f96 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    3f96:	4770      	bx	lr

00003f98 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    3f98:	4770      	bx	lr

00003f9a <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
    3f9a:	2300      	movs	r3, #0
{
    3f9c:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
    3f9e:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
    3fa0:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
    3fa4:	f7ff f88c 	bl	30c0 <mbedtls_platform_setup>
}
    3fa8:	b003      	add	sp, #12
    3faa:	f85d fb04 	ldr.w	pc, [sp], #4

00003fae <__acle_se_spm_request_random_number>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    3fae:	2990      	cmp	r1, #144	; 0x90
{
    3fb0:	b508      	push	{r3, lr}
    3fb2:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    3fb4:	d139      	bne.n	402a <__acle_se_spm_request_random_number+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
    3fb6:	460a      	mov	r2, r1
    3fb8:	4601      	mov	r1, r0
    3fba:	2000      	movs	r0, #0
    3fbc:	f7ff f88c 	bl	30d8 <mbedtls_hardware_poll>
}
    3fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3fc4:	4671      	mov	r1, lr
    3fc6:	4672      	mov	r2, lr
    3fc8:	4673      	mov	r3, lr
    3fca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    3fce:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    3fd2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    3fd6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    3fda:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    3fde:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    3fe2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    3fe6:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    3fea:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    3fee:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    3ff2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    3ff6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    3ffa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    3ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    4002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    4006:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    400a:	f38e 8c00 	msr	CPSR_fs, lr
    400e:	b410      	push	{r4}
    4010:	eef1 ca10 	vmrs	ip, fpscr
    4014:	f64f 7460 	movw	r4, #65376	; 0xff60
    4018:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    401c:	ea0c 0c04 	and.w	ip, ip, r4
    4020:	eee1 ca10 	vmsr	fpscr, ip
    4024:	bc10      	pop	{r4}
    4026:	46f4      	mov	ip, lr
    4028:	4774      	bxns	lr
		return -EINVAL;
    402a:	f06f 0015 	mvn.w	r0, #21
    402e:	e7c7      	b.n	3fc0 <__acle_se_spm_request_random_number+0x12>

00004030 <abort_function>:
	while(1);
    4030:	e7fe      	b.n	4030 <abort_function>

00004032 <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4032:	2100      	movs	r1, #0
    4034:	2001      	movs	r0, #1
    4036:	f000 b829 	b.w	408c <z_arm_fatal_error>

0000403a <irq_target_state_set>:
 *
 * @return N/A
 */
void irq_target_state_set(unsigned int irq, int secure_state)
{
	if (secure_state) {
    403a:	b243      	sxtb	r3, r0
    403c:	b1a9      	cbz	r1, 406a <irq_target_state_set+0x30>
  if ((int32_t)(IRQn) >= 0)
    403e:	2b00      	cmp	r3, #0
    4040:	db12      	blt.n	4068 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    4042:	2101      	movs	r1, #1
    4044:	095b      	lsrs	r3, r3, #5
    4046:	009b      	lsls	r3, r3, #2
    4048:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    404c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4050:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
    4054:	f000 001f 	and.w	r0, r0, #31
    4058:	fa01 f000 	lsl.w	r0, r1, r0
    405c:	ea22 0000 	bic.w	r0, r2, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    4060:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    4064:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
		/* Set target state to Non-Secure */
		if (NVIC_SetTargetState(irq) != 1) {
			__ASSERT(0, "NVIC SetTargetState error");
		}
	}
}
    4068:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    406a:	2b00      	cmp	r3, #0
    406c:	dbfc      	blt.n	4068 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    406e:	2201      	movs	r2, #1
    4070:	095b      	lsrs	r3, r3, #5
    4072:	009b      	lsls	r3, r3, #2
    4074:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4078:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    407c:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    4080:	f000 001f 	and.w	r0, r0, #31
    4084:	fa02 f000 	lsl.w	r0, r2, r0
    4088:	4308      	orrs	r0, r1
    408a:	e7e9      	b.n	4060 <irq_target_state_set+0x26>

0000408c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    408c:	f000 b927 	b.w	42de <z_fatal_error>

00004090 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4090:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4092:	6800      	ldr	r0, [r0, #0]
    4094:	f000 b923 	b.w	42de <z_fatal_error>

00004098 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    4098:	b508      	push	{r3, lr}
	handler();
    409a:	f7fd f9a3 	bl	13e4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    409e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    40a2:	f7fd bb19 	b.w	16d8 <z_arm_exc_exit>

000040a6 <mpu_configure_region>:
{
    40a6:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    40a8:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    40aa:	680c      	ldr	r4, [r1, #0]
{
    40ac:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
    40ae:	890a      	ldrh	r2, [r1, #8]
    40b0:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    40b2:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    40b4:	3b01      	subs	r3, #1
    40b6:	f024 041f 	bic.w	r4, r4, #31
    40ba:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    40bc:	f002 021f 	and.w	r2, r2, #31
    40c0:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    40c4:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    40c8:	280f      	cmp	r0, #15
    40ca:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    40cc:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    40d0:	9303      	str	r3, [sp, #12]
    40d2:	d805      	bhi.n	40e0 <mpu_configure_region+0x3a>
	region_init(index, region_conf);
    40d4:	4669      	mov	r1, sp
    40d6:	f7fd fb7b 	bl	17d0 <region_init>
}
    40da:	4620      	mov	r0, r4
    40dc:	b005      	add	sp, #20
    40de:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    40e0:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
    40e4:	e7f9      	b.n	40da <mpu_configure_region+0x34>

000040e6 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    40e6:	e840 f000 	tt	r0, r0
    40ea:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    40ec:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    40f0:	bf14      	ite	ne
    40f2:	4618      	movne	r0, r3
    40f4:	f06f 0015 	mvneq.w	r0, #21
    40f8:	4770      	bx	lr

000040fa <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    40fa:	3801      	subs	r0, #1
    40fc:	3901      	subs	r1, #1
    40fe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    4102:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4106:	4293      	cmp	r3, r2
    4108:	d101      	bne.n	410e <strcmp+0x14>
    410a:	2b00      	cmp	r3, #0
    410c:	d1f7      	bne.n	40fe <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    410e:	1a98      	subs	r0, r3, r2
    4110:	4770      	bx	lr

00004112 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    4112:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    4114:	b15a      	cbz	r2, 412e <memcmp+0x1c>
    4116:	3901      	subs	r1, #1
    4118:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    411a:	f810 2b01 	ldrb.w	r2, [r0], #1
    411e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    4122:	42a0      	cmp	r0, r4
    4124:	d001      	beq.n	412a <memcmp+0x18>
    4126:	429a      	cmp	r2, r3
    4128:	d0f7      	beq.n	411a <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    412a:	1ad0      	subs	r0, r2, r3
}
    412c:	bd10      	pop	{r4, pc}
		return 0;
    412e:	4610      	mov	r0, r2
    4130:	e7fc      	b.n	412c <memcmp+0x1a>

00004132 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    4132:	1a43      	subs	r3, r0, r1
    4134:	4293      	cmp	r3, r2
{
    4136:	b510      	push	{r4, lr}
    4138:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    413c:	d308      	bcc.n	4150 <memmove+0x1e>
	char *dest = d;
    413e:	4602      	mov	r2, r0
    4140:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    4142:	429a      	cmp	r2, r3
    4144:	d00b      	beq.n	415e <memmove+0x2c>
			*dest = *src;
    4146:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    414a:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    414e:	e7f8      	b.n	4142 <memmove+0x10>
    4150:	440a      	add	r2, r1
			dest[n] = src[n];
    4152:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    4156:	428a      	cmp	r2, r1
			dest[n] = src[n];
    4158:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    415c:	d1f9      	bne.n	4152 <memmove+0x20>
		}
	}

	return d;
}
    415e:	bd10      	pop	{r4, pc}

00004160 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    4160:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    4162:	ea81 0400 	eor.w	r4, r1, r0
    4166:	07a5      	lsls	r5, r4, #30
    4168:	4603      	mov	r3, r0
    416a:	d00b      	beq.n	4184 <memcpy+0x24>
    416c:	3b01      	subs	r3, #1
    416e:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    4170:	4291      	cmp	r1, r2
    4172:	d11b      	bne.n	41ac <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4174:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    4176:	2a00      	cmp	r2, #0
    4178:	d0fc      	beq.n	4174 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    417a:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    417e:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    4180:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    4184:	079c      	lsls	r4, r3, #30
    4186:	d1f6      	bne.n	4176 <memcpy+0x16>
    4188:	f022 0403 	bic.w	r4, r2, #3
    418c:	1f1d      	subs	r5, r3, #4
    418e:	0896      	lsrs	r6, r2, #2
    4190:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    4192:	42b9      	cmp	r1, r7
    4194:	d105      	bne.n	41a2 <memcpy+0x42>
    4196:	f06f 0503 	mvn.w	r5, #3
    419a:	4423      	add	r3, r4
    419c:	fb05 2206 	mla	r2, r5, r6, r2
    41a0:	e7e4      	b.n	416c <memcpy+0xc>
			*(d_word++) = *(s_word++);
    41a2:	f851 cb04 	ldr.w	ip, [r1], #4
    41a6:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    41aa:	e7f2      	b.n	4192 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    41ac:	f811 4b01 	ldrb.w	r4, [r1], #1
    41b0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    41b4:	e7dc      	b.n	4170 <memcpy+0x10>

000041b6 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    41b6:	4603      	mov	r3, r0
{
    41b8:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    41ba:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    41bc:	079c      	lsls	r4, r3, #30
    41be:	d111      	bne.n	41e4 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    41c0:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    41c4:	f022 0603 	bic.w	r6, r2, #3
    41c8:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    41cc:	441e      	add	r6, r3
    41ce:	0894      	lsrs	r4, r2, #2
    41d0:	42b3      	cmp	r3, r6
    41d2:	d10d      	bne.n	41f0 <memset+0x3a>
    41d4:	f06f 0503 	mvn.w	r5, #3
    41d8:	fb05 2204 	mla	r2, r5, r4, r2
    41dc:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    41de:	4293      	cmp	r3, r2
    41e0:	d109      	bne.n	41f6 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    41e2:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    41e4:	2a00      	cmp	r2, #0
    41e6:	d0fc      	beq.n	41e2 <memset+0x2c>
		*(d_byte++) = c_byte;
    41e8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    41ec:	3a01      	subs	r2, #1
    41ee:	e7e5      	b.n	41bc <memset+0x6>
		*(d_word++) = c_word;
    41f0:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    41f4:	e7ec      	b.n	41d0 <memset+0x1a>
		*(d_byte++) = c_byte;
    41f6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    41fa:	e7f0      	b.n	41de <memset+0x28>

000041fc <_stdout_hook_default>:
}
    41fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4200:	4770      	bx	lr

00004202 <uarte_nrfx_config_get>:
{
    4202:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    4204:	68c2      	ldr	r2, [r0, #12]
    4206:	e892 0003 	ldmia.w	r2, {r0, r1}
    420a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    420e:	2000      	movs	r0, #0
    4210:	4770      	bx	lr

00004212 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4212:	6843      	ldr	r3, [r0, #4]
    4214:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4216:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    421a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    421e:	4770      	bx	lr

00004220 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4220:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    4222:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    4224:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4226:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    422a:	b138      	cbz	r0, 423c <uarte_nrfx_poll_in+0x1c>
	*c = data->rx_data;
    422c:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    422e:	2000      	movs	r0, #0
    4230:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4232:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4234:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4238:	601a      	str	r2, [r3, #0]
	return 0;
    423a:	4770      	bx	lr
		return -1;
    423c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4240:	4770      	bx	lr

00004242 <uarte_nrfx_poll_out>:
{
    4242:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    4246:	6843      	ldr	r3, [r0, #4]
{
    4248:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
    424c:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    424e:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
    4250:	f000 f94c 	bl	44ec <k_is_in_isr>
    4254:	b9c0      	cbnz	r0, 4288 <uarte_nrfx_poll_out+0x46>
		lock = &data->poll_out_lock;
    4256:	2564      	movs	r5, #100	; 0x64
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4258:	f04f 0801 	mov.w	r8, #1
    425c:	f106 0708 	add.w	r7, r6, #8
    4260:	e8d7 3fef 	ldaex	r3, [r7]
    4264:	2b00      	cmp	r3, #0
    4266:	d103      	bne.n	4270 <uarte_nrfx_poll_out+0x2e>
    4268:	e8c7 8fe2 	stlex	r2, r8, [r7]
    426c:	2a00      	cmp	r2, #0
    426e:	d1f7      	bne.n	4260 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
    4270:	d00c      	beq.n	428c <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
    4272:	2021      	movs	r0, #33	; 0x21
    4274:	2100      	movs	r1, #0
    4276:	3d01      	subs	r5, #1
    4278:	f7fe fc32 	bl	2ae0 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    427c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    4280:	d1ee      	bne.n	4260 <uarte_nrfx_poll_out+0x1e>
}
    4282:	b002      	add	sp, #8
    4284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
    4288:	2301      	movs	r3, #1
    428a:	60b3      	str	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    428c:	2300      	movs	r3, #0
    428e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4292:	f10d 0307 	add.w	r3, sp, #7
    4296:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    429a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    429c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
    42a0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42a4:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    42a6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
    42aa:	b923      	cbnz	r3, 42b6 <uarte_nrfx_poll_out+0x74>
    42ac:	2001      	movs	r0, #1
    42ae:	f000 f814 	bl	42da <nrfx_busy_wait>
    42b2:	3d01      	subs	r5, #1
    42b4:	d1f7      	bne.n	42a6 <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42b6:	2301      	movs	r3, #1
    42b8:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    42ba:	2300      	movs	r3, #0
    42bc:	60b3      	str	r3, [r6, #8]
    42be:	e7e0      	b.n	4282 <uarte_nrfx_poll_out+0x40>

000042c0 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
    42c0:	2000      	movs	r0, #0
{
    42c2:	b508      	push	{r3, lr}
	sys_arch_reboot(0);
    42c4:	f7fd fa16 	bl	16f4 <sys_arch_reboot>

000042c8 <hw_cc310_init>:
#include <nrf_cc310_platform.h>

#if CONFIG_HW_CC310

static int hw_cc310_init(struct device *dev)
{
    42c8:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
    42ca:	f7fc ff31 	bl	1130 <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
    42ce:	f7fc ffb3 	bl	1238 <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
    42d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
    42d6:	f7fe bfb7 	b.w	3248 <nrf_cc310_platform_init_no_rng>

000042da <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    42da:	f000 b90d 	b.w	44f8 <z_impl_k_busy_wait>

000042de <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    42de:	b573      	push	{r0, r1, r4, r5, r6, lr}
    42e0:	4605      	mov	r5, r0
    42e2:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
    42e4:	f04f 0320 	mov.w	r3, #32
    42e8:	f3ef 8611 	mrs	r6, BASEPRI
    42ec:	f383 8811 	msr	BASEPRI, r3
    42f0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    42f4:	f7fe fc14 	bl	2b20 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    42f8:	9901      	ldr	r1, [sp, #4]
    42fa:	4604      	mov	r4, r0
    42fc:	4628      	mov	r0, r5
    42fe:	f7ff ffdf 	bl	42c0 <k_sys_fatal_error_handler>
	__asm__ volatile(
    4302:	f386 8811 	msr	BASEPRI, r6
    4306:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    430a:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    430c:	b002      	add	sp, #8
    430e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4312:	f7fd ba0d 	b.w	1730 <z_impl_k_thread_abort>

00004316 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    4316:	f7ff be3f 	b.w	3f98 <z_clock_idle_exit>

0000431a <k_mem_slab_init>:
{
    431a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    431c:	2400      	movs	r4, #0
    431e:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4320:	ea41 0402 	orr.w	r4, r1, r2
    4324:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    4328:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    432c:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    432e:	d10c      	bne.n	434a <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    4330:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4332:	42a3      	cmp	r3, r4
    4334:	d103      	bne.n	433e <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    4336:	e9c0 0000 	strd	r0, r0, [r0]
}
    433a:	2000      	movs	r0, #0
}
    433c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    433e:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4340:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    4342:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    4344:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    4346:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    4348:	e7f3      	b.n	4332 <k_mem_slab_init+0x18>
		return -EINVAL;
    434a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    434e:	e7f5      	b.n	433c <k_mem_slab_init+0x22>

00004350 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    4350:	2300      	movs	r3, #0
    4352:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
    4356:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    435a:	4618      	mov	r0, r3
    435c:	4770      	bx	lr

0000435e <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    435e:	b921      	cbnz	r1, 436a <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4360:	f3ef 8005 	mrs	r0, IPSR
    4364:	b908      	cbnz	r0, 436a <z_reschedule+0xc>
    4366:	f7fc bf7d 	b.w	1264 <arch_swap>
    436a:	f381 8811 	msr	BASEPRI, r1
    436e:	f3bf 8f6f 	isb	sy
}
    4372:	4770      	bx	lr

00004374 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4374:	4603      	mov	r3, r0
    4376:	b920      	cbnz	r0, 4382 <z_reschedule_irqlock+0xe>
    4378:	f3ef 8205 	mrs	r2, IPSR
    437c:	b90a      	cbnz	r2, 4382 <z_reschedule_irqlock+0xe>
    437e:	f7fc bf71 	b.w	1264 <arch_swap>
    4382:	f383 8811 	msr	BASEPRI, r3
    4386:	f3bf 8f6f 	isb	sy
}
    438a:	4770      	bx	lr

0000438c <z_reschedule_unlocked>:
	__asm__ volatile(
    438c:	f04f 0320 	mov.w	r3, #32
    4390:	f3ef 8011 	mrs	r0, BASEPRI
    4394:	f383 8811 	msr	BASEPRI, r3
    4398:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    439c:	f7ff bfea 	b.w	4374 <z_reschedule_irqlock>

000043a0 <z_priq_dumb_best>:
	return list->head == list;
    43a0:	6803      	ldr	r3, [r0, #0]
}
    43a2:	4298      	cmp	r0, r3
    43a4:	bf14      	ite	ne
    43a6:	4618      	movne	r0, r3
    43a8:	2000      	moveq	r0, #0
    43aa:	4770      	bx	lr

000043ac <z_ready_thread>:
{
    43ac:	b510      	push	{r4, lr}
    43ae:	f04f 0320 	mov.w	r3, #32
    43b2:	f3ef 8411 	mrs	r4, BASEPRI
    43b6:	f383 8811 	msr	BASEPRI, r3
    43ba:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    43be:	f7fe f91f 	bl	2600 <ready_thread>
	__asm__ volatile(
    43c2:	f384 8811 	msr	BASEPRI, r4
    43c6:	f3bf 8f6f 	isb	sy
}
    43ca:	bd10      	pop	{r4, pc}

000043cc <z_thread_timeout>:
{
    43cc:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
    43ce:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    43d2:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    43d4:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
    43d8:	b1c3      	cbz	r3, 440c <z_thread_timeout+0x40>
	__asm__ volatile(
    43da:	f04f 0320 	mov.w	r3, #32
    43de:	f3ef 8511 	mrs	r5, BASEPRI
    43e2:	f383 8811 	msr	BASEPRI, r3
    43e6:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    43ea:	f850 0c10 	ldr.w	r0, [r0, #-16]
    43ee:	f7fe f8b1 	bl	2554 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    43f2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    43f6:	f023 0302 	bic.w	r3, r3, #2
    43fa:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
    43fe:	2300      	movs	r3, #0
    4400:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
    4404:	f385 8811 	msr	BASEPRI, r5
    4408:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    440c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
    4410:	4608      	mov	r0, r1
    4412:	f023 0314 	bic.w	r3, r3, #20
    4416:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
    441a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
    441e:	f7ff bfc5 	b.w	43ac <z_ready_thread>

00004422 <z_remove_thread_from_ready_q>:
{
    4422:	b510      	push	{r4, lr}
	__asm__ volatile(
    4424:	f04f 0320 	mov.w	r3, #32
    4428:	f3ef 8411 	mrs	r4, BASEPRI
    442c:	f383 8811 	msr	BASEPRI, r3
    4430:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
    4434:	f7fe fa3a 	bl	28ac <unready_thread>
	__asm__ volatile(
    4438:	f384 8811 	msr	BASEPRI, r4
    443c:	f3bf 8f6f 	isb	sy
}
    4440:	bd10      	pop	{r4, pc}

00004442 <add_to_waitq_locked>:
{
    4442:	b538      	push	{r3, r4, r5, lr}
    4444:	4604      	mov	r4, r0
    4446:	460d      	mov	r5, r1
	unready_thread(thread);
    4448:	f7fe fa30 	bl	28ac <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    444c:	7b63      	ldrb	r3, [r4, #13]
    444e:	f043 0302 	orr.w	r3, r3, #2
    4452:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4454:	b17d      	cbz	r5, 4476 <add_to_waitq_locked+0x34>
    4456:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    4458:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    445a:	429d      	cmp	r5, r3
    445c:	d012      	beq.n	4484 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    445e:	b18b      	cbz	r3, 4484 <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
    4460:	f994 200e 	ldrsb.w	r2, [r4, #14]
    4464:	f993 100e 	ldrsb.w	r1, [r3, #14]
    4468:	4291      	cmp	r1, r2
    446a:	dd05      	ble.n	4478 <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
    446c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    446e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    4472:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4474:	605c      	str	r4, [r3, #4]
}
    4476:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    4478:	6869      	ldr	r1, [r5, #4]
    447a:	428b      	cmp	r3, r1
    447c:	d002      	beq.n	4484 <add_to_waitq_locked+0x42>
    447e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4480:	2b00      	cmp	r3, #0
    4482:	d1ef      	bne.n	4464 <add_to_waitq_locked+0x22>
	node->prev = list->tail;
    4484:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    4486:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    4488:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    448a:	686b      	ldr	r3, [r5, #4]
    448c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    448e:	606c      	str	r4, [r5, #4]
}
    4490:	e7f1      	b.n	4476 <add_to_waitq_locked+0x34>

00004492 <z_unpend_first_thread>:
{
    4492:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4494:	f04f 0320 	mov.w	r3, #32
    4498:	f3ef 8211 	mrs	r2, BASEPRI
    449c:	f383 8811 	msr	BASEPRI, r3
    44a0:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    44a4:	f7ff ff7c 	bl	43a0 <z_priq_dumb_best>
    44a8:	4604      	mov	r4, r0
	__asm__ volatile(
    44aa:	f382 8811 	msr	BASEPRI, r2
    44ae:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    44b2:	b1c8      	cbz	r0, 44e8 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    44b4:	f04f 0320 	mov.w	r3, #32
    44b8:	f3ef 8511 	mrs	r5, BASEPRI
    44bc:	f383 8811 	msr	BASEPRI, r3
    44c0:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    44c4:	4601      	mov	r1, r0
    44c6:	6880      	ldr	r0, [r0, #8]
    44c8:	f7fe f844 	bl	2554 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    44cc:	7b63      	ldrb	r3, [r4, #13]
    44ce:	f023 0302 	bic.w	r3, r3, #2
    44d2:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    44d4:	2300      	movs	r3, #0
    44d6:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    44d8:	f385 8811 	msr	BASEPRI, r5
    44dc:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    44e0:	f104 0018 	add.w	r0, r4, #24
    44e4:	f000 f80a 	bl	44fc <z_abort_timeout>
}
    44e8:	4620      	mov	r0, r4
    44ea:	bd38      	pop	{r3, r4, r5, pc}

000044ec <k_is_in_isr>:
    44ec:	f3ef 8005 	mrs	r0, IPSR
}
    44f0:	3800      	subs	r0, #0
    44f2:	bf18      	it	ne
    44f4:	2001      	movne	r0, #1
    44f6:	4770      	bx	lr

000044f8 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    44f8:	f7fc ba74 	b.w	9e4 <arch_busy_wait>

000044fc <z_abort_timeout>:
{
    44fc:	b510      	push	{r4, lr}
	__asm__ volatile(
    44fe:	f04f 0220 	mov.w	r2, #32
    4502:	f3ef 8411 	mrs	r4, BASEPRI
    4506:	f382 8811 	msr	BASEPRI, r2
    450a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    450e:	6803      	ldr	r3, [r0, #0]
    4510:	b13b      	cbz	r3, 4522 <z_abort_timeout+0x26>
			remove_timeout(to);
    4512:	f7fe fb9d 	bl	2c50 <remove_timeout>
			ret = 0;
    4516:	2000      	movs	r0, #0
	__asm__ volatile(
    4518:	f384 8811 	msr	BASEPRI, r4
    451c:	f3bf 8f6f 	isb	sy
}
    4520:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4522:	f06f 0015 	mvn.w	r0, #21
    4526:	e7f7      	b.n	4518 <z_abort_timeout+0x1c>

00004528 <z_get_next_timeout_expiry>:
{
    4528:	b510      	push	{r4, lr}
	__asm__ volatile(
    452a:	f04f 0320 	mov.w	r3, #32
    452e:	f3ef 8411 	mrs	r4, BASEPRI
    4532:	f383 8811 	msr	BASEPRI, r3
    4536:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    453a:	f7fe fb9d 	bl	2c78 <next_timeout>
	__asm__ volatile(
    453e:	f384 8811 	msr	BASEPRI, r4
    4542:	f3bf 8f6f 	isb	sy
}
    4546:	bd10      	pop	{r4, pc}

00004548 <z_set_timeout_expiry>:
{
    4548:	b537      	push	{r0, r1, r2, r4, r5, lr}
    454a:	4604      	mov	r4, r0
    454c:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
    454e:	f04f 0320 	mov.w	r3, #32
    4552:	f3ef 8511 	mrs	r5, BASEPRI
    4556:	f383 8811 	msr	BASEPRI, r3
    455a:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    455e:	f7fe fb8b 	bl	2c78 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4562:	2801      	cmp	r0, #1
    4564:	dd05      	ble.n	4572 <z_set_timeout_expiry+0x2a>
    4566:	42a0      	cmp	r0, r4
    4568:	9901      	ldr	r1, [sp, #4]
    456a:	dd02      	ble.n	4572 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    456c:	4620      	mov	r0, r4
    456e:	f7fc fb17 	bl	ba0 <z_clock_set_timeout>
	__asm__ volatile(
    4572:	f385 8811 	msr	BASEPRI, r5
    4576:	f3bf 8f6f 	isb	sy
}
    457a:	b003      	add	sp, #12
    457c:	bd30      	pop	{r4, r5, pc}

0000457e <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    457e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    4580:	f7fe fc64 	bl	2e4c <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    4584:	bd08      	pop	{r3, pc}

00004586 <k_heap_init>:
{
    4586:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    4588:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    458c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    4590:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
    4594:	f7ff bc00 	b.w	3d98 <sys_heap_init>

00004598 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    4598:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00005000 <spm_request_read-0x2fe0>:
	...

00007fe0 <spm_request_read>:
    7fe0:	e97f e97f 	sg
    7fe4:	f7f8 bfe2 	b.w	fac <__acle_se_spm_request_read>

00007fe8 <spm_firmware_info>:
    7fe8:	e97f e97f 	sg
    7fec:	f7f9 b836 	b.w	105c <__acle_se_spm_firmware_info>

00007ff0 <spm_request_random_number>:
    7ff0:	e97f e97f 	sg
    7ff4:	f7fb bfdb 	b.w	3fae <__acle_se_spm_request_random_number>
	...
